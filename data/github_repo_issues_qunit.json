[{"repo_name": "qunitjs/qunit", "issue_id": 1, "url": "https://github.com/qunitjs/qunit/issues/1", "title": "noglobals GET parameter ignored", "contents": "QUnit.init overrides the config var, resetting the noglobals config to false. Since the noglobals get parameter is read before QUnit.init, the noglobals parameter is ignored.", "createdAt": "2009-10-02T14:16:41Z", "updatedAt": "2014-05-31T10:55:47Z", "closedAt": "2009-11-05T13:16:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kassens", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "kassens", "company": "Facebook"}, {"login": "jeresig", "company": "@Khan "}], "comments_count": 1, "comments_data": [{"authorLogin": "jeresig", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-11-05T13:16:44Z", "contents": "This shouldn't be the case any more - please let me know if it's still a problem, though.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 2, "url": "https://github.com/qunitjs/qunit/issues/2", "title": "Test Suite URL Params need their own query string", "contents": "If you use qunit with testswarm it fails to run tests because testswarm adds url params to the tests. So instead of just looking for /test?this is a test, it should be something like /test?t=this is a test", "createdAt": "2009-10-12T14:41:46Z", "updatedAt": "2014-05-31T10:55:47Z", "closedAt": "2009-11-05T13:09:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "RyanS", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "RyanS", "company": null}, {"login": "jeresig", "company": "@Khan "}], "comments_count": 2, "comments_data": [{"authorLogin": "RyanS", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-10-12T15:32:23Z", "contents": "nm, it expects the first param to be the test. Guess I just need to modify the task that adds the testswarm test ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeresig", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-11-05T13:09:46Z", "contents": "I merged in your tweak.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 3, "url": "https://github.com/qunitjs/qunit/issues/3", "title": "module name is not shown", "contents": "When modules are defined, their names do not appear (for me) next to the test names in the output.\nThe config object is defined on line 353, and config is assigned to in QUnit.init. config.currentModule is set in the module function and accessed in the test function. It looks like a different config object is being referenced in each of the different functions.", "createdAt": "2009-10-25T03:48:40Z", "updatedAt": "2009-11-05T13:08:48Z", "closedAt": "2009-11-05T13:08:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "smith", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "smith", "company": "@newrelic"}, {"login": "zhaoz", "company": null}, {"login": "jeresig", "company": "@Khan "}], "comments_count": 3, "comments_data": [{"authorLogin": "zhaoz", "authorAssociation": "NONE", "createdAt": "2009-10-29T20:52:03Z", "contents": "This commit seems to have fixed the issue, although it is untested with asyncTest stuff (which is when this issue was introduced).\nhttp://github.com/zhaoz/qunit/commit/13eec8f1e6dbbde59aa07ee74dd25ca03ba80e87", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "smith", "authorAssociation": "NONE", "createdAt": "2009-10-29T21:00:41Z", "contents": "This does work for me, though I haven't tested it with and asyncTests either.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeresig", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-11-05T13:08:47Z", "contents": "I merged in zhaoz's commit - hopefully this fixes the problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 4, "url": "https://github.com/qunitjs/qunit/issues/4", "title": "The assesrtions inside an QUnit.asyncTest are not evaluated asynchronously", "contents": "Hi!\nAs far as I can understand from the code*, the assertions are always evaluated at the parsing time even if the test is asynchronous. One would expect them to be evaluated at the time QUnit.start() is called.\n\nhttp://github.com/jquery/qunit/blob/master/qunit/qunit.js#L261\nhttp://github.com/jquery/qunit/blob/master/qunit/qunit.js#L279\nhttp://github.com/jquery/qunit/blob/master/qunit/qunit.js#L283", "createdAt": "2009-11-05T13:43:37Z", "updatedAt": "2009-11-15T04:05:09Z", "closedAt": "2009-11-15T04:05:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gurdiga", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gurdiga", "company": null}, {"login": "jeresig", "company": "@Khan "}], "comments_count": 2, "comments_data": [{"authorLogin": "gurdiga", "authorAssociation": "NONE", "createdAt": "2009-11-05T15:33:24Z", "contents": "I misunderstood the thing... the actual and expected values are evaluated when the assertion method (ok, equals, same) is called.\nSorry for the noise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeresig", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-11-15T04:05:09Z", "contents": "That's ok! Let me know if you have any other questions.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 5, "url": "https://github.com/qunitjs/qunit/issues/5", "title": "qunit throws syntax error on Safari 2.0.4", "contents": "It is not possible to use qunit to run tests in the Safari 2.0.4 browser, which is still a Level 2 browser here at the BBC. This is because qunit uses a function declaration pattern that Safari 2.0.4 considers to be a \"syntax error.\"\n// snip\ntest: function test (testName, callback) { // throws error\n}\n\nRewriting those function declarations to be like the following example will allow qunit to run in Safari 2.0.4.\n//snip\ntest: function (testName, callback) { // runs\n}", "createdAt": "2009-11-13T16:37:04Z", "updatedAt": "2009-11-17T11:51:18Z", "closedAt": "2009-11-15T04:27:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "micmath", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "micmath", "company": "BBC"}, {"login": "DBJDBJ", "company": "C++, JavaScript, jQuery, Node.JS, LISP. See @dbj-systems for enterprise stuff, or @compliant-systems  for GDPR particles of solutions."}, {"login": "jeresig", "company": "@Khan "}], "comments_count": 6, "comments_data": [{"authorLogin": "DBJDBJ", "authorAssociation": "NONE", "createdAt": "2009-11-14T01:01:41Z", "contents": "I do not know why are \"named function expressions\" used here,but if they are needed, one can do this :\n\nvar temp;\n...\nvar Qunit = {\ntest: (temp = function test(){ ... }) ;\n...\n}\n...\ntemp = null;\n\nThis is actually quite good for avoiding lekas too ...\n--DBJ", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DBJDBJ", "authorAssociation": "NONE", "createdAt": "2009-11-14T01:02:01Z", "contents": "lekas --> leaks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeresig", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-11-15T04:27:56Z", "contents": "Remove the named function expressions, to stop Safari 2 from freaking out. Closed by f55bf2d.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DBJDBJ", "authorAssociation": "NONE", "createdAt": "2009-11-15T11:10:52Z", "contents": "Good. The only reason I can remember, to use named F expressions, is to be able to \"see\" named (vs anonymous) functions in (visual studio) debugger ...\n--DBJ", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "micmath", "authorAssociation": "NONE", "createdAt": "2009-11-15T12:08:31Z", "contents": "This issue, and a possible solution for Safari 2, is discussed further here, in case anyone is interested: http://yura.thinkweb2.com/named-function-expressions/#named-expr", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DBJDBJ", "authorAssociation": "NONE", "createdAt": "2009-11-17T11:51:18Z", "contents": "I do not think jQuery or (BBC) Glow will ever have \"named function expressions\" inside  ... Sorry for the noise ;o)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 6, "url": "https://github.com/qunitjs/qunit/issues/6", "title": "Add \"start\" callback", "contents": "The browser automation integration callbacks are asymmetric. There's testStart/testDone, moduleStart/moduleDone, but no counterpart for \"done\". It would make sense to have a start callback for the testsuite in total.", "createdAt": "2009-12-21T21:38:33Z", "updatedAt": "2010-07-26T16:12:38Z", "closedAt": "2010-07-26T16:12:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "runeh", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "runeh", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-18T12:12:10Z", "contents": "All the existing callbacks provide some useful argument, what would a start-callback provide?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T16:12:38Z", "contents": "Fixed in http://github.com/jquery/qunit/commit/6e897066b186022991eaa2609daff1cd60e51bde\nAs QUnit.start is already used elsewhere and we didn't want to overload it, its now QUnit.begin.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 7, "url": "https://github.com/qunitjs/qunit/issues/7", "title": "Modify location.search instead of location.href on test double-click", "contents": "Double-clicking a test when the URL has a hash doesn't work as the ?testName is put after the hash. Modifying location.search instead would put it before the hash.", "createdAt": "2009-12-22T03:17:52Z", "updatedAt": "2010-07-26T16:17:16Z", "closedAt": "2010-07-26T16:17:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "eligrey", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "eligrey", "company": "\u03a9F:\u2205"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T16:17:15Z", "contents": "Fixed: http://github.com/jquery/qunit/commit/295540dbd8acd7afc972d7c36f76a5e1c42fa2f3", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 8, "url": "https://github.com/qunitjs/qunit/issues/8", "title": "Failed tests expanded on load", "contents": "For the UI - how do people feel about having tests that have failing items initially set to expanded?  I find when I'm writing tests and code, I'm regularly refreshing content as I tweak items, and would like to not have to click into each failed item.  Was going to add this, but didn't want to without a bit of concensus first - could potentially add a checkbox to toggle the preference?", "createdAt": "2010-01-04T16:24:18Z", "updatedAt": "2010-07-26T16:21:14Z", "closedAt": "2010-07-26T16:21:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "phae", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "phae", "company": null}, {"login": "llimllib", "company": null}, {"login": "NV", "company": "@apple"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "llimllib", "authorAssociation": "NONE", "createdAt": "2010-01-26T18:59:10Z", "contents": "I would like this", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-02-09T20:17:32Z", "contents": "I would like this by default.\nWhile I can not see any progress here, I've made dirty fix for myself:\nol#qunit-tests li.fail ol {\n  display: block !important;\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T16:21:13Z", "contents": "Fixed in http://github.com/jquery/qunit/commit/46c1bbaf351a2aaec7ae40f70b579d625afc14a2", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 9, "url": "https://github.com/qunitjs/qunit/issues/9", "title": "Should have an assertion for locating an item in a list", "contents": "I've found this to be very useful in my work, so I thought I'd share it with you guys.  Sometimes you need to check if a particular item shows up in a list.  This is implemented using underscore.js.  You guys can probably remove that dependency easily enough though.\nqunit.js:296\ncontains: function(a, b, message) {\npush( _.any(a, function(x){ return QUnit.equiv(x, b) }), a, b, message);\n},\nUnfortunately, this prints [object Object] in the test's summary.  Can this be fixed?", "createdAt": "2010-01-31T09:04:46Z", "updatedAt": "2010-07-26T16:23:07Z", "closedAt": "2010-07-26T16:23:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nickretallack", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nickretallack", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T16:23:06Z", "contents": "Assertions like this are useful in some cases, but not generic enough to justify the ovehead.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 10, "url": "https://github.com/qunitjs/qunit/issues/10", "title": "Show diff if equal() or deepEqual() failed", "contents": "Quickly, can you figure out what's wrong here? I don't.", "createdAt": "2010-02-09T18:26:16Z", "updatedAt": "2010-07-26T17:02:50Z", "closedAt": "2010-07-26T17:02:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "NV", "company": "@apple"}, {"login": "jzaefferer", "company": null}, {"login": "leeoniya", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-19T16:10:42Z", "contents": "A full diff library would be overkill, but we'll try to improve the output: http://github.com/jquery/qunit/issues/issue/22", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-07-19T16:15:19Z", "contents": "Overkill for what? User-friendliness? :-)\nSeriously, does size really matter?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-19T21:03:04Z", "contents": "Reopened to investigate integrating this: http://ejohn.org/files/jsdiff.js\nHelp with that is welcome!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leeoniya", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-07-19T22:08:33Z", "contents": "something to look at instead maybe:\nhttp://www.lshift.net/blog/2006/08/15/diff-for-javascript", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T17:02:50Z", "contents": "Fixed in http://github.com/jquery/qunit/commit/86b4cd80c231128895872e2584ece417254fe2f2", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 11, "url": "https://github.com/qunitjs/qunit/issues/11", "title": "Remove `init` function from a global namespace", "contents": "QUnit puts a lot of functions to the global namespace. Most of them (ok, equal, module, is) are OK. But init really bugs me. Can we remove it from the global namespace?", "createdAt": "2010-02-13T22:00:22Z", "updatedAt": "2010-07-26T17:09:45Z", "closedAt": "2010-07-26T17:09:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "NV", "company": "@apple"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T17:09:44Z", "contents": "Fixed in http://github.com/jquery/qunit/commit/7f840adee17d81fed9f05beaff296a371dcc16f7", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 12, "url": "https://github.com/qunitjs/qunit/issues/12", "title": "\"raises\" assertion", "contents": "It would be useful for QUnit to provide an assertion to test for the occurrence of exceptions.\noriginal ticket\npatch", "createdAt": "2010-02-25T10:10:45Z", "updatedAt": "2010-07-26T17:44:12Z", "closedAt": "2010-07-26T17:44:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FND", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "FND", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T17:44:12Z", "contents": "Fixed, though with a somewhat simpler variant: http://github.com/jquery/qunit/commit/1f7e0cb4bddaec03b47daacf996cec0c599203b2", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 13, "url": "https://github.com/qunitjs/qunit/issues/13", "title": "An element's child nodes will be gone under certain circumstances in IE (at least 7 & 8)", "contents": "Consider a test page with a main section as follows:\n<div id=\"main\">\n    <ul>\n        <li>yadda</li>\n    </ul>\n</div>\n\nAnd a test script as follows:\njQuery(function($) {\n    var $elem = $('#main > ul');\n    console.log($elem.children().length);\n    module('blub');\n    test('yadda', function() {\n        console.log($elem.children().length);\n});\n});\n\nOne would expect that this prints two times 1 to the console, which it does in Firefox and Chrome. In Internet Explorer (I've tested 7 & 8) it will print 1 and then 0 though, indicating that the element has somehow been emptied somewhere during starting up test yadda. If I reinforce $elem by putting $elem = $('#main > ul'); in a module setup function, the problem miraculously disappears.", "createdAt": "2010-03-11T23:54:30Z", "updatedAt": "2010-07-22T14:24:31Z", "closedAt": "2010-07-18T18:39:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "timmolendijk", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "timmolendijk", "company": "Journa, Nouncy, Smart.pr"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-18T11:39:22Z", "contents": "Elements inside the #main element get reset after each test run. The inconsistency across browsers is odd, but fine, as you should rely on any selection that ran outside your current test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmolendijk", "authorAssociation": "NONE", "createdAt": "2010-07-22T14:06:50Z", "contents": "Did you mean \"(...) as you should not rely on any selection that ran outside your current test\" ?\nOkay, that's a workable restriction. But I wasn't aware of it. How is one supposed to learn about it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-22T14:24:31Z", "contents": "Yeah, meant what you wrote.\nI need to backport some of the documentation from the jQuery Cookbook chapter on testing to the QUnit documentation.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 14, "url": "https://github.com/qunitjs/qunit/issues/14", "title": "misuse of stop()/start() breaks test independence", "contents": "Accidentally calling start() twice in an asynchronous test can cause the subsequent test to fail nondeterministically. In the code sample below, the first test will always succeed, but the second will sometimes fail because the expected assertion was not run. Obviously, the short answer is that I shouldn't call start() twice, but the fact that one test can break another is still unpleasant. Would it be possible to limit the scope of start() and stop() so they don't leak from one test to another?\n\nasyncTest(\"Test1\", function() {\n    expect(2);\n    setTimeout(function() {\n        ok(true, 'Test1 assertion 1');\n        start();\n    }, 10);\n    setTimeout(function() {\n        ok(true, 'Test1 assertion 2');\n        start();\n    }, 10);\n});\nasyncTest(\"Test2\", function() {\nexpect(1);\nsetTimeout(function() {\nok(true, 'Test2 assertion');\nstart();\n}, 10);\n});", "createdAt": "2010-03-21T00:20:24Z", "updatedAt": "2010-07-19T16:12:27Z", "closedAt": "2010-07-19T16:12:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "csosborn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "csosborn", "company": "CTRL-labs"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-19T16:12:27Z", "contents": "QUnit can't do that for you. If you have multiple places where you need to call start(), you have to synchronize those manullay, eg. have a counter and call start() only when everything was called.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 15, "url": "https://github.com/qunitjs/qunit/issues/15", "title": "dog-fooding qunit", "contents": "I would like for all the private functions to be made public (ex. done(), validTest(), process(), etc.). This would make it an easier chore to start using jquery to unit test the display portion of qunit. Right now the code mixes presentation with testing-logic.", "createdAt": "2010-03-23T04:36:42Z", "updatedAt": "2010-07-27T16:24:45Z", "closedAt": "2010-07-27T00:32:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gutzofter", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gutzofter", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T17:32:52Z", "contents": "Could you provide an example of how exposing those would help?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gutzofter", "authorAssociation": "NONE", "createdAt": "2010-07-27T16:24:45Z", "contents": "@jzaeffer - I'm sorry! I'm no longer advocating for exposure of the functions. What I'm going to argue for is a plug-in extensibility system.\nCase in point:\nfor (var i = 0; i < config.assertions.length; i++) {\nvar assertion = config.assertions[i];\n    var li = document.createElement(\"li\");\n    li.className = assertion.result ? \"pass\" : \"fail\";\n    li.appendChild(document.createTextNode(assertion.message || \"(no message)\"));\n    ol.appendChild(li);\n\n    if (assertion.result) {\n        good++;\n    } else {\n        bad++;\n        config.stats.bad++;\n        config.moduleStats.bad++;\n    }\n}\n\nThis code here mixes the test result management with presentation.\nIn your code base: test storage, test runner, test results, and presentation (even some profiling) are all mixed together.\nWhat I would like to recommend that all these be made plug-ins, with the capabilities to wrap core function.\nHere is a unit test that I have for an Ajax request:\nshould('show kits list when [delete] clicked after clicking on row from kits list', function() {\n    var origAjax = $.ajax;\n    var testData = {};\n    $.ajax = function(data) {\n        testData = data;\n    };\n    $('#kits_tbl tbody tr :first').click();\n    $('#delete_edit').click();\n    same(testData.data, 'type=remove&kit_number=THX-1138&kit_description=A+Doohickey+used+on+Jaberwockies');\n\n    var response = {};\n    response.status = 'success';\n    testData.success(response); // process edit\n\n    testData.success(myKitsListContent); // reload content\n    $.ajax = origAjax;\n\n    isListVisible();\n\n});\n\nIn this test I'm able to wrap the $.ajax function in jquery and utilize my own. This allow me to extend ajax functionality. With this capabilty now I can insert monitoring sensing data/callbacks to ajax.\nYou can do the same with plug-ins for qunit.\nA unit tester only has one concern did my assertions pass or fail. More repsonsibility on the unit tester is too much!\nSo instead of qunit keeping track of execution time of tests, you can create a plug-in that wraps tests and will keep track of the time of execution.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 16, "url": "https://github.com/qunitjs/qunit/issues/16", "title": "start configuration", "contents": "when the page initially displays it has the 'Hide passed tests' check-box unchecked. It would be more in-line with TDD to have it checked initially. How the hell did this get closed.", "createdAt": "2010-03-23T04:40:20Z", "updatedAt": "2010-03-24T03:59:23Z", "closedAt": "2010-03-23T04:40:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gutzofter", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "gutzofter", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 17, "url": "https://github.com/qunitjs/qunit/issues/17", "title": "qunit.js raises 1 JS error and 2 JS warnings in Eclipse", "contents": "Hello,\nIty is a minot thing but today I found that:\nCOMPLAINS THAT \"Syntax Error on token Undefined\"\n    parsers:{\n        window: '[Window]',\n        document: '[Document]',\n        error:'[ERROR]', //when no parser is found, shouldn't happen\n        unknown: '[Unknown]',\n        'null':'null',\n        undefined:'undefined',                                 COMPLAINS THAT \"Syntax Error on token Undefined\"\n        'function':function( fn ) {\n\nAlso warnging for missing \";\" at:\nnumber:literal,\n'boolean':literal\n},\nDOMAttrs:{//attributes to dump from nodes, name=>realName\nid:'id',\nname:'name',\n'class':'className'\n},\nHTML:false,//if true, entities are escaped ( <, >, \\t, space and \\n )\nindentChar:'   ',//indentation unit\nmultiline:false //if true, items in a collection, are separated by a \\n, else just a space.\n};\nAlso\n\"// Load paramaters\" should be \"//Load parameters\"\n\"    * Prefered to ok( actual == expected, message )\" should be\n\"    * Preffered to ok( actual == expected, message )\"", "createdAt": "2010-05-17T09:08:36Z", "updatedAt": "2010-07-26T19:21:56Z", "closedAt": "2010-07-27T00:33:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gaddlord", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gaddlord", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T17:33:46Z", "contents": "Can you be more specific about \"in Eclipse\"? I don't see any actual issue here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gaddlord", "authorAssociation": "NONE", "createdAt": "2010-07-26T19:21:56Z", "contents": "I use Aptana as Eclipse plugin. If I enable JSLint (jslint.com) plugin it complains about \"undefined\" not being a valid object object property.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 18, "url": "https://github.com/qunitjs/qunit/issues/18", "title": "add \"notequals\" assertion", "contents": "It would be nice if we could test for inequality.", "createdAt": "2010-05-19T03:51:42Z", "updatedAt": "2010-05-19T07:29:32Z", "closedAt": "2010-05-19T07:29:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gminuses", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "gminuses", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "gminuses", "authorAssociation": "NONE", "createdAt": "2010-05-19T07:29:32Z", "contents": "Oh, how silly I was, I can just use \"ok(a !== b)\"\nPlease delete this ticket. Sorry.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 19, "url": "https://github.com/qunitjs/qunit/issues/19", "title": "QUnit.reset() removes global jQuery ajax event handlers", "contents": "While testing my global ajax event support library, found the following problem.\nGlobal jQuery ajax event handlers will be \"unbound\" after the firs test() has completed.\nI do something like this in my library:\njQuery(document).ajaxStart(function() { /* do something */ })\nThis seems to be the cause of the problem in qunit.js reset() :\njQuery.event.global = {};", "createdAt": "2010-06-01T08:28:50Z", "updatedAt": "2010-07-27T09:29:58Z", "closedAt": "2010-07-27T09:29:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "salomvary", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "salomvary", "company": "Freelance"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-27T09:29:58Z", "contents": "Fixed in http://github.com/jquery/qunit/commit/3e6f3dfcc7ed96ed68c7b22a593916a52205d3e8", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 20, "url": "https://github.com/qunitjs/qunit/issues/20", "title": "Async setup and teardown", "contents": "Guys,\nI've had to run some async code on my setup and teardown methods but QUnit wasn't handling it properly.\nHere's a simple patch to make it run and the corresponding test cases:\nhttp://github.com/fgrehm/qunit/compare/2dbf6037778266fa01a1...master", "createdAt": "2010-06-14T17:15:46Z", "updatedAt": "2010-07-15T16:07:23Z", "closedAt": "2010-07-15T16:07:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fgrehm", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "fgrehm", "company": "@doximity "}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-15T16:07:23Z", "contents": "Fixed in http://github.com/jquery/qunit/tree/8af74d05cd412bd87f4aa80c3316cd95087d728c", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 21, "url": "https://github.com/qunitjs/qunit/issues/21", "title": "not*Equal should show both args in success case (and possibly one in fail case)", "contents": "E.g. strictEqual gives both args, if the comparison fails. But f there is a notStrictEqual comparison, it would be interesting to know both arg vals in the success case, since they differ then (in opposite to strictEqual). In the fail case one arg would be sufficient for nonStrictEqual (similar to strictEqual in the success case): but then there are two same values...\nIn this sense the not*Equal comparison variants are complement to their opposite - without 'not' at the beginning - ones.", "createdAt": "2010-07-14T23:18:29Z", "updatedAt": "2010-07-16T23:22:23Z", "closedAt": "2010-07-15T22:48:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hartrock", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hartrock", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-15T15:48:08Z", "contents": "Fixed: http://github.com/jquery/qunit/commit/ecbf9b5d46f6e9b62a164917b40dfaa71c4836df\nMakes the code actually simpler, and there is no reason not to output just both.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hartrock", "authorAssociation": "NONE", "createdAt": "2010-07-16T23:22:23Z", "contents": "I like this solution: e.g. good for seeing if there has been type conversion.\nThanks for the quick improvement!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 22, "url": "https://github.com/qunitjs/qunit/issues/22", "title": "Output long expected/actual values with fixed-width font and next to each other", "contents": "A full diff library would be overkill, but the current output could be improved to make it more readable and easier to see differences.", "createdAt": "2010-07-19T16:10:18Z", "updatedAt": "2010-09-13T18:46:07Z", "closedAt": "2010-07-20T04:03:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-19T21:03:13Z", "contents": "nevermind", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 23, "url": "https://github.com/qunitjs/qunit/issues/23", "title": "Double-clicking test title shows all tests for a given module (change seems in rev 138)", "contents": "I think this is a regression error, as before double clicking a test title would only display that test (provided the title string was unique). Now double clicking on a test title shows all the tests for that module.\nReduced test case here (http://dl.dropbox.com/u/232025/reduction.html), drop in to qunit src directory.\nThanks J\u00f6rn!", "createdAt": "2010-07-20T09:40:18Z", "updatedAt": "2010-07-26T17:51:01Z", "closedAt": "2010-07-26T17:51:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "andybeeching", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "andybeeching", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-26T17:51:00Z", "contents": "There were a few changes to the filtering logic, seems to be fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 24, "url": "https://github.com/qunitjs/qunit/issues/24", "title": "BlackBerry 5.0 and stop()", "contents": "In unit testing jQuery hashchange event in BlackBerry 4.6.1 and 5.0, I found that the tests would only run all the way through in 5.0 if I called QUnit.stop() explicitly instead of just stop().\nI only mention this in case jQuery mobile will be tested in BlackBerry 5.0 with QUnit. See the commit if you're curious.", "createdAt": "2010-07-20T19:45:39Z", "updatedAt": "2010-07-29T07:24:59Z", "closedAt": "2010-07-29T07:24:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cowboy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cowboy", "company": "@toasttab "}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-22T18:02:37Z", "contents": "Odd and interesting. Probably to be expected for a browser where John has named the engine \"CrazyTown\".\nIt sounds like stop() is a global method with a different functionality, read-only so that the QUnit definition doesn't affect it. Good to know that namespacing it helps, need to document that somewhere.\nIn your commit you mentioned \"issues\", was there something else worth mentioning?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2010-07-22T18:11:13Z", "contents": "J\u00f6rn, that's the only issue I remember now. It might have felt like more, just dealing with all the quirks of the BlackBerry browser... for example, check this issue out. Good times.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2010-07-22T18:22:42Z", "contents": "Here's a screenshot of this fiddle confirming your suspicion that stop is a native function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-29T07:24:58Z", "contents": "I've added a note about the issue in the docs: http://docs.jquery.com/QUnit/stop\nDon't know what else to do about, so closing this issue for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 25, "url": "https://github.com/qunitjs/qunit/issues/25", "title": "Output is broken", "contents": "http://elv1s.ru/x/qunit/equals.html", "createdAt": "2010-07-21T21:44:48Z", "updatedAt": "2010-07-22T12:17:10Z", "closedAt": "2010-07-22T12:17:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "NV", "company": "@apple"}, {"login": "leeoniya", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "leeoniya", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-07-21T22:17:44Z", "contents": "yeah...discussed here: http://github.com/jquery/qunit/commit/9c5a8db1db279c473fd3d61675312c18a7a170d7#commitcomment-112441", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-22T12:17:10Z", "contents": "Sorry about that, fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 26, "url": "https://github.com/qunitjs/qunit/issues/26", "title": "optimize css selectors", "contents": "definitely something minor but the css selectors can be made more efficient and readable\nol#qunit-tests li li.fail span.test-actual =\n#qunit-tests .fail .test-actual", "createdAt": "2010-07-22T15:05:23Z", "updatedAt": "2010-07-29T13:24:09Z", "closedAt": "2010-07-29T13:24:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leeoniya", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "leeoniya", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-22T15:15:37Z", "contents": "The whole CSS file is quite bad. I don't care enough, but I'd merge if you're willing to clean it up.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leeoniya", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-07-22T15:25:25Z", "contents": "...yeah at some point. just opened this to track it for the time being.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-07-29T13:24:09Z", "contents": "Fixed in http://github.com/jquery/qunit/commit/dbd620950c9eb4c0189acf4c3a0edc55c3fbd700", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 27, "url": "https://github.com/qunitjs/qunit/issues/27", "title": "Array equality fails", "contents": "The following assertion fails, and shouldn't.  :)\nequals([\"a\"], [\"a\"], \"arrayfail\");\n\nHere's a complete HTML file in case that makes it easier:\n<html>\n<head>\n  <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"qunit.css\" type=\"text/css\" media=\"screen\" />\n  <script type=\"text/javascript\" src=\"qunit.js\"></script>\n</head>\n<body>\n    <h1 id=\"qunit-header\">Repro</h1>\n    <h2 id=\"qunit-banner\"></h2>\n    <h2 id=\"qunit-userAgent\"></h2>\n    <ol id=\"qunit-tests\"></ol>\n<script>\n    $(document).ready(function(){\n        test(\"array equality\", function() {\n            expect(1);\n            equals([\"a\"], [\"a\"], \"a=a\");\n        });\n    });\n    </script>\n\n</body>\n</html>", "createdAt": "2010-08-08T09:58:21Z", "updatedAt": "2014-01-07T15:25:55Z", "closedAt": "2010-08-09T00:29:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdw", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rdw", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "rdw", "authorAssociation": "NONE", "createdAt": "2010-08-08T10:17:12Z", "contents": "I realize that [\"a\"] == [\"a\"] evaluates to false, so qunit is just passing along whatever design decision lead to that situation in the javascript language.  But it seems that people are going to want to make assertions about the value of arrays in the test suite (as I did).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-08-08T17:29:05Z", "contents": "Use deepEqual (formerlay same) to compare arrays. The equal (formerly equals) assertion only compares references in this case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdw", "authorAssociation": "NONE", "createdAt": "2010-08-09T05:43:09Z", "contents": "Derp, thanks!  Shows me what good comes of coding at 3am.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 29, "url": "https://github.com/qunitjs/qunit/issues/29", "title": "Output location in addition to useragent for rerunning tests", "contents": "It would be handy to get the URL into the markup when looking at results in TestSwarm, which are just static html. In order to interact with the results, I'd want to rerun the test in that browser, and would want to have the URL that TestSwarm used.", "createdAt": "2010-08-25T16:38:26Z", "updatedAt": "2010-08-29T18:04:48Z", "closedAt": "2010-08-29T18:04:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-08-29T18:04:47Z", "contents": "Fixed: http://github.com/jquery/qunit/commit/abfab1713ccb588aa87136b199a9ddc8d1b56c4b", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 30, "url": "https://github.com/qunitjs/qunit/issues/30", "title": "Docs page failing", "contents": "See\nhttp://img529.imageshack.us/img529/5835/picture6rk.png", "createdAt": "2010-08-25T20:30:50Z", "updatedAt": "2010-08-26T09:14:50Z", "closedAt": "2010-08-26T09:14:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fernandezpablo85", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fernandezpablo85", "company": "@despegar "}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-08-26T09:14:50Z", "contents": "The wiki has been locked down, but the DB is still getting hammered. Should get resolved soon, our infrastructure team is on it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 31, "url": "https://github.com/qunitjs/qunit/issues/31", "title": "Output exception stacktrace", "contents": "Currently exceptions will get logged to the console, if available, making the stacktrace browsable (at least in Firebug). When browsing scraped test results or no console is available, that isn't available, so a static output would be useful.", "createdAt": "2010-08-27T18:32:32Z", "updatedAt": "2010-11-03T15:17:12Z", "closedAt": "2010-11-03T15:17:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-03T15:17:12Z", "contents": "Dump full exception. Not pretty, but functional (see issue Pretty diff for pretty output). Closed by ff7917f", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 32, "url": "https://github.com/qunitjs/qunit/issues/32", "title": "QUnit.log outputs HTML, but it shouldn't", "contents": "QUnit.log = function(a, msg){\n  console.log(msg)\n}\n\ntest(\"some test\", function(){\n  equals(1, 2);\n});\nConsole:\n<span class=\"test-message\">undefined</span>, expected: <span class=\"test-expected\">2</span> result: <span class=\"test-actual\">1</span>, diff: <del>2 </del><ins>1 </ins>\nI'm using qunit-tap and it outputs HTML into terminal.", "createdAt": "2010-09-01T13:12:15Z", "updatedAt": "2010-11-03T15:46:39Z", "closedAt": "2010-11-03T15:46:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "NV", "company": "@apple"}, {"login": "FND", "company": null}, {"login": "benjaminplee", "company": "World Wide Technology - Asynchrony Labs"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "FND", "authorAssociation": "NONE", "createdAt": "2010-09-04T13:09:57Z", "contents": "I've had similar issues with Kopfloss, where I ended up using some hacky string replacements to get rid of that markup.\nI agree it would be nice if that wasn't necessary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benjaminplee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-02T01:17:45Z", "contents": "I agree.  I am working on refactoring out the output formatting to a separate object so that a new one for Ant/JUnit style output (or whatever flavor) can easily be created.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-03T15:46:39Z", "contents": "Pass raw data (result, message, actual, expected) as third argument to QUnit.log. Closed by c2cde34", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 33, "url": "https://github.com/qunitjs/qunit/issues/33", "title": "QUnit.moduleDone logs bogus module at start", "contents": "If module() is used from the beginning, there is one bogus log entry with that name of the last module and stats all at zero. If module() isn't used before the first test, those tests get grouped into a log entry, again with the name of the last module().\nThe issue lies in the fact that test() accesses config.currentModule for determining whether to run the current test or not. Therefore module() has to assign config.currentModule twice: Once before and once within the synchronizer. The check within the synchronized-module() code wrongly assumes that config.currentModule is undefined for the first module().", "createdAt": "2010-09-03T11:00:27Z", "updatedAt": "2010-11-03T16:13:10Z", "closedAt": "2010-11-03T16:13:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-03T16:13:10Z", "contents": "Fix for QUnit.moduleDone, get rid of initial bogus log. Closed by d43757f", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 36, "url": "https://github.com/qunitjs/qunit/issues/36", "title": "Document all assertions", "contents": "deepEqual, notEqual etc. aren't documented  - see http://docs.jquery.com/QUnit", "createdAt": "2010-09-06T18:42:36Z", "updatedAt": "2018-12-22T20:38:41Z", "closedAt": "2010-11-12T14:41:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-12T14:41:20Z", "contents": "Fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 39, "url": "https://github.com/qunitjs/qunit/issues/39", "title": "Custom matchers", "contents": "Would be great to define custom matchers like this:\nQUnit.sameOwnProperties = function(actual, expected, message) {\n  QUnit._push(myCompare(actual, expected), actual, expected, message);\n}\n\nTo do that we have to move push function from the closure into QUnit._push (or QUnit.push, whatever).", "createdAt": "2010-09-13T18:56:59Z", "updatedAt": "2010-11-03T14:51:43Z", "closedAt": "2010-11-03T14:51:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "NV", "company": "@apple"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-03T14:51:43Z", "contents": "Expose push as QUnit.push to build custom assertions. Closed by 5fb42a8", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 41, "url": "https://github.com/qunitjs/qunit/issues/41", "title": "Commenting inside tests", "contents": "Hi,\nIt would be nice, if there was some function to create comments inside the test, e.g.:\nmodule('User List');\ntest('single user', function () {\n    info('Creating new User'); // <-- new function here\n    var user = new User('Chris');\n    equals(typeof user, 'object', 'new User has been created');\n    equals(user.name, 'Chris', 'User name is correct');\n\n    info('Hovering User'); // <-- new function here\n    // etc.\n});\n\nIt is sometimes useful to make a comment about what is happening before specific assertion. It also makes it quicker to find possible mistake. I know that one can use:\nok(true, 'Creating new User');\nBut disadvantage of the above approach is, that these type of comments are mixed with informations from assertions and harder to find,  the comments are also counted to passed tests and have to be included in value passed to the 'expect()' function.\nI made it working in quick and very dirty way in my copy of QUnit, but it would be nice, if this function was included to the main copy.\nI'm, personally, using following style to distinguish those comments:\n#qunit-tests li li.info {\n    color: blue;\n    background-color: #fff;\n    border-left: 13px solid blue;\n}\n\nBest regards,\nChrisRaven", "createdAt": "2010-09-29T20:29:35Z", "updatedAt": "2010-11-03T14:39:46Z", "closedAt": "2010-11-03T14:39:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ChrisRaven", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ChrisRaven", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-03T14:39:46Z", "contents": "Can you give a more complete example of what your tests look like? It seems like your granularity is mixed up, and you should have more tests to get rid of the need of these info-calls.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 42, "url": "https://github.com/qunitjs/qunit/issues/42", "title": "\"too much recursion\" problem", "contents": "Hi,\nWhen I have following objects and test, I get \"too much recursion\" error in FF (probably in other browsers too):\nfunction ElemList() {\n    this.elements = {};\n    this.selected = null;\n}\n\nElemList.prototype.addElement(data) {\n    var\n        element = new Element(data, this);\n\n    this.elements[data.id] = element;\n};\n\nElemList.prototype.selectElement(id) {\n    this.selected = this.elements[id];\n};\n\nfunction Element(data, parent) {\n    this.data = data;\n    this.parent = parent;\n}\n\ntest('selection', function () {\n    var\n        elemList = new ElemList();\n\n    elemList.addElement({id:'id1'});\n    elemList.selectElement('id1');\n    same(elemList.selected, elemList.elements['id1'], 'Selected correctly');\n});\n\nThe problem is of course, that \"element.parent\" indicates \"elemList\", and \"elemList.topics\" includes pointer to \"element\", and in this point the circular reference starts. But in program it is perfectly valid (it works in production code), error only appears during testing. The problem is, because the 'same()' function makes deep comparison and follows all pointers, which is a problem in the above example. Maybe adding some mechanism to detect this kind of code would be useful.\nBest regards,\nChrisRaven", "createdAt": "2010-10-01T15:12:38Z", "updatedAt": "2010-10-01T17:19:38Z", "closedAt": "2010-10-01T23:00:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ChrisRaven", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ChrisRaven", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "prathe", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-10-01T16:00:01Z", "contents": "How about just using equals to compare the two elements?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ChrisRaven", "authorAssociation": "NONE", "createdAt": "2010-10-01T16:19:53Z", "contents": "This is a little bit strange, but equals also throws \"too much recursion\" error. However\nok(elemList.selected == elemList.elements['id1'], 'Selected correctly');\n\nand\nok(elemList.selected === elemList.elements['id1'], 'Selected correctly');\n\nboth works correct.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-10-01T17:19:38Z", "contents": "If any assertion throw a \"too much recursion\" that is because jsDump does not handle circular references.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 44, "url": "https://github.com/qunitjs/qunit/issues/44", "title": "Make reset work without jQuery", "contents": "Currently the reset implementation relies on jQuery's html-method. As reset does nothing without jQuery being present, all the qunit-fixture stuff is pretty useless.", "createdAt": "2010-10-31T15:55:56Z", "updatedAt": "2010-11-01T11:58:58Z", "closedAt": "2010-11-01T11:58:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "jeresig", "company": "@Khan "}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-10-31T15:59:27Z", "contents": "See http://github.com/jquery/qunit/blob/master/qunit/qunit.js#L407", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeresig", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-10-31T16:11:03Z", "contents": "Why not just use .innerHTML for when jQuery isn't available in the page? Also can we quantify what exactly the problems are with the test suites? I'm assuming that it has to do with bound events not being reset?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-10-31T16:14:09Z", "contents": "Yeah, something like that, have to investigate. Opened this ticket mostly to remind myself to fix it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-01T11:58:58Z", "contents": "Reset: Fall back to innerHTML when jQuery isn't available. Closed by 22a0b9b", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 45, "url": "https://github.com/qunitjs/qunit/issues/45", "title": "Outdated Documentation", "contents": "Unfortunately the example at http://docs.jquery.com/QUnit#source is out of date. You simply have to update the body according to https://github.com/jquery/qunit/blob/master/test/index.html to make the example working. I would have updated the page if it were a wiki...", "createdAt": "2010-11-03T18:21:47Z", "updatedAt": "2010-11-05T21:06:59Z", "closedAt": "2010-11-04T18:04:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mpfau", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mpfau", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-03T19:34:21Z", "contents": "Is it just the missing toolbar element, or anything else you are referring to?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-04T11:04:58Z", "contents": "Added the toolbar element to the documentation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mpfau", "authorAssociation": "NONE", "createdAt": "2010-11-05T21:06:59Z", "contents": "no, it was just the missing toolbar. Thanks for your instant response!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 46, "url": "https://github.com/qunitjs/qunit/issues/46", "title": "Uncaught TypeError: Cannot read property 'checked' of null", "contents": "A recent commit seems to result in a type error:\nUncaught TypeError: Cannot read property 'checked' of null (line 676)\nAs a result, tests are not run, but 'stuck' on the first test() call. This is happening in all the browsers I tried (IE8, FF3, Chrome, etc).\nTo repro:\n1 goto http://docs.jquery.com/Qunit\n2 note the first test in the QUnit example is halted at 'Running a basic test example'.\nIt looks like this is related to #45, because the adding the toolbar element to the html template resolved the error in my unit tests. e.g.", "createdAt": "2010-11-04T01:29:34Z", "updatedAt": "2010-11-04T09:32:22Z", "closedAt": "2010-11-04T09:32:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "twalker", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "twalker", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-04T09:32:22Z", "contents": "Make the toolbar element optional when checking for show/hide of test results. Closed by 05ae276", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 47, "url": "https://github.com/qunitjs/qunit/issues/47", "title": "Persist \"Hide passed tests\" checkbox state across test runs", "contents": "Figure out a way to make the setting persistent, similar to the Eclipse JUnit runner. When enabled, you don't see successful tests at all. Summary is enough to ensure that tests were ran at all.", "createdAt": "2010-11-04T09:36:41Z", "updatedAt": "2011-01-12T20:23:32Z", "closedAt": "2011-01-12T20:23:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "NV", "company": "@apple"}], "comments_count": 3, "comments_data": [{"authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-04T10:04:31Z", "contents": "Would be nice to see this setting turned on by default.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-04T10:19:29Z", "contents": "As you could still opt out by dropping the toolbar element, having it on by default should work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-12T20:23:32Z", "contents": "Always show quni-toolbar (if at all specified), persist checkbox via\nsessionStorage. Closed by 074e291", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 48, "url": "https://github.com/qunitjs/qunit/issues/48", "title": "Drop \"Hide missing tests\" toolbar feature", "contents": "Was built for jQuery UI, where it isn't used anyway. Too much overhead for very little to no value.", "createdAt": "2010-11-04T09:38:30Z", "updatedAt": "2010-11-27T16:12:03Z", "closedAt": "2010-11-27T16:12:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-27T16:12:03Z", "contents": "Drop 'hide missing tests' feature. Closed by 7317cf6", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 49, "url": "https://github.com/qunitjs/qunit/issues/49", "title": "Test reordering for faster results", "contents": "After a testrun with failing tests, the next run could provide useful results faster by running the failed tests first. Within the two categories, failed and passed, tests could be ordered by runtime, running tests that take less time first.\nNeed to figure something out to gather the necessary stats and persist them. Idea: Hidden input/textarea, filled with joined-array of testname|pass/fail|runtime, eg. \"jsDump.parse|pass|12\". Read that before running tests again, eg. in QUnit.init().\nNon-browser runtimes would require a different storage, so the persistance should be abstracted.", "createdAt": "2010-11-04T09:43:28Z", "updatedAt": "2010-12-05T11:38:16Z", "closedAt": "2010-12-05T11:38:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-27T16:13:22Z", "contents": "Instead of reordering the actual results, try to defer execution of low-priority tests, eg. by having the test call synchronize again to put itself at the end of the queue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-12-05T11:38:15Z", "contents": "Defer test execution when previous run passed, persisted via sessionStorage. Closed by f32d1c9", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 51, "url": "https://github.com/qunitjs/qunit/issues/51", "title": "Update API docs", "contents": "equals => equal, same => deepEqual", "createdAt": "2010-11-04T14:23:21Z", "updatedAt": "2018-12-22T20:38:24Z", "closedAt": "2010-11-12T14:43:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-12T14:43:28Z", "contents": "Fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 52, "url": "https://github.com/qunitjs/qunit/issues/52", "title": "expect() broken", "contents": "The expect() code runs too late now, see http://forum.jquery.com/topic/latest-version-no-longer-fails-on-mismatched-expected#14737000001570197", "createdAt": "2010-11-05T09:29:40Z", "updatedAt": "2010-11-05T10:51:42Z", "closedAt": "2010-11-05T10:51:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-05T10:51:42Z", "contents": "Moved expect-code back to beginning of function, where it belongs. Closed by 25e4489", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 53, "url": "https://github.com/qunitjs/qunit/issues/53", "title": "QUnit.done gets called too often, at least outside the browser", "contents": "Must be called only at the end of running the suite.", "createdAt": "2010-11-08T09:23:38Z", "updatedAt": "2010-11-27T15:09:42Z", "closedAt": "2010-11-27T15:09:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "benjaminplee", "company": "World Wide Technology - Asynchrony Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "benjaminplee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-27T05:03:17Z", "contents": "Resolved on my consistent-checks branch by removing extra call. #59", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-27T15:09:42Z", "contents": "Fixed in c5443a0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 54, "url": "https://github.com/qunitjs/qunit/issues/54", "title": "Example for mocking", "contents": "Provide an example for mocking with QUnit, eg. via mockjax", "createdAt": "2010-11-09T14:44:56Z", "updatedAt": "2018-12-22T20:38:17Z", "closedAt": "2011-08-05T12:02:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 55, "url": "https://github.com/qunitjs/qunit/issues/55", "title": "Example of simulate plugin with QUnit", "contents": "Maybe even bundle simulate with QUnit - at least make it a proper plugin with a release and docs.", "createdAt": "2010-11-09T14:45:55Z", "updatedAt": "2018-12-22T20:38:10Z", "closedAt": "2011-08-05T12:03:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T12:03:32Z", "contents": "Duplicate of #73", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 56, "url": "https://github.com/qunitjs/qunit/issues/56", "title": "Running on serverside", "contents": "Currently QUnit still has various calls to window.setTimeout/Interval, those need to be removed/replaced/checked.\nOne of them may be a bit harder to get rid of:\njs: \"../qunit/qunit.js\", line 1021: Java class \"[B\" has no public instance field or method named \"setInterval\".\n    at ../qunit/qunit.js:1021\n    at ../qunit/qunit.js:1002\n    at ../qunit/qunit.js:1085\n    at ../qunit/qunit.js:1085\n    at ../qunit/qunit.js:1085\n    at ../qunit/qunit.js:110\n    at ../qunit/qunit.js:712 (process)\n    at ../qunit/qunit.js:304\n    at suite.js:84", "createdAt": "2010-11-16T21:01:38Z", "updatedAt": "2012-02-15T16:55:18Z", "closedAt": "2012-02-15T16:55:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "benjaminplee", "company": "World Wide Technology - Asynchrony Labs"}, {"login": "huntc", "company": "Titan Class P/L"}, {"login": "clayton", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "benjaminplee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-17T03:35:23Z", "contents": "It looks to be a problem w/ marshaling real java objects to java. I am looking into this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benjaminplee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-26T21:59:52Z", "contents": "Issue is rooted in how QUnit handles the QUnit test which includes a setTimeout in the actual test code.  QUnit attempts to build an error message using the error object by calling jsDump.  Rhino's reference error includes a reference to the internal Rhino error that was thrown which has a reference to what looks like a byte array.  When jsDump is called again on this byte array the error above is thrown.\nNot sure yet how to solve without adding Rhino specific code to QUnit.\nObvious solutions is to make the QUnit test only execute if setTimeout is defined, but this doesn't solve the bigger issue of how jsdump traverses errors thrown in rhino.\nA better solution might be enhancing the \"error\" parser in jsdump to output the error's message, line number ets, and have the calling code include the type value of \"error\" so that jsdump doesn't need to try and determine it internally.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benjaminplee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-27T05:02:39Z", "contents": "Resolved on my consistent-checks branch.  Pull request sent. #59", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-27T14:22:21Z", "contents": "Fixed by d5581ab", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2011-06-09T02:54:39Z", "contents": "Are we sure that this problem is fixed for setInterval? I'm getting the following message given the latest code on the master branch:\nInternalError: Java class \"[B\" has no public instance field or method named \"setInterval\". (http://localhost:8080/js/com/jquery/qunit/25e4489/qunit-25e4489.js#1177)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-06-09T09:46:16Z", "contents": "@huntc: Can you provide a testcase? Running the QUnit testsuite with Rhino works fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2011-06-21T00:14:15Z", "contents": "Hey there - I'm sorry, I've got caught up in stuff... I'll try putting something together v. soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T12:02:28Z", "contents": "@huntc: Still there? :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "clayton", "authorAssociation": "NONE", "createdAt": "2011-10-28T17:35:14Z", "contents": "I am receiving this same error while using QUnit and Sinon to test my Backbone.js application.\nMy Test\nmodule('BackboneView', {\n  setup:function(){\n    this.myModel = new Backbone.Model;\n    this.bindSpy = sinon.spy(this.myModel, \"bind\");\n    this.myView = new Backbone.View({model:this.myModel});\n  },\n  teardown:function(){\n    this.myModel.bind.restore();\n  }\n});\n\ntest('Binds to a change of the foo attribute', function() {\n  ok(this.bindSpy.calledWith(\"change:foo\", this.myView.render));\n});\nThe Implementation\nwindow.myView = Backbone.View.extend({\n  initialize: function(){\n    _.bindAll(this, 'render');\n    this.model.bind(\"change:foo\", this.render);\n  },\n});\nWhen I run my ant build which uses Rhino I get a stack trace like this:\n[qunit] ERROR QUnitTestRunner - Exception encountered whilst executing file: /Users/clayton/example/myView.test.js\n[qunit] org.mozilla.javascript.EvaluatorException: Java class \"[B\" has no public instance field or method named \"setInterval\". (/js/qunit.js#1027)\n[qunit]     at org.mozilla.javascript.DefaultErrorReporter.runtimeError(DefaultErrorReporter.java:109)\n[qunit]     at org.mozilla.javascript.Context.reportRuntimeError(Context.java:938)\n[qunit]     at org.mozilla.javascript.Context.reportRuntimeError(Context.java:994)\n[qunit]     at org.mozilla.javascript.Context.reportRuntimeError2(Context.java:964)\n[qunit]     at org.mozilla.javascript.NativeJavaArray.get(NativeJavaArray.java:103)\n[qunit]     at org.mozilla.javascript.ScriptableObject.getProperty(ScriptableObject.java:1617)\n[qunit]     at org.mozilla.javascript.ScriptRuntime.getObjectProp(ScriptRuntime.java:1437)\n[qunit]     at org.mozilla.javascript.ScriptRuntime.getObjectProp(ScriptRuntime.java:1423)\n[qunit]     at org.mozilla.javascript.Interpreter.interpretLoop(Interpreter.java:3027)\n[qunit]     at script(/js/qunit.js:1027)\n[qunit]     at script(/js/qunit.js:1008)\n[qunit]     at script(/js/qunit.js:1091)\n[qunit]     at script(/js/qunit.js:1011)\n[qunit]     at script(/js/qunit.js:1091)\n[qunit]     at script(/js/qunit.js:1011)\n[qunit]     at script(/js/qunit.js:1091)\n[qunit]     at script(/js/qunit.js:1011)\n[qunit]     at script(/js/qunit.js:111)\n[qunit]     at script.process(/js/qunit.js:718)\n[qunit]     at script.synchronize(/js/qunit.js:709)\n[qunit]     at script(/js/qunit.js:102)\n[qunit]     at script(sinon-qunit.js:60)\n[qunit]     at script(myView.test.js:XX)\n[qunit]     at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:2487)\n[qunit]     at org.mozilla.javascript.InterpretedFunction.call(InterpretedFunction.java:164)\n[qunit]     at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:398)\n[qunit]     at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3065)\n[qunit]     at org.mozilla.javascript.InterpretedFunction.exec(InterpretedFunction.java:175)\n[qunit]     at org.mozilla.javascript.Context.evaluateReader(Context.java:1135)\n[qunit]     at com.eddgrant.qtr.QUnitTestRunner.executeJavaScriptFiles(QUnitTestRunner.java:245)\n[qunit]     at com.eddgrant.qtr.QUnitTestRunner.executeTestRecipeFile(QUnitTestRunner.java:142)\n[qunit]     at com.eddgrant.qtr.QUnitTestRunner.runTests(QUnitTestRunner.java:69)\n[qunit]     at com.eddgrant.qtr.QUnitTestRunnerTask.execute(QUnitTestRunnerTask.java:54)\n[qunit]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n[qunit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[qunit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[qunit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[qunit]     at java.lang.reflect.Method.invoke(Method.java:597)\n[qunit]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n[qunit]     at org.apache.tools.ant.Task.perform(Task.java:348)\n[qunit]     at org.apache.tools.ant.Target.execute(Target.java:390)\n[qunit]     at org.apache.tools.ant.Target.performTasks(Target.java:411)\n[qunit]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n[qunit]     at org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n[qunit]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[qunit]     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n[qunit]     at org.apache.tools.ant.Main.runBuild(Main.java:809)\n[qunit]     at org.apache.tools.ant.Main.startAnt(Main.java:217)\n[qunit]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n[qunit]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\nBut, I am using QUnit Test Runner\nI'm wondering if there is a version of QUnit that Qunit Test Runner is bundling that is out of date.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2011-10-28T21:24:32Z", "contents": "Hi Clayton,\nI think you have contacted the wrong project. My project is:\nhttp://js-testrunner.codehaus.org/\nJS Test Runner does not impose any specific version of QUnit on you.\nKind regards,\nChristopher\nOn 28/10/2011, at 12:35 PM, Clayton Lengel-Zigich wrote:\n\nI am receiving this same error while using QUnit and Sinon to test my Backbone.js application.\nMy Test\nmodule('BackboneView', {\n setup:function(){\n   this.myModel = new Backbone.Model;\n   this.bindSpy = sinon.spy(this.myModel, \"bind\");\n   this.myView = new Backbone.View({model:this.myModel});\n },\n teardown:function(){\n   this.myModel.bind.restore();\n }\n});\n\ntest('Binds to a change of the foo attribute', function() {\n ok(this.bindSpy.calledWith(\"change:foo\", this.myView.render));\n});\nThe Implementation\nwindow.myView = Backbone.View.extend({\n initialize: function(){\n   _.bindAll(this, 'render');\n   this.model.bind(\"change:foo\", this.render);\n },\n});\nWhen I run my ant build which uses Rhino I get a stack trace like this:\n[qunit] ERROR QUnitTestRunner - Exception encountered whilst executing file: /Users/clayton/example/myView.test.js\n[qunit] org.mozilla.javascript.EvaluatorException: Java class \"[B\" has no public instance field or method named \"setInterval\". (/js/qunit.js#1027)\n[qunit]   at org.mozilla.javascript.DefaultErrorReporter.runtimeError(DefaultErrorReporter.java:109)\n[qunit]   at org.mozilla.javascript.Context.reportRuntimeError(Context.java:938)\n[qunit]   at org.mozilla.javascript.Context.reportRuntimeError(Context.java:994)\n[qunit]   at org.mozilla.javascript.Context.reportRuntimeError2(Context.java:964)\n[qunit]   at org.mozilla.javascript.NativeJavaArray.get(NativeJavaArray.java:103)\n[qunit]   at org.mozilla.javascript.ScriptableObject.getProperty(ScriptableObject.java:1617)\n[qunit]   at org.mozilla.javascript.ScriptRuntime.getObjectProp(ScriptRuntime.java:1437)\n[qunit]   at org.mozilla.javascript.ScriptRuntime.getObjectProp(ScriptRuntime.java:1423)\n[qunit]   at org.mozilla.javascript.Interpreter.interpretLoop(Interpreter.java:3027)\n[qunit]   at script(/js/qunit.js:1027)\n[qunit]   at script(/js/qunit.js:1008)\n[qunit]   at script(/js/qunit.js:1091)\n[qunit]   at script(/js/qunit.js:1011)\n[qunit]   at script(/js/qunit.js:1091)\n[qunit]   at script(/js/qunit.js:1011)\n[qunit]   at script(/js/qunit.js:1091)\n[qunit]   at script(/js/qunit.js:1011)\n[qunit]   at script(/js/qunit.js:111)\n[qunit]   at script.process(/js/qunit.js:718)\n[qunit]   at script.synchronize(/js/qunit.js:709)\n[qunit]   at script(/js/qunit.js:102)\n[qunit]   at script(sinon-qunit.js:60)\n[qunit]   at script(myView.test.js:XX)\n[qunit]   at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:2487)\n[qunit]   at org.mozilla.javascript.InterpretedFunction.call(InterpretedFunction.java:164)\n[qunit]   at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:398)\n[qunit]   at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3065)\n[qunit]   at org.mozilla.javascript.InterpretedFunction.exec(InterpretedFunction.java:175)\n[qunit]   at org.mozilla.javascript.Context.evaluateReader(Context.java:1135)\n[qunit]   at com.eddgrant.qtr.QUnitTestRunner.executeJavaScriptFiles(QUnitTestRunner.java:245)\n[qunit]   at com.eddgrant.qtr.QUnitTestRunner.executeTestRecipeFile(QUnitTestRunner.java:142)\n[qunit]   at com.eddgrant.qtr.QUnitTestRunner.runTests(QUnitTestRunner.java:69)\n[qunit]   at com.eddgrant.qtr.QUnitTestRunnerTask.execute(QUnitTestRunnerTask.java:54)\n[qunit]   at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n[qunit]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[qunit]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[qunit]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[qunit]   at java.lang.reflect.Method.invoke(Method.java:597)\n[qunit]   at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n[qunit]   at org.apache.tools.ant.Task.perform(Task.java:348)\n[qunit]   at org.apache.tools.ant.Target.execute(Target.java:390)\n[qunit]   at org.apache.tools.ant.Target.performTasks(Target.java:411)\n[qunit]   at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n[qunit]   at org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n[qunit]   at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[qunit]   at org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n[qunit]   at org.apache.tools.ant.Main.runBuild(Main.java:809)\n[qunit]   at org.apache.tools.ant.Main.startAnt(Main.java:217)\n[qunit]   at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n[qunit]   at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\nBut, I am using QUnit Test Runner\nI'm wondering if there is a version of QUnit that Qunit Test Runner is bundling that is out of date.\n\nReply to this email directly or view it on GitHub:\n#56 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "clayton", "authorAssociation": "NONE", "createdAt": "2011-10-28T21:27:30Z", "contents": "I was just commenting to provide an example of the error that someone had mentioned above as possibly being fixed. It sounded like there was some confusion as to if the issue was actually fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2011-10-28T21:39:47Z", "contents": "My apologies for the confusion. Its been a long day!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:55:18Z", "contents": "Seems to work fine. Will reopen if someone provides their own, failing, runner, instead of just the output.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 57, "url": "https://github.com/qunitjs/qunit/issues/57", "title": "Provide Getting Started example", "contents": "Source of the current example contains document-ready code, thats misleading. Should provide an example of the minimal necessary markup.", "createdAt": "2010-11-17T15:59:44Z", "updatedAt": "2018-12-22T20:38:01Z", "closedAt": "2012-05-04T09:59:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:59:54Z", "contents": "This is addressed by the new site: https://github.com/jquery/qunitjs.com", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 58, "url": "https://github.com/qunitjs/qunit/issues/58", "title": "Add a README file", "contents": "", "createdAt": "2010-11-25T18:42:41Z", "updatedAt": "2010-11-27T15:45:15Z", "closedAt": "2010-11-27T15:45:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fernandezpablo85", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fernandezpablo85", "company": "@despegar "}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-27T15:45:14Z", "contents": "Adding readme. Closed by f7dab0d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 60, "url": "https://github.com/qunitjs/qunit/issues/60", "title": "Output filename:linenumber for failed assertions", "contents": "Seeing where an assertion is defined can be very useful. Maybe generate a stacktrace via trow new Error, catch that immeditely and inspect it.", "createdAt": "2010-11-27T16:14:31Z", "updatedAt": "2010-11-28T12:44:35Z", "closedAt": "2010-11-28T12:44:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-27T17:02:03Z", "contents": "There's no spec for stacktraces, so its a big mess. This project may help, though too much overhead to use as-is: https://github.com/emwendelin/Javascript-Stacktrace", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-28T12:27:14Z", "contents": "Alternative: https://github.com/csnover/TraceKit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-11-28T12:44:35Z", "contents": "Adding output of sourcefile and linenumber of failed assertions (except ok()). Only limited cross-browser support for now. Closed by 60e9902", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 61, "url": "https://github.com/qunitjs/qunit/issues/61", "title": "Update license header", "contents": "2010/11, MIT or GPL", "createdAt": "2010-12-04T15:57:51Z", "updatedAt": "2011-09-09T09:13:44Z", "closedAt": "2011-01-04T08:36:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "alexsdutton", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-04T08:36:33Z", "contents": "Update copyright and license header. Closed by 3c6ee68", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexsdutton", "authorAssociation": "NONE", "createdAt": "2011-09-09T09:13:44Z", "contents": "Would it be possible to have the license details included in a LICENSE file at the root of the repo? It'd make it a bit easier to find than having to go looking for comment headers.\n(Sorry for being a licensing bore!)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 64, "url": "https://github.com/qunitjs/qunit/issues/64", "title": "Test for sessionStorage fails in Firefox 4 when DOM storage is disabled", "contents": "Use test from Modernizr, it'll work.", "createdAt": "2010-12-07T21:49:44Z", "updatedAt": "2010-12-07T21:52:04Z", "closedAt": "2010-12-07T21:52:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-12-07T21:52:04Z", "contents": "Updated test for availibility of sessionStorage, based on test from Modernizr. Closed by 58186b0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 65, "url": "https://github.com/qunitjs/qunit/issues/65", "title": "Failing asynchronous test runs out of the source order", "contents": "This is regarding commit f32d1c9. I've also commented it, but I'm not sure the comments are seen so I'm describing the problem here too.\nI can't understand what is the reasoning behind storing the fact that a test failed. Is that documented somewhere?\nNow I'm facing a pretty confusing situation when the second of 4 asynchronous tests [constantly] fails. It runs first event if it is the second in the source code, and that's why it fails. Taking a peek into the code I found this commit and setting defined.sessionStorage = false (at line 15 in qunit.js) fixes my problem, but it does not feel right...\nAm I missing something besides \"every test should not depend on the other tests\" and \"order of tests should not matter\"?", "createdAt": "2010-12-09T14:57:47Z", "updatedAt": "2010-12-27T13:12:19Z", "closedAt": "2010-12-27T13:12:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gurdiga", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gurdiga", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-12-27T13:12:19Z", "contents": "As commented.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 69, "url": "https://github.com/qunitjs/qunit/issues/69", "title": "Extend raises with optional second argument", "contents": "See http://nodejs.org/docs/v0.3.2/api/assert.html#assert.throws for usecases.", "createdAt": "2010-12-21T10:07:05Z", "updatedAt": "2010-12-27T13:11:13Z", "closedAt": "2010-12-27T13:11:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "kof", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "kof", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-12-22T18:28:43Z", "contents": "Hi J\u00f6rn, what is about this pull request?\n#70\nThanks.\nOleg", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2010-12-27T13:11:13Z", "contents": "Fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 71, "url": "https://github.com/qunitjs/qunit/issues/71", "title": "qunit crashes IE 5.5 and IE 6", "contents": "By using IE Tester I've noticed that, after updating to the newest qunit, my unit tests crashes IE 5.5 and IE 6.0. I've haven't been able to pin point where exactly as these browsers simply crash without any error message.\nPlease confirm.", "createdAt": "2010-12-29T14:26:16Z", "updatedAt": "2011-09-16T16:43:16Z", "closedAt": "2011-09-16T16:43:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dotnetCarpenter", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "dotnetCarpenter", "company": null}, {"login": "vipsoft", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "staabm", "company": null}, {"login": "farinspace", "company": null}, {"login": "whartonn", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2011-02-20T05:29:33Z", "contents": "I haven't had any problem with IE5.5 or 6 and the latest version of qunit.  Perhaps, try with a subset of your unit tests?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-08T13:26:02Z", "contents": "Needs an example to reproduce.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "staabm", "authorAssociation": "NONE", "createdAt": "2011-08-08T13:35:32Z", "contents": "Testswarm crashed my IE 6/7/8 several times when running jquery tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "farinspace", "authorAssociation": "NONE", "createdAt": "2011-09-15T04:08:26Z", "contents": "Under IE Tester using IE6, IE7 ... simply including http://code.jquery.com/qunit/git/qunit.js causes an error \"line 680, expected identifier, string or number\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "whartonn", "authorAssociation": "NONE", "createdAt": "2011-09-16T00:18:29Z", "contents": "In IE 8 I'm getting:\nMessage: Expected identifier, string or number\nLine: 679\nChar: 1\nCode: 0\nURI: http://code.jquery.com/qunit/git/qunit.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-16T08:47:20Z", "contents": "Try latest, as 7cf3bf7 fixed some trailing-comma issues that caused IEs to fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "farinspace", "authorAssociation": "NONE", "createdAt": "2011-09-16T15:32:25Z", "contents": "perfect, it works, ty! ... tested using IE Tester ... IE6, IE7, IE8, IE9", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 72, "url": "https://github.com/qunitjs/qunit/issues/72", "title": "Option to run QUnit without try/catch", "contents": "IE (and others, to varying extents) lose the original exception if it is wrapped in a try/catch instead of being allowed to fall all the way out. A separate code path is needed in Test.prototype.run to allow this to happen. Obviously, the unit tests will fail completely when this happens, but at least it will allow easier access to the actual error causing the trouble; right now, one needs to comment out the entire try & catch block in order to get access to it.", "createdAt": "2011-01-02T02:09:52Z", "updatedAt": "2011-01-12T20:30:59Z", "closedAt": "2011-01-12T20:30:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "csnover", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "csnover", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-04T08:38:47Z", "contents": "Any suggestions for implementing this? It sounds like you'd want something similar to the timeout argument to stop(): Disabled by default (in this case, catch the exception), but an easy way to enable (let it fly) when needed, usually not to be commited.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2011-01-04T19:16:54Z", "contents": "I\u2019d love to see it implemented as a simple flag like \u201c?throw\u201d that could be appended to the URL to enable the alternative behaviour, since then the unit tests don\u2019t need to be modified at all.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-04T20:46:43Z", "contents": "How about \"?notrycatch\"? Along with \"noglobals\" and unlikely to conflict with any actual module or test name.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2011-01-04T22:04:55Z", "contents": "That sounds good!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-12T20:30:59Z", "contents": "Added URL flag ?notrycatch (ala ?noglobals) for debugging exceptions.\nWon't try/catch test code, giving better debugging changes on the\noriginal exceptions. Closed by c532d18", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 73, "url": "https://github.com/qunitjs/qunit/issues/73", "title": "Mechanism to dispatch native browser events", "contents": "It would be nice if QUnit had a mechanism that would allow for easy dispatching of native browser events on elements instead of needing to reinvent the wheel for every test suite that needs to test events. Right now, for instance, the vast majority of jQuery unit tests are only testing the jQuery event system and don\u2019t actually ever confirm that native browser events will work the same way.", "createdAt": "2011-01-02T18:23:53Z", "updatedAt": "2018-12-22T20:37:44Z", "closedAt": "2012-09-29T13:55:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "csnover", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "csnover", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "sstok", "company": null}, {"login": "wwalser", "company": "Ask Inline"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 9, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-04T08:42:36Z", "contents": "Any suggestions on how that should work? Are you looking for something like simulate.js?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2011-01-04T19:09:36Z", "contents": "Yep, pretty much something exactly like that. (UI always seems to be one step ahead. :)) I think that this would have application for pretty much anyone writing interactivity tests using QUnit, not just jQuery.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-08T19:20:38Z", "contents": "Marc ripped simulate.js apart a bit: http://marcgrabanski.com/articles/simulating-mouse-click-events-in-javascript", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-08T13:36:26Z", "contents": "Scott says we should port the DOH Robot instead: http://dojotoolkit.org/reference-guide/util/dohrobot.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-13T20:06:01Z", "contents": "Josh's keymasher plugin: https://github.com/digitalBush/jquery.keymasher", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sstok", "authorAssociation": "NONE", "createdAt": "2011-10-29T10:08:40Z", "contents": "I'm a big fan of FuncUnit.\nIt uses Syn.JS for simulating events: https://github.com/jupiterjs/syn\nAnd is largely based on QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-31T07:24:26Z", "contents": "Ephox also implemented the a similar thing with https://github.com/ephox/JSRobot/. Having used it, I doubt if the API is as strong as dohrobot.\nIf you want native events you're pretty much going to have to go with a solution that uses a java applet to create those native events. Simulate comes close, but it'll never actually measure up 100%.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T17:31:24Z", "contents": "Making this a documentation ticket. There are various options, where both JSRobot and syn look the most interesting. QUnit docs should reference those, beyond that I don't see anything we can really do here, its out of scope.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-29T13:55:44Z", "contents": "Fixed in qunitjs/qunitjs.com@a0b63ba, live at http://qunitjs.com/cookbook/#testing_user_actions", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 74, "url": "https://github.com/qunitjs/qunit/issues/74", "title": "Test run out-of-order", "contents": "I don't know if test order is supposed to be significant, but since I don't see it documented either way, I've been assuming that tests should run in the order in which they are defined.\nI've noticed that sometimes, when an assertion fails, tests run out-of-order.\nAlways successful:\nhttp://jsfiddle.net/cowboy/KWMjJ/1/\nIntermittent failure (click \"Run\" multiple times):\nhttp://jsfiddle.net/cowboy/KWMjJ/2/ (test 2, # expect error)\nhttp://jsfiddle.net/cowboy/KWMjJ/3/ (test 3, failing test)\nI've observed this behavior in Firefox 4 and Chrome.", "createdAt": "2011-01-03T13:03:44Z", "updatedAt": "2011-03-11T22:41:48Z", "closedAt": "2011-03-03T07:17:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cowboy", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "cowboy", "company": "@toasttab "}, {"login": "jzaefferer", "company": null}, {"login": "ritterb82", "company": null}, {"login": "rhapsodyv", "company": "AdTools.com.br"}], "comments_count": 12, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-03T13:08:02Z", "contents": "That's a feature, not a bug. May need some documentation, but the idea is this: When a test failed, try to run it before any tests that passed, to give you useful results in less time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2011-01-03T13:32:29Z", "contents": "I don't understand - how can you know a test has passed or failed before it has been run?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-03T14:19:36Z", "contents": "The first run will always be in order. For that run, results are saved in sessionStorage. On the next run, if sessionStorage says that the last run failed, it'll run before others that passed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2011-01-03T15:31:05Z", "contents": "The problem with that is that every other run, the tests run in a different order. Isn't that weird?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-03T16:20:43Z", "contents": "Just checked your first failing example. The main problem there is that your tests aren't atomic - running one test affects the other. That is a big problem independent of the feature I mentioned, as your tests will also fail when running standalone, e.g. using manual filters by appending stuff to the URL or doubleclicking an individual test.\nMake your tests atomic, and the order won't matter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2011-01-03T16:22:07Z", "contents": "Understood, it makes sense. This should probably be documented, however.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2011-01-03T16:37:48Z", "contents": "Ok, here's another example of how dynamic test reordering can cause issues (D) along with some general weirdness (B) that may be totally unrelated, but is worth mentioning.\nA. 1 module - QUnit methods called as-expected:\nhttp://jsfiddle.net/cowboy/6jLuf/1/\nB. 2 modules - QUnit.moduleStart isn't called for the first module (this only seems to happen with 2 modules):\nhttp://jsfiddle.net/cowboy/6jLuf/2/\nC. 3 modules - QUnit methods called as-expected:\nhttp://jsfiddle.net/cowboy/6jLuf/3/\nD. 3 modules w/error - QUnit methods called as-expected first time. If the page is then reloaded, because tests are dynamically reordered, modules' tests are no longer called together and aren't grouped properly:\nhttp://jsfiddle.net/cowboy/6jLuf/4/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ritterb82", "authorAssociation": "NONE", "createdAt": "2011-02-16T04:05:28Z", "contents": "Also agree that this needs to be better documented.  Just updated version of Qunit and broke some tests.\nSome of our legacy tests required tests to run in order.  Can the sessionStorage just be turned off to force tests run in order as an alternate method to re-writing tests in the middle of a development cycle?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rhapsodyv", "authorAssociation": "NONE", "createdAt": "2011-02-18T04:48:41Z", "contents": "A config for that would be great!! I have issues with ordering too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-02-23T13:41:51Z", "contents": "dominator.js just clears sessionStorage on page load to get rid of the reordering: sessionStorage.clear();\nAn option, but would also kill any other usage of sessionStorage.\nMay have to consider to just drop reordering completely. Need to find out if someone actually finds it helpful", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-03-02T23:17:02Z", "contents": "Addressed this in a418893 - adding a config property QUnit.config.reorder, set it to false (QUnit.config.reorder = false;) to disable reordering.\nTo actually get more out of reordering, include the toolbar element and check \"Hide passed tests\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rhapsodyv", "authorAssociation": "NONE", "createdAt": "2011-03-11T22:41:48Z", "contents": "Great! Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 76, "url": "https://github.com/qunitjs/qunit/issues/76", "title": "Synchronize stop/start calls", "contents": "If stop() is called multiple times, delay start until equal amount of callsto start(). Makes synchronizing multiple async blocks trivial.", "createdAt": "2011-01-04T08:33:45Z", "updatedAt": "2011-01-04T16:00:28Z", "closedAt": "2011-01-04T16:36:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "cowboy", "company": "@toasttab "}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-04T08:36:32Z", "contents": "Use a semaphore to synchronize stop() and start() calls. Closed by 9dc583c", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2011-01-04T16:00:28Z", "contents": "You rock!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 77, "url": "https://github.com/qunitjs/qunit/issues/77", "title": "Use testName instead of test for calls to fail()", "contents": "Useless to have html markup in console output.", "createdAt": "2011-01-06T10:33:00Z", "updatedAt": "2011-01-12T20:05:23Z", "closedAt": "2011-01-12T20:05:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-12T20:05:23Z", "contents": "Use non-html testname for calls to fail(). Closed by b996d17", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 78, "url": "https://github.com/qunitjs/qunit/issues/78", "title": "Document ?notrycatch", "contents": "See #72", "createdAt": "2011-01-12T20:31:53Z", "updatedAt": "2018-12-22T20:37:34Z", "closedAt": "2011-09-19T07:30:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2011-09-18T19:29:51Z", "contents": "On http://docs.jquery.com/QUnit ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-19T07:30:11Z", "contents": "Yeah. I've updated the section that already existed: http://docs.jquery.com/QUnit#URL_Parameters", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 79, "url": "https://github.com/qunitjs/qunit/issues/79", "title": "Document updated callbacks", "contents": "See qunit.js line 616 to 629", "createdAt": "2011-01-12T20:32:41Z", "updatedAt": "2018-12-22T20:37:27Z", "closedAt": "2011-08-05T12:01:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T12:01:37Z", "contents": "Documented, just forgot about this ticket.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 80, "url": "https://github.com/qunitjs/qunit/issues/80", "title": "\"Hide passed tests\" when enabled on page load doesn't hide passing assertions", "contents": "For a test with both failing and passing assertions, passing assertions are still displayed.\nIf enabled after a testrun, they are, correctly, hidden.", "createdAt": "2011-01-18T10:59:30Z", "updatedAt": "2011-08-05T12:00:29Z", "closedAt": "2011-08-05T12:00:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T12:00:29Z", "contents": "Not valid anymore.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 81, "url": "https://github.com/qunitjs/qunit/issues/81", "title": "QUnit is not changing the 'config.current' to the next test", "contents": "I am having trouble re-creating this issue in a sandbox environment, but it is quit a strange one.\nI have an asyncTest that sends a json request and then several normal tests\nasyncTest(....)\ntest(...)\ntest(...)\nthe normal tests preform about 30 assertations each.\nHowever, when I run the suite, I find that the last test to get run shows zero tests (zero run), even though the tests are clearly being run.\nSome extensive debugging in chrome as shown me that the config.current is not being changed before the last test is run, so the 36 assertions run in the final test are added to the stack of tests run in final test - 1.\nWhen the test has finished running, QUnit thinks that no tests have been run.\nThis issue immediately resolves itself if I remove the asyncTest.", "createdAt": "2011-01-27T18:33:39Z", "updatedAt": "2011-01-27T19:04:10Z", "closedAt": "2011-01-28T02:41:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "guyht", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "guyht", "company": "Pepper.gg"}, {"login": "jzaefferer", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-27T18:36:17Z", "contents": "Sounds like you're missing a call to start() in your asyncTest. Would need to see more code to verify.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guyht", "authorAssociation": "NONE", "createdAt": "2011-01-27T18:41:32Z", "contents": "The call to start() is being made in the callback from the ajax request and all the tests do get run... but the last test does not get reported.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guyht", "authorAssociation": "NONE", "createdAt": "2011-01-27T18:42:50Z", "contents": "Argh! I hate the git issue tracker, I didn't mean to close this issue! Is there any way to undo it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-01-27T18:46:42Z", "contents": "I'd reopen it if you post some code to reproduce the issue. In general that works using the dropdown at the top.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guyht", "authorAssociation": "NONE", "createdAt": "2011-01-27T19:04:10Z", "contents": "have opened a separate issue with some code.\ngoing to work ok reproducing the issue", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 82, "url": "https://github.com/qunitjs/qunit/issues/82", "title": "QUnit is not changing the 'config.current' to the next test", "contents": "Ok, sorry for creating a new issue, looks like I cant reopen the last one.\nThe 2nd to last test is not running the following code around line 200\nqueue: function() {\n    var test = this;\n    synchronize(function() {\n        test.init();\n    });\n    function run() {\n        // each of these can by async\n        synchronize(function() {\n            test.setup();\n        });\n        synchronize(function() {\n            test.run();\n        });\n        synchronize(function() {\n            test.teardown();\n        });\n        synchronize(function() {\n            test.finish();\n        });\n    }\n\ntest.setup() is called, followed by test.finish().  test.run() is not called.\nThen on the following test, it is called twice.\nIt seems as if some of the synchronization has got mixed up and looks like this\nQueue test 1\nQueue test 2\nQueue test 3\n... start testing\ntest1.setup\ntest1.run\ntest1.finish\ntest2.setup\ntest2.finish\ntest3.setup\ntest2.run\ntest3.run\ntest3.finish\nBut because test 2 is finished before it runs, no results are displayed.", "createdAt": "2011-01-27T19:02:16Z", "updatedAt": "2011-10-10T14:44:26Z", "closedAt": "2011-10-10T14:44:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "guyht", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "guyht", "company": "Pepper.gg"}, {"login": "jzaefferer", "company": null}, {"login": "kategengler", "company": "Code All Day Consulting"}, {"login": "wwalser", "company": "Ask Inline"}], "comments_count": 12, "comments_data": [{"authorLogin": "guyht", "authorAssociation": "NONE", "createdAt": "2011-01-28T09:41:40Z", "contents": "Ok, i have managed to reproduce this issue.\nhttps://gist.github.com/6ab3f128329041544b4a\nI open the page and call UT.test() from the console, and only the first and the last test produce results.\nThis issue only seems to arise if I wrap my tests in a function (UT.test), but for my testing purposes I need to do this as I have multiple testing suites that need to be called from the console.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:59:21Z", "contents": "Sidenote: I extracted your example into a gist, otherwise it was only readable by editing your comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kategengler", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-10T03:18:37Z", "contents": "http://jsbin.com/oxixep/3\njsbin using the example from the gist.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-10T13:23:45Z", "contents": "@kategengler that jsbin doesn't seem to run any tests at all. Also the formatting makes it impossible to figure out what its doing.\nLooking at the original gist: Why is start() called before running the assertions?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kategengler", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-10T13:38:43Z", "contents": "Yeah, you have to run the tests from the console by calling UT.test() - its only when the the tests are wrapped in a function and called from the command line that it middle tests don't run.\nIt works if you wrap them in a function and call that function immediately.  I haven't looked at the code but I thought maybe a reliance on window onload.  I suppose there is also a question of whether this is a supported use case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-10T13:45:46Z", "contents": "I was wrong about my previous assertion here, I've taken the time to look at the problem more closely. There is a problem with the way the queue, synchronize and process methods are called while the test suite is waiting on an async test to finish.\nI'll give more detail once I have a fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-17T16:58:55Z", "contents": "Okay, I added a pull request that fixes this bug.\nPull Request #148\nThanks for the nice succinct test case guys, really helpful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guyht", "authorAssociation": "NONE", "createdAt": "2011-08-18T13:43:44Z", "contents": "Really appreciate the work that has been done on this issue.  After months of inactivity I assumed this would never get fixed, so great to see it has been picked up again, and now been dealt with.\nThanks!! :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-19T00:18:45Z", "contents": "I'd love to know if the actual use case you had with this is fixed by the patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guyht", "authorAssociation": "NONE", "createdAt": "2011-08-19T07:54:06Z", "contents": "Unfortunately thats not going to be possible as we have to change the test suite to YUITest (sorry :( ), so the code does not exist any more.\nHowever, the description you give in your pull request describes exactly the issue we were having so I am pretty sure you hit it bang on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-19T08:51:54Z", "contents": "No problem, thanks guyht!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T14:44:26Z", "contents": "Fixed by #148", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 85, "url": "https://github.com/qunitjs/qunit/issues/85", "title": "TypeError comparing strings using equal when json.js present", "contents": "Hi,\nIf json.js is included as a dependency and an \"equal\" assertion is performed on two unequal strings then a TypeError is thrown with the following message.\nDied on test #1: ns[i].rows is undefined - { \"message\": \"ns[i].rows is undefined\", \"fileName\": \"https://github.com/jquery/qunit/raw/master/qunit/qunit.js\", \"lineNumber\": 1316....................\nI think this is because QUnit.diff compares json related properties such as the toJSONString method which is added to the string prototype by json.js.\njsfiddle here : \"http://jsfiddle.net/kartik78/nK4Ev/\nRegards,\nKartik", "createdAt": "2011-02-10T11:24:13Z", "updatedAt": "2011-02-21T21:09:13Z", "closedAt": "2011-02-21T21:09:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kartik78", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kartik78", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-02-10T12:48:22Z", "contents": "That jsfiddle seems somewhat broken - all I see is a </script at the end, without the actual includes.\nAnyway, could you provide a link to the json.js that you're using?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kartik78", "authorAssociation": "NONE", "createdAt": "2011-02-10T20:36:56Z", "contents": "Here's a link to the json.js.\nhttps://github.com/douglascrockford/JSON-js/raw/master/json.js\nYes something's not right in that fiddle, I can get it to work in Safari (mac & ipad) but not in FF.\nHere is the testcase if you need it :\ntest('string compare using equals', function(){\nequal(\"A String\", \"Another String\", \"Strings are not equal\");\n});\nThe workaround is to use json2.js, this does not modify prototypes but creates a global JSON object that has stringify and parse methods.\nRegards,\nKartik", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-02-21T21:09:13Z", "contents": "Closing as we can't support the years-old json.js without considerable effort that isn't really worth it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 87, "url": "https://github.com/qunitjs/qunit/issues/87", "title": "URL-Filter ignores existing query strings", "contents": "The filter should use a key such as qunit_filter and append or replace that, but keep everything else.", "createdAt": "2011-02-26T22:20:56Z", "updatedAt": "2011-08-05T12:00:56Z", "closedAt": "2011-08-05T12:00:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T12:00:56Z", "contents": "Fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 90, "url": "https://github.com/qunitjs/qunit/issues/90", "title": "Document reordering and Hide passed tests", "contents": "Cover disabling reordering (QUnit.config.reorder = false), but more importantly, what it does and how it can make testing more efficient. Especially in combination with Hide passed tests checkbox enabled.", "createdAt": "2011-03-02T23:19:55Z", "updatedAt": "2018-12-22T20:37:19Z", "closedAt": "2012-09-29T15:14:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-09T16:48:13Z", "contents": "Reordering is now documented here: qunitjs/api@ce328cb\nBut this still needs to be covered in a guide, in combination with the UI checkboxes. Could add it to the cookbook.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-29T15:14:39Z", "contents": "Documented with qunitjs/qunitjs.com@51e4b69, live at http://qunitjs.com/cookbook/#efficient_development", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 93, "url": "https://github.com/qunitjs/qunit/issues/93", "title": "QUnit url/extend function breaking urls in jQuery ajax test component", "contents": "http://grab.by/9ojb http://grab.by/9ojd\nAjax urls are wrapped in the url function in unit/ajax.js.  Currently, instead of constructing the correct url, many of them end up as get params with each letter of the string a different param.  You'll see in the second photo \"1=d&2=a&3=b.... because it's doing a for-each for the string.  Perhaps something got broken during the recent ?filter=* url changes.", "createdAt": "2011-03-10T15:25:42Z", "updatedAt": "2011-03-11T15:54:19Z", "closedAt": "2011-03-11T15:54:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "timmywil", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "timmywil", "company": "@jquery, @pylon "}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 2, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-03-10T16:34:19Z", "contents": "The problem is that QUnit.url is defined early in the file, so it gets exposed as window.url, which overwrites jQuery's global url function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-03-11T15:54:19Z", "contents": "Moved QUnit.url() defintion after QUnit properties are merged into the global scope. Closed by cc8460c - QUnit url/extend function breaking urls in jQuery ajax test component", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 95, "url": "https://github.com/qunitjs/qunit/issues/95", "title": "Leaking global variable", "contents": "The function validTest() leaks a variable not to the global scope.\nhttps://github.com/jquery/qunit/blob/cc8460c7b44f023c4f84ab1810b72bf6c6ee4542/qunit/qunit.js#L787", "createdAt": "2011-03-12T12:02:37Z", "updatedAt": "2011-05-22T20:45:17Z", "closedAt": "2011-05-22T20:45:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Skalman", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Skalman", "company": null}, {"login": "markstory", "company": "@getsentry"}], "comments_count": 2, "comments_data": [{"authorLogin": "markstory", "authorAssociation": "NONE", "createdAt": "2011-05-21T14:16:48Z", "contents": "Looks like this was fixed in 72ca92b", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Skalman", "authorAssociation": "NONE", "createdAt": "2011-05-22T20:45:17Z", "contents": "Great - i'm closing this issue. :-)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 96, "url": "https://github.com/qunitjs/qunit/issues/96", "title": "Tests that depend on session storage is broken", "contents": "I have the following code:\nmodule(\"Calendar\", {\n   setup: function() {\n      localStorage.clear();\n      sessionStorage.clear();\n   },\n   teardown: function() {\n      localStorage.clear();\n   }\n});\ntest(\"Test loading months\", function() {\n    ...\n});\n\nWhen I run this in FF 3.6 (Linux) I get this in my Firebug console:\nOperation is not supported\" code: \"9\n\nI even get the same error when I try to do this:\nalert(typeof(sessionStorage));\n\nMy app relies both on sessionStorage and localStorage and mocking about with the localStorage works just fine.", "createdAt": "2011-03-20T01:25:36Z", "updatedAt": "2011-03-22T10:12:18Z", "closedAt": "2011-03-22T08:52:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "peterbe", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "peterbe", "company": "Mozilla"}], "comments_count": 3, "comments_data": [{"authorLogin": "peterbe", "authorAssociation": "NONE", "createdAt": "2011-03-22T08:52:49Z", "contents": "Progress: sessionStorage simply doesn't work when served as a local file.\nI took my failing test and served it via a local Nginx server and then it works. (instead of serving it as file:///home/peterbe/test.html\nThis is a fact independent of QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "peterbe", "authorAssociation": "NONE", "createdAt": "2011-03-22T08:55:51Z", "contents": "Now I understand why QUnit does defined.sessionStorage= !!sessionStorage.getItem\nQUnit's sessionStorage features are only available if sessionStorage works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "peterbe", "authorAssociation": "NONE", "createdAt": "2011-03-22T10:12:18Z", "contents": "Please close this issue now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 97, "url": "https://github.com/qunitjs/qunit/issues/97", "title": "Add mockjax example to docs", "contents": "Could be part of stop()/start() docs. Or add seperate async testing example.", "createdAt": "2011-04-02T12:41:20Z", "updatedAt": "2018-12-22T20:37:11Z", "closedAt": "2012-03-01T18:02:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T18:02:46Z", "contents": "Nevermind.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 98, "url": "https://github.com/qunitjs/qunit/issues/98", "title": "ok() outside a test() context crashes qunit.", "contents": "Example code:\ntest('my test', function() {\nok(true, 'works');\n});\nok(true, 'outside a test?');\ntest('test2', function() {\nok(true, 'why is this assertion not shown?');\n});\nResult\n'my test' is executed but then the script dies in qunit.js on line 315\nChrome: Uncaught TypeError: Cannot read property 'assertions' of undefined\nFirefox: config.current is undefined\nExpected result\nShow an error like \"Assertion outside a test() context in file x on line y\" and continue running tests.", "createdAt": "2011-04-03T14:03:30Z", "updatedAt": "2012-02-15T16:52:50Z", "closedAt": "2012-02-15T16:49:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bfanger", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "bfanger", "company": "http://www.noprotocol.nl/"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:54:42Z", "contents": "Need a patch for this. A bit similar to #134, maybe that would also catch this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:52:50Z", "contents": "Fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 101, "url": "https://github.com/qunitjs/qunit/issues/101", "title": "reordering keeps executing passing tests first", "contents": "If a test once failed, it will be reordered and executed first even after it passed.\nAround lines 158 the two calls of sessionStorage.setItem and sessionStorage.removeItem should most likely use the same String as an identifier.\nFurther, it sounds sensible to wipe the sessionStorage sometimes to deal with renamed tests and such. This shouldn't be done after reading in all the tests' status as execution might not get to the point where status is written again. An option might be to do this in case all tests passed.", "createdAt": "2011-04-11T09:07:16Z", "updatedAt": "2012-02-15T16:39:55Z", "closedAt": "2012-02-15T16:39:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zuckel", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "zuckel", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-08T13:18:17Z", "contents": "TODO: Clean own sessionStorage entries once all tests passed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 103, "url": "https://github.com/qunitjs/qunit/issues/103", "title": "Remove deprecated #main in favor of #qunit-fixture", "contents": "", "createdAt": "2011-04-15T10:20:21Z", "updatedAt": "2011-04-15T10:36:10Z", "closedAt": "2011-04-15T10:36:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 104, "url": "https://github.com/qunitjs/qunit/issues/104", "title": "Extract load-event handler and expose it", "contents": "The code that currently runs on window.load can't be called when that event isn't available, e.g. QUnit is loaded on a page after load. Extract and expose it as QUnit.load() or something.", "createdAt": "2011-04-15T10:48:23Z", "updatedAt": "2011-08-05T11:51:24Z", "closedAt": "2011-08-05T11:51:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:51:24Z", "contents": "Done.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 106, "url": "https://github.com/qunitjs/qunit/issues/106", "title": "QUnit.done() called after each test (using Rhino)", "contents": "Using env.js and Rhino, QUnit.done() seems to be called (twice) after each test, instead of once after all tests have been run.\nThis is also reported here: http://twoguysarguing.wordpress.com/2010/11/06/qunit-and-the-command-line-one-step-closer/", "createdAt": "2011-04-29T09:52:48Z", "updatedAt": "2011-06-14T08:41:56Z", "closedAt": "2011-06-14T08:41:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "oyvindeh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "oyvindeh", "company": null}, {"login": "ianlewis", "company": "Google"}, {"login": "erikvold", "company": "Consultant"}], "comments_count": 3, "comments_data": [{"authorLogin": "ianlewis", "authorAssociation": "NONE", "createdAt": "2011-06-12T08:21:30Z", "contents": "You won't have any luck with phantomjs either as QUnit.done() seems to be called this way on webkit as well. You can see this when running Qunit in Chrome; The status box says \"Tests completed in xxx milliseconds.\" while the tests are running instead of \"Running...\" like it does on Firefox.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erikvold", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-12T10:50:56Z", "contents": "Have you tried QUnit.config.autostart = false; ?\nHere is an example: https://github.com/erikvold/scriptish/commit/ca7cb4603dc85cfbeacaef2884c714b92ad6c476\nRemember to call QUnit.start(); when you have loaded all of your tests and want to run them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "oyvindeh", "authorAssociation": "NONE", "createdAt": "2011-06-14T08:41:56Z", "contents": "I did indeed have QUnit.config.autorun set to true, so setting it to false and adding QUnit.start() fixed this for me.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 108, "url": "https://github.com/qunitjs/qunit/issues/108", "title": "Test are Skipped on Mobile Devices", "contents": "Hi guys,\nRecently I've noticed that some tests are skipped when running QUnit on a mobile device. I've seen this issue on a few different test suites, although each test suite has 100-700 unit tests. The same issue does not happen on a mobile simulator, so it might be a race condition based on the device's speed.\nI was able to fix the issue by increasing the process delay from 13 to 250 in the QUnit.start. Do you know what callbacks could be running at that time? In our test suites, we try to ensure that everything is loaded before running QUnit. We use QUnit.config.autostart = false;.\nHere are a few screenshots that show the issue:\n\n\nI have no problem experimenting with patches, but I could use some feedback on where to go.\nCheers,\nMichael", "createdAt": "2011-05-12T22:48:58Z", "updatedAt": "2012-02-15T16:22:23Z", "closedAt": "2012-02-15T16:22:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mwbrooks", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mwbrooks", "company": "Adobe"}, {"login": "filmaj", "company": "@adobe"}, {"login": "jzaefferer", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "filmaj", "authorAssociation": "NONE", "createdAt": "2011-05-13T00:14:10Z", "contents": "I've seen this happen on a wide variety of different Android devices (slow and fast), as well as BlackBerries (especially older ones, running BlackBerry OS 4.6 to 5.0).\nThe test suite @mwbrooks references above, by the way, is mobile-spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-05-16T17:43:00Z", "contents": "Not sure what is going on, or even why that particular timeout is used anyway. There's another one, that could also have an effect: https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L867\nI can't really reproduce, as I don't have enough experience with Phonegap to deploy to a device.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mwbrooks", "authorAssociation": "NONE", "createdAt": "2011-05-16T17:47:30Z", "contents": "I played around with both timeouts and found that Line 409 only needed to be increased to 250ms.\nIf it will help, I can try to put together web-based test suite that reproduces the error. It shouldn't be a PhoneGap-specific issue. Do you have an Android or iOS device available? (simulators don't reproduce the issue)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "filmaj", "authorAssociation": "NONE", "createdAt": "2011-05-16T17:53:59Z", "contents": "To confirm, I've seen this happen on regular web sites (test suites) on certain devices. I will dig around through my projects and try to post a specific example.\nI hear ya @jzaefferer, \"stacktrace or GTFO\" ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-05-16T18:09:40Z", "contents": "Ha, sure! But really, if I am to help here, I need to reproduce the issue, otherwise its all just guessing.\nI've got an iPhone 3GS and an Android Nexus S at hand.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:50:50Z", "contents": "Still looking for something to test/reproduce @mwbrooks @filmaj", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:22:23Z", "contents": "Closing, will reopen if someone helps reproducing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 109, "url": "https://github.com/qunitjs/qunit/issues/109", "title": "noglobals should run after module teardown", "contents": "If teardown cleans up globals, ignore them.", "createdAt": "2011-05-16T11:56:22Z", "updatedAt": "2011-05-16T18:57:27Z", "closedAt": "2011-05-16T18:57:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 114, "url": "https://github.com/qunitjs/qunit/issues/114", "title": "#qunit-fixture should define a width and height", "contents": "I just ran into a lot of hell trying to test animations because the width of the element I was animating wasn't what I had defined it (in IE7):\nCompare http://jsfiddle.net/HJ4ak/2/ to http://jsfiddle.net/HJ4ak/1/\nJust adding width: 1000px; height: 1000px; to the #qunit-fixture in my CSS fixed the issue on my test page", "createdAt": "2011-06-13T23:51:43Z", "updatedAt": "2012-02-15T16:21:02Z", "closedAt": "2012-02-15T16:20:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "gnarf", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:21:02Z", "contents": "Landed. This may have unintended consequences on other existing testsuites, though generally the element isn't in the viewport and its dimensions shouldn't matter, so...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 116, "url": "https://github.com/qunitjs/qunit/issues/116", "title": "Show stack traces in nodejs", "contents": "I'm running QUnit in NodeJS with some success.\nOne thing that bugs me is that the stack traces are not shown by default.\nThis patch could help in run() line 104 :\nfail(\"Test \" + this.testName + \" died, exception and test follows\", e.message, e.stack, e, this.callback);\n\nthx", "createdAt": "2011-06-15T18:58:01Z", "updatedAt": "2012-02-15T16:17:16Z", "closedAt": "2012-02-15T16:17:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sylvinus", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sylvinus", "company": "Pricing Assistant / dotConferences"}, {"login": "jzaefferer", "company": null}, {"login": "geddski", "company": "Domo"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-06-16T18:32:24Z", "contents": "A patch should also fix the fileName:lineNumber output for (failed) assertions, may have to use Error.captureStackTrace: http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2011-08-22T04:08:54Z", "contents": "Any update on this? Sylvinus I'd be interested in hearing more about your experience with running QUnit in Node.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-11T21:19:20Z", "contents": "I've looked at the relevant code, but I have no idea how the proposed patch is supposed to work. The implementation of the fail() method expects only three arguments, not four. In addition, how is passing along indiviual exceptions properties supposed to make a difference?\nI don't see nodejs as much of a priority right now, but if someone provides a proper patch, I'd be happy to test and merge it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:17:16Z", "contents": "For both failed assertions and dying tests you can stacktraces in nodejs: https://github.com/jquery/qunit/blob/master/test/node-test.js", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 118, "url": "https://github.com/qunitjs/qunit/issues/118", "title": "A synchronous call to stop causes tests to end before start is called it's final time.", "contents": "The delay build into start() doesn't check the semaphore before calling process(). This can cause a test that has multiple calls to stop to fail even when those calls happen synchronously with the call to start.\nhttps://gist.github.com/1055426\nThat contains a simple test case that fails and a more elabore test real-world-like example.", "createdAt": "2011-06-30T02:07:14Z", "updatedAt": "2011-08-05T11:49:43Z", "closedAt": "2011-08-05T11:49:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "wwalser", "company": "Ask Inline"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-30T02:12:44Z", "contents": "Patch provided. Adds a test case and a check against the semaphore inside start()'s async bit.\n#119", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:49:43Z", "contents": "Landed #119, fixed this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 120, "url": "https://github.com/qunitjs/qunit/issues/120", "title": "Comprehensive state management", "contents": "State management\nOne of the primary issues we run into daily on the jQuery Mobile project is managing state between tests. Currently QUnit handles managing the DOM through the #qunit-fixtures wrapper but there are a myriad of other browser features that require handling.\nA short list\n\nTitle\nHash\nQuery params\nLocal storage\nData objects\nEvent bindings\n\nIt should be noted that the last two can initially assume jQuery core as the DOM abstraction thanks to its ubiquity. This list is far from complete.\nAPI suggestions\nThere will most certainly be cases that we can't think of in terms of managing and resetting state across tests. It would be nice to create the built in state management on top of an exposed api that allowed users to reset arbitrary objects and state between tests.\nA an example:\nhttps://gist.github.com/7431d5eb9226eda56168\nAbstracting the state management of javascript objects into a simple API will help users create more stable tests.", "createdAt": "2011-07-04T17:07:13Z", "updatedAt": "2012-03-01T18:01:12Z", "closedAt": "2012-03-01T18:01:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johnbender", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "johnbender", "company": "UCLA Computer Science Dept."}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "johnbender", "authorAssociation": "NONE", "createdAt": "2011-07-04T22:59:00Z", "contents": "One note of importance. The example I gave does require the user to understand when javascript uses pass by reference (ie with objects) and to make sure they do in fact pass an object for management by QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:07:37Z", "contents": "@johnbender same here. An example imeplementation of manage would help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:51:31Z", "contents": "Closing as a sort-of duplicate of #173, via John Bender.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 121, "url": "https://github.com/qunitjs/qunit/issues/121", "title": "Evented/Timed test helpers", "contents": "Evented testing\nDISCLAIMER:  most of the ideas here may be project specific but appear, at least from where I'm standing, to be useful in a myriad of scenarios when testing event based functionality.\nTiming and event based tests in QUnit and other frameworks tend to be fragile and even dependent on execution order in practice. There are few test helpers that we've found to be invaluable in working with events and time dependent functionality.\nsequence( functions, timeout )\nMany tests that require a set of timeouts to verify functionality can be cleaned up by abstracting multiple calls to setTimeout into a single helper. This is just as brittle as using the timeouts themselves but at least results in cleaner code where no event is provided to guarantee the behavior.\nExample:\nhttps://github.com/jquery/jquery-mobile/blob/master/tests/unit/navigation/navigation_core.js#L49\neventSequence( event, functions )\nThe event sequence helper executes a list of functions based on a series of the same event firing to trigger each. The most obvious use case where jQuery Mobile is concerned is page transitions which fire the changepage event upon completion.\nAn example from the event tests:\nhttps://github.com/jquery/jquery-mobile/blob/master/tests/unit/event/event_core.js#L425\nAn example from the navigation tests. pageSequence is just a wrapper around eventSequence that specifies changepage event as the first argument to eventSequence:\nhttps://github.com/jquery/jquery-mobile/blob/master/tests/unit/navigation/navigation_core.js#L300\neventCascade( event, function, event, function ... )\nWe haven't stumbled upon a use case here yet but it seems likely that a more flexible form of the eventSequence function would be valuable. In fact this should encourage a more pluggable design since events will be the preferred way to guarantee states of execution in the code being tested!\nwaitFor\nJasmine has a nice helper in the form of waitFor. It holds the test suite execution until the callback returns a truthy value. Mind you this is dependent on the serialization of all the code in the tests through the run function. More information can be found at their wiki down on the bottom:\nhttps://github.com/pivotal/jasmine/wiki/Asynchronous-specs", "createdAt": "2011-07-04T17:27:49Z", "updatedAt": "2012-03-01T18:00:39Z", "closedAt": "2012-03-01T18:00:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johnbender", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "johnbender", "company": "UCLA Computer Science Dept."}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:31:23Z", "contents": "I wonder if this somewhat overlaps with #99", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:05:48Z", "contents": "Hey @johnbender - you still interested in this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T18:00:37Z", "contents": "Closing this, as the linked-to source is outdated. @johnbender  will put together an update in a new ticket, working with @rwldrn to get his Popcorn.js perspective involved.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 122, "url": "https://github.com/qunitjs/qunit/issues/122", "title": "Assertions not working inside Webkit DB handling closures", "contents": "Reproduction (Chrome v12):\nmodule(\"Basic DB test\");\ntest(\"Create DB\",function(){\ndb = openDatabase(\"TestDB\",\"0.1RC\",\"Test Database\",1048576);\ndb.transaction(function(tx){\ntx.executeSql(\"CREATE TABLE testtable ('id' INTEGER PRIMARY KEY AUTOINCREMENT)\",[],function(tx,result){ok(true,\"create 'testtable'\");},function(tx,error){ok(false,\"create 'testtable' failed\");});\n});\n});\nWell, as much as I figured out, this can be because of the asynchronous DB operations. If so, an error message should be helpful.", "createdAt": "2011-07-12T23:23:59Z", "updatedAt": "2011-07-13T00:34:32Z", "closedAt": "2011-07-13T00:34:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Szasza", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Szasza", "company": "OneAffiniti"}], "comments_count": 1, "comments_data": [{"authorLogin": "Szasza", "authorAssociation": "NONE", "createdAt": "2011-07-13T00:34:32Z", "contents": "I was lame, stop-start solved the problem. Sry.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 123, "url": "https://github.com/qunitjs/qunit/issues/123", "title": "Create configuration setting for default stop() timeout", "contents": "Rather than putting the limit hardcoded everywhere it would be nice if libraries could set something like config.timeoutDuration=5000; in their testiniit file and have stop()'s first argument default to that if it's undefined. In fact, it could simply always fallback to config.timeoutDuration if the first argument is undefined. Regardless of wether config.timeoutDuration is defined or not.", "createdAt": "2011-07-15T22:36:46Z", "updatedAt": "2018-12-22T20:37:03Z", "closedAt": "2012-04-11T17:19:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "wwalser", "company": "Ask Inline"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-15T22:46:03Z", "contents": "I'd like to take this a step further: Get rid of the timeout argument (to replace it with stop(3) == equvialent to stop();stop();stop() along with multiple start calls). Have no default timeout, but when global timeout is set, apply that to all async calls.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-20T11:09:50Z", "contents": "I'm not sure if there is a way to make a fancy link to the pull request/branch, but here is a good old fashioned link :D.\n#125", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:04:56Z", "contents": "61137fd added a testTimeout config option, which still needs to be documented. A per stop-timeout doesn't exist anymore, and isn't planned to get added back.\nSomething like this:\n\"Set \"QUnit.config.testTimeout = 30000\" to get a global timeout of 30s for all tests to make sure the suite never stops working complelty\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-04-11T17:19:58Z", "contents": "Right, so this is fixed :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 126, "url": "https://github.com/qunitjs/qunit/issues/126", "title": "QUnit doesn't work in konqueror", "contents": "Konqueror 4.6.2 fails on qunit.js line 13:\n\nreturn !!sessionStorage.getItem;", "createdAt": "2011-07-22T10:29:16Z", "updatedAt": "2011-07-22T10:36:25Z", "closedAt": "2011-07-22T10:36:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "majek", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "majek", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "majek", "authorAssociation": "NONE", "createdAt": "2011-07-22T10:36:25Z", "contents": "Don't listen to me. It's already in try/catch block, It's just the stupid way konqueror reports exceptions.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 127, "url": "https://github.com/qunitjs/qunit/issues/127", "title": "Minimize the amount of required html for QUnit", "contents": "I think it would be great if in order to get going with QUnit the only html required was instead of\n<h1 id=\"qunit-header\">QUnit example</h1>\n<h2 id=\"qunit-banner\"></h2>\n<div id=\"qunit-testrunner-toolbar\"></div>\n<h2 id=\"qunit-userAgent\"></h2>\n<ol id=\"qunit-tests\"></ol>\n<div id=\"qunit-fixture\">test markup, will be hidden</div>\n\njust simply\n<div id=\"qunit\"></div>\n<div id=\"qunit-fixture\">test markup, will be hidden</div>\n\nThis simplifies things from the user perspective because it hides some rather non-interesting implementation details. But it's more than just cosmetic because then the library can change its markup structure without requiring the user to make a corresponding change.", "createdAt": "2011-07-26T12:03:36Z", "updatedAt": "2018-12-22T20:36:54Z", "closedAt": "2016-11-01T16:28:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdworth", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "rdworth", "company": "@the-container-store "}, {"login": "jzaefferer", "company": null}, {"login": "bboyle", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 19, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-26T12:28:19Z", "contents": "Some motivation here was to allow the user to customize the markup, e.g. leave out parts of it. That seems like its not really necessary and there's probably an alternative, too. I'm wondering if the id of the first element should be something like qunit-output...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bboyle", "authorAssociation": "NONE", "createdAt": "2011-07-27T12:10:09Z", "contents": "be cool if you could leave out all the markup, and the script will just make it and appendTo( 'body' )", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-27T12:18:36Z", "contents": "The point of the manual step is to allow you to leave it out completely. If we insert by default, we'd need another option to disable inserting it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bboyle", "authorAssociation": "NONE", "createdAt": "2011-07-27T14:16:47Z", "contents": "Use it if it's found in the markup, create it if it's not? Something like this\u2026\nvar qunit = $( '#qunit' );\nif ( qunit.length === 0 ) {\n    qunit = $( '<div id=\"qunit\"></div>' ).appendTo( 'body' );\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdworth", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-27T15:13:14Z", "contents": "That doesn't answer the problem J\u00f6rn pointed out. If I want the JavaScript on my page but without any effect to my DOM, I shouldn't have to tell QUnit to not do anything. I already told it that by not adding the div$qunit to my DOM.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bboyle", "authorAssociation": "NONE", "createdAt": "2011-07-27T23:34:49Z", "contents": "wait\u2026 you want to support including the script on the page but doing nothing? that seems a very unusual use case to me, but yes, that would be trickier.\nhowever, you could trigger the code I wrote only at the point where qunit would usually produce output (e.g. test results) onscreen. if at that point there was no #qunit element in the page, we could create and append one.\nso, if qunit.js is included on the page, but no modules/tests are specified, it would do nothing. as soon as a test is run, it would create the html and display the results.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdworth", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-27T23:58:30Z", "contents": "The simple inclusion of a file called qunit.js should not presume to modify the dom with no invitation. If it finds an element with an id of qunit, sure (that's part of the API if you will). But if it finds no such element it should do nothing. \"Fail\" silently and gracefully. That's unobtrusive. Requiring someone to tell QUnit not to do something when it didn't request it be done is too burdensome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bboyle", "authorAssociation": "NONE", "createdAt": "2011-07-28T02:09:33Z", "contents": "include qunit.js and nothing more = does nothing. Agreed.\ninclude qunit.js and #qunit element and tests = run tests and display test results\ninclude qunit.js and #qunit element and NO tests = display #qunit element\ninclude qunit.js and tests and NO #qunit element = run tests but display nothing\n\nI guess case 4 is for people using the callbacks and similar. Anyway, easy enough to write a wrapper script that loads qunit and creates the HTML.\nInteresting, it will be worth reflecting why qunit works this way on the site\u2014that qunit is a test framework first and the visual display of results is only one way of using it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2011-08-12T05:15:22Z", "contents": "Just to make sure, the 4 points bboyle describes, that's the current state of things right ? At least from what I remember that's what's currently the case. This ticket simply suggests to let QUnit add more of the markup itself and less by humans. Makes sense to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T09:08:48Z", "contents": "Actually Ben describes what it should behave like. Currently there are multiple elements, not just the one #qunit element.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T16:01:29Z", "contents": "Keeping this open for now to update the documentation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-04-04T20:57:30Z", "contents": "Why is <div id=\"qunit-fixture\">test markup, will be hidden</div> not automatically created?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bboyle", "authorAssociation": "NONE", "createdAt": "2012-04-04T23:53:36Z", "contents": "QUnit takes a minimalist approach to modifying the page markup. Not every test needs #qunit-fixture, so it's not automatically added. That\u2019s my guess. I find this useful, I often write tests that are checking the DOM matches a defined template, so there\u2019s no fixture.\nYou could use the QUnit.begin( callbackFunction ) hook to automatically add #qunit-fixture from within a test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-04-04T23:57:51Z", "contents": "I'm not sure you understand what I meant.\n<div id=\"qunit-fixture\"></div> is supported by QUnit internally, and checked for and emptied after each test.\nPreviously the recommended default markup in manuals was:\n<h1 id=\"qunit-header\">QUnit example</h1>\n<h2 id=\"qunit-banner\"></h2>\n<div id=\"qunit-testrunner-toolbar\"></div>\n<h2 id=\"qunit-userAgent\"></h2>\n<ol id=\"qunit-tests\"></ol>\n<div id=\"qunit-fixture\"></div>\nThe new recommended way (as of QUnit 1.3.0, still supporting the above method though) is:\n<div id=\"qunit\"></div>\n... which automatically creates the structure. except without #qunit-fixture. Why not add it by default just like the rest?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bboyle", "authorAssociation": "NONE", "createdAt": "2012-04-05T00:55:22Z", "contents": "I don't know why that decision was made.\nPerhaps the recommended markup should be:\n<div id=\"qunit\"></div>\n<div id=\"qunit-fixture\"></div>\nI certainly need the above code to be supported for some of my tests\u2014I don\u2019t want to have to use javascript to write out my fixture HTML in every case.\nThat doesn't answer your question though. I'm commenting because I am interested in how this works too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-06T11:51:20Z", "contents": "Yeah, what @bboyle posted should be the recommendation. Speaking of which, what recommendation were you referring to anyway?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-04-06T14:15:50Z", "contents": "I fail to see the point why we would want to require the fixture to be manually put in the base markup and not the rest?\nIf the only reason is \"because we forgot to include it in the auto-basemarkup for 1.3.0, and we don't want to break it by creating two of them\", then there is an easy way around that: detecting presence (just like we do for #qunit already).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-06T14:19:54Z", "contents": "No, that's not the point. The fixture element is supposed to contain custom markup that you use for your tests. If you don't need that, don't include the element. If you create the markup for each test, either clean up manually as well, or add the empty fixture element.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-30T16:18:37Z", "contents": "We've got that pretty well covered on qunitjs.com now, its in every example.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 128, "url": "https://github.com/qunitjs/qunit/issues/128", "title": "Add QUnit subsuite runner", "contents": "See jquery/jquery-ui@0290325#diff-1\nCode a bundle with QUnit as an addon: https://github.com/jquery/jquery-ui/blob/master/tests/unit/testsuites.js", "createdAt": "2011-07-26T20:46:51Z", "updatedAt": "2013-05-01T17:26:53Z", "closedAt": "2012-05-04T09:58:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "wwalser", "company": "Ask Inline"}], "comments_count": 13, "comments_data": [{"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-27T09:54:14Z", "contents": "I've had a go at this in https://github.com/wwalser/qunit/tree/subsuiteRunner\nI've also created a new branch in my UI fork that has these changes pulled in. I did this since the UI project already had a use case and I wasn't sure how you would want it tested in QUnit. I do intend to add tests for this before submitting a pull request.\nhttps://github.com/wwalser/jquery-ui/tree/modifiedTestSuites\nOn the topic of testing in QUnit, a couple of questions.\n\nA whole new page of tests, or just add a subsuite call to the bottom (the iframe, and callback methods doesn't get created until runSuite is called so it won't interfere with existing tests on the page).\nWhat files do you want it to call out too?\nI suppose I could create a new directory and break each module from test.js into a seperate file then use subsuiteRunner to test them all inside of index.html is this preferable to the above options?\n\nOther random questions\n\nIs this what you were looking for at all?\nShould the new js and css file names have qunit prepended?\nShould all of this be inside of the existing qunit.js/css. You said addon, so I assumed a separate file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-27T10:58:49Z", "contents": "I can't even answer all those questions right now, have to get back to that. Here's the stuff I can already answer:\nContrary to Scott's version for jQuery UI, QUnit doesn't depend on jQuery, so we should look into making this runner independent of jQuery, too. If there's some helper we can expose from QUnit to reuse here, we should do so.\nAs for testing, how about creating an additional suite thats just a dummy, then creating a composite suite that runs the dummy and the actual QUnit testsuite?\nAs for filenames and folders, not sure yet - there's no reference yet, but there's going to be more addons for specific usecases. Seperate files make sense. Probably a seperate folder, too...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-27T11:19:00Z", "contents": "The jQuery dep removal shouldn't be a problem.\nWill try and have a go at the testing.\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-28T10:55:42Z", "contents": "I just committed a change that removes the jQuery dependency.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-28T11:05:50Z", "contents": "Could you send a pull request? Makes it much easier to keep track of changes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-28T12:23:46Z", "contents": "Yeah, I figured I'd get some tests going before submitting a pull request.\nI talked to Scott today about this and he mentioned that landing this in UI might be a better way to make incremental changes and flesh out some of the unknowns around how to created add-ons for QUnit.\nPull request #131 submitted.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-07-28T14:14:38Z", "contents": "Yeah, he mentioned that to me, too, after I had asked for the pull request. So lets land this in jquery-ui first.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T15:46:11Z", "contents": "The composite addon exists, but the demo currently fails. I can't figure out why. See addons/composite/composite-demo-test.html\n@wwalser could you take a look at that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-15T23:13:52Z", "contents": "Tests that overwrite callbacks fail when run inside a sub-suite if I remember correctly. I've been quite busy between work and other random commitments I'll try to take a look at composite stuff at some point.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:44:51Z", "contents": "Need to fix the callbacks. Once that is done, try to replace the custom code in UI and Mobile (tests/unit/runner.js)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-06T10:04:14Z", "contents": "I've started a new branch for the refactor from the old style logging callbacks to the new addon system callbacks. https://github.com/wwalser/qunit/tree/compositeFixes\nSo far I have two of the callbacks refactored and many of the previously failing tests are passing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-06T10:15:02Z", "contents": "Nice! Thanks for the update.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:58:52Z", "contents": "This was fixed by 998b4af", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 129, "url": "https://github.com/qunitjs/qunit/issues/129", "title": "deepEqual for arrays in different windows always fail", "contents": "The problem comes from testing strict equality between the constructors of two objects. If they were created in different windows then they will always have different constructors, even if they are both instances of Array, since each Array is a member of its own window.\nsee: https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L1060\nThis type of problem, demonstrated: http://jsbin.com/icacur/8", "createdAt": "2011-07-27T13:46:31Z", "updatedAt": "2012-09-18T08:41:31Z", "closedAt": "2011-09-20T02:59:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "micmath", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "micmath", "company": "BBC"}, {"login": "prathe", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-27T19:17:05Z", "contents": "Interesting. Comparing constructors make sense when walking recursively object properties when \"instances\" are compared in OOP style programming. Having different constructors \"could\" means different objects. I used the term \"could\" because of the nature of JavaScript objects and prototypal inheritance, when comparing we sometimes need it honors \"equivalence\" and sometimes that it honors strict comparison. It is hard to figure out what it is wanted.\nBut with the case you raised maybe I can see an improvement to QUnit. Maybe we should only compared constructors when we are walking object properties, or in pseudo code when stack depth > 0? Not sure if this will break the tests suite.\nThe behavior I considered good at the time I created deepEqual can be revised, but I really think that those 2 tests are there to stay wathever we want to add in:\nhttps://github.com/jquery/qunit/blob/master/test/same.js#L1194L1195\nI'll take a look at it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "micmath", "authorAssociation": "NONE", "createdAt": "2011-07-27T22:22:07Z", "contents": "The problem appears when you assume that two arrays, created in different windows, have the same constructor: they do not. One may be aWindow.Array and the other may be bWindow.Array. Both are the Array constructor, but each constructor is attached to a different window. Suggest you try something like a.constructor.name === b.constructor.name", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:47:49Z", "contents": "Hey @prathe, any update on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-05T14:43:45Z", "contents": "I haven't checked it out seriously yet. I'm in vacation until august 22nd somewhere I won't be able to check it out. I don't know it this enhancement can be done without impacting other cases, e.g. if it is something that will require development or major changes yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "micmath", "authorAssociation": "NONE", "createdAt": "2011-08-05T19:20:34Z", "contents": "For what it's worth, our use case is that we create window objects as fixtures to run our tests on. This helps us sandbox things that have global side effects. Also the solution should not be too drastic, I outlined one way above. The point is you are currently inadvertently checking that two arrays are members of the same window. This is clearly not the intent of deepEqual.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-05T20:28:44Z", "contents": "The point is you are currently inadvertently checking that two arrays are members of the same window\n\nI don't think we can say it like that. deepEqual has a recursive definition and your suggestion may work for you, but it may possibly break when it is used to compare objects for OOP style programming.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "micmath", "authorAssociation": "NONE", "createdAt": "2011-08-06T12:03:45Z", "contents": "The problem for qunit is that JavaScript's loose typing makes it nigh impossible to determine if two constructors are \"equal\" if they are not references to the same function in the same window: eg (window_a.Array === window_a.Array) is true but (window_a.Array === window_b.Array) is false even though the Array constructor function is exactly equivalent in both window_a and window_b. Of course I suppose I could sneakily redefine window_b.Array to do something different, like return a bespoke specialised array-like object that is not the same as what the standard Array constructor returns, and in that case deepEqual would be correct to say they were not equal. So figuring out a way to always do the right thing here is difficult I admit.\nIt might be that this is a quirk that just needs to be emphasised in the documentation, and the user can rely on alternative methods outside of qunit to compare the members of arrays. Or a new method could be added to qunit: alike(arr1, arr2) or array_equiv(arr1, arr2) ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "micmath", "authorAssociation": "NONE", "createdAt": "2011-08-20T12:01:22Z", "contents": "for reference:\nsee http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-09-20T02:59:52Z", "contents": "It looks like it is QUnit.objectType which does not returns \"array\" even if the object it is an instance of Array.\nTaken the following function to create a new object:\nfunction object(o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n}\n\nThen\nQUnit.objectType( object( [] ) );\n\nReturns \"object\" not \"array\". Is it correct or is it not? I don't know. I guess sometimes we would want it returns \"array\" and sometimes not. It depends of what you want to do. I guess that this invalidates this isssue since I don't see a any conclusive solution.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 130, "url": "https://github.com/qunitjs/qunit/issues/130", "title": "Tests get moved between modules, causing expect() to fail", "contents": "I can't nail down the exact cause, but it seems like sometimes an assertion will \"move\" out of its current test/module into the next one. If I have an expect assertion in each of the relevant tests, the suite will fail (not enough tests run in one, too many in the other).\nYou can see this behaviour up at the xui tests page in Chrome or Firefox; the remoting and tween modules show this behaviour.\nOther things I can tell you about the test suite:\nThis gets run before page load:\nQUnit.config.autostart = false;\nif (typeof window.localStorage != 'undefined') window.localStorage.clear();\nif (typeof window.sessionStorage != 'undefined') window.sessionStorage.clear();\nAnd the tests get triggered after the body loads.", "createdAt": "2011-07-27T19:51:27Z", "updatedAt": "2011-08-17T00:37:56Z", "closedAt": "2011-08-05T11:46:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "filmaj", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "filmaj", "company": "@adobe"}, {"login": "jzaefferer", "company": null}, {"login": "wwalser", "company": "Ask Inline"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-05T11:46:35Z", "contents": "If you're clearing local/sessionStorage in order to disable the reordering, you could just set QUnit.config.reorder = false instead.\nThe page that you link to doesn't load for me, so can't really reproduce the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "filmaj", "authorAssociation": "NONE", "createdAt": "2011-08-15T17:31:30Z", "contents": "Sorry, try this link (without the www, our bad): http://xuijs.com/tests/tests/index.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-17T00:37:56Z", "contents": "I ran your tests with an up to date version of QUnit and they pass, then ran with your version of QUnit and they fail. You should update. The specific bug you're experiencing appears to be a combination of #118 and #82.\nFortunately pulling in the fix for #118 resolves your problem.\nThanks,\nWes", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 133, "url": "https://github.com/qunitjs/qunit/issues/133", "title": "[PATCH] Make sure that an initially \"hide passing test\" setting does not ignored", "contents": "Hi,\nthanks for QUnit.\nthis patch makes the QUnit \"hide/show\" test toggle more robust. I used this to \"hide passing test\" by default and now cannot toggle them on again:\n$('#qunit-tests').addClass('hidepass');\ndiff -r 873235de9961 abc-path/js/qunit.js\n--- a/abc-path/js/qunit.js  Wed Aug 03 16:11:40 2011 +0300\n+++ b/abc-path/js/qunit.js  Wed Aug 03 20:11:58 2011 +0300\n@@ -706,8 +706,8 @@\n            if ( filter.checked ) {\n                ol.className = ol.className + \" hidepass\";\n            } else {\n-               var tmp = \" \" + ol.className.replace( /[\\n\\t\\r]/g, \" \" ) + \" \";\n-               ol.className = tmp.replace(/ hidepass /, \" \");\n+               var tmp = \" \" + ol.className.replace( /\\s+/g, \"  \" ) + \" \";\n+               ol.className = tmp.replace(/ hidepass /g, \" \").replace(/\\s+/g, \" \");\n            }\n            if ( defined.sessionStorage ) {\n                if (filter.checked) {", "createdAt": "2011-08-03T17:12:55Z", "updatedAt": "2011-08-05T00:05:56Z", "closedAt": "2011-08-04T18:10:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shlomif", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "shlomif", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "wwalser", "company": "Ask Inline"}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-04T11:34:41Z", "contents": "How can I reproduce the issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shlomif", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-04T15:39:03Z", "contents": "jzaefferer: simply add the line I showed (\u00ab$('#qunit-tests').addClass('hidepass');\u00bb) to a page running QUnit. I have an example page like that here:\nhttps://bitbucket.org/shlomif/abc-path/src/c845053b7056/abc-path/js/\nbut note that qunit.js already contains the local modifications in the patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-04T16:10:34Z", "contents": "I wasn't able to produce a test case where the old stuff fails.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shlomif", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-04T16:32:47Z", "contents": "wwalser: try cloning the hg repository at https://bitbucket.org/shlomif/abc-path/src/c845053b7056/abc-path/js/ and running \"hg checkout qunit-bug-1\" and \"hg update\" and then browsing using Firefox to abc-path-test.html and clicking on the \"Hide passed tests\" button several times - nothing happens there. It happens if there is more than one \"hidepass\" class specified in the  class string.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-04T18:10:52Z", "contents": "Added a config option for this, so that we have an actually API and can document it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-05T00:05:56Z", "contents": "Ah, I see shlomif, nice.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 134, "url": "https://github.com/qunitjs/qunit/issues/134", "title": "Add a window.onerror handler", "contents": "That would help catch errors in code running outside of tests, e.g. when doing a feature check to decide if to run a test or not. Currently these can get by unnoticed. Might also help catch errors in asynchronous code, where QUnits try/catch doesn't help anymore.\nCould look something like this:\nQUnit.addEvent(\"error\", function(message, file, line) {\n  if (QUnit.config.current) {\n    ok( false, message + \", \" + file + \":\" + line );\n  } else {\n    test(\"global failure\", function() {\n      ok( false, message + \", \" + file + \":\" + line );\n    });\n  }\n});\n\nWith that both async errors inside a test and errors outside tests are catched and handled.\nIs there ever a situation where QUnit shouldn't do that?", "createdAt": "2011-08-05T11:53:56Z", "updatedAt": "2011-10-11T10:13:58Z", "closedAt": "2011-10-11T10:13:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 137, "url": "https://github.com/qunitjs/qunit/issues/137", "title": "QUnit can't use in Dynamically load", "contents": "If i load QUnit dynamically with loadScript,QUnit can't work well.\nBecause QUnit depend window.onload,no onload event was trigger when \"qunit.js\" been loaded.\nIt's no problem in yui test.\nIt's very important,we want do test in production emvironment,so must load dynamically.\nthank you!", "createdAt": "2011-08-10T02:22:04Z", "updatedAt": "2011-08-15T10:00:03Z", "closedAt": "2011-08-15T10:00:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yaniswang", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "yaniswang", "company": "Alibaba.com"}, {"login": "jzaefferer", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T09:13:11Z", "contents": "Try calling QUnit.load() manually after loading it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaniswang", "authorAssociation": "NONE", "createdAt": "2011-08-15T09:18:37Z", "contents": "Thank you very much.\nCan you support it in official version?\nYou can check the document.readystate after loaded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T09:24:13Z", "contents": "Seems like we'd open a can of worms there. If you load QUnit dynamically anyway, can't you just add that one additional line?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaniswang", "authorAssociation": "NONE", "createdAt": "2011-08-15T09:36:58Z", "contents": "I like QUnit very much,just want it more perfect.\nYUI test can use in dynamically load or not,and it's easy to run test after loaded.\njQuery's ready event is very good.\nIt will run tests more efficient after dom ready before onload.\nYou can put some big big images in page,the QUnit tests will not run before all images loaded.\nIf some images load very very slow,the QUnit tests will never run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T10:00:03Z", "contents": "YUITest requires you to manually start the testrunner, doesn't it?\nAs for the ready event: That's exactly why we use the load event by default, to make sure everything is loaded.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 138, "url": "https://github.com/qunitjs/qunit/issues/138", "title": "QUnit log order problem", "contents": "I have 2 issues for report.\n1,QUnit log event order is not same as test code order.\n2,If test like this,no module define first,the log order is error:\ntest(\"test1\", function() {\n});\nmodule(\"Module A\");\ntest(\"test2\", function() {\n});\nmodule(\"Module B\");\ntest(\"test3\", function() {\n});\nIt's issue?or just it?\nthank you.", "createdAt": "2011-08-10T02:25:22Z", "updatedAt": "2012-03-10T14:25:02Z", "closedAt": "2012-03-10T14:25:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yaniswang", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "yaniswang", "company": "Alibaba.com"}, {"login": "iurisilvio", "company": null}, {"login": "holygeek", "company": null}, {"login": "wwalser", "company": "Ask Inline"}, {"login": "jzaefferer", "company": null}, {"login": "kof", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "iurisilvio", "authorAssociation": "NONE", "createdAt": "2011-08-11T19:05:44Z", "contents": "QUnit by default reorder tests to run first failed tests. You can disable this feature defining QUnit.config.reorder = false;.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaniswang", "authorAssociation": "NONE", "createdAt": "2011-08-15T09:20:18Z", "contents": "Thank you very much.\nI can't understand,can you tell me why test first failed tests?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "holygeek", "authorAssociation": "NONE", "createdAt": "2011-10-03T06:42:04Z", "contents": "@yaniswang Thank you for opening this issue. It's been bugging me since yesterday (read: hours lost :). The answer given by @iurisilvio solves the issue for me. I think the reason for the reorder makes sense for when you have like 100s of existing unit tests and you want to add a new feature - you create a new falling test, run qunit, the test fails, you implement the feature, run qunit test again and your new test is now run before all the other tests because of this setting that by default runs failing test first, which is most likely what you want so that you don't have to wait for all the other tests to run.\nBut this feature is buggy for asynchronous test because it will insist on running the failing test first even though you added the test using asyncTest.\nTL;DR: Set QUnit.config.reorder = false if you have asynchronous test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "iurisilvio", "authorAssociation": "NONE", "createdAt": "2011-10-03T16:46:55Z", "contents": "It is a good explanation about why failed tests run first.\nYour tests should be order independent, even if it is an asynTest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "holygeek", "authorAssociation": "NONE", "createdAt": "2011-10-04T00:13:06Z", "contents": "I was going to agree with you but then consider this: what's the point of asyncTest? Isn't it to run a sequence of test one after another in a deterministic sequence? If that is true then qunit reordering asyncTests would be countermanding your intention of creating asyncTests in the first place isn't it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "iurisilvio", "authorAssociation": "NONE", "createdAt": "2011-10-04T00:24:49Z", "contents": "As far as I know, asyncTest block the tests until a start() is received. Tests still run sequentially, even with sync and async tests. An async test is equivalent to a sync test with a stop() call.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "holygeek", "authorAssociation": "NONE", "createdAt": "2011-10-04T01:31:39Z", "contents": "Your earlier comment that test should be order independent is correct for unit tests and I agree with it. My use case for qunit that produces this issue (test running out of roder) for me is when I use it for integration test where I need a set of tests to be run in sequential order no matter what happens. That's where I use asyncTests, with the assumption that qunit will honor the order in which the asyncTests are added. My assumption was wrong as demostrated (minimally) in this gist", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwalser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-04T07:21:06Z", "contents": "the purpose of async test is to run tests that have asynchronous code executed as a part of them (see: setTimeout, setInterval, $.ajax, nodejs).\nTry using:\nQUnit.config.reorder = false\nIf that doesn't work, you may be running into an instance bug #82 which will be fixed by pull request #148. It should be pulled into master soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T14:44:46Z", "contents": "Might by fixed by #148 - could you verify?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kof", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-12-08T01:41:32Z", "contents": "still broken for me, my workaround here is to use this.config.current.testName inside of log callback", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-10T14:25:02Z", "contents": "It looks like there are two issues here.\nOne is about tests not being atomic, which is generally a bad idea, but can be acceptable when disabling reordering:\nQUnit.config.reorder = false\nThe other is something @kof mentioned, and there's not nearly enough information. In that regard, please open a new issue with something reproducable if the issue is still valid.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 139, "url": "https://github.com/qunitjs/qunit/issues/139", "title": "Allow multiple hooks to be registered for QUnit", "contents": "QUnit.begin, .end, .moduleStart etc. are all direct functions. Replacing them with hook arrays with make it easier for multiple add-ons to be used on a single client (without having them override each other).\nSince it's starting to get a little full in the root of QUnit (assertions, hooks, utilities, configuration, states, etc.), and to avoid (more) (potential) naming conflicts though, perhaps move them into a new object called QUnit.hooks ?\nSomething like this:\nQUnit.hooks = {\n  begin: [],\n  end: [],\n  moduleStart: [],\n // etc.\n}\n\nQUnit.addHook = function( name, fn ) {\n  // Something like this ?\n\n  if ( QUnit.is( 'function', fn ) && QUnit.hooks[name] !== undefined ) {\n    QUnit.hooks[name].push( fn );\n    return true;\n  }\n  return false;\n};\n\n// Backwards compatibility\nQUnit.addHook( 'begin', QUnit.begin );\nQUnit.addHook( 'end', QUnit.end );\n...", "createdAt": "2011-08-12T05:43:26Z", "updatedAt": "2012-02-15T15:40:16Z", "closedAt": "2012-02-15T15:40:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T09:06:03Z", "contents": "Also started a discussion about that here: http://jquerytesting.pbworks.com/w/page/44122141/QUnit-Callbacks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-07T22:00:06Z", "contents": "Being addressed with #150", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T15:40:16Z", "contents": "The proposal here was different, but #150 landed and seems to work pretty well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 140, "url": "https://github.com/qunitjs/qunit/issues/140", "title": "Make toggle system for urlParameter configurable", "contents": "QUnit has a nice little system to show checkboxes with a default state dependent on url parameters, and onchange it refreshes with only that url parameter added, removed and/or toggled.\nCurrently it's hardcoded but I would welcome having it available as a configurable option so that plugins can add their own boolean-triggers. I could implement this soon but wanted to know what others think of this first.\nThe hook where this would become available is 'begin' (since that one is called before QUnit.init()), however the reason this is currently not usable is because the config-values for and from urlParamters are generated from an IIFE rather than from QUnit.init.\nI think the code to populate QUnit.urlParams shouldn't change location (since it's a general utility that may be used by plugins or clients before window.onload/QUnit.begin) but the conversion to QUnit.config should be moved to QUnit.init for this to work.\nSo we'd have a new config variable that is an array containing these boolean-triggers,\nand in the window.load handler it looks in urlParams for current values and then create the label/input elements for each of them.\nvar config = {\n  // ...\n  urlConfig: ['noglobals', 'notrycatch'],\n  // ...\n};\n\naddEvent(window, \"load\", function() {\n  QUnit.init();\n  /* ... */\n\n // loop through urlConfig and set config[val] = !!urlParams[val];\n // create label/input elements for banner.innerHTML\n});", "createdAt": "2011-08-12T05:55:03Z", "updatedAt": "2011-08-15T09:22:23Z", "closedAt": "2011-08-15T09:22:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 142, "url": "https://github.com/qunitjs/qunit/issues/142", "title": "Backslash characters in messages should not be escaped", "contents": "If a backslash character appears in the message string of an assertion, then the backslash is unexpectedly prefixed with an additional backslash character on the test results screen. For example,\ntest(\"QUnit bug test case\", function () {\n    equal(\"\\\\\", \"\\\\\", \"'\\\\\\\\' === '\\\\\\\\'\");\n});\n\nThe message for the comparison assertion is displayed on the test results screen as '\\\\\\\\' === '\\\\\\\\' but I was expecting '\\\\' === '\\\\', which is the string that the JavaScript string \"'\\\\\\\\' === '\\\\\\\\'\" represents.\nI am using qunit.js of commit 75dae0b.", "createdAt": "2011-08-14T14:51:25Z", "updatedAt": "2011-09-16T09:56:04Z", "closedAt": "2011-09-16T09:55:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T08:35:45Z", "contents": "Probably some overeager escaping going on somewhere. Needs a patch.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 144, "url": "https://github.com/qunitjs/qunit/issues/144", "title": "Throw error message for wrong argument types.", "contents": "Hello,\nI'm wondering if you could add an option to enforce type checking for the arguments of each of the assertion functions qunit provides.\nThis would help beginners better understand how to use qunit properly and make finding bugs a lot easier.\nI do realize that the documentation states the argument types but I misinterpreted it when first I read it.\nThis feature could be easily achieve this by adding a wrapper to each of assertion functions.\nHere are some common problems that I had.\nok( function(){\nthrow new Error('example');\n}, 'Test passes but the user expects for the function to be called.' );\nraises( false, 'Test Passes.');\n\nPossible type enforcement could be ...\nok( boolean, [string]);\nraises( function, [ string, string ] )\nequals( primitive types, [ string ] );\n...\netc", "createdAt": "2011-08-15T08:28:18Z", "updatedAt": "2012-02-15T15:39:16Z", "closedAt": "2012-02-15T15:39:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "LarryBattle", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "LarryBattle", "company": "me"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-08-15T08:41:50Z", "contents": "We can consider this, though its not quite as easy. ok() accepts pretty much anything as its first argument, and checks if its truthy or falsey. raises() allows multiple signature as well. Still worth investigating which checks can be made.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T15:39:16Z", "contents": "Half a year later, I don't think this is worth addressing. Learning what arguments to use where is pretty fundamental. Adding those checks would help only very early beginners.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 146, "url": "https://github.com/qunitjs/qunit/issues/146", "title": "jsDump fails on DOM node in Safari", "contents": "See http://bassistance.de/i/1a186f.png\nFails on running the regular QUnit testsuite in Safari. With very similar results in PhantomJS.", "createdAt": "2011-08-15T21:18:28Z", "updatedAt": "2011-10-10T15:12:18Z", "closedAt": "2011-10-10T15:12:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T15:12:18Z", "contents": "Looks like this got fixed with cf76f1a", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 149, "url": "https://github.com/qunitjs/qunit/issues/149", "title": "Rhino setInterval problem", "contents": "I faced with problem that Rhino and QUnit produce following error in case if required object is missed:\n# module: wedanaMath\n# test: Check whether WedanaMath exists\njs: \"../../../../../../../bin/qunit/qunit.js\", line 1223: Java class \"[B\" has no public instance field or method named \"setInterval\".\n\nThe test is the following:\nmodule('wedanaMath');\ntest(\"Check whether WedanaMath exists\", function() {\n  ok( WedanaMath, \"WedanaMath() exists\" );\n});\n\nBut the module which contains WedanaMath was not loaded.\nIt was reproduced with the QUnit from master branch and Rhino 1.7R2. This problem was not reproduced with QUnit shipped with Env.js (unfortunatly I don't know version).\nSeems the problem in the following code:\nhttps://github.com/jquery/qunit/blob/master/qunit/qunit.js#L1223\nelse if (typeof obj.setInterval !== undefined && typeof obj.document !== \"undefined\" && typeof obj.nodeType === \"undefined\") {\n\nIn the old version Window object determinated by QUnit.is function.", "createdAt": "2011-08-17T22:55:53Z", "updatedAt": "2012-02-15T15:36:37Z", "closedAt": "2012-02-15T15:36:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pavlot", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pavlot", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T15:36:37Z", "contents": "Can't reproduce this issue, at least not with this Rhino runner: https://github.com/jquery/qunit/blob/cli/test/suite.js", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 153, "url": "https://github.com/qunitjs/qunit/issues/153", "title": "qunit.js errors in ie7", "contents": "Simply including the version of qunit that's currently at master in an html page throws the following javascript error:\nLine: 680\nChar: 1\nError: Expected identifier, string or number\nCode: 0\n\nReduction of bug: http://jsfiddle.net/YTEwj/embedded/result/", "createdAt": "2011-09-14T17:08:24Z", "updatedAt": "2011-09-14T20:03:24Z", "closedAt": "2011-09-14T20:03:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "deleteme", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "deleteme", "company": "@goldstar "}, {"login": "prathe", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "deleteme", "authorAssociation": "NONE", "createdAt": "2011-09-14T17:10:10Z", "contents": "I should also say that currently this file exhibits the bug: http://code.jquery.com/qunit/git/qunit.js. This javascript file is used in some featured qunit examples.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 154, "url": "https://github.com/qunitjs/qunit/issues/154", "title": "IE8 and <!DOCTYPE HTML>: error \"Can't find member\"", "contents": "Qunit executing in IE8 (in fact, IE9, but in \"Exploration mode: IE8) throws an error if the HTML has the tag \".\nThe error is \"Can't find member\" and is thrown in the line 980, char 4.\nExample of single HTML file:\nhttp://pastebin.com/BCGS5BeY", "createdAt": "2011-09-16T06:50:23Z", "updatedAt": "2011-10-20T12:08:07Z", "closedAt": "2011-10-20T12:08:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lucasvc", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lucasvc", "company": "TomTom Telematics BV"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-16T08:55:19Z", "contents": "Try latest, as 7cf3bf7 fixed some trailing-comma issues that caused IEs to fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lucasvc", "authorAssociation": "NONE", "createdAt": "2011-09-16T09:05:46Z", "contents": "Is the one I've used, but still not working (I re-downloaded again).\nThe error is thrown because Qunit tryes to override 'constructor' property of IE window.\nThe way I found temporally to solve is changing the place of the Qunit constructor, after extending IE window: lines 433-440 after 510 line, but I dunno if it's the real-way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-20T12:08:07Z", "contents": "Fixed by #169", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 155, "url": "https://github.com/qunitjs/qunit/issues/155", "title": "Failing noglobals test in IEs", "contents": "In IEs, the noglobals test fails: http://bassistance.de/i/677c48.png", "createdAt": "2011-09-16T09:35:58Z", "updatedAt": "2011-10-12T20:51:19Z", "closedAt": "2011-10-12T20:51:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-16T09:36:12Z", "contents": "@wwalser, could you take a look at these?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2011-09-18T19:23:30Z", "contents": "The jsDump failure was previously reported as #146", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-09-19T07:21:44Z", "contents": "Thanks, kicked that part out.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 156, "url": "https://github.com/qunitjs/qunit/issues/156", "title": "Support Object.prototype extending environment", "contents": "jQuery core is against this and personally I am as well. However in a testing environment I think it should be possible to run tests in environment where frameworks exist that do extend the Object.prototype.\nCurrently QUnit fails in two main areas afaik:\n\nThe for ( var i in ns ) loop in QUnit.diff\n** Causes exception for calling property 'length' of undefined.\n** Example: ns['someprototype'].rows.length (rows doens't exist and neither does length in that case)\nThe for ( key in params ) loop in QUnit.url\n** Causes the url to include all prototypes when clicking for example the 'notrycatch' checkbox.", "createdAt": "2011-09-18T19:39:39Z", "updatedAt": "2011-10-10T15:10:32Z", "closedAt": "2011-10-10T15:10:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2011-10-03T03:24:09Z", "contents": "#159", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T15:10:32Z", "contents": "Fixed by #159", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 160, "url": "https://github.com/qunitjs/qunit/issues/160", "title": "Missing a defined.setTimeout check.", "contents": "Missing a defined.setTimeout check at line line #914. This causes an error when running in Rhino/Node.", "createdAt": "2011-10-01T15:42:37Z", "updatedAt": "2011-10-10T15:10:12Z", "closedAt": "2011-10-10T15:01:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T15:10:12Z", "contents": "Updated the cli branch - cd test; node suite.js shows a lot more failures...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 161, "url": "https://github.com/qunitjs/qunit/issues/161", "title": "compare space in firefox", "contents": "hi,may be it not a bug, but why this test failed.\nequal(\" \",document.createTextNode(\"\\u00A0\").textContent)\nthanks!", "createdAt": "2011-10-05T02:58:50Z", "updatedAt": "2011-10-06T15:57:08Z", "closedAt": "2011-10-06T15:57:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "xiaohulu", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "xiaohulu", "company": "Block Lang"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-06T15:57:08Z", "contents": "That is not a QUnit issue. Try this on any JS console (Firebug, Web Inspector): \" \" == \"\\u00A0\" == false", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 162, "url": "https://github.com/qunitjs/qunit/issues/162", "title": "Add version/build information to qunit.js", "contents": "Would be nice if there was a build or version number to the commetns block at the top of qunit.js so that we know what build we're pulling and using.", "createdAt": "2011-10-05T05:13:19Z", "updatedAt": "2011-10-06T15:55:49Z", "closedAt": "2011-10-06T15:55:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dmitrye", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dmitrye", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-06T15:55:49Z", "contents": "Done. Just tagged v1.0.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 163, "url": "https://github.com/qunitjs/qunit/issues/163", "title": "jsDump treats any object with a length property as an array", "contents": "jsDump doesn't even agree with jQuery.isArray, treating anything with a length parameter as an array, causing inappropriate output, most commonly empty arrays or arrays containing undefined for as many times as the length property value. Real Array, and possibly NodeList objects can be detected by the same means that the objectType or jQuery.isArray methods work.", "createdAt": "2011-10-07T19:46:39Z", "updatedAt": "2011-10-10T14:51:03Z", "closedAt": "2011-10-10T14:51:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trevorparscal", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "trevorparscal", "company": "wikiHow"}, {"login": "NV", "company": "@apple"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "NV", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-08T09:57:18Z", "contents": "I've a fork of jsDump that doesn't have this problem. See 1d9563a.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T14:51:03Z", "contents": "Fixed by #164", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 165, "url": "https://github.com/qunitjs/qunit/issues/165", "title": "jsDump fails on DOM node in IE9", "contents": "See http://swarm.jquery.org/?state=runresults&run_id=2156&client_id=217\nThis change fixed Safari, but broke IE: cf76f1a\nRelated discussion: f24167a#commitcomment-641598", "createdAt": "2011-10-10T15:17:27Z", "updatedAt": "2011-10-10T19:34:15Z", "closedAt": "2011-10-10T19:34:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-10-10T19:34:15Z", "contents": "Fixed by #166", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 167, "url": "https://github.com/qunitjs/qunit/issues/167", "title": "Wrongly detect Node as not having setTimeout", "contents": "QUnit wrongly detects defined.setTimeout as false in Node.js because it does this\n(function(window) {\n  // code\n})(this);\ninstead of\n(function(window) {\n  // code\n})(typeof global == 'object' && global || this);", "createdAt": "2011-10-13T23:07:22Z", "updatedAt": "2012-02-15T15:37:59Z", "closedAt": "2012-02-15T15:34:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "kof", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "kof", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-12-08T01:36:59Z", "contents": "this will help to fix the global and exports in all environments\nhttps://github.com/kof/expose.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T15:34:28Z", "contents": "Fixed by 1a91206", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-02-15T15:37:59Z", "contents": "Woot! Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 171, "url": "https://github.com/qunitjs/qunit/issues/171", "title": "Improve exports", "contents": "Currenty exports implementation exposes QUnit as an exports property, as well as adding all QUnit property. That's probably wrong.\nThe Backbone approach could be a good model:\nvar Backbone;\nif (typeof exports !== 'undefined') {\n    Backbone = exports;\n} else {\n    Backbone = this.Backbone = {};\n}", "createdAt": "2011-11-03T09:35:23Z", "updatedAt": "2012-02-15T15:27:17Z", "closedAt": "2012-02-15T15:27:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "kof", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "kof", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-12-08T01:37:31Z", "contents": "this will help to fix the global and exports in all environments\nhttps://github.com/kof/expose.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T15:27:17Z", "contents": "Went for just assigning module.exports = QUnit. Works fine within the context of nodejs, much better then before.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 172, "url": "https://github.com/qunitjs/qunit/issues/172", "title": "Remove the testEnvironmentArg for test()", "contents": "Need to check if core uses that anywhere. If so, help them drop it.", "createdAt": "2011-11-03T09:51:18Z", "updatedAt": "2012-02-15T14:59:11Z", "closedAt": "2012-02-15T14:59:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 173, "url": "https://github.com/qunitjs/qunit/issues/173", "title": "Explore Sandboxing", "contents": "Currently its pretty easy to build a testsuite that only works under certain circumstances, by having one test rely on leaks from another. Detecting and fixing those leaks can be really difficult. Some kind of sandboxing to isolate tests from each other, even if its just a temporary thing like noglobals, could at least help detect leaks, if not even be an always-on option.", "createdAt": "2011-11-04T00:05:19Z", "updatedAt": "2012-08-30T16:07:36Z", "closedAt": "2012-08-30T16:07:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "rwaldron", "company": "Bocoup"}, {"login": "johnbender", "company": "UCLA Computer Science Dept."}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:37:51Z", "contents": "Core's testIframe method: jquery/jquery@f365683", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-01T17:40:26Z", "contents": "In Ringmark...\n\nmodule(\"foo\") and \"foo\" was the key in an object of fixtures, eg { \"foo\": \"<iframe src='tests.html'></iframe>\" }. Then in qunit.reset() i used config.current.module.. to determine which fixture to embed. iframe src tests postMessage() the result\n\nThis could probably fixed up to require less boilerplate and happen automattically", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnbender", "authorAssociation": "NONE", "createdAt": "2012-03-01T17:43:08Z", "contents": "It seems like it's possible to do the sandboxing entirely without user intervention by:\n\nloading the same test page in the iframe\nstopping the iframe test suite\nclearing the iframe test queue\ninjecting a test into the iframe test queue from the parent test queue\nstarting the iframe test suite\ngathering the results\nreporting the results\nrinse, repeat with the next parent page test\n\nI've gotten about half way down this road a couple of times for the jqm test suite before getting pulled off to work on other things. Once you've got that working there's no reason you couldn't fire up n iframes to run each of the tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-06-25T14:24:38Z", "contents": "We ran into a similar issue when writing the test suite for MediaWiki's ResourceLoader. There were several Map-like objects that had to be sandboxed within tests.\nBasically it is like this:\n\nObject constructor function called and generated object passed as second argument to module()\nInitially it keeps a reference to the original object\nOn setup() it overwrites it with a deep-copied version of the object\nOn teardown() it restores the original reference\n\nUsage:\nQUnit.module( 'mediawiki.foo', QUnit.newMwEnvironment({\n  config: { hello: 'foo' }\n}) /* returns { setup: .., teardown: .. } */ );\n\n// outside test:\n// - mw.config.get( 'skin' ) is 'vector'\n// - mw.config.get( 'hello' ) is undefined\n\nQUnit.test( 'example', function (assert) {\n mw.config.get( 'hello' ); // foo\n mw.config.get( 'skin' ); // 'vector'\n mw.config.set( 'hello', 'bar' );\n mw.config.get( 'hello' ); // bar\n});\n\nQUnit.test( 'another example', function (assert) {\n mw.config.get( 'hello' ); // foo\n});\nImplementation:\n\nSee https://gerrit.wikimedia.org/r/gitweb?p=mediawiki/core.git;a=blob;f=tests/qunit/data/testrunner.js;h=f3176abf727e9c294a6474c5d6264a856d206107;hb=HEAD#l93", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-30T16:07:36Z", "contents": "iframe based solutions don't seem like a good solution, as they cause more problems then they solve. So unless some new idea comes up, we'll ignore this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 178, "url": "https://github.com/qunitjs/qunit/issues/178", "title": "Make test fail if no assertions run", "contents": "On finish(), check if number of assertions is zero, if so, add a failing assertion. Accept that only when expect(0) is called explicitly.", "createdAt": "2011-11-24T12:37:26Z", "updatedAt": "2012-03-05T11:52:07Z", "closedAt": "2012-03-05T11:52:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 179, "url": "https://github.com/qunitjs/qunit/issues/179", "title": "Add hook for custom types output in jsdump", "contents": "Currently the output for big objects, even for passed tests, can get pretty nasty big. Customizing QUnit.jsDump is possible, but not nice at all.\nThere should be a way to detect and format custom types, something like this:\nQUnit.jsParse.registerType(function(obj) {\n    /* return true or false */\n}, function(obj) {\n/* return string */\n})\n\nOr make that a single function: If it matches, format it, otherwise return false/null/undefined.", "createdAt": "2011-11-24T15:28:39Z", "updatedAt": "2015-10-20T19:34:30Z", "closedAt": "2015-05-18T16:30:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "mixonic", "company": "Addepar"}, {"login": "wycats", "company": "Tilde, Inc."}], "comments_count": 11, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:22:41Z", "contents": "Since 87061fb, passed tests don't output anything. If there's still interest in this, let us know.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:28:24Z", "contents": "Yehuda still wants to see this, will give it a try.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-10T14:21:37Z", "contents": "QUnit.jsDump.setParser(name, parser) already exists. With that a custom parser can be registered, but how would you register that parser to get called? Needs a custom type to match.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-04-14T07:01:31Z", "contents": "It could be done by overloading whatever base type parser it is recognized as. Example (untested);\nQUnit add-on code:\nvar jsDump_object_parser_original = QUnit.jsDump.parsers.object;\n\nQUnit.jsDump.setParser( 'FooBar', function (obj, stack) {\n  return '[FooBar: ' + obj.foo + ', ' + obj.bar + ']';\n});\n\nQUnit.jsDump.setParser( 'object', function (obj, stack) {\n  if ( obj.constructor === FooBar ) {\n    return QUnit.jsDump.parse( obj, 'FooBar', stack );\n  }\n  return jsDump_object_parser_original.call( this, obj, stack );\n});\nTest suite:\nfunction FooBar( foo, bar ) {\n  this.foo = foo;\n  this.bar = bar;\n}\n\nmodule( 'FooBar' );\n\ntest( 'Example', function () {\n  deepEqual( new FooBar( 'one', 'two' ), { foo: 'one', bar: 'two' }, 'Example assertion' );\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T17:08:30Z", "contents": "@wycats can you provide a PR for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-06T14:09:57Z", "contents": "Patches welcome...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-22T11:30:24Z", "contents": "Today I finally needed this myself, while using momentjs in a test suite. moment objects have tons of properties that make the jsDump output rather useless (and slow). I ended up with this snippet to   configure custom output for moment objects:\n(function() {\n    typeOf = QUnit.jsDump.typeOf;\n    QUnit.jsDump.typeOf = function( obj ) {\n        if (obj && obj._isAMomentObject) {\n            return \"moment\";\n        }\n        return typeOf.apply(this, arguments);\n    };\n    QUnit.jsDump.setParser( \"moment\", function( obj ) {\n        return \"moment(\" + obj.toString() + \")\";\n    });\n}());\nsetParser is fine, but since there is no official way to extend typeOf, its useless by itself. Proxying is not an API, just a workaround.\nThe solution Timo described above also requires delegating back to the original QUnit.jsDump.parsers.object object, that's not better.\nHow about this as an API, taking my original snippet, but making the two callbacks more explicit and adding the name?\nQUnit.jsParse.register({\n    type: function(obj) {\n        /* return true or false */\n    },\n    parse: function(obj) {\n        /* return string */\n    }\n})\nFor the moment object, the call would look like this:\nQUnit.jsParse.register({\n    type: function(obj) {\n        return !!(obj && obj._isAMomentObject);\n    },\n    parse: function(obj) {\n        return \"moment(\" + obj.toString() + \")\";\n    }\n});\nOn the implementation side, the parse method would use the type argument, otherwise check for registered \"parsers\", then fall back to typeOf. this.parsers wouldn't be used at all for custom parsers.\nIf we implement that, we should probably remove everything besides parse and register from the QUnit.jsDump object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixonic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-23T18:04:39Z", "contents": "One thing that comes to mind is how to differentiate parsing for use in assertions from parsing for use in test output. I may want to customize my react class to spit out a name instead of a deep object structure during test output, but still want deepEqual to do a real comparison between two classes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-26T11:18:51Z", "contents": "@mixonic this issue is only output the output and wouldn't affect the underlying comparison, implemented in QUnit.equiv (exposed through deepEqual).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixonic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-26T13:50:13Z", "contents": "@jzaefferer Ah, I see. I presumed the recursion logic was shared, but nope.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T16:30:20Z", "contents": "Looking at this again, I think the workaround I posted above for moment is fine. The register method doesn't make it easy enough to justify the extra API. And it seems like this rarely, if ever comes up.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-dump", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 182, "url": "https://github.com/qunitjs/qunit/issues/182", "title": "equal has a non-clear behaviour with JSON objects", "contents": "Hi,\nI was testing my JS code with QUnit and I had a test failing like this:\nMarker's location\nExpected:   \n{\n  \"accuracy\": \"8\",\n  \"lat\": \"33.389689\",\n  \"lng\": \"-111.853909\",\n  \"streetAddress\": \"1337 South Alma School Road\",\n  \"city\": \"Mesa\",\n  \"county\": \"AZ\",\n  \"country\": \"United States\",\n  \"org\": \"Best Buy\",\n  \"address\": \"1337 South Alma School Road, Mesa, AZ\",\n  \"postcode\": undefined\n}\nSource:     \n    at Object.<anonymous> (file://localhost/Users/ale/Desktop/projects/recycleopedia.com/jsmessupfix/test.js:114:2)\n\nThe content of the two objects was the same, but I guess it's comparing them to see if they're exactly the same. In fact, if I change just one value inside the expected JSON object I get:\n\nMarker's location\nExpected:   \n{\n  \"accuracy\": \"0\",\n  \"lat\": \"33.389689\",\n  \"lng\": \"-111.853909\",\n  \"streetAddress\": \"1337 South Alma School Road\",\n  \"city\": \"Mesa\",\n  \"county\": \"AZ\",\n  \"country\": \"United States\",\n  \"org\": \"Best Buy\",\n  \"address\": \"1337 South Alma School Road, Mesa, AZ\",\n  \"postcode\": undefined\n}\nResult:     \n{\n  \"accuracy\": \"8\",\n  \"lat\": \"33.389689\",\n  \"lng\": \"-111.853909\",\n  \"streetAddress\": \"1337 South Alma School Road\",\n  \"city\": \"Mesa\",\n  \"county\": \"AZ\",\n  \"country\": \"United States\",\n  \"org\": \"Best Buy\",\n  \"address\": \"1337 South Alma School Road, Mesa, AZ\",\n  \"postcode\": undefined\n}\nDiff:   \n {\n   \"accuracy\": \"0\",\n  \"8\",\n   \"lat\":  \"33.389689\",\n   \"lng\":  \"-111.853909\",\n   \"streetAddress\":  \"1337  South  Alma  School  Road\",\n   \"city\":  \"Mesa\",\n   \"county\":  \"AZ\",\n   \"country\":  \"United  States\",\n   \"org\":  \"Best  Buy\",\n   \"address\":  \"1337  South  Alma  School  Road,  Mesa,  AZ\",\n   \"postcode\":  undefined\n } \nSource:     \n    at Object.<anonymous> (file://localhost/Users/ale/Desktop/projects/recycleopedia.com/jsmessupfix/test.js:114:2)\n\nI fixed applying JSON.stringify on both the output of my function and the expected JSON object.\nI think that if the behaviour here cannot be changed to compare the objects field by field, at least there should be a clearer message to point out what is happening.\nThanks,\nAlessandro", "createdAt": "2011-12-08T13:44:17Z", "updatedAt": "2011-12-08T15:52:48Z", "closedAt": "2011-12-08T13:58:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aledalgrande", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aledalgrande", "company": "Founder @ Nifty"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-12-08T13:58:44Z", "contents": "You should be using deepEqual to compare objects by content. equal compares by identity.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aledalgrande", "authorAssociation": "NONE", "createdAt": "2011-12-08T15:52:11Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aledalgrande", "authorAssociation": "NONE", "createdAt": "2011-12-08T15:52:48Z", "contents": "(but still, the message could be improved IMHO)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 183, "url": "https://github.com/qunitjs/qunit/issues/183", "title": "`push` does unnecessary serializing", "contents": "The following lines are run on every push, but seem to only be necessary if the result is not truthy. https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L648-654\nIs there ever a case where the result would be truthy but actual and expected would be be equal? If not, we should move that code block into the following if (!result) conditional.\nMy tests have some large objects that are quite slow to serialize so this change makes my tests much faster.", "createdAt": "2011-12-09T21:48:08Z", "updatedAt": "2012-05-04T10:02:24Z", "closedAt": "2012-05-04T10:00:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wagenet", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "wagenet", "company": "Tilde, Inc."}, {"login": "jzaefferer", "company": null}, {"login": "ivarconr", "company": "unleash-hosted.com"}, {"login": "huntc", "company": "Titan Class P/L"}], "comments_count": 13, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T14:41:25Z", "contents": "Fixed, I don't see a reason to output everything for passing tests either.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ivarconr", "authorAssociation": "NONE", "createdAt": "2012-02-21T05:46:52Z", "contents": "This breaks the JS Test Runner integration for QUnit, as JS Test Runner looks for the \"test-expected\" values also for successfull tests.\nCould you at least provide an optinal flag for also displaying expected values for successfull tests also?\nIt is also reported as an issue for JS Test Runner here: https://jira.codehaus.org/browse/JSTR-11?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-02-21T08:25:48Z", "contents": "Further to Ivar's comment, if you agree that this breaks the micro format then would you please consider bumping QUnit to version 2.0 as per these conventions:\nhttp://semver.org/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-21T10:46:01Z", "contents": "@ivarconr @huntc so JS Test Runner reads the html output? Shouldn't it be using the logging callbacks (QUnit.log in this case) to get those values instead? Those are independent of the html output and always include expected and actual values.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-02-21T11:14:58Z", "contents": "Thanks for the quick response. Interesting idea re. the use of logging callbacks - I guess that should work.\nHowever under the heading, \"Integration into browser automation tools\" for the QUnit documentation (1), a microformat is specified and I suppose I had assumed that text-expected was part of this. If you're saying that this is not the case then I will update JS Test Runner to use the log callback instead.\nThanks for your guidance.\n(1) http://docs.jquery.com/QUnit#Extensions_and_integrations", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-21T11:25:16Z", "contents": "Good point, though at the time that was described, the logging callbacks didn't yet exist, or were not good enough.\nToday you can even register multiple callbacks: QUnit.log(function() { ... });, which is also a rather recent change away from the old style, where you'd just assign QUnit.log = function() { ... }.\nBut yeah, using those callbacks is recommended for integrations like this. Let me know if that works out for you, until then I'll leave this as-is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ivarconr", "authorAssociation": "NONE", "createdAt": "2012-02-21T11:56:56Z", "contents": "I vote for  @jzaefferer's suggestions. This will make JS Test Runner more robust. =)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-04-29T10:30:57Z", "contents": "As a follow-up (I've just go round to fixing things with js-testrunner), the micro format is our way forward. Unfortunately phantomjs doesn't give us the hook into executing code just after QUnit has been loaded. We therefore have no way to plugin in our callbacks prior to tests execution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-30T22:51:51Z", "contents": "@huntc that can't be right. Grunt manages to use callbacks: https://github.com/cowboy/grunt/blob/master/tasks/qunit.js#L49\nSo does this direct QUnit-PhantomJS integration: https://github.com/jquery/qunit/blob/cli-phantomjs/test.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-01T00:00:10Z", "contents": "I'm not sure about the Grunt code as it is a bit harder to comprehend and I'll need to spend more time looking at it. However with the QUnit-PhantomJS integration, the following line (line 27) adds in the QUnit hooks:\npage.evaluate(addLogging);\n\nThe problem I have with the above is that there is no contractual guarantee as to when your code is evaluated i.e. is it after all the scripts are loaded, but before they are evaluated, could it be that some scripts are evaluated - QUnit actually requires evaluation prior to accepting any hooks... Nothing is stated by the API spec (http://code.google.com/p/phantomjs/wiki/Interface). All that is stated there is the following:\n\"Evaluates the given function in the context of the web page. The execution is sandboxed, the web page has no access to the phantom object and it can't probe its own setting. Any return value must be of a simple object, i.e. no function or closure.\"\nThat could mean after QUnit has started to execute tests - which is what my code assumes.\nI'd be happy to be proven wrong though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-02T11:05:08Z", "contents": "The grunt implementation is using a different approach, but that doesn't really look like a solid solution either: https://github.com/cowboy/grunt/blob/master/tasks/qunit/qunit.js#L17\nUntil phantomjs provides better hooks, that might be an option for js-testrunner though?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-02T11:31:34Z", "contents": "Thanks for the follow-up. I need to digest that code snippet further.\nAlternatively how about QUnit looking for an existing instance of QUnit when it starts. If it finds one then it extends the object instead of overwriting it.\nPhantomJS does provide a hook to set up globals for a page prior to it being evaluated so this might work... What'd think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T10:02:24Z", "contents": "Created #239 for further discussion", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 184, "url": "https://github.com/qunitjs/qunit/issues/184", "title": "In autorun mode, moduleDone is called without matching moduleStart", "contents": "If QUnit.config.autorun = true then Qunit fires a moduleDone event after each test completes (as expected) however the moduleStart event is only fired when the first test in a module runs.\nLogging moduleEnd entries without a corresponding moduleStart causes problems with some continuous integration tools (e.g., TeamCity). The attached patch ensures that moduleStart/moduleDone always happen in pairs.", "createdAt": "2011-12-20T07:11:00Z", "updatedAt": "2012-02-15T14:17:17Z", "closedAt": "2012-02-15T14:17:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "niallsmart", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "niallsmart", "company": "VTS"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2011-12-21T10:55:32Z", "contents": "How is a moduleDone after each test expected? Shouldn't it also only log moduleDone at the end of each module?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "niallsmart", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-12-21T16:50:22Z", "contents": "In autorun mode each test runs immediately instead of being queued, then done() triggers moduleDone.\nThis seems to make sense, otherwise the user would have to explicitly mark the end of the testsuite to receive the moduleDone callback.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 186, "url": "https://github.com/qunitjs/qunit/issues/186", "title": "Provide a JUnit reporter", "contents": "To exercise our logging support and provide a better starting point for CI integration, a JUnit reporter, bundled as an addon, would help a lot.\nHere's an XSD based on Ant's implementation for the JUnit xml: http://windyroad.org/dl/Open%20Source/JUnit.xsd", "createdAt": "2011-12-21T10:47:36Z", "updatedAt": "2014-06-18T07:46:49Z", "closedAt": "2012-09-30T11:57:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "spocke", "company": "Ephox Corporation"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 12, "comments_data": [{"authorLogin": "spocke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-16T12:46:23Z", "contents": "Started to poke around a bit with a JUnit reporter since this is something I would love to have connected to Jenkins. I previously made one that was server side using node.js. But I guess this one is supposed to be a client side reporter that generates an XML and pushes it to the server though a http post or something.\nSo what's the plan for this one I could contribute something but it might not be aligned to what you need?\nAlso I tried to hook it into qunit-composite.js however there where some issues since I needed to piggy back the callbacks so the original callbacks got executed. Maybe the runLoggingCallbacks could call bound event listeners instead and one could bind events to QUnit with a syntax like QUnit.bind(\"moduleStart\", function() {...}); since in this case multiple callbacks are needed one for logging and one for updating the UI.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-16T13:32:06Z", "contents": "Its not clear yet how the integration should look like, what you describe could be an option. But being able to hook into the callbacks and produce the XML output is the important piece. What to do with that is another task.\nSo for now, a separate file, that hooks into the callbacks, then somehow exposes the XML, would be useful.\nAs for the composite runner, that needs to be updated to make use of the queued callbacks itself. So instead of assigning a callback to QUnit.done, it should call QUnit.done(callback).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-16T13:42:25Z", "contents": "Apart from running QUnit headless, the main motiviation here is to have QUnit report back the JUnit-style XML to TestSwarm, which can then be picked up by Jenkins. See also http://jquerytesting.pbworks.com/w/page/43991777/Jenkins-Integration", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spocke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-16T14:36:03Z", "contents": "Ok, made an inital version now spocke@c2a8673 it generates an XML string that gets passed to a QUnit.jUnitReport function that can be used to send it to some server. It currently requires you to have at least one module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-16T14:56:03Z", "contents": "Nice. Is that based on one that you already tested with Jenkins?\nCan you initialize a default suite in case module is not used from the start? Once that is in place, a pull request would be good. Based on that I'd do some testing with the Jenkins/TestSwarm integration.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spocke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-16T15:20:25Z", "contents": "Yes, it's based on the logic we currently use. Had to add some console log output for failed asserts since Jenkins will stop at the first failed assert and then not show the other failures in that test case. So having a separate log of what failed is useful if multiple asserts failed. Used to have a \"expected\" and \"got\" part in that message but I pulled it out since I don't know how it would handle objects or more complex types.\nI created a pull request now at least it's a start I guess it could be improved a lot. Haven't tested this \"port\" with Jenkins yet though but I compared the output to the once we currently get from the node js reporter and it seems ok.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-02-17T19:25:34Z", "contents": "I haven't fully read up on this but just a quick thought. Isn't this a bug for TestSwarm instead of QUnit ?\nTestSwarm seems to be the \"reporter\" tool in this use case. That's also where the other reporter-formats are (https://github.com/jquery/testswarm/blob/master/js/inject.js)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:49:54Z", "contents": "Related to jquery/testswarm#183", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T11:57:34Z", "contents": "Closing this as fixed, as we've got the code at https://github.com/jquery/qunit/tree/master/addons/junitlogger and mention it on http://qunitjs.com/extensions/ - so people should be able to find it.\nThe next step might be to move it into TestSwarm, or some intermediate layer integrating with Jenkins. We'll get there eventually, once other TestSwarm milestones are done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2014-06-18T05:30:56Z", "contents": "cant get xml output from QUNIT please help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-18T05:40:41Z", "contents": "@vartgupt: you should try this one: https://github.com/jquery/qunit-reporter-junit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2014-06-18T07:46:49Z", "contents": "@leobalter : I am using this only.What i am doing exactly is i have create my test file and added the console thing as mentioned in it.But now how to run the .html file to call the tests and generate xml output.(Presently i can see my test results in html format on browser after running the QunitRunner html file).Please tell me the steps to able to generate xml output using the mentioned reporter.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 190, "url": "https://github.com/qunitjs/qunit/issues/190", "title": "Deprecate `module`, rename to `group`", "contents": "module conflicts with the one defined by CommonJS.\nWould need to deprecate module and introduce group as an alias, then figure out if and when we can actually remove module.\nShould encourage mocha to also use group instead of suite, as that conflicts with our use of suite.", "createdAt": "2012-01-14T11:50:49Z", "updatedAt": "2014-09-16T04:45:57Z", "closedAt": "2012-09-13T18:50:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 9, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "pimvdb", "company": null}, {"login": "tj", "company": "Apex"}, {"login": "sindresorhus", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "rwaldron", "company": "Bocoup"}, {"login": "broofa", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "andrewchch", "company": null}], "comments_count": 19, "comments_data": [{"authorLogin": "pimvdb", "authorAssociation": "NONE", "createdAt": "2012-01-14T12:12:55Z", "contents": "\"Suite\" may be a bit ambiguous since QUnit presents itself as \"a powerful, easy-to-use, JavaScript test suite\". I don't know of a good alternative, nor whether this really matters, but I think it's worth noting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tj", "authorAssociation": "NONE", "createdAt": "2012-01-15T20:21:32Z", "contents": "\"suite\", \"label\", or \"title\" would be what I would go for", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sindresorhus", "authorAssociation": "NONE", "createdAt": "2012-02-28T23:39:32Z", "contents": "\"group\", \"bundle\", \"set\", \"collection\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:14:51Z", "contents": "Any objections to group? That works as a test suite consists of groups of tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-05T12:00:46Z", "contents": "Do we also need to rename moduleStart and moduleEnd callbacks?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-05-25T12:28:40Z", "contents": "I would say yes to renaming the lifecycle logging events too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T17:04:22Z", "contents": "Closing, as globals are optional: QUnit.module will always work.\nThe module definition in Harmony ( http://wiki.ecmascript.org/doku.php?id=harmony:modules ) doesn't conflict, as @rwldrn will also tell you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-31T17:22:24Z", "contents": "The forthcoming native module implementation was carefully specified to allow all existing uses of the word \"module\" as an Identifier, it is parsed contextually so that it must match the following exactly:\nModuleDeclaration ::= \"module\" [NoNewline] Id \"=\" Path \";\"\n                   |  \"module\" [NoNewline] Id \"{\" ModuleBody \"}\"\n\nWhich won't conflict with any extant use of the word \"module\" :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "broofa", "authorAssociation": "NONE", "createdAt": "2012-06-29T16:29:58Z", "contents": "Reopen, please.\nWhile I appreciate that Harmony modules won't be an issue, that doesn't change the fact that the 'module' object is a de-facto standard with CommonJS.  For better or worse, Commonjs is going to be around for a while, and has a significant following thanks to node.js.  (11.5K modules on npmjs.org at last count).\nThe emerging practice for these modules is to use typeof(module) != 'undefined' to determine what context the code is running in (for better or worse).  Rather than forcing an unknown number of libraries to implement more convoluted checks, it seems logical to instead change QUnit so that it's not publishing a proprietary object to the 'module' global.  No?\nRelated:\nhttps://github.com/broofa/node-uuid/issues/43\nsinonjs/sinon#91", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-06-29T16:44:02Z", "contents": "With regard to @pimvdb's note of:\n\n\"Suite\" may be a bit ambiguous since QUnit presents itself as \"a powerful, easy-to-use, JavaScript test suite\".\n\nTo me:\n\nQUnit == JavaScript test framework (not a \"suite\")\nQUnit module == Test suite\n\nI really like @visionmedia's Mocha's TDD syntax, using nestable suite's.  Not to mention its other hot features, like \"pending\" tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pimvdb", "authorAssociation": "NONE", "createdAt": "2012-06-29T20:41:23Z", "contents": "@JamesMGreene: I agree. Just thought I would mention it, since terminology changes are not very pretty if they introduce ambiguity.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-01T18:54:16Z", "contents": "@broofa could you point me to where CommonJS specifies module? All I see is its exports definition, along with the non-specced module.exports convention in NodeJS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "broofa", "authorAssociation": "NONE", "createdAt": "2012-07-01T20:07:21Z", "contents": "@jzaefferer: http://wiki.commonjs.org/wiki/Modules/1.1  - Section 1.1, \"Module Context\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-02T23:05:00Z", "contents": "@broofa right, which doesn't specify module.exports, only exports and module, but not a exports property of module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "broofa", "authorAssociation": "NONE", "createdAt": "2012-07-02T23:10:22Z", "contents": "@jzaefferer - Why is that important?  The main issue (at least my main issue) is QUnit's declaration of a 'module' global.  The specific properties of that global aren't of particular interest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-04T17:30:54Z", "contents": "Reopening to discuss it again at the next testing team meeting - that would be tomorrow, if we get a few people together, see also calendar on http://jquery.org/meeting/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-13T18:50:50Z", "contents": "Only two examples have been given where a conflict occurred and both have been resolved already. Changing the name in order to avoid future problems that seem unlikely and are easily fixable seems silly when the cost is breaking all existing code that is using the module() function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "andrewchch", "authorAssociation": "NONE", "createdAt": "2013-04-12T01:54:18Z", "contents": "After being bitten by this issue a couple of times, I think it would at least be worth documenting it somewhere to potentially save others some time in the future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-12T04:19:47Z", "contents": "@andrewchch: Can you share an example of how you are getting bitten?\nReviewing the current export code, the only pertinent export I see is basically setting the whole QUnit object (QUnit.constructor.prototype) as exports... it does not extend the global (so long as the exports object exists).\nIf so, then its usage would always be referencing whatever variable you required the module into rather than being a global (unless you choose to extend the global, which would be silly), e.g.:\nvar QUnit = require('qunitjs');\nQUnit.module('blah');\nQUnit.test('blah blah blah', function(assert) {\n  assert.ok(true);\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 192, "url": "https://github.com/qunitjs/qunit/issues/192", "title": "not*Equal shows strange result", "contents": "When I look at the passed test with notEqual assertion I can't understand why it is passed, because I can see that expected value differs from resul value. I suppose it need to be changed, because it is confusing for now.\nIf somebody looks at the result of your tes he doesn't know what type assertion you have used in it:ok, equal, notEqual etc. But he need to see the logical values in test view.\nI would add a screenshot if it was possible.", "createdAt": "2012-01-24T13:48:35Z", "updatedAt": "2012-02-15T14:33:31Z", "closedAt": "2012-02-15T14:33:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pantuman", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pantuman", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T14:33:31Z", "contents": "Isn't it expected for a passing notEqual assertion to have different actual and expected values? That's the expected behaviour not _not_Equal.\nGenerally the test output is only useful if you know what the test is doing, that applies to all assertions. I don't yet see how that could be fixed.\nI'll reopen if you can provide a different perspective.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 194, "url": "https://github.com/qunitjs/qunit/issues/194", "title": "On reset, fixture's properties are not cleared", "contents": "The QUnit docs say:\nThe #qunit-fixture element can be used to provide and manipulate\ntest markup, and will be automatically reset after each test\n\nIn practice I have often used the qunit-fixture element directly, but have found that on reset, only the inner html is cleared, any properties added to the fixture itself, or any data persists.\nSee: http://stackoverflow.com/questions/8393285/qunit-strange-behavior-with-fixture-tests-alternately-failing-and-passing\nPerhaps just clarifying what \"reset\" means in the documentation is the fix, but having to append a new element to the fixture on each setup to test adding properties seems to defeat the purpose of having a fixture in the first place.\nUnit test for bug (QUnit tests line 313):\nmodule(\"fixture\");\ntest(\"setup\", function() {\n    document.getElementById(\"qunit-fixture\").innerHTML = \"foobar\";\n    /* Add property to fixture */\n    document.getElementById(\"qunit-fixture\").setAttribute('title','foobar');\n});\ntest(\"basics\", function() {\n    equal( document.getElementById(\"qunit-fixture\").innerHTML, \"test markup\", \"automatically reset\" );\n   /* Fails, title is still foobar */\n    equal( document.getElementById(\"qunit-fixture\").getAttribute('title'), null, \"properties automatically reset\" );\n});", "createdAt": "2012-02-01T15:19:46Z", "updatedAt": "2012-02-29T17:11:13Z", "closedAt": "2012-02-01T16:53:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "conzett", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "conzett", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "conzett", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-01T16:53:47Z", "contents": "Submitted as pull request #195", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-29T17:11:13Z", "contents": "I had to revert the patch for #195, as it caused very subtle trouble downstream in jQuery UI. The type of failure is bad enough that I don't want anyone else to experience that again, so have to change this to \"wontfix\". I updated the documentation accordingly.\nFor your particular case, just leave the fixture element as-is and use a wrapper or child.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 196, "url": "https://github.com/qunitjs/qunit/issues/196", "title": "Proposing W3C test harness compatibility shim", "contents": "I'm working on a project right now that requires me to write a compatibility shim that will allow my QUnit tests to run in the W3C test harness. I'd like to contribute this back to QUnit for review", "createdAt": "2012-02-02T14:37:13Z", "updatedAt": "2012-02-15T16:58:02Z", "closedAt": "2012-02-15T14:31:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rwaldron", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-02T14:40:07Z", "contents": "This one? http://www.w3.org/2008/webapps/wiki/Harness\nWhich links to a non-existings script: http://w3c-test.org/resources/testharness.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-02T15:20:04Z", "contents": "Yep. That's the one.\n(read that with a tone of defeat)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-02T15:29:28Z", "contents": "Well, if you're putting it together anyway, might as well share it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-02T15:43:06Z", "contents": "I figured it's not something that QUnit is going to go out of its way to include.. I'll make a PR for review when it's ready.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T14:31:20Z", "contents": "Nothing much I can do for that, until you send the PR, so I'll close this issue. The PR will be good enough.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-15T16:58:02Z", "contents": "sounds good", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 197, "url": "https://github.com/qunitjs/qunit/issues/197", "title": "How do I use qunit to test code that responds to onload event?", "contents": "Hello,\nI'm writing unit tests for a module that responds to load and unload events.  I'd like to test the module by firing my own onload and onunload events like so...\ntest('Test session load', function() {\nwindow.sessionStorage.getItem = function(name) {\nequal(name, 'foo', 'Correct sessionStorage item name used');\nreturn [0,1,2];\n};\nvar evt = document.createEvent(\"HTMLEvents\");\nevt.initEvent(\"load\", true, true);\nwindow.dispatchEvent(evt);\n});\nUnfortunately this doesn't work, as I think qunit is responding to the fake onload event that I've created.\nDoes qunit have a way to enable me to test the onload event?  Maybe I am doing something silly?\nThanks,\n/t", "createdAt": "2012-02-07T15:53:12Z", "updatedAt": "2012-02-16T11:03:52Z", "closedAt": "2012-02-15T14:30:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tmaslen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tmaslen", "company": "Springer Nature"}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-15T14:30:26Z", "contents": "It seems the best way to adress this is by not testing the load event at all. Just put the event handler into a named function, then test the behaviour of that function. The load event just runs your function, too, what would testing that specifically achieve?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tmaslen", "authorAssociation": "NONE", "createdAt": "2012-02-16T10:57:54Z", "contents": "Hi,\nYes, that is what I ended up doing in the end.  It is a bit of a shame though that I'm forced to change the way I write my tests because the framework is dependant on the environment I'm developing in.\nFor example it would be nice to mock sessionStorage.\n/t", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-16T11:00:03Z", "contents": "You can set QUnit.config.reorder = false to disable the reordering, removing the dependency on sessionStorage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tmaslen", "authorAssociation": "NONE", "createdAt": "2012-02-16T11:03:52Z", "contents": "Awesome. Thanks.  I was looking for something like that but couldn't find it.\n:-)\n/t", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 200, "url": "https://github.com/qunitjs/qunit/issues/200", "title": "Missing fail() and fail(msg) for behaviour-based testing", "contents": "As as well as ok() and equal() on the Qunit API, it would be great to have a fail() and fail(msg) function to immediately fail the test. Most mature test frameworks have such a method (see below for examples). They are useful for asserting based on behaviour (i.e., function should not have been called) rather than based on state (object.xyz must = x).\neventBus.bind(\"searchFailed\", function (results) {\n    fail(\"this should not have been called!\");\n});\nThey can also be useful for marking tests that have not been written yet.\ntest('It should render the search results dialog', function () {\n    fail(\"not implemented yet\");\n});\nExamples in other test frameworks:\n\nNUnit's Assert.Fail(message) - http://www.nunit.org/index.php?p=utilityAsserts&r=2.2.7\nJUnit's Assert.fail(message) - : http://www.junit.org/apidocs/org/junit/Assert.html#fail(java.lang.String)\nBoost Test's BOOST_FAIL - http://www.boost.org/doc/libs/1_34_1/libs/test/doc/components/test_tools/reference/BOOST_FAIL.html", "createdAt": "2012-02-22T11:08:45Z", "updatedAt": "2012-02-22T13:43:17Z", "closedAt": "2012-02-22T12:10:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdingwall", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rdingwall", "company": "Monzo"}, {"login": "jzaefferer", "company": null}, {"login": "domenic", "company": "Google"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-02-22T12:10:05Z", "contents": "QUnit's method are mostly aligned with the CommonJS testing module, which doesn't have such a method: http://wiki.commonjs.org/wiki/Unit_Testing/1.0\nPersonally I don't see the value. For the rare case where testing negative conditions is useful, ok(false, msg); does the trick.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdingwall", "authorAssociation": "NONE", "createdAt": "2012-02-22T12:45:30Z", "contents": "It's syntactical sugar, sure. In the same way ok(value) is syntactic sugar for equal(value, true).\nIn my opinion the goal of unit testing library authors is not to boil the API down to the absolute most spartan, minimal API possible - it's to make it as easy as possible for users to test their code, i.e. they can call the minimum number of functions and not have to pass dummy parameters. That's why most other testing frameworks (I've used, at least) tend to have very rich APIs full of convenient methods and overloads. QUnit and CommonJS currently differ in this regard.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "domenic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-22T13:43:17Z", "contents": "@rdingwall QUnit and CommonJS are meant to be used as the basis on which to build your favorite assertion library. See the example under Custom Assert Modules in the linked wiki page.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 201, "url": "https://github.com/qunitjs/qunit/issues/201", "title": "1.3.0 breaks in Narwhal JS", "contents": "You all switched to only using module.exports for serverside JS.\nThat is a non-standard extensions supported by some, but not all serverside JS.\nThe previous version 1.2.0 worked fine.", "createdAt": "2012-02-27T06:51:12Z", "updatedAt": "2016-11-01T16:28:55Z", "closedAt": "2016-11-01T16:28:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "mathiasbynens", "company": "@Google"}, {"login": "jzaefferer", "company": null}, {"login": "domenic", "company": "Google"}], "comments_count": 16, "comments_data": [{"authorLogin": "mathiasbynens", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-27T06:56:45Z", "contents": "I\u2019m bumping into this issue when using jquery/qunit + jdalton/qunit-clib to run bestiejs/punycode.js unit tests. Please revert!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-03-01T04:20:42Z", "contents": "Will also break in RingoJS < v0.8.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T17:18:35Z", "contents": "The previous version was exporting things twice. Is it enough to use extend(exports, QUnit); to make it work in both environments? Can someone help out with a patch that make it work as var QUnit = require('qunit'); in node.js, and whatever is used on Narwhal/Ringo?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mathiasbynens", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-01T18:03:01Z", "contents": "For Punycode.js I used this pattern: https://github.com/bestiejs/punycode.js/blob/a6e30c4e2ce7a9a569bc2c84a3435bd5612be59f/punycode.js#L493-510 Thanks to @jdalton and @unscriptable.\nNote that freeExports, freeModule, freeDefine, key etc. are declared at the top of the file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-02T13:33:49Z", "contents": "Any chance NarwhalJS will also implement what node.js and RingoJS 0.8 support?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-03-02T22:46:48Z", "contents": "@jzaefferer It's trivial to support platforms like Narwhal by using the CommonJS standard exports object and not module.exports.\nSimply change this:\n// Expose the API as global variables, unless an 'exports'\n// object exists, in that case we assume we're in CommonJS\nif ( typeof exports === \"undefined\" || typeof require === \"undefined\" ) {\n    extend(window, QUnit);\n    window.QUnit = QUnit;\n} else {\n    module.exports = QUnit;\n}\nto this:\n// Expose the API as global variables, unless an 'exports'\n// object exists, in that case we assume we're in CommonJS\nif ( typeof exports === \"undefined\" || typeof require === \"undefined\" ) {\n    extend(window, QUnit);\n    window.QUnit = QUnit;\n} else if (typeof module === \"object\" && module.exports === exports) {\n    // non-standard `module.exports` supported by Node.js and RingoJS 0.8.0+\n    (module.exports = QUnit).QUnit = QUnit;\n} else {\n    exports.QUnit = QUnit;\n}\nThe reason you do (module.exports = QUnit).QUnit = QUnit; is do devs can use the same require/assign pattern cross-enviro\nvar QUnit = require('./qunit').QUnit;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-04T12:33:33Z", "contents": "Shouldn't that be var QUnit = require('./qunit')?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-03-04T17:49:30Z", "contents": "Shouldn't that be var QUnit = require('./qunit')?\n\nThe reason you do (module.exports = QUnit).QUnit = QUnit; is so devs who have code that works in multiple enviros can just stick with 1 way to require the script. So if you are only using Node.js then ya you could just do var QUnit = require('./qunit'); but if you don't wan't to muck with it for multiple enviros then devs would have the option to just do var QUnit = require('./qunit').QUnit;.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "domenic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-04T20:15:57Z", "contents": "extend(exports, QUnit); should work fine and make var QUnit = require('./qunit') work in both environments, I believe.\nThe only reason to use module.exports is if you're exporting a function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-03-04T22:14:19Z", "contents": "@domenic I would dig extend(exports, QUnit); too but it would have to be moved to the bottom of qunit.js. It's currently exported somewhere in the middle.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-05T12:07:13Z", "contents": "Fixed by doing extend(exports, QUnit) and moving that the the end of the file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-03-05T21:46:50Z", "contents": "I take it back :P\nextend(exports, QUnit) doesn't seem to work. It just hangs at the start.\nAlso you left the window export in the middle of the file. It too should be moved to the bottom.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-05T22:31:33Z", "contents": "The window export is supposed to be half-way through, as we don't want to export all QUnit properties as variables.\nGonna install NarwhalJS to test it myself...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-03-05T23:25:04Z", "contents": "@jzaefferer Thanks for digging into it, much appreciated.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-06T12:29:48Z", "contents": "The export in NarwhalJS works fine, except when something goes wrong it chokes on jsDump's check for setInterval, or something like that. As so far no one reported that as an issue, I'm inclined to not care that much either. Specifically:\nInternalError: Java class \"[Ljava.lang.annotation.Annotation;\" has no public instance field or method named \"setInterval\". (/Users/jza/dev/narwhal/packages/narwhal-lib/lib/narwhal/sandbox.js#118)\nIf you want to take a look, here's something to test with: d600c31", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-29T16:16:14Z", "contents": "Closing until someone who cares about narwhaljs can help out.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 202, "url": "https://github.com/qunitjs/qunit/issues/202", "title": "Make ok(false) dump source lines", "contents": "Should behave like equal(false, true), outputting on which file and line the assertion failed.", "createdAt": "2012-03-01T17:26:59Z", "updatedAt": "2012-03-05T11:57:17Z", "closedAt": "2012-03-05T11:57:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 203, "url": "https://github.com/qunitjs/qunit/issues/203", "title": "Make notrycatch also apply to setup and teardown", "contents": "try throwing an exception in a setup with notrycatch on - it will not bubble up", "createdAt": "2012-03-01T17:29:11Z", "updatedAt": "2012-03-05T12:14:29Z", "closedAt": "2012-03-05T12:14:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 204, "url": "https://github.com/qunitjs/qunit/issues/204", "title": "Apply noglobals after teardown", "contents": "noglobals runs before teardown, not giving a chance to remove globals introduced intentionally", "createdAt": "2012-03-01T17:29:37Z", "updatedAt": "2012-03-05T12:14:30Z", "closedAt": "2012-03-05T12:14:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 205, "url": "https://github.com/qunitjs/qunit/issues/205", "title": "QUnit not clearing #qunit-fixture between tests", "contents": "The jQuery docs for QUnit make it sound like this should be automatic behavior.\nI'm even running tests async to give it time to clear that fixture, but it seems to leave old code in there.\nQunit seems to change test execution order, so it passes every other run (really). That's only because the .clone test doesn't care if other content is in the fixture. The fixture is still polluted every run.\nHere are two extensions to Zepto, the test, and the result in the test fixture. You can tell the fixture is bad because it has h2.cloneTestTitle*2 AND h2.outerHtmlTitle, even though those are added in separate tests.\nCode:\n$.fn.clone = function(){\n    var ret = $();\n    this.each(function(){\n    ret.push(this.cloneNode(true));\n    });\n    return ret;\n};\n\n$.fn.outerHtml = function() {\n    return $(this).clone().wrap('<div></div>').parent().html();\n};\n\nTest Code:\ntest('$().clone makes a copy of an element', function() {\n    stop();\n\n    var testClass = 'cloneTestTitle'\n    ,   testContent = 'Clone Test Title'\n    ,   html = '<h2 class=\"'+ testClass +'\">'+ testContent +'</h2>'\n    ,   $elem = $(html)\n    ,   $fixt = $(_fixtureSelector)\n    ;\n\n    $fixt.append($elem);\n    ok($('.' + testClass).length === 1, \"Found the test element in the DOM\");\n    $fixt.append($elem.clone());\n    ok($('.' + testClass).length === 2, \"Found the cloned element in the DOM\");\n    debugger;\n    setTimeout(function() { start();  }, 1000); //give the browser time to do the DOM manipulation\n});\n\ntest('$().outerHtml returns the full html of an element, not just its contents', function() {\n    stop();\n\n    // Seems to mix up the variables between tests if I don't name them differently\n    var testOutClass = 'outerHtmlTitle'\n    ,   testOutContent = 'outerHtml Title'\n    ,   outHtml = '<h2 class=\"'+ testOutClass +'\"><span class=\"quiet\">'+ testOutContent +'</span></h2>'\n    ,   $outElem = $(outHtml)\n    ,   $parentElem = $('<div class=\"parentElem\"></div>')\n    ,   $fixture = $(_fixtureSelector)\n    ;\n\n    $fixture.append($parentElem);\n    $parentElem.append($outElem);\n    ok($('.' + testOutClass).length === 1, \"Found the test element in the DOM\");\n    notEqual($outElem.html(), $parentElem.html(), 'A parent element\\'s .html() is not equal to the child\\'s .html()');\n    equal($outElem.outerHtml(), $parentElem.html(), 'A parent element\\'s .html() is equal to the child\\'s .outerHtml()');\n\n    debugger;\n    setTimeout(function() { start(); }, 1000); //give the browser time to do the DOM manipulation\n});\n\nqunit-fixture contents:\n<div id=\"qunit-fixture\">\n    <h2 class=\"cloneTestTitle\">Clone Test Title</h2>\n    <h2 class=\"outerHtmlTitle\">\n        <span class=\"quiet\">outerHtml Title</span>\n    </h2>\n    <h2 class=\"cloneTestTitle\">Clone Test Title</h2>\n</div>", "createdAt": "2012-03-01T17:49:18Z", "updatedAt": "2012-03-02T19:22:34Z", "closedAt": "2012-03-01T18:49:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SimplGy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "SimplGy", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-01T18:06:19Z", "contents": "Assuming you're testing against v1.3.0, can you give master a try? This might fix your issue: 24a8f2b", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SimplGy", "authorAssociation": "NONE", "createdAt": "2012-03-01T18:49:43Z", "contents": "Thanks J\u00f6rn.\nI did two things to get to a place that works reliably (so unfortunately I'm not sure which fixed it):\n1 - Updated to latest QUnit code (I was on 1.2.x)\n2 - Redid the .outerHtml implementation\nI didn't specify, but I'm using Zepto, not jQuery, and it seems like Zepto's .wrap() implementation is broken. This caused .outerHtml to do bad, very unpredictable things that confused me for most of this morning.\nNew, working .outerHtml implementation:\n$.fn.outerHtml = function() {\n    //return $(this).clone().wrap('<div></div>').parent().html(); //broken\n        //Something is wrong with this, probably Zepto's .wrap implementation.\n\n    var n = $(this).get(0)\n    ,   div = document.createElement('div')\n    ,   html\n    ;\n    div.appendChild(n.cloneNode(true));\n    html = div.innerHTML;\n    div = null;\n    return html;\n};", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-02T13:31:25Z", "contents": "You could just use jQuery ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SimplGy", "authorAssociation": "NONE", "createdAt": "2012-03-02T19:22:34Z", "contents": "My plan is to use Zepto for webkit devices (tablets, mobile, chrome, safari) and jQuery for others. Since Zepto is so much lighter and has touch conveniences, I think we'll see a lot more of this in the future.\n<% // --------------------------- 3rd Party Scripts %>\n<% // TODO: Load in EITHER jQuery or Zepto depending on the platform %>\n<script src=\"lib/zepto/dist/zepto.min.js\" type=\"text/javascript\"></script>", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 206, "url": "https://github.com/qunitjs/qunit/issues/206", "title": "Test diff output shouldn't depend on object property order", "contents": "If one uses deepEqual to compare two objects and the equality test fails, the diff output seems to depend on the order in which properties were set on the object (probably because it uses for...in). I made a trivial example using jsfiddle\nI haven't quite figured out how to trick it into behaving its worst, but I've definitely seen it produce rather terrible output when property order doesn't match across objects. For more easily figuring out 'where' in the object differences occur, it would be nice if the output were improved (perhaps by sorting the properties of each object before doing a diff?).", "createdAt": "2012-03-02T12:20:46Z", "updatedAt": "2012-03-05T11:27:07Z", "closedAt": "2012-03-05T11:27:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gijsk", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "gijsk", "company": "@mozilla "}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-02T13:30:07Z", "contents": "A little edgy casy, isn't it? Would you be interested in helping to patch that? You know, pull request and such.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gijsk", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-02T13:45:01Z", "contents": "Definitely interested. I haven't checked how hard it is to fix this yet, at work, crunch time, yada yada. Will give it a shot when I'm on my commute home.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gijsk", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-02T18:15:32Z", "contents": "Done, see issue #208. I suck too much at github to get the pull request for multiple commits to show up in this issue. Not sure if you want to close this one in favour of #208, so leaving it open for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 207, "url": "https://github.com/qunitjs/qunit/issues/207", "title": "Add option to require all tests to call expect()", "contents": "", "createdAt": "2012-03-02T14:37:33Z", "updatedAt": "2012-06-07T00:20:36Z", "closedAt": "2012-06-07T00:20:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 209, "url": "https://github.com/qunitjs/qunit/issues/209", "title": "expect(0) error doesn't have useful stack trace", "contents": "When a test has no assertions, QUnit throws \"Expected at least one assertion, but none were run - call expect(0) to accept zero assertions\".\nBecause this error is inside QUnit code and not test code, the exception information is not very useful. At first glance, it seems like it may be impossible to provide better information, but I'm opening this ticket to try to brainstorm a better solution.", "createdAt": "2012-03-06T21:38:12Z", "updatedAt": "2012-05-04T09:56:18Z", "closedAt": "2012-05-04T09:56:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wycats", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wycats", "company": "Tilde, Inc."}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-07T11:04:02Z", "contents": "I see no way to add a useful stack trace in this case. In af27eae I actually remove the useless trace for unmatched expect and expect(0), so that's at least better then pointing to some line inside qunit.js.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-13T16:39:16Z", "contents": "Try to save stacktraces for test() or module() calls when they are made (or rather the one line). When a related test fails where nothing is accessible, use that stored stack.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:56:18Z", "contents": "Fixed", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 210, "url": "https://github.com/qunitjs/qunit/issues/210", "title": "\"Setup failed\" doesn't have useful stack trace", "contents": "When the setup fails, the stack trace provided is inside QUnit. Unlike #209, this should be easier to fix.", "createdAt": "2012-03-06T21:54:38Z", "updatedAt": "2012-03-07T11:03:01Z", "closedAt": "2012-03-07T11:02:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wycats", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wycats", "company": "Tilde, Inc."}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-07T11:03:01Z", "contents": "Fixed! For this I did a bigger refactor, actually improving the output of a lot more then just this case. See the commit and commit message for details.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 211, "url": "https://github.com/qunitjs/qunit/issues/211", "title": "equals => equal doesn't have useful stack trace", "contents": "QUnit's new equals=>equal deprecation provides a stack line inside of QUnit, not in the test.", "createdAt": "2012-03-06T21:56:23Z", "updatedAt": "2012-03-07T10:36:18Z", "closedAt": "2012-03-07T10:35:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wycats", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wycats", "company": "Tilde, Inc."}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-07T10:36:18Z", "contents": "Also fixed the same/deepEqual stack trace.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 212, "url": "https://github.com/qunitjs/qunit/issues/212", "title": "No Globals not working in Opera", "contents": "When using qunit with opera the noglobals option is generating failures:\nIntroduced global variable(s): test-output6, test-output7, test-output8, test-output9Source:        ok( false, \"Introduced global variable(s): \" + newGlobals.join(\", \") );\nOpera version 11.61\nBuild 1250\nLinux x64", "createdAt": "2012-03-07T12:58:39Z", "updatedAt": "2012-05-04T09:48:18Z", "closedAt": "2012-05-04T09:47:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paul999", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "paul999", "company": null}, {"login": "nimbupani", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "miketaylr", "company": "@mozilla "}], "comments_count": 5, "comments_data": [{"authorLogin": "nimbupani", "authorAssociation": "NONE", "createdAt": "2012-03-07T15:25:45Z", "contents": "Could you clarify exactly what is expected, and what is not working? Perhaps a pastie with the code you are working on would be useful. cc @miketaylr", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paul999", "authorAssociation": "NONE", "createdAt": "2012-03-08T07:44:25Z", "contents": "Hi,\nExpected is that there is no warning displayed about new global vars, in firefox and chrome this happens, in Opera it displays the error that there are new global vars.\nYou can see it happen here: http://js-linux.nl/Javascript-Linux/test.html?noglobals=true In some cases it happens in the first test, in some cases in the second test (It changes on a refresh), the mentioned globals are not from my code at all.\nThe code in that specif test is here: https://github.com/paul999/Javascript-Linux/blob/master/tests/general.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-10T14:19:10Z", "contents": "@nimbupani those globals are element IDs are generated by QUnit: https://github.com/jquery/qunit/blob/854308117e9e7dab00b67965ff37437739082b13/qunit/qunit.js#L45\nThe noglobals feature iterates over all window properties before and after running a test, marking any change as an error. It looks like in Opera, under some conditions, those DOM ids are exposed as window properties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "miketaylr", "authorAssociation": "NONE", "createdAt": "2012-03-23T11:54:56Z", "contents": "All browsers expose ids and name properties as globals, with the exception of Firefox which only does this in Quirks Mode. This is actually specced by HTML5, as terrible as it is. :/ (see https://www.w3.org/Bugs/Public/show_bug.cgi?id=11960)\nGiven that this warning doesn't happen in Chrome, could it be possible that it's something else?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:48:18Z", "contents": "Gave up and implemented a workaround to ignore those keys when checking for pollution.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 213, "url": "https://github.com/qunitjs/qunit/issues/213", "title": "Keep hide-passed state when clearing session storage", "contents": "Currently the hide-passed-tests checkbox gets cleared when all tests pass. Need to exclude that particular key from clearing.", "createdAt": "2012-03-07T18:40:42Z", "updatedAt": "2012-03-10T14:16:00Z", "closedAt": "2012-03-10T14:16:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 215, "url": "https://github.com/qunitjs/qunit/issues/215", "title": "Add possibility to add category to a test/module", "contents": "If a string category option would be added to the test and module options, it would be possible for R# and other test runners to group QUnit tests together with existing NUnit (or other) tests.", "createdAt": "2012-03-09T08:05:29Z", "updatedAt": "2012-03-10T17:57:49Z", "closedAt": "2012-03-10T17:57:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ThomasArdal", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ThomasArdal", "company": "elmah.io"}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-09T10:22:38Z", "contents": "There's already tests as groups of assertions and modules as groups of tests. How would categories fit into that picture? Also any suggestions on the API for that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ThomasArdal", "authorAssociation": "NONE", "createdAt": "2012-03-09T10:32:35Z", "contents": "Could you point me in the direction of the \"tests as groups of assertions\" feature you are referring to?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-09T11:11:39Z", "contents": "Its the most basic building block in QUnit:\ntest(\"a group of assertions\", function() {\n  equal(true, false, \"yep\");\n  equal(false, true, \"nope);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ThomasArdal", "authorAssociation": "NONE", "createdAt": "2012-03-09T11:45:41Z", "contents": "Oh I see :)\nThe category I'm talking about could match the similar feature in NUnit. In NUnit you can add a Category attribute to your test like this:\n[TestFixture, Category(\"Unit tests\")]\npublic class MyTests {\n}\nMaybe it could look like this in QUnit:\ntest(\"a group of assertions\", {category: \"Unit tests\"}, function() {\n...\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-10T14:04:05Z", "contents": "That's pretty much what modules are about.\nmodule(\"Unit tests\");\ntest(\"a group of assertions\", function() {\n...\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ThomasArdal", "authorAssociation": "NONE", "createdAt": "2012-03-10T17:57:49Z", "contents": "You're propably right. I have been using modules to group tests of a single js-file. If R# would translate the module to Category, the tests would show up beneath the right category in the R# test-runner.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 217, "url": "https://github.com/qunitjs/qunit/issues/217", "title": "raises() should call \"block\" function with `this` ", "contents": "The raises() test function's first argument, \"block\", does not have the context of the test environment. This is confusing for many, if you use the setup to attach classes to this, but can not then access it from the raises() \"block\". Consider the following code:\nmodule('My module', {\n    setup: function() {\n        this.myfunciton = function() {\n            throw new Error('oops');\n        }\n    }\n});\n\ntest('Test myfunction raises an error', function() {\n\n    raises(function () {\n\n        this.myfunction();\n\n    },\n    /Error\\: oops/,\n    'Myfunction raises \"oops\" error');\n\n});\nThe above code will not work, because the anonymous function inside raises (the \"block\" argument) has a this of window.\nProposed Solution:\nChange raises() call to block() (line 374) to block.call(config.current.testEnvironment)", "createdAt": "2012-03-16T10:58:29Z", "updatedAt": "2012-03-21T16:37:56Z", "closedAt": "2012-03-21T16:37:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "keithamus", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "keithamus", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 220, "url": "https://github.com/qunitjs/qunit/issues/220", "title": "Modify \"Running...\" to display test name", "contents": "When running large, long running test suites in \"Hide passed tests\" mode, it would be useful to see the current test name being run.\nuse case: jQuery, running tests on IE6,7,8\nexample:\n\"Running: jQuery.ajax() - success callbacks (late binding)\"\nIf interested in this, feel free to assign to me", "createdAt": "2012-03-22T15:38:32Z", "updatedAt": "2012-03-27T15:15:30Z", "closedAt": "2012-03-27T15:15:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rwaldron", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-22T15:42:35Z", "contents": "Can't assign you, but you're welcome to implement this anyway. Should be pretty simple.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-22T15:43:36Z", "contents": "Patch on the way", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 222, "url": "https://github.com/qunitjs/qunit/issues/222", "title": "Fix logo for QUnit (font inconsistency)", "contents": "QUnit has had a jQuery-style logo as icon for a long time now, that's OK. But I couldn't find any with the correct text and perhaps tag line. The first time I saw the name composed next to it was on the new website, but that looks out of place:\n \n\n\nWould be nice if someone could create a Vector graphic with the QUnit name next to it in the right font. And some kind of tagline perhaps, not sure if there is one (or just leave it off..).", "createdAt": "2012-03-22T17:35:14Z", "updatedAt": "2017-04-18T15:03:51Z", "closedAt": "2012-07-26T14:34:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 7, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottjehl", "company": null}, {"login": "zrmccarthy", "company": "Mass Art"}, {"login": "gnarf", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "aleen42", "company": "@Coremail, Soundtooth"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 27, "comments_data": [{"authorLogin": "scottjehl", "authorAssociation": "NONE", "createdAt": "2012-05-14T15:49:55Z", "contents": "Hmm. The jQuery logotype was hand-drawn, but it's loosely based on a free typeface called Quagmire. The lines were all redrawn to be more horizontal and consistent. Wouldn't take too long for someone to do the same for the QUnit letters... http://fontzone.net/font-details/Quagmire-BoldItalic/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-13T14:41:31Z", "contents": "Disregard the above file, I'm working on a different version at the moment with a few variations.\nAs far as a tagline, is there anything you had in mind? Possibly \"Javascript Test Suite\"?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-07-13T14:59:09Z", "contents": "I'm not sure what tag line to use, but not \"JavaScript Test Suite\". Because it's not a \"test suite\". People create test suites with QUnit. QUnit itself is a \"unit test framework\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-13T16:14:34Z", "contents": "Here's the file: http://dl.dropbox.com/u/70675040/Qunit.ai\nThere's a few variations of the logo...having the Q and U at the same size looks a bit off to me so I played around with various other sizes. I also tried stylizing the Q to seperate it from Unit, because when they are at the same size it tends to read as \"QU\". The bottom one includes a tagline.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-13T16:50:44Z", "contents": "As much as I appreciate the illustrator file, can you include a quick screen grab of it rasterized also for those of us without the adobe suite on our computers? :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-13T16:54:25Z", "contents": "Random Idea: what happens if you just steal the \"Qu\" part/sizing of jQuery in it's logo and then in the text next to it make it QUnit -- it might feel better? -- j[QUnit]ery?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-13T16:55:05Z", "contents": "+1 on providing pixels", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-07-13T16:55:49Z", "contents": "Pixels:\n\nhttp://cl.ly/0C401n0s1r1G1G0L0a1P", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-13T16:59:16Z", "contents": "Disclaimer: IANAD - That last one looks most promising, try the \"sizing\" from the j[Qu]ery logo and maybe play with the bar on the t and the dot on the i and line em up with the top bar on the n? I'll let someone else throw in feedback tho :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-13T17:10:40Z", "contents": "How about just \"unit testing\" for the tag line?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-13T18:27:10Z", "contents": "Here's a few more (As a PNG):\n\n1.) Made all letters have the same weight for capitals and lowercase.\n2.) Different tagline and extended \"t\"\n3.) All lowercase \"unit\" with size relation similar to the jQuery logo\n4.) \"Qu\" in logo in a slightly different size (I think this relationship looks better)\nAs far as have the dot of the \"i\" and the top of \"t\" lining up with the top of the \"n\", the t and i are ascenders and would look very strange if it was the same height as the n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-15T07:25:51Z", "contents": "I originally suggested in IRC \"JavaScript unit testing\" as the tag line. The \"JavaScript\" part may seem redundant, but suggests the independence from jQuery. Its a jQuery project, but doesn't depend on the code.\nI lke 1.) - could you try the other tag line for that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-19T14:28:30Z", "contents": "http://dl.dropbox.com/u/70675040/Qunit_(6).png", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-07-19T14:41:03Z", "contents": "Nice!\nOn 19 jul. 2012, at 07:28, Zachreply@reply.github.com wrote:\n\nhttp://dl.dropbox.com/u/70675040/Qunit_(6).png\n\nReply to this email directly or view it on GitHub:\n#222 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-19T14:59:00Z", "contents": "Looks great!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-19T14:59:55Z", "contents": "For the websites, we need to replace this one: https://github.com/jquery/web-base-template/blob/81659025b8fed1210134a4642ed49444ed560f65/themes/jquery/i/logo-qunitjs.png", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-19T15:40:31Z", "contents": "Here is the full size PNG, with transparent BG: http://dl.dropbox.com/u/70675040/Qunit_(F).png\nHere is a smaller one at 203px X 60px:http://dl.dropbox.com/u/70675040/Qunit_(F)_Small.png\nI can upload the .ai file if you need it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-19T15:43:24Z", "contents": "Yeah, please upload that as well. Thanks so much!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-19T15:45:06Z", "contents": "No problem! Here you go:\nhttp://dl.dropbox.com/u/70675040/Qunit%20(F).ai", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-21T11:49:34Z", "contents": "Not quite live yet, but will be there pretty soon. Blocked by infrastructure issue thats tracked elsewhere, so closing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-25T17:51:26Z", "contents": "@zrmccarthy could you updated the 203x60 one? The anti-aliasing on the \"QUnit\" part doesn't look as good as it should: http://qunitjs.com/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-26T14:20:05Z", "contents": "Here's an updated one: http://dl.dropbox.com/u/70675040/Qunit_Fixed.png\nThe anti-aliasing is fixed, and I bumped up the color and size of the tagline because it is difficult to read as is on the site.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-26T14:25:51Z", "contents": "Thanks, updated that on the site: http://qunitjs.com/\nLooks a lot better. Could you update the ai file once more?\nWould also be great to get the favicon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zrmccarthy", "authorAssociation": "NONE", "createdAt": "2012-07-26T14:31:59Z", "contents": "http://dl.dropbox.com/u/70675040/Qunit_Fixed.ai\nNo problem, working on the favicon, I'll post it in the other thread when it's finished.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-26T14:34:39Z", "contents": "Great, thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aleen42", "authorAssociation": "NONE", "createdAt": "2017-04-18T10:07:18Z", "contents": "So, is there any .svg file or .ai for the logo of QUnit? And I want to make a badge for it in the repository badges.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-18T15:03:51Z", "contents": "@aleen42 you can download .eps versions of the logo with the jQuery Foundation logo suite here: https://brand.jquery.org/logos/#the-mark", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 223, "url": "https://github.com/qunitjs/qunit/issues/223", "title": "equal(0,'0','Should not be equal!'); ", "contents": "The test\nequal(0,'0','Should not be equal!');\npasses, which in my view it shouldn't since a string can never be equal to a number.", "createdAt": "2012-03-23T22:47:25Z", "updatedAt": "2012-03-23T22:53:45Z", "closedAt": "2012-03-23T22:52:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kbruneel", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "kbruneel", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "kbruneel", "authorAssociation": "NONE", "createdAt": "2012-03-23T22:53:45Z", "contents": "I should have used strictEqual", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 224, "url": "https://github.com/qunitjs/qunit/issues/224", "title": "Test", "contents": "", "createdAt": "2012-03-27T18:33:45Z", "updatedAt": "2013-01-09T22:57:16Z", "closedAt": "2012-04-03T10:07:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "BlackflagSDKtesting", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "BlackflagSDKtesting", "company": "iSoftStone"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-28T12:32:56Z", "contents": "Did you actually set QUnit.config.reorder = false? If so, can you provide an example?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-03-28T21:02:33Z", "contents": "Of the behaviour you describe. As I don't see that anywhere else, until you can show it happening, I have to assume you're doing something wrong.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 226, "url": "https://github.com/qunitjs/qunit/issues/226", "title": "Allow calls to \"expect\" within a single test to be cumulative", "contents": "Right now it hurts modularity that it is not possible for a test function to call various subfunctions which each make their own separate calls to \"expect\" along with issuing some assertions. Forcing the user to push the \"expect\" count to top level makes test cases fragile - it would be helpful if several calls to \"expect\" within a single test case were cumulative, rather than the last one replacing the total count.", "createdAt": "2012-04-09T07:04:01Z", "updatedAt": "2012-08-17T11:50:34Z", "closedAt": "2012-08-17T11:50:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "amb26", "company": "The Fluid Project"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 13, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-09T11:38:44Z", "contents": "The patch is simple enough, but the design is questionable. Having a single expect per test means that you have to structure modules, tests and assertions in a way that a single expect makes sense. Having one test method call out to several other methods, each with expect calls, sound like you're not structuring your tests in a way to fits QUnit.\nBefore closing or landing, I'd like to see your usecase to get a better idea what you're trying to solve.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-09T20:36:02Z", "contents": "Hi Joern - this facility is essential when tests are written which are in some way reflective or driven by declarative configuration. Here is a simple setup which on the first line sets up 3 component types to be tested in an array. The body of the test iterates over the array and issues a test case for each member against a different type. The expectation is that the set of components under test can be driven directly by adding or removing elements from the head array - it would be onerous to expect the test maintainer, in order to arrive at a valid test, to inspect all the code paths and add up the total number of \"expect\" counts to place in the head test.\nAs it happens in this case the number of expects is constant (1) for each component, but we also have cases where the test cases themselves are also polymorphic, variable on the type of the component being tested, and so the burden of counting \"expect\" clauses would be particularly onerous.\nIn terms of structuring our tests to fit QUnit, I hope that in the final analysis that QUnit can be found to be useful in a broad community and being purposed to fit a diverse collection of needs, of course without compromising its core architectural principles and consistency. I hope you agree that this is an useful improvement which increases QUnit's coverage without compromising its consistency.\nfluid.tests.gradeTestTypes = [\"fluid.tests.gradedComponent\", \"fluid.tests.autoGradedComponent\", \"fluid.tests.ungradedComponent\"];\nfunction testEvent(message, component) {\njqUnit.expect(1);\ncomponent.events.anEvent.addListener(function() {\njqUnit.assert(message + \": Event fired\");\n});\ncomponent.events.anEvent.fire();\n}\nfluidIoCTests.test(\"Grade resolution test\", function () {\n    fluid.each(fluid.tests.gradeTestTypes, function(typeName) {\n        var that = fluid.invokeGlobalFunction(typeName, [\"#pager-top\"]);\n        testEvent(\"Construction of \" + typeName, that);\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-09T21:57:52Z", "contents": "In this case, why not use a test for each type?\nfluid.each(fluid.tests.gradeTestTypes, function(typeName) {\n    fluidIoCTests.test(\"Grade resolution test for \" + typeName, function () {\n        var that = fluid.invokeGlobalFunction(typeName, [\"#pager-top\"]);\n        testEvent(\"Construction of \" + typeName, that);\n    });\n});\n\nThen put an appropiate module() call in front of that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-09T22:09:40Z", "contents": "I think we should be free to issue tests of the granularity we prefer. It seems unnecessarily bulky to declare a new module around this construction and a fresh test case for each fixture. The inability to cumulate \"expect\" forces each leaf function in the testing architecture to become its own test case which is not usually an appropriate choice. I can quote more elaborate test cases than this one where the economics are even more skewed.\nCould you explain your opposition to this feature, which clearly meets a need by some of your userbase, for which you have a patch, tests and a clear explanation, and breaks none of your existing tests?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-09T22:50:56Z", "contents": "A general opposition of new features is pretty healthy for open source projects. In this case my concern is about the change in the semantics of expect. The unit tests don't tell us what code might break elsewhere due to a change, even if its very unlikely to break something in this case.\nThis isn't the first request asking for different module/test/assertion semantics, and I have to make sure that the usecase is actually valid.\n\nI can quote more elaborate test cases than this one where the economics are even more skewed.\n\nI'd like to see those, as the previous example itself wasn't convincing. Is there another (GitHub) project I can look at? Maybe there's an alternative solution to the problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-09T23:04:44Z", "contents": "Here is a more elaborate example.\nhttps://github.com/fluid-project/infusion/blob/master/src/webapp/tests/component-tests/uploader/js/UploaderTests.js\nAt lines 566-577 we set up a bunch of tests, which does indeed issue a distinct test for each loop entry as you advise - however, as the tested code is polymorphic, as well as being composed of a number of independent units, the number of \"expect\" calls can't be easily computed in advance. We don't actually issue any expect calls here since there aren't any dynamic code paths within the tests themselves, but this is just an accident of how these tests are written, and they may well need to be expanded to issue \"expect\" in the future. For example, look at the \"leaf function\" \"checkUploaderArgumentMap\". I think it is unreasonable to expect this to be a whole test case in itself. It should be able to express its own \"expect\" count (2).\nIn general, I think your solution isn't workable because it forces us to couple the unit of the test fixture (which amongst other things, is coupled to the cycle of replacing the \"#main\" markup and setup/tearDown) with the smallest unit of code which we have which issues assertion calls. This prevents tests from being expressed in the scalable manner that one would use when writing normal code. The \"teardown/replace\" boundary in the architecture is a fixed one depending on the actual lifecycle of the component being tested, and should not be used to define architectural boundaries in the structure of the code forming the test cases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-10T21:33:38Z", "contents": "Thanks for the full example. I'll need a bit more time to get back to this, but expect the patch to land sometime soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-10T21:36:50Z", "contents": "Cheers, Joern - thanks for your patience with the discussion", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-05-16T11:51:07Z", "contents": "I oppose the idea of cumulative expect(). It sets wrong expectations.\nIf you don't know the number of tests to be run in advance, don't use expect(). Counting your tests and calling expect() is useless, that's like asserting 1 + 1 to be equal to 1 + 1.\nIf you use a wrapper for creating several tests, (in that your assertions are not directly inside the test() callback), then you may find it useful to use incremental steps in the expect. In that case, perhaps take one of these three approaches:\n\nSplit it up into multiple test()'s. So instead of having\n\ntest('foo', function () {\n    expect(10);\n    K.Test.doTenTestsWith('X');\n\n    expect(10);\n    K.Test.doTenTestsWith('Y');\n});\n.. you'd have:\ntest('foo X', function () {\n    expect(10);\n    K.Test.doTenTestsWith('X');\n} );\n\ntest('foo Y', function () {\n    expect(10);\n    K.Test.doTenTestsWith('Y');\n} );\nOr even make the call to test() part of the doTenTestsWith method. So you only have to call that.\n\nSimply don't use expect(). Remember, it is optional. For example, if you are doing an ajax request and getting an unknown number of properties back (and the number is not significant), and then looping through and doing a validation on them equal( typeof x[y], 'string', x + ' is a string' );, then it doesn't make sense to use expect() because the number of tests doesn't mater. If it can't arrive at a wrong number, then don't use expect() just for the heck of using it.\nThe call to expect() doesn't have to be at the start. So, if you must, perhaps use a counter. That way it is clear what you're doing.\n\ntest('foo', function () {\n    var expected = 0;\n\n    K.Test.doTenTestsWith('X');\n    expected += 10;\n\n    K.Test.doTenTestsWith('Y');\n    expected += 10;\n\n    expect(expected);\n});\nIf we decide to keep not-supporting cumulative setting of expect, then we should also be more strict about it and display warnings if it is called multiple times.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-16T13:18:09Z", "contents": "Hi Timo - I disagree with your argument, for reasons which I have already stated. To deal with each of your presented choices,\ni) you say - \"split it up into multiple test()\"s - this is unacceptable, since as I pointed out earlier,\n\"In general, I think your solution isn't workable because it forces us to couple the unit of the test fixture (which amongst other things, is coupled to the cycle of replacing the \"#main\" markup and setup/tearDown) with the smallest unit of code which we have which issues assertion calls.\"\nii) Simply don't use \"expect()\" - this is a choice we exercise from time to time, but sometimes it is important for the integrity of a test that it has run to conclusion (if it has unexpected exit paths in the logic that allow it to terminate without failure). Your argument about doing an AJAX request and getting an unknown number of properties is invalid - an AJAX request could never be part of a unit test fixture since it would introduce an environmental dependency. Of course, jqUnit is equally useful for integration tests, but unit tests are, culturally, its primary use case - as its name suggests.\niii) Arguments based around expecting the test case author to mock up this feature of the testing framework manually whenever they want it are unhelpful. The testing framework has this feature (the ability to count the number of assertions) and it would be most helpful for it to be upgraded so that it covers more use cases for the user base.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-31T16:51:34Z", "contents": "This is a breaking change, so I'm against it for that reason alone. But, I see two sane ways to accomplish what @amb26 is asking for:\n\nHave the test helpers return the number of assertions:\n\ntest( \"do lots of stuff\", function() {\n    var expected = 10;\n    expect( expected );\n\n    // do stuff locally which causes 10 assertions\n\n    expected += someHelperWithUnknownAssertions();\n    expect( expected );\n});\n\nExpose the number of expected assertions for the currently running test:\n\ntest( \"do lots of stuff\", function() {\n    // ...\n    someHelperWithUnknownAssertions();\n});\nfunction someHelperWithUnknownAssertions() {\n    expect( QUnit.currentTest.expected + 5 );\n    // do assertions\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:54:33Z", "contents": "That would be expect( QUnit.config.current.expected + 5 )", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:55:14Z", "contents": "We could make expect() return the current number of assertions when called without arguments.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 228, "url": "https://github.com/qunitjs/qunit/issues/228", "title": "Deprecate global variables, group assert methods", "contents": "Many reasons:\n\nEasier to extend by third parties (e.g. to implement a strict assertTrue, lt (less then) or gtOrEq (greater than or equal to) - no clashing names with utility functions and callback stuff.\nMakes the API more mobile and environmental friendly (e.g. issue #190)\nEasier to add support for in linting applications (only 1 global)\n\nI propose something along the the lines of:\n\nQUnit.group\nQUnit.test\nQUnit.assert.equal\n\nmaybe ability shorten to this.equal inside a test() ?", "createdAt": "2012-04-11T18:00:21Z", "updatedAt": "2012-05-16T11:09:18Z", "closedAt": "2012-05-16T11:09:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "AaronAsAChimp", "company": "Ponginae LLC"}, {"login": "jzaefferer", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "AaronAsAChimp", "authorAssociation": "NONE", "createdAt": "2012-04-25T19:31:15Z", "contents": "+1 To this, using QUnit.test would make everything easier.\nWhat about this for syntax?\n// extend assertions\nQUnit.assert.awesome = function (potentially_awesome, message) {\n    this.ok(potentially_awesome.isAwesome(), message);\n};\n\n// QUnit.assert is passed in as the first parameter to the test\nQUnit.test('An Awesome object can be awesome.', function (is) {\n    var an_obj = new AnObject();\n\n    is.ok(an_obj instanceof Awesome, 'Does it inherit from Awesome?');\n    is.equal(an_obj.max, 11, 'Does it go up to 11?');\n    is.awesome(an_obj, 'Is it awesome?');\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:41:59Z", "contents": "Issue #190 is one thing, but not really a reason for removing all globals except QUnit itself.\nAs for linting applications, maybe we can get jshint to add a assert option, including all CommonJS assert module methods. That could simplify things a lot.\nthis inside a test already refers to the testEnviroment option, which you can initialize in a module-setup callback. Not a well-known feature, but has been around for a few years.\nAs for new assertion methods, those should always use QUnit.push to get correct source lines.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T16:41:39Z", "contents": "@AaronAsAChimp interesting syntax example. Another thing that may be useful (and fits well in the object-oriented syntax), is the use of a freeform \"not\".\n// Extend assertions:\nQUnit.assert.cowType = function (cow, expected, message ) {\n    QUnit.push(Cow.types[cow.getTypeId()] === expected, Cow.types[cow.getTypeId()], expected, message);\n};\nQUnit.assert.gt = function (actual, expectMin, message ) {\n    QUnit.push(actual > expectMin, actual, '> ' + expectMin, message);\n};\n\n// QUnit.assert is passed in as the first parameter to the test\nQUnit.test( \"FooCow and BarCow defaults\", function ( assert ) {\n    var bar, foo;\n\n    bar = new BarCow();\n    foo = new FooCow();\n\n    assert.strictEqual( foo.name, \"\", \"A FooCow has no name\" );\n    assert.gt( bar.spots, 10, \"A cow has varying number of spots, but should be no less than 10\" );\n    assert.not.equal( bar.name, \"Jack\", \"A BarCow is not named Jack\" );\n    assert.cowType( foo, \"awesome\", \"A FooCow must be awesome\" );\n    assert.not.cowType( bar, \"awesome\", \"A BarCow must not be awesome\" );\n});\n@jzaefferer Okay, let's not use the this then. How about the assert argument?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-06T11:07:20Z", "contents": "At this point I'd rather not discuss specifics, as I'm not convinced this really needs to change. You've listed three reasons, of which I consider two invalid (custom assertions, module/group naming), as those can be addressed in other ways.\nI like the simplicity of those fourteen global methods and would like to keep that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-05-06T18:04:07Z", "contents": "I agree if it were only 14 globals it would be somewhat manageable (on the edge and imho not preferable, but doable - for a test framework that is). But due to the downside of using ok() for custom assertions (One looses file path/line number debugging, and the failure output will only contain \"false\", not the actual values e.g. ok( 4 < 6, \"msg\" )), it is very attractive to create custom assertions, and we encourage developers to do so (using QUnit.push).\nBut that means people are forced (unless not following QUnit's example) to create globals and risk clashing with the many global variables out there already. Browsers these days have (inherited) globals like alert, atob, blur, btoa, find, isFinite, isNAN, isPrototypeOf, hasOwnProperty, .. not to mention the globals introduced by whatever other scripts are part of the tested application.\nNote that we can stay backwards compatible as long as we want (just like we do now, like extend( window, QUnit, QUnit.assert )).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-06T18:40:17Z", "contents": "I don't see the problem with making custom assertions not global. Not all QUnit methods are global, the addons assertions in particular are all namespaced to QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AaronAsAChimp", "authorAssociation": "NONE", "createdAt": "2012-05-09T19:23:20Z", "contents": "It would be nice to have all of the assertions in one spot. Having some global and some namespaced could be confusing. It seems like methods like ok, equal, or group are more likely to be overridden accidentally than QUnit.\ntest('Is my object ok', function () {\n    ok = new MyObject();\n\n    ok(ok); // Uh Oh!\n    // Granted as you type that, you\n    // should realize something's wrong.\n});\nVersus:\nQUnit.test('Is my object ok', function (assert) {\n    ok = new MyObject();\n\n    assert.ok(ok); // Yay!\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 230, "url": "https://github.com/qunitjs/qunit/issues/230", "title": "Async tests with concluding assertions", "contents": "It would be great, if i could run concluding assertions in asynchrounous tests.\nSomething like:\nvar x = 0;\nstop(2);\n\nsetTimeout(function(){ x++; start(); }, 5);\nsetTimeout(function(){ x++; start(); }, 5);\n\nconcludeWith(function(){\n   equal(2, x, \"both timeouts occured\");\n});\n\nWhat do you think?", "createdAt": "2012-04-13T11:29:31Z", "updatedAt": "2012-05-07T09:19:08Z", "closedAt": "2012-05-04T09:36:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lcorneliussen", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "lcorneliussen", "company": "Faktum Software GmbH"}, {"login": "tkristiansen", "company": "Faktum Software GmbH"}, {"login": "jzaefferer", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "tkristiansen", "authorAssociation": "NONE", "createdAt": "2012-04-13T12:56:15Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lcorneliussen", "authorAssociation": "NONE", "createdAt": "2012-04-13T13:00:16Z", "contents": "Maybe, to avoid race conditions, concludeWith should run before start() can potentially be run. It might also make sense to join it with stop...\nSo:\nvar x = 0;\nstop(2, function(){\n    equal(2, x, \"both timeouts occured\");\n});\n\nsetTimeout(function(){ x++; start(); }, 5);\nsetTimeout(function(){ x++; start(); }, 5);\n\nI like that one. :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:36:56Z", "contents": "Isn't that easy enough to implement on top of existing methods? Either call your own semaphore, which then calls start(), or use a module teardown callback.\nAdding features should happen mostly to solve problems that are impossible to solve otherwise. That doesn't apply here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lcorneliussen", "authorAssociation": "NONE", "createdAt": "2012-05-05T08:17:12Z", "contents": "I'm not sure how i can do that myself. But i also think, that async testing is a very common thing when testing JS - and this feature would really make it simpler to do async tests with qunit.\nCan't really understand, that \"features\" are only to \"solve problems\". I quint yet so big that you are afraid of raise in complexity when adding convenience to it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-07T09:19:08Z", "contents": "Here's an example using a module teardown: http://jsfiddle.net/6Ys6x/\nHere's one using a custom semaphore: http://jsfiddle.net/UTsjr/1/", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 233, "url": "https://github.com/qunitjs/qunit/issues/233", "title": "How to test for an exception thrown in an asynchronous function", "contents": "I would like to understand if (and how) it is possible to use QUnit to test for an exception that is supposed to be thrown in an asynchronous function.\nObviously the example I prepared in http://jsfiddle.net/qHwnZ does not work as expected because QUnit executes the test before the asynchronous has invoked the error callback but would very much like to understand if this kind of test is generally possible and what the proper approach might be.", "createdAt": "2012-04-16T19:37:27Z", "updatedAt": "2012-04-21T06:42:10Z", "closedAt": "2012-04-17T22:27:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "doberkofler", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "doberkofler", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "rwaldron", "company": "Bocoup"}], "comments_count": 13, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-17T21:24:44Z", "contents": "Here's a version that fails \"properly\": http://jsfiddle.net/NG3UJ/1/\nAs mentioned before, throwing exceptions from async callbacks is just a bad idea to begin with, you should instead call an application specific error handler, then verify the behaviour of that.\nMaybe @rwldrn has some input? I hear he has opinions. Not just on testing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-17T22:02:52Z", "contents": "I'm pretty sure jQuery is actually calling the error callback way after the try/catch in raises() runs, so it's really just an uncaught exception. The promise has already returned and raises() and fails the the test as no error occurred, then the result of the ajax call completes and an uncaught exception is thrown.\nI'm going to try to prove this with codez", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-17T22:12:49Z", "contents": "http://jsfiddle.net/rwaldron/CpfvF/\nNote the order of numbered steps and also the order of \"COMPLETION\" marks. \"COMPLETION C\" occurs inside the duck-punched raises() function and executes even before the request for the missing file is made (in Chrome)\nedit updated url", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-17T22:17:32Z", "contents": "In case you're looking for a naive, but functional way to do this test: http://jsfiddle.net/rwaldron/zkWWD/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-17T22:27:01Z", "contents": "Thanks Rick. So yeah, its not possible to catch an exception that is thrown in an async callback.Nothing QUnit could do about that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-17T22:32:11Z", "contents": "Right, it's definitely language level, ie. \"JavaScript is a run to completion language\"\nI'm sure there is a convoluted way to tackle this using the returned Promise, but I wouldn't bother", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-17T22:35:39Z", "contents": "That should use equal in place of ok, then put the start call after the assertion: http://jsfiddle.net/zkWWD/3/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-17T22:54:42Z", "contents": "Show off ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "doberkofler", "authorAssociation": "NONE", "createdAt": "2012-04-18T05:09:54Z", "contents": "@jzaefferer @rwldrn\nUnfortunately my JavaScript knowledge in general and jQuery/QUnit especially are not even remotely on your level and I still struggle in understanding some of your points.\nI would really appreciate if you could bear with me a little longer:\n\nAs mentioned before, throwing exceptions from async callbacks is just a bad idea to begin with, you should instead call an application specific error handler, then verify the behaviour of that.\n\nThis suggests that my general approach towards dealing with a fatal error (here I mean an unrecoverable error that does not allow any kind of recovery) in a web app is wrong from the beginning but I still do not understand what the \"proper\" way to deal with such an error type would be ?\n\nIn case you're looking for a naive, but functional way to do this test: http://jsfiddle.net/rwaldron/zkWWD/\nThat should use equal in place of ok, then put the start call after the assertion: http://jsfiddle.net/zkWWD/3/\n\nAt least when looking at them, it seems as if you guys came up with two possible solutions to the given problem but based on your comments you are unhappy with them and would still not recommend using them.\nCould you please elaborate on why this is no viable solution ?\nThanks a lot for all your help!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-18T14:11:01Z", "contents": "Sorry for any confusion, I recommend using @jzaefferer's latest version of the solution - it will provide you the best results.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "doberkofler", "authorAssociation": "NONE", "createdAt": "2012-04-18T18:56:12Z", "contents": "@jzaefferer\nThank you for providing a solution but would you be so kind and elaborate your thoughts or point me to some resprective resources on this:\n\nAs mentioned before, throwing exceptions from async callbacks is just a bad idea to begin with, you should instead call an application specific error handler, then verify the behaviour of that.\n\nThis suggests that my general approach towards dealing with a fatal error (here I mean an unrecoverable error that does not allow any kind of recovery) in a web app is wrong from the beginning but I still do not understand what the \"proper\" way to deal with such an error type would be ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-20T13:17:10Z", "contents": "@doberkofler you should let the user know about what happened, and try to log the error on your server. The combination of $(document).ajaxError() with a global error handler works best for that. Here's some sample code: https://github.com/jzaefferer/pitfalls-examples/blob/master/app/gallery/breakz.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "doberkofler", "authorAssociation": "NONE", "createdAt": "2012-04-21T06:42:10Z", "contents": "@jzaefferer now I got the concept and thanks a lot for the really nice example.\nWhat does not seem to work (at least in FF11 and Chrome18) is the retrieval of the properties from the event.originalEvent object in the error callback. Neither filename nor lineno seems to be filled as expected and therefore make the logging on the server less helpful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 236, "url": "https://github.com/qunitjs/qunit/issues/236", "title": "Implement event API (on/off/once/emit) ", "contents": "While working on the QUnit site and docs last week, it occurred to me that QUnit could benefit from an EventEmitter-esque API for the existing event callbacks. I'd like to open up discussion here, I have an implementation, which is actually just the EventEmitter from node tacked onto the QUnit prototype, with tests. I will push the branch for anyone to experiment with it.", "createdAt": "2012-04-20T14:09:20Z", "updatedAt": "2012-05-16T12:36:22Z", "closedAt": "2012-05-16T12:36:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rwaldron", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 10, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-04-20T14:53:46Z", "contents": "Spec actually adopts this approach (and implements QUnit-style assertions). Feel free to use its code, if you want.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-20T15:02:10Z", "contents": "@kitcambridge thanks!\nI just realized that my branch is no good. It assumes a modern JavaScript environment/VM", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-20T15:20:38Z", "contents": "@kitcambridge yes, this is exactly what I'm looking for https://github.com/kitcambridge/spec/blob/gh-pages/lib/spec.js#L399-509", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-04-20T16:39:48Z", "contents": "@rwldrn Brilliant; glad you found it useful!\nHere's a framework-agnostic implementation: https://gist.github.com/2430193", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-04-20T16:58:41Z", "contents": "@rwldrn Also, the tests are at https://github.com/kitcambridge/spec/blob/gh-pages/test/test_spec.js#L441-L610.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-20T16:58:42Z", "contents": "That's pretty solid, I'm going to see if it swaps in 1-to-1 (it actually looks like it will)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-20T16:59:03Z", "contents": "@kitcambridge you're the man.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-04T09:33:46Z", "contents": "So, what's up with this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-04T12:34:51Z", "contents": "Work in progress, I had to step away from it while I worked on a client project", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-16T12:36:22Z", "contents": "Just send a PR once you've got something to look at. This ticket by itself doesn't seem to have any value.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 237, "url": "https://github.com/qunitjs/qunit/issues/237", "title": "Incompatibility with require.js", "contents": "I notice the following lines in QUnit:\n// for CommonJS enviroments, export everything\nif ( typeof exports !== \"undefined\" || typeof require !== \"undefined\" ) {\nextend(exports, QUnit);\n}\nHowever the require variable is also defined by the require.js specification. Thus, \"require\" can exist, but \"exports\" may not. In my code (which depends on just require.js), the above code barfs given that \"exports\" does not exist. My fix is to change the condition to:\nif ( typeof exports !== \"undefined\" && typeof require !== \"undefined\" ) {", "createdAt": "2012-04-29T10:25:41Z", "updatedAt": "2012-05-02T11:08:29Z", "closedAt": "2012-05-02T11:08:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "huntc", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "huntc", "company": "Titan Class P/L"}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-30T22:55:30Z", "contents": "How about only checking for the exports variable? That's the only thing the code actually depends on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-04-30T23:02:43Z", "contents": "I guess that sounds reasonable - I just built on the fact that you were already checking for require - I wasn't sure why.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-04-30T23:04:19Z", "contents": "When in doubt, don't assume there was a good reason ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-02T11:08:29Z", "contents": "Fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 239, "url": "https://github.com/qunitjs/qunit/issues/239", "title": "Better Phantomjs integration", "contents": "The cli-phantom integration (https://github.com/jquery/qunit/blob/cli-phantomjs/test.js) is far from useful, as it is completely unspecified when the evaluated code actually runs. Grunt does some crazy stuff with alert. PhantomJS itself still bundles code that just looks at the markup, providing no assertion-level output.\nSee also #183", "createdAt": "2012-05-04T10:02:05Z", "updatedAt": "2012-05-31T21:26:19Z", "closedAt": "2012-05-31T16:35:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "huntc", "company": "Titan Class P/L"}, {"login": "cowboy", "company": "@toasttab "}, {"login": "philmander", "company": "Versatile Internet"}], "comments_count": 20, "comments_data": [{"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-07T00:22:56Z", "contents": "My recommendation is that QUnit looks for an existing instance of a QUnit configuration object when it starts. If it finds one then it uses this configuration object.\nPhantomJS provides a hook to set up globals for a page prior to it being evaluated so it should be able to declare QUnit's configuration prior to QUnit being loaded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-07T11:21:16Z", "contents": "@cowboy you've dealt with PhantomJS for the grunt integration, do you have any recommendations how to do this? The alert-logging didn't look like a \"sane\" approach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2012-05-07T12:32:58Z", "contents": "The code that PhantomJS has built-in is a total joke. If you were using PhantomJS by itself, without grunt, you'd still want to do it the way I've done it, but instead of writing lines of JSON to a temporary file, you'd log formatted output to the console (or a temp file). Basically, all this stuff would be in the JavaScript loaded by PhantomJS, and would do PhantomJS-specific stuff.\nSo anyways, grunt, PhantomJS, and QUnit need to communicate in some way. This is the way that made sense to me:\nQUnit \u2014alert\u2192 PhantomJS \u2014tempfile\u2192 grunt\nPhantomJS \u2014tempfile\u2192 grunt\n\ngrunt creates a temp file, and watches it for changes via polling\ngrunt spawns PhantomJS, passing the temp file's path and the test.html file://, http://, or https:// URL\nwhenever PhantomJS sees an alert it will log its arguments, as JSON, as a new line in the temp file\nwhenever grunt sees new line(s) in the temp file, it parses each added line, in order, and does something\nwhen everything is all done, the temp file is deleted\n\nQUnit \u2014alert\u2192 PhantomJS\n\nPhantomJS loads test.html page containing QUnit\nPhantomJS injects custom QUnit reporting code on window.load that tells QUnit to alert for every custom reporting method\nRefer to [3] above\n\nNote that if there was a redirect of some sort (due to JavaScript setting location.href or something similar) the custom QUnit reporting code has to be re-injected.\nWow, there's a lot of useful information here. Maybe I should write a blog post about this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-08T10:41:23Z", "contents": "Its ridiculous that alert is the only reliable way to get information out from PhantomJS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2012-05-08T11:50:28Z", "contents": "I think you missed something. The alert function / PhantomJS event handler is how you pass data from QUnit to PhantomJS. It seems like a good mechanism to do this, since the alert method is never used in unit tests.\nPassing information between PhantomJS and grunt, on the other hand, uses a temp file. I could have also used stdio or probably some other technique, but the temp file seemed to be really robust and cross-OS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-08T12:31:30Z", "contents": "I actually use XHR to post data out from PhantomJS to an embedded instance of Jetty - works really well.\nIt is unfortunate that PhantomJS provides no hook to something that can execute upon a resource being loaded and then executed. Perhaps I should raise an issue on PhantomJS to see if such a feature could be incorporated.\nMeanwhile I still think it would be a useful and flexible improvement to QUnit for it to utilise a configuration object that is defined prior to QUnit being declared. I also think that this should be relatively straightforward to implement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "philmander", "authorAssociation": "NONE", "createdAt": "2012-05-13T21:41:02Z", "contents": "@huntc I've been working on an Ant task to automate QUnit tests with Phantom where your recommendation about pre-configuring a QUnit config object when the page is initialized would have been useful.\nHowever, I also found another way that seems to work. Qunit runs on window.load, so you can add the QUnit callbacks before then, when the DOMContentLoaded event fires:\npage.onInitialized = function() {\n    page.evaluate(function() {\n        window.document.addEventListener( \"DOMContentLoaded\", function() {\n            QUnit.log = function(test) { ... };\n    }, false ); \n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-14T10:00:11Z", "contents": "Hi Phil - thanks for the feedback. I'm unsure that we can rely on the order of initialisation though moving forward. Neat trick though!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-14T11:43:17Z", "contents": "@philmander thanks for sharing that! (disregard my previous comment )\nSo far my approach was to use the callback to the open method. After looking through the phantomjs API some more I found that it actually specifies when it runs that callback, on onLoadFinished, which is way too late. With your approach, the evaulate call runs even before QUnit is loaded, but by using DOMContentLoaded, you can add logging after is was loaded.\nI'll give that a try in the cli-phantomjs branch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "philmander", "authorAssociation": "NONE", "createdAt": "2012-05-14T12:39:36Z", "contents": "@huntc Yes relying on the order of events and QUnit always starting on window.onload seems a bit too brittle, I'd prefer to see your solution implemented in QUnit. But this solution at least works now as a temporary approach with the current version of QUnit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-16T12:08:41Z", "contents": "I've updated the runner and added it in master as addons/phantomjs/runner.js - see 6612bde. The only major change is using the other callback, along with binding to dom ready, as suggested by @philmander. At least for the QUnit testsuite there's no difference in the number of tests ran. There's a difference compared to running the suite in the browser, but that's due to a bunch of tests running inside a done callback, which a regular testsuite should never do.\n@huntc can you take a look, let me know if that works for you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-18T00:10:55Z", "contents": "I might not be fully understanding this, but when dom ready fires, the scripts in the header block have run. My test is a script in the head block so I don't think this works for me...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-18T09:58:51Z", "contents": "My test is a script in the head block\n\nCan you share an example?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-21T03:55:46Z", "contents": "Here's a gist of the project's output. Please refer to the README file.\nhttps://gist.github.com/2760490", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-21T09:36:06Z", "contents": "That's a ton of code, can you reduce that, or point out the relevant parts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-21T11:23:45Z", "contents": "Sorry about that - I was hoping that the README would be self-explanatory. Simply put, open the page referred to by the README in a browser, inspect the page and you'll see that there's a set of script statements within the head. Let me know if this is still all too complex and I'll see what I can do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-23T10:00:06Z", "contents": "I still have no clue what all that has to do with QUnit and PhantomJS. I don't see any tests on that page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:36:55Z", "contents": "The runner itself is working and I just added a readme.\n@huntc can you open a new ticket with the issue you're having, along with a reduced test case that I can reproduce?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huntc", "authorAssociation": "NONE", "createdAt": "2012-05-31T20:03:36Z", "contents": "@jzaefferer Sorry for my delay; life full of deadlines etc.\nPlease note that there is no issue as such, I was just hoping that QUnit could look for a certain global describing callback configuration on instantiation. This would then provide an early opportunity for PhantomJs scripts to establish globals prior to QUnit even being loaded. I think that this would have worked well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T21:26:19Z", "contents": "Its not like we can't still land that. At this point I don't see what issue that addresses, as the runner works as-is.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 240, "url": "https://github.com/qunitjs/qunit/issues/240", "title": "Add Rerun link to placeholders", "contents": "When debugging an async test that didn't finish, it would be useful to have the Rerun link for that.", "createdAt": "2012-05-04T14:42:19Z", "updatedAt": "2012-05-05T10:45:02Z", "closedAt": "2012-05-05T10:45:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 241, "url": "https://github.com/qunitjs/qunit/issues/241", "title": "Make Rerun link run only a single test", "contents": "Rerun may currently match multiple tests, that's only sometimes useful. Try to change the rerun links to match the test number/id, and extend filter to handle that. That way manual prefix-filtering will continue to work.\nSee also https://forum.jquery.com/topic/rerunning-a-test-also-reruns-tests-with-similar-names", "createdAt": "2012-05-07T14:06:48Z", "updatedAt": "2014-03-12T12:59:33Z", "closedAt": "2012-05-17T17:38:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-16T12:13:05Z", "contents": "@scottgonzalez there's no test id currently. Tests are numbered, but that's only valid during a single run. We don't have that number available when filtering for the next run. Any idea what we could use instead?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-16T12:17:44Z", "contents": "We can register the numbers as test()/asyncTest() is called. Since all tests load, regardless of filter, that should work. I doubt anyone has tests that are generated or loaded in a random order.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-16T12:33:05Z", "contents": "The filtering is happening inside test() though: https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L328", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 243, "url": "https://github.com/qunitjs/qunit/issues/243", "title": "raises() should use Qunit.push internally", "contents": "If QUnit.push turns out to be too inflexible for that, fix it. Might also help to avoid duplicating so much logic in ok().", "createdAt": "2012-05-09T20:43:53Z", "updatedAt": "2012-05-16T12:18:41Z", "closedAt": "2012-05-16T12:18:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 246, "url": "https://github.com/qunitjs/qunit/issues/246", "title": "Provide a link for re-running a single Module / TestGroup.", "contents": "Often when developing I just want to focus on the module / group that I am currently writing; I know Qunit support filtering the test-suite by module name via ?filter=[module], but the Qunit runner (HTML) does not provide a direct link to this URL (instead I end up clicking on the 'Re-run' button for a given module's test and then splicing the URL.\nIt would be great if the Qunit runner could possibly:\na) Be redesigned to more clearly group test cases by module and provide a single 're-run module' button for each module\nb) Provide a 'Re-run module' button, and rename the current 'Re-run' button to 'Re-run testcase' to remove any ambiguity.\nThanks for all the hard work on Qunit :)\nJonny.", "createdAt": "2012-05-15T09:45:16Z", "updatedAt": "2012-08-08T12:47:48Z", "closedAt": "2012-08-08T12:47:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jonnyreeves", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jonnyreeves", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-16T12:35:38Z", "contents": "Somewhat related to #241\nMight make sense to give modules more focus in the visual output, using module names as headers, instead of listing all tests on the same level. That seperate level could then also include a seperate Rerun link.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-06-01T00:55:54Z", "contents": "I know Qunit support filtering the test-suite by module name via `?filter=[module]`.\nJust for the record, note that filter is doing a string search on the entire full test name (module + testname). Which means\n\nWhen you use the module name in any test name, it will run those as well\nWhen you have a module name that contains part of another module's name (e.g. jquery.foo and jquery.fooBar or jquery.foo.bar) then re-running just the jquery.foo module is not possible.\n\nThe ability to truly search by module name would be very welcome. Also from a distributed point of view such as TestSwarm where we already assume this is the case (certain tests are being run when they shouldn't right now because of the way filter works).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-08T16:01:36Z", "contents": "?module=[module] filters are now supported (via #256), just need a link in the UI.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonnyreeves", "authorAssociation": "NONE", "createdAt": "2012-08-08T12:47:48Z", "contents": "This has now been merged into master. :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 247, "url": "https://github.com/qunitjs/qunit/issues/247", "title": "Document assert argument to test() callback", "contents": "", "createdAt": "2012-05-16T11:10:13Z", "updatedAt": "2018-12-22T20:36:44Z", "closedAt": "2012-06-09T16:47:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-09T16:47:25Z", "contents": "Fixed by qunitjs/api@22a1da8", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 249, "url": "https://github.com/qunitjs/qunit/issues/249", "title": "Text output for 'notXXX' assertions", "contents": "For example, when assertion failed\nnotEqual(x, undefined, \"x must be initialized before using\")\nthen something like\nx must be initialized before using\nExpected:   undefined\nSource:         at ...\nwill be output. The sense of test is quite opposite (i.e. expected x is not 'undefined').", "createdAt": "2012-05-22T12:31:10Z", "updatedAt": "2014-03-24T20:02:50Z", "closedAt": "2012-05-31T16:29:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DmitrySokolov", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DmitrySokolov", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:29:12Z", "contents": "Once you look at the test, it becomes clear what's going on. Generally its a good idea to test what you're looking for anyway. Closing as worksforme.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 250, "url": "https://github.com/qunitjs/qunit/issues/250", "title": "Expected Date value is not displayed properly", "contents": "FYI,\nIn the current HEAD version, the expected values are not displayed properly.\nQUnit.objectType() returns the value in lower case, while jsDump.typeOf() tests for the bumpedcase version.\nThis causes all Date values to be seen as an 'object', and therefore be displayed as {}.", "createdAt": "2012-05-24T10:19:41Z", "updatedAt": "2012-05-31T17:42:52Z", "closedAt": "2012-05-31T17:42:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vdboor", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vdboor", "company": "Edoburu"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 251, "url": "https://github.com/qunitjs/qunit/issues/251", "title": "Improve composite runner", "contents": "\"Perhaps each suite (composite page) should fire a \"module\"/\"group\" event and make modules/groups hierarchical, e.g. Mocha's suites?\"\n\"(And the various reporters would also need to be updated to reflect and/or account for the hierarchical changes.)\"", "createdAt": "2012-05-27T10:08:52Z", "updatedAt": "2012-05-31T16:21:52Z", "closedAt": "2012-05-31T16:21:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 1, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-05-28T09:32:41Z", "contents": "This was from me on Twitter.\nAdditional clarification: I find it confusing that each composite suite fires testStart/testDone logging callbacks instead of a separate event like suiteStart/suiteDone but I also understand that this is a current limitation of the core QUnit runner not allowing you to add arbitrary logging lifecycle events. As a different approach, I thought perhaps it would be better if both suites and modules were instead mutually considered as \"groups\"/modules instead and allowed [theoretically] infinite hierarchical nesting, similar to how Mocha allows infinite nesting of their \"suites\" (basically equivalent to QUnit's \"modules\"). Mocha, however, does not have an iframe loader addon for running additional pages like this QUnit composite addon, though I have suggested it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 252, "url": "https://github.com/qunitjs/qunit/issues/252", "title": "Filter enhancement", "contents": "filter comparison should be lowercase\na link to filter by module would be nice\ngroup testcases by module in interface?", "createdAt": "2012-05-31T14:59:21Z", "updatedAt": "2016-11-01T16:28:56Z", "closedAt": "2012-06-08T16:00:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mihneagiurgea", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mihneagiurgea", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:09:04Z", "contents": "#246 covers module rerun links, and also discusses grouping by module in the interface", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-05-31T16:12:45Z", "contents": "Visual indenting of module tests is an option, going to look into that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-08T16:01:03Z", "contents": "Mostly addressed, with #246 covering the rerun link in the UI.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 253, "url": "https://github.com/qunitjs/qunit/issues/253", "title": "Explore parallel execution", "contents": "Testsuites with a lot of async tests could profit from running tests in parallel, speeding up execution a lot. Needs ideas for implementation.", "createdAt": "2012-05-31T17:19:37Z", "updatedAt": "2013-06-03T16:15:37Z", "closedAt": "2012-08-30T16:08:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "adaptabi", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-30T16:08:12Z", "contents": "No really that much of an issue, and apart from a problematic iframe-based solution, we don't have good implementation ideas.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adaptabi", "authorAssociation": "NONE", "createdAt": "2013-06-03T14:06:34Z", "contents": "Ha. :) Then I'll be moving to jasmine \ud83d\udc83", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-06-03T16:15:37Z", "contents": "This is a closed ticket and as such it has not been updated. Over the last 12 months a lot has changed. We're currently working on revising the implementation behind the assertion methods (see issue #374). This will enable various new patterns and useful features. Among them is parallel execution. This is being tracked under issue #331.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 254, "url": "https://github.com/qunitjs/qunit/issues/254", "title": "Include all relevant stack lines", "contents": "Currently source lines include only ever one line, while nested testing code can consist of several stack layers, all of which could be useful. For catched exceptions, the stack is just wrong, pointing at the QUnit source.", "createdAt": "2012-06-04T10:54:56Z", "updatedAt": "2012-06-04T11:00:37Z", "closedAt": "2012-06-04T11:00:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 255, "url": "https://github.com/qunitjs/qunit/issues/255", "title": "Global failure while executing QUnit is ignored by grunt QUnit task", "contents": "Syntax errors, amongst other issues that can go wrong with a script under test, cause a \"global failure\" within QUnit and are recorded as a test failure, visibile when viewed from a browser as is any other assertion failure.\nThe qunit grunt task does not appear to process global failures, erroneously reporting that there are no errors.\nTo repeat, compare results of viewing test.html in a browser versus executing the grunt.js below (assumes latest qunit.js and qunit.css are in local directory):\ngrunt.js\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n\n  grunt.initConfig({\n    qunit: {\n      files: ['*.html']\n    },\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'qunit');\n};\ntest.html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>Global Failure Test</title>\n        <link rel=\"stylesheet\" href=\"qunit.css\" type=\"text/css\" media=\"screen\"/>\n        <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\n        <script type=\"text/javascript\" src=\"qunit.js\"></script>\n        <script type=\"text/javascript\" src=\"globalFailure.js\"></script>\n        <script type=\"text/javascript\">\n            $( document ).ready( function() {\n                module( \"A module\" );\n                test( \"a basic test example\", function() {\n                  ok( true, \"this test is fine\" );\n                  var value = \"hello\";\n                  equal( value, \"hello\", \"We expect value to be hello\" );\n                } );\n            } );\n        </script>\n    </head>\n    <body>\n        <h1 id=\"qunit-header\">Global Failure</h1>\n        <h2 id=\"qunit-banner\"></h2>\n        <div id=\"qunit-testrunner-toolbar\"></div>\n        <h2 id=\"qunit-userAgent\"></h2>\n        <ol id=\"qunit-tests\"></ol>\n        <div id=\"qunit-fixture\"></div>\n    </body>\n</html>\nglobalFailure.js\nif ( a ){\n    alert( \"'a' was true\" );\n}", "createdAt": "2012-06-06T22:18:44Z", "updatedAt": "2012-06-07T19:51:37Z", "closedAt": "2012-06-07T19:51:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JasonLunn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JasonLunn", "company": null}, {"login": "cowboy", "company": "@toasttab "}], "comments_count": 5, "comments_data": [{"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2012-06-07T14:48:31Z", "contents": "What does \"global failure\" mean?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2012-06-07T14:48:58Z", "contents": "Do you mean an uncaught exception?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JasonLunn", "authorAssociation": "NONE", "createdAt": "2012-06-07T14:53:11Z", "contents": "Yes. In the case of the minimal fail case that I attached to the bug in\nglobalFailure.js, it is a syntax error (I refer to variable 'a' without\ndefining it).\n'global failure' is QUnit's terminology; that is how they label the result\nrow when an error is caught when there is not a current test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2012-06-07T14:56:57Z", "contents": "Gotcha. I'm looking into it now to see if this is something grunt can intercept.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2012-06-07T15:59:19Z", "contents": "According to this thread, PhantomJS doesn't support window.onerror, so QUnit's built-in exception handling won't work.\nAnd according to this issue, it seems like page.onError may have broken in PhantomJS 1.5.0, so any workaround I might want to write for this won't work anyways, until this issue is addressed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 257, "url": "https://github.com/qunitjs/qunit/issues/257", "title": "Globally-executed errors sneak past `raises` in Internet Explorer", "contents": "Tests introduced to the jQuery suite by jquery/jquery@7428729 utilize QUnit.raises to detect errors in code passed to jQuery.globalEval for global execution. The exceptions are always \"caught\" (in that they are processed as expected by QUnit.raises) but QUnit's window.onerror handler can still see them in Internet Explorer, causing erroneous test failures.", "createdAt": "2012-06-08T14:22:13Z", "updatedAt": "2012-06-08T15:10:50Z", "closedAt": "2012-06-08T15:10:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 260, "url": "https://github.com/qunitjs/qunit/issues/260", "title": "config.current not reliable for pushing assertions", "contents": "the window.onerror handler in QUnit is using if ( QUnit.config.current ) { .. to determine whether to push an assertion (a failure in this case) directly or to create a new QUnit.test() as wrapper.\nHowever there is two (related) issues:\n\nTest.prototype methods only set config.current = this, it is never unset.\nWhen assertions are pushed into a Test instance after it has finished, they are ignored\n\nThis means that in most cases when onerror is run from an asynchronous event that started some time after the test suite has started, the failure will not be recorded (only if it is triggered before the first test(), in which case config.current really is falsy and a test wrapper makes it work).", "createdAt": "2012-06-12T14:25:57Z", "updatedAt": "2012-06-12T16:11:43Z", "closedAt": "2012-06-12T16:11:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 264, "url": "https://github.com/qunitjs/qunit/issues/264", "title": "Handling for alert / confirm messages", "contents": "Maybe i get it wrong, but currently all my tests stop, if there is a confirm / alert call within the tested function. Is there a possibility to test against them - maybe by providing an object containing already popped up alerts / confirms?", "createdAt": "2012-06-14T08:00:45Z", "updatedAt": "2012-06-14T10:10:48Z", "closedAt": "2012-06-14T10:10:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "theodorkrampf", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "theodorkrampf", "company": null}, {"login": "jonnyreeves", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jonnyreeves", "authorAssociation": "NONE", "createdAt": "2012-06-14T09:00:07Z", "contents": "Could you not stub window.alert / window.confirm in your test case?  SinonJS integrates well with QUnit and provides a nice Stubbing API.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-14T09:54:25Z", "contents": "What @jonnyreeves said! Though you don't even need a stubbing API - just overwrite those methods with a function that runs whatever assertions you need.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "theodorkrampf", "authorAssociation": "NONE", "createdAt": "2012-06-14T10:10:46Z", "contents": "That's an idea. Thanks guys.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 267, "url": "https://github.com/qunitjs/qunit/issues/267", "title": "Rename \"assert.raises\" to \"assert.throws\"", "contents": "I  know we are famous for this and it appears justified:\n\nQUnit's assertion methods follow the CommonJS Unit Testing specification, which was to some degree influenced by QUnit. A notable exception is throws (a reserved JavaScript identifier), which is called raises in QUnit.\n\nBut I've looked in many places and can't find a source to back this up:\n\nES5: http://es5.github.com/#x7.6.1\nMDN: https://developer.mozilla.org/en/JavaScript/Reference/Reserved_Words\n\nWhile googling I did find several lists about Java reserved words (which includes throws), but not for ECMAScript.", "createdAt": "2012-06-26T19:28:28Z", "updatedAt": "2014-10-06T08:50:22Z", "closedAt": "2012-06-29T04:12:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-06-26T19:29:25Z", "contents": "Okay, so it looks like it was included in the list of \"Future Reserved Words\" in ES3.1 (not anymore in ES5). We should do a cross-browser test and find out whether browsers made an issue out of this. Maybe this research was done in the past, but I couldn't find it anywhere.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-06-26T20:07:23Z", "contents": "http://toolserver.org/~krinkle/tmp/test-js-throws/\nChrome: { 19: true }\nIE: { 10: true, 9: true, 8: true, 7: true, 6: true }\nFF: { 12: true, 8: true, 3.6: true, 3.0: true }\nOpera: { 11.6: true, 11.5: true, 11.1: true, 10.0: true }\nSafari: { 5.1: true, 5.0: true, 4.0: true }\n\n\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 269, "url": "https://github.com/qunitjs/qunit/issues/269", "title": "Use classes to collapse assertion groups", "contents": "... instead of inline styling.\nThat way third parties can use CSS to adjust their information according to the current display.", "createdAt": "2012-06-26T20:38:30Z", "updatedAt": "2012-09-30T12:14:09Z", "closedAt": "2012-09-30T12:14:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 270, "url": "https://github.com/qunitjs/qunit/issues/270", "title": "Banner link should ignore \"testNumber\" and \"module\"", "contents": "It already filters out the filter query, but the newly added testNumber and module are not being filtered out yet.", "createdAt": "2012-06-26T21:14:18Z", "updatedAt": "2012-06-26T21:19:12Z", "closedAt": "2012-06-26T21:19:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 273, "url": "https://github.com/qunitjs/qunit/issues/273", "title": "Tests may not function correctly if your page takes over 13 milliseconds to load", "contents": "The problem\nConsider a minimal test case:\nQUnit.done(function (result) {\n    console.log(\"Done\", result);\n});\n\nvar tests = function () {\n\n    test(\"Test 1\", function () {\n        ok(true);\n\n    });\n\n    test(\"Test 2\", function () {\n        ok(true);\n    });\n};\n\nsetTimeout(function () {\n    tests();\n}, 50);\nThe .done() function should be fired once, but is in fact is fired three times, once before tests start and once after each of the two tests. This is due to a fundamental assumption that all tests will be loaded either synchronously or within 13 milliseconds, as demonstrated by qunit.js line 365:\n// A slight delay, to avoid any current callbacks\nif ( defined.setTimeout ) {\n    window.setTimeout(function() {\n        if ( config.semaphore > 0 ) {\n            return;\n        }\n        if ( config.timeout ) {\n            clearTimeout( config.timeout );\n        }\n\n        config.blocking = false;\n        process( true );\n    }, 13);\n} else {\nNow, you may be thinking this is a non-issue. Who would be crazy enough to wrap their test definitions in a setTimeout? Well, anyone that uses requirejs for a start. Before tests can begin I need to have loaded up the module to test, I need to probably load underscore and jquery, and any other helpful test modules we have created. The require call takes longer than 13 milliseconds, even loading files off a local machine.\nThis definitely affects the behaviour of .done() as I outline above, and may account for lots of other strange behaviours I have witnessed during my tramatic time using QUnit.\nWorkarounds\nThankfully there is some hope before a proper fix is found\nQUnit.config.autostart = false;\n\nvar tests = function () {\n    // ...\n};\n\nsetTimeout(function () {\n    tests();\n    start();\n}, 50);  \nBut this does mean adding some extra code to every test you write, just in case.\nThe solution?\nWell, probably not to assume that every test file takes 13 milliseconds to run. I can a solution in one of two ways:\n\nCreate a better test runner that defaults to more user control.\nDocument the 13 millisecond rule by erroring whenever a test is defined after the test runner has started. \"Tests defined after x, please use foo() to compensate\".\n\nIt's very annoying for a would be developer to have to trawl through code to find this kind of bug. We need QUnit to have the maturity of JUnit, or unit testing in JavaScript is not going to take off like it should.\nRelated\nI have found a related bug that was closed: #108 - The issue is much wider ranging, it just turns out that phones are slow enough to be susceptible for it.", "createdAt": "2012-06-27T08:30:35Z", "updatedAt": "2012-09-30T12:18:58Z", "closedAt": "2012-09-30T12:18:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sbrandwoo", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sbrandwoo", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-06-29T10:19:07Z", "contents": "There is no such thing as a 13 millisecond rule. When the document is ready QUnit loops through the tests queued up and executes them. When there is nothing left it triggers the \"done\" callback(s).\nWhen additional tests are added, it will re-enter test mode and execute it. However this should not be relied on because automated aggregators will stop the test suite after the (first) done callback.\nMake sure you tests are loaded properly. Preferably by using a dependency manager or by simply using blocking script tags.\nNotice that you don't have to repeat this in each test suite. You can have a central testrunner.js file for your project where one would put custom assertion helpers, additional configuration like timeout and autostart. And then you can pass QUnit.start (a function by reference) to your dependency manager as callback for when core modules and test suites are loaded.\nUsing QUnit.start() and autostart seems like a good solution to me. No matter how pretty one would make it, in the end you'll still need a callback from the loader to QUnit that it should start, right ?\nI've never had this issue though, perhaps QUnit is not included in your load flow? (e.g. testrunner depends on [test suites] depends on [core modules, QUnit]).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T12:18:58Z", "contents": "What @Krinkle said - in addition, autostart is now documented here: http://api.qunitjs.com/QUnit.config/\nBeyond that we need more input, until then I'm closing this issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 274, "url": "https://github.com/qunitjs/qunit/issues/274", "title": "Improve urlFilter API and UI", "contents": "extend that array to have a key, label and tooltip for each item, have them more self-descriptive\nuse label and tooltip in the UI\nmove the checkboxes out of the header, put them somewhere less dominant\ndocument the API\n\n@paulirish am I missing something?", "createdAt": "2012-06-28T17:01:23Z", "updatedAt": "2012-07-19T11:26:49Z", "closedAt": "2012-06-30T22:32:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "paulirish", "company": "Google Chrome, \u2665z"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-06-30T22:52:28Z", "contents": "@paulirish fixed! \nAlso documented: http://api.qunitjs.com/QUnit.config/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulirish", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-18T23:22:02Z", "contents": "OMG thank you so much. Has this shipped in a version?\nI want to update to this in all my projects.\nhooray!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-19T11:26:49Z", "contents": "Yeah, its in 1.9.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 278, "url": "https://github.com/qunitjs/qunit/issues/278", "title": "All qunit 1.8.0 tests fail under latest Chrome 20.0.1132.47 on Linux", "contents": "Hi\nAll our tests are failing under Chrome version 20.0.1132.47, on Linux.\nThe same tests do run fine under Chrome/19.0.1084.56 or Firefox 13.01.\nThe qunit output is : \"global failure (1, 0, 1)Rerun Script error. Source:  :0\".\nI'm not sure why, but it seems qunit is miscounting the tests it has to run, for example, I have 6 tests, but qunit says \"6 of 7 tests passed\", the 7th one - it does not exist - causing the \"global failure (1, 0, 1)Rerun Script error. Source:  :0\".  error.\nI've tried the latest git version and it seems there is the same problem.\nIs it a known bug ?\nThanks", "createdAt": "2012-07-04T14:06:35Z", "updatedAt": "2012-11-07T22:44:00Z", "closedAt": "2012-07-11T12:16:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "laurentbackelite", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "laurentbackelite", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "keyadams", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-11T12:16:55Z", "contents": "\"global failure\" is counted as an additional test, due to the window.onerror handler. That indicates you've got something going on your page that shouldn't be there. Can you verify its actually a QUnit problem, or provide a reduced testcase? Will reopen then.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keyadams", "authorAssociation": "NONE", "createdAt": "2012-11-07T22:42:37Z", "contents": "I had the same problem (but on Windows) and it turned out that some of my Chrome extensions are causing this problem - I was receiving errors in the console that didn't affect my application but were obviously causing this \"Global failure Script error. Source: 0\". So after disabling the extensions everything is fine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 279, "url": "https://github.com/qunitjs/qunit/issues/279", "title": "Could you add an error message for constructor differences?", "contents": "Could you add an error message for constructor differences?\nExample:\ntest(\"test constructors\", function(){\n    var obj = {a:1};\n    var Obj = function(){\n        this.a = 1;\n    };\n    var Foo = function(){\n        this.a = 1;\n    };\n\n    deepEqual( new Obj(), obj );\n    deepEqual( obj, new Obj() );\n    deepEqual( new Foo(), new Obj() );\n    deepEqual( new Obj(), new Foo() );\n});\n\nAll the tests fail with the same error message.\nfailed\nExpected:\n{\n  \"a\": 1\n}\n\nLive Demo:\nhttp://jsfiddle.net/bVpfU/1/\nIt would be nice if they failed like this.\n\"Constructors or prototypes are different.\"\n{\n  \"a\": 1\n}", "createdAt": "2012-07-09T01:22:42Z", "updatedAt": "2012-09-30T17:12:43Z", "closedAt": "2012-09-30T17:12:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "LarryBattle", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "LarryBattle", "company": "me"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-16T16:38:36Z", "contents": "Seems reasonable. As Scott said, \"It's just jsDump needing to show the constructor for objects.\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T17:12:43Z", "contents": "I don't know how to solve this. Even if we output the constructor, with the code being the same, it won't help figuring out why the test failed. This is all I managed to produce: http://bassistance.de/i/e49a09.png\nAdded this to jsDump's object parser:\nif ( map.constructor !== Object.prototype.constructor ) {\n    ret.push( \"constructor: \" + QUnit.jsDump.parse( map.constructor.toString() ) );\n}\nIf anyone else has an idea, I'd reopen, until then, won't fix.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 280, "url": "https://github.com/qunitjs/qunit/issues/280", "title": "Run QUnit tests on node.js", "contents": "I wrote a small wrapper for QUnit tests so they can run on node.js using nodeunit.\nPurpose here is to run the test against a js library natively on node.js, not on a headless webkit browser (phantom.js).", "createdAt": "2012-07-10T07:09:48Z", "updatedAt": "2012-07-11T11:47:48Z", "closedAt": "2012-07-11T11:47:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thanpolas", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "thanpolas", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-11T10:50:33Z", "contents": "Your last commit says \"removed dependency to nodeunit\", yet the readme and this issue still mentions it - what's up with that?\nAlso isn't that usecase covered by node-qunit already? https://github.com/kof/node-qunit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "thanpolas", "authorAssociation": "NONE", "createdAt": "2012-07-11T11:47:48Z", "contents": "I removed the dependency of nodeunit from the package.json file so it's not downloaded (again) when doing npm install qunit2node\nI was not aware of node-qunit, it was not advertised anywhere i looked, i am sure there are more solutions to this issue, i just wrote a wrapper so that qunit tests can run on nodeunit... Nothing fancy here", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 281, "url": "https://github.com/qunitjs/qunit/issues/281", "title": "run tests in multiple frames", "contents": "I need run each test in a sandbox, such as each group of tests runs in an iframe\nBenefits:\n\nThe ability to run tests in an isolated environment\nThe ability to run each test suite  independently\nMake the test suite not too large and too complex\nEasy for writing and maintaining tests by many persons\n\nSomebody already developed this feature http://skysanders.net/subtext/archive/2010/02/26/qunit-test-runner.aspx, but not compatible with the latest version of Qunit.\nHope to support it officially.\nThanks for this great project saving my life on testing!", "createdAt": "2012-07-12T10:20:59Z", "updatedAt": "2012-07-12T13:27:56Z", "closedAt": "2012-07-12T13:27:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "michalliu", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "michalliu", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-12T13:27:56Z", "contents": "This is duplicate of #173. Also there's the composite addon, which looks a lot like the thing you link to: https://github.com/jquery/qunit/tree/master/addons/composite", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 282, "url": "https://github.com/qunitjs/qunit/issues/282", "title": "Request: Fast-track npm release", "contents": "The QUnit 1.9.0 change log says this:\n\nChange package.json name property to 'qunitjs' to avoid conflicht with node-qunit; will publish next release to npm\n\nI currently use node-qunit in my XRegExp library, which will soon be ready for its 3.0.0 release. As part of this release, I would like to switch from using node-qunit to the official qunitjs. For largely selfish reasons (for myself and anyone else who might hold back project releases in order to switch to qunitjs), I'm hoping that QUnit can release the next version as soon as it's ready as an npm package (assuming this means that QUnit's qunitjs package will be usable on the command line, similar to node-qunit). Presumably, other changes related to better supporting npm and Node.js (such as #190) would also make it into the next QUnit release.", "createdAt": "2012-07-12T12:50:54Z", "updatedAt": "2012-09-30T19:55:23Z", "closedAt": "2012-09-30T19:52:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "slevithan", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "slevithan", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "jdalton", "company": "Salesforce"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 11, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-12T13:03:13Z", "contents": "1.9.0 is on npm, as the first release to land there. The changelog is based on commit messages.\nnode-qunit provides a bunch of additional features for non-browser based testing that QUnit itself likely won't ever get though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slevithan", "authorAssociation": "NONE", "createdAt": "2012-07-16T22:10:45Z", "contents": "1.9.0 is on npm, as the first release to land there. The changelog is based on commit messages.\n\nAh, cool.\n\nnode-qunit provides a bunch of additional features for non-browser based testing that QUnit itself likely won't ever get though.\n\nTo clarify, does this mean that QUnit (the official release) does not now and has no plans to support testing on the command line via npm?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-17T11:02:14Z", "contents": "No plans, yeah, but as usual, its open to contributions. node-qunit goes way beyond what I'd be willing to maintain here, but if we can come up with something simple, I'd land it. In general you can use QUnit in node: https://github.com/jquery/qunit/blob/master/test/node-test.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slevithan", "authorAssociation": "NONE", "createdAt": "2012-07-17T12:46:40Z", "contents": "Fair 'nuff. I probably won't be the one to contribute such changes, but QUnit CLI Boilerplate by @jdalton might be a good source of inspiration.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-17T16:17:58Z", "contents": "How about including something like that cli boilerplate as addon for QUnit, similar to the phantomjs addon?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slevithan", "authorAssociation": "NONE", "createdAt": "2012-07-17T17:14:56Z", "contents": "That would be most excellent. It's MIT licensed, so it should be no problem to add. Of course, it would be ideal to get buy-in from @jdalton, too. ;-) He uses QUnit CLIB with his Lo-Dash project, which also uses a number of nice extensions to QUnit's standard test runner: more readable browser names, checkbox for loading via RequireJS, and dropdown for switching between development and minified source of the library being tested.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-07-18T09:11:06Z", "contents": "I'm in ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-18T09:28:47Z", "contents": "Good! @jdalton are there features you'd like to see land upstream?\nThe QUnit.config.urlConfig might also be useful to simplify some stuff: http://api.qunitjs.com/QUnit.config/ (urlConfig and last example)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-07-20T00:56:50Z", "contents": "Also note that node-qunit is actually using the official qunit release. It adds a wapper around it for cli usage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T19:52:46Z", "contents": "Fixed in qunitjs/qunitjs.com@477af0b - I've added a link to the extensions page: http://qunitjs.com/extensions/\nThat way @jdalton can continue maintaining his extension, which I don't want to take over.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2012-09-30T19:55:22Z", "contents": "Sweet. I can dig it ;D", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 283, "url": "https://github.com/qunitjs/qunit/issues/283", "title": "QUnit should keep a local reference to Date", "contents": "From qunitjs/node-qunit@4252119:\nSince modules like node-timekeeper can modify it, node-qunit protects against this. Right now it does that by hacking the following line into qunit.js. Perhaps we should put it in the main repo here?\n    Date = window.Date;", "createdAt": "2012-07-16T23:29:20Z", "updatedAt": "2014-03-19T17:24:36Z", "closedAt": "2012-07-18T21:01:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-17T10:59:12Z", "contents": "First time I hear of that issue, but I don't see a problem with patching that. PR?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 284, "url": "https://github.com/qunitjs/qunit/issues/284", "title": "deepEqual for RegExp should compare `sticky`", "contents": "The current implementation of deepEqual for RegExp objects is good. Specifically, it's great that it doesn't compare lastIndex properties. However, the current implementation ignores the /y flag and its corresponding sticky property, which should be added to the list of comparisons.\nAside: ES6 will add support for two new RegExp flags: /y and /u. The /y flag is already supported in Firefox 3+, and has the corresponding property RegExp.prototype.sticky. The /u flag will likely show up with the property name unicode, but since that's not in writing anywhere, at the moment, it would probably be best to wait until the first implementations for /u show up before comparing unicode properties.", "createdAt": "2012-07-17T13:44:25Z", "updatedAt": "2012-08-17T11:46:01Z", "closedAt": "2012-08-17T11:46:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "slevithan", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "slevithan", "company": null}, {"login": "prathe", "company": null}, {"login": "vivin", "company": "Cyr3con"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-17T16:46:58Z", "contents": "Thanks for bringing this Steven. I will look to add support for the sticky flag.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-08T23:10:30Z", "contents": "I have a fix for this, but grunt won't run the tests because \"y\" is still an invalid flag and hasn't been implemented (I'm assuming in PhantomJS). Is there a way to test it? With just the change, the tests all pass, but that's because none of the RegExp tests are trying to build a regular expression with the sticky flag.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 286, "url": "https://github.com/qunitjs/qunit/issues/286", "title": "qunit makes yuicompressor choke (yui treats 'throws' as a reserved keyword)", "contents": "The qunit API defines a function throws (http://api.qunitjs.com/throws/), but throws is a reserved keyword in JavaScript (http://bclary.com/2004/11/07/#a-7.5.3). One side effect is that qunit cannot be passed through yuicompressor:\n> java -jar .../yuicompressor-2.4.6.jar .../qunit/qunit-1.9.0.js \n\n[ERROR] 490:8:invalid property id\n\n[ERROR] 490:9:syntax error\n\n[ERROR] 528:1:missing ) in parenthetical\n\n[ERROR] 540:35:missing name after . operator\n\n[ERROR] 1932:1:syntax error\n\n[ERROR] 1932:29:syntax error\n\n[ERROR] 1:0:Compilation produced 6 syntax errors.\norg.mozilla.javascript.EvaluatorException: Compilation produced 6 syntax errors.\n    at com.yahoo.platform.yui.compressor.YUICompressor$1.runtimeError(YUICompressor.java:154)\n    at org.mozilla.javascript.Parser.parse(Parser.java:392)\n    at org.mozilla.javascript.Parser.parse(Parser.java:337)\n    at com.yahoo.platform.yui.compressor.JavaScriptCompressor.parse(JavaScriptCompressor.java:312)\n    at com.yahoo.platform.yui.compressor.JavaScriptCompressor.<init>(JavaScriptCompressor.java:533)\n    at com.yahoo.platform.yui.compressor.YUICompressor.main(YUICompressor.java:131)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at com.yahoo.platform.yui.compressor.Bootstrap.main(Bootstrap.java:21)", "createdAt": "2012-07-18T21:25:31Z", "updatedAt": "2012-07-18T21:57:14Z", "closedAt": "2012-07-18T21:57:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cberzan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cberzan", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "cberzan", "authorAssociation": "NONE", "createdAt": "2012-07-18T21:38:10Z", "contents": "Just found this #267. I guess you made the decision to use throws because it is no longer a reserved keyword in the latest ECMAScript. I updated the relevant bug report in YUICompressor (http://yuilibrary.com/projects/yuicompressor/ticket/2528028) instead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-07-18T21:57:14Z", "contents": "Okay, here's hoping yuicompressor will fix this upstream.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 288, "url": "https://github.com/qunitjs/qunit/issues/288", "title": "Global failures can be filtered out by test-limiting URL parameters", "contents": "window.onerror calls QUnit.test to display context-free global errors. QUnit.test no-ops unless the new test passes validTest, which checks against URL parameters like module and testNumber.\nThis structure can result in global errors being hidden when specific modules or tests were requested, which is rare but possible. Global errors should always be considered valid for display.", "createdAt": "2012-07-20T20:38:30Z", "updatedAt": "2012-08-17T11:40:03Z", "closedAt": "2012-08-17T11:40:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 291, "url": "https://github.com/qunitjs/qunit/issues/291", "title": "Repeatedly test Async assertions until they pass or the time runs out", "contents": "If you have lots of async tests in your application, running your unit tests can be slow. A big reason for this is that the delay on your async tests needs to be larger than the longest reasonable amount of time it could take for the response to arrive.\nFor example, If I load a list of customers and test that they show up, I need to write an async test that requests the customers, waits five seconds, and then tests to see if they're there. If I tested at 2 seconds, my test might fail 20% of the time.\nBetter would be a plugin or new qunit method that allows for \"keep trying until it passes or the time runs out\" functionality.\nI've taken a stab at this and it works for me so far. I don't think I'll make the time to do an official pull request, but if someone wants to take this the next step, that'd be great. Here's what I have:\nMy 'plugin':\n/*global $, define, qunit, ok, log, setTimeout, stop, start */\n\ndefine([\n    ]\n,   function () {\n\n    var me = 'qunit.okTimeframe'\n    ,   okTimeframe\n    ,   isTimeUp\n    ,   tryAssertion;\n\n    isTimeUp = function(startTime, limit){\n        return (new Date() - startTime) > limit;\n    }\n    tryAssertion = function(a, msg, startTime, limit, tryFreq, curTry){\n\n        if ( a() || isTimeUp(startTime, limit) ) {\n            log.debug(me + ' the \"'+ msg +'\" assertion looks good or the time is up');\n            ok(a(), msg); // Tell qunit about the outcome\n            start();\n        // Try again later\n        } else {\n            log.info(me + ' trying the assertion later');\n            setTimeout(function(){\n                tryAssertion(a, msg, startTime, limit, tryFreq, curTry)\n            }, tryFreq * ++curTry);\n        }\n    }\n\n\n    /**\n     * Takes an assertion, message, and optional timeframe and repeatedly tests the assertion until it either passes, or the time runs out\n     */\n    okTimeframe = function (assertionFunction, message, timeframe) {\n        if (!ok || !stop || !start) {\n            log.error(me + ' depends on qUnit\\'s methods to function');\n            return;\n        }\n\n        var timeLimit = timeframe || 10000 // 10 second default\n        ,   tryFreq = 500 // How often to test the assertion\n        ,   curTry = 0 // Which try are we on?\n        ,   startTime = new Date()\n        ;\n\n        stop();\n        tryAssertion(assertionFunction, message, startTime, timeLimit, tryFreq, curTry);\n    }\n    return okTimeframe;\n});\nThe tests for my plugin:\n/*global $, define, test, module, ok, equal, window, setTimeout */\n\ndefine([\n    './qunit.okTimeframe'\n    ]\n,   function (okTimeframe) {\n\n    var me = 'qunit.okTimeframe'\n    ,   $fixture = $('#qunit-fixture')\n    ,   testString = 'pickled peppers'\n    ;\n\n    module(me);\n    test('Module defined and can check ', function(){\n        ok(okTimeframe, 'The method is defined');\n        equal(\"function\", typeof(okTimeframe), \"It's a function\");\n        okTimeframe(function() { return 3 === 3 } , \"Passes when sent '3 === 3'\")\n    });\n\n    test('Can handle dom content that changes later', function(){\n        okTimeframe(\n            function() { return $fixture.text().contains(testString) }\n        ,   \"$fixture contains specific content after some time passes\"\n        );\n        setTimeout(function(){\n            $fixture.append(testString);\n        },  1000 );\n    });\n\n    test('Can handle local variables that change later', function(){\n        var a = 3\n        ,   b = 1\n        ;\n        okTimeframe(\n            function() { return a === b }\n        ,   \"a === b after a delay\"\n        );\n        setTimeout(function(){\n            b = 3;\n        }, 1000 );\n    });\n});", "createdAt": "2012-07-23T21:37:35Z", "updatedAt": "2012-08-16T16:37:01Z", "closedAt": "2012-08-16T16:37:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SimplGy", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "SimplGy", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "jonnyreeves", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-02T16:15:01Z", "contents": "While is sometimes no way around timeouts, encouraging them with extra features seems like very much the wrong approach. You should look into changing your code to provide callbacks or custom events instead, something that your async test can hook into. That way you never have to wait any longer than necessary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SimplGy", "authorAssociation": "NONE", "createdAt": "2012-08-02T19:06:57Z", "contents": "Because we as front end developers have the chance to write beautiful, living, animated, asynchronously loaded user interfaces, the question of timing and sequence comes up... a lot.\nLightboxes animate on and off screen, rows slide in to place, list items get deleted and poof away. When done nicely most of this happens with css transitions and callbacks or events are either not an option or faked in a setTimeout. And why would I want to add these only for a unit test hook?\nNo, I think the right answer is to let my test framework handle the dirty test polling code and let me simply write the assertion \"Hey, did that row get deleted yet?\".\nThe feature I want other folks excited about would abstract away all the dirt of the setTimeout; In a way, discouraging their direct use. So that's what I've written.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonnyreeves", "authorAssociation": "NONE", "createdAt": "2012-08-03T06:27:17Z", "contents": "Personally, I believe this style of assertion okTimeout (a better name might be eventuallyOk and eventuallyEqual) blur the line between Unit Testing and Integration Testing.  As @jzaefferer points out, the aim of Unit Tests is to remove all non-deterministic behaviour from the code under test.  If QUnit wants to focus on being a Unit Test suite then it should channel users down that route.\nHowever, I can see the benefit of such async assertion methods (primarily in the shape of easier to read test-cases); perhaps these could be developed as a separate plugin for QUnit which the user can optionally load?  It could be implemented in a similar fashion to ScalaUnit's Eventually helpers.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 294, "url": "https://github.com/qunitjs/qunit/issues/294", "title": "You will need to install grunt-git-authors to run grunt", "contents": "I'll have a commit soonish that will clarify that.", "createdAt": "2012-08-08T18:18:52Z", "updatedAt": "2012-08-29T16:13:44Z", "closedAt": "2012-08-29T16:13:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dotnetCarpenter", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dotnetCarpenter", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-16T16:27:36Z", "contents": "Actually run npm install, should get that into the readme, not specific modules.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 296, "url": "https://github.com/qunitjs/qunit/issues/296", "title": "Add module and test-name information to callbacks", "contents": "I think it would be useful to add the module and test-name information to callbacks.:\n\nQUnit.log currently only reports the following information actual, expected, message, result, and source. I think it would be useful to add module and testName to this.\nQUnit.moduleDone and QUnit.moduleStart don't report any information regarding the actual module that has started or finished. I think it would be useful to pass that information to the callback.\nQUnit.testDone and QUnit.testStart don't report any information regarding the actual test that has started or stopped. I think it would be useful to pass that information to the callback.\n\nI apologize if this change has already been made, or if this information can be retrieved some other way.", "createdAt": "2012-08-09T00:03:00Z", "updatedAt": "2012-08-17T12:11:16Z", "closedAt": "2012-08-17T12:11:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "vivin", "company": "Cyr3con"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 301, "url": "https://github.com/qunitjs/qunit/issues/301", "title": "Links to project website need updated", "contents": "The links in the readme and repository description still point to the depreciated page hosted on jquery.com", "createdAt": "2012-08-10T02:42:46Z", "updatedAt": "2012-08-12T17:14:37Z", "closedAt": "2012-08-12T17:14:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "admsteck", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "admsteck", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-12T17:14:37Z", "contents": "Thanks, updated both.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 303, "url": "https://github.com/qunitjs/qunit/issues/303", "title": "undocumented api", "contents": "notDeepEqual\nnotEqual\nnotStrictEqual\n\nare provided by qunit, but not listed in the api documentation. I didn't search for other undocumented features.\nedit: they are listed in the old docs.", "createdAt": "2012-08-12T04:58:46Z", "updatedAt": "2012-08-12T16:39:44Z", "closedAt": "2012-08-12T16:39:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aeosynth", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aeosynth", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "aeosynth", "authorAssociation": "NONE", "createdAt": "2012-08-12T07:07:19Z", "contents": "module page doesn't mention setup / teardown functionality described in the cookbook\nedit: the module page lists the lifecycle: PlainObject parameter, but does not reference it. The first parameter is referenced / described.\nQUnit.moduleStart does not have an example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-12T16:39:44Z", "contents": "Missing notXXX methods are tracked here: qunitjs/api#7\nCreated a new issue for module's argument: qunitjs/api#8\nAnd one for moduleStart: qunitjs/api#9", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 304, "url": "https://github.com/qunitjs/qunit/issues/304", "title": "$( window ).scrollTop( 0 ); at the end of the tests.", "contents": "I did a fast look and didn't found anything regarding this. When I am testing my projects qunit does not scroll to the top but remains with the scroll following the last test.\nMy suggestion is to scroll the window to the top after all tests have been completed and perhaps scroll to the next failed if there is any.", "createdAt": "2012-08-13T20:16:21Z", "updatedAt": "2012-08-17T12:21:12Z", "closedAt": "2012-08-17T12:21:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-16T16:29:14Z", "contents": "Needs a jQuery-free implementation. Also need to check if there's cases where the browser restores the scroll position on page load, which we shouldn't override.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 307, "url": "https://github.com/qunitjs/qunit/issues/307", "title": "Distinguishing between failed assertions", "contents": "I previously submitted a commit where the log callback also provided information about the assertion that failed. Perhaps the way I went about implementing wasn't the best and could warrant more discussion. My rationale was as follows:\n\nThe assertion-type provides information about the type of assertion that was violated. This is pretty useful when doing automated tests with PhantomJS and QUnit.\nCurrently the throws assertion has an expected value of null. This is because the expected value can be a regular expression. When reporting the results of tests, we can tell whether the test failed or not by examining the result property from log. However, the decision to show expected and actual values (which don't apply in the case of throws when using a regular expression) cannot be safely made by simply examining the expected value and checking if it is null. There can be cases where null is an actual expected-value. Instead, it would be safer and more obvious if information was provided about the actual assertion that failed, and then decide whether to show the expected and actual values.\nThis problem also exists in the current QUnit reporting When a throws assertion that expects an exception fails (and it uses a regular expression), the expected value is shown as null, which is not correct. In this case, if we had information about the type of assertion that failed, we could examine that and decide to not show the expected and actual values if the assertion was a throws assertion.\n\nPerhaps we don't need something like an AssertionType public property for QUnit. We could simply provide the name of the test method that failed and that should be sufficient. The reason I originally used an AssertionType public property was so that it would be easily maintainable; we could deprecate the name of a test method and not have to go through and search for all usages of that name; we could simply simply change the method name for AssertionType. Since we are using that and not raw strings, the change would be effected everywhere. Perhaps this property can be an internal/private property to QUnit.\nJ\u00f6rn suggested a workaround where you could simply add that information to the message returned by throws. While it works, I think the solution is slightly ad-hoc and not as robust as an actual property that provides information about the assertion that failed.\nThoughts?", "createdAt": "2012-08-16T17:43:04Z", "updatedAt": "2012-10-11T00:29:15Z", "closedAt": "2012-09-30T20:07:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "vivin", "company": "Cyr3con"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 9, "comments_data": [{"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-16T21:01:25Z", "contents": "I've got three branches that detail three approaches. Approach #1 (99ea1be) simply uses raw strings; this is probably the easiest to make and doesn't really create anything additional. Approaches #2 (ee233a7) and #3 (0508b89) are similar to my original commit, expect that #2 doesn't expose the AssertionType object. I'm leaning towards #1 myself since we already hardcode the names of the methods in a few places. #2 and #3 would introduce inconsistencies. Comments are appreciated! I honestly feel that adding the assertion that failed, to the information returned by the log callback, would be useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-26T22:10:24Z", "contents": "No feedback? :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T20:09:05Z", "contents": "I still don't want to add assertion types, but based on the description here I found a problem worth addressing directly. throws will now provide useful output for its expected value, in the regexp and constructor case, otherwise it'll still output null. If your actual value is an instance of the built-in Error object, it'll output that as something useful as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-05T15:59:59Z", "contents": "May I ask why you are reluctant to add assertion types? :) I can't see a downside to it although I may be missing something. I know that unit-testing frameworks in Java like TestNG report the failed assertion-type so I do think that it's useful and I don't really see any harm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-07T22:56:01Z", "contents": "The harm is in the additional complexity that any code additions brings with it, both in the code itself and in documentation. I'm not generally against additions, but being skeptic helps to keep things sane. Your original description has \"pretty useful\" as the only remaining argument, as the throws issues were addressed (right?). I'm looking for a valid usecase, both to convince me of the additions value and to document it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-10T17:38:10Z", "contents": "I completely understand your skepticism as far as adding code and complexity. The complexity in this regard is rather low, I believe (just the addition of a single property to the failure).\nThe throws issue seems to be addressed for the most part. I should have elaborated on the \"pretty useful\" part: at work I've integrated QUnit with TestNG so as to have CI for Javascript. We'd like to keep track of the type of the different assertions that fail (similar to what we do for TestNG); this gives us some insight as to the most common types of failures that our code encounters. Currently I'm doing this by patching qunit.js so that the failures report the kind of assertion that failed as well.\nI understand if this is not enough to convince you - I can make do by patching it to include that information on failure :). I just think that including the type of assertion that failed can be pretty useful for people who wish to keep track of the kinds of assertions that fail (for metrics/statistics), it also seems like an obvious piece of information to have IMHO.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-10T18:11:32Z", "contents": "@vivin Just out of curiosity, how is the type of assertion (as opposed to the name/description of the assertion) relevant?\nDoes it statistically matter whether something does !!foo === true, foo instanceof Bar or foo === bar? Also, plugins can extend the assert object:\nQUnit.assert.lt = function (actual, expected, message) {\n    QUnit.push( actual < expected, .. );\n};", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-10T22:28:46Z", "contents": "@Krinkle It's just something that we keep track of. For example, to see the types of failures that occur after a specific change. May not be very statistically significant.\nGood point about the plugins. I didn't know about those. I can see how they would have to modify their code to pass back the name of the assertion.\nLike I said, this is not a deal-breaker. It was just something I thought would be useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-11T00:28:13Z", "contents": "@vivin I'm just trying to understand why anyone would want to know what method the assertion used to get its result.\nIt isn't significant for anything. Is there some odd priority that you assign internally to failures from assertTrue vs. assertEquals? Both can be a major problem, what does it matter?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 308, "url": "https://github.com/qunitjs/qunit/issues/308", "title": "Running manual tests with grunt?", "contents": "Not very familiar with node.js or grunt, but how feasible is it to run the manual tests as part of grunt? Would some solution that uses PhantomJS (perhaps) to run the QUnit tests in ./tests be feasible? I don't mind trying to get this accomplished.", "createdAt": "2012-08-16T22:48:42Z", "updatedAt": "2012-08-17T13:06:28Z", "closedAt": "2012-08-16T22:51:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "vivin", "company": "Cyr3con"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-17T10:16:39Z", "contents": "I guess you found grunt's qunit task?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-17T13:06:28Z", "contents": "That I did :-)\nOn Aug 17, 2012 3:16 AM, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n\nI guess you found grunt's qunit task?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/308#issuecomment-7814474.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 309, "url": "https://github.com/qunitjs/qunit/issues/309", "title": "QUnit.config.autostart = false and using QUnit.start() inside of $(document).ready()", "contents": "If you set QUnit.config.autostart = false and run QUnit.start() inside of jQuery's $(document).ready() the tests fire before QUnit.load() is fired.\nHere's the fiddle (http://jsfiddle.net/rPGZ2/6/) and the snippet if code:\nQUnit.config.autostart = false;\n\ntest(\"No semaphore on sync test.\", function() {\n    ok(!isNaN(QUnit.config.semaphore), \"The semaphore should not be NaN\");\n\n    $('#qunit-log').text('Semaphore: ' + QUnit.config.semaphore);        \n});\n\nasyncTest(\"No semaphore on async test.\", function() {\n    setTimeout(function() {\n        ok(!isNaN(QUnit.config.semaphore), \"The semaphore should not be NaN\");\n        stop(10000);\n        start();\n    }, 13);\n    setTimeout(function() {\n        ok(true, \"This should be in context, but it's not\");\n        start(10000);\n    }, 1000);\n});\n\n$(document).ready(function() {\n    /* QUnit's load event is also attached to the window load event.\n       However jQuery's ready event is fired before QUnit's load event,         therefore this start() function is called before QUnit's load\n       event fires. The semaphore variable is declared in the load event.\n    */\n    start();\n});", "createdAt": "2012-08-23T15:58:42Z", "updatedAt": "2012-09-30T20:14:10Z", "closedAt": "2012-09-30T20:14:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DragonDTG", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DragonDTG", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-23T16:03:54Z", "contents": "Should be fine to move that particular initialization into an earlier stage.\nApart from that, what's the reason for using document-ready here?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DragonDTG", "authorAssociation": "NONE", "createdAt": "2012-08-23T18:51:37Z", "contents": "I used it to simulate running start() after some async event. I have an AMD loader that loads in the unit tests and only want to run after they are all loaded.\nI believe there's still an issue even without the $(document).ready(): http://jsfiddle.net/rPGZ2/7/ .", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-29T15:00:34Z", "contents": "If you use AMD, you can require your tests, then call QUnit.start() once they're loaded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-29T15:27:25Z", "contents": "Also you can call QUnit.init() to initialize the semaphore variable any time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DragonDTG", "authorAssociation": "NONE", "createdAt": "2012-08-29T15:55:18Z", "contents": "I did put QUnit.init() and QUnit.start() in the require() callback and no tests run, I believe all of the tests are pushed into QUnit.config.queue before the callback, however calling QUnit.init() clears the queue, therefore no tests are run.\nHere's a modified fiddle using the init function (It's not in a callback, but it has the same issue): http://jsfiddle.net/rPGZ2/8/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DragonDTG", "authorAssociation": "NONE", "createdAt": "2012-08-29T15:56:32Z", "contents": "My work around for now is adding QUnit.config.semaphore = 0; before QUnit.start().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-29T16:06:31Z", "contents": "Thanks for the testing. Need to dig into that again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T20:14:09Z", "contents": "The autostart property is now documented: http://api.qunitjs.com/QUnit.config/\nApart from that: I can't reproduce the issue, based on the examples you provided so far. If the issue still persist for you, please provide some more information. The last jsfiddle you provided doesn't really reproduce the AMD case, and as you pointed out, calling QUnit.init() is wrong.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 312, "url": "https://github.com/qunitjs/qunit/issues/312", "title": "Would there be any interest in transferring/forking qunit-mock to jquery?", "contents": "Hi,\nWe have a repo that is no longer actively maintained for qunit-mock, which seems to have a few users.\nAs we don't actively maintain it, would there be interest for jquery to fork it, and we can point people to the community repo under jquery?\nCheers,\nMatt", "createdAt": "2012-08-28T14:23:23Z", "updatedAt": "2012-08-29T16:01:35Z", "closedAt": "2012-08-29T16:01:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "matthewford", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "matthewford", "company": "Bit Zesty"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-29T15:23:16Z", "contents": "Are you referring to this one? https://github.com/bitzesty/qunit-mock\nThere was never much interest in mocking here, so I'm not very inclined to take over maintenance (along with not being inclined to writing coffescript). Forking it on the jquery orgainzation doesn't really make sense unless we plan to actually maintain it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthewford", "authorAssociation": "NONE", "createdAt": "2012-08-29T15:45:16Z", "contents": "That's the one, in that case i've just stumbled across http://sinonjs.org/ will point people in that direction", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-08-29T16:01:35Z", "contents": "Okay, that works.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 313, "url": "https://github.com/qunitjs/qunit/issues/313", "title": "The release 1.9.0 available from the website runs only the first test.", "contents": "If there are two tests defined as\ntest(\"a\", ...);\ntest(\"b\". ...);\nonly 'a' will run.", "createdAt": "2012-09-03T07:42:44Z", "updatedAt": "2012-09-03T07:55:42Z", "closedAt": "2012-09-03T07:55:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lokebharti", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "lokebharti", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "lokebharti", "authorAssociation": "NONE", "createdAt": "2012-09-03T07:55:42Z", "contents": "Sorry, false alarm!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 314, "url": "https://github.com/qunitjs/qunit/issues/314", "title": "QUnit should be semaphore-clean, config.semaphore < 0 should be an assertion error", "contents": "Currently, QUnit will more than once call start while the semaphore is already 0, entering a config.semaphore < 0 branch which resets it to 0.\nThe issue here is that this may (and does) potentially hide test failures especially in complex async cases, where the next case may partially make up for the current one and the like, ending up with a test failure for a completely unrelated piece of code.\nI just finally fixed an issue of intermittent failure of a test case, where a number of tests were not obviously incorrect but randomly failed within the suite.\nThe problem turned out to be in the previous test file (the tests are split by module across multiple JS files, all run through the same html file) in which a test which should have been asynchronous (and correctly tried to call start) didn't stop the runner (via asyncTest, the async argument to test or stop). While trying to understand what failed where (the first symptoms that there was something screwy in the async running was that a test started before an other one ended), I realized that although QUnit has a flag to ensure every call to stop is matched to a call to start, it also ignores start-ing an already started runner. For the case above, had QUnit generated some sort of error I'd have realized sooner that I had mismatched stop/start calls.\nNow I'm not putting the fault of qunit, it was quite clearly my own oversight, but I do believe there would be value in ensuring a coherent usage of the semaphore.", "createdAt": "2012-09-05T15:17:46Z", "updatedAt": "2013-05-15T16:25:09Z", "closedAt": "2012-09-30T20:39:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "masklinn", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "masklinn", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-05T15:25:00Z", "contents": "So whenever a start() call happens while the semaphore is already 0, it should throw an error?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "masklinn", "authorAssociation": "NONE", "createdAt": "2012-09-05T16:00:32Z", "contents": "I believe so, or \u2014 better \u2014 log a false assertion of some sort. Note that this doesn't currently work as qunit takes advantage of the current behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T20:40:10Z", "contents": "I've implemented that, with a little workaround to allow QUnit.load() to call QUnit.start() anyway. Sanity-checked against jQuery UI, which has plenty async tests. No issues there.\n//cc @dmethvin @scottgonzalez looks okay?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-30T23:53:37Z", "contents": "This seems fine, but what happens when autostart is false? Shouldn't the semaphore always start at 1?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-01T10:29:41Z", "contents": "Thanks Scott, addressed that in 65ade40", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 315, "url": "https://github.com/qunitjs/qunit/issues/315", "title": "deepEqual should not crash on jQuery created objects", "contents": "In Firefox 15 stable release (and also in the Nightly 18 version) I get a fail message on deepEqual assertions trying to compare jQuery objects like deepEqual( $( '<h3/>' ), $( '<h3/>' ) );\nThe fail message is: Died on test #1 @http://jsbin.com/oqiquw/1/edit:16 : toString.call(...).match(...) is null The error source:.objectType@http://code.jquery.com/qunit/qunit-git.js:760`\nThat works on Chrome (canary), Safari and Opera (next).\nIt can be a Firefox specific error. If it isn't know yet I can try a code fix and patch it.\nExample:\nhttp://jsbin.com/oqiquw/1/edit\n\nUpdating:\n\nIt works on Firefox 12.\nIt's not working on FF 14 and above\nIt doesn\u00b4t work on Safari 5.1.7, but it works on the new version of Safari\nIt doens\u00b4t work on Internet Explorer 9 (neither 7 and 8 via IE9 devTools)\nIt doesn\u00b4t work on iPhone\u00b4s Safari Browser (newest stable release)", "createdAt": "2012-09-07T17:15:25Z", "updatedAt": "2012-10-01T10:14:25Z", "closedAt": "2012-10-01T10:13:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-13T11:18:04Z", "contents": "Generally I recommend not to compare jQuery objects directly, instead looking at their underlying DOM objects. If there's just one element select: $(\"h3\")[0], otherwise you could use the .get() method to retrieve an array of DOM elements.\nWill look into handling jQuery objects properly though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2012-09-13T12:38:40Z", "contents": "I know that's not a good pratice but that may lead to an error in\n.deepEqual maybe in other kind of objects.\nI'm going to try other examples to find out what's really the problem.\n2012/9/13 J\u00f6rn Zaefferer notifications@github.com\n\nGenerally I recommend not to compare jQuery objects directly, instead\nlooking at their underlying DOM objects. If there's just one element\nselect: $(\"h3\")[0], otherwise you could use the .get() method to retrieve\nan array of DOM elements.\nWill look into handling jQuery objects properly though.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/315#issuecomment-8525114.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-01T10:14:25Z", "contents": "Fixed the Firefox issue, where it died inside the objectType method. Still can't recommend comparing jQuery objects, as the diff output is pretty ugly when they're not equal.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 316, "url": "https://github.com/qunitjs/qunit/issues/316", "title": "QUnit + Require : stats fail with undefined", "contents": "Running a simple test using QUnit + Require causes the following exception.  All the tests run and the results page updates, except the following exception gets thrown.\nEXCEPTION:\nUncaught TypeError: Cannot read property 'all' of undefined qunit-git.js:1102\ndone qunit-git.js:1102\nprocess qunit-git.js:1285\nQUnit.start.config.blocking qunit-git.js:38\nCAUSED BY:\n<!DOCTYPE html>  \n<html>  \n<head>  \n  <meta charset=\"utf-8\">\n    <title>QUnit Test Suite</title>  \n     <link rel=\"stylesheet\" href=\"qunit-git.css\">  \n     <script data-main=\"main\" type=\"text/javascript\" src=\"libs/require.js\"></script> \n     <script src=\"libs/qunit-git.js\"></script>  \n  <script>\n    QUnit.config.autostart = false;\n    //QUnit.config.stats = {};\n    require(['firstUse/example_test'], function (one) {\n        QUnit.start();\n    });\n    </script>\n\n</head>  \n<body>  \n <div id=\"qunit\"></div>\n\n</body>  \n</html>", "createdAt": "2012-09-14T19:24:59Z", "updatedAt": "2012-09-14T19:49:06Z", "closedAt": "2012-09-14T19:49:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "franklinwise", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "franklinwise", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "franklinwise", "authorAssociation": "NONE", "createdAt": "2012-09-14T19:49:06Z", "contents": "I found a solution.  It came from this jasmin @ requirejs project: https://github.com/podefr/jasmine-reqjs-jstd\nThe key is starting QUnit on a timer.  I assume this is because the single thread execution needs to finish the page load before runnint QUnit.\n<!DOCTYPE html>  \n<html>  \n<head>  \n  <meta charset=\"utf-8\">\n    <title>QUnit Test Suite</title>  \n     <link rel=\"stylesheet\" href=\"qunit-git.css\">  \n     <script data-main=\"main\" type=\"text/javascript\" src=\"libs/require.js\"></script> \n         <script src=\"libs/qunit-git.js\"></script>  \n  <script type=\"text/javascript\">\n    window.addEventListener(\"load\", function onLoad() {\n        QUnit.config.autostart = false;\n        setTimeout(function () {\n            require(['firstUse/example_test'], function (one) {\n                //one and two loaded some tests.\n                //now trigger them.\n                QUnit.start();\n            });\n            // Without this setTimeout, the specs don't always get execute in webKit browsers, I don't know why\n        }, 10);\n        window.removeEventListener(\"load\", onLoad, true);\n    }, true);\n  </script>\n\n</head>  \n<body>  \n <div id=\"qunit\"></div>\n\n</body>  \n</html>", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 317, "url": "https://github.com/qunitjs/qunit/issues/317", "title": "Assertion helper for same properties but (strictly) different constructors", "contents": "There was already an issue targeting the same problem for arrays: #129\nFor arrays, this seems to be fixed (although there was no explicit fix mentioned in the issue) but the issue also applies for plain objects. This makes it complicated to move the test markup into an iframe for sandboxing.\nI think one part of the \"problem\" is that deepEqual() suggests that only the properties of the objects are compared but in fact it also compares the functions (and they have to be identical).\nIt should really be document in the API documentation of deepEqual that the functions are compared because this can lead to very subtle failures. Consider this example:\nfunction factory() {\n    function F() { this.test = \"foo\"; }\n    return new F();\n}\n\ndeepEqual(factory(), factory(), \"Similar objects fail!?!\")\nI would suggest to have two functions: keep deepEqual() as it is (just extend the documentation, see above) and add another function (something like deepPropertiesEqual()) which compares only the properties (array entries).", "createdAt": "2012-09-18T08:48:03Z", "updatedAt": "2016-11-01T16:28:57Z", "closedAt": "2012-11-15T09:45:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "j-ulrich", "authorAssociation": "CONTRIBUTOR", "participants_count": 6, "participants_data": [{"login": "j-ulrich", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "dmethvin", "company": "Independent Consultant"}, {"login": "prathe", "company": null}], "comments_count": 15, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-25T09:29:02Z", "contents": "Those two objects have different constructors, that's why they're not considered equal. I'd like to just close this as a duplicate of #279 - would that address your issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "j-ulrich", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-25T10:42:52Z", "contents": "Those two objects have different constructors, that's why they're not considered equal.\n\nExactly. But wouldn't it be reasonable to have an assertion which explicitly ignores this fact? Just to be clear: this is rather a feature request than a defect.\nOk, maybe I should describe the concrete problem that I am facing at the moment:\nI am testing an application which uses jQuery Mobile. jQuery Mobile performs a lot of auto-initialization/auto-expansion (changing fonts, forming \"divs\" into \"pages\" etc.) and I don't want that auto-initialization to take place on my test suite markup. Therefore, I put that application into an iframe for the tests (sandboxing). Now I got the problem that when I compare (using deepEqual()) an object from the iframe with an object I created in the test code, the test always fails because the constructors are not equal:\ntest(\"check that object is correct\", function() {\n    var objectFromIFrame = window.frames[0].myObject,\n        expectedObject = {\n            foo: \"bar\",\n            coordinates: {\n                x: 17,\n                y: -6\n            }\n        };\n    deepEqual(objectFromIFrame, expectedObject); /* will ALWAYS fail, no matter how objectFromIFrame looks like */\n});\nHowever, I don't mind the constructors being different. I just want the object properties to be compared (recursively). Currently, QUnit does not provide an assertion which allows this kind of comparison.\nI mean, I could write a helper method which iterates recursively over the properties of the objects (using hasOwnProperty()) and call strictEqual() for each property but this has several drawbacks:\n\nBasically, it would be duplicating the functionality of deepEqual() with a slight variation. Since deepEqual()/equiv() is rather complicated (imho), I don't really want to duplicate/rewrite it.\nIt creates an assertion entry in the test output for every property of every object being compared.\nI'd say that this is a very basic assertion for the case of sandbox testing, i.e. it is required in every test suite using sandboxing, and therefore, it should be part of the default assertions (well, maybe an extension would also suffice).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-01T10:23:14Z", "contents": "#279 is related to this - that was about the output of constructor differences.\n@prathe any ideas how to handle these issues?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-01T20:39:00Z", "contents": "I must say, when I first started using QUnit I always thought deepEqual would only look at (own) properties, not the constructor or prototype chain. So that one could e.g. do stuff like this:\nvar x = new X(123, 456);\nx.doQuuxification();\n\nassert.equal(x, {\n    a: 123,\n    b: 456,\n    quuxified: true\n}, 'Basic properties');\nIts hard to show a good example for this as in general one shouldn't worry about properties like this, but hopefully it gets the point across.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-03T10:27:16Z", "contents": "We should consider removing the constructor check from deepEquals. Would lead to a few cases of tests passing that were supposed to fail, though it wouldn't break any existing passing tests, I think.\n@prathe @scottgonzalez @dmethvin any thoughts here?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-03T11:57:47Z", "contents": "This seems fine to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmethvin", "authorAssociation": "NONE", "createdAt": "2012-10-03T13:06:52Z", "contents": "Sounds good to me as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prathe", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-08T16:56:06Z", "contents": "We should consider removing the constructor check from deepEquals. Would lead to a few cases of tests passing that were supposed to fail.\n\nThat is why we cannot change the current behavior of deepEqual. It would be more acceptable to deprecate the assertion name deepEqual and use two new assertions instead.\ndeepEqual philosophy is to go the farther it can to detect non equality and that of course includes the constructor check. If new popular EcmaScript implementations allow for more accuracy, than deepEqual may honor it.\nIf someone is playing with constructors but is rather interested in JSON, then it is his job to produce the values he wants to provide deepEqual with.\nTaking back @j-ulrich examples someone would need to do the following\nfunction factory() {\n    function F() { this.test = \"foo\"; }\n    return new F();\n}\n\n a = JSON.parse(JSON.stringify(factory()));\n b = JSON.parse(JSON.stringify(factory()));\n\ndeepEqual(a, b);\n\nI don't think we should create a new assertion to skip constructor check. Because that would justify another assertion for another kind of behavior and then we would rather confuse a user having multiple kind of deepEquals. In this case I think it would be better to constrain the input then constraining and complexify deepEqual with multiple behaviors. Instead we could provide helpers and the first one could be the one that \"jsonify\" objects.\nI agree that documentation about the behavior with regex, function and object is missing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-09T00:01:51Z", "contents": "If new popular EcmaScript implementations allow for more accuracy\nExactly how are ECMAScript implementations relevant here?\n a = JSON.parse(JSON.stringify(factory()));\n b = JSON.parse(JSON.stringify(factory()));\n\n[..] provide helpers and the first one could be the one that \"jsonify\" objects.\nInstead of going through (recursive) stringification to JSON and then parsing it again, I think there are more sane methods of comparing objects by their (own) key/value properties. Surely there is no need to JSON-ify anything, that's absurd.\nSomething like this:\n/* testrunner.js */\n\n// Like Object.keys, but for values.\nfunction values(obj) {\n    var key, val, vals = QUnit.is('array', obj) ? [] : {}, hasOwn = vals.hasOwnProperty;\n    for (key in obj) {\n        if (hasOwn.call(obj, key)) {\n            val = obj[key];\n            vals[key] = val === Object(val) ? values(val) : val;\n        }\n    }\n    return vals;\n};\nQUnit.assert.propEqual = function (actual, expected, message) {\n    actual = values(actual);\n    expected = values(expected);\n    QUnit.push( QUnit.equiv(actual, expected), actual, expected, message );\n};\n\n/* factory.test.js */\n\nQUnit.test('example', 2, function (assert) {\n    function factory() {\n        function F() {\n            this.foo = 'bar';\n            this.baz = ['quux'];\n        }\n        return new F();\n    }\n\n    assert.propEqual(factory(), factory(), 'Properties are the same (recursively)');\n\n    assert.propEqual(factory(), {}, 'Failure to show that \"Result\" is a plain object');\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "j-ulrich", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-11T14:09:20Z", "contents": "Because that would justify another assertion for another kind of behavior and then we would rather confuse a user having multiple kind of deepEqual.\n\n@prathe: You should not think of that assertion (by the way, propEqual() sounds like a good name to me) as a \"different kind of deepEqual()\" but rather as the next grade of leniency:\nstrict                                                  lenient\n<-------------------------------------------------------------->\nequal()              deepEqual()                     propEqual()\nobject identity      \"class identity\" /              \"state identity\" /\n                     object equality                 property equality\n\nIt doesn't feel confusing to me.\n\nInstead we could provide helpers and the first one could be the one that \"jsonify\" objects.\n\nThis sounds more like a workaround than a solution (although an acceptable workaround).\nI like the idea of @Krinkle's solution: build two objects with the same properties like actual and expected and use equiv() to compare them. However, @Krinkle's implementation ignores the inherited properties, meaning that the inherited properties might differ but the assertion would succeed, which shouldn't be the case, I'd say. (That might be an even more lenient assertion.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-11T17:48:06Z", "contents": "@j-ulrich Interesting. Taking inheritance into account could be useful, though I'm personally not (yet) convinced. Should the following to fail the equality assertion?\nfunction Foo() {}\nFoo.prototype.x = 0;\nFoo.prototype.doStuff = function () {};\n\nfunction FooBar(x) {\n    if (x !== undefined) {\n        this.x = x;\n    }\n}\nFooBar.prototype = Object.create(Foo.prototype /*, { constructor: .. } */ );\nFooBar.prototype.doStuff = function () {\n  this.x += this.x;\n};\n\nvar f = new Foo(), fb = new FooBar(0);\n\nassert.propEqual(f, fb);\nf and fb both have the exact same properties. The only difference is the constructor, and that the inherited doStuff is a different function.\nAnd then there is of course the convenient comparison to the object literal, where inheritance is also different:\nassert.propEqual(new FooBar(0), {\n  x: 0\n});\nWe could implement assert.ownPropEqual for that instead, but I'm not sure we need propEqual and ownPropEqual. Mostly because I think it is rather unlikely. Imagine, what are the chances of comparing two objects that aren't deepEqual, but one does want them to equal each other. Most likely cause: Different constructor. Okay, but what are the odds of two different constructors implementing the exact same inheritance (or rather, there would have to be no inheritance at all. Any prototype function would fail the assertion).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "j-ulrich", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-12T12:10:49Z", "contents": "@Krinkle: I was talking about the inherited properties. The inherited functions should be ignored. So the answer to your question\n\nShould the following to fail the equality assertion?\n\nis \"no, it should succeed\".\nBut you implementation uses hasOwnProperty() and therefore, even objects with different properties would succeed the assertion. Consider this example:\nfunction Base() {\n    this.baseProp = \"foo\";\n}\n\nfunction Derived() {\n    this.newProp = \"bar\";\n}\n\nDerived.prototype = new Base();\nDerived.prototype.constructor = Derived;\n\nvar firstDerived = new Derived();\nvar secondDerived = new Derived();\nsecondDerived.baseProp = \"test\";\n\npropEqual(firstDerived, secondDerived);\nYour implementation of propEqual() would succeed in this case because it only compares the own properties and not the inherited properties. I think that propEqual() should fail in this case because the object properties are different:\n// WARNING! This code is wrong! See the next comment of @Krinkle!!!\n// firstDerived looks like this:             // secondDerived looks like this:\n{                                            {\n    baseProp: \"foo\";                             baseProp: \"test\";\n    newProp: \"bar\";                              newProp: \"bar\";\n}                                            }\nSo maybe the solution is to simply remove the if (hasOwn.call(obj, key)) check in your implementation.\n\nOkay, but what are the odds of two different constructors implementing the exact same inheritance\n\nWell, that brings me back to my initial example with the iframes: If you take two objects of the \"same\" class but created in different iframes, they have different constructors (in terms of object identity) but both implement the exact same inheritance (in terms of properties).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-12T17:23:46Z", "contents": "Prototype functions are just like any other properties in the prototype. Those functions are stored in properties, where else would they be?\nRegarding the \"looks like this\" sections, that is an imaginary view, because that doesn't exist. They would actually look like this (not showing the methods as your example didn't have any):\n// firstDerived looks like this:             // secondDerived looks like this:\n{                                            {\n    newProp: \"bar\"                                baseProp: \"test\"\n    __proto__: Base                               newProp: \"bar\"\n        baseProp: \"foo\"                           __proto__: Base \n        __proto__: Base                               baseProp: \"foo\" \n}                                                     __proto__: Base\n                                             }\nThis is expected to fail because Derived would've been a very different kind of constructor than Base, as Derived would have odd properties in its prototype that aren't in Base's prototype (namely baseProp). It also puts an unneccecary step in the prototype chain as you can see.\nRegarding the Base/Derived example, that looks like a problematic situation all together. Especially the line Derived.prototype = new Base();. Because that has the side effect of \"randomly\" instantiating Base while in the middle of unrelated code. Secondly, it puts properties that are intended as own of a Base instance (such as baseProp) in the prototype, of another function. It becomes even more problematic if the constructor would need certain arguments passed, which would become impossible because Base was already instantiated.\nWhy would you instantiate a constructor to make prototypal inheritance (as opposed to a plain object that inherits directly from the other prototype object). That's horrible, and not how javascript is supposed to be used (other than for workarounds in old browsers). Such a pattern is unreliable and unpredictable. In the Base class it clearly says this.baseProp, which is referring to a (in)direct instance of Base, it is not supposed to end up in Derived's prototype.\nThe sane version behaves as expected:\nfunction Base() {\n    this.baseProp = 'foo';\n}\n\nfunction Derived() {\n    Base.call(this);\n\n    this.newProp = 'bar';\n}\n\nDerived.prototype = Object.create(Base.prototype);\nDerived.prototype.constructor = Derived;\n\nvar firstDerived = new Derived();\nvar secondDerived = new Derived();\nsecondDerived.baseProp = 'test';\n\nvar aBase = new Base();\naBase.newProp = 'bar';\n\nassert.propEqual(firstDerived, secondDerived); // not equal\nassert.propEqual(firstDerived, aBase); // yes equal\nSee, now the objects actually look like what you imagined earlier:\n// firstDerived looks like this:             // secondDerived looks like this:\n{                                            {\n    baseProp: \"foo\"                               baseProp: \"test\"\n    newProp: \"bar\"                                newProp: \"bar\"\n    __proto__: Derived                            __proto__: Derived \n}                                            }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "j-ulrich", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-12T20:28:55Z", "contents": "Oh. Ok. Sorry if my example was poor. I'm not really familiar with inheritance in JS. I just did a quick google and adapted the code at http://phrogz.net/JS/classes/OOPinJS2.html (although I forgot to overwrite the constructor).\nHowever, I think everyone got the idea. :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-06T13:28:09Z", "contents": "Commits to branches close tickets, reopening until it lands in master.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 318, "url": "https://github.com/qunitjs/qunit/issues/318", "title": "Composite: Raises \"global failure\" in Opera", "contents": "Running multiple test files using composite raises a \"global failure\" in Opera (I am using Opera version 12.02 on Windows):\nUncaught exception: TypeError: Cannot convert 'iframeWin.QUnit' to object\nin qunit-composite.js, Line 37\n\nTo reproduce, simply run the composite-demo-test.html in Opera.\nThe problem seems to be that the load event is fired shortly after the iframe is inserted into the DOM but at that time, the src attribute is still empty, hence, no QUnit object exists in the iframe's window object. The load event is then fired again when the src attribute has been changed and the test file was loaded.", "createdAt": "2012-09-18T21:18:08Z", "updatedAt": "2012-09-27T15:29:24Z", "closedAt": "2012-09-27T15:29:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "j-ulrich", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "j-ulrich", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 322, "url": "https://github.com/qunitjs/qunit/issues/322", "title": "Rename `throws`", "contents": "throws is an ES3 reserved word. This line causes an error in some older engines, including NarwhalJS: https://github.com/jquery/qunit/blob/e34ffb61488459f6823ded82e19865ba4b46e2ed/qunit/qunit.js#L499\nSee http://mothereff.in/js-properties#throws; either rename throws into something else, or quote the property name. (Renaming is probably safest though.)\nTo fix this, this line will need to be changed as well: https://github.com/jquery/qunit/blob/e34ffb61488459f6823ded82e19865ba4b46e2ed/qunit/qunit.js#L549 Use ['throws'] instead of throws here, or just rename the property to something that has never been a reserved word.", "createdAt": "2012-09-20T20:38:18Z", "updatedAt": "2012-09-24T08:52:54Z", "closedAt": "2012-09-24T08:52:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mathiasbynens", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "mathiasbynens", "company": "@Google"}], "comments_count": 1, "comments_data": [{"authorLogin": "mathiasbynens", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-24T08:52:54Z", "contents": "Patch attached in pull request #323.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 324, "url": "https://github.com/qunitjs/qunit/issues/324", "title": "strictEqual should not have to exist", "contents": "I've just run into what must be a common error of using equal() when I really wanted strictEqual(). My question is, why do we even have the equal() method? Why would I ever want to assert that my code is giving /almost/ the right values out of it?\nIn my opinion strictEqual should be ditched, equal() should use === to actually assert what we want it to assert, and anyone who wants a fuzzyEquals() can use ok() or perhaps you can implement that instead.", "createdAt": "2012-09-24T08:43:32Z", "updatedAt": "2015-04-18T18:03:29Z", "closedAt": "2012-09-26T18:12:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sbrandwoo", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "sbrandwoo", "company": null}, {"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "NoelAbrahams", "company": "The Cultural Me"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-09-24T21:51:36Z", "contents": "I always use strict for tests  and \"===\" for regular comparison (except against null/undefined as stated on jQuery code style guidelines). I also don't understand why those methods exist, but there should be a reason somewhere or it should be deprecated asap.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-26T18:11:24Z", "contents": "JavaScript has two different notions of equality, so QUnit provides two different equality checks (actually, three because of deepEqual()). If you don't want to use equal(), don't use it, but it does exactly what the name says, it checks for equality. Likewise, strictEqual() does exactly what the name says, it checks for strict equality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sbrandwoo", "authorAssociation": "NONE", "createdAt": "2012-09-26T21:25:05Z", "contents": "Exactly what the name says? We could debate all day about what equality is, and how JavaScript has decided to implement it, but all that matters is that QUnit provides the best experience to the people that use it.\nPersonally I like my libraries to be terse and effective. The equal() method as it currently stands is not very useful for asserting something, but strictEqual() is. Why should the former get pride of place in the library? I challenge you to even find mention of strictEqual() on http://qunitjs.com/intro/, despite according to modern JavaScript best practices === being the tool of choice.\nMy own proof is that I generally know what I'm doing when it comes to unit testing, but this one completely tripped me up, as I never expected it would be implemented like this. Closer inspection of the new website may have avoided it, but now is too late to know.\nAnd if we're going to get snotty about what \"equals\" means, then I can draw your attention to the docs, which say that equal() is \"A comparison assertion, equivalent to JUnit/CommonJS assertEqual(s).\" JUnit is much much stricter on what it would consider equal, any fuzzy == style matching would have to be the result of some inventive coding.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-28T02:13:03Z", "contents": "We could debate all day about what equality is...\n\nNo, we can't, because there's a specification.\n\nI challenge you to even find mention of strictEqual() on http://qunitjs.com/intro/\n\nA poorly written intro is certainly not a reason to change an API.\n\nI can draw your attention to the docs, which say that equal() is \"A comparison assertion, equivalent to JUnit/CommonJS assertEqual(s).\"\n\nSounds like the docs should be updated. Again, poorly written and/or incorrect docs are no excuse for changing an API.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-09-28T03:17:54Z", "contents": "I also dislike strictEqual. For comparison I prefer the strict equality === operator, however in unit testing I find myself often using .equal() because... I don't know, maybe because it is shorter and it doesn't matter in most cases? (e.g. when comparing objects, or primitive values of the same type).\nThe reason it is a bit counter-intuitive to use strictEqual is because in unit testing one is supposed to know what to expect. Meaning you might use non-strict comparison in production code to soften things (though I wouldn't tolerate that either, eqeqeq:true speaking), but in unit testing I think it is even more so that it is unlikely one would explicitly want a test to pass when it is almost what you expect.\nThere are only rare cases where there is a difference between the two, and when there is it is likely sign of an error, not en intentional toleration of variable output.\nI can imagine someone writing: assert.equal(A.Score.current(), 0); and unintentionally masking an error when the return value casts to 0. Sure, it should've uses strictEqual, but when wouldn't that be the case?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-09-28T11:54:35Z", "contents": "You say you dislike strictEqual and for comparison you prefer strict equality, is it a typo? Or my poorly english have mistaken me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-28T12:12:10Z", "contents": "@FagnerMartinsBrack He means that he dislikes having to type strictEqual() instead of equal().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2013-03-03T11:39:35Z", "contents": "Please get rid of equal(). Qunit should be capable of defining its own standard rather than slavishly adhering to faulty JavaScript standards. Ideally, we should get rid of strictEqual and just have equal(), which uses \"===\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T13:30:18Z", "contents": "I don't think we should just \"get rid of equal()\" but it would be nice to eventually switch them such that today's strictEqual becomes the norm by renaming it to equal [and then renaming today's equal to something else like: weakEqual, looselyEqual, sortaEqual, equalAfterTypeCoercion, same, congruent, similar, mostlyEqual, etc.].", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T14:51:40Z", "contents": "There is plenty discussion above already. We made a decision not to change any API based on that, piling on with the same arguments doesn't change that. If anything, there need to be updates to docs, e.g. see Scott's longer comment above (not the last one). Though so far no one pointed out any specific docs issue. Specifically the \"Intro\" is not so much an introduction to QUnit, but mostly to unit testing in JavaScript in general, as the full title suggests. I'm sure the API docs could be a lot better, so please help by filing issues or sending pull requests for those.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2013-03-03T16:39:50Z", "contents": "In my opinion all assertions should be as specific as possible and the api should not encourage anyone to use non-strict equality by allowing the use of an API that make use of ==.\nRecently in jquery cookie we changed the way $.cookie returns for invalid cookies from null to undefined. Since the tests were using equal() that change would not be noticeable, so we had to open carhartl/jquery-cookie#150 to avoid suprises.\nIt is not a case that can happen specifically for a single project, anyone can have a test with equal() and not think about the possibility of his/her test not to fail when changing something from null to undefined.\nThe framework should make the life of the user easier and not to comply with faulty comparisons that exists in the spec just because it cannot be changed anymore.\nequal() could stay and the docs just updated, but considering the arguments pointed above this API should not be encouraged. This practice only lead to unexpected output in a environment that should be explicit and clear.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2013-03-05T11:16:47Z", "contents": "The arguments over what the Qunit spec says is rather academic. The use case for weak equality assertions is zero IMO. In fact we don't use weak equality at all, anywhere in our code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2013-03-05T12:12:29Z", "contents": "The arguments over what the Qunit spec says is rather academic\n\nI suppose we are talking about javascript spec not qunit's (unless you meant something else).\nThe arguments @scottgonzalez did wrote are to the fact that if JS has multiple types of comparison qunit should have also (which I disagree,  frameworks are here to make JS better and not the same). Maybe regular comparisons are useful for things like myVar == null. But for tests... seriously? Show me a single use case.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 325, "url": "https://github.com/qunitjs/qunit/issues/325", "title": "When setup fails with a string exception, nothing useful is printed", "contents": "Reference QUnit code:\ntry {\n    this.testEnvironment.setup.call( this.testEnvironment );\n} catch( e ) {\n    QUnit.pushFailure( \"Setup failed on \" + this.testName + \": \" + e.message, extractStacktrace( e, 1 ) );\n}\n\nWhen setup fails due to an exception being thrown, QUnit uses the above code to print out the message and cause to the user. When the exception is of the form:\nthrow \"This is an error message\";\n\nthen nothing useful will be printed because e.message and e.stack will be undefined. It would be nice to check if e is a string and provide a suitable fallback, to support this form of exceptions.", "createdAt": "2012-09-24T09:40:12Z", "updatedAt": "2012-09-26T18:11:37Z", "closedAt": "2012-09-26T18:11:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sbrandwoo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sbrandwoo", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 326, "url": "https://github.com/qunitjs/qunit/issues/326", "title": "Create an inconclusive assertion", "contents": "The inconclusive assert would be used as follows:\ntest(\"My test\", function () {\n          inconclusive();\n          // or with message        \n         inconclusive(\"The submit click handler needs a test case\");\n});\nWhen run the, the test would display in (say) orange (compared to red for fail and green for pass) , with the provided message or the default \"Test pending\" message.\nWe've hacked this together to work for us, here is a snippet that adds a class for the styling.\nli.className = assertion.result === null ? \"inconclusive\" : (assertion.result ? \"pass\" : \"fail\");\nIt would be great if this can be included in the API.\nIt has proven very useful for creating place-holders for pending tests, and also for frameworks on top of QUnit that iterate an object and flag untested methods.\nThanks.\nNoel", "createdAt": "2012-09-24T10:06:31Z", "updatedAt": "2014-09-29T13:08:23Z", "closedAt": "2012-09-30T20:50:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "NoelAbrahams", "company": "The Cultural Me"}, {"login": "jzaefferer", "company": null}, {"login": "Irrelon", "company": "Irrelon Software Limited"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-26T18:08:12Z", "contents": "I think QUnit had this at some point. There were more arguments against it, the common response probably being \"just add a failing test for something that isn't yet tested\". Warnings are too easy to ignore, so why bother?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-09-30T20:50:47Z", "contents": "While I appreciate the input, I don't think this feature belongs in QUnit. I'm open to other opinions, until then I'll close this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Irrelon", "authorAssociation": "NONE", "createdAt": "2014-09-29T11:41:36Z", "contents": "I think this could be quite useful, or at least something of a custom output might be worth considering. My use case is that we have a bunch of tests against a modular framework and before a test is run we ask the framework if the module is loaded or not. If not then the tests for that module are excluded, however it could also be that the tester expects to see that module so there would be some use in allowing either inconsistent OR something like:\ntest('My module test', function () {\n    if (module is loaded) {\n        ok(module did something properly, 'Checked module function xyz is working');\n    } else {\n        other('Module is not loaded: ' + module name);\n    }\n});\n\nAlternatively (how we currently do it) with the module loaded test outside the test method:\nif (module is loaded) {\n    test('Module tests', function () {\n        ok(some method test, 'Test complete');\n    });\n} else {\n    console.log('Didn't test ' + module name + ' because it's not loaded');\n}\n\nThis is not as nice output-wise as the user needs console open. We could create a div on the page to log this sort of thing manually so console is not needed but it would be much nicer in the library itself. Just my two cents.\nI've been deliberately pseudo-codey up there but you get the picture.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-29T12:47:48Z", "contents": "See Issue #637 and PR #652 for the implementation of the forthcoming QUnit.skip.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Irrelon", "authorAssociation": "NONE", "createdAt": "2014-09-29T13:06:19Z", "contents": "Great stuff. Thanks! \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 328, "url": "https://github.com/qunitjs/qunit/issues/328", "title": "Incompatibility with latest version 2.1 of requirejs ", "contents": "The error message like this:\n\nCalled start() while already started (QUnit.config.semaphore was 0 already)\n\nWhen I replace requirejs  with an old version (2.0.6), the test run ok.", "createdAt": "2012-10-06T09:22:37Z", "updatedAt": "2012-10-07T23:11:18Z", "closedAt": "2012-10-07T23:11:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-06T11:32:24Z", "contents": "Could a provide an example of your setup?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-10-06T11:58:49Z", "contents": "@jzaefferer,thank you for your reply. Very simple testcase like this:\nindex.html :\n<script src=\"/jsrc/js/lib/require/require-2.1.0.js\" data-main=\"testsuite\"></script>\ntestsuite.js\n(function () {\n\n    // Defer Qunit so RequireJS can work its magic and resolve all modules.\n    QUnit.config.autostart = false;\n\n    // Configure RequireJS so it resolves relative module paths from the `src`\n    // folder.\n    require.config({\n        urlArgs : \"_dc=\"+(new Date().getTime()),\n        baseUrl: \"/jsrc/js\" \n    });\n\n    // A list of all QUnit test Modules.  Make sure you include the `.js` \n    // extension so RequireJS resolves them as relative paths rather than using\n    // the `baseUrl` value supplied above.\n    var testModules = [\n        \"./spec/HelloSpec.js\"\n    ];\n\n    // Resolve all testModules and then start the Test Runner.\n    require(testModules, QUnit.start);\n}());\nHelloSpec.js:\ndefine(function(){\n\n  module(\"HelloSpec\", {\n    setup: function() {\n      stop();\n      var self = this;\n      require([\n         'app/t05min/hello'\n      ], function(hello) {\n        self.hello = hello\n        start();\n      });\n    },\n    teardown: function() {\n        //\n    }\n  });\n\n  test('can return msg', function() {\n      equal(this.hello.msg,\"hello\");\n  }) //spec\n\n});\nhello.js:\ndefine([\n\n],function() {\n    'use strict';\n    return{\n        msg:\"hello\"\n    }\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-06T12:18:23Z", "contents": "Based on that snippet from index.html I'm guessing you load QUnit before loading requirejs. So the problem likely is that you're setting QUnit.config.autostart too late - by the time requirejs loaded testsuite.js, window.load was already triggered.\nBtw. in your HelloSpec.js, why not just load your dependency via the top-level define call? Would simplify your code a lot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-10-06T13:43:06Z", "contents": "@jzaefferer, you are right! I moved the statement 'QUnit.config.autostart = false'  from testsuite.js to index.html  and the error message disappear!\n        <script src=\"/jsrc/js/lib/qunit/qunit.js\"></script>\n        <script type=\"text/javascript\">\n              QUnit.config.autostart = false\n        </script>    \n        <script src=\"/jsrc/js/lib/require/require-2.1.0.js\" data-main=\"testsuite\"></script>", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-10-06T13:46:46Z", "contents": "I just learn about mocha that can run single test case like this:\nhttp://127.0.0.1:8001/jsrc/js/app/t05min/test/index_mocha.htm?grep=foo\nhas qunit simliar function?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-07T23:11:18Z", "contents": "Yeah, its filter instead of grep. Better yet, click the Rerun link next to any test, or select a module using the options in the top-right.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 329, "url": "https://github.com/qunitjs/qunit/issues/329", "title": "Minification", "contents": "Can you provide a minified version of the qunit.js and qunit.css files in the repo and over the CDN? I don't like to minify qunit for myself every time a new version comes out :-).", "createdAt": "2012-10-07T09:12:44Z", "updatedAt": "2018-12-22T20:36:13Z", "closedAt": "2012-10-08T09:55:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alawatthe", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alawatthe", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-07T23:09:24Z", "contents": "So far I assumed QUnit's filesize doesn't matter, as no end user ever gets to see it, and who cares about a few extra kb while testing? Can you tell me where that assumption is wrong? Is it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alawatthe", "authorAssociation": "NONE", "createdAt": "2012-10-08T09:38:07Z", "contents": "Of course, I don't care for some extra kb while testing, but I've included the testing suite in the site of my library (I'd like to see this more often!). And because it affects the end users then, a minified version is a nice to have I thought.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-08T09:55:42Z", "contents": "Right, but then if you care about the performance of your site, you'd concat everything into a single JS file and minify that.\nI don't want to put minified files into the repo, and I don't want more work when doing releases, at least not for the reasons above, so no, won't provide minified files, sorry.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 330, "url": "https://github.com/qunitjs/qunit/issues/330", "title": "Qunit can't be minified by YUI Compressor", "contents": "throws is a keyword that needs to be in quotes, probably not the most urgent fix ever, but a nice to have =)\nDiff:\n         QUnit.push( expected !== actual, actual, expected, message );\n     },\n\n-    throws: function( block, expected, message ) {\n+    'throws': function( block, expected, message ) {\n         var actual,\n             ok = false;\n\n@@ -546,7 +546,7 @@ extend( QUnit, QUnit.assert );\n  * @deprecated since 1.9.0\n  * Kept global \"raises()\" for backwards compatibility\n  */\n-QUnit.raises = QUnit.assert.throws;\n+QUnit.raises = QUnit.assert['throws'];", "createdAt": "2012-10-10T21:37:01Z", "updatedAt": "2012-10-10T23:02:48Z", "closedAt": "2012-10-10T22:00:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "msinformation23", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "msinformation23", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-10T22:00:23Z", "contents": "This was fixed 2 weeks ago in 8beeeb8.\nAlso, this is a bug in YUI Compressor. throws is not a reserved word, it isn't anything (in ES5). Previously, in ES3, it wasn't a reserved word either (it was a future reserved word in ES3 which has been removed from the spec in ES5).\nAlso, as of ES5 all reserved words are allowed by syntax and design both object literals and variable names. So regardless of whether throws is reserved or not, YUI Compressor needs to allow it for compatibility with regular ES5 scripts.\nClosing as duplicate of #323.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "msinformation23", "authorAssociation": "NONE", "createdAt": "2012-10-10T23:02:48Z", "contents": "ty", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 331, "url": "https://github.com/qunitjs/qunit/issues/331", "title": "Make async testing more convenient and reliable", "contents": "Our stop()/start() API isn't the greatest. Yehuda had some ideas for making that more convenient, outlined here: https://gist.github.com/2138c7bf20da83e823e8\nWorth noting as well: nodeunit passes in a test object to each test, where the test has to call test.done() in the end. Each test gets its own instance, so there's no risk of one async test bleeding into another, like it currently can happen in QUnit. We should look into providing something similar for QUnit.", "createdAt": "2012-10-17T15:53:30Z", "updatedAt": "2014-02-14T06:10:53Z", "closedAt": "2014-02-13T23:53:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "rwaldron", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-17T15:54:04Z", "contents": "ahem...\nYes +9001", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-22T21:36:44Z", "contents": "I implemented the pseudo-context pattern earlier this year for this very reason. The \"assert\" argument passed to the test functions would be an instance of a QUnit.Assert. And all its methods imply QUnit.start when using config.requireExpects and the last expected assertion is made. For cases where no expect is given and/or for clarity in code we would provide a no-arguments assert.start() that just continues like the global QUnit.start does now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-22T23:36:31Z", "contents": "That's a good point. So make that argument a test-specific instance, and fail if stop/start isn't called on that same instance. asyncTest would use the instance's stop method...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-03T16:45:26Z", "contents": "Some more ideas, baed on the assert argument to the test callback:\ntest(..., function(assert) { var done = assert.async(); ... done(); }\nasyncTest(..., function(assert) { assert.done(); })", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:53:54Z", "contents": "Replaced by #534", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 332, "url": "https://github.com/qunitjs/qunit/issues/332", "title": "\"stop the world\" assertion", "contents": "Feature request from Yehuda: An assertion method that, when it fails, stops the entire testsuite, preventing any further tests to run.\nUsecases:\n\njshint running in testsuite could stop any further tests from running\nenviroment test could prevent tests to run, e.g. don't run anything if page is loaded via file: protocol", "createdAt": "2012-10-18T15:17:12Z", "updatedAt": "2014-02-13T22:36:11Z", "closedAt": "2014-02-13T22:22:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "rodneyrehm", "company": "Deutsche Telekom"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-22T13:30:25Z", "contents": "Maybe a static method instead of an assertion method, that way it can be the result of any assertion (as opposed to whatever assertion(s) we stick it on), like QUnit.abort instead of assert.equalOrAbort.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-11-06T17:38:54Z", "contents": "From an API point of view this would be charming:\ntest(\"assertion with stop on failure\", function() {\n  equal(true, false, \"hello world\").orAbort(\"Aborting tests because I feel like it\");\n});\nThis prevents you from cluttering the namespace with more functions ('equal()', 'equalOrAbort()'), is nicer to read and allows the test to pass additional data to the abort-handler. Also this is \"future-proof\" in the way that you could always add other callback-registries to be executed on failure. As the assertion functions currently have no return value, this should be backward-compatible.\nSome code fragments @jzaefferer asked for:\n// yes, we're using an Exception for message-passing and deliberate control-flow-ejection. Sue me!\nvar AbortTestRun = function(){ /* ... */ };\n\n// container for failure handlers\nvar failureHandlers = {\n    orAbort: function(message) {\n        throw new AbortTestRun(message);\n    }\n};\nvar voidHandlers = {\n    orAbort: function(){}\n};\n\nQUnit.assert.equal = function( actual, expected, message ) {\n    var result = expected == actual;\n    QUnit.push( result, actual, expected, message );\n    return result ? voidHandlers : failureHandlers;\n};\n\n// in Test.prototype.run extend the catch() {} to check for `e instanceof AbortTestRun`,\n// if so, kill the queue and show the abort-message", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-06T17:26:50Z", "contents": "The two examples in the description seem saner than the one in the proposed API comment. I'd rather see something like QUnit.abort();\n\nFrom Scott on IRC. So for jQuery's testsuite, something like this:\nif ( isLocal ) {\n  QUnit.abort( \"Cannot run tests over the file protocol.\" );\n}\nThe message argument would be output to clarify the abort.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:22:45Z", "contents": "We've reviewed this again, more than a year later, and decided not to implement this. There's neither enough interest nor common value.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 335, "url": "https://github.com/qunitjs/qunit/issues/335", "title": "Show diff only when it helps", "contents": "If the length of the diff is just the length of expected.length + actual.length, its likely to be useless. Its only useful if it can reduce the input.", "createdAt": "2012-10-22T13:31:38Z", "updatedAt": "2015-10-20T19:32:05Z", "closedAt": "2015-05-15T16:46:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T13:07:37Z", "contents": "Not as easy as it seems. Current diffs have irregular whitespace and since they contain markup for the red/green highlighting, their length can't be compared to the input without getting rid of the markup first. Should try #364 before spending more time on this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 336, "url": "https://github.com/qunitjs/qunit/issues/336", "title": "Summary counts assertions but mentions \"tests\"", "contents": "\"0 tests of 0 ran\" is misleading. It should either count the tests, or say \"assertions\".", "createdAt": "2012-10-22T16:48:14Z", "updatedAt": "2012-11-15T11:38:22Z", "closedAt": "2012-11-15T11:38:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 338, "url": "https://github.com/qunitjs/qunit/issues/338", "title": "check for globals not working for alert stub", "contents": "module(\"Stubbing\", {\n    setup: function() {\n        this.old = alert; \n    },\n    teardown: function() {\n        alert = this.old;\n    }\n});\ntest(\"stub\", function() {\n    alert = function( s ) {\n        document.getElementById(\"qunit-fixture\").innerHTML = s;\n    }\n\n    alert(1);\n\n    strictEqual( document.getElementById(\"qunit-fixture\").innerHTML, \"1\", \"That's it!\" );\n\n});\u200b\nRun this code and then click in \"check for globals\", it says it introduced the global variable alert.\nI am not sure if this is a bug but since I replaced the old stubbed function I suppose the expected is that qunit don't detect alert as a new variable.\nI can't get this working in jsfiddle (looks like it doesn't support querystrings) http://jsfiddle.net/5aqu3/1/", "createdAt": "2012-10-24T18:33:15Z", "updatedAt": "2012-10-25T15:45:53Z", "closedAt": "2012-10-24T20:01:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-24T20:01:02Z", "contents": "The window object has no property alert by default, it is an inherited property from the Window.prototype that browsers implement.\nBy assigning alert  (which is effectively window.alert) you create a new property in the global scope that wasn't there before.\n> window.hasOwnProperty('alert');\n< false\n\n> window.alert = function () {}; window.hasOwnProperty('alert');\n< true\nThis is expected behaviour. One shouldn't be adding global variables in unit tests. And certainly not change existing global variables (unless restored later, e.g. one could temporarily remove and create an alternative window.jQuery and restore from the teardown). However changing global variables and messing with native methods are different things. I'd consider the latter to be a bad practice that one shouldn't be involved with.\nIf you have to do it, do it like this (by cleaning up afterwards):\n> window.hasOwnProperty('alert');\n< false\n\n>\n  window.alert = function () {};\n  /* stuff */\n\n  delete window.alert;\n\n  window.hasOwnProperty('alert');\n> false // yay\nDeleting own properties will naturally allow any inherited properties (such as the native alert) to be visible again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-10-24T20:13:41Z", "contents": "Updated example: http://jsfiddle.net/DHqTc/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-10-25T11:13:45Z", "contents": "Thanks for the enlightenment, I didn't knew about that QUnit.config.noglobals = true; feature;", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem", "type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 339, "url": "https://github.com/qunitjs/qunit/issues/339", "title": "\"throws\" shows expected value as \"null\" instead of actual Error type", "contents": "As a demonstration, I have the following code:\nthrows(\n    regula.bind, \n    regula.Exception.IllegalArgumentException, \n    \"@Selected cannot be bound to a form element\"\n);\n\nThe method throws a custom Error object of type regula.Exception.BindException so the expected value should be regula.IllegalArgumentException. However QUnit displays null.\n\nThis is on version 1.10.0. If this has been fixed, please disregard.", "createdAt": "2012-10-25T23:58:13Z", "updatedAt": "2012-10-26T17:58:41Z", "closedAt": "2012-10-26T17:58:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "vivin", "company": "Cyr3con"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-10-26T00:28:11Z", "contents": "There weren't any changes to throws since 1.10. Can you provide a (reduced) testcase?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-26T16:40:37Z", "contents": "I have a fiddle here, but that seems to be working as expected. Perhaps I may not have duplicated exactly what's going on in my code. Once I figure out why it's happening with my code, I will update the fiddle.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-26T17:58:41Z", "contents": "I figured it out. It's a difference between the version of QUnit that's shown on qunitjs.com versus the one that's available on the jQuery CDN.\nThis fiddle that I previously posted shows the correct behavior; it is using the version of QUnit that is available at this location. This fiddle shows the erroneous behavior; it is using the version of QUnit that is available at this location.\nThe version that shows the correct behavior is 1.11.0pre and so it looks like the issue has been fixed in 1.11.0pre.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 340, "url": "https://github.com/qunitjs/qunit/issues/340", "title": "Wording for negated assertions is confusing", "contents": "Below is sample output from a passing notEqual() test:\n\nkey icon is visible when activeKeys is empty\nExpected:\n\"none\"\nResult:\n\"inline\"\nDiff:\n\"none\" \"inline\"\n\nThe way this is written, it implies that \"none\" was expected when in fact, we are expecting anything except \"none\".", "createdAt": "2012-10-26T20:44:32Z", "updatedAt": "2015-06-18T09:33:42Z", "closedAt": "2015-06-18T09:33:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kcgolden", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "kcgolden", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "mimshwright", "company": "MimsWright.com"}, {"login": "platinumazure", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T11:36:03Z", "contents": "Suggestions on what to output? I never use the notXXX assertions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kcgolden", "authorAssociation": "NONE", "createdAt": "2012-11-15T15:25:17Z", "contents": "How about this:\n\nExpected Anything Except:\n\"none\"\nResult:\n\"inline\"\nDiff:\n\"none\" \"inline\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T17:30:37Z", "contents": "Hold on. if you expect anything other than \"none\" and the result is \"inline\", how is that a failure?\n    var display = 'inline';\n    assert.notEqual('none', display, 'key icon is visible when activeKeys is empty');\nThat's a pass.  The Expected/Result/Diff block is only shown for failures.\nI agree with @jzaefferer though, I never use the notXXX assertions. It seems like a bad testing pattern. In a unit test you should be able to assert exactly what you get (whether it is a loose or strict value, bool cast, range, deep, etc. whatever assertion). But tolerating anything other than the one thing you don't expect, seems like very tolerative testing. A few exceptions there maybe, but quite rare.\nThe one example is probably where there are too many \"good\" values to list, so you only list the one \"bad\" value (like the dozens if display values in CSS, and the one \"none\" that it shouldn't be).\nHowever in that case it doesn't make sense to have a 3 step status block (Expected, Result, Diff). Because in the case of a not-failure \"Not expected\" and \"Result\" will be equal. So all you need is \"Unexpected result\" (and no diff).\n\nbtw, when we implement Assert objects as proper instances, we could auto-generate the not version by simply instantiating another one that reverses the polarity of the neutron flow. Something like assert.equal and assert.not.equal. This would save some code duplication and makes it so that custom plugin-provided assertion methods automatically have a negated version as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kcgolden", "authorAssociation": "NONE", "createdAt": "2012-11-15T19:06:52Z", "contents": "In my case, it was not a failure. But nonetheless, the wording was off. It claims it \"expected\" the value I was actually saying not to expect, just according to the text. If the test failed, it would look like:\n\nExpected:\n\"none\"\nResult:\n\"none\"\nDiff:\n\"none\" \"none\"\n\nOne might see that output on a failure and be really confused.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T21:21:30Z", "contents": "Yeah, I can imagine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mimshwright", "authorAssociation": "NONE", "createdAt": "2014-02-08T00:11:28Z", "contents": "It could also be as simple as:\nExpected:\nNOT \"none\"\nResult:\n\"none\"\n(Diff omitted. It should only fail when there is no diff)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T16:27:54Z", "contents": "Prepending \"NOT\" to the expected value seems fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-08T15:40:29Z", "contents": "@jzaefferer I've created PR #822 as a possible fix for this issue, but it's incorrectly flagging the PR as CLA: Error (and the travis build seemed to fail on teardown). Any chance you could take a look and let me know if I'm doing anything wrong?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 341, "url": "https://github.com/qunitjs/qunit/issues/341", "title": "assert should not be a global", "contents": "9491c02 refactored assertion helpers from QUnit.* into QUnit.assert.* passed as local variable in the QUnit.test callback.\nBut since it puts itself on QUnit before the extension of window, it itself became a global variable as well.", "createdAt": "2012-10-29T19:44:09Z", "updatedAt": "2012-10-29T21:12:23Z", "closedAt": "2012-10-29T21:12:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 342, "url": "https://github.com/qunitjs/qunit/issues/342", "title": "qunit-canvas tests failing on FF 16", "contents": "8 of the 16 QUnit Canvas addon tests (the ones that set the fillStyle alpha value to 0.5) fail the pixelEqual test with an actual alpha value of 128 when 127 was expected.  All tests pass on Chromium-derived 22.0.", "createdAt": "2012-11-01T18:40:05Z", "updatedAt": "2016-11-01T16:28:58Z", "closedAt": "2012-11-06T11:29:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dksmiffs", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "dksmiffs", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-02T21:07:58Z", "contents": "Confirmed:", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 344, "url": "https://github.com/qunitjs/qunit/issues/344", "title": "Measure performance (duration) of each test", "contents": "QUnit shows a convenient \"Tests completed in  milliseconds\" upon suite completion, but doesn't break that down to individual tests/modules.\nI'd like to get the jQuery suite completing locally in under a minute, and having timing data available on the <li> output for each test would help tremendously.", "createdAt": "2012-11-03T04:34:28Z", "updatedAt": "2014-01-03T10:45:30Z", "closedAt": "2012-11-17T14:52:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-03T06:44:46Z", "contents": "This has been brought up before at jquery/testswarm#156, I didn't create an issue here in QUnit yet, but this is essentially the implied dependency for jquery/testswarm#156 that is now explicit.\nWe want to record the performance of each test execution and make it available through the logging API (for TestSwarm in this case), so that we can see the performance of of tests and modules over time (also depends on jquery/testswarm#183). Then we'll have reports like these for QUnit tests suits for builds over time:\n\nPerformance history of entire suite\nPerformance history of tests and groups of tests (modules)\nhttps://integration.mediawiki.org/ci/job/MediaWiki-Tests-Misc/8318/testReport/junit/(root)/?\nhttps://integration.mediawiki.org/ci/job/MediaWiki-Tests-Misc/lastCompletedBuild/testReport/(root)/history/?\nhttps://integration.mediawiki.org/ci/job/MediaWiki-Tests-Misc/8318/testReport/junit/(root)/UserTest/\nhttps://integration.mediawiki.org/ci/job/MediaWiki-Tests-Misc/8318/testReport/junit/(root)/UserTest/testAllRightsWithMessage/history/?\n\nAnd of course in QUnit itself we can display times as well (which is what you're asking for here).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 346, "url": "https://github.com/qunitjs/qunit/issues/346", "title": "Leaking urlParams and isLocal", "contents": "QUnit currently exports two accidental globals, urlParams and isLocal, probably in both cases due to execution ordering.", "createdAt": "2012-11-06T14:18:58Z", "updatedAt": "2016-11-01T16:28:58Z", "closedAt": "2012-11-15T09:56:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 347, "url": "https://github.com/qunitjs/qunit/issues/347", "title": "Add assertion to run after loading source to look for globals", "contents": "Something like this:\n<script src=\"punycode.js\"></script>\n<script>QUnit.newGlobals('punycode');</script>\nIf punycode.js exports more than just a punycode window property, the assertion would fail.", "createdAt": "2012-11-06T14:23:21Z", "updatedAt": "2014-02-13T23:21:56Z", "closedAt": "2014-02-13T22:42:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "rodneyrehm", "company": "Deutsche Telekom"}], "comments_count": 4, "comments_data": [{"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-11-06T16:39:34Z", "contents": "While QUnit already has a feature detecting (accidental) globals caused by running the tests, there is no solution for finding those unwanted globals created by the source files. It is important to output the filename that created the global. A real bonus would be a line-number where it happened.\nDoes it make sense to extend this \"global leak detection\" to pass any scope (e.g. jQuery.fn) for validation?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-18T09:41:06Z", "contents": "I'm not entirely sure why files should be loaded using <script> in HTML. A registration along the following lines would\na) potentially allow simpler inclusion javascript controlled test runners\nb) allow automatic global leak detection\n<script src=\".../qunit.js\"></script>\n<script>\n  QUnit.js([\n     // simple loading without leak-test\n    'src/some-file.js',\n    // loading with leak-test\n    { file: 'src/some-other-file.js', exposes: ['globalVariable'] }\n  ]);\n</script>\nThis might also test if the expected global variables were actually defined.\nIn a way, I guess I'm proposing to (additionally) allow configuration by javascript only. So you don't have to create some qunit container and stuff. just load qunit.js, tell it what you need, have it load the files and create the dom it needs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T11:42:27Z", "contents": "There's something similar in jQuery UI, there called TestHelpers: https://github.com/jquery/jquery-ui/blob/master/tests/unit/autocomplete/autocomplete.html#L13 - though its used to load the code to be tested, not the actual tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:42:05Z", "contents": "Closing this, doesn't really seem useful enough.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 348, "url": "https://github.com/qunitjs/qunit/issues/348", "title": "Confusing line breaks in object diff", "contents": "values should start at the same horizontal offset or be shown in sequence. Current visual is confusing, as it looks like the value could be a key or something.", "createdAt": "2012-11-06T15:26:58Z", "updatedAt": "2015-04-03T10:23:10Z", "closedAt": "2015-03-26T16:19:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rodneyrehm", "company": "Deutsche Telekom"}, {"login": "jzaefferer", "company": null}, {"login": "AnishChandran", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-11-10T12:25:46Z", "contents": "Also not immediately clear is the fact that object !== array:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T11:34:39Z", "contents": "Should look for a better diff implementation, that still can be embedded in QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T13:07:55Z", "contents": "Might get addressed by #364.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnishChandran", "authorAssociation": "NONE", "createdAt": "2015-03-05T19:44:11Z", "contents": "http://fiddle.jshell.net/sj6kdj9g/\nIs this an simple example about confusing line breaks in diff ? since the \"gre\": \"foo\" should be aligned with \"foo\": \"bar ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-06T12:49:54Z", "contents": "@AnishChandran that fiddle only has \"foo\"/\"bar\" as actual/expected - without linebreaks, there's nothing confusing there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff"], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 349, "url": "https://github.com/qunitjs/qunit/issues/349", "title": "Alias module to suite", "contents": "In Nodejs the module variable is already taken and causes issues when using qunit. Would be nice for \"module()\" to have an alternative name like \"suite()\".\nYou can see an example here: qunitjs/node-qunit#65 (comment)", "createdAt": "2012-11-08T15:43:47Z", "updatedAt": "2012-11-08T16:25:07Z", "closedAt": "2012-11-08T16:25:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bendangelo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bendangelo", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-08T16:22:14Z", "contents": "Since a few releases now there is a more object oriented method available in QUnit (using context and namespaces). So instead of:\nmodule(..);\n\ntest(.., function () {\n  equal(..);\n});\nI'd recommend you start using:\nQUnit.module(..);\n\nQUnit.test(.., function (assert) {\n   assert.equal(..);\n});\nGlobals are evil :)\nAnyhow, introducing more generic global variables is most definitely not the solution. suite() is just as generic as module() and both are bound to conflict with something somewhere..", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 350, "url": "https://github.com/qunitjs/qunit/issues/350", "title": "QUnit.begin should provide the total number of tests", "contents": "For tools that show test progress its useful to have the total number of tests up front. Unlike number of assertions, we can actually provide the number of tests.\nSee karma-runner/karma#156 (comment)", "createdAt": "2012-11-08T19:23:30Z", "updatedAt": "2014-07-02T11:17:09Z", "closedAt": "2014-05-05T17:18:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jimthedev", "company": "@SPSCommerce "}, {"login": "markelog", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 16, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-08T21:51:01Z", "contents": "Provide it how? Depending on the configuration, afaik tests are executed while the test invocations happen. And even if start is delayed on until after, tests can be registered at any time. Make sure that whatever way is used to expose it allows it to be updated during the run.\nIf it is only for display, then updating is fine. If it is provided in callbacks for automated testing, then it can't be updated. But in that case it shouldn't be a problem to wait until the tests are done, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T11:34:04Z", "contents": "Its fine to do this only when for tests that were registered before QUnit.begin runs. In the browser that works, elsewhere QUnit.config.autostart should be disabled, to get proper QUnit.done results.\nProviding this number up front helps to display progress in testacular, that's why having it just at the end doesn't help much.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:44:02Z", "contents": "Reviewed this, we should implement it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jimthedev", "authorAssociation": "NONE", "createdAt": "2014-03-18T01:26:17Z", "contents": "Hi @jzaefferer and @Krinkle  I'm just checking in on this to see if this is being worked on. Currently there is a downstream issue in lazd/gulp-karma that is waiting on this feature. I am about to start a project and am considering qunit w/Karma but would appreciate an update, even if there's no change. Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-18T10:40:42Z", "contents": "As far as I know, there's no progress on this. It should be relatively simple to implement, but since we didn't have much of a need in our projects, it fell behind other issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-05T16:04:53Z", "contents": "but since we didn't have much of a need in our projects\n\nNow we do \u2013 jquery/sizzle#236, i could jump on this, if you're busy", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-05T16:15:41Z", "contents": "I've looked at the PR you linked to, but didn't see any mention of this. Doesn't really matter though, a PR to implement this would be appreciated.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-05T16:23:02Z", "contents": "Karma shows it like that: Chrome 33.0.1750 (Mac OS X 10.9.0): Executed 35 of 0 SUCCESS (0 secs / 0.261 secs)\nbut it should be:\nChrome 33.0.1750 (Mac OS X 10.9.0): Executed 35 of 35 SUCCESS (0 secs / 0.261 secs)\nplus a warning message, which is annoying", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-05T16:34:08Z", "contents": "Ah, that makes sense.\nBtw. I updated the link in the ticket description, though I don't see a mention of this issue...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-09T15:36:15Z", "contents": "It could like this -\nQUnit.begin(function( data ) {\n    data.total; // Number;\n});\nSounds good?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-09T17:05:58Z", "contents": "It should be consistent with other callbacks, e.g. QUnit.done: http://api.qunitjs.com/QUnit.done/\nSo yeah, that works, though total means \"The total number of assertions\" in done, so we should use a different name here, since we're referring to the number of tests, not assertions.\nOnce that is done, a PR for the docs would be appreciated as well. Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-09T17:06:46Z", "contents": "So what name do you prefer?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-04-12T16:29:53Z", "contents": "IMHO, I would go with tests, following the callback current names.\nConsidering it's only an integer, it's easy to understand (and to explain in the docs) that it is a reference to the executed tests number.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-14T16:32:44Z", "contents": "How about totalTests on begin, then add passedTests, failedTests and totalTests (same as in begine) to QUnit.done?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-04-14T18:07:13Z", "contents": "If it's only one tests related variable containing only a numeric value, I prefer tests rather than totalTests, but this is fashion and both are good.\nto QUnit.done, considering we could split the stats, I would nest them, like this:\ntests: {\n    passed: [Number],\n    failed: [Number],\n    total: [Number]\n}\nThe main reason is to simplify the QUnit.done callback, making it easier to browse between returned values.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-15T12:55:17Z", "contents": "@leobalter it would be weird to see an object within an object always with one attribute for QUnit.begin, for QUnit.done it's make sense though but these names  probably should correlate with QUnit.begin names too.\nI hate bikeshedding :-)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 351, "url": "https://github.com/qunitjs/qunit/issues/351", "title": "testDone should provide aggregated assertion results", "contents": "As far as I understand right now the only way to retrieve the list of failed asserts and stack traces for them is to access QUnit.config.current.assertions. Also, it would be nice if assertions.message would not contain HTML. This would be helpful for automated tools to report stack traces.", "createdAt": "2012-11-10T02:43:29Z", "updatedAt": "2017-03-31T04:13:44Z", "closedAt": "2017-03-31T04:13:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ilyavolodin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ilyavolodin", "company": "Demandware"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-11T20:30:45Z", "contents": "You should use log for this: http://api.qunitjs.com/QUnit.log/\nProvides html-free message property and source for stack traces.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ilyavolodin", "authorAssociation": "NONE", "createdAt": "2012-11-12T21:58:44Z", "contents": "QUnit.log fires on each assertion, it would be nice to get this information for the whole test. I think it would make sense for testDone to include this information for all assertions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T11:30:41Z", "contents": "I've updated the title to reflect that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:13:44Z", "contents": "For now I don't think we should fix this for testDone as we're working on the standard reporter interface.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "help wanted", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lNzg4NjM1", "title": "JS Reporter", "description": "Once the js-reporter is far enough, issues in this milestone should be implemented/merged.", "createdAt": "2014-09-13T16:01:45Z", "dueOn": null, "number": 5, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 352, "url": "https://github.com/qunitjs/qunit/issues/352", "title": "Unsafe JavaScript attempt to access frame with URL", "contents": "Google Chrome (Version 22.0.1229.94) produces this error when testing cross-domain iframe  (QUnit v1.10.0)\nUnsafe JavaScript attempt to access frame with URL http://www.iana.org/domains/example/ from frame with URL file:///home/user/qunitbug.html. Domains, protocols and ports must match. qunit-1.10.0.js:1207\n\nextractStacktrace qunit-1.10.0.js:1207 \nsourceFromStacktrace qunit-1.10.0.js:1241\nQUnit.test qunit-1.10.0.js:343\n(anonymous function) qunitbug.html:20\np.event.dispatch jquery-1.8.2.min.js:2\ng.handle.h jquery-1.8.2.min.js:2\n\nHow to reproduce:\nCreate a file with the following html code below and open it in a web-browser:\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Demo for qunit test cross-domain iframe bug in Chrome</title>\n<script src=\"http://code.jquery.com/jquery-1.8.2.min.js\"></script>\n<script src=\"http://code.jquery.com/qunit/qunit-1.10.0.js\"></script>\n</head>\n<body>\n\n    <div id=\"qunit\"></div>\n    <div id=\"qunit-fixture\"></div>\n\n    <script>\n        $(function(){\n            $(\"<iframe>\", {\n                src: \"http://example.com\"\n            }).appendTo(\"body\").load(function(){\n                var iframe = this;\n                test(\"foo\", function(){\n                    ok(true);\n                });\n            });\n        });\n    </script>\n</body>\n</html>\n\nThis does not happen in Mozilla Firefox! On Firefox it passes without issues even when run on an http server on localhost.", "createdAt": "2012-11-11T02:21:32Z", "updatedAt": "2013-06-19T10:43:10Z", "closedAt": "2013-06-19T10:43:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gsuess", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "gsuess", "company": "BetaBase UG"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T10:05:55Z", "contents": "Live reproduction: http://jsfiddle.net/SvJ5b/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-15T11:32:12Z", "contents": "Not sure what exactly is going on, but it looks like a bug in Chrome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T12:51:51Z", "contents": "I still don't understand how that happens: Calling test() causes QUnit to extract a stacktrace, so that it can later display which test has failed. For some reason Chrome thinks that stack is looking at the iframe, not at the parent frame, where its actually running.\nWould have to reduce this to just the iframe and the stack access to see if its really a QUnit problem or can be reported against Chrome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gsuess", "authorAssociation": "NONE", "createdAt": "2012-12-18T18:03:14Z", "contents": "I still don't understand how that happens: Calling test() causes QUnit to extract a stacktrace, so that it can later display which test has failed. For some reason Chrome thinks that stack is looking at the iframe, not at the parent frame, where its actually running.\n\nDoesn't it somehow enter the iframes properties, because they (unlike on firefox) also get enumrated on the parent frame.\nSo it enters iframe.contentWindow and then tries to access all fields in there?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-19T12:44:02Z", "contents": "What enumeration and access are you referring to?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gsuess", "authorAssociation": "NONE", "createdAt": "2012-12-19T13:32:31Z", "contents": "I don't know. What I mean is that somewhere a request is made for a list of properties of iframe.contentWindow. Firefox returns only the list of the accessible ones, where as chromes returns all of them, prompting some variable reporting loop to try to access them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T10:43:10Z", "contents": "I just ran the jsfiddle from @Krinkle in Chrome 27 and it works just fine. Looks like the bug was fixed in Chrome itself. I'll close - if I missed something, we can reopen.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 354, "url": "https://github.com/qunitjs/qunit/issues/354", "title": "Deprecate QUnit.reset", "contents": "People shouldn't stuff a bunch of tests into a single one and then use QUnit.reset() inbetween. If you need the reset, use a separate test.", "createdAt": "2012-11-15T15:55:26Z", "updatedAt": "2013-10-23T15:11:32Z", "closedAt": "2013-06-19T10:06:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-20T22:21:58Z", "contents": "jQuery Core actually hooks into QUnit.reset to do custom cleanup. Need to change that to QUnit.testDone (or whatever is most appropiate) before deprecating QUnit.reset.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T10:06:37Z", "contents": "Added a comment in the QUnit source as well as in the API documentation. Filed a ticket for jQuery Core to update: http://bugs.jquery.com/ticket/14040", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzNTE1", "title": "1.12", "description": "", "createdAt": "2013-06-12T07:03:42Z", "dueOn": null, "number": 1, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 356, "url": "https://github.com/qunitjs/qunit/issues/356", "title": "Deprecate expect argument from test() and asyncTest()", "contents": "Use expect(x) or assert.expect(x) instead.", "createdAt": "2012-11-25T22:39:11Z", "updatedAt": "2016-04-18T16:09:51Z", "closedAt": "2016-04-18T16:09:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-11-26T02:17:06Z", "contents": "Why? I think it is much better detach that information from the regular test flow. If you use an expect(x) inside the callback it will be valid for the whole scope isn't it? Is this change going to allow multiple expect or anything like that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-26T02:28:04Z", "contents": "If you use an expect(x) inside the callback it will be valid for the whole scope isn't it?\nYes. The second argument to test() just calls expect( .. ) internally.\nIs this change going to allow multiple expect or anything like that?\nNo.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-11-26T11:21:35Z", "contents": "So what is the reason for the deprecation if it will be valid for the whole scope in a way or another?\nIn my point of view the argument works much better than calling expect(x) inside the callback but I want to know why this should be a bad practice.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-26T11:38:06Z", "contents": "Calling expect(x) makes the intention explicit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T11:11:41Z", "contents": "Updated our testsuite to stop using the expected argument. Updated API docs to remove the expected argument, along with a note about the deprecation. I've created #501 to actually remove the support for the argument. This ticket now has the 2.0.0 milestone, to add a warning when trying to use the argument.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 357, "url": "https://github.com/qunitjs/qunit/issues/357", "title": "Disable try-catch for an individual test", "contents": "It would be helpful to disable the try-catch logic for an individual test and not only for all tests in the given markup.", "createdAt": "2012-11-26T08:17:35Z", "updatedAt": "2013-06-19T10:40:00Z", "closedAt": "2013-06-19T10:40:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "doberkofler", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "doberkofler", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 7, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-26T11:24:27Z", "contents": "What's your usecase for that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "doberkofler", "authorAssociation": "NONE", "createdAt": "2012-11-26T11:29:22Z", "contents": "I'm trying to implements tests using a custom window.onerror handler and would need to have certain exceptions being handled by to top lever error handler.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-11-28T19:06:54Z", "contents": "Are you testing the cross-browser behaviour of window.onerror itself? Or does that just happen to be how you handle the exceptions?\nAssuming the latter, I recommend you abstract your handler so that it can be called directly from the unit test.\nwindow.onerror = function (a, b, c) {\n  APP.debug.handleGobal(a, b, c);\n};\n\nQUnit.test(..., 1, function (assert) {\n  try {\n    ..\n    ..\n  } catch (e) {\n    assert.strictEqual(APP.debug.handleGlobal(..), .., ..);\n }\n});\nThat way you're testing individual units, instead of performing a full-on integration test which likely doesn't help very much to find the cause when it fails.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-06T17:27:42Z", "contents": "@doberkofler does Krinkle's suggestion work for you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "doberkofler", "authorAssociation": "NONE", "createdAt": "2012-12-07T06:37:09Z", "contents": "@Krinkle I'm trying to test a custom window.onerror handler that is supposed to store front-end error messages in the backend. To do this is would need to disable the try-catch logic in QUnit to have all exceptions land in the onerror handler itself. The custom onerror handler used in QUnit is quite easy to save and restore but I've not found a way to disbale the try-catch handling in QUnit.\nI've just came up with a working but pretty complex solution (as always when thing get messy) using an iframe that actually mimics the behavior to be tested without using QUnit and then simply reporting back the results to the parent window where QUnit runs and perform the assertions.\nI think it would be helpful to have an option allowing to disable the try-catch handler in QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T12:02:22Z", "contents": "@doberkofler that sounds like you could just go ahead and disable the try-catch handler for all tests. Or structure your tests so that those that need to go without it run in their own suite.\nWe currently don't have a generic API for test-specific configuration (expect and stop/start can't be reused), so adding support for this is far from trivial. That's why I'm hoping that workarounds will do the trick.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T10:40:00Z", "contents": "I don't think this one very special usecase justifies the added complexity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 358, "url": "https://github.com/qunitjs/qunit/issues/358", "title": "start() may happen before init()", "contents": "Using Require.js we've run into a funny issue. Apparently QUnit.init (via window.load) is triggered after reqired resource have been loaded. Since QUnit.config.autostart = false; is in play, we call QUnit.start() in the master test-file. (as suggested in this Example).\nThe quickest solution @jzaefferer and me found is diverting calls to start() unless QUnit is initialized. Achieve with\n\nadd QUnit._initialized = true; to QUnit.init();\nprepend the following to QUnit.start():\n\nif (!QUnit._initialized) {\n    // defer execution until the thing has initialized\n    setTimeout(function() {\n        QUnit.start(count);\n    }, 50);\n    return;\n}\n@jzaefferer also voiced concerns this could break on headless browsers. (I have no clue what that break could be\u2026)", "createdAt": "2012-11-28T12:12:15Z", "updatedAt": "2016-11-01T16:28:59Z", "closedAt": "2012-12-17T19:35:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rodneyrehm", "company": "Deutsche Telekom"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-28T12:23:40Z", "contents": "When running headless without a DOM, QUnit.init never runs. In that case the workaround would break stuff.\nShould probably refactor QUnit.init() to initialize the config while QUnit loads, and move the DOM init stuff into QUnit.load, where a bunch of other DOM interaction happens anyway.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-11-28T12:30:09Z", "contents": "ok, you had me confused there. headless - in my simple mind - is a browser that doesn't paint to screen, it still has a dom, though. What you mean - again in my words - is a javascript shell (node, or whatever, something that is not a browser).\nAnyway, splitting up default config and DOM init makes sense! This doesn't solve the problem though, as tests could depend on the initialized dom, no?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-11-28T12:38:23Z", "contents": "If there's no UI (aka headless), results are only available via logging callbacks. Though if the DOM is available, it needs to be update before running the first test. So yeah, for that case, the order needs to get fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-06T17:50:00Z", "contents": "Discussed with Scott in IRC, probably need to do something like this: have QUnit.start() wait for QUnit.load (if there's a dom), if there's none, init immediately. Wrap the DOM access in QUnit.init() to make that also work without DOM.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 363, "url": "https://github.com/qunitjs/qunit/issues/363", "title": "Diff only leafs for (big) objects", "contents": "When comparing big object structures, the current diff output has too much overhead. Comparing each leaf and showing the path, actual, expected (and diff) for just the leave would be much more useful. It won't replace the regular diff, e.g. comparing (long) strings wouldn't profit from this.\nIn other words, we'd have to find the properties that are different, serialize and diff those, and not output the rest, or at least compress it.", "createdAt": "2012-12-06T17:17:25Z", "updatedAt": "2015-10-16T20:52:14Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "shivamdixit", "company": "Uber "}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "gauravmittal1995", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-21T13:45:02Z", "contents": "Only outputting properties that are different might become confusing sometimes as the structure of object will not be maintained. Instead we can make the objects collapsible to compress the output of the diff. For example:\n\nCan be collapsed to:\n\nWhen showing the diff, the unchanged properties can be collapsed by default. It will compress the output significantly. We can also have configuration options for it. For example:\n\nBy default collapse only changed properties\nBy default collapse all - expected or actual or diff output  etc\n\nPossible challenges:\n\nDetermining which properties have changed. As we are dumping the objects first and then diff-ing them, it might not be straightforward. Maybe we can check the properties which are containing the diff tags <ins> or <del> and make them collapsible. Not sure if it is a good way.\nThe output of objects and other types will have to be handled differently in HTML reporter as strings, int etc won't be \"collapsible\".\n\nWhat are your views?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-03-21T14:42:44Z", "contents": "I think it depends on the case(s) we're trying to improve. Diffs of objects with many properties, which I suspect is a principle pain point, would benefit most from hiding completely-unchanged properties. Deep diffs, on the other hand, would probably benefit more from compressing the structure above changes (e.g., replacing arr: [\\n ...,\\n {\\n ...,\\n differs: {\\n ... literal representation with [\"arr\"][N][\"differs\"]: {\\n ... object/array reference notation)... the challenge there being preserving enough context in objects (but probably not arrays) containing the difference.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-03-21T14:57:00Z", "contents": "That said, I really like the dynamic collapse concept for conditionally showing excess data. But I think it would apply to lists of unchanged properties instead of whole objects/arrays, at least for the \"many properties, few diffs\" case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-22T02:37:01Z", "contents": "@gibson042 I agree with your point. As dynamic collapsible properties will only \"reduce\" the output, we can have them along with completely hiding unchanged properties.  An option completelyHideProperties can also be provided to the users so that they can decide when to show and when not.  We can also have some threshold to determine its default value, if the number of properties are more than maxProperties then set it to true else false. What do you think @jzaefferer ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-24T23:19:29Z", "contents": "@shivamdixit I agree with your idea. Last week i thought of doing it like\n{ ... {\n          a:{diff}\n      }\n... }\n\nBut that created problems, like not determining the depth of the diff, etc.\ntherefore i thought of using something like Github's diff... i.e Hide all the part and only display the ones which are different with the choice of expanding if needed.\nThis is similar to your idea about expanding each array or object with some minor difference.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff", "help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 364, "url": "https://github.com/qunitjs/qunit/issues/364", "title": "Improve diff implementation", "contents": "Potential diff implementations:\n\nhttps://github.com/kpdecker/jsdiff\nhttps://github.com/cemerick/jsdifflib (Timo recommended this one, using it by monkey-patching already)\n\nRelated tickets: #335, #348, #478, #363, #483", "createdAt": "2012-12-06T17:17:41Z", "updatedAt": "2015-06-28T23:03:07Z", "closedAt": "2015-05-18T15:30:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 10, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "gauravmittal1995", "company": null}, {"login": "AnishChandran", "company": null}, {"login": "supunasp", "company": null}, {"login": "shivamdixit", "company": "Uber "}, {"login": "garan", "company": null}, {"login": "mr21", "company": null}], "comments_count": 22, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T17:13:48Z", "contents": "@leobalter now that we've got the modules split, we could just try to drop in jsdiff and see what happens.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T17:17:46Z", "contents": "I'm thinking about how is the best way to bring jsdiff code, maybe as a npm dependecy and using its dist file in the build process or as a git submodule or anything else.\nanyway, I'll work on this patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-02-01T19:49:03Z", "contents": "@jzaefferer: I tried to use kpdecker/jsdiff without much success.\nSee: https://github.com/leobalter/qunit/tree/jsdiff\nThere are a lot of things that doesn't make me feel comfortable with this patch (and that's why I am not requesting a merge yet), I'll try to list some here.\n\nThe way QUnit is built from src files is unfriendly to add external dependencies, I tried something that doesn't appealed fine to me. I would like to first refator the src files to turn them all into modules that would pass through JSHint check by themselves. Doing this I would wrap JsDiff inside intro and outro src files, preventing it to noise the global scope.\nNot all the main methods from JsDiff are covered by tests, and I don't feel they are enough as the proper method we would use is still untested: JsDiff.diffChars.\nJsDiff uses a escape method that would conflict to our escapeText method and I don't feel it as totally reliable.\n\nThere are other arguments that I will still check if I am wrong or not but I would like to first try other solutions.\nBtw, I would like to see a repository of the actual QUnit.diff we are using, maybe that should be kept by the jQuery foundation or even by @jeresig himself, as he is the author.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T22:07:50Z", "contents": "I've started reading jsdifflib code to implement it and I got a question: is jQuery Foundation compatible with their kind of license?\nRef: https://github.com/cemerick/jsdifflib/blob/master/difflib.js#L1-L30", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T23:10:34Z", "contents": "I tried to implement jsdifflib on https://github.com/leobalter/qunit/tree/364-jsdifflib but is far from perfect yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-05-19T11:24:37Z", "contents": "The cemerick/jsdifflib I used in the VisualEditor test suite works, but has problematic rendering. Its css selectors conflict with QUnit. And because its output is inside the list item and table cell of QUnit, css rules of QUnit also wrongly apply to the table cells of the diff rendering. The result is a mess for anything other than short and simple values.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-19T12:15:40Z", "contents": "Regarding the license: Its under BSD, which should be fine for us. @scottgonzalez can you confirm that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-19T12:44:04Z", "contents": "We can probably include Simplified BSD since it's almost the same as MIT, but this uses Modified BSD which contains the no-endorsement clause. We'll need to talk to @joelgkinney about it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-02T20:15:33Z", "contents": "@jzaefferer @leobalter Hey, I want to work on this for GSoC 15. Can u help me get started??", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnishChandran", "authorAssociation": "NONE", "createdAt": "2015-03-03T20:04:20Z", "contents": "I would like to contribute ! Can someone get me started ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T20:18:23Z", "contents": "There some parts of the current diff tool that we would like to enhance. We can improve its code or use another external tool, if it doesn't bring more problems to deal with.\nWe can look at the following issues to see specific points to lead the way to improve it:\n\n #335: Show diff only when it helps\n #348: Confusing line breaks\n #478: Backslash in string inconsistency\n #363: Diff only leafs for (big) objects\n #483: QUnit.diff should be given dumped values before html escape", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnishChandran", "authorAssociation": "NONE", "createdAt": "2015-03-04T19:05:16Z", "contents": "I thought of starting with #335  It\u00b4s a great idea to use the length factor to determine whether the diff is valid or not ! Changing the head.js to check the length condition at first would help this ryt ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T22:20:11Z", "contents": "It\u00b4s a great idea to use the length factor to determine whether the diff is valid or not !\n\nAs I wrote in #335, comparing the length isn't as easy as it seems.\n\nChanging the head.js to check the length condition at first would help this ryt ?\n\nI'm not sure what head.js you're referring to.\nAnyway, I think in this case it would be good to start with a few diff test cases that show the potential for improvements. A group of actual/expected values that currently end up with more or less useless diffs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "supunasp", "authorAssociation": "NONE", "createdAt": "2015-03-05T06:09:58Z", "contents": "Gsoc 2015 - QUnit - Better diff output\nI am interested in this and I am trying to understand the code any help would be great", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-05T11:34:19Z", "contents": "@leobalter @jzaefferer Hey, How does the following look?\n\nThis is using google's diff-patch-match with some additional changes done by me. Currently its supported for strings, but we can add it for array objects as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-05T18:04:06Z", "contents": "The diff should work not only for strings, but for dumped object representations. See our QUnit.dump to check how it shows arrays, functions, objects, etc.\nI can't say how  good the diff looks from 2 strings only, it needs more information.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-05T18:06:39Z", "contents": "@asped08, if you write a failing assertion, (like assert.equal({ foo: \"foo\" }, { foo: \"bar\" })) you can see the current diff in QUnit's  test report. From there, there are some fixes and improvements on the already addressed issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnishChandran", "authorAssociation": "NONE", "createdAt": "2015-03-05T19:49:52Z", "contents": "I just thought that we could deal with #348  first since it seems to be little less complicated\nhttp://fiddle.jshell.net/sj6kdj9g/\nIs this an simple example about confusing line breaks in diff ? since the \"gre\": \"foo\" should be aligned with \"foo\": \"bar ? should we focus on qunit.js and qunit.css and change the way in which the diffs are displayed ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-11T01:03:47Z", "contents": "Just wanted to know that what are the issues in using jsdifflib directly? If we directly import it as a module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "garan", "authorAssociation": "NONE", "createdAt": "2015-04-08T04:30:31Z", "contents": "Just a heads-up.\nI thought I would mention prettydiff here, to make sure you guys have considered it.\nI have been using jsdifflib, as it looked to be the best option, months ago (not sure why I skipped prettydiff ..probably seemed like too much at the time).\nHowever, I only use difflib.SequenceMatcher() and found jsdifflib code easy to adapt.\nPrettydiff was originally developed from jsdifflib and has been developed quite a bit further.\nThe only feature of prettydiff that I'm interested in is character-diffs.\nHowever, if you are displaying on the front-end, you might want to check it out.\nCheers.\nP.S. These 'diff' modules really should keep their diff code separate, ideally in a separate module.  I'm tempted to fork..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:30:29Z", "contents": "On the list above, only #363 is still open, and we have a WIP PR for that. I don't think we need this meta ticket anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mr21", "authorAssociation": "NONE", "createdAt": "2015-06-28T23:03:07Z", "contents": "@garan, I recently finish a diff implementation here: https://github.com/Mr21/diff.js\nIt's propose only a window.diff() who takes two arrays and that's it.\nSo if you want to make a diff between two strings you can do:\nresult = diff(\n    \"first_string\".split(\"\"),\n    \"second_string\".split(\"\")\n);", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 365, "url": "https://github.com/qunitjs/qunit/issues/365", "title": "oldIE don't respond to module picker selection changes", "contents": "QUnit is supposed to reload with the correct value of URL parameter \"module\" when I interact with the upper right drop-down, but this isn't working in IE6-8.", "createdAt": "2012-12-10T03:52:06Z", "updatedAt": "2012-12-10T09:24:15Z", "closedAt": "2012-12-10T09:24:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 369, "url": "https://github.com/qunitjs/qunit/issues/369", "title": "oldIE don't respond to urlConfig checkbox changes", "contents": "This is the same as #365, but for the checkboxes.", "createdAt": "2012-12-16T16:47:21Z", "updatedAt": "2016-11-01T16:28:59Z", "closedAt": "2012-12-16T22:39:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 371, "url": "https://github.com/qunitjs/qunit/issues/371", "title": "Indicate test suite progress", "contents": "It'd be nice to have some indication (however imprecise) of test suite progress. My idea is to turn the banner into a progress bar, but other options would be equally valuable.", "createdAt": "2012-12-17T01:11:25Z", "updatedAt": "2014-02-13T23:21:18Z", "closedAt": "2014-02-13T22:57:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T11:55:31Z", "contents": "I like the idea. Instead of counting tests, we could also record the total time it took for a previous run, store that in sessionStorage and then just assume an average per test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:48:40Z", "contents": "We can revisit this one #350 is implemented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:57:00Z", "contents": "Looking at the PR again, this doesn't seem useful. If at least one assertion fails, it should be very obvious that the suite has failed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 374, "url": "https://github.com/qunitjs/qunit/issues/374", "title": "Implement Assertion constructor with test context", "contents": "To fix #331, and generally make our code more scaleable and flexible.\nEach test() will be given an instance of Assertion which has an internal reference back to the Test object, so that they can easily be called asynchronously.\nIn addition to the assertion helpers, it could have the following built-in to the context based system as well:\n\nasync()\ndone()\nexpect()\n.not (instance of itself with internal reversal)", "createdAt": "2012-12-17T16:54:14Z", "updatedAt": "2014-06-24T15:33:19Z", "closedAt": "2014-06-24T15:27:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "rodneyrehm", "company": "Deutsche Telekom"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-18T14:18:37Z", "contents": "I'm not sure why you need to instantiate Assertion for this. Simply map the available assertions to Test.prototype and use this within an assertion to access the test instance. This should be more memory/garbage collector friendly. To a user it might look like:\nQUnit.test(\"foo\", function(test) {\n  test.equal(\"foo\", \"bar\", \"context, anyone?\");\n});\nyou could also run the test's callback function in the scope of the test instance, allowing\nQUnit.test(\"foo\", function() {\n  this.equal(\"foo\", \"bar\", \"context, anyone?\");\n});\nhaving the test instance available in an async test would also allow calling test.abort(), should a test determine that any subsequent assertions/tests would fail anyways\u2026", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T18:04:27Z", "contents": "Whether Assertion, Test or TestPublic extending TestInternal is an implementation detail. I'd prefer to have an exposed prototype with only the assertion helpers to avoid conflicts and make it easy to do things right (and harder to do things wrong). But sure, it makes sense to have it as both context and argument, whatever works best. We'll see during implementation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-31T10:56:40Z", "contents": "#583 demonstrates the issue that this ticket is supposed to address.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 375, "url": "https://github.com/qunitjs/qunit/issues/375", "title": "Better stack traces for exceptions in async tests", "contents": "Currently, if an exception happens after stop() was called in a test (but before start()), QUnit is smart enough to associate the error with the test.\nHowever, the output associated with the test does not provide file/line of the test itself.", "createdAt": "2012-12-17T22:42:08Z", "updatedAt": "2014-02-13T23:21:48Z", "closedAt": "2014-02-13T22:49:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tomdale", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tomdale", "company": "@linkedin"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T11:51:45Z", "contents": "How do you make an async test fail with an exception and still see the output? Usually the test runner hangs in that case, as start() doesn't get called anywhere.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:49:50Z", "contents": "Closing, since I can't reproduce the issue (see comment above).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 376, "url": "https://github.com/qunitjs/qunit/issues/376", "title": "testing a series of events", "contents": "It would be nice to have a more semantic declaration of asnyc tests, that are comprised of multiple async tests. What I'm doing right now:\ntest(\"foo\", function() {\n  stop(3);\n\n  foobar.on(\"first\", function(data) {\n    // some assertions\n    start();\n  });\n\n  foobar.on(\"second\", function(data) {\n    // some assertions\n    start();\n  });\n\n  foobar.on(\"third\", function(data) {\n    // some assertions\n    start();\n  });\n\n  foobar.trigger();\n});\nwhat I would like this to change to is something along the lines of\nstepTest(\"foo\", function() {\n  steps(3);\n\n  foobar.on(\"first\", function(data) {\n    // some assertions\n    step(1, \"first step\");\n  });\n\n  foobar.on(\"second\", function(data) {\n    // some assertions\n    step(2, \"second step\");\n  });\n\n  foobar.on(\"third\", function(data) {\n    // some assertions\n    step(3, \"third step\");\n  });\n\n  foobar.trigger();\n});\nsteps() would pretty much work like stop. step(num, message) works like start, except that it additionally asserts the sequence (1, 2, 3). This allows better error messages than \"test xyz timed out\" (and you have to figure out which step failed yourself).", "createdAt": "2012-12-18T09:52:39Z", "updatedAt": "2014-02-13T23:21:40Z", "closedAt": "2014-02-13T22:50:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rodneyrehm", "company": "Deutsche Telekom"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T11:34:43Z", "contents": "The step addon is somewhat similar: https://github.com/jquery/qunit/tree/master/addons/step - maybe it could be extended to also do the async control? Though for that #374 should be implemented first.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T12:47:17Z", "contents": "This also overlaps with #331 - not sure yet what the right approach is, but we certainly need to make async testing a lot more reliable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-05T08:04:38Z", "contents": "Update: The \"step addon\" that @jzaefferer referred to in an earlier comment has been moved to JamesMGreene/qunit-assert-step.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:50:56Z", "contents": "Closing due to lack of interest/value. The step plugin should be sufficient. We are definitely improving async testing in general (see #331).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 377, "url": "https://github.com/qunitjs/qunit/issues/377", "title": "Update to grunt 0.4", "contents": "Maybe this is something @JamesMGreene wants to help with?", "createdAt": "2012-12-18T12:35:14Z", "updatedAt": "2018-12-22T20:36:01Z", "closedAt": "2013-03-08T15:37:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T18:58:49Z", "contents": "I'm not intimately familiar with Grunt yet or anything but I have been using 0.4.0a for a while now, so I'm happy to try. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T02:48:10Z", "contents": "In progress.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 378, "url": "https://github.com/qunitjs/qunit/issues/378", "title": "Split the codebase", "contents": "Up for discussion: Currently the QUnit code base is just a single js file (with companion css). That makes it possible to include QUnit as a submodule, from tag or latest, no need to build anything. It also makes maintenance kind of a pain, as we're now dealing with 2k+ LoC in a single file. Finding things isn't easy. A good bunch of code lends itself to be moved to separate modules, like QUnit.eqiv or QUnit.jsDump. That would make cleanup of the remaining pieces a lot easier.\nWhen working on QUnit, we could use grunt watch to trigger a build for every change, similar how development on jQuery Core works.\nAs for usage of the QUnit \"binary\":\n\njQuery Core uses QUnit as a submodule: That could be replaced by npm install qunitjs and referencing node_modules/qunit/ directly or copying the files to whereever they're supposed to live. npm modules can contain \"binaries\", so whatever the build outputs can be published through npm, without commiting it to Git.\njQuery UI and jQuery Mobile include QUnit as copies in its externals folder. That is updated manually by copying over the files, so that shouldn't be a problem at all.\n\nWhat else is there that we need to take into account?", "createdAt": "2012-12-18T12:43:50Z", "updatedAt": "2016-11-01T16:28:59Z", "closedAt": "2013-10-25T17:09:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "rodneyrehm", "company": "Deutsche Telekom"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "dmethvin", "company": "Independent Consultant"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jdalton", "company": "Salesforce"}], "comments_count": 12, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2012-12-18T13:02:01Z", "contents": "This would also make #364 much less painful to resolve.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rodneyrehm", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-18T13:08:25Z", "contents": "+1 for splitting the codebase. I've been trying to get a grip on QUnit's source for some time now. It's a pain. A single file should only concern itself with a single topic - and there are a bunch of them:\n\ncore (initialization, state, event bus, \u2026)\nmodule, test, \u2026 (\"organizational infrastructure\")\nassertions ()\noutput visualization (\"rendering the DOM\", not required if you're running JS-only, btw.)\ndiff algorithm\ndiff visualization (\"rendering\", not required for JS-only)\nexception handling (btw. is TraceKit something?)\nprobably more\u2026\n\nthat would also allow throwing the addons into the central source directory.\nI'm fond of RequireJS and UMD. Since we're dealing with a test suite (that is not served to millions of people) I don't see the point in building a single optimized file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-12-19T10:51:32Z", "contents": "I think splitting this up is a great idea. Like @rodneyrehm, I also love RequireJS and UMD. However, I think it is important to build a single optimized \"qunit.js\" file for all those consumers who have not yet adopted RequireJS/AMD as their standard (which is also why we would use a form of UMD instead of AMD).\nAs far as UMD wrappers go, I've been the most impressed by what @jdalton did with Lo-Dash and I've been modeling my own UMD wrappers after that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmethvin", "authorAssociation": "NONE", "createdAt": "2012-12-27T17:00:58Z", "contents": "Having just looked at adding a feature to QUnit I am now on the side of splitting this up and having a build process. It would be nice to have the markup in a template that got compiled to JavaScript so there wouldn't be so much string slinging throughout.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-12-27T18:38:38Z", "contents": "I'd love to see the HTML pretty much sliced out all together (as feasible) so that QUnit could support multiple reporters types (like Mocha does) with minimal DOM overhead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T20:48:50Z", "contents": "Reminder: As part of splitting it up in a more modular code base, also rename the qunit/ directory to src/.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2013-03-07T21:00:12Z", "contents": "fwiw I get QUnit working in Rhino, Rhino --require, Ringo, Narwhal, Node, & browsers using:\n  /** Use a single \"load\" function */\n  var load = typeof require == 'function' ? require : window.load;\n\n  /** The unit testing framework */\n  var QUnit = (function() {\n    var noop = Function.prototype;\n    return  window.QUnit || (\n      window.addEventListener || (window.addEventListener = noop),\n      window.setTimeout || (window.setTimeout = noop),\n      window.QUnit = load('../vendor/qunit/qunit/qunit.js') || window.QUnit,\n      (load('../vendor/qunit-clib/qunit-clib.js') || { 'runInContext': noop }).runInContext(window),\n      addEventListener === noop && delete window.addEventListener,\n      window.QUnit\n    );\n  }());\nI shim timers for Rhino, setTimeout et all, via qunit-clib.\nThe addEventListener hack-around is smth I had to add to get it to work in recent versions.\nThe setTimeout of noop is to fake out QUnit's detections so I can shim it via qunit-clib.\nAfter QUnit is loaded I remove the addEventListener hack-around.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T21:47:41Z", "contents": "@jdalton thanks for sharing! The addEventListener shim shouldn't be necessary anymore once #401 lands.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-06-12T16:54:58Z", "contents": "src/\n - intro.js   // header + open closure\n - core.js\n - events.js  // issue #422\n - test.js    // Test constructor\n - assert.js  // QUnit.assert / QUnit.Assertion (issue #374)\n - diff.js    // QUnit.jsDiff\n - dump.js    // QUnit.jsDump\n - reporter/\n   - html.js\n - exports.js // window + module.exports\n - outro.js   // end closure", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-06-12T18:05:58Z", "contents": "\ud83d\udc4d\nWhat about a Module/Suite constructor?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-22T08:40:03Z", "contents": "When we do the split, we should remove the version numbers from source files and add those back as part of the build step. That way releases should become easier as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-07-11T10:11:39Z", "contents": "For bower publishing (see #461) we should change the release process to generate the current concatenated files including version numbers, commit that in a branch and tag it. jQuery UI does the same thing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 379, "url": "https://github.com/qunitjs/qunit/issues/379", "title": "Escape text", "contents": "There's a whole bunch of places where we build html strings by hand and don't escape test names or module names.", "createdAt": "2012-12-20T02:04:54Z", "updatedAt": "2012-12-20T02:11:33Z", "closedAt": "2012-12-20T02:11:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 380, "url": "https://github.com/qunitjs/qunit/issues/380", "title": "Show contents of text nodes in jsDump.node", "contents": "While writing unit tests for dom traversal I noticed that text nodes get dumped as <#text></<#text> (based on the nodeName for TextNode's [spec]).\nThe nodeValue (text content) is not dumped. This can make it rather difficult to figure out what went wrong as the jsDump outputs are the same for \"Actual\" and \"Result\" (whereas equal, comparing them by reference, returns false)", "createdAt": "2012-12-20T06:02:33Z", "updatedAt": "2012-12-20T06:24:00Z", "closedAt": "2012-12-20T06:24:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-dump"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 381, "url": "https://github.com/qunitjs/qunit/issues/381", "title": "Show attributes besides id, name, class in jsDump.node", "contents": "The way we dump nodes hasn't changed since 2008 (when jsDump was first introduced, in 4c7c688). It hardcodes 3 attributes, which it then reads from the properties (not attributes).\nNone of that makes any sense. We should instead use the attributes property, loop through and dump those.\nIE6 has the odd behaviour of including all supported attributes (even ones not explicitly set) through this.\nThough it doesn't matter for the test result, to keep the diff clean we'll want to filter out empty values for the above case.", "createdAt": "2012-12-20T06:05:41Z", "updatedAt": "2012-12-20T06:24:00Z", "closedAt": "2012-12-20T06:24:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-dump"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 383, "url": "https://github.com/qunitjs/qunit/issues/383", "title": "Fixed markup", "contents": "I've got into a situation where events are bound to certain element 'onDOMReady' without using delegate. I want to test some event behavior by triggering the event in the input.\nI am not sure how wrong I am by relying on this kind of behavior, but I can't find another way around so:\n\nI create a custom markup <div id=\"custom-markup\"></div>.\nSet the same #qunit-fixture styles.\nCreate the needed markup, let's say an input <input type=\"button\" id=\"myInput\" />\nThe event 'onDOMReady' binds a click event to the element\nI create a custom resetMarkup to be called on each required teardown which resets the modifications that any test could be done in the HTML\n\nWith that use case in mind I would suggest a feature that:\n\nAllows a custom markup (maybe #qunit-fixed) to be permanent (not to be removed as #qunit-fixture)\nAllows this custom markup to be atomic and any event/modifications to be removed (except events set before the first module call)\n\nAny thoughts?", "createdAt": "2012-12-24T13:16:41Z", "updatedAt": "2013-05-13T14:22:56Z", "closedAt": "2013-01-03T22:21:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "dmethvin", "company": "Independent Consultant"}], "comments_count": 7, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-12-24T20:28:12Z", "contents": "I could be wrong, but afaik this is exactly what #qunit-fixture is for. It isn't removed it is reset to the original value after each test, and cleaned from any modifications, data store and event handlers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-12-24T20:56:24Z", "contents": "Sounds exactly like #qunit-fixture to me, too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-12-26T10:58:53Z", "contents": "I probably was not clear enough. What I meant is that #qunit-fixture maintain the DOM state but the events are removed.\nA use case example: http://jsfiddle.net/SUfDY/\nAbove we declare two bindings onDomReady and use two separate tests to check for each. The event is available to the first one, and for the second is not.\nAgain I am not sure if this is encouraged since unit test is not the same as behavior test (triggering events and comparing modifications). But if there is a #qunit-fixture which serves for a similar purpose I suppose it is.\nMaybe if qunit-fixture use detach equivalent instead of relying on innerHTML this issue could be solved.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmethvin", "authorAssociation": "NONE", "createdAt": "2012-12-27T16:56:05Z", "contents": "...and any event/modifications to be removed (except events set before the first module call).\n\nThere are no W3C interfaces to determine which events are attached to an element, so there is no way for QUnit to selectively remove events on your behalf. You have to track and manage events yourself.\nThere are plenty of ways to create an initial state for all tests including events. You could register a module setup callback that attaches events at the start of each test for example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2012-12-28T00:41:43Z", "contents": "@dmethvin\n\n...There are plenty of ways to create an initial state for all tests including events\n\nBut still it would require to manually set the respective events for the test case instead of testing a single file behavior between the production and test environment (which is the desired goal).\nLooks like due to the lack of support from the spec the solution for this would be manually reverting changes made into a given markup each time a test is run, so the original event would be maintained and we could avoid re-parsing the same JS again via ajax", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-03T20:51:02Z", "contents": "If you use jQuery for events, this is taken care of automatically (through jQuery.clean and jQuery.remove). If you use a different library it might feature something similar, which you'd can then call from a hook in reset (no need to call it inside the test).\nFor vanilla DOM events however there is no way to unbind them, except by recreating the elements.\nI'd recommend instead that you don't touch #qunit-fixture, instead touch elements inside of it. It is a reset' container, but the element itself is not reset, only its contents.\nIf you attach events to an element inside, that element will be recreated after each test and any past events will be gone / unreferenced / garbage collected.\nClosing due to being impossible with the current DOM spec / browser support, and #qunit-fixture provides ways around this (by using a child instead).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2013-01-03T22:21:00Z", "contents": "Forgot to close...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 385, "url": "https://github.com/qunitjs/qunit/issues/385", "title": "Implement multi-value support for urlConfig UI", "contents": "For testing the jquery-migrate plugin we wanted this:\n\nAt the moment it's implemented by the jquery-migrate unit tests injecting the markup into the QUnit toolbar after it initializes.\nIs there a clean way to do this as a QUnit plugin, or would it perhaps make sense to add to QUnit itself?", "createdAt": "2012-12-27T17:34:26Z", "updatedAt": "2014-02-14T00:32:03Z", "closedAt": "2014-01-29T15:44:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dmethvin", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "dmethvin", "company": "Independent Consultant"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 7, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2012-12-28T15:56:06Z", "contents": "Makes sense to support in QUnit itself. We can support it by allowing array/object values in urlConfig in addition to strings.\nSomething like this:\n// Checkboxes (current format, will continue to be supported)\n\nurlConfig.push({\n  id: 'foo',\n  label: 'Enable foo',\n  tooltip: '...'\n});\n\n\n// Checkboxes (new format)\n\nurlConfig.push({\n  id: 'foo',\n  value: 'bar',\n  label: 'Enable foo',\n  tooltip: '...'\n});\n\n\n// Select (new format)\n\nurlConfig.push({\n  id: 'foo',\n  value: ['bar', 'baz', 'quux'],\n  label: 'Foo',\n  tooltip: '...'\n});\n\n\n// Select with custom display text (new format)\n\nurlConfig.push({\n  id: 'foo',\n  value: { bar: 'Barbara', baz: 'Baz' , quux: 'Quuxification' },\n  label: 'Foo',\n  tooltip: '...'\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2012-12-28T17:03:44Z", "contents": "Both the need and @Krinkle's proposed usage examples make sense to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-24T13:13:04Z", "contents": "I am sorry to disagree but I don't see this as a good choice in terms of CI. If it's needed to test something on multiple versions of jQuery (or any other thing) I would create an alternative routine to run the tests for each version, without a request for a human choice. It would take longer for testing everything, but it would make more sense for automated tests.\nIn a step by step example:\n\nload jQuery 1.6.4\nrun the tests\nload jQuery 1.7.2 (replacing the last loaded jQuery)\nrun the tests again\nload jQuery 1.8.3 (replacing the last loaded jQuery)\n...\n\nThe other way I see to do it and separate the html calling (being hard coded wouldn't be nice for maintenance). Doing this I would use the suggested select in QUnit toolbar to only change the link to each of the htmls.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-24T13:56:23Z", "contents": "@leobalter All of that logic already exists in projects like jQuery UI and jQuery Migrate. This is just exposing the underlying functionality through the UI.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-24T14:03:33Z", "contents": "@scottgonzalez oh, regarding this I don't have anything else to complain about this. Sometimes it looks uncertainly as I'm not up to date on all of the projects. Thanks for clarifying it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmethvin", "authorAssociation": "NONE", "createdAt": "2014-01-24T14:21:17Z", "contents": "@leobalter We already have the ability to automate the multi-version process with TestSwarm, but when testing a plugin that is supposed to work with multiple versions of a dependent file it's really handy to have the ability to do it from a manual run in the browser.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-01-27T19:58:29Z", "contents": "Besides, one doesn't exclude the other. One can still run multiple tests in automated CI (the values are read from the query string, we already do this at jQuery for jQuery UI in our Jenkins/TestSwarm set up). It merely serves as a de-duplication technique while at the same time allowing easy navigation from one to the other.\nSo instead of queuing something like /test/index-jq172.html and /test/index-jq183.html in your CI flow, you'd queue /test/index.html?jq=1.7.2 and /test/index.html?jq=1.8.3.\nIt has a minor advantage by not duplicating the rest of the test suite html, and discoverability for humans during local development (dropdown menu instead of navigating to the parent directory, it also transfers any other query parameters you may have set).\nThe only downside is that this technique requires one to do the loading in javascript (instead of an actual <script> tag). However, considering that this feature is completely opt-in, that shouldn't be a problem. If you don't want to or are in a restricted situation where this isn't possible, simply don't use it :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 386, "url": "https://github.com/qunitjs/qunit/issues/386", "title": "html entities", "contents": "If equal method's first argument or second argument is html text, equal method put html.\nFor example, result equal($(\"#a\").html(),true,\"ok\") submit.", "createdAt": "2012-12-30T14:52:08Z", "updatedAt": "2013-02-08T07:01:50Z", "closedAt": "2013-02-08T07:01:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pandanoir", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "pandanoir", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 7, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-03T15:42:35Z", "contents": "The html string is outputted correctly, as escaped markup. What's the issue? I'll reopen when a better description is provided.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pandanoir", "authorAssociation": "NONE", "createdAt": "2013-01-14T13:30:26Z", "contents": "Hello.\nThe bug is in the message which is said by equal() method.\nequal() method says message without escaping.\nThis is very difficult to understand.\n(I am japanese,so I cannot write English very well.If you don't understand, I show it.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-14T14:41:57Z", "contents": "An example would indeed be useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-14T15:04:10Z", "contents": "@pandanoir: In addition to your forthcoming example message text, feel free to also include screenshots of the display's current state vs. correct state.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pandanoir", "authorAssociation": "NONE", "createdAt": "2013-01-16T09:14:28Z", "contents": "http://pandanoir.web.fc2.com/snowball/qunit/test/\nThis site has the problem.\nI show a screenshot,too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-20T22:18:25Z", "contents": "I'm not seeing the error you described (and include on the screenshot), instead I first got two \"global error\" failures, then the suite passed just fine.\nBtw. why are you using LAB.js for such a simple testpage? You can probably avoid a bunch of issues by just loading the necessary scripts directly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pandanoir", "authorAssociation": "NONE", "createdAt": "2013-01-22T13:00:33Z", "contents": "Sorry. The ploblem has already been fixed. #379 This is the plobrem I said.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 388, "url": "https://github.com/qunitjs/qunit/issues/388", "title": "Incorrect code in documentation", "contents": "On this page in the documentation: http://api.qunitjs.com/QUnit.moduleDone/\nThe code snippet looks like this;\nQUnit.moduleStart(function( details ) {\n    console.log( \"Finished running: \", details.name, \"Failed/total: \", details.failed, details.total );\n});\n\nShouldn't it be this:\nQUnit.moduleDone(function( details ) {\n    console.log( \"Finished running: \", details.name, \"Failed/total: \", details.failed, details.total );\n});", "createdAt": "2013-01-03T17:32:59Z", "updatedAt": "2013-01-03T19:36:48Z", "closedAt": "2013-01-03T19:33:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aeisenberg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aeisenberg", "company": "Ganchrow Scientific"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-03T19:28:08Z", "contents": "Looks like you are correct. Any chance you could move this issue to the api.qunitjs.com Issue Tracker, though?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aeisenberg", "authorAssociation": "NONE", "createdAt": "2013-01-03T19:33:22Z", "contents": "Done. qunitjs/api#19", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-03T19:36:48Z", "contents": "Thanks! :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 391, "url": "https://github.com/qunitjs/qunit/issues/391", "title": "Modules can be out of order", "contents": "I noticed in a project i was working on that sometimes that module names would appear out of order in their drop down.\nCan't rely on key ordering in objects. Pull request to follow.", "createdAt": "2013-01-09T10:42:46Z", "updatedAt": "2016-11-01T16:28:59Z", "closedAt": "2013-02-02T14:15:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "jaredwy", "company": "@adobe"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 25, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-09T12:20:03Z", "contents": "I agree with @JamesMGreene, I have yet to see an example where the modules are out of order. I suspect there is a problem with the way you load the test suites?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-09T12:45:47Z", "contents": "I believe that the test.queue(); would also maintain the module order, right?\n@jaredwy is definitely not wrong that key order can be unreliable in the older browsers at the ECMAScript spec never guarantees order but I still don't even recall seeing this in, say, IE7.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-09T13:57:11Z", "contents": "The only case I know of where a browser didn't maintain insertion order was early Chrome, and after pointing at the spec for a little while, they quickly fixed it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-09T19:09:15Z", "contents": "They are currently showing in execution order for me. Everyone on our team complained about it being hard to locate specific modules so i made it alphabetical to aid in finding the executed module. Looking at it, it appears chrome dev tools may sort keys in their console output (strange).\n@jzaefferer pointing to the spec? the spec says \"The mechanics and order of enumerating the properties (step 6.a in the first algorithm, step 7.a in the second) is not specified.\" See, http://es5.github.com/#x12.6.4", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-09T19:13:53Z", "contents": "This is a screenshot of part of our dropdown. They are showing as the order executed, not alphabetically we have a lot of modules. It takes a bit of time for us to locate the module we want to run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-09T19:37:43Z", "contents": "@jaredwy How are you loading the test suites?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-09T19:43:03Z", "contents": "Tests are brought in using require.js. Once all the tests are loaded we call QUnit.start();\nNote, order is not impacted by the order in which they load either it is execution order.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-09T20:33:01Z", "contents": "Oh! The title of this issue and your initial comment definitely confused me. It seemed like you were implying that the modules themselves were executing in an incorrect order (i.e. not in the order their respective scripts are executed) or that the HTML report was displaying them in an incorrect order.\nIt seems that neither of those is true here, rather you just want to have the Modules dropdown sorted to make it easier to find the desired module. I think that is reasonable but not what I would expect to see by default (which would be a list that matches the execution order, IMHO).  However, I would assume it would also be easy to add a basic sort that can be invoked via the URL configuration... but again, probably not in core...?\nAs a workaround, your team could each add this a simple bookmarklet to your browsers to quickly sort the list using the following script (and assuming you have jQuery on the page): https://gist.github.com/4496619", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-09T20:37:08Z", "contents": "I am not understanding the reasoning behind wanting them sorted by execution order. That seems completely arbitrary and subject to change, not sure what benefit it adds as it makes it hard to locate modules you want to run quickly?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-09T20:53:05Z", "contents": "For example, if I am looking at the HTML report page and see that my module is the 2nd module executed, it's much quicker for me to select the 2nd item in the dropdown than to find it by name. But I do totally acknowledge your use case: large sets of modules are indeed difficult to manage sometimes. QUnit overlord @jzaefferer may be more in favor than I am, I'm just the new kid on the block. :)\nAnother option if your report is just too unwieldy is to utilize the QUnit composite addon to break your test run up into sub-pages.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-09T20:56:20Z", "contents": "Yeah as you said, this will not scale. When you have scrolled down and notice that a module is broken, now you have to count how many were broken, then count that many in the drop down.\nQuote i just recieved from a team memmber if it helps sway @jzaefferer ;) i am also not above bribes.\n\nWe are not quiet at the size we would start to split tests out into their own modules. The overhead of managing the extra code is just not worth it yet. Even with 20 modules it became hard to locate the module in the drop down.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-18T22:47:25Z", "contents": "Okay, lets zoom back out. I belief there is a misunderstanding here that was exposed when @jaredwy answered my question on how their test suite is loaded.\nThe modules should not be executed in alphabetical order, instead they should executed in the order they arrive. First and formost because QUnit can't know how many and when more modules are going to be loaded.\nSecondly, the dropdown menu. The dropdown menu currently matches the order of the modules on the page (so it is like a visually matching table of contents).\nLastly, coming back to the misunderstanding. The problem is that you're loading all test suites separately and asynchronously. Which means you're no longer have control over the order in which they arrive.\nI agree with @JamesMGreene that QUnit should not intervene in the module order. If you want to load the modules in a certain order, QUnit should stick with that. For example in MediaWiki we execute mediawiki-prefixed modules first and then various jquery plugins. And in jQuery we want \"core\" to be first, not \"ajax\".\nThough for the sake of atomic tests, it shouldn't really matter. It's all going to execute anyway. But if you have a logical structure, it makes sense to execute certain tests first. Not because they depend on it, but because those failures are on a lower level (for example in jQuery it makes sense to execute core, than callbacks, than deferred than ajax. Because if there are issues in callbacks, it might make ajax fail but you'd want to see the callback failures on top).\nThe drop down menu we can sorting alphabetically, that's fine. It won't affect the test execution.It does mean the menu order won't match the order of the tests on the page.\nThough I still recommend that you don't load test suites asynchronously. It seems like an optimisation that isn't very useful for a test suite, it can only cause inconsistencies and obscurity. That way you're responsible and fully in control over the order.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-18T23:00:56Z", "contents": "i am not changing the order of which the tests run. Sorry if that is clear, it is simply the order of the dropdown.\nThe only thing sorted here it is the order of the dropdown. The code in the pull request should make that clear, i hope.\nThis change is to simply help to locate modules to run easier (humans can scan lists quicker in alphabetical order rather than some arbitrary run order).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-19T20:55:05Z", "contents": "I'd prefer to see the dropdown's contents still in execution order by default but add a urlConfig to alpha-sort it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-20T01:51:45Z", "contents": "If that will get this pull request across the line i will happily add it.\nOn Sat, Jan 19, 2013 at 12:55 PM, James M. Greene\nnotifications@github.comwrote:\n\nI'd prefer to see the dropdown's contents still in execution order by\ndefault but add a urlConfig to alpha-sort it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/391#issuecomment-12460990.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-20T02:26:26Z", "contents": "@jaredwy As I asked before, why don't you just load the tests in the order you want them in?\n@JamesMGreene I find a urlConfig option unacceptable for a trivial thing like this. If we start adding options for UI, it will never end. Make a good UI and deal with it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-20T03:55:19Z", "contents": "Putting the onus of maintaining alphabetical order on humans is not feasible. Also, this is a large project we can not easily change the way we load tests.\nCould some one please explain how execution order scales for this drop down? With each module possibly containing tens or even hundreds of tests? How can you possibly keep track of what number module you are up to? How can you easily locate the relevant module in the dropdown?\nOn 19/01/2013, at 6:26 PM, Timo Tijhof notifications@github.com wrote:\n\n@jaredwy As I asked before, why don't you just load the tests in the order you want them in?\n\u2014\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-20T04:35:16Z", "contents": "It depends on what you think the order of your tests is.  If they are arbitrarily ordered, then yes, it will likely be impossible to keep track of them in the dropdown.  However, as @Krinkle mentioned, if you take a project like jQuery core, then the order of tests is very intentional: it starts with the most \"core\" code and spirals its way outward to the most high-level code.\nWhile I don't agree with @Krinkle's proposal to just order your tests in advance to be alphabetical, I do agree with his concern over bloating the UI with options... which again brings me back to my previous proposal of utilizing a bookmarklet \u2014 or, if clicking a bookmarklet on the occasions when you do need to use the module filter dropdown is too much effort, then just attach the functionality that the bookmarklet provides to a QUnit.done callback handler to sort the dropdown after the full test run has completed on your test page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-20T04:42:45Z", "contents": "If you let a loader put them in a random order then yes one would have a scale issues and have trouble locating modules. But since you're asking me/us personally, the answer is no, we don't have an issue with it because we don't have a system that (as a side-effect) shuffles them by design throwing them in a random order.\nIf the order is logical, it is logical. This can be alphabetical or not, whatever your system does, whatever your team considers convenient (e.g. \"main.a - main.Z, extra.a - extra.Z\" or \"core, utilities, child classes a-z\" or \"everything a-z\").\nIt isn't about a \"random order\" vs. \"structured order\". It is about a structured order controlled by you vs. a forced/uncontrollable order by QUnit.\nMaintaining alphabetical order wouldn't be put on humans. Especially in a large project this would never be the case because the tests would be loaded by a system (you're not gonna manually list out each <script> tag). Depending on this 'system' it can load things in a logical order or not.\nAnyway, urlConfig is out of the question but QUnit.config seems do-able. So like we have QUnit.config.autostart, QUnit.config.reorder we could have QUnit.config.sortModuleDropdown.\nThough this does have one catch. Like any config option, it needs to be set before init after QUnit is loaded.\nEven in async loaders, you'll be able to manage dependencies (otherwise you wouldn't even be able to ensure QUnit is loaded before the test suites, and the test suites before your main application). So ensure that your configuration file is loaded right after qunit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-20T04:44:33Z", "contents": "I am not proposing to change the order tests are run. The pull request is only changing the order of the dropdown.\nThis is to facilitate quickly locating a specific module you wish to run.\nSomething that, having spoken to a few people is something desired by a few.\nOn 19/01/2013, at 8:35 PM, \"James M. Greene\" notifications@github.com wrote:\n\nIt depends on what you think the order of your tests is. If they are arbitrarily ordered, then yes, it will likely be impossible to keep track of them in the dropdown. However, as @Krinkle mentioned, if you take a project like jQuery core, then the order of tests is very intentional: it starts with the most \"core\" code and spirals its way outward to the most high-level code.\nWhile I don't agree with @Krinkle's proposal to just order your tests in advance to be alphabetical, I do agree with his concern over bloating the UI with options... which again brings me back to my previous proposal of utilizing a bookmarklet \u2014 or, if clicking a bookmarklet on the occasions when you do need to use the module filter dropdown is too much effort, then just attach the functionality that the bookmarklet provides to a QUnit.done callback handler to sort the dropdown after the full test run has completed on your test page.\n\u2014\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-20T23:35:44Z", "contents": "Sorting just the options in the selectmenu seems fine to me. If we do that, we should just do it, without adding a configuration option.\nSince there seems to be some confusion - @Krinkle @JamesMGreene what do you think about just sorting the <option>s?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-21T00:41:35Z", "contents": "Thanks  J\u00f6rn.\nOn 20/01/2013, at 3:35 PM, J\u00f6rn Zaefferer notifications@github.com wrote:\n\nSorting just the options in the selectmenu seems fine to me. If we do that, we should just do it, without adding a configuration option.\nSince there seems to be some confusion - @Krinkle @JamesMGreene what do you think about just sorting the s?\n\u2014\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-21T01:30:56Z", "contents": "@jzaefferer: I'm not strongly opposed to sorting the dropdown if you aren't. My [perhaps unwarranted] concern was that having the module filter in execution order was the current preference, i.e. preferred by an important QUnit consumer like jQuery core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-21T08:13:53Z", "contents": "Yeah, sort the modules before generating the <option> elements. Then if any modules are added dynamically after the QUnit.start event, append to the bottom like we do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredwy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-21T14:41:32Z", "contents": "Pull request referenced at the top of this issue already does that.\nJared.\nOn 21/01/2013, at 12:13 AM, Timo Tijhof notifications@github.com wrote:\n\nYeah, sort the modules before generating the  elements. Then if any modules are added dynamically after the QUnit.start event, append to the bottom like we do.\n\u2014\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 393, "url": "https://github.com/qunitjs/qunit/issues/393", "title": "junitlogger report xml file content not correctly generated", "contents": "Hello\nPlease assume that I have the following test :\ntest( \"AccountsView\", function() {\n    \"use strict\";\n    ok( 1 === 1, \"Passed!\" );\n    ok( 2 === 2, \"Passed!\" );\n    ok( 3 === 3, \"Passed!\" );\n});\n\nRunning junitlogger generate the following xml report :\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites hostname=\"localhost\" tests=\"3\" failures=\"0\" errors=\"0\" time=\"0.515\" timestamp=\"2013-01-16T16:21:17Z\">\n    <testsuite id=\"0\" name=\"undefined\" hostname=\"localhost\" tests=\"0\" failures=\"0\" errors=\"0\" time=\"0\"\n               timestamp=\"2013-01-16T16:21:17Z\">\n        <testcase name=\"AccountsView\" tests=\"3\" failures=\"0\" errors=\"0\" time=\"0\" timestamp=\"2013-01-16T16:21:17Z\">\n        </testcase>\n    </testsuite>\n</testsuites>\n\nI expect the testsuite tag to have a name \"AccountsView\" instead of undefined and I have only one testcase whereas I expect 3. The report content do not seem to be correctly built.\nPlease correct me if I'm wrong\nBest regards", "createdAt": "2013-01-16T16:34:11Z", "updatedAt": "2016-11-01T16:28:59Z", "closedAt": "2013-04-25T15:11:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lauterry", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "lauterry", "company": "PerfectStay"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "gboissinot", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 23, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T16:55:20Z", "contents": "testsuite == module in the QUnit world, though I would've expected a better default testsuite name, e.g. \"default\" or perhaps the page's URL.\ntestcase == test/asyncTest, so it is accurate that your testcase element has a name of \"AccountsView\".\nFinally, the tests count on the testcase is equivalent to the number of assertions executed in that test, e.g. in this case, your 3 ok calls.\nI am pondering if the testsuite element's tests/failures/errors attributes should be based on tests (i.e. testcase elements) rather than just being a sum of the assertion-based counts of the tests.  In other words, your example would look more like the following (noting the counts of the tests attributes as they roll-up):\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites hostname=\"localhost\"\n            tests=\"1\" failures=\"0\" errors=\"0\" time=\"0.515\" timestamp=\"2013-01-16T16:21:17Z\">\n    <testsuite name=\"http://localhost/yourTestPageUrl\" hostname=\"localhost\"\n               tests=\"1\" failures=\"0\" errors=\"0\" time=\"0\" timestamp=\"2013-01-16T16:21:17Z\">\n        <testcase name=\"AccountsView\"\n                  tests=\"3\" failures=\"0\" errors=\"0\" time=\"0\" timestamp=\"2013-01-16T16:21:17Z\" />\n    </testsuite>\n</testsuites>\nThoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T16:57:02Z", "contents": "@lauterry: I'm in the process of rewriting the JUnitLogger already as it does not mesh well with the Composite addon, so feel free to give any other suggestions/feedback by filing additional new issues.\n@jzaefferer @Krinkle Please make me the owner of this issue, thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T17:12:18Z", "contents": "@JamesMGreene Issues can only be assigned to repo collabs. Since assignees should also take care of review and eventual revert/backport/release, I'll oversee this one allowing you to provide a PR, which I'll then review.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T17:34:50Z", "contents": "Fair enough, thanks @Krinkle.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lauterry", "authorAssociation": "NONE", "createdAt": "2013-01-16T17:35:25Z", "contents": "I noticed this issue by giving the test xml report to Jenkins. The displayed report is not correct.\nHaving the following report processed by jenkins display a more correct report \ud83d\udc4d\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites>\n<testsuite name=\"AccountsView\" errors=\"0\" tests=\"3\" failures=\"0\" time=\"0.078\" timestamp=\"2013-01-15T15:42:33\">\n  <testcase classname=\"AccountsView\" name=\"Passed!\" time=\"0.031\"></testcase>\n  <testcase classname=\"AccountsView\" name=\"Passed!\" time=\"0.016\"></testcase>\n  <testcase classname=\"AccountsView\" name=\"Passed!\" time=\"0.031\"></testcase>\n</testsuite>\n</testsuites>\n\nSo for Jenkins, testsuite should be Qunit test and <testcase> should be Qunit assertions.\nI don't know what would be the equivalent to the Qunit module for Jenkins. Maybe the package attribute of testsuite tag.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lauterry", "authorAssociation": "NONE", "createdAt": "2013-01-16T17:40:21Z", "contents": "@JamesMGreene : How do you display your generated XML report? What do you use?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T17:43:51Z", "contents": "@lauterry Jenkin's XSD for JUnit shows that their testcase element can have an optional assertions attribute, which clearly means that testcase === QUnit.test.\nHowever, the testcase element also does not expect the attributes tests (akin to assertions, I guess), failures, or errors, all of which we are currently providing.  Those appear to only be expected on the testsuite element.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T17:44:57Z", "contents": "@lauterry We don't display our XML report, just have a CI build step (not on Jenkins) to parse the resulting XML file to verify there were no failures or errors.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T17:46:09Z", "contents": "@lauterry Also: if we did it your way, we would be showing every assertion even if it passed, which is not a behavior that I've ever seen in my [limited] experience with JUnit XML reports.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T19:55:42Z", "contents": "Here's an explanation of the end-behavior I'm intending for the JUnitLogger addon \u2014 hopefully with actual tests to verify these example results.\nReport Logic\nSo, taking a deeper look at the JUnit XSD for Jenkins again, here's the report logic that I've extracted.  I've used a bit of JavaScript pseudo-code plus XPath notations to shorten the descriptions of some of the conceptual values, hopefully that it makes sense to everyone:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites\n  name=\"{window.location.href || undefined}\"\n  tests=\"{count(./testsuite)}\"\n  failures=\"{count(./testsuite[number(@failures) > 0])}\"\n  errors=\"{count(./testsuite[number(@errors) > 0])}\"\n  time=\"{sum(./testsuite/@time)}\"\n>\n    <testsuite\n      id=\"{./position()}\"\n      name=\"{qunitModuleName || 'default'}\"\n      tests=\"{count(./testcase)}\"\n      failures=\"{count(./testcase[@status = 'fail'])}\"\n      errors=\"{count(./testcase[@status = 'error'])}\"\n      time=\"{sum(./testcase/@time)}\"\n      timestamp=\"{startingDateTime as ISO8601}\"\n      package=\"{qunitCompositeSuiteName || ../@name || undefined}\"\n      hostname=\"{window.location.host || require('os').hostname() || 'localhost'}\"\n    >\n        <properties>\n            <property name=\"userAgent\" value=\"{window.navigator.userAgent || 'node'}\" />\n            <property name=\"testFramework\" value=\"QUnit\" />\n        </properties>\n\n        <!-- Passed test -->\n        <testcase\n          name=\"{qunitTestName}\"\n          assertions=\"{count(`QUnit.push` calls)}\"\n          time=\"{durationInSeconds}\"\n          status=\"pass\"\n          classname=\"{../@name}\"\n        />\n\n        <!-- Failed test -->\n        <testcase\n          name=\"{qunitTestName}\"\n          assertions=\"{count(`QUnit.push` calls)}\"\n          time=\"{durationInSeconds}\"\n          status=\"fail\"\n          classname=\"{../@name}\"\n        >\n            <failure type=\"{assertionType}\" message=\"{assertionMessage}\" />\n        </testcase>\n\n        <!-- Erred test -->\n        <testcase\n          name=\"{qunitTestName}\"\n          assertions=\"{count(`QUnit.push` calls)}\"\n          time=\"{durationInSeconds}\"\n          status=\"error\"\n          classname=\"{../@name}\"\n        >\n            <error type=\"{errorType}\" message=\"{errorMessage}\" />\n        </testcase>\n\n        <system-out>\n            /* Redirect all `console.*` output (minus `console.error`), perhaps? */\n        </system-out>\n        <system-err>\n            /* Redirect all `console.error` output, perhaps? */\n        </system-err>\n    </testsuite>\n</testsuites>\nThere are a number of things about this output that differ from my current output (using a proprietary version of the JUnitLogger addon that pre-dates it) which I care enough about to call out:\n\ntestcase elements do not have a count of failures or errors. This makes sense for most languages/frameworks as a test typically halts immediately upon its first failure/error but QUnit does not. As such, it's great to know the actual failure/error counts per test. \ud83d\ude15\nfailure elements do not allow child elements, e.g. actual and expected elements indicating the value differences.\nerror elements (and upstream errors counts) are not currently pertinent to QUnit as all errors are captured and turned into failures instead.  Is it worthwhile to distinguish them?  Most testing frameworks do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T20:56:37Z", "contents": "An interesting post trying to dissect Jenkins' display of a JUnit XML report from a black box perspective: http://nelsonwells.net/2012/09/how-jenkins-ci-parses-and-displays-junit-output/\nThis would suggest that I'll need to revise the attribute values for testsuite/@package, testsuite/@name, and testcase/@classname in order to get anything decent to show in Jenkins.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gboissinot", "authorAssociation": "NONE", "createdAt": "2013-01-16T22:55:42Z", "contents": "For now, Jenkins junit integration doesn't use a strict mechanism to parse JUnit output but a custom Jenkins implementation. The Jenkins XSD mentioned refers to the xUnit plugin (https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin).\nxUnit plugin is the de-facto plugin for the ntegration of reprorts in a format different of Junit. From your analysis, if you are able to make an extensible style sheet (XSL), it could be integrated to Jenkins xUnit plugin (and therefore Jenkins) as soon as possible.\nDo you think is it possible for you to make an XSL?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-16T23:17:46Z", "contents": "@gboissinot: I'm well acquainted with XSL but I don't understand your question. You want an XSL stylesheet (yes, I know that's redundant but that's what I call them) to do what?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gboissinot", "authorAssociation": "NONE", "createdAt": "2013-01-16T23:31:43Z", "contents": "The objective is to apply an XSL to transform the current QUnit output to JUnit compatible to JUnit's Jenkins.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-17T18:45:10Z", "contents": "@gboissinot: Ah, I see. I think that's putting the cart before the horse since our data isn't structured appropriately yet and we have instances of missing assertion details during nested suite runs. :)\nWill Jenkins choke if there are unrecognized attribute nodes (e.g. failures and errors on a testcase element) or elements (e.g. actual and expected child elements, or just a text node child with the stack trace, under the failure/error elements) in the XML?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-17T19:44:38Z", "contents": "@gboissinot: Also, are you aware of an official JUnit XML spec/XSD/DTD somewhere that I can look at? We just extended the XML we knew of to best suit our needs but we can certainly adhere to a standard if we know what it is. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gboissinot", "authorAssociation": "NONE", "createdAt": "2013-01-17T23:05:11Z", "contents": "There is no strict standard in Jenkins for now. In general, in my knowledge, JUnit does not have an XSD. As I said, Jenkins uses a custom implementation. However if you use the previous XSD (mentioned above), Jenkins is able to read it correctly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-18T01:05:47Z", "contents": "@lauterry : @ mentions are auto-linked :-) and <code><foo></code> doesn't work as <foo> will be filtered out . Use backticks instead:\nFoo `<bar>` baz.\n\n(fixed it for you)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-02-05T21:04:13Z", "contents": "Personally, I am thinking that it would make more sense to have a separate JUnitLogger (for whatever current clients) vs. XUnitLogger (for Jenkins). Thoughts?\nThis also fits into the idea I've mentioned before (e.g. in #378, etc.) about making QUnit extensible for custom reporters (like Mocha).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T14:56:18Z", "contents": "I'd like to get a JUnit module in place that takes care of generating JUnit-style XML output in JavaScript, with a testsuite, usable both in node and the browser. See also jzaefferer/node-testswarm#8", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T15:58:11Z", "contents": "@jzaefferer How would you expect said module to be used? Various test output formats (i.e. JUnit vs. XUnit) generally require some different data that may not be easy to reconcile.\nAs such, this idea makes me think of a generic json2xml converter, which I believe there are already Node.js modules for (though they may not be browser-compliant, i.e. expecting fs access, etc.).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T16:04:10Z", "contents": "Regarding json2xml, I've used https://github.com/estheban/node-json2xml recently. That works, though there is no npm release for the version in master. The published 0.1.1 code is useless. Might make sense to fork that and publish on npm under a new name.\nAnyway, I hope such a module, as long as it outputs something that Jenkins can use, would abstract enough details that QUnit or node-testswarm or other grunt plugins can use it without worrying about producing valid output.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-04-25T15:11:13Z", "contents": "Moved to JamesMGreene/qunit-reporter-junit#1.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 394, "url": "https://github.com/qunitjs/qunit/issues/394", "title": "QUnit.diff throws TypeError if object contains property \"constructor\"", "contents": "Please have a look at http://jsfiddle.net/qEdGD/ for a minimal test case.\nI was making some test cases to see how my tool would behave if the user would give some build-in function as input. QUnit itself however seemed to have trouble.\nThe error occurs at this line (line 2025 in the current git code):\nns[ n[i] ].rows.push( i );\nThe cause is that qunit splits the content on whitespace characters when making the diff, and when the spaces are stripped, it'll say 'constructor' which of course will trigger an error.\nI guess a quick fix would be adding a space behind each line.", "createdAt": "2013-01-18T21:40:31Z", "updatedAt": "2016-11-01T16:29:00Z", "closedAt": "2013-01-18T22:17:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Famlam", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Famlam", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-18T22:17:31Z", "contents": "No, the algorithm is pretty stable. Adding a space would mess it up in other edge cases.\nWe simply need to distinguish between the property existing in ns, and the property appearing to exist due to the default Object.prototype inheritance (var a = {}; a.constructor !== undefined;). Which we can do by checking hasOwnProperty.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Famlam", "authorAssociation": "NONE", "createdAt": "2013-01-18T23:01:36Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 395, "url": "https://github.com/qunitjs/qunit/issues/395", "title": "Fix test duration/runtime", "contents": "Originally added in #344, but has some shortcomings. Should use \"runtime\" instead of \"duration\", to make it consistent with the property passed to the done callback.\nShould also be provided for modules, not just tests.\nSee also de2353a#commitcomment-2414467", "createdAt": "2013-01-20T23:52:23Z", "updatedAt": "2014-01-03T10:46:18Z", "closedAt": "2014-01-03T10:45:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-21T00:58:08Z", "contents": "Very much agreed! \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-24T17:14:09Z", "contents": "It seems like the duration test is subject to a race condition. setTimeout isn't reliable. We need to give it more slack/tolerance.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:46:18Z", "contents": "Added runtime, deprecating the duration property on testDone. Created #499 to add the runtime property for moduleDone and #500 to remove the duration property in 2.0.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 396, "url": "https://github.com/qunitjs/qunit/issues/396", "title": "QUnit.load not firing when loaded using requirejs", "contents": "I can't understand why no one else has reported this so I am willing to concede that I am doing something wrong but I don't think so.\nI am using requirejs to load qunit. The issue I am encountering is that QUnit initializes itself in a window.load event handler (window.addEventListener(\"load\", QUnit.load, false);). However, when loading QUnit.js using require, the \"window.load\" event fires before the addEventListener call gets executed. Then when the listener gets registered, nothing happens.\nI have worked around this by adding a call to QUnit.load into my run() method but this seems like a poor way to handle the issue.", "createdAt": "2013-01-23T18:53:03Z", "updatedAt": "2013-01-31T16:14:18Z", "closedAt": "2013-01-31T16:14:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "MrBigDog2U", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "MrBigDog2U", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "aglemann", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-23T19:49:35Z", "contents": "There's an example for using QUnit with requirejs here: http://api.qunitjs.com/QUnit.config/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MrBigDog2U", "authorAssociation": "NONE", "createdAt": "2013-01-23T20:22:23Z", "contents": "That example is for when you're loading tests asynchronously (which I am also doing) but the issue above occurs when loading QUnit itself asynchronously.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aglemann", "authorAssociation": "NONE", "createdAt": "2013-01-24T13:26:22Z", "contents": "James Burke says not to do that:\nhttps://twitter.com/#!/jrburke/statuses/158020046705278977\nEdit: If it's helpful this is what I do:\n\nLoad QUnit with script tag.\nSet QUnit.config.autostart = false;\nLoad tests via RequireJS.\nCall QUnit.load(); QUnit.start();\n\n\".load()\" is called on window.onload but at that time the tests haven't finished loading so some UI elements (such as the module filter) aren't rendered correctly. Re-calling \".load()\" after all the tests have loaded appears to fix those issues.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T16:14:17Z", "contents": "Closing this, since I agree with James there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 397, "url": "https://github.com/qunitjs/qunit/issues/397", "title": "QUnit.equiv will erroneously declare that objects with circular references compare equal to those without", "contents": "If the circular reference holds the only path where there is a difference between actual and expected, QUnit.equiv will incorrectly return \"true\" - for example, the following test should succeed, but it fails:\ntest('compare self-referent to tree', function () {\n   var circularA = [0];\n   circularA[1] = circularA;\n   var treeB = [0, null];\n   equal(QUnit.equiv(circularA, treeB), false, \"Should not consider circular equal to tree\");\n});\nPersonally I don't mind much if ALL comparisons performed on circularly linked objects fail, assuming we don't get false positives like this - I lost a lot of time believing that a test had succeeded when really it had failed as a result of the misleading equality testing. The solution could be as simple as bailing out with \"return false\" at all the points where we currently just assign \"loop = true\", but this will result in a significant change in policy. For example, all those tests listed in deepEqual.js which are listed as (\"ambigous test\") (spelling error here) after line 1372 which currently return true, should return false.\nHowever, the general task of correctly comparing all circularly linked structures with all others is, I think, out of scope for QUnit.equiv, and it would be a lot more straightforward and consistent if we simply considered it a test failure when presented with any circularly linked structure - or else, if we simply declared that no circularly linked structure can compare equal to any other structure. The current system, where two structures which are straightforwardly different can compare the same, seems undesirable.\nOpinions on the best way out of this?\nCheers", "createdAt": "2013-01-25T06:39:47Z", "updatedAt": "2013-02-02T01:43:28Z", "closedAt": "2013-02-01T17:33:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "amb26", "company": "The Fluid Project"}, {"login": "jzaefferer", "company": null}, {"login": "gnarf", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T16:16:59Z", "contents": "Should try to fail the specific test provided here instead of bailing on all circular references.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-31T16:20:16Z", "contents": "Untested but maybe a fix for this?\nhttps://github.com/jquery/qunit/blob/7ba563003baa35f05be6742f1e2710d50eec97a2/qunit/qunit.js#L1709\nif ( loop && a[i] !== b[i] || !loop && !innerEquiv( a[i], b[i] ) ) {", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-31T17:00:58Z", "contents": "PR #402", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-31T17:14:01Z", "contents": "So the logic I used to fix this:\n\nIf either object/array has a circular reference for a key:\n\nThey must be ===\nOR They must both be circular to the same point in their own hierarchy\n\n\n\nI think that should cover most cases for testing circulars we can throw at it, including the already present ones, and your new test case plus some extras I added (look at the pull)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-02-02T01:43:28Z", "contents": "Thanks so much for this prompt and very thorough response : ) Much appreciated\nCheers Corey", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 398, "url": "https://github.com/qunitjs/qunit/issues/398", "title": "QUnit Cookbook issue", "contents": "Hi, in QUnit cookbook there is an error in documentation at \"http://qunitjs.com/cookbook/#asserting-results\" equal section. At the end of the paragraph it appears \"When you need a strict comparison (==), use strictEqual() instead.\" and it should be \"When you need a strict comparison (===), use strictEqual() instead.\" Three equals strict comparison.", "createdAt": "2013-01-25T10:10:05Z", "updatedAt": "2018-12-22T20:35:47Z", "closedAt": "2013-01-25T20:40:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "betitoglez", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "betitoglez", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-01-25T20:40:08Z", "contents": "Moved to qunitjs/qunitjs.com#34.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 400, "url": "https://github.com/qunitjs/qunit/issues/400", "title": "Add non-browser tests to Jenkins", "contents": "Should run at least against nodejs. Maybe others, if already available or installable in our CI environment.\nWhatever the actual issue in #399, would be nice to know that we're having some test coverage.", "createdAt": "2013-01-28T23:43:06Z", "updatedAt": "2014-01-02T17:11:25Z", "closedAt": "2014-01-02T17:11:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 403, "url": "https://github.com/qunitjs/qunit/issues/403", "title": "Latest qunit with phantomjs swallows exceptions from other scripts", "contents": "When running qunit (1.11.0) under phantomjs (1.8.1), exceptions in scripts that are not qunit test files are swallowed. They do not show up in phantomjs' console output.", "createdAt": "2013-01-31T18:49:00Z", "updatedAt": "2015-10-29T12:09:22Z", "closedAt": "2015-10-16T20:52:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ashwinr", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "ashwinr", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jonleighton", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 23, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T18:53:12Z", "contents": "Do you know if this is a new issue? (Did the same thing occur with QUnit 1.10?)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2013-01-31T18:53:38Z", "contents": "Attached code for testing the above issue: phantomjs and qunit files.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2013-01-31T18:58:04Z", "contents": "Just tested it against 1.10.0. Same issue :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2013-01-31T19:01:01Z", "contents": "One of the reasons this is important is because a lot of us use qunit with requirejs for unit testing, and so failures in requirejs (timeout/remote script errors) do not show up at all (makes debugging hard).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T19:13:36Z", "contents": "Understood.\nDealing with these globally unhandled errors (with window.onerror) in multiple libraries (QUnit, RequireJS, PhantomJS) is tough because most libraries will want to make the error as handled (to prevent it from screwing over the browser) but this prevents any other registered handlers for window.onerror from knowing about it.  The libraries also need to hookup their window.onerrror handler such that it doesn't blow away previously registered handlers.\nIn actuality, QUnit is doing the right thing on both accounts: it runs any previous registered window.onerror handlers first, only runs ours if the error wasn't handled by those previous handlers, and then our handler will only mark the error as handled (i.e. suppress it) if there is a QUnit.throws assertion being executed at the time:\nhttps://github.com/jquery/qunit/blob/58cef74b5d5f4993e7dc53e8ada7c97651d02cff/qunit/qunit.js#L1186-L1216\nSo, in reality, I think this may be an issue with PhantomJS (to which I am also a contributor) or RequireJS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2013-01-31T19:36:23Z", "contents": "Interesting. I just tested this again, and like you mention, QUnit does the right thing by returning false (allowing the default browser handler to run). As you can see, I'm not even using requirejs, so I believe the error might be in phantomjs' default onError handler.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T19:51:36Z", "contents": "Oh right, your example didn't have RequireJS involved.\nSo yeah, the likelihood that this is a problem with PhantomJS seems high but that is also troubling as we are currently just consuming the error signal that we receive from [Qt]WebKit. This may imply that QtWebKit is actually setting a window.onerror handler at some point that overrides QUnit's existing one... this seems unlikely given the timing of the page load, though, as I'm sure WebKit would want to get that handler on the page ASAP rather than waiting until after a bunch of scripts load.\n@ariya, any insights?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T20:15:05Z", "contents": "@jonleighton: Could this be related to any of your PhantomJS commits for stack traces (e.g. Breakpad, etc.)?\ne.g.\n\nariya/phantomjs@ad91d65\nariya/phantomjs@c9cf14f\nariya/phantomjs@439a58e\netc.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonleighton", "authorAssociation": "NONE", "createdAt": "2013-01-31T20:30:35Z", "contents": "Breakpad is a crash reporter, so not related.\nBut yeah, it might be related to my stack traces work - I don't know.\nI think WebKit 2.3 introduces error.stack natively though, so we might be able to do something with then when it gets merged.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2013-01-31T20:58:00Z", "contents": "@jonleighton since I'm not sure when all your changes went in, if you can indicate a version of QUnit before your changes, I can test it on phantomjs (if it helps at all).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonleighton", "authorAssociation": "NONE", "createdAt": "2013-01-31T21:00:13Z", "contents": "@ashwinr the changes are in phantomjs, not qunit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2013-01-31T21:14:17Z", "contents": "ah, sorry, my mistake. JamesMGreene's commit hashes comment seemed to point into qunit's repo, so I assumed qunit.\nI can take a look around your commits, and see if I find something. Do you guys know when 2.3 WebKit will get merged?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T21:35:20Z", "contents": "Oh, whoops, I forgot that the SHAs would auto-link to the QUnit repo.  I've fixed them now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:32:34Z", "contents": "@JamesMGreene @ashwinr @jonleighton could one of you revisit this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-01-04T22:26:13Z", "contents": "We have an unstable but mostly functional Phantom 2.0 branch [with an updated WebKit] that I can try it out with soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-22T14:14:24Z", "contents": "I've been looking into this with both Phantom 1.9.7 and 2.0.0-beta... definitely some oddities but they seem to all be on the Phantom side as far as I can tell right now. Phantom 2.0.0-beta regresses even further on error handling right now, unfortunately.\nUnless anyone opposes, I think we should create a new Phantom bug and close this one out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ashwinr", "authorAssociation": "NONE", "createdAt": "2014-02-22T14:19:39Z", "contents": "Could you clarify by what you mean \"even further\" please?\nSent from a mobile phone\n\nOn Feb 22, 2014, at 9:14, \"James M. Greene\" notifications@github.com wrote:\nI've been looking into this with both Phantom 1.9.7 and 2.0.0-beta... definitely some oddities but they seem to all be on the Phantom side as far as I can tell right now. Phantom 2.0.0-beta regresses even further on error handling right now, unfortunately.\n\u2014\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-22T14:24:02Z", "contents": "Sure. With my current Phantom 2.0.0-beta version, the phantom.onError and WebPage#onError handlers aren't being triggered at all, even if there isn't a registered window.onerror handler on the actual web page.\ncc: @vitallium", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:25:53Z", "contents": "@JamesMGreene @vitallium any updates on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T16:25:54Z", "contents": "Need to test with Phantom 2.0. @leobalter could you do that some time?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:52:05Z", "contents": "Phantomjs 2.0 is still not ready. PhantomJS 1.x is still bad. Whatever.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-10-18T02:45:00Z", "contents": "Phantomjs 2.0 is still not ready.\n\nHuh?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-29T12:09:22Z", "contents": "See Medium/phantomjs#288 which lead me eventually to ariya/phantomjs#12948", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 404, "url": "https://github.com/qunitjs/qunit/issues/404", "title": "Abstraction for switching jQuery versions", "contents": "Various projects have code in place to switch various jQuery versions for a given testsuite (migrate plugin, UI, mobile, validation etc). Should look into providing a better abstraction and UI to implement that.", "createdAt": "2013-01-31T19:33:29Z", "updatedAt": "2014-02-21T17:45:52Z", "closedAt": "2014-02-21T17:45:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T22:57:45Z", "contents": "We've extended QUnit.config.urlConfig. We should get the QUnit version that includes that into our projects to see if there's anything else we can do to further abstract that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:01:56Z", "contents": "Can you explain this one a bit more?  I'm not sure I follow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-14T00:32:03Z", "contents": "I think #385 is a good reference.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-02-14T06:13:23Z", "contents": "I think with the multi-value QUnit.config.urlConfig we have now, it should be relatively straight forward to implement this in any test suite without the amount of code that would need maintenance nor interesting to de-duplicate via a qunit plugin (or core).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-14T06:29:47Z", "contents": "Hmm, OK.  I can see the use of the multi-value urlConfig entries but specifically worrying about jQuery versions seems out of the scope of QUnit (if I'm understanding this issue correctly).\nWhen I want to test my jQuery plugins against multiple versions of jQuery, I just use this handy runtime jQuery version loading technique via a small bit of script on my test page plus the power of Grunt:\n\u00a0 \u00a0 http://markdalgleish.com/2013/01/testing-jquery-plugins-cross-version-with-grunt/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-21T17:45:52Z", "contents": "PR for jQuery UI to make use of the extend urlConfig: https://github.com/jquery/jquery-ui/pull/1202/files\nI don't think we need anything else inside QUnit. Loading JS files is out of scope.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 405, "url": "https://github.com/qunitjs/qunit/issues/405", "title": "Implement reporter interface", "contents": "We have JUnit, which can be improved a lot. Is there a difference to XUnit?\nThere's a plugin for TAP output ( https://github.com/twada/qunit-tap ), which we should at least link to, though maybe that could become an official add-on.", "createdAt": "2013-01-31T19:35:47Z", "updatedAt": "2018-12-29T20:26:35Z", "closedAt": "2017-03-31T04:09:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "twada", "company": "Towersquest Inc."}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 13, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T19:54:49Z", "contents": "I'd love to see a generic hook for \"reporters\" so that people can more easily write their own as well.\nAs for differences between JUnit and XUnit, @gboissinot explained a little bit in #393.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "twada", "authorAssociation": "NONE", "createdAt": "2013-02-03T06:32:06Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-04T23:30:20Z", "contents": "@Krinkle Any thoughts on a \"reporters\" hook or config? If none are specified before QUnit.load then we could default to a theoretical \"qunit-reporter-html\" reporter which would basically do what QUnit core does today.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-05T10:14:02Z", "contents": "@JamesMGreene how would that hook be different from the callbacks we have right now?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-05T12:58:25Z", "contents": "@jzaefferer Main difference is being able to essentially disable the default HTML reporter in favor of some othere reporter, thus reducing the work being done (and making it easier to integrate in Node.js). Does such an option already exist and I'm just unaware of It?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-05T13:56:46Z", "contents": "You can disable the HTML reporter by not including the <div id=\"qunit\"> element.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-05T14:30:21Z", "contents": "Sure, I suppose that makes total sense but it didn't dawn on me. Either way, I would like to isolate/modularize the \"qunit-reporter-html\" aspect of QUnit core when we tackle #378.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T05:19:23Z", "contents": "Making this dependant on #422. The reporter interface would be an abstraction around several event listeners.\nWe can then port the current html generation to be the default reporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T11:30:24Z", "contents": "@Krinkle: Makes sense. Should we still add a method like addReporter/reporters.add to hook them in, or just allow them to be standalone (loosely coupled)? Thinking we need the former in order to have enough knowledge as to whether to make the HTML reporter the default (or not).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T15:38:43Z", "contents": "@JamesMGreene Yes, I intend to create such method.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-09-30T12:53:17Z", "contents": "Plan for #351, #405 and #472:\n\nQUnit memorises the test results, gradually building an object that is essentially a data model of what is displayed in the browser.\nThe individual sub-objects representing a single assertion group (e.g. \"test\") are sent with the testDone events (fixes #351).\nThe final object is sent with the done event (fixes #472).\nThe reporter interface retroactively gets events for all items already in the linear model (fixes #405).\n\nWe can also consider having a linear model as well (either in addition or instead of the data model). The difference would be that that one would only contain assertions and the logical structure would be repeated in each object (e.g. which grouping it is part of).\nThe linear model could then be used to e.g. extract or provide a list of failed assertions only.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-30T00:26:30Z", "contents": "This is solved by #890 (before QUnit 2) and js-reporters (after QUnit 2)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:09:57Z", "contents": "We finally have this! \\o/", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta-ready", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lNzg4NjM1", "title": "JS Reporter", "description": "Once the js-reporter is far enough, issues in this milestone should be implemented/merged.", "createdAt": "2014-09-13T16:01:45Z", "dueOn": null, "number": 5, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 406, "url": "https://github.com/qunitjs/qunit/issues/406", "title": "Provide qunit-logging as an offical add-on?", "contents": "This looks like it would be useful in various places: https://github.com/keithamus/qunit-logging", "createdAt": "2013-01-31T19:50:14Z", "updatedAt": "2013-05-07T05:17:09Z", "closedAt": "2013-05-07T05:17:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "keithamus", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T20:01:24Z", "contents": "I'm quite sure I understand the full intent of that one from the README and a brief look at the code but I'd be interested to learn more. @keithamus?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keithamus", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-31T20:32:52Z", "contents": "It was a little hack I used to provide logging to the console, which at the time of using QUnit it didn't do. It's useful for things like PhantomJS, I think at the time I was also using it for node-qunit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T05:17:09Z", "contents": "Closing this issue per earlier discussions, we no longer accept new addons in the repository for QUnit core.\nIf there's interest it could perhaps be moved to the jquery organization.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 407, "url": "https://github.com/qunitjs/qunit/issues/407", "title": "assert.equal: Order of expected and actual output", "contents": "Hi there,\nis there a reason for choosing another order of expected and actual values as opposed to the existing xunits like JUnit or phpunit? If not, I think it would make sense to align it with the \"standard\". I sure tripped over this  :-)\nCheers,\nDaniel", "createdAt": "2013-01-31T21:34:41Z", "updatedAt": "2015-12-08T21:08:14Z", "closedAt": "2013-02-04T13:00:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "drosowski", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "drosowski", "company": "@SmartsquareGmbH"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "jzaefferer", "company": null}, {"login": "cherouvim", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-01-31T21:43:29Z", "contents": "While I personally like the order QUnit uses, I've often wondered about this too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2013-01-31T22:30:47Z", "contents": "I remember reading some discussion about this somewhere. Looks like there is no default consensus about it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-02-04T13:00:26Z", "contents": "CommonJS 1.0's assert module has this as well: http://wiki.commonjs.org/wiki/Unit_Testing/1.0#Assert", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-02-04T14:27:57Z", "contents": "Ah, right. It is therefore the same in Node.js's Assert module and NodeUnit, too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cherouvim", "authorAssociation": "NONE", "createdAt": "2015-12-08T09:06:38Z", "contents": "Would a configuration for switching these around in QUnit.config make sense?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-08T15:15:37Z", "contents": "@cherouvim probably not, the idea is to have the API remaining simple and consistent, in a way it's easy to work with QUnit on any project.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cherouvim", "authorAssociation": "NONE", "createdAt": "2015-12-08T15:19:49Z", "contents": "I agree with that mentality. The problem is that moving over from JUnit the assertions are a bit confusing. Not a showstopper though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2015-12-08T21:08:14Z", "contents": "The only problem with this is when using constants. So, to prevent a \"boolean-trap-like\" problem, one can always use the \"Assertion Declaration Pattern\" (yeah I just made that up):\nvar expected = 5;\nvar actual = parseInt( \"5\" );\nassert.strictEqual( actual, expected );", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 411, "url": "https://github.com/qunitjs/qunit/issues/411", "title": "assert.propEqual not guarded against circular structures", "contents": "As a result of #343 we got a new \"propEqual\" method which is usefully capable of comparing object trees in a \"constructor-blind\" manner, using a weaker semantic than QUnit.deepEqual. However, this method is not up to the standard of the rest of the framework - in particular, QUnit.deepEqual itself offers support for\n\ncorrectly comparing cyclic structures without bombing the stack (#100 - recently improved  by #397)\nnot being confused by primitive arguments such as strings - these are compared properly and highlighted in the difference output.\n\n\"propEqual\" was implemented using a utility function \"objectValues\" which performs a clone of the arguments before they are dispatched to QUnit.deepEqual, and it is deficiencies in this algorithm which are responsible for deficiencies in propEqual as compared to deepEqual.\n\nis caused by the cloning operation itself bombing out on cyclic structures, and\nis caused by the lack of a check for primitive arguments before copying - strings are copied as if they were arrays. The comments at the head of objectValues are clear about the latter restriction, but this contract limitation is not clear when passed up to propEqual itself.\n\nI enclose a screenshot of the results of comparing two string using propEqual. deepEqual by contrast shows a suitable result.", "createdAt": "2013-02-04T07:07:20Z", "updatedAt": "2017-04-03T20:42:30Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "amb26", "authorAssociation": "CONTRIBUTOR", "participants_count": 5, "participants_data": [{"login": "amb26", "company": "The Fluid Project"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "BraulioVM", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T05:10:59Z", "contents": "The circular structure should be detected and guarded against, indeed.\nPrimitive values being compared like objects is by design. Perhaps it should throw a warning instead. But treating them as strings instead of objects would be masking an error by the test author. I'd like to get this removed from deepEqual as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:30:40Z", "contents": "@Krinkle want to look into fixing this again?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-09T22:45:26Z", "contents": "@Krinkle I started working on a patch for this, I hope you don't mind (I just wanted to contribute fixing a bug and saw that this one was open yet).\nI started implementing a fix considering what Krinkle said in his first comment in this issue, but while I was writing tests for the new propEqual method I realised that I was not actually sure about what the method should return in certain cases. For example:\nfunction fn1() { return \"fn1\"; }\nfunction fn2() { return \"fn2\"; }\nvar first = { a : fn1 };\nvar second = { a: fn2 };\n\n\nassert.propEqual(first, second, \"Should they be equal?\");\nassert.propEqual(fn1, fn2, \"Should they be equal here?\");\nUsing the old propEqual, both would be right. I am not sure we wanted to keep the same behaviour as that may not be what the test author would expect. Should we keep it?\nFurthermore, Krinkle said we should throw a warning whenever the test author supplied a primitive object. I have been inspecting the codebase and can't seem to find what the best mechanism would be for throwing such a warning. Any ideas?\nThank you very much", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert", "help wanted", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 412, "url": "https://github.com/qunitjs/qunit/issues/412", "title": "Document browser support", "contents": "Once agreed on, also to be put on jquery/qunit.js.com.\nSee also #368 (comment)", "createdAt": "2013-02-04T19:25:31Z", "updatedAt": "2018-12-22T20:35:37Z", "closedAt": "2013-06-19T10:29:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-02-08T16:24:11Z", "contents": "Has there been any further discussion on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-02-08T16:28:37Z", "contents": "We should match whatever jQuery 1.x supports: http://jquery.com/browser-support/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-02-08T17:56:26Z", "contents": "I'm good with that but let's get it documented. \ud83d\udc4d :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T10:33:11Z", "contents": "Not super pretty, but it's there: http://qunitjs.com/", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 413, "url": "https://github.com/qunitjs/qunit/issues/413", "title": "List authors and verify CLA signing", "contents": "Use grunt-git-authors to list authors, then verify each one has signed the CLA (or is on the team, therefore signed our CAA). Ask authors without signed CLA to sign it.", "createdAt": "2013-02-05T11:25:40Z", "updatedAt": "2013-04-30T13:58:21Z", "closedAt": "2013-04-29T18:38:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "curvedmark", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-18T15:04:46Z", "contents": "Started working on this. Didn't bother for the last seven months, so about a dozen people to ping or email.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-18T15:49:00Z", "contents": "@JamesMGreene @Krinkle please keep in mind to check for CLA signage before merging. Going through a dozen unsigned names and pinging everyone isn't much fun. Not that there's anyone to blame besides myself, since I merged most of those PRs.\nI'm now waiting to hear back from more people. Will commit an AUTHORS.txt update once I got everyone.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T10:19:49Z", "contents": "There's two authors still missing that haven't signed the CLA. According to the git log:\nGavin Huang gravof@gmail.com f81632d\nJamie Hoover \u2694 dont.tase@me.com e9c052a\nBoth don't have their GitHub account matching the git configuration, so all I could do was email them, instead of pinging them on GitHub.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T18:41:07Z", "contents": "@jzaefferer: What about Gavin?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-29T18:42:17Z", "contents": "@JamesMGreene There was no response and his contribution was trivial.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T18:47:20Z", "contents": "@scottgonzalez: Ah, didn't look at the commit till now.  A quick Twitter search points to this guy, though: @gminuses.\n@gminuses: Are you the \"Gavin Huang\" who submitted the aforementioned PR?\n\nGavin Huang gravof@gmail.com f81632d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T21:02:14Z", "contents": "@JamesMGreene @jzaefferer It is available on GitHub when looking through the pull requests. There is only 1 pull request opened on that date: #321\nAlso, another reason to include \"Closes #\" for the pull request in the commit message when merging (in addition to a \"Fixes #\" for the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T21:22:28Z", "contents": "Well the PR suggests it may be from @curvedmark instead of @gminuses... not sure, though, as @curvedmark's listed name is \"Glen Huang\" instead of \"Gavin Huang\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T21:37:15Z", "contents": "@JamesMGreene The pull request proves he forked the repository on github, pushed this commit to github under branch \"patch-1\" with his authentication key, and then created that pull request.\nIt could be that he created the commit based on a patch grabbed from elsewhere from someone by the name of \"Gavin Huang\", but anyone can accidentally or purposely fake the author in a git commit. But there is no doubt that he pushed that commit to github and created the pull request.\nGiven the branch naming it is more likely that no manual git pushing was involved at all, but that it was done using the online code editor.\nAnyhow, the commit seems trivial enough that it isn't an issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-30T12:54:03Z", "contents": "Trivial or not, I think we all like giving and receiving credit when due.\n@curvedmark @gminuses Please sign the CLA and reply back here to claim credit for your QUnit PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "curvedmark", "authorAssociation": "NONE", "createdAt": "2013-04-30T13:45:01Z", "contents": "Hi, I'm the author of that pull request, sorry for being the \"pain in the ass\" that I'm the last one to sign the CLA. :)\nI abandoned the gminuses account long ago so I didn't receive your messages. I'm about to sign the CLA, but I don't feel comfortable giving out my mailing address. Why do you need such info? Is it possible to sign the CLA without it?\nAnyway, my PR is a such small modification, you guys can just discard it and write the code yourself if you are worried that I'm going to sue you with it. ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-30T13:54:03Z", "contents": "I don't feel comfortable giving out my mailing address. Why do you need such info? Is it possible to sign the CLA without it?\n\nDon't worry, this information will never be made public. It will only be visible to the jQuery Foundation, which we'll only ever use in the case that a legal issue arises (which of course won't happen for this specific contribution). However, it is required to sign the CLA.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "curvedmark", "authorAssociation": "NONE", "createdAt": "2013-04-30T13:58:21Z", "contents": "OK. Signed it. Hope you guys won't come to my house and rob me blind. :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 414, "url": "https://github.com/qunitjs/qunit/issues/414", "title": "QUnit.config for auto-scrolling to top", "contents": "Would it be possible to get a QUnit.config value to disabled the auto-scrolling to top of the page when a test is run? I'm running some tests asynchronously, and want to be able to turn off the auto-scroll feature.", "createdAt": "2013-02-12T19:12:26Z", "updatedAt": "2014-01-29T16:06:50Z", "closedAt": "2014-01-29T16:06:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gsaliba", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gsaliba", "company": null}, {"login": "gion", "company": "Expero"}], "comments_count": 1, "comments_data": [{"authorLogin": "gion", "authorAssociation": "NONE", "createdAt": "2013-07-05T10:11:41Z", "contents": "This is an issue for me too. I'm trying to test a jquery plugin that does some logic on the scroll event.\nIt's really annoying that I programmatically scroll the page and then it automatically scrolls back.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 419, "url": "https://github.com/qunitjs/qunit/issues/419", "title": "Move composite addon with all issues to standalone repo", "contents": "@JamesMGreene is this something you could take care of? Follow what @Krinkle did for the JUnit addon, except for issues. Those should be filed with all details in the new repo and closed here.", "createdAt": "2013-03-03T14:58:03Z", "updatedAt": "2016-11-01T16:29:00Z", "closedAt": "2013-03-18T21:28:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T14:58:12Z", "contents": "The repo is here: https://github.com/jquery/qunit-composite", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T16:05:30Z", "contents": "Yup, I'm planning on tackling this. Unfortunately, we can't just move the files for this one as Composite doesn't yet have any legitimate unit tests of its own yet and therefore expects QUnit core and the other addons to be present in order to run their test suites as its own unit tests (which misses a ton of edge cases that I'd like to test for anyway).\n@Krinkle and I discussed how to unit test this one for a few minutes... believe I will basically have to follow QUnit core's test suite model of running tests and then verifying their results. Sound about right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T16:10:53Z", "contents": "You could include QUnit as a submodule for running those tests. Or install via npm and link to node_modules/qunitjs/... (something I've been meaning to try anyway).\nI don't have much input on the tests itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 420, "url": "https://github.com/qunitjs/qunit/issues/420", "title": "Improve or drop phantomjs add-on", "contents": "We should either remove the phantomjs addon and refer to other solutions like https://github.com/gruntjs/grunt-contrib-qunit or move the add-on to a standalone repository and work with for example the grunt guys to make this add-on useful to them, so that they can actually use it instead of maintaining their own integration. Even if that doesn't happen, it should at least replace the bundled example, which is really bad: https://github.com/ariya/phantomjs/blob/master/examples/run-qunit.js\nMaybe we can just contribute the add-on to phantomjs and help them maintain that copy, instead of our own repo.\n@JamesMGreene @Krinkle what do you think?", "createdAt": "2013-03-03T15:03:02Z", "updatedAt": "2018-12-22T20:35:25Z", "closedAt": "2014-01-29T15:56:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "cowboy", "company": "@toasttab "}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 9, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T18:18:10Z", "contents": "I'd say contribute it to the PhantomJS example scripts, remove it from the QUnit repo, and then focus efforts on improving grunt-contrib-qunit instead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-03T18:24:00Z", "contents": "Well, unless you are confident we can make a standalone version of this useful to the Grunt folks....?\n@cowboy @ctalkington @tkellen Thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboy", "authorAssociation": "NONE", "createdAt": "2013-03-03T23:45:44Z", "contents": "If you have any interest in contributing to (or maintaining) the official grunt-contrib-qunit plugin and grunt-lib-phantomjs lib, we'd be very appreciative for the help!\nAlso, if you make a standalone version that can be back-ported into the Grunt plugin or the aforementioned lib, that would be great. What I wrote works pretty well, but I'm sure it could be improved upon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-14T15:40:24Z", "contents": "There's certainly enough interest in this plugin (no more add-ons), so we'll keep it. Have still to figure out where and how it should live on. Not everyone uses grunt, but if the grunt plugin can use it, all the better.\nWe should also send a PR or something to eventually replace the thing bundled with PhantomJS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-14T15:49:35Z", "contents": "Regarding the PhantomJS-bundled \"run-qunit.js\" example: ariya/phantomjs#412 (comment)\ncc: @ariya", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-06T04:01:49Z", "contents": "I reassigned this to @Krinkle for now as he is planning to take ownership of the PhantomJS plugin.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:30:22Z", "contents": "@JamesMGreene since Timo never create a repo for the plugin, would you be interested in taking that over? I really want to remove the code from this repo asap.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-29T15:56:53Z", "contents": "This is gone from master and won't be in 1.14 anymore. Anyone interested in this script is welcome to host it in a new repo.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-05T16:45:18Z", "contents": "Now available @ jonkemp/qunit-phantomjs-runner", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "meta", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 422, "url": "https://github.com/qunitjs/qunit/issues/422", "title": "Implement QUnit callbacks event listener style", "contents": "Open for discussion!\nI would like to change the QUnit core logging callbacks (e.g. QUnit.done, etc.) to utilize [theoretical] on, off, and emit methods.\nAlthough we can leave the current callback functions around temporarily for deprecation's sake, the new preferred usage would be as follows (using suggested names):\n\nQUnit.begin(fn)\n\nQUnit.on('run.start', fn)\n\n\nQUnit.moduleStart(fn)\n\nQUnit.on('module.start', fn)\n\n\nQUnit.testStart(fn)\n\nQUnit.on('test.start', fn)\n\n\nQUnit.log(fn)\n\nQUnit.on('assert', fn)\n\n\nQUnit.testDone(fn)\n\nQUnit.on('test.done', fn)\n\n\nQUnit.moduleDone(fn)\n\nQUnit.on('module.done', fn)\n\n\nQUnit.done(fn)\n\nQUnit.on('run.done', fn)\n\n\n\nThis change would bring with it all of the usual benefits of an EventEmitter-style setup:\n\non:\n\nListeners can be added \u2014 current\nListeners for custom events can be added, e.g. for use in QUnit addons \u2014 new\n\n\noff:\n\nListeners can be removed \u2014 new\n\n\nemit:\n\nListeners can be manually triggered, e.g. for use in QUnit addons \u2014 new\n\n\n\nOne more important functionality I would prefer to add is the equivalent of a stopPropagation method (or flag, or return value) that would allow a listener to prevent subsequently added listeners from being triggered.  The use case here would again be primarily for QUnit addons.\nFor example, in QUnit Composite, I would like to do something like the following:\n(function(QUnit) {\n\n// Custom event for QUnit Composite\nQUnit.on('suite.start', function(data) {\n    // log data about a SUITE starting rather than confusing it with a test starting\n});\n\n// Custom event for QUnit Composite\nQUnit.on('suite.done', function(data) {\n    // log data about a SUITE ending rather than confusing it with a test ending\n});\n\nQUnit.on('test.start', function(data) {\n    if (executingCompositeSuite) {\n        QUnit.emit('suite.start', data);\n        // Prevent all subsequently added 'test.start' listeners from being triggered\n        return false;  // example of a \"stopPropagation\" functionality via return value\n    }\n});\n\nQUnit.on('test.done', function(data) {\n    if (executingCompositeSuite) {\n        QUnit.emit('suite.done', data);\n        // Prevent all subsequently added 'test.done' listeners from being triggered\n        return false;  // example of a \"stopPropagation\" functionality via return value\n    }\n});\n\n// For illustration only; this code already exists [in better form] in PR #408\nvar executingCompositeSuite = false;\nQUnit.extend(QUnit, {\n    testSuites: function(suites) {\n        // When the first `test` in this set of `suites` starts (i.e. in `setup`), set:\n        // executingCompositeSuite = true;\n\n        // Run tests\n        // ...\n\n        // When the last `test` in this set of `suites` ends (i.e. in `teardown`), set:\n        // executingCompositeSuite = false;\n    }\n});\n\n})(QUnit);", "createdAt": "2013-03-06T21:01:56Z", "updatedAt": "2017-03-31T04:15:33Z", "closedAt": "2017-03-31T04:15:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 17, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-06T22:00:29Z", "contents": "I can't find it in an issue, but this is exactly what I've wanted for a while as well. All for it.\nBy the way, in this case events for 'suite.start' and 'suite.done' should probably be triggered by QUnit by default, this way other addons don't have to \"know\" about composite's custom events.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-06T22:11:27Z", "contents": "@Krinkle Apparently this issue lost a bunch of my fenced code block at the end.  Does your statement still stand?\nI generally agree that QUnit Composite should really be a part of QUnit Core but I know @scottgonzalez wanted to keep it as an addon pretty adamantly.  Can't recall what @jzaefferer's opinion was....", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-06T22:15:21Z", "contents": "I meant that the event suite.start / suite.done should be in core (and only fire once by default), I'm not referring to the Composite add-on itself. That way other add-ons that aggregate the information that want to support composite, don't have to special-case that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-06T22:18:34Z", "contents": "Oh, sure, so QUnit core would always fire those once but QUnit Composite would fire it n times?  That makes sense to me.\nAlthough... QUnit core firing it when also using QUnit Composite might actually lead to some confusion with the reporters as well.  We'll probably just need to implement it to see how that particular bit will shake out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T00:16:52Z", "contents": "I'd like to keep the composite separate, too. As for the suggested changes: I think the goal here should be to make these callbacks only a service API for add-on developers or whoever integrates QUnit into something else, like a CI tool. There shouldn't be any reason for regular QUnit users having to know about these. Which should probably be reflected on the API site as well.\nUnder that assumptions, those changes are fine. Its makes the API a little bit less convenient (doesn't matter as long as the existing methods are still around), while having more flexibility overall.\nThe \"stop propagation\" feature makes sense for the composite case, though it would be nice to a have a reference in another event emitter API that has something similar.\nAs for the event names: Why the dot inbetween? Is there any advantage over just suitestart, testdone?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T00:20:59Z", "contents": "It nicely groups events, I quite like that actually. It makes it much more predictable and intuitive.\nIf you want to avoid confusion with namespaces (as in jquery) we may want to use dashes instead.\n@jzaefferer Why is it less convenient this way? I think having 1 entry point for binding callbacks with an event name, is actually more convenient if anything. It is certainly more maintainable and easier to document.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T01:48:55Z", "contents": "@Krinkle already nailed my thoughts on it.\nThe dots are a preference of mine which allow for easily grouping (and/or wildcarding subscriptions in some other pub-sub frameworks, e.g. OpenAjax Hub); I'd be fine with dashes, too, as having namespacing available (via the jQuery-style dot syntax) might actually be very handy for addons, e.g. QUnit.on('test-start.qunit-composite-addon', fn).\nI also personally prefer this approach for its convenience in reducing the API surface area.  The only major inconvenience that comes to mind is lack of Intellisense/auto-complete for the event names vs. having event methods.  As a PhantomJS collaborator, I can also note that having all of the callback hooks being top-level properties (in their case) actually gets very annoying... to the point that I actually wrote a wrapper around them: BetterWebPage.\nI have never encountered the \"stop propagation\" functionality in any of the common event emitter libraries.  The OpenAjax Hub 2.0 has something similar but not quite the same either, see Line 713 on their latest code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-07T11:47:46Z", "contents": "@JamesMGreene QUnit actually had those top-level properties as well, that was the first generation. The current version is already a huge improvement, but obviously we can do better. Disregard my convenience argument.\nI'm okay with dashes as separators, though I still don't see why we need those. Also so far I don't see a need for namespacing. Let's not bother with that unless we really need it.\nAs for the stop-propagation feature: Is that really necessary to implement the composite add-on properly?\nAlso related to these callbacks: There was discussion somewhere for adding more information to each callback. The idea is that to display summaries, you don't really care when things start, so testdone could provide a summary of assertions, moduledone a summary of tests, suitedone as summary of everything. Especially the assertion aggregation is something most reporters duplicate right now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-08T02:42:06Z", "contents": "@JamesMGreene QUnit actually had those top-level properties as well, that was the first generation. The current version is already a huge improvement, but obviously we can do better. Disregard my convenience argument.\n\nOh, interesting bit of history... I did not know that!\n\nI'm okay with dashes as separators, though I still don't see why we need those. Also so far I don't see a need for namespacing. Let's not bother with that unless we really need it.\n\nOK, so dashes it is for now. Good, @Krinkle?\n\nAs for the stop-propagation feature: Is that really necessary to implement the composite add-on properly?\n\nWell, there are a number of ways to do this (and probably more than I'll list) but all of them require changing something or another:\n\nAllowing me to stop propagation on the testStart/testDone events and instead firing suiteStart/suiteDone equivalents, as previously mentioned in this issue.\nAllowing me to somehow add another key-value pair into the data object that gets passed to the testStart/testDone events (e.g. isSuite: true).\nMake the Composite addon a part of QUnit core.\n\n\nAlso related to these callbacks: There was discussion somewhere for adding more information to each callback. The idea is that to display summaries, you don't really care when things start, so testdone could provide a summary of assertions, moduledone a summary of tests, suitedone as summary of everything. Especially the assertion aggregation is something most reporters duplicate right now.\n\nIn #393, I mentioned the idea of rolling up the counts for the XML but I didn't mention rolling them up for the logging callback data.  I do think doing so would make total sense, though!  We also wanted to add duration to all of the *[Dd]one events as mentioned in #395. Finally, you, me, and @scottgonzalez discussed in IRC about how I wanted a hook to add data to events; see (2) in my previous paragraph for why.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-08T09:12:15Z", "contents": "I'm okay with dashes as separators [..] Also so far I don't see a need for namespacing. Let's not bother with that unless we really need it.\n\nOK, so dashes it is for now. Good, @Krinkle?\n\nSounds good.\n\nWell, there are a number of ways to do this [but] all of them require changing something\n\nI'm not sure I follow. In #1 you'd rely on composite firing its callbacks \"first\", this is imho a pattern one should avoid. In #2, for whom is the isSuite data? If it is only for the addon itself, it should store that information privately instead. #3 is another discussion, but whichever way it could be done in core, that way should be possible outside core as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-08T13:33:41Z", "contents": "@Krinkle All of these options are to allow for integration with the various reporters.\nI added another option (the original) below as (4). Also added a note to (2).\nUpdated options:\n\nAllowing me to stop propagation on the testStart/testDone events and instead firing suiteStart/suiteDone equivalents, as previously mentioned in this issue.\nAllowing me to somehow add another key-value pair into the data object that gets passed to the testStart/testDone events (e.g. isSuite: true). This requires the reporters to have more intimate knowledge of the Composite addon than I would like, though.\nMake the Composite addon a part of QUnit core.\nSet the executingComposite flag on a globally available object (e.g. QUnit) so that the reporters can check its state during testStart and testDone callbacks. This requires the reporters to have more intimate knowledge of the Composite addon than I would like, though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-08T16:30:04Z", "contents": "Can we implement the new callback style first, then look into the specific issue for the composite add-on again? None of the above looks like it needs to block this ticket. Let's deal with it in a separate ticket. By the time we get there, we'll know more anyway.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-09T03:45:08Z", "contents": "Sure, works for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-09T03:45:33Z", "contents": "@Krinkle Did you want to give this one a go or should I?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-09T06:42:00Z", "contents": "I'd like to take this one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-08T11:28:50Z", "contents": "Another thing this can enable for the plugins is adding \"data preparation\" events that allow a plugin author to override/extend the data object of an event that is about to fire. e.g.\nQUnit.on('test-start-dataprep', function (data) {\n  data.isSuite = true;\n  return data;  // or: `QUnit.emit('test-start-datachanged', data);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:15:32Z", "contents": "We don't have QUnit.off but it does not seem to be necessary so far. I'm closing this for now and I believe we should investigate this specific method in a separate issue if someone is interested.\nQUnit.on and an internal emit method are properly working!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "help wanted", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lNzg4NjM1", "title": "JS Reporter", "description": "Once the js-reporter is far enough, issues in this milestone should be implemented/merged.", "createdAt": "2014-09-13T16:01:45Z", "dueOn": null, "number": 5, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 424, "url": "https://github.com/qunitjs/qunit/issues/424", "title": "Remove jQuery.trim optimization", "contents": "via @JamesMGreene from IRC", "createdAt": "2013-03-07T22:53:53Z", "updatedAt": "2016-11-01T16:29:00Z", "closedAt": "2013-06-12T07:02:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 1, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-08T02:30:39Z", "contents": "Thanks. :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzNTE1", "title": "1.12", "description": "", "createdAt": "2013-06-12T07:03:42Z", "dueOn": null, "number": 1, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 426, "url": "https://github.com/qunitjs/qunit/issues/426", "title": "Allow selecting multiple modules", "contents": "Hi,\nThis is a feature request, not a bug.\nI'd love the ability to be able to select multiple modules at once.\nIn my test suite, I always have different modules like \"domains (valid)\" and \"domains (invalid)\". If I make a change to the part of the code that handles the (in this example) domains, I'd love to see both modules (but no other modules). Currently, I need to run those two modules individually, or I have to run all tests/modules (which takes pretty long).\nKind regards,\nFamlam", "createdAt": "2013-03-12T10:36:06Z", "updatedAt": "2014-01-03T10:28:18Z", "closedAt": "2014-01-03T10:28:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Famlam", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Famlam", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-12T11:00:00Z", "contents": "You can use the oldschool filter query parameter manually, in this case ?filter=domains should run all the domains modules. It'll also match whatever else has \"domains\" in their name, one of the reasons we don't promote that anymore.\nDoes that work for you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Famlam", "authorAssociation": "NONE", "createdAt": "2013-03-12T11:15:03Z", "contents": "Thanks for your reply. In my specific case, it would work for the less general module names, but unfortunately for domains that also triggers 5 other modules that contain \"Domains (anything here)\". Although it does leave a lot of unnecessary tests out (94% of total), still 53% of the results displayed are for the modules that don't need to be ran. (In this specific case of course).\nNaturally, I could rename the modules or comment out the other tests or similar, but I thought it could be a useful extension of QUnit (which is already great :D) to specifically run a couple of modules and nothing else than that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-12T11:45:03Z", "contents": "@Famlam How would you hope to use this functionality? Via URL params similar to the filter technique @jzaefferer described above or some other mechanism?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Famlam", "authorAssociation": "NONE", "createdAt": "2013-03-12T12:24:01Z", "contents": "The way that would be most preferred by me personally would be by using the current module selection box, where you can keep ctrl (or shift) pressed to select multiple modules. (Sort-of <select multiple=\"multiple\">, however, if you'd use that literally that would automatically result in a UI issue (in Chrome at least), because it then  automatically displays the <select> as a block instead of a listbox.)\nRegarding URL query parameters I don't know what is the most wise idea:\n\n?module=firstmodulename&module=secondmodulename&module=thirdmodulename (will multiple times the same key give issues?)\n?module=firstmodulename{separator}secondmodulename{separator}thirdmodulename (issue: which separator to use, since the separator may not occur in the module name).\n\nHowever, if possible, I would personally prefer to click the module names in the list box rather than typing them manually in the URL. Especially if a user in the future wishes to select, say, half of the modules, typing them all in the URL would be pretty time consuming.\nA second possibility within the UI would be:\n\nadd a menu item < multiple > to the end of the drop down menu that currently lists the module names (if the number of modules > 2)\nwhen clicked, a small overlay displays the modules in a  list box, where one could select all modules to show. (Possible other buttons/links here: 'select all' 'select none' 'submit' 'cancel')\nupon submit (enter key or a button click), the selected modules are loaded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T10:14:41Z", "contents": "I don't see any good way to address this. The ?filter= query is still the most reasonable option here, since everything else would be cumbersome for the user (listing multiple modules by hand) or make the UI unnecessarily complicated (your other suggestions).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:28:18Z", "contents": "wontfix, see my previous comment", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 427, "url": "https://github.com/qunitjs/qunit/issues/427", "title": "Expose testNumber (or testId) when calling testStarted and testDone", "contents": "The notion of testNumber already exists and it will be great to expose it in testStarted and testDone.\nFurthermore, since QUnit.init( ) is used for (re)initializing and it is useful to be used when running multiple batches of tests(run one batch, reinitialize, run another, etc.), it sounds logical to reset Test.count and testId back to 0.", "createdAt": "2013-03-15T12:59:01Z", "updatedAt": "2014-02-13T23:21:09Z", "closedAt": "2014-02-13T23:13:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ispasov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ispasov", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-19T16:04:26Z", "contents": "@ispasov What would you like to use it for? Although testNumber/testId should be consistent for a normal test page, keep in mind that it could vary per test for anyone loading their tests asynchronously (and without regard to load order).\n@jzaefferer @Krinkle Any initial thoughts on this one?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ispasov", "authorAssociation": "NONE", "createdAt": "2013-03-20T09:21:31Z", "contents": "@JamesMGreene I want to load a javascript file with tests, run them, get the results, unload the file and load another one. And I want to use the testNumber as an unique identifier, not the name since you can have tests with the same name. And since I want to make sure that the test counting starts from the beginning once I load a file, I need a way to reset the counting (and QUnit.init() looks like the best candidate for doing this -it is initialization after all).\nOf course I am open to any other suggestions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-20T10:11:03Z", "contents": "@ispasov can you explain why you need to use QUnit like that? Also, what does \"unload the file\" mean? You can't really unload a script, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ispasov", "authorAssociation": "NONE", "createdAt": "2013-03-20T12:15:23Z", "contents": "@jzaefferer you are right. I typed the \"unload the file\" part automatically without thinking. Please ignore this one.\nI am working on a test runner that supports QUnit. The goal is to allow the user to select some tests that can be defined in different files and run these tests. Everything works just fine, but at the moment I am using the name of the given test to uniquely identify a test method and I do not like this approach at all. That is why I came up with the idea to use the test number which can be unique if each javascript file is loaded one by one and the test count is reset each time. This way I am provided with an information that for example the 3rd test in foo.js is executed. Otherwise I only know that \"mySampleTest\" is executed.\nSo basically that's the goal I want to achieve. Of course there is still an issue with not being able to filter which tests to run, but that is a different story.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-20T12:50:15Z", "contents": "Why not just use an iframe so that it is a new page every time?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-20T12:57:56Z", "contents": "Yeah, running in an iframe should be a lot more sane. The composite plugin does that, so you can use that as a reference: https://github.com/jquery/qunit-composite\nWith an iframe you can also use the various options QUnit has for filtering which tests to run, via testNumber, module or oldschool filter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ispasov", "authorAssociation": "NONE", "createdAt": "2013-03-21T13:27:04Z", "contents": "@JamesMGreene , @jzaefferer Using iframe will help only if I set the source to be an html page (just like qunit-composite does). However, this is not my case.\nCurrently, testStarted and testDone do not provide a unique information about the test that has started or finished.\nAnd this is actually an issue for a test runner. That is why I proposed to expose the testNumber of a given test - it provides a unique information for a test in a given file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:13:00Z", "contents": "We've discussed this at a team meeting. The described usecase is not something we intend to support - in contrary, I've opened #530 to deprecate QUnit.init().", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 429, "url": "https://github.com/qunitjs/qunit/issues/429", "title": "Allow for error margin in floating-point calculations ", "contents": "I have a function which performs some floating-point calculations (Math.cos and the like) which means that a simple\nvar actual = myfunction();\nequal(actual, 0.5, true);\n\nwon't work, as the actual value was in fact 0.5000000000000001 (in other words has a tiny error), not exactly 0.5.\nWould it be possible to either allow test writers to specify a max acceptable error margin for a float-based equality test (and default to a sane low value if none is specified)?\nI quickly threw the following together, but it could be improved upon:\nvar maxFloatingPointErrorMargin = 0.000001; (might be a bit high for some uses)\n\nfunction floatingPointEqual(actual, expected) {\n  var delta = Math.abs(actual - expected);\n\n  ok(delta < maxFloatingPointErrorMargin, \"floating-point actual value was acceptably close to the expected value\");\n}\n\nand in the test replace equal with floatingPointEqual(result, 0.5).", "createdAt": "2013-03-20T21:13:19Z", "updatedAt": "2013-03-21T17:21:33Z", "closedAt": "2013-03-20T22:29:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chriskilding", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chriskilding", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-03-20T22:29:23Z", "contents": "You can use the closeEnough plugin (or add-on) for this: https://github.com/jquery/qunit/tree/v1.11.0/addons/close-enough.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 431, "url": "https://github.com/qunitjs/qunit/issues/431", "title": "Typo in \"@deprecated\"", "contents": "@deprecate since 1.8.0\nKept assertion helpers in root for backwards compatibility.\nextend( QUnit, assert );\n\nmissing a d :)", "createdAt": "2013-03-22T17:20:04Z", "updatedAt": "2016-11-01T16:29:00Z", "closedAt": "2013-03-22T18:03:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jsgoupil", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jsgoupil", "company": "JSGoupil, LLC"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-22T18:06:12Z", "contents": "@Krinkle: Does this qualify for a CLA check? \ud83d\ude1c", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-22T18:07:27Z", "contents": "@JamesMGreene Not a pull request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-22T18:10:07Z", "contents": "@Krinkle: Oh, that's true. \u263a\ufe0f", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 432, "url": "https://github.com/qunitjs/qunit/issues/432", "title": "Using a setTimeout stub can stop test suite from continuing", "contents": "If you replace the global setTimeout function with a stub (like sinon's useFakeTimers), it can permanently stop the test suite.\nWhen QUnit stops processing the queue to let the browser update, it calls the global setTimeout to schedule the next block of queue processing. If you are unlucky the test currently running may have stubbed setTimeout and its teardown step could still be on queue waiting to run. In this case, QUnit will end up using the stubbed setTimeout instead of the real one, and the entire test suite will stop running.", "createdAt": "2013-03-25T12:31:06Z", "updatedAt": "2013-06-12T07:04:24Z", "closedAt": "2013-05-14T15:50:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "qxjit", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "qxjit", "company": "Flipstone Technology Partners, Inc"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzNTE1", "title": "1.12", "description": "", "createdAt": "2013-06-12T07:03:42Z", "dueOn": null, "number": 1, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 435, "url": "https://github.com/qunitjs/qunit/issues/435", "title": "Ignored tests should not have a 'log' event emitted", "contents": "When working on grunt-saucelabs I encountered an odd problem where there was one test failure reported through the log callback, yet both the 'done' callback report and the in-browser report showed no such failure.\nTurns out that there is one scenario in which assertions happen outside the normal boundaries (between Test.init / testStart and Test.finish / testDone). Namely QUnit.reset.\nIn our own code test suite there is one test where this occurs:\n(function() {\n    var reset = QUnit.reset;\n    module(\"reset\");\n    test(\"reset runs assertions\", function() {\n        expect(0);\n        QUnit.reset = function() {\n            ok( false, \"reset should not modify test status\" );\n            reset.apply( this, arguments );\n        };\n    });\n    test(\"reset runs assertions, cleanup\", function() {\n        expect(0);\n        QUnit.reset = reset;\n    });\n})();\nAs expected, when Test.prototype.finish is called for the test named \"reset runs assertions\", it calls the QUnit.reset that is defined there.\nThere is a log event emitted for the ok() assertion.\nHowever, because the DOM update is already done for this test, it is never displayed.\nI'm not sure what the point of this test is and why we are purposely ignoring assertions within QUnit.reset, but it makes it hard to write a reporter that doesn't fail for QUnit's own test suite as this failure always shows up.\nTo work around it I made the reporter in qunit-saucelabs keep a buffer of assertions, and from the testDone callback, clear and ignore the buffer if obj.failed is 0.", "createdAt": "2013-03-28T22:48:17Z", "updatedAt": "2014-03-11T18:52:33Z", "closedAt": "2014-03-11T15:09:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "Jonahss", "company": "Cloud Grey"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "Jonahss", "authorAssociation": "NONE", "createdAt": "2014-03-10T19:25:15Z", "contents": "Ha!  grunt-saucelabs has been rewritten (to use Sauce's unit-test api) and this exact bug popped up again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-11T15:11:27Z", "contents": "I actually ran into this recently as well, while working on browserstack-runner. Since QUnit.reset is deprecated and will be removed from the public API, having this test in place doesn't seem to be useful anymore. Since that's the only way to run into this issue, I've just gone ahead and removed the test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Jonahss", "authorAssociation": "NONE", "createdAt": "2014-03-11T18:52:33Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 436, "url": "https://github.com/qunitjs/qunit/issues/436", "title": "Integrating Node.js with QUnit to Jenkins", "contents": "I'm trying to create a XUnit xml file for Jenkins from QUnit tests for a Node.js application.  I don't have the ability to run a browser or even a headless browser, also don't understand why I'd need one since the Node.js code doesn't deal with the browser.\nI've been searching all over and have only been successful using qunit-tap and 'prove' to create an XML file.  Prove required downloading a formatter which was a perl file.  We are trying to prevent using perl stuff.\nMy system is an Ubuntu VM. This is a task for work and my boss is asking for the minimal amount of packages and dependencies.  Our Node.js server is accepting web socket requests and passing messages back and forth with a legacy system written in php.\nQUnit's output seems to be a pretty print format, in a table, when I run my tests in the console.  It would be amazing to just get that into a flatter form with a flag!", "createdAt": "2013-03-29T17:06:14Z", "updatedAt": "2013-03-30T14:24:38Z", "closedAt": "2013-03-30T14:23:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ecokeley", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ecokeley", "company": "Ring Inc."}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-29T17:54:21Z", "contents": "Seems that you are really asking for an XUnit reporter but I'm confused why you keep talking about TAP output...?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ecokeley", "authorAssociation": "NONE", "createdAt": "2013-03-29T18:01:13Z", "contents": "qunit-tap to prove was the only way I could solve the problem.  Every other solution required browsers or pieces I didn't have/couldn't use.  I'd prefer using QUnit with Node and producing XML output.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ecokeley", "authorAssociation": "NONE", "createdAt": "2013-03-29T19:20:20Z", "contents": "Found the answer with NodeUnit.  Thanks though", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-03-30T14:24:37Z", "contents": "Closing since we already have other issues for Node integration.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 437, "url": "https://github.com/qunitjs/qunit/issues/437", "title": "It doesn't work with Modernizr.load (yepnope)", "contents": "Hello,\nThis code makes nothing:\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>test</title>\n    </head>\n    <body>\n        <div id=\"qunit\"></div>\n\n        <script src=\"./libs/modernizr/modernizr.min.js\"></script>       \n        <script src=\"test.js\"></script>\n    </body>\n</html>\n\n\nModernizr.load([{\n    load: [\n        './libs/qunit/css/qunit.css',\n        './libs/qunit/qunit.js'\n    ],\n    complete: function() {\n        test('test', function() {\n            var expected = true, result = true;\n            ok(result == expected, 'test');\n        });\n    }\n}]);\n\nIf I put the qunit files in the script tag it's OK. I really need for a project to load and execute qunit with yepnope.\nAny ideas please?\nRegards", "createdAt": "2013-03-30T14:23:57Z", "updatedAt": "2014-04-24T17:15:16Z", "closedAt": "2013-03-30T19:01:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sylouuu", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sylouuu", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "rod750", "company": "@Septimum "}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-03-30T19:01:30Z", "contents": "This code makes nothing\n\nDefine \"nothing\". Do you get any errors in the developer console in your browser? Also, what's in test.js?\nA quick test in jsFiddle (http://jsfiddle.net/Ncv5Z/) suggests it is a problem with Modernizr's load system. It doesn't invoke the 'complete' callback. Could be related to webkit bug #97982  since I did get MIME errors in the console.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sylouuu", "authorAssociation": "NONE", "createdAt": "2013-03-30T19:18:49Z", "contents": "Nothing means no error/warning, no output not even the qunit banner.\nYes the MIME doesn't match but loading js files are working usually, why not qunit? (with yepnope ofc)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rod750", "authorAssociation": "NONE", "createdAt": "2014-04-24T17:12:11Z", "contents": "Run QUnit.load(); before adding tests and it works.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 439, "url": "https://github.com/qunitjs/qunit/issues/439", "title": "Update JSHint options to jQuery baseline", "contents": "See jquery/jquery#1219 and http://contribute.jquery.org/style-guide/js/", "createdAt": "2013-04-09T12:56:56Z", "updatedAt": "2018-12-22T20:34:57Z", "closedAt": "2014-01-03T10:26:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:26:00Z", "contents": "By now a duplicate of #495", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 440, "url": "https://github.com/qunitjs/qunit/issues/440", "title": "pushFailure giving wrong error?", "contents": "Greetings,\nI'm setting up a project that uses QUnit 1.11.0 to test modules loaded in via RequireJS and is run via TestSwarm. During my debugging of getting all the components to play nice with each other, I kept seeing error messages pop up saying \"pushFailure() assertion outside test context\", which didn't make any sense to me since I was only testing incredibly simple assertions like ok(true, 'true'); without QUnit modules\nDebugging into it, I found that every time I was getting these errors, it didn't actually seem to be the correct error. Since I'm using RequireJS to load test modules, I need to defer the running of QUnit, so I had to set QUnit.config.autostart = false; and call start manually after all the modules were loaded.\nWhat was actually happening was the start function did its semaphore check, and found that the condition config.semaphore < 0 was true (for various reasons while getting things in order: because I had incorrectly set QUnit.autostart = false; instead of QUnit.config.autostart = false; or by having accidental double callback execution, etc) so it calls pushFailure with \"Called start() while already started...\", but the first thing pushFailure does is see that there is not a config.current and throw the new error telling me I have an assertion in the wrong place.\nCan someone enlighten me as to why this is? It seems to me to be a bug because after I get my start calls in order, everything works, so I'm not sure why in these conditions it thinks that the assertion being out of context error is more important than the  \"I'm already running\" error.\nIf there is a reason for this, awesome, but if there isn't, it could have saved me a bit of debugging time if the error message was actually correct.", "createdAt": "2013-04-12T21:57:57Z", "updatedAt": "2014-02-13T23:20:46Z", "closedAt": "2014-02-13T23:17:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rzurad", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "rzurad", "company": "Wiredrive"}, {"login": "gitgrimbo", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "gitgrimbo", "authorAssociation": "NONE", "createdAt": "2013-05-08T22:15:42Z", "contents": "Hi, I was getting similar errors using PhantomJS.\nI use this hack to deal with the issue with my RequireJS-based tests. I import my qunit.mod.js as a RequireJS shim in my tests, but using a regular script tag would work as long as you set the value of QUnit before importing qunit.mod.js.\n<script type=\"text/javascript\" src=\"require-config.js\"></script>\n<script type=\"text/javascript\" src=\"../../lib/requirejs/require.js\" data-main=\"test-main\"></script>\n<script>\n// disable autoload on hacked QUnit\nQUnit = { autoload: false };\nrequire([\"jquery\", \"qunit\", \"test-main\", \"path/to/test\", \"es5shim\", \"domReady\"], function ($, QUnit, testMain, testModule) {\n    testMain.buildTestSuite(testModule);\n    QUnit.load();\n});\n</script>\n\nAnd my qunit.mod.js, based on qunit.js 1.11.0, with links to the original code lines:\nL2152 - Pass any pre-existing QUnit object to the IIFE.\n}( (function() {return this;}.call()), /*grimbo: added test for initial config*/ this['QUnit'] ) );\n\nL11 - Add a parameter for pre-existing QUnit. Call it initialQUnit.\n(function( window, /*grimbo: added parameter*/ initialQUnit) {\n\nL688 - Extend the default config with initialQUnit, to pick up any existing values.\n/*grimbo: extend the initialQUnit to pick up 'bootstrap' properties. */\nconfig = extend(initialQUnit || {}, {\n\nL1184 - Use the new autoload config option.\n/*grimbo: added autoload check. autoload must be explicitly false to prevent. */\nif ( false !== config.autoload ) {\n    var _load = function () { console.log(\"QUnit.onload\"); QUnit.load(); };\n    addEvent( window, \"load\", _load );\n    //addEvent( window, \"load\", QUnit.load );\n}\n\nI couldn't get any other combination of autostart/autoload to work with my RequireJS modules in both the browser and PhantomJS environments.\nHope some of this might help if you're still having trouble.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-09T00:22:52Z", "contents": "IIRC, advice per @jrburke is to just include script tags for QUnit and configuration tweaks prior to your main require/define bootstrapping.\nHowever, as a huge proponent of RequireJS myself, I make use of the shim configuration's init callback:\nrequirejs.config({\n    shim: {\n        'qunit': {\n            init: function() {\n                this.QUnit.config.autostart = false;\n                return this.QUnit;\n            }\n        }\n    }\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:17:28Z", "contents": "We could look into this again if someone provides a testpage to reproduce the problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 441, "url": "https://github.com/qunitjs/qunit/issues/441", "title": "Expected and Result output for equals are reversed", "contents": "It looks like Expected and Result are being reversed at line 896 in version 1.11.0. The screencaps attached show the result displaying the expected value and the expected value displaying the result.  When I reverse the order of the variables for expected and result in the function call, everything seems to straighten out.\nI hope this is as simple as it looks to me. : )", "createdAt": "2013-04-17T19:16:34Z", "updatedAt": "2013-04-17T19:25:23Z", "closedAt": "2013-04-17T19:25:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cmstead", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cmstead", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 2, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-17T19:20:14Z", "contents": "The signature is documented as strictEqual( actual, expected, message ). Am I missing something here?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-04-17T19:25:23Z", "contents": "@scottgonzalez: Nope, you're right on. This \"issue\" comes up from time to time as many other test frameworks have them in the opposite order.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 442, "url": "https://github.com/qunitjs/qunit/issues/442", "title": "Selecting a Module from the ModuleFilter pull-down menu does not always consistently run the tests in that module.", "contents": "Steps to Repro:\n\nOpen a test suite with more than two modules so the module filter pull down menu appears\nClick the \"re-run\" link on any test so only that test runs (testNumber= will be appended to the QueryString)\nSelect a module from the module filter.\n\nObserve that only one test is executed, not the entire suite of tests in the selected module.\nThis is caused by the testNumber= value not being removed the QueryString.", "createdAt": "2013-04-18T13:03:43Z", "updatedAt": "2013-04-18T13:10:34Z", "closedAt": "2013-04-18T13:10:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jonnyreeves", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jonnyreeves", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 444, "url": "https://github.com/qunitjs/qunit/issues/444", "title": "QUnit Basic Example on Home Page", "contents": "I think there is some problem in the QUnit Basic Example.\nCan you improve the details provided in the home page?\nInstructions should include folder and file creation.\nSteps should be defined\n\nCreate a folder as \"QUnit_Example\"\nUnder it create \"resources\" folder\nDownload qunit.js and qunit.css\nCopy then under the resources folder as qunit.js and qunit.css\nCreate a file as qunit_example.html and enter below code\n\n<!DOCTYPE html><html><head>  <meta charset=\"utf-8\">  <title>QUnit Example</title>  <link rel=\"stylesheet\" href=\"/resources/qunit.css\"></head><body>  <div id=\"qunit\"></div>  <div id=\"qunit-fixture\"></div>  <script src=\"/resources/qunit.js\"></script>  <script src=\"/resources/tests.js\"></script></body></html>\nYour code for example case.\nThere should be modification in the html code /resources/qunit.js, /resources/qunit.css and /resources/tests.js should be either replaced by ./resources/... or resources/...\n<!DOCTYPE html><html><head>  <meta charset=\"utf-8\">  <title>QUnit Example</title>  <link rel=\"stylesheet\" href=\"./resources/qunit.css\"></head><body>  <div id=\"qunit\"></div>  <div id=\"qunit-fixture\"></div>  <script src=\"./resources/qunit.js\"></script>  <script src=\"./resources/tests.js\"></script></body></html>\nWhen I first followed the instructions I was not able to get the expected result so just wanted to report the same.\nAt the end you guys are decision makers\nThanks", "createdAt": "2013-04-29T07:16:16Z", "updatedAt": "2013-04-29T09:08:44Z", "closedAt": "2013-04-29T08:59:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iwx1", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "iwx1", "company": "3ds"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-04-29T08:59:09Z", "contents": "Well, you got it working and so should any other developer with a very basic understanding of HTML and JS. I'd rather not clutter the homepage with more detailed instructions.\nTo make things actually easier we could a provide a zip file that contains an html template and the latest QUnit version, linked together so that it works out-of-the-box. If you think that's useful, or something similar, could you file a follow-up issue in the site repository here? https://github.com/jquery/qunitjs.com/issues", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 446, "url": "https://github.com/qunitjs/qunit/issues/446", "title": "Move addons/themes out of core", "contents": "I'll take ownership of these in separate qunit-theme-{name} repositories.", "createdAt": "2013-05-01T17:12:02Z", "updatedAt": "2018-12-22T20:34:33Z", "closedAt": "2013-05-07T00:37:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-05-02T20:16:19Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T00:37:20Z", "contents": "Krinkle/qunit-theme-gabe\nKrinkle/qunit-theme-ninja\nKrinkle/qunit-theme-nv", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-07T02:19:05Z", "contents": "Nice work! All that's left now is the PhantomJS addon (plugin), which @Krinkle already claimed (though I don't see an Issue for it yet). \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzNTE1", "title": "1.12", "description": "", "createdAt": "2013-06-12T07:03:42Z", "dueOn": null, "number": 1, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 447, "url": "https://github.com/qunitjs/qunit/issues/447", "title": "Move addons/canvas, addons/close-enough, addons/step out of core", "contents": "This is how I created the other repository:\n\nCreate new repository\nImport all related files from the repository in core to the new repository. Be sure to include a reference to where they came from.For example: JamesMGreene/qunit-reporter-junit@e1101b6:Initial import from 'jquery/qunit.git:addons/junitlogger'.Tree: https://github.com/jquery/qunit/tree/43f4c94497/addons/junitloggerDon't forgot to also add in this commit: .gitignore, .jshintignore, .jshintrc, AUTHORS.txt, Gruntfile.js, MIT-LICENSE.txt, package.json\nAfter verifying that npm install && npm test gives all green, create this first initial commit.\nTag this first commit as v1.0.0\ngit push origin HEAD:master && git push origin --tags\nEnable Travis CI service hook in repository settings\nBump post-release version (v1.0.1-pre)\nCreate commit adding .travis.yml and add Travis CI badge to readme\nCreate commit adding NPM badge to readme\nCreate commit releasing v1.0.1\nTag it in git and publish to npm\nBump post-release version (v1.0.2-pre)\ngit push and push tags\n\nAnd finally, a commit to jquery/qunit removing the files and referring to the new username/repo and link to v1.0.0 tree of the new repository (example: 67585c7)", "createdAt": "2013-05-01T17:24:01Z", "updatedAt": "2018-12-22T20:39:52Z", "closedAt": "2013-05-06T04:00:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 18, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-01T17:28:23Z", "contents": "Thanks for the details, @Krinkle.  I'll try to get to this within the next week.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-01T18:15:41Z", "contents": "Final step: update the website's \"plugins\" page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-01T21:52:37Z", "contents": "Final step: update the website's \"plugins\" page.\n\nThanks, I forgot that one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-05-03T09:19:27Z", "contents": "Btw. you can combine those two pushes: git push origin master --tags", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-03T11:56:23Z", "contents": "@jzaefferer: That's how I do it, too.\n@jzaefferer & @Krinkle: Thoughts on naming for the \"close-enough\" plugin? \"qunit-assert-close\", \"qunit-assert-closeenough\", \"qunit-assert-close-enough\", etc.?  The actual assertion method names are close and notClose.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-03T12:14:44Z", "contents": "P.S. Some other implementations:\n\nJsUnit used to call this idea assertRoughlyEquals https://github.com/pivotal/jsunit/blob/7ee150b9a1662053aa94243a7915cd203028ce3b/app/jsUnitCore.js#L494-512\nchai.js calls it closeTo: http://chaijs.com/api/assert/#closeTo-section", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-03T12:34:35Z", "contents": "Synonyms:\n\nabout\nalmost\nappxorimate\naround\nballpark figure\nbordering on\ncirca\nclose\ncomparative\ncomparatively\ngenerally\nin the ballpark\nin the neighborhood of\nin the region of\nin the vicinity of\njust about\nloosely\nmore or less\nmost\nmuch\nnear\nnot far from\nnot quite\nproximate\nproximately\nrelative\nrelatively\nrough\nroughly\nupwards of\nvery close\n\nSooo... \"qunit-assert-ballpark-figure\"? LOL. \ud83d\ude09", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-03T15:19:44Z", "contents": "I went ahead with \"qunit-assert-close\" but am happy to reconsider if you guys have other suggestions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-05T06:41:23Z", "contents": "Update: The \"step\" plugin is completely migrated: JamesMGreene/qunit-assert-step", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-05T07:22:01Z", "contents": "Update: The \"close\"/\"close-enough\" plugin is completely migrated: JamesMGreene/qunit-assert-close", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-05T07:59:20Z", "contents": "Update: The \"canvas\" plugin is completely migrated: JamesMGreene/qunit-assert-canvas", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-05T08:01:12Z", "contents": "@jzaefferer @Krinkle: Could one of you please deploy the latest master branch of jquery/qunitjs.com today/tomorrow? I've updated the \"plugins\" page with all of the latest repo info but am not yet setup to test/deploy the qunitjs.com repo.\nAfter that, we can close out this issue. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-05T08:05:48Z", "contents": "P.S. I also searched through all of the open issues in QUnit core but I didn't find any that needed to be migrated with these 3 plugins.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-06T04:00:27Z", "contents": "Update: The latest website has been deployed (with guidance from @ajpiano, thanks Adam!): http://qunitjs.com/plugins/\n@jzaefferer @Krinkle: I revved the website version to 1.11.1 per Adam's suggestion (versus bumping it to 1.11.0-3). Is that OK? It makes sense to me since it was a big enough change to warrant a deploy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-06T12:22:54Z", "contents": "It should have been 1.11.0-4. The site version tracks the code version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-06T14:43:09Z", "contents": "@scottgonzalez: Should I retag it, then?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-06T14:53:02Z", "contents": "You can, though it doesn't really matter if it's retagged. More important is probably just deleting the 1.11.1 tag, so that we don't get an error when doing the 1.11.1 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-06T15:33:33Z", "contents": "Deleted 1.11.1 tag and retagged as 1.11.0-3.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzNTE1", "title": "1.12", "description": "", "createdAt": "2013-06-12T07:03:42Z", "dueOn": null, "number": 1, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 448, "url": "https://github.com/qunitjs/qunit/issues/448", "title": "QUnit fails tests inconsistently/alternatelyTest failes ", "contents": "I have a simplified QUnit test which consists of 2 simple tests that fails randomly/alternately for no good reason (They are both atomic, meaning that one test doesn't change anything of the other element)\nPlease see this jsfiddle try to run multiple times\nmodule(\"Basic actionBind\");\n//two simple tests\ntest(\"action1\", function() {\n    ok(ele2.trigger(\"click\").hasClass(\"clicked\"), \"basic click action\");\n});\n\ntest(\"action2\", function() {\n    ok(ele1.click().hasClass(\"clicked\"), \"basic click action\");\n});\n\nhttp://stackoverflow.com/questions/16444561/qunit-inconsistency-alternately-fails-tests/", "createdAt": "2013-05-09T01:11:01Z", "updatedAt": "2013-05-09T15:53:35Z", "closedAt": "2013-05-09T02:30:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adardesign", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "adardesign", "company": "Adorama inc"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "FagnerMartinsBrack", "company": "The Internet"}], "comments_count": 5, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-09T01:32:56Z", "contents": "Seems to be an issue with your event handling setup, though I don't really plan on digging into why. :)\nThis simplified version of your fiddle passes 100% of the time:  http://jsfiddle.net/aZRK7/13/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adardesign", "authorAssociation": "NONE", "createdAt": "2013-05-09T01:55:05Z", "contents": "Yea Thanks! I tried that, But while the (global action) event handler in that fiddle works 100% and there is nothing wrong with that... also, i cant point to one single thing that effects the other element in any way...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-09T02:30:22Z", "contents": "I answered this on stackoverflow: http://stackoverflow.com/a/16453222/319266. See also http://jsfiddle.net/aZRK7/15/.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adardesign", "authorAssociation": "NONE", "createdAt": "2013-05-09T02:58:19Z", "contents": "+1 @Krinkle Thanks much!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2013-05-09T15:53:35Z", "contents": "seems related to #383", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 449, "url": "https://github.com/qunitjs/qunit/issues/449", "title": "Show the qunit-fixture div", "contents": "It would be really handy if there were a button that let us view the qunit-fixture div. At the moment, it is always hidden. Viewing the fixture div can make debugging a little easier.", "createdAt": "2013-05-09T10:56:45Z", "updatedAt": "2014-02-14T06:11:18Z", "closedAt": "2014-02-13T23:58:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "KevinSheedy", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "KevinSheedy", "company": null}, {"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2013-05-09T16:08:46Z", "contents": "When you are debugging you usually can't execute further scripts in that page so a button for dynamically changing the styles of the qunit-fixture seems worthless.\nYou can always look up the window location though:\nif ( window.location.href.indexOf( \"show_fixture=true\" ) > -1) {\n    $( \"#qunit-fixture\" ).css({\n        height: \"\",\n        width: \"\",\n        left: 0,\n        top: 0,\n        backgroundColor: \"#FFF\",\n        border: \"solid\"\n    });\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:58:04Z", "contents": "Its pretty easy to override the styles of the fixture elements in any browser dev tool (uncheck the styles or change the id). I don't see the need for exposing extra UI for this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 451, "url": "https://github.com/qunitjs/qunit/issues/451", "title": "Miscategorisation of QUnit.init and QUnit.reset", "contents": "You list QUnit.init() and QUnit.reset() on the callbacks page (http://api.qunitjs.com/category/callbacks/) but they are not callbacks.  Perhaps they deserve their own page or this one gets renamed to something more all encompassing?", "createdAt": "2013-05-16T00:28:33Z", "updatedAt": "2013-05-20T17:29:46Z", "closedAt": "2013-05-20T17:29:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kagemusha", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "kagemusha", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-05-16T02:07:53Z", "contents": "Yeah, QUnit.init and QUnit.reset are definitely not callback registries. They were only recently documented by @scottgonzalez, and since so far all pages were in that category I guess he copied the same categorisation for these two.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-16T08:47:17Z", "contents": "That is, in fact, what happened. I just copied another QUnit.* method as a template. I'm not sure how to categorize these.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kagemusha", "authorAssociation": "NONE", "createdAt": "2013-05-16T16:47:01Z", "contents": "how bout separating those two calls into another section labelled something\ngeneric like \"Starting and Resetting\"?\nOn Thu, May 16, 2013 at 4:47 AM, Scott Gonz\u00e1lez notifications@github.comwrote:\n\nThat is, in fact, what happened. I just copied another QUnit.* method as a\ntemplate. I'm not sure how to categorize these.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/451#issuecomment-17988854\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-05-16T16:50:45Z", "contents": "I'd think either \"Configuration\" (config) or a new category like \"State\"/\"Status\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-05-16T17:08:39Z", "contents": "config is a good choice, since both are related to that. And that avoids adding a new category for methods that are going to go away anyway.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-05-20T17:29:45Z", "contents": "Fixed by qunitjs/api@3e5defd", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 453, "url": "https://github.com/qunitjs/qunit/issues/453", "title": "Remove QUnit.reset from the public API", "contents": "To be deprecated (issue #354).", "createdAt": "2013-06-12T16:57:02Z", "updatedAt": "2016-04-19T15:31:01Z", "closedAt": "2016-04-19T15:31:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T10:06:33Z", "contents": "This is blocked by jQuery Core ticket 14040: http://bugs.jquery.com/ticket/14040", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:16:34Z", "contents": "The method should be replaced with throwing an exception, then fully removing the method in 2.1.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T14:01:35Z", "contents": "that jQuery issue is set to fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 455, "url": "https://github.com/qunitjs/qunit/issues/455", "title": "Simplify release process", "contents": "Use something like grunt-version to replace the manual editing. Or grunt-bump.", "createdAt": "2013-06-19T11:12:05Z", "updatedAt": "2013-06-22T08:41:00Z", "closedAt": "2013-06-22T08:41:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-06-19T12:43:05Z", "contents": "If we breakdown the project into separate JS files like @Krinkle described in #378, then we could easily use the built-in versioning/header options that grunt-contrib-concat provides, too.  You can also technically use grunt-contrib-concat on a single file to achieve the same, it just seems more peculiar that way. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-21T16:16:14Z", "contents": "We can do this after 1.12.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-06-22T08:41:00Z", "contents": "Neither grunt-version nor grunt-bump are really useful. I think the module split is a better way to go, generating the headers as part of the build. Maybe along with npm version to do the update and commit and tag.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 456, "url": "https://github.com/qunitjs/qunit/issues/456", "title": "Documentation missing hidepassed option on config ", "contents": "I could not find the documentation to add this in, but the docs appear to be missing the hidepassed option that is exposed on the config option.", "createdAt": "2013-06-27T05:06:25Z", "updatedAt": "2013-07-05T14:45:12Z", "closedAt": "2013-06-27T05:38:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jaredadobe", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jaredadobe", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-06-27T05:38:52Z", "contents": "The documentation is missing indeed. I filed qunitjs/api#25 as a reminder to add this (the website is maintained in a separate repository).\nNote that I have also proposed to deprecate this option in #457 (just the configuration option, not the setting itself in the user interface).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredadobe", "authorAssociation": "NONE", "createdAt": "2013-06-27T05:48:26Z", "contents": "Cool.\nJust as a side note if you were to deprecate it, would be fantastic if it was on (true) by default. Seems that people are more interested in what has failed than passed in a test runner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-06-27T07:12:44Z", "contents": "@jaredadobe Just in case you are using this in a scripted context, don't use the html reporter in that case, but instead attach callbacks and get the data directly (in which case you can easily skip passed assertions as you like).\nAs for the changing the default, I agree :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaredadobe", "authorAssociation": "NONE", "createdAt": "2013-06-27T07:16:00Z", "contents": "Nope, this is for when we run in the browser.\nWe found we were clicking it nearly 100% of the time.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 457, "url": "https://github.com/qunitjs/qunit/issues/457", "title": "Deprecate config.hidepassed", "contents": "I don't think we should have this as a configurable at the test suite level.\nIt makes sense as a urlConfig and makes sense to be persisted for the user/viewer, but we shouldn't have setup configuration for the UI state. This is the only one left of its kind (the others are all urlConfig and/or cookies with a sensible default).\nI propose we straighten this out by deprecating it and subsequently removing it.\nIf we think it is best for UX to change the default (enable by default), then we should do so in core.", "createdAt": "2013-06-27T05:37:49Z", "updatedAt": "2014-10-10T11:20:02Z", "closedAt": "2014-10-10T11:20:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "mislav", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-07-05T14:46:10Z", "contents": "I'm good with making this strictly available via urlConfig. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:18:38Z", "contents": "The difference between the hidepassed checkbox and the other ones is that hidepassed doesn't cause a page reload. I'd very much would want to keep that behaviour. For the other checkboxes it doesn't make sense, since they actually require a rerun of all tests to be useful.\nMaybe we can use history.pushState/replaceState to move hidepassed to urlConfig, but making it work without a page reload. Having no fallback is probably fine in this case.\nRegarding changing the default for hidepassed, to enable by default: I'm okay with that, but we should deal with that separatly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mislav", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-30T23:19:35Z", "contents": "Just had to add this to our test suite to be able to actually see what failed in screenshots in Sauce Labs:\n<script>QUnit.config.hidepassed = /hidepassed/.test(location.search)</script>\nWould you accept a PR that implements a urlConfig.hidepassed, for starters? I think it's essential to be able to flip the option from query params.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T16:24:36Z", "contents": "Adding urlConfig.hidepassed is good, but clicking the checkbox should use history.replaceState to update the URL. Reloading the page as a fallback when replaceState isn't available is fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-08T15:19:49Z", "contents": "@JamesMGreene @leobalter this is on the pre-2.0 milestone. Can you take another look?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-09T05:21:36Z", "contents": "Personally, I would definitely not recommend that hidepassed be enabled by default. That is not the default I would want, and I think it would confuse the hell out of new/novice QUnit users.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-16T22:02:28Z", "contents": "Let's leave the default, but try to move it to urlConfig.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T20:33:33Z", "contents": "@mislav its been a long time - would you still be interested in implementing this? A PR that does this even without the replaceState stuff would be a good start.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mislav", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-10-03T05:50:07Z", "contents": "I can take a stab this weekend, sure.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 459, "url": "https://github.com/qunitjs/qunit/issues/459", "title": "Deprecate/remove triggerEvent?", "contents": "QUnit has a triggerEvent function that isn't used internal. Need to test if it gets exported anywhere, if so, if it's used anywhere. Depending on the result, deprecate or just remove it.", "createdAt": "2013-07-09T15:23:53Z", "updatedAt": "2014-01-02T17:11:25Z", "closedAt": "2014-01-02T17:11:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-12-06T16:16:12Z", "contents": "#493 addresses this by simply removing it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 460, "url": "https://github.com/qunitjs/qunit/issues/460", "title": "Effectively deprecate raises", "contents": "Formally deprecated since 1.9, need to change it to throw a useful exception in the next release. Completely remove it afterwards.", "createdAt": "2013-07-09T15:30:45Z", "updatedAt": "2014-09-03T13:26:45Z", "closedAt": "2014-01-03T10:10:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-03T10:11:07Z", "contents": "raises will now cause a failed assertion, just as equals and same still do.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 461, "url": "https://github.com/qunitjs/qunit/issues/461", "title": "Add bower.json", "contents": "Install bower globally and use bower init to create a bower.json.\nSee sizzle's for an example.", "createdAt": "2013-07-10T15:28:30Z", "updatedAt": "2013-07-15T11:18:40Z", "closedAt": "2013-07-15T11:18:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "timmywil", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "timmywil", "company": "@jquery, @pylon "}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 15, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-07-11T10:10:43Z", "contents": "We already have the version numbers in the two source files, so tags installed via bower should work just fine. We just need to make sure that we tag from a branch with the same files once #378 is done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-07-11T10:25:17Z", "contents": "Bower has no concept of which file the entry point is? btw, who/how pushes to bower? I assume we're not going to be required for the js file to end up in exactly the path qunit/qunit.js.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmywil", "authorAssociation": "NONE", "createdAt": "2013-07-11T13:04:38Z", "contents": "@Krinkle : There is no pushing/publishing to bower. Once we have qunit registered, pushing tags to github will automatically update bower. Also, qunit.js can be wherever you want. As you can see in J\u00f6rn's bower.json, you can specify its location through the use of the main property.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-07-11T14:05:12Z", "contents": "After installing the current qunit package locally, I suspect there's actually nothing happening when you push a tag. When you bower install, it just uses git to clone the repo (maybe a shallow clone) and checks out the right tag, then copies file into your bower_components folder according to the ignore list.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmywil", "authorAssociation": "NONE", "createdAt": "2013-07-11T14:52:01Z", "contents": "Perhaps I misunderstood the question. bower install is not the same as git clone. A package installed with bower is not a git repo (nor should it be). QUnit developers will push their tags and the new tag will be available when users bower install or bower update.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-07-11T21:44:19Z", "contents": "Right, but it looks like bower is quite different in its implementation, compared to npm (and some other comparable tools). Bower's registry seems to be just a list of modules, while npm actually stores file. Npm install modules by downloading those files, but bower just accesses the original git repository.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmywil", "authorAssociation": "NONE", "createdAt": "2013-07-11T22:02:13Z", "contents": "@jzaefferer This is true. The end result is that there is no bower publish, which is good, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-07-12T14:08:39Z", "contents": "So how do we allow bower to use files that need building (e.g. jquery, and soon qunit).\nIn NPM this is trivial using pre-publish (static building) or install hooks (local building). Though for NPM it is actually less common because using require() can include different modules from 1 entry point using node (e.g. index.js can then subsequently require other files).\nWhereas for bower (which is from what I understand, primarily targeted at browser javascript) I imagine building will be a much more common requirement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmywil", "authorAssociation": "NONE", "createdAt": "2013-07-12T14:13:32Z", "contents": "@scottgonzalez suggested that when we tag projects, we include built files in the tag, but not in our branches. I think that's the best solution I've heard so far as it doesn't require the user to build anything after they bower install.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-07-12T15:52:07Z", "contents": "Sounds to me like bower is lacking a pretty obvious feature, especially as it is aimed at browser scripts (for which libraries are generally developed in multiple files).\nI don't feel like tacking all these files in git tags. What's the advantage for bower over npm for us in this case anyway? We've been using it from npm for a few qunit projects now and it works like a charm (e.g. here). I'd rather let bower sit on the shelf for a while. They have a rewrite in the works and a good roadmap with registry/publish. It seems like we best wait for that to be ready (for us it would only do git clone and checking out a tag right now).\nGranted NPM is meant for node modules, not browser scripts, but if bower is (for our purposes) not yet ideal, why should be bother going through hoops?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-12T16:05:46Z", "contents": "We've already made a project wide decision that Bower will be supported by all jQuery projects. This isn't just about internal usage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmywil", "authorAssociation": "NONE", "createdAt": "2013-07-12T16:23:52Z", "contents": "OK, I've talked to the bower folks and it seems that they are moving towards having their own registry, where we could choose to publish packages to bower rather than point bower to our github endpoint. @danheberden is actually helping with that. That sounds like our best option. We can publish whatever files make the most sense for each project. However, I don't think there's any harm in including a bower.json now, especially since the currently registered package for QUnit is pointed somewhere else.\nhttps://github.com/bower/bower/wiki/Rewrite-state", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-07-13T09:48:38Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-07-13T17:09:17Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-07-15T11:18:40Z", "contents": "Landed bower.json. Requested removal of the existing qunit entry in their registry.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 464, "url": "https://github.com/qunitjs/qunit/issues/464", "title": "Cannot find test when the test's title contain a space in the end", "contents": "When the title contains a 'space' in the end of the title, the test suite runs fine, but when click on 'rerun' to run only that test, the filter will show no test found.", "createdAt": "2013-07-23T04:09:52Z", "updatedAt": "2014-08-05T13:42:38Z", "closedAt": "2014-07-30T15:03:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kidphys", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "kidphys", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T15:03:20Z", "contents": "I can't reproduce this bug. The rerun is pointing to the testNumber and it's working nice.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T15:05:53Z", "contents": "rerun works from the testNumber since 2 years ago through: @f08dc89", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "status-declined", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 466, "url": "https://github.com/qunitjs/qunit/issues/466", "title": "Update the `deepEqual`/`notDeepEqual` functions (or similar) to support an optional `compareFn` argument", "contents": "Based on an email conversation earlier today with @stephanb2:\nUpdate the deepEqual/notDeepEqual functions (or create similar) to support an optional comparerFn argument, such that said function would be used instead of === to compare values inside of QUnit.equiv.\nExample usage:\n// Normal usage\nQUnit.test(\"test1\", function(assert) {\n  var expected = [0, 1, 2];\n  var actual = [0, 1, 2];\n  assert.deepEqual(actual, expected, \"Items are deeply equal\");\n});\n\n// Extended usage\nQUnit.test(\"test1\", function(assert) {\n  var expected = [0, 1, 2];\n  var actual = [0.1, 1.1, 2.1];\n  var comparerFn = function(actual, expected) {\n    // After comparing the item types and length, use the `qunit-assert-close` plugin's\n    // `close` function to verify that an array/object's items are all deeply \"close enough\"\n    // rather than \"strictly equal\"\n    assert.close(actual, expected, 0.11);\n  };\n  assert.deepEqual(actual, expected, comparerFn, \"Items are deeply close enough to equal\");\n});\n@jzaefferer @Krinkle What do you think of this idea?", "createdAt": "2013-08-05T05:48:43Z", "updatedAt": "2015-05-18T16:24:51Z", "closedAt": "2015-05-18T16:24:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "mimshwright", "company": "MimsWright.com"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-14T16:29:47Z", "contents": "Another potential alternate API style in which we allow the user to compose their deep assertions:\nQUnit.test(\"deep non-strict equal\", function(assert) {\n  var deepLooseEqual = assert.deep({\n    props: {\n      own: true,  // compare enumerable \"owned\" properties\n      proto: true  // compare enumerable prototype properties\n    },\n    // pass an existing assertion function... we'd want to make these _not_ each generate\n    // an assertion in the output if possible, though\n    assert: assert.equal,\n    // OR\n    // create your own\n    comparer: function(actual, equal) {\n      return actual == equal;\n    }\n  });\n  deepLooseEqual(1, new Number(1), \"Test 1\");\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mimshwright", "authorAssociation": "NONE", "createdAt": "2014-02-08T06:49:23Z", "contents": "You could potentially do this by writing a new function in the QUnit.assert scope. Something like:\n// warning: untested code\nQUnit.assert.customAssertion = function (expected, actual, message) {\n  var result = // whatever logic you want\n  QUnit.push( result, actual, expected, message );\n}\nIt might be nice to document this though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-11T04:55:30Z", "contents": "@mimshwright I know. More the point was leveraging the built-in \"deep\" traversal of QUnit.deepEqual... and apparently I wrapped the idea of assertion composition in there as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-02T15:13:49Z", "contents": "I finally ran into an issue where this feature might help. I was using deepEqual to compare two equivalent moment objects. The assertion was failing, due to having called isValid() on just one of them. Apparently that changes the moment object in some way where two instances aren't equal anymore, even though the date/time is exactly the same.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-02T16:30:12Z", "contents": "@jzaefferer: that should work with QUnit.equiv's useStrictEquality, don't?\nI think this implementation of compareFn would be a custom replacement of this function. If it's that, I can agree with it.\nOne good is even the new Object.is for this customized comparing functions.\nI wonder if isn't better to expose the QUnit.equiv for customizations like this. Humble example:\nQUnit.test(\"test1\", function(assert) {\n  assert.equiv.compareFn = function( b, a ) {\n    return b === a;\n  };\n  assert.deepEqual( [0, 1, 2], [0, 1, 2], \"Items are deeply equal\");\n  assert.deepEqual( [0, 1, 2], [0, 1, 2], \"Items are deeply equal\");\n  assert.deepEqual( [0, 1, 2], [0, 1, 2], \"Items are deeply equal\");\n  assert.deepEqual( [0, 1, 2], [0, 1, 2], \"Items are deeply equal\");\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-03T00:08:47Z", "contents": "I'm not (yet) convinced that loose comparisons (tolerating type confusion), negated-assertions (tolerating everything but one value), close-enough (tolerating ranges) and other non-strict comparisons can be part of a well-written test. One ought to be able to assert exactly what your interface returns.\nIf not then, in my experience, one is either unintentionally tolerating more values then necessary (thus masking future bugs or potential regressions), or are dealing with a poorly written method.\nOne might benefit from (simply) improving the source code to be more strict. E.g. ensure a function \"sum\" always returns a number even if you want to allows string values as input, or at the very least you can simply assert the actual return value in a strict fashion, even if it is inconsistent (e.g. sum(\"2\") -> \"2\"; and sum(\"2\", 1) -> 3), it is at least deterministic so no reason to not compare them strictly.\nOr, if things vary on other factors (e.g. third party resources), you're probably in need of mocking.\nI can only recommend situations, that call for this feature, be re-evaluated by their authors and changed to simply work with propEqual, deepEqual, or strictEqual instead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:30:15Z", "contents": "Btw. I solved my issue by always calling isValid on those moment objects.\n@JamesMGreene @leobalter any new insights on this? Did you run into similar issues again?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T16:24:51Z", "contents": "As commented on in #533, I don't see a need for this. Happy to reopen when that changes.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 467, "url": "https://github.com/qunitjs/qunit/issues/467", "title": "Enhancing stracktrace for grunt-contrib-qunit", "contents": "In PhantomJS (~1.9.0), the returned value for extractStacktrace is simply the type of error (ReferenceError, TypeError). It could be much more helpful if it gave more details, such as line numbers in files.\nFrom digging around, the problem seems to be on line 1379, in regards to fileName. Now, in Chrome, this is not an issue - but for PhantomJS, \"fileName\" returns \"Error :\" This seems to be causing the method to jump down to \"stack[offset],\" thusly returning a vague stack trace.\nI wasn't sure how to fix it up to account for the PhantomJS case, but for now it's been working to comment out lines relevant to fileName. As more and more people use grunt-contrib-qunit, however, it might be helpful to catch this case.\nThanks!", "createdAt": "2013-08-05T19:41:01Z", "updatedAt": "2014-11-06T13:26:08Z", "closedAt": "2014-11-06T13:26:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shaqq", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "shaqq", "company": "Belly"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:59:06Z", "contents": "This seems like a duplicate of #403 - hoping for @JamesMGreene to verify.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:26:07Z", "contents": "Closing this as a duplicate of #403, which is still open.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 472, "url": "https://github.com/qunitjs/qunit/issues/472", "title": "QUnit.done should provide aggregated results", "contents": "Similar to #351\nAny test runner that doesn't need live updating shouldn't have to aggregate results manually.", "createdAt": "2013-09-26T15:41:01Z", "updatedAt": "2017-03-31T04:17:24Z", "closedAt": "2017-03-31T04:17:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-09-27T16:31:28Z", "contents": "How granular/verbose are you thinking we should make it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-09-30T12:53:43Z", "contents": "See #405 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-08T15:20:26Z", "contents": "@JamesMGreene @leobalter same here, pre-2.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-09T13:38:38Z", "contents": "I would again ask:\n\nHow granular/verbose are you thinking we should make it?\n\nFor example, unlike #351, I would expect that we would not include the assertions on the done event details... or would we? What would our data object look like?\nHappy to implement if we can get the data details hammered out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:49:24Z", "contents": "Basic structure could look like this:\nQUnit.on( \"runEnd\", function( details ) {\n    details.tests.forEach(function( test ) {\n        // Access test.name, test.moduleName, test.assertions\n        // assertions is the same as in testDone\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-09T09:39:03Z", "contents": "Here's a usage example that could be simplified by implementing this ticket: https://github.com/axemclion/grunt-saucelabs#test-result-details-with-qunit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-30T00:23:25Z", "contents": "@jzaefferer I'll try to address this issue on #882", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:17:23Z", "contents": "similarly to #351, I believe this is a wontfix for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "help wanted", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lNzg4NjM1", "title": "JS Reporter", "description": "Once the js-reporter is far enough, issues in this milestone should be implemented/merged.", "createdAt": "2014-09-13T16:01:45Z", "dueOn": null, "number": 5, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 473, "url": "https://github.com/qunitjs/qunit/issues/473", "title": "Asynchronous QUnit.done", "contents": "Hi, would it make sense to support asynchronous callback inside QUnit.done?\nMy use case is the following,\n\nthe first test script adds a callback to submit code coverage results to a remote server\nthe last test script adds a callback to shut down the browser killing it.\n\nI'd like to pause the callback executions until my request is done.\nWhat do you guys think? Is it worth doing it?\nIt would make runLoggingCallbacks asynchronous, so I don't know if your cool with that.\nAn alternative is to redefine the Q.done method, but this comment scares me\n// Supports deprecated method of completely overwriting logging callbacks\n\nDoes that mean that one day this code will disappear?\nfunction runLoggingCallbacks( key, scope, args ) {\n    if ( QUnit.hasOwnProperty( key ) ) {\n        QUnit[ key ].call(scope, args );\n    } else {", "createdAt": "2013-09-27T02:20:49Z", "updatedAt": "2014-02-14T06:11:30Z", "closedAt": "2014-02-13T23:32:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piuccio", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "piuccio", "company": "@en-japan-air "}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-09-27T02:43:42Z", "contents": "That comment means we still support the old, deprecated way of setting the done callback:\nQUnit.done = fn;\nThis is in opposition to the current correct way to do it:\nQUnit.done(fn);\nHowever, to fully answer your question, we are indeed moving away from this interface altogether in the future but won't drop support for these 2 existing ways until QUnit 2.0.  Here's the discussion of the new EventEmitter-style API: #422", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-09-27T02:46:16Z", "contents": "Could you provide more details on why you want to make this logging callbacks asynchronous?  I'm not following the purpose from the brief explanation provided so far.  Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piuccio", "authorAssociation": "NONE", "createdAt": "2013-09-27T04:39:34Z", "contents": "Alright, so I have this test page\n<html>\n    <head>\n        <script src=\"qunit.js\"></script>\n\n        <!-- source  -->\n        <script src=\"source.js\"></script>\n\n        <!-- needed for code coverage  -->\n        <script>\n        QUnit.done(function () {\n            // Send the code coverage result to the collecting server\n            code_coverage.submit_result();\n            // This is an AJAX request, so it's asynchronous\n        });\n        </script>\n\n        <!-- test code -->\n        <script src=\"testCase.js\"></script>\n    </head>\n    <body>\n        <div id=\"qunit\"></div>\n        <div id=\"qunit-fixture\"></div>\n\n        <!-- For continous integration -->\n        <script src=\"/testem.js\"></script>\n    </body>\n</html>\nAnd testem is doing few things, including\n// Tell the server that tests are done\n// When the server receives this event, it'll kill the browser process\nQUnit.done(function () {\n    socket.emit('test-done')\n});\nSo the problem is that the browser gets killed before the request is completely sent to the server and I can't get the coverage report.\nI've solved it this way\n(function () {\n    var callbacks = [];\n    QUnit.done = function (callback) {\n        if (typeof callback == \"function\") {\n            callbacks.push(callback);\n        } else {\n            code_coverage.submit_result().then(function () {\n                for (var i = 0; i < callbacks.length; i++ ) {\n                    callbacks[i].call(this, callback);\n                }\n            });\n        }\n    };\n})();\nBut it would be nice to use non deprecated features.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-09-27T05:07:20Z", "contents": "Any possibility of just making code_coverage.submit_result(); use a synchronous XHR instead of an async one?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-09-27T11:16:47Z", "contents": "Would it be feasible to send the coverage report to your controller environment (much the same way the test results are sent, through the messaging interface), and submit it from there instead?\nMaking QUnit.done be asynchronous would imho only be acceptable if it isn't subject to the same logical problem as the current workaround you use, namely that it it only works if you know ahead what order your callbacks are in (e.g. if your shutdown callback is before the code coverage one, it fails as the worker will shutdown before it even starts to send the code coverage). That doesn't get us any further. If we decide to support this in core, we should probably implement a separate event that fires after the (asynchronous and synchronous) callbacks for QUnit.done are finished (i.e. QUnit.emit('done') /* promise */.always(-> QUnit.emit( 'exit' ) );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piuccio", "authorAssociation": "NONE", "createdAt": "2013-09-30T04:12:19Z", "contents": "I haven't tried sync XHR because the coverage server is from a different domain, so I suppose the XHR would just fail.\nTests are served by testem (another open source tool) while coverage is done with node-coverage.\nIt's true that the best would be to submit coverage results through testem, but I don't feel like changing that code, yet. I'll check with testem authors if there's a good solution on their side.\n@Krinkle  You're perfectly right about your second point, so far I can guarantee the order because of the way I instrument JavaScript files. But that's far from being an ideal solution.\nA flow like this one would solve my use case\n\nstart\ntestDone, N times\nbeforeDone -> async event\ndone", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-09-30T12:37:57Z", "contents": "If you're in control of the command line execution and have a way to communicate between your manager process (e.g. grunt or some other wrapper) and the browser, I'd say communicate it through that, and submit it from the manager process instead of from the browser.\nOtherwise, if testem is the one running it, I think it'd make most sense to incorporate it into that. You can use its global emit() function to send the data, just like how it sends the QUnit test results. I expect Testem to have some kind of plugin interface that would allow you to register a small plugin that listens for your custom event and handles it accordingly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-13T23:32:53Z", "contents": "I don't think is a problem that should be addressed in QUnit. As discussed above, there's plenty of potential ways to address this elsewhere. For example, grunt-qunit-instanbul has no problem running coverage tests with QUnit.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 475, "url": "https://github.com/qunitjs/qunit/issues/475", "title": "deepEqual fails on identical non recursive maps", "contents": "deepEqual fails with the compared objects at the following link:\nhttp://tlrobinson.net/projects/javascript-fun/jsondiff/#%7B%22d%22%3A%7B%22a%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%205%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaDispatcher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%206%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22KeecastWeb%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecast%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%5Cn%5D%22%2C%22b%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecast%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%205%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaDispatcher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%206%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22KeecastWeb%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%5Cn%5D%22%7D%7D", "createdAt": "2013-10-08T14:40:31Z", "updatedAt": "2016-11-01T16:29:02Z", "closedAt": "2013-10-08T16:54:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iongion", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "iongion", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 1, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-10-08T16:54:26Z", "contents": "Those objects are not equal because they are arrays (which are ordered), so it should fail. Please correct me if I'm missing something.  Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 476, "url": "https://github.com/qunitjs/qunit/issues/476", "title": "assert.throws doesn't handle exception object", "contents": "This fails:\nthrows(function() {\n    My.sqrt(-1);\n}, new Error(\"sqrt can't work on negative number\"), \"should throw an exception if given a negative number\");\nThe instanceof check causes an exception itself: \"Uncaught TypeError: Expecting a function in instanceof check, but got Error: sqrt can't work on negative number\"\nWe don't test that case. We should fix that.", "createdAt": "2013-10-10T16:20:52Z", "updatedAt": "2014-01-29T15:17:30Z", "closedAt": "2014-01-29T15:17:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 7, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-10-10T17:08:41Z", "contents": "Are you thinking that we just grab .constructor to test against, or that we provide a different testing mechanism for this (e.g. passing two separate params, or an options object)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-10-16T20:06:43Z", "contents": "I didn't have any particular approach in mind. I came across this when migrating a test from Jasmine to QUnit. They support the example I posted as-is, so we should do the same.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2013-10-16T21:45:02Z", "contents": "@JamesMGreene is this why you wanted to see something like http://jsfiddle.net/MYgpY/16/ for IE?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-10-16T21:59:58Z", "contents": "@gibson042: Nah, that's part of a different experiment in trying to polyfill the HTML5 ErrorEvent (for window, anyway) and expanded window.onerror (now at 5 parwms instead of the traditional 3).\nIf I somehow pull it off, though, I was going to propose it for possible inclusion in the jQuery core Events system. Looking very bleak for most browsers, though, so it might just have to be a standalone partial polyfill or jQuery plugin... not much gain if it only works in evergreen Firefox.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2013-10-17T02:27:13Z", "contents": "@JamesMGreene: A moderately deep look at the Webkit source suggests to me that you're not going to get it there; ErrorEvents set type with putDirect to bypass both accessors and the prototype, and construct onerror arguments from that internal data.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-10-17T03:49:59Z", "contents": "@gibson042: I've definitely seen signs of such from the client-side. Can you point me at the WebKit source class(es) you were perusing through related to this? Maybe I can find some loophole if I get a closer look at the internals.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2013-10-18T13:18:13Z", "contents": "@JamesMGreene: Sorry to take so long, and sorry for hijacking this ticket. Anyway, here's the information you might be interested in:\n\nJavascript exception creation: reportException \u2192 ScriptExecutionContext::reportException \u2192 ScriptExecutionContext::dispatchErrorEvent\n\n\u2026bypassing Javascript setters: ErrorInstance::finishCreation\n\n\nonerror invocation using properties directly without Javascript getters: JSErrorHandler::handleEvent", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 477, "url": "https://github.com/qunitjs/qunit/issues/477", "title": "Fix  test \"testEnvironment reset for next test\"", "contents": "There's a problem with test \"testEnvironment reset for next test\".\nIt passes when run on a clean sessionStorage, but if one of the tests failed earlier, this particular test will now fail because we change the execution order.\nThis test relies on being run after the previous one in the test suite.\nI tried hacking around it with callbacks (e.g. deferred) but it doesn't work because when the 2nd one runs first, as it will wait forever (we change order, but we don't run in parallel, can't yet because of global state).\nLooks like something we need to rethink, perhaps solvable by allowing them to run in parallel after we refactor Assertion.", "createdAt": "2013-10-10T16:53:42Z", "updatedAt": "2014-11-06T16:04:41Z", "closedAt": "2014-11-06T16:04:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 478, "url": "https://github.com/qunitjs/qunit/issues/478", "title": "Backslash in string inconsistency in diff", "contents": "Hi,\nPlease have a look at http://jsfiddle.net/qEdGD/3/ .\nThe strings I compare contain both an escaped \" and an escaped \\.\nThe diff shows the escaped \" as \\\", but the escaped \\ as \\. Thus: '\\\" versus \\\\' becomes \"\\\" versus \\\". I think this is confusing (especially if there is another character behind the escaped \\), and it would be better to also show the \\ as \\\\ due to it's special meaning within strings.\nKind regards,\nFamlam\ntest(\"A failing test\", function () {\n    deepEqual('\\\" versus \\\\', \"\", \"A test that fails\");\n});", "createdAt": "2013-10-12T13:11:50Z", "updatedAt": "2015-10-20T19:37:59Z", "closedAt": "2015-05-15T16:56:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Famlam", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Famlam", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 1, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2013-10-15T09:54:58Z", "contents": "That quotes are escaped but backslashes are not is a flaw in both the original jsDump (and @NV's github fork, for that matter), which is how it came to manifest in qunit. However, that code has diverged so much that it's probably irreconcilable at this point anyway, and what's one more log on the fire?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 482, "url": "https://github.com/qunitjs/qunit/issues/482", "title": "Using qunit-fixture may cause memory leaks in scenario with jQuery data", "contents": "Currently, the qunit-fixture is restored after each test as following:\nfixture.innerHTML = config.fixture;\nThis causes memory leaks when using jQuery, because cleanData is not called for fixture content. Thus subscriptions and jQuery data won't be cleaned. To fix it we should use jQuery( \"#qunit-fixture\" ).html( config.fixture ) instead.\nAlthough, it worked correctly before following commit:\nf853685", "createdAt": "2013-10-23T14:25:40Z", "updatedAt": "2013-10-23T15:12:24Z", "closedAt": "2013-10-23T14:36:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tabalinas", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tabalinas", "company": "Fivetran"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 2, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-23T14:36:51Z", "contents": "QUnit has no dependency on jQuery. You should change how the reset works if you need to deal with jQuery data. See https://github.com/jquery/jquery/blob/eca79fbf5b79d85d137a8eb207fcb1431af47d4e/test/data/testrunner.js#L190", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-10-23T15:11:32Z", "contents": "FYI, reset is already deprecated (see #354) and planned for removal from the public API (see #453) in QUnit 2.0.\nCurrently blocked on jQuery core... exactly the piece (and a few others like it, IIRC) that @scottgonzalez linked to. See jquery/jquery#14040 filed by @jzaefferer.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 483, "url": "https://github.com/qunitjs/qunit/issues/483", "title": "QUnit.diff should be given dumped values before html escape", "contents": "The parameters can be serialised by jsDump, but they shouldn't be escaped yet so that a diff library can diff the real values instead of something that is already harder to work with.\nAfaik nothing relies on this, we should be able to move the escapeText call from around the values from jsDump to around the diff() call.", "createdAt": "2013-10-23T19:28:26Z", "updatedAt": "2015-05-18T15:29:48Z", "closedAt": "2015-05-18T15:29:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "shivamdixit", "company": "Uber "}], "comments_count": 7, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-10-23T19:34:32Z", "contents": "Use case: Started looking at jsdifflib for QUnit (thanks Ed Sanders), and that diff library outputs more sophisticated HTML (e.g. two-colum diff layout), but it takes text as input and ends up double escaped.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:05:57Z", "contents": "@Krinkle is this and the other issues labelled \"diff\" something you could look into?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-17T03:30:51Z", "contents": "@Krinkle If we move the escapeText call around the diff() call then the <del> and <ins> tags of diff are also escaped, because of which the output is all garbled.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T10:02:02Z", "contents": "@shivamdixit we should evaluate this issue in the context of using goodle-diff-patch-match (#772), since we're very likely moving to that diff implementation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-17T11:37:02Z", "contents": "Yup, I evaluated this issue in the context of using google-diff-patch-match library only.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T12:20:12Z", "contents": "Okay. Not sure if we still need this issue, might be invalid in this context. I'll leave it open for now, maybe @Krinkle can chime in. Let's focus on other issues until then.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:29:48Z", "contents": "Closing this since we can't reproduce the issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 485, "url": "https://github.com/qunitjs/qunit/issues/485", "title": "semaphor, start, stop", "contents": "Is there/or can we have a variable/method....\nto check the status of the semaphor?\nis it stopped? has it started?\non ajax calls, you can have success,complete, error, you may want to stop/start\nbut if it's already started then I don't need to worry about it....", "createdAt": "2013-11-04T13:53:01Z", "updatedAt": "2013-11-04T15:44:47Z", "closedAt": "2013-11-04T14:54:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "valtido", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "valtido", "company": "Valtido"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-11-04T14:48:12Z", "contents": "I don't think it makes sense to expose this information for the benefit of separating concerns and responsibility.\nIf your test called .stop, that same origin should also take care of calling .start.\nIf there's an ajax call later, call .stop again, and when the ajax request is completed, call .start.\nQUnit will make sure to continue once both are done, but there shouldn't be any reason to need to know the current semaphore or conditionally start. If your code makes an ajax request, call .stop and when its done, .start. Why would you need to know the semaphore level?\nI'd be happy to help find a solution if you can present a reproducible problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-11-04T14:54:22Z", "contents": "Yeah, if there is an issue with the implementation, we can address it. But for exposing the semaphore we first need a usecase.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-11-04T15:44:14Z", "contents": "Thanks @valtido.\nIn case of the jqXhr from $.ajax (or any promise for that matter), you should probably use .always instead of .done or .fail (\"completed\", \"success\" and \"error\" are the deprecated variants of \"always\", \"done\" and \"fail\").\nAs for response not having .help, that's something you can figure out.\nI agree that the semaphore counter is not great. Though we currently don't expose it, it is still possible for code to accidentally mess it up (e.g. imagine you have 2 asynchronous events and one of them fails and the other one calls .start twice, it will appear as if everything went fine).\nThis is why I'd like to change the structure around asynchronous testing in the next version of QUnit to instead have something like this.async(); which is like .stop that will return a unique start function that has to be called. Calling it twice will not work.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 487, "url": "https://github.com/qunitjs/qunit/issues/487", "title": "CDN CSS and JS URLs on QUnit's homepage are not read only!", "contents": "Trivial, yes. Bug, i believe so.\nOn QUnit's home page - http://qunitjs.com/ - you are displaying CDN URLs to the latest JS and CSS. But those are not in read only text-boxes. One can select the text and delete the URL! Not that editing it causes any harm, but it is not necessary. Not the least expected by a user.\nEasily reproducible on: Google Chrome 30.0.1599.101 m", "createdAt": "2013-11-12T10:40:05Z", "updatedAt": "2013-11-12T18:56:11Z", "closedAt": "2013-11-12T11:04:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "techfoobar", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "techfoobar", "company": "Stack Tree Studios"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 2, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T11:04:51Z", "contents": "Thanks. This would be an issue for https://github.com/jquery/qunitjs.com. I'm going to just close this rather than create a new issue in the correct repo though, since I've already fixed this with jquery/jquery-wp-content@1ac5710.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "techfoobar", "authorAssociation": "NONE", "createdAt": "2013-11-12T11:34:39Z", "contents": "Cool. I see it is fixed. :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 488, "url": "https://github.com/qunitjs/qunit/issues/488", "title": "Try to use WebDriver API for testing real events", "contents": "This probably won't ever get any code landed in QUnit, but we want to explore if we can trigger real events when running tests with the WebDriver API. Anyone familiar with that is welcome to participate in the discussion here.\nEventually we may document how to use QUnit together with the WebDriver API, if it works out.", "createdAt": "2013-11-13T19:24:45Z", "updatedAt": "2014-11-06T13:05:24Z", "closedAt": "2014-11-06T13:05:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 2, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-13T21:37:09Z", "contents": "FuncUnit used to utilize Selenium + Syn (amongst other libraries) for automation but it was probably before the rise of WebDrivers. I don't see any mention of Selenium/WebDriver in their latest docs, though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:05:24Z", "contents": "Wrong place to track this. We'll investigate this eventually for jQuery UI.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 489, "url": "https://github.com/qunitjs/qunit/issues/489", "title": "Checking primitive-like objects againts each other with deepEqual fails.", "contents": "Checking primitive value against primitive-like object runs smooth\nassert.deepEqual( 1, new Number( 1 ), 'Test 1' );\nBut checking primitive-like object against the same one fails:\nassert.deepEqual( new Number( 1 ), new Number( 1 ), 'Test 2' );\nRare situation, but nevertheless.", "createdAt": "2013-11-14T13:22:52Z", "updatedAt": "2014-11-06T16:36:23Z", "closedAt": "2014-11-06T13:04:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FarSeeing", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "FarSeeing", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-14T16:00:20Z", "contents": "I'm open to hearing what @jzaefferer and @Krinkle think about making an exception for these but, in reality, those values are truly not equal.  They would fail the strictEqual test as well since one is a number primitive and one is a Number Object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-14T16:30:26Z", "contents": "BTW, rather than making exception for these, I think the appropriate alternate approach might be to offer some way to compose a customizable \"deep\" assertion that allows the user to pass in a comparer function or options object that dictates how the 2 objects are compared... currently it's basically a strictEqual on all properties of the object.  I created Issue #466 for that idea already a while back.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-11-14T21:03:42Z", "contents": "@JamesMGreene\n\n[..] in reality, those values are truly not equal. They would fail the strictEqual test as well since one is a number primitive and one is a Number Object.\n\nThe case of assert.deepEqual( 1, new Number( 1 ) ) (according to @FarSeeing) is actually passing smoothly. It's the object-to-object one that's failing, which I would agree is a bug since the properties of those number objects are supposed to be \"equal\" (though it is likely failing because a Number object doesn't really have any significant properties to compare).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-16T19:55:06Z", "contents": "Doesn't have any enumerable properties, in fact.\nThanks for the correction, I definitely read the OP incorrectly. Sorry!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FarSeeing", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-26T09:48:32Z", "contents": "though it is likely failing because a Number object doesn't really have any significant properties to compare\n\nNot exactly. It's an intentional shortcut that leads to  just a == b comparison:\nhttps://github.com/jquery/qunit/blob/a64cf78c85b2464b828343b7416b6dfceb274203/src/equiv.js#L34", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T13:04:42Z", "contents": "// true\nnew Number( 1 ) == 1\n// false\nnew Number( 1 ) === new Number( 1 )\nAt least deepEqual is consistent with the native comparison. Considering that and how unlikely this is to be a problem in practice, and the lack of any other reports about this, I'm going to just close this as unresolved.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 490, "url": "https://github.com/qunitjs/qunit/issues/490", "title": "Move QUnit.expect to QUnit.assert.expect", "contents": "This will probably be covered in the PR for Issue #374 but I wanted to be more explicit about this.\nCurrently, the expect function is a property on the QUnit object.  I'd like to see it moved to the QUnit.assert (or similar Assertion class, per #374) so that I can use it as such in my testing.  If it is indeed moving onto the Assertion class via #374, then I'd like to see this in place ahead of time for an easier transition.\nCurrently, I've been using the following boilerplate in all my tests:\n(function(module, test, expect) {\n\n  module(\"blah\");\n\n  test(\"blah\", function(assert) {\n    (assert.expect || expect)(1);  // \u2190 Pertinent snippet\n    assert.ok(true);\n  });\n\n})(QUnit.module, QUnit.test, QUnit.expect);\nBut this is getting annoying. Alternatively, I could have made a polyfill-esque \"custom assertion\" (that doesn't really assert but rather just delegates to QUnit.expect) to get the method in place... but that is semi-annoying also if I need to include it as an extra script. \ud83d\ude09\nif (!QUnit.assert.expect) {\n  QUnit.assert.expect = QUnit.expect;\n}", "createdAt": "2013-11-20T17:27:53Z", "updatedAt": "2014-05-15T16:23:56Z", "closedAt": "2014-05-15T16:23:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 11, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2013-11-22T16:58:47Z", "contents": "I don't think it belongs on the Assertion object, it belongs on the Test object (which is currently not being exposed, but we could expose it as this, or as a property on the assert object, or visa versa).\nbtw, are you already referring to assert.expect in your tests today? That seems odd, since that doesn't exist, and (until now) hasn't been suggested afaik.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-22T17:23:43Z", "contents": "@Krinkle:\nFrom your initial description in #374:\n\nEach test() will be given an instance of Assertion which has an internal reference back to the Test object, so that they can easily be called asynchronously.\nIn addition to the assertion helpers, it could have the following built-in to the context based system as well:\n\nasync()\ndone()\nexpect()\n.not (instance of itself with internal reversal)\n\n\nThat comment is why I started using (assert.expect || QUnit.expect)(1) \u2014 and now using the polyfill mentioned above instead \u2014 within all of my recently created tests to keep them \"future forward\" [with a theoretical future that you suggested and are now suggesting otherwise \ud83d\ude09].", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2013-11-22T17:25:05Z", "contents": "And, to be fair, expect is absolutely an Assertion type, it just has an odd UI effect of not being displayed as a line item unless it fails.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-02T18:29:40Z", "contents": "I agree with moving (for now, adding) expect to assert. That also matches the behaviour in NodeUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T13:38:03Z", "contents": "I'm working on the global methods namespacing (#563) and I need a decision here, please.\nI also support the moving of expect method to assert.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T13:42:35Z", "contents": "My vote is still definitively to move it to QUnit.assert.expect. I've been polyfilling it there for over a year. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T13:48:26Z", "contents": "Let's do it then. Just make sure its backwards compatible. We keep supporting old variants, while updating docs to show the right way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T14:14:24Z", "contents": "It was easier than I thought. @e3c4459", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T14:19:54Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T14:22:08Z", "contents": "@jzaefferer The old variant will still live while the assertions are exported to QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T17:26:16Z", "contents": "Yeah, just found that while looking at your PR. See my comment there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 491, "url": "https://github.com/qunitjs/qunit/issues/491", "title": "Incorrect module name in moduleDone callback when testing single module", "contents": "If you have multiple modules, but run tests from a specific module, the moduleDone callback may have the wrong module name in the details object.\nFor example, if you run the following suite with query string ?module=foo, only the tests in module \"foo\" are executed, however, moduleDone details reports the name to be \"bar\":\nQUnit.moduleDone(function(details) { \n    console.debug(details.name);\n});\n\nmodule(\"foo\");\n\ntest(\"test1\", function() {\n    ok(true);\n});\n\nmodule(\"bar\");\n\ntest(\"test2\", function() {\n    ok(true);\n});", "createdAt": "2013-12-02T23:08:10Z", "updatedAt": "2014-01-02T17:32:29Z", "closedAt": "2014-01-02T17:32:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cuperman", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "cuperman", "company": "ServiceNow"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 495, "url": "https://github.com/qunitjs/qunit/issues/495", "title": "Update jshint config", "contents": "Should match the options in the style guide: http://contribute.jquery.org/style-guide/js/#linting (not sure if there's anything missing right now, need to check)\nShould add maxlength:100 and implement that.", "createdAt": "2013-12-17T19:48:52Z", "updatedAt": "2018-12-22T20:35:07Z", "closedAt": "2014-01-02T17:54:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2013-12-17T19:51:19Z", "contents": "Or use jscs to enforce line-lengths, if that's possible.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 496, "url": "https://github.com/qunitjs/qunit/issues/496", "title": "[QUnit.only] Add support for source-based test filtering (aka exclusive tests)", "contents": "I think it would be handy to be able to filter tests right in the source code. This feature is essential when Karma is used and the test suite is large.\nMocha and Jasmine already support this feature via '.only' and 'iit' respectively.\nWhat do you guys think?", "createdAt": "2013-12-24T16:55:07Z", "updatedAt": "2015-10-25T16:17:27Z", "closedAt": "2015-10-25T16:17:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ftokarev", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "ftokarev", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "markelog", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "mimshwright", "company": "MimsWright.com"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "ebenoist", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 32, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-24T17:31:00Z", "contents": "To be honest, from reading the Mocha docs, I don't understand how this provides any value at all. It seems like it just makes 99% of your test suite not do anything, and not in a dynamic way. Can you describe the use case?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ftokarev", "authorAssociation": "NONE", "createdAt": "2013-12-24T18:08:22Z", "contents": "I have Karma watching my files and running a test suite whenever I change a file. It is super handy, because I never have to leave a text editor -- just save a file and watch tests being executed. The problem arises when a test suite becomes large and slow to run. Source-based test filtering solves this problem.\nHere is a nice post about the topic", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-24T18:42:01Z", "contents": "For QUnit testsuite this is indeed useless, but if used with karma or phantom it might be pretty helpful feature, since you cannot grep specific tests through the console.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-24T19:21:22Z", "contents": "So you use this only during development in order to get just the single test you're working on to run?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ftokarev", "authorAssociation": "NONE", "createdAt": "2013-12-24T19:36:42Z", "contents": "@scottgonzalez , right, either a single test or a module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-02T17:49:38Z", "contents": "You can do this already, if you set the config before tests are loaded. In QUnit's own testsuite, adding these in a script tag before the actual tests works fine:\nQUnit.config.module = \"asyncTest\";\nQUnit.config.testNumber = 1;\nNote that testNumber is indexed from 1 (0 will be ignored).\nDoes that work for you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markelog", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-03T02:40:25Z", "contents": "@jzaefferer In this scenario, you would have count your tests which would be a tedious thing to do and it will not help if you have tests that executed only in specific environment.\nYou can do this already\nYou could also comment out or remove all tests that you don't want to run, which would be a tedious thing to do.\nI think this issue more about comfortable work with test framework but less about it abilities.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mimshwright", "authorAssociation": "NONE", "createdAt": "2014-02-08T06:40:07Z", "contents": "+1 for this feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ftokarev", "authorAssociation": "NONE", "createdAt": "2014-02-09T18:01:55Z", "contents": "For Karma users there is a temporal workaround", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-07T20:16:06Z", "contents": "since you cannot grep specific tests through the console.\n\nThis seems to be common with CLI-based test runners, which is unfortunate. Any idea why Karma doesn't support that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-04-07T20:26:14Z", "contents": "I agree, it's a very useful feature - obviously not for actual runs but for development purposes. When working on a module in a project with a large test suite, I usually enable tests only for this module or its part, or the test I'm working on now, selectively toggling it back & forth (with such a workflow it helps if the test structure is tree-like so benefits with QUnit would be lower, but still). Since this requires only minor modifications at the place of the test run (literally +-one letter), it can be done really fast.\nOne thing to note is for these kind of exceptions to not slip to master, sth like grunt-ddescribe-iit is needed for the Jenkins/Travis job.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-08T09:52:02Z", "contents": "Thanks for chiming in. I'm still wondering why this is source-based, instead of telling the CLI tool what tests to run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-04-08T09:53:50Z", "contents": "@jzaefferer How would you do it? It's easy in the code since you already have it open in an editor & it's easy to flip the test/group of tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T18:36:37Z", "contents": "As on #766 and now I'm bringing the conversation here, I proposed the implementation of QUnit.only\nPrevious arguments were:\n\nBased on feedback from other developers, I'm proposing QUnit.only to run just a single test block.\nQUnit.only implementation would be similar to QUnit.test but when registered to the tests queue, it would be flagged as the only valid test to run.\nThe behaviour should be like the rerun feature, but instead of using a browser interface, it would allow QUnit to run that single flagged test on other interfaces, like headless browsers (PhantomJS) and Node-like environments.\n\n@JamesMGreene asked a very reasonable question:\n\nWhat should happen if there is more than 1 instance of QUnit.only?\n\nRun multiple (makes the name only feel a little weird but not unreasonable)\nRun the first one but log a special global assertion failure for any additional instances\nDon't run any of them and log a special global assertion failure for all instances\nSomething else?\n\n\nI believe the best option is to make it work only for the first only call, all the remaining regular tests and only should be ignored in the run. As this is a method to help the development process only, we shouldn't care to trigger any failure in this one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T13:12:59Z", "contents": "Would you also make any changes in the HTML reporter? Maybe a badge similar to the one for QUnit.skip?\nAs for the exclusiveness, would be good to check other implementations like Jasmine and Mocha.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T16:22:35Z", "contents": "Meanwhile I've got to use Mocha on a project and got quickly annoyed by two implementation details of their only feature: It will only run the first only describe/it, and ignore others, unless they have the same name (probably not intended behaviour, but happend once due to copy-pasta). When I needed it, having it run all onlys would've been much more useful. Its also annoying to have to remember to undo these changes in the code before committing. So far I've ended up with only in master just once...\nI can see how CLI-based filter won't mix well with a watcher task, but still feel like this is the wrong solution. I'd like to have a watcher run the test that I just changed first (somewhat similar to QUnit's rerun feature preferring failed tests), then run remaining tests, but without showing the output of passed tests (another annoyance in mocha). That way you don't have to remember to revert source changes, you get fast feedback on the changed test, and you still get feedback from running all tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ebenoist", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-08T13:58:16Z", "contents": "This feature is the biggest thing I miss from Jasmine. As a code base grows, doing a full test run in an Ember app can mean waiting minutes. During this time the Qunit UI is completely unresponsive or continuously moves focus as it builds and tears down acceptance tests.  Having the equivalent of a Qunit.only would mean being able to focus on the task at hand with incredibly fast feedback only to delete that Qunit.only when you're confident in the correctness of your current unit of work.\nCurrently I use the module selector in the Qunit UI to accomplish something like this, but this can be incredibly clumsy as I need to wait for the full run to complete before the UI is responsive enough to select a specific module. This action also takes me away from the code I'm actually writing.\nPlease reconsider this feature request, as I think its far more important as SPA Qunit test runs become more and more complex.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-08T15:13:04Z", "contents": "QUnit.only is a welcome feature. I'll put this on my schedule, but I would also like any contribution to help implementing it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T12:31:07Z", "contents": "@ebenoist could you help implementing QUnit.only?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ebenoist", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-21T13:06:48Z", "contents": "I'll see if I can carve out sometime next weekend. Can you point out any conventions I should be aware of, potential designs, or similar concepts already in the QUnit codebase?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T13:32:32Z", "contents": "I think the design, including the display in the html reporter, of QUnit.skip comes closest to what we're looking for here. It should be fairly simple, so I think we can start with a pull request and go from there. No need for more up front design than what's in this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ebenoist", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-23T14:03:13Z", "contents": "Sounds good, I should be able to put up something soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-23T16:28:35Z", "contents": "@ebenoist, would you also regard the #528 when doing QUnit.only? that would be a ++", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ebenoist", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-08T15:30:38Z", "contents": "@leobalter I'll take a look. I finally carved out some time for this, I hope to get something up today.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-08T15:32:24Z", "contents": "nice! I'm looking forward!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ebenoist", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-08T19:44:59Z", "contents": "So after looking at this for a bit, the simplest way to accomplish this would probably be to set the filter and clear out the current config.queue:\n// Will be exposed as QUnit.only\nfunction only( testName, expected, callback, async ) {\n    var newTest;\n\n    if ( arguments.length === 2 ) {\n        callback = expected;\n        expected = null;\n    }\n\n    newTest = new Test({\n        testName: testName,\n        expected: expected,\n        async: async,\n        only: true,\n        callback: callback\n    });\n\n    QUnit.config.queue.length = 0;\n    QUnit.config.filter = newTest.module.name + \": \" + newTest.testName;\n\n    newTest.queue();\n}\nFor the reporter I can then list the number of tests skipped by doing Test.count - 1. And do some custom styling to show that the test was the only test being ran.\nFor testing I should be able to make sure that this test module runs first and then clears the filter manually to allow the remaining tests to run as normal.\nSomething like this:\nQUnit.module( \"QUnit.only\");\n\nQUnit.test( \"implicitly skipped test\", function( assert ) {\n  assert.ok( false, \"test should be skipped\" );\n});\n\nQUnit.only( \"only run this test\", function( assert ) {\n  assert.ok( true, \"only this test should run\" );\n});\n\nQUnit.config.filter = [];\nI can modify the reporter to display the test in the following fashion:\n\nThis approach should also allow for programatic module filters in the future if needed. Maybe something like:\nmodule( \"myModule\", { only: true })\nThoughts on this approach?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-09T11:29:01Z", "contents": "That sounds good to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-09T15:39:52Z", "contents": "The method implementation seems great.\nFor the tests we can isolate it on a different html file, repeating the failing tests after the only call and in other modules.\nAlso it is good to include a successive only call with a failing test, this way we make sure only the first registered only will run.\n\nRegarding the module approach: it might be good to discuss it with the nested modules as well. With the callbacks, my wish is to allow a QUnit.only replacing a module and running all the tests inside that module. That requires a further work to make QUnit.module and QUnit.test similar.\ncc @gibson042 (about my last paragraph).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ebenoist", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-09T15:47:21Z", "contents": "Great! I should be able to polish this up over the weekend or by early next week. I'll hold off on any module changes, but I really like the idea of using QUnit.only as a stand-in for a module as well. I think isolating modules is really where this feature begins to really shine. With that said, I'll put a PR up for just the simple case and we can iterate into something more robust.\nThanks for the feedback.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-09T15:57:51Z", "contents": "I think isolating modules is really where this feature begins to really shine.\n\nAgreed\nThe nested modules are already on the master branch, but having a PR for tests only will make it faster for a first release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-10-09T16:43:34Z", "contents": "@leobalter Sounds exciting! I think the biggest hurdle will be addressing the synchronously-invoked module callback vs. asynchronously-invoked test callback, but that looks tractable to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-15T22:01:26Z", "contents": "@ebenoist I'm very excited and looking forward to see your implementation. I would love to see your PR.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 499, "url": "https://github.com/qunitjs/qunit/issues/499", "title": "Provide 'runtime' property on moduleDone callback", "contents": "See #395 and #344.", "createdAt": "2014-01-03T10:45:30Z", "updatedAt": "2014-11-06T15:49:09Z", "closedAt": "2014-11-06T15:49:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T15:49:09Z", "contents": "This is the older ticket, but apparently we missed it. Now a duplicate of #645.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "help wanted"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 500, "url": "https://github.com/qunitjs/qunit/issues/500", "title": "Remove `duration` property on testDone callback", "contents": "Follow-up to #395.", "createdAt": "2014-01-03T10:45:32Z", "updatedAt": "2016-04-18T16:09:51Z", "closedAt": "2016-04-18T16:09:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 501, "url": "https://github.com/qunitjs/qunit/issues/501", "title": "Remove expected argument from test() and asyncTest()", "contents": "See #356", "createdAt": "2014-01-03T10:57:48Z", "updatedAt": "2016-04-18T16:09:52Z", "closedAt": "2016-04-18T16:09:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-05T16:08:14Z", "contents": "Note: Following #653, we are removing QUnit.asyncTest in v2.0, so this only affects QUnit.test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-05T16:11:14Z", "contents": "The plan was to warn on uses of the argument in 2.0.0, then removing the warning later on 2.1.0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lNTI1NjU2", "title": "2.1.0", "description": "", "createdAt": "2014-01-03T10:57:41Z", "dueOn": null, "number": 3, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 502, "url": "https://github.com/qunitjs/qunit/issues/502", "title": "Tests fail in IE6/7, \"security restrictions\"?", "contents": "The last two TestSwarm builds failed in IE6 and IE7, each with a timeout. That's reproducable in BrowserStack, where the page just throws an error on load.\nAfter digging into that for a while I found that I was unable to load dist/qunit.js directly. When attempting to do so, IE would show an alert with \"Your current security settings do not allow this file to be downloaded.\" This also seems the cause for the testpage to fail: dist/qunit.js doesn't get loaded at all, though without any errors, then the first attempt to use one of the exports in test/test.js throws an actual script error.\nI've googled a bit of that particular error message, even check the settings in the security tab, but there's nothing that looks like its restricting any file downloads. Even then, its not supposed to actually download the file (for storing on desktop or something), just to load it as a script.\nLooking for ideas how to resolve this. /cc @Krinkle @JamesMGreene @scottgonzalez @gnarf", "createdAt": "2014-01-06T13:59:22Z", "updatedAt": "2014-05-15T16:19:39Z", "closedAt": "2014-01-06T16:48:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "gnarf", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 7, "comments_data": [{"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T14:06:58Z", "contents": "huh - thats strange.  No server errors, just security errors?  Maybe ask\nthe browserstack guys to look too?\nOn Mon, Jan 6, 2014 at 8:59 AM, J\u00f6rn Zaefferer notifications@github.comwrote:\n\nThe last two TestSwarm builds failed in IE6 and IE7, each with a timeout.\nThat's reproducable in BrowserStack, where the page just throws an error on\nload.\nAfter digging into that for a while I found that I was unable to load\ndist/qunit.js directly. When attempting to do so, IE would show an alert\nwith \"Your current security settings do not allow this file to be\ndownloaded.\" This also seems the cause for the testpage to fail:\ndist/qunit.js doesn't get loaded at all, though without any errors, then\nthe first attempt to use one of the exports in test/test.js throws an\nactual script error.\nI've googled a bit of that particular error message, even check the\nsettings in the security tab, but there's nothing that looks like its\nrestricting any file downloads. Even then, its not supposed to actually\ndownload the file (for storing on desktop or something), just to load it as\na script.\nLooking for ideas how to resolve this. /cc @Krinklehttps://github.com/Krinkle\n@JamesMGreene https://github.com/JamesMGreene @scottgonzalezhttps://github.com/scottgonzalez\n@gnarf https://github.com/gnarf\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/502\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-01-06T14:09:37Z", "contents": "Example:\n\nhttp://jsfiddle.net/KtWKc/embedded/result/\nhttp://fiddle.jshell.net/KtWKc/show/light/\n\nI can reproduce the file not being loaded properly in Window XP / IE7 on browserstack, page remains blank. I can't find the security warning though, all I'm getting is QUnit is undefined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T14:32:02Z", "contents": "Anyone happen to have a real XP IE7 to test? -- Is it being loaded over https? maybe the root certs are out of date?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-01-06T14:41:13Z", "contents": "As for http security, in my example I used plain HTTP and that still failed.\nhttp://fiddle.jshell.net/KtWKc/show/light/\nhttp://codeorigin.jquery.com/qunit/qunit-git.js\nhttp://codeorigin.jquery.com/qunit/qunit-git.css", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T15:51:40Z", "contents": "Why codeorigin? Just to rule out the cdn?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gnarf", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T16:12:42Z", "contents": "Some debugging shows - trailing comma in object literal is the problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-06T17:03:52Z", "contents": "Well, at least next time jshint will catch this kind of issue :/ Thanks Corey!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 504, "url": "https://github.com/qunitjs/qunit/issues/504", "title": "Support for standard performance unit testing?..", "contents": "Does QUnit have an option to perform performance testing?\nWhich means: Run each unit X times, show the AVG, MIN and MAX duration for the test.\nIf there's a ready-to-use plugin for QUnit - I'd love to hear about it. Because it's almost useless without the performance part.\nThanks!", "createdAt": "2014-01-17T10:05:24Z", "updatedAt": "2014-08-07T21:23:16Z", "closedAt": "2014-01-29T15:20:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danielgindi", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "danielgindi", "company": "Self Employed, CTO at Netsource Ltd."}, {"login": "jzaefferer", "company": null}, {"login": "potomak", "company": null}, {"login": "samsmithnz", "company": "Microsoft"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 9, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-17T10:41:50Z", "contents": "No, QUnit doesn't have that and I don't know of any plugins. I don't understand how this makes QUnit \"almost useless\" - its a unit testing framework.\nDo you have a reference for unit testing frameworks that support this, on any platform?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielgindi", "authorAssociation": "NONE", "createdAt": "2014-01-17T10:45:21Z", "contents": "Of course. Xcode does this automatically for unit testing, as a very basic feature. That's one example, out of my sleeve.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-17T11:01:39Z", "contents": "That's an IDE, not a framework, right? Do you have examples of frameworks that do this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielgindi", "authorAssociation": "NONE", "createdAt": "2014-01-17T11:11:51Z", "contents": "It's an IDE, that supplies a Unit Testing framework inside it. Let's not be childish and play with words... I needed something, found out it's not there, and I've created it. :-)\nPull request #505", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "potomak", "authorAssociation": "NONE", "createdAt": "2014-01-21T14:16:17Z", "contents": "Well, I'm interested about this feature. It could be used to measure performance changes of BackburnerJS/backburner.js#67", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielgindi", "authorAssociation": "NONE", "createdAt": "2014-01-21T14:17:30Z", "contents": "It is in the pull request. Until they merge (if they decide to merge) - you can just compile from my fork.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-29T15:20:48Z", "contents": "I think this would work well as a QUnit plugin, similar to the ones already listed here: http://qunitjs.com/plugins/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "samsmithnz", "authorAssociation": "NONE", "createdAt": "2014-08-07T21:09:58Z", "contents": "Hi, I'm interested in this feature. Was it ever merged?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-07T21:23:16Z", "contents": "@samsmithnz: I didn't heard of any related plugin, but QUnit is a Unit Testing tool. It's not our intention to have this performance check behaviour on our core code. Extending QUnit with plugins is the way to go.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 509, "url": "https://github.com/qunitjs/qunit/issues/509", "title": "Wrong path on package.json", "contents": "Package.json says that the main path is dist/qunit.js, but once installed, this path doesn't exists and instead it is qunit/qunit.js. Bower.json has the correct one instead.", "createdAt": "2014-01-27T17:58:32Z", "updatedAt": "2014-12-01T19:45:17Z", "closedAt": "2014-12-01T19:45:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "piranna", "company": "CTO @lingbe"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-01-27T20:32:39Z", "contents": "Latest release (v1.12.0) correctly refers to qunit/qunit.js in package.json (and that file exists).\nIn the latest git master we refer to dist/qunit.js in package.json. After install by npm this file is automatically created. When installing from git in dev this is created by the prepublish hook (as run by npm install). When installing as package or dependency from npmjs.org the file will exist already as created by the release manager's run of npm publish.\nWhere are you getting an error?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-27T20:44:23Z", "contents": "I've just installed it as dependency of another project with npm install qunitjs --save-dev. I suposse that not being installed directly that's the reason why it hasn't installed the dev-dependencies and so it's why it didn't created the dist/qunit.js file. Anyway, I'm currently using the ones from qunit/ folder without problems, so what's the reason of Grunt and the dist/ file?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-28T02:35:11Z", "contents": "@Krinkle, latest release is the 1.13.0 (without the v) and it's really pointing to dist/qunit.jsboth in Gruntfile.js concat:dest and in package.json.\nAlthough, the built file is in qunit/qunit.js.\nI also downloaded qunit via npm and checked the file in node_modules/qunitjs/qunit/qunit.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-29T15:27:20Z", "contents": "The qunit/qunit.* files were created by the new release script: https://github.com/jquery/qunit/blob/b10cd7f0ade0486394261b304a9a75deb9f6b0ea/build/release.js#L21-22\nThe new release script is also responsible for the lack of the v prefix in the tag, which didn't notice until after the release. Since no other jQuery project uses the prefix, this is more consistent, but also confusing give the previous prefixed tags.\nRegarding npm prepublish, that doesn't really seem to do anything useful for us. The release script (link above) runs grunt as part of the release anyway, but as long as the dist dir is in .gitignore, the dist files won't be commited.\nGiven the current setup the correct thing to do seems to just update package.json to point at the correct file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T03:49:55Z", "contents": "qunit/qunit.js is created by the release script for backwards compatibility (for any release after 1.12 before 2.0, which so far has only been 1.13).\nFor usage within nodejs it doesn't really matter what main points for releases as both work in node. And afaik we're going to drop that anyway after 2.0.\nThe main use case for creating qunit/qunit.js is for people that use git and/or npm to pull in QUnit and refer to it directly (e.g. <script src=\"../node_modules/qunit/qunit/qunit.js\"> as various projects used to to, and some might still do, and they'd use ~1.11.0 or 1.x in their devDependencies), which meant we'd break their references if we wouldn't provide a single-file built in that location for releases after the source code split in 1.13.0-pre.\nFrom what I can see it may be best to revert 6fd1115 in master as there is no advantage in having main point to the old reference. It might even cause unexpected behaviour as our Grunt task (when working locally with grunt or npm install / npm test) only creates dist/qunit.js (the new entry point).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-31T06:29:58Z", "contents": "The main use case for creating qunit/qunit.js is for people that use git and/or npm to pull in QUnit and refer to it directly (e.g. <script src=\"../node_modules/qunit/qunit/qunit.js\"> as various projects used to to, and some might still do, and they'd use ~1.11.0 or 1.x in their devDependencies), which meant we'd break their references if we wouldn't provide a single-file built in that location for releases after the source code split in 1.13.0-pre.\n\nI'm using QUnit just this way (directly path from html), and also I'm\nthinking about send a patch to node-qunit so it can use qunitjs as\ndependence in the same way. I doesn't matter if the dir is qunit/ or dist/\nas it's usual with browser-oriented files on Node, it's only about there\nare inconsistences on the package paths. So, what do you think is the\ncorrect behaviour and why?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-14T01:28:55Z", "contents": "Reopening to review this again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T19:45:17Z", "contents": "I just ran this test, in an empty directory:\n$ npm install qunitjs\n$ node\n> require(\"qunitjs\")\nThat correctly outputs the properties of the QUnit object. If we'd change the main property, this would break, based on the files we currently create:\n$ ls -al node_modules/qunitjs/\ntotal 32\ndrwxr-xr-x  6 jza  staff   204 Dec  1 20:41 .\ndrwxr-xr-x  3 jza  staff   102 Dec  1 20:41 ..\n-rw-r--r--  1 jza  staff  1616 Aug  8 17:57 LICENSE.txt\n-rw-r--r--  1 jza  staff  2861 Aug  8 17:57 README.md\n-rw-r--r--  1 jza  staff  4357 Dec  1 20:41 package.json\ndrwxr-xr-x  4 jza  staff   136 Dec  1 20:41 qunit\nWe can eventually distribute the files in a different folder and update the main property accordingly. But as is, this is working fine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 510, "url": "https://github.com/qunitjs/qunit/issues/510", "title": "Implement assertContains", "contents": "I was interested in writing a PR for an assertContains or assertIn method but before I was just curious if there was a reason this already doesn't exist?\nI didn't want to conflict with any design decisions within the library.\nThanks.", "createdAt": "2014-01-27T18:23:02Z", "updatedAt": "2014-01-31T04:06:39Z", "closedAt": "2014-01-29T14:51:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "taddeimania", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "taddeimania", "company": "ACS Technologies"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-01-28T07:09:02Z", "contents": "I'm not sure on the particular reasoning for why this particular assertion does not exist in QUnit's core assertions but it's ridiculously easy to create your own custom assertions with QUnit.  In fact, the first example in the linked article is for assert.contains.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-29T14:51:19Z", "contents": "The implementation submitted as #513 is actually different from the one documented in the cookbook - one uses strings, the other arrays. Since indexOf isn't consistently available for Arrays, this is problematic.\nThe bigger issue though: We need to keep the API surface small. The interest in a contain assertion can't be that big, at least this is the first feature request I know of. For comparable assertions we ask those interested in providing a QUnit plugin, like those listed on the site: http://qunitjs.com/plugins/\nIt should be easy enough to take the code from #513 and put it into a separate repo. We can then add a reference to that on the plugins page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T04:06:39Z", "contents": "Aside from creating plugins (or registering the custom assertion within your test suite), doing it inline is pretty straight forward:\nQUnit.test( 'example', function ( assert ) {\n    var result = APP.getData( 'example' ),\n        list = APP.getList( 'example' );\n\n    assert.notStrictEqual( result.foo, undefined, 'Property foo is defined' );\n    assert.notEqual( $.inArray( 'foo', list ), -1, 'List contains foo' );\n\n    // or:\n    assert.equal( result.hasOwnProperty( 'foo' ), true, 'Property foo exists' );\n    assert.notEqual( list.indexOf( 'foo' ), -1, 'List contains foo' );\n} );\nThough as a general testing pattern, \"not\" assertions or \"contains\" are suspicious. It tends to suggest there is either a lack of consistency in the application or too much being tested at once (e.g. why not assert the exact array index, or object property value).\nSomething like the below would (whenever possible / appropriate) be recommended instead:\nQUnit.test( 'getDocument', function ( assert ) {\n    var result = APP.getDocument( 'example', { type: 'Hellowa' } );\n\n    assert.equal( result.title, 'Hello world', 'Title' );\n} );\n\nQUnit.test( 'List.sort', function ( assert ) {\n    var list = APP.getList( 'example' );\n\n    APP.List.sort( list, 'magic' );\n    assert.equal( list.indexOf( 'foo' ), 0, 'Magic sorts foo first' );\n    assert.equal( list.indexOf( 'bar' ), 3, 'Magic sorts bar last' );\n    // or:\n    assert.deepEqual(\n        list,\n        [ 'foo', 'hello', 'world', 'bar'],\n        'Magic sort'\n    );\n} );", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 517, "url": "https://github.com/qunitjs/qunit/issues/517", "title": "PhantomJS runner link on \"Plugins\" tab on qunit website does not work", "contents": "Hey there, the link to the PhantomJS runner on this page does not seem to be working.", "createdAt": "2014-01-29T23:28:52Z", "updatedAt": "2014-01-30T10:55:44Z", "closedAt": "2014-01-30T10:55:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "justinj", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "justinj", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-30T03:33:39Z", "contents": "The PhantomJS Runner was a addon inside QUnit repo and it's gone atm, ref: #470\nActually the site needs to be updated to remove the reference until someone creates another repo with PhantomJS Runner as a plugin.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-30T10:55:44Z", "contents": "Removed the reference as well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 518, "url": "https://github.com/qunitjs/qunit/issues/518", "title": "excessive trailing comma in js object", "contents": "Version 1.13.0\nThere's an excessive trailing comma at line nr 1378.\nCommas at the end of object definition are not allowed (it's not valid JSON).\nIt may cause problems with older web browsers and also it reports errors when compiling with google's Closure Compiler.", "createdAt": "2014-01-30T14:18:30Z", "updatedAt": "2014-02-13T23:21:04Z", "closedAt": "2014-01-31T16:27:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mateuszf", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mateuszf", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-30T15:50:58Z", "contents": "This is already fixed.\nRefs: bc3d7c2 && https://github.com/jquery/qunit/blob/master/src/test.js#L256\nNext update 1.14.0 will be released soon, as far as I know.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T16:27:51Z", "contents": "Yeah, this will be fixed in 1.14.0. Working on that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 519, "url": "https://github.com/qunitjs/qunit/issues/519", "title": "Refactor QUnit.diff", "contents": "QUnit.diff is uncovered yet.\nhttps://coveralls.io/files/127181586#L2137 :)", "createdAt": "2014-01-30T16:07:32Z", "updatedAt": "2014-02-13T23:20:53Z", "closedAt": "2014-01-31T17:06:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T16:27:12Z", "contents": "See also #478, #348, #335, #363. And #364, which is about replacing the current module with jsdiff, which might address some of these issues.\nRegarding the test coverage itself: I'd rather use a module maintained elsewhere, including tests, instead of writing tests for our \"copy\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T17:02:17Z", "contents": "Nice. That's exactly why I only opened this issue without patching. One thing I would suggest is move the Diff module to a new repo and use it as a dependency, but I'll check for jsdiff before.\nI'm also changing this issue name to target for the best solution and keep the references you already did here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-01-31T17:06:04Z", "contents": "Ops, #364 is already doing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 520, "url": "https://github.com/qunitjs/qunit/issues/520", "title": "Remove version from bower.json, update release script to write that", "contents": "See also jquery/jquery-release#31 (comment)", "createdAt": "2014-01-31T17:16:54Z", "updatedAt": "2014-11-06T12:50:26Z", "closedAt": "2014-11-06T12:50:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T12:50:26Z", "contents": "This was fixed previously, in cc889cb", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 521, "url": "https://github.com/qunitjs/qunit/issues/521", "title": "Missing CommonJS exports", "contents": "QUnit 1.12.0-1.14.0 fail to work in CommonJS environments because of its faulty UMD.\nIt checks for modules.exports but some CommonJS environments may not have it, only having exports, so then it extends what it thinks is the global object but its just the module scope, so QUnit is never exposed.\nSee here and here for examples of working UMD.", "createdAt": "2014-02-01T19:38:03Z", "updatedAt": "2014-12-06T19:57:47Z", "closedAt": "2014-12-03T11:32:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 15, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-05T10:11:01Z", "contents": "@leobalter could you look into this one? We used to \"support\" this, but never had any tests. We need proper tests in order to support other CommonJS environments.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-02-05T13:16:20Z", "contents": "Sure, I just need some time to read and understand this properly. I might finish this in 1 or 2 days.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2014-02-05T16:22:11Z", "contents": "For reference you can see this travis.yml which tests other CommonJS enviros - https://github.com/lodash/lodash/blob/master/.travis.yml", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T12:49:37Z", "contents": "As discussed in #540, without clear instructions on reproducing the issue, we can't do anything useful. See my comment there for details.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2014-11-06T15:37:05Z", "contents": "From your earlier comment on #540:\n\nI've just tested rhino, ringo and nashorn by doing a simple load(\"dist/qunit.js\") in each of them.\n\nWhen testing Rhino launch it with rhino -require that will give you access to the require(\"dist/qunit.js\") method but it doesn't have module.exports as that's not part of CommonJS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T16:06:08Z", "contents": "Thanks, I'll give that a try.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T19:37:02Z", "contents": "My test:\n$ rhino -require\njs> Object.keys(require(\"./dist/qunit\").QUnit)\nurlParams,isLocal,module,asyncTest,test,skip,start,stop,config,is,objectType,url,extend,load,begin,done,log,testStart,testDone,moduleStart,moduleDone,reset,pushFailure,assert,equiv,dump,jsDump,expect,async,push,ok,equal,notEqual,propEqual,notPropEqual,deepEqual,notDeepEqual,strictEqual,notStrictEqual,throws,raises,diff,init\nWithout exports.QUnit = QUnit the last line above throws an error:\nuncaught JavaScript runtime exception: TypeError: Expected argument of type object, but instead had type undefined\n\nThis should do:\nsrc/export.js\ndiff --git a/src/export.js b/src/export.js\nindex c3b6118..340038b 100644\n--- a/src/export.js\n+++ b/src/export.js\n@@ -48,7 +48,12 @@ if ( typeof window !== \"undefined\" ) {\n     window.QUnit = QUnit;\n }\n\n-// For CommonJS environments, export everything\n+// For nodejs environments, export everything\n if ( typeof module !== \"undefined\" && module.exports ) {\n     module.exports = QUnit;\n }\n+\n+// For CommonJS with exports, but without module.exports, like Rhino\n+if ( typeof exports !== \"undefined\" ) {\n+    exports.QUnit = QUnit;\n+}\nWhat do you think @jdalton?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2014-12-01T20:10:57Z", "contents": "That would allow devs to be able to consistently use require('path/to/qunit').QUnit so I dig it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T00:38:41Z", "contents": "@jdalton Not really. At least not according to that snippet and the code as it was merged in 993a618. In Node.js, exports is undefined so QUnit (aka module.exports) doesn't get a .QUnit property. require('qunit').QUnit would be undefined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:42:31Z", "contents": "In Node.js, exports is undefined\n\nSay what, now?  I was under the long-running understanding that exports and module were both existing free variables for Node modules.\ni.e. theoretical implicit line at the start of every module's evaluation:\nvar exports = module.exports = {};\nThe Node source appears to still confirm this is the expected behavior:\n\nA new Module instance's exports property is set to a new object instance: joyent/node @ lib/module.js#L40\nThe module sandbox created during compilation/caching includes both exports and module: joyent/node @ lib/module.js#L419-422", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2014-12-04T16:15:31Z", "contents": "Or ya coulda just created a test.js file and console.log'd it \ud83d\ude38 (my bad for not doing that last night). The confusion was caused because exports doesn't exist in the REPL while module.exports does. However both exist when running code, node test.js. Also a unit test should be added to cover it, the require(path).QUnit for Node, if it doesn't exist already.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T16:45:57Z", "contents": "Also a unit test should be added to cover it, the require(path).QUnit for Node, if it doesn't exist already.\n\nGood idea.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T17:27:15Z", "contents": "More accurately, the QUnit sub-property isn't present on the exported Node.js module because exports is already a severed object reference (due to setting module.exports = QUnit; earlier). So, we need to update the code and add a test. \ud83d\ude09", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T17:38:12Z", "contents": "Created PR #709 to fix the Node.js export parity and add a test for it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-12-06T19:57:46Z", "contents": "@JamesMGreene I tested it via the REPL (Node.js v0.10.33). There module.exports was defined, but exports yielded a ReferenceError. I guess it's different in regular execution.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 528, "url": "https://github.com/qunitjs/qunit/issues/528", "title": "There is no visual indication when you're focused on a single test", "contents": "When you double-click on a test to run only that test, there is no indication that you are only running a single test except for the URL. As you can see from the popularity of this StackOverflow ticket, this is confusing for more people than just myself.\nI propose that the page offer some indication that you're running a single test and show a link to go back to the full suite.", "createdAt": "2014-02-08T00:15:38Z", "updatedAt": "2015-10-20T17:51:37Z", "closedAt": "2015-10-20T17:51:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mimshwright", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "mimshwright", "company": "MimsWright.com"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 9, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-02-08T03:10:40Z", "contents": "It looks like a \"nice to have\" ui feature, but I don't see it as something needed. It's relative easy to see the differences in the URL and to know what's happening, even more when you have more than 2 test blocks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mimshwright", "authorAssociation": "NONE", "createdAt": "2014-02-08T06:32:32Z", "contents": "Back when I was a novice user I had a very confusing experience and spent at least half an hour trying to figure out what I had done wrong. I think if it can be fixed with a simple prompt in the UI, that would help a lot of newbs.\nIt would actually be really cool to implement something like the Mute and Solo buttons from an audio mixer. For example, you could mute a test that you want to ignore or solo (test alone) one or more tests. That way you could show all the tests on the same page with only the active ones greyed out.\n(Now that I think about it, I'm not sure there's a real use case for a mute button if the tests are truly independent of each other, unless you wanted to suppress one that takes a long time to execute)\nAnd by the way, i'm willing to write / prototype the feature myself. I just wanted to get buy in first.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-11T18:21:52Z", "contents": "I like the idea of changing how \"invalid tests\" (as determined by validTest) are handled. Instead of not showing them at all, render the main list item, but make it static/disabled/non-interactive. That way the selected test would stand out between the disabled tests. The same would work for filter=... or a selected module.\n@leobalter @JamesMGreene thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mimshwright", "authorAssociation": "NONE", "createdAt": "2014-06-21T05:01:21Z", "contents": "Just want to point out that I'm now up to 67 total upvotes on this issue on stack overflow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-21T10:06:43Z", "contents": "Probably only 47, really, as the 20 votes on the question almost certainly overlap the 47 votes on the answer. \ud83d\ude04\nIf we intended to ignore your suggestion, we would just close this issue. Your point is valid but our free time for the project is limited.\nPatches are always welcomed for consideration if a particular bug or enhancement is of high personal importance to you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-30T01:45:39Z", "contents": "I might work on something. Just out of curiosity, what would people think about a module link as well?\nSo basically, if you run a test page with testId=..., it would generate a \"Run [module name] tests\" link and a \"Run all tests\" link. If you run a test page with module=..., it would generate a \"Run all tests\" link. Of course, it gets a little more complicated when multiple modules and/or testIds are specified, but I'm sure we could come to some reasonable design on this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-06-17T14:13:17Z", "contents": "@platinumazure I'm not sure what you have in mind there, for the UI. That seems a separate design from the \"greying out\" discussed above. Anyway, would be great if you could put together a prototype.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-17T14:15:49Z", "contents": "Um, yes, that's technically true. It just seemed to be a natural\nconsequence of that single-test focus. I'll open a new issue or PR though\nsince my proposal is technically not dependent on this one.\nOn Jun 17, 2015 9:13 AM, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n\n@platinumazure https://github.com/platinumazure I'm not sure what you\nhave in mind there, for the UI. That seems a separate design from the\n\"greying out\" discussed above. Anyway, would be great if you could put\ntogether a prototype.\n\u2014\nReply to this email directly or view it on GitHub\n#528 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-06-17T15:16:39Z", "contents": "Okay, thank you. I'm definitely interested in exploring other options to address the original issue!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 530, "url": "https://github.com/qunitjs/qunit/issues/530", "title": "Deprecate QUnit.init", "contents": "This requires some research on how QUnit.init() is currently used. By examples like the one described in #427 should be discouraged.\nIf we decide to deprecate QUnit.init(), we should update code and docs to do that formally, then set this ticket to the 2.0 milestone to replace the public method with a warning, along with a separate ticket to remove the method completely in 2.1.", "createdAt": "2014-02-13T23:12:52Z", "updatedAt": "2014-07-30T15:21:24Z", "closedAt": "2014-07-30T15:21:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 531, "url": "https://github.com/qunitjs/qunit/issues/531", "title": "Standard reporter interface", "contents": "We want to provide a reporter interface that we can share with other testing tools like Jasmine and Mocha, to make it easier for integration tools - like Karma, browserstack-runner, grunt plugins - to hook into QUnit and other tools. Anyone writing a new JavaScript testing tool should be encouraged to provide the same interface, making it more reasonable to support these tools.\nThis requires a bunch of research. So far we identified two components that need to be standardised:\n\nneeds a data format ala JUnit XML (here's an unofficial xsd to validate the output) or TAP, that is flexible enough to support QUnit and others. Specifically, Jasmine and other BDD styles support (more or less) infinite nesting, which QUnit doesn't\nneed a list of events that provide this data. Something like done should provide the full datastructure, other events should help to output progress\n\nRelated tickets:\n\n(#351) testDone should provide aggregated assertion results\n(#405) Implement reporter interface\n(#422) Implement QUnit callbacks event listener style\n(#472) QUnit.done should provide aggregated results", "createdAt": "2014-02-13T23:42:06Z", "updatedAt": "2017-03-31T04:12:02Z", "closedAt": "2017-03-31T04:12:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "supunasp", "company": null}, {"login": "fcarstens", "company": "WWU M\u00fcnster"}], "comments_count": 16, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T02:24:25Z", "contents": "I reviewed Mocha's reporter interface first.\nImportant details:\n\nAll reporters seem to inherit from a base reporter, although it doesn't appear that this is an actual requirement. The base reporter is responsible for providing many base utilities, such diff-ing displays, etc.\nThe reporters are setup as an event listener that listens for the following events to be emitted:\n\nrunner.on('start', fn) \u2192 QUnit.begin(fn);\nrunner.on('suite', fn) \u2192 Mostly equivalent to QUnit.moduleStart(fn) except that Mocha suites can be infinitely nested. The nesting is simply achieved by treating suites as a stack: if a new suite event is emitted without a suite end event for the previous suite, the new suite is a child of the previous suite.\nrunner.on('test', fn) \u2192 QUnit.testStart(fn)\nrunner.on('pass', fn) \u2192 Equivalent to QUnit.testDone(fn) with a \"success\" status. This is a convenience event only as the same info could be obtained via the test end event.\nrunner.on('fail', fn) \u2192 Equivalent to QUnit.testDone(fn) with a \"failure\" status. This is a convenience event only as the same info could be obtained via the test end event.\nrunner.on('pending', fn) \u2192 Equivalent to QUnit.testDone(fn) with a \"pending\" status. This is a convenience event only as the same info could be obtained via the test end event.\nrunner.on('test end', fn) \u2192 QUnit.testDone(fn)\nrunner.on('suite end', fn) \u2192 Mostly equivalent to QUnit.moduleDone(fn) except that Mocha suites can be infinitely nested.\nrunner.on('end', fn) \u2192 QUnit.done(fn)\n\n\n\nThere are also two more events that relate to the before, beforeEach, afterEach, and after functions:\n\nrunner.on('hook', fn)\nrunner.on('hook end', fn)\n\nThe reporter can be set by calling mocha.reporter(reporter) or via the Mocha constructor options [if you're using Mocha programmatically].\nMocha will only allow a single reporter.\nMocha does not have an event for assertions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T04:18:01Z", "contents": "Jasmine reporters are classes that can implement up to 6 core eventing methods which will be invoked during the appropriate times:\n\nreporter.jasmineStarted \u2192 QUnit.begin\nreporter.suiteStarted \u2192 Mostly equivalent to QUnit.moduleStart except that Jasmine suites can be infinitely nested.\nreporter.specStarted \u2192 QUnit.testStart\nreporter.specDone \u2192 QUnit.testDone\nreporter.suiteDone \u2192 Mostly equivalent to QUnit.moduleDone except that Jasmine suites can be infinitely nested.\nreporter.jasmineDone \u2192 QUnit.done\n\nReporters are added via jasmine.getEnv().addReporter(reporter).\nJasmine will allow using multiple reporters simultaneously.\nJasmine does not have an event for assertions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T15:42:03Z", "contents": "That is looking promising, since the overall structure in all three projects is the same. QUnit only has one level of nesting for \"suites\", so the common standard should include the nesting, even if we won't make use of it.\nThe EventEmmiter style that Mocha implements and we've discussed previously (#422) seems like a good starting point.\nBoth mocha and jasmine use \"suite\" for the component we call \"module\". That reminds me of the discussion in #190. Not that I have any interest in reopening that once more.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T17:09:13Z", "contents": "Are we looking for a standard reporting interface (e.g. the EventEmitter interface, and a standardised set of event names and arguments, which HTML or CLI formatters can use to display results and indicate progress). Or for a standard test suite summary format (e.g. like a JSON variant of jUnit TestSuite XML output) that one would retrieve at once to store and display results (either all, or just the failures).\nI suppose both are interesting, but they're different things. I think the latter is more valuable for now (for grunt plugins and browserstack/saucelabs interpreters). The way to get that summary is probably not a big deal and can be slightly different per test framework (it's unlikely they'd factor out that one line of code to be the same between all frameworks). It'd be like QUnit.on( \"<eventname>\", function( summary ) { callback( summary ); });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T17:31:18Z", "contents": "Regarding the summary format, see also jquery/testswarm#183.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-03-26T18:16:35Z", "contents": "After today's QUnit meeting, @JamesMGreene put together a proposal: https://gist.github.com/JamesMGreene/9786246\n\nCouple of thoughts on https://gist.github.com/JamesMGreene/9786246/90f16610b02b8267d18f61b7648b6364ca84da39:\n\nI'm not sure if the universal reporter interface should distinguish between suites and tests. Not every test framework might have these. And the ones that do, implement them quite differently. For example, in Jasmine suites and tests can be nested. Is there a use case of separating these?\nI'd recommend using names that are also valid identifiers in javascript (ideally both es3 and es5, but at least es5) so that we don't need bracket syntax and string literals all over the place.\nThough this is just coding style, knowing examples sometimes get blindly copied and are hard to kill once they get spread, I'd reduce the examples to 1) Not do typeof function check (just plain boolean check), 2) Use dot notation, 3) Not create local variables for each of them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T19:16:53Z", "contents": "@Krinkle: I did some changes based on your suggestions: https://gist.github.com/leobalter/226637d148577ac9b5c3\nI did some research about reserved words as well to check for irregularities, everything is ok.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T19:29:23Z", "contents": "@garu is a friend who is a Perl developers used to the TAP specification. I've talked to him and he gently agreed to help prototyping the methods for the TAP output.\nBtw, now I also saw that we should expand the methods exportation to handle the passed data in each of the callback arguments. Probably Jasmine and Mocha are both different from QUnit too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T13:53:35Z", "contents": "Cross-reference issues:\n\nmochajs/mocha#1326\njasmine/jasmine#659\ntheintern/intern#257", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T11:36:40Z", "contents": "Created central org and repo for discussion and prototying: https://github.com/js-reporters/js-reporters\nDiscussions: https://github.com/js-reporters/js-reporters/issues/\nWill be inviting folks from the various unit testing framework teams to join.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "supunasp", "authorAssociation": "NONE", "createdAt": "2015-03-05T06:31:45Z", "contents": "Gsoc 2015 -\nI am interested in this project idea. but I cant understand this and how to work. Any help or references would be great.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T16:57:23Z", "contents": "@asped08 you should check out https://github.com/js-reporters/js-reporters - starting with the readme there, then going into the open issues, there's plenty to read.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-24T17:08:26Z", "contents": "Based on a discussion on IRC about \"why would a reporter consume TAP?\", I think there are multiple scenarios that we should at least consider. For QUnit we currently have a pretty simple model for just one abstraction layer:\nRunner -> Reporter\n\nRunner runs tests, reporter registers event handlers to output result, usually via HTML reporter in the browser, but could also be on CLI etc.\nWhen running tests in CI envs, the often an intermediate data format that is picked up by something else:\nRunner -> Data -> Reporter\n\nHere the runner could write JUnit XML to disk (that would effectively be another reporter, though), which then is picked up by a Jenkins plugin that visulizes test failures over time. Instead of xml, this could also use TAP. Instead of a Jenkins plugin, this could get visualized using a HTML reporter. In that case, we'd have TAP fed into a reporter.\nThe jsreporter project is currently mostly about the runner interface that provides the data in the first place. That's an important aspect and worth focusing on. It would also be great to do research on other data formats and interchangable reporters (e.g. around node-tap).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fcarstens", "authorAssociation": "NONE", "createdAt": "2015-03-24T17:26:13Z", "contents": "Thanks for the clarification!\nLooking at @JamesMGreene's work, wouldn't it be something like\nRunner -> Standardized Data/Interface -> TAP-Reporter -> consumer (e.g. Jenkins)\n\nMy point on IRC was that the TAP-Reporter would be one of the (interchangeable) reporters, as in  http://mochajs.org/#tap-reporter and not directly part of the standardized interface.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-24T17:29:19Z", "contents": "Yes, I agree, that's a better description.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:12:02Z", "contents": "We're definitely using js-reporters as our standard reporter interface.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "meta"], "milestone": {"id": "MDk6TWlsZXN0b25lNzg4NjM1", "title": "JS Reporter", "description": "Once the js-reporter is far enough, issues in this milestone should be implemented/merged.", "createdAt": "2014-09-13T16:01:45Z", "dueOn": null, "number": 5, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 532, "url": "https://github.com/qunitjs/qunit/issues/532", "title": "Cleanup assertions", "contents": "In order to reduce our API surface and encourage good testing practices, we want to review existing methods and their usage and probably make some changes.\nIdeas so far:\n\nMake equal() and notEqual() strict by default, removing strictEqual() and notStrictEqual() along the way.\nRemove ok(), suggesting better alternatives, for example replace ok(array.indexOf > -1) with notEqual(array.indexOf, -1)", "createdAt": "2014-02-13T23:45:12Z", "updatedAt": "2014-06-24T15:43:37Z", "closedAt": "2014-06-24T15:29:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 9, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-02-14T00:59:25Z", "contents": "I've been searching for things that would not be simple to move to a new assertion type rather than ok(), and so I've found this:\nok(car instanceof Car);\nBy not having the ok() method we could append this to a method helper like:\nfunction isInstanceOf( obj, cls ) {\n    return obj instanceof cls;\n}\nequal( isInstanceOf( car, Car ), true );\nIt doesn't look so great.\nI'll search for more stuff and probably checking what's being tested on other jQuery projects.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-02-14T01:12:29Z", "contents": "That is a perfect example of something that should be replaced with a custom assertion, to output actual/expected properly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T18:06:22Z", "contents": "I've been researching the other commits and saw in #267 that QUnit intend to follow the CommonJS specification.\nRegarding this, that would be my last argument here to not get rid of ok() and equal(). :)\nEven though, I understand that reinforcing good practices is great, but I still think that are good tests for truthy values in ok.\nedit: By saying that would be my last argument, I'm not trying to be aggressive. I'm just saying I won't have any other reasonable and/or valuable arguments to disagree.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-19T11:49:38Z", "contents": "Now that we've improved the default message for ok, its not quite as bad anymore as it was.\nIf we want to stick with CommonJS, we'd have to keep equal and strictEqual as-is as well. Since that spec was largely based on the QUnit API, its questionable to not change our API based on a spec that's based on our API...\nA better reference might be this proposal, which never quite got anywhere, as far as I can tell: http://wiki.commonjs.org/wiki/Unit_Testing/B\nThere was some discussion about that here: https://groups.google.com/forum/#!topic/commonjs/8gabHvW_TGc", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-26T11:37:13Z", "contents": "Looking at this test, replacing the implementation of equal with strictEqual seems wrong, since those tests only work thanks for deepEqual handling NaN explicitly. May be the better approach would be to make equal use the same logic as deepEqual, but without any traversing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-26T11:37:47Z", "contents": "@leobalter @rxaviers @scottgonzalez any thoughts on the above? Also on keeping ok?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-26T13:01:46Z", "contents": "I prefer to keep equal() relying on JS native comparisons.\nIf we tweak it, bringing some of QUnit.equiv logic to equal, we would have to document a table showing how our comparisons works, and I don't see it as productive.\nOtherwise, deepEqual is more than a deep comparison, but an abstraction to these tweaked equivalencies that are interesting for themselves. We could call it as assert.equiv, because the name may be not appropriate, but I wouldn't change it as well.\nRegarding this above, I don't see any good on making equal works like deepEqual without the traversing. It's not worthy, IMHO.\nIf I had to call one method that doesn't have much value to me: propEqual and most of negations: notDeepEqual, notStrictEqual, notPropEqual. But that is personally related to my use cases and I don't mind them as code pollution as we are removing them from the global scope in a near future.\nFor curiosity, I've played with some equivalencies comparisons: http://jsbin.com/leqebihi/1/edit?js,output", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-26T17:57:41Z", "contents": "Regarding equal() -> strictEqual(), my only concern is divergence from other unit testing frameworks. We've already gotten complaints about devs not liking different APIs across testing frameworks within the same project (usually client vs. server tests).\nRegarding equal() -> deepEqual() without traversal, it seems strange that a non-strict equality check wouldn't just be ==.\nRegarding following a CommonJS spec, I personally think following CommonJS for anything is silly.\nRegarding ok(), I think it's probably abused quite a bit, but it does provide value. Though in many cases I use it just to ensure a method is called and the usage looks like ok( true, \"Should invoke X.\" ) but that could easily be converted to a custom assertion that always passes like assert.executed( \"Should invoke X.\" ) or similar (though now I have to go through the hell of deciding on a name ;-P).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-24T15:29:58Z", "contents": "Reviewing the latest comments again, I don't think there's anything to do here. We'll leave everything as is, with the improved ok() assertion in place.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 533, "url": "https://github.com/qunitjs/qunit/issues/533", "title": "Improve support for writing custom assertions", "contents": "Currently custom assertions can't delegate to existing assertions like equal() without messing up the stack trace we display for failed assertions. Always having to use QUnit.push isn't the best API for writing custom assertions.\nIdeas so far:\n\nat least expose the traversal of QUnit.equiv, related to #466\nmaybe expose an API for custom assertions that fixes stack traces when delegating to other assertions?\nor try to have the assertion wrapper/constructor keep track, so that it doesn't matter on what level you call assertions, it'll unwrap correctly\nor try and see what happens if we simplify the stack trace handling - a few more lines might be worth removing the complexity", "createdAt": "2014-02-13T23:48:15Z", "updatedAt": "2015-05-18T15:58:03Z", "closedAt": "2015-05-18T15:58:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-24T15:43:44Z", "contents": "Looks like #588 fixed this, didn't?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-24T16:40:02Z", "contents": "@leobalter No, it does not. We still rely on the stacktrace depth and there is no good way to re-use the logic of another assertion method. And that's basically the only obstacle, #588 didn't get us closer or farther away from that.\nI'd actually support dropping the stacktrace hacking. Let's just keep assertion path included in the stacktrace. We could still trim the path between the Test class and the reporter (if we want to), but I don't see why we'd filter out the calls between the test suite and the assertion method(s). If anything, they could be useful.\nAt this point we'd have the basics of re-using assertion methods. I mean, if one doesn't care about the stracktrace one could already call another assertion method.\nHowever there's some issues still that make this a bit ugly. Such as what to display in actual/expected and whether there is a sensible diff to perform.\nOne thing we could do is separate the meta data, display handling, and comparison. This can quickly end up with a large pile of over-engineered classes though. But a general direction to consider.\nPerhaps a separate QUnit.compare object that houses re-usable functions that return boolean.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T18:05:37Z", "contents": "Perhaps a separate QUnit.compare object that houses re-usable functions that return boolean.\n\nNot a bad idea. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:58:03Z", "contents": "Perhaps a separate QUnit.compare object that houses re-usable functions that return boolean.\n\nBased on my own usage and from reported issues and implementations of custom assertions, I don't see a practical need for this.\nRegarding stack traces, we're now exposing QUnit.stack(), which might be of use in custom assertions.\nI don't see a need to keep this ticket open any longer.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 534, "url": "https://github.com/qunitjs/qunit/issues/534", "title": "Implement async/done callback system", "contents": "We still want to provide better support for async testing. We have several options for implementing this, though they all come down to getting rid of methods within the test context.\nSome ideas:\n// async() returns done callback\ntest(..., function(assert) {\n  // async() can be invoked multiple times, each callback has to be invoked\n  var done = assert.async();\n  setTimeout(function() {\n    done();\n  });\n});\n// this makes integration of Promises very easy\ntest( ..., function( assert ) {\n    /* ... */\n    APP.foo().always( assert.async() ).done( function () {\n        assert.ok(true);\n    } );\n    APP.bar().always( assert.async() ).done( function () {\n        assert.ok(true);\n    } );\n});\n\n// all tests are async, always have to explicitly end the test, async or not\ntest(..., function(assert) {\n  assert.end();\n});\n\n// expect sets up async test, finishes when number of assertions ran\ntest(..., function(assert) {\n  // makes this test async\n  expect(1);\n  setTimeout(function() {\n    // expected 1 assertion, continue with other tests\n    // any other assertions will fail this test\n    assert.ok(true);\n  });\n\n// return a promise from the test\n[...]\nFor the last one, see #634\nFrameworks that are good references: mocha, nodeunit. We could force calling done like nodeunit, always or depending on configuration.\nRelated: #374\nThis replaces #331, to have a fresh start on this discussion.", "createdAt": "2014-02-13T23:53:46Z", "updatedAt": "2016-11-01T16:29:03Z", "closedAt": "2014-09-11T20:52:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 10, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "domenic", "company": "Google"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "stefanpenner", "company": "@LinkedIn"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "wycats", "company": "Tilde, Inc."}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "dmethvin", "company": "Independent Consultant"}, {"login": "bitcity", "company": null}], "comments_count": 35, "comments_data": [{"authorLogin": "domenic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-15T16:43:29Z", "contents": "Would be nice to support promise-returning tests too. Even jQuery \"promises\" would still work, since you only need to call .then once and don't depend on it behaving like a real promise with transformation behavior. See:\n\nMocha's support\nBuster's support\nblue-tape\nThe 8 lines of code to make Mocha work", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-03-15T17:40:28Z", "contents": "Should be easy enough to make the test functions promise-aware.\nMaking the assertions promise-aware (as in chai-as-promised) would take a bit more effort, though. That could be done as a plugin full of custom assertions that override the regular assertions, or add some in-between chain like .eventually.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-29T03:21:03Z", "contents": "dream:\n\nreturning a promise from a test helper being the trigger that turns the test into an async test\nthat promise should be automatically asserted to fulfill\nautomatic start/stop", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-29T10:02:05Z", "contents": "test(..., function(assert) { var done = assert.async(); ... done(); }\nasyncTest(..., function(assert) { assert.done(); })\n\nI'd recommend there not be a async.done as this again causes a problem by having only one reference. async() should return a unique callback each time, and they have to all be called (and only called once each) before the test can be closed.\nIn the common case where there is only one asynchronous action taking place, asyncTest could call it head of time. In that case we need to expose the done callback somehow. Perhaps as a parameter?\nQUnit.test( ..., function( assert ) {\n    var done = assert.async();\n    /* ... */\n    done();\n} );\n\nQUnit.asyncTest( ..., function( assert, done ) {\n    /* ... */\n    done();\n} );\n\nQUnit.test( ..., function( assert ) {\n    /* ... */\n    APP.foo().always( assert.async() ).done( function () {\n        assert.ok();\n    } );\n    APP.bar().always( assert.async() ).done( function () {\n        assert.ok();\n    } );\n} );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-29T20:29:53Z", "contents": "I agree with @Krinkle's last comment: no assert.done. As for QUnit.asyncTest, I would prefer it just gets removed from the API in favor of overloading the signature much like what @Krinkle showed above:\nQUnit.test(\"foo\", function(assert) {\n  // This is a synchronous test\n});\n\nQUnit.test(\"bar\", function(assert, done) {\n  // This is an asynchronous test based on `func.length`\n  // Similar to Mocha's implementation\n\n  done();\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-29T21:06:24Z", "contents": "Hm.. I support removal of QUnit.asyncTest, but using the function arguments to indicate whether a test is async is an API we should stay far away from.\nCalling .async() is quite intuitive, self-explanatory and declarative. Nothing to be afraid of or something repetitive in need of abstraction.\nIf we are to remove QUnit.asyncTest, we'd simply require that people consistently use var done = this.async() in their function body (not unlike Grunt or node-assert). If we really want to abstract that use case though, I'd rather we just keep QUnit.asyncTest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-15T19:36:48Z", "contents": "Other frameworks require the assert.done() method in every test block, assuming everyone can be async. Example:\nQUnit.test(\"foo\", function(assert) {\n  ...\n  /* sync/async stuff */\n  ...\n\n  assert.done();\nI'm ok with this, I don't how other developers would react, but I think it's a nice approach to remove QUnit.asyncTest.\nAlternative can be calling assert.async() to make the test require assert.done() or done = assert.async();. I prefer to place these methods on the test callback argument rather than the context (this). Just like https://github.com/substack/tape do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T14:34:21Z", "contents": "tape's plan method is interesting. Its similar to our expect method, but also causes the last expected assertion to finish the test, currently the equivalent of calling start(). In tape, with tests being async by default, you either call end() or the amount of assertions as specified in plan(), everything else generates errors.\nSince we encourage using expect() already, and there's an option that forces its usage, we could give that model a try.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-15T06:42:53Z", "contents": "I was talking with @stefanpenner today about supporting the Promise-returning async test concept again. It sounds like this would be very useful for the @emberjs core team's QUnit usage, and I don't see any reason why it can't or shouldn't be supported.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-23T18:14:11Z", "contents": "I've split out the Promise part of the discussion to #632", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T23:09:17Z", "contents": "We've had some discussion about this on IRC. Based on that I've updated the initial ticket with the various proposals we currently have.\nI currently tend to Krinkle's take on this, favouring the first proposal to replace our current stop/start methods, without alternatives, while deprecating stop(), start() and asyncTest(). Reproducing from the ticket above:\n// async() returns done callback\ntest( ..., function( assert ) {\n  // async() can be invoked multiple times, each callback has to be invoked\n  var done = assert.async();\n  setTimeout(function() {\n    done();\n  });\n});\n// this makes integration of Promises very easy\ntest( ..., function( assert ) {\n    /* ... */\n    APP.foo().always( assert.async() ).done( function () {\n        assert.ok(true);\n    } );\n    APP.bar().always( assert.async() ).done( function () {\n        assert.ok(true);\n    } );\n});\nThis is explicit, flexible and scoped to the test. The integration with promises is very simple as well, as the second example shows.\nAs for the alternatives:\n\nMaking all tests async and requiring an end() call enforces a single exit point. That's desirable, but not always possible. It also adds overhead to otherwise sync tests.\nThe tape inspired extension of making tests with expect(1) async, then implicitly calling start() when reaching the specified number of assertions is a nice API with little overhead, but has the big drawback of always requiring precise assertion count. Some projects, like jQuery UI, use this already, but not everyone wants it, since its a burden to maintain.\nThe promise support, as suggested in #634, is not explicit and not flexible, since it requires a single exit point (like end()). The approach above replaces the return with .always( assert.async() ), which is pretty reasonable.\n\nWould be great to get feedback on this proposal. Pinging a few people to get more eyeballs: @stefanpenner @wycats @dmethvin @scottgonzalez @arschmitz @gseguin", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-30T04:37:03Z", "contents": "Redoing @jzaefferer's example in Promises A+ spec terminology:\n// async() returns done callback\nQUnit.test( ..., function( assert ) {\n  // async() can be invoked multiple times, each callback has to be invoked\n  var done = assert.async();\n  setTimeout(done, 500);\n});\n\n// this makes integration of Promises very easy\nQUnit.test( ..., function( assert ) {\n    APP.foo()\n      .then(function() {\n        assert.ok(true);\n      })\n      .finally( assert.async() );\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-30T04:55:14Z", "contents": "returning a promise from the callback would handle the \"async completion\" for us, no need to inform qunit of a completion manually. Also this would propagate exceptions, that would become test failures.\nQUnit.test( ..., function( assert ) {\n  return foo()\n    .then(function(value) {\n      assert.equal(value.name, 'stef');\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wycats", "authorAssociation": "NONE", "createdAt": "2014-08-30T05:12:04Z", "contents": "@jzaefferer I was telling you about the approach that @stefanpenner is describing above. It has proven to be very flexible and simple for us \ud83d\ude04", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-30T15:56:36Z", "contents": "I see no harm in supporting both the explicit and implicit Promise resolutions. It didn't take that much code to support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-30T16:00:25Z", "contents": "@JamesMGreene support both is fine, I would like to suggest documentation promote the implicit. As it demonstrates more idiomatic promise usage. (with many positives)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-30T17:08:54Z", "contents": "@stefanpenner\n\nQUnit.test( ..., function( assert ) {\n  return foo()\n    .then(function(value) {\n      assert.equal(value.name, 'stef');\n    });\n});\n\nThis is a very good reason for supporting #634, which I otherwise considered to be somewhat superfluous. On the other hand, it is worth noting that a broken foo().then (i.e., one that never executes the provided fulfillment listener or just fails to return a promise) will generate false positives unless expect was used.\n@JamesMGreene\n\n// this makes integration of Promises very easy\nQUnit.test( ..., function( assert ) {\n    APP.foo()\n      .then(function() {\n        assert.ok(true);\n      })\n      .finally( assert.async() );\n});\n\nfinally isn't in the ES6 draft or current browser implementations, so I think this must look a little different:\nQUnit.test( ..., function( assert ) {\n    var done = assert.async();\n    APP.foo()\n      .then(function() {\n        assert.ok(true);\n      })\n      .then( done, function( rejection ) {\n        assert.strictEqual( arguments, undefined, \"Unexpected rejection\" );\n        done();\n      });\n});\nIn other words, although I really do like assert.async() returning a unique resynchronization function, good integration with promises almost requires either that function or assert itself to include a little more:\nQUnit.test( ..., function( assert ) {\n    var done = assert.async();\n    APP.foo()\n      .then(function() {\n        assert.ok(true);\n      })\n      .then( done, done.abort ); // or done.fail/assert.abort/etc.\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-30T17:40:37Z", "contents": "finally isn't in the ES6 draft or current browser implementations\n\nTrue, I forgot finally was overlooked for the ES6 Promise spec. I believe the plan is to add it in ES7, though.\n\nIn other words, although I really do like assert.async() returning a unique resynchronization function, good integration with promises almost requires either that function or assert itself to include a little more\n\nTrue, which in my mind justifies the slick manner in which the implicit Promise resolution works. It abstracts away this exact setup you mentioned in your last code example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-30T18:45:18Z", "contents": ". On the other hand, it is worth noting that a broken foo().then (i.e., one that never executes the provided fulfillment listener or just fails to return a promise) will generate false positives unless expect was used.\n\nthis is not true, as detecting a thenable should put the test into async mode, which should timeout.\nimplicit thenable detection case is still the best when dealing with promises.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-30T19:18:28Z", "contents": "this is not true, as detecting a thenable should put the test into async mode, which should timeout.\n\nCorrect. And if the return value is not a thenable, the test will just ignore it altogether.\n\nimplicit thenable detection case is still the best when dealing with promises.\n\nI agree.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-31T04:09:41Z", "contents": "On the other hand, it is worth noting that a broken foo().then (i.e., one that never executes the provided fulfillment listener or just fails to return a promise) will generate false positives unless expect was used.\n\nthis is not true, as detecting a thenable should put the test into async mode, which should timeout.\n\nI think you've misunderstood, maybe because I cited two distinct cases based on your return foo().then(function(){ assert... }) example that would manifest as false positives in the absence of expect:\n\nfoo().then returns a thenable, but ignores the callback and therefore no assertions are made\nfoo().then fails to return a thenable at all and therefore QUnit never enters async mode\n\nI'm not claiming either to be likely or necessarily arguing against the implicit async behavior, just pointing out potential pitfalls for the sake of complete analysis. Honestly, I think they are completely addressable by a recommendation to use expect.\nAt any rate, I very much like both assert.async() and thenable-based async, though I would argue that the former is more flexible and more fundamental if only one is to make the cut.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-31T13:39:54Z", "contents": "foo().then returns a thenable, but ignores the callback and therefore no assertions are made\n\n\nThis case is already covered by the PR via async timeout.\n\n\nfoo().then fails to return a thenable at all and therefore QUnit never enters async mode\n\n\nThis is intentionally not covered by the PR currently. However, we could enforce this by allowing only thenables [or undefined/null] to be returned, otherwise throw an error. I think this will be OK for almost everyone but there is a remote possibility that someone wrote a plugin that duck-punches QUnit.test(...) and does something based on a return value. I'm not overly worried about that, though, so I would say we proceed and let a bug be filed if anyone takes issue with it.\n\nAt any rate, I very much like both assert.async() and thenable-based async, though I would argue that the former is more flexible and more fundamental if only one is to make the cut.\n\nDefinitely true that assert.async() is more important but I think we can safely include both.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-09-01T02:08:56Z", "contents": "foo().then returns a thenable, but ignores the callback and therefore no assertions are made\n\nThis case is already covered by the PR via async timeout.\n\nNot exactly:\nQUnit.test( \"false positive\", function( assert ) {\n    var broken = {\n        then: function( onFulfilled, onRejected ) {\n            // whoops; forgot to invoke onFulfilled\n            return Promise.resolve(\"mock fulfillment\");\n        }\n    };\n    return broken.then(function( fulfillment ) {\n        // never called :(\n        assert.ok( false );\n    });\n});\nAlthough looking at it now, I see that the problem is neither new nor fixable by QUnit. Comment withdrawn.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-01T02:52:42Z", "contents": "Fix:\nQUnit.config.requireExpects = true;\nThat's how I roll. \ud83d\ude09", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-01T02:56:43Z", "contents": "Does anyone have any opinions on this earlier remark? I'm inclined to implement it as such.\n\n\n\nfoo().then fails to return a thenable at all and therefore QUnit never enters async mode\n\n\nThis is intentionally not covered by the PR currently. However, we could enforce this by allowing only thenables [or undefined/null] to be returned, otherwise throw an error. I think this will be OK for almost everyone but there is a remote possibility that someone wrote a plugin that duck-punches QUnit.test(...) and does something based on a return value. I'm not overly worried about that, though, so I would say we proceed and let a bug be filed if anyone takes issue with it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmethvin", "authorAssociation": "NONE", "createdAt": "2014-09-01T21:40:27Z", "contents": "I think that draws a pretty nice line around it. I suppose someone could be duck punching the API but that's got to be rare. Just don't release it as a patch version or the semver folks will get all pissy about it. \ud83d\ude08", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-01T23:30:33Z", "contents": "@JamesMGreene it does look good, regarding what @dmethvin said on the semver.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T00:21:47Z", "contents": "Better leave it as-is for now given @dmethvin's wise semver reminder. We can harden it for ensuring Promises are returned in v2.0.0, if still desired.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T14:19:11Z", "contents": "In v2.x, we'll need to keep QUnit.start (or something equivalent) around in the public API for dealing with the autostart config:\nQUnit.config.autostart = false;\nrequire([\"tests/testModule1\", \"tests/testModule2\"], QUnit.start);\nDo we also want to keep QUnit.stop around in the public API?  If so, should they just become a global start/stop blocking mechanism operating on a Boolean level rather than a semaphore counter?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T15:26:15Z", "contents": "Between start, load and init we definitely need some cleanup. Would be great if you could review these to get a more complete picture.\nSomething that I mentioned earlier in this discussion, but got no response to: Any objections to deprecating and eventually removing QUnit.asyncTest?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T16:12:48Z", "contents": "@jzaefferer: Krinkle and I both supported removing asyncTest in earlier comments. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T17:40:28Z", "contents": "Sorry, I missed that. Good to know :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-11T23:02:10Z", "contents": "yay", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bitcity", "authorAssociation": "NONE", "createdAt": "2014-11-29T15:47:27Z", "contents": "Great addition \ud83d\udc4d\nIs there a tentative release date for this feature (I believe it'll be in 2.0)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-11T16:27:06Z", "contents": "This is in 1.16.0, released a week ago.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 535, "url": "https://github.com/qunitjs/qunit/issues/535", "title": "Deep equal objects from different frames", "contents": "Hello\nIn my application I pass objects from an iframe to the parent window and I'd like to write a test for that, but because the object is created inside another frame deepEqual return false even if they're actually equal.\nHere's a test case\nindex.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>QUnit Example</title>\n  <link rel=\"stylesheet\" href=\"http://code.jquery.com/qunit/qunit-1.14.0.css\">\n</head>\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n  <iframe src=\"iframe.html\"></iframe>\n  <script src=\"http://code.jquery.com/qunit/qunit-1.14.0.js\"></script>\n  <script>\n\n\n  test(\"data coming from iframe\", function () {\n    deepEqual(data, {\n        banana: true\n    }, \"Serialized from iframe: \" + JSON.stringify(data));\n  });\n  </script>\n</body>\n</html>\niframe.html\n<script>\nwindow.top.data = {\n    banana: true\n};\n</script>\n\nWorkaround is\n test(\"data coming from iframe\", function () {\n    var copy = jQuery.extend(true, {}, data);\n    deepEqual(copy, {\n        banana: true\n    }, \"Serialized from iframe: \" + JSON.stringify(copy));\n  });\nThe above code passes the test", "createdAt": "2014-02-19T08:54:22Z", "updatedAt": "2014-11-06T12:45:46Z", "closedAt": "2014-11-06T12:45:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piuccio", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "piuccio", "company": "@en-japan-air "}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T12:45:46Z", "contents": "This also works when using propEqual: http://api.qunitjs.com/propEqual/ - since that's pretty much what propEqual is made for (\"this assertion can be used to compare two objects made with different constructors and prototype\"), I don't see anything else we could do here.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 537, "url": "https://github.com/qunitjs/qunit/issues/537", "title": "Inconsistent paddings/margins", "contents": "@DarkPark wrote:\n\n\nthe left side alignment is messy\nthe right side has no indentations at all\nthere are some problems with vertical alignment as well\n\n\nMoved from qunitjs/qunitjs.com#64", "createdAt": "2014-02-20T03:31:44Z", "updatedAt": "2014-02-21T17:24:51Z", "closedAt": "2014-02-21T17:24:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 538, "url": "https://github.com/qunitjs/qunit/issues/538", "title": "loading tests asynchronsly results in unpredictable execution of test via the rerun button or the url parameter \"testNumber=x\"", "contents": "Hello,\nI tried to look to see if this issue has already been reported, but didn't find anything that specific to the issue.\nIf your loading tests via require like the example code found on the QUnit documentation http://api.qunitjs.com/QUnit.config/\nQUnit.config.autostart = false;\nrequire(\n  [ \"tests/testModule1\", \"tests/testModule2\" ],\n  function() {\n    QUnit.start();\n  }\n);\nrequirejs does not provide any gaurentee the order of tests/Module1 or test/Module2 retrieval or executions. Thus it's possible to have Module2 to run first than Module1 to run second. Order doesn't usually matter except if you hit the rerun button which puts the testNumber=x argument in the url. If the load order changes, test x is possibly a different test than you had expected. If your running test over a network it's not too hard to reproduce.\nDaniel", "createdAt": "2014-02-27T03:09:54Z", "updatedAt": "2014-09-22T14:05:42Z", "closedAt": "2014-09-22T14:05:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dgeorges", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "dgeorges", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "bcowgill", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "mikesherov", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 20, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-02-27T03:52:21Z", "contents": "Some similar discussion here: #496 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcowgill", "authorAssociation": "NONE", "createdAt": "2014-02-27T10:22:25Z", "contents": "Couldn't you force the load order to for the purposes of keeping testNumber the same?\nQUnit.config.autostart = false;\nrequire(\n[ \"tests/testModule1\"],\nfunction() {\nrequire(\n[ \"tests/testModule2\" ],\nfunction() {\nQUnit.start();\n...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dgeorges", "authorAssociation": "NONE", "createdAt": "2014-02-27T18:59:07Z", "contents": "@bcowgill yes that would work.\nAnother workaround that we are currently using is to have each Module return a function and then run that function in deterministic order. Such that it looks like this:\nrequire([ \"tests/testModule1\", \"tests/testModule2\" ], function() {\n       for (var i=0; i<arguments.length; ++i) {\n        if (typeof arguments[i] === \"function\") {\n              arguments[i].call();\n        }\n    }\n    QUnit.start();\n});\nThis isn't horrible except it is still a workaround the documented way (by the qunit website and others) of running QUnit tests with Require such that the rerun feature works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-02-27T19:42:38Z", "contents": "testNumber should remain dynamic by the same principle as the tests should be atomic.\nIMHO, I don't see the use requirejs as a necessary optimization for loading tests files. As the files are loaded async you should expect them to have dynamic indexes (testNumber).\nIf you do not want to load files in the classic mode (<script src=tests.js></script>) you might still have to deal with workarounds to check for a specific test. Suggestions:\n\nspecify the module name in the [url]config\nhandle a QUnit.log callback.\n\nEdit: this article might help a bit: Effective Unit Testing with AMD", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dgeorges", "authorAssociation": "NONE", "createdAt": "2014-03-05T01:59:10Z", "contents": "@leobalter Thanks for the article. It was a good read. I believe it does argue the usefulness of loading test via require instead of the classic script mode, especially if your source is already using AMD modules.\nSo I am not sure what the process is for such a bug. (This is actually the first bug I've entered). There are workarounds, but I feel the rerun button should execute a more explicit command indicating the test name instead of the test number or something at least something that uniquely identifies the test.\nThis bring me to another question is there a qunit 2.0.0 being planned. I can't seem to find any info about it, but it's mentioned in the documentation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-03-07T16:59:56Z", "contents": "I don't know if the QUnit team would like to implement it but we could add a feature to make testNumber relative to a selected module if anyone.\nLike: index.html?module=foo?testNumber=2 to run only the second test from module foo.\nToday the testNumber param ignores the module param.\n@jzaefferer thoughts? If you agree I can work on it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T12:56:46Z", "contents": "The rerun feature was originally using the filter parameter, using the module and test name. This had its own issues, leading us to the testNumber parameter we have today. Neither is perfect, since there's really no reliable way to identify a test: Both order and names can change.\nBefore implementing anything, we'd have to go back and see why exactly we implemented testNumber. Searching for tickets doesn't yield anything useful, so may need some git blameing.\nAs for 2.0.0 roadmap, we have a 2.0 milestone: https://github.com/jquery/qunit/issues?milestone=2&state=open\nThere's also the meta tickets, which represent the overall roadmap, independent of any version: https://github.com/jquery/qunit/issues?labels=meta&state=open", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-12T12:59:33Z", "contents": "I added testNumber to address #241.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikesherov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-03T15:41:20Z", "contents": "Adding tests via an async loader like AMD means that test order can change. Do test names between runs change more often than test order itself?\nFor example, in jQuery UI, there are tests that get skipped conditionally in old browsers. If I'm running just one test and then copy and paste the url for a single test running into that old browser, suddenly I'm rerunning a different test because it's in a different order.\nAlso, see the comments here: jquery/jquery-ui@baa3378#commitcomment-7641009\nI would think that having rerun work by hashing the entire test name would result in less issues than positional notation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T15:48:12Z", "contents": "Agreed with @mikesherov, it would be better to hash the module name/path and test name together to make a more unique identifier. It doesn't fix everything, though, as people can choose to use non-unique names for their modules and tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-03T15:58:10Z", "contents": "Using the names has historically been problematic. See #241.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikesherov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-03T15:59:04Z", "contents": "@scottgonzalez I thought that was only a problem because it used substring matching of the test name and not exact matching.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-03T16:00:19Z", "contents": "That's probably true.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T16:08:43Z", "contents": "I believe that's correct: it was more of a loose \"grep\"/contains.  Mocha has the same functionality and problem, AFAIK.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T16:57:22Z", "contents": "I wonder if we could implement a new rerun filter using the name's hash instead of replacing it. As said, both has issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikesherov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-08T01:44:05Z", "contents": "I'm still unsure what issues the hash filter has unless you name multiple tests the exact same thing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-09-08T03:29:06Z", "contents": "@mikesherov The problem is with filter essentially being implemented using String.indexOf / RegExp.test. Which matches multiple tests when a test contains the name of another test.\n\nFoo.con\nFoo.open\nFoo.openAndStart\nBarFoo.connect\n\nTest 1 would also match test 4, and test 2 also matches test 3.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-09-08T04:02:24Z", "contents": "That just means that @mikesherov's proposed unique-identifier filter for rerun needs a new URL parameter, since it can't use the existing filter and probably shouldn't overload testNumber. How about testId?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-08T13:08:51Z", "contents": "testId sounds reasonable to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-08T15:16:12Z", "contents": "A PR that deprecates testNumber and replaces it for the \"Rerun\" link with testId would be great.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 539, "url": "https://github.com/qunitjs/qunit/issues/539", "title": "QUnit closeEnough with percentage", "contents": "I've been doing some comparisons and an epsilon difference is not always desired. So a percentage error based comparison function might be useful.\ncould we have a closeEnoughPct ? my rough and ready function below has worked so far but there's probably float dragons I haven't hit yet. Also I've not written a qunit plugin so...\n// check if result and expected values are nearly equal values within a percentage of each other\n// https://github.com/jquery/qunit/tree/v1.11.0/addons/close-enough\nfunction shouldBeNearlyEqualValue(result, expected, percent) {\n  if (expected) {\n    return Math.abs(100 * (result - expected) / expected) <= percent ? true : (result + ' is not nearly[<=' + percent + '%] of ' + expected);\n  }\n  else {\n    // expecting zero here be dragons: (Epsilon Comparisons) http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\n    return !result;\n  }\n}\nI use it like this:\nequal(shouldBeNearlyEqualValue(result, expected, Plan.percent), true, '.constrainZoom(>max) should be max ' + expected);\nSo on a failure it gives all detail of what's wrong. But it would be cool to use it as a proper test and have the result/expected explain that they differ my more than a percent.\nIf you think it's worth adding to qunit I can figure out how to make a plugin.", "createdAt": "2014-02-27T14:39:00Z", "updatedAt": "2014-03-12T14:05:34Z", "closedAt": "2014-03-07T18:44:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bcowgill", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "bcowgill", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-03-07T16:44:24Z", "contents": "@bcowgill, would you mind to edit your comment and use Markdown features to improve code readability?\nThere's a good reference to checkout before editing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-07T18:44:15Z", "contents": "This should be reported against https://github.com/JamesMGreene/qunit-assert-close\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T14:05:34Z", "contents": "Created JamesMGreene/qunit-assert-close#1.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 542, "url": "https://github.com/qunitjs/qunit/issues/542", "title": "Determine testing strategy", "contents": "IE6/7, Opera 12.1x & Safari 5.1 have been removed from the popular browser set and moved to the weekly job together with Android browsers. Since QUnit also uses this browserSet, it's now not tested fully as it should. There are three possibilities to fix it:\n\nCreate a popular-qunit browser set with contents previously in the popular browser set - especially good if QUnit doesn't plan to drop IE6/7, Opera 12.1x & Safari 5.1 when jQuery Core does.\nAdd a \"QUnit weekly\" Jenkins job and test it on the weekly browser set.\nCreate separate popular-qunit browser set as in (1) and weekly-qunit containing only Androids. Then add a \"QUnit weekly\" Jenkins job and test it on the weekly-qunit browser set - better than 2. if QUnit doesn't plan to drop those browsers.\n\nWhile the first option is the quickest, QUnit should be tested on Android browsers, especially that jQuery Core runs tests on them using QUnit. Therefore, I'd opt for (2) if you plan to drop IE6/7, Opera 12.1x & Safari 5.1 when jQuery Core does (in 1.13/2.3) or (3) if you want to keep supporting them longer.\ncc @jzaefferer", "createdAt": "2014-03-12T09:27:10Z", "updatedAt": "2014-05-05T20:04:41Z", "closedAt": "2014-05-05T20:04:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 15, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-03-13T00:59:04Z", "contents": "I'd like to keep supporting them longer. It's quite cheap to do so for QUnit (don't recall much, if any, difficulties with supporting things cross-browsers) and I don't see much gain in dropping them.\nSince QUnit is used closely inside development cycles, I think it'd be useful if people can benefit from the latest features / bug fixes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-13T02:58:42Z", "contents": "So the 3rd option? I'd like QUnit to be tested on Android.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-03-13T03:42:54Z", "contents": "OK", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-13T12:41:14Z", "contents": "@Krinkle OK, if the QUnit team agrees with the 3rd option, I'll need you to create a \"QUnit Weekly\" job similar to the \"jQuery Weekly\" one you've created. I can configure the rest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-13T12:44:53Z", "contents": "Option 3 sounds good to me, too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-14T16:48:48Z", "contents": "@jzaefferer When do you want to run the QUnit weekly job? Saturday & Sunday nights are taken by Core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-14T16:52:12Z", "contents": "Saturday morning?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-14T16:56:15Z", "contents": "Saturday morning Pacific will mean Saturday ~noon in Europe. Is that OK?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-03-14T17:11:09Z", "contents": "More like Saturday evening, isn't it? If morning is 9am, it would be 6pm here.\nI don't really care, just pick something that doesn't overlap with the Core jobs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-14T17:27:03Z", "contents": "Right, OK.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-18T10:51:42Z", "contents": "Since the weekly jobs take way less than I expected (about 30 minutes to finish, sometimes a browser gets a hiccup and it takes an hour but that's single test modules so it doesn't matter too much) so I'll decrease timeouts from 4h to 1h. I also scheduled those jobs to run 4 times a week, on Tuesdays, Thursdays & Saturdays (2.x at 1 a.m., 1.x at 3 a.m.). I can schedule QUnit a couple of days a week as well, perhaps Wednesdays, Fridays & Sundays would be OK?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-03-18T11:15:52Z", "contents": "Just chiming in late to say that Option 3 make sense to me as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-03-24T19:00:14Z", "contents": "See #546.\nAs for Android browsers, I'll need someone (probably @Krinkle) to create the QUnit Weekly project (see jquery/infrastructure#251)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-04-15T10:42:22Z", "contents": "See #552", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-05-05T20:04:41Z", "contents": "After all, I've moved all Android browsers to the main run; they seem to run just fine and fast enough (3 min 9s). Let's see if it's not too flakey; if not, we can stay in current configuration.\nLink to the first run with Androids: http://swarm.jquery.org/job/2972", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 543, "url": "https://github.com/qunitjs/qunit/issues/543", "title": "Allow nested suites (modules)?", "contents": "A personal sore point for me when using QUnit is the lack of nested suites (modules) that are offered by other popular frameworks like Mocha and Jasmine.\nI've given it some cursory thought and, if we agree it adds value, I don't foresee any major roadblocks to implementing that capability.  It would give us some options for richer reporting outputs as well, e.g. Mocha's sleek nested HTML report:", "createdAt": "2014-03-12T18:06:30Z", "updatedAt": "2015-10-08T00:49:24Z", "closedAt": "2015-10-08T00:49:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "dcherman", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "esbanarango", "company": "@envoy "}], "comments_count": 15, "comments_data": [{"authorLogin": "dcherman", "authorAssociation": "NONE", "createdAt": "2014-03-12T18:09:12Z", "contents": "+1000!\nThe lack of nested modules ( like nested describes ) in QUnit have been one of my major drivers for using mocha in newer projects.\nEven better if it supports setup/teardown within those nested modules so we can get the equivalent of beforeEach and afterEach", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-03-12T18:09:55Z", "contents": "This could also work wonders to cleaning up the HTML report for the jquery/qunit-composite runner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-04-08T09:20:24Z", "contents": "What API would you use for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-04-08T19:33:14Z", "contents": "API idea:\nQUnit.test( 'APP.Foo', {\n  setup: fn,\n  teardown: fn\n}, function( assert ) {\n  var foo = new App.Foo();\n  assert.ok( foo, 'instantiation' );\n\n  assert.test( 'foo.add', {\n    setup: function () {\n      foo = new App.Foo();\n    }\n  }, function( assert ) {\n    assert.test( 'foo.add( String )', function( assert ) {\n      assert.equal( foo.add( 'x' ), 'default x' );\n      assert.equal( foo.add( 'y' ), 'default x y' );\n    } );\n    assert.test( 'foo.add( String... )', function( assert ) {\n      assert.equal( foo.add( 'x', 'y' ), 'default x y' );\n      assert.equal( foo.add( 'a', 'b', 'c' ), 'default x y a b c' );\n    } );\n  } );\n\n  assert.test( 'foo.reset()', function( assert ) {\n    foo.add( 'x', 'y' );\n    assert.equal( foo.reset(), 'default' );\n  } );\n\n} );\n\n\nQUnit.test( 'APP.Bar' );\n...\nWhich would be more-or-less the equivalent of:\nQUnit.module( 'APP.Foo', {\n  setup: fn,\n  teardown: fn\n} );\n\n(function() {\n  var foo = new App.Foo();\n  QUnit.test( 'foo.add', function( assert ) {\n    assert.ok( foo );\n  } );\n\n  QUnit.test( 'foo.add( String )', function( assert ) {\n    foo = new App.Foo();\n    assert.equal( foo.add( 'x' ), 'default x' );\n    assert.equal( foo.add( 'y' ), 'default x y' );\n  } );\n\n  QUnit.test( 'foo.add( String... )', function( assert ) {\n    foo = new App.Foo();\n    assert.equal( foo.add( 'x', 'y' ), 'default x y' );\n    assert.equal( foo.add( 'a', 'b', 'c' ), 'default x y a b c' );\n  } );\n\n  QUnit.test( 'foo.reset()', function( assert ) {\n    foo = new App.Foo();\n    foo.add( 'x', 'y' );\n    assert.equal( foo.reset(), 'default' );\n  } );\n}());\n\nQUnit.module( 'APP.Bar' );\n...\nRight now we have special \"module\" groups that can only contain tests and supports setup/teardown,\nand another special group type called \"test\" that can only contain assertions. Instead, we'd only have\n\"test\" groups which can contain both assertions and/or other tests, and with support for setup/teardown.\n  groups:\n    - APP.Foo\n      groups:\n      - foo.add\n        assertions: [ok]\n        groups:\n        - foo.add( String )\n          assertions: [equal, equal]\n        - foo.add( String... )\n          assertoins: [equal, equal]\n      - foo.reset\n        assertions: [equal]\n    - APP.Bar\n      ...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dcherman", "authorAssociation": "NONE", "createdAt": "2014-04-08T19:49:20Z", "contents": "Another idea which is similar to other existing implementations:\nQUnit.module( 'parent', function( test ) {\n  // Maybe test.setupOnce() as well?\n  test.setup(function() {\n     // Do stuff\n  });\n\n  test.teardown(function() {\n      // Do stuff\n  });\n\n  test( 'some test', function( assert ) {});\n  test.async( 'an async test', function( assert ) {});\n\n  QUnit.module( 'child', function( test ) {\n      // Nested!\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-04-12T16:41:25Z", "contents": "I liked @dcherman's suggestion and I'm wondering that also would be interesting to have test level setup and teardowns, as exemplified by @Krinkle:\nQUnit.test( 'APP.Foo', {\n  setup: fn,\n  teardown: fn\n}, function() {} );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-18T16:29:22Z", "contents": "I also like @dcherman's suggestion, which is very akin to Mocha's TDD style:\nsuite('Array', function() {\n\n  suiteSetup(function() {\n    // This runs once before any `test` within the `suite` is executed\n  });\n\n  setup(function() {\n    // This runs before each `test`\n  });\n\n  teardown(function() {\n    // This runs after each `test`\n  });\n\n  suiteTeardown(function() {\n    // This runs once after every `test` within the `suite` has been executed\n  });\n\n\n  suite('#indexOf()', function() {\n    test('should return -1 when not present', function() {\n      assert.equal(-1, [1,2,3].indexOf(4));\n    });\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-07-19T20:19:59Z", "contents": "This doesn't appear to be a priority at the moment. Patches are welcome, however.\nNote, though, that this shouldn't affect your ability to write good and maintainable tests. It's only a minor prettiness factor (one of which the usefulness is imho still debatable). The main reason I'm in favour of it is because it'd simplify the code a lot by taking away special meaning from \"module\" and \"test\". Everything would simply be groups of assertions and/or other groups.\nFor setup/teardown one can use \"test\" right now, and for a persistent scope a closure is easy enough. I've written loads of tests over the past years and not once felt a need for this (not even with hacky closures). One QUnit module for each tangible component of the code, and one test for each logical group of assertions for an individual property, method or behaviour exposed by that component.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T18:24:48Z", "contents": "I am assuming this is actually more of shift for our reporters than it is for our core module/test/assert code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T18:55:43Z", "contents": "The discussion here has been mostly about nesting code, but the original ticket actually referred to the \"sleek nested HTML output\" of Mocha. What the screenshot shows should be possible already, without requiring any API changes. It's mostly a matter of displaying the results differently and that's something we can explore.\nOtherwise, on the API/code side, I'm not inclined to change anything, for the reasons that @Krinkle has outlined above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T19:11:41Z", "contents": "To clarify, the screenshot in the original ticket description shows at most two branches and one leaf node, which corresponds to our module/test/assertion methods. So achieving that specific output shouldn't require any API changes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T19:17:02Z", "contents": "True, though that was unintentional. Here's a different screenshot with deeper nesting:\n\nMy intent for this issue was to discuss the capability of test/group nesting, not [just] the HTML Reporter visuals.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T14:26:10Z", "contents": "Added a note to #647 that, if we do implemented nested modules, we also need to rethink how our beforeEach/afterEach hooks work such that they can be handled in a nested fashion as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-05T19:08:27Z", "contents": "If I were going to use QUnit for nested modules, I think I would want the syntax to look like this:\n(function( suite, test, beforeEach ) {\n\n  suite( \"parent\", function() {\n    beforeEach(function( assert ) { /* ... */ });\n\n    test( \"x\", function( assert ) { /* ... */ });\n    test( \"y\", function( assert ) { /* ... */ });\n\n    suite( \"child\", function() {\n      beforeEach(function( assert ) {\n        // also automatically invokes its parent module's `beforeEach`\n        /* ... */\n      });\n\n      test( \"z\", function( assert ) { /* ... */ });\n    });\n  });\n\n})( QUnit.module, QUnit.test, QUnit.beforeEach );\nYou'll note that the above example is utilizing a theoretical QUnit.beforeEach which would always bind to the current stack context.  This is preferable when nesting modules as it (a) allows infinitely nested hooks with a simple API and (b) doesn't look so ugly as if you have the lifecycle/hooks object as the first param and the execution scope function as the second param.\nIf that API is undesirable, we could also add it to a module context object (e.g. this.beforeEach) or to an argument object passed to the module's callback (e.g. moduleContext.beforeEach).\nHowever, I would also definitely recommend we maintain the existing syntax as well. It is simple/linear, widely used, and generally well-liked:\nQUnit.module( \"x\", {\n  beforeEach: function( assert ) { /* ... */ },\n  afterEach: function( assert ) { /* ... */ }\n});\n\nQUnit.test( \"y\", function( assert ) { /* ... */ });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "esbanarango", "authorAssociation": "NONE", "createdAt": "2015-01-07T13:32:53Z", "contents": "+1000!!!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 544, "url": "https://github.com/qunitjs/qunit/issues/544", "title": "Use Date.now when possible and normalize calls otherwise", "contents": "There's a mess with getting current time methods: Date.now is not used even when available and the code is either new Date().getTime() or +new Date().", "createdAt": "2014-03-19T13:35:34Z", "updatedAt": "2014-05-05T19:45:28Z", "closedAt": "2014-05-05T19:45:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FarSeeing", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "FarSeeing", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 547, "url": "https://github.com/qunitjs/qunit/issues/547", "title": "throws() fails for typed error with custom message on IE8", "contents": "Edited for accuracy:\nI'm not entirely sure if you'd call this a bug, but it's certainly undesirable from my point of view.\nThe following tests fail in IE8 and any later version of IE that is running in compatibility mode with it's document mode set to IE8.\nassert.throws(function() { throw new TypeError('Bad'); }, TypeError);\nassert.throws(function() { throw new RangeError('Bad'); }, RangeError);\nassert.throws(function() { throw new SyntaxError('Bad'); }, SyntaxError);\nassert.throws(function() { throw new URIError('Bad'); }, URIError);\nassert.throws(function() { throw new ReferenceError('Bad'); }, ReferenceError);\nassert.throws(function() { throw new EvalError('Bad'); }, EvalError);\nThe result is shown as something like:\nExpected:  function URIError(  a ){\n  [code]\n}\nResult:  {\n  \"message\": \"Bad\",\n  \"name\": \"URIError\"\n}\nThe above tests work in IE 9+ (in edge mode), Firefox, Safari and Chrome. The following tests also work on IE8:\nassert.throws(function() { throw new Error('Bad'); }, Error);\nassert.throws(function() { throw new TypeError(); }, TypeError);\nassert.throws(function() { throw new RangeError(); }, RangeError);\nassert.throws(function() { throw new SyntaxError(); }, SyntaxError);\nassert.throws(function() { throw new URIError(); }, URIError);\nassert.throws(function() { throw new ReferenceError(); }, ReferenceError);\nassert.throws(function() { throw new EvalError(); }, EvalError);\nSo the problem is specifically when you throw an error object of a specific type AND with a custom message on Internet Explorer 8 or a later version emulating that browser.", "createdAt": "2014-03-27T00:11:01Z", "updatedAt": "2016-11-01T16:29:03Z", "closedAt": "2014-06-30T13:20:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wwarby", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "wwarby", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "wwarby", "authorAssociation": "NONE", "createdAt": "2014-03-27T14:52:23Z", "contents": "I've implemented a replacement for the throws() test in my own code now which addresses this problem. I'm not sure if the fix is 100% safe in all contexts, but certainly all my unit tests now pass in IE8 without breaking in any other browsers. Here is my new implementation:\nfunction (block, expected, message) {\n    var actual, expectedOutput = expected, ok = false;\n    if (!message && typeof expected === 'string') { message = expected; expected = null; }\n    QUnit.config.current.ignoreGlobalErrors = true;\n    try { block.call(QUnit.config.current.testEnvironment); } catch (e) { actual = e; }\n    QUnit.config.current.ignoreGlobalErrors = false;\n    if (actual) {\n        if (!expected) {\n            ok = true;\n            expectedOutput = null;\n        } else if (expected instanceof Error) {\n            //IE8 wrongly reports that the constructors of typed errors are instances of Error. If this behaviour is detected, compare the constructor name.\n            if (TypeError instanceof Error && expected.name && actual.constructor.name === expected.name) {\n                ok = true;\n            } else {\n                ok = actual instanceof Error && actual.name === expected.name && actual.message === expected.message;\n            }\n        } else if (QUnit.objectType( expected ) === 'regexp') {\n            ok = expected.test( errorString( actual ) );\n        } else if (QUnit.objectType( expected ) === 'string') {\n            ok = expected === errorString(actual);\n        } else if (actual instanceof expected) {\n            ok = true;\n        } else if (expected.call({}, actual) === true) {\n            expectedOutput = null;\n            ok = true;\n        }\n        QUnit.push( ok, actual, expectedOutput, message );\n    } else {\n        QUnit.pushFailure(message, null, 'No exception was thrown.');\n    }\n};", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wwarby", "authorAssociation": "NONE", "createdAt": "2014-03-27T14:54:26Z", "contents": "NB: it appears the root of the problem is that IE8 returns true for the following statement:\nTypeError instanceof Error\nWhere standards-compliant browsers return false for the same statement, hence this is the test I use to see if the browser is broken and requires a hack.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-19T13:21:50Z", "contents": "I've confirmed @wwarby's last point: IE6-8 return true for the expression TypeError instanceof Error. The same goes for SyntaxError, URIError, ReferenceError, RangeError, and EvalError.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-30T13:22:47Z", "contents": "Fixed in master.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 548, "url": "https://github.com/qunitjs/qunit/issues/548", "title": "QUnit.log doesn't report expected value for throws that checks to see if thrown error is an instance of a custom error", "contents": "Here is a fiddle (http://jsfiddle.net/xQg4r/1/) that shows what I am talking about.\nThe following code:\nQUnit.log(function (result) {\n    document.getElementById(\"results\").innerHTML = JSON.stringify(result, null, 3);\n});\n\nvar CustomException = function (message) {\n    this.name = \"CustomException\";\n    this.message = message;\n};\n\nCustomException.prototype = new Error();\nCustomException.prototype.constructor = CustomException;\n\nmodule(\"One\");\n\ntest(\"Throws Instance Test\", function() {\n    throws(function () {\n        throw new CustomException();\n    }, CustomException, \"Exception must be instance of CustomException.\");\n});\n\nOnly logs this:\n{\n   \"module\": \"One\",\n   \"name\": \"Throws Instance Test\",\n   \"result\": true,\n   \"message\": \"Exception must be instance of CustomException.\",\n   \"actual\": {\n      \"name\": \"CustomException\"\n   }\n}\n\nWhen using throws in other scenarios there is always an expected value.\nI can fix this, but I'm having a hard time figuring out where logging is done. If someone can point me in the right direction, I can try and submit a patch for this.", "createdAt": "2014-04-04T14:59:20Z", "updatedAt": "2014-04-04T15:14:17Z", "closedAt": "2014-04-04T15:11:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "vivin", "company": "Cyr3con"}], "comments_count": 2, "comments_data": [{"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-04T15:11:52Z", "contents": "It appears that JSON.stringify simply doesn't work with an Error type. So this is not really an issue; closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vivin", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-04T15:14:17Z", "contents": "For anyone else running into this issue, you can make Error types stringifiable to JSON by doing the following:\nObject.defineProperty(Error.prototype, 'toJSON', {\n    value: function () {\n        var alt = {};\n\n        Object.getOwnPropertyNames(this).forEach(function (key) {\n            alt[key] = this[key];\n        }, this);\n\n        return alt;\n    },\n    configurable: true\n});\n\nTaken from this stackoverflow answer: http://stackoverflow.com/questions/18391212/is-it-not-possible-to-stringify-an-error-using-json-stringify", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 549, "url": "https://github.com/qunitjs/qunit/issues/549", "title": "when notEqual, notDeepEqual, notPropEqual, notStrictEqual fails the explanation is confusing.", "contents": "test('QUnit notDeepEqual test', function()\n{\n    expect(1 + this.extraTests);\n    var shouldnotbe = { 'name': 'JO DOE FAIL', 'mode': 'failure', 'age': 32 },\n        result = this.oTest.deep();\n    notDeepEqual(result, shouldnotbe, 'deep() should not be ' + JSON.stringify(shouldnotbe));\n});\nProduces on failure:\ndeep() should not be {\"name\":\"JO DOE FAIL\",\"mode\":\"failure\",\"age\":32}\nExpected:\n{\n  \"age\": 32,\n  \"mode\": \"failure\",\n  \"name\": \"JO DOE FAIL\"\n}\n\nIt would make more sense for 'Expected' in the result to be Did Not Expect or Should Not Be. When reading the test failure there is no language to indicate what the problem is.", "createdAt": "2014-04-10T10:00:50Z", "updatedAt": "2014-04-11T18:50:38Z", "closedAt": "2014-04-11T18:49:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bcowgill", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "bcowgill", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-04-11T15:08:49Z", "contents": "I think this is a duplicate of issue #340.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-04-11T18:49:57Z", "contents": "Agreed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-04-11T18:50:38Z", "contents": "@bcowgill Please add your thoughts to #340.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 550, "url": "https://github.com/qunitjs/qunit/issues/550", "title": "Semaphore check uses pushFailure with wrong argument order", "contents": "In https://github.com/jquery/qunit/blob/e1c3191294440eeafe8a4918bad62373d34418c1/src/core.js#L159 null, should be dropped, since source is the second argument, not the third.\nSee http://jsbin.com/xazepozu/1/edit", "createdAt": "2014-04-12T09:06:32Z", "updatedAt": "2014-04-14T16:21:59Z", "closedAt": "2014-04-14T16:21:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 554, "url": "https://github.com/qunitjs/qunit/issues/554", "title": "Expose version in API and display in html reporter", "contents": "It would be helpful when working on a project to more easily identify what version of QUnit is being used (e.g through a property on the QUnit object).\nWhile at it, maybe also display it somewhere in the html reporter (near where we dump the user agent).", "createdAt": "2014-04-26T13:16:47Z", "updatedAt": "2015-04-03T10:21:19Z", "closedAt": "2015-03-11T14:10:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "shivamdixit", "company": "Uber "}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-08T05:49:06Z", "contents": "@Krinkle @jzaefferer Please review the PR, #768", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T15:54:20Z", "contents": "Btw. there's no need to ask people to review a PR just after you've sent it. Watchers of the repo get notifications anyway.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "help wanted", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 557, "url": "https://github.com/qunitjs/qunit/issues/557", "title": "Development instructions missing steps", "contents": "At least on Ubuntu, I had to do a couple of extra steps to get grunt to run on a newly cloned repository. I don't know if this is too specific to be included in your README file, but it made it harder for me to contribute a patch.\nSummary\nThe two commands I needed to add were:\nsudo apt-get install nodejs-legacy\nsudo npm install -g grunt-cli\n\nBackground\nWhen running the npm install command, I got the following error:\nsh: 1: node: not found\nnpm WARN This failure might be due to the use of legacy binary \"node\"\nnpm WARN For further explanations, please read /usr/share/doc/nodejs/README.Debian\n\nSome searching brought me to a Stack Overflow answer that says Ubuntu has broken backward compatibility by renaming the node command to nodejs. To support packages like npm that still depend on the old command, you have to install the nodejs-legacy package.\nOnce I got npm install to work, I still couldn't run grunt. Looking at the Grunt documentation, I saw that I also need the grunt-cli node package.", "createdAt": "2014-05-05T21:06:34Z", "updatedAt": "2014-05-05T22:40:45Z", "closedAt": "2014-05-05T21:18:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "donkirkby", "company": "BC Centre for Excellence in HIV/AIDS"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 3, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-05T21:18:16Z", "contents": "In the development section it says:\n\nTo run grunt, you need node and npm, then npm install grunt -g. That gives you a global grunt binary. For additional grunt tasks, also run npm install.\n\nThis should say to install grunt-cli instead of grunt (which I'll fix right now), but this is documented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-05T21:48:00Z", "contents": "Thanks for fixing the grunt-cli.\nDo you think the nodejs-legacy package is worth documenting?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-05T22:40:45Z", "contents": "No, it's an Ubuntu quirk that no third party project documents.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 558, "url": "https://github.com/qunitjs/qunit/issues/558", "title": "TypeError doesn't display actual value in throws test", "contents": "If I write a test using throws(), and the code under test throws a TypeError that doesn't match the expected message, the actual error message is not displayed.\nFor example, here's a test that fails with an unhelpful description:\ntest(\"TypeError\", function() {\n    throws(\n            function() {\n                throw new TypeError(\"the wrong description\");\n            }, \n            /right description/, \n            \"wrong description of explicit TypeError\");\n});\n\nThe unhelpful description of the failed test is:\nExpected: /right description/\n  Result: {}\n\nFor comparison, here's a test that fails with a helpful description:\ntest(\"CustomError\", function() {\n    function CustomError( message ) {\n        this.message = message;\n    }\n\n    CustomError.prototype.toString = function() {\n        return this.message;\n    };\n\n    throws(\n            function() {\n                throw new CustomError(\"the wrong description\");\n            }, \n            /right description/, \n            \"wrong description of CustomError\");\n});\n\nThe helpful description of the failed test is:\nExpected: /right description/\nResult:   {\n              \"message\": \"the wrong description\",\n              \"toString\": function( ){\n                [code]\n              }\n          }\n\nIt looks like the problem is in jsDump.parsers[\"object\"]. It tries to iterate through the TypeError's keys and doesn't find any.", "createdAt": "2014-05-05T23:22:37Z", "updatedAt": "2014-05-13T09:30:52Z", "closedAt": "2014-05-13T09:30:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "donkirkby", "company": "BC Centre for Excellence in HIV/AIDS"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-06T00:11:51Z", "contents": "The behaviour of TypeError seems to be different in my browser from the behaviour when the tests run under nodejs. I tried to write a failing unit test, but it wouldn't fail except in my browser. My browser is Chromium Version 34.0.1847.116 Ubuntu 13.10 (260972).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-06T01:09:44Z", "contents": "Ok, I'm refreshing my memory here and as far as I know you are throwing a custom Error object, not a message itself.\nIf you do so, you should expect for the object, not the message, or the app should throw a string, not an Error object.\nRegarding this all, we might consider some new changes on QUnit functionality:\n\nthrows string/regexp expected argument should try to compare an Objects toString or message or something. That would loose the API. So we have a good and a bad reason here.\nWe can deprecate/drop the regexp argument. To me is enough to stay with only an Error Object and String expectations. The bad reason here is retro-compatibility or some historical reason I don't know.\n\n@jzaefferer, thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-06T04:31:34Z", "contents": "The test itself seems to be correct. If I change my first example to this, then the test passes:\nthrow new TypeError(\"the right description\");\n\nThe problem is that if the test doesn't pass, then the description in the browser report does not include the actual error message. It reports the actual value as {}. If it's helpful, I can create a gist with a full example to load in your browser.\nI tried to create a patch that falls back to the quote function if it doesn't find any keys in an object's dictionary, but that broke a bunch of other tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-06T16:29:24Z", "contents": "I was slightly mistaken, my test case does fail in nodejs, as well as in my browser. The only place it doesn't fail is in whatever is running the qunit:qunit task in grunt.\nHere is the test case I wrote:\ntest(\"jsDump classes\", function( assert ) {\n    function CustomError( message ) {\n        this.message = message;\n    }\n\n    CustomError.prototype.toString = function() {\n        return this.message;\n    };\n    var customError = new CustomError(\"sad puppy\"),\n        typeError = new TypeError(\"crying kitten\");\n\n    assert.equal(\n            QUnit.jsDump.parse(customError),\n            \"{\\n  \\\"message\\\": \\\"sad puppy\\\",\\n  \\\"toString\\\": function( ){\\n    [code]\\n  }\\n}\" );\n    assert.equal(\n            QUnit.jsDump.parse(typeError),\n            \"{\\n  \\\"message\\\": \\\"crying kitten\\\",\\n  \\\"name\\\": \\\"TypeError\\\"\\n}\");\n});\n\nI put that in test/test.js, and the error shows up when I open test/index.html in either Chromium or Firefox 29.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-08T18:32:32Z", "contents": "#559 was supposed to fix this. Turns out this behaviour is actually completely inconsistent across browsers: http://swarm.jquery.org/job/2990\nFor example, Firefox has columnNumber, fileName and lineNumber properties on TypeError, while (I guess) message and name still aren't enumerable, so those still don't show up.\n@donkirkby wanna give this another try?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-08T18:42:09Z", "contents": "IE8 fails on the custom error test, which expects message and toString, but only message is dumped.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donkirkby", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-08T18:53:54Z", "contents": "I can look at it again. Perhaps I will make the tests a little more permissive. Make sure they have at least message and name, but don't fail if they have other fields as well.\nI can also make the dump method more aggressive by including \"name\" and \"message\" in the set of fields, even if there are some enumerable fields.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-08T19:06:03Z", "contents": "Thanks. For now I've reverted the commit I landed from #559, to get the tests to work again.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 561, "url": "https://github.com/qunitjs/qunit/issues/561", "title": "qUnit overwrites global variable \"log\"", "contents": "qUnit appears to define/overwrite a global variable named log. This is causing issues with certain other libraries for logging purposes such as : https://github.com/pimterry/loglevel\nIt would be nice if Qunit didn't do that and use a namespaced variable, ie. QUnit.log.", "createdAt": "2014-05-07T07:59:21Z", "updatedAt": "2014-05-08T19:46:03Z", "closedAt": "2014-05-08T19:22:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "webberig", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "webberig", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-07T12:46:37Z", "contents": "I did some checking here.\n\nwindow.log is set/replaced => http://jsbin.com/gepipatu/3/\nnot related to the console object => http://jsbin.com/gepipatu/2", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-07T12:54:27Z", "contents": "It happens here: https://github.com/jquery/qunit/blob/master/src/export.js#L3 when the code export some methods with generic names (including log) to the window object.\n@jzaefferer, there's already a planning to remove these globals injection, right?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 563, "url": "https://github.com/qunitjs/qunit/issues/563", "title": "Global scope clean-up", "contents": "I would like to remove the assertion methods from the global scope.\nWe may probably check this for the 2.0.0 milestone or even earlier.\nThat would require some big changes on other projects and documentation/cookbook, but I still think it's always better to not pollute the global scope.\nWe talked a little about this on #561 and can also extend this discussion on removing other global methods that can already be seen on QUnit namespace.", "createdAt": "2014-05-08T19:46:03Z", "updatedAt": "2016-04-18T16:09:51Z", "closedAt": "2016-04-18T16:09:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-08T21:03:48Z", "contents": "Let's start by reviewing existing code bases and discussing preferences with their owners. We can't remove them while jQuery projects still use them. Actual removal would happen beyond 2.0, while 2.0 would throw a useful error message (like same/equals still do).\nThis review should be combined with preparation for #532.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-05-09T01:38:51Z", "contents": "Like @leobalter, I also think they should be removed in v2.0.0. Consumers don't need to upgrade major versions if they don't want to. I'm also fairly confident that #374 can't be resolved without removing the global assertion copies.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-09T16:10:24Z", "contents": "That's fine, as long as we have something like this in place:\nQUnit.equal = function() {\n  throw new Error(\"global equal() is deprecated, use the assert parameter of the test() callback and assert.equal() instead\");\n};", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-05-10T12:01:39Z", "contents": "@JamesMGreene #374 could be done actually, as long as the test doesn't make use of the (yet to be implemented) concurrency features. Because then we can just have a 'currentTest' pointer that the global ones indirectly refer to.\nWith context, there is no longer a need to stop processing tests while an async test is running, they're supposed to be atomic after all, and we already require this as we sometimes re-order tests based on previous runs. But if a test makes use of that, then the global assertion methods are unreliable.\nAnyway, we don't have to keep them, but we could if we wanted to for some reason. I agree though, let's drop them in v2.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T21:04:44Z", "contents": "#577 tries to address this. Once we're ready for 2.0, we can resurrect that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 565, "url": "https://github.com/qunitjs/qunit/issues/565", "title": "Modules not run on Chrome if file is not specified in URL", "contents": "In the latest versions of Chrome & Chromium seems there's a bug that when a URL doesn't end with a file (blah.html, for example) it append a slash. I have my tests in a index.html file inside a test folder, so I can run them just pointing the browser to localhost/test. Problem is, when adding some arguments to the query of the URL Chrome add a slash at the end, and while for individual tests it works (it's just a number, and parsing ignore the slash), for modules or other params the slash is added, making an unrecognized module name so they can't run. Due to this, I propose to check that corner case and remove the slash to prevent that bug.", "createdAt": "2014-05-09T08:24:17Z", "updatedAt": "2014-08-12T10:30:22Z", "closedAt": "2014-08-06T18:59:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "piranna", "company": "CTO @lingbe"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T13:20:20Z", "contents": "Would you show some examples of the arguments that you are using?\nIt seems that the problem is more related to Chrome and not to QUnit. It's not interesting to make a patch in QUnit to solve a specific browser problem. As you mentioned, you can make a workaround by calling the index.html in your test folder.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-14T21:47:48Z", "contents": "Yes, it's more a Chrome bug than a QUnit issue, but I think would not be too much a problem to prevent it.\nA failing example is\nhttp://localhost:8000/test/?module=4%20peers/\n\nThe same working example is\nhttp://localhost:8000/test/index.html?module=4%20peers\n\nAs you can see, Chrome is adding a slash at the end of the query when a filename is not specified, so later QUnit interpret the 'module' parameter as 4%20peers/ instead of 4%20peers, and since it doesn't find the module, I get an empty module with zero tests. As a side note, shouldn't it notify that the module was not found (404-like) instead of showing an empty module with zero tests?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-05-14T22:28:44Z", "contents": "As a side note, shouldn't it notify that the module was not found (404-like) instead of showing an empty module with zero tests?\n\nThat's a nice idea.\nAs for removing the slash, I'm not too keen to pursue that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T08:36:52Z", "contents": "I can't reproduce this problem. When opening http://localhost/jquery-validation/test?testNumber=1 in Chrome Canary (37), it inserts the slash in the correct position: http://localhost/jquery-validation/test/?testNumber=1. The same happens in Chrome 33. Can you tell me which Chrome version this happened in for you?\nFor validation of the module parameter I've filed a separate issue, #569.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-06T18:59:17Z", "contents": "Closing due to inactivity. The reproducible issue is tracked separately in #569.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-12T10:30:22Z", "contents": "I've just check out it with Chrome 38.0.2114.2 dev on Linux Ubuntu 14.04 and it's still happening (Canary is not available for Linux, so maybe is an OS-dependent issue and that's the reason you couldn't be able to reproduce). I know it's a bug on Chrome, but QUnit could try to protect aginst it as possible. One movement in the good path is the issue #569, but probably there are more checkpoints for this, not just validating the parameters but also sanitizing them...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 566, "url": "https://github.com/qunitjs/qunit/issues/566", "title": "Trying to install this repo with npm results in a folder without the qunit build files", "contents": "Hi,\nI was just trying to get the latest version of qunit to be installed using npm -not the one in the registry, but directly from github- and if resulted in an empty folder with just the package.json file and the LICENSE.txt.\nIt seems that the folder names have changed from qunit/ to dist/ and that was not yet updated in your gruntfile.\nI was trying to install directly because the current github version contains a fix for the issue described here:\nhttps://groups.google.com/forum/#!searchin/karma-users/qunit/karma-users/or-gWh7cjZc/W8t4zB5vl20J", "createdAt": "2014-05-11T22:02:14Z", "updatedAt": "2014-05-12T08:34:55Z", "closedAt": "2014-05-12T08:34:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "royriojas", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "royriojas", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-12T02:28:58Z", "contents": "This is not an issue, actually this is working as intended.\n@royriojas, QUnit passes through a complex build system before being published to npm. The QUnit files are generated in this process.\nIf you still want to get QUnit directly from Github, you can run the Grunt process to have the dist files.\nReferences: #509, specifically: #509 (comment)\nThe same goes for the #567 PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "royriojas", "authorAssociation": "NONE", "createdAt": "2014-05-12T02:32:02Z", "contents": "Thanks man\nI realized it after I made the report.\nSo sorry I have made it work on my fork hope you publish a new version to\nnpm soon so I can use it from the official source.\nRegards\nOn Sunday, May 11, 2014, Leo Balter notifications@github.com wrote:\n\nThis is not an issue, actually this is working as intended.\n@royriojas https://github.com/royriojas, QUnit passes through a complex\nbuild system before being published to npm. The QUnit files are generated\nin this process.\nIf you still want to get QUnit directly from Github, you can run the Grunt\nprocess to have the dist files.\nReferences: #509 #509,\nspecifically: #509 (comment)#509 (comment)\nThe same goes for the #567 #567 PR.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/566#issuecomment-42791775\n.\n\n\nSent from Gmail Mobile", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 569, "url": "https://github.com/qunitjs/qunit/issues/569", "title": "Validate testId and module parameters", "contents": "When specifying an invalid testId or module parameter, QUnit just runs an empty testsuite. It should validate the parameters instead:\n\ntestId must match an existing test\nmodule must match one of the existing modules\n\nWhen one of these parameters is present and invalid, the testrunner should display something appropriate. A \"global failure\" might work fine, by simply throwing an exception that QUnit then displays. May need some experimenting.", "createdAt": "2014-05-15T08:36:08Z", "updatedAt": "2018-12-29T20:26:24Z", "closedAt": "2018-03-02T05:29:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 570, "url": "https://github.com/qunitjs/qunit/issues/570", "title": "Improve default message for ok assertion", "contents": "Assuming that we actually keep it, we should look into improving the default message a bit. This is based on a brief discussion I had on Twitter:\n\n\u201cexpected <result> to be ok, instead was <result>\u201d for stuff like QUnit.ok. Usually with QUnit.ok you just get \u201cfailed\u201d", "createdAt": "2014-05-15T11:04:44Z", "updatedAt": "2014-05-15T15:15:54Z", "closedAt": "2014-05-15T15:15:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 571, "url": "https://github.com/qunitjs/qunit/issues/571", "title": "Removal of raises, same and equals", "contents": "Considering that raises, same and equals are not in the Global scope anymore, can we get rid of them?\nAt this moment, who updates QUnit should be aware that they doesn't exist anymore in new versions.\nRefs #562 and #568", "createdAt": "2014-05-15T13:07:49Z", "updatedAt": "2014-05-15T14:48:24Z", "closedAt": "2014-05-15T14:48:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T14:07:04Z", "contents": "Yeah, let's delete the placeholders, its been long enough.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 574, "url": "https://github.com/qunitjs/qunit/issues/574", "title": "jshint not checking for trailing comma on test/*", "contents": "We fixed JSHint checking for trailing comma on #502/#503 but forgot to set the es3: true option on tests/.jshintrc.\nI'll wait for #568 to land, with that we can just remove tests/.jshintrc in order to use ./.jshintrc file as a single and default.\nPS: we need to choose if we add QUnit to the globals list or import QUnit from the global scope in all the tests.", "createdAt": "2014-05-15T16:19:39Z", "updatedAt": "2014-05-16T11:56:01Z", "closedAt": "2014-05-16T08:57:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "rwaldron", "company": "Bocoup"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 10, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T16:34:38Z", "contents": "Running \"jshint:tests\" (jshint) task\nLinting test/test.js ...ERROR\n[L561:C18] I002: Reserved words as properties can be used under the 'es5' option.\n  assert.throws(\n[L561:C12] W024: Expected an identifier and instead saw 'throws' (a reserved word).\n  assert.throws(\n(...)\n\n(tableflip)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T16:45:18Z", "contents": ":(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T17:41:31Z", "contents": "@mzgol already reported this JSHint issue (jshint/jshint#1508) and sent a PR for it (jshint/jshint#1659). Hopefully the fine folks of @jshint merge it sooner than later. \ud83d\ude27", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T18:20:34Z", "contents": "Nice! I heard that @rwaldron is now a JSHint commiter so he's one to help us here. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-15T18:22:46Z", "contents": "It's true, I am.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T18:40:23Z", "contents": "Nice! TY.\njshint/jshint#1659 is landed now.\nNow we just have to wait forr:\n\n a new JSHint release with jshint/jshint#1659;\n update grunt-contrib-jshint\n patch it!\n\nI'll push a PR to start the reviews.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-05-15T19:45:12Z", "contents": "Actually, the only thing that's needed is releasing a new jsHint version.\ngrunt-contrib-jshint depends on \"~2.5.0\" so if 2.5.1 is released, all\nthat's needed locally is to reinstall grunt-contrib-jshint (or invoke npm\nupdate) and it'll install the newer version automatically.\nOn Thu, May 15, 2014 at 8:40 PM, Leo Balter notifications@github.comwrote:\n\nNice! TY.\njshint/jshint#1659 jshint/jshint#1659 is landed\nnow.\nNow we just have to wait forr:\n\na new JSHint release with jshint/jshint#1659jshint/jshint#1659\n;\nupdate grunt-contrib-jshint\npatch it!\n\nI'll push a PR to start the reviews.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/574#issuecomment-43248665\n.\n\n\nMicha\u0142 Go\u0142\u0119biowski", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwaldron", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-15T19:48:55Z", "contents": "cc @valueof", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T11:33:54Z", "contents": "Note, that since commit 7bc638b also upgraded JSHint (grunt-contrib-jshint v0.10.0, jshint v2.5.0), there are now options specified in .jshintrc that no longer exist (per 2.5.0 release, Options nomen, onevar, passfail, white, gcl, smarttabs, and trailing were removed).\nAlso, since 2.4.1, there is an extends option that we could use to handle this nicer if we want (and in Grunt we'd specify jshintrc: true instead of jshintrc: \".jshintrc\").", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-05-16T11:56:01Z", "contents": "Note that Jetbrains IDEs, due to their internal virtual file system,\nrecreate jsHint file lookup functions and the extends option is not\nsupported yet\"(it's on the radar, though). That's why we haven't switched\nto using extend in Core, it would degrade the experience of devs using\nWebStorm (which is very popular).\n\nMicha\u0142 Go\u0142\u0119biowski", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 576, "url": "https://github.com/qunitjs/qunit/issues/576", "title": "Output results to console", "contents": "I would like to make an implementation of outputting the test results to the console when it's present in the global scope.\nThat would make QUnit more connected to Node environments and also to many browsers without removing the HTML output we currently have (that can still be omitted by not having a div#qunit).\nIt would also be great having this made after #531 with the standardized reporter interface.", "createdAt": "2014-05-16T18:29:38Z", "updatedAt": "2014-10-01T18:25:32Z", "closedAt": "2014-10-01T14:35:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-05-19T11:50:18Z", "contents": "Would be nice to have a prototype for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-22T18:21:25Z", "contents": "Now, with the detached reporter interface from #603 we can include a simple console output (maybe using TAP specs) when console is present and html is absent.\nOne advantage is getting rid of that test-on-node grunt task.\nThat  would also fix most of the addressed issues on #521 and #540.\nAnd for that I'm wondering if it's possible to make a variant build of QUnit without the jsDiff and the html reporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T13:42:24Z", "contents": "@leobalter since you closed #627, will you look into this again as a separate module?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T14:35:08Z", "contents": "After #627, I believe this is better if used in a separate module and probably as an extension of js-reporter. node-qunit is already doing a good job and I now suggest to reopen this only if we agree in some point to drop the html reporter to use the console as the main one, probably a 3.0 feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T16:16:31Z", "contents": "We could add a section about node-qunit in qunitjs/qunitjs.com#85, maybe contribute some improvements.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 581, "url": "https://github.com/qunitjs/qunit/issues/581", "title": "Add method for defining custom assertions", "contents": "We currently suggest adding function properties to QUnit.assert, though considering the plans in #374, this might actually be a bad idea. If we make the assert argument an instance with a prototype, we may want to remove the global QUnit.assert and instead offer a method for defining custom assertions. Can be a very simple signature like this:\nQUnit.addMethod( \"closeEnough\", function( ... ) {\n  QUnit.push( ... );\n});\nWe really need a prototype for #374 to see if that is feasible and evaluate this and some other discussions.", "createdAt": "2014-05-30T09:10:39Z", "updatedAt": "2016-11-01T16:29:04Z", "closedAt": "2014-07-31T11:11:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-30T12:50:09Z", "contents": "Closely related to #533", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T22:20:50Z", "contents": "@leobalter: Not that closely related, I'd say.\n#533 is more about composing/aggregating assertions, whereas this one is simply about introducing an API abstraction for adding new assertions to the Assert prototype.\nI'm not sure that this is truly necessary as we can just assume that QUnit.assert should be used as the prototype when creating a new Assert instance to pass to each test context, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T22:35:21Z", "contents": "Yes, and extending QUnit.assert allows the method to call this.push( condition, actual, expected, message );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-07-31T11:11:50Z", "contents": "Agreed, extending QUnit.assert still works fine, and with this.push was improved as well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 582, "url": "https://github.com/qunitjs/qunit/issues/582", "title": "Build improvements", "contents": "A few things I noticed recently that we should fix or improve in our build.\n\n Use jscs with jQuery preset (and additional settings if still necessary)\n Simplify jshint configuration to use a single source set, speed up execution\n Make watch task run the default task immediately before starting to watch for changes (I have no clue why that isn't the default)\n Update test-on-node task to remove the globals except for QUnit", "createdAt": "2014-05-31T10:42:41Z", "updatedAt": "2014-08-06T17:38:23Z", "closedAt": "2014-08-06T17:38:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-05-31T12:26:18Z", "contents": "\ud83d\udc4d Gonna work on these.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-02T04:13:23Z", "contents": "About the additional settings: I think we should use only jQuery preset and maybe patch JSCS to update it. I'm about to see if it's needed and will update this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-02T06:25:36Z", "contents": "@jzaefferer: by setting a single source set for JSHint you mean this? leobalter@4e20cf4\n(I can include this commit on #584)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-05T10:48:17Z", "contents": "by setting a single source set for JSHint you mean this? leobalter/qunit@4e20cf4\n\nExactly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-05T11:00:31Z", "contents": "Let's do the source changes separate of #584, since that may still take a while to be ready.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-06T17:38:23Z", "contents": "#584 solved the remaining JSCS issue here.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 587, "url": "https://github.com/qunitjs/qunit/issues/587", "title": "Simplify ok assertion", "contents": "I'm playing around on the Assertion obj refactoring and I'm thinking about simplifying the ok assertion to use push as other assertions.\nFor instance I did this commit you can consider as an example: @f7589a9\nLet's do this?", "createdAt": "2014-06-03T00:37:53Z", "updatedAt": "2014-06-06T20:28:39Z", "closedAt": "2014-06-06T20:28:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-03T10:59:45Z", "contents": "Makes sense to me. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-03T13:35:57Z", "contents": "Good to know. This change will put us on a easier way to abstract the report statements in output, and than extend them to console or anything else.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-05T10:57:21Z", "contents": "So instead of providing the actual value in the message, we put it in the expected argument of QUnit.push? That sounds good for a failing ok, but it doesn't make sense to have actual and expected differ for a passing ok.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-05T11:14:35Z", "contents": "Let's land this independent of #588, since that will probably still take a while to finish.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-06T15:58:15Z", "contents": "On #589 with suggested changes on #588", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 590, "url": "https://github.com/qunitjs/qunit/issues/590", "title": "Support source maps (Browserify)", "contents": "When using a build tool like Browserify, it's required to build a bundle even on development. In this environment QUnit will show the line numbers according to the build file which is confusing.\nIt would be great if QUnit could parse the related source map and reference real source files when an error occurs.", "createdAt": "2014-06-10T11:40:22Z", "updatedAt": "2016-06-16T20:11:45Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "vahdani", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "vahdani", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "simonzack", "company": null}, {"login": "mightyiam", "company": null}, {"login": "DrewML", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-10T12:19:29Z", "contents": "I've never worked with source maps, so I can't really tell if that's realistic and how much effort it would require. This project would likely be a good starting point for an experiment: https://github.com/mozilla/source-map/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-10T14:26:41Z", "contents": "That would certainly be interesting.  It's also something I've been requesting for TraceKit and StackTrace.js.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-12T01:38:18Z", "contents": "Did some cross reference so each project can help other if we or them get something.\nAs we are going to work on the new reporter interface, it's easier to see this as an extension. I'm expecting some extra external dependencies and hard to cross browser support (including ie6).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "simonzack", "authorAssociation": "NONE", "createdAt": "2015-02-01T10:48:05Z", "contents": "+1, I would also love source maps in tracebacks, which are generated by traceur in my case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-09-20T13:06:05Z", "contents": "\ud83d\udc4d\nI'm transitioning WYMeditor to CommonJS with Browserify and I'm seeing this dreadfully unhelpful thing.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T09:58:36Z", "contents": "Once a library like TraceKit supports this, we can look into adopting it. If you want to help, look into integration of TraceKit into QUnit. Otherwise this will probably stay open for another year or two.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DrewML", "authorAssociation": "NONE", "createdAt": "2016-06-16T20:02:56Z", "contents": "For anyone still looking for this support, you can essentially hack it yourself using the browser build of node-source-map-support. Note that it will only work in browsers whose Error objects include a stack property.\nVerified with Webpack in PhantomJS + Chrome, but should work with Browserify (and anything else that includes a sourcemap).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 592, "url": "https://github.com/qunitjs/qunit/issues/592", "title": "Move QUnit.jsDump to QUnit.dump", "contents": "The implementation has diverged quite a bit from the original jsDump project.", "createdAt": "2014-06-10T14:19:16Z", "updatedAt": "2014-06-10T16:31:44Z", "closedAt": "2014-06-10T14:42:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-10T16:29:19Z", "contents": "Hm.. should be careful though, this is a public method and it is used a fair bit in plugins and adaptors (e.g. grunt-contrib-qunit).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-10T16:31:44Z", "contents": "@Krinkle There's back compat via a5c3b30#diff-44aa0638208d269c757aa37892695911R240 so that projects have time to update.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 593, "url": "https://github.com/qunitjs/qunit/issues/593", "title": "throws: Support callback to assert error", "contents": "We should support specifying a callback for the throws assertion to assert the error object.\nFor example like this https://github.com/scottgonzalez/debt/blob/master/tests/unit/lib/field.js#L21-L24", "createdAt": "2014-06-11T16:14:14Z", "updatedAt": "2016-11-01T16:29:05Z", "closedAt": "2014-06-30T13:20:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 5, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-12T01:31:50Z", "contents": "I tried to implement something sending the second argument (currently named expected) as the callback function to call. The problem is that we check if the Error is an instance of the expected argument. Ref: https://github.com/jquery/qunit/blob/master/src/assert.js#L146-L149\nThis is preventing my creativity on where to set the callback argument. It's not good to set it as a third argument. I'm thinking of some way to handle it with the expected object together.\nAn alternative - which I don't like much - is to make the function return the result error, but it's probably not good.\nExample:\nQUnit.test( \"foo\", function( assert ) {\n    var myErr = assert.throws(\n            function() {\n                register( \"test type\", {} );\n            },\n            \"Should throw for invalid type.\"\n        );\n\n    assert.strictEqual( myErr.message, \"bar\" ); \n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-16T10:40:33Z", "contents": "Check out the implementation in node's assert module: https://github.com/joyent/node/blob/master/lib/assert.js#L268-320\nLooks to me like they first do the instanceof check. If that doesn't pass, they call the expected argument and check the return value. A constructor should always return undefined, so that should be safe.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-19T15:25:14Z", "contents": "We already have this implemented, actually... it's just not documented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-19T18:55:21Z", "contents": "True, missed that when looking at our own implementation before. Can you update the docs?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-19T19:59:27Z", "contents": "Yup, will do!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 594, "url": "https://github.com/qunitjs/qunit/issues/594", "title": "Test/document usage with Browserify", "contents": "We should put together an example or actively test using QUnit with Browserify. There may be other issues besides the one reported in #590.", "createdAt": "2014-06-16T10:43:05Z", "updatedAt": "2014-11-06T12:42:06Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 595, "url": "https://github.com/qunitjs/qunit/issues/595", "title": "assert.throws() doesn't detect TypeError in IE8", "contents": "Source code:\nfunction example() {\n    throw new TypeError( 'Something' ):\n}\n\nassert.throws(\n    function () {\n        example();\n    },\n    TypeError,\n    'Example something'\n);\nPasses in Chrome, but fails in IE8:\nExample something\nExpected:  function TypeError(  a ){\n  [code]\n}\nResult:  {\n  \"message\": \"Something\",\n  \"name\": \"TypeError\"\n}", "createdAt": "2014-06-18T08:05:17Z", "updatedAt": "2016-11-01T16:29:05Z", "closedAt": "2014-06-18T18:46:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-18T08:06:14Z", "contents": "Currently working around it by using /^TypeError/ as regular expression matching the errorString().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-18T10:33:53Z", "contents": "Should address this along with #593 - the reference to node's assert module there might be useful here, too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-18T18:46:13Z", "contents": "Duplicate of #547.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 599, "url": "https://github.com/qunitjs/qunit/issues/599", "title": "Add option to hide passed tests by default", "contents": "It is possible to have an option to hide passed tests by default?", "createdAt": "2014-06-22T14:58:21Z", "updatedAt": "2014-06-23T16:27:38Z", "closedAt": "2014-06-23T14:51:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chinhodado", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "chinhodado", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-22T15:20:57Z", "contents": "Makes sense to me.\n@jzaefferer @Krinkle @leobalter Any issues moving hidepassed to be a urlConfig entry? Mostly uncertain due to possible sessionStorage implications.\nCuurent code and comment:\n// when enabled, show only failing tests\n// gets persisted through sessionStorage and can be changed in UI via checkbox\nhidepassed: false,", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-23T06:23:14Z", "contents": "See also #457.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-23T14:51:24Z", "contents": "I think its enough to keep #457 open. That also has a workaround. Closing this one as a duplicate.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 600, "url": "https://github.com/qunitjs/qunit/issues/600", "title": "Move start/stop to assert", "contents": "As a follow-up to #374 and #588, we want to move the stop and start methods to the assert object. As before, this needs to be backwards compatible, so the existing methods need to stay for now.", "createdAt": "2014-06-24T15:33:19Z", "updatedAt": "2014-07-30T15:39:07Z", "closedAt": "2014-07-30T12:08:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-24T15:36:22Z", "contents": "@Krinkle, looks like with this follow-up issue we can close #374 or there are more things we should address?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-06-26T10:33:15Z", "contents": "#374 is already closed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-06-29T02:41:36Z", "contents": "I thought we were going with a new API, e.g. var done = assert.async(); /* ...do work... */ done();\nIs moving start and stop to the assert context just necessary for the proper completion of #374, or is that the API we're going to continue using in v2.0 as well?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-06-29T03:40:39Z", "contents": "done = assert.async(); implementation is way better, and we can change this issue to target it.\nAnyway, it's too complex to move start and stop to the assert and make it object independent.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-06-29T09:56:07Z", "contents": "Yeah, I'd support closing this issue in favour of #534.\nIt'd be nice for the start/stop system to not make it to the v2.0 era (maybe as a deprecated back-compat layer, but it's replacement should be in there).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T12:08:22Z", "contents": "Agreed, stop/start as is should be available for migration, to be replaced by #534. An intermediate step of moving to assert doesn't make sense.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 604, "url": "https://github.com/qunitjs/qunit/issues/604", "title": "Remove the string comparison signature from the `throws` assertion", "contents": "In v2.0, we should remove the string comparison signature from the throws assertion type.  It is an awkward signature because it requires that there is also a message string provided in order for the assertion to work correctly.", "createdAt": "2014-06-29T02:35:05Z", "updatedAt": "2016-04-20T18:07:44Z", "closedAt": "2016-04-19T15:31:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "platinumazure", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T18:07:44Z", "contents": "If anyone wants this functionality (in a convenient way, without having to write a comparison function), the best way to handle that is to write a custom assertion. Here is one I have written:\n    QUnit.assert.raisesErrorMessage = function (block, expectedErrorMessage, assertionMessage) {\n        if (typeof block !== \"function\") {\n            throw new TypeError(\"Expected function block as first argument to raisesErrorMessage\");\n        }\n\n        if (typeof expectedErrorMessage !== \"string\") {\n            throw new TypeError(\"Expected error message as second argument to raisesErrorMessage\");\n        }\n\n        if (!assertionMessage) {\n            assertionMessage = \"Expected error with message \\\"\" + expectedErrorMessage + \"\\\"\";\n        }\n\n        this.raises(block, function (err) {\n            return err.message === expectedErrorMessage;\n        }, assertionMessage);\n    };", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 606, "url": "https://github.com/qunitjs/qunit/issues/606", "title": "Allow calling test() from within loop.", "contents": "If you want to generate tests in a loop only one of the will pass the internal validTest() function.\nWhy not allow creation of tests like this?\n  var a, item, i, len;\n\n  a = [1, 2, 3];\n\n  for (i = 0, len = a.length; i < len; i++) {\n    item = a[i];\n    QUnit.test(\"Generated \" + item, function() {\n      ok(true);\n    });\n  }", "createdAt": "2014-07-09T17:37:17Z", "updatedAt": "2018-09-05T08:40:12Z", "closedAt": "2014-07-09T17:55:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kasbah", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "kasbah", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "jangreis", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "michange", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-09T17:55:27Z", "contents": "This works just fine, and we do it in plenty of places. If you're having problems, please provide a full test page showing the problem and we can reopen the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jangreis", "authorAssociation": "NONE", "createdAt": "2016-02-23T10:00:01Z", "contents": "I'm having the same issue. The above code works but if you try to access item inside the test, it will always be equal to 3. It seems like the loop runs through all iterations and only then is the test called three times...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T15:28:06Z", "contents": "@jangreis that's a bad use on the for loop not defining a block scoped variable. If possible, try using a .forEach or even let/const inside the for loop block if you have it available.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T16:12:46Z", "contents": "@jangreis this is because the test callbacks aren't run synchronously. So the behavior you're seeing is correct. For more info, including possible patterns to fix the problem, check out this SO question.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jangreis", "authorAssociation": "NONE", "createdAt": "2016-02-25T08:14:50Z", "contents": "Thanks a lot, both of you. I'm still coming to terms with scoping in JS :-)\nI used a for (let ...) loop now and it looks like it all works fine. Thank you for your rapid responses.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "michange", "authorAssociation": "NONE", "createdAt": "2018-09-05T08:40:12Z", "contents": "The other issue I would see with such generated Qunit.test() calls is that it seems one can't rerun those selectively with the Qunit reload-based 'rerun' links.\nIs there any pattern to leverage those default Qunit links with generated tests ?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 609, "url": "https://github.com/qunitjs/qunit/issues/609", "title": "assert.throws should support expecting arbitrary objects", "contents": "Right now when passing an object that isn't an instance of (a constructor that inherits from) Error, the case falls straight through into the default assumption of a failure with no clear indication of what happened.\nAside from that being bad error handling, I think we can just simply remove the requirement that the expected object be an instance of Error. The method signature wouldn't become ambiguous.\nSee also qunitjs/api#59. Our documented example has been broken for a while (if it ever worked):\nfunction CustomError( message ) {\n    this.message = message;\n}\nassert.throws(\n    function () {\n        throw new CustomError(\"some error description\");\n    },\n    new CustomError(\"some error description\"),\n    \"thrown error object is similar to the expected object\"\n);", "createdAt": "2014-07-26T14:17:28Z", "updatedAt": "2014-08-05T13:44:00Z", "closedAt": "2014-07-28T19:17:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 613, "url": "https://github.com/qunitjs/qunit/issues/613", "title": "Provide an asyncThrows function", "contents": "There are situations where you call a function that does some action and then, at a later time, throws an exception in a callback function outside the scope of any try/catch in the test function. I propose adding either QUnit.asyncThrows or assert.asyncThrows, which lets you indicate that this function will, somewhere down the chain at some other location, throw an exception.\nSee this jsfiddle for an example of the problem.\nhttp://jsfiddle.net/TwitchBronBron/2fLUb/2/", "createdAt": "2014-07-30T15:03:21Z", "updatedAt": "2014-07-30T15:38:58Z", "closedAt": "2014-07-30T15:38:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TwitchBronBron", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "TwitchBronBron", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T15:14:47Z", "contents": "You can't catch exceptions that are thrown in a separate stack, e.g. from a setTimeout. The only way to handle those are window.onerror. Or am I missing something?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T15:24:25Z", "contents": "Indeed. Not only are exceptions from asynchronous operation not catchable by an assertion, they aren't catchable by anything ever. So if you expect your code to throw an exception from an asynchronous exception, that should signal you there's something wrong. Either the exception is a side-effect of something you don't control and cannot and should not care about. Or your own application is throwing an exception that is useless and unhandleable by both your application itself as well as any test suite. Such errors should probably be communicated via an error callback instead.\nIf an exception does happen from an asynchronous stack, those are already reported by QUnit's window.onerror handler for uncaught exceptions.\nSo you just use regular asyncTest, assert the things that actually matter and call start() when it's finished. Trust QUnit to inform you of any odd uncaught exceptions thrown in the asynchronous code. And if such exception causes your async test to not finish, it may additionally report this as a time out failure.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 614, "url": "https://github.com/qunitjs/qunit/issues/614", "title": "Fixture is not being set", "contents": "I did run the last QUnit-git agaist jQuery Core tests and noticed a bug.\nOn @113a9d5f3d89a70cc2907b2adfd042f72838e8c1 I broke the fixture system by removing this line: 113a9d5#diff-f6c2ded91c9881cdc31b5bfcabb54c3bL262\nI'm going to repair this and submit a PR with a patch.", "createdAt": "2014-07-30T20:01:48Z", "updatedAt": "2014-08-01T20:28:17Z", "closedAt": "2014-08-01T20:28:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T20:54:24Z", "contents": "I found a workaround on the jQuery test suite: https://github.com/jquery/jquery/blob/master/test/data/testrunner.js#L161-L164\nThat's conflicting with our html reporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-07-31T14:01:50Z", "contents": "Ref jquery/jquery#1635", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-01T20:28:16Z", "contents": "It's being reset but the API changed after the html reporter detaching that it's kind different. #617 and #619 address this better", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 616, "url": "https://github.com/qunitjs/qunit/issues/616", "title": "Output timestamps for tests and assertions", "contents": "Follow up for #583 (comment)\n\nI wonder if outputting timestamps for tests and assertions could help identify this oddity, along with helping elsewhere. Where \"timestamp\" would be time in milliseconds since the test started running. So the expect would be some millisecond after it started, the passed assertion would be some milliseconds after the test finished.\nAs for helping elsewhere: For async tests with multiple timeouts, it might be useful to see where the delays actually are, instead of only seeing the total runtime of a test.", "createdAt": "2014-07-31T13:19:31Z", "updatedAt": "2016-11-01T16:29:05Z", "closedAt": "2014-08-29T21:52:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-07-31T16:17:53Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:11:49Z", "contents": "For the HTML reporter, showing the timestamps could be an optional UI feature (i.e. CSS class-based display controlled via URL config) that is defaulted to \"on\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:14:19Z", "contents": "These time elapsed values should also be included in the QUnit.log callback data objects so various reporters can all display these without having to calculate it themselves.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:21:51Z", "contents": "I don't see any reason to make the UI portion configurable. The display should be subtle enough that it doesn't distract, similar to the default styling of the \"Rerun\" link. Including it in the callbacks makes sense.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:35:38Z", "contents": "OK, fair enough.  So the display would probably be something like one of the following pseudo-HTML displays:\n1. hello test (0, 1, 1)  Rerun                   2 ms\n    1. [1 ms] Passed!\n\n2. hello test (0, 1, 1)  Rerun                   2 ms\n    1. [0:00.001] Passed!\n\n3. hello test (0, 1, 1)  Rerun                   2 ms\n    1. [0.001 sec] Passed!\n\nWhich one?  (Or something else?)\nIt would be nice if it were bound to a set width (both in the HTML reporter and in other reporters) so that they all align nicely.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T14:17:52Z", "contents": "Maybe align the assertion time to the right, with the test runtime? Then the width shouldn't matter.\nFrom your samples, 1) looks best. We can figure that out once we have some samples to look at, from an actual testsuite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T18:43:54Z", "contents": "Where \"timestamp\" would be time in milliseconds since the test started running.\n\nThis may not be immediately understood by users.\nI can imagine them being unsure if it means that the assertion took n milliseconds (i.e. n ms elapsed since the last assertion or test start) or if it was total time elapsed since the start of the test (which is what we intended).\nWould adding something other indication like a @ symbol make it more clear?\ne.g.\n1. hello test (0, 3, 3)  Rerun                   4 ms\n    1. Passed!                                 @ 1 ms\n    2. Passed!                                 @ 2 ms\n    3. Passed!                                 @ 4 ms", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T18:50:37Z", "contents": "Putting the @ in front of the number sounds like a good idea to me. It will likely help to see what it actually ends up looking like.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T18:55:57Z", "contents": "interesting. go for it", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T19:11:26Z", "contents": "Example output:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T20:01:58Z", "contents": "That looks good, but isn't a sample where this would actually help. It should be much more interesting when dealing with async tests that have longer delays in certain places. As I wrote originally:\n\nFor async tests with multiple timeouts, it might be useful to see where the delays actually are, instead of only seeing the total runtime of a test.\n\nOnce you push something, I can do some testing as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T11:18:57Z", "contents": "Here are more examples from some passing async tests:\n\nDefinitely looks more useful in the async scenarios, as expected/intended.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T13:32:01Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 617, "url": "https://github.com/qunitjs/qunit/issues/617", "title": "Improve fixture clean-up", "contents": "Running jQuery Core and UI tests with the git build of QUnit are revealing that we need to improve our html fixture clean-up as it is done on jQuery.fn.empty()", "createdAt": "2014-07-31T21:26:41Z", "updatedAt": "2014-12-08T20:19:10Z", "closedAt": "2014-12-08T20:19:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:08:52Z", "contents": "Can you expound on this one?  Is it related to your later issue and PR: #619 and #620?\nFor quick reference: jQuery.fn.empty()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-06T19:05:18Z", "contents": "jQuery#empty does a data binding clean up. With that it removes all binded event, etc data on HTML tags rather than just cleaning the context HTML tag.\njQuery Core and UI tests does that on api features that binded data compromises further tests or are necessary to work properly.\nIt's not easy to just import its functionality. Although, that would increase our fixture cleanup reliability.\nWithout this it's probably difficult to release the v2.0 without removing the currently deprecated QUnit.reset.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-07T01:07:31Z", "contents": "jQuery#empty is pretty specific to jQuery-centric data bindings, which doesn't seem like something that should be imported into QUnit.\nQUnit.reset could be left intact but that actually brings up an interesting point: we currently have moved QUnit.reset into the HTML Reporter because it cleans up HTML fixtures.  However, it is also likely that we will allow reporters other than the HTML reporter to be used within the browser. if we want to continue to reset the fixture, we need to ensure that either:\n\nthe HTML reporter is always used within the browser even if some other reporter is the desired one; or\nQUnit.reset is moved back into QUnit core but only invoked if the DOM is present.\n\nI would recommend the latter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-07T01:53:24Z", "contents": "However, it is also likely that we will allow reporters other than the HTML reporter to be used within the browser.\n\nGood point. I also agree with the fixture reset function back to QUnit core, but that can be addressed with a different reporter.\nMaybe we should place this on a new issue to keep track?\n\njQuery#empty is indeed specific to jQuery-centric data bindings but I think it's good to investigate if we can do something else to clean html data rather than just replacing tags.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-07T12:58:59Z", "contents": "If we move QUnit.reset back to core, we can just remove the public function and run the cleanup code after all testDone callbacks ran. That way other projects can do custom cleanup in testDone without interference from QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-07T14:10:42Z", "contents": "Sounds like a good plan, @jzaefferer.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T12:41:57Z", "contents": "@leobalter can you look into implementing my suggestion above?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-08T20:19:10Z", "contents": "There's nothing else we can do until we replace or remove QUnit.reset for QUnit 2. It's already after the testDone callbacks.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 618, "url": "https://github.com/qunitjs/qunit/issues/618", "title": "Improve/restore reference errors report", "contents": "Reported by @scottgonzalez on jquery/jquery-ui#1301 (comment)\n\nThe new version of QUnit does a worse job of reporting reference errors.\nOld:\n\nNew:\n\nIn both cases, the first error that's actually thrown is the one reported in the old version.", "createdAt": "2014-08-01T16:57:49Z", "updatedAt": "2014-08-11T15:57:37Z", "closedAt": "2014-08-06T18:43:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:09:46Z", "contents": "Hmm... how did that happen, I wonder?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-05T13:12:56Z", "contents": "If you'd like, I can bisect and find the commit that caused this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T13:37:58Z", "contents": "@scottgonzalez: That would be great if you get a chance. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T17:02:49Z", "contents": "push() was moved to Test.prototype in @f2066a2634f04713713be2ee5c9f06be331b7c8a.\nIt gets the sourceStack without passing an offset value - defaults to 3.\nTo get the proper sourceStack, I think it's necessary to set the default to 5, regarding some jQuery UI tests I did run.\nI gotta check this all and send a patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T19:33:07Z", "contents": "That sounds reasonable. Would be good to add a regression test for this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 619, "url": "https://github.com/qunitjs/qunit/issues/619", "title": "HTML Reporter: expose fixture reset api", "contents": "Ref jQuery UI changes like leobalter/jquery-ui@1d438c8 and leobalter/jquery-ui@9a2b345\njQuery UI needs to clean-up html fixture data bindings like events, etc. It does it by hacking QUnit.reset.\nI don't like the idea to bring back the fixture resetting to the QUnit's core code, that would make the html reporter detaching worthless.\nMy idea is to make the html reporter extend QUnit.api to have a fixture resetting handler, like:\nQUnit.fixtureReset(function() {\n    $( \"#qunit-fixture\" ).empty();\n});\nDoing so, every fixture call would trigger the callback method before reseting the html fixture.\nI proposed the use of module teardown but that might be too much granular.", "createdAt": "2014-08-01T17:30:46Z", "updatedAt": "2014-08-05T19:08:36Z", "closedAt": "2014-08-05T19:08:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-02T01:18:02Z", "contents": "Hmm... why not just have them do this as part of a teardown function or testDone callback? This seems unnecessary to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-02T01:26:59Z", "contents": "If there were a global teardown, that'd be fine. But if the same logic has to be defined for every module, that's unacceptable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-02T04:55:16Z", "contents": "That might be solved when we have nested tests/modules, but that's not simple to implement.\nI'm also ok to have teardown use on modules, but I noticed that @jzaefferer didn't like that approach as Scott just commented above.\nI don't mind if we push an API extersion only at the html reporter, if that could fit what's necessary to update QUnit on other jQuery projects. My main goal here is to not bring fixture reset (an html related method) back to QUnit's core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-02T12:55:22Z", "contents": "I think it's time to pursue the multiple levels of setup/teardown discussed in #471", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 621, "url": "https://github.com/qunitjs/qunit/issues/621", "title": "HTML Reporter: Only output number of passed assertions for green tests", "contents": "This display can be improved:\n1. accordion/accordion.html (0, 320, 320)\n\nI suggest only outputting one number, in green, for passed tests:\n1. accordion/accordion.html (320)", "createdAt": "2014-08-05T15:37:10Z", "updatedAt": "2014-08-06T16:34:39Z", "closedAt": "2014-08-06T16:34:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 625, "url": "https://github.com/qunitjs/qunit/issues/625", "title": "callbacks[i].call is not a function", "contents": "I don't now if is a particular case, but I found the follow error:\nTypeError: callbacks[i].call is not a function\ncallbacks[ i ].call( scope, args );\nqunit.js (l\u00ednea 1168)\nThe code solution is check if callback is a function before do a .call (line 1167):\nif(typeof callbacks[ i ] == \"function\")\n   callbacks[ i ].call( scope, args );\nI'm using QUnit version 1.14.0. and QUnit.config.autostart = false;", "createdAt": "2014-08-08T12:51:29Z", "updatedAt": "2014-08-28T18:17:05Z", "closedAt": "2014-08-28T18:17:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "favio41", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "favio41", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 9, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T13:00:54Z", "contents": "This is happening because your test suite is probably registering a non-function to one of the QUnit callback methods\nI'll write a patch for this but you can check if there're any callback method being called with a non-function parameter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T13:34:33Z", "contents": "@leobalter: Are you planning on doing the same patch that @favio41 showed, or something that would also still support native host object functions (that return typeof fn === \"object\" but also have the .call and .apply invocation methods available)?\nIf the latter, you can check out what I did for my jQuery.isNativeFunction plugin.  However, for most users, just checking for typeof fn === \"function\" should do the trick, I would think.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T13:46:03Z", "contents": "Answer in #626", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "favio41", "authorAssociation": "NONE", "createdAt": "2014-08-08T13:52:22Z", "contents": "Ok, I found some more info.\nI use:\nvar log = Function.prototype.call.bind(console.log, console)\nto bind my custom logging. What happen is that Quint also get the log call, and do not handle properly.\nIs complity up to you guys, if the patch must be commited or not.\nTks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T16:31:53Z", "contents": "@favio41: I'm pretty confident that you want the following:\nvar log = Function.prototype.bind.call(console.log, console);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T16:33:29Z", "contents": "(console.log, console) is not making sense to me, I gotta play with it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T16:35:55Z", "contents": "Why not log = console.log.bind( console )? Am I missing something?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-08T16:37:18Z", "contents": "@leobalter: That should probably work in most/all of the modern browsers.  It depends on if console.log inherits from the Function.prototype or not, which it would not in any browsers that treat it as a host object function rather than a \"real\" JS function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T18:17:04Z", "contents": "Fixed by #626.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 630, "url": "https://github.com/qunitjs/qunit/issues/630", "title": "Fixture cleanup does not cleanup jQuery binds", "contents": "Hi,\nI'm working on a university project using QUnit. Our team stumbled upon a bug in the cleanup of qunit-fixture.\nI recreated the bug using a very small testing project given below. But description first:  Let's have a View which creates elements in the DOM and binds (mouse) events on them. We would like to test whether the clicks are actually forwarded to a given listener. So we created two tests, one that checks if the DOM has been created, and one which tests the click event handling.\n// The View\nvar View = (function(wrapper, receiver) {\n    var clickable = wrapper.append('<div id=\"clickable\"></div>');\n    clickable.on(\"click\", function() {\n        receiver.invoke();\n    });\n\n    return {};\n});\n\n// The tests\nQUnit.test(\"testViewDom()\", function(assert) {\n    var shouldNotReceive = {\n        invoke: function() {\n            assert.ok(false, \"Should have not been invoked\");\n        }\n    }\n    var viewInstance = new View($('#qunit-fixture'), shouldNotReceive);\n\n    assert.strictEqual($('#clickable').length, 1);\n});\nQUnit.test(\"testViewClick()\", function(assert) {\n    expect(1);\n    var receiver = {\n        invoke: function() {\n            assert.ok(true, \"Should be invoked\");\n        }\n    }\n    var viewInstance = new View($('#qunit-fixture'), receiver);\n\n    $('#clickable').click();\n});\nThe receiver in the first test is actually just to show that it is being invoked in the second test although it should not. What happens is, that this test succeeds and fails in an alternating manner. If it fails, both invoke methods from shouldNotReceive and receiver have been called.\nThe only quick and dirty resolution to this we could find was unbinding all events in the DOM in the setup function of a QUnit module using $(document).add('*').off();. But that should not be the way to go. If I have missed anything please just let me know", "createdAt": "2014-08-18T08:58:23Z", "updatedAt": "2014-08-28T16:49:15Z", "closedAt": "2014-08-28T11:41:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ckuepker", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "ckuepker", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 6, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-18T11:11:46Z", "contents": "A simple duck-punch should do the trick:\nQUnit.reset = (function(_reset) {\n  return function() {\n    $(\"#qunit-fixture\").empty();\n    return _reset.apply(QUnit, arguments);\n  };\n})(QUnit.reset);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-18T13:18:28Z", "contents": "@ckuepker I believe you are facing this bug, but would you mind to tell what QUnit version are you using?\nI checked your example with QUnit 1.15.0 on JSBin and it's working.\nMaybe the example is not capable to reproduce the error, but there's a small chance of being something else.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ckuepker", "authorAssociation": "NONE", "createdAt": "2014-08-19T07:08:54Z", "contents": "@JamesMGreene Is that for my test or QUnit? If mine: Where would I have to add it?\n@leobalter We've been using 1.14.0 as I didn't know there has been a 1.15.0 release until now. If you change the version to 1.14.0 in JSBin it actually gives you the bug. I will update our project to 1.15.0 as soon as qunitjs.com is available again because right now it seems to be down (for me). Thanks a lot. Think this issue is closed as it's already fixed in 1.15.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-08-22T00:54:45Z", "contents": "I think the problem lies in how you're binding the event. QUnit is cleaning up the fixture just fine, but your code is binding to the fixture itself, not to the clickable element inside.\n\nvar View = function(wrapper, receiver) {\n    var clickable = wrapper.append('<div id=\"clickable\"></div>');\n    clickable.on(\"click\", function() {\n        receiver.invoke();\n    });\n};\n\nIn this code, clickable is the wrapper, not <div id=\"clickable\"></div>. When there is only one, this code appears to work fine because click events bubble up to their parent node.\nYou probably meant to write something like this:\nvar View = function(wrapper, receiver) {\n    var clickable = $('<div id=\"clickable\"></div>');\n    clickable.on(\"click\", function() {\n        receiver.invoke();\n    });\n    wrapper.append(clickable);\n};\nor:\nvar View = function(wrapper, receiver) {\n    var clickable = $('<div id=\"clickable\"></div>');\n    clickable.on(\"click\", function() {\n        receiver.invoke();\n    });\n    clickable.appendTo(wrapper);\n};\nor:\nvar View = function(wrapper, receiver) {\n    $('<div id=\"clickable\"></div>')\n        .on(\"click\", function() {\n            receiver.invoke();\n        })\n        .appendTo(wrapper);\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-22T15:52:40Z", "contents": "Yes, @Krinkle is definitely right: you should not be modifying the actual fixture element, only its contents.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ckuepker", "authorAssociation": "NONE", "createdAt": "2014-08-28T11:41:43Z", "contents": "Yes, I thank you very much. That makes absolut sense. Me and the group are impressed with our lack of jQuery closure knowledge.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 631, "url": "https://github.com/qunitjs/qunit/issues/631", "title": "Bad typeof test in src/dump.js", "contents": "In src/dump.js#L75, we have\n} else if ( typeof obj.setInterval !== undefined && typeof obj.document !== \"undefined\" && typeof obj.nodeType === \"undefined\" ) {\nSince typeof obj.setInterval always evaluates to a string, the first test trivially yields true, even if obj.setInterval is undefined.\nIt should be typeof obj.setInterval !== \"undefined\", like the other two.", "createdAt": "2014-08-20T09:35:30Z", "updatedAt": "2016-11-01T16:29:06Z", "closedAt": "2014-08-28T16:44:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "xiemaisi", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "xiemaisi", "company": "@Semmle "}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T15:53:11Z", "contents": "PR #642 submitted.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-dump", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 632, "url": "https://github.com/qunitjs/qunit/issues/632", "title": "Allow tests to return a Promise", "contents": "Split out from #534.\nDetails:\n\nReturn a promise from a test\nThat promise should be automatically asserted to fulfill\nAutomatic async start/stop\n\nUsage:\nQUnit.test(\"promises promises...\", function(assert) {\n  assert.expect(1);\n  return $.ajax(\"/api/blah\");\n});\nPlan is to use a similar patch to what @domenic mentioned doing for Mocha: #534 (comment)\nCC: @stefanpenner @domenic", "createdAt": "2014-08-23T18:12:14Z", "updatedAt": "2014-09-11T23:02:16Z", "closedAt": "2014-09-11T21:54:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "stefanpenner", "company": "@LinkedIn"}], "comments_count": 2, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-23T18:15:46Z", "contents": "P.S. I am hoping to submit a PR for this later today or tomorrow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-11T23:02:16Z", "contents": "yay", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 633, "url": "https://github.com/qunitjs/qunit/issues/633", "title": "Support global test-level setup/teardown callbacks", "contents": "As originally discussed in #471, it is useful to have setup and teardown callbacks for each test that can be defined globally. For example, in ember the monkey-patching of QUnit.module could be replaced.\nAs an API I'm suggesting a simple property assignment. This ensures that there is only one place to do this (avoid scattering global setup/teardown across files) and it can be disabled (set to null):\nQUnit.config.setup = function() {};\nQUnit.config.teardown = function() {};\nThis would be simple to document as part of QUnit.config.", "createdAt": "2014-08-25T15:38:20Z", "updatedAt": "2014-09-03T15:49:28Z", "closedAt": "2014-09-01T15:07:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 13, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T16:16:16Z", "contents": "It's a step in the right direction but I'd also like to see similar methods like \"moduleSetup\"/\"moduleTeardown\" as well (occurring once per module rather than once per test).\nIn the greater context, if we add per-module setup/teardown at the module level, we would either need to:\n\nmake the names something like setupOnce/teardownOnce if we want them to be similar to the current but still being backward-compatible, or\nchange the names completely (or offer aliases) to something like before/after or beforeAll/afterAll (per module) and beforeEach/afterEach (per test), a la Mocha.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T17:42:12Z", "contents": "\"moduleSetup\"/\"moduleTeardown\" (occurring once per module rather than once per test).\n\nI reviewed this suggestion in the PR I closed and discussed it with Leo. The main reason why I think that this is a bad idea is the rather loose runtime behaviour of modules. The rerun-failed-tests-first (\"rerun\") feature of QUnit means that any test from any module can ran before other tests in the same module. From that perspective, a setup that runs only once per module makes no sense, since its impossible to reason about when that should run in the \"rerun\" case.\nIf that makes sense, the naming discussion shouldn't be necessary. Otherwise I'll get back to that as needed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T17:47:05Z", "contents": "Hmm, OK, I can definitely see the potential conflicts between the reorder config and a module-level setup/teardown.  I still think it would be useful but I'm OK proceeding without it, at least for now.\nSo, moving on, my next question would be: is QUnit.config the right place for those function (vs. QUnit or QUnit.module (static))?\nQUnit.config.setup = fn;\nQUnit.setup = fn;\nQUnit.module.setup = fn;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T18:02:41Z", "contents": "The advantage I see of using QUnit.config is that its already in use in projects that have enough customisations to justify a separate file for configuring QUnit, like the ember file I linked to above (which mirrors what I've been using in an app project with a big testsuite). For example, ember sets \"QUnit.config.hidepassed\" in that file, which is documented as part of QUnit.config, so finding QUnit.config.setup there would be easy enough.\nOtherwise the three options you suggest are pretty much equivalent, I don't see any drawbacks to either of them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T18:21:53Z", "contents": "I'm not overly concerned about it, was just curious about the rationale.  Honestly, regardless of where we put it among these 3 options, I'm not sure if a new user would be able to intuitively understand the purpose of methods named setup/teardown at those scopes without looking at the documentation.\ne.g. some possible confusions:\n\n\"Set up the QUnit config object?\"\n\"One-time setup of QUnit core?\"\n\"Set up for every module?\"\n\nCorrect interpretation: \"Set up for every test\"\nSo... maybe QUnit.test.setup?  shrugs Not sure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T18:28:11Z", "contents": "That is a good point. We're working on the implementation and struggle to find better names. How about picking something from other frameworks thats a lot more explicit, like \"beforeEach\" and \"afterEach\"? That'll be inconsitent with the setup/teardown of module, but we could rename those (with the usual deprecation process...).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T18:30:41Z", "contents": "I personally really like the terminology of beforeEach/afterEach used in Mocha.  And yes, we could do another 1.x release to deprecate Module#setup/Module#teardown to the new aliases of Module#beforeEach/Module#afterEach.\nAnother thing to keep in mind with all of this is the fairly closely related/integrated changes needed for #543.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T18:42:57Z", "contents": "before/after would look better, but I prefer going with beforeEach/afterEach to have a similar approach from Mocha.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T19:38:59Z", "contents": "Ignoring #543 for a moment, it looks like we agree on beforeEach/afterEach as properties of QUnit.config and on the module level. For the latter, we'll provide a compatibility layer that maps setup and teardown to the new names. @leobalter is implementing that in #635.\nOnce we have consensus on the nested modules, we can land this as-is or adapt accordingly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T19:42:18Z", "contents": "Sounds like a plan. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T13:56:39Z", "contents": "Following pull #635.\nHaving global setup/teardown could be useful. But do we need to rename them from setup/teardown to beforeEach/afterEach? I'm not sure I see the value or justification in \"renaming them at the same time\". The module-specific setup/teardown hasn't changed in behaviour or signature, we'd be deprecating that for no reason other than the name.\nAside from the naming, there's nothing here that requires existing code to change, that's quite valuable from an API point of of view to maintain. What's the advantage of \"beforeEach\" and \"afterEach\"?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T15:45:50Z", "contents": "The only reason for the rename is consistency with the new methods we're adding, which also match the naming in other libraries. There's no other change. We considered using setup/teardown for both, but that is far from intuitive.\nI think its better to fix the naming now, while we're migrating other APIs, then keeping the inconsistent naming around forever.\nBtw., since you wrote \"could be useful\", here's another usecase for this ticket, in my second comment: qunitjs/api#63", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:56:02Z", "contents": "@Krinkle does the comment above address your concerns?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 636, "url": "https://github.com/qunitjs/qunit/issues/636", "title": "Should use `Error#stack` without throwing when available", "contents": "In Chrome, at least, a newly created Error instance already has its stack property set, so there is no need to throw it in that situation.  Moreover, throwing it results in both a performance hit as well as debugging hell for any devs with the \"Pause on all exceptions\" setting enabled in Chrome's Dev Tools.\nI am doing this in another open source library (polyfill) of mine... works well: JamesMGreene/document.currentScript@dist/document.currentScript.js#L124-137\nBasics:\nvar e = new Error(),\n    stack = e.stack;\nif (!e.stack) {\n  try {\n    throw e;\n  }\n  catch (err) {\n    stack = err.stack;\n  }\n}\n// Use `stack`....\nI've also used this technique in non-open source projects as well.\ncc: @stefanpenner", "createdAt": "2014-08-26T16:21:39Z", "updatedAt": "2014-08-29T23:20:50Z", "closedAt": "2014-08-29T23:20:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "stefanpenner", "company": "@LinkedIn"}, {"login": "jzaefferer", "company": null}, {"login": "lukemelia", "company": "Yapp"}], "comments_count": 4, "comments_data": [{"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-26T18:33:30Z", "contents": ":)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T19:33:49Z", "contents": "Sounds good, can you work in implementing this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T19:49:25Z", "contents": "Yup, I'll try to get to it this week but I'd like to cleanup PR #634 first. Just wanted to add an issue for tracking.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lukemelia", "authorAssociation": "NONE", "createdAt": "2014-08-26T20:03:51Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 637, "url": "https://github.com/qunitjs/qunit/issues/637", "title": "Add ability to mark a Test as skipped or incomplete", "contents": "Past discussion: #434\n\nWould a PR adding the ability to skip tests be a welcome change? On a custom fork of TinyMCE we're modifying the functionality and as such certain tests are failing. We want to keep the tests in the codebase and are currently forced to comment them out. Having the ability to skip tests would be the best solution in this case.\nThe syntax would be test.skip(func...).\nI'll gladly make a PR for this, just looking for approval before I start working.", "createdAt": "2014-08-26T17:24:25Z", "updatedAt": "2014-09-29T12:47:48Z", "closedAt": "2014-09-11T22:00:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "es", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "es", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 21, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T17:34:46Z", "contents": "It would be great if you could implement this as a plugin, that way we don't have to commit to an API just yet, and anyone interested in this feature, like you, could start using it.\nFor some ideas on how to implement this, some other approaches for the API and more discussion, see #434\nIf you need help implementing a QUnit plugin, check out the existing plugins, or ask me or @leobalter, e.g. via #jquery-dev on Freenode.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T17:52:40Z", "contents": "To clarify, a plugin would be great to pave the way for landing this in QUnit itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T18:26:01Z", "contents": "The trouble with creating this as a plugin is that the plugin would have to alter the state of test result data (e.g. to a skipped: true flag, or something) as well as hacking ALL of the Reporters to appropriately reflect the difference in their respective UIs.\nIt definitely needs to be part of QUnit core or else it will become a big PITA for the plugin maintainers to continue updating it to duck-punch/hack various new/updated Reporters.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T18:27:59Z", "contents": "Same goes for the \"pending\" feature discussed in #434, i.e. for tests that have only been stubbed in by name but not implemented.\nSyntax would be to not include the function callback in the call to test:\ntest(\"TODO: Implement this test that does X\");", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T18:30:44Z", "contents": "Perhaps we could add a generic status property to the test result data? e.g.\n\n\"passed\"\n\"failed\"\n\"skipped\"/\"inconclusive\"\n\"pending\"/\"not implemented\"/\"future\"/\"incomplete\"", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:33:43Z", "contents": "skipped/pending/future/etc. seem to mean the same thing functionally, and do appear in other Javascript frameworks. Jasmine x-prefixes functions (describe \u2192 xdescribe, it \u2192 xit) in addition to the empty-body test(\"TODO\") equivalent, and Mocha embeds .skip (describe \u2192 describe.skip, it \u2192 it.skip). I think others are similar to one or the other.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:46:00Z", "contents": "One of the objections I have, or used to have, was that this feature could be used to write placeholders or disable tests that then stick around forever. The alternative, commenting tests, is usually worse though. With that in mind, I'm currently toying with the idea of adding an expiration date to skips:\nskip(\"this no worky\", \"2014-08-26\", function() { ... });\nWhich would be okay for, say, a month, then starts to fail. Probably not feasible, but maybe this inspires someone to come up with a better concept that addresses the problem of disabled tests rotting away.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "es", "authorAssociation": "NONE", "createdAt": "2014-08-26T20:50:03Z", "contents": "@jzaefferer In the plugin I was planning on having comments logged on skipped tests. This forces people to be aware of the skipped tests and bring attention to them if need be.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T21:50:41Z", "contents": "@jzaefferer It's difficult to get too specific while QUnit is still feeling out syntax options, but I could see something like testIf or test( label, fn ).skipIf( reason, fnDecide ). It's certainly more explicit that what already happens to serve the same purpose in query core's suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "es", "authorAssociation": "NONE", "createdAt": "2014-08-26T23:54:04Z", "contents": "I think the reason skipping works in other test frameworks is the simplicity behind it. I feel if we begin adding timeout dates/conditionals it'll over complicate the feature, which should be avoided.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T14:00:15Z", "contents": "Can we get some manner of consensus on if we're discussing 1 or 2 goals here, and if both are desired?  I view the discussion as:\n\nSome people want the ability to skip tests (e.g. QUnit.test.skip(\"x\", fn))\nSome people want the ability to stub pending/future tests (e.g. QUnit.test(\"y\");)\n\nI think both goals are worthy but that their implementation and evaluation in the UI would be different, IMHO. However, as they are similar, it is probably a good idea to discuss them together at the onset.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T19:03:19Z", "contents": "Taking inspiration from TAP this time, I'd like to recast the terminology while preserving mutual compatibility:\n\nTODO: Expects failure (i.e., a reversal of normal operation\u2014passes are interesting instead of failures, and failures do not effect pass\u2192fail state changes in the containing run/module/suite/test). Reporters must take care to separate TODO failures from non-TODO failures, and should highlight TODO passes.\nSKIP: Does not run at all. Reporters must take care to report SKIPs, and should treat them as a category distinct from pass/fail.\n\nDiscussion in this ticket has centered on SKIP, but past examples would actually benefit more from TODO.\nAt any rate, I prefer QUnit.test.skip(\"x\", fn) over QUnit.test(\"y\") for SKIP\u2014it formalizes commenting-out, and is actually sufficiently general to subsume the latter (e.g., QUnit.test.skip(\"z\")).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T19:40:43Z", "contents": "Taking inspiration from TAP this time, I'd like to recast the terminology while preserving mutual compatibility...\n\nAwesome! I didn't realize any other frameworks/protocol had both of these.\n\nAt any rate, I prefer QUnit.test.skip(\"x\", fn) over QUnit.test(\"y\") for SKIP\u2014it formalizes commenting-out\n\nAgreed.\n\nand is actually sufficiently general to subsume the latter (e.g., QUnit.test.skip(\"z\")).\n\nTrue. Which status would that result in, though? SKIP or TODO? I'm leaning toward SKIP.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T20:32:30Z", "contents": "and is actually sufficiently general to subsume the latter (e.g., QUnit.test.skip(\"z\")).\n\nTrue. Which status would that result in, though? SKIP or TODO? I'm leaning toward SKIP.\n\n\nAgreed. TODO, if introduced, should be entirely distinct and explicitly opt-in (come to think of it, that clarity would another benefit of not supporting QUnit.test(\"y\")).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T20:34:47Z", "contents": "I don't know... QUnit.test.todo(\"y\"); is a little annoying to me personally.\nI would prefer QUnit.test(\"y\") to represent pending/TODO tests, or supporting both QUnit.test(\"y\") and QUnit.test.todo(\"y\") to trigger the same functionality/status.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T21:40:13Z", "contents": "@JamesMGreene QUnit.test.todo(\"y\") doesn't even make sense, nor does any todo without a corresponding function. See above: TODO represents cases where the testing code exists and is executed, but is expected to fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T22:12:55Z", "contents": "TODO represents cases where the testing code exists and is executed, but is expected to fail.\n\nOh, didn't read that closely enough before. That's strange behavior to me.\nI would envision TODO as a test without a callback (or at least no assertions).\nI would envision what you described not as a test status at all but rather an assertion that cannot fail, e.g. assert.inconclusive(...), and ergo would not make its containing test fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-08-30T01:02:24Z", "contents": "Ok, I think that's reason enough to take TODO off the table for this issue and focus on SKIP (which is entirely appropriate given its description). I just wanted to make sure that we don't end up unnecessarily inconsistent with the field of existing technologies, in which skip means \"don't run, but report the fact\" and todo means \"run, but don't let failures fail the containing group\" and both are conceptually applicable at assertion, test, and suite level.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T14:56:44Z", "contents": "Is there any reason for skip being a property of QUnit.test? Wouldn't QUnit.skip work just as well?\nIf so, since the interest is still there and there seems to be some agreement on the API design, a PR that implements QUnit.skip( name, callback ) would be welcome. It could take inspiration from #434 for the html reporter, but otherwise this needs to be done from scratch.\nWould also be nice to include the semantics of this new method in the description of the PR. We should be able to use that text for the API documentation later.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "es", "authorAssociation": "NONE", "createdAt": "2014-09-02T17:43:25Z", "contents": "@jzaefferer Awesome, I think adding QUnit.skip is the best way forward. I'll add examples and a description of the functionality that can be used in documentation in the PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-17T13:34:18Z", "contents": "For anyone else who wants the Mocha-style \"pending\" syntax, I created this little plugin to build on top of @leobalter's QUnit.skip implementation: JamesMGreene/qunit-pending\nSince QUnit core v1.16.0 isn't released yet, it is currently depending (from a dev/Node perspective) on a personal branch I created that is a copy of the latest specific commit in the master branch.  I'll be sure to update the dependencies in the \"package.json\" when QUnit core v1.16.0 is published.\nP.S. I fully admit this syntax is harder to search for.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 639, "url": "https://github.com/qunitjs/qunit/issues/639", "title": "Support for valid XHTML is broken because used tags like br and input aren't closed.", "contents": "There are lots of places in the code where tags like <br> are used without actually caring for closing them correctly. This breaks XHTML validity and the test runner won't run on TV devices.", "createdAt": "2014-08-28T12:47:41Z", "updatedAt": "2016-11-01T16:29:06Z", "closedAt": "2014-09-04T16:15:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SargoDarya", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "SargoDarya", "company": "enmacc GmbH"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 8, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T13:19:23Z", "contents": "Thanks for the report. Could you send a PR to close those tags and test that on your setup? That would help, since I have no idea how to reproduce this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SargoDarya", "authorAssociation": "NONE", "createdAt": "2014-08-28T13:21:08Z", "contents": "Sure, although I\u2019m a bit busy now but I\u2019ll attach it later today.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T15:35:04Z", "contents": "I'm not really sure why you would be checking external HTML files for XHTML validity.  That said, I've submitted a PR (#641) that should resolve your issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T16:56:15Z", "contents": "I think this is a case of some static analysis tool being overzealous. @SargoDarya If that's the case for you, I'd recommend looking into it. You could be on a path that is set to waste a lot of your time that will lead to no value whatsoever (this is a false-positive).\nThe relevant code here is merely parsing new HTML using innerHTML and then appending that subtree to the DOM. It's not writing (X)HTML from an output buffer to a browser, nor creating an XHTML document, or an HTML file that may have an XHTML doctype. None of that is relevant.\nThe resulting DOM will be the same either way and work just fine and be fully valid and compatible in an XHTML-based document environment. It doesn't matter which way QUnit writes it. It's fine either way. Someone else's environment that prefers HTML5 short style could make a case for non-XML style void tags. It's of no significance in this area.\nAnd if QUnit were to run its html in an iframe (one that doesn't use XHTML), then this would be fully valid (since it wouldn't be running in the user-provided XHTML doc, but in our own non-XHTML doc). The analysis tool couldn't possible tell which one is the case. So I'd recommend not changing this code because per jQuery Foundation style guide, we don't use XHTML-style void tags (we support it and ensure our libraries work with other people's XHTML documents, but we don't use it in our own code).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SargoDarya", "authorAssociation": "NONE", "createdAt": "2014-08-29T08:03:02Z", "contents": "The actual problem is that jQuery and everything else behaves differently when the following is specified:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//HbbTV//1.2.1//EN\" \"http://www.hbbtv.org/dtd/HbbTV-1.2.1.dtd\">\n\nThis is needed for HbbTV development for web and running the test suite on one of the devices will throw the error \"Non defined entity\" and just die. Writing valid tags instead fixes the issue. I'm checking out the PR now.\nEdit: The non defined entity actually springs from &nbsp;, the \"No matching end-tag\" issue is fixed though.  Fixing the non-defined entity bug can be solved by replacing &nbsp; with &#160; but I guess that's another topic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-08-29T13:22:53Z", "contents": "@SargoDarya: It seems reasonable that standard HTML entities like &nbsp; should be defined in your DTD instead.  If that's not possible for some reason, switching them to a hex/dec equivalent entity on our side would be acceptable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SargoDarya", "authorAssociation": "NONE", "createdAt": "2014-09-01T08:32:07Z", "contents": "This works like a charm now. Thanks a lot! All entity and tag issues are resolved.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T15:15:35Z", "contents": "Thanks for the confirmation. I'll reopen since the PR hasn't landed, yet. Will do that once we figure out how to prevent regressions.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 645, "url": "https://github.com/qunitjs/qunit/issues/645", "title": "Add runtime property to moduleDone event data", "contents": "The done/run-end, testDone/test-end, and log/assert logging callbacks all already have a runtime property in their details object. We should add the same kind of property to the details object for the moduleDone/module-end logging callback for consistency.\nThe api.qunitjs.com docs will need to be updated afterward as well.", "createdAt": "2014-08-31T14:51:02Z", "updatedAt": "2014-09-04T14:03:04Z", "closedAt": "2014-09-04T14:03:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T15:12:12Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 647, "url": "https://github.com/qunitjs/qunit/issues/647", "title": "Global `beforeEach`/`afterEach` should synchronize before module `beforeEach`/`afterEach` run", "contents": "As noted in #634 (comment) and #634 (comment), there is a bug in the newly introduced beforeEach/afterEach hooks: the global beforeEach/afterEach hooks should be allowed fully synchronize before the module-level beforeEach/afterEach hooks are run.  If they don't, it easily leads to race conditions.", "createdAt": "2014-09-03T14:17:18Z", "updatedAt": "2014-09-04T15:53:46Z", "closedAt": "2014-09-04T15:53:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 1, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T14:21:28Z", "contents": "Also, just to add the idea into the mix now: related to #543, Mocha's strategy for infinitely nested modules (suites) is basically accomplished by 2 decisions:\n\nStore suite context objects in a stack\nEnsure that there is an unnamed root-level suite (which is what global beforeEach/afterEach hooks get attached to in Mocha)\n\nIf we are going to pursue #543 (and I really hope we do), this is very important to keep in mind.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 651, "url": "https://github.com/qunitjs/qunit/issues/651", "title": "Make filter feature discoverable in HTML reporter", "contents": "We still support adding ?filter=[something] to the URL to run a subset of tests. This is useful when a selection of tests across modules should run. Unfortunately, this is almost impossible to discover, we don't even document it on the page for QUnit.config.\nOne idea I had when talking about how to make this coverable with Yehuda was to put a search icon in the header, next to the module select. Clicking that would bring up an input that maps to the filter query string, just like selecting a module or clicking a Rerun link does.", "createdAt": "2014-09-03T21:20:10Z", "updatedAt": "2014-12-23T15:12:09Z", "closedAt": "2014-12-23T15:12:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T21:25:22Z", "contents": "Ref: #538", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T21:27:36Z", "contents": "I didn't reference that since the Rerun feature is independent of this. filter as a loose search works fine, it just needs some UI support. Just as Rerun used to be undiscoverable when it only worked by double clicking tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T21:37:29Z", "contents": "Thank you for clarification", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 654, "url": "https://github.com/qunitjs/qunit/issues/654", "title": "Build: Remove jscs linelength exception, fix or ignore deepEqual tests", "contents": "Disabling the line length check in jscs for everything is bad. We should try to only exclude the deepEqual tests for that check, or exclude that file (we never touch it anyway). Its much important to have the line length check for src/ in place.", "createdAt": "2014-09-04T18:55:40Z", "updatedAt": "2014-11-21T17:32:32Z", "closedAt": "2014-11-21T17:32:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-release"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 655, "url": "https://github.com/qunitjs/qunit/issues/655", "title": "Remove QUnit.stop, update QUnit.start to only work globally", "contents": "Related to #653.\nIn QUnit v2.0.0:\n\nQUnit.start will be updated to only affect the run's initial blocking state as controlled by QUnit.config.autostart. It will no longer control asynchronous flow inside of Test callbacks.\nQUnit.stop will be removed completely. It will no longer control asynchronous flow inside of Test callbacks, nor be allowed to affect the run's blocking state.", "createdAt": "2014-09-05T16:01:34Z", "updatedAt": "2016-04-18T16:09:51Z", "closedAt": "2016-04-18T16:09:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "spocke", "company": "Ephox Corporation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "platinumazure", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-05T19:25:07Z", "contents": "Future QUnit.start should probably throw an error when called more then once or when QUnit.config.autostart is true.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T21:37:34Z", "contents": "Future QUnit.start should probably throw an error when called more then once or when QUnit.config.autostart is true.\n\nThis change of behavior was added to PR #653, which is now merged.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spocke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-24T13:13:08Z", "contents": "Please don't remove QUnit.stop(); we use it in a case where each module stop:s waits for an editor to initialize then calls QUnit.start(); to run the tests. Instead I suggest that QUnit.stop remains but that it only works outside a test context.\nCurrently I can't update QUnit to the latest version due to the error being thrown from QUnit,stop.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T14:59:01Z", "contents": "QUnit.stop() is deprecated but it should work just fine on every QUnit.1.x.x versions.\nIf you have an error on QUnit.stop you should check if it's not an implementation error or a regression.\nWhich version you use today?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-10T17:10:04Z", "contents": "Is QUnit.start() still supported for restarting tests after an error, where async callbacks might be out of scope? (See test.js for an example)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-11T13:57:57Z", "contents": "@platinumazure that's a good question. I'll keep this in mind and have tests for what ever way it will work. Makes sense to keep this behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-11T15:30:39Z", "contents": "For what it's worth, I'd be okay with the method being deprecated and a new one being created, if that makes things make more sense semantically. I just need the ability for error handlers to restart tests under certain circumstances.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-12T17:56:13Z", "contents": "@platinumazure I agree, but that would require introducing a new method (maybe QUnit.run) and than deprecate QUnit.start. That would have QUnit.start being removed on 3.x as it's too late to introduce a new feature for 2.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": {"id": "MDk6TWlsZXN0b25lNTI1NjU2", "title": "2.1.0", "description": "", "createdAt": "2014-01-03T10:57:41Z", "dueOn": null, "number": 3, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 656, "url": "https://github.com/qunitjs/qunit/issues/656", "title": "Remove QUnit.asyncTest", "contents": "Related to #653.\nIn QUnit v2.0.0, QUnit.asyncTest will be removed as it doesn't mesh with the new assert.async API.", "createdAt": "2014-09-05T16:03:37Z", "updatedAt": "2016-04-18T16:09:51Z", "closedAt": "2016-04-18T16:09:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-05T19:19:08Z", "contents": "As with other methods or arguments, calling QUnit.asyncTest in 2.0 should throw an error ala \"QUnit.asyncTest is gone, use assert.async() instead\". In 2.1 this can be removed as well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api"], "milestone": {"id": "MDk6TWlsZXN0b25lNTI1NjU2", "title": "2.1.0", "description": "", "createdAt": "2014-01-03T10:57:41Z", "dueOn": null, "number": 3, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 657, "url": "https://github.com/qunitjs/qunit/issues/657", "title": "Remove private async parameter from QUnit.test", "contents": "Following #653, we need to remove the private [and undocumented] async parameter from QUnit.test in v2.0.0.\nHaving the framework mark a test as async no longer makes much sense, at least not without further changing the API (e.g. to provide the associated \"done\" callback returned from an initial framework call to assert.async as a new callback argument, for example).", "createdAt": "2014-09-05T16:16:59Z", "updatedAt": "2016-04-18T16:09:51Z", "closedAt": "2016-04-18T16:09:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-05T19:17:32Z", "contents": "It looks like this also wasn't ever documented: qunitjs/api@aa89f39#diff-26\nRemoving in 2.0 sounds good.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 658, "url": "https://github.com/qunitjs/qunit/issues/658", "title": "Specify env requirements, maybe make them stricter", "contents": "We had several recent pull requests that we're dealing with the setTimeout support checks in the source itself and in various tests. I'm currently wondering if we can make support for setTimeout a requirement for using QUnit. If we did that, we could remove a bunch of duplicate branches and simplify our tests.\nThis probably affects #540. But just as I don't know what \"features\" the new envs have that that is supposed to support, I don't know what we currently support that doesn't have setTimeout.\nConsidering other efforts to standarize across frameworks, it might be good to research what other frameworks support, e.g. what options exists in, let's say, Ringo.", "createdAt": "2014-09-05T20:26:31Z", "updatedAt": "2015-10-16T20:48:29Z", "closedAt": "2015-10-16T20:48:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 2, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-06T12:43:42Z", "contents": "Looking through @jdalton's qunit-extras.js (and his open issues) will probably give us all the info we would ever need about how to support other environments.\nBeyond that, I don't think I've seen any non-stagnate test frameworks that support Rhino, Ringo, Narwhal, or Nashorn... almost all are just browser, Node, or both.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:48:29Z", "contents": "We haven't had any related issues in a long time, nevermind.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 659, "url": "https://github.com/qunitjs/qunit/issues/659", "title": "Defer \"begin\" callback until test run actually starts", "contents": "Currently in QUnit.load, we immediately invoke the logging callbacks for \"begin\" (a.k.a. \"runStart\") when the page loads, even if QUnit.config.autostart is set to false and thus won't actually begin yet: src/core.js#L404-L406\nThis seems inaccurate both from a timing perspective (for reporters marking the time of events) as well as from a Test.count perspective: if the run hasn't begun yet, it may be because there are still tests loading asynchronously, and thus their count would not be included in the data sent with the \"begin\" event.\nThis logging callback should be called from somewhere inside the QUnit.start execution stack [and only fired once, when the test run actually begins] instead.", "createdAt": "2014-09-09T13:59:19Z", "updatedAt": "2014-09-11T22:15:37Z", "closedAt": "2014-09-11T20:52:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T14:21:47Z", "contents": "Seems legit. Considering all the references to this ticket in #653, let's fix this first.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T17:02:09Z", "contents": "If we want to fix this before merging #653, I'll need to pull forward a bunch of changes from #653 to make it possible.  It would be easier for me to merge #653, then fix this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T18:18:00Z", "contents": "As discussed, let's integrate the fix for this in #653.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T18:34:13Z", "contents": "Can we merge this on #653 branch?\n\nEdit: now I've refreshed the page and saw @jzaefferer's comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T22:15:37Z", "contents": "Done.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 660, "url": "https://github.com/qunitjs/qunit/issues/660", "title": "Investigate removing QUnit.config.autorun", "contents": "From a cursory glance through the codebase, I'm pretty sure that QUnit.config.autorun really isn't necessary if we make some other updates.\nIt is also not officially documented, though you can definitely find a few blog posts about people leveraging it to make their QUnit tests work on Rhino. As such, I'd suggest we leave it in till v2.x.", "createdAt": "2014-09-09T14:38:00Z", "updatedAt": "2016-04-19T15:31:01Z", "closedAt": "2016-04-19T15:31:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:51:59Z", "contents": "We should leave and document it or remove it. I'm not sure how removing it in 2.x would be better, when there is no replacement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T03:59:44Z", "contents": "Well, the idea would be to replace the non-browser autorun/load combo with the standard browser autostart/start combo.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T23:15:12Z", "contents": "I was able to remove it. Patch is on the way", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-support"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 662, "url": "https://github.com/qunitjs/qunit/issues/662", "title": "HTML Reporter should get module names from moduleStart/moduleDone events", "contents": "The HTML Reporter currently get all of the module names by creating an object called QUnit.config.modules (which contains key-value pairs of module name to true mappings) and having module names added to it during the QUnit.module calls.\nInstead of adding its own object into QUnit.config, the HTML Reporter should create its own object independent of QUnit core and get the module names by listening for the moduleStart event instead.\nSuch a change would be 100% backward compatible, other than in the possible edge case of QUnit somehow experiencing systemic failure and being unable to run all of the modules.", "createdAt": "2014-09-11T02:51:06Z", "updatedAt": "2014-12-01T18:42:30Z", "closedAt": "2014-12-01T18:42:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:44:36Z", "contents": "The module names are also provided in the testStart and testDone events.\nThough looking at the source, QUnit.config.modules isn't created by the HTML reporter. Replacing that object with the events would require the reporter to wait for the testsuite to finish before it can create the module dropdown.\nMaybe we can provide that list in the begin (aka runStart) event?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T15:35:23Z", "contents": "Maybe we can provide that list in the begin (aka runStart) event?\n\nI suppose so. How far should we go, e.g. should we also pass all of the test names, too?\nMy overarching point is that, despite being bundled with QUnit core (at least currently), we should try to treat the HTML Reporter like an isolated plugin as much as possible. Exposing properties on QUnit.config is definitely not the ideal way to pass data between the framework and the reporter.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-support"], "milestone": {"id": "MDk6TWlsZXN0b25lNzg4NjM1", "title": "JS Reporter", "description": "Once the js-reporter is far enough, issues in this milestone should be implemented/merged.", "createdAt": "2014-09-13T16:01:45Z", "dueOn": null, "number": 5, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 663, "url": "https://github.com/qunitjs/qunit/issues/663", "title": "Bring back assert.raises", "contents": "This is something that came up in #540. throws is problematic in some environments, which the raises alias avoids. We could just add assert.raises = assert['throws']; in the source and add a note about the alias in the documentation for throws. Very little effort to provide a simple workaround when throws can't be used.\nFor some history, #323 got rid of parsing errors due to QUnit using throws in the first place. The same workaround is still need to use the method in tests.\nIt would be useful to have a list of environments affected by this. From the PR linked above, I know of Closure Compiler and Narwhal. @jdalton do you know of others?", "createdAt": "2014-09-13T16:28:09Z", "updatedAt": "2014-10-06T20:41:36Z", "closedAt": "2014-10-06T20:41:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 11, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-09-13T17:03:32Z", "contents": "\ud83d\udc4d to APIs that don't use (formerly) reserved words.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-15T13:45:41Z", "contents": "shrugs Sure. It would be ideal for reducing confusion to only have 1 method name but I guess we can keep both.\nWhy did we move to throws from raises originally?  Just a more globally recognized meaning?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-09-15T14:11:29Z", "contents": "It was all #267, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-15T14:18:43Z", "contents": "Gotcha. Spec compliance strikes again!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-17T03:30:41Z", "contents": "+1 to bring back the raises method on 2.0.0+ if we state we won't care about CommonJS on throws anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:14:07Z", "contents": "Seems like we should just do this in v1.x, shouldn't we? Or is there some reason we shouldn't?\nMy general preference is exposing as much of the v2.x API in the last v1.x release as possible (especially replacements for any deprecated functionality, which this is not) so that upgrading is even easier to do early on, even if the underlying implementation changes dramatically in v2.x.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:24:49Z", "contents": "Yeah, let's do this in 1.16. CommonJS doesn't matter anyway.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T14:50:18Z", "contents": "I probably misread this issue, I believed we would rename throws to raises and make throws deprecated. Well, I prefer having only one method, making both existing as a temporary backwards compat.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T20:18:31Z", "contents": "I wrote on the original ticket:\n\nWe could just add assert.raises = assert['throws']; in the source and add a note about the alias in the documentation for throws. Very little effort to provide a simple workaround when throws can't be used.\n\nWas that so ambiguous? I still think this is a good approach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T22:26:10Z", "contents": "It wasn't ambiguous, that was my fault on misunderstanding what you've said and to not explain better what I wanted.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T22:26:43Z", "contents": "sorry for close/re-opening, clicked on the wrong button.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-support"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 664, "url": "https://github.com/qunitjs/qunit/issues/664", "title": "Collapse failed tests in HTML reporter", "contents": "Often when I have many failing tests I like to collapse the failed tests with something like\n$('.fail .qunit-assert-list').addClass('qunit-collapsed');\n\nThis let's me quickly scan and find the simplest failing tests that I should be working on first.\nIt would be great if this feature were officially added somewhere in the UI.", "createdAt": "2014-09-13T17:35:25Z", "updatedAt": "2018-03-14T11:16:42Z", "closedAt": "2015-10-08T00:48:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mmun", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "mmun", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "shivamdixit", "company": "Uber "}, {"login": "nlfurniss", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-14T05:13:27Z", "contents": "That sounds like a usecase we can optimize for, though I'd prefer a solution that doesn't require an extra button or similar. From that perspective, I'd like to better understand what you're doing.\nDo you use  \"Hide passed tests\"? Is there any metric to identify the \"simplest failing test\"?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmun", "authorAssociation": "NONE", "createdAt": "2014-09-14T05:41:43Z", "contents": "Thanks for taking the time to respond! :)\nYes, we have \"hide passed tests\" enabled by default in the Ember project.\nWe have thousands of tests and I'm doing some major refactoring now, so it's not uncommon for a few hundred tests to fail when I first break something. Typically I wait until all the tests are done, collapse them all, and quickly read through all the titles to figure out what the simplest tests are.\nIn Ember there is no well defined notion of a \"simple test\" and there are surely several alternative solutions than the one I proposed:\n\nUniformly tag our \"basic\" tests across all modules with [BASIC] or [UNIT] so we can easily apply ?filter=[BASIC]\nRun the tests only for the relevant modules at a time.\n\nThis is prohibitive because 1) we have hundreds of modules (and I don't think there's a way to group them into super-modules) and 2) it's not always easy to predict how far reaching your change will be. For these reasons, I prefer to just run all the tests and scan the titles to figure out what to fix next.\n\n\nDisplay modules in an accordian style UI that can be collapsed.\nAutocollapse the tests after a certain height / number of failures. This could be configurable like \"hide passed tests\".\nJust suck it up, it's not a huge deal after all :P", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-15T12:51:04Z", "contents": "This is prohibitive because... we have hundreds of modules (and I don't think there's a way to group them into super-modules)\n\nFunny you should mention that. \ud83d\ude09 Although there is some disagreement within the QUnit team about it, I am prototyping this now. Keep an eye on Issue #543 for updates and/or referential PRs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:33:52Z", "contents": "I wonder if it would help to collapse everything except the first failing test. In most cases of a single test failing, there wouldn't be any difference. Otherwise its still easy enough to open the interesting ones.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:39:41Z", "contents": "I wonder if it would help to collapse everything except the first failing test.\n\nI like this idea.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T15:39:19Z", "contents": "That seems like a reasonable compromise. Thoughts, @mmun?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmun", "authorAssociation": "NONE", "createdAt": "2014-09-25T16:14:18Z", "contents": "Works for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-08T06:46:14Z", "contents": "@leobalter Are you working on this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T15:44:55Z", "contents": "Work in progress: #769", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nlfurniss", "authorAssociation": "NONE", "createdAt": "2018-03-14T09:14:09Z", "contents": "@jzaefferer from #664 (comment): That sounds like a usecase we can optimize for, though I'd prefer a solution that doesn't require an extra button or similar.\nI'd also love to be able to see the stacktraces for all failing tests; could you be persuaded this is a good idea?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2018-03-14T11:16:42Z", "contents": "@nlfurniss please create a new issue with a bit more context and background. A 4 year old quote in a closed ticket is not enough to kick anything off.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 665, "url": "https://github.com/qunitjs/qunit/issues/665", "title": "Make QUnit.config.beforeEach/afterEach functions rather than setters", "contents": "As I discussed with the rest of the QUnit core team in Chicago, I think that QUnit.config.{beforeEach|afterEach} should be changed to be functions rather than setters.\nThis is beneficial in the following ways:\n\nAllows consumers to easily supply more than one beforeEach/afterEach callback.\nAllow plugins such as custom assertions that currently have to use hacky hooks via the QUnit.testStart/QUnit.testDone logging callbacks to achieve global beforeEach/afterEach behavior to get a proper extension point with access to the correct Test and Assert contexts rather than needing to rely on QUnit.config.current. Clear evidence of this can be seen in the JamesMGreene/qunit-assert-step @ qunit-assert-step.js#L21-L26.\nWill be required for API consistency-sake anyway [in v2.x] if my forthcoming PR proposal for Issue #543 (nested suites) is accepted.", "createdAt": "2014-09-16T15:53:47Z", "updatedAt": "2016-11-01T16:29:07Z", "closedAt": "2014-10-17T15:09:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 15, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-16T15:58:21Z", "contents": "P.S. I still also recommend that we move them to QUnit.beforeEach/QUnit.afterEach as well but that isn't a requirement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:10:36Z", "contents": "@jzaefferer @Krinkle @leobalter @scottgonzalez @gibson042 et al: Discussion needed here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:23:13Z", "contents": "Allows consumers to easily supply more than one beforeEach/afterEach callback\n\n\nThe motivation for having a setter was to force global setup/teardown code into a single location.\n\n\n[qunit-assert-step]\n\n\nThat's an interesting example, though it reminds me of the arguments for API changes to accomodate qunit-composite. I would like to find solutions for these, but I don't think they should have a high priority over general API usage.\nIn this particular case, a expectSteps(5) (or hijacking assert.expect) might avoid the issue.\n\n\n[nested suites]\n\n\nI still don't find the given examples convincing. But then I've never used a test framework with nesting myself. The one time I helped debugging something in a nested testsuite involved Jasmine and CoffeeScript and was more an issue of implicit scoping in CoffeeScript...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T16:01:03Z", "contents": "The motivation for having a setter was to force global setup/teardown code into a single location.\n\nAnd I agree to keep it as it is for this reason.\nNested suites can totally replace the need to have it with a different syntax.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T16:25:16Z", "contents": "[qunit-assert-step]\n\nThat's an interesting example, though it reminds me of the arguments for API changes to accomodate qunit-composite. I would like to find solutions for these, but I don't think they should have a high priority over general API usage.\n\nI think they're different arguments. The qunit-composite arguments were more of a nice-to-have/strawman upgrade, whereas the qunit-assert-step one is really a case of a custom assertion being forced to \"do things wrong\".\nHowever, I have since thought of at least one other workaround that actually feels more correct to me anyway: checking for this.test.steps === undefined and setting it to 0 during the first time assert.step is called in each test. Generally speaking, the inclusion of a custom assertion plugin shouldn't really be forcibly changing your test metadata unless it is actually also used within a test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T16:27:20Z", "contents": "@leobalter: Can you clarify this comment a bit?\n\nNested suites can totally replace the need to have it with a different syntax.\n\nI think it means that you're acknowledging that the future/potential nested suites feature may need to change this syntax/decision or add an additional mechanism.\nIf that's at least acknowledged, I'm OK with closing this for now, though I can guarantee that nested suites will require just such a mechanism. \ud83d\ude15", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T16:47:34Z", "contents": "IMO, with nested suites it won't be necessary to have the global before/afterEach hooks, so changing anything on them (global hooks) won't affect nested which seems to be the long and best sollution.\nThe global hooks are interesting while we don't have the nested hooks implemented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T16:53:55Z", "contents": "Right, I was just hoping to kill 2 birds with 1 stone by consolidating the associated beforeEach/afterEach APIs now instead of introducing another set of them (or consolidating them) later.\nThe way users choose to write their tests (linear modules vs. nested suites) would determine if the handlers they configure would operate on the global level or within suite contexts.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T16:19:03Z", "contents": "So can we close this or not?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T20:24:44Z", "contents": "I recommend reviewing the new PR #670 first as it leverages this concept.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T14:29:42Z", "contents": "I did just did. That's definitely helpful, but I still don't think we can have that block 1.16 / 2.0. In that regard, turning around again, I'd rather not ship the global hooks now (remove them in master), instead of having to deprecate them soonish.\nI suspect that the effort of removing them and bringing them back later is rather small, since we can keep the infrastructure changes we made.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-07T10:34:39Z", "contents": "@JamesMGreene @leobalter @Krinkle what do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-07T13:08:59Z", "contents": "I would recommend one of the following:\n\nWe compromise and change the global hooks to functions but still leave them on QUnit.config instead of QUnit.\nWe leave it as-is, don't document it, and mark it in the code as \"EXPERIMENTAL\". This allows folks like Ember to still leverage the feature now while acknowledging that it may change in the near future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-10-08T02:26:19Z", "contents": "They should either be properties in config for a single callback, or functions on QUnit (essentially becoming an item in an array of event handlers). Pick one :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-08T16:01:29Z", "contents": "We discussed this again during the meeting. Still have no consensus on the API. Will drop it for now to revisit it along with nested suites later.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement", "type-support"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 666, "url": "https://github.com/qunitjs/qunit/issues/666", "title": "Deprecate assert.expect?", "contents": "@Krinkle expressed an opinion that, with the assert.async() addition, we no longer need assert.expect() whatsoever.  At first I was a bit skeptical of this statement as I have grown into the habit of always using assert.expect() but I later realized he was correct.\nFor example, take this \"synchronous callback\" example from the Cookbook page:\nQUnit.test( \"a test\", function( assert ) {\n  assert.expect( 2 );   // `assert.` added\n\n  function calc( x, operation ) {\n    return operation( x );\n  }\n\n  var result = calc( 2, function( x ) {\n    assert.ok( true, \"calc() calls operation function\" );\n    return x * x;\n  });\n\n  assert.equal( result, 4, \"2 square equals 4\" );\n});\nWhile this setup can be effectively replaced with the assert.async() approach as well, I would argue that that is semantically invalid as the operation is intended to be synchronous (@Krinkle disagrees, FYI).\nHowever, there are still at least 2 other ways to easily test this without using assert.expect, as @Krinkle demonstrated in a gist:\nSimple call counter:\nQUnit.test( \"a test\", function( assert ) {\n  var calls = 0;\n\n  function calc( x, operation ) {\n    return operation( x );\n  }\n\n  var result = calc( 2, function( x ) {\n    calls++;\n    return x * x;\n  });\n\n  assert.equal( result, 4, \"2 square equals 4\" );\n  assert.equal( calls, 1, \"calc() calls operation function\" );\n});\nSinon spies:\nQUnit.test( \"a test\", function( assert ) {\n  var multiply = sinon.spy(function( x ) {\n    return x * x;\n  });\n\n  function calc( x, operation ) {\n    return operation( x );\n  }\n\n  var result = calc( 2, multiply );\n\n  assert.equal( result, 4, \"2 square equals 4\" );\n  assert.equal( multiply.callCount, 1, \"calc() calls operation function\" );\n});\n@jzaefferer @leobalter @gibson042 @scottgonzalez et al: Thoughts? Do you see any other use cases were assert.expect is important to keep around? Does it provide enough convenience over the two alternative approaches above that we should keep it around anyway?", "createdAt": "2014-09-17T18:44:19Z", "updatedAt": "2014-11-06T16:26:39Z", "closedAt": "2014-09-24T16:01:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 20, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-17T19:20:13Z", "contents": "Tracking call counts manually (even through a spy) seems really annoying if you actually care about this beyond the setup of a spy/mock object.\nI'm not sure how async tests avoid the need to define the expectation though. Consider the following:\nassert.expect( 2 );\nvar done = assert.async();\n$( \"<div>\" ).dialog({\n    create: function() {\n        assert.ok( true, \"Create was invoked\" );\n    },\n    open: function() {\n        assert.ok( true, \"Open was invoked\" );\n        done();\n    }\n});\nWithout the expectation, how do you know if create was called? You can certainly track it manually, but I'm not sure how making this type of testing more verbose improves anything.\nAs for synchronous tests, here's another example:\nassert.expect( 4 );\nvar headers = element.find( \".foo-headers\" );\nheaders.each(function() {\n    assert.equal( this.whatever, ... );\n});\nThe above implicitly expects 4 headers to be found. The verification is done through the expectation. This can be rewritten as:\nvar headers = element.find( \".foo-headers\" );\nassert.equal( headers.length, 4, \"Correct number of headers found\" );\nheaders.each(...);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-17T21:11:13Z", "contents": "I would probably rewrite the first example using JamesMGreene/qunit-assert-step:\nvar done = assert.async();\n$( \"<div>\" ).dialog({\n    create: function() {\n        assert.step( 1, \"Create was invoked\" );\n    },\n    open: function() {\n        assert.step( 2, \"Open was invoked\" );\n        done();\n    }\n});\nFor the latter example, I think its second implementation is far superior because it is both semantically correct and explicit about the details of its assertions.\nThe implicit form has bitten me many times before, particularly if I have an existing looping assertion + an expect call that implicitly checks the array length. Then I make changes to the code, add 1 assertion to the test outside of the loop but forget to update the expect count. Surprise! The test still passes because I unintentionally changed the length of the array via my code changes. Too bad I probably won't notice the bug for a while because of my overly presumptuous use of expect.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-09-18T02:33:30Z", "contents": "I agree with @JamesMGreene about preferring the explicit assertions, whether through qunit-assert-step or spies or even simple manual counters.\nIt's also worth noting that the too-simple expect has nasty interactions with beforeEach and afterEach, and would probably make more sense as expectMore anyway.\nIn the end, though, expect seems mostly to support a false sense of confidence. While I do like the convenience it can offer on occasion, I think it's caused about as much harm as good.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2014-09-18T13:06:01Z", "contents": "Another thought: exposing assert.test.assertions.length would make implementing an ad-hoc and correctly-scoped meta-assertion much less verbose (i.e., only one line more than expect):\nvar done = assert.async(),\n    initialCount = assert.count();\n$( \"<div>\" ).dialog({\n    create: function() {\n        assert.ok( true, \"Create was invoked\" );\n    },\n    open: function() {\n        assert.ok( true, \"Open was invoked\" );\n        assert.equal( assert.count() - initialCount, 2, \"Correct assertion count\" );\n        done();\n    }\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-18T13:50:44Z", "contents": "I agree that something like assert.count() would be more useful as it allows you to inspect point-in-time metadata rather than end-of-test metadata.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-21T05:23:46Z", "contents": "@jzaefferer @Krinkle @leobalter: Weigh in?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-09-21T20:49:16Z", "contents": "@scottgonzalez\n\nassert.expect( 2 );\nvar done = assert.async();\n$( \"<div>\" ).dialog({\n    create: function() {\n        assert.ok( true, \"Create was invoked\" );\n    },\n    open: function() {\n        assert.ok( true, \"Open was invoked\" );\n        done();\n    }\n});\nWithout the expectation, how do you know if create was called?\n\nI know this pattern is common, but in my opinion this is a poor quality assertion. Aside from following asynchronous flow, there should never be assertions outside the directly body of the test function. Execute source code, then make assertions, don't nest them like that.\nThere's quite a few different approaches one could take that are more semantically correct from a testing point of view.\ntest('dialog - bool', function (assert) {\n  var created, opened;\n  $('<div>').dialog({\n    create: function () {\n      created = true;\n    },\n    open: function () {\n      opened = true;\n    }\n  });\n  assert.ok(created1, 'create');\n  assert.ok(opened, 'create');\n});\nThe plain boolean assertion works, but is not very strict (doesn't care about execution order or whether callbacks are intentionally or accidentally invoked multiple times).\ntest('dialog - count', function (assert) {\n  var created = 0, opened = 0;\n  $('<div>').dialog({\n    create: function () {\n      created++;\n    },\n    open: function () {\n      opened++;\n    }\n  });\n  assert.equal(created, 1, 'create');\n  assert.equal(opened, 1, 'create');\n});\nThe counter approach is more strict (guards against unexpected executions), but is a bit verbose and tedious to maintain and setup.\ntest('dialog - flow', function (assert) {\n  var flow = [];\n  $('<div>').dialog({\n    create: function () {\n      flow.push('create');\n    },\n    open: function () {\n      flow.push('open');\n    }\n  });\n  assert.deepEqual(\n    flow,\n    ['create', 'open'],\n    'callback flow'\n  );\n});\nThe flow approach is my personal favourite and recommendation. It doesn't feel like a workaround and has minimal overhead and boilerplate. It strictly asserts the execution order and will notice any unexpected executions. It scales easily when you add more complexity.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T05:54:03Z", "contents": "There're now many points on this discussion\n\nassert.expect: I agree it should be deprecated now that we offer more control on async tests with assert.async. Like @JamesMGreene, I was skeptical at first but it makes sense.\nassert.step is good but doesn't look it's meant for unit tests, maybe functional. I prefer to have it as a plugin.\nasser.count: we can make this through scoped variables.\nI agree partially with @Krinkle on @scottgonzalez's example, but I don't agree with it on async situations. Supposing that the $('<div>').dialog method is async, it would be ok to have the assertions on it's callback. Better with promise like methods.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T06:20:09Z", "contents": "about the async example, I've remembering of this on our current tests and it should properly on the .dialog exemple with async functionality.\nvar done1 = assert.async();\nvar done2 = assert.async();\nsetTimeout(function() {\n  assert.ok( true, \"test resumed from async operation 1\" );\n  done1();\n}, 500 );\nsetTimeout(function() {\n  assert.ok( true, \"test resumed from async operation 2\" );\n  done2();\n}, 150);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T12:59:39Z", "contents": "@Krinkle the \"flow array\" approach looks good for synchronous tests, but Scott's example was about asynchronous tests. How would you implement that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:08:25Z", "contents": "You'd do it with 2 assert.async() trackers like in the example @leobalter copied from the v1.16.0 Cookbook/API docs in his previous comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:13:28Z", "contents": "That example doesn't check the order of execution. In Scott's example, if open runs before create, only one assertion runs during the execution of the test, correctly failing the test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:19:00Z", "contents": "QUnit assert.step plugin + 2 assert.async trackers, then.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:20:14Z", "contents": "Removing an existing method in favour of adding a plugin for a common use case is not an improvement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:21:44Z", "contents": "Also, if we want to get technical, Scott's example does not guarantee verification of the order of execution.  It only verifies that one of the following occurs:\n\ncreate is called before open (execution order verified as intended, yay!)\ncreate and open are called in the same [synchronous] event loop iteration but open could be called before create and the test would still pass", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:25:29Z", "contents": "We can leave assert.expect intact if it is just too popular to remove but the way that most consumers use it is definitely an anti-pattern, IMHO.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-22T13:27:55Z", "contents": "create and open are called in the same [synchronous] event loop iteration but open could be called before create and the test would still pass\n\nSounds like a bug in QUnit if that's true. Once the done callback is invoked, no assertions should be allowed to occur.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:32:39Z", "contents": "Sounds like a bug in QUnit if that's true. Once the [final] done callback is invoked, no assertions should be allowed to occur.\n\nThat's never been a requirement to date, AFAIK. assert.async was just based on replacing the QUnit.start/QUnit.stop functionality in a more test-centric fashion but those operations always allowed for additional operations within the same event loop iteration.\nThe behavior you describe is what I would expect from something like a theoretical assert.done() (a la NodeUnit) but not necessarily from a callback like var done = assert.async(); /* ... */ done();\nIf we want to make it a requirement, that's fine [and now is the time to do it!], but we'll have to document that behavior very explicitly as it will definitely a potential gotcha for existing QUnit users.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:42:57Z", "contents": "Making Timo's example async:\ntest('dialog - flow', function (assert) {\n  var flow = [],\n    done = assert.async();\n  $('<div>').dialog({\n    create: function () {\n      flow.push('create');\n    },\n    open: function () {\n      flow.push('open');\n      assert.deepEqual(\n        flow,\n        ['create', 'open'],\n        'callback flow'\n      );\n      done();\n    }\n  });\n});\nThis can be extended to any number of callbacks, though I'm not sure how valuable that kind of test really would be.\n\nSounds like a bug in QUnit if that's true. Once the done callback is invoked, no assertions should be allowed to occur.\n\nIndeed. I've filed that as a separate ticket, #668", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T16:01:58Z", "contents": "We discussed this at the IRC meeting today. We're closing this, keeping assert.expect. We'll improve the documentation though, via jquery/api.qunitjs.com#87", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 668, "url": "https://github.com/qunitjs/qunit/issues/668", "title": "Fail assertions that run after done() is called", "contents": "This test currently passes no matter where the start() call is placed (verified with 1.14 and master):\ntest(\"x\", function() {\n    expect( 2 );\n    stop();\n    setTimeout(function() {\n        ok( true, \"y was invoked\" );\n    });\n    setTimeout(function() {\n        ok( true, \"z was invoked\" );\n        // would also work with the call being in the other timeout, or\n        // before this callback's preceding `ok` assertion\n        start();\n    });\n});\nThis came up in #666, where it was argued that it's fine as long as it is in the same event loop iteration. This shows that anything that runs before QUnit resumes execution is accepted. Which makes sense when looking at the relevant code.\nI consider this a bug, but considering the amount of existing testsuites a fix is likely to break, we should lang this in 2.0, where the failure message can be very explicit about the likely cause.", "createdAt": "2014-09-22T13:42:23Z", "updatedAt": "2016-11-01T16:29:07Z", "closedAt": "2014-11-06T11:52:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 8, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:47:06Z", "contents": "Yeah, this would break the crap out of existing test suites.  Not that it would be hard for them to fix but... yeah, yikes.\nI think it is OK to build this behavior into the assert.async() callbacks now in v1.16.x since that is new functionality but we should definitely not modify the behavior of QUnit.start() to work like this. We'll also need to provide a useful failure message to avoid too many \"gotcha\" issues being filed, and update the docs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T13:49:32Z", "contents": "I think it is OK to build this behavior into the assert.async() callbacks now in v1.16.x since that is new functionality\n\nLet's give that a try.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:06:52Z", "contents": "Just to clarify in case anyone missed the basic logic being asserted by this change....\nThese tests should pass:\nQUnit.test( \"sole `done` is called last\", function( assert ) {\n  var done = assert.async();\n  setTimeout(function() {\n    assert.ok( true, \"should pass if called before `done`\" );\n    done();\n  }, 50);\n});\n\nQUnit.test( \"multiple `done` calls, no assertions after final `done`\", function( assert ) {\n  var done1 = assert.async();\n  var done2 = assert.async();\n  setTimeout(function() {\n    done1();\n    assert.ok( true, \"should pass if called after this `done` but before final `done`\" );\n  }, 25);\n  setTimeout(function() {\n    assert.ok( true, \"should pass if called before final `done`\" );\n    done2();\n  }, 50);\n});\n\nQUnit.test( \"order of multiple `done` calls doesn't affect post-`done` assertions\", function( assert ) {\n  var done1 = assert.async();\n  var done2 = assert.async();\n  setTimeout(function() {\n    done2();\n    assert.ok( true, \"should pass if called after this `done` but before final `done`\" );\n  }, 25);\n  setTimeout(function() {\n    assert.ok( true, \"should pass if called before final `done`\" );\n    done1();\n  }, 50);\n});\nThese tests should fail:\nQUnit.test( \"sole `done` is called BEFORE passing assertion\", function( assert ) {\n  var done = assert.async();\n  setTimeout(function() {\n    done();\n\n    // FAIL!!!\n    assert.ok( true, \"should fail with a special `done`-related error message if called \" +\n      \"after `done` even if result is passing\" );\n  }, 50);\n});\n\nQUnit.test( \"sole `done` is called BEFORE failing assertion\", function( assert ) {\n  var done = assert.async();\n  setTimeout(function() {\n    done();\n\n    // FAIL!!!\n    assert.ok( false, \"should fail with a special `done`-related error message if called \" +\n      \"after `done` even if result is already failing\" );\n  }, 50);\n});\n\nQUnit.test( \"multiple `done` calls, final `done` is called BEFORE passing assertion\", function( assert ) {\n  var done1 = assert.async();\n  var done2 = assert.async();\n  setTimeout(function() {\n    done1();\n    assert.ok( true, \"should pass as this is not after the final `done`\" );\n  }, 25);\n  setTimeout(function() {\n    done2();\n\n    // FAIL!!!\n    assert.ok( true, \"should fail with a special `done`-related error message if called \" +\n      \"after final `done` even if result is passing\" );\n  }, 50);\n});\n\nQUnit.test( \"multiple `done` calls, final `done` is called BEFORE failing assertion\", function( assert ) {\n  var done1 = assert.async();\n  var done2 = assert.async();\n  setTimeout(function() {\n    done1();\n    assert.ok( true, \"should pass if called after this `done` but before final `done`\" );\n  }, 25);\n  setTimeout(function() {\n    done2();\n\n    // FAIL!!!\n    assert.ok( false, \"should fail with a special `done`-related error message if called \" +\n      \"after `done` even if result is already failing\" );\n  }, 50);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:35:36Z", "contents": "Just reminding we need to consider the many done = assert.async() in the test block. It should fail only when there's no expected done() remaining.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T14:44:16Z", "contents": "Correct, @leobalter.  I should've given better example tests... updated!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:33:06Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T20:38:39Z", "contents": "Important note: the tracking mechanism for this will need to be reset at the start of each of the following phases:\n\nQUnit.config.beforeEach\n{module}.beforeEach\n{testCallback}\n{module}.afterEach\nQUnit.config.afterEach\n\nThat makes this feel a little weirder but still manageable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T15:28:29Z", "contents": "For the record, this test case makes me pretty sad [as I wouldn't personally want this to fail]... but I guess it's an acceptable loss since it's easy enough to workaround. \ud83d\ude27\nConsider this pseudo-code since you don't have my module setup to make this test pass:\nQUnit.test( \"cannot allow assertions between first `done` call and second `assert.async` call\", function( assert ) {\n  var done1, done2,\n      _this = this;\n\n  assert.expect( 1 );\n  done1 = assert.async();\n  setTimeout(function() {\n    done1();\n\n    assert.throws(function() {\n\n      // FAIL!!! (with hack to force an Error to be thrown instead of a `pushFailure` call)\n      assert.ok( true, \"should fail with a special `done`-related error message if called \" +\n        \"after final `done` even if result is passing\" );\n\n      done2 = assert.async();\n      setTimeout(function() {\n        assert.ok( false, \"Should never reach this point anyway\" );\n        done2();\n      }, 13 );\n    }, _this.errorRegex );\n  }, 13 );\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 671, "url": "https://github.com/qunitjs/qunit/issues/671", "title": "Consider adding .npmignore file", "contents": "Hey,\nI am a happy user of your library, but as my project grows we have a lot of dependencies.\nWe could save a lot of space if you added .npmignore file to your project.\nI even found tool that can help you with it: https://github.com/inikulin/dmn\nThanks!", "createdAt": "2014-09-27T14:10:13Z", "updatedAt": "2014-10-03T14:04:15Z", "closedAt": "2014-10-02T20:23:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hakubo", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "hakubo", "company": "Wikia"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T01:50:05Z", "contents": "Beware that npm defers to Git configuration for a lot of this. Adding a .npmignore is discouraged unless it matches files not already ignored by npm or .gitignore.\nhttps://www.npmjs.org/doc/misc/npm-developers.html#keeping-files-out-of-your-package", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T20:23:35Z", "contents": "@hakubo we only install these files, via the files property in package.json:\n./node_modules/qunitjs:\n-rw-r--r--  1 jza  staff   1.6K Aug  8 17:57 LICENSE.txt\n-rw-r--r--  1 jza  staff   2.8K Aug  8 17:57 README.md\n-rw-r--r--  1 jza  staff   4.3K Oct  2 22:20 package.json\ndrwxr-xr-x  4 jza  staff   136B Oct  2 22:20 qunit\n\n./node_modules/qunitjs/qunit:\n-rw-r--r--  1 jza  staff   4.3K Aug  8 18:01 qunit.css\n-rw-r--r--  1 jza  staff    62K Aug  8 18:01 qunit.js\nYou might be talking about the qunit npm module, which doesn't specify files and has no .npmignore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hakubo", "authorAssociation": "NONE", "createdAt": "2014-10-03T08:50:42Z", "contents": "Thanks, my bad!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-03T14:04:15Z", "contents": "@hakubo: No worries, it is a widely unknown approach.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 672, "url": "https://github.com/qunitjs/qunit/issues/672", "title": "propEqual for TypedArrays (was deepEqual for TypeArrays)", "contents": "I've notice that qunit gives incorrect results when using typedArrays (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays).\nI think it will be a great improvement if it will let you compare standard array and typedarrays like for example:\nvar ta = new Uint8Array(4);\ndeepEqual(ta, [0, 0, 0, 0], \"Typed array and array equals\");\nI was checking the code and I guess one solution could be to change core.js, in the line when you know that the typeof is an object, and do something like:\n...\nif ( typeof obj === \"object\" ) {\n    if ( obj instanceof Int8Array ||\n        obj instanceof Uint8Array ||\n        obj instanceof Uint8ClampedArray ||\n        obj instanceof Int16Array ||\n        obj instanceof Uint16Array ||\n        obj instanceof Int32Array ||\n        obj instanceof Uint32Array ||\n        obj instanceof Float32Array ||\n        obj instanceof Float64Array ) {\n        return \"typedarray\";\n    }\n    return \"object\";\n}\nAnd then on equiv.js returns a new function for the new type.", "createdAt": "2014-09-29T18:24:38Z", "updatedAt": "2017-04-09T15:03:00Z", "closedAt": "2017-04-09T15:03:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fernandojsg", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "fernandojsg", "company": "Mozilla"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "shivamdixit", "company": "Uber "}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 11, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-09-30T11:43:35Z", "contents": "Note that the associated equiv function would basically be the existing \"array\" entry plus Array casts at the beginning, e.g.\nif ( typedArray1 && QUnit.objectType( typedArray1 ) === \"typedarray\" ) {\n  typedArray1 = Array.prototype.slice.call( typedArray1 );\n}\nif ( typedArray2 && QUnit.objectType( typedArray2 ) === \"typedarray\" ) {\n  typedArray2 = Array.prototype.slice.call( typedArray2 );\n}\n\n//\n// ...invoke the \"array\" equiv function\n//", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fernandojsg", "authorAssociation": "NONE", "createdAt": "2014-10-01T07:36:36Z", "contents": "Yes you're right. The thing is that usually when you compare float and double precision number you usually use a epsilon and I don't know if it could fit in here. Anyway your solution seems good enough to start working right now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T19:09:11Z", "contents": "@kile did you plan to do a pull request for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fernandojsg", "authorAssociation": "NONE", "createdAt": "2014-12-05T12:17:35Z", "contents": "@jzaefferer Ok, sorry for the delay I forgot about it :) I'll take a look and create a pull request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-08T05:53:00Z", "contents": "Hey @fernandojsg, are you still working on it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T15:45:42Z", "contents": "@shivamdixit I don't think they're still working on this, you're welcome to look into this and send a PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-16T11:22:58Z", "contents": "Considering that deepEqual generally takes the constructor into account (while propEqual doesn't), I wonder if we should actually leave deepEqual as-is and adjust propEqual instead to deal with this. Any opinions? Would be good to figure that out soon, since #783 provides a PR for the behaviour that was discussed so far.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-19T01:35:33Z", "contents": "I think it's a good idea to adjust propEqual instead of deepEqual.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:35:46Z", "contents": "@fernandojsg @leobalter @JamesMGreene any thoughts on the suggestion above?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T16:57:14Z", "contents": "leave deepEqual as-is and adjust propEqual\n\nseems good for consistency. Need to check any possible breaking change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T15:03:00Z", "contents": "Closing this in favor of discussion continuing in #1114.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 673, "url": "https://github.com/qunitjs/qunit/issues/673", "title": "QUnit and Sinon causes lib not to load", "contents": "So, I was making tests for an app that I'm developing, using QUnit and Sinon, but my tests all began to fail.\nIt was because one my libs, iScroll, was not found for my tests cases, even though in the application it was used normally.\nBasically, I was testing the render and load of several views, and I was instantiating iScroll on mostly of them\nAfter some brute force tests to try to discover why this library was not found (at first, I really thought that was a requirejs problem), I found that if I put a plain html with:\n    <script src=\"../test/libs/qunit.js\"></script>\n    <script src=\"../test/libs/sinon.js\"></script>\n    <script src=\"libs/iscroll/build/iscroll.js\"></script>\n\nIScroll function will be undefine.\nIf I do\n    <script src=\"libs/iscroll/build/iscroll.js\"></script>\n    <script src=\"../test/libs/qunit.js\"></script>\n    <script src=\"../test/libs/sinon.js\"></script>\n\nor\n    <script src=\"../test/libs/qunit.js\"></script>\n    <script src=\"libs/iscroll/build/iscroll.js\"></script>\n\nor\n    <script src=\"../test/libs/sinon.js\"></script>\n    <script src=\"libs/iscroll/build/iscroll.js\"></script>\n\nThe problem goes away, and IScroll is defined.\nThis is not a hard problem to find an workaround for, I could easily stub iScroll or something.\nBut why this could happen?", "createdAt": "2014-10-01T20:33:28Z", "updatedAt": "2014-10-02T18:46:10Z", "closedAt": "2014-10-02T11:27:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rafaelrabeloit", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "rafaelrabeloit", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T23:18:42Z", "contents": "There's no other QUnit+Sinon issue I know so far. I can also say there's no QUnit global conflicting to IScroll value.\nis your lib public? If so, send a link and I would try to understand what's conflicting there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T23:19:42Z", "contents": "That's a weird one!\nI would suggest ensuring you are using the latest versions of all 3 libraries. If the problem persists, however, I would strongly advise starting this bug with iScroll since that is the functionality that ends up broken.\nIf the fault turns out to be ours, we would happily look into it further.\nFWIW, I used iScroll ~2 years ago and we had peculiar issues with it all the time without Sinon or QUnit being involved.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T11:27:50Z", "contents": "It sounds like a code review of iScroll might be your best bet. I don't see anything here that we could fix, so I'm going to close this. The jQuery forum or StackOverflow might be a better place for this problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 674, "url": "https://github.com/qunitjs/qunit/issues/674", "title": "HTML reporter regression, output order depends on runtime order", "contents": "Check out this test page: http://jsbin.com/leyela/1/edit?html,output\nRun this once, everything is green. Then change the second expect call to a different number, rerun. B fails. Rerun, now B is listed first. Fix the test, rerun. B still listed first. Rerun, B back at the bottom.\nThis is broken since 1.15, in 1.14 it works fine: http://jsbin.com/beyude/1/edit", "createdAt": "2014-10-02T11:42:57Z", "updatedAt": "2014-12-01T18:42:30Z", "closedAt": "2014-12-01T18:42:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 12, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T11:59:41Z", "contents": "I'm confused.  I thought this was an intentional feature to rerun the failed tests first... why wouldn't the HTML Reporter show them in non-runtime order?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T12:02:00Z", "contents": "And, moreover, if it shouldn't show them in runtime order, what should it do with the result between the time that B runs and the time that B would run if it hadn't previously failed?  Not show anything, or continually reorder the display order until its \"normal\" spot comes up?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T12:35:07Z", "contents": "It should behave like it did in 1.14. The output should match the source order.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T15:56:36Z", "contents": "In 1.15 we detached the reporter which uses the QUnit logging methods to register the given tests.\nUsing that with the @0c925ae9 (independent testId replacing testNumber) the only issue I could expect to happen (rerunning tests) is solved.\nThe problem is: to fix that in the way we have the reporter, we need to make QUnit trigger an event with the registered tests, it might be in the QUnit.begin, with the details containing a list with the given tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T15:58:15Z", "contents": "Clarifying the reporter using the logging methods: we set the order based on the QUnit.testStart order, which is the same on 1.15 and 1.14", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T20:25:26Z", "contents": "So this is very similar to #662. Seems like providing a list of modules and tests in begin could address that issue. See also #472 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-11-12T23:00:00Z", "contents": "Today status: the rerun button is now protected, I've talked with some friends to get their feedback and that's the 3 options we imagined:\n\nDOM should reflect the same order QUnit execute the tests, this provides more fidelity for the devs the uses QUnit. Previously we've got this affected by the test number, but that's now fixed.\nThe reporter should present the tests in the same order they were declared, running the tests that failed first.\nthe reorder behaviour should not happen as the default, to allow this we should use QUnit.config.reorder = true; in the test suite. That would be interesting to help new developers making tests that depend to each other in a execution order and also to using async dependencies and environments. That said, this option should be complemented with the option 1.\n\nAs the rerun link/button is now fixed with the hash using, I vote for sticking with the option 1, followed by option 3 as an alternative.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-12T23:43:09Z", "contents": "I don't understand the advantage of option 1, yet. Can you elaborate?\nOn making rerun opt-in: That would be very similar to removing the feature. The effect is so subtle that no one would notice. I still think it's pretty valuable, even if few devs are aware of it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-11-13T16:13:48Z", "contents": "If QUnit reorder the tests by running first the ones those failed on the previous run, it's not bad to reflect it into the html reporter. Previously, one big issue was related to the testNumber on the \"rerun\" link, but that's fixed now with the testId.\n\nOn making rerun opt-in: That would be very similar to removing the feature. The effect is so subtle that no one would notice. I still think it's pretty valuable, even if few devs are aware of it.\n\nI'm sorry I wasn't able to get this, we might talking about different things.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-13T16:54:13Z", "contents": "Yeah, I think we need to talk about this elsewhere. I've reread your initial comment on rerun, but can't tell if I misunderstood you or not.\nSomewhat related, at least to test reordering: There's an issue with running tests in the specified order in jquery/jquery-ui#1335 - I'm wondering how important that order really is, which I think we're talking about here, too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-19T14:45:45Z", "contents": "We discussed this elsewhere. Agreed to keep the existing behaviour, so DOM order should reflect declaration, not execution order. We'll keep reordering enabled by default. We also came up with an idea for improving the reordering, captured in #693\nWe also discussed that fixing this issue likely requires outputting the list of all tests immediately, before any tests run. I think that will be useful as well, the current behaviour is rather arbitrary. It might also help understanding the rerun feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T02:13:59Z", "contents": "now to be fixed on #691", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 676, "url": "https://github.com/qunitjs/qunit/issues/676", "title": "assert.equal( 'foo', [ 'foo' ]) passes", "contents": "Apologies if this has already been raised, I couldn't find it. If you use assert.equal to compare a value to an array containing that value, the test passes! Surely this isn't intended behaviour?\nhttp://jsfiddle.net/rich_harris/f7f77w0h/", "createdAt": "2014-10-02T16:31:51Z", "updatedAt": "2014-10-02T18:42:55Z", "closedAt": "2014-10-02T16:40:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Rich-Harris", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Rich-Harris", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 5, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T16:40:44Z", "contents": "assert.equal is based on the JS equality check like ==.\nSo:\n'foo' == [ 'foo' ]; // true\n['foo'] == ['foo']; // false\nIf you want strict checks, you should use assert.strictEqual instead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Rich-Harris", "authorAssociation": "NONE", "createdAt": "2014-10-02T16:45:08Z", "contents": "Oh man, I didn't realise JavaScript was that terrible. Well I did, but not in that specific way. Thanks for the clarification.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T16:58:04Z", "contents": "There're some trick parts on the == comparisons and that's why is recommended to use === and also assert.strictEqual when the value might be very flexible.\nAlso:\n1 == true; // true\n'1' == true; // true\n'true' == true; // false\n[ true ] == true; // false", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T18:35:58Z", "contents": "Wow, I didn't know about that particular JS quirk either. That one is bizarre!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-02T18:41:50Z", "contents": "Ha, this has even more gems:\n\"foo,bar\" == [\"foo\", \"bar\"];  // true\nYay for JS string type coercion.  \ud83d\ude1c", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 677, "url": "https://github.com/qunitjs/qunit/issues/677", "title": "List modules and tests names on QUnit.begin", "contents": "Requisite for #674.\nThis is necessary to set the tests and modules order for loggings, specially our detached html reporter.\nRelates to #662 and #472", "createdAt": "2014-10-03T23:03:12Z", "updatedAt": "2014-12-01T18:42:30Z", "closedAt": "2014-12-01T18:42:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-07T10:35:51Z", "contents": "@leobalter will you have some time to implement this?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 683, "url": "https://github.com/qunitjs/qunit/issues/683", "title": "Qunit not finishing on Mac OS X", "contents": "Hi,\nI'm using ember-cli for my project. There we got some tests. For testing the existens of models we use for example:\nimport {test, moduleForModel} from 'ember-qunit';\n\nmoduleForModel('user', 'User', {\n  // Specify the other units that are required for this test.\n  needs: ['model:session', 'model:otherOne', 'model:billing']\n});\n\ntest('it exists', function() {\n  var model = this.subject();\n  // var store = this.store();\n  ok(model);\n});\nthen it runs all tests but stops at the last test and doesn't show the stats.\nwhen I change the needs line to:\n...\nneeds: ['model:session', 'model:otherOne']//, 'model:billing']\n...\nthen naturally the test fails. with this output\nnot ok 98 PhantomJS 1.9 - User: it exists\n    ---\n        actual: >\n            null\n        message: >\n            Died on test #1     at http://localhost:7357/assets/test-support.js:418\n                at test (http://localhost:7357/assets/test-support.js:284)\n                at :18\n                at http://localhost:7357/assets/vendor.js:77\n                at http://localhost:7357/assets/test-loader.js:14: No model was found for 'billing'\n        Log: >\n    ...\n\nAnd it also prints the stats correctly like this:\n1..101\n# tests 101\n# pass  100\n# fail  1\n\nWhat am I doing wrong?\nSeems to me that the helper doesn't get killed correctly.\nbtw: in the browser everything works great.", "createdAt": "2014-10-12T13:37:31Z", "updatedAt": "2016-11-01T16:29:07Z", "closedAt": "2014-10-12T14:06:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "spruce", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "spruce", "company": "piceaTech"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-12T14:06:42Z", "contents": "Please submit this issue to rwjblue/ember-qunit.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 684, "url": "https://github.com/qunitjs/qunit/issues/684", "title": "Module filter (select#qunit-modulefilter) not visible/in DOM", "contents": "The module filter (select#qunit-modulefilter) in the toolbar sometimes doesn't appear. I've experienced this after:\n\nLoading test files dynamically through RequireJS (with callbacks).\nWhen using QUnit.stop() and QUnit.start() several places, e.g. with Qunit.asyncTest() (where Qunit.stop() and QUnit.start() are necessary).\n\nOne fix could be to allow users to reload the toolbar once all tests have concluded:\nQUnit.reloadToolbar = function(){\n    var toolbar = id(\"qunit-testrunner-toolbar\");\n    if (toolbar) {\n        toolbar.parentNode.removeChild(toolbar);\n    }\n    var userAgent = id(\"qunit-userAgent\");\n    var toolbar = document.createElement('div');\n    toolbar.id = \"qunit-testrunner-toolbar\";\n    userAgent.parentNode.insertBefore(toolbar, userAgent);\n    appendToolbar();\n};\nvar whenTestsAreDone = function(){\n    QUnit.reloadToolbar();\n};", "createdAt": "2014-10-27T10:33:09Z", "updatedAt": "2014-11-06T16:02:23Z", "closedAt": "2014-11-06T11:55:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kafoso", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "kafoso", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-10-27T13:50:50Z", "contents": "What version of QUnit are you using?\nI'm guessing this would already be resolved by changes we've made in the master branch for the upcoming v1.16.0 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kafoso", "authorAssociation": "NONE", "createdAt": "2014-10-28T09:23:08Z", "contents": "Running 1.15.0. I'll check this again when 1.16.0 comes out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-29T21:14:25Z", "contents": "Waiting for the release means the issue might still be there, and you'd have to wait for another release. Since you haven't provided enough information to reproduce the issue, could you test with the git build? If the issue is still there, can you try to put together a test page that shows the issue?\nBtw. the module select isn't shown when there is only one module. Might help debug the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T11:55:55Z", "contents": "Closing until we get enough information to reproduce the issue. Or at least a confirmation that it still exists in master.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 685, "url": "https://github.com/qunitjs/qunit/issues/685", "title": "Various regressions", "contents": "In test/setTimeout.html, the suite finishes, but the second test is shown as still running.\nIn test/headless.html, the done log reports 6 failures, also shown in the document title. Which begs another question - should the document title be updated when the HTML reporter isn't used?\nIn test/stack.html, there are three unfinished tests. Might be intentional, but I can't tell. Looks wrong, like in the timeout test above.\n\nNeed to also make it easier to run these manually. Grunt/phantom doesn't run some of them at all, some errors are only apparent on visual inspection.\n@leobalter could you look into these?", "createdAt": "2014-11-06T11:23:05Z", "updatedAt": "2014-12-01T18:42:30Z", "closedAt": "2014-12-01T18:42:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-11-06T14:55:22Z", "contents": "I'm assiging this issue to myself so I can keep track of what I need to look at.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-11-11T16:21:13Z", "contents": "the problem in test/setTimeout.html occurs by the new attached testId (instead of the test number). I'm not sure how to solve that, but I'm investigating.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-19T12:48:48Z", "contents": "Both tests have the same name, so they end up with the same ID. Maybe the way to fix this is to throw an error when two tests in the same module have the same name? That would make it obvious that there is going to be an issue. The solution is then to rename tests to be unique, within a module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-11-19T13:51:15Z", "contents": "Throwing errors on two tests in the same module with the same name might be retro incompatible and we should do this for 2+, meanwhile, leobalter@9803219#diff-f6c2ded91c9881cdc31b5bfcabb54c3bR14 solves the repetition problem to generate different testIds.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 688, "url": "https://github.com/qunitjs/qunit/issues/688", "title": "Need to deep-copy test environment to keep tests atomic", "contents": "The third usage example here doesn't work: http://api.qunitjs.com/QUnit.module/\nThe first test adds a property to this.parts, which is still there in the second test, since the parts array isn't deep-copied. The test mentioned in #477 verifies that behaviour, but its wrong, which is why I'm removing those tests in #687.\nThere's another issue with that example, see qunitjs/api#90\nTo fix this, we should deep-copy the test environment properties.", "createdAt": "2014-11-06T13:24:51Z", "updatedAt": "2014-12-01T18:36:31Z", "closedAt": "2014-12-01T18:36:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 689, "url": "https://github.com/qunitjs/qunit/issues/689", "title": "Adjust stack trace to include line numbers in front of URLs (or wrap stack output in CSS).", "contents": "I'm not sure this warrants inclusion into core, but I thought I should ask. If it does, I am happy to send you a pull request.\nThe issue I am experiencing:\n\nI am testing using qunit and phantomJS headless browser (w/capybara+poltergeist driving it)\nWhen a qunit test error occurs, the only way I can get a look at the error message (the entire qunit page) is by getting a print screen of the page from phantomjs - I can't view the actual html\nThis is an issue because, when testing very long URLs, I cannot see the line number where the qunit test failed:\n\nThe headless browser has a finite window width, the screen print cuts off long URLs. The CSS of the qunit page does not line break the stack output.\n\n\n\nI wrote a personal patch to fix this, simply by moving the line number in front of the URL in the output.\nMy fix is to simply add two lines above this line:\nhttps://github.com/jquery/qunit/blob/f2d790683682607f48ad97473499c823f8635c28/src/core.js#L499\nvar regex = /^(.*)(https{0,1}:\\/\\/.*):(\\d+)$/;\nstack[i] = stack[i].replace(regex, \"$1$3:$2\");\n\nThe main reason not to include this, I think, is that some people might be relying on the exact formatting of these stack outputs?\nThe other alternative to fixing this issue for headless users like me, would be to adjust the CSS on the output page to wrap the output of these lines rather than have them scroll off the edge of the screen. My css/html skills are pretty bad so I'm not sure I can figure out how to do that. Any tips/direction on that solution would be great - I'd be happy to try to implement that with a little guidance, alternatively.", "createdAt": "2014-11-09T06:29:37Z", "updatedAt": "2014-11-18T18:28:00Z", "closedAt": "2014-11-18T18:28:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "science", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "science", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-18T15:29:37Z", "contents": "Stacktrace formatting isn't consistent across browsers, I'd rather not mess that up further. Wrapping long lines seems fine, though since stacktrace lines have no spaces, that may not work well with CSS either.\nHopefully someone has a better idea.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "science", "authorAssociation": "NONE", "createdAt": "2014-11-18T18:28:00Z", "contents": "Good point - of course browsers are going to display stack traces differently. I'll close this for now. If I figure out how to wrap long lines I'll send you a pull request. Otherwise this ticket can maybe help others who might have the same problem, via my limited solution above. Note my solution was only tested in Chrome..", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 690, "url": "https://github.com/qunitjs/qunit/issues/690", "title": "rename tag \"1.15.0\" to \"v1.15.0\"", "contents": "initially thought \"v1.14.0\" was the latest (as its listed on top in github), but when following documentation and setting up tests, the latest documentation does not mach \"v1.14.0\" .. tag \"1.15.0\" needs to be renamed to \"v1.15.0\" which is the latest and matches documentation.", "createdAt": "2014-11-09T21:37:19Z", "updatedAt": "2014-12-01T17:42:07Z", "closedAt": "2014-12-01T17:42:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "farinspace", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "farinspace", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 10, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-18T15:31:38Z", "contents": "Where did you fine v1.14.0 listed on top? Both https://github.com/jquery/qunit/releases and https://github.com/jquery/qunit/tags list 1.15.0 on top.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "farinspace", "authorAssociation": "NONE", "createdAt": "2014-11-18T16:30:09Z", "contents": "This is in the branches and tags pulldown found on the upper left, used to jump between branches/tags.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-11-18T17:48:12Z", "contents": "<img width=443\" src=\"https://cloud.githubusercontent.com/assets/156867/5092898/e2f0fcf8-6f4a-11e4-9fe0-66240d497a7c.png\"/>", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-11-19T16:11:12Z", "contents": "Okay, thanks, missed that one.\nI think the issue was introduced when switching to jquery-release, which tags without the \"v\" prefix. Tagging every future release twice seems ugly. We could delete the v-prefixed tags, but since every fork has them, they're coming back in local checkouts whenever fetching a remote (I think, not quite sure).\n@scottgonzalez any thoughts on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-19T18:59:47Z", "contents": "I don't think we should do anything.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-11-19T19:44:47Z", "contents": "@jzaefferer\n\nWe could delete the v-prefixed tags, but since every fork has them, they're coming back in local checkouts whenever fetching a remote (I think, not quite sure).\n\nThey'd only come back for you locally. And your own fork can be easily updated (delete on GitHub, re-fork, local clone doesn't need changing, maybe re-push some of your branches). I think we should delete the odd ones jquery/qunit.\n@scottgonzalez Would there be room for reconsidering having jquery-release prefix tags for released versions with v?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-19T23:35:07Z", "contents": "Would there be room for reconsidering having jquery-release prefix tags for released versions with v?\n\nI don't think we'd want to do that just to account for a single project that has older tags using the prefix. jquery-release was based on other projects like jQuery UI and jQuery Core which have never prefixed the tags.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2014-11-19T23:57:34Z", "contents": "@scottgonzalez\n\nI don't think we'd want to do that just to account for a single project that has older tags using the prefix.\n\nOf course not \ud83d\ude09 I meant in general, not for the sake of a sorting issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-11-25T17:10:20Z", "contents": "Or we could make it configurable...?  Personally, I prefer the v prefix  on tags but I know it doesn't really add anything of value, per se.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T17:42:07Z", "contents": "I don't think we should do anything.\n\nI've updated the \"Releases\" to use the non-prefixed tags, otherwise I agree with Scott. That tags menu is unfortunate, but deleting tags might also cause issues and I think we're fine without prefixing going forward.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 693, "url": "https://github.com/qunitjs/qunit/issues/693", "title": "Make it more obvious why test execution order changes", "contents": "When QUnit.config.reorder is enabled and previously failed tests run first, we should show \"Rerunning failed tests:\" or something like that in the summary of the HTML reporter, replacing the default \"Running tests:\". This text will also be readable when async tests take long enough or the testrunner stops. In the context of confusion about non-atomic tests suddenly failing, this may still help.", "createdAt": "2014-11-19T14:44:33Z", "updatedAt": "2015-04-03T10:21:56Z", "closedAt": "2015-03-16T11:27:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 694, "url": "https://github.com/qunitjs/qunit/issues/694", "title": "Can we get a release?", "contents": "https://github.com/jquery/qunit/blob/2e994be16587f2525b4e4225a6d83c2806757cba/src/core.js#L524-L533 + built in promise support would be killer..", "createdAt": "2014-11-25T02:33:52Z", "updatedAt": "2014-12-11T16:08:41Z", "closedAt": "2014-12-01T01:23:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "stefanpenner", "company": "@LinkedIn"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T01:23:54Z", "contents": "Soon, working on the remaining issues of this milestone: https://github.com/jquery/qunit/milestones/pre-2.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-11T16:08:41Z", "contents": "Btw. 1.16.0 is out", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 695, "url": "https://github.com/qunitjs/qunit/issues/695", "title": "Add first year to copyright note in addition to the current year", "contents": "The copyright note for QUnit should contain the first year for the copyright in addition to the current year, see https://github.com/jquery/foundation/issues/337", "createdAt": "2014-11-26T14:02:51Z", "updatedAt": "2014-12-01T18:09:52Z", "closedAt": "2014-12-01T18:09:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "agcolom", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "agcolom", "company": "University of Westminster"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 696, "url": "https://github.com/qunitjs/qunit/issues/696", "title": "Fix long-running tests in our testsuite", "contents": "This is about our own testsuite. There are several tests that, on my machine, take more than 250ms to run. Whatever they're doing, I don't think we need long timeouts like that. Optimizing those tests could shave off more than a second of the 3s runtime.", "createdAt": "2014-12-01T01:13:48Z", "updatedAt": "2018-12-22T20:32:02Z", "closedAt": "2014-12-01T18:23:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 697, "url": "https://github.com/qunitjs/qunit/issues/697", "title": "Restore QUnit.reset", "contents": "In #617 we decided to revert QUnit.reset back to \"core\". This issue is for that revert, while we still need to implement something better to address #617.", "createdAt": "2014-12-01T17:14:51Z", "updatedAt": "2014-12-01T18:22:53Z", "closedAt": "2014-12-01T18:22:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lNTY4OTYz", "title": "pre-2.0", "description": "", "createdAt": "2014-02-13T22:46:42Z", "dueOn": null, "number": 4, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 703, "url": "https://github.com/qunitjs/qunit/issues/703", "title": "test/headless.html regression", "contents": "Leftover from #685:\nIn test/headless.html, the done log reports 6 failures, also shown in the document title. Which begs another question - should the document title be updated when the HTML reporter isn't used?\nAt least one of these is caused by the fixture test also accessing #qunit-testresult. We can probably just drop that assertion, it has nothing to do with testing fixtures.", "createdAt": "2014-12-01T18:43:53Z", "updatedAt": "2014-12-01T19:17:06Z", "closedAt": "2014-12-01T19:17:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T18:51:15Z", "contents": "it has nothing to do with testing fixtures.\n\nhttps://github.com/jquery/qunit/blob/master/test/test.js#L50-L80 and https://github.com/jquery/qunit/blob/master/test/test.js#L99-L110\nThey're related to the html reporter and the last one makes a wrong reference to the fixture.\n\nThe document.title is intentionally modified by default if present.\nRef: https://github.com/jquery/qunit/blob/master/reporter/html.js#L488", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T18:53:05Z", "contents": "we should move the html reporter tests to a separate file.\nI believe the document.title part shouldn't be modified, as it is modified only if it's present and if config.altertitle is not set to false.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T19:04:16Z", "contents": "Agreed to both. Separate file that we don't include in the headless test and we'll leave config.altertitle alone.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 706, "url": "https://github.com/qunitjs/qunit/issues/706", "title": "Show source location of passed tests", "contents": "Every now and then I'm looking at a green suite and want to know where the source for a specific test is located. We capture that information already, for all tests, but only output it when a test fails. We could always output for non-collapsed tests, or only for non-collapsed passing tests (since failing tests will output it already in some way).", "createdAt": "2014-12-01T21:02:47Z", "updatedAt": "2015-10-20T19:42:54Z", "closedAt": "2015-05-18T15:34:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "sambuddhabasu", "company": "Google"}, {"login": "shivamdixit", "company": "Uber "}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T22:23:54Z", "contents": "By the passing tests you mean print the source location for each passed assertion, right?\nWith the global assertions, the test might not be enough for this. A assertion location is more precise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T09:10:17Z", "contents": "No, I meant test. We already capture that information, so would just have to output it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sambuddhabasu", "authorAssociation": "NONE", "createdAt": "2015-03-08T18:00:57Z", "contents": "I would like to work on this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-09T01:05:38Z", "contents": "Hey Sambuddha, I think @gauravmittal1995 has already worked on the issue.\nRefer #758", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sambuddhabasu", "authorAssociation": "NONE", "createdAt": "2015-03-09T02:46:46Z", "contents": "Thanks for pointing that out @shivamdixit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:34:56Z", "contents": "This has been addressed in 9498355 (didn't include a ticket reference)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 707, "url": "https://github.com/qunitjs/qunit/issues/707", "title": "Discussion: Move to es6 modules to build QUnit", "contents": "We should consider using es6 modules to build QUnit, moving from source concatenation to a standard format. The biggest issue with transpiling to es6 are dependencies, but since QUnit bundles its dependencies anyway, we don't have to care about that. There shouldn't be a difference for users either, since the built files would look mostly the same as they do now.  If that works out, we could also use other es6 features in the QUnit source.\nCurrently our tests don't need a build step, which we may want to keep. If compilation is fast enough, we could move those to es6 as well, if there are obvious benefits.\nSome background and examples: https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0 (which mostly uses a transpiler and browserify, not exactly what we'd want)", "createdAt": "2014-12-04T11:42:23Z", "updatedAt": "2018-12-22T20:32:40Z", "closedAt": "2016-08-05T18:12:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 8, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "mikesherov", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 20, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:22:18Z", "contents": "I would love to try this. The Ember team is well versed in ES6 as well, if we need any experienced help/advice/tips.\nAny overall direction from the organization, @scottgonzalez?  Seems like all of the other jQuery projects are all still rallying around AMD for modular building, though I think it would beneficial if the QUnit team in particular (as changes here have no/lesser impact on end users) becomes the testing ground for ES6 usage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:32:09Z", "contents": "This would be quite useful. I'd like Core to switch to ES6 modules (if not now, then preferably soon) and transpile to AMD (and CommonJS?) to not break current use cases.\nExperience with QUnit experience with using ES6 modules would surely help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-04T14:37:48Z", "contents": "Any overall direction from the organization, @scottgonzalez?\n\njQuery Foundation doesn't prescribe technical implementation, we leave that up to the individual project teams, so there's no organizational red tape here. I think my personal view on these types of issues has been pretty clear over the years. I am always in favor of standards (even future/evolving standards) over custom solutions, so I've been in favor of ES6 over AMD since day one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:45:05Z", "contents": "\ud83d\udc4d @mzgol and @scottgonzalez", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:48:43Z", "contents": "@stefanpenner do you have some input on this? Recommendations for tooling? As written above, we want to use ES6 modules to build QUnit, without any changes to what we expose to the user (still just a global).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:55:55Z", "contents": "And with the slightly special consideration that QUnit is still agreeing to support IE6+, so we will need to continue transpiling down to ES3 syntax.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T14:57:07Z", "contents": "And with the slightly special consideration that QUnit is still agreeing to support IE6+, so we will need to continue transpiling down to ES3 syntax.\n\n...unless QUnit v2.x will be IE9+ like jQuery v2.x, so we would only need to transpile to ES5.1 syntax? \ud83d\ude09 \ud83d\ude4f", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:01:00Z", "contents": "jQuery Compat 3.0 should be our new target, I'm not sure which browsers exactly that's going to support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:01:32Z", "contents": "And with the slightly special consideration that QUnit is still agreeing to support IE6+\n\njQuery Compat will now support IE8+ only, IE6-7 are dropped completely; the same with Safari<6.0, Opera<15 etc.\nPR: jquery/jquery#1837\nNot that it has to affect QUnit in any way. It's just Core doesn't need QUnit supporting IE<8 anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:03:12Z", "contents": "jQuery Compat 3.0 should be our new target, I'm not sure which browsers exactly that's going to support.\n\nThis is very important to define before taking a modules decision.\nI also repeat what @scottgonzalez said: I am always in favor of standards (even future/evolving standards) over custom solutions.\n\nFor reference: https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0\nFrom the options we have today, my preferred is the ES6 Module transpiler but we also have the 6to5, which accept more es6 stuff.\nI've been using the module transpiler in an Ember project and it's being great so far.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:07:21Z", "contents": "@leobalter\n\n\njQuery Compat 3.0 should be our new target, I'm not sure which browsers exactly that's going to support.\n\nThis is very important to define before taking a modules decision.\n\nThe plan is to start from http://jquery.com/browser-support/ and remove IE6-7, Opera 12.1x and Safari<6.0. We might also start testing on Windows Phone now that BrowserStack has made it available.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:13:51Z", "contents": "Regarding you PR on Core, seems that we may already take these changes as the ones defined for 3.x compat, right?\nThat gives us a reference on where to go and what can be used.\nI'll try to make a build with the es6 module transpiler and run tests at BrowserStack.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:16:55Z", "contents": "Regarding you PR on Core, seems that we may already take these changes as the ones defined for 3.x compat, right?\n\nYes, the Core team decided to drop the browser versions I mentioned. The Windows Phone remark was my personal one, we haven't discussed it yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:47:02Z", "contents": "This should use https://www.npmjs.com/package/rollup for the bundling.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-10-18T02:46:37Z", "contents": "Why not just switch wholesale to Babel?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-10-18T03:47:00Z", "contents": "There's still a question of bundling. Babel can transpile ES6 modules to SystemJS, AMD or CommonJS but you still need to somehow bundle it all up and it's better to choose a method that doesn't introduce a lot of overhead. rollup seems to gain momentum now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikesherov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-12T12:52:56Z", "contents": "At Behance, we use es6, with karma, Babel, and webpack to run our test suite.\nNot sure if QUnit is architected in a way to allow preloaders for code, but perhaps that's where you start:\n\nbuilding infra that allows QUnit to use webpack + Babel or even Babel directly when loading test suites.\nUse that infra to begin authoring QUnit and its test suite in ES6.\nRelease both.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikesherov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-12T12:53:28Z", "contents": "Why rollup over webpack?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikesherov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-19T11:46:58Z", "contents": "FYI, webpack has a decent comparison chart of all the different options: https://webpack.github.io/docs/comparison.html\nThey're the only one who followed @scottgonzalez's recommendation that \"if you're going to exist, have a comparison chart explaining why you're existence is necessary\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-20T05:43:09Z", "contents": "I'm planning to pursue actually doing this. After looking at webpack and rollup (and some others), I'm going to explore using rollup as I think it most closely fits our current setup.\nIt looks like it'll probably be a large amount of work to get everything setup to work as modules because even though src is split up into files, they don't really act like modules with boundaries right now.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 708, "url": "https://github.com/qunitjs/qunit/issues/708", "title": "ReferenceError: Faye is not defined", "contents": "I have been using faye in my Emberjs application and seems to work fine as expected. But my test (qunit) suite crashes with faye is not defined.\nLink to Stack question", "createdAt": "2014-12-04T15:14:37Z", "updatedAt": "2014-12-04T15:43:27Z", "closedAt": "2014-12-04T15:25:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chetang", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "chetang", "company": "Liquidibles"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:25:33Z", "contents": "You said - in the Stack Overflow - you're getting the error in this line:\nclient = new Faye.Client(uri);\nWhere Faye is not defined, but it's being compiled to the vendor.js file.\nDo you test files load the vendor.js or Faye at all? You can at least try to log Faye value before that line, if it's undefined, you might need to require it before.\n\nSo far, this is not a QUnit bug, which seems to behavior accordingly. I'm closing this issue, but feel free to talk with me on irc or even here if there is anything else I might try to help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T15:43:27Z", "contents": "PS: Without a testpage that reproduces the issue its difficult to help you, here or anywhere else.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 712, "url": "https://github.com/qunitjs/qunit/issues/712", "title": "HTML reporter mishandles skipped tests", "contents": "The HTML reporter gets a couple of small things wrong with skipped tests, resulting in their suppression by \"hide passed\" and their invisibility when not autorun: http://jsfiddle.net/85rw2Lr3/", "createdAt": "2014-12-09T03:11:13Z", "updatedAt": "2014-12-09T17:43:31Z", "closedAt": "2014-12-09T17:43:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 716, "url": "https://github.com/qunitjs/qunit/issues/716", "title": "Uncaught TypeError: Cannot set property 'innerHTML' of null at qunit:2638", "contents": "I've just updated from 1.15 to 1.16 and one of my tests fail with:\nUncaught TypeError: Cannot set property 'innerHTML' of null at qunit.js:2638\nAt line 2638 in qunit.js I see:\nif ( tests ) {\n  id( \"qunit-testresult\" ).innerHTML = html;\n}\nUntil now I've used markup template like:\n<body>\n    <h1 id=\"qunit-header\">Wicket Ajax tests</h1>\n    <h2 id=\"qunit-banner\"></h2>\n    <div id=\"qunit-testrunner-toolbar\"></div>\n    <h2 id=\"qunit-userAgent\"></h2>\n    <ol id=\"qunit-tests\"></ol>\n       <div id=\"qunit-fixture\"></div>\nLooking at http://qunitjs.com/ I see that now the template should be just:\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\nThis fixed my test !\nProblem 1) I didn't see a HEADS UP about this change in a minor release\nProblem 2) Now the header says \"All tests\". Is there a way to use \"Wicket Ajax tests\" as before ?\nProblem 3) The qunit-header is no more a link. qunit-banner contains a link but it is not clickable because it doesn't have text child element:\n<h2 id=\"qunit-banner\" class=\"qunit-pass\"><a href=\"http://localhost/ajax-tests/test/js/all.html\"></a> </h2>", "createdAt": "2014-12-11T09:17:22Z", "updatedAt": "2016-11-01T16:29:08Z", "closedAt": "2015-01-19T11:03:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "martin-g", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "martin-g", "company": "@apache "}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-11T10:44:40Z", "contents": "Thanks for reporting these!\nThe old markup is still supported (until 2.0), this is a regression. We should add that to the migration guide though.\nAs for the header, update your <title> element, that's what QUnit uses to create the #qunit-header element.\nThe header link is broken, need to fix that. Will probably put fixes for these in a 1.16.1 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T18:14:20Z", "contents": "Problem 3) The qunit-header is no more a link. qunit-banner contains a link but it is not clickable because it doesn't have text child element:\n\nTurns out this was actually broken in 1.15.0 as well, so I'm guessing you actually upgraded from 1.14.0 to 1.16.0...?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T18:18:30Z", "contents": "PR #727 submitted for review.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "martin-g", "authorAssociation": "NONE", "createdAt": "2015-01-14T20:26:39Z", "contents": "Turns out this was actually broken in 1.15.0 as well, so I'm guessing you actually upgraded from 1.14.0 to 1.16.0...?\n\nNo, I upgraded from 1.15.0 to 1.16.0, but I haven't noticed before.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T20:35:43Z", "contents": "Ah, gotcha.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 717, "url": "https://github.com/qunitjs/qunit/issues/717", "title": "Config hidepassed", "contents": "The QUnit.config.hidepassed value set before page load used to affect the UI. In recent versions it no longer does with its value paved by the UI checkbox value. I'm currently doing something like:\nQUnit.begin(function() {\n  QUnit.config.hidepassed = true;\n  document.getElementById('qunit-tests').className += ' hidepass';\n  document.getElementById('qunit-urlconfig-hidepassed').checked = true;\n});\nIs there a better way?", "createdAt": "2014-12-15T04:55:49Z", "updatedAt": "2014-12-23T14:59:53Z", "closedAt": "2014-12-23T14:59:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-17T15:48:06Z", "contents": "We changed this setting to behave like the other checkboxes in the UI, see #457 for details. The way to use this now is to append \"?hidepassed\" to the URL when opening a testsuite.\nThat said, breaking QUnit.config.hidepassed in a minor release is a regression, we need to fix that. We'd still drop it in 2.0, though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2014-12-17T16:14:36Z", "contents": "?hidepassed\n\nIt was easier before that it just worked setting QUnit.config.hidepassed because I had a reporter for node and the browser and it would configure it in 1 place.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-17T16:19:11Z", "contents": "as J\u00f6rn said, you've found a regression on QUnit.config.hidepassed that we're going to fix. The url parameter shouldn't be a problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2014-12-17T16:23:34Z", "contents": "The url parameter shouldn't be a problem.\n\nThe problem is that in a 2.0 world there appears to be no easy way to do this.\nWhy is this planned for removal?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2014-12-17T16:36:52Z", "contents": "It was discussed on #457, but I'm considering keeping it as 2.0 is not strictly defined.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lOTA3MjA2", "title": "1.16.1", "description": "", "createdAt": "2014-12-17T16:37:24Z", "dueOn": null, "number": 6, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 718, "url": "https://github.com/qunitjs/qunit/issues/718", "title": "1.16.0 release lacks GitHub release description", "contents": "The entry for 1.16.0 on https://github.com/jquery/qunit/releases lacks a description/summary.", "createdAt": "2014-12-15T05:33:41Z", "updatedAt": "2014-12-17T15:40:26Z", "closedAt": "2014-12-17T15:40:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cvrebert", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cvrebert", "company": "@GoogleCloudPlatform"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-17T15:40:26Z", "contents": "Fixed. Also added a note to the release tasks in 116865d.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 721, "url": "https://github.com/qunitjs/qunit/issues/721", "title": "HTML Reporter Failure Assertion Source Location Regression On File System", "contents": "In QUnit 14, the HTML reporter would list the failed test assertion source location at the point in the user's test when run from the file-system. In QUnit 15 it seems to have disappeared, and in 16 and edge, it reports it in the QUnit infrastructure code. For an example, see qunit-code-fail.html. The following versions have the following source outputs:\n\n\n\nVersion\nAssertion source output\n\n\n\n\n1.14.0\n@file:///JSCover-maven-plugin/plugin-parent/data/src/test/javascript/spec/qunit-code-fail-spec.js:3:1\n\n\n1.15.0\nNo source is reported\n\n\n1.16.0\napplyCurrent/<@file:///JSCover-maven-plugin/plugin-parent/data/src/test/javascript/lib/qunit/qunit-1.16.0.js:1951:5\n\n\ngit-current\napplyCurrent/<@file:///JSCover-maven-plugin/plugin-parent/data/src/test/javascript/lib/qunit/qunit-git.js:1933:5", "createdAt": "2014-12-24T01:29:19Z", "updatedAt": "2015-01-19T11:43:11Z", "closedAt": "2015-01-19T11:43:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tntim96", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tntim96", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-24T15:47:35Z", "contents": "Thanks for the report. Could you extract your code into a standalone testpage? You could use this jsbin as a starting point: http://jsbin.com/wagafeqequ/1/edit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tntim96", "authorAssociation": "NONE", "createdAt": "2014-12-26T04:46:59Z", "contents": "This is only an issue when the test suite is loaded from the file-system. I've updated the title and original description of the issue.\nTo run, you can checkout the project listed in the link above and load the HTML file in a browser.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-01-19T11:43:10Z", "contents": "I just opened QUnit's own test/index.html from the local file system in Chrome and Firefox and modified one test to fail. Both report the source correctly like this:\nSource:     at file:///Users/jza/dev/qunit/test/test.js:14:7\n\nIf you can provide a reduced test page, we can look into this again, but digging through third-party code is not an option.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 723, "url": "https://github.com/qunitjs/qunit/issues/723", "title": "Don't ignore bower.json in bower.json", "contents": "bower.json includes important metadata about the package, namely the main entry point.\nCan you remove bower.json from the ignore list?\nThis will enable things like RaveJS, StealJS, and other module loaders to know how to load QUnit without configuration.\nThanks!", "createdAt": "2014-12-29T02:47:49Z", "updatedAt": "2015-01-02T11:50:15Z", "closedAt": "2015-01-02T11:49:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "justinbmeyer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "justinbmeyer", "company": "Bitovi"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-01-02T11:50:15Z", "contents": "Done. Will be available with the next release.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 726, "url": "https://github.com/qunitjs/qunit/issues/726", "title": "I would like a run once at very beginning right before Qunit starts testing", "contents": "Setup:\nMy specific case has to deal with the unit testing of HTML5 custom elements.\nWhen I create a HTML5 custom element I typically have some javascript backend that handles some functionality.  For example lets say I have a custom element that have a custom element to take in a number does some fancy math and changes some html internally.\nhere is what the js side would look like.\nfunction CustomElement1() {\n}\nCustomElement1.prototype = Object.create(HTMLElement.prototype);\nCustomElement1.prototype.fancyFunction = function(number) {\n // do fancy stuff here and interaction with some shadow DOM\n};\n\nI am using HTML imports to load and register the custom elements so it will be set up and ready to use with one line of import code\nI am also using a code coverage library (http://blanketjs.org/) that works in tandem with QUnit.\nBlanket modifies the javascript file to perform code coverage.\nBut I think it can only modify code in a QUnit instance.  By that I mean only js code run inside a QUnit code is registered by blanket.\ntl;dr using custom elements and code coverage library.\nConstraints:\nRegistering a custom element can only happen once per a page and must happen before any tests make use of the element.\nTo make blanket work I must register the element inside of a Qunit method\nProblem:\nRight now I use the Qunit setupOnce inside modules to initialize the element and it works great!\nBUT as a result I can only use one module in my test code instead of multiple modules.  (Or add some other setup that makes it call only once regardless of test order)\nI noticed that you guys are moving to a 2nd version of QUnit to so it would be really nice if you could either support custom element registration that can occur after reporters do some tooling.\nOr if you had some advice on the best way to mitigate this problem with the best coding style.\nThanks!  I love your library!", "createdAt": "2015-01-10T03:06:23Z", "updatedAt": "2015-01-19T11:39:17Z", "closedAt": "2015-01-19T11:39:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dtracers", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dtracers", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-10T03:47:28Z", "contents": "To make blanket work I must register the element inside of a Qunit method\n\nCan you explain why that is? I haven't worked with BlanketJS before.\nWould you be able to register your custom element in a QUnit.begin callback function? That seems like the right mechanism for this kind of task.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dtracers", "authorAssociation": "NONE", "createdAt": "2015-01-10T04:02:13Z", "contents": "as far as my (limited) understanding of how the library works it modifies my javascript to insert a line of code in between every line of my code to figure out what lines were run by my tests and which lines were not run by my tests.\nAnd I just tried using QUnit.begin and it did not work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T17:14:45Z", "contents": "Can you put together a test page that demonstrates the problem?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 732, "url": "https://github.com/qunitjs/qunit/issues/732", "title": "1.17.0 & phantomjs", "contents": "Heads up, I'm seeing tests hang when using phantomjs as phantomjs test.js. It looks like things are getting exported correctly and the QUnit.load() is getting called. I'll know more this evening when I dig-in fully.", "createdAt": "2015-01-19T21:21:40Z", "updatedAt": "2015-01-20T18:31:06Z", "closedAt": "2015-01-20T18:31:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "SomethingSexy", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "SomethingSexy", "authorAssociation": "NONE", "createdAt": "2015-01-19T21:26:30Z", "contents": "I might be getting something similar.  My problem stemmed from the toolbarModuleFilter method in released version of qunit.js (at line 2520) .  It looks like that method is not checking to see if \"qunit-testrunner-toolbar\" was created.  The other methods that get called inside QUnit.begin check to make sure their elements are created before working on it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 733, "url": "https://github.com/qunitjs/qunit/issues/733", "title": "1.17.0 breaks phantomjs", "contents": "Hi,\njust updated qunit and my phantomjs gets stuck in:\nPhantomJS 1.9.8 (Linux) ERROR: 'TypeError: 'null' is not an object (evaluating 'toolbar.appendChild') - http://localhost:9876/base/node_modules/qunitjs/qunit/qunit.js?0db9af2b5ad31c46fe2cfa82bbe2761c44bb36f8'", "createdAt": "2015-01-20T01:27:26Z", "updatedAt": "2015-01-20T15:21:19Z", "closedAt": "2015-01-20T05:53:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vampolo", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "vampolo", "company": "Quid"}, {"login": "mko-io", "company": null}, {"login": "SomethingSexy", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jlonardi", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "mko-io", "authorAssociation": "NONE", "createdAt": "2015-01-20T01:46:31Z", "contents": "Just Ignore this comment, My guess is wrong\nI guess this break does not cause by version 1.17,  you may have old test runner html file(like the one used in 1.11.0)\ntry to change\n<h1 id=\"qunit-header\">Tests</h1>\n<h2 id=\"qunit-banner\"></h2>\n<div id=\"qunit-testrunner-toolbar\"></div>\n<h2 id=\"qunit-userAgent\"></h2>\n<ol id=\"qunit-tests\"></ol>\n\nto just\n<div id=\"qunit\"></div>", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SomethingSexy", "authorAssociation": "NONE", "createdAt": "2015-01-20T03:05:43Z", "contents": "I mentioned this in #732 but I am getting the same error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-01-20T05:46:45Z", "contents": "Working on it, thanks for reporting.\nSetting <div id=\"qunit\"></div> can be used as a workaround, but that was a regression and needs to be fixed.\nI'm closing this one as this is a duplicate of #732", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jlonardi", "authorAssociation": "NONE", "createdAt": "2015-01-20T07:34:57Z", "contents": "This does not happen only on phantomjs. I am running qunit tests using karma and after qunit updated to 1.17.0 getting following errors.\nChrome:\nChrome\nChrome 41.0.2272 (Windows 7) ERROR\nUncaught TypeError: Cannot read property 'appendChild' of null\nFirefox\nFirefox 35.0.0 (Windows 7) ERROR\nTypeError: toolbar is null", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vampolo", "authorAssociation": "NONE", "createdAt": "2015-01-20T15:11:18Z", "contents": "I'm a bit puzzled.\nShould i apply the fix described by @mkoxio <div id=\"qunit\"></div> or should i wait for the fix ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-01-20T15:21:19Z", "contents": "Better wait for the fix, but you can use the new qunit markup at anytime.\nfrom\n<h1 id=\"qunit-header\">Tests</h1>\n<h2 id=\"qunit-banner\"></h2>\n<div id=\"qunit-testrunner-toolbar\"></div>\n<h2 id=\"qunit-userAgent\"></h2>\n<ol id=\"qunit-tests\"></ol>\nto\n<div id=\"qunit\"></div>", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 736, "url": "https://github.com/qunitjs/qunit/issues/736", "title": "Use jquery-release changelog, integrate into build/release.js", "contents": "Currently we use git changelog via git-extras, which doesn't work that well anymore and has no ticket or commit references. Updating that manually is annoying, too. Would make future releases easier to integrate the changelog generated by jquery-release into our custom release, somewhere prepending it to History.md, or just removing that file and only using the generated changelog on the repo's release page.", "createdAt": "2015-01-20T19:04:11Z", "updatedAt": "2018-12-29T02:33:25Z", "closedAt": "2018-12-29T02:33:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-11T18:05:16Z", "contents": "@jzaefferer @leobalter Is this issue still valid, given the existence of #1073?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-29T02:33:25Z", "contents": "Closing in favour of #1073.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "help wanted", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 738, "url": "https://github.com/qunitjs/qunit/issues/738", "title": "Provide link to commit or issue in changelog", "contents": "Not a real issue but it would be great if you can add a link to the commit or the issue in the change log. It may provide further information for guys looking in the source code.", "createdAt": "2015-01-21T14:59:13Z", "updatedAt": "2015-01-21T15:04:22Z", "closedAt": "2015-01-21T15:02:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "crissdev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "crissdev", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 2, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-21T15:02:19Z", "contents": "That will be handled by #736.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "crissdev", "authorAssociation": "NONE", "createdAt": "2015-01-21T15:04:21Z", "contents": "Thanks Scott. So fast answer \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 739, "url": "https://github.com/qunitjs/qunit/issues/739", "title": "async in beforeEach support", "contents": "I'm trying to use 'async' in 'beforeEach' to wait for promise to finish.\nI see that QUnit.start() and QUnit.stop() were deprecated and 'beforeEach' does not get 'assert' as its parameter.\nHow this can be done ? And if not, why ?", "createdAt": "2015-01-21T16:16:53Z", "updatedAt": "2016-11-01T16:29:10Z", "closedAt": "2015-01-21T16:47:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mateuszf", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mateuszf", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-21T16:36:04Z", "contents": "Two things:\n\n\nAs of v1.16.0, the beforeEach/afterEach callbacks do both get passed the assert object for the first parameter as well, so you can use assert.async(). This detail is just missing from the documentation.\n(function(module, test, $) {\n  module(\"example\", {\n    beforeEach: function(assert) {              // <--- Accept the `assert` parameter\n      $.ajax(\"/foo.bar\").then(assert.async());  // <--- Use `assert.async()` for flow control\n    }\n  });\n  test(\"my test\", function(assert) {\n    assert.ok(true, \"blah\");\n  });\n})(QUnit.module, QUnit.test, jQuery);\n\n\nAs of v1.16.0, the beforeEach/afterEach and test callbacks were all made Promise-aware (for their return value). If the Promise is created/available during the synchronous execution of the callback, then you can just return the then-able Promise object. See the documentation for QUnit.test for a little more info and an example.\nNote that the documentation for beforeEach/afterEach (via QUnit.module) does not currently mention this ability.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-21T16:47:33Z", "contents": "Issue 1 recorded as qunitjs/api#96\nIssue 2 recorded as qunitjs/api#95", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mateuszf", "authorAssociation": "NONE", "createdAt": "2015-01-21T21:17:23Z", "contents": "This is great, just tested it with returning value as a promise and it worked flawlessly. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-21T21:21:46Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 740, "url": "https://github.com/qunitjs/qunit/issues/740", "title": "return QUnit.url on QUnit < 2.0.0", "contents": "Ref d86d6c3#commitcomment-9471316", "createdAt": "2015-01-28T03:41:03Z", "updatedAt": "2018-12-29T20:26:35Z", "closedAt": "2017-04-18T04:24:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 7, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "shivamdixit", "company": "Uber "}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "amercier", "company": "@BackMarket"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 16, "comments_data": [{"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-08T06:06:49Z", "contents": "@leobalter Can you please elaborate on the issue a bit?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-08T15:13:06Z", "contents": "@shivamdixit Leo removed an undocumented internal method that was publicly exposed in a minor/patch version, and it turned out some consumers were using it for extension purposes (see the link in Leo's original comment). So, per SemVer guidelines, we are restoring the method's public exposure in a v1.x release but can still choose to remove it in v2.x.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-08T15:21:02Z", "contents": "@JamesMGreene Thanks for the clarifications. So QUnit.url method is still present in the current release? Is there anything that has to be done apart for removing it in v2.x?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-08T20:15:45Z", "contents": "No, QUnit.url was removed in v1.17.0 and hasn't been restored yet, thus the reason for this issue being created for tracking purposes (and still open).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-09T18:15:46Z", "contents": "Is it fine if I restore:\nurl: function( params ) {\n        params = extend( extend( {}, QUnit.urlParams ), params );\n        var key,\n            querystring = \"?\";\n\n        for ( key in params ) {\n            if ( hasOwn.call( params, key ) ) {\n                if ( params[ key ] === undefined ) {\n                    continue;\n                }\n                querystring += encodeURIComponent( key );\n                if ( params[ key ] !== true ) {\n                    querystring += \"=\" + encodeURIComponent( params[ key ] );\n                }\n                querystring += \"&\";\n            }\n        }\n        return location.protocol + \"//\" + location.host +\n            location.pathname + querystring.slice( 0, -1 );\n    },\nand in reporter/html.js setUrl() definition, make a call to above function to remove redundancy?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T18:39:38Z", "contents": "As this is used exclusively at the reporter, I would put this at the reporter. Basically you would need to set it here: d86d6c3#diff-5b7e94e2a10b848c4ae4b539388f86aeR269", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-10T11:20:19Z", "contents": "We should keep in mind that the reason for \"bringing this back\" is the qunit-notifications projects, which already implemented a workaround. Bringing QUnit.url back in a minor release, only to remove it again in 2.0.0 seems pretty pointless, since qunit-notifications likely would just have to stick with their workaround anyway.\nMaybe @rwjblue or @amercier can chime in here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amercier", "authorAssociation": "NONE", "createdAt": "2015-03-11T03:40:15Z", "contents": "@jzaefferer I would be happy to rollback our workaround and use QUnit's API instead since it's not DRY. However, I'm not aware of QUnit's chamber secrets regarding v2. If a lot of this are going to change and QUnit.url make no sense in v2 world, then it's pointless to rollback this change (which wasn't officially part of the API in the first place anyway). Let's move forward.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T11:57:25Z", "contents": "Alright, thanks for chiming in! That confirms my guess that we need a long-term solution. Either we bring back QUnit.url and keep it, for we leave things as-is. Considering that the generateQueryString function you've added isn't exactly trivial, along with changes we keep making to generate URLs (like 01fcdd4), I vote for bringing back QUnit.url and documenting it properly as public API, with no intention to remove it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amercier", "authorAssociation": "NONE", "createdAt": "2015-03-11T15:03:43Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:33:22Z", "contents": "@leobalter @JamesMGreene thoughts on this? See my last comment above for details.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T15:06:00Z", "contents": "I vote for bringing back QUnit.url and documenting it properly as public API, with no intention to remove it.\n\n\ud83d\udc4d\nIf it's namespaced, I don't see why not shipping it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T15:12:24Z", "contents": "We should come up with a better name.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:33:53Z", "contents": "Is it still necessary? Damage is done - my bad - but now I wonder (again) if it's still necessary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-04-15T03:50:15Z", "contents": "QUnit.url became private in 1.17.0, so from what I can see this is obsolete now, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-18T04:24:56Z", "contents": "I'm going to go ahead and close this. I see no reason for this to come back into the framework and back-porting it at this point feels a bit pointless.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta-ready"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 741, "url": "https://github.com/qunitjs/qunit/issues/741", "title": "Collaboration with Intern", "contents": "We have a ticket to document integration with CI tools, including intern, though I wonder if that is really a good investment of our time. Elsewhere @csnover wrote:\n\nI\u2019ve actually got a mostly-working branch with a full* QUnit API compatible interface so, with only a small amount of work to address the TODOs (probably only a day or two of work?), you should be able to drop existing QUnit tests into Intern by wrapping them with define([ 'intern!qunit'], function (QUnit) { }) and have them Just Work.\n(And then, fingers crossed!, I can convince team QUnit to come over & help me get cool new stuff into Intern more quickly :)))\n\nI still haven't gotten around to actually trying out Intern myself. We're going with Intern to test PEP, but otherwise there's nothing happening, as far as I know.\n@leobalter @JamesMGreene @Krinkle did one of you have more exposure to Intern? Or do you have interest and time to look into that?\n@csnover apart from what I quoted above, is there something we could or should work on asap for better QUnit into Intern integration? What do you have in mind beyond that?", "createdAt": "2015-01-28T14:07:56Z", "updatedAt": "2015-10-28T21:31:22Z", "closedAt": "2015-10-16T20:44:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "csnover", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 10, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-28T20:39:13Z", "contents": "Just so we're all clear:\nFrom my talks with @csnover, it is my understanding that the code for the QUnit interface for Intern lives 100% within Intern. It neither depends on nor utilizes any QUnit assets, it only mimics the API (so there isn't any actual integration to speak of). Also, I think that writing QUnit tests for Intern would still require that test authors are using Intern's AMD configuration (or generating such wrappings).\n\n(And then, fingers crossed!, I can convince team QUnit to come over & help me get cool new stuff into Intern more quickly :)))\n\nI'm believe this remark was implying that @csnover wishes that the QUnit team would halt new development efforts on QUnit and then dedicate that time to working on Intern instead.\nSound about right, @csnover? If not, please correct me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-01-28T20:39:34Z", "contents": "P.S. I'm semi-familiar with Intern.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2015-01-28T23:55:57Z", "contents": "@JamesMGreene Yes, that captures the gist of it. I know it\u2019s a long shot, but architecturally we\u2019re pretty solid (and will be even moreso after the current sprint is over) and provide a really good baseline that\u2014and I think the QUnit interface demonstrates this reasonably well\u2014is really robust and flexible. So instead of having to do redundant work on things like #364 or #405 or #543 or #590, which all are features Intern already has, I\u2019d really like to be able to work together to focus on building/integrating more useful & unique features and things that will be more generally useful to the wider Web development community. Things like:\n\nWorking with the WebDriver standards group to finalise a standard and encourage adoption\nWorking with groups like Mozilla\u2019s Marrionette team to get every browser exposing a native WebDriver endpoint for testing so things like this stop happening\nIntegrate benchmarking\nIntegrate mocks/stubs\nIntegrate visual differencing tests\nAdd other execution modes\nAdd more extension points for the built-in Web server (reverse-proxying, middleware, etc.)\nBetter documentation\netc.\n\n\nI think that writing QUnit tests for Intern would still require that test authors are using Intern's AMD configuration (or generating such wrappings).\n\nIntern does use AMD as its module system because it Just Works in browsers with no extra steps, but if you were adamant about exposing globals for your tests instead, or automatically wrapping them, or using ES6 modules that can be transpiled, or whatever, it is definitely possible to do so.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T10:33:36Z", "contents": "For anyone interested, a kind of status update:\n\nPR to add QUnit interface to Intern\nBranch for Globalize to use Intern with the QUnit interface\n\nBoth of these are being worked on by one of our GSoC students, who will later work on using Intern with jQuery Mobile.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:44:51Z", "contents": "The migration from QUnit to Intern doesn't affect QUnit itself, and we're not abandoning QUnit anytime soon. So I'm closing this, since I don't think this ticket provides any value.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2015-10-16T21:00:43Z", "contents": "we're not abandoning QUnit anytime soon.\n\nWhy not? Seems like a lot of wasted effort to duplicate features instead of working together :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-10-18T02:44:25Z", "contents": "I think @csnover's question is a more interesting one now given the impending changes to the Foundation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2015-10-28T20:00:59Z", "contents": "If nothing else it would be useful to me if you could explain why you think there is no value in collaborating and/or why you do not want to do so.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T20:31:18Z", "contents": "Collaborative work is always great, but abandoning QUnit is not my option right now. It's old but still works great. I like QUnit being simple and not trying to ship tons of extras as we already find some you already mentioned here Intern does.\nThere is a lot of things I would love to have more available time and more contributors to make QUnit better, that does not mean I'm abandoning the project. The team was able to land QUnit 1.19 and 1.20 in less than 2 months, and my plans are to keep publishing new versions faster, with good and documented features. I don't mind if we have to do it step by step.\nQUnit is not dead. Far from it, it's being well used on lots of great projects, not only jQuery Core, jQuery UI, or jQuery Mobile. I can mention LoDash, Backbone, EmberJS, it is built in by default on ember-cli projects. You can find a lot of other projects using it, including small ones as QUnit is very easy to use on browsers, straight out of the box. They are all worth the available time I dedicate to work here.\nInstead of dropping QUnit, I would suggest we could have more shared collaboration, as you might find projects like https://github.com/js-reporters/js-reporters where it any help would be awesome.\nWe can always work together, but sometimes we may not need to work on the same project.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csnover", "authorAssociation": "NONE", "createdAt": "2015-10-28T21:31:22Z", "contents": "Sorry, I still don\u2019t understand but would like to understand why it is your feeling that it is better to continue to maintain/develop QUnit instead of working on unifying a code base. I will try to ask some specific things so I can maybe explain my confusion so you can tell me more about where you are coming from:\n\nI like QUnit being simple and not trying to ship tons of extras as we already find some you already mentioned here Intern does. [\u2026] my plans are to keep publishing new versions faster, with good and documented features.\n\nCan you tell me how the new features you plan to add to QUnit are differentiated from the \u201ctons of extras\u201d that Intern provides to test authors? Can you tell me which features Intern provides that you feel are excessive that you don\u2019t like and are happy QUnit doesn\u2019t have?\n\nYou can find a lot of other projects using it, including small ones as QUnit is very easy to use on browsers, straight out of the box.\n\nAs far as I know from my experience Intern is also easy to use in browsers out of the box, load client.html?config=tests/intern and it works. Are you saying it is harder to use in a browser because you have to write a configuration file instead of just getting global APIs? Is there something else that makes it more difficult than necessary that makes you not like it? Is there something that could be changed so that you do?\n\nThey are all worth the available time I dedicate to work here.\n\nSince these projects would all have a solid migration path to Intern via the QUnit API of Intern, wouldn\u2019t it be more worthwhile to dedicate time to brand new features and enhancements that aren\u2019t in any test tool by working together on one code base? If not, maybe you can explain more why you think this is not so?\nFrankly I would drop Intern at this point if it was less robust than QUnit, since I can\u2019t continue to maintain it as the only developer that ever spends any time working on it. But as it is, it\u2019s the more complete of the two, which is the only reason why I suggest it makes more sense to work on that code than this code. Are there any changes that could be made to Intern to make you want to help develop one code base together instead?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 742, "url": "https://github.com/qunitjs/qunit/issues/742", "title": "Invalid filter comparison results in no tests being run.", "contents": "In qunit/src/test.js on line ~346 there is this code:\nif ( fullName.indexOf( filter ) !== -1 ) {\n    return include;\n}\n\nWhich is doing a comparison of an unmodified filter var against a lower cased fullName var:\nfullName = ( this.module.name + \": \" + this.testName ).toLowerCase();\n\nThus tests with capital letters can't be matched.\nTwo options for fixes...\nCase Sensitive filters:\nfullName = ( this.module.name + \": \" + this.testName );\n\nCase Insensitive filters:\nfilter = config.filter.toLowerCase();", "createdAt": "2015-02-03T17:10:55Z", "updatedAt": "2015-03-01T07:30:10Z", "closedAt": "2015-03-01T07:30:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lobacten", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lobacten", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 1, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-01T07:30:07Z", "contents": "Fixed by #753", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 743, "url": "https://github.com/qunitjs/qunit/issues/743", "title": "All Test Results are not showing in test window, Only 1st and last appearing", "contents": "Hi Team,\nI have used qunit to write the API Tests. However, when i run all tests in that case it will show only 1st and last test case result. For others it simply show empty containers. However, i am getting results for all tests. I have attached screen shot for your reference.  Kindly, let me know if i am doing any thing wrong some piece needs to be updated.\n\n\nThanks,\nRahul", "createdAt": "2015-02-04T05:52:46Z", "updatedAt": "2015-02-06T05:37:08Z", "closedAt": "2015-02-06T05:36:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rahulsahay19", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rahulsahay19", "company": "Kongsberg KDI"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-02-04T16:28:52Z", "contents": "It's nothing that I've seen before, unless your tests just don't have assertions. You can always turn on QUnit.config.requireExpects = true; (see http://api.qunitjs.com/QUnit.config/ for more info) and then use assert.expect(myNumberOfExpectedAssertions) within your test body to help diagnose if all of the expected assertions are indeed being executed.\nCan you make a JSBin that reproduces the problem (as closely as possible) and/or share your test page's HTML and the JS for at least 1 failing and 1 \"passing\" (not running) test?\nWhat version of QUnit are you running?  If your tests are invoking asynchronous calls to those APIs, you should definitely try to use the latest QUnit if at all possible as we solved some important async testing bugs/inconsistencies in v1.16.0 (and then fixed some other regressions in the v1.17.x series).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rahulsahay19", "authorAssociation": "NONE", "createdAt": "2015-02-06T03:27:29Z", "contents": "Thanks James. After your suggestion it started working.\nOn Wed, Feb 4, 2015 at 9:59 PM, James M. Greene notifications@github.com\nwrote:\n\nIt's nothing that I've seen before, unless your tests just don't have\nassertions. You can always turn on QUnit.config.requireExpects = true;\n(see http://api.qunitjs.com/QUnit.config/ for more info) and then use\nassert.expect(myNumberOfExpectedAssertions) within your test body to help\ndiagnose if all of the expected assertions are indeed being executed.\nCan you make a JSBin that reproduces the problem (as closely as possible)\nand/or share your test page's HTML and the JS for at least 1 failing and 1\n\"passing\" (not running) test?\nWhat version of QUnit are you running? If your tests are invoking\nasynchronous calls to those APIs, you should definitely try to use the\nlatest QUnit if at all possible as we solved some important async testing\nbugs/inconsistencies in v1.16.0 (and then fixed some other regressions in\nthe v1.17.x series).\n\nReply to this email directly or view it on GitHub\n#743 (comment).\n\n\n[image: --]\nrahul sahay\n[image: http://]about.me/rahulsahay19\nhttp://about.me/rahulsahay19?promo=email_sig", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rahulsahay19", "authorAssociation": "NONE", "createdAt": "2015-02-06T05:37:08Z", "contents": "closing the issue", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 744, "url": "https://github.com/qunitjs/qunit/issues/744", "title": "Add assert.notOk() function", "contents": "The same way that equal(), deepEqual(), propEqual() and strictEqual() has their negative versions, ok() should have a notOk() negative version to check for falsy values, in a more clean and explicit way that by adding a negation operator in front of the value to check.\nassert.ok(!value)\nassert.notOk(value)", "createdAt": "2015-02-04T12:04:20Z", "updatedAt": "2015-04-03T10:18:46Z", "closedAt": "2015-03-04T15:58:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "participants_count": 6, "participants_data": [{"login": "piranna", "company": "CTO @lingbe"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 12, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-02-04T17:27:33Z", "contents": "The assert.notOk seems better to go as an extension. It's not necessary to include this assertion in the API as it aims to keep itself simple.\nnot[Equal|DeepEqual|PropEqual|StrictEqual] has some more specific cases and I would be more inclined to remove them, but that would break the retrocompatibility and they're already there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-02-04T22:01:34Z", "contents": "I would love to get a negation property implemented, e.g. assert.not, assert.not.not == assert.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-02-04T22:17:40Z", "contents": "Ok, I'm reopening it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-02-04T22:27:15Z", "contents": "I searched and saw the other assertion libraries does have the same assert.notOk method. Some of then was tape and chai.\nI've also talked with some other developers and it seems the .notOk would improve readability for other developers.\nOne thing I noticed during those conversations that makes QUnit great for me is being one of the JS testing libraries with the fewest assertions in it's API, making it simple. That's why I'm not 50/50 to decide which way to go, and we also have positive perspective from @JamesMGreene.\nMore opinions, please.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-02-05T01:39:40Z", "contents": "For the record, I would be accepting of an assert.notOk for readability's sake... but would much rather implement a negation property and eliminate all of the not* assertions both in QUnit core and for custom assertion extensions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-05T09:20:16Z", "contents": "For the record, I would be accepting of an assert.notOk for readability's sake...\n\nThat's the main reason why I proposed it :-) Also, it makes it more orthogonal with the other assert methods, that have their negative version.\n\nbut would much rather implement a negation property and eliminate all of the not* assertions both in QUnit core and for custom assertion extensions.\n\nI'm not too much into this kind of literate properties since at my opinion makes the code more verbose and ofuscate (behaviour-driven libraries abuse of this and I'm not always sure if I'm writting a valid word or not), but if this is the only case mostly as a namespace and makes simpler the code, I think is not a bad alternative... :-)\nFrom an implementer point of view, in Python is trivial to automagically negate and route all the calls done on the namespace also for custom asserts, but on Javascript would require to use Proxy objects. Another alternative would be to fill the .not namespace on start with the methods found in the assert object, but this would still has the problem of the custom asserts after that (Object, observe(), maybe?).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-02-05T13:29:44Z", "contents": "I'm okay with adding assert.notOk. That would be a pretty simple change, while supporting assert.not might get much more complicated. PRs for the one or the other would help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-05T14:14:08Z", "contents": "Quick pull-request done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2015-02-12T12:49:34Z", "contents": "I'd like to challenge the ok and not* assertions. I think they're a bad practice. Putting them together seems a step backwards. I'd rather we discourage them as a \"Bad Part\". Perhaps kept for backwards compatibility; and parity with CommonJS' Unit Testing spec (which I believe was inspired by QUnit, awkward..).\nUsing ok() indicates one of two problems:\n\nThe software (or testing strategy) is unreliable. (Unsure what value to expect.)\nThe author is lazy and uses it as shortcut for a proper comparison.\n\nThe former necessitates improvement in the code being tested. The latter comes with two additional\u00a0caveats:\n\nLess debug information. (No actual/expected diff). Without an expected value provided, one can't determine what's wrong with the value.\nMasking regressions. Even if the API being tested returns a proper boolean and ok is just a shortcut, the day the API breaks (e.g. returns a number, string, array, function, Promise or other object) the test will not catch it.\n\nCommon examples:\n// Meh\nassert.ok( bool );\nassert.ok( fn );\n\n// Better?\nassert.strictEqual( bool, true );\nassert.equal( typeof fn, 'function' );\nUsing not*() indicates one of three problems:\n\nThe software is unreliable.  (Unsure what value to expect.)\nThe test uses an unreliable environment. (E.g. variable input data, insufficient isolation or mocking.)\nThe author is lazy and uses it as shortcut for a proper comparison.\n\nCommon example:\nvar index = list.indexOf( item );\n// Meh\nassert.notEqual( index, -1 );\n// Better?\nassert.equal( index, 2 );\nI'd love to be proven wrong, so I ask you: What is the added value in ok or not*?\nI've yet to see the first use of ok or not* that wouldn't be improved by writing it a different way. Though I appreciate there are scenarios where notEqual can't be avoided in the short term, ok (and notOk) are never useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-12T13:30:06Z", "contents": "What would you find as a better alternative? Maybe assertTrue() and assertFalse() and checking explicitly for Boolean values?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-12T13:31:37Z", "contents": "I have some examples that come to mind.\nok()\nI often have tests where I want to verify that a method is called as a result of calling some other method, but there's no input to verify. Using ok( true, \"foo() was called\" ) works great for this case. The inverse case also exists: verifying that a method is not called via ok( false ). Here's a real example: https://github.com/jquery/jquery-license/blob/3b5c3c57b65fdc61b85528cb95f6df5edf03b939/test/repo.js#L43-L50\nnot*()\nLet's say you have a widget which takes an array of values and you initialize multiple instances with the same array, but the widget needs to treat the two instances separately. You can currently use notStrictEqual( widget1values, widget2values ). If ok() and not*() were removed, this assertion would become equal( widget1values === widget2values, false ) which is definitely less expressive.\nAnother example is testing a method that generates unique values, e.g., a random password generator. I've tested this before by calling the method multiple times and using notEqual() on the output.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T16:54:43Z", "contents": "@scottgonzalez As said, I agree there are scenarios where a negated comparison is useful and appropriate. Especially for token generators. One could still assert value type and shape, however (e.g. string / length). (example)\nAs for function call tracking, I think using ok( Boolean ) for that is inferior to strict flow tracking using a counter (example) or array (example, example). This becomes more important when abandoning the assert.expect model, of course, though not required.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 748, "url": "https://github.com/qunitjs/qunit/issues/748", "title": "test filter input fails without any module", "contents": "Steps to reproduce:\n\nOpen http://jsfiddle.net/gj6hudry/ sample.\nType 'testname' in 'Filter' input and click 'Go'.\nError \"Cannot read property 'options' of null\" will be occurred at:\nselection = decodeURIComponent( selectBox.options[ selectBox.selectedIndex ].value ),", "createdAt": "2015-02-11T11:47:33Z", "updatedAt": "2015-04-03T10:18:57Z", "closedAt": "2015-03-04T18:02:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "San4es", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "San4es", "company": "@DevExpress"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-01T07:19:21Z", "contents": "the Cannot read property 'options' of null error was caused because no module was present.\nI'm fixing it, thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 749, "url": "https://github.com/qunitjs/qunit/issues/749", "title": "1.17.1 - Filter does not work correctly with upper case letter in test name", "contents": "Steps to reproduce:\n\nOpen http://jsfiddle.net/nxrLcppq/\nType \"Test Name\" in \"Filter\" input and click \"Go\"\nNo any tests will be run\n\nCompare results with \"test name\" filter string.\nSeems, this issue was appeared after 1d44eb3 , where\nfilter = config.filter && config.filter.toLowerCase(),\nwas replaced by\nfilter = config.filter,", "createdAt": "2015-02-11T12:15:31Z", "updatedAt": "2015-04-03T10:18:03Z", "closedAt": "2015-03-01T06:45:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "San4es", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "San4es", "company": "@DevExpress"}, {"login": "TheCloudlessSky", "company": "ProcedureFlow, Harbour Inc."}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "TheCloudlessSky", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-17T20:43:39Z", "contents": "\ud83d\udc4d This one caused lots of headaches for us since we use capitals in all of our constructor names.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 750, "url": "https://github.com/qunitjs/qunit/issues/750", "title": "Dump: .name/.message-property doublettes", "contents": "If an Object has the properties .name and/or .message the dump of the object contains a doublette of said properties.\nExample: http://jsfiddle.net/c50ndqhq/1/", "createdAt": "2015-02-11T22:41:10Z", "updatedAt": "2015-04-03T10:19:22Z", "closedAt": "2015-03-05T19:25:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bubens", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "bubens", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T16:57:25Z", "contents": "I reverted the commit, that introduced a new bug omitting innumerable properties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bubens", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-04T20:24:11Z", "contents": "I had the inArray function all wrong. Now all my tests work as they should with enumerable and non-enumerable properties. (http://unpunk.de/bugs/qunit/index-mod.html)\nBut it seems something's wrong with the CLA again. I give up. I thought this time I had it right...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 754, "url": "https://github.com/qunitjs/qunit/issues/754", "title": "`testIds` are invalidated when using toolbar options", "contents": "Version: 1.17.1 / 1.17.2-pre\nSteps to repro:\n\nSpecify two (2) testId (e.g. http://localhost:3003/?testId=1a9c4dda&testId=f0342ae5)\nClick/select 'Check for Globals'\n\nResult: Test refreshes and the URL is encoded http://localhost:3003/?testId=1a9c4dda%2Cf0342ae5 and none of the tests run.\nExpected: Same are repro step 1 but with option flag(s) set.\nRelated to: #569", "createdAt": "2015-02-27T05:29:26Z", "updatedAt": "2015-04-03T10:18:43Z", "closedAt": "2015-03-04T01:42:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lamchau", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "lamchau", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-01T06:58:42Z", "contents": "@lamchau, your 7069029 seems to solve the problem.\nHaving two testIds set in the url params is not supported, and I don't recommend using it,  Maybe filtering by the module would be better.\nEven though, I don't see any reason to not ship your commit.\nI'm waiting for the PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lamchau", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-01T07:21:58Z", "contents": "Thanks! Just signed the CLA!\nI was looking for tests to write for parity with config.testId = [...] before I submitted a PR -- but I didn't see any.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-01T07:35:31Z", "contents": "We don't have proper tests for the urlParams yet. :(", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 757, "url": "https://github.com/qunitjs/qunit/issues/757", "title": "assert.greaterThan() and assert.lesserThan() needed?", "contents": "Is there a need for assert.greaterThan() and assert.lesserThan() function??\nI know we can implement them using assert.ok(a > b, message), but according to me its better to have a seperate function for it as many other unit testing frameworks have.\nassert.lesserThan( first, second, message );\nassert.greaterThan( first, second, message );\nI can apply the change if needed.", "createdAt": "2015-03-03T00:25:43Z", "updatedAt": "2015-03-23T16:24:15Z", "closedAt": "2015-03-03T13:01:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "gauravmittal1995", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T01:02:12Z", "contents": "As part of general testing best practices, I find that tolerant assertions are not good assertions. You should be able to strictly assert what you're expecting.\nThere are exceptions where (in addition to strict assertions verifying the shape of a value) you might need a negated assertions to assert something is different. But asserting that something is not -1, or that a value is greater or lesser than something smells like a problem in the code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T13:01:33Z", "contents": "Either way, we wouldn't add those assertions to QUnit itself. If you're interested in maintaining a plugin, you could publish that and have it listed on http://qunitjs.com/plugins/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-23T16:16:55Z", "contents": "@gauravmittal1995:\nHere you go: JamesMGreene/qunit-assert-compare", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-23T16:24:15Z", "contents": "Thanks @JamesMGreene", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 765, "url": "https://github.com/qunitjs/qunit/issues/765", "title": "Failed assertions throws an AssertionError ", "contents": "based on http://wiki.commonjs.org/wiki/Unit_Testing/1.0, we could change QUnit to throw an AssertionError for failed assertions.\nnew assert.AssertionError({message: message, actual: actual, expected: expected})\nassert.AssertionError instanceof Error\nThis way, we would not only be closer to a standard but we would be able write proper tests for failed assertions, which we don't have today.\nThe other side of doing this is not running the following assertions in the same test block. This might be considered as a bad thing, but regarding a test block should more specific, this is not that bad, IMHO.", "createdAt": "2015-03-06T17:38:11Z", "updatedAt": "2015-04-03T10:20:57Z", "closedAt": "2015-03-09T19:22:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-06T17:53:18Z", "contents": "The other way to test failing assertions would be mocking QUnit.assert.push, that would change any feature on QUnit.\nThe counter argument for this issue is that not throwing an exception on failed assertions is one of the things that make QUnit unique, but I still want to find something to test them properly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T16:55:00Z", "contents": "CommonJS doesn't matter, so \"compatibility with CommonJS\" shouldn't be a priority for us.\nAs for the suggested change, its a common design in other test frameworks, which is a good argument for adopting it. From my point of view its also a user-hostile limitation that we should continue to ignore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T19:22:30Z", "contents": "As the #767 is in the process, I'm already solving the final issue I wanted to solve with this before, which is something to test the failing assertions.\nAfter some time rethinking about the exceptions, QUnit is indeed good to not do it, as it doesn't need to be like every other frameworks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 766, "url": "https://github.com/qunitjs/qunit/issues/766", "title": "QUnit.only to test only a single test block", "contents": "Based on feedback from other developers, I'm proposing QUnit.only to run just a single test block.\nQUnit.only implementation would be similar to QUnit.test but when registered to the tests queue, it would be flagged as the only valid test to run.\nThe behaviour should be like the rerun feature, but instead of using a browser interface, it would allow QUnit to run that single flagged test on other interfaces, like headless browsers (PhantomJS) and Node-like environments.", "createdAt": "2015-03-06T17:43:56Z", "updatedAt": "2015-03-09T18:28:32Z", "closedAt": "2015-03-09T16:58:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 5, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-07T01:29:42Z", "contents": "What should happen if there is more than 1 instance of QUnit.only?\n\nRun multiple (makes the name only feel a little weird but not unreasonable)\nRun the first one but log a special global assertion failure for any additional instances\nDon't run any of them and log a special global assertion failure for all instances\nSomething else?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T16:45:34Z", "contents": "I'm pretty sure we've had previous discussions about this, but I can't find any of the tickets. Would be great if someone could try to dig through closed tickets. It would surely help to remember what method name was proposed before...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-09T16:56:52Z", "contents": "#496?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T16:58:20Z", "contents": "Yep, thanks. Since that is open, let's continue the discussion there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T18:28:32Z", "contents": "I wasn't able to find #496 before. Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 771, "url": "https://github.com/qunitjs/qunit/issues/771", "title": "HTML reporter regression: Failed test display messed up", "contents": "Looks like bc9dfd3 (from #737) caused a regression in the HTML reporter when showing failed tests. Here's QUnit's testsuite with two failing tests before the change:\n\nHere's the same testsuite with the same failures after the change:\n\n/cc @insin since you wrote #737, could you take a look at this regression?", "createdAt": "2015-03-09T15:32:38Z", "updatedAt": "2015-04-01T12:56:52Z", "closedAt": "2015-04-01T12:56:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "gauravmittal1995", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-01T07:04:24Z", "contents": "@leobalter @shivamdixit @gauravmittal1995 can I interest any of you to look into fixing this regression? This is a blocker for the next release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-01T09:28:09Z", "contents": "@jzaefferer Sure, i'll check it out", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-01T10:26:24Z", "contents": "@jzaefferer Please check #804 for this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 774, "url": "https://github.com/qunitjs/qunit/issues/774", "title": "QUnit - Better diff output", "contents": "For the GSoC project \"QUnit - Better diff output\", what are the requirements and details??\nAny other issues apart the ones mentioned in #364 ???\n@leobalter @jzaefferer Please advice.", "createdAt": "2015-03-10T19:18:18Z", "updatedAt": "2015-10-20T19:31:07Z", "closedAt": "2015-05-18T15:30:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "gauravmittal1995", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "shivamdixit", "company": "Uber "}], "comments_count": 9, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-10T19:49:06Z", "contents": "#364 is our meta ticket for the topic, that's definitely the best reference.\nOne thing not mentioned there, that came up with the recent PRs: We should have better tests for diffs. The ones you screenshotted in #764 are a good starting point. A visual test page (failing tests?) would be good for manual, visual verification. Automated tests that somehow prevent regressions would also help, maybe by checking the length of a diff, ensuring that changes to the diff don't make it worse (if longer always means worse).\nAnother idea: Do some research across JS testing frameworks. See what others to about diffing, if at all. See if we should (eventually) extract our diff module into a standalone module, that other frameworks could use. Should find at least two frameworks actually interested in that before making any changes on our end.\nThat's two additional tasks I can think of right now. There's probably more.\nI'm assuming you're asking this to write your proposal. If you need a reference, this one (for jQuery UI) seems pretty decent to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-10T20:17:19Z", "contents": "@jzaefferer Do i make a proposal and put it on gist as well??", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-10T20:18:56Z", "contents": "Sure, that way we can review it before the official submission process starts. Doesn't have to be a gist, anything you can share with us should work.\nPS: One question mark is enough ;-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-10T20:20:14Z", "contents": "@jzaefferer Thanks :-D", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-10T23:27:39Z", "contents": "@jzaefferer @leobalter Hey, I have a doubt in the proposal. How do i make my timeline. I dont know how much time each task could take. How do i decide that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-11T01:23:42Z", "contents": "@jzaefferer I've two questions in my mind:\n\nFor the GSOC project do we need to improve the current diff algorithm of @jeresig or as the other tickets suggest that we can use some already existing libraries for diff?\nIf we are using already existing library I'm not sure why we should extract that module into standalone module (It's already there)?\n\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T12:46:07Z", "contents": "@gauravmittal1995 take the time since you started your first PR to landing it (you may need to extrapolate that, since its still open). Then multiply that by two and you have a rough estimate. Or just guess. Or assume one week per task. Don't worry too much about it, time estimates are never something to stick strict deadlines to.\n@shivamdixit check out #772, that should answer both your questions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-11T12:48:24Z", "contents": "@jzaefferer Thanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:30:58Z", "contents": "Closing this since there's nothing to discuss here and the underlying diff-related issues are enough.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 775, "url": "https://github.com/qunitjs/qunit/issues/775", "title": "Warning test authors?", "contents": "Reading #411 one can see that it might be sometimes necessary to warn test authors about what they might be doing wrong. After inspecting the codebase, I couldn't find any mechanism used in QUnit to do this useful task.\nFacebook's react offers this functionality through the warning function. It also offers an invariant violation warning whenever necessary with the invariant function. In order to make our warning system more powerful, it should be great if these warnings could be shared with reporters, so that they could be shown to the test author more naturally.\nDo you guys think that something like this could be useful?", "createdAt": "2015-03-11T01:57:21Z", "updatedAt": "2015-10-20T19:38:26Z", "closedAt": "2015-04-01T15:20:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "BraulioVM", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T12:05:41Z", "contents": "It looks like React's warning function is mostly a wrapper around console.warn, with some project-specific baggage. Seems like something we could do when necessary. For the particular issue you point to, #411, it seems like that should be handled as a bug in QUnit, not as a bug in user code. If there are usecases where warnings are actually needed, I'm happy to review that as part of those issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-11T12:29:15Z", "contents": "I'm sorry, what I meant citing #411 was not the issue itself but @Krinkle 's comment #411 (comment). He asserts that the user should be warned if a primitive value is passed to propEqual.\nIn addition to this, as I said, it could be great if the warning info was somehow shared with the reporter so that it was shown to the user no matter what environment they may be executing their tests on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T12:48:52Z", "contents": "Ah, gotcha. Though he wrote \"perhaps\". Probably the more important part was this: \"But treating them as strings instead of objects would be masking an error by the test author. I'd like to get this removed from deepEqual as well.\". Anyway, that discussion should happen in #411.\nI currently don't see the need for a warning system. We should fix bugs in our code and treat issues in user code as failures.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-01T15:20:01Z", "contents": "Closing due to inactivity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 777, "url": "https://github.com/qunitjs/qunit/issues/777", "title": "Method call and returning error \"Assertion after the final `assert.async` was resolved\"", "contents": "Hi, I am trying to test javascript method as below,\nvar spyPostRender = sinon.spy(proxy, \"postRender\");\nvar done = assert.async();\nproxy.init();\ndone();\nassert.ok(spyPostRender.calledOnce, \"postRender() function was called.\");\nwhere init() internally calls an ajax service, however when I do this, I am getting below error. Can anybody help me in resolving this issue?\nAssertion after the final `assert.async` was resolved@ 85 ms\nSource:     \n    at Object.QUnit.assert.Assert.ok (http://code.jquery.com/qunit/qunit-1.17.1.js:1296:8)\n\nFYI - I am using QUnit-1.17.1\nThanks in advance", "createdAt": "2015-03-11T16:05:41Z", "updatedAt": "2015-03-11T19:40:54Z", "closedAt": "2015-03-11T19:40:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "settysreekanth", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "settysreekanth", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 3, "comments_data": [{"authorLogin": "settysreekanth", "authorAssociation": "NONE", "createdAt": "2015-03-11T16:19:44Z", "contents": "@jzaefferer  any suggestions from your side? thanks in advance...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T17:51:08Z", "contents": "Two notes:\n\nThat behavior by design (see #668 and #669 for discussion), though it still needs to be added to the documentation (see https://github.com/jquery/api.qunitjs.com/issues/91).\nYou are not using this correctly. The done callback needs to be invoked only after whatever asynchronous operation it is being used for has actually resolved (not just throwing it on the next line).\n\nYour test would probably end up looking more like this:\nvar spyPostRender = sinon.spy(proxy, \"postRender\");\nvar done = assert.async();\nproxy.init(function() {\n  // Do your real assertions BEFORE invoking the final (i.e. you may have multiple) `done` callback\n  assert.ok(spyPostRender.calledOnce, \"postRender() function was called.\");\n\n  // The final `done` callback MUST be called AFTER all real assertions have been made\n  done();\n});\nOr else perhaps use a sinon.stub to override proxy.postRender to perform your async assertions:\nvar done = assert.async();\n\nvar _postRender = proxy.postRender;\nvar stubPostRender = sinon.stub(proxy, \"postRender\", function() {\n  var result = _postRender.apply(this, arguments);\n\n    // Do your real assertions BEFORE invoking the final (i.e. you may have multiple) `done` callback\n  assert.ok(stubPostRender.calledOnce, \"postRender() function was called.\");\n\n  // The final `done` callback MUST be called AFTER all real assertions have been made\n  done();\n\n  return result;\n});\n\nproxy.init();", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "settysreekanth", "authorAssociation": "NONE", "createdAt": "2015-03-11T19:40:54Z", "contents": "@JamesMGreene I am new to QUnit framework so I was not fully aware of Assert.async() api usage. Thanks for your response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 778, "url": "https://github.com/qunitjs/qunit/issues/778", "title": "Toolbar checkboxes and selects don't work in IE <9", "contents": "The page just reloads with the same URL.", "createdAt": "2015-03-12T18:46:30Z", "updatedAt": "2015-04-03T10:21:32Z", "closedAt": "2015-03-13T09:56:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 781, "url": "https://github.com/qunitjs/qunit/issues/781", "title": "Refactor test/ folder", "contents": "By now we have too many files in a single directory and its getting hard to find specific files when I don't know the exact name. We should refactor the test/ folder.\nI suggest moving files referenced from index.html into a default/ folder (or some other name). The remaining files should be .html files with their matching .js test file. We can then see from there if we need other changes.\nShould probably land some more PRs first, at least those making changes to tests.", "createdAt": "2015-03-16T08:55:16Z", "updatedAt": "2018-12-22T20:31:42Z", "closedAt": "2015-03-26T16:29:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMTA1MTY1Ng==", "title": "1.18.0", "description": "", "createdAt": "2015-04-03T10:16:52Z", "dueOn": null, "number": 7, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 782, "url": "https://github.com/qunitjs/qunit/issues/782", "title": "Splitting core.js into smaller components?", "contents": "Inspecting the source code, it's possible to see that core.js involves several independent components. We could split the file into several other files like:\n\ncore/utilities.js: in which we could have functions like hasOwn or objectType.\ncore/config.js: in which we could have the config object.\ncore/reporter.js: with the logging callbacks...\n\nI think this could help removing the circular dependencies in the project, and that would help to accomplish things like #707 and #735", "createdAt": "2015-03-16T10:57:15Z", "updatedAt": "2015-10-20T19:40:22Z", "closedAt": "2015-07-15T21:53:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "BraulioVM", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-16T11:01:21Z", "contents": "That sounds good, though I wonder if a utilities.js is a good idea - might as well split those functions into individual files.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-16T11:51:32Z", "contents": "Do you mean having a one file for hasOwn, one file for objectType and so on? Could you  please elaborate a bit more on that? I'm not sure I understand the point.\nI do understand that having a file called utilities.js may not give any information about what it contains. Anyway, one file for each function seems to much (unless we put them inside a core/utilities directory, which would give us the same problem I was talking about)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-16T11:56:42Z", "contents": "I guess it depends on the individual functions. objectType is long enough to justify its own file, but various other helpers in core.js aren't. Let's start with a utilities module for the short ones.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-16T20:39:33Z", "contents": "I'm working on a PR right now but I got some problems.\nAs I'm declaring variables in different files, jscsrc will complain every time it finds variable declaration made in several different places with the same scope. For example. if I declare config in core/config.js and QUnit in core/qunit.js,  jscsrc will tell me I need to join var declarations\nAny idea on how to solve this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T10:27:36Z", "contents": "Yes, by dropping the onevar rule: 61fd7fe\nIts a rather recent change in our style guide, most of our projects still use onevar. Now QUnit doesn't anymore, so that error should go away once you rebase.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T10:33:29Z", "contents": "Also had to update .jscsrc, since that also checked for onvar. Which is what you actually ran into. You've still got one failure from jscs, but that is a valid one.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 787, "url": "https://github.com/qunitjs/qunit/issues/787", "title": "Pendings tests", "contents": "Something that came out of a discussion with Yehuda: During a big refactoring they have hundreds of failing tests. They turned them off using QUnit.skip, but that doesn't tell them which of the skipped tests starting passing again at some point. To quickly test changes in passing tests, they ended up with this:\nQUnit.skip = QUnit.test;\nThere's probably a better way to deal with that situation. One idea is to have something like a QUnit.pending method, that has the same signature as QUnit.test(), but will reverse the result. So if all assertions pass, the test fails, if at least one fails, the test passes.\nThe HTML reporter could use a similar marker as QUnit.skip.\nThoughts?\n\nUpdate 2015-04-15:\nAfter some discussion, we came up with this:\n// This test will show up with a \"todo\" badge, with a similar style as the \"skipped\" badge\n// It will show as passed when at least one assertion fails, or fail when all assertions pass\nQUnit.todo( \"this isn't implemented, yet\" function( assert ) {\n  assert.ok( featureTest(), \"waiting for feature\" );\n} );\n\nQUnit.testDone( function( details ) {\n  console.log( details.name, details.todo );\n  //> \"this isn't implemented, yet\" true\n} );\n\nQUnit.log( function( details ) {\n  console.log( details.message, details.todo );\n  //> \"waiting for feature\" true\n} );", "createdAt": "2015-03-17T14:22:55Z", "updatedAt": "2018-12-29T20:26:35Z", "closedAt": "2017-02-18T04:07:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 7, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "wycats", "company": "Tilde, Inc."}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 30, "comments_data": [{"authorLogin": "wycats", "authorAssociation": "NONE", "createdAt": "2015-03-17T14:23:52Z", "contents": "That sounds great to me. We'd use this!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wycats", "authorAssociation": "NONE", "createdAt": "2015-03-17T14:24:39Z", "contents": "It could also be useful for tests that we expect to fail in all browsers, but which mark code that could be removed once browsers started implementing a feature. If we start to see the pending test \"fail\" in Saucelabs, it's time to investigate using the browser feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T14:28:21Z", "contents": "That's an interesting idea. In both cases this would be considered a \"temporary\" test, so I still think some visual highlight makes sense.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T16:05:31Z", "contents": "This was touched on in the conversation that led to QUnit.skip.\nRelevant excerpts:\n#637 (comment)\n\n[TAP] TODO: Expects failure (i.e., a reversal of normal operation\u2014passes are interesting instead of failures, and failures do not effect pass\u2192fail state changes in the containing run/module/suite/test). Reporters must take care to separate TODO failures from non-TODO failures, and should highlight TODO passes.\n\n#637 (comment)\n\ntodo means \"run, but don't let failures fail the containing group\"\n\nEDIT: removed unrelated comment and wholesale endorsement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T16:14:04Z", "contents": "qunit-pending from @JamesMGreene works differently from this proposal, where a test without a function argument like QUnit.test(\"works\"); will become a QUnit.skip.\nThis issue proposes a test that contains at least one failing assertion. Rather than skipping them, they'll run all the assertions and it will FAIL when all of them pass. This way will lead the developer to keep a progressive work on a big refactoring, changing the pending tests to actual tests when they are ready and working.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-03-17T17:31:28Z", "contents": "qunit-pending from @JamesMGreene works differently from this proposal\n\nNoted and updated.\nI also want to add more nuance to this:\n\nthe same signature as QUnit.test(), but will reverse the result. So if all assertions pass, the test fails, if at least one fails, the test passes.\n\nA blind reversal like that is insufficient for general use, because it doesn't highlight what work still needs to happen. TODO failures are still failures, they're just expected. This could manifest in a few different ways, but I think minimal changes require at least something like failedAsExpected in callback details (either double-counted as failed or understood as a distinct category) and distinct HTML reporting.\nOn the other hand, converting unexpected successes to unexpected failures as you propose makes sense to me, but is against the spirit of TAP (\"Should a todo test point begin succeeding, the harness should report it as a bonus\")... if we follow those footsteps instead, it'll mean something like passedUnexpectedly (again, either double-counted as passed or understood as a fifth partition) and possibly also distinct HTML reporting (or possibly reuse of e.g. \"failed\" styling).\nNo matter what, though, this promotes \"expectations\" as a QUnit concept, which is worth keeping in mind.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-20T18:15:23Z", "contents": "I'd say definitely don't call it QUnit.pending().  I'd be behind some name more like QUnit.todo (based on the TAP concept) as mentioned by @gibson042.\nIt's also worth noting that no other JS unit testing framework we've talked to has this functionality. It's marked as \"Status Type\" of \"Inconclusive\" in the table here: js-reporters/js-reporters#4\nWhether that is good or bad remains to be seen....\n\nPros:\n\nWe could be the first and only JS unit testing framework to offer it\n\n\nCons:\n\nWe would be adding a new status type to the list that would not likely be compatible/translate-able into other testing frameworks (e.g. a concern for the JS Reporters project)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-20T19:11:31Z", "contents": "todo sounds better than pending.\nRegarding it as a new functionality, I believe the use case is the argument to sustain this new API feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-09T16:49:17Z", "contents": "A blind reversal like that is insufficient for general use, because it doesn't highlight what work still needs to happen. TODO failures are still failures, they're just expected. This could manifest in a few different ways, but I think minimal changes require at least something like failedAsExpected in callback details (either double-counted as failed or understood as a distinct category) and distinct HTML reporting.\nOn the other hand, converting unexpected successes to unexpected failures as you propose makes sense to me, but is against the spirit of TAP (\"Should a todo test point begin succeeding, the harness should report it as a bonus\")... if we follow those footsteps instead, it'll mean something like passedUnexpectedly (again, either double-counted as passed or understood as a fifth partition) and possibly also distinct HTML reporting (or possibly reuse of e.g. \"failed\" styling).\nNo matter what, though, this promotes \"expectations\" as a QUnit concept, which is worth keeping in mind.\n\nI've read this a few times, but still fail to grasp the essence. Could you or someone else provide a summary beyond \"let's add QUnit.todo()\"? That is, what exactly would we implement in QUnit?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-04-09T19:51:27Z", "contents": "I'll give it a shot. Recall that the QUnit callbacks provide \"failed\" and \"passed\" assertion counts, with an implicit assumption that every assertion is expected to pass. Introducing TODO means violating that assumption, because a run with failed assertions is still a success if they are all associated with TODO tests. We need to capture them in a new \"failed as expected\" count so consumers can behave correctly. We should also add a \"passed unexpectedly\" count so consumers can identify potentially-complete TODOs (e.g., QUnit.testDone(function( testResults ) { toDoNoMore = testResults.passedUnexpectedly > 0 && !testResults.failedAsExpected; \u2026 })). Note that both of these categories can be considered distinct from passed/failed, or can be considered subsets, with the decision probably controlled by exploring effects on backwards compatibility (e.g., whether it's better for a TODO test to report zero or nonzero \"failed\").\nHaving done that, the HTML reporter will need to style expectedly failing and unexpectedly passing tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-10T13:13:01Z", "contents": "That sounds like overkill. Adding a \"todo\" detail to the log and badge to the reporter (styled like the one for skip) and reversing the result of all assertions inside a QUnit.todo() callback should be enough to make this useful. Its then up to the developer to decide what to do with a todo test once it fails, but that should be enough notification.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-04-10T14:22:22Z", "contents": "How is a developer to identify a todo test, especially if they're not using the HTML reporter?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-13T15:24:25Z", "contents": "HTML reporter: \"todo\" badge, similar to \"skip\" badge\nstdout reporter: Put \"todo\" in color in front of test name, or whatever works.\nAs long as the details for the test indicate the \"todo\" state, both can be implemented to output whatever we need.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-04-13T15:57:13Z", "contents": "I'm specifically thinking of Javascript reporters. The current callbacks arguments don't provide that information. Are you proposing a new property in the testDone details and requiring consumers to register at that level if they care about the distinction (e.g., for reporting at suite completion)?\nvar failedAsExpected = 0,\n    toDoNoMore = [];\n\nQUnit.testDone(function( details ) {\n    if ( details.todo ) {\n        failedAsExpected += details.failed;\n        if ( !details.failed ) {\n            toDoNoMore.push( details );\n        }\n    }\n});\nI think I can get on board with that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-14T11:14:25Z", "contents": "I'm not sure what you refer to as \"Javascript reporters\". I was talking about #790.\n\nAre you proposing a new property in the testDone details and requiring consumers to register at that level if they care about the distinction (e.g., for reporting at suite completion)?\n\nYeah, that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-04-14T14:29:08Z", "contents": "I'm not sure what you refer to as \"Javascript reporters\"\n\nA poor choice of words. What matters is the API provided by QUnit\u2014data passed to callbacks should be complete enough to implement any reporter (hence the need for an additional property here). I was just blinded by the presence of failed/passed/total assertion counts in moduleDone and done details, where they are entirely redundant with testDone and will be misleading when including \"todo\" tests.\nAlso, note that there will be edge cases with the interaction between \"todo reversal\" and automatically-added assertions (uncaught exceptions, timeouts, globals pollution, expected count mismatch, etc.).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-15T16:28:20Z", "contents": "@gibson042 @wycats I've updated the ticket above with a summary, can you verify that captures everything we discussed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-04-15T17:04:37Z", "contents": "Looks good except for this:\n\nThis test will pass when this assertion fails, along with all other assertions, or \"fail\" when at least one passes\n\nI expect \"todo\" tests to pass when at least one assertion fails, or \"fail\" when all assertions pass.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-04-16T02:30:10Z", "contents": "I expect \"todo\" tests to pass when at least one assertion fails, or \"fail\" when all assertions pass.\n\nAgreed. It might point some bad practice but some assertions might pass on todo tests by random changes, as a collateral effect. It's good to flag only with the entire test passing rather than single assertions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-17T14:08:25Z", "contents": "Makes sense. Updated the code block above, please take another look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-04-17T14:19:09Z", "contents": "LGTM \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-04-17T14:19:36Z", "contents": "LGTM as well. Let's do it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-06T20:19:06Z", "contents": "Is this feature still wanted? If so, I volunteer to do the work. I'd very much like to see this as my primary project at work would use it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-06T23:34:28Z", "contents": "yes, it would be great to have this feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-26T17:06:52Z", "contents": "I began attempting to implement this and ran into some issues that I think need discussing.\nAdding details.todo makes sense at the testDone /  log reporting level, but beyond that it starts to be a little problematic. For instance, consider a module that contains a normal test and a todo test. When moduleDone is logged, it will have failing assertions with no way to distinguish legitimate failures from expected failures in the todo. This is further amplified during done callbacks. This is similiar to the initial concern @gibson042 had above.\nNow, this is technically able to be worked around by reporters only caring about values at the testDone / log level, but that feels a bit wonky as it invalidates much of the value of the aggregated values we report in moduleDone / done (e.g., having \"failures\" may not actually mean failing).\nThat said, maybe the \"details\" we report in moduleDone / done need to be reworked. I tend to think those hooks should serve more as \"callback\" points than \"reporting hooks\". Thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-05-30T21:47:20Z", "contents": "I don't think implementing TODO should require breaking changes to the module callback data, even though those breaking changes may be independently valuable. I still think framing this in the context of expectations is the way to go, and would imagine a module with two tests (one normal with two passing assertions and one TODO with a passing assertion and a failing assertion) to report something like\n{\n  \"total\": 4,\n  \"passed\": 3,\n  \"failed\": 1,\n\n  // new properties\n  // names and meaning subject to bikeshedding\n  // \u2026but values should always be less than or equal to unqualified analogs\n  \"passedUnexpectedly\": 1,\n  \"failedAsExpected\": 1,\n\n  \u2026\n}\nAs you can see, the new properties are adding context to the existing data (even though passedUnexpectedly is of negligible value at the module level) without altering the present meaning. A consumer that wasn't yet aware of TODO would show expected failures as unexpected (prompting bug reports to update their code), and would fail to highlight expected failures that start passing (a problem so minor that we needn't worry about it IMO).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-01T22:58:04Z", "contents": "I think this approach makes sense. It solves the problems I mention above and maintains backwards compatibility across the board.\nOne thought (largely bikeshedding though) would be to frame the numbers we report both as \"unexpected\". My thinking on this is two-fold: (1) it keeps the naming (and mental model) consistent across the two new variables, and, (2) failedAsExpected only carries real meaning when combined with failed so that you can determine if anything failed that was not supposed to fail.\n{\n  \"total\": 4,\n  \"passed\": 3,\n  \"failed\": 1,\n  \"unexpected\": {\n    \"passed\": 2, // bonuses\n    \"failed\": 2  // problems\n  }\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-06-02T00:45:08Z", "contents": "I'm fine with both new fields being \"unexpected\", or even \"expected\" (e.g., under normal circumstances, and always until this is implemented, \"expected failures\" is zero/undefined). But I do think consumer code will be simpler if we don't wrap them in a sub-object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-07T16:29:17Z", "contents": "I had considered using \"expected\", but that actually doesn't provide enough contextual information. For example, if you have two expected failures from a todo, but wind up with an unexpected failure it would still be reported as:\n{\n  \"failed\": 1,\n  \"expectedFailures\": 2\n}\nGiving you no way of knowing whether that failure was one of the expected ones or not. Since we're primarily concerned with the \"unexpected\" events, reporting those doesn't have that issue.\n\nI do think consumer code will be simpler if we don't wrap them in a sub-object.\n\nThat's fine with me, I'm particularly concerned with naming consistency over the exact shape. I'm going to pursue an implementation following like so:\n{\n  \"total\": 4,\n  \"passed\": 3,\n  \"failed\": 1,\n  \"passedUnexpectedly\": 1,\n  \"failedUnexpectedly\": 0\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wycats", "authorAssociation": "NONE", "createdAt": "2017-04-29T17:48:57Z", "contents": "Incidentally, my first comment here was that if this landed we'd use it. Glimmer is already using it :)\nThanks for keeping on top of this over a very long development cycle. It's why I love qunit.", "reactions_count": 2, "reactions_data": ["HOORAY", "HOORAY"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "meta-ready", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 788, "url": "https://github.com/qunitjs/qunit/issues/788", "title": "improve grunt watch task", "contents": "In a private chat I saw @jzaefferer's will to improve speed on our grunt watch task.\nCurrent options to try (not exclusive):\n\ngrunt-contrib-watch spawn and interrupt options.\ngrunt-concurrent\ngrunt-newer\n\nSome goals:\n\ngrunt watch needs to be faster\ndon't rebuild src files when only test files are modified\ncan we use those tools to run jshint/jscs only at the modified files (src or each test files)\nrun tests in parallel (if this goes faster)", "createdAt": "2015-03-18T15:36:08Z", "updatedAt": "2015-12-09T16:09:26Z", "closedAt": "2015-12-09T16:09:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "rdugue", "company": null}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "rdugue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-23T12:02:26Z", "contents": "I made some changes on a branch to run jshint/jscs only modified files but it is actually making grunt watch run ~2 seconds slower for me.  You can see the change I made here.  I'm going to test some more.\n--edit: grunt watch seems to run significantly faster with spawn set false and interrupt set true.\n--edit 2: Running tasks with grunt-concurrent seems to also improve speed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T16:09:25Z", "contents": "Closed by #886", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 789, "url": "https://github.com/qunitjs/qunit/issues/789", "title": "Async module hooksy", "contents": "When needing to use some asynchronous setup, on QUnit 1.x you can be able to call to QUnit.stop() inside the module setup hook, but since in QUnit 2.0 it will be deprecated, seems there no posibility to do it. How could it be possible to have an async setup on QUnit 2.0?", "createdAt": "2015-03-18T15:38:19Z", "updatedAt": "2015-10-16T20:41:53Z", "closedAt": "2015-10-16T20:41:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "piranna", "company": "CTO @lingbe"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 16, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T15:42:41Z", "contents": "edit: this example won't work, see reasons below\nmodule( \"foo\", {\n  beforeEach: function( assert ) {\n    this.done = assert.async();\n\n    // or assert.done = assert.async();\n  }\n});\n\ntest( \"bar\", function( assert ) {\n  assert.ok( true );\n  this.done();\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-18T15:45:21Z", "contents": "Thanks @leobalter, there's the same solution at http://stackoverflow.com/questions/27717784/qunit-beforeeach-aftereach-async, althought the docs says nothing about this... :-(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T15:46:52Z", "contents": "\"and also to create properties that will be shared on the context of each test\" and there's also an example there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-18T15:48:52Z", "contents": "I wanted to say that it says nothing about the assert argument on the beforeEach and afterEach hook functions...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T16:04:15Z", "contents": "Actually, there's an issue we just found: QUnit is not finishing the hook method because of the async call:\nhttp://jsbin.com/dokolimuhi/1/edit?js,output", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-18T16:09:53Z", "contents": "Ok, then I think I'll wait until this is fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T16:30:46Z", "contents": "The thing is, if we make assert.async interoperable between the before and after hooks, we would break the order of them being called.\nWithin the current QUnit state, the afterEach hook will be called only after the async tests are done on the test. The same thing should happen the beforeEach hook. If you call the assert.async() there, you need to finish your async calls in the same block, before running the test function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-18T17:50:43Z", "contents": "Within the current QUnit state, the afterEach hook will be called only after the async tests are done on the test. The same thing should happen the beforeEach hook. If you call the assert.async() there, you need to finish your async calls in the same block, before running the test function.\n\nWhat's I'm actually done in 1.x is call QUnit.stop() on setup, and\nuntil I don't call QUnit.start() also on setup, the test is not\nexecuted. I think the same can be done on beforeEach: if you call\nassert.async() inside it, the test is not called until the beforeEach\ndone() is not executed.\n\n\"Si quieres viajar alrededor del mundo y ser invitado a hablar en un\nmonton de sitios diferentes, simplemente escribe un sistema operativo\nUnix.\"\n\u2013 Linus Tordvals, creador del sistema operativo Linux", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T18:15:46Z", "contents": "the test is not called until the beforeEach done() is not executed.\n\nyes.\nbtw, beforeEach and setup are exactly the same functions, and they work in the same way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-18T19:48:48Z", "contents": "btw, beforeEach and setup are exactly the same functions, and they work in the same way.\n\nThen there's no problem with the current behaviour and it's working correctly (except the fact that currently it gets blocked), isn't it?.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T19:57:46Z", "contents": "All of the behavior discussed here is intentional.\n\nThe setup/beforeEach hooks must synchronize before the test body/callback can be run.\nThe test body/callback must synchronize before the teardown/afterEach hooks can be run.\n\nYou can run async operations in setup/beforeEach that you don't need finished until the test body/callback... just don't use assert.async() to accomplish them. \ud83d\ude04\nIf you have suggestions for an alternative API that would allow for similar async synchronization spanning more than 1 of the test lifecycle phases, I'm certainly open to ideas and hashing out the rules for expected behavior. I'm not currently sure how that functionality would be useful/reliable but I wouldn't doubt it if I am missing/overlooking something.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piranna", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-18T20:31:22Z", "contents": "Problem is related to the stop-continue issue: if beforeEach is executed in one shot and test is executed inmediatly, although you could call to async() inside beforeEach, test will not wait, so you can't do async tasks in beforeEach. With stop() and start(), the trick is about call stop() on setup and when its async operation has finished, call to start() so it can be able to continue and exec test(), and that's just the missing feature I'm talking about, that without stop() and start() this is not possible :-D\nI find having the full assert object in beforeEach and afterEach is a bit bloated (except for doing some general asserts that have to be done on all the tests, for example regarding to its initialization), but adding to them some wait/continue methods would be a good idea... Another option would be that you could return a Promise on beforeEach so test don't get executed until it got to be resolved, so this could give some flexiblity to do some async tasks on beforeEach. I know that QUnit now understand promises, but seems only when returned on test and not on beforeEach :-/.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:13:07Z", "contents": "To revive an old discussion:\n\nI know that QUnit now understand promises, but seems only when returned on test and not on beforeEach\n\nDo you have a test page that shows that issue? There probably is a lack of documentation, but the implementation allows beforeEach and afterEach to run async and deals with promises. The meat of that is in queueHook.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T22:16:01Z", "contents": "I could maybe picture adding something like a Boolean parameter to the assert.async() method signature that would allow that counter/semaphore to remain unresolved until the very end of the test instance's lifecycle, e.g.\n(function(module, test) {\n\nmodule('long async', {\n  beforeEach: function(assert) {\n    this.overDone = assert.async(true);\n  },\n  afterEach: function (assert) {\n    this.overDone();\n  }\n});\n\ntest('actual test', function(assert) {\n  assert.strictEqual(1, 1.0);\n});\n\n})(QUnit.module, QUnit.test);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T16:07:57Z", "contents": "I could maybe picture adding something like a Boolean parameter to the assert.async() method signature that would allow that counter/semaphore to remain unresolved until the very end of the test instance's lifecycle, e.g.\n\nWhy would you want that? As far as I can tell from the discussion above, that was never the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:41:53Z", "contents": "Closing due to inactivity. For anyone still interested in this, I think my previous comment still applies:\n\nDo you have a test page that shows that issue? There probably is a lack of documentation, but the implementation allows beforeEach and afterEach to run async and deals with promises. The meat of that is in queueHook.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 793, "url": "https://github.com/qunitjs/qunit/issues/793", "title": "Diff is not shown even when two objects are different", "contents": "For the following deepEqual comparison, no diff is displayed. Is this an expected behavior?\nassert.deepEqual(\n    {\n        d: {\n            c: {\n                g: {\n                    j: {\n                        k: {\n                            n: {\n                                r: \"s\",\n                                s: [ 1, 2, 3, 4 ],\n                                t: undefined,\n                                u: 1,\n                                v: {\n                                    w: {\n                                        x: {\n                                            y: \"Hola!\",\n                                            z: \"1\"\n                                        }\n                                    }\n                                }\n                            },\n                            q: [],\n                            p: 1 / 0,\n                            o: 99\n                        },\n                        l: undefined,\n                        m: null\n                    }\n                }\n            }\n        }\n    },\n    {\n        d: {\n            c: {\n                g: {\n                    j: {\n                        k: {\n                            n: {\n                                r: \"p\",\n                                t: undefined,\n                                u: 0,\n                                s: [ 1, 2, 3 ],\n                                v: {\n                                    w: {\n                                        x: {\n                                            z: null,\n                                            y: \"Yahoo!\"\n                                        }\n                                    }\n                                }\n                            },\n                            o: 99,\n                            p: 1 / 0,\n                            q: []\n                        },\n                        l: undefined,\n                        m: null\n                    }\n                }\n            }\n        }\n    }\n, true);\nOutput:\n\nDiff is also not show in various other complex object assertions too.", "createdAt": "2015-03-21T12:29:18Z", "updatedAt": "2015-03-22T02:26:50Z", "closedAt": "2015-03-22T02:18:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "shivamdixit", "company": "Uber "}, {"login": "gauravmittal1995", "company": null}, {"login": "scottgonzalez", "company": "Clipper Magazine"}], "comments_count": 4, "comments_data": [{"authorLogin": "gauravmittal1995", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-21T22:17:35Z", "contents": "I think that this is because https://github.com/jquery/qunit/blob/master/src/dump.js#L163#L165. Here since your dept at which the difference is seen is more than the default MaxDepth(5) , It gives [Object object]. Also here the diff is not seen because even though its different (and that's why it gives an error), the displayed text is essentially the same(i.e object Object). If you change the MaxDepth (https://github.com/jquery/qunit/blob/master/src/dump.js#L130) to 7 or 8, it will show a diff.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-22T02:18:42Z", "contents": "@gauravmittal1995 Thanks, I was not aware of maxDepth property.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-22T02:20:41Z", "contents": "This would require exposing some additional logic, but it might be interesting to show a notice next to the assertion. Potentially even providing a link to rerun the test with a higher max depth.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-22T02:26:50Z", "contents": "@scottgonzalez I think that's a great idea. Shall I open an issue for the same?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 798, "url": "https://github.com/qunitjs/qunit/issues/798", "title": "Invalid test for autostart", "contents": "test/autostart.html currently contains an invalid test for the autostart feature. The QUnit.load() override is implemented incorrectly, resulting in a false positive. The method isn't actually overloaded and QUnit.load() is actually called instantly.", "createdAt": "2015-03-23T13:22:30Z", "updatedAt": "2015-10-20T19:40:29Z", "closedAt": "2015-05-15T15:30:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "BraulioVM", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "BraulioVM", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-30T13:33:20Z", "contents": "I think this might be already fixed with my last PR", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 805, "url": "https://github.com/qunitjs/qunit/issues/805", "title": "Run test/amd.html through PhantomJS", "contents": "See #791 (comment)\nWaiting for asciidisco/grunt-qunit-istanbul#43 to be merged and released.", "createdAt": "2015-04-01T15:15:48Z", "updatedAt": "2015-04-03T09:42:11Z", "closedAt": "2015-04-03T09:42:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 806, "url": "https://github.com/qunitjs/qunit/issues/806", "title": "Integrate website update into release script", "contents": "Related to #736, we should automate updating the website as part of the release script. At the end we should be able to remove most of this: https://github.com/jquery/qunit#releases", "createdAt": "2015-04-01T15:23:38Z", "updatedAt": "2018-12-22T20:19:06Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 807, "url": "https://github.com/qunitjs/qunit/issues/807", "title": "QUnit 1.18.0 error with karma-qunit and requirejs.", "contents": "I get this error when testing my application with QUnit 1.18.0:\nPhantomJS 1.9.8 (Linux) ERROR\n  Error: Mismatched anonymous define() module: function () {\n        return QUnit;\n    }\n  http://requirejs.org/docs/errors.html#mismatch\n  at /home/travis/build/ccnmtl/dmt/node_modules/requirejs/require.js:141\nPhantomJS 1.9.8 (Linux): Executed 0 of 0 ERROR (0.044 secs / 0 secs)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n\nBuild log is here:\nhttps://travis-ci.org/ccnmtl/dmt/builds/57026820\nDowngrading to 1.17.1 fixes the issue.", "createdAt": "2015-04-03T13:40:46Z", "updatedAt": "2016-06-09T06:00:44Z", "closedAt": "2015-04-09T17:38:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nikolas", "authorAssociation": "NONE", "participants_count": 12, "participants_data": [{"login": "nikolas", "company": "Columbia University"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "jzaefferer", "company": null}, {"login": "patkoscsaba", "company": "Syneto"}, {"login": "ldez", "company": "@Containous"}, {"login": "cfuehrmann", "company": null}, {"login": "bworsfold", "company": null}, {"login": "tiriana", "company": "@egnyte"}, {"login": "zensatellite", "company": null}, {"login": "sneakyfildy", "company": "IPONWEB"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "neisbut", "company": null}], "comments_count": 21, "comments_data": [{"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-03T13:44:20Z", "contents": "Have you looked through the RequireJS documentation about that error to make sure you're not doing anything they tell you not to do?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-09T17:38:41Z", "contents": "Closing due to inactivity.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "patkoscsaba", "authorAssociation": "NONE", "createdAt": "2015-04-10T05:36:14Z", "contents": "This issue should be reopened. I am experiencing the same problem. I can't get 0.18.0 to work with require.js on our project. This has nothing to do with require.js documentation as suggested above as far as I can tell. All our tests are running just fine with 0.17.1. The only change between working and braking is the update to qunit 0.18.0.\nMaybe qunit itself does something wrong from require.js' point of view?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-10T12:21:40Z", "contents": "Well, 0.18.0 has proper AMD support, so it's not that unlikely that you were doing some weird to get 0.17.x working, which is now causing problems. There are tests for AMD in QUnit, so you'll need to provide a reduced test case for us to look at.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikolas", "authorAssociation": "NONE", "createdAt": "2015-04-10T18:08:43Z", "contents": "The issue is that, as of version 1.18.0, qunit now registers itself as an AMD module:\nif ( typeof define === \"function\" && define.amd ) {\n    define( function() {\n        return QUnit;\n    } );\n    QUnit.config.autostart = false;\n}\nThat will throw an exception on any site that's using requirejs, because it's being run from outside of requirejs's require.config().\nThe django-debug-toolbar project has also struggled with this issue. Their solution is to re-define define: jazzband/django-debug-toolbar#591", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-10T19:02:47Z", "contents": "@nikolas @patkoscsaba please, please provide a test page that we can run, otherwise we can't do anything here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "patkoscsaba", "authorAssociation": "NONE", "createdAt": "2015-04-11T10:07:48Z", "contents": "I prepared an IntelliJ project here: https://dl.dropboxusercontent.com/u/18447347/QUnitTesting.tar.gz\nIt contains a package.json, so just npm install to get all the karma, requirjs, etc. modules. You can run the karma tests from IntelliJ or from the console. As you wish. There is a simple code in src, and a example test in the test directory doing just a QUnit.asert.ok().\nRegardless, the error is there:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-04-13T15:16:35Z", "contents": "As far as I can tell, that is a problem introduced by Karma. Loading QUnit with requirejs works fine. I guess that Karma tries to load QUnit separetely, outside of requirejs, or under a different id. I suggest you report this against the karma-qunit adapter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ldez", "authorAssociation": "NONE", "createdAt": "2015-04-19T03:38:59Z", "contents": "The problem can be dirty solve like that: in karma.conf.js replace frameworks: [ 'qunit', 'requirejs'], by frameworks: [ 'requirejs', 'qunit'],", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "cfuehrmann", "authorAssociation": "NONE", "createdAt": "2015-07-24T15:13:38Z", "contents": "Just to confirm, Idez' solution worked for me too. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bworsfold", "authorAssociation": "NONE", "createdAt": "2015-11-25T19:12:21Z", "contents": "This worked for me as well using karma@0.13.15, karma-qunit@1.8, karama-requiresjs@0.2.2 and requirejs@2.1.22.  Seems the karma initializer just puts them in the wrong order.  Thanks for sharing!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tiriana", "authorAssociation": "NONE", "createdAt": "2015-11-30T11:03:40Z", "contents": "@ldez I didn't want to believe it, but it works perfectly fine. thx.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zensatellite", "authorAssociation": "NONE", "createdAt": "2015-12-07T19:15:11Z", "contents": "@ldez ++", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikolas", "authorAssociation": "NONE", "createdAt": "2016-02-11T16:07:18Z", "contents": "ldez's solution works for me as well. Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sneakyfildy", "authorAssociation": "NONE", "createdAt": "2016-03-09T09:53:38Z", "contents": "this is dirty, but it works, so, who's in charge to fix that? Which framework?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-09T14:30:22Z", "contents": "@sneakyfildy if you read the old comments this might be fixed at the https://github.com/karma-runner/karma-qunit.\nIf you are asking how to solve implementing the dirty fix, is probably whoever is using it while the karma-qunit adapter is not fixed.\nMeanwhile, remember these are all open source projects, mostly maintained by developers using their free time. Don't be mean and demand stuff to get fixed to you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikolas", "authorAssociation": "NONE", "createdAt": "2016-03-09T14:48:01Z", "contents": "@sneakyfildy I think this fix belongs in the karma-qunit documentation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sneakyfildy", "authorAssociation": "NONE", "createdAt": "2016-03-09T16:50:20Z", "contents": "@leobalter I'm asking just to get the info, where I can understand the fix better, because I have other projects with similar setup, which work without it. I'm not demanding anything.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikolas", "authorAssociation": "NONE", "createdAt": "2016-03-09T17:06:49Z", "contents": "yeah i didn't interpret any hostility in your original message. and asking direct questions like yours is the best way to get things done.. no worries.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-09T18:15:21Z", "contents": "I'm sorry I misinterpreted your message.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "neisbut", "authorAssociation": "NONE", "createdAt": "2016-06-09T06:00:44Z", "contents": "@idez+!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 808, "url": "https://github.com/qunitjs/qunit/issues/808", "title": "Warning qunit not compatible with node >= 12", "contents": "npm WARN engine qunit@0.7.5: wanted: {\"node\":\">=0.6.0 < 0.12.0\"} (current: {\"node\":\"0.12.0\",\"npm\":\"2.5.1\"})", "createdAt": "2015-04-04T10:54:44Z", "updatedAt": "2016-11-01T16:29:14Z", "closedAt": "2015-04-05T01:43:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dhowe", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dhowe", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-04-05T01:43:32Z", "contents": "That's not our package, please file an issue with kof/node-qunit.\nIf you would like to use raw QUnit on Node.js, then you want our package qunitjs instead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dhowe", "authorAssociation": "NONE", "createdAt": "2015-04-05T02:29:28Z", "contents": "ah yes, I see that now, though I'm not using node-qunit directly (and it isn't listed as a dependent of anything on npm) -- any idea where its coming from?\n\"devDependencies\": {\n\"argsparser\": \"0.0.6\",\n\"del\": \"^1.1.1\",\n\"gulp\": \"^3.8.11\",\n\"gulp-concat\": \"^2.3.3\",\n\"gulp-jshint\": \"^1.7.0\",\n\"gulp-qunit\": \"^1.2\",\n\"gulp-rename\": \"^1.2.0\",\n\"gulp-replace\": \"^0.4.0\",\n\"gulp-scp\": \"0.0.3\",\n\"gulp-symlink\": \"^1.1.0\",\n\"gulp-task-listing\": \"^0.3.0\",\n\"gulp-uglify\": \"^0.3.1\",\n\"qunit\": \"^0.7\",\n\"qunitjs\": \"^1.14.0\",\n\"yargs\": \"^3.4.5\"\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-04-05T04:05:18Z", "contents": "The \"qunit\" package on npm is the node-qunit package. As James said, use qunitjs for the raw qunit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dhowe", "authorAssociation": "NONE", "createdAt": "2015-04-05T04:07:42Z", "contents": "got it, thanks -- though what I'm trying to do is run my qunit tests in node, without phantomjs, so I was using the qunit executable to do this from a gulp", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 814, "url": "https://github.com/qunitjs/qunit/issues/814", "title": "Filter does not match exact case", "contents": "If you search for a test using the exact case instead of lower case, the filter doesn't match.", "createdAt": "2015-04-24T12:18:33Z", "updatedAt": "2016-11-01T16:29:14Z", "closedAt": "2015-04-24T12:22:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "4thex", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "4thex", "company": "4THEX SOLUTIONS, LLC."}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 1, "comments_data": [{"authorLogin": "4thex", "authorAssociation": "NONE", "createdAt": "2015-04-24T12:22:01Z", "contents": "This seem to have been fixed in 1.18.0. Sorry. Closing issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 815, "url": "https://github.com/qunitjs/qunit/issues/815", "title": "browserstack-runner improvements", "contents": "Currently we run all our testsuites against most of our supported browsers for PRs and commits to master. With plenty of failures due to timeouts, this doesn't provide near as much value as it should. I'd like to use this issue to discuss some options for getting more values from this setup.\nOne idea: Only run the main tests for \"all\" commits, then set up a separate browserstack.json (or browserstack.js, might work) that runs all suites in (more|all) browsers, but only for some commits, e.g., all commits to master. The latter could also do multiple runs, each running just one of the testsuites, if that helps avoid the timeouts.\nMeanwhile we should use https://browserstack.com/automate to track failing tests, check which ones take forever to run (causing later suites to time out, since the 5 minute window is over), along with any other failures, and consistently report those back to support@browserstack.com. If we keep ignoring these issues, we won't make any progress.", "createdAt": "2015-04-25T14:01:01Z", "updatedAt": "2015-09-10T18:46:48Z", "closedAt": "2015-09-10T18:46:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 816, "url": "https://github.com/qunitjs/qunit/issues/816", "title": "Allow assert.async callback to \"wrap\" actual async callback and handle errors?", "contents": "It would be really excellent if there was an easy way to have inadvertent exceptions from async callbacks be noted in an assertion and the test runner restarted, much like what is already done in the synchronous and promise pathways. (As it is, the test runner chokes completely in these cases because QUnit.start(), or equivalent, is not called.)\n\nSynchronous pathway: https://github.com/jquery/qunit/blob/1.18.0/src/test.js#L106-L120\nPromise pathway: https://github.com/jquery/qunit/blob/1.18.0/src/test.js#L326-L341\n\nWhat I would like to see is something similar for when an asynchronous callback throws an error and the async callback doesn't have anything QUnit on its call stack.\nI think this could be implemented with a generic callback-wrapping function that basically has a try/catch in it and handles errors in a similar way as the two sections of code I've outlined above. I'll write up a pull request in the next few days to outline what I'm getting at, but here's a very rough API:\n// In Assert.prototype\nasync: function () {\n    // do the usual setup of async\n    var done = function () {\n        // do the usual cleanup of async\n    };\n    done.wrapError = function (asyncCallback) {\n        return function wrapError () {\n            try {\n                asyncCallback.apply(null, arguments);\n            } catch (e) {\n                // Get the current test object using QUnit.config.current or similar\n                // Call QUnit.pushFailure() if we have a test object\n                done();     // Equivalent to QUnit.start()\n            }\n        };\n    };\n    return done;\n}\n\nUsage:\nQUnit.test(\"Wrapping an error callback\", function (assert) {\n    var done = assert.async();\n    setTimeout(done.wrapError(function () {\n        throw new Error();\n        // Previously would halt the test runner, but now would allow tests to continue running\n    }), 50);\n});\n\nOne could easily envision a similar API which would just invoke the done() callback on success or error, allowing consumers to avoid invoking done() in the callback itself. (I don't think there's a huge loss of readability either, since done is still mentioned in the function wrap invocation. It's just a matter of choosing an intelligent function name to complement or replace wrapError.)\nAny thoughts?", "createdAt": "2015-04-29T15:12:46Z", "updatedAt": "2017-03-11T18:04:26Z", "closedAt": "2017-03-11T18:04:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 6, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "scottgonzalez", "company": "Clipper Magazine"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 19, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-04-30T02:33:34Z", "contents": "Thanks for the input, @platinumazure! (And on a personal note: Hi, Kevin! Hope all is well. \ud83d\udc4b)\nMy thoughts:\nSynchronous flows and async Promises both have 1-2 guaranteed and consistent resolution/exit points, which makes testing them pretty easy. The unfortunate burden of asynchronous testing [without Promises] is that there is NOT a limited number of exit points. The scenario you demonstrated for the theoretical API change works wonderfully is your async call stack is only 1 level deep but falls flat if there is any async chaining, continuation passing, etc. involved.\nFor example:\nvar syncCallbackInvokedAsynchronously = function() {\n  // This will be caught. YAY!  =D\n  throw new Error();\n};\n\nQUnit.test(\"Working wrapping an error callback - USEFUL!\", function (assert) {\n  var done = assert.async();\n  setTimeout(\n    done.wrapError(syncCallbackInvokedAsynchronously),\n    50\n  );\n});\n\n\nvar asyncCallbackInvokedAsynchronously = function() {\n  setTimeout(\n    function() {\n      // This will not be caught... BOO-HISS!  =(\n      throw new Error();\n    },\n    50\n  );\n};\n\nQUnit.test(\"Non-working wrapping an error callback - USELESS!\", function (assert) {\n  var done = assert.async();\n  setTimeout(\n    done.wrapError(asyncCallbackInvokedAsynchronously),\n    50\n  );\n});\nThe only way I know of to track that type of flow is to duck-punch all of the core asynchronous functions (setTimeout/clearTimeout, setInterval/clearInterval, setImmediate/clearImmediate, requestAnimationFrame/cancelAnimationFrame, addEventListener/removeEventListener, XMLHttpRequest, etc.) so that you can implement long-tail/async stack tracing (a la Q, {Track:js}, Chrome dev tools, etc.).\nTo date, QUnit has not yet gone down the path of duck-punching any core Web Platform functions in such a manner, so we will definitely need to discuss further.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-30T05:49:58Z", "contents": "I definitely agree that QUnit should not go down the path of stubbing out\nsetTimeout and relatives. That's not what I'm suggesting and that's not a\nuse case I'm trying to support here.\nMy thoughts are as follows:\n\n\nIt is relatively common for test cases to involve only one level of\nasynchronous calling, just in the test function. My proposal solves this\ncommon case very well.\n\n\nAs for multiple levels of async calls, 98+% of the time those can be\nbroken down into two types:\na. The extra async is introduced in a test. In this case, the solution\nto that is the same as the solution to multiple asyncs that are not nested:\nUse multiple assert.async calls in the test, and ensure each one is\ncalled in due time (including possibly by the proposed new API). The\nnon-nested case is documented in the documentation for assert.async on\nthe website.\nb. The extra async is introduced in the code under test. In this case,\nthe answer remains the same as before this proposal: Use a mock/stub\nlibrary like e.g., sinon.js to handle that, and understand that that is\nbeyond the scope of QUnit.\n\n\nIt's probably worth clarifying that the only issue I'm really trying to\nsolve is, when part of a test (as in, code in function scope of a test) is\nasynchronous and QUnit simply can't track it due to the call stack not\nincluding anything in QUnit.test (etc.), resulting in an unexpected test\nrunner halt. That violates the principle of least surprise to me and I\nthink it's worth looking into. As for any async problems that come from\ncode under test being asynchronous, like I said, that should be handled via\nstubbing/mocking techniques or by refactoring the code to make it more\ntestable.\nAm I not understanding your point fully? If I'm missing something, please\nlet me know.\nOn Apr 29, 2015 9:33 PM, \"James M. Greene\" notifications@github.com wrote:\n\nThanks for the input, @platinumazure https://github.com/platinumazure!\n(And on a personal note: Hi, Kevin! Hope all is well. [image: \ud83d\udc4b])\nMy thoughts:\nSynchronous flows and async Promises both have 1-2 guaranteed and\nconsistent resolution/exit points, which makes testing them pretty easy.\nThe unfortunate burden of asynchronous testing [without Promises] is that\nthere is NOT a limited number of exit points. The scenario you\ndemonstrated for the theoretical API change works wonderfully is your async\ncall stack is only 1 level deep but falls flat if there is any async\nchaining, continuation passing, etc. involved.\nThe only way I know of to track that type of flow is to duck-punch all of\nthe core asynchronous functions (setTimeout/clearTimeout, setInterval/\nclearInterval, setImmediate/clearImmediate, requestAnimationFrame/\ncancelAnimationFrame, addEventListener/removeEventListener, XMLHttpRequest,\netc.) so that you can implement long-tail/async stack tracing (a la Q\nhttps://github.com/kriskowal/q, {Track:js}\nhttps://docs.trackjs.com/JavaScript_Api_Reference/trackJs.configure/callback/callback.bindStack,\nChrome dev tools\nhttp://www.html5rocks.com/en/tutorials/developertools/async-call-stack/,\netc.).\nTo date, QUnit has not yet gone down the path of duck-punching any core\nWeb Platform functions in such a manner, so we will definitely need to\ndiscuss further.\n\u2014\nReply to this email directly or view it on GitHub\n#816 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-30T05:54:20Z", "contents": "And now I'm on the website, your code sample renders... My basic points are unchanged: the second case is converted either by multiple assert.async() calls (if the nested async is defined in the test) or by a mock/stub library otherwise.\nI just want to make the common stuff, within a test, easy (I.e., setTimeout or require embedded in a test itself). I don't want to turn QUnit into a stub library.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-30T14:49:55Z", "contents": "I'm -1 on this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-30T14:57:39Z", "contents": "@scottgonzalez Would love to hear why.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-30T15:35:49Z", "contents": "It's awkward and potentially misleading.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-01T17:47:30Z", "contents": "@scottgonzalez Well, I can understand that the proposed API needs some work. Are you in favor of the concept, at least (that is, shoring up an inconsistency in exception handling between synchronous, promise, and asynchronous test code)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scottgonzalez", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-01T20:12:17Z", "contents": "I'm not in favor of the concept.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:05:39Z", "contents": "It's probably worth clarifying that the only issue I'm really trying to solve is, when part of a test (as in, code in function scope of a test) is asynchronous and QUnit simply can't track it due to the call stack not including anything in QUnit.test (etc.), resulting in an unexpected test runner halt. That violates the principle of least surprise to me and I think it's worth looking into. As for any async problems that come from code under test being asynchronous, like I said, that should be handled via stubbing/mocking techniques or by refactoring the code to make it more testable.\n\nThat's something we should address, but not with the suggested solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-18T15:22:54Z", "contents": "That's something we should address, but not with the suggested solution.\n\nI've no doubt there is a better approach out there somewhere. If you have an idea how it should be done, let me know what you're thinking and I'm happy to write up a pull request to get things started. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:26:56Z", "contents": "For a start, could you do a PR that modifies one of the existing test page and makes the runner halt? Preferably with a scenario that is likely to occur in practice.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-18T15:28:09Z", "contents": "Sure. Should the target branch be anything besides master?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:31:15Z", "contents": "master is fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:40:35Z", "contents": "@platinumazure I guess this is also something that fell out of sight? Would be great if you could still put together the failure case we discussed above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-16T20:51:11Z", "contents": "Yeah, I've been trying to think of one besides my RequireJS case with no\nluck. Still noodling on this one.\nOn Oct 16, 2015 3:40 PM, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n\n@platinumazure https://github.com/platinumazure I guess this is also\nsomething that fell out of sight? Would be great if you could still put\ntogether the failure case we discussed above.\n\u2014\nReply to this email directly or view it on GitHub\n#816 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:52:53Z", "contents": "Okay, thanks. Let us know either way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-12T18:01:24Z", "contents": "@platinumazure what's the current status on this one? We did some changes on our RequireJS since last year and that might be slightly better to handle now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T13:03:45Z", "contents": "@leobalter No meaningful updates at this time. This has become less of an issue for us since we were able to use require.in error to trap most errors. I still think this could be useful in general but I haven't had the time to fulfill your (reasonable) requirements around proving that this is a real issue.\nIf you like, you can close this and I can reopen when I have something to add to the discussion. Sound good?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-11T18:04:26Z", "contents": "Closing, as global error handlers can now invoke QUnit.onError and (when #1108 lands) resume the test runner.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 817, "url": "https://github.com/qunitjs/qunit/issues/817", "title": "[QUESTION] is it possible to fail a test in the QUnit.testDone callback?", "contents": "In the QUnit 2.0 series, the assert is no longer global (good thing!) and is passed into each test's callback. When I made this upgrade, my testDone callback is no longer failing tests like it had been (because I had been using the global assert). I had some code that would check to see that all requests were properly mocked and if there were too many or too few mocks, I would fail the test. I see my error messages but doing a QUnit.assert.ok(false, \"error message\") has no effect on the test. Can someone please advise how I would be able to fail the test that just run from inside the testDone callback?\nThanks!", "createdAt": "2015-05-04T13:11:08Z", "updatedAt": "2015-05-18T15:00:57Z", "closedAt": "2015-05-18T15:00:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "williamsbdev", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "williamsbdev", "company": "Ramsey Solutions"}, {"login": "jzaefferer", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-04T14:01:09Z", "contents": "That's an interesting usecase, though one that the logging callbacks like testDone were never intended for. For this kind of assertion, I recommend using the module's afterEach callback instead. You may still need a bit of duplication to apply that check for all modules, but that's currently the best option. Let us know if that works for you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "williamsbdev", "authorAssociation": "NONE", "createdAt": "2015-05-04T17:38:51Z", "contents": "This will be in every module and so it is not desirable to put this into each afterEach. Would you like me to open a feature request issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-04T18:19:17Z", "contents": "Assuming you abstract the necessary logic, you'd add 3-4 LOC per module. Also assuming one module per file, a reader of that file could quickly figure out where that shared setup is defined, compared to having it in just one place somewhere else.\nThat said, we've had a discussion about that feature before, even implemented it at some point, but dropped it before release. I can't remember that name of the ticket right now, but can look for it later...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "williamsbdev", "authorAssociation": "NONE", "createdAt": "2015-05-11T02:10:38Z", "contents": "Correct me if I'm wrong but even in the afterEach, it is not possible to fail a test. So while I really don't want to add something to every module, I don't think it's even possible without wrapping the test function and doing my custom failure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-05-11T12:11:59Z", "contents": "http://jsbin.com/kotekikoti/1/edit?html,js,output", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T15:00:57Z", "contents": "So the answer to the question in the subject, can a testDone callback fail a test, is no, it cannot. The suggested workaround is to use module level callback (beforeEach, afterEach).\nThe attempt to implement global beforeEach/afterEach callbacks can be found in #633, while #681 discusses why we ended up removing them again. As I wrote there:\n\nit should be trivial to bring this back in whatever form we decide on later.\n\nThat's still a discussion we can have, though since this issue isn't about that, I'm going to close this for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 818, "url": "https://github.com/qunitjs/qunit/issues/818", "title": "1.18.0 breaks phantomjs tests.", "contents": "I noticed when I updated to 1.18.0 my phantomjs tests started not ending with zero test runs.\nSee https://travis-ci.org/lodash/lodash-amd/builds/61941189.\nOnce I reverted to 1.17.1 things started working again.\nSee https://travis-ci.org/lodash/lodash-amd/builds/62009692", "createdAt": "2015-05-10T22:38:49Z", "updatedAt": "2015-08-25T16:11:09Z", "closedAt": "2015-06-18T11:06:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "kenips", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2015-05-10T22:57:29Z", "contents": "Narrowed it down to this change.\nIt's related to when PhantomJS is not running a web page so when script can access the phantom object. There also happens to be document object with a readyState of complete.\nPreviously when it hit the addEvent( window, \"load\", QUnit.load ); it was ignored in this mode. With QUnit 1.18.0 in this mode it now starts QUnit, with QUnit.load, where before it left it up to scripts to call QUnit.load().\nThe issue is resolved if the check is modified to:\nif ( typeof phantom == 'undefined' && document.readyState === \"complete\" ) {\nRelated to #791.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T14:56:18Z", "contents": "Thanks for tracking down the issue, that certainly helps.\n\nIt's related to when PhantomJS is not running a web page so when script can access the phantom object. There also happens to be document object with a readyState of complete.\n\nCan you help us reproduce this setup with a simplified test setup? That would allow us to test your suggested solution and evaluate alternatives, and prevent future regressions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2015-06-03T02:17:58Z", "contents": "$ phantomjs\nphantomjs > var QUnit = require('path/to/qunit')\nphantomjs > QUnit.config.pageLoaded\ntrue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-06-17T14:27:08Z", "contents": "@leobalter could you take a look at this? Maybe there's an alternative to checking specifically for phantom?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-06-17T19:29:29Z", "contents": "checking if a global phantom is undefined only is not good. I would rather won't take the risk to break other sites/apps using this name.\nI'm setting a deeper check based on the phantomjs documented api to prevent the issue reported here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kenips", "authorAssociation": "NONE", "createdAt": "2015-08-25T15:53:17Z", "contents": "@leobalter looking forward to this fix here. Any milestone for 1.18.1 or any blocker for it that needs help with?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-08-25T15:57:40Z", "contents": "@kenips QUnit 1.19 is about to be released with this fix.\ncc @jzaefferer", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kenips", "authorAssociation": "NONE", "createdAt": "2015-08-25T16:11:09Z", "contents": "\ud83d\udc4d thanks the great work guys!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 819, "url": "https://github.com/qunitjs/qunit/issues/819", "title": "Hide passed tests does not work on page reload", "contents": "Hi,\nVersion: 1.18.0/1.18.1-pre\n\nStart with 'Hide Passed Tests' unchecked and refresh the page.\nCheck 'Hide Passed Tests'. This causes all passed tests to collapse, as expected.\nNow reload the page. At this point 'Hide Passed Tests' is checked, but passed tests are not hidden.", "createdAt": "2015-05-11T10:02:14Z", "updatedAt": "2015-11-30T10:27:24Z", "closedAt": "2015-05-15T09:20:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "NoelAbrahams", "company": "The Cultural Me"}, {"login": "jzaefferer", "company": null}], "comments_count": 12, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-14T17:26:47Z", "contents": "I tested this with 1.18.0 and master, I'm unable to reproduce the issue.\nWhat browser are you using? Any other detail that you can provide?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2015-05-14T17:31:29Z", "contents": "Chrome  42. Does the code depend on anything in local storage?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-14T17:33:50Z", "contents": "Not for this feature. The hidepassed flag is stored in window.location (updated via window.history.replaceState where available).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2015-05-14T17:36:39Z", "contents": "I think that might be the problem. Can the code not read the query string every time? To the user it appears that the query string has \"hidepassed\", which implies everything should work. What I mean to say is that the query string is the actual store - there should be no need to save it elsewhere.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-14T17:39:18Z", "contents": "The flag is stored in the query string, no where else. There are other QUnit features that use sessionStorage, but not this one. You can look at the code for hidepassed to verify that yourself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2015-05-14T18:56:56Z", "contents": "The flag is stored in the query string, no where else.\n\nBut I though you said it's stored in window.location? Can that not be overwritten by some user code?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-15T09:15:10Z", "contents": "The query string is part of the location property.\nGuessing like this is no going to get us anywhere, we need to be able to reproduce the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2015-05-15T09:18:14Z", "contents": "Quoting from the link:\n\nThough Window.location is a read-only Location object, you can also assign a DOMString to it. This means that you can work with location as if it were a string in most cases: location = 'http://www.example.com' is a synonym of location.href = 'http://www.example.com'\n\nThat would mean that users are able to write window.location = 'http://foobar'. So location should not ideally be used to store state.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-15T09:20:55Z", "contents": "Doing that will load a different page, so there is no more QUnit testsuite. That makes no sense.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2015-05-15T09:23:20Z", "contents": "Yes, that's a fair point. I'll take a look to see where it's failing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NoelAbrahams", "authorAssociation": "NONE", "createdAt": "2015-11-09T14:33:08Z", "contents": "Just got around to looking into this. The problem above can be reproduced by removing the element with id qunit.\nBasically, we wanted to have our own header, so we had manually added the following HTML to the page:\n   <!--\n    <div id=\"qunit\"></div>\n   -->\n    <h1 id=\"qunit-header\">\n          // Custom header here\n    </h1>\n    <div id=\"qunit-testrunner-toolbar\"></div>\n    <ol id=\"qunit-tests\"></ol>\nThis actually works, except that hidepass is not honoured.\nThe problem code is the following in QUnit.begin\n    if ( qunit && config.hidepassed ) {\n        addClass( qunit.lastChild, \"hidepass\" );\n    }\n\nThis code is inconsistent, because the hidepass is actually in qunit-testrunner-toolbar and existence of that element should imply that the code runs correctly. Probably\n    addClass( qunitToolbar.parentElement.lastChild, \"hidepass\" );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-11-30T10:27:24Z", "contents": "Thanks, I've filed #896 to track that issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 820, "url": "https://github.com/qunitjs/qunit/issues/820", "title": "QUnit IntelliSense for Eclipse, Sublime, Emacs, Vim, Web Editor CodeMirror", "contents": "Just for your information I have generated from your doc API a ternjs plugin https://github.com/angelozerr/tern.jqueryapi/blob/master/qunit1-19.js\ntern is a JavaScript inference engine which gives support for completion, hover, etc and can be used with a lot of JavaScritpt Editor like Eclipse, Sublime, Emacs, Vim, Web Editor CodeMirror. Here a screenshot with QUnit completion & Eclipse :\n\nFor Eclipse users, please read https://github.com/angelozerr/tern.java/wiki/Tern-&-QUnit-support", "createdAt": "2015-05-13T22:09:41Z", "updatedAt": "2015-05-18T14:46:19Z", "closedAt": "2015-05-18T14:46:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "angelozerr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "angelozerr", "company": "Red Hat"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-05-15T17:02:52Z", "contents": "Looks good! Could you add this to our plugins page? https://github.com/jquery/qunitjs.com/blob/master/pages/plugins.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "angelozerr", "authorAssociation": "NONE", "createdAt": "2015-05-16T10:26:34Z", "contents": "Looks good!\n\nGlad it seems please you. You can play with the online demo http://demo-angelozerr.rhcloud.com/CodeMirror-Java/qunit.html which uses the qunit tern plugin with Web Browser CodeMirror.\n\nCould you add this to our plugins page?\n\nDone with angelozerr/qunitjs.com@10a3299", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 821, "url": "https://github.com/qunitjs/qunit/issues/821", "title": "Fixtures not being restored every time", "contents": "I'm new to QUnit and I might be doing something silly.\nAs I understand it, everything in the fixture is reset before a new test is run. However, I'm seeing (what is to me) something strange. In the below example, there's a form in the fixture which consists of just an input element and a div with the class has-error. So as I understand, before each test is run, these should be restored to their original state. I've specified a keypress event handler for $('input') to just hide the div in the fixture.\nI have two identical tests which test this event handler: they trigger a keypress on the input and assert that error text is hidden.\nWhat I see is that only one of the two tests ever passes and they switch (so it alternates between test 1 passing and test 2 passing). Is this expected behavior?\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"qunit-1.18.0.css\">\n  </head>\n\n  <body>\n    <div id=\"qunit\"></div>\n    <div id=\"qunit-fixture\">\n      <form> \n        <input name=\"text\" />\n        <div class=\"has-error\">Error text</div>\n      </form>\n    </div>\n\n    <script src=\"http://code.jquery.com/jquery.min.js\"></script>\n    <script src=\"qunit-1.18.0.js\"></script>\n    <script>\n      QUnit.test( \"test 1\", function ( assert ) {\n        $('input').trigger('keypress');\n        assert.equal($('.has-error').is(':visible'), false);\n      });\n\n      QUnit.test( \"test 2\", function ( assert ) {\n        $('input').trigger('keypress');\n        assert.equal($('.has-error').is(':visible'), false);\n      });\n\n      $(document).ready(function () {\n        $('input').keypress(function() {\n          $('.has-error').hide();\n        });\n      });\n\n    </script>\n\n  </body>\n</html>\n\nOne more thing that I'm confused about is this: if I add a click event handler for $('input') and switch the second test to trigger a click instead, QUnit gets stuck switching \"no try-catch\" and \"hide passed tests\" on and off over and over.\nThis can't possibly be expected behavior, right? Even if I've done something dumb, I don't see why you'd want anything but either a pass or a fail for your tests to come from QUnit.", "createdAt": "2015-05-26T22:18:00Z", "updatedAt": "2015-05-27T19:27:28Z", "closedAt": "2015-05-26T22:29:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vmanjunath", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vmanjunath", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-05-26T22:29:50Z", "contents": "on $('input') you're selecting every input element inside the reporter, including the no try-catch and hide passed tests checkboxes. If you want to run tests related to your app behaviour/functionallity within the reporter context and select them via the DOM, be sure to use the #qunit-fixture context when selecting your elements.\ne.g.: $('#qunit-fixture').find('input')", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-05-26T22:31:46Z", "contents": "If you have any other question on this topic, you can use this same issue. I closed as it's not an actual QUnit bug.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vmanjunath", "authorAssociation": "NONE", "createdAt": "2015-05-26T22:52:55Z", "contents": "Awesome! Thanks so much.\n\nOn May 26, 2015, at 6:29 PM, Leo Balter notifications@github.com wrote:\non $('input') you're selecting every input element inside the reporter, including the no try-catch and hide passed tests checkboxes. If you want to run tests related to your app behaviour/functionallity within the reporter context and select them via the DOM, be sure to use the #qunit-fixture context when selecting your elements.\ne.g.: $('#qunit-fixture').find('input')\n\u2014\nReply to this email directly or view it on GitHub #821 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vmanjunath", "authorAssociation": "NONE", "createdAt": "2015-05-27T00:44:38Z", "contents": "Thanks a lot for the quick response. I think that clearly addresses my second question about the inputs being clicked. But the issue with the two tests alternating between passing and failing still persists.\n <div id=\"qunit-fixture\">\n  <form> \n    <input name=\"text\" />\n    <div  class=\"has-error\">Error text</div>\n  </form>\n</div>\n\n<script src=\"http://code.jquery.com/jquery.min.js\"></script>\n<script src=\"qunit-1.18.0.js\"></script>\n<script>\n  QUnit.test( \"test 1\", function ( assert ) {\n    $('#qunit-fixture').find('input').trigger('keypress');\n    assert.equal($('#qunit-fixture').find('.has-error').is(':visible'), false);\n  });\n\n  QUnit.test( \"test 2\", function ( assert ) {\n    $('#qunit-fixture').find('input').trigger('keypress');\n    assert.equal($('#qunit-fixture').find('.has-error').is(':visible'), false);\n  });\n\n  $(document).ready(function () {\n    $('#qunit-fixture').find('input').keypress(function() {\n      $('.has-error').hide();\n    });\n  });\n\n</script>\n\nAny thoughts? I'm sure it's not a bug and that I'm probably doing something dumb...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vmanjunath", "authorAssociation": "NONE", "createdAt": "2015-05-27T18:25:01Z", "contents": "Actually, you can ignore this. I was, indeed, being dumb. I just realized that the #qunit-fixture element gets replaced every time a new test is run so the bindings go away...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-05-27T19:27:28Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 823, "url": "https://github.com/qunitjs/qunit/issues/823", "title": "Set config from url", "contents": "for example\nhttp://localhost:8080/myTest.html&autostart=false\nI am trying to make a library to run tests and it would be very nice if this existed so that I can attach all of the event handlers before the tests run but after the page loads.\nI also have no control over the source code only the url.", "createdAt": "2015-06-01T05:09:55Z", "updatedAt": "2015-06-02T00:29:39Z", "closedAt": "2015-06-01T16:04:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dtracers", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dtracers", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-06-01T16:04:21Z", "contents": "the url params intend to support easy toggling features when they mean sense. autostart is not one of them.\nI can't see a way you can't have control or access over the source code at all if you're running QUnit. This leaves a question: how would you write your tests in this case?\n\nautostart is a feature that require control over the source code, without that, you can't even tell QUnit to start running. There's no good to add autostart as a urlparam.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dtracers", "authorAssociation": "NONE", "createdAt": "2015-06-02T00:29:39Z", "contents": "I feel like this could potentially be very useful especially for webdrivers.  Which is what I am currently using and why I asked this question.\nAnd you could add a button that appears in the gui to let you start running the test if the autostart is off.\nI have looked around it appears though that Intern accomplishes this and now uses the QUnit API so I think I will switch to that.\nThanks for the help.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 824, "url": "https://github.com/qunitjs/qunit/issues/824", "title": "Quoted \"<\" breaks diff oO", "contents": "Using version 1.18.0: http://jsfiddle.net/yptmch4k/1/\nWhen I compare the string c=< against c=\"<\" using strictEqual the diff breaks, is it intended?", "createdAt": "2015-06-06T18:57:11Z", "updatedAt": "2016-03-22T16:35:46Z", "closedAt": "2016-03-22T16:35:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:39:15Z", "contents": "For the record, no, that's not intended. Looking for help to get this fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-diff", "help wanted", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 825, "url": "https://github.com/qunitjs/qunit/issues/825", "title": "QUnit.moduleStart invoked before each test", "contents": "Hi\nI have a problem with QUnit.moduleStart callback. It looks like this callback is invoked before each test not before module. I created a sample module with three tests and callback registered as below was fired three times\nQUnit.moduleStart(function (settings) {\n    console.log(\"Module start\");\n});\nI work with QUnit 1.18.0", "createdAt": "2015-06-13T11:15:48Z", "updatedAt": "2015-06-19T17:47:38Z", "closedAt": "2015-06-19T17:47:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cezarypiatek", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cezarypiatek", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-06-13T12:12:48Z", "contents": "Please provide your example code for the module and test calls as well so we can easily reproduce your exact scenario. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cezarypiatek", "authorAssociation": "NONE", "createdAt": "2015-06-13T13:43:10Z", "contents": "Here is my sample with issue reproduction https://onedrive.live.com/redir?resid=419b0033f0b10f76!3319&authkey=!AO2MjOTaBdLZaxQ&ithint=file%2czip\nThe issue occurs when I load my test with delay (see IssueReproduction.js)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-06-17T15:14:49Z", "contents": "When loading tests async you need to tell QUnit to wait, using QUnit.config.autostart. See the API docs for an example: http://api.qunitjs.com/QUnit.config/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cezarypiatek", "authorAssociation": "NONE", "createdAt": "2015-06-19T17:47:38Z", "contents": "It looks like I missed that parameter. Setting QUnit.config.autostart to false solved my problem. @jzaefferer  thank for your help.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 827, "url": "https://github.com/qunitjs/qunit/issues/827", "title": "Replace push(result, actual, expected, message, negative) with object signature", "contents": "As discussed in #822, the now even longer signature for .push() is bad. Especially with ES6 an object signature would work very well, .push({ result, actual, expected, message, negative }).\nAs I also mentioned in that PR: If we deprecate the current signature anyway, we might as well come up with a better name, since push is very generic. Any ideas for a better name?", "createdAt": "2015-06-18T08:56:52Z", "updatedAt": "2016-02-16T22:58:18Z", "closedAt": "2016-02-16T22:58:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gabrielschulhof", "company": "Intel Corporation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 6, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-18T15:30:09Z", "contents": "Regarding a different name: How about something like pushResult or addResult? The information being added is a test assertion result, but pushTestAssertionResult seems a bit verbose.\nCertainly open to other suggestions, of course.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-06-24T16:48:54Z", "contents": "pushResult is interesting, as resolve would be a good inspiration from Promises.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-24T17:03:24Z", "contents": "Seems resolve might be confusing with promises and assert.async (just conceptually).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gabrielschulhof", "authorAssociation": "NONE", "createdAt": "2015-07-12T09:13:17Z", "contents": "How about just result()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-07-13T11:26:37Z", "contents": "Personally, I would say assert... but that will likely cause some confusion with extensions needing to callthis(...) instead of this.pushResult(...).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:37:09Z", "contents": "Let's go with .pushResult({ result, actual, expected, message, negative }). The existing push() method can be updated to map to the newly added method.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 828, "url": "https://github.com/qunitjs/qunit/issues/828", "title": "jshint: test errors when running jshint task", "contents": "I'm new here. When running \"grunt\", I encounter the following error:\nRunning \"jshint:all\" (jshint) task\n\n   Gruntfile.js\n    141 |        browserSets = JSON.parse( browserSets );\n                               ^ 'JSON' is not defined.\n   dist/qunit.js\n   1080 |        if ( !this instanceof Test ) {\n                      ^ Confusing use of '!'.\n\n>> 2 errors in 20 files\nWarning: Task \"jshint:all\" failed. Use --force to continue.\n\nIs it an error that damages the code or just a warning for coding quality?\nI could modify .jshintrc to disable the JSON warning.\nSystem: Mac OS X Yosemite", "createdAt": "2015-06-24T01:24:52Z", "updatedAt": "2015-06-25T03:44:28Z", "closedAt": "2015-06-25T03:44:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iten123", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "iten123", "company": null}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}], "comments_count": 4, "comments_data": [{"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-06-24T13:43:17Z", "contents": "I'm not getting these errors. Please remove the node_modules directory, invoke npm install and try again.\nAlso, on which commit are you trying?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "iten123", "authorAssociation": "NONE", "createdAt": "2015-06-24T18:13:59Z", "contents": "I got the tar file from https://github.com/jquery/qunit/archive/1.18.0.tar.gz and then unzip it.\nIn the qunit-1.18.0 directory, I do:\nnpm install -g grunt-cli\nnpm install grunt\nnpm install ...(all the packages in 'devDependencies' in package.json)\n\nand then still encounter this issue.\nDo I need to also remove node_modules in the root directory? Is there other dependencies I need to get?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-06-24T18:23:42Z", "contents": "That's not the correct way to install dependencies. You should just invoke npm install without additional arguments, otherwise you're not installing proper versions. (but remove node_modules first).\nBTW, this seems to be more a topic for support forums than this bug tracker.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "iten123", "authorAssociation": "NONE", "createdAt": "2015-06-25T03:44:28Z", "contents": "Thanks, just invoke npm install solve the problem.\nI should have realized to go through the forums first. Close it now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 830, "url": "https://github.com/qunitjs/qunit/issues/830", "title": "moduleDone called before module is done", "contents": "Steps to reproduce the problem:\n\nWrite two modules. The first module contains two tests. One of the tests fails. The second module contains a single test that fails.\nLog QUnit.moduleDone events\nRun the programm twice.\n\nWhat is the expected behavoir?\nWe expect to have two moduleDone events in both runs.\nWhat went wrong?\nWe have three moduleDone events in the second run.\nAny other comments?\nQUnit.config.reorder = false gives us two moduleDone events constantly.\nHere is a JS Bin demo", "createdAt": "2015-06-29T08:16:13Z", "updatedAt": "2017-03-31T04:40:56Z", "closedAt": "2017-03-31T04:40:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fcarstens", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "fcarstens", "company": "WWU M\u00fcnster"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "mixed", "company": "@naver "}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-06-29T15:16:58Z", "contents": "This is the same behavior at least from QUnit 1.9.0 until the current build.\nEvery suite rerun will execute first the tests that previously failed. QUnit.moduleDone is being triggered prematurely as the module got split.\nThis might be interpreted as a end of the module for those failing tests and than the module will be called again for the remaining tests on it. And this might affect other reporters as a regression.\nAlthough, it's good to keep this open so we can decide about this for QUnit 2.0.0. Until a next major version, QUnt.config.reorder = false is the best option to prevent this behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-08-11T21:11:48Z", "contents": "As discussed in the jsreporters repo, I consider this a bug, not an enhancement. Similar to the html reporter keeping the order of the tests as defined (not as executed), the events should also stay in that order.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-08-11T21:44:42Z", "contents": "I don't see this as an enhancement, I don't even know what I was thinking when I set this label.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-18T09:22:01Z", "contents": "@jzaefferer @leobalter\nI have invested it. This issues is related to config.reorder. Setting config.reorder QUnit run first failed test. Although Tests was same module Tests did not call same group like below case.\nmodule1\n    - test1 (fail)\n    - test2 (success)\nmodule2\n    - test1 (fail)\n\nFirst Time order is module1-test1 -> module1-test2 -> module2-test1. Next Time order is module1-test2 -> module2-test1 -> module1-test1 becacuse config.reorder.\nQUnit has a problem in this case. When QUnit is module change to another module QUnit have triggered moduleDone event. link So. Above case have occurred to trigger thrice moduleDone event.\n`module1-test2` -> module1\n    (changed module. so fired moduleDone)\n`module2-test1` -> module2 \n    (changed module. so fired moduleDone)\n`module1-test1` -> module1 \n    (end. so fire moduleDone)\n\nI think that I suggest to two options in this case\n\nshould be change test order in same module.\nchange moduleDone condition. (Save module status info in config(or somewhere) and Check condition)\n\nI have some questions.\n\nWhat option would you suggest for me?\n\nIf QUnit should be support to config.reorder option I like 2.\n\n\nI think that All options change to many codes. So Could i work it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T06:51:08Z", "contents": "I would definitely consider this a bug; due in large part to this logic that fires the moduleDone event whenever the current module changes (not necessarily when the module has ended).\nWe should change that firing condition to check that all tests for the module have run. However, there is currently no way to do that, but it'll be super easy to implement once #919 has been merged as it also requires checking if all tests for a given module have run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:40:56Z", "contents": "This seems to be fixed now. I've got the original JSBin example and tried it with a recent version.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 831, "url": "https://github.com/qunitjs/qunit/issues/831", "title": "How do we execute multiple test files with a single command?", "contents": "Scenario\nWe are trying to use the Node.js QUnit Module aka qunitjs for our Server-Side Testing so that we can write one test and run it on both server and client e.g: https://github.com/nelsonic/learn-tdd/blob/master/test.js\nWhen we run a single file using the command:\nnode test/my_test.js\nIt works as expected.\nHowever, when we have more than one test in a /test directory and try to run all the files as a suite using the following command:\nnode test/*.js\nonly the first file (alphabetically) gets executed.\nsee: https://github.com/nelsonic/hapi-socketio-redis-chat-example/tree/master/test\nQuestion\n\nHow do we execute multiple test files with a single command?\n\nWe tried to dig through existing StackOverflow + GitHub Q/A for this but did not find any match. (any suggestions/help much appreciated!)\nStackOverflow Points Up for Grabs!\n\nhttp://stackoverflow.com/questions/31312650/how-to-run-several-qunit-node-js-test-files-using-a-single-command", "createdAt": "2015-07-09T08:54:17Z", "updatedAt": "2015-07-14T21:41:17Z", "closedAt": "2015-07-14T21:41:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nelsonic", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nelsonic", "company": "@dwyl"}, {"login": "jzaefferer", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-07-09T21:59:01Z", "contents": "How about a tiny wrapper script that passes your argument through (one of many) glob modules, then executes each file?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-07-10T12:33:37Z", "contents": "Or use existing wrappers like those available for Karma, Grunt, etc.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nelsonic", "authorAssociation": "NONE", "createdAt": "2015-07-11T15:18:37Z", "contents": "Thanks for your replies @jzaefferer && @JamesMGreene\nWe were really hoping the node.js module would just read the /test directory out of the box the way Mocha or Tape do ... (without having to use Grunt/Gulp etc ...)\nSounds like we might have to write our own test runner that reads QUnit formatted files...\nDoes this kind of stand-alone project/node_module already exist to your knowledge?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-07-13T09:40:42Z", "contents": "A few lines of globbing doesn't sound like much of a \"test runner\", but yes, its something QUnit itself (qunitjs on npm) doesn't do, yet. You could also try the qunit module on npm, which provides more node-specific options.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nelsonic", "authorAssociation": "NONE", "createdAt": "2015-07-14T21:41:17Z", "contents": "I'm not entirely happy with the way node-qunit runs test.\nbut the output is pretty decent.\nUsage:\n ./node_modules/qunit/bin/cli.js -c ./lib/*.js -t ./test/*.js\n\nexample: https://github.com/nelsonic/try-node-qunit", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 832, "url": "https://github.com/qunitjs/qunit/issues/832", "title": "assert: async() and its resulting callback result in test suite stoppage", "contents": "Hopefully I'm doing something wrong, but http://jsbin.com/votiye/ would seem to indicate that there's a hangup when using assert.async() and subsequently calling the resulting function.\nExpected outcome:\nTwo tests are run.\nActual outcome:\nThe second test does not run.", "createdAt": "2015-07-12T09:18:29Z", "updatedAt": "2015-10-30T21:38:23Z", "closedAt": "2015-07-12T09:38:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gabrielschulhof", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gabrielschulhof", "company": "Intel Corporation"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "gabrielschulhof", "authorAssociation": "NONE", "createdAt": "2015-07-12T09:22:23Z", "contents": "Doing things the old-fashioned way (with start()) works: http://jsbin.com/geyifel/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gabrielschulhof", "authorAssociation": "NONE", "createdAt": "2015-07-12T09:38:45Z", "contents": "OK. I see the error of my ways now. I must not use asyncTest() if I use assert.async().", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 833, "url": "https://github.com/qunitjs/qunit/issues/833", "title": "Testing Maps/Sets with QUnit", "contents": "Most browsers already implement ES6 Map/Set to some degree. Right now, we have the strange issue of:\n    obj1 = new Map(); obj1.set(1,2);\n    obj2 = new Map(); obj2.set(3,4);\n    assert.deepEqual(obj1, obj2);    // passed\n\nI understand QUnit is not meant to process ES6 Map/Set or iterables yet, but as browsers continue to implement ES6 features, this can actually become a real problem.", "createdAt": "2015-07-12T15:47:42Z", "updatedAt": "2015-08-10T21:10:21Z", "closedAt": "2015-08-10T21:10:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "godchuanz", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "godchuanz", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-07-12T18:13:35Z", "contents": "on [Weak]{Map,Set}, list items doesn't become properties of the collection instantiated object.\ndeepEqual checks for the values equality of 2 objects' own and extended (prototype) properties.\nso assert.deepEqual(obj1, obj2); will indeed pass.\nWhat we need is not break deepEqual, but maybe extend QUnit to compare ES6 collections. This should regard it's impossible to compare WeakMap and WeakSet collections if you don't know what they in their collection as they doesn't have a size or forEach methods and can't be cast to an Array.\nThis leads to another topics:\n\nshould a assertion to compare ES6 collections be shipped with QUnit or should it come as a plugin?\nwe can improve our diff on fails to specify JS native collections instead of just {}.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "godchuanz", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-13T02:48:25Z", "contents": "The way I see it, deepEqual should be extended to cater for ES6 Set and Map. There is almost no use case where comparing properties of Map/Set is desirable - at least not any I can think of.\nFrom the src, equiv() already specially catered for \"array\" objects. What needs to be done is to update the code for \"arrays\" to use forEach(), and for Set/Map to be classified under that switch case. For better code clarity, \"arrays\" could be renamed \"collections\" or something.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-07-13T09:32:35Z", "contents": "Extending equiv() to support Map and Set seems fine, as long as that is backwards compatible. @godchuanz could you look into putting a patch together for that, and send it as a pull request?\nAs for WeakMap and WeakSet: If those are uncomparable, we could either consider them unequal or throw an exception. Seems like a separate issue.\nFor both it might be good to see if other frameworks already implement support for any of these new types. Maybe we can just use their approach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "godchuanz", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-14T15:28:21Z", "contents": "Hi, yes. I think I have gotten something together. Can you add me as a collaborator so I can make a pull request?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-07-14T15:32:08Z", "contents": "You can open a PR without being a collaborator, just push to your fork.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "godchuanz", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-14T15:52:55Z", "contents": "Ok done that. Sorry, not used to forking (still noob to github, especially for jQuery). Hopefully the CLA check and CI passes soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "godchuanz", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-14T18:12:37Z", "contents": "Hi, I've made a pull request but somehow the CI and CLA check are both failing. Can anyone tell why? Also, in the current code I found a strange check I couldn't make sense of (equiv.js Line 90 - arrays check):\n// b could be an object literal here\nif ( QUnit.objectType( b ) !== \"array\" ) {\n     return false;\n}\n\nIt looks to me that b would always be an array. This looks redundant, but I have included similar checks in both the Set and Map just in case it is actually useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-07-14T19:02:00Z", "contents": "The CI is ok, the error there is just a known issue with browserstack.\nI still need to find more available time to check the CLA issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 838, "url": "https://github.com/qunitjs/qunit/issues/838", "title": "zero assertions and one assertion simultaneously?!", "contents": "Found 2 of div > span but 1/2 containing \"myfile.jpg\"@ 174 ms\nExpected:   \ntrue\nResult:     \nfalse\nDiff:   \ntrue false \nSource:     \n<snip>\nExpected 0 assertions, but 1 were run@ 217 ms\nSource:     \n<snip>\nExpected at least one assertion, but none were run - call expect(0) to accept zero assertions.@ 155 ms\nSource:     \n<snip>\n\nSo I simultaneously had zero asserts and one assert???\nEmber test code is:\nimport hbs from 'htmlbars-inline-precompile';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport startApp from 'insm-ui/tests/helpers/start-app';\n\nvar application;\n\nmoduleForComponent('file-upload-monitor-item', {\n  integration: true,\n  beforeEach: function() {\n    application = startApp();\n  }\n});\n\ntest('it renders', function(assert) {\n  assert.expect(0);\n  this.testupload = {\n    fileName: \"myfile.jpg\"\n  };\n  this.render(hbs`{{file-upload-monitor-item upload=testupload}}`);\n  expectElement('div > span', 2, {contains:'myfile.jpg'});\n});", "createdAt": "2015-07-18T22:08:34Z", "updatedAt": "2015-10-16T20:33:47Z", "closedAt": "2015-10-16T20:33:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "BryanCrotaz", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "BryanCrotaz", "company": "Silver Curve"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-06T18:43:23Z", "contents": "Well, this is probably related to ember-qunit, but:\ntest('it renders', function(assert) {\n  assert.expect(0);\nYou're expecting 0 assertions to run and still run the expectElement(...). I'm not sure but that might be the assertion triggering the Expected 0 assertions, but 1 were run@ 217 ms failure.\nEven though, that Expected at least one assertion is weird but I can't see what's triggering it from the given example. Looks like a lost test being called elsewhere.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:33:46Z", "contents": "Closing due to inactivity and inability to reproduce the issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 840, "url": "https://github.com/qunitjs/qunit/issues/840", "title": "Support multi-tenant manual test start ", "contents": "See karma-runner/karma-qunit#27 for an example of such issue.\nI propose we add a method that instead of starting the test suite, takes a Promise that will be waited on before the tests start. And there can be any number of promises provided to this method.\nCrucial too is that it is allowed to provide additional promises at any time before all known promises are fulfilled. (e.g. adding A and B, B is resolved, A is pending and during A, a C is encountered; as would commonly be the case when loading code in multiple stages, e.g. Karma loading the user code and marking its own area as fulfilled).\nProposed interface:\nQUnit.delayStart( Promise thenable );\nProposed implementation:\nWhen called, this will (if not already) set config.autostart = false;, and add the promise to an internal list. When the promise is resolved or rejected, it will remove itself from said internal list at look at the length of the list. If it is now empty, call QUnit.start(). If not, wait for another promise to be fulfilled which will naturally result in another check of the remaining promises.", "createdAt": "2015-08-03T19:01:58Z", "updatedAt": "2017-05-11T18:31:14Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "jzaefferer", "company": null}, {"login": "S4NT14G0", "company": null}, {"login": "platinumazure", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:32:29Z", "contents": "This seems reasonable. It sounds like it shouldn't be too complicated to implement.\nOne thing that is unclear to me: How does it related to existing APIs? Would it replace anything? Or just be an optional API on top of config.autostart = false and QUnit.start()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2015-10-19T15:30:13Z", "contents": "@jzaefferer I'm not sure yet but I'm thinking it would be best implemented underneath the existing API. Then re-implement the static/global config.autostart and QUnit.start() functionality on top of this new API as a consumer inside e.g. QUnit.load.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "S4NT14G0", "authorAssociation": "NONE", "createdAt": "2017-03-29T14:44:09Z", "contents": "Has this issue ever been fixed?  I trying to run karma and qunit.  I need to wait for asynchronous data to load before my tests begin and karma is giving me an error:\n\"Executed 0 of 0 ERROR\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-05-11T18:17:56Z", "contents": "@S4NT14G0 As mentioned, the easiest fix is simply to set QUnit.config.autostart = false; from a regular script file that you load, and then call QUnit.start() when you're ready.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-05-11T18:31:14Z", "contents": "@Krinkle Do you believe this issue needs to remain open, or can we close with that resolution?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 841, "url": "https://github.com/qunitjs/qunit/issues/841", "title": "[Memory Leak] beforeEach / afterEach appear to leak", "contents": "the following code (from : source) appears to leak beforeEach and afterEach on the original module. This results in per module leak of the ambient context.\nthis.testEnvironment = extend( {}, this.module.testEnvironment );\ndelete this.testEnvironment.beforeEach;\ndelete this.testEnvironment.afterEach;\nObviously the following, prevents the leaks:\nvar foo;\n\nmodule('test', {\n  beforeEach() {\n    var foo = new Foo();\n  },\n\n  afterEach() {\n    foo = null\n  }\n});\nbut it is tedious and error prone. A much better solution, for those using modules (AMD/CJS/etc), is merely to release the entirely module. Unfortunately, QUnit retaining beforeEach and afterEach per module, prevents a less error prone and tedious solution.\ncc @cibernox", "createdAt": "2015-08-04T16:59:25Z", "updatedAt": "2015-08-13T15:53:55Z", "closedAt": "2015-08-13T15:53:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "stefanpenner", "company": "@LinkedIn"}], "comments_count": 1, "comments_data": [{"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-08-04T17:07:48Z", "contents": "A quick spelunk indicates the above offending code is likely just run in the wrong order and incorrect object.\nif:\nthis.testEnvironment = extend( {}, this.module.testEnvironment );\ndelete this.testEnvironment.beforeEach;\ndelete this.testEnvironment.afterEach;\nbecomes:\ndelete this.module.testEnvironment.beforeEach;\ndelete this.module.testEnvironment.afterEach;\nthis.testEnvironment = extend( {}, this.module.testEnvironment );\nWe release as expected, without any leaks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 843, "url": "https://github.com/qunitjs/qunit/issues/843", "title": "Extend assert.async to accept a count of asynchronous operations", "contents": "Currently, assert.async returns an invoke-once callback, which can lead to overly-cumbersome patterns (e.g., manual counter tracking or collect and pop). It would be more convenient to specify the expected count of invocations explicitly by argument:\nvar done = assert.async( 4 );\n\nasyncOperation1( function( result ) {\n    assert.equal(\u2026);\n    done();\n} );\nasyncOperation2( function( result ) {\n    assert.equal(\u2026);\n    done();\n} );\n\u2026", "createdAt": "2015-08-05T15:11:58Z", "updatedAt": "2015-09-30T17:22:36Z", "closedAt": "2015-09-30T17:22:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "mixed", "company": "@naver "}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-08-05T15:13:30Z", "contents": "This would be great and seems a common enough pattern.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-10T06:02:24Z", "contents": "+1 for this feature.\n@jzaefferer Could I work on this issue?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 844, "url": "https://github.com/qunitjs/qunit/issues/844", "title": "Expected at least one assertion, but none were run - Bounty Available", "contents": "This is one of those annoying intermittent issues...  I have a test which has two async calls in series, and I'm getting this error around 30% of the time:\n\nThis is the test:\nQUnit.test 'Backbone save - new object has attributes', (assert) ->\n    done = assert.async()\n    search = new Search\n    search.save(Description: 'My test').done ->\n        testSearch = new Search(id: search.id)\n        testSearch.fetch().done ->\n            assert.equal(testSearch.get('Description'), 'My test')\n            done()\n\nUnfortunately the save/fetch calls depend on a server so it's not easily reproducible. I've tried creating a reproducible test by using setTimeout instead of the save/fetch calls but it works as expected.\nWhat I've found is that I can make the problem go away by increasing the 13ms timeout in resumeProcessing(), the errors get fewer and fewer as the timeout gets higher, until they seem to completely stop at around 100ms.\nAny ideas?", "createdAt": "2015-08-06T20:23:53Z", "updatedAt": "2015-08-07T19:15:59Z", "closedAt": "2015-08-07T16:57:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mattparlane", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mattparlane", "company": "Destiny Rescue"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 9, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-08-06T20:40:54Z", "contents": "I don't know if this code is CoffeeScript or anything else different from JS, but this line doesn't look right:\nsearch.save(Description: 'My test').done ->\n\nAs you told, I've also failed trying to reproduce it with setTimeout: http://jsbin.com/suxuka/edit?js,output\nMaybe these .done functions are not being triggered.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattparlane", "authorAssociation": "NONE", "createdAt": "2015-08-06T20:47:29Z", "contents": "They are definitely being triggered -- I've added console.log statements inside them and they are there. I used console.logs to get the timing in my attempt to reproduce it with setTimeout, but that didn't work.\nIs there any chance that the 13ms value is incorrect? I don't really understand what that code is doing, but like I said, raising it to 100 fixes my problem. Perhaps it could be made an overridable setting?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattparlane", "authorAssociation": "NONE", "createdAt": "2015-08-06T20:51:20Z", "contents": "Also, the CoffeeScript code is correct, search.save() is a Backbone method which returns a jQuery XHR, so .done() is the same function you'd call if you were doing $.get(...).done(...).\nAlso, there's no confusion between the local variable done and the method name done, that was just bad naming on my part -- I tried changing the variable name even though I knew it was nothing to do with it, but still no joy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattparlane", "authorAssociation": "NONE", "createdAt": "2015-08-07T02:19:18Z", "contents": "I now have a reproducible test! It still depends on a server but should be trivial to set up. I have it visible here:\nhttps://admin.wb.gs/test.html\nThe HTML file loads the bare minimum, just QUnit and jQuery, plus the test file itself (Ajax.test.js). It's no longer dependent on Backbone or any of my code -- it's all just QUnit and jQuery now. It GETs /test.json, just contains the JSON response which you should be able to see in your network inspector.\nI can't figure out why it works with one request but doesn't work with two requests. Both requests are now exactly the same.\nThe test will almost certainly fail -- once again, increasing the 13ms in core.js will increase the chance the test will succeed, except now that it's on a remote server I needed to set it to about 200ms before it's reliable. Please let me know if you want to test it with an increased limit.\nBounty available, let me know and we can discuss.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-08-07T16:15:07Z", "contents": "Ok, I found the issue.\nI've made some changes but my local server was unable to reproduce, so I pushed to a gh-pages: http://leobalter.github.io/temp-test/\nQUnit tests has a support for promises if you return them. And your test is returning the $.ajax operation, which works as a promise.\nThe workaround was returning anything else than a promise.\n@jzaefferer @JamesMGreene we need to figure out what to do from here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-08-07T16:22:27Z", "contents": "Actually, returning the promise is fine (if unnecessary); it just calls QUnit.stop() which increments the config.current.semaphore count. The problem is that resolvePromise uses QUnit.start as a then callback, which means it will get the promise fulfillment value as an argument where it expects a count, setting semaphore to NaN.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-08-07T16:32:09Z", "contents": "thanks, @gibson042!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-08-07T16:32:43Z", "contents": "PR forthcoming. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattparlane", "authorAssociation": "NONE", "createdAt": "2015-08-07T19:15:59Z", "contents": "Ah... the perils of implicit return! Thanks so much guys.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 846, "url": "https://github.com/qunitjs/qunit/issues/846", "title": "Generate a failure when QUnit.start is passed a non-numeric argument", "contents": "Ref #844\nWhen QUnit.start is passed a truthy but non-numeric argument, its test semaphore decrement sets config.current.semaphore to NaN. Such a condition should generate output analogous to the \"Called start() while already started\u2026\" failure presented when semaphore dips below zero.", "createdAt": "2015-08-07T19:57:16Z", "updatedAt": "2015-10-18T16:10:44Z", "closedAt": "2015-10-18T16:10:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "rdugue", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-08-21T18:03:50Z", "contents": "I'd love to submit a pull request, but I'm not sure what the best way to handle this situation is. I suppose throwing an exception for an invalid value would make sense, but is there a better way?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-17T17:55:56Z", "contents": "@platinumazure\nYou should probably use QUnit.pushFailure with a message argument. Ref: https://github.com/jquery/qunit/blob/master/src/test.js#L297", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:06:41Z", "contents": "@platinumazure is this still something you want to work on?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-16T20:13:27Z", "contents": "Ack, sorry, I've been busy with a bunch of other things. If anyone wants to jump on this now feel free.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdugue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-18T00:31:31Z", "contents": "Hello, I would like to make a pull request if possible.  Should config.current.semaphore be set to a specific value in this case?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-10-18T02:29:51Z", "contents": "Given that it's already a configuration failure, I don't think the value matters much. But I suppose 0 would let us just get on with the rest of the suite.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 848, "url": "https://github.com/qunitjs/qunit/issues/848", "title": "Investigate why browserstack-runner updates are breaking on Travis", "contents": "Updates for browserstack-runner (currently using 0.3.0 on this repo) are crashing on Travis-CI.\nRef: #836", "createdAt": "2015-08-10T20:08:35Z", "updatedAt": "2015-09-07T20:41:51Z", "closedAt": "2015-09-07T20:41:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-08-14T15:00:57Z", "contents": "Do you have a link to a Travis build that crashed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-07T20:41:36Z", "contents": "Browserstack 0.3.7 is working just fine on #857", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 851, "url": "https://github.com/qunitjs/qunit/issues/851", "title": "deepEqual fails to work with descendants of something with a null prototype", "contents": "the following works as expected.\nvar a = Object.create(null);\na.foo = 1;\nvar b = { foo: 1 }\n\ndeepEqual(a, b);\nUnfortunately, in practice Object.create(null) is fairly costly. To mitigate this cost a specialized NullObject can be used. This Object has similar safe characteristics, but with dramatically reduced allocation costs.\nReference implementation:\nfunction NullObject() { }\nNullObject.prototype = Object.create(null, {\n  constructor: {\n    value: undefined,\n    enumerable: false,\n    writable: true\n  }\n});\n\nThis leads us to the problem:\nvar a = new EmptyObject();\na.foo = 1;\nvar b = { foo: 1 }\n\ndeepEqual(a, b); // fails\nThis fails because, a.constructor !== b.constructor and a.prototype !== null\nrelevant code in QUnit:\nif ( a.constructor !== b.constructor ) {\n\n  // Allow objects with no prototype to be equivalent to\n  // objects with Object as their constructor.\n  if ( !( ( getProto( a ) === null && getProto( b ) === Object.prototype ) ||\n    ( getProto( b ) === null && getProto( a ) === Object.prototype ) ) ) {\n    return false;\n  }\n}\nAs QUnit already special cases null prototyped object with projo deepEquality, could we explore another special case to handle this scenario? Is there an alternative I am missing?\nOne solution,\nwould be to also detect a null constructor.\nchange to the NullObject constructor would be as follows:\nfunction NullObject() { }\nNullObject.prototype = Object.create(null, {\n  constructor: {\n    value: null, // <-- small change\n    enumerable: false,\n    writable: true\n  }\n});\n\nChange to QUnit would require also checking for a null constructor.\nif ( a.constructor !== b.constructor ) {\n\n  // Allow objects with no prototype to be equivalent to\n  // objects with Object as their constructor.\n  if ( !( ( ( getProto( a ) === null || getConstructor( a ) === null) && getProto( b ) === Object.prototype ) ||\n    ( ( getProto( b ) === null || getConstructor( b ) === null) && getProto( a ) === Object.prototype ) ) ) {\n    return false;\n  }\n}\nnote: this protocol does appear funky, but would be quite handy in practice", "createdAt": "2015-08-13T00:04:43Z", "updatedAt": "2015-09-17T16:11:41Z", "closedAt": "2015-09-17T16:11:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "stefanpenner", "company": "@LinkedIn"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-06T19:24:37Z", "contents": "Anyone have thoughts on this? Would love to act on feedback.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-06T19:31:05Z", "contents": "I suspect, we can walk the chain and detect a deeper inheritance of null", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-07T03:00:41Z", "contents": "I'm take the holiday tomorrow to work on this, I want to see if I also bring a test to avoid any regressions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-07T04:07:26Z", "contents": "note, i took a quick stab at something: stefanpenner/data@6a53d42 it may or may not be of help.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 854, "url": "https://github.com/qunitjs/qunit/issues/854", "title": "Split browserstack run on CI", "contents": "Currently, browserstack-runner is returning timeouts. This is due to the number of different browsers and files.\nWe can try to split the runs to avoid timeouts. I am thinking about:\n\nrun the tests only on the current browsers\nrun the tests on the older browsers\n\nAnother split if we need to go further:\n\nmain tests only on the current browsers\nmain tests on the other browsers\nadditional tests on the current browsers\nadditional tests on the other browsers", "createdAt": "2015-08-27T14:49:07Z", "updatedAt": "2015-09-10T18:46:48Z", "closedAt": "2015-09-10T18:46:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 855, "url": "https://github.com/qunitjs/qunit/issues/855", "title": "Safari 7.0 isn't tested", "contents": "BrowserStack has removed Safari 7.0 from the API, I notified them that it's a problem for us. However, because of these lines of browserstack-all.json you now wouldn't even try to this version; only Safari 5.1, 6.2, 8.0 & 9.0 are included. This means Safari 6.0 & 7.0 is gone (6.2 has an identical engine as 8.0).\nDue to the fact of how messed up Safari versioning is:\n\nSafari 8.0, 7.1 & 6.2 share the WebKit version\nSafari 7.0 & 6.1 share the WebKit version\n\nI think it's dangerous to just rely on aliases; it'd be better to explicitly list all Safari versions supported; and do it without shortcuts like safari_6 but use the full safari_6_0 name.", "createdAt": "2015-09-04T20:16:34Z", "updatedAt": "2015-10-16T20:05:34Z", "closedAt": "2015-10-16T20:05:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-04T20:22:21Z", "contents": "Thanks for letting me know.\nDoes safari_6_2 works? otherwise we'll need to specify each browser without aliases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-09-04T20:26:16Z", "contents": "I'm not sure but you specify safari_5_1 already so I assume it should. It's best to include every Safari version since 6.0 with the _0 suffix as minor updates are basically the same as major ones in this land.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-09-04T20:35:41Z", "contents": "I'll have to test it, browserstack does not document the aliases and some key names does not work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T12:24:03Z", "contents": "Btw. Safari 7 is back in the API (I think), apparently it won't come back in Live though, so don't expect to see it there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T13:44:30Z", "contents": "Yup, I've restored it for projects using TestSwarm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T16:40:56Z", "contents": "Please see jquery/jquery#2609. It seems the new Safari 7.0 is a fake one and under the hood it has a 7.1/8.0 engine so don't rely on its results for now. :/ I notified BrowserStack about the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:05:34Z", "contents": "Core is not going to test against Safari 7.0 anymore, so we don't have to bother either.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 858, "url": "https://github.com/qunitjs/qunit/issues/858", "title": "Nested modules improvements", "contents": "With #800 done, @gibson042 brought some important topics to improve:\n\n\nexecuting all of a module's own tests before entering its submodules (regardless of test/submodule definition order)\nalways minting a new environment definition for every submodule, even if its hooks argument is undefined or not even specified\n\nIf they are intentional, there should be assertions covering them. If they are unintentional and undesired, there should be assertions covering the desired behavior.\n\nAlso:\n\nthe one regarding explicit context sensitivity of beforeEach/afterEach/test/etc.\nvia arguments or context, which should be covered by your above followup).", "createdAt": "2015-09-10T19:02:04Z", "updatedAt": "2015-10-08T00:49:25Z", "closedAt": "2015-10-08T00:49:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 860, "url": "https://github.com/qunitjs/qunit/issues/860", "title": "More browserstack-runner improvements", "contents": "As commented here, the current build script still seems to have issues: #856 (comment)\nFailures should propagate to having the build fail.\nThat was iOS timing out, which we should try to avoid by sticking with simulators, like this:\nshirish87/sizzle@577b55b\n/cc @shirish87 are there other improvements we could implement? See 39d8821 for the recent changes @leobalter landed.", "createdAt": "2015-09-17T09:33:11Z", "updatedAt": "2015-09-30T17:30:14Z", "closedAt": "2015-09-30T17:30:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "jzaefferer", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 864, "url": "https://github.com/qunitjs/qunit/issues/864", "title": "Allow chai usage integration.", "contents": "I'm thinking about creating a assert adaptor to allow the use of custom assertion libs, as Chai.\nTo start I thinking on something like:\nQUnit.config.assert = \"chai\";\n\nor\n\nQUnit.setup({\n  assert: \"chai\",\n  reporter: \"HTML\"\n});\nI know QUnit.setup is not even in the plans, this is something to maybe discuss in another issue.\nPossible drawbacks: having chai plugged in, QUnit would probably break a test on its first failing assertion, but wouldn't fail without a builtin assertion call, along with the expect method.\nProbably, the necessary steps to implement this is:\n\navoid QUnit tests failing without any of its builtin assertions call.\ncatch chai thrown errors from the assertions and report it as failing\na test without any failing assertion should pass (that's silly, but...)\n\nMaybe we can register the chai assertions calls, worth investigate: https://github.com/chaijs/chai/blob/master/lib/chai/assertion.js#L99-L113\n\nExtra: this could be extended to node's assert module as well.", "createdAt": "2015-09-28T16:36:47Z", "updatedAt": "2015-10-20T19:39:46Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-09-29T10:16:29Z", "contents": "Might be possible to wrap each assertion to catch the AssertionError and pass it through to pushFailure, including the stack.\nSupporting node's assert module also sounds interesting.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 865, "url": "https://github.com/qunitjs/qunit/issues/865", "title": "Extract deepEqual implementation with tests to share it with other libraries?", "contents": "At least node has its own implementation of deepEqual, as part of the assert module. I have no idea how close their implementation is to ours, might be worth investigating.", "createdAt": "2015-09-29T10:17:26Z", "updatedAt": "2016-02-16T15:42:44Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "jdalton", "company": "Salesforce"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 15, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T19:56:27Z", "contents": "Looking around a bit, I found three distinct implementations, all with their own tests. There's definitely potential to share at least tests, better yet implementation.\n\nsubstack's node-deep-equal implementation, tests\nchai's deep-eql implementation, tests\nnode's deepEqual implementation, tests (roughly)\n\nNot sure how to go about this, and don't yet know the history behind any of these.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T20:38:29Z", "contents": "For anyone interested in this: Should try to port QUnit's tests to one or all of the other modules and see what fails. We can use those failures to start a discussion with the module owner, along with talking about browser support and whatever else.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-17T18:06:30Z", "contents": "After talking to @jdalton about this: We should try to replace our deepEqual implementation with the one in lodash. We can run our existing tests to see if there are (significant) differences in the design. If it works out well, we could promote the lodash implementation to those other projects listed above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-17T18:14:35Z", "contents": "@jdalton I've read https://lodash.com/custom-builds and some other resources, but don't see an option for a (custom) compat build with just isEqual (with dependencies, global or umd exports). What am I missing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2015-10-17T19:59:31Z", "contents": "via lodash-cli:\nlodash include=isEqual\nof via browserify after you npm i lodash.isequal:\nbrowserify -r lodash.isequal -s isEqual -o lodash.isequal.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-17T20:27:37Z", "contents": "I just tried to replace the QUnit.equiv call in assert.js to use _.isEqual instead, and all tests still pass. That's great!\nStill need to figure out how to properly integrate lodash into our build, since this is the first external dependency.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2015-10-21T17:35:08Z", "contents": "Still need to figure out how to properly integrate lodash into our build, since this is the first external dependency.\n\nYou could go the webpack route and include isEqual as either require('lodash/lang/isEqual') or require('lodash.isequal').\nI can prep a PR tonight to flesh a possible approach out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-21T17:48:45Z", "contents": "That would be great, @jdalton!\nIt looks like replacing internal deepEqual is the easiest part, but it needs some good strategy using webpack/browserify.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-21T18:35:47Z", "contents": "Yeah, switching to internal modules internally is currently the bigger issue. Though if we make that work with webpack, it'll be super easy to add external modules.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-29T12:14:44Z", "contents": "@jdalton any idea if you'll be able to work on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2015-10-29T13:29:27Z", "contents": "Yes, I'll try to get something working this weekend. Last weekend I was unblocking rollup (es6 module bundler). This weekend can be QUnit bundling time. The switch may want to be put on hold though until after the 4.0 bump as lodash's 3.10.1 doesn't support map/set comparisons.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-29T14:02:22Z", "contents": "Sounds goood. Making progress on bundling will be valuable either way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2016-02-09T18:51:11Z", "contents": "I should revisit this now that v4 is out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-02-09T19:08:05Z", "contents": "That would be great! I think our deepEqual implementation has seen some improvements, but that shouldn't stop us from replacing it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T15:42:44Z", "contents": "I think our deepEqual implementation has seen some improvements, but that shouldn't stop us from replacing it.\n\nyes, I'm looking forward to it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "help wanted", "meta-ready"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 868, "url": "https://github.com/qunitjs/qunit/issues/868", "title": "Automated migration tools for QUnit 2.0 syntax", "contents": "Hi folks,\nI've been working (occasionally) on a QUnit migrator tool, platinumazure/qunit2-migrator. Today I learned of another tool being developed, apsdehal/qunit-migrate.\nBefore I get too much further, I'd like to confirm with the QUnit team: Are there any plans to create or support a migration tool? If so, what do I need to do to either win support for what I have done or to gracefully fold in my tool's capabilities to whatever the \"official\" migration tool may be? And if there are no plans to support a tool, what is the best way for me to request extra eyes on it and get feedback without spamming people?", "createdAt": "2015-10-02T21:56:34Z", "updatedAt": "2018-12-22T20:25:21Z", "closedAt": "2016-04-21T15:15:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 5, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "apsdehal", "company": "RE @facebookresearch, Contributor @jquery "}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 13, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-03T00:24:20Z", "contents": "As a quick note: We should add links on both the plugins and the upgrade guide pages to available migration tools.\nI'll get back to the actual question later.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-06T11:01:50Z", "contents": "It looks like your tool is based on AST transforms, while @apsdehal's tool is using regex. He mentioned (apsdehal/qunit-migrate#4 (comment)) that he'd like to switch to using JS AST, so that seems like a good opportunity to collaborate. It would be great to have one really solid tool instead of two that mostly solve the same problem.\n@apsdehal since you mentioned moving to AST, would you consider contributing to @platinumazure's tool?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "apsdehal", "authorAssociation": "NONE", "createdAt": "2015-10-07T04:31:51Z", "contents": "@jzaefferer I can contribute to @platinumazure's tool, but the tool I developed came into existence mostly because of the custom needs of jquery-projects and the custom syntax. Thus I further modified it to a more general support. I can't immediately halt the development on it until @platinumazure's tool take care of different syntax, good wikis and a few other stuff. We can work together in that direction.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-07T04:35:08Z", "contents": "@apsdehal The syntax tree transformation I selected, recast, was chosen specifically to try to preserve existing syntax and spacing and things, although it does have a few bugs when new statements are generated. Could you please either provide me some test cases using jQuery or other custom syntax, or try running the tool against said syntax, and open issues (or otherwise let me know) for any problems that show up? Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "apsdehal", "authorAssociation": "NONE", "createdAt": "2015-10-07T04:37:16Z", "contents": "@platinumazure You can select data number 8, 9 and 10 from https://github.com/apsdehal/qunit-migrate/tree/master/tests/data. These all have been taken from jquery projects.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-07T12:27:40Z", "contents": "Understood. I'll give it a try in the next couple of days.\nOn Oct 6, 2015 11:37 PM, \"Amanpreet Singh\" notifications@github.com wrote:\n\n@platinumazure https://github.com/platinumazure You can select data\nnumber 8, 9 and 10 from\nhttps://github.com/apsdehal/qunit-migrate/tree/master/tests/data. These\nall have been taken from jquery projects.\n\u2014\nReply to this email directly or view it on GitHub\n#868 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-08T15:33:10Z", "contents": "It is great to see how this is going. Ping me if you need any help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T19:47:05Z", "contents": "How about we add links to both tools (while they're not merged, or whatever will happen) to the plugins page and the top of the migration guide? With those in place we can close this ticket, then update the links later as things progress.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-11-04T17:16:33Z", "contents": "@jzaefferer \ud83d\udc4d\n@apsdehal Sorry for not getting back to you-- I've been incredibly busy at work. I'm hoping to try my tool out on your test cases this week.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T21:40:21Z", "contents": "@apsdehal @platinumazure was there any progress towards merging these tools?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T21:44:35Z", "contents": "No, and I've stopped working on my tool. @apsdehal has made good progress\non his tool. It can be the \"official\" one, if everyone agrees it is up to\nsnuff.\nSorry, I just don't have the bandwidth to maintain my migration tool on top\nof my other projects right now \ud83d\ude22\nOn Apr 20, 2016 4:40 PM, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n@apsdehal https://github.com/apsdehal @platinumazure\nhttps://github.com/platinumazure was there any progress towards merging\nthese tools?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n#868 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T21:47:34Z", "contents": "Alright, thanks for letting us know.\nI lost track of the previous discussion (and I'm not sure what might still be relevant). Seems like @apsdehal could maybe add your test cases to this project. Either way, we should link to it in the migration guide.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-21T15:15:50Z", "contents": "See qunitjs/qunitjs.com#120 for adding the note to the migration guide.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 869, "url": "https://github.com/qunitjs/qunit/issues/869", "title": "Improve module environment inheritance with a Object.create like", "contents": "Ref #859 (comment)\nInstead of using QUnit's extend method to extend a module's env. inheritance, we should improve it with a Object.create's like inheritance.\nSuggested by @gibson042:\nvar createObject = (function( Base ) {\n    return function( prototype ) {\n        Base.prototype = prototype;\n        return new Base();\n    };\n})( Function() );\n\u2026\nenv = createObject( parentModule.testEnvironment );\nWe could also use Object.create adding a polyfill that would be used only on IE6~IE8 for the supported browsers.", "createdAt": "2015-10-05T14:52:53Z", "updatedAt": "2018-12-22T20:17:54Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 6, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T19:44:02Z", "contents": "Sounds good to me. Would help to see an actual implementation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T19:44:46Z", "contents": "For the Object.create polyfill, we can inline that without the comments, but with a // Support ... comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-20T17:57:25Z", "contents": "I want to investigate using LoDash's _.create as we might use _.isEqual in #865", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-20T22:21:05Z", "contents": "Good idea. It'll be a while until I can get back to working on the build to include lodash modules, so feel free to take that over.\nMaybe we should start by trying to switch to ES6 modules (again), with rollup? Then add more dependencies from there.\nOr maybe using webpack? I had good experience with that on other projects. It would certainly deal well with a mix of internal ES6 modules and external modules, in whatever format.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T15:43:40Z", "contents": "Is this still desired? Since we now support IE9+ we could use Object.create directly,  but I'm unsure what benefit this gives us over using the current extend implementation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T18:51:45Z", "contents": "The biggest reason for this issue was ensuring that every test has a distinct environment based on its module's environment and shared with the entire before/beforeEach queue and afterEach/after stack, and that is already fulfilled per #859 (comment) . There's still value in actual inheritance over shallow copying, but I think it's exclusive to sugar for advanced asynchronous use cases (and \"sugar\" in the sense that they can still work without it). For example:\nQUnit.module(\"outer\", function( outerModule ) {\n\t// Load an ES2018 module into this environment, asynchronously\n\t// cf. https://github.com/tc39/proposal-dynamic-import\n\tthis.dynamicModulePromise = import(\"./dynamicModule.js\")\n\t\t.then( module => this.dynamicModule = module );\n\n\tQUnit.module(\"doesntNeedDynamicModule\", function( innerModule ) {\n\t\tQUnit.test(\u2026);\n\t});\n\tQUnit.module(\"needsDynamicModule\", function( innerModule ) {\n\t\tinnerModule.before( () => await this.dynamicModulePromise );\n\t\tQUnit.test(\u2026);\n\t});\n\tQUnit.module(\"alsoNeedsDynamicModule\", function( innerModule ) {\n\t\tinnerModule.before( () => await this.dynamicModulePromise );\n\t\tQUnit.test(\u2026);\n\t});\n});\nI'm cool with closing it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta", "meta-ready", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 870, "url": "https://github.com/qunitjs/qunit/issues/870", "title": "beforeEach, afterEach hooks not called if run second time after previous at least one test failed", "contents": "I have next suite:\n(function(module, test)\n{\n    var beforeEachHook = function(assert)\n    {\n        console.log(\"beforeEach: \" + assert.test.testName);\n    };\n\n    var afterEachHook = function(assert)\n    {\n        console.log(\"afterEach: \" + assert.test.testName);\n    };\n\n    module(\"Suite with one failed test\",\n        {\n            beforeEach: beforeEachHook,\n            afterEach: afterEachHook\n        }\n    );\n\n    test(\"First unit test\", function(assert)\n    {\n        assert.ok(true);\n    });\n\n    test(\"Second unit test\", function(assert)\n    {\n        assert.ok(false);\n    });\n\n    test(\"Third unit test\", function(assert)\n    {\n        assert.ok(true);\n    });\n\n}(QUnit.module, QUnit.test));\nWhen I run it first time I received in console next messages:\nbeforeEach: First unit test\nafterEach: First unit test\nbeforeEach: Second unit test\nafterEach: Second unit test\nbeforeEach: Third unit test\nafterEach: Third unit test\n\nResult of execution:\nFirst unit test - okay\nSecond unit test - failed\nThird unit test - okay\n\nWhen I run it second time I received only next messages:\nbeforeEach: Second unit test\nafterEach: Second unit test\nbeforeEach: First unit test\nafterEach: First unit test\n\nResult of execution:\nFirst unit test - okay\nSecond unit test - failed\nThird unit test - okay\n\nAs you can see in second run before each and after each of Third unit test is not called.\nQUnit.version = \"1.19.0\";\nAs I noticed Test#hooks not add beforeEach, afterEach hooks as it not pass next condition:\n        if ( this.module.testEnvironment &&\n                QUnit.objectType( this.module.testEnvironment[ handler ] ) === \"function\" ) {\n            hooks.push( this.queueHook( this.module.testEnvironment[ handler ], handler ) );\n        }\nQUnit.objectType( this.module.testEnvironment[ handler ] )\nequal to \"undefined\"\nAs it possibly cleared in ran Test#before (I notice that \"execution\" of test starts before all Test#hook executed) in next lines:\n        if ( this.module.testEnvironment ) {\n            delete this.module.testEnvironment.beforeEach;\n            delete this.module.testEnvironment.afterEach;\n        }", "createdAt": "2015-10-05T16:36:35Z", "updatedAt": "2015-10-20T16:25:31Z", "closedAt": "2015-10-20T16:25:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "romanmikhailov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "romanmikhailov", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-05T16:52:10Z", "contents": "Confirmed: http://jsbin.com/yiqazobulo/edit?html,js,console,output\nThanks for this comprehensive bug report. Would you have time to write a fix for it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-07T22:07:19Z", "contents": "This regression came from fdf00a4. I'll see how can I avoid both problems.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "romanmikhailov", "authorAssociation": "NONE", "createdAt": "2015-10-08T08:11:15Z", "contents": "@leobalter what about we change current behavior:\nif ( this.module.testEnvironment ) {\n    delete this.module.testEnvironment.beforeEach;\n    delete this.module.testEnvironment.afterEach;\n}\nthis.testEnvironment = extend( {}, this.module.testEnvironment );\nwith next:\nthis.testEnvironment = extend( {}, this.module.testEnvironment );\ndelete this.testEnvironment.beforeEach;\ndelete this.testEnvironment.afterEach;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-16T19:42:21Z", "contents": "Will be addressed by #873", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 871, "url": "https://github.com/qunitjs/qunit/issues/871", "title": "Can I specify testTimeout for individual test?", "contents": "", "createdAt": "2015-10-07T08:42:11Z", "updatedAt": "2015-10-07T15:31:14Z", "closedAt": "2015-10-07T15:31:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "miherlosev", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "miherlosev", "company": "Devexpress"}, {"login": "mixed", "company": "@naver "}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 6, "comments_data": [{"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-07T09:14:04Z", "contents": "@mikesherov\nDo you want [it]?\ntestTimeout (default: undefined)\nType: Number\nSpecify a global timeout in milliseconds after which all tests will fail with an appropriate message. \nUseful when async tests aren't finishing, to prevent the testrunner getting stuck. \nSet to something high, e.g. 30000 (30 seconds) to avoid slow tests to time out by accident.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "miherlosev", "authorAssociation": "NONE", "createdAt": "2015-10-07T09:19:58Z", "contents": "No. It is global timeout for all tests.\nI need specify timeout for single test.\nPseudo code:\n javascript\ntest('test1', function(){}, 2000);  //Timeout 2 sec\ntest('test2', function(){}, 3000); //Timeout 3 sec\netc.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-10-07T13:33:21Z", "contents": "No, but it's not hard to do it yourself.\nQUnit.test('foo', function(assert) {\n  var done = assert.async();\n  var timerId = setTimeout(function() {\n    assert.ok(false, 'Test timed out');\n    done();\n  }, 2000);\n\n  $.getJSON('/api/someModel.json')\n    .done(function() {\n      assert.ok(true, 'GET success');\n    })\n    .fail(function() {\n      assert.ok(false, 'GET fail');\n    })\n    .always(function() {\n      clearTimeout(timerId);\n      done();\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-10-07T13:37:40Z", "contents": "You could also easily wrap the above functionality into your own plugin or helper method.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "miherlosev", "authorAssociation": "NONE", "createdAt": "2015-10-07T13:43:29Z", "contents": "Ok.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-07T15:31:11Z", "contents": "With sensible parts for the test method coming until 2.0, and as this is probably better being wrapped in a helper method, I'm closing this for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 872, "url": "https://github.com/qunitjs/qunit/issues/872", "title": "Set QUnit config via function", "contents": "I would like to set QUnit.config settings through a function call, like:\nQUnit.config( {\n  autorun: false,\n  collapse: false,\n  ...\n} );\n\n// or:\nQUnit.setup( {\n  autorun: false,\n  collapse: false,\n  ...\n} );\n\n// or even:\nQUnit.config.set( {\n  autorun: false,\n  collapse: false,\n  ...\n} );\nThis way we can make a better handle for other options, like setting a custom reporter like:\nQUnit.config( {\n  // please not this issue won't define the reporter settings.\n  reporter: \"tap\",\n  reporterOptions: {\n    outputMethod: console.log\n  }\n} );\nThis also allows settings definitions through a json file, imported and applied to QUnit.config.\n\nIf this is not possible I would have to set the custom reporter (and maybe other features in the future)  through a direct function like: QUnit.config.reporter( \"tap\", { options } );", "createdAt": "2015-10-07T14:58:19Z", "updatedAt": "2017-03-31T04:42:55Z", "closedAt": "2017-03-31T04:42:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-07T15:54:53Z", "contents": "I don't quite understand the usecase. The reporter example seems easy enough to accomplish using the current approach, without adding anything new.\n\"How to register reporters\" is an interesting question though. We should look at options for that first.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:42:55Z", "contents": "I don't think this is necessary to change anymore.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 879, "url": "https://github.com/qunitjs/qunit/issues/879", "title": "Update jscs to latest", "contents": "As mentioned in #876, grunt-jscs may not be catching certain style errors and needs to be updated to the latest version.", "createdAt": "2015-10-20T21:39:27Z", "updatedAt": "2016-03-02T18:27:21Z", "closedAt": "2016-03-02T18:27:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "arghgr", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "arghgr", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-21T15:56:06Z", "contents": "a jscs update might include jshint as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-25T16:29:16Z", "contents": "@arghgr I'm looking forward on a PR to fix this one. :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 881, "url": "https://github.com/qunitjs/qunit/issues/881", "title": "Throw warnings for deprecated features.", "contents": "QUnit should throw warnings (reporter/console) for deprecated features, including:\n\nuse of global methods instead of the namespaced methods. (some can be easily fixed with local variables like: var test = QUnit.test;)\nuse of stop/start methods\netc\n\nAlso it should mention the qunit-migrate tools.", "createdAt": "2015-10-21T22:05:42Z", "updatedAt": "2017-04-09T15:39:43Z", "closedAt": "2017-04-09T15:39:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 7, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-22T00:08:06Z", "contents": "I don't think we need an additional migration layer. 2.0 will throw helpful errors for removed features, for anything not yet migrated.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-22T01:16:11Z", "contents": "Having warnings for deprecated features on 1.x helps on the migration process, so a run using the last 1.x without any warnings would result on a safe and clean migration to 2.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-10-30T00:21:26Z", "contents": "After talking on a meeting today with @jzaefferer, we decided to keep this issue and land it before QUnit 2.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-12-10T09:53:05Z", "contents": "There should be an option to disable the warnings. For example, in jQuery UI there's the $.uiBackCompat` flag, which turns off the back-compat layer, to test if the next release (where deprecated features are dropped) will still work. That's different from warnings, but we can do something similar here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T18:47:05Z", "contents": "Is this still valid?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T18:53:40Z", "contents": "not landing on 2.0 but useful to guide the Warnings API as the request is to get proper deprecation warning messages on the reporter, not only an exception pushing a failure, even if it's well handled by QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T15:39:43Z", "contents": "I'm going to close this. We added Logger.warn internally for logging deprecations.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 883, "url": "https://github.com/qunitjs/qunit/issues/883", "title": "`raises` is not exported in the global scope in QUnit pre-2.x", "contents": "Assert.prototype.raises is an alias for Assert.prototype.throws, but only the latter is exported in the global scope. Example:\nQUnit.test( \"throws & raises\", function( assert ) {\n\n  assert.throws( function() { throw \"error\" });  //ok\n  assert.raises( function() { throw \"error\" });  //ok\n\n  throws( function() { throw \"error\" });  //ok\n  raises( function() { throw \"error\" });  //ReferenceError: raises is not defined\n});", "createdAt": "2015-10-25T01:45:07Z", "updatedAt": "2015-10-27T02:17:45Z", "closedAt": "2015-10-27T02:17:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "scinos", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "scinos", "company": "Atlassian"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 890, "url": "https://github.com/qunitjs/qunit/issues/890", "title": "QUnit.reporter( reporter [, options ] );", "contents": "After talking to J\u00f6rn today, we decided to create this reporter method to call custom reporters for QUnit.\nOn QUnit 2.0, it's gonna be necessary to call it even for the HTML Reporter.\nThis should be made on top of the new EventsEmitter interface, so it depends on #882.\nTo make it work and test it, we need to implement a simple custom reporter, probably a tap output. qunit-tap should be observed to avoid extra work.\nOther custom reporters should follow js-reporters (on QUnit 2+) or published as other npm modules.\n\nFeatures:\nReporter name / object\nQUnit.reporter needs to be called with at least one argument identifying the reporter to be used. It might be a string with the name of the reporter or a reporter object.\nTODO: The reporter object is not structured yet\nOptions\nQUnit.reporter might be called with a second argument as an object with property options.\nThe main options, used as a suggested interface for most reporter are the following, with their respective defaults:\n\nlog: console.log => the main print output method.\nerror: console.error => the output method for errors.\nwarn: console.warn => the output method for warnings.\nall: null => if this property is set, it replaces the values for all the other output properties: log, error, and warn.\n\nThese print options might not be used no all reporters, as it won't be used on an eventual HTML Reporter built on top of it.\nExamples:\n// built-in reporter\nQUnit.reporter('tap');\n\n// built-in reporter with options\nQUnit.reporter('tap', {\n  all: print\n});\n\n// custom reporter\nQUnit.reporter(require('js-reporters-junit'));\nThe output on the runEnd event\nThe runEnd event might include a custom output property containing the printed results. This is optional on different reporters, but it can be used with different reporters, where output is an object and their children keys are the names of the reporters, their values should be strings containing the output result.\nExample:\n// do whatever you want with the reporter results\nQUnit.on('runEnd', function(details) {\n  console.log(details.output.junit);\n  console.log(details.output.tap);\n  fs.writeFileSync(details.output.tap);\n});\nThis part might be made in a separate issue and it does not need to block the 2.0 Milestone.", "createdAt": "2015-10-30T00:20:07Z", "updatedAt": "2015-12-09T17:52:45Z", "closedAt": "2015-12-09T16:46:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-31T13:28:43Z", "contents": "On QUnit 2.0, it's gonna be necessary to call it even for the HTML Reporter.\n\nThat wasn't my understanding. Unless there's a good reason to require that, I'd stick with the default.\n\nQUnit.reporter('tap');\n\nI'm not sure this is a good idea either. Even if QUnit bundles reporters, it should still be easy enough to get an instance and pass it to the reporter method.\nQUnit.reporter(require(\"qunit/tap-reporter\"));\nQUnit.reporter(QUnit.reporters.tap);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-10-31T13:29:59Z", "contents": "As far the runEnd event, I don't see why the extra property needs to be nested under an output property. I can't think of any reason why the extra property, like tap or junit, would clash with any of the existing properties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-10-31T14:20:21Z", "contents": "I share @jzaefferer's disinclination towards QUnit.reporter( str ), and the runEnd output seems like code talking to itself. I say YAGNI on that, but second the extra isolating property if/when we do want such functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T16:46:40Z", "contents": "As talked on the last QUnit meeting, I'm dropping this idea.\nUsing different reporters through npm modules should be easier to register them, like loading QUnit and qunit-tap. or any other reporter.\nWith the reporter being loaded, it should handle all the QUnit callbacks, it's not necessary to call QUnit.reporter.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "type-enhancement"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 891, "url": "https://github.com/qunitjs/qunit/issues/891", "title": "Meta: The QUnit 2.0 plan", "contents": "QUnit 2.0 is close, and we only have some a few issues to solve until it's done. This is a meta issue with the agenda for the new QUnit 2.0:\n\n #422 EventEmitter - PR at #882\n #890 QUnit.reporter method with built-in tap\n #881 Throw warnings for deprecated messages\n Release the last QUnit 1.x before QUnit 2 (no new features until QUnit 2)\n\\o/\n Remove the warnings for deprecated methods\n Apply the breaking changes with warnings (see https://github.com/jquery/qunit/milestones/v2.0)\n Release QUnit 2.0 / drops support for ES3 / change support to ES5+\n\\o/\n Remove the warnings for methods removed in QUnit 2.0\n Release QUnit 2.1\n QUnit.reporter(require('qunit-reporter-html'))\n QUnit replaces built-in tap reporter with js-reporters/tap\n\nAny other features are not blockers for this process, so we can still have features like QUnit.pending and _.deepEqual before QUnit 2 or #881.", "createdAt": "2015-10-30T01:07:41Z", "updatedAt": "2016-12-06T06:15:44Z", "closedAt": "2016-06-16T17:46:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T16:47:48Z", "contents": "#890 was dropped.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-08T13:12:42Z", "contents": "Wondering how accurate this still is as a representation of things that need to be done before QUnit 2.0. And if this is still accurate, are there people on all of these, or do some of these items potentially need volunteers?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-16T17:46:32Z", "contents": "Good point. This turned as a bit inaccurate, but the central idea just happened.\nSome features will make their way now with 2.0 released.\nI'm closing this as this is now leading to more misunderstanding than anything else.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T04:45:32Z", "contents": "@leobalter looks like you might be prepping the 2.1 release. Just wanting to make sure \"Remove the warnings for methods removed in QUnit 2.0\" is done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T06:15:44Z", "contents": "I missed that part. My bad. I'll do it as soon as I figure out how to solve the phantomjs thing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta", "meta-ready"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 892, "url": "https://github.com/qunitjs/qunit/issues/892", "title": "QUnit Tips and Tricks on Global Ember Meetup", "contents": "EmberCLI uses QUnit as it's default test runner. Most people in Ember community use it on daily bases, but there are probably more advanced techniques that they're not familiar with.\nWould someone who knows QUnit well be interested in giving a lightning talk on \"QUnit Tips and Tricks\" at next Global Ember Meetup in 2 weeks?", "createdAt": "2015-11-09T15:35:10Z", "updatedAt": "2015-12-15T01:31:04Z", "closedAt": "2015-12-15T01:31:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "taras", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "taras", "company": "@thefrontside "}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-11-11T02:51:48Z", "contents": "That's cool, but I'm afraid there's not a lot of unknown tricks on QUnit, but you might be interested to know on the QUnit roadmap and it is affected by Ember, not only on the development of features, but with a similar release process.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-11-11T02:54:44Z", "contents": "@gibson042, @jzaefferer are you interested? Otherwise I'm in. :)\nThanks for the invite, @taras!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-11-11T03:38:35Z", "contents": "I think you're it, @leobalter!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "taras", "authorAssociation": "NONE", "createdAt": "2015-11-11T14:51:00Z", "contents": "QUnit roadmap and it is affected by Ember\n\nI agree, people would find this very interesting.\n@leobalter Would you be able to prepare a short (10-15 minute) talk for November 21st?\nHere is a link to the event https://www.bigmarker.com/global-ember-meetup/Ember-Testing-Day", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-11-16T16:27:35Z", "contents": "Sure! It is very exciting to share the experience with Ember community! I'm looking forward!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "taras", "authorAssociation": "NONE", "createdAt": "2015-11-16T16:28:28Z", "contents": "Awesome, I\u2019ll add you to the list.\n--\u00a0\nTaras Mankovski\nOn November 16, 2015 at 11:27:49 AM, Leo Balter (notifications@github.com) wrote:\nSure! It is very exciting to share the experience with Ember community! I'm looking forward!\n\u2014\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 893, "url": "https://github.com/qunitjs/qunit/issues/893", "title": "Introduce beforeAll/afterAll module hooks?", "contents": "I'd like to propose adding in beforeAll/afterAll hooks to test modules. Similar to the functions of the same name in Jasmine or before/after in Mocha. It would be convenient to have a way to access the testing context at the start and end of a module on a case-by-case basis instead of just the sweeping moduleDone and moduleStart callbacks.\nI apologize if this has been discussed before, couldn't seem to find any background on the matter.\ncc @nathanhammond", "createdAt": "2015-11-12T02:03:35Z", "updatedAt": "2016-04-18T16:26:32Z", "closedAt": "2016-04-18T16:26:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 7, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "cjmaynar", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "mmun", "company": null}], "comments_count": 16, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-11-12T05:24:15Z", "contents": "If I correctly understand what you want, this is already possible: http://jsfiddle.net/8zfLqk0r/\nQUnit.module( \"module\", function( obj ) {\n    obj.beforeEach( function() {\n        this.setup = true;\n    } );\n    obj.afterEach( function() {\n        console.log( \"teardown\" );\n    } );\n    QUnit.test( \"test\", function( assert ) {\n        assert.strictEqual( this.setup, true,\n        \"beforeEach ran\" );\n    } );\n} );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2015-11-12T05:45:57Z", "contents": "@gibson042 not quite, guess I should've explain myself a bit more clearly.\nWhat I'm looking for are hooks to run at the beginning of a module and at the end of the module, rather than at the beginning and end of each test. Similar to what is done in Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cjmaynar", "authorAssociation": "NONE", "createdAt": "2015-11-17T17:55:59Z", "contents": "This would be pretty useful indeed. I'm looking for something like Python UnitTest's setUpClass/tearDownClass methods that will run once before any tests are run, and then once after all the tests are complete", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-11-17T18:13:43Z", "contents": "@trentmwillis that would be an interesting feature. If it was discussed before - certainly mentioned at least - I believe we should try it.\nI would name them before/after module hooks, removing the All, it's easier to match beforeEach and afterEach.\nPRs are welcome!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-11-18T13:31:25Z", "contents": "It is definitely a feature that we've seen requests for before. I myself would like that capability as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-11-18T13:39:39Z", "contents": "P.S. We didn't implement it in the past because there was already a decent plugin available for it: qunit-once.\nHowever, I would imagine that [old] plugin does not currently offer all the niceties that a built-in set of hooks easily could, i.e. guarantee before callbacks to run before any beforeEach callbacks, guarantee after callbacks to run after any afterEach callbacks, first-class support for async, first-class support for promises, etc", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-11-18T15:35:48Z", "contents": "From the Jasmine docs:\n\nThe beforeAll function is called only once before all the specs in describe are run, and the afterAll function is called after all specs finish. These functions can be used to speed up test suites with expensive setup and teardown.\nHowever, be careful using beforeAll and afterAll! Since they are not reset between specs, it is easy to accidentally leak state between your specs so that they erroneously pass or fail.\n\nThis gotcha sounds like a good reason to not offer this feature in the first place. That said, does someone have an example for the \"speed up test suites\" usecase? Are there other usecases? Usecases with examples would help a lot, both to justify implementing this and given an implementation, to document this feature properly (the \"examples\" for both Jasmine and Mocha aren't sufficient usecases).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2015-12-14T19:58:13Z", "contents": "Sorry for letting this sit for so long.\n@jzaefferer that gotcha is definitely something to highlight if this feature does move forward.\nCurrently my team would like this feature for generating mock data at the beginning of a module and tearing it down at the end. While we could definitely do this with beforeEach/afterEach we get a perf benefit from not having to generate a new mock before each test (though we are also very cognizant of potentially polluting other tests and only do this when the mock has no write operations performed on it).\nThe more interesting use case that I am aware of is an idea in the Ember community. We've talked about moving the acceptance test model to use only one instance of an application and swap out the stateful information between tests instead of tearing down and creating an entire new application. This again has performance benefits. Here is a relevant conversation and example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmun", "authorAssociation": "NONE", "createdAt": "2015-12-24T17:04:19Z", "contents": "@trentmwillis But I don't see why that should be scoped to a module. It could be shared with all acceptance test modules. I would like to avoid test state being managed per module (preferring per test or global state when possible).\nThat said, I'm not opposed to the idea presented in this issue. I'd prefer that it be named something very explicit though e.g. beforeModule/afterModule even if its not DRY. It shouldn't come up a lot in practice anyways.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-01-11T18:49:23Z", "contents": "@mmun that makes sense and can explore that more in the appropriate Ember channels.\nAs for this issue, it seems like there are multiple persons interested in this, though I can only think of one potential use case, which could be argued isn't justification for the \"gotcha\" that @jzaefferer mentioned above. How do we want to proceed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-11T19:04:13Z", "contents": "My concerns are only on naming it. The gotcha (leaking state to other tests) seems also as a developer's responsibility matter.\nThe feature makes a lot of sense on ember tests, including using QUnit for acceptance and integration tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-01-11T19:23:57Z", "contents": "Sounds good. I'll take a stab at implementation later this week.\nAs for the name, should we do before/after or beforeModule/afterModule? I think either would be fine, with the former providing more parody with other JS testing frameworks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-11T19:33:21Z", "contents": "sure! and it seems they also connect well with beforeEach/afterEach semantics.\nAs I believe this will affect a lot of Ember tests, I would like to know if @rwjblue has any thoughts to add.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-01-14T20:06:56Z", "contents": "@leobalter and others, I started implementing this, but there are two finer details I'm stuck on:\n\nFor nested modules, should before run once before all tests in the module stack? Or, once before each module? Similar question for after. My thinking is that it should be once for the entire stack of modules.\nShould we assume that modifications done to this (a.k.a., testEnvironment) in the before hook propagate throughout all subsequent tests? My thinking is yes, since it reasonable to believe that any work done in before is likely setup for all tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-14T20:24:54Z", "contents": "For nested modules, should before run once before all tests in the module stack? Or, once before each module?\n\nTBQH, I don't know. It makes a lot of sense to stack the *Each hooks, but it seems better to not stack the modules only hooks. Someone more used to integration and functional tests would answer this better. Once again, @rwjblue might have a better perspective for this being used on ember-qunit.\n\nShould we assume that modifications done to this (a.k.a., testEnvironment) in the before hook propagate throughout all subsequent tests?\n\nYes, I believe it should work similar to the other hooks and nested modules.\n\nMy thinking is yes, since it reasonable to believe that any work done in before is likely setup for all tests.\n\nExactly", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-01-15T01:50:22Z", "contents": "but it seems better to not stack the modules only hooks.\n\nThis was my thought, and turns out this is how Mocha does it as well. So if you have two modules, outer and inner, the order of execution goes: outer.before, outer.tests, inner.before, inner.tests, inner.after, outer.after. I'll follow that pattern unless someone presents a valid reason to do otherwise.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 894, "url": "https://github.com/qunitjs/qunit/issues/894", "title": "Allow `testEnvironment` to be accessed within a `test` without `this`", "contents": "I already made a case for this in rwjblue/ember-qunit#212:\n\nWhy? It might be confusing to get assert passed as param and having\nto use this to access the context. Making it a param also makes it\nmore semantic, because you will be naming it for what it is: context.\n\ns/context/environment/\nAn example:\ntest('example test', (assert, env) => {\n  var subject = env.subject();\n  // assert stuff\n}); \nI'll open a PR a soon as I've got some confirmation that something like this is OK.", "createdAt": "2015-11-19T15:01:14Z", "updatedAt": "2017-04-15T03:54:12Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "martndemus", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "martndemus", "company": "DockYard"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-11-19T15:33:48Z", "contents": "As I mentioned there, I wonder if it's better to set env as a property of the assert object.\nIt's been discussed here and, if I'm not wrong, @gibson042 and @Krinkle have some arguments to avoid an extra parameter. One of them is messing up with any QUnit extensions using a second argument for anything else.\nAlso, the env could be easily handled, and the arrow function can be set without () for the parameters.\ntest('example test', assert => {\n  var { env } = assert;\n  var subject = env.subject();\n  // assert stuff\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-11-19T17:27:18Z", "contents": "My main concern was keeping our module/test callback signatures similar, but it looks like that ship has sailed (not necessarily in a bad way, though, because module callbacks are invoked synchronously but test callbacks are not\u2014they're different beasts).\nI am opposed to extending the assert object (in part because I'd like to eventually support drop-in assertion library replacement), and don't think we should do anything with parameters until sorting out the many suggestions that have already been made:\n\nmodule( name, function( \u2026, QUnit ) { \u2026 } )\nmodule( name, function( moduleObject ) { \u2026 } ) (partially implemented)\ntest( name, arityChangesBehavior ) (refuted)\n\nI'm personally in favor of running with the second point and letting moduleObject subsume all necessary functionality, at which point we could add a context parameter to both module and test. Letting test environment continue to be available only from execution context seems appropriate until such a decision is made, but perhaps that could be sooner rather than later?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 895, "url": "https://github.com/qunitjs/qunit/issues/895", "title": "QUnit DeepEqual using two strings", "contents": "I was testing some code using qunit my test kept failing so I tested\nvar str = new String(\"hey there\");\nvar s = new String(\"hey there\");\nassert.deepEqual(s, str);\nassert.equal(s, str);\n\nboth equal trys failed", "createdAt": "2015-11-26T19:58:15Z", "updatedAt": "2015-12-30T02:09:57Z", "closedAt": "2015-12-30T02:09:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joeJazdzewski", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "joeJazdzewski", "company": "GuidantFinancial"}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-01T02:18:19Z", "contents": "new String will result in the types actually being objects, not strings. So I would expect assert.equal to fail since str == s is false. As for deepEqual failing, my guess is your implementation stores an ID (or hash code, or...) within the string object, and so deepEqual will fail as well when it compares property-to-property.\nTry using string literals rather than objects. For example, if you have a function that returns \"hey there\", the correct assertion would be:\nvar result = myHeyThereFunction();\nassert.equal(result, \"hey there\", \"Got 'hey there' back!\");\n// Or better:\nassert.strictEqual(result, \"hey there\", \"Got 'hey there' back!\");", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-02T16:31:52Z", "contents": "I can't see a good reason to instantiate string objects using the new String form. If you really need to stick with it, keep in mind different object instances will not pass on the simple equal comparison, if what you want to compare is the value, you can catch its value instead.\nvar s = new String( \"hey there\" )\ns; // a String typed object, with a collection of each character\ntypeof s; // \"object\"\n\ns.toString(); // the value of this object when converted to a simple regular string.\ntypeof s.toString(); // \"string\"\nBoth in == (equivalent to assert.equal) and === (equivalent to assert.strictEqual) you will only have true returning if both objects share the same reference.\nWhat we can still check is the deepEqual assertion, as it should check for the object props.\n  assert.deepEqual(new String(\"foo\"), new String(\"foo\")); // fails\n  assert.deepEqual(new String(), new String()); // fails\n  assert.deepEqual(new Object(), new Object()); // pass\n  assert.deepEqual({foo: \"bar\"}, {foo: \"bar\"}); // pass", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "help wanted"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 896, "url": "https://github.com/qunitjs/qunit/issues/896", "title": "hidepassed needs to check for the right element", "contents": "From #819:\n\nJust got around to looking into this. The problem above can be reproduced by removing the element with id qunit.\nBasically, we wanted to have our own header, so we had manually added the following HTML to the page:\n   <!--\n    <div id=\"qunit\"></div>\n   -->\n    <h1 id=\"qunit-header\">\n          // Custom header here\n    </h1>\n    <div id=\"qunit-testrunner-toolbar\"></div>\n    <ol id=\"qunit-tests\"></ol>\nThis actually works, except that hidepass is not honoured.\nThe problem code is the following in QUnit.begin\n    if ( qunit && config.hidepassed ) {\n        addClass( qunit.lastChild, \"hidepass\" );\n    }\n\nThis code is inconsistent, because the hidepass is actually in qunit-testrunner-toolbar and existence of that element should imply that the code runs correctly. Probably\n    addClass( qunitToolbar.parentElement.lastChild, \"hidepass\" );", "createdAt": "2015-11-30T10:27:09Z", "updatedAt": "2016-03-02T18:33:11Z", "closedAt": "2016-03-02T18:33:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 1, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T15:50:21Z", "contents": "good catch. I'll see if I can fix it soon.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 899, "url": "https://github.com/qunitjs/qunit/issues/899", "title": "notOk assertion has wrong label", "contents": "Write test with assert.notOk(true);\nRun test and see expected: \"NOT false\", but really expected is \"NOT true\"\n\nIn the following example, $item has css-class \"dx-state-focused\", so, expression is TRUE, but the label is \"NOT false\"", "createdAt": "2015-12-07T07:43:34Z", "updatedAt": "2015-12-10T00:59:02Z", "closedAt": "2015-12-10T00:59:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mrjohn0011", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mrjohn0011", "company": "@DevExpress"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "MMD-Coding", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T14:52:32Z", "contents": "Confirmed.\nAs assert.ok says expected: true, .notOk should express a NOT true or false.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T16:40:05Z", "contents": "Technically, they should probably say NOT truthy and NOT falsy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T16:50:03Z", "contents": "Technically, they should probably say NOT truthy and NOT falsy.\n\nIt would be a ++ to solve it this way.\nI am linking this issue to some friends as a \"Good first PR\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T19:46:50Z", "contents": "Technically, they should probably say NOT truthy and NOT falsy.\n\nre-reading this:\nassert.ok => the default expected value should be a truthy, or true\nassert.notOk => the default expected value should be a falsy, not truthy, or false\nThese values are for the Expected parameter used for diff purposes, not the result message.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T21:18:09Z", "contents": "Right-o, @leobalter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MMD-Coding", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-09T17:17:51Z", "contents": "Hey, finally found an issue to submit for 24pullrequests \ud83d\ude04 Thanks for letting it open.\nI would like to fix it, but I'm not really sure if I just replace the expected argument with a string. If I do so it looks a bit weird because it adds quotes to the \"Expected: ...\" output. I would propose just to remove the negative argument on assert.notOk and leave the rest. What do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T17:22:17Z", "contents": "the negative assertions are prefixed with a \"NOT\" label on the HTML Reporter, the expected value is false (or equivalent) on .notOk.\nthe label prefix on negative assertions makes sense to every other assertions as notEqual, notStrictEqual, notDeepEqual, etc, but it shouldn't be applied to notOk.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "component-diff", "help wanted", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 900, "url": "https://github.com/qunitjs/qunit/issues/900", "title": "`grunt coveralls` is breaking on CI", "contents": "As seen on https://travis-ci.org/jquery/qunit/builds/95372466 grunt coveralls is breaking.\nI was able to reproduce the error on a local env using both Node 0.10 and 5.1.0", "createdAt": "2015-12-07T16:44:05Z", "updatedAt": "2015-12-07T16:59:43Z", "closedAt": "2015-12-07T16:59:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 904, "url": "https://github.com/qunitjs/qunit/issues/904", "title": "Regex test filtering", "contents": "Would it be possible to introduce regex test filtering? There are cases where we want a subset of our test suite to run but can't achieve it with a simple string filter. Maybe my thinking is naive, but it seems like we should be able to take the filter string and cast it to a regular expression and test the test names against it.\nThis would probably require an additional config option to treat the filter as a regular expression as opposed to a string value.", "createdAt": "2015-12-14T20:57:43Z", "updatedAt": "2015-12-28T17:02:45Z", "closedAt": "2015-12-28T17:02:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "jzaefferer", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T15:47:36Z", "contents": "This is a good question and I would like to discuss before making a decision.\nI currently have some limited filters as filtering by the test names, the module filters and using QUnit.only for single test blocks.\nIt does not look like a problem to cast the filter string to a regular expression.\nQUnit.pending (not implemented yet) would be helpful here but it targets a different strategy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T15:48:52Z", "contents": "The config option might be too much, we should try casting the filter string as a regular expression without any option to enable or disable it, the option would be an unnecessary complexity.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T16:05:58Z", "contents": "Using the existing parameter is fine by me, but we'll need some in-band method of differentiating string matches from regex patterns (similar to the preexisting leading ! for filter inversion) so regex-special characters can still be matched literally. E.g., something like filter=/regexp?/i (optional \"p\") vs. filter=regexp? (literal \"?\").", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T16:42:54Z", "contents": "seems right.\nWe may also trigger the regexp match if the filter value matches a valid regexp literal notation (using the /content/params?\nI'm interested to see how it might be implemented. @trentmwillis would you like to try a PR with it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T17:22:59Z", "contents": "These cases are actually why I thought an additional config option might be valuable as it takes some of the guess work out of determining what sort of pattern we're using. For example, what I'm seeing with the above is:\n/components/g -> Does a global regex search for components\n/components/s -> Does a regex search for /components/s?\nI think trying to determine if we should be treating values as regex patterns or literals would add uncertainty to the end user.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-12-15T18:58:04Z", "contents": "The mechanism doesn't matter to me, as long as behavior is predictable and we maintain backwards compatibility with respect to non-initial special characters.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2015-12-16T00:52:01Z", "contents": "Did an implementation that added an additional config option. @leobalter if you feel strongly that we should not add another config option, I can explore other alternatives.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2015-12-17T08:36:16Z", "contents": "Btw. I feel strongly that we should not add another config option.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2015-12-17T18:17:03Z", "contents": "Noted, will attempt the other approach and update my PR.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 909, "url": "https://github.com/qunitjs/qunit/issues/909", "title": "Regular expression comparison ignores ES2015 \"unicode\" flag", "contents": "e.g., /\\u{1D306}/u.flags === \"u\".\nUsing the new flags property in equiv:callbacks[\"regex\"] should future-proof us against all future additions.", "createdAt": "2015-12-19T15:24:03Z", "updatedAt": "2016-01-10T19:20:12Z", "closedAt": "2016-01-10T19:20:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "mixed", "company": "@naver "}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-07T15:35:57Z", "contents": "and it seems like a easy one to fix.\n@mixed, would you like to help fixing this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-07T16:47:10Z", "contents": "@leobalter\nOK. I have fixed it. \ud83d\ude0f", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 910, "url": "https://github.com/qunitjs/qunit/issues/910", "title": "browserstack-runner is not recognizing some os_version from browsers", "contents": "Ref https://travis-ci.org/jquery/qunit/builds/99126461\nI'll be able to look at it on Wednesday, at least it's returning 0 on the CI.\n> sh build/run-browserstack.sh\n\nLaunching 7 worker(s) for 14 run(s).\n\nError from BrowserStack:  [Error: Validation Failed - `os_version` invalid]\n[2015-12-28T17:50:00.434Z] [Runner alert] Failed to launch worker, Arguments: {\n    \"err\": {}\n}\n...", "createdAt": "2015-12-28T17:52:56Z", "updatedAt": "2016-01-06T18:06:20Z", "closedAt": "2016-01-06T18:06:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 1, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-06T18:06:17Z", "contents": "Not happening anymore.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 911, "url": "https://github.com/qunitjs/qunit/issues/911", "title": "Request: deepContains", "contents": "I'm not sure what the policy on adding new assertion helpers is but I figured I'd make an issue anyways.\nI've often wanted an assertion similar to deepEqual but that only checks equality on the values specified in the on the \"expected\" side. Example,\nlet obj = {\n  a: 1,\n  b: { x: 2, y: 3 }\n};\n\nassert.deepContains(obj, { b: { x: 2 } }); // pass\nassert.deepContains(obj, { a: 1, b: { x: 2 } }); // pass\nassert.deepContains(obj, { a: 2, b: { x: 2 } }); // fail\nThe name is up for bikeshedding.", "createdAt": "2015-12-29T02:50:52Z", "updatedAt": "2016-01-08T05:08:23Z", "closedAt": "2016-01-07T00:36:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mmun", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mmun", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-06T18:04:32Z", "contents": "This seems interesting but currently it seems better to be included as an Assert plugin, not directly on the core api.\n@jzaefferer, thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-01-06T23:48:57Z", "contents": "Definitely better off in a plugin, IMHO.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmun", "authorAssociation": "NONE", "createdAt": "2016-01-07T00:28:58Z", "contents": "Is there a way to write a plugin that doesn't require duplicating all the code in QUnit.equiv?\nDuplicating the code is OK, but it means that the plugin would have to pay special attention to tracking any implementation changes to qunit core. It's fairly important that deepEqual and my proposed assertion have the same notion of equality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-01-07T13:37:15Z", "contents": "In #865 we discussed/planned to replace our implementation with the one from lodash. If that goes through, you could build the plugin on top of the same implementation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmun", "authorAssociation": "NONE", "createdAt": "2016-01-07T14:20:38Z", "contents": "Great! :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-07T15:32:18Z", "contents": "Regardless the solution we find on #865, the idea is to expose it on QUnit.equiv. So you can start building a plugin on top of this method.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-01-08T04:47:08Z", "contents": "If you happen to be using this for Node.js, I'd recommend just using the \"lodash.ismatch\" sub-module (equivalent to _.isMatch) in a custom assertion.\nDefinition, e.g.\nvar isMatch = require('lodash.ismatch');\n\nQUnit.assert.matches = function( actual, expected, customizer, message ) {\n  if ( typeof customizer !== 'function' ) {\n    message = customizer;\n    customizer = undefined;\n  }\n  this.push( isMatch( actual, expected, customizer ), actual, expected, message || 'Actual does not match expected' );\n};\nUsage, e.g.:\nQUnit.test('object matches', function( assert ) {\n  var actual = {\n    name: 'fred',\n    age: 40\n  };\n  var isOlder = function( value, other, key ) {\n    if ( key === 'age' && typeof value === 'number' && typeof other === 'number' ) {\n      return value >= other;\n    }\n    return undefined;\n  };\n\n  assert.matches( actual, { age: 40 }, 'Should have an age of 40' );\n  assert.matches( actual, { name: 'fred' }, 'Should have a name of \"fred\"' );\n  assert.matches( actual, { name: 'fred', age: 40 }, 'Should have a name of \"fred\" and an age of 40' );\n  assert.matches( actual, { age: 18 }, isOlder, 'Should be an adult (of an age >= 18)' );\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 913, "url": "https://github.com/qunitjs/qunit/issues/913", "title": "Suggest add viewport meta tag for mobile.", "contents": "Result page is hard to read in mobile. Adding meta tag looks good.\n<meta name=\"viewport\" content=\"width=device-width\">\nsample\n\ncurrent", "createdAt": "2015-12-30T08:45:08Z", "updatedAt": "2016-01-07T15:34:15Z", "closedAt": "2016-01-07T15:34:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "mixed", "company": "@naver "}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 10, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-12-30T14:38:41Z", "contents": "So, typically the consumer is the one who provides the HTML page on which the unit tests are run. Are you just suggesting that it should be included on a sample page somewhere, like the one on qunitjs.com?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-30T15:12:38Z", "contents": "@JamesMGreene\nFailing my pr I checked real browser in iOS. Finding it I suggested. So I thought that It add to all html in /test folder. But Adding to sample in qunit.js It seems to good since I saw your comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2015-12-30T15:31:28Z", "contents": "We also might look into adding something to our CSS (media queries, viewport units, etc.).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-30T15:50:59Z", "contents": "@mixed You might want to include this here: https://github.com/jquery/qunitjs.com/blob/master/resources/example-index.html\nThe many people use the html example on qunitjs.com. We may add it here on QUnit's test html files but it will affect only those running QUnit's own tests.\n\n@gibson042: We also might look into adding something to our CSS (media queries, viewport units, etc.).\n\nThat would be interesting too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-30T16:07:12Z", "contents": "@leobalter\nThank you. Can I change example-index.html?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-30T16:23:21Z", "contents": "sure, but it's on another repo: https://github.com/jquery/qunitjs.com", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-30T16:30:39Z", "contents": "@leobalter\nOK. Done. qunitjs/qunitjs.com#110", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-06T18:11:35Z", "contents": "@mixed, do you want to add a PR to add the viewport tag on QUnit's html files? So we may solve this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-07T02:27:50Z", "contents": "No. I found your comments so I think that qunitjs/qunitjs.com#110 sufficed for this issue.\nThank you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-07T15:34:12Z", "contents": "Thanks!\nI'm looking forward to know if you wanna help on any other features/issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 914, "url": "https://github.com/qunitjs/qunit/issues/914", "title": "QUnit.equiv ignores object methods", "contents": "https://jsfiddle.net/xcrh9n3d/\nSince we verify inherited properties anyway, we should replace the weird constructor-based \"function\" callback with a simple return false (relying solely on the strict equality check in innerEquiv).", "createdAt": "2015-12-31T20:28:18Z", "updatedAt": "2016-10-08T02:17:03Z", "closedAt": "2016-10-08T02:17:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "kumarmj", "company": "@Cogoport "}], "comments_count": 6, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-01-02T05:02:44Z", "contents": "Turns out this is intentional: https://github.com/jquery/qunit/blob/fd07a9bb8dcabbbccaa4dedbe3945cd544dd68c8/test/main/deepEqual.js#L1296-L1298\nI'm not sure how I feel about that. @leobalter?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-04T15:47:46Z", "contents": "It looks like a bug on deepEqual, which would be ok on a propEqual use only.\nEven if we use LoDash's isEqual it looks like deepEqual is not doing it's job to call .equiv on the object properties.\nfunction Foo( method ) {\n    this.method = method;\n}\n\nQUnit.module( \"Method comparison failure\" );\nQUnit.test( \"proof\", function( assert ) {\n    var a = new Foo( function(){ return true; } ),\n    b = new Foo( function(){ return false; } );\n    assert.deepEqual( a, b, \"objects\" );\n  assert.equal( a.method, b.method, \"object methods (loose)\" );\n  assert.strictEqual( a.method, b.method, \"object methods (strict)\" );\n} );\non your jsfiddle example (copy/pasted above) I would expect all the assertions to fail, but the first is passing.\nWe can see it's not using QUnit.equiv at all if we add the following:\nassert.ok( QUnit.equiv( a.method, b.method ), \"QUnit.equiv\" );\nOr it is converting functions to strings and comparing as the example below:\nfunction( ){\n  [code]\n}\n\nIt might be intentional, but it's not something I am aware of. @jzaefferer do you know anything about this behavior?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-01-04T16:01:59Z", "contents": "QUnit.equiv is explicitly treating all methods as equal on non-plain objects: https://github.com/jquery/qunit/blob/5977d91111575c105a8f0dde1364fb37643fcdd4/src/equiv.js#L85", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-04T19:42:31Z", "contents": "The origin is here: b8b33e7#diff-2cec82a4b4b78d3fcff317475ff08e42L491 and here: 4ffe241#diff-2cec82a4b4b78d3fcff317475ff08e42R112\nThis is a piece of code existing for 7 years and it might be interesting trying to get rid of it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kumarmj", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-30T17:54:08Z", "contents": "I would love to work upon this bug issue, I studied this issue. I concluded that -\nOur intention was to show positive result for -\nfunction B() {\n    this.fn = function() {};\n}\n\nvar b1 = new B();\nvar b2 = new B();\nsource code: https://github.com/jquery/qunit/blob/master/test/main/deepEqual.js#L1298-L1302\nand we missed this -\nfunction Foo( method ) {\n    this.method = method;\n}\nvar a = new Foo( function(){ return true; } );\nvar b = new Foo( function(){ return false; } );\nAs pointed above by @gibson042 - https://jsfiddle.net/xcrh9n3d/\nI think, what @leobalter said above can solve the problem\n\nconverting functions to strings and comparing\n\nSome addition on this line https://github.com/jquery/qunit/blob/master/src/equiv.js#L93\nreturn caller !== Object && typeof caller !== \"undefined\" &&\n            a.toString() === b.toString();\nand problem solved. Please correct me, if I went wrong about things", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-10-03T16:58:18Z", "contents": "That seems like a reasonable compromise to me, @kumarmj. I guess a pull request is in order!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 915, "url": "https://github.com/qunitjs/qunit/issues/915", "title": "QUnit.equiv treats Map and Set as ordered", "contents": "https://jsfiddle.net/xd2jnbLa/\nI think we should ignore insertion order when comparing these objects (along with WeakMap and WeakSet, which we ignore completely).", "createdAt": "2015-12-31T20:34:24Z", "updatedAt": "2016-03-07T21:18:36Z", "closedAt": "2016-03-07T21:18:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 1, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-12-31T20:42:22Z", "contents": "There is no way to discover the collections on WeekMaps and WeakSets, that's why it's ignored and compared as regular objects.\n\nwe should ignore insertion order\n\n+1 to this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 917, "url": "https://github.com/qunitjs/qunit/issues/917", "title": "`jscs task` normally doesn`t working.", "contents": "jscs task doesn't normally working because grunt-jscs version is low. jscs task is normally working when  grunt-jscs version up.\nRef #916", "createdAt": "2016-01-08T07:38:48Z", "updatedAt": "2016-01-13T17:19:01Z", "closedAt": "2016-01-13T16:28:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "mixed", "company": "@naver "}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-01-13T16:28:07Z", "contents": "we need to update our grunt jscs and jshint tasks.\nThis is a duplicate of #879.\n@mixed, would you like to help on this one as well? It's more than just updating the packages, but also fixing some code styles.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-13T16:47:48Z", "contents": "@leobalter\nAh.. OK. If @arghgr is not interested in it I can it. package update, fixing some code styles.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 923, "url": "https://github.com/qunitjs/qunit/issues/923", "title": "Separate module options from test environment", "contents": "Related:\n\n#894 (comment)\nhttps://github.com/jquery/qunit/pull/919/files#r51184320\n#800 (comment)\n\nNote that there are two ways to set before/after hooks (which are currently the only module options): as properties on an options object, and as methods on the argument passed to a callback. Exposing environment procedurally is easy (e.g., a writable environment property on the callback argument), but the declarative side makes backcompat tough. I'm not particularly thrilled with the thought of adding a fourth parameter, though... we could instead look for an environment property on the second argument, using it exclusively when present (technically backwards incompatible, but on the same scale as #919) and otherwise generating warnings whenever there's any non-before non-after property. All of which, of course, is assuming that keeping the declarative/procedural duality is valuable, about which I'm not fully persuaded but am inclined to keep for now (in part since the procedural interface is so new).\nFor example, all of these would generate the same environment for their tests:\nQUnit.module(name, {\n    beforeEach: function() {\u2026},\n    environment: { preserved: true },\n    ignored: true\n});\n\n// Define tests\n\u2026\nQUnit.module(name, function( module ) {\n    module.environment = { preserved: true };\n    module.beforeEach(function() {\u2026});\n\n    // Define tests\n    \u2026\n});\nQUnit.module(name, {\n    beforeEach: function() {\u2026},\n    preserved: true\n});\n\n// Define tests\n\u2026\nBut the last would issue warnings about deprecated options/environment mixing.\nI'm not in love with this, but it's the best I've got. Other suggestions welcome.", "createdAt": "2016-01-29T14:09:37Z", "updatedAt": "2017-06-17T02:00:15Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-01T17:27:15Z", "contents": "I'm not in love with this, but it's the best I've got.\n\n<3\nThis is not easy to handle, but I can't bring anything better as well.\nI'll add this as priority before the next major release (at least a ready PR)\ncc @trentmwillis", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-02-01T17:58:06Z", "contents": "\ud83d\udc4d\nThis approach makes sense to me and if we land other breaking changes to the declarative hash (e.g., #919), then now seems like a good time to introduce this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-16T15:37:57Z", "contents": "Moving conversation from #1200 here (as it seems directly related to this issue).\nIn #1200 (comment) @trentmwillis mentioned:\n\nWe should have a clear separation between what I consider the \"module context\" and \"test context (or environment)\".\nThe \"module context\" involves anything that is defined prior to a test running. This includes module hooks and any predefined values for the testing environment. I would also like to see it include module-aware methods for defining its tests and nested modules (see below) instead of having to rely on methods from the global QUnit object at all levels.\nThe \"test context\" thus involves the predefined values from the \"module context\" plus any additional values added while the test is running. The test context is also \"reset\" between tests (with the exception of modifications during the before hook).\n\nI am happy to start working on this, but would like to confirm on specifics before getting started.\nHere is my take away from this issue and the convo over in #1200 as it relates to nested modules:\n\nmodify moduleFns to add test, module, setTestContextProperties functions\ndeprecate the second argument completely (in favor of the \"module context\" functions: setTestContextProperties, before, beforeEach, after, and afterEach)\nmodify this inside the callback so that accessing any of the testEnvironment properties issues a deprecation, and accessing new \"module context\" functions is possible\ndocumentation\n\nsplit out usage of nested format from \"classic\" format\nmention this.* methods being added in bullet points above\nrename the argument for the callback from hooks to module\n\n\n\nDoes that path sound reasonable?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-17T02:00:14Z", "contents": "modify moduleFns to add test, module, setTestContextProperties functions\n\nThis seems good to me. I'm not sold on the setTestContextProperties name, but that's a bikeshed. It should allow merging of multiple invocations though.\n\ndeprecate the second argument completely (in favor of the \"module context\" functions: setTestContextProperties, before, beforeEach, after, and afterEach)\n\nI'm \ud83d\udc4d for this when using the nested form, but we'll need to keep it for the non-nested form. In the non-nested form we could add an environment property to set as mentioned above.\n\nmodify this inside the callback so that accessing any of the testEnvironment properties issues a deprecation, and accessing new \"module context\" functions is possible\n\nSeems reasonable. Doing anything on this within the module callback other than call one of the provided hooks should basically do nothing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 926, "url": "https://github.com/qunitjs/qunit/issues/926", "title": "Run tests in random order", "contents": "In the docs for the reorder config option, it notes that reordering failed tests can:\n\nalso lead to random errors, in case your testsuite has non-atomic tests, where the order is important. You should fix those issues, instead of disabling reordering!\n\nSo, on a similar note, I'd like to propose adding the ability to specify that tests run in a seeded-random order. I think it would be relatively straightforward to introduce this as QUnit already has the infrastructure to reorder tests. This may not be particularly useful in browser, but could be very beneficial for CI/Post-Commit tooling looking to identify leaky/dependent tests.\nAs a point of reference, I looked into what other test frameworks have done in regards to this and found that this feature was recently introduced in Jasmine and has been requested multiple times for Mocha.", "createdAt": "2016-02-02T16:55:28Z", "updatedAt": "2016-02-24T15:26:14Z", "closedAt": "2016-02-24T15:26:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 927, "url": "https://github.com/qunitjs/qunit/issues/927", "title": "reordered test runs issue", "contents": "I've run into an issue with Ember's unit tests when they upgraded from QUnit 1.18.0 to 1.20.0 with retrying tests. Before the rather long url of\ntests/index.html?testId=3cc72180&testId=76cb477a&testId=78ef0a1c&testId=d0487dc9&testId=1d54b55d&testId=db4d08bd&testId=ad7f8de5&testId=dd527213&testId=17371bf6&testId=5ee3df71&testId=d5a89651&testId=9a1a7024&testId=a85bac39&testId=7058f532&testId=1de16bf5&testId=ccce39f2&testId=926434d2&testId=b78ea630&testId=cb041f6b&testId=0a58ebc7&testId=c7660ba0&testId=8507e759&testId=6e6efbd0&testId=039fcabf&testId=41cdaf57&testId=28537e92&testId=18a7bd54&testId=6f7a34a1&testId=5aa846fd&testId=12a6c98b&testId=2c07193f&testId=19da7e96&testId=fb2d4548&testId=8e6efed2&testId=d3b0ade2&testId=f05b6bb0&testId=6ff38b82&testId=9f97cbc1&testId=30b3451c&testId=927999ec&testId=bcb65df7&testId=570c2caa&testId=5cd3ee89&testId=614f1561&testId=67d305eb&testId=02ee93e6&testId=b6fa00d8&testId=dbd0c265&testId=4e551122&testId=88552927&testId=b08ce9d2&testId=5ba83754&testId=90f74ea1&testId=5df0b653&testId=dc46afe8&testId=95cf50f8&testId=8e049e95&testId=7325b082&testId=fc68b2a8&testId=55c9508e&testId=507fe8d2&testId=eefe2476&testId=2687e733&testId=59bf32d5&testId=c26a825d&testId=c06d6198&testId=b8b60f68&testId=26db00de&testId=f877a233&testId=d4b8b77e&testId=ce28bd57&testId=0237bd38&testId=407e1559&testId=526facce&testId=bee41d59&testId=e182cd63&testId=f9bba72c&testId=28ac8a43&testId=649b3e40\nwith 79 test ids would work. But now on refresh it only runs 39 of them. If I run it in a new tab it runs all 79 which makes me think it's a sessionStorage and reorder issue. May be related to something around 1.18.0...1.20.0diff-f6c2ded91c9881cdc31b5bfcabb54c3bR267. I'm working to get confirmation that it is reorder.", "createdAt": "2016-02-02T22:02:09Z", "updatedAt": "2016-02-08T22:50:21Z", "closedAt": "2016-02-08T17:44:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdalton", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jdalton", "company": "Salesforce"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 7, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-03T01:03:47Z", "contents": "haha. This is such an interesting issue while at the same time I'm expressing a big WTF checking this link.\n@jdalton++\nI'm not sure where to start here, but it's gonna be worth investigating. Probably a git bisect will help to find the source.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-02-03T01:43:26Z", "contents": "Not sure if there is any hidden relationship but when I received the notification email from GitHub of @jdalton's comment, one of the ampersands came through as &amp; (or maybe &amp ;?) while rest were just &... looks approximately halfway through the list... maybe after 39?\n&testId=bcb65df7&amp ;testId=570c2caa&", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2016-02-03T01:45:10Z", "contents": "The QUnit.urlParams object is still populated with 79 entries when only 39 are run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-02-03T01:46:29Z", "contents": "OK, just a random email fluke then. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2016-02-08T17:44:25Z", "contents": "Fixed in 1.21.0 by\n\nTest: Prevents skiping tests after rerun reordering", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-08T22:35:13Z", "contents": "@gibson042 and @mixed++, they worked on that fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2016-02-08T22:50:21Z", "contents": "", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 928, "url": "https://github.com/qunitjs/qunit/issues/928", "title": "Add a Stop Execution button up top", "contents": "This might be just me but I feel that there are times where you want to run all the tests until their is a particular type of failure that you want to focus on. However, getting to that error to click rerun while the tests are running is impossible. So I was wondering if it would be useful to have a button that stops test execution and retains the results view up until that point.\n\nIs this possible?\nWill people who are not me find this useful?\nWhere should I begin (assuming 1 & to are affirmative)?", "createdAt": "2016-02-03T18:59:46Z", "updatedAt": "2016-12-09T15:58:10Z", "closedAt": "2016-12-09T15:58:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tundal45", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "tundal45", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "raytiley", "company": "Tightrope Media Systems"}], "comments_count": 9, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T19:05:13Z", "contents": "In my personal experience, when dealing with a large test suite this is definitely desirable. Especially when dealing with debugging a flaky test that is dependent on test order.\nI know Ember currently supports this with a pauseTest helper that returns a non-resolving promise, but this only works when invoked from within a test. I don't think it would be difficult to implement a similar feature that is invoked from the UI.\nThat said, we'd need to establish a more rigorous definition of what this behavior is: do we pause immediately or do we wait for the current test and associated hooks to finish? Do we allow tests to be unpaused? Will this pause count against the test suite's timeout limit?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tundal45", "authorAssociation": "NONE", "createdAt": "2016-02-17T19:08:14Z", "contents": "do we pause immediately or do we wait for the current test and associated hooks to finish?\n\nFor now, I would be happy with a stop execution that just stops everything and the user can re-run the test if they want to. Maybe a pause could be implemented but I was envisioning the \"simpler\" just stop the world with this one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-02-19T05:27:59Z", "contents": "I could see doing this with something like QUnit.config.queue.length = 0, which would let the active test finish but abort all pending tests. The display elements would also need updating, e.g. to reveal the hidden <li> elements. PRs considered, I suppose.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-02-19T22:31:42Z", "contents": "I was envisioning the \"simpler\" just stop the world with this one.\n\nSeems good to me. Depending on implementation, I don't think it would be hard to extend this to \"pause\" in the future.\n\nlet the active test finish but abort all pending tests.\n\nI think this makes the most sense as far as stopping behavior is concerned.\n@tundal45 would you want to take a crack at implementing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tundal45", "authorAssociation": "NONE", "createdAt": "2016-02-20T04:13:36Z", "contents": "@trentmwillis @gibson042 Yes, I can take a look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T01:17:49Z", "contents": "I was just discussing this with @raytiley earlier this week.  I think this would be a wonderfully useful feature...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-16T01:51:54Z", "contents": "@rwjblue / @raytiley PRs welcome \ud83d\ude03", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tundal45", "authorAssociation": "NONE", "createdAt": "2016-09-16T01:53:46Z", "contents": "Yeah sorry I've not had a chance to look into this further. I'll see if I can squeeze in some time in the coming weeks. If someone else wants to do it before I get to it, that's great too!\nOn Sep 15, 2016, 6:51 PM -0700, Trent Willis notifications@github.com, wrote:\n\n@rwjblue (https://github.com/rwjblue) / @raytiley (https://github.com/raytiley) PRs welcome \ud83d\ude03\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (#928 (comment)), or mute the thread (https://github.com/notifications/unsubscribe-auth/AADnVKtR_U3_NdG1QKA7DI4Zyrr4wxI7ks5qqfY_gaJpZM4HSuSW).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "raytiley", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T12:48:14Z", "contents": "Looking into this now. Need to find my bearings in the repo.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 929, "url": "https://github.com/qunitjs/qunit/issues/929", "title": "Suggest to fixture method.", "contents": "If I have to use fixture It has some ways.\n1. Add html in #fixture.\n<div id=\"fixture\">\n    <span>1</span>\n</div>\nThis case has some cons. fixture is too hard to read and maintain If I have many fixture. For example. It can't know fixture in testcase. So. I search for #fixture in html but It is hard to search.\n2. Append html using append or ....\njQuery(\"<span>1</span>\").appendTo(\"#fixture\");\nThis case has resolve uppon problem. but I feel like a hack.\nSuggestion\nAdd method\nQUnit.fixture\n\nset html\nreturn childnodes of #fixture\n\n// pseudo code\nQUnit.fixture = function( html ){\n    document.getElementById(\"fixture\").innerHTML = html;\n    return document.getElementById(\"fixture\").childNodes;\n}\nQUnit.test( \"fixture example1\", function( assert ) {\n    QUnit.fixture(\"<span>1</span>\");\n    assert.ok( true, \"this test is fine\" );\n});\n\nQUnit.test( \"fixture example2\", function( assert ) {\n    // return childeNodes of #fixture\n    var childeNodes = QUnit.fixture(\"<span>1</span>\"); \n    assert.equal( childenodes.length, 1 );\n});\nmake #fixture in js.\nWhen I use fixture I have to add #fixture in html.  If Qunit make #fixture in js when it hasn't #fixture I can use easy fixture.", "createdAt": "2016-02-04T06:32:47Z", "updatedAt": "2016-02-16T21:32:02Z", "closedAt": "2016-02-16T21:32:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "mixed", "company": "@naver "}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-04T18:10:12Z", "contents": "@mixed, the proposal is interesting and it seems good enough to run without the need to access any internal from QUnit.\nWith that said, I believe this would be better published as another module/package, like qunit-fixture on npm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mixed", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-11T08:53:54Z", "contents": "@leobalter\nThank you. I have published a qunit-fixture.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T21:32:02Z", "contents": "That's great! You may add it to the plugins page at qunitjs.com", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 930, "url": "https://github.com/qunitjs/qunit/issues/930", "title": "Copy deepStrictEqual and notDeepStrictEqual from node.", "contents": "I currently polyfill these in my browser tests. It would be great if QUnit shared these functions. Added here.", "createdAt": "2016-02-14T23:11:57Z", "updatedAt": "2016-02-16T15:43:51Z", "closedAt": "2016-02-14T23:17:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kellyselden", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kellyselden", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "kellyselden", "authorAssociation": "NONE", "createdAt": "2016-02-14T23:17:51Z", "contents": "After looking through the code, it looks like the deep functions are using strict. Interesting...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T15:43:51Z", "contents": "\ud83d\udc4d\nWe also have plans to replace the internal implementation of deepEqual, potentially using LoDash's isEqual: #865", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 934, "url": "https://github.com/qunitjs/qunit/issues/934", "title": "Tests: Define setup and tests near each other", "contents": "Cf. https://github.com/jquery/qunit/pull/931/files#r53812901\nSome of our tests (logs, regex-filter, etc.) utilize what I consider to be a suboptimal pattern:\ntest/example.html\n<script>\n    QUnit.config.property = value;\n</script>\n<script src=\"example.js\"></script>\ntest/example.js\nQUnit.module(\u2026);\n\nQUnit.test(\u2026);\n\u2026\nI'd like to see the setup and tests defined together.", "createdAt": "2016-02-23T17:32:26Z", "updatedAt": "2016-02-25T14:46:47Z", "closedAt": "2016-02-25T14:46:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T17:38:36Z", "contents": "\ud83d\udc4d seems good to me. I feel like this was probably done once and then just followed as a pattern. I don't see much reason not to merge setup and tests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 937, "url": "https://github.com/qunitjs/qunit/issues/937", "title": "Leverage semver for devDependencies", "contents": "As I was working on #879, I was wondering if we should consider switching our devDependencies to leverage semver rather than pegging explicit version numbers for everything. Taking a look at David DM shows almost all our dependencies are out of date, we could mitigate this by using either ^ or ~ for our dependency versions.", "createdAt": "2016-02-26T02:28:08Z", "updatedAt": "2016-03-18T18:10:59Z", "closedAt": "2016-03-18T18:10:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-02-26T09:30:10Z", "contents": "Most of jQuery repos went in the opposite direction. Semver is an idea but reality is that from time to time a package breaks and then we have a problem. IMO it's better to just pin versions and update from time to time. Note that using non-latest version of a dependency isn't a bad thing; maybe they introduced a new feature we don't use, maybe a bug fix that doesn't affect us that much. It's good to not lock down to something ancient but it doesn't mean constantly living on the bleeding edge is an adequate answer either.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-02-26T16:55:23Z", "contents": "Okay, if that's the direction the larger jQuery org has gone then I'm fine with it. I'm definitely familiar with the issues you describe, but on the flip side I also enjoy staying up-to-date to gain passive benefits (e.g., performance and bug fixes) and when things do break it gives you an opportunity to contribute back to your dependencies. Just thought I'd bring it up for discussion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-02-29T21:05:36Z", "contents": "The current devDependencies work for what we need and locking their respective versions help us to reproduce the same results anywhere. This approach avoid regressions or releases that won't follow semver.\nIn another perspective, this project needs more updates on the npm packages, avoiding a lock down on ancient modules.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-18T18:10:59Z", "contents": "Marking this as closed, but glad we now have some public documentation for our approach here.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 938, "url": "https://github.com/qunitjs/qunit/issues/938", "title": "Add warning if `!details.result` and `actual === expected` for unknown reason.", "contents": "In reporter/html.js#L674-L713 if the test has failed a decision is made about what to actually report.\nPrior to 87061fb the check that actual != expected was required to suppress printing the actual and difference since there was no if (!result) test.  After that change the actual != expected test only served to suppress the diff calculation when there would be no diff.  Now (as of ecc33ac) the else clause of that test is also used together with the check that expected contains an unexplored array or object to warn that the QUnit.dump.parse() has insufficient QUnit.dump.maxDepth to express a difference between the objects.\nI'd like to propose that a general warning be added as an additional else clause to catch all other cases where the test has failed but the QUnit.dump.parse() couldn't detect the difference.  The absence of any mention of the actual value in some failing tests has recently caused me some confusion because I couldn't tell if the lack of reporting was a bug in QUnit or a problem with my tests. It turned out in this case (obviously in hindsight) that deepEqual was needed to compare NaN, but other causes of failure could be differing document objects or functions.", "createdAt": "2016-02-26T06:06:02Z", "updatedAt": "2016-03-21T15:41:35Z", "closedAt": "2016-03-21T15:41:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Parakleta", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "Parakleta", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T06:21:44Z", "contents": "@Parakleta I'm having a bit of trouble groking what the precise issue you're describing is. Can you provide a reproduction jsfiddle or something similar? Or, at least, what you feel this warning should say?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Parakleta", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-02T06:38:14Z", "contents": "This fiddle shows three cases where the test fails but the expected and actual appear the same according to QUnit.dump.parse() and so there is no reporting of why the test failed.  I think I'd just like if there was some message such as for the maxDepth case, something like:\n\"Message: Diff suppressed as the expected and actual results have an equivalent serialization\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T06:53:20Z", "contents": "Okay, thanks a lot for the examples! This seems like a reasonable ask, would you mind submitting a PR for it? We might work the exact wording of the error a bit, but I like the idea.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 940, "url": "https://github.com/qunitjs/qunit/issues/940", "title": "Development is broken on Windows 10 environment", "contents": "The current development is broken on Windows 10 environment.\nThere are more than one breaking point. The first is on grunt-contrib-concat, where it concat files with the Windows EOL character. JSCS throws a code style error.\n\u03bb grunt jscs\nRunning \"jscs:all\" (jscs) task\nInvalid line break at dist/qunit.js :\n    11 |\n    12 |( function( global ) {\n    13 |\n--------^\n    14 |var QUnit = {};\n    15 |\n>> 1 code style errors found!\nWarning: Task \"jscs:all\" failed. Use --force to continue.\n\nThe other error is due to the test-on-node tests on QUnit.stack (test/main/stack), where it fails at QUnit.stack: returns the proper stack line.\nI did a clean install of npm packages both on my original environment and windows environment. Both are using Node 5.7.0 and npm 3.6.0.\nI need to investigate this further.", "createdAt": "2016-03-02T18:50:59Z", "updatedAt": "2016-03-02T21:27:47Z", "closedAt": "2016-03-02T21:27:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T18:51:53Z", "contents": "As @trentmwillis suggested at #936, it's interesting to use a windows based CI to avoid this in the future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T21:02:46Z", "contents": "Bah, auto-closed but there is still one more fix that needs to go in, so reopening.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T21:25:15Z", "contents": "Fixes have been pushed. Should we use this issue or open a new one to track the possibility of using a Windows-based CI?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T21:27:30Z", "contents": "It's better if we keep track of it on another issue (#943), as it is not critical or urgent as the others already addressed here.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 943, "url": "https://github.com/qunitjs/qunit/issues/943", "title": "Use a windows based CI", "contents": "Ref #940\ncc @trentmwillis", "createdAt": "2016-03-02T21:26:09Z", "updatedAt": "2016-03-04T15:46:18Z", "closedAt": "2016-03-04T15:46:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T21:34:06Z", "contents": "A quick search for \"windows ci\", doesn't yield a lot of promising results. I'm familiar with using AppVeyor and know that the Ember-CLI project also uses it. It is also quite similar to Travis and is easy to set up, so this may be the best option unless anyone has another recommendation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T21:38:00Z", "contents": "I am ++ to use AppVeyor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T22:30:22Z", "contents": "I'll look into setting it up sometime soon. What scripts should we run? I'm thinking we can just do npm test, I don't see much reason to run coveralls and browserstack in both CIs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-02T22:54:13Z", "contents": "npm test is the one we should care about.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 947, "url": "https://github.com/qunitjs/qunit/issues/947", "title": "Split tests for parallelization", "contents": "Recently, I've seen a lot of interest in and discussion on running JS tests in parallel. Most of these rely on faking concurrency through async behavior, while that is definitely an interesting approach I am not convinced it is the proper solution for browser-based tests that often rely on the document and other global/shared state. That said, I think finding a way to parallelize tests would be hugely beneficial, especially for larger code bases.\nI'd like to propose that QUnit bake in support for splitting tests into groups at runtime. This would then allow users to parallelize test runs by using multiple, independent instances of their test page.\nI imagine this could be based on url params like so:\n/tests.html?batches=10&batch=1\n\nThis would split the tests into 10 different batches and then run the first batch. You can then adjust the batch parameter to run the other groups in other browser instances/tabs.\nAs an initial implementation, this could be super simple and just break the tests up into equally sized batches. Then, as an enhancement, we could standardize a test output that can be fed back into QUnit to allow weighted splitting to ensure the batches run in approximately equal amounts of time.\nThe primary benefit of this would be to allow parallelization, but in doing so it would also help identify non-atomic tests in the same way as the recently introduced test randomization feature does.\nFor full disclosure, this would benefit a recently implemented Testem feature to support running multiple test pages in parallel.", "createdAt": "2016-03-03T22:42:48Z", "updatedAt": "2018-03-13T16:56:22Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "mariokostelac", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 18, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-04T00:52:12Z", "contents": "This is very interesting but at the same time it looks it accounts for mostly for Browsers only. I would like to see if it's possible to extend it to node environments, using any sort of async instead of browser tabs.\nOn this idea of browser tabs: is it a bad to use WebWorkers? With the next major version advent (2.0) we will be able to limit our browser support which will have most of them supporting this api.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-04T01:01:32Z", "contents": "It is definitely targeted at browsers, though it could be used in other environments. Since the core concept is just to split tests, you could theoretically do that in different processes of any sort, not just browsers (though there may be better solutions in those cases).\nI've considered WebWorkers, the primary issue there, however, is they have no DOM access (amongst other things).\nI could see this being a plugin for QUnit, since it doesn't necessarily apply to all use cases, but I think to properly support it we would need to expose some lower-level constructs, such as how tests get queued.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-04T15:38:07Z", "contents": "I think the worker model is a good one to shoot for, implementation agnostic with respect to Web Worker or setTimeout or sibling window or iframe window or Node.js child process or whatever. The single shared DOM as common test fixture is holding QUnit back, and while I don't see it going away, we can and should enable suites that abandon it to gain the commensurate performance benefits.\nTo that end, I'd rather see a parallelization count (e.g., ?workers=4) than a batch count.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-04T16:24:55Z", "contents": "This window/iframe parallelization is probably already covered on qunit-composite. Maybe for tests that needs the DOM API we might end up with something similar. I am not sure, but maybe ember-cli projects also run different test htmls in parallel as well?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-05T18:44:37Z", "contents": "This window/iframe parallelization is probably already covered on qunit-composite\n\nThe core of it maybe, but the worker model I want is generic and inherently self-balancing, rather than manually pre-partitioned.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-12T07:26:59Z", "contents": "I think the worker model is a good one to shoot for, implementation agnostic with respect to Web Worker or setTimeout or sibling window or iframe window or Node.js child process or whatever.\n\n\n\nthe worker model I want is generic and inherently self-balancing\n\nNot sure I completely follow this \"worker model\" you're thinking of. Would this simply amount to scheduling the tests in worker groups? The \"worker\" which then handles that group is non-specific (e.g., web worker, child process, etc.)?\nOr is it more along the lines of: you have a number of workers and those handle individual tests as they become available to accept a new test?\n\nrather than manually pre-partitioned.\n\nThis is the big thing I am looking for as well with this idea.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-12T13:20:55Z", "contents": "Or is it more along the lines of: you have a number of workers and those handle individual tests as they become available to accept a new test?\n\nYes. Once we have it in place, non-browser parallelism (or thread-leveraging, or tab-distributed, or \u2026) is just a matter of implementing the appropriate workers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-12T18:48:23Z", "contents": "I think this would make sense for a lot of use cases. However, I think any use case involving DOM would require the iframe approach (which may not necessarily be a bad thing). I can't think of a good solution for allowing QUnit to communicate across multiple tabs or browser instances.\nThat said, my primary concern with this approach is determinism. Since we won't really have control over the order in which the workers become available, reproducing failures of non-atomic tests might become difficult.\nA secondary concern with this is that it would preclude sharing state across tests. In general, I know that sharing state is bad, but I also know that there are certain patterns which could benefit from it. For instance, in the Ember community there has been talk of using a single instance of an application across tests for performance reasons.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-12T23:47:22Z", "contents": "However, I think any use case involving DOM would require the iframe approach (which may not necessarily be a bad thing).\n\nRare indeed is the test that requires a complete DOM as opposed to a container div, but any such examples are free to forgo parallelism, implement synchronization (e.g., a document-level semaphore), or utilize multiple windows as you suggest.\n\nI can't think of a good solution for allowing QUnit to communicate across multiple tabs or browser instances.\n\npostMessage is the obvious choice, but this has already been solved in qunit-composite.\n\nSince we won't really have control over the order in which the workers become available, reproducing failures of non-atomic tests might become difficult.\n\nRight, opting in to parallel execution requires more discipline in test definition. But the sequential mode (i.e., single-worker) will always remain available.\n\nA secondary concern with this is that it would preclude sharing state across tests. In general, I know that sharing state is bad, but I also know that there are certain patterns which could benefit from it. For instance, in the Ember community there has been talk of using a single instance of an application across tests for performance reasons.\n\nI see no reason why that would be precluded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mariokostelac", "authorAssociation": "NONE", "createdAt": "2017-09-17T11:19:10Z", "contents": "Right, opting in to parallel execution requires more discipline in test definition. But the sequential mode (i.e., single-worker) will always remain available.\n\nThat's definitely right, but I am not sure how practical it is. There will always be cases where test suite will fail and reproducing the failure is the only way I am aware of to deterministically getting closer to fixing the problem. Implementing workers model draining the queue would require some way of reproducing the same ordering (and possibly concurrency), which seems like an unnecessary difficult problem to tackle.\nImplementing the original proposal would gain worse utilization (since not all tests take the same time to execute), but it would be a very simple model, possibly extensible with tests weight to gain better efficiency.\nI think that the same model works well for node projects too (I am not really developing production node systems so correct me here please). Multi-container CI setups could run different batches in different containers. There is definitely some extra work here because somebody has to make sure that all processes running different batches pass in order to make the whole suite pass, but that's done by CI providers anyways (and trivial to implement).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-03T00:08:39Z", "contents": "Finally circling back to this. After rereading the discussion and thinking about it, I'm onboard with the worker model.\nIn order to deal with the reproducibility problem we can simply track the order in which tests are executed by various workers. We'll then report that in the runEnd data and we could provide an API to then feedback that data into QUnit to get a reproduced run. This should be relatively straightforward since we already assign tests unique ids.\nAdditionally, we have now refactored the queue for tests in QUnit to make it much cleaner which should make it much easier to implement more complex scheduling algorithms.\nThe primary remaining hurdle I see is to define an API for actually defining tests that can run in parallel and an API for defining \"workers\" that run the tests.\n@gibson042 I know it's been a looong time since the last discussion on this, but if you had any ideas at the time of a potential API, I'd love to hear it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mariokostelac", "authorAssociation": "NONE", "createdAt": "2018-03-05T09:17:34Z", "contents": "In order to deal with the reproducibility problem we can simply track the order in which tests are executed by various workers. We'll then report that in the runEnd data and we could provide an API to then feedback that data into QUnit to get a reproduced run. This should be relatively straightforward since we already assign tests unique ids.\n\nThat would work \ud83d\ude0a", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-07T18:39:55Z", "contents": "I've put together a gist with a proposal for the potential API here: https://gist.github.com/trentmwillis/c8c9a8e1dcf85b9afa8fbfc4d8a4c5b1\nTake a look and feel free to either leave comments on the gist or here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mariokostelac", "authorAssociation": "NONE", "createdAt": "2018-03-08T09:22:13Z", "contents": "Parallelization of already loaded JavaScript (#1) is not really feasible\nsince transfer of runtime objects between \"workers\" often involves structured\ncloning which doesn't support functions (amongst some other JS constructs).\n\nIs it possible to load javascript, not execute tests and communicate just test examples, not js objects (let's say we have some unique identifier for each test)? That way the testing process and all workers can have their independent copy of objects, we can split with better granularity (test example instead of a file for example), but avoid hard problem of transferring js objects around.\n(It is possible i am getting something completely wrong :))", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2018-03-08T12:41:35Z", "contents": "Thank you for mentioning me. I have not intentionally abandoned QUnit, I just ran out of spare time to work on it (there are about 100 QUnit notifications in my inbox, waiting for me to get to \"someday\"). So as a result, I really don't know how it has progressed over the past year. Regardless, though, my general position on this point hasn't changed.\nI always imagined that there would be a single queue of tests instead of files, though I hadn't considered the challenges of sharing host objects. Still, I think it's possible... imagine something like this iframeWorker implementation, where the worker presented to QUnit exists in the correct realm and uses postMessage to manage the \"true\" worker (which loads QUnit just like the parent window, but then turns it off and retrieves/runs tests directly):\nlet workerKey = QUnit.urlParams.iframeWorkerKey;\nlet controller = workerKey && window.parent;\nif ( !controller ) {\n    // bikesheddable name and interface (callback vs. promise)\n    QUnit.registerWorkerFactory(() => new Promise(function(ready, fail) {\n        const worker = {\n            runTest(testId, assert) {\n                const testPromise = new Promise(function(resolve, reject) {\n                    testPromises.set(testId, { resolve, reject, assert });\n                });\n                const done = assert.async();\n                workerWindow.postMessage({ key: workerKey, testId }, \"*\");\n                return testPromise.then( v => { done(); return v }, v => { done(); throw v } );\n            }\n        };\n        let testPromises = new Map();\n        let workerWindow;\n        const workerKey = String(Math.random()).replace(0, window.performance.now());\n        const iframe = document.createElement(\"iframe\");\n        iframe.src = setUrl({ iframeWorkerKey: workerKey });\n        window.addEventListener(\"message\", function( evt ) {\n            // Only process messages from our iframe.\n            if ( typeof evt.data !== \"object\" || evt.data.key !== workerKey ) {\n                return;\n            }\n            // The first message communicates worker initialization.\n            if ( !workerWindow ) {\n                workerWindow = evt.source;\n                ready(worker);\n                return;\n            }\n            // Check for errors.\n            if ( evt.data.error ) {\n                testPromises.get(evt.data.testId).reject(new Error(evt.data.error));\n                return;\n            }\n            // Proxy assertions.\n            if ( evt.data.assertion ) {\n                testPromises.get(evt.data.testId).assert(\u2026evt.data.assertion);\n                return;\n            }\n            // Conclude.\n            testPromises.get(evt.data.testId)[evt.data.promiseAction](evt.data.result);\n        });\n    }));\n    return;\n}\n\n// Take advantage of a new (bikesheddable) interface to control QUnit in the worker iframe.\nQUnit.convertToWorker();\nwindow.addEventListener(\"message\", function( evt ) {\n    // Only process messages from our parent.\n    if ( typeof evt.data !== \"object\" || evt.data.key !== workerKey ) {\n        return;\n    }\n    // Take advantage of a new (bikesheddable) interface to get and run tests.\n    const testId = evt.data.testId;\n    const test = QUnit.getTest(testId);\n    if ( !test ) {\n        controller.postMessage({ key: workerKey, testId, error: \"test not found\" }, \"*\");\n        return;\n    }\n    runTest(test, getAssertProxy(controller, workerKey, testId));\n});\n\n// Register ourselves.\ncontroller.postMessage(null, \"*\");", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-08T16:38:47Z", "contents": "Is it possible to load javascript, not execute tests and communicate just test examples, not js objects (let's say we have some unique identifier for each test)?\n\n@mariokostelac yes. I hadn't really considered that approach since it potentially means a large amount of overhead for large test suites, but it could be possible. Also aligns with the example @gibson042 just provided (thanks for that!).\nIf we don't have to recreate state/context and just duplicate it by loading it into each worker, then the test-by-test parallelization should work.\nHowever, I see two additional hurdles:\n\n\nHow would other worker implementations know which assets need to be loaded? The iframe approach works because we simply reuse the test page's url. If you have a WebWorker implementation, then how does it know which scripts it should load? Or in Node, how would the child_process know which files to load?\n\n\nWhat if you want your main process to be of a different \"type\" than the worker process? For instance, what if you want the main process to be an web page but run your tests in a WebWorkers? You likely wouldn't be able to load all the tests into the main thread.\n\n\nThe first hurdle I think is solvable, but I don't really see a path forward for the second point. Let me know what y'all think!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2018-03-08T18:07:32Z", "contents": "I think the answer is for worker plugin authors (i.e., \"us\") to scrape the relevant information by whatever means makes sense for the master\u2013worker pair (maybe URL for page\u2013page as in my example, DOM selection for page\u2013WebWorker, CLI args for Node\u2013Node, etc.). And it won't work for every single test, but that's OK because this is just an optimization... we will always have the host runner, and if necessary can add worker selection metadata to avoid sending certain tests into the parallel queue.\nP.S. As for the client interface, I'd like to avoid new surface are like QUnit.parallel. Because the default worker count is one, opt-in should be necessary for forcing serial execution instead of the other way around.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-13T16:56:22Z", "contents": "Great points. We'll have to note any possible limitations and edge cases, but I think the approached outlined here will provided a better user experience than my suggestion above. I believe this gives us a good starting point for doing an initial implementation.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 951, "url": "https://github.com/qunitjs/qunit/issues/951", "title": "Suggestion [HTMLReporter]: make it possible to pass comma separated modules to `module` param", "contents": "Hi all,\nI wonder if it's possible to specify a comma separated names, instead of specifying one module to run, like so:\nhttp://localhost:8000?module=module1,module2\n\nor\nhttp://localhost:8000?module=module1&module=module2\n\nThanks :)", "createdAt": "2016-03-09T18:36:25Z", "updatedAt": "2016-03-15T14:39:20Z", "closedAt": "2016-03-15T14:39:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 10, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-09T18:58:12Z", "contents": "You could accomplish this using the recently introduced regex filtering:\nhttp://localhost:8000?filter=/module1|module2/\n\nWe should probably add documentation for that feature...will try to do that this week.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-09T19:29:57Z", "contents": "Please correct me if I'm wrong.\nSo if I'm using a filter like: filter=core, this will run all the tests that are under the module core, or also the tests that have core in the name.\n\nWe should probably add documentation for that feature...will try to do that this week.\n\nI appreciate that :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-09T21:32:23Z", "contents": "Also, the config option moduleFilter doesn't seem to work in latest releases (I know this is unrelated to the issue).\nSimple code:\n// Only the module `module1` should run, unfortunately it doesn't work\nQUnit.config.moduleFilter = \"module1\";\n\nQUnit.module( \"module1\" );\nQUnit.test( \"test11\", function( assert ) {\n    assert.ok( true );\n} );\nQUnit.test( \"test12\", function( assert ) {\n    assert.ok( true );\n} );\n\nQUnit.module( \"module2\" );\nQUnit.test( \"test21\", function( assert ) {\n    assert.ok( true );\n} );\nQUnit.test( \"test22\", function( assert ) {\n    assert.ok( true );\n} );\nJSfiddle: https://jsfiddle.net/Arkni/tg6pzL4a/\n\nEDIT:\nI found that it's removed in this commit 168b048 (PR #691), but not removed from docs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-12T15:42:28Z", "contents": "I tested the filter option , even though it's not what I'm after. But I can live with that.\nFeel free to close this issue if you see it as resolved. But please notice the issue I mentioned in my previous comment (#951 (comment)).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-12T18:30:30Z", "contents": "@leobalter can you give more insight into removing config.moduleFilter? Seems like it was intentional. If so, we should update docs. Also, how would someone now programmatically set the module filter?\n@Arkni I can understand your desire for a multi-module filter. I think the primary concern I have is introducing too many ways for users to filter their tests. Additionally, the current module filter is tied to a drop-down, how would we represent multiple modules in that sort of UI?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-12T20:03:04Z", "contents": "I think the primary concern I have is introducing too many ways for users to filter their tests\n\nThank you for your effort :)\n\nAdditionally, the current module filter is tied to a drop-down, how would we represent multiple modules in that sort of UI?\n\nI thought of that too. One solution would be styling the multiple select or replace it with a list of checkboxs the same way done in bootstrap-multiselect or a list of tags like in Select2, for example. But this requires some additional work just to make it functional.\nI guess it should be left as is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-14T23:21:02Z", "contents": "OK, after evaluating #952, here is what I came up with:\n\nIf not possible for a user to know the hash of a module name, then what's the benefit for the user to use that config, I mean programmatically without interacting with the HTML reporter.\nAs a solution of the first point, you can export the hashing method as utility, so the user can use it to hash the module names that he want to run.\n\n@trentmwillis what do you think ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T01:44:07Z", "contents": "From that same PR:\n\nWe should progress this feature to a UI change for sure. I'm ok if we have it documented on the api page and follow up the missing parts on another PR. - @leobalter\n\nSo the intention is that we will have some UI changes that will expose the moduleId in some way, it'll just be added in a further iteration. Given my earlier question (\"how would we represent multiple modules in that sort of UI?\"), I imagine this will have some discussion around it, so I will open a separate issue to track that feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-15T12:59:42Z", "contents": "So the intention is that we will have some UI changes that will expose the moduleId in some way, it'll just be added in a further iteration.\n\nThanks for pointing that :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T14:24:37Z", "contents": "can you give more insight into removing config.moduleFilter? Seems like it was intentional. If so, we should update docs. Also, how would someone now programmatically set the module filter?\n\nI need to check on the history to give you the right answer.\n\nI will open a separate issue to track that feature.\n\n++ for that. It's not simple or easy to say how it's gonna be. The new issue will help us discussing the best way to do it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 953, "url": "https://github.com/qunitjs/qunit/issues/953", "title": "Update UI to allow multiple test/module selection", "contents": "As discussed in #951 and #952, it would be beneficial to have a better interface that allows for filtering multiple modules or tests. While this is nice to support those particular features, it would also be beneficial to take this as a chance to address some pain points of working with large test suites. In general, having a dropdown that is thousands of items long is not very useful.\nIn general, the following features should be considered:\n\n select individual modules\n select multiple modules\n select multiple tests\n support grouping of modules (e.g., in Ember tests we have Acceptance, Integration, or Unit tests) [can be accomplished through nested modules]\n filter/search the list of tests/modules\n\nAnything else?", "createdAt": "2016-03-15T01:55:44Z", "updatedAt": "2016-09-19T17:26:05Z", "closedAt": "2016-09-18T01:37:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "mlato-yahoo", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "sechel", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "mlato-yahoo", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-17T00:23:43Z", "contents": "Based on those requirements I've drafted this simple multi-selector.\n\nFeatures:\n\nMulti-select window with checkboxes and scrolling.\nSearch box for filtering by module or test name.\n\"Submit\" button to run selected tests or modules.\n\nOther things that we need to consider:\n\nHow do we tag tests/modules as part of groups? (Acceptance, Integration, etc.)\nSelect all/clear all functionality\nWould a module multi-selector replace the module dropdown, and where would it be in the UI?\n**Idea: What about replacing the module select dropdown with a dropdown that opens up into this multi-selector?\n\nLet's make this happen!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-17T01:22:07Z", "contents": "I think this is a good start.\n\nHow do we tag tests/modules as part of groups? (Acceptance, Integration, etc.)\n\nI have three ideas on how to solve this:\n\nEnforce some naming convention (e.g., <group-name> | <module-name>)\nSet a configurable \"separator\" that then denotes when you're entering a new group (e.g., QUnit.config.groupSeparator = '|';). This could make it easier to support nested groups if needed.\nIntroduce metadata into a module that would make grouping declarative.\n\nI personally lean towards either 2 or 3.\n\nSelect all/clear all functionality\n\nI believe we could accomplish this similarly to how the current module dropdown works. Reserve the top option as a \"clear all\" option. This works since selecting all modules is essentially the same as selecting none of the modules.\n\nWould a module multi-selector replace the module dropdown...\n\nYes. I think having both would cause too much UI clutter.\n\n...and where would it be in the UI?\n\nI like your idea: replace \"the module select dropdown with a dropdown that opens up into this multi-selector\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-18T07:34:48Z", "contents": "How do we tag tests/modules as part of groups? (Acceptance, Integration, etc.)\n\nI have three ideas on how to solve this:\n\nEnforce some naming convention (e.g., <group-name> | <module-name>)\nSet a configurable \"separator\" that then denotes when you're entering a new group (e.g., QUnit.config.groupSeparator = '|';). This could make it easier to support nested groups if needed.\nIntroduce metadata into a module that would make grouping declarative.\n\n\nWe already have number 3 in the form of nested modules (and also number 1 to some extent; child module names are prefixed with parent names). That seems sufficient to me.\n\n\nWould a module multi-selector replace the module dropdown...\n\nYes. I think having both would cause too much UI clutter.\n\n...and where would it be in the UI?\n\nI like your idea: replace \"the module select dropdown with a dropdown that opens up into this multi-selector\"\n\nYes, we should be very mindful about top-of-page real estate, too much of which we already consume.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mlato-yahoo", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-24T21:29:21Z", "contents": "I've made some progress on the module multi-selector\n\nCheck out the code here:\n#973\nKnown problems:\n\nThe dropdown doesn't align perfectly when using Firefox.\n\nPossible issues:\n\nNot tested with IE (I used the IE 7.0 user agent in Safari, but that's not the same).\n\nOptional improvements:\n\nClear search field on dropdown close\nLarger dropdown (vertically)\nShift-click for selecting groups of modules\n\nAll feedback and suggestions are welcome, let me know what you guys think!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-24T21:33:29Z", "contents": "Not tested with IE (I used the IE 7.0 user agent in Safari, but that's not the same).\n\nHere is you getting me on my virtual machines to test this :P\nI really want to release the next major version so this (testing on IE6+) won't be a problem anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T22:29:43Z", "contents": "Does #973 fixes this or should it still be open for selecting multiple tests?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T22:32:26Z", "contents": "I'll review it later today and update this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-04-19T05:25:23Z", "contents": "Took a look at #973 and I think it's a great start. I updated the original post to reflect the new features.\nThe only missing feature that would potentially be beneficial is the ability to select multiple tests from the UI. You can select a single test to re-run and you can select single or multiple modules to run, but there is no way to select multiple tests to run without manually entering them into the URL. However, I imagine this wouldn't be part of the dropdown, probably more like inline checkboxes for each test (think gmail or something similar).\nAdditionally, the ergonomics of the module dropdown could be improved. I'll open another issue about that tomorrow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sechel", "authorAssociation": "NONE", "createdAt": "2016-06-06T14:57:34Z", "contents": "Nice work, I tested this for my test suite and experienced an issue that was present with the old dropdown as well: Module names appear multiple times:\n\nI used to fix this for an earlier version by simple filtering on the modulesList, but I thought if you are already working on this you could easily fix this.\nIt seems to be the result of using a qunit.module('Learning', function() { directive multiple times in different modules of the test suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sechel", "authorAssociation": "NONE", "createdAt": "2016-06-06T15:01:57Z", "contents": ";-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-18T01:37:26Z", "contents": "Closing this as I don't think the ability to \"select multiple tests\" is really needed and potential UX solutions would add a good amount of clutter. We can revisit in the future if needed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 954, "url": "https://github.com/qunitjs/qunit/issues/954", "title": "Document and prefer multiply-specified URL parameters over comma-separated", "contents": "Ref gh-951\nQUnit.urlParams already stores repeated URL parameters in arrays: https://github.com/jquery/qunit/blob/0f9ae3443a0fc78d96baa2eb86f90b0cba9264b5/src/core/utilities.js#L115\nFor consistency with QUnit.config and to preclude ambiguous parsing, we should prefer that method over comma-separated values for specifying composite parameters (e.g., ?moduleId=720ab266&moduleId=0af5a573 instead of ?moduleId=720ab266,0af5a573), and deprecate the latter anywhere it's already documented.", "createdAt": "2016-03-15T15:35:33Z", "updatedAt": "2016-03-16T17:34:35Z", "closedAt": "2016-03-16T17:34:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T16:05:48Z", "contents": "I was unaware of the auto-concatenating of repeated params. I agree we should standardize on a single format. However, I'm not a huge fan of the first approach due to verbosity, but I guess it makes more sense than attempting to figure out if a comma is meant as a separator or if it is just part of the value.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T17:04:45Z", "contents": "The changes for gh-951 are not released yet, do you want me to revert until we fix it? If we fix it soon we don't need to mind on any breaking change (or reverting commits).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T17:09:47Z", "contents": "No, I wouldn't revert because e47a7c3 just carried forward the already-present pattern of testId (and we don't have any documentation claiming support for comma-separated values, just code).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 955, "url": "https://github.com/qunitjs/qunit/issues/955", "title": "Confine urlParams references to browser-specific files", "contents": "urlParams is obviously intended for browser utilization, but we have some references to it elsewhere. Most pressing is test.js:Test#valid (which should be using a QUnit.config property), but I'd also like to see getUrlParams and the other core references (core/config.js & core.js#L1) move into e.g. a \"browser reporter\" that sets and initializes configuration from QUnit.urlParams (which will probably require testing conflict resolution for cases where both inline Javascript and URL parameters try to affect the same QUnit.config property).", "createdAt": "2016-03-15T16:39:05Z", "updatedAt": "2016-03-25T17:54:50Z", "closedAt": "2016-03-25T17:54:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-18T18:04:29Z", "contents": "move into e.g. a \"browser reporter\" that sets and initializes configuration from QUnit.urlParams\n\nSo would it make sense to introduce something like reporter/url-params.js? This would keep that functionality confined to the browser and give a clear separation.\n\n(which will probably require testing conflict resolution for cases where both inline Javascript and URL parameters try to affect the same QUnit.config property)\n\nWhat should be the resolution here? I tend to think inline JS values would trump the URL params.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 956, "url": "https://github.com/qunitjs/qunit/issues/956", "title": "Reintroduce QUnit.config.module or QUnit.config.moduleFilter", "contents": "As noted in #951 (comment) , both QUnit.config.module and QUnit.config.moduleFilter were removed by 168b048 (gh-691) but remain documented as moduleFilter. However, it is not appropriate for deep library code to reach out and inspect URL parameters (cf. gh-955). We should restore one of the QUnit.config properties, replace the QUnit.urlParams reference, and update the documentation accordingly.", "createdAt": "2016-03-15T16:45:33Z", "updatedAt": "2016-03-21T00:41:00Z", "closedAt": "2016-03-21T00:41:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}], "comments_count": 10, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T04:40:22Z", "contents": "As mentioned in the documentation issue, I'm not sure we actually want to reintroduce module/moduleFilter now that we have moduleId. Rather, I think we should remove module from the urlParams and replace it's functionality with that provided by moduleId. However, this would require some reworking of the current UI (mainly updating the dropdown values to be the module ids instead of names).\nEdit: Or, if there is reason to keep urlParams.module, we should just hash it's value and defer to config.moduleId.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T04:43:21Z", "contents": "That would definitely limit the constructibility of QUnit URLs. I frequently do single-module runs for jQuery core (e.g., \"https://localhost:8080/test/?module=selector\").", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T04:59:17Z", "contents": "Is there much advantage to using ?module=selector instead of ?filter=selector? I know that the latter has the potential to match other tests, but since you have to specify the exact module name for the former to work, I feel like doing the same for filter would yield identical results in many (if not most) cases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T05:33:59Z", "contents": "I believe there is. For example, https://github.com/jquery/jquery/blob/master/build/tasks/testswarm.js#L32-L38 uses the parameter to orchestrate continuous integration, which is possible because it accepts values that were defined in the very same codebase and therefore knowable in advance. filter is too broad when what's desired is a hard partition along module boundaries.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T15:55:00Z", "contents": "Ah, okay. I think I see the use case better now. In that case, what is the expected behavior from ?module=selector&moduleId=1234567? Would module take precedence? Or will they both be used?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-16T16:12:45Z", "contents": "Ah, okay. I think I see the use case better now. In that case, what is the expected behavior from ?module=selector&moduleId=1234567? Would module take precedence? Or will they both be used?\n\nI think it should run one module if moduleId is the same as the hash of module, and run the two, otherwise. In other words, the union of the two (+ removing duplicated modules).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T16:41:27Z", "contents": "Current behavior, which I wouldn't change without careful consideration, is that any test passing all filters (moduleId; testId; module; filter) gets to run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T16:52:58Z", "contents": "Seems legit, let's do it", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T17:14:26Z", "contents": "That still leaves a naming question. The URL parameter is and will likely remain module. I believe the QUnit.config property should be as well, because AFAICT we never actually released a version in which it was called moduleFilter (both the 7409c02 rename and the 168b048 removal debuted in 1.16.0). Any objections?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T19:35:39Z", "contents": "Sounds good to me. It's also consistent with the 1:1 nature of most other params.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 958, "url": "https://github.com/qunitjs/qunit/issues/958", "title": "Update browserstack-runner", "contents": "QUnit uses an obsolete browserstack-runner version that still uses the 3rd version of the API. BrowserStack has been requesting all jQuery teams to stop using older API versions so we need to do the upgrade ASAP.", "createdAt": "2016-03-16T11:42:39Z", "updatedAt": "2016-03-16T13:16:42Z", "closedAt": "2016-03-16T13:16:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 964, "url": "https://github.com/qunitjs/qunit/issues/964", "title": "Remove sessionStorage interactions from HTML Reporter", "contents": "The HTML Reporter is largely an independent subcomponent, but as long as it interacts with sessionStorage, it must remain synchronized with Test#queue (which needs the ability to prioritize previously failed tests). However, it does very little with sessionStorage:\n\ntest start: display alternate \"running\" text for previously failed tests\ntest end: store result\nsuite end: clear (if no assertions failed)\n\nThe first is unnecessary (but if important, could be handled by adding a property to the testStart callback details), and the others really belong near the prioritization logic in test.js. An argument could be made for the smaller change of moving prioritization into the HTML Reporter, but QUnit.config.reorder isn't reporter-specific. And further, even though sessionStorage is essentially a browser capability, we only care about support of the relevant Storage interface\u2014there's no reason why we couldn't expose a settable QUnit.config.storage property and thereby enable reordering in non-browser environments once the reporter yields this responsibility.\nTherefore, we should do just that: move sessionStorage calls into runner code, where they will be invoked against a QUnit.config property defaulting to the well-known value.", "createdAt": "2016-03-18T05:45:37Z", "updatedAt": "2016-11-01T16:29:19Z", "closedAt": "2016-10-01T05:08:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 970, "url": "https://github.com/qunitjs/qunit/issues/970", "title": "Export AMD with name", "contents": "Right now QUnit exports to AMD without specifying a name. When you transpile your code using Babel, and then try to load it with Almond, it fails because no name has been specified.\nI was able to workaround this issue by manually exporting the module as the following:\ndefine(\"qunit\", function() { return QUnit; });\nIs it possible to change QUnit's definition to explicitly set the exporting name?", "createdAt": "2016-03-24T02:53:31Z", "updatedAt": "2016-04-18T21:12:13Z", "closedAt": "2016-04-18T21:12:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fnando", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fnando", "company": "@stellar"}, {"login": "jzaefferer", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T16:54:50Z", "contents": "Can you provide a reduced test case? The description by itself isn't quite enough. The changes in #971 aren't either.\nWhat I'm wondering about: Why are you loading QUnit with Almond, while, as far as I can tell, not using r.js (the optimizer)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T21:12:13Z", "contents": "Since all the discussion happened in #971, closing this with the same reason.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 974, "url": "https://github.com/qunitjs/qunit/issues/974", "title": "Stop defining a default QUnit.reset", "contents": "Since we're deprecating QUnit.reset, we should stop relying on it. We could replicate the behavior almost perfectly by automatically registering a testDone callback that includes the current logic, but executes it only when QUnit.reset === undefined (or even !hasOwn.call(QUnit, \"reset\")).\nI say \"almost perfectly\" because the current code runs after all testDone callbacks, but this proposal would have it run before them. This seems acceptable to me, but if it's a problem we can explore a promise-based remedy.", "createdAt": "2016-03-25T20:04:27Z", "updatedAt": "2016-11-01T16:29:19Z", "closedAt": "2016-05-19T19:39:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 6, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T01:14:31Z", "contents": "We could replicate the behavior almost perfectly by automatically registering a testDone callback...\n\nI'm assuming we favor this approach since it would take the reporter-centric logic out of core. Otherwise, we could simply keep the function as an internal one. Regardless, instead of using testDone, we could register it as a testStart / moduleStart callback, which  probably increase logic a bit but would give us the results we currently have.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T02:42:49Z", "contents": "There are a few edge case differences either way (e.g., post-suite DOM state, test duration); the question is whether they matter. I'm of the opinion that they don't, but even so would still prefer your testStart approach to my testDone suggestion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T07:36:00Z", "contents": "This wasn't resolved by 0baf467, and was in fact made worse since there's no longer a way to prevent the behavior (which was previously as easy as QUnit.reset = function(){}). I'm not in favor of becoming more magical.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T14:51:29Z", "contents": "My bad I misunderstood this issue.\nWe can still isolate the operation for QUnit.reset, but should we keep it exposed to the API?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T17:11:57Z", "contents": "It seems to me that legacy compatibility motivates us to automatically reset the DOM at test boundaries, even though such functionality is arguably more appropriate in a user-defined callback, e.g. testStart. But it should always be possible to correct the inverted default and prevent QUnit from doing anything. As of 0baf467, the only way to do so is by removing #qunit-fixture, which isn't great. And when we consider the weirdness of a DOM coupling in test.js that is indirectly dependent upon the HTML reporter (for initial definition of QUnit.config.fixture), I think the best approach looks something like the following:\n\nInitialize QUnit.config.fixture in core instead of the HTML reporter, still waiting for a \"begin\" event but aborting when hasOwn.call( config, \"fixture\" ) to avoid overwriting user-provided values (even undefined ones).\nDocument QUnit.config.fixture as a public interface, in particular noting that it can be nulled to disable automatic DOM manipulation.\nSkip DOM resets when QUnit.config.fixture == null.\nThrow an exception upon setting of QUnit.reset, since we have at least one example of overwriting it and we don't want silent failure to invoke it.\n\nThis will preserve the legacy behavior of automatic inter-test DOM resets, but provide a documented means by which to control them, and reduce HTML reporter dependence to boot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-04-28T06:08:17Z", "contents": "@gibson042 this seems like a reasonable approach to me. I can take a crack at implementing it this weekend, if you don't get to it by then.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 975, "url": "https://github.com/qunitjs/qunit/issues/975", "title": "Next QUnit is 2.0", "contents": "Hello everyone and specially @jquery/qunit team!\nThis is the mark to say 2.0 is the next version, except if we need some patch version to fix a bug on QUnit 1.23.0.\nThat means we need to hold any new features for now and start working removing all the deprecated parts.\nThe current PRs to merge are only #971 and #919, the others will have to wait, I promise it won't be long.", "createdAt": "2016-03-25T20:13:56Z", "updatedAt": "2016-04-19T16:29:31Z", "closedAt": "2016-04-19T16:29:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-25T20:54:43Z", "contents": "I'll rebase #919 sometime this weekend so we can merge it", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T00:57:01Z", "contents": "Also, what about #918? Unless I missed something, seems like we should get those warnings into a release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T05:01:18Z", "contents": "I talked to @raphamorim on a private channel and we will meet in person\nnext week. Applying the warning feature to deprecated api revealed more\ncomplex than planned and that PR became a rabbit hole.\nWe will still have deprecations after 2.0 pre-3.0 and we may still keep\nQUnit.warning as a feature for the good on the future.\nOn Saturday, March 26, 2016, Trent Willis notifications@github.com wrote:\n\nAlso, what about #918 #918? Unless\nI missed something, seems like we should get those warnings into a release.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n#975 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T17:16:30Z", "contents": "A few missing cases at https://github.com/jquery/qunit/milestones/v2.0, but we are close.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-19T16:29:31Z", "contents": "2.0.0-rc1 is out! Grab your friends to test it everywhere!\nyay!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["HOORAY", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY"], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 977, "url": "https://github.com/qunitjs/qunit/issues/977", "title": "Allow multiple before/beforeEach/after/afterEach", "contents": "It's inconsistent that every callback passed to QUnit.test is preserved, but beforeEach and afterEach overwrite preexisting values: https://jsfiddle.net/k9af94x7/\nWe should let the module hooks queue just like the tests do.\nEDIT: \u2026including before and after.", "createdAt": "2016-03-26T19:52:37Z", "updatedAt": "2017-06-06T03:53:08Z", "closedAt": "2017-06-06T03:52:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 8, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "platinumazure", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "jzaefferer", "company": null}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 26, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-26T22:23:43Z", "contents": "Since test is a function of the QUnit global while beforeEach / afterEach are functions of the local hooks object I, personally, don't find it that inconsistent, but acknowledge how similar signatures could lead one to believe they are.\nThat said, is there a use case for needing the hooks to queue? Given that there is no equivalent queuing for non-callback modules, I am hesitant to want to introduce it here. Could we potentially rename the hook functions to be setBeforeEach and setAfterEach to clear up the inconsistency?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T02:19:39Z", "contents": "Since test is a function of the QUnit global while beforeEach / afterEach are functions of the local hooks object I, personally, don't find it that inconsistent, but acknowledge how similar signatures could lead one to believe they are.\n\nExactly. Further, the global-context test is likely on its way out, which will further emphasize the similarity.\n\nThat said, is there a use case for needing the hooks to queue? Given that there is no equivalent queuing for non-callback modules, I am hesitant to want to introduce it here. Could we potentially rename the hook functions to be setBeforeEach and setAfterEach to clear up the inconsistency?\n\nI can't think of a pressing case, but module nesting already allows for use of multiple hooks. And I'm not too worried about non-callback modules because a) the limitation is inherent to the { [name]: fn } structure, and b) I'm trying to phase them out. It's true that this issue is motivated entirely by a desire for consistency, but that's not necessarily a bad thing (I know, I know... cue reference).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T05:19:39Z", "contents": "I am not a good supporter of nested tests, different than nested modules.\nSaid that, I like how our api design works with es6 modules bindings and\ndestructuring bindings:\nimport { module, test } from './qunitjs';\n\nmodule( 'foo', { beforeEach } => {\n  ...\n});\n(Typed on my phone, sorry if the code shows up as a mess)\nThis is our current api, and I like to explore it on this way.\nIf this convo ends up on ditching out the hooks object argument from\nmodule, we could use the return of module calls to set the hooks in a\nchainable way:\nQUnit.module( 'foo' )\n  .beforeEach( _ => ... )\n  .afterEach( _ => ... )\n  .before( ... );\nThis looks great for modules defined without a callbackfn, but might be\nconfusing with it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-27T17:06:24Z", "contents": "I like both of your code examples, but they don't really speak to this issue. My point is that beforeEach and afterEach appear analogous to test, but the analogy breaks down with multiple invocation (the former replace, the latter appends). So we should either rename them to setters, or make them append like test does.\nI'm in favor of the behavior generalization because it's backwards compatible (and therefore avoids deprecation/removal) and increases consistency\u2014both internally (since callback combination is already possible with module nesting) and externally (since we'd be matching Intern, Jasmine, and Mocha).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-04T20:08:22Z", "contents": "I like the idea. Any chance this can make the near- to mid-term roadmap?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-13T13:49:55Z", "contents": "Question: afterEach hooks would be executed in reverse queue order, right?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-08-14T15:54:33Z", "contents": "An excellent question. Intern guarantees FIFO queue-order, Jasmine guarantees LIFO stack-order, and Mocha uses FIFO queue-order but I couldn't find any assertions protecting that. And of the three, Jasmine seems to be the most intentional\u2014they switched to match Mocha's queue-order in 2.4.0, and reverted back to stack-order in 2.4.1 on the very same day when queue-order broke real-world test suites.\nGiven the above, I agree that LIFO stack-order is best.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-14T16:22:49Z", "contents": "\ud83d\udc4d from me on LIFO, that's my preference as well. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-14T16:28:32Z", "contents": "Oh, I probably should have clarified, I'm talking about hooks defined at the same level of nesting. My assumption is that all afterEach hooks in the child module are executed before any in the parent module, regardless of whether we use FIFO or LIFO order for hooks declared in the same module. Please let me know if this is not or should not be the case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-08-14T17:01:33Z", "contents": "Thanks for the explicit statement. I was assuming the same.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T03:38:28Z", "contents": "Personally, I prefer FIFO within a given level (like Mocha's).  Feels unexpected to execute them in a different order than what the consumers provided.\nFrom a nesting point of view, of course, they must execute from innermost to outermost.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-22T03:48:21Z", "contents": "Well, we could have it both ways with a configuration option, since users will have their preferences. @JamesMGreene Thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T08:22:29Z", "contents": "I don't have a preference for FIFO or FILO, but please don't make it configurable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-22T14:22:59Z", "contents": "@jzaefferer Why no config option?\nFolks: Is this perhaps a sign that this is the wrong way to go? I mean, we do have nested modules to allow for multiple levels of before/after/beforeEach/afterEach. We could conceivably fix the developer experience issue (that is, inconsistency of beforeEach(func) being reset vs append, compared to QUnit.module/QUnit.test) by supporting hooks.beforeEach = func and then removing hooks.beforeEach(func) in the next major, although it would stink to have that change after we've already changed the experience when adding nested modules.\nI'm just trying to make sure we have a good discussion, that's all. I'm not really attached one way or the other.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T14:44:21Z", "contents": "I believe they should definitely remain functions but that they should append.  That is the behavior that I would've expected as a consumer as well.\nFrom much personal experience using Mocha, I can testify that having the ability to add multiple beforeEach/afterEach/before/after hooks at a given level is very valuable if you ever need to do a handful async operations without adding in additional control flow logic to manage the state transitions. It is convenient to have and it keeps your test code much cleaner than needing to wrap things in Promises, or use a flow library like \"async\".", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T14:50:01Z", "contents": "FWIW as a no-longer-contributor, I don't really see the harm in having the ordering be configurable but it does seem unnecessary as long as it is well documented.\nPersonally, when in doubt, I would aim to follow what the majority of consumers would naturally expect.  For instance, I personally would not expect these hooks to be reordered.\nAlso, as Jasmine appears to be the only JS testing library to do so \u2014 and they attempted to change it to FIFO themselves \u2014 I definitely do not think that they are the ones to model this feature after.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T15:13:56Z", "contents": "I definitely do not think that they are the ones to model this feature after.\n\nIt looks like they had to revert because the broke existing testsuites, not because it was a bad choice in the first place.\nI agree with James that FIFO makes sense.\nAs for config: From a high level perspective, this is such a teeny tiny detail that I have a hard time imaging why anyone would want to configure this. It should work out of the box and be documented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T15:20:39Z", "contents": "Jasmine is the only framework providing real-world justification for an explicit decision here, and that decision was LIFO stack-order, expressed most succinctly in jasmine/jasmine#908 (comment) :\n\nRunning [afterEach] in the reverse declaration order allows libraries to have global setup and teardown that can be guaranteed to run in the same context.\nJasmine won't be changing the ordering of afterEach for the foreseeable future.\n\ne.g.,\nQUnit.module(\"needs mocks\", function( hooks ) {\n    // utilizes beforeEach for setup and afterEach for teardown\n    configureMocks(hooks);\n\n    // user-specified afterEach; assumes mock data is still accessible\n    hooks.afterEach(sanityCheck);\n\n    // tests running against mocks\n    QUnit.test(\"A\", \u2026);\n    QUnit.test(\"B\", \u2026);\n    \u2026\n});\nRegardless, a big +1 to this:\n\nFrom a high level perspective, this is such a teeny tiny detail that I have a hard time imaging why anyone would want to configure this. It should work out of the box and be documented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-22T15:21:55Z", "contents": "I hadn't considered multiple async hooks, and so @JamesMGreene's points are well taken.\nLIFO makes sense to me simply because it allows you to organize nested resources more effectively (IMO). It matches with things like base/derived class construction/destruction and other things where FIFO makes sense before, and LIFO makes sense after.\nlet myFixture;\n\nQUnit.module(\"a module\", function (hooks) {\n    // Setup/teardown root myFixture\n    hooks.beforeEach(function (assert) {\n        const done = assert.async();\n        someAsyncOperation(function (result) {\n            myFixture = result;\n            done();\n        });\n    });\n\n    hooks.afterEach(function () {\n        dispose(myFixture);\n    });\n\n    // Setup/teardown myFixture.someSubFixture\n    hooks.beforeEach(function (assert) {\n        const done = assert.async();\n        anotherAsyncOperation(function (result) {\n            myFixture.someSubFixture = result;\n            done();\n        });\n    });\n\n    hooks.afterEach(function () {\n         dispose(myFixture.someSubFixture);\n    });\n});\nWith FIFO afterEach, though, all I would need to do is group my beforeEach and afterEach functions together and reverse my afterEach functions. It's not the end of the world-- I just wanted to provide an example of why some users might reasonably expect LIFO afterEach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-08-22T15:38:21Z", "contents": "With FIFO afterEach, though, all I would need to do is group my beforeEach and afterEach functions together and reverse my afterEach functions.\n\nAgreed, but that assumes such grouping is possible. In the case of third-party libraries setting up and tearing down (sub)fixtures (e.g., one or both of your example setup/teardown pairs not being user code), LIFO makes much more sense because it allows them to operate with one hook rather than two.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-22T15:38:27Z", "contents": "As for config: From a high level perspective, this is such a teeny tiny detail that I have a hard time imaging why anyone would want to configure this. It should work out of the box and be documented.\n\nI'm certainly okay with just picking the most sensible approach and adding a configuration option later if users demand it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-23T01:18:09Z", "contents": "@gibson042 Can you offer a concrete example? (Fair warning, I'm about to jump to Team FIFO, so this might be your last chance to convince anyone to consider LIFO.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-08-23T05:12:47Z", "contents": "ngMock setup/teardown registration and sharedInjector\nCoding With Spike: Building Test Fixtures to Clean up Mocha / Jasmine Tests\npytest fixtures\nScalaTest stackable trait pattern\n\nAnd honestly, it seems like half the justification of beforeAll/afterAll is just exposing a way to accomplish the above with less contention.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-13T14:59:17Z", "contents": "I was looking to implement a newer interface for ember-qunit (see emberjs/ember-qunit#258), and ran into this issue.\nIt isn't immediately obvious from the conversation above if we have settled on the ordering, have y'all made any progress on that front?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-13T15:33:13Z", "contents": "In my opinion, I don't think it matters a whole lot, but whatever order is chosen needs to be explicitly documented and tested.\nI lean towards LIFO ordering because of the third-party lib ordering mentioned above. It is also similar to how multiple callbacks currently work when in nested modules:\n\nAdditionally, any hook callbacks on a parent module will wrap the hooks on a nested module. In other words, before and beforeEach callbacks will form a queue while the afterEach and after callbacks will form a stack.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-06T03:53:08Z", "contents": "Support for this has been implemented and will be in the next release.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 978, "url": "https://github.com/qunitjs/qunit/issues/978", "title": "Make module-contextual module/test/etc. functions", "contents": "(this is a restatement of #670 (comment) , which itself referenced a discussion from #670 (comment) )\n7be1d6c introduced the QUnit.module( name, callback ) signature, which immediately invokes a callback to allow for definition of nested modules. However, doing so requires using global QUnit.module and/or QUnit.test functions: https://jsfiddle.net/k9af94x7/\nThis is ugly, and bad for the same reasons as use of global assertions like QUnit.equal instead of contextual assertions like assert.equal. We're fixing the assertions issue, and should do the same with module and test by making them accessible from either context or arguments of the module callback, while fulfilling some goals to the maximum possible extent:\n\nIntuitively-readable invocations, possibly paradigm-dependent (e.g., use of BDD names)\nMaximum similarity between module and test callbacks, for future iterative convergence\nSeparation of concerns (e.g., no properties on assert that do not pertain to assertions, since we might want to allow integrating external assertion libraries)\n\nMy ideal vision would fully integrate the two functions, allowing code like:\n// Note the second parameter\nQUnit.test(\"grandparent\", (assert, test) => {\n    // `test` is destructurable, and contains helpers like beforeEach.\n    // Those that are functions have signatures analogous to `test` itself.\n    // Also present is environment, so users never need deal with `this`.\n    test.beforeEach((assert, test) => { test.environment.ready = true; });\n\n    // Any test can contain assertions, even those that would traditionally be modules.\n    // But only child tests interact with beforeEach/afterEach.\n    assert.strictEqual(test.environment.ready, undefined);\n    test(\"uncle\", (assert, { environment }) => {\n        assert.strictEqual(environment.ready, true);\n    });\n\n    // As noted in https://github.com/jquery/qunit/pull/670#issuecomment-78513676 ,\n    // a significant current difference between `module` and `test` is their\n    // (a)synchronicity.\n    // We can make that explicit (names subject to bikeshedding, but I think\n    // defaulting to async will make for the smoothest transition.\n    test.immediate(\"parent\", (assert, test) => {\n        test(\"child\", (assert, test) => {\n            assert.strictEqual(test.environment.ready, true)\n        });\n    });\n});\nHowever, if the above is a bit much, then I suppose we can just add module and test properties to the argument passed to module callbacks:\nQUnit.module( \"module b\", function( hooks ) {\n  hooks.test( \"a basic test example 2\", function( assert ) {\n    assert.ok( true, \"this test is fine\" );\n  });\n\n  hooks.module( \"nested module b.1\", function( hooks ) {\n    hooks.test( \"a basic test example 3\", function( assert ) {\n      assert.ok( true, \"this test is fine\" );\n    });\n  });\n});\nNote that module is already incompatible with test, because arguments passed to their respective callbacks differ (respectively, moduleFns\u2014a.k.a. hooks\u2014vs. assert).", "createdAt": "2016-03-26T20:33:08Z", "updatedAt": "2017-04-15T03:54:45Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 982, "url": "https://github.com/qunitjs/qunit/issues/982", "title": "update breaks Uglify2 of RequireJS", "contents": "Recently updated\nqunit#1.23.1 source/bower_components/qunit\nnow\nRunning \"requirejs:prod\" (requirejs) task\n>> Error: Cannot uglify2 file:\n>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/.t\n>> mp/task/requirejs/bower_components/qunit/reporter/html.js. Skipping it. Error\n>> is:\n>> 'return' outside of function (line: 3, col: 7, pos: 126)\n>> \n>> Error\n>>     at new JS_Parse_Error\n>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n\n>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18368:18)\n>>     at js_error\n>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n\n>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18376:11)\n>>     at croak\n>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n\n>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18852:9)\n>>     at\n>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no\n>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18994:21\n>>     at\n>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no\n>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18899:24\n>>     at block_\n>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n\n>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:19179:20)\n>>     at\n>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no\n>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18946:29\n>>     at\n>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no\n>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18899:24\n>>     at if_\n>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n\n>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:19162:44)\n>>     at\n>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no\n>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18990:24\nWarning: RequireJS failed. Use --force to continue.", "createdAt": "2016-04-13T17:20:28Z", "updatedAt": "2016-04-19T20:40:15Z", "closedAt": "2016-04-19T20:40:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-13T17:23:35Z", "contents": "why is this using qunit/reporter/html.js? It is supposed to use distro version of qunit.js, it's a single file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2016-04-13T18:02:13Z", "contents": "Sorry, I am not sure, this may be an issue with Uglify2 but I started here\nfirst as it was the package that was updated then caused a break.\nOn Wed, Apr 13, 2016 at 1:23 PM, Leo Balter notifications@github.com\nwrote:\n\nwhy is this using qunit/reporter/html.js? It is supposed to use distro\nversion of qunit.js, it's a single file.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n#982 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-04-17T04:39:26Z", "contents": "@jwilkinson how are you including QUnit in your project/build? The error seems accurate on the Uglify end, but as @leobalter pointed out above, the actual distros of QUnit don't have individual files such as reporter/html.js.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 983, "url": "https://github.com/qunitjs/qunit/issues/983", "title": "Handle QUnit overloading", "contents": "As reported on twitter by @fnando, QUnit silently fails if it's loaded twice or more in a single suite.\nWe may investigate how to better handle this, failing or not, it's nice to make it clear.", "createdAt": "2016-04-13T18:18:06Z", "updatedAt": "2016-11-01T16:29:20Z", "closedAt": "2016-05-16T15:58:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "fnando", "company": "@stellar"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "fnando", "authorAssociation": "NONE", "createdAt": "2016-04-13T18:19:40Z", "contents": "To be more specific, it doesn't fail, but it overrides any defined hook on the previous instance silently. The ideal way of dealing with this would be either using the existing instance or raise an exception saying that only one instance can be defined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-04-17T04:33:30Z", "contents": "raise an exception saying that only one instance can be defined.\n\nI'm \ud83d\udc4d  on this idea. Unless there is a valid use case for having the library defined more than once, I feel it makes the most sense to alert users to the fact they're duplicating dependencies.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 984, "url": "https://github.com/qunitjs/qunit/issues/984", "title": "Confirm proper async isolation", "contents": "#976 (comment) suggests that some state may be leaking.", "createdAt": "2016-04-14T03:05:35Z", "updatedAt": "2016-11-01T16:29:20Z", "closedAt": "2016-06-16T00:29:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:34:27Z", "contents": "What sort of state might be leaking? Is this something that needs further investigation, or do we already have a good idea where/why this is happening?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-04-21T02:34:34Z", "contents": "I haven't investigated the why, but the where is in the function returned by assert.async\u2014we should be able to pass test to resumeProcessing, but making that change breaks the test suite. So something is amiss and needs analysis.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 986, "url": "https://github.com/qunitjs/qunit/issues/986", "title": "Deprecate assert.push", "contents": "Please, see the comments below.", "createdAt": "2016-04-19T16:36:47Z", "updatedAt": "2016-12-14T15:05:18Z", "closedAt": "2016-12-14T15:05:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "rdugue", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-04-21T09:12:11Z", "contents": "Did you mistake assert.push for QUnit.push?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-21T14:11:12Z", "contents": "Mea culpa, this was badly opened/explained. QUnit.push is already removed (with the deprecation message).\nWhat I wanted is to remove assert.push which rethinking about it I guess we shouldn't do it in 2.0.\nInstead, a warning for using this method is welcoming, suggesting pushResult should be used instead. It's too early to drop this method as that might cost extra work from any external assertion plugin.\nWith that said, this warning doesn't need to land with 2.0, but we can do it soon.\n@trentmwillis I'm sorry for the extra work, thanks for the help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdugue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-05-06T11:01:22Z", "contents": "I made a pull request to address this, but I accidentally titled it with the branch wrong issue number.  Apologies... I can resubmit if necessary.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 987, "url": "https://github.com/qunitjs/qunit/issues/987", "title": "[integration issue?] Tests called twice", "contents": "Context: I'm trying to integrate QUnit into the Service Now platform's server-side(Antiqudated Rhino). I've got it mostly working, but my test suite seems to be called twice, or not at all, or I get a \"start called outside of a test, when already started Exception\". depending on the order of my tests, start(), load() and what i've set autostart and autorun to\nI'm getting frustrated.\nHere's my runner:\nvar CidQUnit2 = function(testGr,run_id){\n    //Loads the QUnit code and moves the resulting QUnit object to the global namespace\n        this.loadQUnit();\n\n//register callbacks\n    QUnit.begin(this.notify.curry(\"Qunit Test Suite Started\"));\n    QUnit.done(this.notify.curry(\"Qunit Test Suite Ended\"));\n    QUnit.log(this.log.curry(\"Qunit Assertion Complete\"));\n    QUnit.moduleStart(this.log.curry(\"Qunit Module Started\"));\n    QUnit.moduleDone(this.log.curry(\"Qunit Module Done\"));\n    QUnit.testStart(this.log.curry(\"Qunit Test Started\"));\n    QUnit.testDone(this.log.curry(\"Qunit Test Ended\"));\n\n//what order do I call the configs/and load()/start()?\n    QUnit.load();\n\n    QUnit.config.autostart=false;\n    QUnit.config.autorun=false;\n    QUnit.config.blocking=false;\n    QUnit.config.updateRate = 0;\n    /*this should be the equivalent of just a series of \n    *QUnit.test() and \n    *QUnit.module statements */\n    GlideEvaluator.evaluateString(testGr.u_test_script);\n//Start the tests?\n    QUnit.start();  \n};\n\n//load QUnit into the global namespace\nCidQUnit2.prototype.loadQUnit = function(){\n    JSUtil.getGlobal().exports = {};\n    gs.include(\"CidQUnitFramework-v1.23\");\n    JSUtil.getGlobal().QUnit = exports.QUnit;\n\n};\n\nthe current simple test I'm using is this:\nQUnit.test(\"test1\",function(assert){\n    assert.ok(true);\n    assert.equal(1,1,\"1--1\");\n    assert.notEqual(1,2);\n});\nI guess the ultimate question is:\nwhat is the appropriate order to do the following\n\ncall load()\ncall start()\ncall the test code itself\nset the config object\n\nand finally, the recommended settings for the config too.", "createdAt": "2016-04-19T21:37:42Z", "updatedAt": "2016-04-21T22:05:06Z", "closedAt": "2016-04-21T22:05:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "danielmiester", "company": null}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 13, "comments_data": [{"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-19T21:51:31Z", "contents": "ok, I've figured it out through brute force trial an error.\nthe correct sequence is:\n\nLoad QUnit\nSet Callbacks\nExecute test code (It is just registering a series of tests, not actually executing them, yet.)\nCall QUnit.load() to actually execute the tests", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T13:08:29Z", "contents": "I usually do it like this when I know I have tests I need to load asynchronously:\n\nPull in QUnit, immediately set QUnit.config.autostart to false\nSet other necessary config options\nLoad the tests themselves however you need to\nCall QUnit.start()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T20:15:36Z", "contents": "I've talked about this on IRC.\nThis sequence with .load seems wrong, or it should be wrong. The appropriate implementation should be as @platinumazure detailed.\n@danielmiester if you can try that sequence, that would help to investigate if there's anything wrong with the api for .autostart + .start.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:26:23Z", "contents": "Ok, I've executed in the order specified.\nJSUtil.getGlobal().exports = {};//create a global `exports` object\ngs.include(\"CidQUnitFramework-v1.23\");//include QUnit code\nJSUtil.getGlobal().QUnit = exports.QUnit; //copy QUnit object to global namespace\nQUnit.config.autostart = false; \nQnit.begin(this.notify.curry(\"Qunit Test Suite Started\"));\nQUnit.done(this.notify.curry(\"Qunit Test Suite Ended\"));\nQUnit.log(this.log.curry(\"Qunit Assertion Complete\"));\nQUnit.moduleStart(this.log.curry(\"Qunit Module Started\"));\nQUnit.moduleDone(this.log.curry(\"Qunit Module Done\"));\nQUnit.testStart(this.log.curry(\"Qunit Test Started\"));\nQUnit.testDone(this.log.curry(\"Qunit Test Ended\"));\n\n//load tests\nGlideEvaluator.evaluateString(testGr.u_test_script);\nQUnit.start();\nNo signs of QUnit starting the tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:32:57Z", "contents": "You have a typo:\nQnit.begin(this.notify.curry(\"Qunit Test Suite Started\"));\n// should be QUnit.begin\nPresumably that causes a ReferenceError to be thrown before the tests are even loaded, let alone started.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:42:19Z", "contents": "OOPS!\ntried again after fixing the typo: (direct copy-paste from my REPL)\ngs.include(\"Function.curry\");\nthis.log = function(prefix,details){\n    gs.print(prefix + \":::\" + QUnit.dump.parse(details));\n};\nthis.notify = function(message,details){\n    gs.addInfoMessage(message);\n    gs.print(prefix + \":::\" + QUnit.dump.parse(details));\n};\nJSUtil.getGlobal().exports = {};//create a global `exports` object\ngs.include(\"CidQUnitFramework-v1.23\");//include QUnit code\nJSUtil.getGlobal().QUnit = exports.QUnit; //copy QUnit object to global namespace\nQUnit.config.autostart = false; \nQUnit.begin(this.notify.curry(\"Qunit Test Suite Started\"));\nQUnit.done(this.notify.curry(\"Qunit Test Suite Ended\"));\nQUnit.log(this.log.curry(\"Qunit Assertion Complete\"));\nQUnit.moduleStart(this.log.curry(\"Qunit Module Started\"));\nQUnit.moduleDone(this.log.curry(\"Qunit Module Done\"));\nQUnit.testStart(this.log.curry(\"Qunit Test Started\"));\nQUnit.testDone(this.log.curry(\"Qunit Test Ended\"));\n\n//load tests\nQUnit.test(\"test1\",function(assert){\n    assert.ok(true);\n    assert.equal(1,1,\"1--1\");\n    assert.notEqual(1,2);\n\n});\nQUnit.start();\noutput: <bupkis>", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:45:05Z", "contents": "Is there any way you could create a runnable demo, maybe on JSFiddler or a similar site?\nAt this point, I don't see any obvious problems. The next step is probably to run through that code with a debugger and make sure each operation does what it's supposed to. And you could put a breakpoint in the test function itself so that we know if it's even run at all... Sorry, that's all I have at this point.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:56:00Z", "contents": "if I tweak it a bit, it does work as I expect it to:\ngs.include(\"Function.curry\");\nthis.log = function(prefix,details){\n    gs.print(prefix + \":::\" + QUnit.dump.parse(details));\n};\nthis.notify = function(message,details){\n    gs.addInfoMessage(message);\n    gs.print(message + \":::\" + QUnit.dump.parse(details));\n};\nJSUtil.getGlobal().exports = {};//create a global `exports` object\ngs.include(\"CidQUnitFramework-v1.23\");//include QUnit code\nJSUtil.getGlobal().QUnit = exports.QUnit; //copy QUnit object to global namespace\n// don't set config QUnit.config.autostart = false; \nQUnit.begin(this.notify.curry(\"Qunit Test Suite Started\"));\nQUnit.done(this.notify.curry(\"Qunit Test Suite Ended\"));\nQUnit.log(this.log.curry(\"Qunit Assertion Complete\"));\nQUnit.moduleStart(this.log.curry(\"Qunit Module Started\"));\nQUnit.moduleDone(this.log.curry(\"Qunit Module Done\"));\nQUnit.testStart(this.log.curry(\"Qunit Test Started\"));\nQUnit.testDone(this.log.curry(\"Qunit Test Ended\"));\n\n//load tests\nQUnit.test(\"test1\",function(assert){\n    assert.ok(true);\n    assert.equal(1,1,\"1--1\");\n    assert.notEqual(1,2);\n\n});\nQUnit.load() //vs QUnit.start()\noutput:\nBackground message, type:info, message: Qunit Test Suite Started\n*** Script: Qunit Test Suite Started:::{\n  \"modules\": [\n    {\n      \"name\": \"\",\n      \"tests\": [\n        {\n          \"name\": \"test1\",\n          \"testId\": \"ffffff.\uf497\"\n        }\n      ]\n    }\n  ],\n  \"totalTests\": 1\n}\n*** Script: Qunit Module Started:::{\n  \"name\": \"\",\n  \"tests\": [\n    {\n      \"name\": \"test1\",\n      \"testId\": \"ffffff.\uf497\"\n    }\n  ]\n}\n*** Script: Qunit Test Started:::{\n  \"module\": \"\",\n  \"name\": \"test1\",\n  \"testId\": \"ffffff.\uf497\"\n}\n*** Script: Qunit Assertion Complete:::{\n  \"actual\": true,\n  \"expected\": true,\n  \"message\": \"okay\",\n  \"module\": \"\",\n  \"name\": \"test1\",\n  \"negative\": false,\n  \"result\": true,\n  \"runtime\": 2,\n  \"testId\": \"ffffff.\uf497\"\n}\n*** Script: Qunit Assertion Complete:::{\n  \"actual\": 1,\n  \"expected\": 1,\n  \"message\": \"1--1\",\n  \"module\": \"\",\n  \"name\": \"test1\",\n  \"negative\": false,\n  \"result\": true,\n  \"runtime\": 5,\n  \"testId\": \"ffffff.\uf497\"\n}\n*** Script: Qunit Assertion Complete:::{\n  \"actual\": 1,\n  \"expected\": 2,\n  \"message\": undefined,\n  \"module\": \"\",\n  \"name\": \"test1\",\n  \"negative\": true,\n  \"result\": true,\n  \"runtime\": 9,\n  \"testId\": \"ffffff.\uf497\"\n}\n*** Script: Qunit Test Ended:::{\n  \"assertions\": [\n    {\n      \"message\": \"okay\",\n      \"result\": true\n    },\n    {\n      \"message\": \"1--1\",\n      \"result\": true\n    },\n    {\n      \"message\": undefined,\n      \"result\": true\n    }\n  ],\n  \"duration\": 12,\n  \"failed\": 0,\n  \"module\": \"\",\n  \"name\": \"test1\",\n  \"passed\": 3,\n  \"runtime\": 12,\n  \"skipped\": false,\n  \"source\": undefined,\n  \"testId\": \"ffffff.\uf497\",\n  \"total\": 3\n}\n*** Script: Qunit Module Done:::{\n  \"failed\": 0,\n  \"name\": \"\",\n  \"passed\": 3,\n  \"runtime\": 21,\n  \"tests\": [\n    {\n      \"name\": \"test1\",\n      \"testId\": \"ffffff.\uf497\"\n    }\n  ],\n  \"total\": 3\n}\nBackground message, type:info, message: Qunit Test Suite Ended\n*** Script: Qunit Test Suite Ended:::{\n  \"failed\": 0,\n  \"passed\": 3,\n  \"runtime\": 28,\n  \"total\": 3\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:57:55Z", "contents": "Okay, let's iterate on that.\nWhat happens if you remove QUnit.load()? Will that still work?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:59:21Z", "contents": "no output", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T21:02:30Z", "contents": "@platinumazure want to join me in the jquery-dev irc? speed up this iterating a bit ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T21:07:18Z", "contents": "I would but I've run out of ideas now. lol. But I agree this should be in IRC-- I'll try to follow along this evening, hopefully someone else can help. (I was surprised that QUnit.load() was needed to be honest.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielmiester", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T21:21:00Z", "contents": "Maybe because i'm loading it like it's a node.js module.\nDunno.\nI am using a nonstandard Rhino environment. I'm surprise I was able to get it to work with as few modifications as I did. (fix an array accessor that was a reserved word, and rewrite an if statement to call a function instead of wrapping all the code in one parameter)\nThe code is functionally identical, just \"worded\" slightly different. I've already gotten one of the changes accepted into mainline already :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 988, "url": "https://github.com/qunitjs/qunit/issues/988", "title": "Module picker is broken", "contents": "The multi-select picker introduced in 0780127 provides no mechanism for committing a selection, and suffers some on styling and accessibility. I'd like to fix it before 2.0.", "createdAt": "2016-04-19T22:01:26Z", "updatedAt": "2016-04-20T20:10:52Z", "closedAt": "2016-04-20T20:10:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T01:35:34Z", "contents": "Styling seemed okay to me, but I did note some other issues as you did as well:\n\nAccessibility could be improved\nShouldn't have to hit \"go\" in order to commit a selection (not intuitive)\nAfter closing the dropdown, there should be some indication of what has been selected\nAfter closing the dropdown, the previous search/filter should clear\nThere should be some indication that the thing is a dropdown and not just a text input\nThe labels for the options should be block-level so that users can click anywhere in the row to select an item\nSince \"All modules\" doesn't switch all the checkboxes to \"checked\", it should probably say \"Clear all\" or something similar", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": {"id": "MDk6TWlsZXN0b25lMzUzOTA0", "title": "2.0", "description": "", "createdAt": "2013-06-12T16:55:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "qunitjs/qunit", "issue_id": 990, "url": "https://github.com/qunitjs/qunit/issues/990", "title": "How should global error handlers resume the test runner in 2.0?", "contents": "We're using QUnit and RequireJS. We've defined a require.onError handler as follows:\ndefine([], function () {\n    require.onError = function (e) {\n        if (QUnit && QUnit.config) {\n            if (QUnit.config.current) {\n                var currentTest = QUnit.config.current;\n\n                currentTest.pushFailure(\"Died on test #\" + (currentTest.assertions.length + 1) + \" \" +\n                    currentTest.stack + \": \" + (e.message || e));\n            }\n\n            // Restart the tests if they're blocking\n            if (QUnit.config.blocking) {\n                QUnit.start();\n            }\n        }\n    };\n});\nThis is heavily inspired by how the global error handler used to handle these issues. However, QUnit.start() itself now throws an error (in 2.0.0-rc1), so I need a new way to resume the test runner. What is the best way to do that?", "createdAt": "2016-04-20T18:56:58Z", "updatedAt": "2018-12-21T04:27:29Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 6, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 26, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T19:08:03Z", "contents": "For what it's worth, I would be okay with a new API, maybe something like Test#pushFailureAndResume(), which couples the semaphore decrement with the error being pushed. That way people can only use it to add a global failure, rather than skirting the assert.async() mechanism.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T19:12:55Z", "contents": "that's not async control, that's an error control we didn't have QUnit 1.x designed for it. It just worked in a way allowing the leakage from inside and outside a test context.\nOn the previous version, QUnit.start could be used to control any context of any test from anywhere, even from another test.\nThis resume method is a feature we never had properly designed on QUnit and we need to understand what is cause the blocking state to better handle it. I guess the promise-able tests might help finding a good path, but I would like to leave this issue open to discuss the best approach before shipping anything we can't remove until another major version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T19:15:43Z", "contents": "Fine by me.\nFor what it's worth, promise-able tests won't work in the RequireJS case because RequireJS does not return a promise, and its callback functions are executed asynchronously (here meaning not on the same call stack). My require.onError function is similarly unable to support the injection of a local test context in order to somehow return a promise.\nPlease let me know if I can provide further information to aid in this discussion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T19:28:45Z", "contents": "Oh, you said you wanted to know what causes the blocking state. That's an easy one:\nQUnit.test(\"This is a test\", function (assert) {\n    var done = assert.async();     // Causes config.blocking to be set to true, as it should\n\n    require([\"some/dependency\"], function (dependency) {\n        // This callback is invoked asynchronously. Do stuff as normal.\n\n        assert.ok(dependency);\n\n        done();\n    });\n});\nIf the above snippet threw (within the require callback), it will not be caught by either the synchronous try/catch or the promise logic.\nThis is very similar to my other issue, #816. However, I'm currently able to deal with that problem using the require.onError code from my first post; with QUnit 2.0.0-rc1 out, this issue is becoming more urgent for me, because I have no way of restarting the test runner on error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T19:35:03Z", "contents": "Thanks for providing more info.\nOn this specific example, I would say the best approach is to not rely on anything from the tests that is outside it's context, if that becomes repetitive you can abstract the require calls to include an error callback, as in:\nrequire([\"some/dependency\"], function (dependency) {\n    // This callback is invoked asynchronously. Do stuff as normal.\n\n    assert.ok(dependency);\n\n    done();\n},\nfunction(err) {\n    ...\n    done();\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T19:36:51Z", "contents": "Hmm... We have one of these on every test in our codebase (thousands of tests). That could be painful. Are we sure there isn't a DRYer way to do this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T19:41:29Z", "contents": "this abstraction could be something like:\nfunction t_require(done, deps, ...callbacks) {\n  return require(deps, callback[0], function(...args) {\n    var res;\n    if (callback[1]) {\n      res = callback[1].apply(this, args);\n    }\n    done();\n    return res;\n  });\n}\nthat's not the best looking thing, but I it should work while we don't have anything else to cover this on QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T19:44:15Z", "contents": "Oh, okay, I got it. You are giving me suggestions for what I can do while we're figuring out the design. Thanks! Sorry for misunderstanding.\nJust to be absolutely sure: Are you interested (not immediately, perhaps, but in the future) in the notion of having QUnit support these global handlers in some way? Or does this strike you as not meriting a place on the roadmap?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T19:59:01Z", "contents": "Are you interested (not immediately, perhaps, but in the future) in the notion of having QUnit support these global handlers in some way?\n\nI am! I'm just afraid I don't have the proper bandwidth to do it as soon as I would like.\nI believe this deprecation cleanup on 2.0 opens the path for a better async handling and that's totally welcoming for the project.\nThis issue is great to account for on any work we do on this improvement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-20T20:02:52Z", "contents": "Awesome. If it will help to have some proof-of-concept pull requests as APIs are proposed, I am happy to help.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T20:07:35Z", "contents": "That would be great!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T20:17:28Z", "contents": "I guess the #947 might help solving this as well.\ncc @trentmwillis", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-04-20T21:16:24Z", "contents": "@platinumazure: Given that your current strategy already dives into QUnit internals, you can create something analogous by spying on assert.async. Note that this is also subject to breakage at any time, but it should be an easy swap for now: https://jsfiddle.net/8kgpzwut/ .", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-30T02:56:44Z", "contents": "@gibson042 My apologies, I thought I had thanked you earlier. Thanks for taking the time to put together a fiddle proving the concept- really helps.", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-20T17:27:00Z", "contents": "@trentmwillis Thanks for merging #1020, that looks promising.\nI'm wondering if it might be worth exposing two versions of recover-- one to only get rid of one hold, if possible, and the other to get rid of all holds and forcibly restart the test? (As I say this, though, I'm wondering how the hell to know which hold to restart.)\nExample use case:\nQUnit.test(\"Two asyncs, one of which throws\", function (assert) {\n    var done1 = assert.async(), done2 = assert.async();\n\n    setTimeout(function () {\n        throw new Error();\n        // done1();\n    });\n\n    setTimeout(function () {\n        assert.ok(true);\n        done2();\n    });\n});\n\nwindow.onError = function someGlobalExceptionHandler() {\n    // remove just one hold from the test somehow? is this even possible?\n};\nAlternatively, I'm wondering if recover() should purge all assertions made so far and add an assertion failure saying the global error handler was invoked and everything is fubar.\nApologies if I'm going over ground that has already been covered elsewhere (and please do feel free to link me to any existing discussion so I can get up to speed).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-20T17:35:49Z", "contents": "@platinumazure yes, that is the issue I was pondering as well, and why I hadn't moved forward with a suggestion. Essentially we want QUnit.recover() to restart in the case of a failure, but we don't want it be abused and used to restart things that were still just waiting for some async task.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-20T17:37:49Z", "contents": "@trentmwillis Thanks for the prompt reply. Yes, I agree that we can't afford to let it be abused.\nOne of the APIs I was going to suggest originally was QUnit.pushFailureAndRestart( errorMessage ), which would kill all async holds but also require an error message (which is then logged as an assertion failure), so that it becomes impossible to just get out of jail free. Thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-07-22T03:55:43Z", "contents": "@platinumazure I agree. As a purely internal operation, our diligence ensures that every recovery is preceded by a pushFailure, but as a public operation we should move that part into the function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-04T19:47:42Z", "contents": "My status on this:\n\nI'm willing to propose some APIs any time, but I'm waiting for ES6 and possible consumption of ESLint first. So this will take a backseat for a little bit, unless someone else on the core team believes this should take higher priority.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-20T15:56:13Z", "contents": "Now that ESLint is in, I'm hoping to get back to this in the next week or two.\nAny thoughts on an API name/contract? I had proposed QUnit.pushFailureAndRestart( errorMessage ), but we also have QUnit.recover(). If we have a preference for one of those (or a completely different API name/contract), I can incorporate that into a PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-10-07T00:25:59Z", "contents": "Shouldn't we perhaps just make it so that the global error handler resumes execution if an unhandled error occurs while a test is in progress?\nAlso, doesn't your test timeout after ~5 seconds and move on to the next test anyway?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-02-04T18:09:14Z", "contents": "Okay, it took me a while to come back to this but I think @JamesMGreene has the right idea here.\nI'm working on #1099 to make the global error handling logic more directly accessible for other runtimes or plugins. That plus an ability to resume the test runner from the global error handler (possibly behind a config option) should hopefully work for these use cases.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-02-07T17:11:18Z", "contents": "This is not only fair and reasonable, it's good to have this feature. Thanks for leading this work, @platinumazure.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-11T15:56:44Z", "contents": "@platinumazure can this be closed now that #1099 has landed? I'm assuming yes, but wanted to double check", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-11T15:59:30Z", "contents": "Hi @trentmwillis, maybe not yet:\n\nI'm working on #1099 to make the global error handling logic more directly accessible for other runtimes or plugins. That plus an ability to resume the test runner from the global error handler (possibly behind a config option) should hopefully work for these use cases.\n\nEmphasis mine. I'm happy to close this issue and create a new one for clarity, if needed, but the problem described by this issue is not fully solved.\nOkay if I close this myself later today?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-11T16:00:38Z", "contents": "Okay, no worries. We can leave this one open for continuity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 993, "url": "https://github.com/qunitjs/qunit/issues/993", "title": "Is it possible to do subtest and display pyramid of test", "contents": "I'm not sure it already possible but if it not I would like to request this feature\nSuch as I want to do some test with multiple users. But before that I would like to test each user and result each one in each block but still in the same scope of the test. Then do the real test\nAbility to display subtest in block and layer each as pyramid could be handy\nSomething like assert.test(function(subAssert){ /* subtest */ }); maybe?", "createdAt": "2016-05-06T04:36:57Z", "updatedAt": "2016-05-21T05:20:28Z", "closedAt": "2016-05-21T05:20:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Thaina", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Thaina", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 7, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-06T05:14:36Z", "contents": "I'm not sure I understand the use case. What would be the difference between a sub-test and a single test from a module? Why not simply do the same test in a loop with the different member data?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thaina", "authorAssociation": "NONE", "createdAt": "2016-05-06T05:35:57Z", "contents": "@trentmwillis The difference is variable scope and grouping\nIt's like a comment in reddit which could be subcomment and subsubcomment. That's the main point. To split it in difference module then it cannot reuse variable I got from the previous test (get userIDs properly is also a test that I do assert)\nAnother use case is to test many items that could be test each one asynchronously. Ability to asynchronous test each block will be neat. I test 3 user separately and want to display result of test in its own block. But when I do async it was race against each other and report flat result (indently group is better)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-05-08T13:58:28Z", "contents": "You could use nested modules (suites): http://api.qunitjs.com/QUnit.module/", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Thaina", "authorAssociation": "NONE", "createdAt": "2016-05-09T06:49:53Z", "contents": "I see, thanks. @JamesMGreene", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thaina", "authorAssociation": "NONE", "createdAt": "2016-05-09T07:04:34Z", "contents": "@JamesMGreene Now I'm still curious. How order the module got called? If it async Promise then how can I specified which one will go in which module. How can I go back into topmost module?\nI think hooks should have all function of QUnit and instead of QUnit.test() we could use hooks.test() and get assert to nest module instead", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-09T14:55:37Z", "contents": "@Thaina the modules/tests get called in the order in which they are defined. Tests and hooks (e.g., beforeEach / afterEach) have built in support for handling async behavior, so long as you return a Promise. See the API docs here for more info and an example.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-21T05:20:27Z", "contents": "Closing this as the usage of nested modules and Promise handling seems to solve this use case.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1000, "url": "https://github.com/qunitjs/qunit/issues/1000", "title": "urlParams does not decode \"+\" character in query params", "contents": "The getUrlParams function does not decode the plus character (+) in query parameters, which can cause QUnit to fail to match modules or test names when the module or filter query parameters include spaces encoded as plus characters.\nFor example, if a test named \"my test\" exists, and the tests page is at \"http://localhost:4200/tests\", then the URL \"http://localhost:4200/tests?filter=my+test\" will fail to run the test because it does not decode the parameter \"my+test\" to \"my test\".\nThe test- and module-filtering still works in most cases because QUnit's url-generating function setUrl encodes spaces in the query parameters as %20, and getUrlParams does decode %20 as a space.\nWe have a use case where a uri-normalization library is running on the test page and it replaces the %20 with + in the url's query parameters before QUnit runs getUrlParams.\nAccording to the W3, spaces in query parameter names and values (mime type application/x-www-form-urlencoded) should be replaced with +, not %20, so it seems like the correct behavior would be:\n\nfor QUnit's HTML Reporter UI to use plus characters instead of spaces when generating query params\nfor QUnit's getUrlParams to decode plus characters as spaces", "createdAt": "2016-05-16T23:47:22Z", "updatedAt": "2016-05-17T17:16:44Z", "closedAt": "2016-05-17T16:58:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bantic", "authorAssociation": "CONTRIBUTOR", "participants_count": 5, "participants_data": [{"login": "bantic", "company": "@Addepar"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-05-17T00:30:52Z", "contents": "@trentmwillis - FWIW, this is the result of the bug/issue that I pestered you about in slack a week or two ago.  Many thanks to @bantic for tracking down what is going on (and his continued efforts to fix many encoding/decoding related issues in Ember's route-recognizer).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-17T01:15:05Z", "contents": "@rwjblue, I thought this might be related to that. Seems like a reasonable ask to support %20 and + as space-encodings for params since URIs should support them anyway.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-05-17T13:56:57Z", "contents": "I don't think we need to go to the trouble of complicating setUrl, but I approve of more liberal decoding.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "bantic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-05-17T17:04:41Z", "contents": "neat \u2014 this is issue number 1000 and it was closed by commit number 1000. :)", "reactions_count": 2, "reactions_data": ["HOORAY", "HOORAY"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-05-17T17:16:44Z", "contents": "https://twitter.com/qunitjs/status/732620820049235968", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1004, "url": "https://github.com/qunitjs/qunit/issues/1004", "title": "Skipped tests runtime should be undefined", "contents": "Problem\nWhile working on the js-reporter project I have discovered that also the runtime of skipped tests is a Number.\nWe on the js-reporters think that the runtime should be undefined, because the test does not run, it is skipped, so it cannot have a runtime.\nI looked over the docs about the runtime prop on the testDone callback, where it is described:\n\nThe total runtime in millseconds of the test, including beforeEach and afterEach\n\nBut, also all hooks for a skipped test, are also skipped.\nSolution\nTo achieve this, we should only modify the runtime of the object that is passed as param to the callback on testDone, something like:\nrunLoggingCallbacks( \"testDone\", {\n  ...\n  runtime: (!!this.skip) ? undefined : this.runtime,\n  ... \n} );\nI have done this change locally and all tests are passing. I want also to write some tests to check the tests runtime for a good coverage. Here is a gist about how I think to test it, but I don't know how to simulate a test that is failing, so that  I can get its runtime.", "createdAt": "2016-05-31T13:47:30Z", "updatedAt": "2016-11-01T16:29:21Z", "closedAt": "2016-06-27T14:29:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "flore77", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "flore77", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "jzaefferer", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T17:36:14Z", "contents": "I'm not sure how the type is a concern, as the expected value for skipped tests is 0 or close (I hope) and replacing it with undefined would be a breaking change.\nRather than reading the runtime, js-reporters should ignore the value on skipped tests, as it is irrelevant as an undefined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T17:55:24Z", "contents": "I agree with @leobalter the value shouldn't matter too much.\n@flore77 could you link to an explanation (or explain yourself), why using undefined is preferable over an actual number? In my mind, it makes sense to report a number (even 0), for more accuracy in understanding what the test suite is doing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T17:58:44Z", "contents": "How about making sure that runtime is always 0 for skipped tests? That should work for js-reporters as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T18:08:35Z", "contents": "How about making sure that runtime is always 0 for skipped tests? That should work for js-reporters as well.\n\nWorks for me. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T18:14:23Z", "contents": "And I guess if we set it to 0, we don't really need to add tests for that...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "flore77", "authorAssociation": "NONE", "createdAt": "2016-05-31T18:31:49Z", "contents": "@trentmwillis sure. For me it does not make sense, because for a test to have a runtime, it should get the chance to execute, to run some instructions, but skipped tests are simply skipped, neither the hooks are executed for them. For example Mocha's emitted objects for skipped tests do not have the runtime (actually it is called duration for Mocha)  property at all.\n\nRather than reading the runtime, js-reporters should ignore the value on skipped tests\n\n@leobalter, sure js-reporters can easily ignore the value, we are currently doing this in Fix qunit adapter #58.\nAnyway, to ensure the runtime is 0, sounds fair \ud83d\ude03", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T18:47:02Z", "contents": "For example Mocha's emitted objects for skipped tests do not have the runtime (actually it is called duration for Mocha) property at all.\n\n@leobalter @trentmwillis considering that the property is indeed undefined for skipped Mocha tests, would you consider adopting that for QUnit as well?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T18:50:53Z", "contents": "It seems reasonable to me, though we would need to make sure it gets in the 2.0 release or else we'll have to wait for 3.0. I'm also okay with defaulting it to 0.\nEdit: also @flore77 thanks for the explanation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T19:09:39Z", "contents": "I still prefer casting it to 0, as skipped tests will be consistent with other test calls and test extensions (e.g. .todo)\nundefined seems reasonable if not providing the runtime key at all, so that would be an undefined reference, not the value.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1005, "url": "https://github.com/qunitjs/qunit/issues/1005", "title": "Extend Assert#pushResult to receive a custom diff value", "contents": "As requested by @wycats, it would be good to extend Assert#pushResult to receive a custom diff value, where it does not replace the default QUnit.diff (still useful for other assertions) but it prints a customized diff value.\nExamples:\n// Using default diff\nQUnit.assert.prototype.customAssertion1 = function(actual, expected, result = actual == expected) {\n  return this.pushResult({result, actual, expected});\n};\n\n// Using custom diff\nQUnit.assert.prototype.customAssertion2 = function(actual, expected, result = actual == expected) {\n  return this.pushResult({\n    result,\n    diff: lineDiff(actual, expected)\n  });\n};\nIf diff is given, QUnit should get its value and ignore calling the default QUnit.diff.", "createdAt": "2016-05-31T18:34:54Z", "updatedAt": "2017-04-15T03:51:38Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "wycats", "company": "Tilde, Inc."}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "wycats", "authorAssociation": "NONE", "createdAt": "2016-05-31T18:37:38Z", "contents": "Straw man:\ninterface Diff {\n  kind: 'line' | 'word',\n  expected: string,\n  actual: string\n}\nIt would also be great to have a lower-level interface we could use to specify the differences in a format like this:\n[\n  { \"type\": \"context\", \"line\": \"...\" },\n  { \"type\": \"removed\", \"line\": \"...\" },\n  { \"type\": \"added\", \"line\": \"...\" },\n  { \"type\": \"context\", \"line\": \"...\" }\n]", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T18:40:49Z", "contents": "That's a bit more complex than my initial proposal but I'm interested on seeing this implemented.\n@gibson042 @trentmwillis what do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wycats", "authorAssociation": "NONE", "createdAt": "2016-05-31T18:47:16Z", "contents": "@leobalter I'm fine with any level of abstraction \ud83d\ude04\nI just fleshed out perhaps an Ultimate(tm) version of the feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-05-31T18:55:56Z", "contents": "This seems reasonable to me. A couple thoughts:\n\nShould a diff value or function be passed in? If a function were to be passed instead (with a pre-determined signature) we could avoid doing early (and potentially unnecessary) work.\nWe sort of have the lower-level interface already, where diffs are represented by tuples. Does this suffice or can we workshop it a bit? If we leverage the existing pattern, it would be easy to get a pluggable diffing function that also gets the existing HTMLReporter formatting for free.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-06-01T16:43:55Z", "contents": "I'm not ready to accept this particular low-level strawman now, but I like extending pushResult's argument to include diff data that overrides/replaces actual and expected. And I can see different reporters wanting different formats (e.g., HTML vs. ANSI-escaped vs. patch vs. structured tuples vs. \u2026), so a function or an object with methods (which I suppose toString is implicitly) is also more appealing to me than a string value.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-diff", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1008, "url": "https://github.com/qunitjs/qunit/issues/1008", "title": "HTML Reporter breaks with Symbol values", "contents": "Here is the line causing this bug: https://github.com/jquery/qunit/blob/master/reporter/html.js#L747\nIf I have a failing assertion, the HTML Reporter will try to call .indexOf on top of the expected value. A symbol type has no indexOf and that will break the tests.\nQUnit.test(\"different symbols\", function(t) {\n  var s1 = Symbol(\"QUnit\");\n  var s2 = Symbol(\"QUnit\");\n  t.equal(s1, s2);\n});\nThis fix will require an extra investigation to see if it breaks further, but it's still an easy one to solve.", "createdAt": "2016-06-23T16:22:42Z", "updatedAt": "2016-06-27T14:26:30Z", "closedAt": "2016-06-27T14:26:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1009, "url": "https://github.com/qunitjs/qunit/issues/1009", "title": "update propEqual and notPropEqual to handle Symbols properly", "contents": "propEqual and notPropEqual are not handling symbols properly, they need to fixed.\nQUnit.test(\"symbols\", function(t) {\n  var s1 = Symbol(\"QUnit\");\n  var s2 = Symbol(\"QUnit\");\n  t.propEqual(s1, s2, \"this should not pass\");\n  t.notPropEqual(s1, s2, \"this should pass\");\n  t.propEqual(s1, s1, \"this should pass\");\n  t.notPropEqual(s1, s1, \"this should not pass\");\n});\nWhile it works for the equivalency of the same symbols, the does not for different symbols. s1 and s2 are different, and they are not compared by their description, despite it being the same. They should not be compared by their description, thou. The bug is elsewhere.\nOther minor problem is the failure message reporting them as ordinary objects, they are not, they are on their own native type.", "createdAt": "2016-06-23T16:31:29Z", "updatedAt": "2017-03-19T19:04:54Z", "closedAt": "2017-03-19T19:04:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-23T16:32:38Z", "contents": "It's good to fix this one with proper tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-25T04:56:26Z", "contents": "I'm not sure this is a bug. propEqual is meant to check the properties of the two objects, but Symbols are primitives without properties. I'd liken it to be the same as doing propEqual(true, true).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-17T04:59:41Z", "contents": "@leobalter any thoughts here? I'm inclined to close it. Otherwise the only way I could see to check this is doing a s1.toString() === s2.toString() check (would reveal if they have the same description), but I think that's dangerous since Symbols have unique identities and so even if the description is the same for a Symbol, it is likely that you really want the exact instance of the Symbol, in which case you can use assert.strictEqual.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-19T19:04:54Z", "contents": "I'm going to close this, but if you still feel this is needed, let's reopen and discuss.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1010, "url": "https://github.com/qunitjs/qunit/issues/1010", "title": "New assertions sameValue and sameValueZero", "contents": "ECMAScript has two internal abstractions to compare values called sameValue and sameValueZero.\nThey are different than == and === as they return true for NaN values and compare -0 and +0.\nBased on my experience with test262, and considering some personal goals I have for QUnit (still seeking funding for it) I believe it's fair to ship assertions that does the same comparisons, while I believe it's dangerous to simply modify strictEqual.\nObject.is returns the exact result for sameValue, but that's an ES6 feature and not available on supported browsers. The results are the same as === but with special checks for NaN and bit precision zeros.\nHere goes some data on how they would work:\n\n\n\nmethod\nNaN, NaN\n0, -0\n-0, -0\n[1, 2], [1, 2]\n\n\n\n\nequal\nfail\npass\npass\nfail\n\n\nstrictEqual\nfail\npass\npass\nfail\n\n\ndeepEqual\npass\npass\npass\npass\n\n\npropEqual\npass\npass\npass\npass\n\n\n_.isEqual\npass\npass\npass\npass\n\n\nsameValue\npass\nfail\npass\nfail\n\n\nsameValueZero\npass\npass\npass\nfail\n\n\n\nThe following code can provide some results, as it uses lodash's isEqual as well:\ncc @jdalton\nQUnit.assert.sameValue = function(a, b, message) {\n  var result;\n\n  if (a === b) {\n    // -0 vs +0\n    result = (a !== 0 || 1/a === 1/b);\n  } else\n\n  // NaN\n  if (a !== a && b !== b) {\n    result = true;\n  }\n\n  this.pushResult({\n    result,\n    actual: a,\n    expected: b,\n    message\n  });\n};\n\nQUnit.assert.sameValueZero = function(a, b, message) {\n  var result;\n\n  if (a === b) {\n    result = true;\n  } else \n\n  // NaN\n  if (a !== a && b !== b) {\n    result = true;\n  }\n\n  this.pushResult({\n    result,\n    actual: a,\n    expected: b,\n    message\n  });\n};\n\n\nvar {test} = QUnit;\n\ntest(\"NaN\", function(t) {\n  t.ok(_.isEqual(NaN, NaN), \"lodash equals\");\n  t.equal(NaN, NaN, \"equal\");\n  t.strictEqual(NaN, NaN, \"strictEqual\");\n  t.deepEqual(NaN, NaN, \"deepEqual\");\n  t.propEqual(NaN, NaN, \"propEqual\");\n  t.sameValue(NaN, NaN, \"sameValue\");\n  t.sameValueZero(NaN, NaN, \"sameValueZero\");\n});\n\ntest(\"-0 vs +0\", function(t) {\n  t.ok(_.isEqual(0, -0), \"lodash equals\");\n  t.equal(0, -0);\n  t.strictEqual(0, -0);\n  t.deepEqual(0, -0);\n  t.propEqual(0, -0);\n  t.sameValue(0, -0, \"sameValue\");\n  t.sameValueZero(0, -0);\n});\n\ntest(\"-0\", function(t) {\n  t.ok(_.isEqual(0, -0), \"lodash equals\");\n  t.equal(-0, -0);\n  t.strictEqual(-0, -0);\n  t.propEqual(-0, -0);\n  t.deepEqual(-0, -0);\n  t.sameValue(-0, -0);\n  t.sameValueZero(-0, -0);\n});\n\ntest(\"arrays\", function(t) {\n  t.ok(_.isEqual([1, 2], [1, 2]), \"lodash equals\");\n  t.equal([1, 2], [1, 2], \"equal\");\n  t.strictEqual([1, 2], [1, 2], \"strictEqual\");\n  t.propEqual([1, 2], [1, 2], \"propEqual\");\n  t.deepEqual([1, 2], [1, 2], \"deepEqual\");\n  t.sameValue([1, 2], [1, 2], \"sameValue\");\n  t.sameValueZero([1, 2], [1, 2], \"sameValueZero\");\n});", "createdAt": "2016-06-23T17:05:50Z", "updatedAt": "2017-04-03T20:44:27Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jdalton", "company": "Salesforce"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2016-06-23T17:11:08Z", "contents": "\ud83e\udd18", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-28T17:27:13Z", "contents": "@leobalter would the eventual goal here be to replace one or both of our current equality checks with these assertions? I'm concerned about overwhelming users with options that are very similar.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-28T17:40:04Z", "contents": "I want to approximate the API to the JS specs and test262. Maybe the\nsameValueZero (ignores Diff from -0 and 0) is not necessary, but I would\nlike to add sameValue anyway.\nI also have to admit I see them as good candidates for lodash as well.\nOne good argument for them is the lack of support for precisely comparing\nNaN and bit precision zeros on current QUnit's api as actual and expected\nvalues.\nTo check NaN values, the global isNaN is unreliable and Number.isNaN is\nES6+ and they mine the possibility of diffing results for failures.\nOn Tuesday, June 28, 2016, Trent Willis notifications@github.com wrote:\n\n@leobalter https://github.com/leobalter would the eventual goal here be\nto replace one or both of our current equality checks with these\nassertions? I'm concerned about overwhelming users with options that are\nvery similar.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n#1010 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AASYkfCZ6JldjjaTYv4u1IqmqrdeYTgHks5qQVlygaJpZM4I9B0H\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-28T18:58:48Z", "contents": "Okay, makes sense. I understood the logic for having them, but I wanted to clarify the long term goals", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1012, "url": "https://github.com/qunitjs/qunit/issues/1012", "title": "QUnit fails in IE 6, 7 and 8.", "contents": "qunitjs.com documents that the browser support is:\n\nIE6+ and Current - 1 for Chrome, Firefox, Safari and Opera.\n\nSo I am assuming that IE 6, 7 and 8 are supported.\n\nWhat happens is that once upgrading to QUnit 2.0.0 my tests for IE 6, 7 and 8 started failing in Sauce Labs:\n\nFailing PR: js-cookie/js-cookie#216\nFailing Build: https://travis-ci.org/js-cookie/js-cookie/builds/138708313#L1035-L1056\nThis is the code that exposes the test info for Sauce Labs: https://github.com/js-cookie/js-cookie/blob/cfa66f314a3d380083cf50ffe733234b6db7b331/test/utils.js#L7-L24\n\nIt will be pretty hard to track down the root cause of this issue, so I was wondering if anyone could shed some light on something obvious that might have changed between v1 and v2 that could have been breaking the unit tests in those browsers?\nThe code being tested is working, because it only fails once QUnit is upgraded and only in those specific IE browsers.\nAny ideas?", "createdAt": "2016-06-25T11:25:35Z", "updatedAt": "2016-06-26T00:36:44Z", "closedAt": "2016-06-26T00:36:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-25T15:41:18Z", "contents": "I believe that documentation is out of date. My understanding is that our 2.0 release was intended to support the same browsers as jQuery does which is IE 9+.\ncc @leobalter to confirm that is our browser policy now (I'll open a PR to fix if so).", "reactions_count": 1, "reactions_data": ["CONFUSED"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-25T18:31:28Z", "contents": "I sleeped on that part. Trent is right, the support for QUnit 2+ is the\nequivalent for minimal support on jQuery 3 and the current major version of\nEmber.\nThat means IE9+ only.\nI'm sorry for the miscommunication.\nOn Saturday, June 25, 2016, Trent Willis notifications@github.com wrote:\n\nI believe that documentation is out of date. My understanding is that our\n2.0 release was intended to support the same browsers as jQuery does\nhttps://jquery.com/browser-support/ which is IE 9+.\ncc @leobalter https://github.com/leobalter to confirm that is our\nbrowser policy now (I'll open a PR to fix if so).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n#1012 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AASYkQJoelwkQN15j7XUkt2AGsFZHFy0ks5qPUwfgaJpZM4I-U1C\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2016-06-26T00:36:44Z", "contents": "Thanks @leobalter \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1013, "url": "https://github.com/qunitjs/qunit/issues/1013", "title": "HTMLReporter: apply/reset buttons, in module dropdown, disappear when they shouldn't be", "contents": "QUnit version: 2.0.0\nSteps to reproduce:\nLet's say I have 3 modules: rules, messages and aria.\n\nSelect the module rules from the dropdown: the buttons apply/reset will appear (expected)\nSelect another module (messages for example): the buttons still appear (expected)\nUncheck the module rules: the buttons will disappear (unexpected)\n\nInstead they should appear because the dropdown is still dirty and I didn't commit my choices yet.\nSee attached screen cast:", "createdAt": "2016-06-26T01:34:19Z", "updatedAt": "2016-06-27T17:42:54Z", "closedAt": "2016-06-27T17:42:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "shivamdixit", "company": "Uber "}], "comments_count": 5, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-26T03:47:18Z", "contents": "Thanks for the report, I believe this is an issue with the dirty checking done here, but don't have much time to dig in further.\n@Arkni if you have time to investigate further and open a PR, it would be much appreciated!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-26T03:55:45Z", "contents": "@trentmwillis I'll pick this one. Can you assign it to me?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-26T05:31:02Z", "contents": "I believe this is an issue with the dirty checking done here,\n\nThat what I came across too when trying to dig into the source code.\n\n@Arkni if you have time to investigate further and open a PR\n\nIt looks like @shivamdixit already started digging into it and writing a fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shivamdixit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-26T05:45:50Z", "contents": "@Arkni PR shared :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-26T13:56:24Z", "contents": "Thanks @shivamdixit", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1015, "url": "https://github.com/qunitjs/qunit/issues/1015", "title": "Assert: \"throws\" removed signature (block, string, string) not in migration guide despite reference to migration guide in exception message", "contents": "Maybe this belongs on jquery/qunitjs.com, if so I can move it there.\nThe \"throws\" assertion throws an exception when given (block, string, string) arguments. It mentions the migration guide, but the migration guide does not contain information about this at all.", "createdAt": "2016-06-27T14:54:30Z", "updatedAt": "2016-06-27T15:20:45Z", "closedAt": "2016-06-27T15:20:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-27T15:09:18Z", "contents": "Yes, this is missing in the guide and we need to add this to qunitjs.com. Do you mind opening an issue there? We may close this one when everything is set.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-27T15:12:35Z", "contents": "@leobalter Thanks for the quick response. Do you believe there is anything to do in this repo? (I'm leaning towards no.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-27T15:15:45Z", "contents": "AFAIK, that was a change we predicted for 2.0, but as a signature change it is not much visible and I missed it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-27T15:20:45Z", "contents": "@leobalter Fair enough. I'm going to close this since I created the qunitjs.com issue-- please reopen if you believe a code change needs to be done here.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1016, "url": "https://github.com/qunitjs/qunit/issues/1016", "title": "before + beforeEach = hang of test", "contents": "QUnit.module('Sample tests', {\n  before: function() {\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        console.log('`before` complete');\n        resolve()\n      }, 200);\n    });\n  },\n  beforeEach: function() {\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        console.log('`beforeEach` complete');\n        resolve();\n      }, 100);\n    });\n  }\n});\n\nQUnit.test('Sample test', function(assert) {\n  console.log('Test started!');\n  assert.ok(true);\n});\n'Test started!' never appears to console. Qunit version is 0.2.0. Resolving through assert.async() and done produces the same problem.", "createdAt": "2016-06-29T11:41:25Z", "updatedAt": "2016-11-01T16:29:21Z", "closedAt": "2016-07-13T01:46:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vogdb", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vogdb", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "vogdb", "authorAssociation": "NONE", "createdAt": "2016-06-29T11:58:13Z", "contents": "Does not happen on 1.23.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-29T14:35:16Z", "contents": "@vogdb thanks for reporting, will look into it as I believe it has to do with some changes I made to handling async", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vogdb", "authorAssociation": "NONE", "createdAt": "2016-06-29T15:35:40Z", "contents": "Additional note. It worked on 1.23.1 cause before was never executed. It seems that there are no such hook as before.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1018, "url": "https://github.com/qunitjs/qunit/issues/1018", "title": "Never ending async test although `done` was called", "contents": "I guess that I am super unlucky. Test hangs and afterEach is never called. Bugs on 2.0.0. Works fine on 1.23.1.\nQUnit.module('Sample tests', {\n  beforeEach: function() {\n    console.log('`beforeEach` started');\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        console.log('`beforeEach` complete');\n        resolve();\n      }, 100);\n    });\n  },\n  afterEach: function() {\n    console.log('`afterEach` started');\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        console.log('`afterEach` complete');\n        resolve();\n      }, 100);\n    });\n  }\n});\n\nQUnit.test('Sample test', function(assert) {\n  console.log('Test started!');\n  //assert.expect(1);\n  var done = assert.async();\n  setTimeout(function(){\n    assert.ok(true);\n    console.log('Test finished!');\n    done();\n  }, 1000);\n});", "createdAt": "2016-06-29T18:00:40Z", "updatedAt": "2016-06-29T19:33:28Z", "closedAt": "2016-06-29T19:33:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vogdb", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vogdb", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-06-29T18:08:52Z", "contents": "bug confirmed, but I guess the cause might be the same as in #1016.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-06-29T19:33:28Z", "contents": "Can confirm that this is related. Marking as duplicate and closing. We can use the other issue to track, I'm working on a fix.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1019, "url": "https://github.com/qunitjs/qunit/issues/1019", "title": "Calling `done` after test has completed", "contents": "While working to integrate JsReporters into browserstack-runner, I got in some problems with tests that were including async operations, while each framework is treating this different.\nQunit provides async control through: async( [acceptCallCount ] ), Type: Number, acceptCallCount (default: 1)\nBut Qunit will fail a test only if the callback returned by assert.async() will be called synchronus more times than acceptCallCount.\nExample:\n// QUnit will report this test as failed\ntest('aa', function(assert) {\n  var done = assert.async();\n  assert.ok(true);\n  done();\n  done();\n});\n\n// QUnit will report this test as passed\ntest('aa', function(assert) {\n    var done = assert.async();\n    assert.ok(true);\n    done();\n    setTimeout(function() {\n      done();\n    }, 1000);\n});\nMocha would have failed both tests.\nJasmine would have report both tests as passed.\nThe difference between Mocha and QUnit is that Mocha emits the test twice, one time as passed, the other time as failed when the done callback is called the second time, on the other hand QUnit emits the test only one time.\nWe on the JsReporters would want to set a standard for this so I and also @jzaefferer have agreed that a single emit for the failure seems correct. But I don't know how it can be achieved. For the above example with the passing test (which theoretically should be failing), the done callback is called and Qunit thinks everything is ok, this test has passed, but it will not know if the done callback will be called a second time, it would have to wait for an indefinite period of time. If I set the timeout to be after 5 minutes, but after 10 minutes etc.\nWhat's your opinion about this? Do you agree that it should be a single emit ? Or do you find that how Mocha proceeds is right? Should we treat the above example like a bug in the test itself and QUnit should have nothing to do with it?", "createdAt": "2016-07-05T22:39:50Z", "updatedAt": "2017-04-09T03:37:03Z", "closedAt": "2017-04-07T16:50:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "flore77", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "flore77", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "jzaefferer", "company": null}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 12, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-07-08T17:55:09Z", "contents": "I think there's a case to be made that the QUnit single-emit approach is appropriate, but Mocha's multiple-emit is better IMHO (albeit more work to report and to process). But both should be considered acceptable, since as you point out the test itself is the real problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-13T02:00:42Z", "contents": "a single emit for the failure seems correct.\n\nI don't see how it would be possible to make a single-emit model catch the failure as you have no idea at what point a failure might occur (as you point out), could be an inordinate amount of time in the future.\nThat said, I don't think swallowing the error (like QUnit currently does) is good either as the feedback from the multi-emit strategy of Mocha provides the developer with more information about their test.\nSince the test is the real problem I tend to think  we don't necessarily need to change QUnit's behavior but I am also not against giving more information back to developers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "flore77", "authorAssociation": "NONE", "createdAt": "2016-07-13T19:56:50Z", "contents": "albeit more work to report and to process\n\nYes, indeed. Also I think to multiple-emit, maybe js-reporters should introduce a new event, especially for this case, because currently their exits only 2 events testStart and testEnd, and to mutiple-emit a test end twice seems a little bit confusing, in my opinion.\n\nI am also not against giving more information back to developers.\n\nI'm thinking that Jasmine does not provide any feedback, it does not care if the done callback is called multiple times and still it is used by a lot of people, so I am wondering how many people would gain something if we use a multi-emit strategy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-07-13T21:30:35Z", "contents": "A test with multiple done() calls like described above should be considered buggy by the test framework, and throw some kind of error to alert the developer to the bug. That said, I see no reason to accommodate that buggy behaviour in the reporter, e.g. with a special event.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-20T17:16:55Z", "contents": "Worth noting that I have attempted to use static analysis for the opposite problem (async call is not obviously resolved in the test) in a rule in my QUnit ESLint plugin. I could certainly try to extend the rule to flag the other cases.\nThat doesn't solve the immediate problem, but it might allow for a less \"user-friendly\" stance if we can say that there exists tooling to help catch these at other stages of the build process. (Although said tooling doesn't exist just yet, I suppose.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "flore77", "authorAssociation": "NONE", "createdAt": "2016-08-04T21:40:39Z", "contents": "I see no reason to accommodate that buggy behaviour in the reporter\n\nAgree.\nI wanted to make a point that maybe it is not worth to bother so much by failing tests if the done callback is called multiple times, like Jasmine does, maybe some other tools could do that, like @platinumazure pointed out in the above comment.\nAnyway at least the documentation should be updated that Qunit will fail a test only if the callback returned by assert.async() will be called synchronus more times than acceptCallCount.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-08-05T10:31:31Z", "contents": "I wanted to make a point that maybe it is not worth to bother so much by failing tests if the done callback is called multiple times, like Jasmine does\n\nThat shouldn't be a big deal for QUnit either. We have a mechanism in place to handle errors that are thrown outside of a running test. Calling an already resolved done() callback should have similar behaviour.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T17:20:23Z", "contents": "I just looked into this a bit myself, it looks like we do log a failing assertion, but it would be up to the reporter to know what to do with the failure and report it as such:\n\nI think revising this behavior to throw an actual error when called outside the associated test would be best, so that it is not up to the reporter to handle weird behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T18:28:50Z", "contents": "Sometimes I wonder if we gave too much responsibility to assert.async() setting a max number of calls.\nIf I could I would reuse it as a promise resolver and not setting some max amount.\nMaybe we can handle this with generators where every done call for var done = assert.async(); would call a next() and anything further than that would trigger an error.\nDrafting:\nfunction* gen(n = 1) {\n    yield* new Array(n - 1);\n}\n\nvar async = n => {\n\tvar iter = gen(n);\n    var completed;\n\t\n\treturn () => {\n\t\tif (completed) { throw Error('done called more than expected') }\n\t\tcompleted = iter.next().done;\n    };\n}\nExperimenting the draft:\nvar done = async();\n\ndone()\n\nvar test = false;\ntry {\n  done()\n} catch(e) {\n  test = true;\n} finally {\n  console.log('test 1:', test);\n}\n\nvar done = async(2);\n\ndone()\ndone()\n\ntest = false;\ntry {\n  done()\n} catch(e) {\n  test = true;\n} finally {\n  console.log('test 2:', test);\n}\n\nvar done = async(3);\n\ndone()\ndone()\ndone()\n\ntest = false;\ntry {\n  done()\n} catch(e) {\n  test = true;\n} finally {\n  console.log('test 3:', test);\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T18:33:24Z", "contents": "turns out there's no need to use a generator at all:\nvar async = (n = 1) => {\n\tvar arr = new Array(n);\n    var completed;\n\t\n\treturn () => {\n\t\tif (completed) { throw Error('done called more than expected') }\n\t\tarr.pop();\n\t\tcompleted = !arr.length;\n    };\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T19:07:22Z", "contents": "Here's me, without my daily coffee bikesheding in a useless thing.\nThe approach I suggested is already the one used for async, using a number value instead of an Array, because it's even better.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-06T18:28:53Z", "contents": "@leobalter seems like an interesting train of thought for the future, but tangential to the current issue I think.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1021, "url": "https://github.com/qunitjs/qunit/issues/1021", "title": "Does QUnit want to use ESLint?", "contents": "With ESLint and JSCS having joined forces and jQuery core starting to use ESLint, I'm wondering if this is something QUnit is also interested in doing. Was anyone planning to look into it?\nAlso, if ESLint is consumed here, I have an ESLint plugin eslint-plugin-qunit which might be useful to you folks.\nI'm happy to do a good amount of the grunt work to set things up if folks are interested in one or both of these propositions. Let me know.", "createdAt": "2016-07-10T05:15:17Z", "updatedAt": "2016-09-16T18:49:43Z", "closedAt": "2016-09-16T18:49:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 5, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}], "comments_count": 14, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-07-10T12:49:38Z", "contents": "I suppose https://github.com/jquery/eslint-config-jquery would be a good starting point.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-10T15:31:14Z", "contents": "Excellent, that's where I was thinking of starting. May I take this as an\nendorsement towards switching to ESLint?\nOn Jul 10, 2016 7:49 AM, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n\nI suppose https://github.com/jquery/eslint-config-jquery would be a good\nstarting point.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n#1021 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AARWeltVZw9ZYDney2vQXGdiIbVC1gQoks5qUOpngaJpZM4JIw-A\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-07-10T21:42:29Z", "contents": "Seems fine to me, but you should probably wait for confirmation from one of the more active team members.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-07-11T12:05:49Z", "contents": "Regardless of my personal preference, JSCS is not maintained anymore, so it's reasonable to move to ESLint.\nLet's do it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-11T14:13:49Z", "contents": "@leobalter If you want to wait for ESLint to get to 100% compatibility with JSCS, it certainly makes sense to do that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-07-11T14:45:30Z", "contents": "It is good to have everything consistent with jQuery's code style and the tools used across the other projects.\nJust a quick note: jquery/jquery@02c5e29\nWe should review our support list for NodeJS versions (we should keep a compatibility list that supports jQuery 3+) and maybe we might get stuck upgrading ESLint.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-11T16:57:43Z", "contents": "Overall I am in favor of this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-20T17:04:45Z", "contents": "@leobalter Any idea why jQuery is sticking to ESLint@2.x? Is it because of the Node 4+ support, or something else?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-07-30T12:44:01Z", "contents": "@platinumazure That was the reason but we've since switched to ESLint 3, we just skip linting in Node<4: https://github.com/jquery/jquery/blob/edf7a43/Gruntfile.js#L199-L200\nNote that jQuery Core will most likely stop supporting building on Node.js 0.10 in October 2016 and on Node 0.12 in January 2017, i.e. when the upstream support ends for those versions (we've already stopped running the build on Node 5 for the same reason).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-07-30T12:59:18Z", "contents": "Linting can be done in a single Node version, I'm +1 with that.\nTesting still need to target Node versions based on major tools using QUnit, dropping support will require a new major version. jQuery Core has plans to stop supporting old Node versions, but QUnit will need to confirm the same will be true with other projects as lodash, Backbone, Ember, etc.\nunfortunately, the test suite should be the last resort supporting legacy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-07-30T14:17:02Z", "contents": "jQuery Core has plans to stop supporting old Node versions\n\nTo be precise, that's only about dropping support for building jQuery in older Nodes, it has nothing to do with jQuery working with them which is both independent on the builder working AND not tested by us for a loooong time - our limited Node tests are run with jsdom which dropped support for Node 0.10 & 0.12 long ago.\nThat's why it's not such a big deal for us; QUnit has to think about Node more carefully.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-04T19:46:10Z", "contents": "My current status on this:\n\nI'd like to wait for the ES6/Babel work going on right now. That way I can choose to implement useful ES6 ESLint rules from the beginning, rather than implementing ES5-only rules now and then doing another pass with ES6 rules later.\nThis also dovetails with the fact that we seem to be a bit uncertain about dropping support (of any kind) from Node versions less than 4. So it wouldn't be a good idea to use ESLint (at least 3.x) until that is resolved.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-13T13:51:12Z", "contents": "I've submitted a WIP PR on this. I will incorporate feedback and make changes next week, when I have full Internet again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-06T00:48:04Z", "contents": "In case anyone is following this but not the PR: Got Travis config working (linting is only done on latest Node), so hopefully we can finish this up soon.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["category-release"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1022, "url": "https://github.com/qunitjs/qunit/issues/1022", "title": "Support running QUnit in a Web Worker", "contents": "I'm working on hacking a version of QUnit 2.0 to work in a WebWorker/ServiceWorker, but it would be nice to have official support for it.", "createdAt": "2016-07-14T09:34:19Z", "updatedAt": "2017-05-21T23:02:13Z", "closedAt": "2017-05-21T23:02:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "martndemus", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "martndemus", "company": "DockYard"}, {"login": "jzaefferer", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 7, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-07-14T09:36:42Z", "contents": "What's your usecase?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "martndemus", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-14T09:37:23Z", "contents": "@jzaefferer Unit testing code inside a WebWorker/ServiceWorker.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-07-14T09:38:36Z", "contents": "Yeah, I got that much from your initial ticket. Why do you need to unit test inside a WebWorker/ServiceWorker?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "martndemus", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-14T09:40:26Z", "contents": "So I can build a WebWorker/ServiceWorker using TDD.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-14T14:44:08Z", "contents": "What sort of tests would you like to perform that you can't test externally from the Worker? I imagine in most cases the Worker should have functionality initiated from the browser window and return some sort of response, in which case you shouldn't need to run QUnit in the Worker.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "martndemus", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-14T14:48:41Z", "contents": "I want to white box test complex worker code. Trying to black box test  workers does work, but it's like trying to test your application with only acceptance tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-16T17:53:11Z", "contents": "I tend to think most applications should be primarily tested via acceptance tests. Could you modularize the complex code and test it in Node (or something to that effect)?\nNote, I'm not opposed to supporting additional environments, just making sure there are compelling reasons to do so. What sort of changes do you think would need to happen in order for QUnit to support this? I imagine some sort of communication channel between Browser/Worker and ensuring QUnit doesn't rely on globals not available in the Worker.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1023, "url": "https://github.com/qunitjs/qunit/issues/1023", "title": "QUnit 2.0.0: Timeout when using promises in hooks", "contents": "Hi,\nThe following tests won't be executed:\n`\n((function(QUnit) {\nvar callbackOrder = [];\nQUnit.module(\"Check whether QUnit handles promises properly\", {\n    before: function(assert) {\n        return new Promise(function(resolve) {\n            callbackOrder.push(\"before\");\n            resolve();\n        });\n    },\n    beforeEach: function(assert) {\n        return new Promise(function(resolve) {\n            callbackOrder.push(\"beforeEach\");\n            resolve();\n        });\n    },\n    afterEach: function(assert) {\n        return new Promise(function(resolve) {\n            callbackOrder.push(\"afterEach\");\n            resolve();\n        });\n    },\n    after: function(assert) {\n        return new Promise(function(resolve) {\n            callbackOrder.push(\"after\");\n            resolve();\n        });\n    }\n});\n\nQUnit.test(\"Check QUnit callbacks in first test\", function(assert) {\n    return new Promise(function(resolve) {\n        assert.deepEqual(callbackOrder, [\"before\", \"beforeEach\"]);\n        resolve();\n    });\n});\n\nQUnit.test(\"Check QUnit callbacks in second test\", function(assert) {\n    return new Promise(function(resolve) {\n        assert.deepEqual(callbackOrder, [\"before\", \"beforeEach\", \"afterEach\", \"beforeEach\"]);\n        resolve();\n    });\n});\n\n})(QUnit));\n`\nI guess QUnit has a problem when dealing with multiple Promises.\nIt seems to work if only before or only beforeEach is used.\nThanks,\nThomas", "createdAt": "2016-07-20T15:04:14Z", "updatedAt": "2016-07-25T21:39:18Z", "closedAt": "2016-07-25T21:39:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tbiesemann", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tbiesemann", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-20T16:30:08Z", "contents": "Sounds like a duplicate of #1016. This has been fixed in master and we'll try to get a release out with it soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-25T21:39:18Z", "contents": "Should be fixed with the new release 2.0.1", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1024, "url": "https://github.com/qunitjs/qunit/issues/1024", "title": "Introduce CLI tool", "contents": "Lately, we've been doing a lot of work on the reporter interface for QUnit and I think that once we start shipping a standard TAP (or other) reporter, it'll lower the barrier to adoption of QUnit for non-browser projects (specifically thinking about Node projects).\nHowever, I think one thing that would complement that effort and make it trivial to use QUnit in those cases would be to introduce a command-line tool similar to what Mocha provides. In particular, this tool should make running QUnit tests in Node easy without having to provide a custom script.\nThere are some tools currently available (such as node-qunit or even mocha-qunit-ui), but it would be great to have one backed by the project that doesn't require additional overhead from the project maintainers.\nAs an aside: I would also very much like to see this happen so that we can unify the testing story in the Ember community, where most developers use QUnit in the browser for applications, but Mocha in node for build tools or other things.", "createdAt": "2016-07-26T02:27:00Z", "updatedAt": "2017-03-31T04:30:21Z", "closedAt": "2017-03-31T04:30:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "jzaefferer", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "platinumazure", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-07-26T09:53:22Z", "contents": "Based on previous conversations with @leobalter, I think he's very much on board with this. I like it in general as well. I'd like to make sure we get a full picture of everything involved though.\nA CLI tool needs:\n\nA CLI API to specify files to run, with some reasonable default (look up files in test/* or something)\nDirect support for file watching and rerunning tests, or good third-party integration, like nodemon\nMultiple reporters like tap, JUnit-style XML, whatever else there is\n\nI like how ember test --server does 1. and 2., while the reporters are rather bad (at least in ember-cli: 2.4.3), especially the failure output is hard to parse.\nSpeaking of ember, would ember-cli switch from testem to a native QUnit CLI?\nI'm sure I'm still missing a lot here...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-07-26T17:42:01Z", "contents": "I'd like to make sure we get a full picture of everything involved though.\n\nMost definitely. I think what you've outlined above is a solid candidate for a minimum viable product and what most users would expect. I'll try to put together something a bit more formal that outlines our expected API and usage behavior/constraints.\n\nWould ember-cli switch from testem to a native QUnit CLI?\n\nDoubtful as I imagine we won't want to support running/interfacing with browsers, something that Testem does well and is required for web apps. Rather, I imagine that you could set up QUnit as a \"launcher\" for Testem in the event that you have code that can be tested in Node (see here for an example for Mocha).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-08-01T11:56:56Z", "contents": "I'll try to put together something a bit more formal that outlines our expected API and usage behavior/constraints.\n\nSounds good. Maybe you could also do some research on existing modules that we can use?\nSomewhat related, do you see this as a separate qunit-cli module? Or would it be bundled with QUnit (aka qunitjs on npm)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-08-01T19:49:53Z", "contents": "Maybe you could also do some research on existing modules that we can use?\n\nWill do.\n\ndo you see this as a separate qunit-cli module? Or would it be bundled with QUnit?\n\nI'd prefer it be bundled with QUnit. We could potentially maintain it as a separate package if needed, but I think I'd like to see a state where developers can write and run their tests easily with one install.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-08-01T19:56:42Z", "contents": "I'm +1 to publish it bundled.\nOk to maintain as a separate package, but only if shows necessary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-01T20:27:01Z", "contents": "I can't imagine why we would need it separate-- don't we just need to write a cli.js file (name not important) and have the bin entry in package.json point to it? And then it could just pull in the core QUnit API.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-16T17:59:54Z", "contents": "Planning on starting work on this this week. Below is a brief outline of the proposed initial API broken up over several PRs:\nUsage: qunit [options] [files]\n\nFiles:\n\n  One or more glob expressions to match for test files to run\n\nOptions:\n\n  -h, --help                              output usage information\n  -V, --version                           output the version number\n\n  PR2:\n  -f, --filter <string>                   filter tests using <string>\n\n  PR3:\n  -r, --reporter <name>                   specify the reporter to use;\n                                          falls back to listing available reporters\n\n  PR4:\n  -w, --watch                             watch input files for changes\n\n  PR5:\n  --seed                                  specify a seed to order your tests; if option\n                                          is specified without a value, one will be generated\n\n\nEdits:\n\nReplace -R with -r for reporter option.\nRemove --reporters option to display available reporters\nAdd --seed option", "reactions_count": 5, "reactions_data": ["HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-18T23:16:30Z", "contents": "I like the api and it's great to split it in multiple parts.\nI have comments/suggestions in those extra parts:\nI believe the reporter part is more interesting than filters, we have only the api accepts a glob of files, this should be easily handled.\nagain, for reporters: why not -r (lowercase)? And if the reporter is not provided, or a wrong name is given, list the available options. --reporters doesn't feel intuitive, IMHO.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-19T01:40:28Z", "contents": "I believe the reporter part is more interesting than filters\n\nI agree, but adding the filter option should be super simple, since it is already supported by QUnit. We essentially just need to set QUnit.config.filter property with whatever argument is passed in.\n\nfor reporters: why not -r (lowercase)? And if the reporter is not provided, or a wrong name is given, list the available options. --reporters doesn't feel intuitive, IMHO.\n\nPrimarily mimicking Mocha's API. That said, I agree, we can adjust it for better discoverability.\nWill update the original comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-25T00:53:53Z", "contents": "Okay, all of the PRs for the initial feature set are now up and ready for review! Thanks to everyone who has helped review so far, it is greatly appreciated and I am super excited to ship this thing \ud83d\ude04 .\n\n#1115 - Introduce QUnit CLI\n#1122 - Support filtering tests\n#1123 - Support file watching\n#1126 - Support custom reporters\n#1127 - Support seeds", "reactions_count": 1, "reactions_data": ["HOORAY"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:28:52Z", "contents": "This came so fast and they are solved already! That's an amazing work!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1029, "url": "https://github.com/qunitjs/qunit/issues/1029", "title": "urlParams mishandles Object.prototype property collisions", "contents": "Object.prototype properties are treated as prior values when processing URL parameters of matching names: https://output.jsbin.com/venicolabe?toString=string", "createdAt": "2016-08-11T23:12:24Z", "updatedAt": "2016-08-12T22:34:28Z", "closedAt": "2016-08-12T22:34:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1031, "url": "https://github.com/qunitjs/qunit/issues/1031", "title": "QUnit 2.0 IE8 support", "contents": "Hey, I tried looking but didn't find a good definite answer about this. Does QUnit 2.0 drop IE8 support? We just tried updating to it on videojs and then noticed that the tests were failing.\nIt turned out the issue was an Object.defineProperty call that doesn't work on IE8.\nThanks.", "createdAt": "2016-08-13T03:18:45Z", "updatedAt": "2016-08-13T21:32:32Z", "closedAt": "2016-08-13T21:32:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gkatsev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gkatsev", "company": "Brightcove"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-08-13T21:25:53Z", "contents": "There's a note about browser compatibility on qunitjs.com:\n\nQUnit currently supports the same browsers as jQuery 3.x.\nFor legacy browser support, including Internet Explorer versions lower than IE9, please use the 1.x series of QUnit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gkatsev", "authorAssociation": "NONE", "createdAt": "2016-08-13T21:32:32Z", "contents": "Oh, thanks. I was looking for something like that; I guess I totally missed it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1032, "url": "https://github.com/qunitjs/qunit/issues/1032", "title": "Is there a good reason why logical expressions might be used in an assertion argument?", "contents": "Note: This is more a question about usage patterns and best practices, rather than a real issue on the repo-- if this should be moved elsewhere, let me know. QUnit's presence in the #jquerydev channel of freenode hasn't been very strong (or I've logged on at bad times), and I'm not sure where else to go.\nThe basic question is, is it ever a good practice to have assertions involving semi-complex expressions (like a logical expression)?\nNote: This is more about linting rather than correct usage of QUnit.\nPossible examples:\n// 1. Unsure if object exists at this point\nassert.ok(obj && obj.someProp, \"someProp exists and is truthy\");\n\n// 1a. Could separate into multiple assertions\nassert.ok(obj, \"obj exists\");\nassert.ok(obj.someProp, \"someProp exists and is truthy\");\n\n// 2. One property or another should exist\nassert.ok(obj.someProp || obj.anotherProp, \"someProp or anotherProp exists\");\n\n// 2a. But this suggests a possible non-deterministic test, not a great unit test\nIs there any legitimate use case I'm not thinking of?", "createdAt": "2016-08-16T19:13:17Z", "updatedAt": "2016-08-19T02:32:05Z", "closedAt": "2016-08-19T02:31:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-08-16T19:33:23Z", "contents": "the assertion function will only receive the result of the given expressions, it can't see the expression itself.\nTo be honest, case 1a seems like the appropriate testing for me.\nThe case 2 seems too loose to make an actual case. What is the real value to assert an object as one property or another with a true-like value? One should look for more precise way to assert a valid information you need there. That might involve some API refactoring and that's where a TDD process does a great job.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-16T19:37:00Z", "contents": "@leobalter I'm aware of the expression being evaluated before being passed to the assert function. The question is whether it might be worthwhile to lint against those expressions.\nWhen you say case 1a is appropriate, does that mean you agree that it is better than 1?\nAnd yeah, I agree that case 2 is loose. That's sort of the point I'm trying to make here.\nBackground on why I am asking: I'm trying to see if this issue is worth implementing in my ESLint plugin for QUnit practices. At this point, I haven't yet been dissuaded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-08-16T20:11:26Z", "contents": "The question is whether it might be worthwhile to lint against those expressions.\n\nOh, I see. Now I understand this question connects to linting.\nI understand some expressions may still be used within the .ok, but maybe a ESLint option to advise against Binary Logical Operators inside assertions would be fine.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-16T20:31:27Z", "contents": "Thanks! I'll leave this open just for a day in case anyone else wants to weigh in, then I'll close, if that's okay with you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-08-17T09:17:40Z", "contents": "I don't have anything to add to the discussion, except agreeing with the outcome. But wanted to add that the eslint-plugin-qunit project looks great! Should get that listed on http://qunitjs.com/plugins/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-17T12:26:48Z", "contents": "Thanks @jzaefferer, I believe it's already there!\nOn Aug 17, 2016 4:17 AM, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n\nI don't have anything to add to the discussion, except agreeing with the\noutcome. But wanted to add that the eslint-plugin-qunit project looks\ngreat! Should get that listed on http://qunitjs.com/plugins/\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n#1032 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARWekrfUi0xw-_XhPFi4OvLbm8PVm0mks5qgtG1gaJpZM4JlwCU\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1034, "url": "https://github.com/qunitjs/qunit/issues/1034", "title": "Remove jsDump", "contents": "This is a long way off, but I wanted to open an issue to make sure we remember to remove QUnit.jsDump in 3.0 (we forgot it in 2.0).\nReference code.", "createdAt": "2016-08-24T02:21:48Z", "updatedAt": "2016-09-24T17:10:19Z", "closedAt": "2016-09-24T17:08:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "jzaefferer", "company": null}, {"login": "kumarmj", "company": "@Cogoport "}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 13, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-08-24T09:04:30Z", "contents": "Why not remove it in a another 2.x release? At least with explicit error handling? It was deprecated a long time ago and its in the 2.x upgrade guide: http://qunitjs.com/upgrade-guide-2.x/#replace-qunit-jsdump-with-qunit-dump", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-08-28T19:38:18Z", "contents": "I suppose we could consider this a bugfix (since it was supposed to be removed in 2.0.0) and just release it in the next patch version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kumarmj", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-01T12:57:00Z", "contents": "Hello, I will love to work on this issue, this will be my first contribution in qunit. I think it is just removing one line code, please guide me if I understood anything wrong -\n\n Remove line QUnit.jsDump = dump from core.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-01T13:58:29Z", "contents": "@nithmanoj Thanks for volunteering, we would love for you to contribute to QUnit! I just think we should get consensus on how best to handle this.\n@jquery/qunit Okay folks, let's get consensus on this. Here are the open questions as I see them:\n\n Should we add an error message that can tell the user they should stop using QUnit.jsDump?\n Should we aim to put this in 3.0 or in a minor release (presumably the latter is only feasible if we add the error message)?\n\nMy vote is let's remove it, let's add an error message, and let's put it in a minor since folks already should have known it was going away. (Normally I'd say patch since it could be regarded as a bugfix, but adding an error message means enhancing functionality IMO, so I favor a minor release here.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-09-01T14:08:38Z", "contents": "\ud83d\udc4d  to replacing the alias with a function that throws an explicit error, as part of the next minor release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kumarmj", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-01T16:12:18Z", "contents": "@platinumazure Thanks for such a great response, sir please review this checklist -\n\n Change QUnit.jsDump to function that throws error warning Use QUnit.Dump instead of QUnit.jsDump\n\nplease recommend your views for warning message to be thrown.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-01T16:33:39Z", "contents": "Note dump and jsDump are Objects and not functions: https://github.com/jquery/qunit/blob/master/src/dump.js#L57\nThus in order to deprecate it will likely need to be a getter, instead of a function call. Such as we do here: https://github.com/jquery/qunit/blob/e2b38da0be2ab4dc6fe548910fe5f71c55321f95/src/export.js#L41-L46", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "kumarmj", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-02T00:50:24Z", "contents": "That was my wrong, @trentmwillis thanks for guiding me. Since jsDump is an object, what I guess QUnit.reset was a function,  do we need Object.defineProperties to error message for every property of dump.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-02T00:53:07Z", "contents": "@nithmanoj I think just putting a getter for jsDump should be sufficient, since we want to blacklist the entire object. @trentmwillis Sound okay?\nObject.defineProperty(QUnit, \"jsDump\", {\n    get: function () { throw new Error(/* ... */); }\n});", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-06T15:51:26Z", "contents": "@trentmwillis Should we move this out of the v3.0 milestone if we've agreed to put this in as a semver-minor change?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-06T16:57:52Z", "contents": "@platinumazure yep, removed it. I think the plan here is to release as a patch with the deprecation and then remove all together in 2.1, since the other errors are being removed then as well I believe. @leobalter can confirm/deny that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-09-06T19:00:40Z", "contents": "confirming \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-24T17:10:19Z", "contents": "Fixed via #1036!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1037, "url": "https://github.com/qunitjs/qunit/issues/1037", "title": "before/after hooks run only for first test in module", "contents": "I'm running into an issue with before/after hooks using QUnit 2.0.1. Here's the sample module setup I'm working with:\nQUnit.module(\"Sample module\", function(hooks) {\n    hooks.before(function(assert) {\n        console.log(\"Before\");\n    });\n\n    hooks.after(function(assert) {\n        console.log(\"After\");\n    });\n\n    QUnit.test(\"Test A\", function(assert) {\n        assert.expect(0);\n        console.log(\"Test A ran\");\n    });\n\n    QUnit.test(\"Test B\", function(assert) {\n        assert.expect(0);\n        console.log(\"Test B ran\");\n    });\n\n    QUnit.test(\"Test C\", function(assert) {\n        assert.expect(0);\n        console.log(\"Test C ran\");\n    });\n});\nand the resultant console output I'm seeing is:\nBefore\nTest A ran\nAfter\nTest B ran\nTest C ran\n\nWhen I expect to see this:\nBefore\nTest A ran\nTest B ran\nTest C ran\nAfter\n\nI'm roughly following the guidance in the last sample (\"Hooks stack on nested modules\") on this page, but substituting before/after for beforeEach/afterEach and without a nested module: https://api.qunitjs.com/QUnit.module/.\nWhen debugging into qunit.js a bit, I noticed when a hook is run and it checks to see if the module test count matches the number of module tests run, that the number of tests registered for the module isn't accurate (it's 1, \"Test A\", but \"Test B\" and \"Test C\" aren't registered).\nThoughts on what could be going wrong? Happy to provide more info about my setup if desired, and thanks in advance for any help!", "createdAt": "2016-09-02T21:57:52Z", "updatedAt": "2017-01-13T15:43:16Z", "closedAt": "2016-09-06T21:54:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brendyna", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "brendyna", "company": "Microsoft"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "platinumazure", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-09-06T13:27:59Z", "contents": "can you provide more details on your environment?\nhttp://jsbin.com/tufiluzope/edit?js,output\nI'm trying to reproduce this bug but I'm getting the expected result", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brendyna", "authorAssociation": "NONE", "createdAt": "2016-09-06T21:12:04Z", "contents": "Thanks, @leobalter, for the quick reply! A few more bullets about my setup:\n\nI'm using QUnit + RequireJS\nThere are nested modules (e.g. parent module is \"Static content\" and child module is \"Side bar\"); I'd like the hooks applied in the parent context and reused for each child module and its child tests)\nAll child tests within a parent module act on a shared global widget bound to the #qunit-fixture element which is setup in the before hook and torn down in the after hook\n-- Understood that tests should be atomic, but in this case the setup/teardown cost for what I'm testing is larger so for performance reasons, I want to set it up once and tear it down once.\n\nI'm guessing I'm running into AMD weirdness or global state weirdness, or a combination of the two (which is to say, not a QUnit issue after all, but an issue w/the complexity of my setup).\nAny hints you can provide would still be appreciated if my setup sounds like one you have experience with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-06T21:18:23Z", "contents": "@brendyna Could you please create a JSBin (or equivalent) which reproduces your issue with minimal code? (Make sure you use RequireJS, to more closely match your setup.) Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brendyna", "authorAssociation": "NONE", "createdAt": "2016-09-06T21:31:29Z", "contents": "@platinumazure sure, I'll need a bit of time for that. I'm playing around with things and will report back with what I find.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brendyna", "authorAssociation": "NONE", "createdAt": "2016-09-06T21:53:59Z", "contents": "@platinumazure, @leobalter we can close this issue. After further playing around, the issues were on my side (before/after are running correctly now that I've solved issues w/global state and RequireJS).\nSorry to waste your time!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-09-06T21:57:12Z", "contents": "It is never a waste of time. I'm glad you figured it out and it would be awesome if you could share it here so we can avoid it next time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brendyna", "authorAssociation": "NONE", "createdAt": "2016-09-07T18:18:59Z", "contents": "I'm thinking this was caused by a series of (potentially embarrassing :) misconfigurations/mistakes on my part, but happy to share in case someone else ends up in this situation.\nI'm still not 100% sure what the root issue is, or if there's something QUnit could do, but here are the setups that did/didn't work to help with repro'ing what I'm seeing. My inkling is it's a race condition of standard loading vs. RequireJS loading, but again I'm not sure as I haven't dug into network traces and such. FYI, I'm using these technologies:\n\nRequireJS\nQUnit\nJQuery\nTypeScript (as an FYI; shouldn't impact this situation, AFAIK)\n\nSetup that DOESN'T work\nThe most important things about this setup to note:\n\nQUnit is included via a manual script tag, whereas JQuery is loaded via RequireJS\nI have the QUnit tests wrapped in the document.ready JQuery shortcut (so the tests will run once JQuery loads)\n\nHere's the JSBin: http://jsbin.com/haduha/edit?html,js,console\nSetup that DOES work\nThe most important things to note about this setup:\n\nQUnit is now loaded via RequireJS\nI have to explicitly call QUnit.start() to run the tests\nThis setup works regardless of whether I have the tests wrapped in the JQuery document.ready shortcut\n\nHere's the JSBin: http://jsbin.com/purude/edit?html,js,console", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1038, "url": "https://github.com/qunitjs/qunit/issues/1038", "title": "QUnit.start in tests and module hooks?", "contents": "Hi folks. Just want to confirm, is QUnit.start() expected to throw not only in tests but also in module hooks? (My understanding is that config.current should be valued in those cases as well.)\nI know I can test this myself to get an idea of actual behavior, but I'm also trying to confirm what the expected/supported behavior is intended to be. It will help me make a decision on my eslint-plugin-qunit with regard to how QUnit.start() calls should be linted.", "createdAt": "2016-09-06T16:57:00Z", "updatedAt": "2016-09-06T18:01:16Z", "closedAt": "2016-09-06T18:01:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-06T17:59:49Z", "contents": "I believe it should throw inside the module hooks as well, since that would be considered part of the test context.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-06T18:01:04Z", "contents": "Excellent, that's all I need for my ESLint plugin question. I will assume that QUnit.start within a test or a module hook should be treated as a lint error (and everything else will have to get benefit of doubt). I can verify the behavior on my own later.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1039, "url": "https://github.com/qunitjs/qunit/issues/1039", "title": "QUnit crashes if promise is rejected without arguments", "contents": "In case of a failing test when a promise gets rejected, QUnit crashes internally with a  null reference.\nThis can be reproduced using this snippet:\n    QUnit.test(\"QUnit shall handle failing tests properly\", function(assert) {\n        var resolve = function(){};\n        var reject = function(){};\n        var promise = new Promise(function(_resolve, _reject) {\n            reject = _reject;\n        });\n        reject(undefined);\n        return promise;\n    });\nThe crash happens here:\n    resolvePromise: function( promise, phase ) {\n        var then, resume, message,\n            test = this;\n        if ( promise != null ) {\n            then = promise.then;\n            if ( QUnit.objectType( then ) === \"function\" ) {\n                resume = internalStop( test );\n                then.call(\n                    promise,\n                    function() { resume(); },\n                    function( error ) {\n                        message = \"Promise rejected \" +\n                            ( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n                            \" \" + test.testName + \": \" + ( error.message || error );\n                        test.pushFailure( message, extractStacktrace( error, 0 ) );\n                        // Else next test will carry the responsibility\n                        saveGlobal();\n                        // Unblock\n                        resume();\n                    }\n                );\n            }\n        }\n    },\nThe error object is undefined, hence error.message will fail.\nBest, Thomas", "createdAt": "2016-09-15T07:21:36Z", "updatedAt": "2016-09-17T17:05:23Z", "closedAt": "2016-09-17T17:04:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tbiesemann", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tbiesemann", "company": null}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-15T14:40:03Z", "contents": "I'll investigate this weekend, unless someone beats me to it. Thanks for the report!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T22:03:19Z", "contents": "@tbiesemann I've edited the original post to preserve your whitespace and code formatting a little better-- hope that's okay! In future, you can just use three backticks and a language identifier (\"js\" for JavaScript) and then your spacing is preserved. Thanks again for the report and hopefully I'll get a chance to take a look soon!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-17T17:05:22Z", "contents": "Fixed via #1041.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1044, "url": "https://github.com/qunitjs/qunit/issues/1044", "title": "Improve moduleStart and moduleDone behavior in nested modules", "contents": "As discussed in #1043, moduleDone should only fire after the entirety of a module has finished, including it's child modules. Additionally, moduleStart should only fire once when the first test of the module is about to begin.", "createdAt": "2016-09-20T03:26:35Z", "updatedAt": "2016-09-23T19:10:54Z", "closedAt": "2016-09-23T19:10:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 1, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-09-23T19:10:53Z", "contents": "fixed by gh-1047", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1048, "url": "https://github.com/qunitjs/qunit/issues/1048", "title": "PhantomJS is blocking tests to run", "contents": "Running \"qunit:qunit\" (qunit) task\n    Testing test/index.html\n    PhantomJS threw an error:ERROR\n    >> 0 [ '' ]\n    Warning: PhantomJS exited unexpectedly with exit code null. Use --force to continue.\n\n    Aborted due to warnings.\n\nI have no idea what is causing this, some sort of ERROR is happening there where I can't reproduce in a browser test.\nI guess it's due to my recent installed Mac OS Sierra.\nIt works on Ubuntu.", "createdAt": "2016-09-23T22:11:02Z", "updatedAt": "2019-03-15T17:33:09Z", "closedAt": "2016-12-09T15:53:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "platinumazure", "company": null}, {"login": "alexweissman", "company": "Bloomington Tutors"}, {"login": "infolock", "company": null}], "comments_count": 17, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-10-08T05:19:31Z", "contents": "@leobalter did this ever resolve? Planning to update my Mac tomorrow, so I'll see if I can reproduce if you're still having issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-10-08T12:31:26Z", "contents": "I'm using my home mac for QUnit. I believe we will need to update the grunt Istanbul task by ourselves if want to fix it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-11-02T22:57:13Z", "contents": "I'm seeing the same, also in the Migrate repo.\nThe problem is that the task is defined in the grunt-qunit-istanbul fork of the upstream grunt-contrib-qunit and the fork doesn't seem to be maintained anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-11-02T22:59:37Z", "contents": "The grunt-qunit-istanbul fork is also blocking us from upgrading Grunt to version 1.x.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-11-02T23:01:32Z", "contents": "...and it still relies on PhantomJS 1 while the upstream repo switched to version 2.\nIf the Istanbul stuff still can't be done without hacking the upstream qunit task we may need to maintain the fork ourselves.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-11-12T20:06:39Z", "contents": "I looked into this and it was a bear to figure out what was going on. But I have two PRs now that should enable us to move to Grunt 1.x and run on latest Mac OS:\n\nasciidisco/grunt-lib-phantomjs-istanbul#11\nasciidisco/grunt-qunit-istanbul#60", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T04:07:56Z", "contents": "This issue is almost solved. Our current problem right now is to figure out a way to have code coverage and not being stuck on PhantomJS' race conditions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-12-07T04:42:55Z", "contents": "If we had an lcov reporter, could we use Istanbul?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T04:56:27Z", "contents": "I believe a lot of the complexity in this area could be reduced if we had a separate task to build an instrumented version of QUnit and test against it. The previous tooling tries to do a request-time replacement of the built code which is where the race conditions are coming in.\nOnce we have CI green, I'll look into a simple approach for this using Istanbul.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T05:02:29Z", "contents": "If we had an lcov reporter, could we use Istanbul?\n\nThe complex part is getting the instrumented files.\nI believe the approach suggested by @trentmwillis is going to be cleaner than what we've had before. Hopefully it will allow us to check coverage on Node too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T21:41:49Z", "contents": "I worked on this a bit last night. I have code coverage working for Node tests and believe I can get the browser ones working with only a little more infrastructure. We may want to take the outcome of this work and revamp how grunt-qunit-istanbul works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-08T07:19:58Z", "contents": "Continuing to dig into this. I think I understand the problem space now. I think grunt-qunit-istanbul and grunt-phantomjs-istanbul were born out of the core grunt-lib-phantomjs and grunt-contrib-qunit libraries not being easily extensible.\nI've opened one PR against grunt-contrib-qunit that should allow us to do code coverage within our own repo with relatively minimal setup: gruntjs/grunt-contrib-qunit#135", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexweissman", "authorAssociation": "NONE", "createdAt": "2017-09-23T21:44:13Z", "contents": "@trentmwillis were you able to find a workaround for this?  I've inherited a codebase with a legacy Gruntfile.js and testing system, which is generating this error when I try to run the qunit tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-09-25T20:23:05Z", "contents": "@alexweissman yes, but I don't remember what it was. Your best bet at this point would be to look through the code to see how we have stuff set up.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexweissman", "authorAssociation": "NONE", "createdAt": "2017-09-26T00:21:27Z", "contents": "Thanks!  I was in chat and someone suggested that PhantomJS might be outdated/obsolete anyway:\n\nYou might want to try using Karma to run the tests in a real browser (e.g. Chrome or Firefox). grunt-contrib-qunit and PhantomJS are fairly old and might not give a realistic result for end-users.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-09-29T01:26:42Z", "contents": "Yes, I agree with that. FWIW, in my projects, I tend to use Testem + QUnit these days. Easy to get set up and running.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infolock", "authorAssociation": "NONE", "createdAt": "2019-03-15T17:32:30Z", "contents": "I hope I don't get too much backlash here but it should be something that is noted for any other poor (future) souls who happen to inherit a legacy build that is running into this issue.\nIf you are (un?)lucky enough to be on a project that may have a dependency on grunt-contrib-qunit: ~0.7.0 - the way I was able to fix this was by just changing the dependency to ~1.0.0 - which is where the fix for the above was implemented (they stopped support of 0.7.0 and just went straight to 1).\nsorry for bumping this old ass issue.  just wanted to add this note here (for my own sanity as well one day...)", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "HOORAY"]}], "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1054, "url": "https://github.com/qunitjs/qunit/issues/1054", "title": "Investigate clearing of sessionStorage", "contents": "It appears that sessionStorage clearing may be busted per #1042 (comment). We should investigate and try to add a regression test if possible.", "createdAt": "2016-09-27T02:23:33Z", "updatedAt": "2016-11-13T21:35:33Z", "closedAt": "2016-11-13T21:35:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 1, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-09-29T03:52:40Z", "contents": "I don't want to add a regression test until after we implement QUnit.config.storage, when it will be far easier. Should we land a fix first, though?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1056, "url": "https://github.com/qunitjs/qunit/issues/1056", "title": "assert.deepEqual throws TypeError when comparing Symbols", "contents": "When a comparison between arrays containing Symbols fails, rather than printing an error message the assert.deepEqual function throws a type error.\n  QUnit.test('`a test`', assert => {\n    assert.expect(1);\n\n    assert.deepEqual([Symbol('mySymbol')], [5]);\n  });\n\nResults in the following output\n FAIL - `a test`\nC:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\qunit-extras.js:471\n            'Actual: ' + String(entry.actual)\n                         ^\n\nTypeError: Cannot convert a Symbol value to a string\n    at Array.toString (native)\n    at Array.<anonymous> (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\qunit-extras.js:471:26)\n    at runLoggingCallbacks (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\node_modules\\qunitjs\\qunit\\qunit.js:291:17)\n    at Object.Test.finish (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\node_modules\\qunitjs\\qunit\\qunit.js:822:3)\n    at Object.<anonymous> (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\qunit-extras.js:340:18)\n    at Object.<anonymous> (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\qunit-extras.js:219:22)\n    at Object.<anonymous> (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\qunit-extras.js:412:16)\n    at Object.finish (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\qunit-extras.js:219:22)\n    at C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\node_modules\\qunitjs\\qunit\\qunit.js:885:11\n    at process (C:\\Users\\Harry\\WebstormProjects\\IteratorUtil\\node_modules\\qunit-extras\\node_modules\\qunitjs\\qunit\\qunit.js:550:24)\nThis is because string concatenation with Symbols fails:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString#No_string_concatenation\nI believe that somewhere [Symbol('mySymbol')].toString() is called which throws the error.", "createdAt": "2016-10-02T15:48:39Z", "updatedAt": "2016-10-03T10:05:00Z", "closedAt": "2016-10-03T10:05:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "harrysarson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "harrysarson", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-10-02T18:32:00Z", "contents": "@harrysarson can you provide a failing test as either a PR or in a JSBin? Based on the stack trace above, it seems like this issue is actually in the qunit-extras plugin you seem to be using, so I'd like to verify if there is any behavior actually broken on our side.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "harrysarson", "authorAssociation": "NONE", "createdAt": "2016-10-02T19:01:03Z", "contents": "@trentmwillis ah it could well be a problem with qunit-extras, can I check tomorrow and get back to you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "harrysarson", "authorAssociation": "NONE", "createdAt": "2016-10-03T10:05:00Z", "contents": "@trentmwillis Yes you are right, its and issue with qunit-extras.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1059, "url": "https://github.com/qunitjs/qunit/issues/1059", "title": "feature: Make it possible to load QUnit after domReady", "contents": "I am using QUnit together with OpenUI5\nUI5 comes with its own amd syntax similar to require.js.\nIt would be nice to be able to load QUnit asynchronously to provide a test environment from the framework side.\nHow i would imagine it is that you could define a global QUnit config before QUnit itself is loaded\nwindow.QUnit = { config: { autostart: false } };\nWhen QUnit is loaded, it takes this config and extends it with the needed defaults. Here is a full jsbin outlining the problem\nIf you like the idea i would create a pull request for it. I just wanted to discuss it upfront.", "createdAt": "2016-10-07T14:31:21Z", "updatedAt": "2016-12-04T22:12:53Z", "closedAt": "2016-12-04T22:12:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TobiasOetzel", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "TobiasOetzel", "company": "SAP"}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-07T15:00:28Z", "contents": "@TobiasOetzel I use QUnit with RequireJS at my workplace, and we're able to stop the test runner from executing prematurely with this code:\nQUnit.config.autostart = false;\n\nrequire(['path/to/tests'], function () {\n    QUnit.start();\n});\nIn your JSBin, I do see the test being executed. Can you please explain the exact issue? Is the test starting too soon?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-10-07T15:25:26Z", "contents": "Didn't dig into the example at this moment, but want to mention that this sounds similar to a suggestion brought up in jonkemp/qunit-phantomjs-runner#11 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TobiasOetzel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-07T21:42:03Z", "contents": "@platinumazure\nYes there is extra code for amd syntax in QUnit setting autostart to another default. That would be a trick to define the ducktype before loading QUnit.\n@trentmwillis Yes this looks exactly like the issue you pointed to. How is the state of the discussion? I saw some extra phantomJS code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-10-08T05:15:24Z", "contents": "No movement really, left off with needing to define an API for it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1061, "url": "https://github.com/qunitjs/qunit/issues/1061", "title": "Should we extract src/core/onerror.js core logic to be independent of browser?", "contents": "Can we extract the core logic of src/core/onerror into a module, and then change the HTML reporter (or other browser-specific orchestration code) to expose a wrapper of that code as window.onerror?\nThis would allow me to use that same logic pretty easily in similar-but-not-quite-equivalent scenarios, such as require.onError when using RequireJS.\nAs a bonus, this may prevent the need for #1051 (at least for me). Or, at the very least, it will allow us to have a purer API there (right now I'm trying to solve a few different problems with that PR).", "createdAt": "2016-10-14T19:18:48Z", "updatedAt": "2017-03-11T05:48:03Z", "closedAt": "2017-03-11T05:48:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-17T23:11:46Z", "contents": "Ping @Krinkle @JamesMGreene, since both of you inspired me to look in this direction.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-10-19T09:55:21Z", "contents": "Should also probably roll in handling process.on( 'uncaughtException', function( err ) { ... } ); when running on Node.js, and any other CommonJS/Rhino/Nashorn error handling as makes sense.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2016-10-19T09:58:06Z", "contents": "Our current window.onerror handler also does not attempt to utilize the modern signature, which provides 5 arguments (the last being the actual Error object).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-10-19T12:30:52Z", "contents": "I'm +1 to seek a solution using process.on( 'uncaughtException', ... and a modern event listener to replace window.onerror, addEventListener is a valid option after QUnit 2", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-11T05:48:03Z", "contents": "Fixed by baff17d.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1062, "url": "https://github.com/qunitjs/qunit/issues/1062", "title": "catch TypeError in sync call", "contents": "I have tests in two files, one file\nQUnit.test( \"Test 1\", function( assert ) {\n\n    var obj = undefined;\n    var doneFun = assert.async();\n    setTimeout(function(){\n        assert.equal('hell', obj.hell, 'Hello');\n        doneFun();\n    },100) });\nand the other is\nQUnit.test( \"Test 2\", function( assert ) {\n    var doneFun = assert.async();\n    setTimeout(function(){\n        assert.equal('hell', 'hell','hello');\n        doneFun();\n    },500); });\nwhen I run both together I got\n        assert.equal('hell', obj.hell, 'Hello');\n                                ^\n\nTypeError: Cannot read property 'hell' of undefined\n    at null._onTimeout (/home/foysal/workspace/qa/qa-test-framework/source/tests/mytest.js:12:30)\n    at Timer.listOnTimeout (timers.js:92:15)\n\nwant to catch any TypeError in async test.\nI am running in nodejs.\nHelp is very much appreciated", "createdAt": "2016-10-17T20:54:13Z", "updatedAt": "2016-12-16T23:33:05Z", "closedAt": "2016-12-16T23:33:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ffoysal", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ffoysal", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-10-17T22:48:32Z", "contents": "Help is very much appreciated\n\nLikewise, always.\nIt's interesting this bug happens on the git version, but the current released version still catches the error: http://jsbin.com/jevutajuni/edit?html,js,console,output (using QUnit 2.0.1)\n\nThe current git version from the master branch is not catching the exception:\n\n\nI'll run a git bisect to find this bug and fix it. Thanks for the report.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-10-17T22:58:35Z", "contents": "oh, this is an uncaught bug from 80a14ee (PR #1025).\nNow it's time to figure out how to fix it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-10-17T23:05:24Z", "contents": "I am running in nodejs.\n\nOk, that's another issue we need to address. 2 bugs in 1 issue. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-16T23:33:05Z", "contents": "Closing this as the behavior shown by @leobalter is fixed in 2.1.0 and on the current master branch (either due to #1063 or as a side-effect of something else).\nAs for catching uncaught exceptions, as I believe is the original request, you can define your own window.onerror handler in the Browser or your own process.on('uncaughtException') handler in Node. While we need to add a solution for uncaught errors in Node by default, that should be tracked in #1061.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1064, "url": "https://github.com/qunitjs/qunit/issues/1064", "title": "Reordering should not cause a module's tests to be split before/after other modules", "contents": "Please bear with me a moment for an explanation - there's a good chance you won't agree with me initially, and I have a sliding scale of thoughts on what could be done with my experience.\nTo start, as demonstration, suppose I have a suite that acts like the following:\nvar globalFlag = false;\nQUnit.module('A: should never fail anything, but can cleanup global things', {\n    after : function () {\n        globalFlag = true;\n    }\n});\nQUnit.test('always passes', function (assert) {\n    assert.ok(true);\n});\n\nQUnit.module('B: should I have one fail, or two?');\nQUnit.test('fail if globalFlag is true', function (assert) {\n    assert.notOk(globalFlag);\n});\nQUnit.test('fail if globalFlag is true, or just because', function (assert) {\n    assert.notOk(globalFlag);\n    assert.ok(false);\n});\n\nAfter running the tests in my browser, and refreshing once or twice, I see the following pattern; on one refresh, 1 failure, on my next refresh, 2 failures:\n\"Module interrupted\" scenario - two failures\nB's \"before\"\n*** B: should I have one fail, or two? *** Test : fail if globalFlag is true, or just because\n*** A: should never fail anything, but can cleanup global things *** Test : always passes\n*** B: should I have one fail, or two? *** Test : fail if globalFlag is true\nB's \"after\"\n\n\"Module uninterrupted\" scenario - one failure\nB's \"before\"\n*** B: should I have one fail, or two? *** Test : fail if globalFlag is true\n*** B: should I have one fail, or two? *** Test : fail if globalFlag is true, or just because\nB's \"after\"\n*** A: should never fail anything, but can cleanup global things *** Test : always passes\n\nSo, why do I consider this an issue?\nI accidentally got myself into a situation that acted like the above yesterday.  In practice, I was unit testing a jQuery widget, and giving the QUnit 2 - style API with before/after a try for the first time.  Historically, our tests using the jQ widget create a widget on #qunit-fixture in beforeEach, and tear it down in afterEach.\nThis is a little inefficient, taking some 20-50milliseconds, so I wanted to try out a new way.  I wanted to create the widget in before, reuse it for each test by performing much cheaper clearAll-type methods in afterEach, then finally tear it down in after.\nI was successful in this, but then as I was putting together a new test, before the test was good, it failed all the time.  I was very confused when more than just this test failed, though.  It was because other modules were jutting in, trying to create a widget on #qunit-fixture, actually getting the existing instance from the before of my new module (since after hadn't run yet, since module B hadn't finished all its tests yet), and tearing down the grid that module B had created.  Since module B only created the widget in before, subsequent tests from module B always failed.\nWhat do I propose?\nMy guiding instinct here is that before/after are not all that useful if there's no guarantee that a module will run all of its cases together; if they can get interrupted by unrelated tests, people can burn a few hours trying to figure out why.  In my case, this was a jQuery widget, but I could see similar circumstances for sinon spy/stub injection on prototypes, dependency injection swaps, etc.\nSo, I propose one of the following, in order of personal preference:\n\nIf QUnit.config.reorder is set to true, randomize the order that modules run in, and the order that tests run in within a module if desired, but do not reorder such that a module B's tests can have module A's tests run in between B's before and after hooks\n\nCorrect me if I'm wrong, but I feel this is what JUnit does for Java.  Perhaps I haven't looked carefully enough\n\n\nIf QUnit.config.reorder is set to true, ensure that any module that defines before/after hooks in some fashion cannot get interrupted by tests from another module (but leave legacy behavior intact for modules w/o before/after)\nAdd a new configuration option, defaulted to whatever, that if toggled on would enable one of the two above behaviors\nUpdate the documentation to indicate that modules can be interrupted in this fashion, linking to that explanation from the docs for before, after, and QUnit.config.reorder\n\nOverall\nI do like QUnit, I just wonder if folks other than me might run into this same situation.  But anyway, thank you for reading this far!", "createdAt": "2016-10-30T01:21:32Z", "updatedAt": "2017-10-20T15:51:37Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "wyantb", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "wyantb", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-11-12T20:21:06Z", "contents": "@wyantb thanks for the detailed issue report. I agree that this is unintuitive at first. I think more thorough documentation is the correct answer here.\nAllow me to explain, before and after are intended as \"setup\" hooks for the module. This means that they should really only be impacting the state of the module they are associated with, and storing such state on the testing context through this. This would include things such as setting up an expensive mock that is to be the same for each test in the module or defining options that will be used in all tests. Global state modifications really should be made and reset after each test to ensure that tests are atomic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-12T20:31:41Z", "contents": "@trentmwillis What about call counts? If before for a given module is run multiple times as the test runner jumps around modules, that's not ideal either. Personally, I think we need to rethink ordering given before/after-- when reordering was conceived originally, there was only beforeEach/afterEach (known as setup/teardown then).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-11-12T20:34:17Z", "contents": "before won't run multiple times, it is implemented to only ever run once based on looking at the meta information for the module it is associated with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wyantb", "authorAssociation": "NONE", "createdAt": "2016-11-12T21:21:17Z", "contents": "All your points here are valid, yes - my argument is simply based on what I\nfeel would be more useful; before/after as they are now are definitely\ncoherent.  before/after implemented in such a way that global modifications\nare legal would, I think, be more useful for the use cases I describe, and\nless likely to give devs a shock.  Generally I expect people to only be\nactively working and causing failures in a limited area, and not somehow be\nmore interested in unit tests from unrelated modules.  Randomizing order\nwithin/between modules would still meet the goal, without intermixing.\nBrian Wyant\nOn Nov 12, 2016 3:34 PM, \"Trent Willis\" notifications@github.com wrote:\n\nbefore won't run multiple times, it is implemented to only ever run once\nbased on looking at the meta information for the module it is associated\nwith.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n#1064 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAsXIj9b5O40z3QABStioreT-XbaEkhDks5q9iLLgaJpZM4KkQz-\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1066, "url": "https://github.com/qunitjs/qunit/issues/1066", "title": "Remove JSHint/JSCS leftovers", "contents": "I've noticed the repo still has some JSHint/JSCS leftovers - config files, pragma comments etc. They should all be removed now that the repo has migrated to ESLint.", "createdAt": "2016-11-02T15:32:43Z", "updatedAt": "2016-11-07T15:05:17Z", "closedAt": "2016-11-07T15:05:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "platinumazure", "company": null}, {"login": "kumarmj", "company": "@Cogoport "}], "comments_count": 4, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-02T15:51:18Z", "contents": "Oops, guess I missed some of those. Agreed, and I'll investigate in the next couple of days (but if anyone wants to submit a PR, feel free).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "kumarmj", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-06T16:10:50Z", "contents": "Hello I will be happy to submit a PR, if I am not wrong I need to\n\n Remove these pragma comments src/equiv.js#L16  main/assert.js#L251 main/assert.js#L257\n Delete jshintrc jscsrc\nconfig file", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-06T16:39:37Z", "contents": "That should cover the JSHint artifacts, but we also need to cover JSCS as well. Looking forward to your PR!\nOne other thought- you could use ESLint's \"no-warning-comments\" rule to try to identify other JSHint or JSCS comments in code, to make sure nothing else is missed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kumarmj", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-06T18:24:56Z", "contents": "@platinumazure updated above comment for jscsrc, but I did not found any JSCS comments. Sending a PR please review.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1067, "url": "https://github.com/qunitjs/qunit/issues/1067", "title": "Run tests on Node 7 (& perhaps stop on 0.10?)", "contents": "Node 7 is stable so QUnit should be tested on it. OTH, upstream support for Node 0.10 has just ended so it might be good to plan when to drop it.\njQuery Core has already stopped testing on Node 0.10 but we're in a different situation than QUnit.", "createdAt": "2016-11-02T22:06:33Z", "updatedAt": "2016-11-15T02:09:20Z", "closedAt": "2016-11-15T02:09:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-11-03T01:27:08Z", "contents": "This sounds good to me. We've discussed before, but I would like our support policy for Node to essentially be LTS + Current Stable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-11-03T15:24:00Z", "contents": "Which LTS, though? Those in Active or Maintenance mode? Note the following at https://github.com/nodejs/LTS/#node-abstraction-layer:\n\nIt should be stated that the abstraction layer (currently NAN) should support all current LTS releases. Given that Active LTS will overlap for a period of 6 months, this means that the abstraction layer will, at any given point in time, fully support a maximum of 2 LTS releases.\n\n(by current they mean Active here)\nIt seems you mean the Active ones then (1 or 2 at a time), is that true?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-11-12T20:11:28Z", "contents": "I would actually not be opposed to including both Active and Maintenance LTS versions. Ideally the fewer version we have to track is helpful as maintainers, but if the Maintenance LTS is likely to still have heavy usage (as I suspect), then we should likely continue to support it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-11-14T20:38:41Z", "contents": "@trentmwillis it makes sense, although, as I mentioned before, NAN plans to only support Active LTS and not Maintenance ones so if QUnit needed any native dependencies from npm then it might not be possible to support the old & new versions simultaneously.\nBut it's all theoretical for now - let's keep that potential problem in mind but we'll deal with it once it manifests itself for real.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1071, "url": "https://github.com/qunitjs/qunit/issues/1071", "title": "dom inspector shows qunit-fixture not cleaned up", "contents": "I am new to QUnit 2.0. While I was checking this example I realized that dom inspectors of firefox and chrome shows qunit-fixture not cleaned up. Is it a bug or am I missing something?", "createdAt": "2016-11-18T21:10:13Z", "updatedAt": "2016-11-20T20:08:48Z", "closedAt": "2016-11-20T20:08:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ozanh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ozanh", "company": null}, {"login": "platinumazure", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}], "comments_count": 6, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-18T21:17:33Z", "contents": "Can you please provide a more complete example, maybe on JSFiddle?\nSpecifically, it's not clear what your #qunit-fixture element actually looks like.\nAlso, note that the fixture is only cleaned up between tests, not in the middle of a test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ozanh", "authorAssociation": "NONE", "createdAt": "2016-11-18T21:45:32Z", "contents": "Sorry, here is the jsfiddle and I added the comments in it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-18T22:16:46Z", "contents": "I've forked and modified the fiddle to here, using assert.async() and a button to allow the tests to be run one at a time with the DOM being inspected in each case.\nThe console.log statements may be run before the module callback is even run, so I don't think those are very useful.\nI also wouldn't be surprised if the qunit-fixture were not cleaned up after the last test, because (from the perspective of the unit tests) there would be no need.\nTry playing around with my fiddle and let me know if you still see any weird behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ozanh", "authorAssociation": "NONE", "createdAt": "2016-11-19T13:12:32Z", "contents": "Thank you for the fiddle, it seems that cleanup takes place before each test so updating the documentation will be enough because it says that\n\nQUnit will reset the elements inside the #qunit-fixture element after each test, removing any events that may have existed. As long as you use elements only within this fixture, you don't have to manually clean up after your tests to keep them atomic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-19T13:31:21Z", "contents": "It might be that we should just say cleanup happens \"between\" each test. :-)\nOn Nov 19, 2016 7:12 AM, \"Ozan HACIBEK\u0130RO\u011eLU\" notifications@github.com\nwrote:\n\nThank you for the fiddle, it seems that cleanup takes place before each\ntest so updating the documentation\nhttps://qunitjs.com/cookbook/#keeping-tests-atomic will be enough\nbecause it says that\nQUnit will reset the elements inside the #qunit-fixture element after\neach test, removing any events that may have existed. As long as you use\nelements only within this fixture, you don't have to manually clean up\nafter your tests to keep them atomic.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\n#1071 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARWer3RDzC3u5R99jFZYEv6w4ZCPbNPks5q_vXBgaJpZM4K27bD\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-11-20T20:08:48Z", "contents": "Here's what I see at http://api.qunitjs.com/QUnit.config/ :\n\n\nfixture (default: undefined)\nType: String\n\n\n                Defines the HTML content to use in the fixture container which is reset at the start of each test.\n                By default QUnit will use whatever the starting content of #quint-fixture is as the fixture reset. If you do not want the fixture to be reset in between tests, set the value to null.\n            \n\nIf you see anything else that needs a change, can you open an issue on qunitjs/api.qunitjs.com?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1073, "url": "https://github.com/qunitjs/qunit/issues/1073", "title": "Automate changelog/authors update", "contents": "The current jquery-release script already requires some hacking to make it work with QUnit.\nIt would be nice to have an own script to release QUnit. The only hard part is how to deal with the CDN.\ncc @jzaefferer", "createdAt": "2016-12-06T04:48:15Z", "updatedAt": "2018-12-29T02:32:18Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T09:48:18Z", "contents": "Looking at https://github.com/qunitjs/qunit#releases there's quite a few steps that the script simply doesn't handle. Since jquery-release can't be well customized, maybe it can be used as a library? Write your own release script, delegate to parts of jquery-release that work well (like CDN upload).\n@rxaviers also had his issues with jquery-release, so he might have some useful input here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T21:56:43Z", "contents": "@jzaefferer is jquery-release consumable as a library right now or would we need to make some changes to support that?\n@leobalter alternatively, could we just change things in QUnit (such as the changelog/contributors set up) to work with jquery-release?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T22:13:14Z", "contents": "could we just change things in QUnit (such as the changelog/contributors set up) to work with jquery-release?\n\nWe would still need a small hack as jquery-release requires the project to be under the github.com/jquery org", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-02T04:54:37Z", "contents": "Update on this:\n\nWe've forked jquery-release to https://github.com/qunitjs/jquery-release\nWe have thorough release documentation at https://github.com/qunitjs/qunit/blob/master/RELEASE.md\n\nSo, currently it is relatively straightforward to do a release.\nHowever, there are still two steps which could likely be automated:\n\nGenerating the changelog since the last release\nCollecting the names/emails of all contributors and updating AUTHORS.txt\n\nI'm going to leave this ticket open until the above 2 tasks are automated.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1074, "url": "https://github.com/qunitjs/qunit/issues/1074", "title": "remove messages for features removed on 2.0", "contents": "", "createdAt": "2016-12-06T06:16:55Z", "updatedAt": "2016-12-15T14:21:31Z", "closedAt": "2016-12-15T14:21:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "leobalter", "company": "Bocoup"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1075, "url": "https://github.com/qunitjs/qunit/issues/1075", "title": "step API", "contents": "@wycatz suggested this step API and I'm game for it.\nIt records steps inside a test. Given this example:\nQUnit.test('references are granular', assert => {\n  let { SubSub } = MakeSub();\n\n  let obj = SubSub.create({ loud: true });\n  let root = rootFor(obj);\n\n  let state = new State(root);\n\n  set(obj, 'name', 'Daniel');\n\n  step('Update name');\n\n  state.validateTags({ name: false });\n  state.validateValues({ name: 'Daniel' });\n  state.update();\n\n  set(obj, 'loud', false);\n\n  step('Update loud');\n\n  state.validateTags({ loud: false });\n  state.validateValues({ loud: false });\n  state.update();\n});\nEach step can be recorded as a assert.ok(true), but printing the given description.\nThere's one con to consider for this API, which is the idea that assertions can be split in different tests specially inside nested modules.\nEven though, it is an interesting approach to consider.", "createdAt": "2016-12-06T07:10:20Z", "updatedAt": "2017-01-25T16:06:11Z", "closedAt": "2017-01-24T14:34:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "platinumazure", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T08:23:50Z", "contents": "I did a quick prototype here: 3e515c3", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T03:49:17Z", "contents": "I like this (and think there are several use cases within our own test suite for it), but seems like it is missing one thing: asserting that the correct steps happened.\nSeems like maybe we need assert.step( tag ) and then assert.verifySteps([ tag1, tag2, ... ]).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-07T04:21:24Z", "contents": "That's a great and useful addition to the step api. I like it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-01-24T06:05:57Z", "contents": "I'm not opposed to this landing, but I am not sure I understand the use case fully. I see the example above, but I'm not sure I fully understand what advantage this has over assert.ok(true) besides a slight readability improvement. Can anyone enlighten me, please?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-01-24T14:27:57Z", "contents": "Improves readability and it's also motivated by occurrence. ok(true) is being used here and there to flag given steps and their order. While this could be solved using the current API, step and verifyStep will provide an API with an clear goal to be used in these cases.\nAfaik, this case was frequent in some async jquery tests and will certainly gonna be used by Ember as this is an original request from Yehuda Katz.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-01-25T02:34:22Z", "contents": "@leobalter Thanks for the explanation, that works for me. That said, I'd love to see a longer-form case study for steps and step verification show up in the QUnit Cookbook maybe (unless that was covered in the documentation PRs?). If that seems worthwhile, I can create an issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-01-25T16:06:11Z", "contents": "it is! Using async code is one of the nice ways to use for examples. Async fns and promises will be great for that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1077, "url": "https://github.com/qunitjs/qunit/issues/1077", "title": "CI breaking on Node 0.12", "contents": "Of course I broke everything again.\nTravis CI is breaking on Node 0.12. This passed as a false positive from #1049.\nESLint is failing on Node 0.12...", "createdAt": "2016-12-06T08:39:02Z", "updatedAt": "2016-12-07T21:46:16Z", "closedAt": "2016-12-07T21:46:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "platinumazure", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T13:16:02Z", "contents": "Hint: you need sth like the following:\nhttps://github.com/jquery/jquery/blob/7fbab88/Gruntfile.js#L19-L24\nhttps://github.com/jquery/jquery/blob/7fbab88/Gruntfile.js#L189-L194\nhttps://github.com/jquery/jquery/blob/7fbab88/Gruntfile.js#L232\nto make it work (basically, to turn ESLint into a noop in Node <4).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-12-06T14:21:12Z", "contents": "When making Travis run ESLint, I intentionally made it so it only ran on Node 6 (because we don't need to lint in every configuration since ESLint basically behaves the same on Node >=4.0 and because it's not a crucial functionality test that needs to run on all supported platforms). Please let me know if you have questions on how I did that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T14:39:28Z", "contents": "@platinumazure QUnit uses Grunt and just configuring that on Travis is not enough. Gruntfile.js is loaded in all Node versions and this line:\nhttps://github.com/qunitjs/qunit/blob/d3aaf9b/Gruntfile.js#L4\nmeans the eslint task gets loaded which breaks in older Nodes as it's written in ES6.\nI don't think it's feasible to rely purely on Travis here, QUnit needs the jQuery Core treatment I mentioned in my previous comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-12-06T14:59:19Z", "contents": "Thanks. Bit surprised that what I had done before worked, then...\n\nOn Dec 6, 2016 8:39 AM, \"Micha\u0142 Go\u0142\u0119biowski\" <notifications@github.com> wrote:\n\n@platinumazure <https://github.com/platinumazure> QUnit uses Grunt and just\nconfiguring that on Travis is not enough. Gruntfile.js is loaded in all\nNode versions and this line:\nhttps://github.com/qunitjs/qunit/blob/d3aaf9b/Gruntfile.js#L4\nmeans the eslint task gets loaded which breaks in older Nodes as it's\nwritten in ES6.\n\nI don't think it's feasible to rely purely on Travis here, QUnit needs the\njQuery Core treatment I mentioned in my previous comment.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<#1077 (comment)>, or mute\nthe thread\n<https://github.com/notifications/unsubscribe-auth/AARWevoFThKpMoIExItcFQJPq_EoGVrfks5rFXOhgaJpZM4LFJny>\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T15:10:26Z", "contents": "@platinumazure This is probably because of a Grunt update. It was failing before (see e.g. https://travis-ci.org/qunitjs/qunit/jobs/181557397) but there must have been a bug in Grunt that let it go on in spite of the error. Now it fails properly. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-12-06T15:11:12Z", "contents": "Well, that's a shame.\n@leobalter Please let me know if there's anything that I (specifically) should be looking into.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-06T15:16:51Z", "contents": "my open source time today is totally consumed to finish the report for the last TC39 meeting. I'll have some extra time again tomorrow only.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1081, "url": "https://github.com/qunitjs/qunit/issues/1081", "title": "Not 'loading' properly on Node", "contents": "We need to make this more friendly on Node.\n@getify helped me finding this bug.\nAs you can see here, unless we call QUnit.load() before QUnit.start(), QUnit won't run properly in Node.\nWe need to make QUnit.start a self method to load and start QUnit without calling anything else. This is the expected behavior reading the api docs.\nThe good part is that we can remove any sights of 1.x warnings of QUnit.start along.\n\nAs I can't commit to any code today, I'm planning to fix this tomorrow - Dec 12 - in the evening (EST), high priority, unless someone wants to fix it before, please just add a comment here.", "createdAt": "2016-12-11T17:06:01Z", "updatedAt": "2016-12-14T15:01:54Z", "closedAt": "2016-12-14T03:29:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "getify", "company": "Getify Solutions"}], "comments_count": 2, "comments_data": [{"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2016-12-14T03:49:01Z", "contents": "Will this be in a patch release (2.1.1)? Any ETA?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-14T15:01:54Z", "contents": "Yes, this week.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1082, "url": "https://github.com/qunitjs/qunit/issues/1082", "title": "Test runner UI checkbox settings not synced with query parameters", "contents": "When specifying values for the test runner's query params they aren't synced up to the checkboxes for the corresponding settings.  This affects the hidepassed query param more than the others, because the functionality is directly tied to the box being checked as opposed to the presence of the query param itself.\nThis problem can be replicated using the basic example and was happening in multiple browsers on multiple platforms. After creating the HTML file, open the file in a browser. When using version 2.0.1 of QUnit, the checkboxes are synced up correctly with the query parameters. When using version 2.1.0 of QUnit, the syncing doesn't work the same way. For example, when using 2.1.0, select the 'Hide Passed Tests' checkbox, then refresh the page. The checked value is lost. Selecting the 'No try-catch' will immediately refresh the page, and will drop the checked value of that checkbox as part of the refresh.", "createdAt": "2016-12-13T18:28:55Z", "updatedAt": "2016-12-14T21:33:43Z", "closedAt": "2016-12-14T21:33:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "etseidler", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "etseidler", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-13T18:31:49Z", "contents": "Thanks for reporting! I can reproduce this on my local development copy of QUnit as well. Definitely a bug.\nIf you could try to figure out what's wrong and open a PR it would be greatly appreciated!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "etseidler", "authorAssociation": "NONE", "createdAt": "2016-12-13T20:00:42Z", "contents": "the problem seems to have been introduced in 80a14ee", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1084, "url": "https://github.com/qunitjs/qunit/issues/1084", "title": "Deprecate QUnit.load", "contents": "This is not even documented, but it's used everywhere.\nWe need to make it an unnecessary call and then warn if it's called.", "createdAt": "2016-12-14T01:45:02Z", "updatedAt": "2018-03-02T19:13:14Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 6, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-14T02:21:45Z", "contents": "I agree with this in general, because I get tripped up on load and start all the time, but it does open up one question: what happens with QUnit.config.autostart? Will that be revamped to just call QUnit.start?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-14T15:08:31Z", "contents": "We need to discuss this, but I believe calling start() on every run is not a bad idea compared to the magic of autostarting in a browser. The responsibility to catch the document.ready or the window.load events are not for a test runner.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "HOORAY", "HEART"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-12-15T16:03:31Z", "contents": "FWIW, the reporter is actually what currently handles the autostart on load behavior. We could just update this to call QUnit.start instead. I think that makes for a pretty clear path forward.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-12-15T16:09:14Z", "contents": "I thought about this, but this might break suites using config.autostart and user defined start", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:42:02Z", "contents": "I guess we have this fixed. Checking.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-02T19:13:14Z", "contents": "I've begun working on this. I'd like to deprecate it so that we can remove it in 3.0.\nHowever, the interplay between QUnit.config.autostart, QUnit.load(), and QUnit.start() is difficult to unwind. There's a much simpler end-state, but getting there in a way that we don't break existing setups is going to be tricky.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1090, "url": "https://github.com/qunitjs/qunit/issues/1090", "title": "QUnit 2.x cannot be run in a sandboxed iframe due to direct reference to window.sessionStorage", "contents": "See ember-cli/ember-twiddle#516", "createdAt": "2017-01-18T23:05:28Z", "updatedAt": "2017-01-20T17:54:51Z", "closedAt": "2017-01-20T17:54:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Gaurav0", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "Gaurav0", "company": null}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-01-18T23:06:12Z", "contents": "Thanks for opening @Gaurav0, hopefully some of the core devs can chime in and confirm if this was intentional...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-01-18T23:12:40Z", "contents": "We did some refactoring to introduce config.storage recently, so likely either #1042 or #1055. Definitely a bug; @Gaurav0 if you have time, would you mind digging in and trying to figure out what's wrong?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1092, "url": "https://github.com/qunitjs/qunit/issues/1092", "title": "Error in IE: \"Unable to get value of the property 'warn': object is null or undefined\"", "contents": "There is no console object in IE (at least 8-9) if console is not enabled.", "createdAt": "2017-01-19T23:25:08Z", "updatedAt": "2017-01-20T22:19:32Z", "closedAt": "2017-01-20T22:19:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Invis1ble", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "Invis1ble", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1100, "url": "https://github.com/qunitjs/qunit/issues/1100", "title": "Augment QUnit Cookbook to show off Step API", "contents": "Per this comment, we should see if we can augment the QUnit Cookbook with a case study on the Step API (and how it can be useful for asynchronous and other complicated test cases).\nThis is not critical since we already have documentation in api.qunitjs.com for the feature-- just seems like a hugely worthwhile opportunity for a more narrative case study treatment of the feature.", "createdAt": "2017-01-25T17:14:40Z", "updatedAt": "2017-01-25T17:32:58Z", "closedAt": "2017-01-25T17:31:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-01-25T17:22:34Z", "contents": "Seems like this issue should likely be opened against qunitjs.com instead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-01-25T17:26:54Z", "contents": "Ah crap, you're right. Too used to ESLint where some content in the main\nrepo gets cross-published to the site on release. I'll close and open on\nqunitjs.com.\n\u2026\nOn Jan 25, 2017 11:22 AM, \"Trent Willis\" ***@***.***> wrote:\n Seems like this issue should likely be opened against qunitjs.com\n <https://github.com/qunitjs/qunitjs.com> instead.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#1100 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AARWerdSp6mCwww8GBfWcobrmF0l8wBaks5rV4TbgaJpZM4LtwKi>\n .", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-01-25T17:32:58Z", "contents": "Opened here: qunitjs/qunitjs.com#131", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1102, "url": "https://github.com/qunitjs/qunit/issues/1102", "title": "Is `done` callback supposed to be fired twice?", "contents": "...or am I doing something wrong? From searching and reading issue threads, it seems like this could either be a known bug, a regression, a new bug, or me making a mistake. Sorry my searching failed if this is a dupe.\nI'm using v2.1.1. The done callback gets fired twice, at the very end, with exactly the same results.\nThis is how I register it:\nQUnit.begin(begin);\nQUnit.testDone(testDone);\nQUnit.done(done);\nbegin(..) is only called once, testDone(..) is called once per test, and then done(..) is called twice.", "createdAt": "2017-02-19T19:49:39Z", "updatedAt": "2017-02-23T22:25:53Z", "closedAt": "2017-02-23T22:25:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-02-19T20:03:48Z", "contents": "done should normally only be invoked once, unless additional tests/modules get scheduled after done has been fired (this usually occurs with asynchronously loaded tests).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-02-19T20:22:18Z", "contents": "I don't have any asynchronously loaded tests... all tests are created synchronously with QUnit.test(..).\nI should also mention that done(..) is only called twice when all tests pass. If I have any failures, done(..) only gets called once.\nAlso, I'm using this in Node v7.1.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-02-19T20:56:59Z", "contents": "Hmm, only other thing I could think of would be that the processing loop is getting out of whack due to some asynchrony (which is super vague I realize). Any chance you can share a reproduction? Or even stack traces from the two done invocations?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-02-19T23:19:01Z", "contents": "This is my minimal reproduce case (tests/tmp.js):\nvar QUnit = require(\"qunitjs\");\n\nQUnit.config.requireExpects = true;\n\nQUnit.begin(begin);\nQUnit.testDone(testDone);\nQUnit.done(done);\n\nQUnit.test(\"a simple test\",function t1(assert){\n\tassert.expect(1);\n\n\tassert.ok(true,\"one!\");\n});\n\nQUnit.start();\n\n\n// ******************************\n\nfunction begin(details){\n\tif (details.totalTests > 0) {\n\t\tconsole.log(`Test Suite (${details.totalTests})`);\n\t\tconsole.log(\"\");\n\t}\n\telse {\n\t\tconsole.log(`Test Suite: empty!`);\n\t\tprocess.exit(1);\n\t}\n}\n\nfunction testDone(results){\n\tif (results.failed > 0) {\n\t\tconsole.log(`Failed: '${results.name}' (${results.failed}/${results.total})`);\n\t\tfor (let i = 0; i < results.assertions.length; i++) {\n\t\t\tif (results.assertions[i].result === false) {\n\t\t\t\tconsole.log(`  ${results.assertions[i].message}`);\n\t\t\t}\n\t\t}\n\t}\n\telse if (results.passed > 0) {\n\t\tconsole.log(`Passed: '${results.name}' (${results.passed}/${results.total})`);\n\t}\n\telse {\n\t\tconsole.log(`No assertions run: '${results.name}'`);\n\t}\n}\n\nfunction done(results){\n\tconsole.log(\"\");\n\n\tif (results.failed > 0) {\n\t\tconsole.log(`Failed (${results.failed}/${results.total})`);\n\t\tprocess.exit(1);\n\t}\n\telse if (results.passed > 0) {\n\t\tconsole.log(`Passed (${results.passed}/${results.total})`);\n\t}\n\telse {\n\t\tconsole.log(\"No tests run!\");\n\t\tprocess.exit(1);\n\t}\n}\nWhen I run on the command line:\n$] node --version\nv7.1.0\n$] node tests/tmp.js\nTest Suite (1)\n\nPassed: 'a simple test' (1/1)\n\nPassed (1/1)\n\nPassed (1/1)\n\nYou'll see Passed (1/1) is being printed twice at the bottom, indicated that done(..) was called twice. If I change that test to fail (passing false to assert.ok(..) for example), it only prints the Failed message once, meaning done(..) was only called once.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-02-20T00:21:51Z", "contents": "Thanks for the reproduction; it was super helpful knowing that this was a setup in Node and not a Browser. I've identified the issue and opened a PR to fix it: #1103", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1110, "url": "https://github.com/qunitjs/qunit/issues/1110", "title": "Git builds are out of date", "contents": "Both http://code.jquery.com/qunit/qunit-git.js and http://code.jquery.com/qunit/qunit-git.css haven't updated since October, despite numerous commits to master since then:\n/*!\n * QUnit 2.0.2-pre\n * https://qunitjs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-10-31T19:06Z\n */\nI don't know what uploads them, but it's clearly broken. And for completeness, git builds should also include the commit hash (either in the version like QUnit 2.0.2-pre+248911105b39d7c5ecb8a788a4942e1128802ff9, or on a separate line).", "createdAt": "2017-03-12T14:11:35Z", "updatedAt": "2017-03-13T14:34:22Z", "closedAt": "2017-03-13T14:34:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "jzaefferer", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2017-03-13T14:23:10Z", "contents": "Looks like Jenkins got stuck 3 months(!) ago: http://jenkins.jquery.com/job/stage.api.qunitjs.com/630/\n\nStarted 3 mo 5 days ago; Build has been executing for 3 mo 5 days\n\nLongest build ever??\nI'm going to kill this and the other one, maybe that'll help...", "reactions_count": 3, "reactions_data": ["LAUGH", "CONFUSED", "LAUGH"]}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2017-03-13T14:25:48Z", "contents": "New QUnit build, should update the git files: http://jenkins.jquery.com/job/QUnit/660/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2017-03-13T14:30:23Z", "contents": "Jenkins job was still using the old repo. Not sure if that was the reason for the failure though. Something about invalid peer dependencies. I've wiped the workspace, maybe a clean npm install will help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2017-03-13T14:34:22Z", "contents": "Updated! Future commits to master should cause new builds to run immediately: http://jenkins.jquery.com/job/QUnit/", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1114, "url": "https://github.com/qunitjs/qunit/issues/1114", "title": "deepEqual should compare typedArrays w/ Arrays.", "contents": "Tell us about your runtime:\n\nQUnit version: current\nWhat environment are you running QUnit in? (e.g., browser, Node): browser/any\nHow are you running QUnit? (e.g., script, testem, Grunt): QUnit\n\n\nWhat are you trying to do?\nI'm trying to use deepEqual to compare an array with a typedarray instance\nCode that reproduces the problem:\nvar { test } = QUnit;\n\ntest('float64Array', t => {\n  var sample = new Float64Array([1, 2, 3, 4, 5, 6, 7, 8])\n  var src = new Float32Array(sample.buffer, 0, 2);\n\n  src[0] = 42;\n\n  sample.set(src, 1);\n\n  t.deepEqual(sample, [1.0000002464512363, 42, 1.875, 4, 5, 6, 7, 8])\n})\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nbeing able to compare values between instances\nWhat actually happened?", "createdAt": "2017-03-13T21:40:23Z", "updatedAt": "2017-04-09T15:03:30Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "zackthehuman", "company": "@LinkedIn"}], "comments_count": 8, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-19T19:02:29Z", "contents": "This seems reasonable to me, though I don't think there is an easy way to check if an object is a TypedArray (as in, I don't think you can do obj instanceof TypedArray). That said, we'd only need to perform this check if we're are comparing an Array with an Object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zackthehuman", "authorAssociation": "NONE", "createdAt": "2017-03-31T07:26:49Z", "contents": "Unfortunately I don't believe there is a convenient way to check TypedArray-ness unless you check instanceof for all of the various subclasses. Supporting this would be quite helpful for some of the tests I want to write for my emulator project.\nIs this something that would be good for a new contributor?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T14:56:18Z", "contents": "@zackthehuman, I believe you are correct. I don't think this should've very difficult to implement,so if you'd like to take a stab at it, go for it!\nI think the primary changes will be in QUnit.equiv and adding additional tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T15:29:35Z", "contents": "we should not rely on instanceof. If we want to limit checks for similar subclasses, we could use better approaches as getting the prototype chain.\nIn my case, what I would like is to have equiv to iterate through keys and values, regardless it's a TypedArray or Array or any other iterable object.\nThe problem: would this be a breaking change for equiv and deepEqual? Should we have a new API method for that?\nIn my suggestion, equiv would be valid to these cases:\nvar a = [ 42, 39, 262 ];\nvar b = new Int32Array([42, 39, 262]);\nvar c = { length: 3, \"0\": 42, \"1\": 39, \"2\": 262 };\nvar d = (function *() { yield 42; yield 39; yield 262; })();\n\nBtw, cases a, b, and d, are good for similar for of loops:\nfor (let x of a) console.log(x);\nfor (let x of b) console.log(x);\nfor (let x of d) console.log(x);\nBut c is valid to create a new TypedArray, e.g.: new Int32Array(c), and Arrays: Array.from(c).\nThey share some equality I could use in my assertions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T15:45:31Z", "contents": "I'm probably bikeshedding here, but I might want my request in two changes:\nExtend deepEqual/equiv to compare Arrays with TypedArrays\nIterate over array-like indexed properties when comparing TypedArrays with Arrays. We can detect TypedArrays by the shared %TypedArray% prototype/constructor:\nInt32Array.constructor === Int8Array.constructor;\nObject.getPrototypeOf(Int32Array) === Object.getPrototypeOf(Int8Array);\n\n// check\nlet TypedArray = Object.getPrototypeOf(Int8Array).constructor;\nlet res = myObj instanceof TypedArray;\nif ( res ) {\n  // ... Iterate over myObj and the given Array or other TypedArray number indexes.\n  // Array.from (or rest [...myObj]) shortens the way to compare the number indexed properties.\n  // After that: compare __non-number enumerable properties__.\n}\nCreate a new assertion to compare iterators\nWe should name it with similar or something close, I'll explain why as well.\nassert.similarIteration = function(a, b) {\n  var res = QUnit.equiv([...a], [...b]);\n  // use `res` to parse result\n};\nWhy similar? Because of other iterators. Imagine strings, or results from generators:\nvar d = (function *() { yield 42; yield 39; yield 262; })();\nvar gen = function *(x, y, z) { yield x; yield y; yield z; }; // this is not called yet\n\nassert.similarIteration(d, gen(42, 39, 262));\n// gen might return different iterators, and iterators might behave totally different\n// not predictable as Arrays where length is already defined.\n\n// The same happens with Objects with [Symbol.iterator] properties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zackthehuman", "authorAssociation": "NONE", "createdAt": "2017-04-02T03:22:56Z", "contents": "Are there any concerns about adding TypedArray support for browsers that don't support TypedArrays (basically IE before IE 10)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T14:33:10Z", "contents": "QUnit's concern is only restricted to know if TypedArrays are supported by the current environment. If it's not, skip these checks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T15:03:30Z", "contents": "FWIW, here's an older issue with some thoughts on this: #672", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1117, "url": "https://github.com/qunitjs/qunit/issues/1117", "title": "i18n/l10n?", "contents": "(Ditching the issue template since this is more of a meta-issue.)\nIs there any interest in internationalizing and possibly localizing QUnit for other locales?\nI definitely don't think this should be higher priority than any current initiatives, but I just wanted to see if it might be something that could go on the project roadmap.\nPossible steps for this:\n\nIntegrate Globalize.js or similar, ensuring it builds for HTML and Node runners\ni18n for HTML runner, Node runner (done in incremental PRs)\nEstablish contribution and review process for l10n contributions for different languages", "createdAt": "2017-03-20T04:49:54Z", "updatedAt": "2018-12-22T21:06:41Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T21:57:57Z", "contents": "I believe this is out of our scope for QUnit, as long we have a good exposed API.\nThe js-reporter integration should allow us to have localized versions for the reporters.\n\nWe can also discuss localizing the api docs, that would be great too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T22:34:06Z", "contents": "How far can folks get by just letting the browser translate? I agree that localization is great (especially from an accessibility standpoint), but the overhead of properly supporting it is quite great.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:23:28Z", "contents": "How far can folks get by just letting the browser translate?\n\npretty bad, I can speak on my own experience.\nSomething I believe we might work on is bringing translations to the api docs, that's where it most shines with users and I believe the current jekyll/markdown PR will help a lot there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1118, "url": "https://github.com/qunitjs/qunit/issues/1118", "title": "Separate HTML runner and HTML reporter?", "contents": "(Ditching the issue template since this is a meta-issue)\nNow that we're working on a QUnit Node CLI and integrating with js-reporters, I think we need to see if we can refactor the HTML Reporter space to split that into HTML \"runner\" and HTML \"reporter\".\nConceptually, here is what I would like to see long-term:\n\nHTML runner focuses on running QUnit in a browser, decoupling itself from reporting result. It takes on the outermost container of current HTML reporter but the internals should be black box. HTML runner also handles configuration (including url-based config) and test/module filtering.\nHTML reporter simply outputs the inner divs it currently does for every test.\nCreate a new reporter which simply takes plaintext from another reporter and puts it in an HTML block. Voila, HTML runner now integrates with any plaintext reporter.\nCreate a strategy for allowing plaintext reporters to gain an HTML/\"enhanced\" version for better integration? Not sure of the best way to handle that to be honest.", "createdAt": "2017-03-20T04:54:04Z", "updatedAt": "2017-04-03T20:44:05Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2017-03-20T04:58:58Z", "contents": "I like this, and note also the (loosely) related #947.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T21:55:42Z", "contents": "Me too. If we split both we might be able adapt into a HTML js-reporter as well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1119, "url": "https://github.com/qunitjs/qunit/issues/1119", "title": "Recursive error in Test#pushFailure and Assert#pushResult", "contents": "Tell us about your runtime:\n\nQUnit version: 2.2.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser, Chrome 56\nHow are you running QUnit? (e.g., script, testem, Grunt): ember-cli, testem\n\nWhat are you trying to do?\nCode that reproduces the problem:\nCalling this code during an async test after catching an exception.\nQUnit.config.current.assert.ok(false);\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nThe test to fail...\nWhat actually happened?\nRecursive error with call stack exceeded.\nTest#pushFailure calls Assert#pushResult\nhttps://github.com/qunitjs/qunit/blob/master/src/test.js#L388\nAssert#pushResult calls Test#pushFailure\nhttps://github.com/qunitjs/qunit/blob/master/src/assert.js#L107", "createdAt": "2017-03-22T02:48:16Z", "updatedAt": "2017-03-29T14:43:44Z", "closedAt": "2017-03-29T14:43:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ryanto", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "ryanto", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-22T03:21:45Z", "contents": "Thanks for the report and investigation! This is a bug, I believe all that we need to do to fix is update Test#pushFailure to call Test#pushResult instead of Assert#pushResult.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ryanto", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-22T03:25:37Z", "contents": "Cool. I can take a shot at this! I'll put this on tomorrow's TODO list.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-29T14:43:43Z", "contents": "Fixed by #1120.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1125, "url": "https://github.com/qunitjs/qunit/issues/1125", "title": "Pending QUnit.todo tests should be listed with \"hide passed\" checked.", "contents": "I started experimenting with the new (to me at least) QUnit.todo feature that exists in qunitjs@2.2.1, and I really like it! Thank you all for working so hard to implement it.\nI noticed a few things that stuck out to me while using todo's, and I would like to submit a PR to fix but would like guidance on the best approach before beginning.\nIn the default HTML reporter tests ran as QUnit.todo's get a visual indication to the left of the test, saying [todo]:\n\nThe mental model that I have when using QUnit.todo is that I am quickly putting down tests (often TDD where the test is written before the implementation even exists), and then once I have the tests written I am focusing on making them pass.  In a large test suite, these [todo] entries are difficult to find when skimming the list. Unlike skipped tests (which are also technically not failures) which are still displayed when \"Hide Passed\" is checked, these todo tests do not show up when the \"Hide Passed\" checkbox is checked.\ntldr; I would like to have QUnit.todo tests not be hidden by \"Hide Passed\", and instead display them (similar to skipped tests) with an alternate color or other visual treatment in the test list.", "createdAt": "2017-03-24T19:47:13Z", "updatedAt": "2017-03-29T01:32:56Z", "closedAt": "2017-03-29T01:32:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 5, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 4, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-24T20:12:13Z", "contents": "I would be \ud83d\udc4d to this change. Let's see if the rest of @qunitjs/qunit-team agrees.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T20:31:02Z", "contents": "I am definitely in favor of this. The change itself should be relatively easy, just need to adjust some CSS here I believe.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T21:08:19Z", "contents": "LGTM. Brings consistency with skipped tests, and furthers the model of working from \"Hide Passed\" as a checklist for what it left to do. (Be it failed, skipped, or todo tests.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T21:46:52Z", "contents": "I'm \ud83d\udc4d  to this while we can also go further and add individual filters for each status in a future.\nIt would be nice to also check only skipped or todo tests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1129, "url": "https://github.com/qunitjs/qunit/issues/1129", "title": "assert.async breaks tests in node", "contents": "@leobalter\nI'm using QUnit 2.1.1.\nMy minimal test case:\n// tmp.js\nvar QUnit = require( \"qunitjs\" );\n\nQUnit.done( function done(results){\n\tconsole.log( results );\n} );\n\nQUnit.test( \"temp\", function test(assert){\n\tvar done = assert.async();\n\tsetTimeout( done, 500 );\n} );\n\nQUnit.start();\n$] node --version\nv7.7.1\n$] node tmp.js\n{ failed: 1, passed: 0, total: 1, runtime: 5 }\n{ failed: 1, passed: 0, total: 1, runtime: 523 }\n\nAs you can see, the Qunit.done(..) callback is called twice, once right away, and once 500 ms later. :(", "createdAt": "2017-03-28T01:47:52Z", "updatedAt": "2017-03-28T22:35:51Z", "closedAt": "2017-03-28T21:42:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 8, "comments_data": [{"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-03-28T02:09:38Z", "contents": "BTW, I just updated to Node 7.7.4 and the bug persists, so it's not related to my node version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-03-28T15:02:17Z", "contents": "Update: I just tried pulling down 2.1.2-pre from github, and this bug is gone. So something has already been fixed. Not sure if that was on purpose or by accident, but should probably at least be noted in the release notes. :)\nAny word on when 2.1.2 can be officially released?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T20:58:04Z", "contents": "The latest version is 2.2.1, did you mean this is fixed in 2.2.2?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T21:12:09Z", "contents": "Update: I just tried pulling down ?-pre from github...\n\nThat's probably the reason I was not able to reproduce this bug when we talked.\nIt seems like a regression already fixed by some other change. We can do a git blame to find it, but at this point I believe it's better to release a new version, which I guess we can do it this week.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-03-28T21:31:43Z", "contents": "@trentmwillis sorry, yes, I meant 2.2.2 (vs 2.1.1)\n@leobalter it does seem though like you'd want to get a test in the suite that fails in 2.2.1 so this regression is caught if it ever happens again. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T21:41:13Z", "contents": "sure thing. I'll do it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-03-28T21:42:54Z", "contents": "OK, sorry for my confusion.\nJust realized I had indeed been running on 2.1.1 (but thinking I was on latest 2.2.1). So my bug was only on 2.1.1 and fixed sometime after. I just verified that in both 2.2.1 and 2.2.2(-pre), the bug is not present.\nMaybe still want to put a test in, but sorry for my false alarm here. Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-03-28T22:35:51Z", "contents": "I think the root cause was likely the same as: #1103. Which would explain why it is fixed in 2.2. That said, I will investigate this to verify.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1131, "url": "https://github.com/qunitjs/qunit/issues/1131", "title": "Add integrated code coverage support to CLI", "contents": "Having an easy-to-use solution for code coverage, integrated directly with the tool, is something we should explore. Istanbul is the de-facto standard for code coverage and so we should likely begin there.\nI'll flesh this out with more details later, but wanted to put it on our roadmap.", "createdAt": "2017-03-30T15:17:49Z", "updatedAt": "2019-01-06T02:19:37Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "jdalton", "company": "Salesforce"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-30T16:10:17Z", "contents": "This is, of course, interesting, but I wonder if we should keep a small subset of responsibilities here while any coverage tool can be attached by users. This way we don't favor any specific coverage tool as well.\ncc @jdalton, I would like your feedback here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2017-03-30T17:14:05Z", "contents": "I think coverage is create on its own. Folks have preferences and tying\u2013in one solution will add to the complexity, support, and push other folks away. I dig a more focused approach (doing 1 thing well). QUnit could always have a recommended coverage path in docs but not directly tied-in.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-06T03:57:59Z", "contents": "Circling back on this. The points above are good, though I would like for us to have a \"happy path\" for implementing code coverage.\nAfter using the CLI in some of my personal projects, I'm going to suggest that Istanbul through the nyc CLI tool be our recommended path. It is super trivial to use (simply prepend nyc to the qunit command) and is well-documented.\nIf that seems reasonable, we can add a brief blurb to the docs site mentioning it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-10-27T23:59:28Z", "contents": "@trentmwillis Sounds good to me. I'm quite used to environments that expose coverage through a debug extension at run-time (such as in PHP), or by instrumenting the needed files before reading them (e.g. the way you'd use Istanbul with Karma).\nBut, doing it externally with nyc actually makes a lot of sense and is also conveniently interoperable regardless of any unit test framework or entry point (e.g. grunt/npm test, qunit/mocha).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "component-cli", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1132, "url": "https://github.com/qunitjs/qunit/issues/1132", "title": "async causes tests to abruptly stop", "contents": "I'm not sure if this behavior is by-design, or if there's just no way for QUnit to fix it, but this situation just bit me and it was very confusing.\nHere's my minimal test case:\n\"use strict\";\n\nvar QUnit = require(\"qunitjs\");\n\nQUnit.done(function done(results) {\n\tconsole.log(\"done:\",results);\n});\n\nQUnit.test(\"temp\",function(assert){\n\tvar done = assert.async();\n\tassert.expect(1);\n\n\tsetTimeout(function(){\n\t\tconsole.log(\"timer!\");\n\t},1000);\n});\n\nQUnit.test( \"temp2\", function(assert){\n\tassert.expect(1);\n\tassert.ok(true,\"temp2\");\n});\n\nQUnit.start();\nAnd when I run this:\n$] node tmp.js\ntimer!\n$]\n\nIn other words, the first test case fires the timer, but since it never runs the done(), it just silently dies. Since node doesn't have any other waiting event handlers, node just exits. The test suite doesn't fire my completion handler to notify me that a test failed to meet its assertion, and it doesn't try to run the second test at all. It just stops.\nAnd even worse, the test suite exits with a zero exit code, meaning my other CLI tools consider this a passing test suite run. :(\nThis seems like broken behavior to me. Shouldn't there be some sort of timeout in the background for async tests, or something like that?\nOr maybe qunit could register a process.on(\"exit\", ..) handler, that if the test suite hasn't completed by the time the process tries to finish, the handler forces a non-zero exit code to signal failure to the CLI, and emits some error about an abnormally terminated test suite?", "createdAt": "2017-03-30T20:29:14Z", "updatedAt": "2018-03-06T18:59:53Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "puppetmaster3", "company": null}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 15, "comments_data": [{"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-03-30T20:32:03Z", "contents": "Should mention: I'm using v2.3.0 and node 7.7.4.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-30T20:38:31Z", "contents": "It definitely feels like a bug to me. On the browser, the tests would just hang indefinitely and the run would not be considered a passing run.\nI like the idea of using process.on(\"exit\") to detect abnormal termination, since we should be able to track if all registered tests have run or not.\nRegarding timeouts, I wouldn't want to implement one by default but I would be open to an option for the same. I believe we have per-test timeouts supported in the browser, but I don't know if the CLI supports it yet.\n@trentmwillis Any thoughts on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-03-30T20:44:37Z", "contents": "Regarding timeouts, I wouldn't want to implement one by default but I would be open to an option for the same.\n\nSimilar to assert.expect(..), it would be useful if assert.timeout(..) could be called to provide a timeout delay, after which the test would be considered a failure.\nOn a related topic, assert.failure() would be useful to proactively mark the test as failed, so that I could do my own timeouts... like setTimeout( assert.failure, 1000 ) for example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-30T20:49:18Z", "contents": "that's right. QUnit is not holding node until the tests reach completion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-30T21:21:04Z", "contents": "@leobalter Looks like the CLI should be handling this via these lines in bin/run.js. But that code is not invoked when the Node API is used via require(\"qunitjs\").\nI'm not really sure it should be up to QUnit core to handle this (it should be runtime-agnostic). I think if someone is using the Node API, maybe it should be up to them to listen for the runEnd event themselves... What do you think? (Another option would be to just register a noop function in a Node-specific wrapper around core, but...)\nEDIT: On second thought, I think the correct solution is to create a Node wrapper which basically inherits from the core QUnit object. And it should use something like QUnit.on( \"runEnd\", function() { process.nextTick( process.exit ); }); to hold the event loop until the test is done. We can augment with timeout events later to allow some conditional forced exiting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-30T21:45:14Z", "contents": "I think if someone is using the Node API, maybe it should be up to them to listen for the runEnd event themselves\n\nThat's how we handled it in our grunt task.\n\nWhat do you think? Another option would be to just register a noop function in a Node-specific wrapper around core, but...\n\nNow I wonder if we would break previous implementations by \"fixing\" this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-06T18:29:42Z", "contents": "I'll be looking into this, planning on doing several fixes/improvements related to assert.async.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T17:55:16Z", "contents": "So there are a couple parts to this issue:\n\nCurrently, we have QUnit.config.testTimeout which should rectify the issue here, however it is undefined by default. I think this should be set to some reasonable default (60 seconds maybe?), though this might be considered a breaking change.\nIn the case where QUnit.config.testTimeout is set to undefined (or any falsy value), we should check for early exits of the process. We can do this in our CLI implementation, relatively easily I suspect.\nRelated to (2), I think the CLI should likely default to exiting with a non-zero status code, unless the test suite has finished successfully, this will help us avoid false-positives.\nThere is no easy way to set a per-test timeout. I think we should implement a assert.timeout() method.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "puppetmaster3", "authorAssociation": "NONE", "createdAt": "2017-04-18T03:20:53Z", "contents": "+1. I need a good async/promise testing for fetch()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-07-15T23:13:29Z", "contents": "Any update on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T16:14:28Z", "contents": "tl;dr I believe that running tests with qunit on the command line has successfully mitigated the issues reported, however running the script (from the description) via node some-file.js still exhibits poor behavior (e.g. exit code of 0, no failure messaging, etc).\n\nRunning this script with qunit test-script.js:\n// test-script.js\nQUnit.done(function done(results) {\n\tconsole.log(\"done:\",results);\n});\n\nQUnit.test(\"temp\",function(assert){\n\tvar done = assert.async();\n\tassert.expect(1);\n\n\tsetTimeout(function(){\n\t\tconsole.log(\"timer!\");\n\t},1000);\n});\n\nQUnit.test( \"temp2\", function(assert){\n\tassert.expect(1);\n\tassert.ok(true,\"temp2\");\n});\nResults in the following output:\n\u276f\u276f\u276f bin/qunit test-script.js\nTAP version 13\ntimer!\nError: Process exited before tests finished running\nLast test to run (temp) has an async hold. Ensure all assert.async() callbacks are invoked and Promises resolve. You should also set a standard timeout via QUnit.config.testTimeout.\n\u276f\u276f\u276f echo $?\n1\n\nI believe the main pain points are called out in the output above:\n\nProcess exited before tests are completed message\nExit code is non-zero\nA warning is printed with helpful information about what to do\n\nIf we follow the warnings guidance and add a value for QUnit.config.testTimeout (e.g. 5000) we get a failed test, and better console output:\nTAP version 13\ntimer!\nnot ok 1 temp\n  ---\n  message: \"Test took longer than 5000ms; test timed out.\"\n  severity: failed\n  actual: null\n  expected: undefined\n  stack:     at ontimeout (timers.js:469:11)\n    at tryOnTimeout (timers.js:304:5)\n    at Timer.listOnTimeout (timers.js:264:5)\n  ...\nok 2 temp2\n1..2\n# pass 1\n# skip 0\n# todo 0\n# fail 1\ndone: { passed: 1, failed: 1, total: 2, runtime: 5027 }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T16:16:06Z", "contents": "The remaining question is: do we want to directly support running the tests without the CLI like in the original issue report?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-12-19T16:29:27Z", "contents": "I have about a dozen projects where i run my own node CLI tests as above. Never knew that some special CLI was required.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T17:00:15Z", "contents": "@getify - The CLI (provided when installing npm i -g qunit) handles a number of ergonomic issues over simply doing require('qunit') (and AFAIK is the only documented way to use QUnit in node?). The issue is that the code used for the main entry point (qunit/qunit.js) is generally shared between browser and node and therefore tries to walk a fine line around including node or browser specific code there.\nThere are definitely things that can be done to make the direct require('qunit') use case better:\n\nEmit a warning when assert.async() is invoked but no test timeout is present\nDecide if we can add a default QUnit.config.testTimeout in a SemVer compatible way (unclear to me)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-03-06T18:56:46Z", "contents": "I vaguely expected recent commits in master to have addressed but I can still reproduce the issue.\n$ node tmp.js\ntimer!\n$ # exit code: 0\n\nOnly timer! is logged and zero exit code.\nHowever, recent commits did address the problem for QUnit CLI, and surfaces the issues quite well:\n$ qunit tmp.js\nTAP version 13\ntimer!\nError: Process exited before tests finished running\nLast test to run (temp) has an async hold. Ensure all assert.async() callbacks are\ninvoked and Promises resolve.\nYou should also set a standard timeout via QUnit.config.testTimeout.\n1 $ # exit code: 1", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["component-assert", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1133, "url": "https://github.com/qunitjs/qunit/issues/1133", "title": "Why dist/ and qunit/ folders?", "contents": "I'm a bit confused about why we maintain both a dist/ folder (for web use and development) but also create a qunit/ folder when releasing and/or for Node. Can we simplify this process?\nLong-term, my preference would be to just export a canonical \"core QUnit\" file and also have wrappers for executing QUnit in different contexts. (In a different issue, I might have referred to those wrappers as \"runners\", to contract with \"reporters\".) But on top of that, it would be nice if we could keep the folder structure consistent if at all possible.", "createdAt": "2017-03-30T21:42:14Z", "updatedAt": "2017-04-05T21:15:20Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-30T21:45:56Z", "contents": "cc @jzaefferer. You might now the reason for this. I honestly don't remember.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-03-30T21:46:24Z", "contents": "@platinumazure This might become the new turtle on the tree. It's there by some reason.", "reactions_count": 1, "reactions_data": ["CONFUSED"]}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-03-31T04:34:50Z", "contents": "@platinumazure At the moment, neither dist/ nor qunit/ is actually in the master branch. But they do spring into existence during local development and/or as part of the release process.\nRelease\nLong ago (before 1.13.0, and even longer ago when it was still part of jquery's test directory) QUnit was maintained as a single file in the qunit/ directory.\nI first moved away from this in 6f8f6c3 (pull #480, issue #378).\nSince then, we've no longer had a qunit/ directory in master. However there were two uses cases relying on a qunit/ directory:\n\nUse of QUnit through Git submodules. (Mostly older pre-npm projects.)\nUse of QUnit through Bower. (Which required files to be in Git.)\n\nIt was proposed by @jzaefferer in #480 (comment) that we keep supporting this by committing the qunit/ build artefact into Git as part of the release process. That way it won't generally exist in Git, but we can put the release tag on a leaf-node commit (or \"detached commit\") outside the master branch lineage so that Bower and Git-submodule usage can still reference qunit.js without a post-install build process of any sort.\nWe were going to keep doing that for new releases until 2.0, but I guess we forgot!\nDevelopment\nDuring local development, grunt will generate a distribution file in dist/, which is used when loading the test suite in a web browser. This is a different directory name to avoid conflicts when working on releases, and in general since they use slightly different logic to be generated (one containing a git hash, the other a version tag).\nAs far as I know, dist/ is never committed to Git.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T17:07:33Z", "contents": "@Krinkle thanks for the background, much appreciated!\nAt this point, since we ship qunit/ as part of NPM and Bower, changing/removing it would be considered a breaking change (something to keep in mind for an eventual 3.0).\nSo, the question then is, do we need to keep dist/ or can we eliminate in favor of using qunit/ all the time? I tend to think we should be able to, though it may take some work. This would be particularly beneficial when working locally and attempting to npm link (or similar) into other packages.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T21:15:20Z", "contents": "@trentmwillis Sounds good.\nI wasn't aware that we also use qunit/ for main in package.json for use through require() in Node.js. (I would've thought that we change main from dist to qunit in the release commit only, and not in master. If I understand correctly, this means it's currently broken in master during local development.)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1137, "url": "https://github.com/qunitjs/qunit/issues/1137", "title": "Memory leak caused by retaining test instances", "contents": "Tell us about your runtime:\n\nQUnit version: 2.3.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser\nHow are you running QUnit? (e.g., script, testem, Grunt): Ember-CLI\n\nWhat did you expect to happen?\nThe testEnvironment should not be retained after a test run completes. If consumers set properties on the testEnvironment and it is retained, then the test suite will have memory leaks.\nWhat actually happened?\nThe testEnvironment is getting retained due to a reference from the new js-reporters implementation. Specifically, this line is problematic.", "createdAt": "2017-03-31T20:33:59Z", "updatedAt": "2017-03-31T21:15:39Z", "closedAt": "2017-03-31T21:15:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1139, "url": "https://github.com/qunitjs/qunit/issues/1139", "title": "logs tests failing on Travis CI + Browserstack", "contents": "There are some browserstack tests failing on Travis CI.\nWe need to investigate.", "createdAt": "2017-03-31T21:16:45Z", "updatedAt": "2017-06-03T19:04:27Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-03T19:04:27Z", "contents": "Looks like BrowserStack is failing due to the todo tests. I looked into this briefly, and it looks like BrowserStack uses the QUnitAdapter from the js-reporters project to collect the results of test runs. Unfortunately, that adapter doesn't currently handle todo tests (from what I can tell). So, I believe all the necessary changes need to happen outside this repo.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1140, "url": "https://github.com/qunitjs/qunit/issues/1140", "title": "Markdown not rendered inside <p>", "contents": "https://api.qunitjs.com/QUnit/start\n\n\n\nOriginally reported at qunitjs/api#154", "createdAt": "2017-04-03T20:45:20Z", "updatedAt": "2017-04-09T13:05:35Z", "closedAt": "2017-04-09T13:05:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "good for new contributors", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1144, "url": "https://github.com/qunitjs/qunit/issues/1144", "title": "Cannot set property 'usedAsync' of undefined with async()", "contents": "QUnit version: 2.3.0\nWhat environment are you running QUnit in? (e.g., browser, Node):browser\nHow are you running QUnit? (e.g., script, testem, Grunt):script,chrome 57.0.2987.133 (64-bit)\n\nWhat are you trying to do?\nCode that reproduces the problem:\nI try to test async function, in minor version all is ok, but i update the version of qunit and now i have an error.\nQUnit.module( \"Draft\" );\n\nQUnit.test( \"$.Oda.Test\", function() {\n    var done = QUnit.assert.async();\n    setTimeout(function() {\n        QUnit.assert.ok( 1 < 2, \"Test\" );\n        done();\n    }, 1500 );\n});\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nI hope  a pass test :)\nWhat actually happened?\nTypeError: Cannot set property 'usedAsync' of undefined\nI put my test file in attachement.\nThx for your support\ntest.zip", "createdAt": "2017-04-05T08:15:43Z", "updatedAt": "2017-04-06T07:45:21Z", "closedAt": "2017-04-06T07:45:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Happykiller", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Happykiller", "company": "BonitaSoft"}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-05T12:56:58Z", "contents": "Hi @Happykiller, thanks for the issue.\nThe QUnit.assert object actually represents the prototype for assertions in QUnit, so it shouldn't actually be used directly in tests. Instead, we provide an assert object as the first argument of the test callback, and you should use that for logging assertions.\nYour test should look something like this:\nQUnit.module( \"Draft\" );\n\nQUnit.test( \"$.Oda.Test\", function( assert ) {\n    var done = assert.async();\n    setTimeout(function() {\n        assert.ok( 1 < 2, \"Test\" );\n        done();\n    }, 1500 );\n});\nGive that a try and let me know how it goes!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Happykiller", "authorAssociation": "NONE", "createdAt": "2017-04-06T07:45:21Z", "contents": "I work great thank a lot.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1145, "url": "https://github.com/qunitjs/qunit/issues/1145", "title": "Add option to allow assertions after using assert.async", "contents": "Currently, if you use assert.async() and then have another assertion after calling the returned done() function, you get an error like so:\nAssertion after the final `assert.async` was resolved\n\nThis is fine for most use cases, but within the Ember community we have some helpers which currently use assert.async() within some test helpers that execute asynchronously so that they can prevent tests from completing prematurely. However, this also means that assertions are likely to happen after done() is called.\nSo, I'd like to propose adding an option to assert.async() that enables you to have assertions after done() is called:\n// assert.async( acceptCallCount, allowAssertionsAfter );\nvar done = assert.async( 1, true );\ndone();\nassert.ok( true ); // no error!\nThoughts?", "createdAt": "2017-04-06T19:10:57Z", "updatedAt": "2017-04-09T13:41:38Z", "closedAt": "2017-04-09T13:41:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 7, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-06T19:14:49Z", "contents": "I'm curious to know what the rationale was for making it an error in the first place, actually. Depending on that rationale, I may be \ud83d\udc4d or \ud83d\udc4e to this idea.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-06T19:25:13Z", "contents": "I'm unsure, and wasn't able to find a clear reason after digging through some old issues/PRs. I imagine the thinking is that done() should be the last thing called in a test so that you potentially avoid extra assertions happening after you intend for the test to be completed.\nI think, however, that case is solved just by using assert.expect() and the fact that we error if an assertion occurs after a test has finished.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-06T19:38:11Z", "contents": "If we error for assertions after the test is done slash in a test that isn't the current test, then I'm \ud83d\udc4d to this enhancement.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-06T20:41:20Z", "contents": "I've opened two PRs to get this working as expected.\nAlso, for reference, here is the issue from Ember that spurred this issue: ember-cli/ember-cli-qunit#162 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-04-06T20:51:55Z", "contents": "The concept of a \"test is done\" already exists in QUnit and is reached when all pending async handlers have been invoked (if any), and last remaining function stack yields.\nI'm curious how we determine the latter at the moment, but assuming that it is in stable shape, I would support adopting this behaviour always instead of it being optional (should not be a breaking change).\nFor the API, I would prefer we avoid extra parameters to async(), especially boolean\u00a0parameters.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-06T20:59:43Z", "contents": "I'm curious how we determine the latter at the moment...\n\nI believe this is done using setTimeout so we ensure the current function stack has emptied before trying to advance again.\n\n...I would support adopting this behaviour always instead of it being optional (should not be a breaking change).\n\nI am also on board with this (just went with a more conservative approach). It is almost the opposite actually (an un-breaking change?) since we'll no longer err in the given case.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T13:41:38Z", "contents": "Fixed at #1148", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1149, "url": "https://github.com/qunitjs/qunit/issues/1149", "title": "Rejected promise not throwing an uncaught exception with \"no try-catch\"", "contents": "Tell us about your runtime:\n\nQUnit version: QUnit 2.0.0; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\nWhat environment are you running QUnit in? (e.g., browser, Node): Chrome 57.0.2987\nHow are you running QUnit? (e.g., script, testem, Grunt): HTML test runner\n\nI have a test which returns a promise which fails. I generally have no try-catch on so that I can debug errors in my IDE, but this doesn't seem to work in conjunction with promises. Is this by design or a bug?\nQUnit.test('promise fail', function (assert) {\n    return new Promise((resolve, reject) => {\n        resolve()\n    }).then(() => {\n        throw new Error(\"hurk\")\n    })\n})\n\nHTML Reporter shows:\nPromise rejected during promise fail: hurk@ 1 ms\nSource:\nError: hurk\nat Promise.then (http://localhost:63342/cs/out/test/PICurve.qunit.js:18:15)", "createdAt": "2017-04-09T03:14:41Z", "updatedAt": "2017-12-20T00:07:02Z", "closedAt": "2017-12-20T00:07:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NaridaL", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "NaridaL", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 5, "comments_data": [{"authorLogin": "NaridaL", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-09T03:54:10Z", "contents": "Looks like a simple fix.\npromises-notrycatch.diff.txt", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T04:52:58Z", "contents": "@NaridaL since it looks like you already have a solution here, would you mind opening a PR?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T12:59:41Z", "contents": "Without signing the CLA or opening a new PR we cannot use that solution you\nmentioned.\n\nIt would be great to have a PR from you, @NaridaL. :)\n\u2026\nOn Sun, Apr 9, 2017 at 12:53 AM Trent Willis ***@***.***> wrote:\n @NaridaL <https://github.com/NaridaL> since it looks like you already\n have a solution here, would you mind opening a PR?\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#1149 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AASYkRK3kbGEiRHVMeMYKKIFt9YrD-QSks5ruGQrgaJpZM4M354x>\n .", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NaridaL", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-09T13:19:00Z", "contents": "While my fix is an improvement, there still seem to be some problematic cases. I ended up changing it to use assert.async.\nI'll take another look later and see if there's a better solution.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "NaridaL", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-10T00:16:52Z", "contents": "Turns out converting a rejected promise to an exception is pretty hard, because exceptions are automatically converted to rejected promise. One can use a settimeout (http://stackoverflow.com/a/30741722/1980909) to get out of the promise chain, but the debugger wont catch the exception then.\nAll of which is unecessary, because Chrome/WebStorm will catch rejected promises on their own... as long as you're using native async/await and not a transpiled polyfill.\nAnyway the fix I posted originally works. I've created a PR.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1152, "url": "https://github.com/qunitjs/qunit/issues/1152", "title": "`moduleDone/suiteEnd` not fired for parent module if its tests are already executed", "contents": "Tell us about your runtime:\n\nQUnit version: 2.3.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Node 6.10.0\nHow are you running QUnit? (e.g., script, testem, Grunt): Grunt using grunt-contrib-qunit\n\nWhat are you trying to do?\nI want to track the end of every module/test. Basically, I have tests like the following:\nQUnit.module('A', function() {\n  QUnit.test('a', function(assert) {\n    assert.expect(1);\n    assert.ok(true);\n  });\n\n  QUnit.module('B', function() {\n    QUnit.test('b', function(assert) {\n      assert.expect(1);\n      assert.ok(true);\n    });\n\n    QUnit.module('C', function() {\n      QUnit.test('c', function(assert) {\n        assert.expect(1);\n        assert.ok(true);\n      });\n    });\n  });\n});\nAnd I log them as follow:\ngrunt.event.on(\"qunit.moduleStart\", function(name) {\n  console.log(\"moduleStart:\", name);\n});\n\ngrunt.event.on(\"qunit.testStart\", function(name) {\n  console.log(\"testStart:\", name);\n});\n\ngrunt.event.on(\"qunit.testDone\", function(name) {\n  console.log(\"testDone:\", name);\n});\n\ngrunt.event.on(\"qunit.moduleDone\", function(name) {\n  console.log(\"moduleDone:\", name);\n});\nWhat did you expect to happen?\nI expected to get the following output:\nmoduleStart: A\ntestStart: a\ntestDone: a\nmoduleStart: A > B\ntestStart: b\ntestDone: b\nmoduleStart: A > B > C\ntestStart: c\ntestDone: c\nmoduleDone: A > B > C\nmoduleDone: A > B\nmoduleDone: A\n\nWhat actually happened?\nBut instead I got:\nmoduleStart: A\ntestStart: a\ntestDone: a\nmoduleStart: A > B\ntestStart: b\ntestDone: b\nmoduleStart: A > B > C\ntestStart: c\ntestDone: c\nmoduleDone: A > B > C\n\nI tracked the issue down to these lines src/test.js#L282-L292:\nif ( module.testsRun === numberOfTests( module ) ) {\n\temit( \"suiteEnd\", module.suiteReport.end( true ) );\n\trunLoggingCallbacks( \"moduleDone\", {\n\t\tname: module.name,\n\t\ttests: module.tests,\n\t\tfailed: module.stats.bad,\n\t\tpassed: module.stats.all - module.stats.bad,\n\t\ttotal: module.stats.all,\n\t\truntime: now() - module.stats.started\n\t} );\n}\nThe above code should also check parent modules, otherwise moduleDone and suiteEnd will be triggered only for the module C.\nI can provide a PR in case this is not the intended behaviour.\nThanks!", "createdAt": "2017-04-09T17:58:47Z", "updatedAt": "2017-04-09T22:43:41Z", "closedAt": "2017-04-09T22:43:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-09T18:16:11Z", "contents": "Forgot to mention that if I added a test (e.g. a2) after the definition of the module B, I get the following output:\nmoduleStart: A\ntestStart: a\ntestDone: a\nmoduleStart: A > B\ntestStart: b\ntestDone: b\nmoduleStart: A > B > C\ntestStart: c\ntestDone: c\nmoduleDone: A > B > C\ntestStart: a1\ntestDone: a2\nmoduleDone: A", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-09T18:21:21Z", "contents": "Definitely a bug, your \"expected\" behavior is what should happen. A PR with tests would be much appreciated!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-09T18:49:20Z", "contents": "@trentmwillis\nWhere can I add my tests ? should I extend the file test/callbacks.js or create a new one as the callbacks file has a its specific logic that I don't want to mess with ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-09T19:55:54Z", "contents": "Never mind. Created a new file.\nSee #1153", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1157, "url": "https://github.com/qunitjs/qunit/issues/1157", "title": "API Docs page title has stray pipe \"|\"", "contents": "https://api.qunitjs.com has a stray pipe (\"|\") in its document title. This is probably meant as a suffix for other pages but the home page should have it without separator.", "createdAt": "2017-04-13T03:54:36Z", "updatedAt": "2017-04-14T03:23:09Z", "closedAt": "2017-04-14T03:23:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1158, "url": "https://github.com/qunitjs/qunit/issues/1158", "title": "CLI should use local version of qunitjs if possible", "contents": "When injecting the QUnit global, the CLI should require qunitjs relative to the cwd. Code needs to be changed here: \n  \n    \n      qunit/bin/run.js\n    \n    \n        Lines 18 to 29\n      in\n      2171bcf\n    \n    \n    \n    \n\n        \n          \n           QUnit = ( function requireQUnit() { \n        \n\n        \n          \n           \ttry { \n        \n\n        \n          \n           \t\tdelete require.cache[ require.resolve( \"../qunit/qunit\" ) ]; \n        \n\n        \n          \n           \t\treturn require( \"../qunit/qunit\" ); \n        \n\n        \n          \n           \t} catch ( e ) { \n        \n\n        \n          \n           \t\tif ( e.code === \"MODULE_NOT_FOUND\" ) { \n        \n\n        \n          \n           \t\t\tdelete require.cache[ require.resolve( \"../dist/qunit\" ) ]; \n        \n\n        \n          \n           \t\t\treturn require( \"../dist/qunit\" ); \n        \n\n        \n          \n           \t\t} \n        \n\n        \n          \n           \t\tthrow e; \n        \n\n        \n          \n           \t} \n        \n\n        \n          \n           }() );", "createdAt": "2017-04-13T15:48:53Z", "updatedAt": "2017-04-22T16:05:20Z", "closedAt": "2017-04-22T16:05:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-cli", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1162, "url": "https://github.com/qunitjs/qunit/issues/1162", "title": "Merge modules with same name", "contents": "Currently, if you create more than one module with the same name, then we will represent these modules with different data structures.\nQUnit.module( \"a\" ); // creates a module\nQUnit.module( \"a\" ); // creates a different module\nThis is odd because the moduleId is generated based on the name of the module. Thus, two different modules can wind up with the same moduleId which seems incorrect. So, I'd like to propose allowing subsequent declarations of modules with the same name, to be merged into the first module of that name.\nI do not believe this would break any existing test setup, but it would enable better reporting for a certain set of use cases. In particular, it enables you to write abstractions that group tests by test type rather than module type, but still report based on module.\nIn other words, it enables this:\ntestAllTypes( \"Feature A\", function someTest() {} );\ntestAllTypes( \"Feature B\", function someTest() {} );\n\n// Generates...\n\nQUnit.module( \"Type A\", function() {\n  QUnit.test( \"Feature A\" );\n} );\nQUnit.module( \"Type B\", function() {\n  QUnit.test( \"Feature A\" );\n} );\n\nQUnit.module( \"Type A\", function() {\n  QUnit.test( \"Feature B\" );\n} );\nQUnit.module( \"Type B\", function() {\n  QUnit.test( \"Feature B\" );\n} );", "createdAt": "2017-04-14T23:35:16Z", "updatedAt": "2017-06-14T14:29:28Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 7, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "platinumazure", "company": null}, {"login": "sechel", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-15T00:00:22Z", "contents": "What will happen when someone defines hooks on both modules ?\nShould QUnit only invoke the first ones (in case they exist) or the second. Or just allow them all and queue them as QUnit already do with tests ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-15T00:46:24Z", "contents": "Good point. Will likely need to come up with a better API to handle that factor, as I don't think any of the approaches mentioned are very intuitive.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-04-15T03:41:01Z", "contents": "I'd prefer we avoid module merging as this would also complicate the concept of when a module is \"done\" (e.g. hooks like before/after, and logging events like suiteEnd ).\nIn fact, I'd rather propose to consider two modules with the same name an error. Selecting one from the drop down menu should after all only run one module. Otherwise the filter can be used instead.\nAlternatively, we could generate our own IDs, implement &moduleId=, and have the dropdown menu values reflect those IDs (which means multiple could have the same display name).\nI imagine this dilemma might come from wanting to perfectly map \"test modules\" to some form of component concept in the tested project - instead of merely a group of unit tests. The solution is obviously to have them not have the same name (e.g. \"Feature A - Type B\"). The kind of grouping that maps to project component structure is probably better achieved by putting the two modules in the same file, with a meaningful file name, or by placing the two files in a subdirectory with a meaningful name - not by giving them the same QUnit module name.\nAlternatively, one could make use of nested modules - which landed in 1.20 (see #858 and https://api.qunitjs.com/QUnit/module).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2017-04-15T17:05:37Z", "contents": "In fact, I'd rather propose to consider two modules with the same name an error.\n\nI agree with this or just leave as it is. Merging modules with the same names may cause more confusion and might be a mess with different hooks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2017-04-16T02:50:18Z", "contents": "+1 to erroring on duplicate module name.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-16T05:26:25Z", "contents": "\ud83d\udc4d from me for error on duplicate module name, with the caveat that I think it would have to be semver-major.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sechel", "authorAssociation": "NONE", "createdAt": "2017-06-14T11:28:04Z", "contents": "I use different files to define nested-modules with a common parent module and it never occurred to me that the parent module is in fact several modules with the same name.\nThis is because all the reporters that I have used so far (Karma reporters verbose and alike) aggregate modules by their name. The only location where this issue pops up is the module selection dropdown of QUnit.\nI'm not sure how to handle this use case when there will be an error raised on modules with the same name. Any suggestions?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1163, "url": "https://github.com/qunitjs/qunit/issues/1163", "title": "Add support for only/skip to modules", "contents": "These features are similar to the already implemented ones of tests. Usually, when I'm debugging a large codebase, I often only want to run a subset of tests (in my case it's a module). The same goes when I want to skip a chunk of tests.\nAbout the syntax, we can either use:\nconst { module, test } = QUnit;\n\n// Normal\nmodule(\"Module A\", () => {\n  test(\"test A\", assert => {\n    assert.expect(1);\n    assert.ok( true );\n  });\n});\n\n// Only\nmodule.only(\"Module B\", () => {\n  test(\"test B\", assert => {\n    assert.expect(1);\n    assert.ok(true);\n  });\n});\n\n// Skip\nmodule.skip(\"Module C\", () => {\n  test(\"test C\", assert => {\n    assert.expect( 1 );\n    assert.ok( true );\n  });\n});\nOr, we can use the second parameter of QUnit.module() to define whether a module should be the only one to run or the one that should be skipped:\nmodule(\"Module A\", { only: true }, () => {\n  // ...\n});\n\nmodule(\"Module B\", { skip: true }, () => {\n  // ...\n});\nThe second approach may change the semantic of the second parameter as it's used to define hooks.\nI might be able to implement something for the next weekend in case these features benefit someone.", "createdAt": "2017-04-16T11:26:23Z", "updatedAt": "2017-06-23T15:50:38Z", "closedAt": "2017-06-23T15:50:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 8, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-17T15:01:17Z", "contents": "I agree that this is definitely a feature we should support.\nThat said, I don't particularly like the second approach due to changing semantics as you've pointed out, but the first approach also doesn't feel quite right. For individual tests, the functions are:\nQUnit.test();\nQUnit.skip();\nQUnit.todo();\nQUnit.only();\nBut for module's were proposing:\nQUnit.module();\nQUnit.module.skip();\nQUnit.module.todo(); // Unsure if this is needed, but would be nice for completeness\nQUnit.module.only();\nI think if we go this route, we likely will also want to support:\nQUnit.test();\nQUnit.test.skip();\nQUnit.test.todo(); // Unsure if this is needed, but would be nice for completeness\nQUnit.test.only();\nSo that it is consistent. This is also very similar to how Mocha supports these features. Thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-17T15:41:56Z", "contents": "I don't particularly like the second approach\n\nI don't like it either. I just wanted to point out that there is an other approach that we can follow.\nBut the way, I was going to propose implementing the first approach for test too, but changed my mind as you already have different methods that do the same and I was thinking that you may see the idea as bad and don't want to create new aliases.\n\nI think if we go this route, we likely will also want to support\n\nYes, for consistency, we may end up implementing the same (Of course only in case these features are welcome).\n\nThis is also very similar to how Mocha supports these features\n\nExactly. Jest does the same too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-22T19:26:37Z", "contents": "@trentmwillis\nWhat would be the proper way to handle QUnit.module.todo()  ?\nShould it mark its tests including the tests of the child suites as todos ?\nThe same goes for QUnit.module.skip()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-22T21:44:54Z", "contents": "@Arkni yeah, that's what I would expect the behavior to be. We should be sure to explicitly define how skip or todo tests within a module that is todo or skip work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-23T17:34:05Z", "contents": "I pushed my first implementation of these features and created #1168\nWaiting for your feedback :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-04T21:09:41Z", "contents": "QUnit.module.only has been added via: #1179.\nStill need skip and todo.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-23T14:38:37Z", "contents": "QUnit.module.skip and QUnit.module.todo have been added respectively via: #1193 & #1195", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-23T15:50:30Z", "contents": "Documentation for this has now landed as well! These features will be available in the next release (likely 2.4.0), which will hopefully be cut soon (got a few more things to land first).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1166, "url": "https://github.com/qunitjs/qunit/issues/1166", "title": "Internal calls to pushFailure (e.g. timeout) result in noisy expected/actual diff reports", "contents": "my runtime:\n\nQUnit version: 2.3.0 ... 2.3.2\nWhat environment are you running QUnit in?: Browsers (Chrome, FF, IE, Edge, phantomjs,...)\nHow are you running QUnit?: HTML page (either manually or via Selenium or other runners...)\n\nWhat are you trying to do?\nRun a test that might time out.\nQUnit.test(\"any test\", function(assert) {\n    assert.async(); // don't call the async done handler -> timeout\n    assert.ok(true, \"should...\");\n});\nWhat did you expect to happen?\nQUnit HTML reporter just reports \"Test timed out\"\nWhat actually happened?\nQUnit HTML reporter additionally reports  \"expected\", \"source\" and a message that the diff was suppressed (as null is not different from null).\n\nThis is quite noisy for a reader and might break tools that evaluate the report (as in our case) or that register for QUnit.log.\nMost likely, the issue was introduced with 829c41f which contradicts the logic in the HTML reporter at html.js, lines 764-767. The comment for the condition at that location states that pushFailurewouldn't provide an expectedproperty. This is no longer true due to the mentioned change.\nI would suggest to remove the property expected again (best compatibility with existing QUnit.log listeners, but I didn't check whether this still would allow the reuse of pushResult) or give it a special, documented value (would also allow for an expected value of null).", "createdAt": "2017-04-20T09:49:45Z", "updatedAt": "2017-10-21T23:20:48Z", "closedAt": "2017-10-21T23:20:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "codeworrior", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "codeworrior", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "codeworrior", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-29T06:31:13Z", "contents": "no comments?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T22:42:25Z", "contents": "Sorry for missing this before. I agree that the new behavior is a regression compared to the old behavior. We should restore this to the old behavior (it was just an oversight due to the interaction between the reporter and failure logic).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-15T02:02:34Z", "contents": "The goal of the original commit was to try to refactor and simplify some duplicated code, among other things. So this might need careful examination.\n@trentmwillis If someone wanted to compare against undefined, would that be a difference of having expected: undefined vs expected not being present in the assertion descriptor? If so, I could probably write a PR to add the key more carefully/selectively and fix this. I just want to make sure I understand how it was supposed to work first.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1172, "url": "https://github.com/qunitjs/qunit/issues/1172", "title": "Investigate alternative to PhantomJS for QUnit's test suite", "contents": "PhantomJS is no longer being maintained, so it would be good to investigate alternatives so that we can test things such as WebWorkers (as mentioned in #1171).\nA few things to consider though:\n\nI don't think we can drop Phantom from our test suite altogether, as many folks will likely continue using it for a while, so I think we should continue supporting it until QUnit 3.x.\nWe should consider adding a headless Chrome test suite. I think we should run all the test we currently have in Phantom in headless Chrome.\nWe should fix and continue to use BrowserStack for cross-browser compatibility.", "createdAt": "2017-04-26T16:48:10Z", "updatedAt": "2018-08-20T06:15:47Z", "closedAt": "2018-08-20T06:15:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-08-20T06:15:47Z", "contents": "Done in #1303. Not going to worry about supporting Phantom. If any issues are reported we can fix until we hit 3.x. Similar story for Browserstack. Given current cross-browser compatibility for JavaScript I don't foresee this being a big issue and thus don't want to sink lots of time into cross-browser testing which (in my experience) is often quite flaky.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["category-tests"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1173, "url": "https://github.com/qunitjs/qunit/issues/1173", "title": "`QUnit.jsDump` was said to be removed in `2.x` but the api docs says otherwise", "contents": "Although the 2.x migration guide says that QUnit.jsDump should be replaced with QUnit.dump which suggests that the object was removed in 2.x (which is the case), the QUnit.dump.parse docs still suggest that it will be removed in 3.0:\nNOTE: This method used to be in QUnit.jsDump, which was changed to QUnit.dump.\nThe old property will be removed in QUnit 3.0.\n\nI know that QUnit.jsDump was removed in 2.1.1. It all started by throwing an error in f7da009 and then removing it completely in bdd634d.\nI'm just wondering if the removal was on purpose or accidentally. In case of the former, I suggest to omit that notice from api docs. Otherwise, reintroduce it as a bug fix.\nBy the way, the notice used to say QUnit 2.0, and updated to 3.0 in this commit qunitjs/api@5fa1a05\nThanks!", "createdAt": "2017-04-26T20:37:02Z", "updatedAt": "2017-04-27T15:19:02Z", "closedAt": "2017-04-27T15:19:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T23:52:41Z", "contents": "The docs need to be updated. Basically, there was confusion over what we wanted to do with it.\nWe forgot to remove it in the original 2.x release, so we then updated the messaging to say it will be removed in 3.x. However, after that, we decided that we would just go ahead and remove it, treating it as a bug that it wasn't removed during the original 2.x release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-27T10:19:57Z", "contents": "Thanks for the explanation :)\nI opened a PR to remove that note from docs: #1174", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1176, "url": "https://github.com/qunitjs/qunit/issues/1176", "title": "Restart all test without reload page", "contents": "What are you trying to do?\nIt would be interesting to be able to restart the tests without reload. To use tests to find on memory leak, or that applications are idempotent, running twice would be useful.\nIf we try to call start() when all tests are finished we receive an error: \"Called start() while test already started running\"", "createdAt": "2017-05-08T11:38:20Z", "updatedAt": "2017-10-20T15:51:29Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Gorash", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Gorash", "company": "@odoo "}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-05-27T05:40:23Z", "contents": "This is an interesting idea, but I am unsure if it is something we would want to support as a core part of QUnit.\nIn short, I think it would require a non-trivial amount of code and I imagine it is difficult to get much useful information out of rerunning and entire test suite. If you're focusing on a single test, it may be beneficial, but in those cases I would recommend just wrapping the test in a loop.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gorash", "authorAssociation": "NONE", "createdAt": "2017-05-29T08:40:50Z", "contents": "Thanks, but the idea of loop is not really possible in my case, I have more than 600 tests (more than 3000 assert) made by different developer in modules of a web application with lasy imports of library. Since some import are lazy, it is necessary to check that their data are very clean (without memory leak, or alteration) and that even between the different tests.\nCurrently I check the memory leak and globals with the console of the chrome dev tools to do the restart but it is not usefull (save tests list in temporary var, and when start twice make break point, slice the list, remove throw, clear test info, remove break point).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["category-api", "component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1177, "url": "https://github.com/qunitjs/qunit/issues/1177", "title": "\"actual\" value is not printed if actual happened to be \"undefined\"", "contents": "Using qunitjs 2.3.2, the test below fails to print the \"actual\" value, just because sum() happened to return undefined as the incorrect/buggy value. If it returned \"wrong\" instead, the \"actual\" is printed next to the \"expected\" so it's easier to see what went wrong. If a string value was expected and undefined was returned instead, then it would be nicer if qunit printed \"actual: undefined\" to make that clear.\nvar isCurrentlyBuggy = true;\n\nfunction sum(a, b) {\n  if (isCurrentlyBuggy) {\n    return undefined;\n  }\n  return a + b;\n}\n\nQUnit.only('my test', assert => {\n  assert.equal(sum(1, 1), 2);\n});", "createdAt": "2017-05-14T17:04:17Z", "updatedAt": "2017-07-04T19:15:23Z", "closedAt": "2017-07-04T19:11:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mo", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-05-16T16:14:56Z", "contents": "This seems reasonable and likely an easy fix. Would you mind attempting a PR?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mo", "authorAssociation": "NONE", "createdAt": "2017-05-17T19:36:19Z", "contents": "Seems like it's printed from here:\nhttps://github.com/js-reporters/js-reporters/blob/master/lib/reporters/TapReporter.js#L50", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mo", "authorAssociation": "NONE", "createdAt": "2017-05-17T20:37:17Z", "contents": "PR here: js-reporters/js-reporters#102", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-07-04T19:11:47Z", "contents": "I finally released js-reporters@1.2.1 which should fix this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mo", "authorAssociation": "NONE", "createdAt": "2017-07-04T19:15:23Z", "contents": "great, thanks", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "good for new contributors", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1180, "url": "https://github.com/qunitjs/qunit/issues/1180", "title": "Add a CONTRIBUTING.md", "contents": "We should add a CONTRIBUTING.md file to make it easier for new contributors to understand how best to develop and open PRs. With recent changes to the grunt scripts and documentation workflows, now seems a good time to add such a document.", "createdAt": "2017-05-28T04:20:43Z", "updatedAt": "2018-12-22T20:22:59Z", "closedAt": "2017-05-29T16:57:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1182, "url": "https://github.com/qunitjs/qunit/issues/1182", "title": "Clear require cache on test re-runs", "contents": "When re-running the test suite using qunit --watch, the require.cache is not cleared. Thus, if any files changed that are required, then those changes won't properly be reflected in the test suite.", "createdAt": "2017-05-31T19:43:06Z", "updatedAt": "2017-09-25T20:19:32Z", "closedAt": "2017-09-25T20:19:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "rwjblue", "company": "@linkedin"}], "comments_count": 2, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-19T15:27:07Z", "contents": "Just ran into this today, glad you are on it. \ud83d\ude04", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-19T15:38:50Z", "contents": "FWIW, I am working around this for now by adding the following snippet to one of my test files:\nconst root = process.cwd();\nfor (let key in require.cache) {\n  if (key.startsWith(root) && !key.startsWith(root + '/node_modules')) {\n    delete require.cache[key];\n  }\n}", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-cli"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1183, "url": "https://github.com/qunitjs/qunit/issues/1183", "title": "Dynamically filter tests to run", "contents": "Is there a way to dynamically filter tests to run based on index / test name? I know you can already skip a test, but i'm looking for a way to dynamically decide which tests to skip, like this jasmine function: jasmineEnv.specFilter\nIf it is not available, would you be open to PR's? Possible this could be available to the testStart callback? For example: return 'skip' if the test needs to be skipped?\nBackground:\nWe're thinking of adding support for qunit to the stryker mutation testing framework. Having this feature will improve the performance of mutation testing with qunit test suites.", "createdAt": "2017-06-01T07:59:56Z", "updatedAt": "2018-07-31T03:53:06Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "nicojs", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "nicojs", "company": "Info Support"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "datokrat", "company": "@disco-network "}, {"login": "mike-north", "company": "@mike-works & @LinkedIn"}], "comments_count": 11, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-02T01:38:36Z", "contents": "You can configure the QUnit.config.filter and QUnit.config.testId properties from within the JS. These are checked before running each test to verify whether a test is supposed to run or not.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "datokrat", "authorAssociation": "NONE", "createdAt": "2017-06-04T21:27:30Z", "contents": "These filters decide based on the the test description (which also provides the testId after being hashed), as far as I understand it. Is it also possible to use other criteria, for example to run the fifth and sixth test (based on their position)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-04T21:35:05Z", "contents": "Currently, ids or description are the only ways to filter. Since we support test reordering, indices aren't particularly useful as they can wind up being different across runs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "datokrat", "authorAssociation": "NONE", "createdAt": "2017-06-04T21:36:01Z", "contents": "Hmm, I see. So there is also no \"initial ordering\" preserved?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-04T21:42:00Z", "contents": "You can disable reordering via QUnit.config.reorder.\nPerhaps an explanation of your use case would help us figure out what the best way to accomplish it would be.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "datokrat", "authorAssociation": "NONE", "createdAt": "2017-06-04T21:48:06Z", "contents": "Thank you for your quick response.\nIt's also about Stryker: To verify that tests cover all functionality, small changes to the source code are inserted into the code. The tests should catch these errors. Therefore, for every mutation, all tests are run - this can be quite slow.\nBut with coverage analysis, we can find out which tests don't even cover the mutated code and skip them. Maybe @nicojs can help here, but as I understand it, Stryker needs the index of the executed test.\nQUnit.config.reorder is an interesting point. I'll figure out whether it fits our needs!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nicojs", "authorAssociation": "NONE", "createdAt": "2017-06-05T20:56:06Z", "contents": "Stryker needs the index of the executed test.\n\nThis is the current implementation, correct.\n\nYou can configure the QUnit.config.filter\n\nCould we allow to provide a custom filter function here? That way, it doesn't matter what we use, test ids, test names, position of the stars,...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mike-north", "authorAssociation": "NONE", "createdAt": "2018-07-29T08:10:38Z", "contents": "@trentmwillis, you mentioned\n\nYou can configure the QUnit.config.filter and QUnit.config.testId properties from within the JS. These are checked before running each test to verify whether a test is supposed to run or not.\n\nCan you point me to where this is happening? It seems like once the test is added to the processing queue, it's going to run regardles of filters, testId, moduleId, etc... If both QUnit.config.moduleId and QUnit.config.testId behaved the way you say, it would unlock my ability to do some really cool stuff with training/tutorial content.\nMy use cases involve specifying which tests to run (by testId is fine) AFTER the modules/tests are defined and BEFORE any of them have actually started to run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-07-30T17:14:18Z", "contents": "@mike-north sorry, looks like I was mistaken. The validation check is applied when the test is queued: \n  \n    \n      qunit/src/test.js\n    \n    \n        Lines 377 to 379\n      in\n      5fbaa48\n    \n    \n    \n    \n\n        \n          \n           if ( !this.valid() ) { \n        \n\n        \n          \n           \treturn; \n        \n\n        \n          \n           }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mike-north", "authorAssociation": "NONE", "createdAt": "2018-07-30T17:24:02Z", "contents": "How big an ask would it be to check the testId filter before the tests are run? As it stands, by the time I know about which tests are available, I have already lost the opportunity to define a useful filter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-07-31T03:53:06Z", "contents": "I don't think it should be too hard to make that change (given that's how I thought it worked previously).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1185, "url": "https://github.com/qunitjs/qunit/issues/1185", "title": "Release documentation updates", "contents": "While performing the 2.3.3 release, I noticed a few things that should be documented/updated in the RELEASE.md:\n\n Note reenabling repo protection\n Use npm install in jquery-release\n Update API docs instructions\n Verify git build updated", "createdAt": "2017-06-02T14:31:00Z", "updatedAt": "2017-07-11T04:04:45Z", "closedAt": "2017-07-11T04:04:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1189, "url": "https://github.com/qunitjs/qunit/issues/1189", "title": "Reduce number of tokens needed per test", "contents": "Tell us about your runtime:\n\nQUnit version: 2.3.2\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser\nHow are you running QUnit? (e.g., script, testem, Grunt): Script\n\n\nWhat are you trying to do?\nI find it code smell that you need to do assert.ok/assert.equal everywhere.\nI'd like to shorten that so that each test takes only 1 token, not 3 (in other words, shorten the assert.)\nI did the below in my test suite and it works fine using Tap on Node.js, but breaks with qunit because const seems to change this to the block scope. Would be nice if qunit allowed this.\nIt definitely seems to me that it should not be necessary to have those 2 extra tokens for every test.\nCode that reproduces the problem:\n\nconst someTest = assert => {\n  const ok = assert.ok\n  ok(true)\n}\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nTest should pass.\nWhat actually happened?\nUncaught error.\nSource:\nTypeError: Cannot read property 'pushResult' of undefined", "createdAt": "2017-06-05T16:20:36Z", "updatedAt": "2017-06-05T23:46:57Z", "closedAt": "2017-06-05T18:09:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "breck7", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "breck7", "company": "UH Cancer Center"}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "breck7", "authorAssociation": "NONE", "createdAt": "2017-06-05T16:46:04Z", "contents": "A simple workaround I employed accomplishes what I want.\nIt does have the limitation in that it adds an extra entry to the stack on a failed test but not a problem because I often do my debugging with node/tape.\nI also just switched everything to only use strictEqual, which seems better anyway.\nQUnit.test(key, assert => {\n            testTree[key]((expected, actual, message) => assert.equal(expected, actual, message))\n          })\n`", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-05T17:16:12Z", "contents": "The assert object has some context that the assertion methods need in order to properly process the assertion (e.g., they know what test the assertion is associated with). Calling ok as a bare function means the assertion method does not have a valid this value, which leads to the TypeError you have observed.\nThis would be true of any object method that you try to call as a bare function, even outside of QUnit.\nWe could perhaps discuss whether we could have the assertion methods be created \"pre-bound\" (e.g., using Function.prototype.bind) so that they could be called as pure functions, but my personal opinion would be that you sacrifice some readability in exchange for saving a couple of keystrokes. From my perspective, I would probably just say this is how QUnit was designed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-06-05T18:09:08Z", "contents": "const someTest = assert => {\n  const ok = assert.ok\n  ok(true)\n}\n\nTypeError: Cannot read property 'pushResult' of undefined\n\n\nTrimming the short assert. prefix is not supported in this way. As @platinumazure points\u00a0out, you'd have to bind it first: ok = assert.ok.bind(assert);. You're free to do so if you prefer\u00a0that.\nHowever, the following also works:\nconst someTest = assert => {\n  assert.ok(true)\n}\nThis pattern works and is preferred. For simplicity, and for aesthetic consistency with other QUnit\u00a0test suites.\nThe aesthetic consistency and reduced complexity are especially important in my opinion. For example when collaborating with other developers, introducing new developers on your team, and in general for the open-source community your project may be part of. It helps confusion which is greatly appreciated when reading, writing, and reviewing code on a regular basis.\nAlso don't forget that, this hypothetical future contributor, may very well be your future self  \u2013 after working on something else for a few months :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "breck7", "authorAssociation": "NONE", "createdAt": "2017-06-05T20:33:18Z", "contents": "Thanks for the thoughtful responses and great work! QUnit has been a joy to use over the years. I went ahead with my closure solution but also like the \"bind\" suggestion, thanks @platinumazure!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert", "status-declined", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1192, "url": "https://github.com/qunitjs/qunit/issues/1192", "title": "Memory Leak In QUnit.equiv", "contents": "Tell us about your runtime:\n\nQUnit version: 2.3.2\nWhat environment are you running QUnit in? (e.g., browser, Node): browser, Chrome Canary\nHow are you running QUnit? (e.g., script, testem, Grunt): Grunt. Node.js is on version v5.12.0. We use grunt to launch the test into browser.\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\nWe use QUnit.equiv() to compare objects in our test. The objects can be huge.\n\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nWe expect that after QUnit.equiv(a, b) returns, QUnit does not hold reference to a and b, thus allow them to be garbage collected.\n\nWhat actually happened?\nWe use Chrome dev tool memory tab to take snapshot of the memory, and we found that the global queue \"pairs\" still holds references to the objects (and their sub-objects) we passed into QUnit.equiv(). When the objects to be compared are big, the leak is big as well. We currently workaround this issue by invoking QUnit.equiv() again with two empty strings, that will replace the global queue with the two empty string, thus free the two big objects.", "createdAt": "2017-06-07T18:16:14Z", "updatedAt": "2017-07-06T02:12:06Z", "closedAt": "2017-07-06T02:12:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jingxwu", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jingxwu", "company": "Oracle"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-13T15:16:42Z", "contents": "Definitely sounds like a bug, but it doesn't sound like it is too severe since the memory is freed during a subsequent invocation of the function.\nWould you mind submitting a PR to fix?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jingxwu", "authorAssociation": "NONE", "createdAt": "2017-06-13T21:38:05Z", "contents": "will do.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-07-04T18:56:56Z", "contents": "I have opened #1207 to fix this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1196, "url": "https://github.com/qunitjs/qunit/issues/1196", "title": "Latest version of Qunit and latest version of sinon do not mix", "contents": "It seems they do not mix well because the documentation for Qunit with sinon does not even exist anymore", "createdAt": "2017-06-11T19:36:57Z", "updatedAt": "2017-07-06T03:20:42Z", "closedAt": "2017-07-06T03:20:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dtracers", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dtracers", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-13T15:14:21Z", "contents": "Can you explain what you mean by \"do not mix\"? Please provide what you are expecting to happen and what is actually happening. Also, a simplified reproduction (such as through JSBin) of your issue would be greatly appreciated.\nIn general, Sinon and QUnit are totally independent of each other so upgrading one should not affect the other as far as I am aware.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-07-06T03:20:41Z", "contents": "Closing this since it is not currently actionable. If a specific issue and reproduction can be provided, then feel free to reopen.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1197, "url": "https://github.com/qunitjs/qunit/issues/1197", "title": "Using native async function as hooks does not work", "contents": "Hi, Im using Qunit 2.3.3 and try to use native async/await syntax in modern browsers such as Chrome 59 or Firefox 55 to perform some asynchronous work in a beforeEach hook. However once I declare the beforeEach hook to be an async function it simply is not invoked anymore, at least not before any of the tests is. Here is a simple example that illustrates this:\nlet testValue;\nQUnit.module('async test module', {\n  before: async () => {\n    testValue = 42\n  }\n})\nQUnit.test( \"check value\", function( assert ) {\n  assert.ok( testValue == 42, \"testValue = \" + testValue);\n});\nSee this Fiddle.\nIf you replace this by the Promise returning variant as suggested by the documentation all works well:\nlet testValue;\nQUnit.module('async test module', {\n  before: () => {\n     return new Promise((resolve, reject) => {\n      testValue = 42;\n      resolve();\n    });\n  }\n});\nQUnit.test( \"check value\", function( assert ) {\n  assert.ok( testValue == 42, \"testValue = \" + testValue);\n});\nI wonder what the difference between both examples is from the perspective of the caller? Is there some qualitative difference between an async function that ultimately returns a Promise and a function that directly returns a Promise without being async itself?\nThanks for sharing insights.", "createdAt": "2017-06-14T11:51:59Z", "updatedAt": "2017-06-16T23:07:30Z", "closedAt": "2017-06-16T23:07:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sechel", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sechel", "company": null}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-14T13:35:11Z", "contents": "This was a fun one to poke at (thank you for making the JSFiddle!). The case statement in objectType utility needs to be taught about AsyncFunction.\nlet fn = async () => {};\nconsole.log(Object.prototype.toString.call(fn));\n// => \"[object AsyncFunction]\"\nI assume that we want to make AsyncFunction return function (though I'm not sure why we don't return typeof obj in a default: clause there), but others should confirm. Also, I am unsure if we have the ability to target specific tests at specific platforms (e.g. a test that uses untranspiled async function() {} would crash Phantom/IE/etc).  If we can, then a test can be added to this file that uses an async function and adds a logged callback.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-14T15:09:49Z", "contents": "We should update that function to properly handle AsyncFunction. I think defaulting to typeof obj makes sense as well.\nWe currently have tests that feature detect (example, but I am unsure if that pattern will work for testing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-14T19:53:38Z", "contents": "Good news! This issue has been fixed in master by this change. Sadly, I only figured that out after trying in vain to write failing tests \ud83d\ude1d .", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-14T20:14:35Z", "contents": "Since I had already written the tests, I went ahead and submitted them as #1198.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sechel", "authorAssociation": "NONE", "createdAt": "2017-06-16T08:28:11Z", "contents": "Thank you, great!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1201, "url": "https://github.com/qunitjs/qunit/issues/1201", "title": "Parsing errors during `qunit --watch`  crash the watcher.", "contents": "When running qunit --watch some-glob/*.js any errors that occur when the test file is required will crash the watcher process (which must then be restarted manually).\nTo resolve, this line would need to be wrapped in a try/catch block when running with --watch (or always?).", "createdAt": "2017-06-19T15:48:38Z", "updatedAt": "2017-08-07T22:18:22Z", "closedAt": "2017-08-07T22:18:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-20T01:27:11Z", "contents": "We should probably just always do it. In the catch, we should add a failing test that lets the user know we couldn't load the file. We should use a test so that it is logged by the reported and the exitCode gets properly set at the end of the run.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-cli", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1202, "url": "https://github.com/qunitjs/qunit/issues/1202", "title": "assert.push deprecation links to broken pushResult page", "contents": "This broke when we did the docs migration. The assert.push deprecation directs users to http://api.qunitjs.com/pushResult/, should be http://api.qunitjs.com/assert/pushResult instead.", "createdAt": "2017-06-21T22:17:50Z", "updatedAt": "2017-07-04T05:10:50Z", "closedAt": "2017-07-04T05:10:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["good for new contributors", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1203, "url": "https://github.com/qunitjs/qunit/issues/1203", "title": "No try/catch should be respected for returned promises.", "contents": "Given:\nQUnit.test('does stuff', function(assert) {\n  return new Promise((resolve, reject) => {\n    setTimeout(reject, 10, new Error('NOOOOOOOO!!!!!');\n  });\n});\nWhen the \"no try/catch\" option is enabled, we should not install a reject handler on the returned promise (which means the rejection would bubble up naturally).\nI propose that we make Test.prototype.resolvePromise aware of config.notrycatch and avoid adding the reject handler here.", "createdAt": "2017-06-27T16:03:17Z", "updatedAt": "2017-06-27T18:09:55Z", "closedAt": "2017-06-27T18:09:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-27T17:02:48Z", "contents": "Looks like this issue is the same as #1149", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-27T18:08:43Z", "contents": "Closing as a duplicate in favor of #1149. I'll try to see where that issue is at soon (and hopefully move it along).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-27T18:09:55Z", "contents": "Sorry about that! I did try to search but missed that one...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1204, "url": "https://github.com/qunitjs/qunit/issues/1204", "title": "Add assert method for rejection of promises", "contents": "This would support the following:\nQUnit.test('does stuff', function(assert) {\n  assert.throws(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(reject, 10, new Error('NOOOOOOOO!!!!!');\n    });\n  }, /NOOOOOO/);\n});\n\nAn alternative would be to add a assert.rejects, but I feel like transparently supporting this case in assert.throws is more aligned with how we handle things in other areas.", "createdAt": "2017-06-27T16:22:40Z", "updatedAt": "2018-01-07T23:12:27Z", "closedAt": "2018-01-07T23:12:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "platinumazure", "company": null}], "comments_count": 17, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-06-27T18:07:45Z", "contents": "I'm \ud83d\udc4d on this. Should include a docs update with it as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-07-07T04:47:48Z", "contents": "I like the idea of consistency here (return to assert.throws like we return to QUnit.test), but I'm also not sure whether using the throws callback for this is useful.\nIt's there today because QUnit needs to trigger the code and catch an exception. When dealing with async code or promises, this isn't needed. What about passing the promise directly?\nQUnit.test('example', function (assert) {\n  let result = asyncFunction();\n  assert.throws(result, /NOOOOOO/, 'message');\n});\n\nQUnit.test('example 2', function (assert) {\n  let result = new Promise( (resolve, reject) => {\n    setTimeout(reject, 10, new Error('NOOOOOOOO!!!!!'));\n  });\n  assert.throws(result, /NOOOOOO/, 'message');\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T22:37:04Z", "contents": "After thinking about this a big more, I'm actually unsure that augmenting assert.throws is the proper way to validate these scenarios.\nIn particular, I am concerned that by wrapping promises in assert.throws it appears to be synchronous in regards to the test execution. Secondly, it can potentially obfuscate the fact that you are dealing with promises at all. Finally, (this is a minor point) it also doesn't make much sense semantically as the Promise isn't technically \"throwing\", it is being rejected.\nWith those in mind, is there a compelling reason to need this feature instead of simply using .catch() and performing assertions within the catch block?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T22:53:36Z", "contents": "Hmm. I think that same logic applies to assert.throws with synchronous errors. It's roughly the same problem, and you could definitely make the case that there really isn't a reason that you couldn't just wrap your assertions in a  try { } catch(e) { } block.\nUltimately, the reason we need support for rejected promise assertions is the same reason we need assert.throws. The simple thing (that you described) isn't enough. You have to add assertions to both .then (assert.notOk) and to the .catch, you have to have logic to ensure the rejection reason to matches your expected message or regular expression, you have to have logic to ensure the test properly waits for promise completion (either assert.async() or return the promise).\ntldr; it is very error prone to do the right thing.\ntest('...', function(assert) {\n  return somethingReturningAPromise()\n    .then(() => assert.notOk(true, 'should have rejected with \"some message\"'))\n    .catch((reason) => assert.equal(reason.message, \"some message\"));\n});\n^ is annoying code to write, and this is why we have libraries. \ud83d\ude03", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T23:10:00Z", "contents": "Could we create new APIs for promises around asserting that a promise resolves or rejects (possibly supporting a predicate that could be given the resolve/reject arguments and could further validate the result)? That way we can just keep the APIs for promise rejection and exception catching separate.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T23:11:37Z", "contents": "So that makes sense, but I think I'd prefer a separate helper for these scenarios. Maybe assert.rejects? My primary concern in the above is being explicit about asynchronicity. For example:\nassert.throws(() => foo());\nassert.throws(() => bar());\nassert.throws(baz);\nIt is not possible to tell which of the above is asynchronous, which, as I think we've seen in the Ember community, can lead to an awful lot of confusion. It also means that when a Promise is returned we will either have to automatically pause test execution or return a Promise. The former is likely to be relatively confusing as we couldn't prevent execution of code coming after the throws and the latter leads to inconsistent return values.\nI'd much rather have something like the following:\nreturn assert.rejects(promise, /value to compare/, 'message'); // returns a promise", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T23:14:58Z", "contents": "@trentmwillis I don't know if you were replying to my comment or that of @rwjblue, but I basically like your last proposed API. The only issue I have with it is it seems the regular expression would have to be run against the first reject argument, where there could be multiple. So I would want to add a callback form that could take all rejection arguments. But otherwise I really like that API.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T23:17:18Z", "contents": "Just to be clear, I'm not really saying that I think assert.throws should do more things, I'm just saying that it should be easier to make assertions around API's that might reject a promise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T23:19:22Z", "contents": "@platinumazure, sorry, was replying to @rwjblue (timing issues). Also, my understanding is that Promises can only be resolved/rejected with a single value.\n@rwjblue, okay \ud83d\udc4d, so it sounds like adding a new API to specifically improve Promise ergonomics is inline with both of our thinking.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T23:22:03Z", "contents": "@trentmwillis - Generally speaking that API seems good to me. Though we should discuss the exact interface (e.g. should the return value always resolve?)...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T23:30:05Z", "contents": "Also, my understanding is that Promises can only be resolved/rejected with a single value.\n\nOops @trentmwillis, you're right. My mistake.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-08T23:33:43Z", "contents": "Right, they only have one value but it isn't obvious what property folks are wanting to assert against. Oftentimes the rejection value may not be an error instance.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-15T14:44:53Z", "contents": "FWIW, I implemented assert.rejects recently here. The internals are based on what is done in assert.throws but augmented/tweaked to handle promises.\nQUnit.assert.rejects = function(callback, expected, message) {\n  this.test.ignoreGlobalErrors = true;\n\n  let actual;\n  let result = false;\n\n  let done = this.async();\n\n  return Promise.resolve()\n    .then(callback)\n    .then(null, reason => {\n      actual = reason;\n    })\n    .finally(() => {\n      if (actual) {\n        const expectedType = typeof expected;\n\n        // We don't want to validate thrown error\n        if (!expected) {\n          result = true;\n          expected = null;\n\n          // Expected is a regexp\n        } else if (expected instanceof RegExp) {\n          result = expected.test(errorString(actual));\n\n          // Expected is a constructor, maybe an Error constructor\n        } else if (expectedType === 'function' && actual instanceof expected) {\n          result = true;\n\n          // Expected is an Error object\n        } else if (expectedType === 'object') {\n          result =\n            actual instanceof expected.constructor &&\n            actual.name === expected.name &&\n            actual.message === expected.message;\n\n          // Expected is a validation function which returns true if validation passed\n        } else if (expectedType === 'function' && expected.call(null, actual) === true) {\n          expected = null;\n          result = true;\n        }\n      }\n\n      this.pushResult({\n        result,\n        actual,\n        expected,\n        message,\n      });\n\n      this.test.ignoreGlobalErrors = false;\n    })\n    .finally(() => {\n      this.test.ignoreGlobalErrors = false;\n      done();\n    });\n};\n@trentmwillis - Does this seem like a reasonable path forward?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-17T23:47:54Z", "contents": "Hopefully that seemed good, I submitted #1238 with the implementation and docs...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-12-18T15:41:41Z", "contents": "TL;DR: LGTM!\nI agree the current workaround is worth trying to avoid by providing a built-in convenience method. (The workaround  being the idea of returning the promise to QUnit.test after swapping the meaning of resolved and rejected.)\nAt first, I wasn't sure whether assert is the best object for the method to exist on. We do have other assert methods that don't (immediately) assert something (such as async, and expect). But if the method merely provides the inverted promise with an asynchronous assertion chained, that would create a potential usability hazard as the user would need to make sure to still either return the result from assert.reject to QUnit.test or manually attach assert.async to it.\nHowever, I see now that the implementation goes beyond inverting the promise and attaching an assertion to the chain, it also adds async tracking. That was the missing puzzle piece. It does make for a more complex method, but I think in this case that overhead is worth it and makes for a very intuitive method.\nOne thing to keep in mind here is that this further increases the number of async-tracking methods we have in the public API.\nProjects aiming to reduce or avoid multiple async things during tests, will need to keep in mind that assert.rejects is now one more additional pattern to look out for as being indicative of an asynchronous test (e.g. as part of code review). I don't expect that to be a problem, but something to keep in mind (adding complexity is never cost-free).", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-18T17:39:35Z", "contents": "Projects aiming to reduce or avoid multiple async things during tests, will need to keep in mind that assert.rejects is now one more additional pattern to look out for as being indicative of an asynchronous test (e.g. as part of code review). I don't expect that to be a problem, but something to keep in mind (adding complexity is never cost-free).\n\nThanks for this tip, I'll have to see if I need to make any changes in eslint-plugin-qunit for this.\nThat said, I think the implementation of assert.rejects seems to manage its async test nature internally and does not tend to leak that async state. Is that a safe assumption (that the async test callback should always be invoked)? (@rwjblue?)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-18T22:47:19Z", "contents": "That said, I think the implementation of assert.rejects seems to manage its async test nature internally and does not tend to leak that async state.\n\nThere is definitely still async involved (which I think folks will understand with the verbiage used here?) that folks should be aware of (e.g. no guaranteed ordering of the rejection assertions), but yes, the idea here is definitely to hide away the manual shenanigans that folks have to do today when testing rejections.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["component-assert", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1208, "url": "https://github.com/qunitjs/qunit/issues/1208", "title": "Hide skipped tests", "contents": "I'd like to propose a hideskipped tests url parameter that QUnit understands.  We run our tests with saucelabs which has videos of the tests running.  Without being able to hide skipped tests, we are unable to see which test failed.\n\nThis would work just like hidepassed.  Both should be able to be active at the same time.\nLet me know if this sounds reasonable and I can probably submit a pull request.  Thanks!", "createdAt": "2017-07-05T00:04:40Z", "updatedAt": "2018-11-05T19:37:36Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "justinbmeyer", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "justinbmeyer", "company": "Bitovi"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-07-05T00:08:54Z", "contents": "\ud83d\udc4d - This would be very helpful for the various refactoring efforts that we have had in glimmer-vm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-07-05T00:09:46Z", "contents": "An alternative here would be to always show failed tests above the rest (not sure if that breaks other constraints though).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-07-05T02:18:05Z", "contents": "Sounds reasonable to me. However, if we want to add this option to the UI (as we do with hidepassed), then we'll need to do some refactoring as I want to avoid cluttering the UI too much. We'd likely want a multi-select dropdown type feature.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1209, "url": "https://github.com/qunitjs/qunit/issues/1209", "title": "Don't follow prototype chain?", "contents": "Hi\nWhen a test case fails, the 'actual' and 'expected' values gets logged to screen. When these values are objects with many properties/functions on their prototype chains, the logged text gets huge and (always?) pretty irrelevant.\nIs there a way to tell QUnit not to follow prototype chains?\nHere's an example of a way too big logging:\n\"Expected:\n{\n  \"add\": function add( a, b ){\n    [code]\n  },\n  \"addScalar\": function addScalar( a ){\n    [code]\n  },\n  \"addScaledVector\": function addScaledVector( a, b ){\n    [code]\n  },\n  \"addVectors\": function addVectors( a, b ){\n    [code]\n  },\n  \"angleTo\": function angleTo( a ){\n    [code]\n  },\n  \"applyAxisAngle\": function applyAxisAngle( a, b ){\n    [code]\n  },\n  \"applyEuler\": function applyEuler( a ){\n    [code]\n  },\n  \"applyMatrix3\": function applyMatrix3( a ){\n    [code]\n  },\n  \"applyMatrix4\": function applyMatrix4( a ){\n    [code]\n  },\n  \"applyProjection\": function applyProjection( a ){\n    [code]\n  },\n  \"applyQuaternion\": function applyQuaternion( a ){\n    [code]\n  },\n  \"ceil\": function ceil(){\n    [code]\n  },\n  \"changeBasis\": function changeBasis( a, b, c, d ){\n    [code]\n  },\n  \"clamp\": function clamp( a, b ){\n    [code]\n  },\n  \"clampLength\": function clampLength( a, b ){\n    [code]\n  },\n  \"clampScalar\": function clampScalar( a, b ){\n    [code]\n  },\n  \"clone\": function clone(){\n    [code]\n  },\n  \"constructor\": function Vector3( a, b, c ){\n    [code]\n  },\n  \"copy\": function copy( a ){\n    [code]\n  },\n  \"cross\": function cross( a, b ){\n    [code]\n  },\n  \"crossVectors\": function crossVectors( a, b ){\n    [code]\n  },\n  \"distanceTo\": function distanceTo( a ){\n    [code]\n  },\n  \"distanceToManhattan\": function distanceToManhattan( a ){\n    [code]\n  },\n  \"distanceToSquared\": function distanceToSquared( a ){\n    [code]\n  },\n  \"divide\": function divide( a ){\n    [code]\n  },\n  \"divideScalar\": function divideScalar( a ){\n    [code]\n  },\n  \"dot\": function dot( a ){\n    [code]\n  },\n  \"equals\": function equals( a ){\n    [code]\n  },\n  \"floor\": function floor(){\n    [code]\n  },\n  \"fromArray\": function fromArray( a, b ){\n    [code]\n  },\n  \"fromAttribute\": function fromAttribute( a, b, c ){\n    [code]\n  },\n  \"fromBufferAttribute\": function fromBufferAttribute( a, b, c ){\n    [code]\n  },\n  \"getColumnFromMatrix\": function getColumnFromMatrix( a, b ){\n    [code]\n  },\n  \"getComponent\": function getComponent( a ){\n    [code]\n  },\n  \"getPositionFromMatrix\": function getPositionFromMatrix( a ){\n    [code]\n  },\n  \"getScaleFromMatrix\": function getScaleFromMatrix( a ){\n    [code]\n  },\n  \"isVector3\": true,\n  \"length\": function length(){\n    [code]\n  },\n  \"lengthManhattan\": function lengthManhattan(){\n    [code]\n  },\n  \"lengthSq\": function lengthSq(){\n    [code]\n  },\n  \"lerp\": function lerp( a, b ){\n    [code]\n  },\n  \"lerpVectors\": function lerpVectors( a, b, c ){\n    [code]\n  },\n  \"max\": function max( a ){\n    [code]\n  },\n  \"min\": function min( a ){\n    [code]\n  },\n  \"multiply\": function multiply( a, b ){\n    [code]\n  },\n  \"multiplyScalar\": function multiplyScalar( a ){\n    [code]\n  },\n  \"multiplyVectors\": function multiplyVectors( a, b ){\n    [code]\n  },\n  \"negate\": function negate(){\n    [code]\n  },\n  \"normalize\": function normalize(){\n    [code]\n  },\n  \"project\": function project( a ){\n    [code]\n  },\n  \"projectOnPlane\": function projectOnPlane( a ){\n    [code]\n  },\n  \"projectOnVector\": function projectOnVector( a ){\n    [code]\n  },\n  \"reflect\": function reflect( a ){\n    [code]\n  },\n  \"rejectOnVector\": function rejectOnVector( a ){\n    [code]\n  },\n  \"round\": function round(){\n    [code]\n  },\n  \"roundToZero\": function roundToZero(){\n    [code]\n  },\n  \"set\": function set( a, b, c ){\n    [code]\n  },\n  \"setComponent\": function setComponent( a, b ){\n    [code]\n  },\n  \"setEulerFromQuaternion\": function setEulerFromQuaternion(){\n    [code]\n  },\n  \"setEulerFromRotationMatrix\": function setEulerFromRotationMatrix(){\n    [code]\n  },\n  \"setFromCylindrical\": function setFromCylindrical( a ){\n    [code]\n  },\n  \"setFromMatrixColumn\": function setFromMatrixColumn( a, b ){\n    [code]\n  },\n  \"setFromMatrixPosition\": function setFromMatrixPosition( a ){\n    [code]\n  },\n  \"setFromMatrixScale\": function setFromMatrixScale( a ){\n    [code]\n  },\n  \"setFromSpherical\": function setFromSpherical( a ){\n    [code]\n  },\n  \"setLength\": function setLength( a ){\n    [code]\n  },\n  \"setScalar\": function setScalar( a ){\n    [code]\n  },\n  \"setX\": function setX( a ){\n    [code]\n  },\n  \"setY\": function setY( a ){\n    [code]\n  },\n  \"setZ\": function setZ( a ){\n    [code]\n  },\n  \"sub\": function sub( a, b ){\n    [code]\n  },\n  \"subScalar\": function subScalar( a ){\n    [code]\n  },\n  \"subVectors\": function subVectors( a, b ){\n    [code]\n  },\n  \"toArray\": function toArray( a, b ){\n    [code]\n  },\n  \"transformDirection\": function transformDirection( a ){\n    [code]\n  },\n  \"unproject\": function unproject( a ){\n    [code]\n  },\n  \"x\": 0,\n  \"y\": 0,\n  \"z\": 0\n}\"", "createdAt": "2017-07-05T21:53:52Z", "updatedAt": "2017-11-12T13:49:41Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "loldrup", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "loldrup", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "rwjblue", "company": "@linkedin"}], "comments_count": 8, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-07-06T02:16:50Z", "contents": "Currently, there is no way to prevent comparison of prototypes. In theory, however, we should be able to optimize our diffs and equality checks by only check an object's \"own\" properties if it is being compared with an object that has the same constructor (and therefore prototype chain).\nI'd be open to a PR with the above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "loldrup", "authorAssociation": "NONE", "createdAt": "2017-07-06T02:33:00Z", "contents": "Don't you mean:\nIF\nit is being compared with an object that has the same constructor\nTHEN\nwe should only check an object's \"own\" properties", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-07-06T02:37:07Z", "contents": "Yep. Same thing, just different ordering of words.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-07-07T04:39:53Z", "contents": "Just for the record, QUnit's deep comparator does not needless follow prototype chains. It does a recursive comparison on each property. Only when a property isn't equal will it traverse the referenced object. This means that prototype chains, naturally, are not followed if they are the same.\nHowever, this issue is specific to the logging of the results once a difference is determined. It seems in that case we always dump the full object, regardless of how deep the comparator had to traverse.\nThe \"Diff\" already makes it easier to spot the difference, but we still dump an entire object \u2013 three times: Expected, Result, Diff.\nQUnit.test('example', function (assert) {\n  let i = 1000;\n  let list = [];\n  while(i--) { list.push(Math.random()); }\n  assert.deepEqual(\n    { a: 1, b: 3, list: list  },\n    { a: 1, b: 2, list: list }\n  );\n});\nCurrent display:\n\nAdding a limit the \"diff context\" of maybe 5-10 lines should be an easy win.\n--- Result\n+++ Expected\n  {\n    \"a\": 1,\n-  \"b\": 3,\n+  \"b\": 2,\n    \"list\": [\n      0.14316515211776704,\n      0.9565818836785518,\nIf we only displayed the diff, then I'd be worried about whether it is still easy to understand where the difference was found in the values. However, we already print the full objects in the \"Expected\" and \"Result\" section, that shouldn't be an issue.\nWe might actually want to consider somehow collapsing the non-Diff sections by default, or at least limiting their height on-screen (max-height with overflow-y auto? - undo height limit on hover/focus?)\nNot sure what to do for the CLI reporter. Perhaps hide Expected/Actual by default there, and only display the diff?\nJust a few ideas :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "loldrup", "authorAssociation": "NONE", "createdAt": "2017-07-07T04:58:29Z", "contents": "You suggest some ways for limiting the printed output.\nMay I suggest that you simply never print prototypal properties, unless the\ndifference was found on the prototype chain?\n\nAnother question: what's the rationale for ever including the prototype\nchain in the equality comparison? Prototype objects seems to me to be\nsomething that is decidedly *external* to an object.\nWhen we ask QUnit to compare two bananas, when will it then ever be\nrelevant to also compare the two monkeys holding them, and the two jungles\nin which the monkeys live?\nEven if relevant use cases could be found, would it then still be a good\nidea to force this behaviour on all other use cases as well?\n\nDen 07/07/2017 6.40 AM skrev \"Timo Tijhof\" <notifications@github.com>:\n\u2026\n Just for the record, QUnit's deep comparator does not needless follow\n prototype chains. It does a recursive comparison on each property. Only\n when a property isn't equal will it traverse the referenced object. This\n means that prototype chains, naturally, are not followed if they are the\n same.\n\n However, this issue is specific to the logging of the results once a\n difference is determined. It seems in that case we always dump the full\n object, regardless of how deep the comparator had to traverse.\n\n The \"Diff\" already makes it easier to spot the difference, but we still\n dump an entire object \u2013 *three times*: Expected, Result, Diff.\n\n QUnit.test('example', function (assert) {\n   let i = 1000;\n   let list = [];\n   while(i--) { list.push(Math.random()); }\n   assert.deepEqual(\n     { a: 1, b: 3, list: list  },\n     { a: 1, b: 2, list: list }\n   );\n });\n\n Current display:\n [image: screen shot 2017-07-06 at 21 29 58]\n <https://user-images.githubusercontent.com/156867/27943242-4fad79ce-6292-11e7-8d3f-8f26ba7f852e.png>\n\n Adding a limit the \"diff context\" of maybe 5-10 lines should be an easy\n win.\n\n --- Result+++ Expected\n   {\n     \"a\": 1,-  \"b\": 3,+  \"b\": 2,\n     \"list\": [\n       0.14316515211776704,\n       0.9565818836785518,\n\n If we only displayed the diff, then I'd be worried about whether it is\n still easy to understand where the difference was found in the values.\n However, we already print the full objects in the \"Expected\" and \"Result\"\n section, that shouldn't be an issue.\n\n We might actually want to consider somehow collapsing the non-Diff\n sections by default, or at least limiting their height on-screen\n (max-height with overflow-y auto? - undo height limit on hover/focus?)\n\n Not sure what to do for the CLI reporter. Perhaps hide Expected/Actual by\n default there, and only display the diff?\n\n Just a few ideas :)\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#1209 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AAP_NK1a5smyvYgiMW5p80psOKiJNKACks5sLbafgaJpZM4OO6qZ>\n .", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "loldrup", "authorAssociation": "NONE", "createdAt": "2017-11-11T17:14:39Z", "contents": "Krinkle wrote:\n\"The \"Diff\" already makes it easier to spot the difference\"\nFor numeric values, I find this not to be true, because the diff will start mixing the individual digits of each number. Because of this, I rarely use the 'diff' display (as I mostly work with numbers). I instead look at the raw 'actual' and 'expected' values. Therefore, I would be sad if they were to be automatically hidden or cropped from now on.\nWould it make more sense to display the algebraic numeric difference? (as obtained by subtracting one number from the other)\nJon wrote:\n\"May I suggest that you simply never print prototypal properties, unless the difference was found on the prototype chain?\"\nAllow me to elaborate on this statement:\nIF both 'expected' and 'actual' has a prototype, traverse them and show the individual differences that might be between them.\nIF there is no difference, I guess we can simply omit displaying both of the prototypes?\nIF only one of the objects has a prototype: As I understand it, this situation is currently interpreted thus: \"Well, since one of the objects didn't have a prototype, the entire prototype chain of the other object can be considered to be one big difference on its own. So we display the whole thing!\"\nWhile I understand that it can be appropriate to generate this view (because, well, there actually is a difference between the two objects here), perhaps in this case, the view of the prototype could be hidden by default..? A single line could note the user that the prototype is there and is \"different\". Then, when clicking that line, it expands to show the full prototype chain.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "loldrup", "authorAssociation": "NONE", "createdAt": "2017-11-12T05:58:34Z", "contents": "Hmm, I have just learned(1) that even objects created from object literals have prototype objects (are there any object that doesn't have a prototype?)\nThis means that it will practically never happen that only one object has a prototype. This leaves us with two cases:\nA. the two objects have similar prototypes.\nB. the two objects have differing prototypes.\nThus my preference boils down to this: the display of any differences in the prototype chain should default to being collapsed. One can then click it to expand its view.\n(1):\n\"The prototypes of the clones are always Object.prototype, which is the default for objects created via object literals:\n\nObject.getPrototypeOf(clone1) === Object.prototype\ntrue\nObject.getPrototypeOf(clone2) === Object.prototype\ntrue\nObject.getPrototypeOf({}) === Object.prototype\ntrue\"\nhttp://2ality.com/2016/10/rest-spread-properties.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-11-12T13:49:41Z", "contents": "are there any object that doesn't have a prototype?\n\nYes. Object.create(null) returns an object without a prototype.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "component-diff", "component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1211, "url": "https://github.com/qunitjs/qunit/issues/1211", "title": "Better navigation with arrow keys", "contents": "I use QUnit for testing on a specific device (based on Webkit) without keyboard and mouse (using remote control unit).\nRemote control can emulate arrow keys and Enter key presses.\nPlease consider to improve navigation on HTML report with arrow keys.\nCurrently it's not possible to operate in input field, drop-down list, collapse tests and so on.", "createdAt": "2017-07-13T17:49:09Z", "updatedAt": "2017-08-08T22:29:21Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "zoulja", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "zoulja", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T22:29:21Z", "contents": "Would you mind working on this? Since this doesn't sound like a common use case, we're unlikely to get to it any time soon, but it does sound useful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1213, "url": "https://github.com/qunitjs/qunit/issues/1213", "title": "Provide more descriptive feedback when not passing callback to test of todo", "contents": "Currently if you don't pass a callback to either todo or test, you get an unclear error message that essentially means you didn't pass a callback function. We should provide more explicit feedback to useres.\n\n(Note: I imagine this doesn't happen often with test, but with todo I can see it happening fairly regularly.)", "createdAt": "2017-07-17T17:23:46Z", "updatedAt": "2017-07-25T20:45:15Z", "closedAt": "2017-07-25T20:45:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1216, "url": "https://github.com/qunitjs/qunit/issues/1216", "title": "`qunit --reporter` to list available reporters", "contents": "After running qunit --help I see the following description for the --reporter option:\n    -r, --reporter <name>  specify the reporter to use; if no match is found a list of available reporters will be displayed\n\nThis leads me to believe that I can run qunit --reporter and receive a list of known reporters (I was unsure which were supported with a default installation). However, the actually output is:\n  error: option `-r, --reporter <name>' argument missing\n\n\nTo work around this, we have to specify a known bogus option to get the list of available reporters:\n% qunit --reporter \"asdf\"                                                                                                                                                                                                                             \n\nNo reporter found matching \"asdf\".\nAvailable reporters from JS Reporters are: console, tap", "createdAt": "2017-07-31T20:06:05Z", "updatedAt": "2017-08-04T19:20:55Z", "closedAt": "2017-08-04T15:53:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-07-31T22:02:56Z", "contents": "I agree I'd be nice to display the available reporters for all possible error scenarios regarding the --reporter parameter (specifically, both for parameter missing and invalid parameter value errors).\nHowever, the parameter missing case might be tricky given this is probably detected earlier before and without involving the reporter code.\nMore to your original point: We should simply list the available reporters directly in the --help output instead of leaving you with a not-so-useful description of what might happen when you specify a wrong value. Adding it there will likely remove the need for wanting to list them with qunit --reporter given the only reason one would intentionally run it without a parameter value right now is due to the misleading text you found on --help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-04T03:18:06Z", "contents": "I've opened #1217 to fix this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-cli", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1219, "url": "https://github.com/qunitjs/qunit/issues/1219", "title": "Regression: Error results shouldn't contain actual/expected", "contents": "QUnit version: 2.4.0\n\nI believe since QUnit 2.x, there has been a minor change in the shape of the resultInfo object passed to QUnit.log handlers. Previously, the expected property would not exist if the log entry was the result of catching an exception or some other violation that is not the result if an explicit Assert method call. Typically through pushFailure.\nHowever, this has since been normalised, and the object now always gets a default null actual/expected.\nThis is causing odd outputs like the following, which very confusingly claim there was a (seemingly s) assertion where an actual value null matched the expected value null, despite there having been no such assertion.\nMinimal test case:\nQUnit.test('example', function (assert) {\n  assert.ok(true);\n  assert.ok(false);\n  throw new Error('Rebase');\n});\n\nHTML reporter (built-in):\n\nCommand-line output using Karma and karma-qunit:\n\nI thought at first that maybe the info.result property being false is indicative of a general failure, but that's not the case given it is also false for a regular assertion failure.\nLooking more closely at the actual code, I see that both our HTML reporter, as well as the karma-qunit formatter, make the same (now incorrect) assumption that the expected properly may not exist.\nhttps://github.com/qunitjs/qunit/blob/2.4.0/reporter/html.js#L764-L775\nhttps://github.com/karma-runner/karma-qunit/blob/52eec0e8bc6d4f854de9cae2ff2213e2261e1a5b/src/adapter.js#L83\n/cc @jdforrester", "createdAt": "2017-08-12T16:43:36Z", "updatedAt": "2017-10-19T23:27:43Z", "closedAt": "2017-08-16T05:56:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-08-15T01:25:41Z", "contents": "I believe this is a duplicate of #1166, which I recently noted is a regression and should be fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "status-declined", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1221, "url": "https://github.com/qunitjs/qunit/issues/1221", "title": "QUnit Plugins (or \"Setup Step\") in CLI", "contents": "On the QUnit website we have a list of plugins that are easy to use in the browser; you simply load an additional asset which then configures QUnit. Now that we have a CLI, we should have a prescribed approach for enabling plugins/API extensions in Node.\nI have some ideas on how to approach this and will come back to document them later, but I wanted to open this issue now as a reminder and in case anyone else has thoughts/ideas on how to approach this.", "createdAt": "2017-08-24T16:52:15Z", "updatedAt": "2018-04-18T20:30:36Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "john-kurkowski", "company": "@CrowdStrike "}], "comments_count": 3, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T14:52:42Z", "contents": "@trentmwillis - I am curious on what your ideas are here. I'm keen to have this functionality as well, and I also would like to ensure that I can bake whatever discovery mechanism you settle on into ember-qunit...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-02T19:06:40Z", "contents": "Finally circling back to this. I think having a --require option from the CLI is a good first step for this. However, I would like to have two further features supported:\n\nA .qunitrc (name TBD) config file that allows users to define options that are then used by the CLI without having to be manually entered\n(Maybe) An auto-discovery mechanism whereby we automatically --require packages that have qunit-plugin or some other predetermined keyword in their package.json", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "john-kurkowski", "authorAssociation": "NONE", "createdAt": "2018-04-18T20:30:36Z", "contents": "Would love a .qunitrc. There are QUnit.config options that the CLI currently doesn't let me supply, like hidepassed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-cli", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1222, "url": "https://github.com/qunitjs/qunit/issues/1222", "title": "Support CLI --require flag", "contents": "This is a feature request for the QUnit CLI to support a --require flag, similar to mocha's CLI and the node binary itself.\nThe flag itself is pretty simple. It just require()s the passed package name before running tests. The flag can be provided multiple times and each package is required in order.\nMy motivating use case for this is being able to run tests against my code without having to orchestrate a build pipeline.\nFor example, to use QUnit to test my TypeScript projects, I have to make sure I always transpile both source and tests to JavaScript first before running the CLI. It's easy to forget and end up testing stale code, which can be frustrating. Alternatively I can set up something like testem or Broccoli to orchestrate this for me, but that's a fair bit of complexity when starting a new project and is another tool contributors need to learn in addition to QUnit.\nIn comparison, with Mocha I can include the --require ts-node/register flag and all of my tests and source code get transpiled on demand via a require hook, which is both simple to set up and avoids the problem of testing stale code.", "createdAt": "2017-09-07T12:12:02Z", "updatedAt": "2018-03-06T18:30:49Z", "closedAt": "2018-03-06T18:30:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tomdale", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tomdale", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-09-10T04:33:23Z", "contents": "This is essentially what I was going to propose in #1221, though a bit smaller in scope. I would like for us also to consider a config file where you can specify these sorts of things, but that can be tracked separately from this specific feature.\nPRs welcome!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-02T19:02:39Z", "contents": "I've opened a PR for this feature: #1271.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["HEART"], "labels": ["component-cli", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1224, "url": "https://github.com/qunitjs/qunit/issues/1224", "title": "Attributes on qunit-fixture are leaked across tests.", "contents": "The #qunit-fixture contents are guaranteed to be reset between each test back to its original contents. This helps DOM leaks since any elements added to qunit-fixture during a test run are cleaned up at the end of each test.\nHowever, in some cases attributes are added to qunit-fixture. Since we are only resetting innerHTML these attributes are never cleared and leak between tests.  This results in cascading failures for Ember (due to helpful assertions that are done by checking for the presence of a given attribute).\nThe goal of this issue is to confirm that this is something that the maintainers are in favor of fixing, and to determine the best approach.\n\nPossible implementations:\n\nChange the current system to use outerHTML instead of innerHTML, remove the existing #qunit-fixture and re-add it (in the same location) using the original outerHTML.\nTrack the list of attributes before the test, and reset the attributes after the test.", "createdAt": "2017-10-10T13:47:49Z", "updatedAt": "2018-01-17T01:17:18Z", "closedAt": "2018-01-17T01:17:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-10T13:48:18Z", "contents": "I personally favor the first option (it seems like it would be the simplest path forward, and would be compatible across our supported browsers)...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-10-10T15:42:13Z", "contents": "I consider this a bug. The first approach seems reasonable. The only downside is that you can't reuse the DOM reference between each test, but in general I would consider that a feature to encourage test independence.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-13T00:25:28Z", "contents": "Awesome, thank you for confirming (and suggesting a path forward).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-10T18:24:09Z", "contents": "Submitted #1250 with a fix for this...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1226, "url": "https://github.com/qunitjs/qunit/issues/1226", "title": "Counter for expected assertions when using `step(..)` / `verifySteps(..)` is surprising (and undocumented!)", "contents": "Tell us about your runtime:\n\nQUnit version: 2.4.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Node 8.6.0, Chrome 61.\nHow are you running QUnit? (e.g., script, testem, Grunt): custom npm script\n\nWhat are you trying to do?\nI'm trying to use the step(..) / verifySteps(..) API, but I had a failure related to the number of expected assertions.\nThe documentation for this feature doesn't mention the impact on expected assertion count at all. So at a minimum, the docs need to be updated. But I also think the current behavior is counter-intuitive.\nCode that reproduces the problem:\nQUnit.test( \"verify steps\", function test(assert){\n    assert.step( \"do stuff 1\" );\n    assert.step( \"do stuff 2\" );\n\n    assert.expect( 1 );  // or 2\n    assert.verifySteps( [\"do stuff 1\",\"do stuff 2\"] );\n} );\n\n// test fails:\n//   Expected 1 assertions, but 3 were run\nWhat did you expect to happen?\nI assumed the number of assertions to expect would either correlate to the number of step(..) calls (2), OR to the number of verifySteps(..) calls (1).\nWhat actually happened?\nThe failure error message says 3, not 1 or 2. So clearly the counter is incrementing with both the step(..) calls and the verifySteps(..) calls.\nThis feels very strange and surprising to me. Even if it had been documented that way, I think it leads to more confusion with test authoring. It should consider only one or the other, not both.\n\n\nThe argument for using only the step(..) calls in the counter:\nstep(..) is kinda like an ok( true, .. ) call, so each time step(..) happens, make sure it's counted. If you know there are 5 steps to some algorithm, it makes intuitive sense to increase your expected count by 5.\nMoreover, it doesn't make sense to include verifySteps(..) in this count in the same way that the call to assert.expect(..) doesn't itself get included in the count.\n\n\nThe argument for using only the verifySteps(..) calls in the counter:\nstep(..) is conceptually like just pushing an entry into an array. We haven't verified anything yet. There's no true or false passing that's happening at that point. The assertion doesn't happen until you call the verifySteps(..) call, which is conceptually like calling deepEqual(..) on the array that step(..) is pushing into.\nUsually you make lots of step(..) calls, but only one verifySteps(..) call. So the counter should only increment once with that call, regardless of how many step(..)s there are.\nMoreover, you're already implicitly counting the number of step(..) calls that happened, because the only way entires get into the internal array you're comparing to is by calling step(..), so the verifySteps(..) is already checking that the number -- not just the order! -- of step(..) calls is correct. No need for that to be included in the count.\n\n\nI think either of these lines of argument is compelling. Personally, I think (2) is how my brain works. The style of how I lay out my tests, my assertions are all collected together at the end, so I expect to be able to see the same number of assertions listed, line-by-line, as what I pass to expect(..). If step(..) is included in that count, I have to look all over other parts of the test code to verify that my number matches. This is clunky.", "createdAt": "2017-10-18T13:18:51Z", "updatedAt": "2018-12-29T01:46:19Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 7, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-10-19T20:47:28Z", "contents": "Thanks for the detailed explanation! When we originally implemented this feature, I didn't think much about the impact on expected assertion counts, so we just went with the default which is to increment the internal counter for any assertion calls.\nI agree that the reasoning in (2) makes sense, however, since this would now be a breaking change we will have to wait for QUnit 3.0 to be released before making the change. In the interim, we will add a note the documentation that calls out the behavior.\n@qunitjs/qunit-team if any of you all have thoughts on how we should count these assertions, please chime in \ud83d\ude04", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-10-20T02:01:38Z", "contents": "I've been thinking about what API change could help here. The wider problem, I think, is that when an Assert method internally uses (multiple) other assertions, the count can be confusing. I too agree that approach (2) seems preferable here. Perhaps an (invisible) abstraction over the Assert class would help? A proxy to differentiate between direct calls on the assert parameter, and internal calls. This subclass would increment the counter for certain methods and then forward the call. Once inside, subsequent calls bypass the counter.\nHowever, for the particular issue with step() and expect(), my first feeling is that we should discourage their use. When it comes to unit testing, I find myself taking an unusually conservative stance. It isn't a place I enjoy abstractions or utilities. It's a place for simple and strict code. Nothing about the outcome of assertion should be hidden. Somewhat off-topic, but I wrote about methods like assert.ok, assert.regexp and asssert.notEqual and their problems. As for assert.step(), I love the strictness it symbolises. For example, consider the following:\nQUnit.test('bad example', function (assert) {\n  var obj = new Example();\n  obj.here(function (val) {\n    assert.ok(val);\n  });\n  obj.there(function (val) {\n    assert.ok(val);\n  });\n});\nWe don't know in which order things happen., how often they happen, or what value is received. We don't even know when one of them fails.\nexpect()\nFirstly, I'd say assertions never belong in a nested callback[1]. Moving assertions out avoids assertions being skipped and naturally produces an assertion failure if the assignment didn't happen.\nIn addition, not having nested assertions also makes assert.expect() obsolete. I've never liked declaring an expectCount, but until recently I did it and enforced it via config.requireExpects, because it felt necessary. QUnit didn't have very good state tracking back when I first used it. The assertion methods were global and context-less. Failure could easily happen undetected. The expectCount was a quick hack to ensure some confidence in the test results.\nIf you keep assertions to the top-level, the only way an assertion can be skipped is by an early abort, which QUnit has always caught.\nQUnit.test('example', function (assert) {\n  var x = false, y = false, obj = new Example();\n  obj.here(function (val) {\n    x = val;\n  });\n  obj.there(function (val) {\n    y = val;\n  });\n  assert.strictEqual('x', x);\n  assert.strictEqual('y', y);\n});\nThis still doesn't assert the order or frequency of events. One could use assert.expect() to solve the frequency issue.\nstep()\nA more elegant solution than expect() would be to use an array and perform a deep comparison. That also solves the order issue.\nQUnit.test('example', function (assert) {\n  var log = [];\n  var obj = new Example();\n  obj.here(function (val) {\n    log.push({ here: val });\n  });\n  obj.there(function (val) {\n    log.push({ there: val });\n  });\n  assert.deepEqual(\n    [ { here: 'x' }, { there: 'y' } ],\n    log\n  );\n});\nI absolutely love this pattern and can't recommend it enough. It's simple and yet very strict. And is in fact what assert.step() and assert.verifySteps() do internally. However, I don't see much added value in abstracting this via a built-in method. And coincidentally, avoiding them avoids the problems detailed in this issue.\nI do acknowledge the wider problem of Assert methods making other assertions, and that definitely calls for a solution. But, while we might find other use cases for such abstraction, it seems right now the only use case is assert.expect().\n[1]: Except in a promise callback, but can be verified by QUnit if returned from the test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-10-20T03:38:34Z", "contents": "FWIW, I have never used expect(..) along with nested (conditional or async) assertions to verify stuff happened. Every now and then an assertion has to be buried, but that's rare. Similarly, I wouldn't use async(number) with multiple done() calls. I always prefer to do my assertions at the top level if I can manage it, and those should hopefully be enough to verify if stuff happened or not.\nNow that I've found the step(..) / verifySteps(..) approach, it seems much more appropriate for that kind of verification. I'll say though that this is because I rarely have the kind of racy testing where I'm verifying only that all occur but the order could be indeterminate. If I had that kind of testing, clearly nested assertions (async(number) + done()s) would be preferable to step(..).\nBut as to the bigger point of if expect(..) should be discouraged, I only use it as a verification (and yes it is a maintenance hazard) against making sure I didn't either forget to add an intended test, or accidentally added/removed one that I didn't account for in the expect. When editing a test, sometimes I update the expect first, then add the assertion(s), sometimes the reverse. But in all cases, it's like a checksum on my intention vs action.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-10-20T03:48:44Z", "contents": "BTW, in case it's useful context, here's my general pattern for my asynchronous tests:\nQUnit.test( \"something\", async function test(assert){\n    var done = assert.async();\n\n    var somethingExpected = whatever;\n\n    try {\n        var somethingActual = whateverAsyncPromise();\n        somethingActual = await somethingActual;\n    }\n    catch (err) {\n        assert.expect(1);\n        assert.pushResult({ result: false, message: (err.stack ? err.stack : err.toString()) });\n        done();\n        return;\n    }\n\n    assert.expect(1);\n    assert.strictEqual(somethingActual,somethingExpected,\"hello!\");\n\n    done();\n} );\nBTW, I dunno if I was doing something wrong, but I added the try..catch handling bit to my pattern because it didn't appear that QUnit was smart enough to capture the promise from the test's async function and recognized if it was rejected because of an exception... those got swallowed.\nIf that's supposed to work, it wasn't for me. If that's not supposed to work, I think that could be a useful feature to consider. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2017-10-20T04:28:18Z", "contents": "@getify Yep, I would also expect that to work. The following should do it:\nQUnit.test(\"something\", async function (assert) {\n  var something = await whateverAsyncPromise();\n\n  assert.strictEqual(something, \"whatever\", \"hello!\");\n});\nI haven't confirmed it myself. But we already support explicitly returning a Thenable from the test callback. Using an async function should behave the same way. It's even documented at https://api.qunitjs.com/QUnit/test.\nQUnit will wait for the returned promise (async function) to settle. It will also assert that it gets resolved. It will detect a rejection (async exception) and reports its details. I would assume no async done() or try/catch/pushResult is needed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-10-20T05:56:36Z", "contents": "@Krinkle I think I may have found a bug related to that, will file separately in case. :)\nFiled: #1229", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-10-20T13:58:50Z", "contents": "Pleased to report that by removing the assert.async() parts, my test structure is now simpler:\nQUnit.test( \"something\", async function test(assert){\n    var somethingExpected = whatever;\n\n    var somethingActual = whateverAsyncPromise();\n    somethingActual = await somethingActual;\n\n    assert.expect(1);\n    assert.strictEqual(somethingActual,somethingExpected,\"hello!\");\n} );\nThanks for the suggestion, @Krinkle!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert"], "milestone": {"id": "MDk6TWlsZXN0b25lMTk1OTQxMA==", "title": "3.0", "description": "", "createdAt": "2016-08-24T02:20:15Z", "dueOn": null, "number": 9, "closed": false}}, {"repo_name": "qunitjs/qunit", "issue_id": 1227, "url": "https://github.com/qunitjs/qunit/issues/1227", "title": "`verifySteps(..)` doesn't reset the internal list of steps (and docs are silent on topic!)", "contents": "Tell us about your runtime:\n\nQUnit version: 2.4.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Node 8.6.0, Chrome 61.\nHow are you running QUnit? (e.g., script, testem, Grunt): custom npm script\n\nWhat are you trying to do?\nI'm trying to use the step(..) / verifySteps(..) API, but I had a surprise test failure with verifySteps(..) called multiple times, interspersed with more step(..) calls.\nThe documentation for this feature doesn't mention what happens in this use-case. So at a minimum, the docs need to be updated. But I also think the current behavior is counter-intuitive.\nCode that reproduces the problem:\nQUnit.test( \"verify steps\", function test(assert){\n    assert.expect( 5 );\n\n    assert.step( \"do stuff 1\" );\n    assert.step( \"do stuff 2\" );\n    assert.verifySteps( [\"do stuff 1\",\"do stuff 2\"] );\n\n    assert.step( \"do stuff 3\" );\n    assert.verifySteps( [\"do stuff 3\"] );\n} );\n\n// test fails:\n//   expected: [do stuff 3]\n//   actual: [do stuff 1,do stuff 2,do stuff 3]\nWhat did you expect to happen?\nI assumed that the call to verifySteps(..) corresponded to any previous calls to step(..) calls, and that once verifySteps(..) had been called, all those step(..) calls have now been verified, and there's no more reason to check them. Thus, a later call to verifySteps(..) would only verify any subsequent calls to step(..). IOW, I expected that the internal list would be reset after each verifySteps(..) call.\nWhat actually happened?\nThe internal list is not reset, clearly. I can't think of any use-case for why I'd want to call verifySteps(..) multiple times, OTHER THAN if I wanted to verify independent groups of steps. I can't imagine any case where I don't want the internal list to be reset.\nMy use-case was that I was indeed expecting the list to be reset, so I could test separate groups of steps. It's quite awkward to have to keep including the whole running list of step values in all subsequent verifySteps(..) calls.\nAs far as I can tell, there's no way to manually reset this internal list to serve my use-case. So an alternative to auto-resetting (which I still think is most intuitive), which would avoid this suggestion being a hard breaking change:\n\n\nProvide a resetSteps(..) method so that I could reset after calling verifySteps(..), like calling verifySteps(..).resetSteps() together in one statement, ideally.\n\n\nAdd an additional boolean parameter (though I generally loathe those) to verifySteps(..) that defaults to false, but if passed as true, does the reset.", "createdAt": "2017-10-18T13:36:57Z", "updatedAt": "2017-12-19T16:20:38Z", "closedAt": "2017-12-19T16:18:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "rwjblue", "company": "@linkedin"}], "comments_count": 9, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-18T13:57:27Z", "contents": "Honestly, this seems like a bug to me. I can't imagine why we would want to keep tracking the internal list for any reason whatsoever. With the current behavior undocumented, I feel like we could release this as semver-patch or semver-minor.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-10-19T20:50:51Z", "contents": "I agree that we can treat this as a bug. I don't think I ever thought about potentially calling verifySteps more than once in a given test, so we didn't define that behavior.\nIt makes sense to me, however, that the verification should only be of the steps that occurred since the last verification.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-11-08T20:50:41Z", "contents": "This behavior should be fixed by #1233 in the next release. However, going to reopen this as I think we should document this behavior as well (didn't think to do that in the last PR).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-11-08T20:51:12Z", "contents": "Do we need to fix the docs to explain the new behavior?\nNever mind, @trentmwillis picked up what I was about to put down. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-11-08T21:04:51Z", "contents": "Question: what happens if you've called step(..) but never call verifySteps(..) -- IOW, leaving that internal queue populated?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-11-08T21:37:20Z", "contents": "Each test has a separate internal queue, so it'll just disappear when the test object gets GC'd some time after the test finishes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-11-08T23:05:31Z", "contents": "Hmm. I kinda think that should be a failure condition, shouldn't it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2017-11-08T23:28:39Z", "contents": "yeah I brought it up because I kinda think it should be a failure. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T16:20:38Z", "contents": "@getify @rwjblue Could you please open a new issue for discussing whether assert.step() without assert.verifySteps() should result in a test failure? Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1228, "url": "https://github.com/qunitjs/qunit/issues/1228", "title": "Provide a public API for manually advancing test execution ", "contents": "Tell us about your runtime:\n\nQUnit version: 2.4.0\nWhat environment are you running QUnit in? (e.g., browser, Node): both\nHow are you running QUnit? (e.g., script, testem, Grunt): testem\n\n\nWhat are you trying to do?\nI'm trying to run the tests and pause after each test. Then I need to manually resume the tests.\nI've tried using QUnit.config.blocking = true; after a test is finished. It works as expected. The tests are paused. But there's no way to tell QUnit to resume the execution of tests. Setting QUnit.config.blocking to false doesn't help. Looking at this code it seems like QUnit stops polling for the queue when blocking is set to true.\nWhat are you proposing?\nExpose the advance method from src/core/processing-queue.js as a public API. Maybe add some checks to make sure advance is used correctly (e.g. it can't be called when a test is already running).", "createdAt": "2017-10-19T17:25:54Z", "updatedAt": "2017-10-20T07:22:22Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "mdebbar", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mdebbar", "company": "@google "}, {"login": "platinumazure", "company": null}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-19T17:32:54Z", "contents": "Have you tried using assert.async()?\nYou could use that in afterEach to stop the test processing and pass the returned callback function to whatever validation function or event handler needs it.\n// Pause tests for 1 second in between each test\nQUnit.module( \"my module\", function( hooks ) {\n    hooks.afterEach(function( assert ) {\n        const advanceTests = assert.async();\n        setTimeout(advanceTests, 1000);\n    });\n\n    QUnit.test( \"some test\", function( assert ) {\n        assert.ok(true);\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-19T17:37:42Z", "contents": "@platinumazure - Ya, it absolutely allows pausing the test, but there is no way to pause the test after full completion.\nThe goal that @mdebbar is shooting for is to do things use chrome's remote debugging infrastructure to be able to measure memory usage, pending async, pending promises, grab per-test code coverage, etc. This, for example, would allow us to determine if there is leakage between tests. I believe that for this to work we actually need to run after all of the afterEach's run (since those are what are doing much of the cleanup work).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-10-19T20:56:03Z", "contents": "This used to be possible via QUnit.start and QUnit.stop, but those APIs have since changed/been removed. I'm wary of giving full control over processing as it has potential to be a foot-gun from my experience.\nIs the code executing after the tests intended to be async? You could use the QUnit.on('testEnd') callback if it is synchronous.\nIf the code execution needs to be async, then perhaps we should evaluate if the reporting callbacks should support returning Promises. As I believe those callbacks cover any remaining \"gaps\" in the processing timeline.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-19T22:01:32Z", "contents": "Yes, I believe that it needs to be async. I believe that supporting returning promises in the reporting callbacks should probably work fine for this use-case.\n@mdebbar - Can you confirm?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mdebbar", "authorAssociation": "NONE", "createdAt": "2017-10-20T07:22:22Z", "contents": "What @rwjblue said is correct (thanks for clarifying). We want to be able to do async work between tests.\nI like the idea of returning promises from QUnit hooks! Simpler than what I originally had in mind, and less likely to be a foot-gun \ud83d\ude42\nMade a quick POC #1230. I appreciate review and guidance on how to write tests for it. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1229, "url": "https://github.com/qunitjs/qunit/issues/1229", "title": "`assert.async()` + `async function` = gotcha", "contents": "Tell us about your runtime:\n\nQUnit version: 2.4.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Node 8.6.0, Chrome 61.\nHow are you running QUnit? (e.g., script, testem, Grunt): custom npm script\n\nWhat are you trying to do?\nI'm using async function functions for my test functions, but was also (I guess, erroneously) calling assert.async() inside them. Turns out this exposes a gotcha. :(\nCode that reproduces the problem:\nQUnit.test( \"test 1\", async function test(assert){\n    oops();\n} );\n// Exception: `oops` is not defined\n\nQUnit.test( \"test 2\", async function test(assert){\n    var done = assert.async();\n    oops();\n    done();\n} );\n// exception swallowed, test suite aborts silently :(\nWhat did you expect to happen?\nI assumed that if an exception was caught as a promise rejection, the done() would basically implicitly be called to finish out the test.\nWhat actually happened?\nStrangely, the exception is not only swallowed, but the whole test suite basically silently aborts at that point, so any other defined tests after it don't even seem to run. My guess is that this is because it's no longer running due to the exception, but QUnit is waiting (in vain) for the pending done() call to be made, which never will be. :(\nIt seems like it would make sense for QUnit to, upon receiving a rejected promise from a test function, go ahead and assume that any registered/pending async() signals should be completed/canceled/whatever, so the test exception can be reported normally. As a matter of fact, any returned promise that gets resolved, either fulfillment or rejection, should do the same, honestly.\nMoreover, the documentation for assert.async() could probably be improved by mentioning that there's no reason to call it if you're using an async function test function, or you're manually returning a promise/thenable. I didn't know QUnit had that capability built-in, and that function's doc page would have been a great place to mention it to help me avoid this gotcha.", "createdAt": "2017-10-20T06:09:12Z", "updatedAt": "2018-01-18T16:53:27Z", "closedAt": "2018-01-18T16:53:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-10-20T22:50:25Z", "contents": "Interesting edge case! Definitely a bug. I agree that once a rejection occurs, we should remove remaining locks and move forward with the test suite.\nThanks for a minimal reproduction, will be helpful to get this fixed.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-18T22:52:55Z", "contents": "I haven't looked too deeply here, but I believe that #1241 would address the silent swallowing and aborting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2018-01-10T06:07:08Z", "contents": "@rwjblue I just tried the test from the OP using v2.5.0 (which AFAICT includes the #1241 referenced), and it's still broken.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-10T12:05:25Z", "contents": "Thank you for testing! I\u2019ll try to dig in and see what\u2019s going on when I have a free minute...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1231, "url": "https://github.com/qunitjs/qunit/issues/1231", "title": "Need to update grunt-rollup dependency", "contents": "Leaving this as a reminder (or opportunity for someone else), we need to update the version of grunt-rollup we're using. Currently, it has a transitive, floating version dependency on rollup, which means the build can fail when using npm and not yarn (since we have a lock file generated). This caused issues with the latest release and will likely cause issues with the git webhook build.", "createdAt": "2017-10-22T05:33:49Z", "updatedAt": "2018-12-22T20:22:28Z", "closedAt": "2017-12-15T16:27:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1236, "url": "https://github.com/qunitjs/qunit/issues/1236", "title": "Error in testing exceptions?", "contents": "There's an open question (by me) on stack overflow regarding problems in testing exceptions.\nDoes the issue reflect a real Qunit bug or merely a user error?", "createdAt": "2017-12-12T12:59:38Z", "updatedAt": "2018-01-17T01:20:40Z", "closedAt": "2018-01-17T01:20:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "loldrup", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "loldrup", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-17T01:20:40Z", "contents": "@loldrup sorry for the slow reply, but looks like you managed to solve your issue (based on what I saw in the StackOverflow link), so I'm gonna close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1243, "url": "https://github.com/qunitjs/qunit/issues/1243", "title": "Calling `step(..)` but not calling `verifySteps(..)`", "contents": "This issue is forked from #1227.\n\nQuestion: what happens if you've called step(..) but never call verifySteps(..) -- IOW, leaving that internal queue populated?\n\nThe issue is, if you call assert.step(..) one or more times within a test case, but for whatever reason don't call verifySteps(..), does that count as an error (test failure)?\nI argue it definitely should be. I can't think of any success case where you would have called step(..) but not verifySteps(..) and that's still OK.", "createdAt": "2017-12-19T20:50:01Z", "updatedAt": "2018-01-17T16:22:07Z", "closedAt": "2018-01-17T16:22:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "platinumazure", "company": null}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T21:43:39Z", "contents": "Thanks @getify. I agree it probably should be a test failure, but we'll see what the rest of @qunitjs/qunit-team thinks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-12-19T22:16:11Z", "contents": "I would expect it to be a test failure also. FWIW, I've seen this happen a number of times and every time it has been a bug (returned the wrong promise, didn't follow the correct code path to run assert.verifySteps, etc).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2017-12-19T23:08:03Z", "contents": "Seems reasonable to me. Given that a step is akin to assert.ok(true), the real value comes from verifySteps, so not having it should be treated as a negative signal.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["component-assert"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1245, "url": "https://github.com/qunitjs/qunit/issues/1245", "title": "the testing process too slow", "contents": "hey everyone!\nI faced an issue regarding testing time. so, I have around 2.000 tests and they're so slow, I've found out that the problem is in the latency that was set in this method.\nI've checked testing time without any latency and it takes around 25sec instead of 2-3 minutes. so, is there any chance to get some explanations why it was added? either add some configurable option in order to choose whether begin() will be run in async/sync mode.\nhere it is\n\n  \n    \n      qunit/src/core.js\n    \n    \n         Line 271\n      in\n      2999953\n    \n    \n    \n    \n\n        \n          \n           // Add a slight delay to allow definition of more modules and tests. \n        \n    \n  \n\n\nwell, perhaps I understand why it was added, just to avoid threads freezing in cases of long time running, but I hope there are some cases when we don't need such opportunity.\n@gibson042 so, what are your feelings on that?", "createdAt": "2018-01-04T11:06:59Z", "updatedAt": "2018-01-08T21:23:13Z", "closedAt": "2018-01-07T01:06:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dskuratovich", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "dskuratovich", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "platinumazure", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-04T18:53:01Z", "contents": "The delay in question is only 13ms and only occurs once when the test suite is started (either via QUnit.start() or QUnit.load()). It was added as a way to give asynchronously loaded tests time to be defined before starting the test suite.\nThis sounds to me like it may be something specific to your setup, as I am able to create a simple test suite that runs 5000 tests in 1-2 seconds. Maybe there is some code in the test setup that blocks the main thread preventing the setTimeout from being evaluated?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-05T00:52:46Z", "contents": "@trentmwillis - Seems like all usages  usage of Test#resolvePromise also has a 13ms delay:\n\n  \n    \n      qunit/src/test.js\n    \n    \n        Lines 778 to 792\n      in\n      2999953\n    \n    \n    \n    \n\n        \n          \n           if ( defined.setTimeout ) { \n        \n\n        \n          \n           \tif ( config.timeout ) { \n        \n\n        \n          \n           \t\tclearTimeout( config.timeout ); \n        \n\n        \n          \n           \t} \n        \n\n        \n          \n           \tconfig.timeout = setTimeout( function() { \n        \n\n        \n          \n           \t\tif ( test.semaphore > 0 ) { \n        \n\n        \n          \n           \t\t\treturn; \n        \n\n        \n          \n           \t\t} \n        \n\n        \n          \n            \n        \n\n        \n          \n           \t\tif ( config.timeout ) { \n        \n\n        \n          \n           \t\t\tclearTimeout( config.timeout ); \n        \n\n        \n          \n           \t\t} \n        \n\n        \n          \n            \n        \n\n        \n          \n           \t\tbegin(); \n        \n\n        \n          \n           \t}, 13 ); \n        \n    \n  \n\n\nI believe that assert.async() also use that same infrastructure (internalStop), so it will be affected too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-05T00:58:28Z", "contents": "Yes, but that is a different block of code. Based on the initial comment, my understanding is that they removed the setTimeout from the start call and that dramatically reduced the test time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-05T01:00:29Z", "contents": "Note that I think we can likely speed up that timeout for the async/promise resolving case, though it sounds tangential to this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-05T01:02:49Z", "contents": "Considering that many test harnesses leverage both a promise from beforeEach (2000 * 13ms) and another from the test itself (2000 * 13ms) then sprinkle in some assert.async usage in many tests (1200 * 13ms), and it isn\u2019t terribly hard to get to around 60s spent waiting on what seems to be an arbitrary delay...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-05T01:04:43Z", "contents": "@trentmwillis - Ya, agreed. TBH, when I reviewed the original link on mobile I thought it was the one in internalStop, which has given me pause recently so I piled on. \ud83d\ude1c happy to move to another issue if you\u2019d prefer...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-05T04:59:45Z", "contents": "@trentmwillis - I've updated your JSBin to return Promise.resolve(), and those same 5000 tests now take 104 seconds (up from 1 second)...\n    QUnit.module('5000 tests', function() {\n      for (let i = 0; i < 5000; i++) {\n        QUnit.test(`Test #${i}`, function(assert) {\n          assert.ok(true);\n          return Promise.resolve();\n        });\n      }\n    });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-05T05:05:09Z", "contents": "I tried doing some history searching to see if I could find a reason for the value 13 in both cases and can't seem to find anything. The closest I got was when assert.async was implemented and the comment is actually to remove it. So I tried removing the 13 everywhere we use it and tests seem to still pass, so I've created a PR (#1246) to just remove them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-05T05:56:25Z", "contents": "The number 13 is significant to me as the de facto minimum timeout in older versions of IE (and probably other browsers). But there's no reason other runtimes shouldn't be allowed to take advantage of quicker/more granular timers. (I have no idea if that is why 13 is used in the code, mind.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-07T01:06:13Z", "contents": "We've landed a commit to remove the delay parameter from the setTimeouts. This will go out in the next release and most folks should hopefully see a nice little speed bump :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dskuratovich", "authorAssociation": "NONE", "createdAt": "2018-01-07T12:27:07Z", "contents": "Thanks so much guys! It's really cool", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dskuratovich", "authorAssociation": "NONE", "createdAt": "2018-01-08T10:30:51Z", "contents": "by the way, @trentmwillis when we could expect a new release?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-08T21:23:13Z", "contents": "I'm planning to do one sometime this week. Best way to get notified is to follow our Twitter account.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1248, "url": "https://github.com/qunitjs/qunit/issues/1248", "title": "ESLint fail in Jenkins and local dev, but passing on Travis", "contents": "The \"test\" npm run-script on Travis CI is passing in Node 4, 8 and 9 at https://travis-ci.org/qunitjs/qunit/builds/326175125.\nNode 8, for example at https://travis-ci.org/qunitjs/qunit/jobs/326175130 passes:\n$ node --version\nv8.9.4\n$ npm --version\n5.6.0\n..\n$ yarn ..\n$ export NPM_SCRIPT=test\n$ npm run-script $NPM_SCRIPT\n  > grunt  ..\n  Running \"eslint:js\" (eslint) task\n\n  ..\n  Done.\n\nYet, the same command is failing on Jenkins at http://jenkins.jquery.com/job/QUnit/746/console\n+ node --version\nv8.9.3\n+ npm --version\n5.5.1\n+ npm install ..\n+ grunt ..\nRunning \"eslint:js\" (eslint) task\n\n/var/lib/jenkins/jobs/QUnit/workspace/test/main/deepEqual.js\n  1808:43  error  Multiple spaces found before '0'    no-multi-spaces\n  1877:8   error  Multiple spaces found before 'new'  no-multi-spaces\n\n\u2716 2 problems (2 errors, 0 warnings)\n  2 errors, 0 warnings potentially fixable with the `--fix` option.\n\nWarning: Task \"eslint:js\" failed.\n\nI can reproduce the same failure locally as well:\n$ node --version\nv9.3.0\n$ npm --version\n5.6.0\n$ npm install ..\n$ npm test ..\n> grunt ..\nRunning \"copy:src-css\" (copy) task\nCopied 1 file\n\nRunning \"eslint:js\" (eslint) task\n\n/Users/krinkle/Development/qunit/test/main/deepEqual.js\n  1808:43  error  Multiple spaces found before '0'    no-multi-spaces\n  1877:8   error  Multiple spaces found before 'new'  no-multi-spaces\n\n\u2716 2 problems (2 errors, 0 warnings)\n  2 errors, 0 warnings potentially fixable with the `--fix` option.\n\nWarning: Task \"eslint:js\" failed.", "createdAt": "2018-01-09T19:16:22Z", "updatedAt": "2018-12-22T20:24:39Z", "closedAt": "2018-01-10T02:40:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-01-09T19:18:08Z", "contents": "These appear to be genuine failures. The question is, why is the Travis build passing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-09T19:19:04Z", "contents": "Travis config is using yarn (locked dependencies) but Jenkins is using npm install (without a lockfile).  I believe to make Travis fail in the same way, you would need to yarn upgrade...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-01-09T19:19:46Z", "contents": "@rwjblue Good catch, thanks. Yeah, that must be it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-10T02:40:33Z", "contents": "Fixed by #1249. Passing Jenkins job.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1251, "url": "https://github.com/qunitjs/qunit/issues/1251", "title": "Keyup / Change Event breaks Qunit Test Process", "contents": "Hi,\nI try to unit test a simple DOM Change which is triggered on $(document).change() and .keyup(). The trigger itself works like a charm.\nQUnit.test(\"when input has content login button has svg\", function (assert) {\n\nconsole.log($('.main').find($('input')).length);\n\n$(\"#user_name3\").val(\"change\");\n$(\"#user_name3\").trigger(\"change\");\nassert.ok($('.main').find($('svg')).length > 0, \"btn has arrow as content\")\n\nWhen I log something before and after trigger(\"change\"), I can see that the test breaks immediatedly after the change / keyup is triggered, no matter of the statement form:\n\n$(\"#user_name3\").trigger(\"change\");\n$(\"#user_name3\").change();\n $(document).trigger('change', $('#login--row'));\n\netc.\nI have now tried numerous ways of expressing the change() call, but nothing worked. if I move the change() call upwards the break happens earlier with it. I get this message from the test runner:\nSource: | TypeError: Cannot read property 'which' of undefined\n-- | --\n\nIs this a known issue?", "createdAt": "2018-01-16T16:25:22Z", "updatedAt": "2018-01-16T22:17:32Z", "closedAt": "2018-01-16T22:17:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Nixen85", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Nixen85", "company": "MonsTec"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-16T17:26:36Z", "contents": "I'm skeptical that this is an issue with QUnit itself; looking at the error being thrown:\nTypeError: Cannot read property 'which' of undefined\n\nThe most likely culprit appears to be an event handler that is expecting an event to have which, but that event isn't properly being passed. Without a failing reproduction to look at, I can't say much more than that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Nixen85", "authorAssociation": "NONE", "createdAt": "2018-01-16T18:32:35Z", "contents": "Thank you for your hint. I now found that the problem is this if-statement:\nif (event.which === 13) {\n            $(rootSpan).click();\n        }\n\nProbably the missing keyboard event causes the problem and I have to trigger that, too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-01-16T22:17:32Z", "contents": "Glad that helped you track it down. I'm going to close this issue as there doesn't appear to be anything to do on our end.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1255, "url": "https://github.com/qunitjs/qunit/issues/1255", "title": "An assignment to innerHTML fails in XHTML", "contents": "Tell us about your runtime:\n\nQUnit version: 2.5.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser. Opera 50.0.2762.67 on Linux.\nHow are you running QUnit? (e.g., script, testem, Grunt): I have an XHTML page.  It loads RequireJS with a script tag.  RequireJS is then configured with the location of QUnit.  Then a tiny test suite is run, which contains one call to QUnit.test.\n\nWhat are you trying to do?\nHere is my XHTML page.  It contains all you need to trigger the bug.\n<?xml version=\"1.0\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Style-Type\" content=\"text/css\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n\n    <title>Demonstrate QUnit bug affecting XHTML pages</title>\n\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.css\"\n    />\n  </head>\n\n  <body>\n    <div id=\"qunit\"/>\n    <div id=\"qunit-fixture\"/>\n\n    <script\n      type=\"text/javascript\"\n      src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.5/require.js\"\n    />\n\n    <script type=\"text/javascript\">\n      <![CDATA[\n      requirejs.config(\n        {\n          paths: {\n            QUnit:\n              'https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit',\n          },\n        }\n      );\n\n      require(['QUnit'], run_test_suite);\n\n      function run_test_suite(QUnit) {\n        QUnit.test(\n          \"Failing test\",\n          function (assert) {\n            assert.ok(false);\n          }\n        );\n        QUnit.start();\n      }\n      ]]>\n    </script>\n  </body>\n</html>\nIf you're not familiar with an AMD loader such as RequireJS, you can ignore the AMD mechanics by just concentrating on the run_test_suite function.\nWhat did you expect to happen?\nI loaded the above page into my web browser, expecting that the page would contain a message from QUnit reporting a failing assertion.\nWhat actually happened?\nThe page showed a number of things, including the text \"Running...\" and a button labelled \"Abort\".  However, the outcome of the test was not shown.\nIn the console, the following message appeared:\nUncaught DOMException: Failed to set the 'innerHTML' property on 'Element': The provided markup is invalid XML, and therefore cannot be inserted into an XML document.\n    at toolbarModuleFilter (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3540:23)\n    at appendToolbar (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3652:26)\n    at appendInterface (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3726:5)\n    at Array.<anonymous> (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3790:5)\n    at runLoggingCallbacks (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:1047:17)\n    at begin (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3052:5)\n    at https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3019:6", "createdAt": "2018-01-23T19:46:25Z", "updatedAt": "2018-10-08T20:32:53Z", "closedAt": "2018-10-08T20:32:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "phormio", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "phormio", "company": null}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 5, "comments_data": [{"authorLogin": "phormio", "authorAssociation": "NONE", "createdAt": "2018-01-23T19:51:46Z", "contents": "I forgot to say: you can find the buggy code here:\nhttps://github.com/qunitjs/qunit/blob/2.5.0/reporter/html.js#L352-L358", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "phormio", "authorAssociation": "NONE", "createdAt": "2018-01-23T19:53:20Z", "contents": "Further to my previous comment: I have verified that you can fix the bug by closing the input element with /> rather than >.\nUPDATE\nBut when you do that, it seems that you uncover another bug.  I get the following error message in the console:\nUncaught DOMException: Failed to set the 'innerHTML' property on 'Element': The provided markup is invalid XML, and therefore cannot be inserted into an XML document.\n    at Array.<anonymous> (file:///tmp/qunit-2.5.0.modified.js:4054:27)\n    at runLoggingCallbacks (file:///tmp/qunit-2.5.0.modified.js:1047:17)\n    at Test.finish (file:///tmp/qunit-2.5.0.modified.js:1603:5)\n    at file:///tmp/qunit-2.5.0.modified.js:1674:12\n    at Object.advance (file:///tmp/qunit-2.5.0.modified.js:1116:26)\n    at begin (file:///tmp/qunit-2.5.0.modified.js:3059:20)\n    at file:///tmp/qunit-2.5.0.modified.js:3019:6", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-01-23T20:49:59Z", "contents": "Hi @phormio, thanks for the issue!\nInteresting! <input> is valid HTML, but not valid XML. Guess it depends on the DOM runtime to some degree. <input /> should also be valid HTML, so I think that fix is safe.\nThat said: Holy crap, we really should use template strings or something else to make that file more readable. \ud83d\ude06", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "phormio", "authorAssociation": "NONE", "createdAt": "2018-01-23T21:07:52Z", "contents": "thanks for the issue!\n\nYou're welcome \ud83d\ude00.\n\n<input /> should also be valid HTML\n\nYes, it's valid syntax for HTML.  Quoting https://html.spec.whatwg.org/multipage/syntax.html#start-tags:\n\nif the element is one of the void elements [...], then there may be a single U+002F SOLIDUS character (/).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-10-08T20:32:53Z", "contents": "Fixed via #1317. Will be in the next release.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1259, "url": "https://github.com/qunitjs/qunit/issues/1259", "title": "Add configuration to skip particular test point using test point name", "contents": "Qunit version 2.5.0\nEnv = browser\njust loading it in browser\nRunning in browser:\nchrome v62\nWhat are you trying to do?\nIt would be easy to have a qunit configuration that can skip available test points using test point names\nFor eg:\nQUnit.config.testPointsToSkip = ['hello test', 'test point name 2']\nQUnit.test( \"hello test\", function( assert ) {\nassert.ok( 1 == \"1\", \"Passed!\" );\n});\nThis will skip hello test.", "createdAt": "2018-02-01T22:22:58Z", "updatedAt": "2018-02-25T21:16:33Z", "closedAt": "2018-02-25T21:16:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "muthu90ec", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "muthu90ec", "company": null}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-02-01T22:45:37Z", "contents": "I think you might be able to use QUnit.config.filter to do what you need. QUnit.config.filter accepts a regular expression; you could conceivably do something like this:\nconst testsToSkip = [\"hello test\"];\n\nQUnit.config.filter = new RegExp(`^(?!(?:${testsToSkip.join(\"|\")})$).*$`);\nNote that this implementation will fail for strings that use regex special characters, so you would want to be sure to escape regex metacharacters in your own strings before setting QUnit.config.filter.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-02-25T21:16:33Z", "contents": "Closing this issue as I believe @platinumazure's solution is appropriate. @muthu90ec if you feel we need an additional API for the use case, then feel free to reopen with some explanation.\nThanks for the issue! \ud83d\ude42", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1266, "url": "https://github.com/qunitjs/qunit/issues/1266", "title": "`actual` is being emptied after `verifySteps(..)` is called", "contents": "Tell us about your runtime:\n\nQUnit version: 2.5.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Node\nHow are you running QUnit? (e.g., script, testem, Grunt): via qunit node package/API\n\nNode 9.3.0\nThe bug I'm experiencing is that the actual array for a log(..) call from a verifySteps(..) is subsequently emptied out before the final testDone(..) is called. That means I can't correctly output the test results for expected vs actual whenever verifySteps(..) fails.\nHere's some code to illustrate:\nvar all_logs = {};\n\nQUnit.log(function(details){\n   if (details.message == \"check my steps\") {\n      all_logs[details.message] = details;\n      console.log(JSON.stringify(details));\n   }\n});\n\nQUnit.testDone(function(results){\n   var details = all_logs[results.assertions[0].message];\n   console.log(JSON.stringify(details));\n});\n\n// ***********\n\nQUnit.test( \"my test\", function test(assert){\n   assert.step(\"step one\");\n   assert.step(\"step two\");\n\n   assert.verifySteps([\"step one\",\"step two\",\"step 3\"],\"check my steps\");\n});\n\nQUnit.start();\nThe console output looks like:\n{\"module\":\"\",\"name\":\"my test\",\"result\":false,\"message\":\"check my steps\",\"actual\":[\"step one\",\"step two\"],\"testId\":\"b31bbaea\",\"negative\":false,\"runtime\":2,\"todo\":false,\"expected\":[\"step one\",\"step two\",\"step 3\"],\"source\":\"    at Assert.verifySteps (/tmp/node_modules/qunit/qunit/qunit.js:2158:11)\"}\n\n{\"module\":\"\",\"name\":\"my test\",\"result\":false,\"message\":\"check my steps\",\"actual\":[],\"testId\":\"b31bbaea\",\"negative\":false,\"runtime\":2,\"todo\":false,\"expected\":[\"step one\",\"step two\",\"step 3\"],\"source\":\"    at Assert.verifySteps (/tmp/node_modules/qunit/qunit/qunit.js:2158:11)\"}\n\nNotice how the first output has the actual array filled in, but the second output, from the same shared object but accessed from within testDone(..), has actual as an empty array.\nI strongly suspect that what's happening is that when verifySteps(..) calls log(..), it passes a reference to its own internal step(..) queue as actual, and then it empties that queue array at the end of verifySteps(..). Instead, shouldn't a copy of that array be sent, so that when your internal queue is emptied, it doesn't affect my storage of the log details.\nI'm temporarily fixing this bug by doing JSON.parse(JSON.stringify(details)) to JSON-clone the log details object so that I can't be affected by your internal queue reset. But I'd expect to just be able to store the details object as-is and not have it later be modified at-a-distance unexpectedly by qunit.", "createdAt": "2018-02-22T00:03:16Z", "updatedAt": "2018-03-01T16:20:35Z", "closedAt": "2018-03-01T16:20:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-02-25T21:13:34Z", "contents": "Thanks for the report! Definitely a bug and definitely due to passing around the same reference. See these lines: \n  \n    \n      qunit/src/assert.js\n    \n    \n        Lines 39 to 40\n      in\n      7e7bb7e\n    \n    \n    \n    \n\n        \n          \n           this.deepEqual( this.test.steps, steps, message ); \n        \n\n        \n          \n           this.test.steps.length = 0;", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1268, "url": "https://github.com/qunitjs/qunit/issues/1268", "title": "A rejects testcase should be pass, when the rejected and expected value is undefined.", "contents": "Hello,\nI found here an unexpected behavior. I think it's a bug.\nI have a test for a function, that should return a promise in rejected state. If the reject call has no value, the testcase fail, although it should be passed.\nI wrote a simple example: https://jsfiddle.net/62wxoy6z/9/\nQUnit.test(\"test rejects\", function(assert) {\n  assert.rejects(Promise.reject('test'), 'reject with value passed');\n  assert.rejects(Promise.reject(), 'reject without value fail');\n});\n\nThe enviroment doesn't matter, but here is the printout of qunit:\nQUnit 2.5.1; Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.102 Safari/537.36 Vivaldi/1.93.955.48\nThe qunit version is 2.5.1.\nI think it's wrong to do only validation if actual is not undefined.\nIf actual is undefined and expected is undefined the result should be true.\nIf actual is undefined and expected is not undefined the result should be false.\nfunction rejects(promise, expected, message) {\n\tvar result = false;\n\t// ... \n\treturn then.call(promise, function handleFulfillment() {\n\t\t// ...\n\t}, function handleRejection(actual) {\n\t\tif (actual) {\n\t\t\tvar expectedType = objectType(expected);\n\n\t\t\t// We don't want to validate\n\t\t\tif (expected === undefined) {\n\t\t\t\tresult = true;\n\t\t\t\texpected = null;\n\t\t\t// ... \n\t\t}\n\t\tcurrentTest.assert.pushResult({\n\t\t\tresult: result,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t});\n\t\tdone();\n\t});\n}\n\nThank you!\nJonas", "createdAt": "2018-03-01T09:46:38Z", "updatedAt": "2018-03-01T20:34:50Z", "closedAt": "2018-03-01T20:34:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jsiedentop", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jsiedentop", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-03-01T16:28:25Z", "contents": "Yep, looks like a bug to me. As far as I can tell, we didn't test for this use case. I would expect that when there is no \"matcher\", any rejection value should count as a \"pass\".", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1272, "url": "https://github.com/qunitjs/qunit/issues/1272", "title": "`QUnit.module.only` behaves strange", "contents": "QUnit.module.only behaves strange when using the module syntax that assigns tests to modules using the order of invocation, e.g.:\nQUnit.module.only('module 1');\n\nQUnit.test('test in module 1', assert => {\n  assert.ok(true, 'a successful assertion in module 1');\n});\n\nQUnit.module('module 2');\n\nQUnit.test('test in module 2', assert => {\n  assert.ok(true, 'a successful assertion in module 2');\n});\nWithout only test in module 1 belongs to module 1 and test in module 2 belongs to module 2. Using only in module 1 the second test also seems to belong to module 1 and is run (applying the wrong hooks if there would be any).\nYou can check this in this plunk: https://embed.plnkr.co/mh4VgJ0O6Dhp4H5APd3S/", "createdAt": "2018-04-02T19:45:14Z", "updatedAt": "2018-06-03T19:32:29Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "sechel", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sechel", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-04-11T03:36:17Z", "contents": "Thanks for the report + reproduction! Definitely a bug and likely just a combination we didn't test (I think all the tests use the module callback form).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-06-03T19:32:28Z", "contents": "Hi,\nI did some analysis and what I came with is the following: we can flag the current module (which is the one we attach only to) as focused by adding a new property to it. This property will be set to true as soon as the first ignored module is executed, and will then be used in conjuction with focused (inside test.js) to ignore tests of other modules.\nIn summary, here is the diff:\n\n`src/core.js`\ndiff --git a/src/core.js b/src/core.js\nindex b2e9472..95230e5 100644\n--- a/src/core.js\n+++ b/src/core.js\n@@ -115,6 +115,10 @@ function processModule( name, options, executeNow, modifiers = {} ) {\n // TODO: extract this to a new file alongside its related functions\n function module( name, options, executeNow ) {\n \tif ( focused ) {\n+\t\tif ( !config.currentModule.focused ) {\n+\t\t\tconfig.currentModule.focused = true;\n+\t\t}\n+\n \t\treturn;\n \t}\n \n@@ -130,6 +134,10 @@ function module( name, options, executeNow ) {\n \n module.only = function() {\n \tif ( focused ) {\n+\t\tif ( !config.currentModule.focused ) {\n+\t\t\tconfig.currentModule.focused = true;\n+\t\t}\n+\n \t\treturn;\n \t}\n \n@@ -143,6 +151,10 @@ module.only = function() {\n \n module.skip = function( name, options, executeNow ) {\n \tif ( focused ) {\n+\t\tif ( !config.currentModule.focused ) {\n+\t\t\tconfig.currentModule.focused = true;\n+\t\t}\n+\n \t\treturn;\n \t}\n \n@@ -158,6 +170,10 @@ module.skip = function( name, options, executeNow ) {\n \n module.todo = function( name, options, executeNow ) {\n \tif ( focused ) {\n+\t\tif ( !config.currentModule.focused ) {\n+\t\t\tconfig.currentModule.focused = true;\n+\t\t}\n+\n \t\treturn;\n \t}\n\n\n`src/test.js`\ndiff --git a/src/test.js b/src/test.js\nindex 097fd39..e5ab69a 100644\n--- a/src/test.js\n+++ b/src/test.js\n@@ -658,7 +658,7 @@ function checkPollution() {\n \n // Will be exposed as QUnit.test\n export function test( testName, callback ) {\n-\tif ( focused ) {\n+\tif ( focused || config.currentModule.focused ) {\n \t\treturn;\n \t}\n \n@@ -671,7 +671,7 @@ export function test( testName, callback ) {\n }\n \n export function todo( testName, callback ) {\n-\tif ( focused ) {\n+\tif ( focused || config.currentModule.focused ) {\n \t\treturn;\n \t}\n \n@@ -686,7 +686,7 @@ export function todo( testName, callback ) {\n \n // Will be exposed as QUnit.skip\n export function skip( testName ) {\n-\tif ( focused ) {\n+\tif ( focused || config.currentModule.focused ) {\n \t\treturn;\n \t}\n \n@@ -700,7 +700,7 @@ export function skip( testName ) {\n \n // Will be exposed as QUnit.only\n export function only( testName, callback ) {\n-\tif ( focused ) {\n+\tif ( focused || config.currentModule.focused ) {\n \t\treturn;\n \t}\n\nIf this solution looks good, I'll be happy to open a PR.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1273, "url": "https://github.com/qunitjs/qunit/issues/1273", "title": "qunitjs.com ssl cert expired", "contents": "Tell us about your runtime:\n\nQUnit version: n/a\nWhat environment are you running QUnit in? (e.g., browser, Node): n/a\nHow are you running QUnit? (e.g., script, testem, Grunt): n/a\n\nWhat are you trying to do?\nRead Qunit docs on https://qunitjs.com/\nWhat did you expect to happen?\nThe page would load correctly with a valid SSL cert.\nWhat actually happened?\n\nqunitjs.com uses an invalid security certificate. The certificate expired on 2 April 2018, 23:32. The current time is 3 April 2018, 16:15.", "createdAt": "2018-04-03T15:16:23Z", "updatedAt": "2018-04-10T22:14:21Z", "closedAt": "2018-04-10T22:14:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tonyfinn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tonyfinn", "company": "@aol"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-04-03T20:54:27Z", "contents": "Thanks for reporting! I'll look into getting the cert updated.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-04-10T22:14:21Z", "contents": "Cert has been updated.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1274, "url": "https://github.com/qunitjs/qunit/issues/1274", "title": "Add 'Run module' control to the HTML Reporter", "contents": "Originally proposed in #1159. See the comments in that thread for the direction we'd like to see the feature move in.", "createdAt": "2018-04-18T16:14:45Z", "updatedAt": "2018-04-18T16:14:59Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1275, "url": "https://github.com/qunitjs/qunit/issues/1275", "title": "2.6.0 violated semver", "contents": "A change was apparently made in 2.6.0 that violated semver, as far as I can tell.\nIn version 2.5.0, I was able to pass any non-string value to assert.step(..), and it passed through as-is to the assert.verifySteps(..) check.\nI casually upgraded from 2.5.0 to 2.6.0 not expecting any breakage, and got a surprise build failure because now there's a test failure which indicates that assert.step(..) must be passed only strings.\nThis is a fine feature, and I'm OK with it. But a minor version change shouldn't have broken my tests, if I understand semver correctly.\nIt was not that big of a deal, I fixed by force coercing my values to strings. But it's not a good precedent to set, and could cause bigger issues for others besides me.", "createdAt": "2018-04-30T13:13:55Z", "updatedAt": "2018-04-30T14:39:01Z", "closedAt": "2018-04-30T14:39:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "getify", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "getify", "company": "Getify Solutions"}, {"login": "platinumazure", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-04-30T13:50:57Z", "contents": "Hi @getify, thanks for the issue. I apologize for the inconvenience you suffered as a result of upgrading to 2.6.0.\nIn this case, assert.step was not designed to take anything besides strings, but the fact that this wasn't enforced in 2.5.0 was an oversight. Thus, we treated this as a bug, not a breaking change. Bugfixes, as you know, are semver-patch. (However, we released as semver-minor due to new features also being in the same release.)\nI regret that this happened and we will try to be more careful in future as we add new features.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "getify", "authorAssociation": "NONE", "createdAt": "2018-04-30T14:39:01Z", "contents": "I can certainly understand the concern of deciding if any tweak is just a bug fix or a breaking change... in this case, afaik, the docs never said that assert.step(..) had to take strings only, so I don't think I would have ever been able to tell in 2.5.0 that I was taking advantage of a bug. Thus, I would have called this a breaking change. But alas, these are tough calls to make. Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1276, "url": "https://github.com/qunitjs/qunit/issues/1276", "title": "Browser autocomplete overlaps qunit module filter autocomplete", "contents": "Tell us about your runtime:\n\nQUnit version: 2.5.0\nWhat environment are you running QUnit in? (e.g., browser, Node): browser\nHow are you running QUnit? (e.g., script, testem, Grunt): testem (via ember-cli)\n\n\nChromium Version 66.0.3359.139\nWhat are you trying to do?\nTyping in the module filter input triggers the qunit module autocompletion but also the native browser autocomplete. This overlaps and makes filtering a specific module harder as a user has to somehow close the native autocompletion.\n\nI'm unsure if it's expected behavior but one could possibly disable the browser autocomplete by setting the autocomplete attribute on the module filter input.\nIf this is ok, I can open a PR to set the autocomplete attribute to off.\nThanks", "createdAt": "2018-05-02T07:38:55Z", "updatedAt": "2018-05-07T17:01:25Z", "closedAt": "2018-05-07T17:01:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "makepanic", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "makepanic", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-05-02T17:53:11Z", "contents": "Thanks for the report! I'd consider this a bug and would appreciate a PR turning the browser autocomplete off \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1280, "url": "https://github.com/qunitjs/qunit/issues/1280", "title": "autorun module's tests should belong to autorun module", "contents": "The autorun test is adding these tests after 5 seconds to whatever module happens to be running in node via QUnit global currentModule, not in autorun due to this change and may not even run at all:\nc8e2ca5#diff-bc13676ec5de469f49a7f82e44c6c57bR177\nThese test should be refactored or remove as they are essentially racy at the moment.  Is this actually an important use case to support?", "createdAt": "2018-05-03T23:28:27Z", "updatedAt": "2018-05-08T19:35:20Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "krisselden", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "krisselden", "company": "@LinkedIn"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-05-07T13:23:00Z", "contents": "The test-on-node task definitely does not wait for these tests before exiting (the setTimeout delay is 5 seconds!1! \ud83d\ude31 ), and therefore we wouldn't fail the test suite if they did actually fail.\nIMHO we should either remove the setTimeout completely or rewrite test-on-node to properly wait (possibly by making it use execa and running the actual tests in a separate process instead...).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-05-07T17:10:43Z", "contents": "This is a known issue. I'm not 100% sure if this is an important use case to support, but refactoring the testing infrastructure to properly support testing it was non-trivial last time I investigated.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "krisselden", "authorAssociation": "NONE", "createdAt": "2018-05-07T18:36:29Z", "contents": "If you remove the timeout the test runs in the browser but fails in node.  With the timeout, it is only running in the node side because nothing waits for it and only reason it runs is the browser tests take long enough for it to run.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1281, "url": "https://github.com/qunitjs/qunit/issues/1281", "title": "Provide `module` in `package.json` along with es6 format Rollup", "contents": "Tell us about your runtime:\n\nQUnit version: 2.6.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser (Chrome 66, Firefox 61.0b7)\nHow are you running QUnit? (e.g., script, testem, Grunt): script\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\n\nimport QUnit from './node_modules/qunit/dist/qunit-es6.js';\n(This is a feature request; I realize this will not work currently.)\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nQUnit could be imported.\nIn cases where one runs Rollup (and node-resolve with optional commonjs plugins) on one's QUnit tests themselves, the following\nimport QUnit from 'qunit';\n...should also work if module in package.json points to the ES6 modules file:\n\"module\": \"dist/qunit-es6.js\"\nWhat actually happened?\nNothing, as a module export is not available.", "createdAt": "2018-05-24T04:22:18Z", "updatedAt": "2018-11-02T00:11:59Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "brettz9", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "brettz9", "company": null}, {"login": "villander", "company": "@PayCertify "}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 9, "comments_data": [{"authorLogin": "villander", "authorAssociation": "NONE", "createdAt": "2018-10-19T00:09:44Z", "contents": "@trentmwillis how run qunit on rollup? as testing framework?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettz9", "authorAssociation": "NONE", "createdAt": "2018-10-19T01:40:21Z", "contents": "@villander : Hope you don't mind me interjecting; the idea is twofold...\n\n\nProvide an ES6 Modules export (adding a format: \"es\" bundle in your Rollup) so that test environments (currently modern browsers only, though potentially Node in the future as well) can directly and modularly import QUnit with no need to define their own Rollup routine against Qunit and no need for their code to define globals or add extra script tags to their HTML--their test file(s) need merely import the QUnit ES module file wherever needed.\n\n\nEnsure that a project using ES6 modules and making bundle files out of those modules (e.g., using Rollup to make these bundles) can auto-discover the starting file within QUnit--the ES6 Modules distribution file it should roll up into its bundle. This is indicated by the module field in package.json.\n\n\nIt is therefore not to run QUnit against or \"on\" Rollup, but to allow users of QUnit, including those using Rollup (or other ESM bundlers), to import QUnit without needing to know how QUnit bundles itself internally, or, in cases where using the import QUnit from 'qunit'; format, they don't even need to know where the QUnit distribution file is located.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "villander", "authorAssociation": "NONE", "createdAt": "2018-10-19T17:09:54Z", "contents": "@brettz9 my problem is that i can't import a ES6 module on my test.js file, because thist file has a dom elementes, example:\n//test.js\n\nimport { $ } from '../src/helpers/dollar';\n\n// dollar.js\nexport const $ = document.querySelector.bind(document);\nI receive this error\nTAP version 13\nnot ok 1 test/test.js > Failed to load the test file with error:\nReferenceError: document is not defined\n    at Object.document (/Users/villander/Projects/paycertify.js/src/helpers/dollar.js:1:18)\n    at Module._compile (module.js:652:30)\n    at Module._compile (/Users/villander/Projects/paycertify.js/node_modules/pirates/lib/index.js:83:24)\n    at Module._extensions..js (module.js:663:10)\n    at Object.newLoader [as .js] (/Users/villander/Projects/paycertify.js/node_modules/pirates/lib/index.js:88:7)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n  ---\n  message: \"should be able to load file\"\n  severity: failed\n  actual: false\n  expected: true\n  stack:     at Object.<anonymous> (/Users/villander/Projects/paycertify.js/node_modules/qunit/bin/run.js:61:13)\n\nI would like to be able to import ES6 modules into my test file so I can test those functions, helpers and anything else inside qunit.\nI saw you do this, but I could not figure out how, can you help me? - https://github.com/SVG-Edit/svgedit/blob/master/test/test1.js#L4", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettz9", "authorAssociation": "NONE", "createdAt": "2018-10-20T00:16:24Z", "contents": "Support questions should be asked on a site like Stackoverflow. If you link to the question from here, I should be able to offer an answer.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "villander", "authorAssociation": "NONE", "createdAt": "2018-10-21T20:26:08Z", "contents": "ok, thanks @brettz9", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-11-01T01:36:20Z", "contents": "Would it suffice for us to simply ship the src files? They're currently in ES6 module format so we could just point the default to src/qunit.js.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettz9", "authorAssociation": "NONE", "createdAt": "2018-11-01T02:19:16Z", "contents": "You could technically do so (and indeed point module in package.json to src/qunit.js), but you would have to add \".js\" to all of the import statements or otherwise it wouldn't work in the browser.\nBut I would probably advise against this...\nAny external modules you were importing would also have to be resolvable, such as using import \"./node_modules/some-external-module/index-es.js\" rather than import \"some external-module\" (and I noticed you were using import global from \"global\"; which would have to be changed as well).\nAnd besides this ugliness in paths, even if you aren't actually importing any external modules (or have a routine to pull them out of node_modules), while pointing to src would technically be fine,  if you ever decided you wanted to import external modules requiring a path-aware build routine (e.g., having import jquery from 'jquery'; in source rather than import jquery from './node_modules/jquery/dist/jquery.js'), you'd have to introduce a breaking change for your users, who'd need to switch their import paths from the src path to the distribution file path you'd then need to make available (since users couldn't keep referencing the src code as browsers don't have a way to understand how to resolve the likes of import jquery from 'jquery'; and perhaps might never define such a way; even for bundlers looking at module, this property is supposed to resolve to a directly usable distribution file, not one requiring users to add config that is aware of your bundling process, e.g., to know that you resolve paths without a leading . or / by the Node resolution algorithm which looks inside node_modules (see https://github.com/rollup/rollup-plugin-node-resolve ) or that you use a CommonJS plugin such as https://github.com/rollup/rollup-plugin-commonjs to convert some external modules to ES at build-time).\nNote that Rollup already has a format: \"esm\" option and plugins such as rollup-plugin-re which can help swap out something like your \"global\" import, so there are tools to facilitate such an effort.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-11-01T16:21:04Z", "contents": "All good points. I was simply trying to be lazy and solve the immediate request of being able to use Rollup. But, definitely good to consider future browser use cases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettz9", "authorAssociation": "NONE", "createdAt": "2018-11-02T00:11:59Z", "contents": "Well, if it'd help it get out faster, there will probably be breaking changes down the road anyways, so would be worthwhile, but in this case, I don't think it will save you any time since even if you point to src, you'll still need to do the mentioned refactoring...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1282, "url": "https://github.com/qunitjs/qunit/issues/1282", "title": "Chokidar dependency hurts installation ergonomics", "contents": "https://github.com/qunitjs/qunit/blob/master/package.json#L34\nAlthough this dependency is handy (and works well), it introduces a native dependency. Requiring a native dependency can hurt user adoption/ergonomics. Although some are prebuilt, users on newer versions (or odd version) of node, or users who switch node versions, must also deal with a less then ideal user experience.\nI would recommend using: http://github.com/amasad/sane/", "createdAt": "2018-06-06T16:45:38Z", "updatedAt": "2018-07-31T03:53:43Z", "closedAt": "2018-07-31T03:53:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefanpenner", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "stefanpenner", "company": "@LinkedIn"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-07-31T03:53:43Z", "contents": "Fixed by #1283", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1284, "url": "https://github.com/qunitjs/qunit/issues/1284", "title": "RangeError: Maximum call stack size exceeded", "contents": "Tell us about your runtime:\n\nQUnit version: 2.6.1\nWhat environment are you running QUnit in? (e.g., browser, Node): browser (Chrome) and Node\nHow are you running QUnit? (e.g., script, testem, Grunt): either via cli, or karma-qunit, or in the browser\n\n\nWhat are you trying to do?\nWe have a fairly large test suite with several thousand tests in it and with latest QUnit it takes forever to start and eventually it seems to run into a fairly impressive recursive call. This repro is an over-simplified version:\n\nfor (let i = 0; i < 100; i++) {\n    QUnit.module('suite' + i, {\n        beforeEach: function () {\n            // do something\n        },\n        afterEach: function () {\n            // do something\n        }\n    });\n\n    for (let j = 0; j < 100; j++) {\n        QUnit.test('test' + j, function (assert) {\n            assert.ok(j !== 98);\n        });\n    }\n}\nWhat did you expect to happen?\nAll test suites should finish and report the results.\n\nWhat actually happened?\nQUnit fails before finishing the test run with the following exception:\nUncaught RangeError: Maximum call stack size exceeded\n    at Array.join (native)\n    at extractStacktrace (qunit.js:1074)\n    at Test.run (qunit.js:1518)\n    at qunit.js:1737\n    at advanceTaskQueue (qunit.js:1129)\n    at advance (qunit.js:1110)\n    at advanceTestQueue (qunit.js:1155)\n    at advance (qunit.js:1113)\n    at advanceTestQueue (qunit.js:1155)\n    at advance (qunit.js:1113)", "createdAt": "2018-06-06T20:30:19Z", "updatedAt": "2019-01-07T19:25:04Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "asapach", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "asapach", "company": "EPAM Systems"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "gkatsev", "company": "Brightcove"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "asapach", "authorAssociation": "NONE", "createdAt": "2018-06-06T20:35:55Z", "contents": "The issue seems to have been introduced in v2.6.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-06-06T20:46:03Z", "contents": "Thanks for the report and reproduction! Definitely sounds like a bug. It was probably introduced with #1260.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gkatsev", "authorAssociation": "NONE", "createdAt": "2019-01-07T19:25:03Z", "contents": "Just noticed that 2.9.1 is out (thanks greenkeeper!) and I made a test branch that throws an error it seems to be fixed in it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-core", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1285, "url": "https://github.com/qunitjs/qunit/issues/1285", "title": "Allow qunit command to run an html file.", "contents": "Can we run browser tests in CI mode? I see that currently there is qunit command but it seems to strangely only support node environments. I have qunit tests loaded via a static index.html file or through a server under http://localhost:42000. Can we just enable qunit runners by supplying a target argument like:\nqunit index.html\nor\nqunit http://localhost:4200\nThis would significantly ease all the ecosystem that is currently built around qunit. Ember-cli currently uses nasty hacks like testem to provide this behavior. My experimentation tells me this could be simply achieved without such legacy library. All I need is a direct qunit command support for html files and http servers and perhaps a configuration file to specify different headless browsers with arguments, installed google chrome being default.", "createdAt": "2018-06-10T17:32:02Z", "updatedAt": "2018-06-20T18:38:01Z", "closedAt": "2018-06-10T22:08:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "izelnakri", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "izelnakri", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-06-10T22:08:58Z", "contents": "QUnit tries to remain platform agnostic as much as possible. To that end, we don't intend to ship a built-in browser launcher because integrating with even just the 4 most popular ones (Chrome, Safari, FireFox, and Edge) requires lots of maintenance, and we don't want to favor one platform over another. You have to understand how each of the browsers works as a process, setup some communication channel between the browser process and the CLI, and provide a reasonable set of options to configure the browsers as they run test files.\nIt is actually a complex problem space and this is why tools like Testem and Karma exist. If you feel that those solutions are not sufficient or are too heavy-handed for what you wish to accomplish, then you should be able to build your own custom solution.\nAlso, please refrain from describing this or other projects as \"nasty hacks\", or using other disrespectful terms, unless you are the one who developed it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "izelnakri", "authorAssociation": "NONE", "createdAt": "2018-06-10T23:03:27Z", "contents": "I'm pleased with the improvements in the last few years on QUnit, you're partially responsible for it, so thank you!\nI don't think being too nice helps when an open-source project is disastrously written, popular and results in hundreds of rarely used internal npm packages for its users. Their authors are ultimately responsible, regardless of \"valuable contribution time\" or if their project was useful at its inception.\nI'm currently not happy with testem and I will keep calling it a nasty hack because that is what it is. I've read and implemented some part of testems source-code in my personal mber project, I don't agree that testem or karma is solving a complex problem anymore. I guess I will have rewrite this testem ci mode by myself, perhaps I can change your mind in few months when my rewrite is done.\nAnyways thanks for your response and contributions so far. I wish I didn't have add this to my todo list though. My point is simply: Qunit is a frontend testing framework, it has to support continuous integration by default in 2018.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "izelnakri", "authorAssociation": "NONE", "createdAt": "2018-06-20T18:37:09Z", "contents": "@trentmwillis izelnakri/mber@e2b691c#diff-34bf4780c7c1160c22cddc907245a3c5 it took 54 lines of code to do it with puppeteer.\nI still think qunit should support this, and it should run chromium by default since it has the largest market share. Other vendors can have their version if they ship a nice API like puppeteer.\nThis is also a basic version, in future I might build a better reporter with colors.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1286, "url": "https://github.com/qunitjs/qunit/issues/1286", "title": "Expired SSL Certificate on https://qunitjs.com/", "contents": "Tell us about your runtime:\n\nQUnit version: n/a\nWhat environment are you running QUnit in? (e.g., browser, Node): n/a\nHow are you running QUnit? (e.g., script, testem, Grunt): n/a\n\n\nWhat are you trying to do?\nVisit the website at https://qunitjs.com/\nWhat did you expect to happen?\nThe page would have a valid SSL certificate.\nWhat actually happened?\nPrivacy Error: This server could not prove that it is qunitjs.com; its security certificate expired 2 days ago.", "createdAt": "2018-06-11T20:01:23Z", "updatedAt": "2018-06-15T00:59:29Z", "closedAt": "2018-06-15T00:59:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cjwillcock", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "cjwillcock", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "platinumazure", "company": null}, {"login": "aulvi", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-06-11T21:49:38Z", "contents": "Thanks for reporting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-06-12T13:44:16Z", "contents": "Pinging @aulvi: I'm told you may have helped resolve this for us in the past. Is this something you can help with this time? And what can be done to help us (or the jQuery/JSF orgs) stay on top of the certificates and renew them before they expire? Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aulvi", "authorAssociation": "NONE", "createdAt": "2018-06-14T22:07:49Z", "contents": "@platinumazure Hello! Sorry to hear there was an issue w/the certificate. Some time ago we moved to Let's Encrypt but sometimes the certificate doesn't rotate correctly, or the cert is renewed an Nginx doesn't restart and pick it up, etc. We are working to improve monitoring around cert expiration but clearly we're not at 100% capability yet.\nIn the meantime, I thank you for your patience and encourage you to continue to reach out if you have questions or concerns. Again, I'm sorry for any service interruption.\n@cjwillcock Thanks for bringing this to our attention, you rock!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-06-15T00:59:29Z", "contents": "Thanks for the context @aulvi! Last time this popped-up it simply resolved itself after a couple days, so hearing this background helps us understand what happened. Let us know if there is a better way to contact you for future issues.\nAlso, thank you for helping maintain this infrastructure! Much appreciated \ud83d\ude04", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "meta", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1289, "url": "https://github.com/qunitjs/qunit/issues/1289", "title": "Add api.qunitjs.com redirects to fix old urls", "contents": "There's two categories of redirects we need\n\nRedirects previously maintained in Apache configuration from when the api.qunitjs.com was a self-hosted WordPress site.\nRedirects needed because we've renamed some pages (as part of the move to GitHub pages, or more recently)\n\nCategory 1: Redirects we used to have.\n\twordpress::site::extra{\"api.qunitjs.com\":\n\t\tconfig => '\n\t\t\trewrite ^/api /resources/api.xml redirect;\n\t\t\trewrite ^/asyncTest /QUnit.asyncTest permanent;\n\t\t\trewrite ^/module /QUnit.module permanent;\n\t\t\trewrite ^/start /QUnit.start permanent;\n\t\t\trewrite ^/stop /QUnit.stop permanent;\n\t\t\trewrite ^/test /QUnit.test permanent;\n\t\t\trewrite ^/QUnit.jsDump.parse /QUnit.dump.parse permanent;\n\t\t'\n\t}\n\n\n https://api.qunitjs.com/asyncTest\n https://api.qunitjs.com/module\n https://api.qunitjs.com/start\n https://api.qunitjs.com/stop\n https://api.qunitjs.com/test\n https://api.qunitjs.com/QUnit.asyncTest\n https://api.qunitjs.com/QUnit.dump.parse\n https://api.qunitjs.com/QUnit.jsDump.parse\n https://api.qunitjs.com/QUnit.module\n https://api.qunitjs.com/QUnit.start\n https://api.qunitjs.com/QUnit.stop\n https://api.qunitjs.com/QUnit.test\n\nCategory 2: Redirects we need.\nMost of these are URLs I discovered by looking through jquery/* and qunitjs/* on GitHub for mentioned urls, and here are the ones that are dead:\n\n http://api.qunitjs.com/asyncTest/\n http://api.qunitjs.com/deepEqual/\n http://api.qunitjs.com/equal/\n http://api.qunitjs.com/expect/\n http://api.qunitjs.com/module/\n http://api.qunitjs.com/notDeepEqual/\n http://api.qunitjs.com/notEqual/\n http://api.qunitjs.com/notStrictEqual/\n http://api.qunitjs.com/ok/\n http://api.qunitjs.com/start/\n http://api.qunitjs.com/stop/\n http://api.qunitjs.com/strictEqual/\n http://api.qunitjs.com/test/\n http://api.qunitjs.com/throws/\nhttp://api.qunitjs.com/QUnit.init/\nhttp://api.qunitjs.com/QUnit.reset/", "createdAt": "2018-06-17T20:48:12Z", "updatedAt": "2018-06-17T23:27:16Z", "closedAt": "2018-06-17T23:27:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-06-17T21:13:33Z", "contents": "This looks promising, and easy: https://help.github.com/articles/redirects-on-github-pages/.\nI like the idea of doing the redirects contextually within their target page, makes it much easier to review and maintain and less fragile.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1294, "url": "https://github.com/qunitjs/qunit/issues/1294", "title": "Consider element ID in html reporter part of API", "contents": "Tell us about your runtime:\n\nQUnit version: 2.6.1\n**What environment are you running QUnit in? **: Browser\n\nHi, i started a topic in the gitter chat and i was suggested to come here for a feature proposal.\nI would like to have a way from the qunit tests, to modify the HTML output of the qunit html reporter.\nI m testing canvas differences with one of the libraries available, in case of failure i would like to display the 3 images ( actual, expected, diff ) in the html reporter.\nI do understand this is a narrow use case, while maybe an api to define plugins to make this modification possible could be a more generic solution.\nWhat do you think?\nIf you think the idea is nice i would start to study the library to work on it and open a PR with a first draft.", "createdAt": "2018-06-26T22:30:22Z", "updatedAt": "2019-01-03T21:45:26Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "asturur", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "asturur", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 14, "comments_data": [{"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-06-26T22:40:17Z", "contents": "If i had to do a quick job i would:\ntake this empty line here:\nhttps://github.com/qunitjs/qunit/blob/master/reporter/html.js#L837\nadd there  details.callback(message);\nWhere message is the html that is going to be appended, and write a function that can add my HTML there.\nThen i would search the clean way to decorate all the output details with a reference to this function.\nWhat do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-06-28T03:57:16Z", "contents": "I don't think an API like this would see much use outside of the specific use case you've presented. That said, you should be able to achieve the same results by registering an additional QUnit.log callback that modifies the output immediately after it is created.\nWhile the markup the reporter generates isn't explicitly considered part of our public API, it is unlikely to change/break any time in the near future, so it should be safe.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-06-28T06:27:11Z", "contents": "My solution also would not work.\nDoes Log let me do something with the Html node, or just strings? i need to append pre painted canvas, html markups are not enough, and large dataurls may be a waste of cpu time", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-07-12T13:30:43Z", "contents": "Sorry for not coming back, had lot of things to do.\nI would like to make a proposal pr anyway, at least for other people to eventually see how it can be done.\nAre you completely sure this is something you do not want?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-09-01T08:07:41Z", "contents": "While this is not specified in the docs:\nhttps://github.com/qunitjs/qunit/blob/master/src/test.js#L328\ncan i count this as a part of the details in the API?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-09-01T08:46:39Z", "contents": "So with some wild code i could do what i was looking for without modifying the lib or the need for a new api\n\nThe problem is that the API does not allow me to create a PER TEST callback.\ni can create a testDone callback but i can't remove it,  i can't pass parameters in it at all, so it means i have to rely on external variables.\nThis is bad.\nIf we could have a per test callback, or a way to remove a callback, that means i could define a scoped callback from inside the test and remove it after the test is done, and produce a new one in the next test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-09-01T08:47:07Z", "contents": "Indeed what i did work for 1 module, in the next module the second callback stack with the previous and everything break.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2018-09-01T08:56:06Z", "contents": "Would a method to deregister a testDone callback be accepted as a PR?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-01-03T20:40:10Z", "contents": "See also https://github.com/Krinkle/node-colorfactory, which uses the DOM API (select by ID) to visualise additional information from a QUnit test onto the HTML report.\nCode at /test/testinit.js and /test/testinit.css\nExample:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2019-01-03T20:43:31Z", "contents": "i did something similar. unsure if is worth creating a plugin. I did not need to modify any qunit file, but i could plug it from outside.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2019-01-03T20:45:12Z", "contents": "http://fabricjs.com/test/visual/?coverage\nnot the best visual, but working", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-01-03T20:48:32Z", "contents": "Yeah, that uses the same interface (the HTML ID qunit-test-output-${testId}).\nI think that's fairly minimal and is good enough for this use case. It might change a little bit over time (e.g. the styling), so between QUnit upgrades minor changes may be required, but that seems okay?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asturur", "authorAssociation": "NONE", "createdAt": "2019-01-03T21:06:06Z", "contents": "Qunit as a test runner has a unique feature of running a bit everywhere.\nVisual testing would be a nice addition and an official single api to handle dom modifications would be fair too.\nWould be enough to consider that htmlID change as a breaking change with a major bump.\nJust recognize it as a feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-01-03T21:44:51Z", "contents": "Yeah, I think the theme and styling changes should not be considered a breaking change (esp. because you can use any theme).\nBut, the entry point for the DOM (the HTML ID) could be something we can agree to only break with semver-major.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-reporter", "meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1300, "url": "https://github.com/qunitjs/qunit/issues/1300", "title": "Too verbose reporting?", "contents": "When comparing two non-equal objects that have the same prototype chain, it seems unnecessary to report all the properties that reside on their prototype chain. This because we can know a priori that the difference between the two objects won't be found in their prototype object.\nThis behavior discourages test driven development, as having several failing tests quickly result in insurmountable amounts of lines being logged. Generating all that HTML slows down the browser.\nThis issue has two legs:\na. Should the Diff-section log all prototypal properties when we know that the difference between the objects can't reside among the prototypal properties?\nb. Should qUnit log all prototypal properties when logging an object?\nExample:\na.deepEqual( new THREE.Vector3(1,2,3), new THREE.Vector3(2,3,4), \"Bare bone test of excessive logging of prototype properties\" );\nThis test gives this output:\n\nBare bone test of prototype comparison@ 80 ms\nExpected: \t\n{\n  \"add\": function add( a, b ){\n    [code]\n  },\n  \"addScalar\": function addScalar( a ){\n    [code]\n  },\n  \"addScaledVector\": function addScaledVector( a, b ){\n    [code]\n  },\n  \"addVectors\": function addVectors( a, b ){\n    [code]\n  },\n  \"angleTo\": function angleTo( a ){\n    [code]\n  },\n  \"applyAxisAngle\": function applyAxisAngle( a, b ){\n    [code]\n  },\n  \"applyEuler\": function applyEuler( a ){\n    [code]\n  },\n  \"applyMatrix3\": function applyMatrix3( a ){\n    [code]\n  },\n  \"applyMatrix4\": function applyMatrix4( a ){\n    [code]\n  },\n  \"applyProjection\": function applyProjection( a ){\n    [code]\n  },\n  \"applyQuaternion\": function applyQuaternion( a ){\n    [code]\n  },\n  \"ceil\": function ceil(){\n    [code]\n  },\n  \"changeBasis\": function changeBasis( a, b, c, d ){\n    [code]\n  },\n  \"clamp\": function clamp( a, b ){\n    [code]\n  },\n  \"clampLength\": function clampLength( a, b ){\n    [code]\n  },\n  \"clampScalar\": function clampScalar( a, b ){\n    [code]\n  },\n  \"clone\": function clone(){\n    [code]\n  },\n  \"copy\": function copy( a ){\n    [code]\n  },\n  \"cross\": function cross( a, b ){\n    [code]\n  },\n  \"crossVectors\": function crossVectors( a, b ){\n    [code]\n  },\n  \"distanceTo\": function distanceTo( a ){\n    [code]\n  },\n  \"distanceToManhattan\": function distanceToManhattan( a ){\n    [code]\n  },\n  \"distanceToSquared\": function distanceToSquared( a ){\n    [code]\n  },\n  \"divide\": function divide( a ){\n    [code]\n  },\n  \"divideScalar\": function divideScalar( a ){\n    [code]\n  },\n  \"dot\": function dot( a ){\n    [code]\n  },\n  \"equals\": function equals( a ){\n    [code]\n  },\n  \"floor\": function floor(){\n    [code]\n  },\n  \"fromArray\": function fromArray( a, b ){\n    [code]\n  },\n  \"fromAttribute\": function fromAttribute( a, b, c ){\n    [code]\n  },\n  \"fromBufferAttribute\": function fromBufferAttribute( a, b, c ){\n    [code]\n  },\n  \"getColumnFromMatrix\": function getColumnFromMatrix( a, b ){\n    [code]\n  },\n  \"getComponent\": function getComponent( a ){\n    [code]\n  },\n  \"getPositionFromMatrix\": function getPositionFromMatrix( a ){\n    [code]\n  },\n  \"getScaleFromMatrix\": function getScaleFromMatrix( a ){\n    [code]\n  },\n  \"isVector3\": true,\n  \"length\": function length(){\n    [code]\n  },\n  \"lengthManhattan\": function lengthManhattan(){\n    [code]\n  },\n  \"lengthSq\": function lengthSq(){\n    [code]\n  },\n  \"lerp\": function lerp( a, b ){\n    [code]\n  },\n  \"lerpVectors\": function lerpVectors( a, b, c ){\n    [code]\n  },\n  \"manhattanDistanceTo\": function manhattanDistanceTo( a ){\n    [code]\n  },\n  \"manhattanLength\": function manhattanLength(){\n    [code]\n  },\n  \"max\": function max( a ){\n    [code]\n  },\n  \"min\": function min( a ){\n    [code]\n  },\n  \"multiply\": function multiply( a, b ){\n    [code]\n  },\n  \"multiplyScalar\": function multiplyScalar( a ){\n    [code]\n  },\n  \"multiplyVectors\": function multiplyVectors( a, b ){\n    [code]\n  },\n  \"negate\": function negate(){\n    [code]\n  },\n  \"normalize\": function normalize(){\n    [code]\n  },\n  \"project\": function project( a ){\n    [code]\n  },\n  \"projectOnPlane\": function projectOnPlane( a ){\n    [code]\n  },\n  \"projectOnVector\": function projectOnVector( a ){\n    [code]\n  },\n  \"reflect\": function reflect( a ){\n    [code]\n  },\n  \"rejectOnVector\": function rejectOnVector( a ){\n    [code]\n  },\n  \"round\": function round(){\n    [code]\n  },\n  \"roundToZero\": function roundToZero(){\n    [code]\n  },\n  \"set\": function set( a, b, c ){\n    [code]\n  },\n  \"setComponent\": function setComponent( a, b ){\n    [code]\n  },\n  \"setEulerFromQuaternion\": function setEulerFromQuaternion(){\n    [code]\n  },\n  \"setEulerFromRotationMatrix\": function setEulerFromRotationMatrix(){\n    [code]\n  },\n  \"setFromCylindrical\": function setFromCylindrical( a ){\n    [code]\n  },\n  \"setFromMatrixColumn\": function setFromMatrixColumn( a, b ){\n    [code]\n  },\n  \"setFromMatrixPosition\": function setFromMatrixPosition( a ){\n    [code]\n  },\n  \"setFromMatrixScale\": function setFromMatrixScale( a ){\n    [code]\n  },\n  \"setFromSpherical\": function setFromSpherical( a ){\n    [code]\n  },\n  \"setLength\": function setLength( a ){\n    [code]\n  },\n  \"setScalar\": function setScalar( a ){\n    [code]\n  },\n  \"setX\": function setX( a ){\n    [code]\n  },\n  \"setY\": function setY( a ){\n    [code]\n  },\n  \"setZ\": function setZ( a ){\n    [code]\n  },\n  \"sub\": function sub( a, b ){\n    [code]\n  },\n  \"subScalar\": function subScalar( a ){\n    [code]\n  },\n  \"subVectors\": function subVectors( a, b ){\n    [code]\n  },\n  \"toArray\": function toArray( a, b ){\n    [code]\n  },\n  \"transformDirection\": function transformDirection( a ){\n    [code]\n  },\n  \"unproject\": function unproject( a ){\n    [code]\n  },\n  \"x\": 2,\n  \"y\": 3,\n  \"z\": 4\n}\nResult:\n{\n\"add\": function add( a, b ){\n[code]\n},\n\"addScalar\": function addScalar( a ){\n[code]\n},\n\"addScaledVector\": function addScaledVector( a, b ){\n[code]\n},\n\"addVectors\": function addVectors( a, b ){\n[code]\n},\n\"angleTo\": function angleTo( a ){\n[code]\n},\n\"applyAxisAngle\": function applyAxisAngle( a, b ){\n[code]\n},\n\"applyEuler\": function applyEuler( a ){\n[code]\n},\n\"applyMatrix3\": function applyMatrix3( a ){\n[code]\n},\n\"applyMatrix4\": function applyMatrix4( a ){\n[code]\n},\n\"applyProjection\": function applyProjection( a ){\n[code]\n},\n\"applyQuaternion\": function applyQuaternion( a ){\n[code]\n},\n\"ceil\": function ceil(){\n[code]\n},\n\"changeBasis\": function changeBasis( a, b, c, d ){\n[code]\n},\n\"clamp\": function clamp( a, b ){\n[code]\n},\n\"clampLength\": function clampLength( a, b ){\n[code]\n},\n\"clampScalar\": function clampScalar( a, b ){\n[code]\n},\n\"clone\": function clone(){\n[code]\n},\n\"copy\": function copy( a ){\n[code]\n},\n\"cross\": function cross( a, b ){\n[code]\n},\n\"crossVectors\": function crossVectors( a, b ){\n[code]\n},\n\"distanceTo\": function distanceTo( a ){\n[code]\n},\n\"distanceToManhattan\": function distanceToManhattan( a ){\n[code]\n},\n\"distanceToSquared\": function distanceToSquared( a ){\n[code]\n},\n\"divide\": function divide( a ){\n[code]\n},\n\"divideScalar\": function divideScalar( a ){\n[code]\n},\n\"dot\": function dot( a ){\n[code]\n},\n\"equals\": function equals( a ){\n[code]\n},\n\"floor\": function floor(){\n[code]\n},\n\"fromArray\": function fromArray( a, b ){\n[code]\n},\n\"fromAttribute\": function fromAttribute( a, b, c ){\n[code]\n},\n\"fromBufferAttribute\": function fromBufferAttribute( a, b, c ){\n[code]\n},\n\"getColumnFromMatrix\": function getColumnFromMatrix( a, b ){\n[code]\n},\n\"getComponent\": function getComponent( a ){\n[code]\n},\n\"getPositionFromMatrix\": function getPositionFromMatrix( a ){\n[code]\n},\n\"getScaleFromMatrix\": function getScaleFromMatrix( a ){\n[code]\n},\n\"isVector3\": true,\n\"length\": function length(){\n[code]\n},\n\"lengthManhattan\": function lengthManhattan(){\n[code]\n},\n\"lengthSq\": function lengthSq(){\n[code]\n},\n\"lerp\": function lerp( a, b ){\n[code]\n},\n\"lerpVectors\": function lerpVectors( a, b, c ){\n[code]\n},\n\"manhattanDistanceTo\": function manhattanDistanceTo( a ){\n[code]\n},\n\"manhattanLength\": function manhattanLength(){\n[code]\n},\n\"max\": function max( a ){\n[code]\n},\n\"min\": function min( a ){\n[code]\n},\n\"multiply\": function multiply( a, b ){\n[code]\n},\n\"multiplyScalar\": function multiplyScalar( a ){\n[code]\n},\n\"multiplyVectors\": function multiplyVectors( a, b ){\n[code]\n},\n\"negate\": function negate(){\n[code]\n},\n\"normalize\": function normalize(){\n[code]\n},\n\"project\": function project( a ){\n[code]\n},\n\"projectOnPlane\": function projectOnPlane( a ){\n[code]\n},\n\"projectOnVector\": function projectOnVector( a ){\n[code]\n},\n\"reflect\": function reflect( a ){\n[code]\n},\n\"rejectOnVector\": function rejectOnVector( a ){\n[code]\n},\n\"round\": function round(){\n[code]\n},\n\"roundToZero\": function roundToZero(){\n[code]\n},\n\"set\": function set( a, b, c ){\n[code]\n},\n\"setComponent\": function setComponent( a, b ){\n[code]\n},\n\"setEulerFromQuaternion\": function setEulerFromQuaternion(){\n[code]\n},\n\"setEulerFromRotationMatrix\": function setEulerFromRotationMatrix(){\n[code]\n},\n\"setFromCylindrical\": function setFromCylindrical( a ){\n[code]\n},\n\"setFromMatrixColumn\": function setFromMatrixColumn( a, b ){\n[code]\n},\n\"setFromMatrixPosition\": function setFromMatrixPosition( a ){\n[code]\n},\n\"setFromMatrixScale\": function setFromMatrixScale( a ){\n[code]\n},\n\"setFromSpherical\": function setFromSpherical( a ){\n[code]\n},\n\"setLength\": function setLength( a ){\n[code]\n},\n\"setScalar\": function setScalar( a ){\n[code]\n},\n\"setX\": function setX( a ){\n[code]\n},\n\"setY\": function setY( a ){\n[code]\n},\n\"setZ\": function setZ( a ){\n[code]\n},\n\"sub\": function sub( a, b ){\n[code]\n},\n\"subScalar\": function subScalar( a ){\n[code]\n},\n\"subVectors\": function subVectors( a, b ){\n[code]\n},\n\"toArray\": function toArray( a, b ){\n[code]\n},\n\"transformDirection\": function transformDirection( a ){\n[code]\n},\n\"unproject\": function unproject( a ){\n[code]\n},\n\"x\": 1,\n\"y\": 2,\n\"z\": 3\n}\nDiff:\n{\n\"add\": function add( a, b ){\n[code]\n},\n\"addScalar\": function addScalar( a ){\n[code]\n},\n\"addScaledVector\": function addScaledVector( a, b ){\n[code]\n},\n\"addVectors\": function addVectors( a, b ){\n[code]\n},\n\"angleTo\": function angleTo( a ){\n[code]\n},\n\"applyAxisAngle\": function applyAxisAngle( a, b ){\n[code]\n},\n\"applyEuler\": function applyEuler( a ){\n[code]\n},\n\"applyMatrix3\": function applyMatrix3( a ){\n[code]\n},\n\"applyMatrix4\": function applyMatrix4( a ){\n[code]\n},\n\"applyProjection\": function applyProjection( a ){\n[code]\n},\n\"applyQuaternion\": function applyQuaternion( a ){\n[code]\n},\n\"ceil\": function ceil(){\n[code]\n},\n\"changeBasis\": function changeBasis( a, b, c, d ){\n[code]\n},\n\"clamp\": function clamp( a, b ){\n[code]\n},\n\"clampLength\": function clampLength( a, b ){\n[code]\n},\n\"clampScalar\": function clampScalar( a, b ){\n[code]\n},\n\"clone\": function clone(){\n[code]\n},\n\"copy\": function copy( a ){\n[code]\n},\n\"cross\": function cross( a, b ){\n[code]\n},\n\"crossVectors\": function crossVectors( a, b ){\n[code]\n},\n\"distanceTo\": function distanceTo( a ){\n[code]\n},\n\"distanceToManhattan\": function distanceToManhattan( a ){\n[code]\n},\n\"distanceToSquared\": function distanceToSquared( a ){\n[code]\n},\n\"divide\": function divide( a ){\n[code]\n},\n\"divideScalar\": function divideScalar( a ){\n[code]\n},\n\"dot\": function dot( a ){\n[code]\n},\n\"equals\": function equals( a ){\n[code]\n},\n\"floor\": function floor(){\n[code]\n},\n\"fromArray\": function fromArray( a, b ){\n[code]\n},\n\"fromAttribute\": function fromAttribute( a, b, c ){\n[code]\n},\n\"fromBufferAttribute\": function fromBufferAttribute( a, b, c ){\n[code]\n},\n\"getColumnFromMatrix\": function getColumnFromMatrix( a, b ){\n[code]\n},\n\"getComponent\": function getComponent( a ){\n[code]\n},\n\"getPositionFromMatrix\": function getPositionFromMatrix( a ){\n[code]\n},\n\"getScaleFromMatrix\": function getScaleFromMatrix( a ){\n[code]\n},\n\"isVector3\": true,\n\"length\": function length(){\n[code]\n},\n\"lengthManhattan\": function lengthManhattan(){\n[code]\n},\n\"lengthSq\": function lengthSq(){\n[code]\n},\n\"lerp\": function lerp( a, b ){\n[code]\n},\n\"lerpVectors\": function lerpVectors( a, b, c ){\n[code]\n},\n\"manhattanDistanceTo\": function manhattanDistanceTo( a ){\n[code]\n},\n\"manhattanLength\": function manhattanLength(){\n[code]\n},\n\"max\": function max( a ){\n[code]\n},\n\"min\": function min( a ){\n[code]\n},\n\"multiply\": function multiply( a, b ){\n[code]\n},\n\"multiplyScalar\": function multiplyScalar( a ){\n[code]\n},\n\"multiplyVectors\": function multiplyVectors( a, b ){\n[code]\n},\n\"negate\": function negate(){\n[code]\n},\n\"normalize\": function normalize(){\n[code]\n},\n\"project\": function project( a ){\n[code]\n},\n\"projectOnPlane\": function projectOnPlane( a ){\n[code]\n},\n\"projectOnVector\": function projectOnVector( a ){\n[code]\n},\n\"reflect\": function reflect( a ){\n[code]\n},\n\"rejectOnVector\": function rejectOnVector( a ){\n[code]\n},\n\"round\": function round(){\n[code]\n},\n\"roundToZero\": function roundToZero(){\n[code]\n},\n\"set\": function set( a, b, c ){\n[code]\n},\n\"setComponent\": function setComponent( a, b ){\n[code]\n},\n\"setEulerFromQuaternion\": function setEulerFromQuaternion(){\n[code]\n},\n\"setEulerFromRotationMatrix\": function setEulerFromRotationMatrix(){\n[code]\n},\n\"setFromCylindrical\": function setFromCylindrical( a ){\n[code]\n},\n\"setFromMatrixColumn\": function setFromMatrixColumn( a, b ){\n[code]\n},\n\"setFromMatrixPosition\": function setFromMatrixPosition( a ){\n[code]\n},\n\"setFromMatrixScale\": function setFromMatrixScale( a ){\n[code]\n},\n\"setFromSpherical\": function setFromSpherical( a ){\n[code]\n},\n\"setLength\": function setLength( a ){\n[code]\n},\n\"setScalar\": function setScalar( a ){\n[code]\n},\n\"setX\": function setX( a ){\n[code]\n},\n\"setY\": function setY( a ){\n[code]\n},\n\"setZ\": function setZ( a ){\n[code]\n},\n\"sub\": function sub( a, b ){\n[code]\n},\n\"subScalar\": function subScalar( a ){\n[code]\n},\n\"subVectors\": function subVectors( a, b ){\n[code]\n},\n\"toArray\": function toArray( a, b ){\n[code]\n},\n\"transformDirection\": function transformDirection( a ){\n[code]\n},\n\"unproject\": function unproject( a ){\n[code]\n},\n\"x\": 21,\n\"y\": 32,\n\"z\": 43\n}", "createdAt": "2018-08-01T07:35:41Z", "updatedAt": "2018-10-12T03:27:32Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "loldrup", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "loldrup", "company": null}, {"login": "Arkni", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "Arkni", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-08-01T09:34:18Z", "contents": "This looks like a duplicate of #1209", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "loldrup", "authorAssociation": "NONE", "createdAt": "2018-08-01T11:09:35Z", "contents": "It does look like a duplicate of #1209, but, in #1209 I did not demonstrate that the problem is also a problem merely when comparing objects that have the same prototype. In #1209 I only complained about the prototype being shown when just one object had a prototype. I'd say this bug report describes a tighter problem than #1209, if you get what I mean.\nIn #1209 Krinkle wrote:\n\"Just for the record, QUnit's deep comparator does not needless follow prototype chains. It does a recursive comparison on each property. Only when a property isn't equal will it traverse the referenced object. This means that prototype chains, naturally, are not followed if they are the same.\nHowever, this issue is specific to the logging of the results once a difference is determined. It seems in that case we always dump the full object, regardless of how deep the comparator had to traverse.\"\nWith this bug report I believe to have demonstrated that Krinkle was not right in saying this. We now see that prototype chains are followed even when they are perfectly similar.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-10-12T03:26:18Z", "contents": "They are followed for printing purposes, not for comparison purposes. This means the assertion is fast and efficient, but the html reporter and diff logic are currently needlessly verbose.\nSolving this at the presentation layer will be difficult. But while inefficient, the best solution is probably to still follow it recursively in the html reporter but then, after we followed it, to narrow it down the same way most diff algorithms do, by showing a limited number of unchanged lines for \"context\" around the unchanged lines.\nCurrently, QUnit prints all the lines in the output of actual/unexpected.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1301, "url": "https://github.com/qunitjs/qunit/issues/1301", "title": "Incorrect DOM built in appendTestResults()", "contents": "Tell us about your runtime:\n\nQUnit version: 2.6.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser\nHow are you running QUnit? (e.g., script, testem, Grunt): grunt\n\n\nWhat are you trying to do?\nIf the contents of \"#qunit\" is extracted with innerHTML and written to a HTML file, the resultant HTML is invalid.  This is because \"#qunit-testresult\" is created as a \"p\" and its innerHTML is filled with several \"divs\" like \"#qunit-testresult-display\" and \"#qunit-testresult-controls\".\nThe problem is that a \"div\" element is not valid content of a \"p\".  In fact the HTML spec states that  a \"p\" followed by a \"div\" should assume that the end tag of the \"p\" has been omitted.\nThe result of parsing <p id=qunit-testresult\"><div id=qunit-testresult-display /></p> is an empty \"p\" element with the \"divs\" as siblings.  This breaks any CSS used to format this section.\nThe fix is to make \"#qunit-testresult\" a \"div\" instead.", "createdAt": "2018-08-02T20:30:53Z", "updatedAt": "2019-02-28T09:45:42Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "kjax", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "kjax", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-22T21:05:44Z", "contents": "Thanks for reporting. I've reproduced it in a small test case at CodePen: https://codepen.io/Krinkle/pen/zywGYE.\nWhile I'm familiar with this behaviour for other elements in the HTML spec (such as list items and tables), I was surprised to see it apply to well-balanced elements like this. I know that for anchor tags, for example, the spec was updated to match reality (that is, they are allowed to span block elements).\nLooks like we should get this fixed!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "MEMBER", "createdAt": "2019-02-28T09:45:42Z", "contents": "I hit this issue when migrating the jQuery repository from QUnit 1 to 2. Not a very big deal but it messes up formatting of the tests results header a little.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["category-api", "component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1302, "url": "https://github.com/qunitjs/qunit/issues/1302", "title": "Update development dependencies for CVE-2018-3728", "contents": "GitHub's vulnerability detection flags the following\n\nDependencies defined in package-lock.json (556)\n\nhapijs / hoek [ Known security vulnerability in 2.16.3 ]\n\n\naffects all versions before 4.2.0 and 5.0.x before 5.0\n\n\nSee also:\n\nhttps://nvd.nist.gov/vuln/detail/CVE-2018-3728\nhttps://www.npmjs.com/package/hoek\nhttps://github.com/hapijs/hoek", "createdAt": "2018-08-07T22:02:56Z", "updatedAt": "2018-12-22T20:21:22Z", "closedAt": "2018-08-19T20:24:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 6, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-08-07T22:28:49Z", "contents": "Tracing package-lock.json, all uses of hoek specify \"hoek\": \"2.x.x\",. Including boom, hawk, sntp. Those in turn are used by request. Which are is used by coveralls (request 2.79.0), phantomjs-prebuilt (request 2.81.0).\nThey are dependencies of grunt-coveralls and grunt-contrib-qunit, which we specify in package.json#devDependencies.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-08-08T02:42:22Z", "contents": "I'm drafting a change to upgrade grunt-contrib-qunit, but ran into gruntjs/grunt-contrib-qunit#149.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-08-09T03:21:31Z", "contents": "@Krinkle thanks for looking into this! Let me know if there is anything I can do to help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-08-09T14:40:33Z", "contents": "@trentmwillis Thanks, I'll continue on grunt-contrib-qunit. Could you look into grunt-coveralls?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-08-09T19:45:27Z", "contents": "Sure, I'll take a look this weekend.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-08-19T20:24:12Z", "contents": "I'm going to close this because the vulnerability has been addressed, but we should still finish the grunt-contrib-qunit upgrade.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1308, "url": "https://github.com/qunitjs/qunit/issues/1308", "title": "`console.log` inside `QUnit.done` does not work in terminal", "contents": "Tell us about your runtime:\n\nQUnit version: 2.4.1\nWhat environment are you running QUnit in? (e.g., browser, Node): browser (Chrome headless)\nHow are you running QUnit? (e.g., script, testem, Grunt): Ember CLI 2.18, which is using Testem\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\n\nQUnit.done(() => console.log(\"foo\"));\nThis code is executed in the browser environment. I have no access to Node features from there.\nWhat did you expect to happen?\nThe log message is visible when I run tests with the terminal output (via ember test --serve, which is using Chrome headless).\n\nWhat actually happened?\nThe log message is only visible when I run tests in browser (ember test --serve). When I run tests in the terminal (ember test), the log message is not visible. It does not appear in the CI.\nconsole.logs made during test execution do appear in the terminal. But my goal is to collect some stats about tests and spit them out after all tests complete.", "createdAt": "2018-08-23T09:55:44Z", "updatedAt": "2019-01-03T20:19:39Z", "closedAt": "2018-08-23T16:10:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lolmaus", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "lolmaus", "company": "@kaliber5"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-08-23T16:10:31Z", "contents": "This isn't an issue with QUnit but with the testing setup provided by Ember-CLI.\nIn particular, Testem requires you use an adapter to bridge the browser-node communication gap. By default it provides a QUnit adapter that sends the necessary reporting info for tests. You might need to extend that adapter or define your own as mentioned here.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1309, "url": "https://github.com/qunitjs/qunit/issues/1309", "title": "Matcher Concept and assertThat", "contents": "Hi,\nthis is rather a feature request than a bug report therefore i skipped the template.\nWould it be possible to implement a matcher concept (like JUnit 4 does with Java).\nhttp://www.vogella.com/tutorials/Hamcrest/article.html\nhttps://github.com/junit-team/junit4/wiki/matchers-and-assertthat\nE.g. by implementing a method like\nassert.that(obj, matcher)\nand providing a set of standard matchers. Custom matchers can then also be created.", "createdAt": "2018-09-11T11:03:16Z", "updatedAt": "2019-01-03T20:25:24Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "tobiasso85", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tobiasso85", "company": "@SAP"}, {"login": "platinumazure", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-11T13:42:47Z", "contents": "Hi @tobiasso85, thanks for the issue.\nIf you're asking about how to write custom assertions: We do support custom assertions, which can be made available by augmenting QUnit.assert.\nIf you're aware of the existing custom assertion support and you're asking specifically about matchers: Could you please explain what functionality matchers provide that you can't get with a custom assertion, and why we should add it to core? (Already, it seems that if you wanted matcher functionality, you could implement assert.that as a custom assertion, publish that as a QUnit add-on, and then use matchers in your own project. You wouldn't specifically need a change to QUnit core.)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert", "meta", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1312, "url": "https://github.com/qunitjs/qunit/issues/1312", "title": "QUnit to fix Lighthouse only two issues; cannot locate target or script.  ", "contents": "Tell us about your runtime:\n\nQUnit version:\nWhat environment are you running QUnit in? (e.g., browser, Node):\nHow are you running QUnit? (e.g., script, testem, Grunt):\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\n\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\n\nWhat actually happened?", "createdAt": "2018-09-19T14:11:54Z", "updatedAt": "2019-01-03T20:18:58Z", "closedAt": "2018-09-20T18:13:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-09-19T15:19:06Z", "contents": "@DueTheMath did you intend to open this issue? I don't understand the title and the description is merely the default template...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-09-20T18:13:20Z", "contents": "I'm going to close this. Feel free to reopen if you meant to open and can provide more details.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1313, "url": "https://github.com/qunitjs/qunit/issues/1313", "title": "qunit:all test hanging", "contents": "Tell us about your runtime:\n\nQUnit version: master (2.6.3-pre)\nWhat environment are you running QUnit in? (e.g., browser, Node): Node\nHow are you running QUnit? (e.g., script, testem, Grunt): Grunt\n\n\nNode 9.2.1\nWhat are you trying to do?\nCode that reproduces the problem:\n\nnpm test\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nThe tests to pass (or fail)\nWhat actually happened?\nThe tests just hanged at the first test\n\nRunning \"qunit:all\" (qunit) task\nTesting http://localhost:8000/test/sandboxed-iframe.html\n\nAny idea what I may be missing? I'm on a Mac...", "createdAt": "2018-09-23T12:33:00Z", "updatedAt": "2019-01-03T20:15:47Z", "closedAt": "2018-09-30T02:33:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brettz9", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "brettz9", "company": null}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-29T17:27:31Z", "contents": "@brettz9 Can you include your Grunt config please? Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettz9", "authorAssociation": "NONE", "createdAt": "2018-09-30T00:45:22Z", "contents": "@platinumazure : Hi, I reported the issue. I was just running npm test in master while trying to develop in QUnit....", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-30T01:02:44Z", "contents": "Hi @brettz9, thanks for clarifying! Apologies for the confusion on my end.\nI can't reproduce, though I'm running on Windows. I'll try to dig into the code later this weekend to try to get an idea of what might be going on.\nIf you haven't just done a fresh install, maybe it would be worth deleting node_modules and rerunning npm install, to ensure you have the latest and greatest dependencies?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-09-30T01:21:05Z", "contents": "Hi all. I've cleaned up some irrelevant comments.\nTo the issue at hand, @brettz9 sounds like it may be a dependency issue? Could you try removing your node_modules folder and reinstalling them through Yarn? It should work as the CI is stilling passing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettz9", "authorAssociation": "NONE", "createdAt": "2018-09-30T02:33:28Z", "contents": "Using yarn instead this time (and removing node_modules as you said) did the trick, thanks!", "reactions_count": 1, "reactions_data": ["HOORAY"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1318, "url": "https://github.com/qunitjs/qunit/issues/1318", "title": "Jenkins git build failing due to not being to launch Chromium", "contents": "The Jenkins build that publishes the latest changes to master looks to have been failing since we introduced testing with Headless Chrome/Chromium.\nExample of failure here: http://jenkins.jquery.com/job/QUnit/782/console", "createdAt": "2018-10-10T16:01:14Z", "updatedAt": "2018-12-22T20:24:31Z", "closedAt": "2018-10-12T03:20:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-10-12T00:05:26Z", "contents": "My initial thinking is that maybe the Jenkins server is running an older version of the Linux distribution that Chromium no longer supports for default builds. (E.g. the Debian or Ubuntu version).\nBut, looks like it might just be a missing package, according to:\n\nhttps://techoverflow.net/2018/06/05/how-to-fix-puppetteer-error-while-loading-shared-libraries-libx11-xcb-so-1-cannot-open-shared-object-file-no-such-file-or-directory/\nGoogleChrome/puppeteer#290\n\nIf we add packages, remember to puppetize them (in the restricted jquery/infrastructure repo).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-10-12T03:20:59Z", "contents": "OK. So adding --no-sanbox didn't help. I tried locally on the server, and tried with --disable-setuid-sandbox as well, but no luck (GoogleChrome/puppeteer#290 (comment)).\nkrinkle at jenkins-01.ops.jquery.net in /var/lib/jenkins\n$ /var/lib/jenkins/jobs/QUnit/workspace/node_modules/puppeteer/.local-chromium/linux-579032/chrome-linux/chrome --no-sandbox\n\nchrome: error while loading shared libraries: libX11-xcb.so.1: cannot open shared object file: No such file or directory\n\n\n$ /var/lib/jenkins/jobs/QUnit/workspace/node_modules/puppeteer/.local-chromium/linux-579032/chrome-linux/chrome --no-sandbox --disable-setuid-sandbox\n\nchrome: error while loading shared libraries: libX11-xcb.so.1: cannot open shared object file: No such file or directory\n\nLooking further in that issue, I see a mention of https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#chrome-headless-doesnt-launch which recommends using ldd to discover missing packages.\n$ ldd /var/lib/jenkins/jobs/QUnit/workspace/node_modules/puppeteer/.local-chromium/linux-579032/chrome-linux/chrome|grep not                             \n\tlibX11-xcb.so.1 => not found\n\tlibXss.so.1 => not found\n\tlibasound.so.2 => not found\n\tlibatk-bridge-2.0.so.0 => not found\n\tlibgtk-3.so.0 => not found\n\tlibgdk-3.so.0 => not found\n\nThe following ended up being the minimal number of packages needed to make it work\n sudo apt-get install libx11-xcb1 libxss1 libasound2  libgtk-3-0\n\nAfter which, it is able to print --version without error.\n$ /var/lib/jenkins/jobs/QUnit/workspace/node_modules/puppeteer/.local-chromium/linux-579032/chrome-linux/chrome --version                 \nChromium 70.0.3508.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-10-12T03:22:50Z", "contents": "Added to standard provision for jquery-jenkins in jquery/infrastructure@74cf83e.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-10-12T15:07:18Z", "contents": "@Krinkle thanks for taking care of that! Would you be able to give me access to jquery/infrastructure? Seems like something I should probably be able to access.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "category-tests", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1321, "url": "https://github.com/qunitjs/qunit/issues/1321", "title": "QUnit 2.7 claims compatibility with Node 4, but fails", "contents": "Some of our CI systems are still running on Node 4 and the qunit npm package claims that it's still compatible with it:\nhttps://github.com/qunitjs/qunit/blob/2.7.0/package.json#L100\nUnfortunately qunit has a dependency on sane@4 though, which is Node 6+. It seems that this dependency bump was introduced without a change to the Node requirements of QUnit \ud83e\udd14\nAs our CI will try to install the latest qunit, it will try to install sane@4 now and fail:\nerror sane@4.0.1: The engine \"node\" is incompatible with this module. Expected version \"6.* || 8.* || >= 10.*\". Got \"4.9.1\"\n\n/cc @trentmwillis @stefanpenner", "createdAt": "2018-10-12T09:50:17Z", "updatedAt": "2019-01-08T02:21:57Z", "closedAt": "2018-12-29T20:17:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Turbo87", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "Turbo87", "company": "@simplabs "}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 5, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-12T11:05:57Z", "contents": "This was discussed in #1299, and QUnits policy roughly matches Ember CLI\u2019s (only supporting supported node versions). The engines field should have been updated in that PR though...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Turbo87", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-12T11:33:41Z", "contents": "that is quite unfortunate... Do we need to pin it then in ember-qunit?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-12T12:17:34Z", "contents": "We should pin in ember-qunit (IIRC ember-cli-qunit doesn\u2019t have a qunit for directly any more), then release a major I guess (need to drop Node 4 and ember-cli < 2.13 over there).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Turbo87", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-12T12:19:14Z", "contents": "@rwjblue yep, that seems like the right thing to do to me. see emberjs/ember-qunit#353", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-11-01T16:19:20Z", "contents": "Oops, closed prematurely. Need to update the engines field in package.json: \n  \n    \n      qunit/package.json\n    \n    \n         Line 100\n      in\n      ed88074\n    \n    \n    \n    \n\n        \n          \n           \"node\": \">=4\"", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMzk0MDAxOA==", "title": "2.9", "description": "", "createdAt": "2019-01-03T20:14:05Z", "dueOn": null, "number": 10, "closed": false}}, {"repo_name": "qunitjs/qunit", "issue_id": 1322, "url": "https://github.com/qunitjs/qunit/issues/1322", "title": "qunit does not run all tests in a module", "contents": "Tell us about your runtime:\n\nQUnit version: 2.7.0\nWhat environment are you running QUnit in? (e.g., browser, Node): browser, tested on firefox nightly/stable and chromium\nHow are you running QUnit? (e.g., script, testem, Grunt): script/require.js\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\nSee https://www.shlomifish.org/fc-solve--qunit-1/js-fc-solve/automated-tests/i.html - source is here - https://github.com/shlomif/fc-solve/tree/qunit-bug--module-hooks/fc-solve/site/wml (note the branch).\n\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nRun all tests.\n\nWhat actually happened?\n\nnot all tests were run and I get something in the console.\nIf I comment out this line:\n  \t\tfunction logSuiteEnd(module) {\n\n  \t\t\t// Reset `module.hooks` to ensure that anything referenced in these hooks\n  \t\t\t// has been released to be garbage collected.\n  \t\t\tmodule.hooks = {}; // <- THIS ONE\n\n  \t\t\temit(\"suiteEnd\", module.suiteReport.end(true));\n  \t\t\trunLoggingCallbacks(\"moduleDone\", {\n  \t\t\t\tname: module.name,\n  \t\t\t\ttests: module.tests,\n  \t\t\t\tfailed: module.stats.bad,\n  \t\t\t\tpassed: module.stats.all - module.stats.bad,\n  \t\t\t\ttotal: module.stats.all,\n  \t\t\t\truntime: now() - module.stats.started\n  \t\t\t});\n  \t\t}\n\nthen the problem disappears.", "createdAt": "2018-10-14T17:01:05Z", "updatedAt": "2018-12-22T21:00:21Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "shlomif", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "shlomif", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["category-api", "component-cli", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1325, "url": "https://github.com/qunitjs/qunit/issues/1325", "title": "deepEqual goes into infinite recursion", "contents": "Tell us about your runtime:\n\nQUnit version: 2.7.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser\nHow are you running QUnit? (e.g., script, testem, Grunt): Script\n\nWhat are you trying to do?\nCode that reproduces the problem:\nhttps://jsfiddle.net/bzomqak8/11/\nclass Foo {\n  constructor(a = 1) {\n    this.a = a;\n  }\n}\n\nObject.defineProperty(Foo.prototype, 'b', {\n  enumerable: true,\n  get() {\n    return new Foo(this.a + 1);\n  }\n})\n\nQUnit.test(\"hello test\", function(assert) {\n  assert.deepEqual(new Foo(), new Foo());\n});\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nI expected QUnit to not compare computed properties.\nWhat actually happened?\nQUnit compares computed properties by using a for..in loop which (due to BFS) recurses infinitely without ever hitting a stack limit.\nThis is a minimal reproduction extracted from one of our Ember apps. In the actual app we use an Ember.Object and a computed property instead of the code above, but the effect is the same.", "createdAt": "2018-10-24T12:10:57Z", "updatedAt": "2018-12-22T20:59:52Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Turbo87", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "Turbo87", "company": "@simplabs "}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-24T19:15:28Z", "contents": "Should be fixed by #1326.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "component-assert", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1327, "url": "https://github.com/qunitjs/qunit/issues/1327", "title": "Deprecate (not)deepEqual and (not)propEqual", "contents": "Deep comparison is a bundle of sharp edges. We make opinionated choices along certain dimensions for which individual use cases might have reasonable opposite preferences, and don't even document them except with references in comments to issues that successfully argued for new behavior. Some examples:\n\nFollow the prototype chain?\n\nAllow exceptions (e.g., deepEqual( Object.create(null), {} ), deepEqual( Object.create(Object.create(null)), {} ), deepEqual( new Uint8Array([1]), new Uint16Array([1]) ))?\n\n\nInclude non-enumerable properties?\nCheck descriptor attributes (e.g., writable, configurable, value vs. get)?\nStop property iteration in certain cases (e.g., functions and DOM nodes)?\nRelax comparison in certain cases (e.g., for methods added at instantiation like constructor(){ this.method = function(){\u2026}; } or for troublesome getters or [I'm sure this is coming] Number vs. BigInt)?\n\nAs long as deep comparison is bundled with the core project, there will continue to be bespoke requests like #1325. I'd much rather see it pulled out and given a proper treatment as an addon via immediate deprecation followed by removal in the next major release. Perhaps a well-documented dead-simple remnant that serves the common use case of SameValue equality across the values of all (and only) enumerable properties of plain objects and arrays could be left behind.", "createdAt": "2018-10-28T21:26:00Z", "updatedAt": "2018-12-14T20:40:02Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-28T23:03:45Z", "contents": "Hmm, IMHO it would be quite odd to have a testing framework without deep comparison capabilities. It\u2019s a pretty common assertion and widely supported by other JS testing frameworks.\n\nRelax comparison in certain cases ...snip... or for troublesome getters\n\nI\u2019d love to discuss the specific merits of #1326 with you over in the PR\u2019s itself. \ud83d\ude42", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-11-01T02:02:37Z", "contents": "I agree with @rwjblue that it would be odd to not have this out of the box. That said, I also agree with @gibson042 that greater flexibility would be nice.\nGiven those two aspects, I'd be in favor or making it possible to \"plug in\" new comparison algorithms. We could even extract the current implementation into a \"plug in\" that is included by default so that it can have it's own set of documentation and even be consumed by other projects if desired.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-assert", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1328, "url": "https://github.com/qunitjs/qunit/issues/1328", "title": "Share 'before' hook test environment with child module", "contents": "Tell us about your runtime:\n\nQUnit version: 2.6.2\nWhat environment are you running QUnit in? (e.g., browser, Node): browser\nHow are you running QUnit? (e.g., script, testem, Grunt): ember-qunit\n\nWhat are you trying to do?\nmodule('parent', function(hooks) {\n  hooks.before(function() {\n    this.hello = 'world';\n  });\n\n  test('outer', function(assert) {\n    assert.equal(this.hello, 'world'); // pass\n  });\n\n  module('child', function() {\n    test('inner', function(assert) {\n      assert.equal(this.hello, 'world'); // fails\n    });\n  });\n});\nWhat did you expect to happen?\nExpecting nested child modules to share test environment with parent module.\nWhat actually happened?\nNested child module have it's own test environment object.", "createdAt": "2018-10-29T22:23:46Z", "updatedAt": "2018-12-27T03:00:03Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "ming-codes", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ming-codes", "company": "@linkedin"}, {"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2018-10-30T01:03:33Z", "contents": "This is a practical issue that would be resolved by implementing #869.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1329, "url": "https://github.com/qunitjs/qunit/issues/1329", "title": "Add async support for QUnit.on() callback", "contents": "Add the same async promise support in other QUnit callbacks (eg: begin, done, moduleStart, etc..) to QUnit.on() as discussed here: #1307", "createdAt": "2018-11-01T16:56:17Z", "updatedAt": "2018-12-21T05:43:26Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "step2yeung", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "step2yeung", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "step2yeung", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-11-01T17:01:13Z", "contents": "Possibly as part of this enhancement, address the drop of code coverage due to adding of polyfills.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-21T04:35:28Z", "contents": "@step2yeung What is the use case for having QUnit hold back test execution for an event handler? I would expect a reporter and other event handlers to not mutate the shared state.\nInstead of making QUnit wait for async resolution, I would be actually be interested in exploring (very early idea right now) a possible extreme opposite. That is, to trigger these events in an asynchronous way so that they cannot even synchronously mutate or block test execution (e.g. fire from setTimeout/Immediate/nextTick).\nIn order to make sure that reporters can still report progress when the test suite only has synchronous tests, we'd make sure that within QUnit itself we breath a tick every once in a while. (I don't recall whether we do this already.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "step2yeung", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-12-21T05:43:26Z", "contents": "The feature that I am implementing in ember exam to dynamically load balance tests between a number of browsers running test with QUnit. A test server receives events and responds with the next test to execute in real time with the browser using events. The goal being long running tests won't cause other tests to wait, but can be distributed to other free browsers.\nWe use promises handling in QUnit callbacks implemented with #1307 to handle the events communication.\nAnother possible usecase is to use Chrome DevTools Protocol to communicate with the browser to understand browser usage (memory, or run profiler) between tests.\n@Krinkle I'm curious on your use case in not allowing pauses in test execution.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1330, "url": "https://github.com/qunitjs/qunit/issues/1330", "title": "Hide content in htmlreporter UI", "contents": "Question\nWould it be possible to change the htmlreporter UI to show something like\n| test output | current tests|\nwhere test output is a queue and the current tests area is a static area where just the tests render into?\nReasoning\nThe experience right now is very jarring as tests progress or fail, the UI is shifting content around.", "createdAt": "2018-11-05T18:59:12Z", "updatedAt": "2018-12-21T04:41:06Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "gabrielcsapo", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "gabrielcsapo", "company": "@linkedin "}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-21T04:40:37Z", "contents": "Can you include an example or screenshot to show which content you are referring to? Is this content created by your tests, or the QUnit test results/progress UI?\nIf this is about content fixtures created by your tests, are you using #qunit-fixture?\nThis element has built-in styles that visually hide the content when running tests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1331, "url": "https://github.com/qunitjs/qunit/issues/1331", "title": "Changing QUnit.config.testId has no effect.", "contents": "Tell us about your runtime:\n\nQUnit version:2.7.0\nWhat environment are you running QUnit in? (e.g., browser, Node): browser\nHow are you running QUnit? (e.g., script, testem, Grunt): ember-qunit\n\n\nWhat are you trying to do?\nI'm attempting to change the current test on the fly by clicking a button on the testing page.\nCode that reproduces the problem:\n\nconst testId = `abc`; //where abc is a valid testId\nwindow.QUnit.config.testId = [testId];\nThis has no effect.\nThe documentation says:\nThis property allows QUnit to run specific tests identified by the hashed version of their module name\nand test name. You can specify one or multiple tests to run.\n\nI have the same experience with all of the QUnit.config properties, so I'm probably just missing a step, but I have gone through the docs quite carefully and can't figure out what I would need to do to have this work like the docs describe.\nWhat did you expect to happen?\nI expect the specified test to run.\n\nWhat actually happened?\nNo apparent change in behavior.\nThe only way i am able to have any effect on the tests that run is by directly changing the window.location, which causes a page refresh.", "createdAt": "2018-11-29T06:05:04Z", "updatedAt": "2019-01-03T20:49:29Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "averydev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "averydev", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-21T04:29:05Z", "contents": "Can you include a more complete test case that also shows how QUnit is loaded and how this config script is executed?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-api", "status-stalled", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1333, "url": "https://github.com/qunitjs/qunit/issues/1333", "title": "Improve assert.throws() error in TAP reporter", "contents": "Test case\nQUnit.module( \"Throws match\", function() {\n\tQUnit.test( \"bad\", function( assert ) {\n\t\tassert.throws( function() {\n\t\t\tthrow new Error( \"Match me with a pattern\" );\n\t\t}, /incorrect pattern/, \"match error\" );\n\t} );\n} );\nWhat actually happened?\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: \"match error\"\n  severity: failed\n  actual: {}\n  expected: {}", "createdAt": "2018-12-15T20:44:08Z", "updatedAt": "2019-01-03T20:14:56Z", "closedAt": "2019-01-03T20:07:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMzk0MDAxOA==", "title": "2.9", "description": "", "createdAt": "2019-01-03T20:14:05Z", "dueOn": null, "number": 10, "closed": false}}, {"repo_name": "qunitjs/qunit", "issue_id": 1340, "url": "https://github.com/qunitjs/qunit/issues/1340", "title": "Defend against console mocks in TAP reporter", "contents": "Test case\nQUnit.module( \"e2e/cli\", function() {\n\tQUnit.test( \"help\", function( assert ) {\n\t\tvar cli = function () {};\n\t\treturn cli( \"help\" ).then( ( data ) => {\n\t\t\tassert.strictEqual( data, true, 'data' );\n\t\t} );\n\t} );\n} );\nWhat actually happened?\nqunit  test/\nTAP version 13\nok 1 Writer > constructor()\nok 2 Writer > child()\nok 3 Writer > prefix()\nok 4 e2e/cli > record\nok 5 e2e/cli > compare\nok 7 e2e/cli > unknown command\nok 8 e2e/conductor > record() - clean state per run\nok 9 conductor > expandScenario()\nok 10 util/is > like() - single type\nok 11 util/is > like() - multi type\nok 12 util/is > like() - plain object\n1..12\n# pass 11\n# skip 0\n# todo 0\n# fail 1\n\nNotes\nNote how there is nothing in the output other than fail 1. After I debugged the whole thing and realised that cli() didn't return a promise (Cannot read property 'then' of undefined\"), I did notice there is a tiny little clue.\nThe clue is, number 6 is skipped in the output (it goes from 5 to 7). So in retrospect, I could've used that to find which test the problem is with, and maybe from there find out what the problem is.\nInitially, though, I didn't even know where it was coming from.", "createdAt": "2018-12-18T05:09:57Z", "updatedAt": "2018-12-24T21:54:30Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-24T01:16:32Z", "contents": "In trying to make a test case, I found that error handling generally does actually work fine.\nThe problem was that in my specific test case, there was an active mock for the global console object. Specifically, it was a mock applied/removed from hooks.before and hooks.after.\nMocking the object from beforeEach/afterEach works fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-12-24T13:58:11Z", "contents": "Perhaps we should save off references to the original functions in the logger?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-24T19:36:26Z", "contents": "@trentmwillis Yeah, something like that.\nI haven't tried fixing it yet, but I assumed we'd have to do the ref-saving in js-reporters/TapReporter, rather than in qunit. But.. maybe we need both?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-12-24T21:54:30Z", "contents": "Ah yes, that is correct. We should do it in both locations.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["component-reporter", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1342, "url": "https://github.com/qunitjs/qunit/issues/1342", "title": "Reduce size of module dependency graph", "contents": "The qunit npm package has quite a lot of dependencies installed when used in another project.\nThe total number of packages installed according to (as of QUnit 2.8.0) is 143 packages.  (Not including dev dependencies, that are only installed for QUnit contributors.)\n\nGraph visualisation: https://npm.anvaka.com/#/view/2d/qunit/2.8.0\nTree visualisation: https://snyk.io/test/npm/qunit/2.8.0?tab=dependencies\n\nAssuming we won't be investing in a way to sandbox QUnit, I believe this is beyond what we can reasonably expect a developer to audit before installing. Keeping in mind that merely running npm install in a Git project using qunit, is enough for any of these packages turned bad to start scraping process.env, ~/.ssh, etc (e.g. through postinstall hooks, or at run-time).\nI'm aiming with this task to take a serious look at what abstractions we need and are providing value, and which we might be better off not using a package for. For problems where the abstractions can be \"simple enough to obviously have no problems\", it might be better to simply inline it within our repo (with proper licensing information inline, if based on an existing package). In such case, I believe the theoretical value gained from future updates is non-existent or small enough to not outweigh the loss in understandability and security of QUnit overall. If in these areas we do find a rare bug one day, we can easily update it by hand.\nGoal: Maximum 20, preferably less than 10.\nQUnit prides simplicity, I believe. We've done well to uphold that in our API. I'm hoping we can reach simplicity in our dependency graph as well!\nRelating reading:\n\nhttps://jakearchibald.com/2018/when-packages-go-bad/\nhttps://hackernoon.com/npm-package-permissions-an-idea-441a02902d9b\n\nAnd also:\n\nhttps://24ways.org/2018/its-beginning-to-look-a-lot-like-xssmas/\nhttps://css-tricks.com/how-to-worry-about-npm-package-weight/\nhttps://snyk.io/blog/malicious-code-found-in-npm-package-event-stream", "createdAt": "2018-12-22T20:59:15Z", "updatedAt": "2019-01-08T02:13:32Z", "closedAt": "2018-12-28T22:00:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-12-23T18:55:58Z", "contents": "I'm on board with this!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-29T02:09:23Z", "contents": "QUnit now has 9 dependencies exactly, for a total of 10 packages for downstream users.\n$ npm install --prod   \n...\nadded 9 packages\nfound 0 vulnerabilities\n\n$ npm ls\nqunit@2.8.1-pre\n+-- commander@2.12.2\n+-- js-reporters@1.2.1\n+-- minimatch@3.0.4\n| `-- brace-expansion@1.1.11\n|   +-- balanced-match@1.0.0\n|   `-- concat-map@0.0.1\n+-- node-watch@0.5.9\n`-- resolve@1.5.0\n  `-- path-parse@1.0.6\n\n\nBefore:\nQUnit 2.8.0 has 142 dependencies. \u2013 https://snyk.io/test/npm/qunit/2.8.0?tab=dependencies\n\n\n\n\nAfter\nBefore", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "HOORAY", "THUMBS_UP"]}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["component-cli", "meta", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMzk0MDAxOA==", "title": "2.9", "description": "", "createdAt": "2019-01-03T20:14:05Z", "dueOn": null, "number": 10, "closed": false}}, {"repo_name": "qunitjs/qunit", "issue_id": 1347, "url": "https://github.com/qunitjs/qunit/issues/1347", "title": "Require Windows tests passing on pull requests", "contents": "To avoid #1346 in the future, and to embrace Windows support, perhaps we should integrate AppVeyor for pull requests and require it to be passing like we do for Linux (on Travis CI).\nAlternatively, we could look into adding Windows to the Travis CI build matrix, which has experimental support as of https://blog.travis-ci.com/2018-10-11-windows-early-release.\nThoughts?\n/cc @platinumazure @trentmwillis", "createdAt": "2018-12-28T06:34:07Z", "updatedAt": "2019-01-08T02:21:57Z", "closedAt": "2019-01-02T00:11:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-12-28T06:37:08Z", "contents": "ESLint uses AppVeyor for this very purpose and it works pretty well for us.\nOne small drawback (although I'm not sure if this is still the case) is that AppVeyor runs builds in series, so the more Node versions we test there, the longer the build will take. ESLint chose to only run latest supported Node versions on AppVeyor (but all supported versions on Travis) to trade off between coverage and PR status check speed. Probably not a decision we need to make now, but wanted to make you aware.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2018-12-28T21:44:07Z", "contents": "I think we had it enabled at one point...I'm in favor in general.\nOne other thing to note though: AppVeyor (last I checked) did not have support for organizations, so the account is currently setup under @leobalter's personal account. We should see if that has changed. If it hasn't, then I think it would be worthwhile to look into using the new Travis Windows CI.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-28T21:57:34Z", "contents": "@trentmwillis Aye, good point.\nI'm looking at it now and thought maybe this was resolved as part of the shift from \"Integrations & services\" (deprecated) to \"GitHub Apps\". The new way to enable AppVeyor, is via https://github.com/organizations/qunitjs/settings/installations (e.g. no personal tokens or hooks). Once enabled as a GitHub app, AppVeyor is automatically sent events from GitHub.\nBut.. it seems they still ignore them by default and require a person to login at https://ci.appveyor.com/ to \"add\" it under their name. So it's now under both @leobalter and myself.... https://ci.appveyor.com/project/Krinkle/qunit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-28T23:08:23Z", "contents": "I'm trying out Travis' Windows image in my fork, and running into a \"Chrome DLL error\". This appears to be specific to Windows Server 2016 and the (older) Chrome version that grunt-contrib-qunit ships via its pinned version of puppeteer.\nAt AppVeyor we currently use Windows Server 2012, which appears unaffected. Upgrading to Chrome 72 or later resolved the issue. Pul request pending at gruntjs/grunt-contrib-qunit#155.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "meta", "meta-ready"], "milestone": {"id": "MDk6TWlsZXN0b25lMzk0MDAxOA==", "title": "2.9", "description": "", "createdAt": "2019-01-03T20:14:05Z", "dueOn": null, "number": 10, "closed": false}}, {"repo_name": "qunitjs/qunit", "issue_id": 1348, "url": "https://github.com/qunitjs/qunit/issues/1348", "title": "Require npmjs.org 2FA for package publishing", "contents": "Reading through RELEASE.md (Thanks @trentmwillis for writing this!), it noticed it says one has to temporarily disable the npmjs.org account protection from \"Authorization  and publishing\" to \"Authorization only\".\nSee https://docs.npmjs.com/requiring-2fa-for-package-publishing-and-settings-modification\nThis issue is to:\n\nDetermine which parts of the release process would need to change to avoid this step,\nHow we could improve them, and whether to do so,\n(If we agree) Make the necessary changes,\n(If we agree) Enable the \"Require 2FA to publish\" option at https://www.npmjs.com/package/qunit/access.", "createdAt": "2018-12-29T03:17:04Z", "updatedAt": "2018-12-29T03:49:06Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "platinumazure", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-12-29T03:49:06Z", "contents": "ESLint recently implemented 2FA for npm publishes- I'll keep an eye out here for questions where that experience could be useful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1350, "url": "https://github.com/qunitjs/qunit/issues/1350", "title": "Release process without protection bypass", "contents": "Reading through RELEASE.md (Thanks @trentmwillis for writing this!), it noticed it says one has to temporarily disable branch protection for the Build: Prepare @VERSION release  commit.\nThis issue is to evaluate which parts of the release process would need to change to avoid this step, and whether would want to change it.", "createdAt": "2018-12-29T05:50:51Z", "updatedAt": "2019-01-06T22:24:04Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-29T05:56:11Z", "contents": "Note that the branch protection requirement for passing CI can be fulfilled even without the overhead of a pull request; by pushing the commit to a temporary branch (e.g. \"release\"), then wait for CI to complete. After that, it is allowed for the same commit to be pushed to master.\nThe branch protection requirement for 1 code review does require a pull request, naturally. If we want to continue do not require peer-review for releases, then perhaps we could consider lifting this requirement more generally; in favour of adopting a purely social policy (that is, we'd agree to still only land PRs after CR, with the exception of the release commit).\nDoing that would have the benefit of still letting CI run on the release commit, and more importantly, it would mean releasing QUnit no longer requires changing repository settings (or repository Admin rights).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-01-01T23:41:12Z", "contents": "I agree it would be beneficial to not need the setting changes when performing a release. Note however that currently to do a release, you just need to disable the restrictions for administrators. We could change this to always be disabled for administrators and adopt a social policy as you mention to continue ensuring other PRs/commits from project members get reviewed and pass status checks before getting merged.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-01-06T22:24:04Z", "contents": "I tried the approach of pushing only disabling the PR requirement and pushing to a branch and then pushing the same head to master once Travis CI passes, but the push was rejected:\nremote: error: Required status check \"licence/cla\" is expected.\n\nLooks like this status check for CLA only runs on PRs, not on branches.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1351, "url": "https://github.com/qunitjs/qunit/issues/1351", "title": "Document URL parameters", "contents": "Assuming the QUnit URL parameters are to be treated as part of the public interface (rather than just a mechanism for conveying GUI interactions to subsequent loads), we should document them:\n\nfilter \u2192 QUnit.config.filter\nseed \u2192 QUnit.config.seed (boolean true replaced with a random string)\nmodule (QUnit.config relation to be determined by /issues/956)\ntestId \u2192 QUnit.config.testId (splitting on commas until /issues/954 is resolved)\nmoduleId \u2192 QUnit.config.moduleId (splitting on commas until /issues/954 is resolved)\nhidepassed \u2192 QUnit.config.hidepassed (HTML reporter boolean option)\nnoglobals \u2192 QUnit.config.noglobals\nnotrycatch \u2192 QUnit.config.notrycatch\nuser-defined by QUnit.urlConfig \u2192 QUnit.config[id]", "createdAt": "2015-12-15T16:27:02Z", "updatedAt": "2018-12-29T06:04:35Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "gibson042", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "gibson042", "company": "Oracle+Dyn, jQuery/Sizzle, TC39"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 4, "comments_data": [{"authorLogin": "gibson042", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T04:23:16Z", "contents": "Since this issue is getting hot, I think it's worth asking if all of those parameters are to be treated as public interface... in short, do we feel comfortable with encouraging manually-constructed URLs and not breaking them between major releases?\nFor my own part, I say \"yes\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T04:36:54Z", "contents": "do we feel comfortable with encouraging manually-constructed URLs and not breaking them between major releases?\n\nI vote \"yes\" as well, and know that most developers I work with do manually construct urls currently anyway.\nWith that said, I'm not sure we should keep both module and moduleId as they seem redundant. I'll add more context to that in the appropriate issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T13:34:38Z", "contents": "aye", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2016-03-16T13:37:51Z", "contents": "I'm not sure we should keep both module and moduleId as they seem redundant.\n\nfor now, I prefer keeping both. It's good to get feedback on their uses as I believe module=<name> might still be better for some particular and manual usages, but moduleId is good for interface use.\nUsing only one is good for keeping QUnit lean, but we can handle this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "help wanted", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1352, "url": "https://github.com/qunitjs/qunit/issues/1352", "title": "Document deprecated API", "contents": "List all the deprecated parts of the API.\nRef #918 (comment)", "createdAt": "2016-02-01T13:43:33Z", "updatedAt": "2018-12-29T06:05:39Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1353, "url": "https://github.com/qunitjs/qunit/issues/1353", "title": "Add \"version added\" annotations to API documentation", "contents": "Similar to http://api.jquery.com/on/\n\nversion added: 1.7\n\nPages like http://api.qunitjs.com/async/ should mention e.g. \"version added: 1.16\".\nWould help a lot. Especially when working with frameworks that may abstract how or which QUnit is being loaded.", "createdAt": "2015-02-10T00:28:04Z", "updatedAt": "2018-12-29T06:06:26Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}, {"login": "leobalter", "company": "Bocoup"}], "comments_count": 2, "comments_data": [{"authorLogin": "JamesMGreene", "authorAssociation": "MEMBER", "createdAt": "2015-02-10T11:04:25Z", "contents": "I concur. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leobalter", "authorAssociation": "MEMBER", "createdAt": "2015-02-10T15:57:59Z", "contents": "\ud83d\udc4d as this should work independently from qunitjs/qunitjs.com#86.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1354, "url": "https://github.com/qunitjs/qunit/issues/1354", "title": "Document good usage of assert.expect", "contents": "Based on the discussion in #666, there are some anti-patterns around assert.expect. We should document how to use it properly, along with the anti-patterns to avoid.\nAssigning this to @JamesMGreene since he had some examples for that. Along with updating http://api.qunitjs.com/expect/ we can also check other pages, like the cookbook.", "createdAt": "2014-09-24T16:00:53Z", "updatedAt": "2018-12-29T06:06:47Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "JamesMGreene", "company": "GitHub"}], "comments_count": 2, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-10-10T13:11:15Z", "contents": "I don't think this needs to block 1.16. I'll leave it until we get there, would certainly be good to include it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-03T17:21:52Z", "contents": "Dropped the 1.16 milestone.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["EYES"], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1355, "url": "https://github.com/qunitjs/qunit/issues/1355", "title": "Split the documentation on 1.x.x and 2.x.x", "contents": "As we are in the way to 2.x.x, we should think about a solution to keep the 1.x.x documentation.\nMany things in the API are changing and people would still need to have the doc support for the 1.x.x version.\nOne vague idea is to replace documentation content to Markdown files so we can get just point to github tags. That would affect the build process, how to document, etc, but I consider it's worth a discussion.\nOther is to set the build process generate the content based on the git version and release it in a subfolder like: http://api.qunitjs.com/1.15.0/.... The problem here is to have cross links pointing to the respective entry and version.", "createdAt": "2014-09-22T15:24:35Z", "updatedAt": "2018-12-29T06:08:41Z", "closedAt": "2018-12-29T06:08:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "leobalter", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "leobalter", "company": "Bocoup"}, {"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 3, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-09-22T15:28:57Z", "contents": "We already have the infrastructure for this, used for jQuery UI. For example, 1.10 has its own site, based on the 1-10 branch). I agree that we should have a separate site for 1.x and use the main site for 2+. We can work on that after 1.16 is done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2015-02-10T00:28:26Z", "contents": "Having \"since version X.Y\" would also help a lot (see #1353).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2018-12-29T06:08:23Z", "contents": "Given the website no longer shares infrastructure with jquery-wp-content, this would be a fairly major undertaking.\nI think #1353 would be good enough as a first step, but we can always revisit this in the future.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "status-declined"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1356, "url": "https://github.com/qunitjs/qunit/issues/1356", "title": "Document failure of assertions ran after done()", "contents": "From qunitjs/qunitjs.com#84 (comment):\n\nWe need to add a clear note about the auto-failing behavior of assertions that occur after the final done resolution within a test phase... at least to the API docs if not also to the Cookbook.\n\nShould include this in the docs for assert.async().", "createdAt": "2014-11-06T15:06:14Z", "updatedAt": "2018-12-29T06:08:54Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "jzaefferer", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "jzaefferer", "authorAssociation": "MEMBER", "createdAt": "2014-12-03T17:22:35Z", "contents": "While this should be included in 1.16. @JamesMGreene @leobalter can one of you tackle this?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1357, "url": "https://github.com/qunitjs/qunit/issues/1357", "title": "Arrow functions as test/module hook callbacks", "contents": "The API documentation for QUnit.module mentions that tests are run with a test environment set as this within the test. If people are to take advantage of this functionality, they need to remember to use function expressions or function declaration references; if they don't, the mechanics of arrow functions implies that the outer this context is used.\nIs this worth noting somewhere? Would a PR be accepted for adding such a note?", "createdAt": "2016-08-23T21:38:08Z", "updatedAt": "2018-12-29T06:09:53Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "platinumazure", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-08-24T02:16:30Z", "contents": "I tend to lean towards \"no\". The main distinction between arrow functions and normal function expressions is that arrows lexically bind this. This can be a \"gotcha\" if you don't fully understand what that means, but I feel that education isn't particularly our responsibility.\nThat said, I could be convinced it's a worthwhile addition.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-24T02:40:05Z", "contents": "Well, to me it comes down to how often people want to use this for\nstoring common data in the test context object. For me, that would be\nnever. So I can certainly be persuaded that it's extraneous for the\napi.qunitjs.com website.\nHowever, I did get an issue and PR on eslint-plugin-qunit about this, so\nthat fact was definitely important to somebody. But maybe that's just one\nperson, and he already knew the score.\nOn Aug 23, 2016 9:16 PM, \"Trent Willis\" notifications@github.com wrote:\n\nI tend to lean towards \"no\". The main distinction between arrow functions\nand normal function expressions is that arrows lexically bind this. This\ncan be a \"gotcha\" if you don't fully understand what that means, but I feel\nthat education isn't particularly our responsibility.\nThat said, I could be convinced it's a worthwhile addition.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jquery/api.qunitjs.com/issues/134#issuecomment-241938821,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AARWeuF6CF30GDXk1pFXczrugqNwpkZ-ks5qi6l_gaJpZM4Jrati\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1358, "url": "https://github.com/qunitjs/qunit/issues/1358", "title": "Document callback ordering more explicitly.", "contents": "The ordering of callbacks is not very obvious in the API docs currently. As I read through https://api.qunitjs.com/callbacks/, I am left with many questions. I poked around the test suite in jquery/qunitjs and didn't find a test that listed all callbacks in order in an array passed to a assert.deepEquals(actualHooksFired, expectedHookOrder) call to help me (here is an example in Ember that shows the explicit hook order for component lifecycle).\nA few examples of the questions that I had after reading through the docs of QUnit.testStart (just to pick a single hook for demonstration purposes):\nThe description of QUnit.testStart() says this:\n\nDescription: Register a callback to fire whenever a test begins.\n\nOutstanding questions are:\n\nIs a callback registered with QUnit.testStart called before or after moduleStart?\nIs a callback registered with QUnit.testStart called before or after any individual beforeEach in the tests direct module parent?\nIs a callback registered with QUnit.testStart called before or after the the before callback in the tests direct module parent?\nIs the this context set to the same shared this context that will be used in the tests beforeEach / test?\n\n\nI would be more than happy to try and help flesh these out, but I'd like to:\n\n Confirm the explicit ordering is under test\n Verify that this is something that we want to have documented on the main site", "createdAt": "2016-09-16T01:43:28Z", "updatedAt": "2018-12-29T06:10:07Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2016-09-16T02:07:32Z", "contents": "This is likely something we should have documented rather explicitly. We do have some tests, but likely not enough.\nCurrently, the tests covering ordering are the modules tests and logs tests. The logs ones don't do a great job at prescribing the order in which they are expected to be fired (likely something we should add tests for).\nI think the following diagram should answer the majority of your questions. I like to think of the callbacks/hooks in a nesting fashion:\nbegin\n|--moduleStart\n|----testStart\n|------before\n|------beforeEach\n|------afterEach\n|----testDone\n|----testStart\n|------beforeEach\n|------afterEach\n|------after\n|----testDone\n|--moduleDone\n|--moduleStart\n|----testStart\n|------before\n|------beforeEach\n|------afterEach\n|------after\n|----testDone\n|--moduleDone\ndone\n\nThe only ones I don't find particularly intuitive are the before / after hooks, since they feel like they should be outside the testStart / testDone callbacks.\nThe this context inside test callbacks and the test hooks is not the same as the context inside one of the callbacks. The callbacks are primarily set up as logging callbacks and so they only get specific information passed in as arguments.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1359, "url": "https://github.com/qunitjs/qunit/issues/1359", "title": "Make CLI tests passing on Windows", "contents": "As part of #1347 I tried to consolidate the main tests and CLI tests under plainly npm test, but ran into the problem that the CLI tests don't currently pass on Windows.\nFor a while I tried to make them work, thinking it was an issue with Travis (because AppVeyor is green). Only to realise they would also fail on AppVeyor. It's just that we don't run them there.\nSo.. filing this as a separate issue to resolve later.\nI ran into two issues:\n\nRunning an executable from a sub directory doesn't work.\n\nThe bin/qunit test/cli/*.js part of grunt && bin/qunit test/cli/*.js isn't working on Windows. It fails as follows:\n'bin' is not recognized as an internal or external command, operable program or batch file.\n\nThis is presumably due to the use of a forward-slash. Some sources on the internet suggested that wrapping them in quotes and/or using ./ would make it work, but that didn't seem to do the trick.\nWhat did work is changing the invocation to node bin/qunit test/cli/*.js.\n\nThe child processes created by the CLI tests fail.\n\n  expected: undefined\n  stack: Error: Command failed: C:\\windows\\system32\\cmd.exe /s /c \"../../../bin/qunit --reporter npm-reporter\"\n'..' is not recognized as an internal or external command,\noperable program or batch file.\n    at Promise.all.then.arr (C:\\projects\\qunit\\node_modules\\execa\\index.js:236:11)\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n  ...\n\nThis is presumably the same issue in essence. ../../../ doesn't work in that way on Windows. This might be an easy fix given that we invoke it from within Node.js, so we could easily vary the logic by process.platform and/or utilise something like path.join() to get the slashes right.", "createdAt": "2018-12-30T19:32:37Z", "updatedAt": "2019-01-01T23:51:11Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-01-01T23:51:11Z", "contents": "Thanks for working on this!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["category-tests"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1364, "url": "https://github.com/qunitjs/qunit/issues/1364", "title": "Figure out autodetect for \"grunt qunit\" test urls", "contents": "What are you trying to do?\nRunning tests via npm test, or making a release via qunitjs/jquery-release.\nWhat actually happened?\nRunning \"connect:nolivereload\" (connect) task\nFatal error: Port 8000 is already in use by another process.\nGrunt command failed\nAborting.\n\nOther notes\nIn b7df499, I added an --connect-port option to Gruntfile, but this only works when using the workflow of installing grunt-cli globally first and/or invoking it via npx.\nIt can be passed to the command within npm test as npm test -- --connect-port=8123, except that only works for the last command if there are multiple (which is no longer the grunt command as of 681cee7).\nThis can be worked around by not using npm test during local development, but that's not an option for release.js.\nDepending on how difficult it will be to use autodetect, a short-term workaround could be to make this an ENV option instead, or to find a way that doesn't involve a manually started connect server.", "createdAt": "2019-01-06T22:42:10Z", "updatedAt": "2019-01-06T22:42:10Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-tests", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1367, "url": "https://github.com/qunitjs/qunit/issues/1367", "title": "Breakage in 2.9.0:  Error: Cannot find module '../src/cli/run'", "contents": "Tell us about your runtime:\n\nQUnit version: 2.9.0\nWhat environment are you running QUnit in? (e.g., browser, Node): Node (10.11.0)\nHow are you running QUnit? (e.g., script, testem, Grunt): ./node_modules/.bin/qunit test.js\n\nWhat are you trying to do?\nRun tests that worked under 2.8.0.\nCode that reproduces the problem: an empty test.js\nWhat did you expect to happen?\nGlobal failure, no tests to run.\nWhat actually happened?\nError: Cannot find module '../src/cli/run'\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:507:25)\n    at Module.require (internal/modules/cjs/loader.js:637:17)\n    at require (internal/modules/cjs/helpers.js:20:18)\n    at Object.<anonymous> (/home/jacekkopecky/wscwk2/node_modules/qunit/bin/qunit.js:6:13)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)", "createdAt": "2019-01-07T10:27:44Z", "updatedAt": "2019-01-08T02:21:25Z", "closedAt": "2019-01-07T16:47:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jacekkopecky", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jacekkopecky", "company": "University of Portsmouth"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 8, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-07T14:36:24Z", "contents": "@Krinkle - #1344 introduced this issue (and 2.9.0 is roughly completely borked due to it). The files listing in package.json does not include src at all and so they are not included in the final published tarball.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-07T15:21:35Z", "contents": "I submitted #1368 to fix (and help prevent this regression in the future).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-01-07T16:13:45Z", "contents": "So sorry about this! @rwjblue thanks for the PR to fix. Will review and get out a new version ASAP.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-01-07T16:16:11Z", "contents": "Re-opening until a new version is released...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-01-07T16:47:01Z", "contents": "Okay, 2.9.1 has been released and should fix this issue. Again, apologies for the inconvenience!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jacekkopecky", "authorAssociation": "NONE", "createdAt": "2019-01-07T19:24:13Z", "contents": "Thanks. Out of curiosity \u2013\u00a0how did this slip past CI?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-07T19:26:29Z", "contents": "CI runs against a local check which had the files. The only way to have caught it in CI (other than the linting type setup that I did) would be to do npm pack and then npm install ./generated-tar.gz. This seems like a good idea for the actual release process but would probably cause more issues than help if we did it for every CI run...", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jacekkopecky", "authorAssociation": "NONE", "createdAt": "2019-01-07T22:03:19Z", "contents": "Thank you! If you ever do decide to integrate that in CI and remember this conversation, please post here so I know \u2013\u00a0I'm a lecturer in software engineering and there's an excellent lesson for us in here.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["category-release", "type-problem"], "milestone": {"id": "MDk6TWlsZXN0b25lMzk0MDAxOA==", "title": "2.9", "description": "", "createdAt": "2019-01-03T20:14:05Z", "dueOn": null, "number": 10, "closed": false}}, {"repo_name": "qunitjs/qunit", "issue_id": 1371, "url": "https://github.com/qunitjs/qunit/issues/1371", "title": "Parent directories \"..\" in file path", "contents": "Tell us about your runtime:\n\nQUnit version: 2.9.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Node\nHow are you running QUnit? (e.g., script, testem, Grunt): Gradle / manual\n\nWhat are you trying to do?\nLet QUnit run a JavaScript test compiled by Kotlin.\nThe test is for a specific sub-project.\nThe output file is placed outside the sub project directory itself (see tree).\nThe command was (called from the subProject1 directory, like Gradle calls QUnit):\nnode ../node_modules/qunit/bin/qunit.js ../out/subProject1-test.js\nThe project is structured like:\nproject\n|-- gradle\n|-- lib\n|-- node_modules\n|-- out\n|-- subProject1\n`-- subProject2\n\nWhat did you expect to happen?\nQUnit running the test and giving a report like running this command from the project root:\nnode node_modules/qunit/bin/qunit.js out/subProject1-test.js\nWhat actually happened?\nThe output of QUnit was:\nNo files were found matching: ../out/subProject1-test.js\n\nIt seems that QUnit does not interpret the \"..\" as \"parent directory\" while searching for the given file(s).", "createdAt": "2019-01-23T22:02:40Z", "updatedAt": "2019-02-23T22:13:35Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Zocker1999NET", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Zocker1999NET", "company": null}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-02-23T22:13:11Z", "contents": "@Zocker1999NET Thanks for trying QUnit!\nIt is not currently supported to use the internals of the qunit directory within your code. Can you try again by using the officially exported qunit program? Based on the description of the directory structure you have, I think the following might work:\nsubProject2$ ../node_modules/.bin/qunit ../out/subProject1-test.js\n\nOr\nsubProject2$ npx qunit ../out/subProject1-test.js\n\n(Note that qunit should be used as its own executable program, and not as a script parameter for the node program.)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["type-support"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1372, "url": "https://github.com/qunitjs/qunit/issues/1372", "title": "`qunit --require` does not find local module if qunit is globally installed", "contents": "Tell us about your runtime:\n\nQUnit version: 2.9.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Node v11.7.0\nHow are you running QUnit? (e.g., script, testem, Grunt): CLI\n\nWhat are you trying to do?\nPull request #1271 added the --require option, but it does not seem to work with esm, as @jdalton hoped.\nI wrote a test of using esm with qunit --require. Perhaps I am not doing it correctly. If you can help me figure this out, I would happily contribute to qunitjs/qunitjs.com#144.\nnpm install to get esm package.\nnpm install -g qunit to get qunit globally.\nqunit --require esm test.js to run the test.\nWhat actually happened?\nTAP version 13\nnot ok 1 test.js > Failed to load the test file with error:\n/Users/jeremiah/Projects/esm-qunit-experiment/test.js:1\n(function (exports, require, module, __filename, __dirname) { import {bar} from './foo.js';\n                                                                     ^\n\nSyntaxError: Unexpected token {\n    at new Script (vm.js:84:7)\n    at createScript (vm.js:264:10)\n    at Object.runInThisContext (vm.js:312:10)\n    at Module._compile (internal/modules/cjs/loader.js:684:28)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n  ---\n  message: \"should be able to load file\"\n  severity: failed\n  actual: false\n  expected: true\n  stack:     at Object.<anonymous> (/usr/local/lib/node_modules/qunit/src/cli/run.js:60:13)\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\nWhat did you expect to happen?\nTAP version 13\nok 1 Hinkle finkle dinkle doo\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0", "createdAt": "2019-01-24T13:58:04Z", "updatedAt": "2019-04-13T01:16:38Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jeremiahlee", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "jeremiahlee", "company": null}, {"login": "platinumazure", "company": null}, {"login": "jdalton", "company": "Salesforce"}, {"login": "martypdx", "company": "martypdx, llc"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 8, "comments_data": [{"authorLogin": "platinumazure", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-24T14:02:58Z", "contents": "Hi @jeremiahlee, thanks for the issue.\nJust out of curiosity, does it work if both QUnit and esm are installed locally or globally? Asking because ESLint has a similar issue where a global ESLint can't find local plugins.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeremiahlee", "authorAssociation": "NONE", "createdAt": "2019-01-24T14:24:13Z", "contents": "Good question, @platinumazure. I hadn't tried those variations.\nI tried all globally first:\nnpm uninstall esm\nnpm install -g esm\nqunit --require esm test.js\n\nI got the same error.\nThen I tried installing esm and qunit locally:\nnpm uninstall -g esm\nnpm uninstall -g qunit\nnpm install esm\nnpm install qunit\nnpx qunit --require esm test.js\n\nand it worked!\nTAP version 13\nok 1 Hinkle finkle dinkle doo\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n\nSo good news! I'm unblocked. But is this expected behavior?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2019-01-24T15:28:18Z", "contents": "Hi @jeremiahlee \ud83d\udc4b\nThanks for trying esm with QUnit!\nI can speak a little on the resolution front. I believe --require works for local modules, so your npm i esm use is ok, because Node itself cannot find globally installed packages using require().", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jeremiahlee", "authorAssociation": "NONE", "createdAt": "2019-01-24T15:46:18Z", "contents": "@jdalton Thanks for jumping in! I first tried esm locally with global qunit. Are you aware of anything with Node that would prevent global qunit resolving local esm?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdalton", "authorAssociation": "NONE", "createdAt": "2019-01-24T16:00:30Z", "contents": "Are you aware of anything with Node that would prevent global qunit resolving local esm?\n\nWithout QUnit doing some coding require() use in a globally installed package would not resolve local packages. So this may be something QUnit may extend support for using require.resolve with the options param (added in Node 8.9.0) to resolve packages from the process.cwd().", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "martypdx", "authorAssociation": "NONE", "createdAt": "2019-01-25T03:55:44Z", "contents": "I'm not able to get it work with a pure local install:\n~/classes/vanilla-web/coin-toss > npm ls -g esm\n/Users/marty/.node/lib\n\u2514\u2500\u2500 (empty)\n\n~/classes/vanilla-web/coin-toss > npm ls -g qunit\n/Users/marty/.node/lib\n\u2514\u2500\u2500 (empty)\n\n~/classes/vanilla-web/coin-toss > npm ls esm qunit\n/Users/marty/classes/vanilla-web/coin-toss\n\u251c\u2500\u2500 esm@3.1.1 \n\u2514\u2500\u2500 qunit@2.9.1 \n\n~/classes/vanilla-web/coin-toss > npx qunit --require esm test/tests.js\nTAP version 13\nnot ok 1 test/tests.js > Failed to load the test file with error:\n/Users/marty/classes/vanilla-web/coin-toss/test/tests.js:2\nimport getHeadsOrTails from '../src/get-heads-or-tails.js';\n       ^^^^^^^^^^^^^^^\n\nSyntaxError: Unexpected identifier\n    at new Script (vm.js:74:7)\n    at createScript (vm.js:246:10)\n    at Object.runInThisContext (vm.js:298:10)\n    at Module._compile (internal/modules/cjs/loader.js:670:28)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:713:10)\n    at Module.load (internal/modules/cjs/loader.js:612:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:551:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:543:3)\n    at Module.require (internal/modules/cjs/loader.js:650:17)\n    at require (internal/modules/cjs/helpers.js:20:18)\n  ---\n  message: \"should be able to load file\"\n  severity: failed\n  actual: false\n  expected: true\n  stack:     at Object.<anonymous> (/Users/marty/classes/vanilla-web/coin-toss/node_modules/qunit/src/cli/run.js:60:13)\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "martypdx", "authorAssociation": "NONE", "createdAt": "2019-01-29T16:59:57Z", "contents": "Work around is to use an intermediate file index.js file and use the \"manual\" esm method:\n/* eslint-disable */\nrequire = require('esm')(module);\nmodule.exports = require(\"./tests.js\");\nThen launch that file:\n> npx qunit tests/index.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-04-13T01:16:02Z", "contents": "I think a locally installed qunit should not find a globally installed module. Aside from not having a clear use case, it also seems unexpected. Might obscure issues locally you'd then find elsewhere.\nHowever, the case of globally installing qunit and finding a local module seems one I expect to work.\nI do generally recommend for project management to keep versioning of dependencies local to a project (and run via npx or npm run). Nonetheless, installing qunit globally is something we support and I'd expect that to work with local modules.\nI've updated the task summary to reflect that use case to distinguish it from the case where both are local, which appears to work.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["component-cli", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1374, "url": "https://github.com/qunitjs/qunit/issues/1374", "title": "testStart callback does not wait on returned Promise.", "contents": "Tell us about your runtime:\n\nQUnit version: 2.7.1\nWhat environment are you running QUnit in? (e.g., browser, Node): node v10.12.0\nHow are you running QUnit? (e.g., script, testem, Grunt): using the qunit script (eg. ./node_modules/qunit/bin/qunit)\n\nWhat are you trying to do?\nCode that reproduces the problem:\n\"use strict\";\n\nQUnit.testStart (() => {\n   console.log (\"waiting\");\n   return new Promise ((resolve, reject) => setTimeout (resolve, 5000))\n      .then (() => console.log (\"proceeding\"));\n});\nQUnit.testDone (() => console.log (\"done\"));\n\nQUnit.test (\"test\", (assert) => {\n   console.log (\"inside the test\");\n   assert.equal (2+2, 4);\n});\nCommand line:\n./node_modules/qunit/bin/qunit test.js\n\nWhat did you expect to happen?\nAccording to the documentation, QUnit should wait for the promise before proceeding, so I expected to see the traces:\nwaiting\nproceeding\ninside the test\ndone\n\nin that order with a 5s delay between waiting and proceeding.\nWhat actually happened?\nThe test proceeded immediately without waiting for the promise. I got the traces:\nwaiting\ninside the test\ndone\nproceeding\n\nwith the expected 5s delay before the proceeding trace, but by that time the test has already run.", "createdAt": "2019-02-13T08:41:11Z", "updatedAt": "2019-02-14T08:57:37Z", "closedAt": "2019-02-14T08:57:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jeberger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jeberger", "company": null}, {"login": "rwjblue", "company": "@linkedin"}], "comments_count": 2, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-02-13T17:02:10Z", "contents": "QUnit version: 2.7.1\n\n\nPer History.md supporting async in these callbacks was not landed until 2.8.0 (by way of #1307).\nCan you update and re-run your test?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeberger", "authorAssociation": "NONE", "createdAt": "2019-02-14T08:57:36Z", "contents": "Upgrading QUnit fixes the issue. Thanks for the prompt response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1375, "url": "https://github.com/qunitjs/qunit/issues/1375", "title": "Semaphore imbalance when returned promise resolves when test timed out.", "contents": "Tell us about your runtime:\n\nQUnit version:2.9.1\nWhat environment are you running QUnit in? (e.g., browser, Node): Browser & Node\nHow are you running QUnit? (e.g., script, testem, Grunt): qunit Node CLI / testem\n\n\nWhat are you trying to do?\nA test returning a promise (or an async) that runs longer than the allowed timeout period, causes an internal test semaphore imbalance if the returned promise ever settles.\nCode that reproduces the problem:\n\nQUnit.module('group of tests', function(hooks) {\n  QUnit.test('one', function(assert) {\n\tassert.timeout(10);\n\n    return new Promise(resolve => setTimeout(resolve, 20));\n  });\n\n  QUnit.test('two', function(assert) {\n   \treturn new Promise(resolve => setTimeout(resolve, 20))\n      .then(() => {\n        assert.ok(true, 'all is well');\n      });\n  });\n});\nCodePen Demo Here\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nTest one should fail (due to timeout), and test two should pass.\nWhat actually happened?\nTest one fails properly (due to timeout), however test two also fails with the following message:\nTried to restart test while already started (test's semaphore was 0 already)", "createdAt": "2019-02-20T14:12:41Z", "updatedAt": "2019-02-21T05:45:09Z", "closedAt": "2019-02-21T04:52:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rwjblue", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-02-20T14:23:39Z", "contents": "I did some debugging with @scalvert for this issue on Friday and we believe we have a good understanding of what is going on and how to fix it (so hopefully we'll have a PR inbound soon), but I wanted to create the issue for discussion also.\n\nThe basic issue is that Test.prototype.resolvePromise here always calls resume (in both reject and fulfilled scenarios) which attempts to decrements the individual tests semaphore:\n\n  \n    \n      qunit/src/test.js\n    \n    \n        Lines 523 to 539\n      in\n      766db37\n    \n    \n    \n    \n\n        \n          \n           then.call( \n        \n\n        \n          \n           \tpromise, \n        \n\n        \n          \n           \tfunction() { resume(); }, \n        \n\n        \n          \n           \tfunction( error ) { \n        \n\n        \n          \n           \t\tmessage = \"Promise rejected \" + \n        \n\n        \n          \n           \t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) + \n        \n\n        \n          \n           \t\t\t\" \\\"\" + test.testName + \"\\\": \" + \n        \n\n        \n          \n           \t\t\t( ( error && error.message ) || error ); \n        \n\n        \n          \n           \t\ttest.pushFailure( message, extractStacktrace( error, 0 ) ); \n        \n\n        \n          \n            \n        \n\n        \n          \n           \t\t// Else next test will carry the responsibility \n        \n\n        \n          \n           \t\tsaveGlobal(); \n        \n\n        \n          \n            \n        \n\n        \n          \n           \t\t// Unblock \n        \n\n        \n          \n           \t\tinternalRecover( test ); \n        \n\n        \n          \n           \t} \n        \n\n        \n          \n           ); \n        \n    \n  \n\n\nAfter a test timeout (see this for what that does) we reset the tests semaphore to 0, but we don't also prevent resume from running when the promise finally does resolve.\nWhen the promise finally resolves, the test is \"long gone\" but resume is still called which decrements the tests semaphore (now to -1) and calls internalStart. When internalStart is called and the passed in test.semaphore < 0 we call pushFailure to log the semaphore imbalance.\nUnfortunately, since pushFailure always logs failures to the QUnit.config.current test (or creates a new global failure) this pushFailure about semaphore imbalance causes a completely unrelated test to fail (the test that happens to be running) not the test that actually had the imbalance.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-02-21T05:45:09Z", "contents": "Thanks y'all for the detailed report and PR to fix. I'll cut a new release tomorrow.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1377, "url": "https://github.com/qunitjs/qunit/issues/1377", "title": "Core: hooks invoked after a test is considered torn down can cause error", "contents": "Tell us about your runtime:\n\nQUnit version: 2.9.1\nWhat environment are you running QUnit in? (e.g., browser, Node):* Browser & Node\nHow are you running QUnit? (e.g., script, testem, Grunt): * qunit Node CLI / testem\n\nWhat are you trying to do?\nA test whose done hooks are attempted to be invoked after the test is considered torn down can produce an error when trying to access those hooks.\nCode that reproduces the problem:\n\nQUnit.test( \"hello test\", function( assert ) {\n  let done = assert.async()\n  assert.ok( 1 == \"1\", \"Passed!\" );\n  setTimeout(done,10);\n  return Promise.reject();\n});\nWill result in:\nUncaught Error: assert.async callback called after test finished.\n    at done (qunit-2.9.1.js:3773)\nqunit-2.9.1.js:3107 Uncaught TypeError: Cannot read property 'length' of undefined\n    at processHooks (qunit-2.9.1.js:3107)\n    at Test.hooks (qunit-2.9.1.js:3116)\n    at runTest (qunit-2.9.1.js:3254)\n    at advanceTestQueue (qunit-2.9.1.js:2646)\n    at Object.advance (qunit-2.9.1.js:2597)\n    at Test.queue (qunit-2.9.1.js:3276)\n    at test (qunit-2.9.1.js:3516)\n    at Object.onError (qunit-2.9.1.js:4217)\n    at window$1.onerror (qunit-2.9.1.js:5499)\n\nCodepen: https://codepen.io/rwjblue/pen/KJLQEJ\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nTrying to access hooks on an already torn down test should not result in an error.\nWhat actually happened?\nAn error was thrown when trying to access hooks on a module. At this point, hooks has already been torn down.", "createdAt": "2019-02-22T00:21:09Z", "updatedAt": "2019-02-22T03:41:45Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "scalvert", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "scalvert", "company": "@linkedin"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 3, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T03:19:32Z", "contents": "The description here was a bit confusing to me, so I looked into this some more and I'm not sure the reproduction is a minimal repro.\nI believe the error which needs to be fixed here is the Uncaught TypeError: Cannot read property 'length' of undefined and not the Uncaught Error: assert.async callback called after test finished.\nIf that is the case, it appears the error occurs anytime an assertion happens after an error (or rejected promise) has occurred within a test. You can find a smaller reproduction here which is the following:\nQUnit.test( \"assertion after errored test\", function( assert ) {\n  setTimeout(() => assert.ok(true), 10);\n  return Promise.reject();\n});\nFor some reason, when this happens QUnit is trying to invoke the test's module hooks (e.g., before, afterEach, etc.) which have been unset and thus leads to the error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scalvert", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-02-22T03:40:56Z", "contents": "I believe the error which needs to be fixed here is the Uncaught TypeError: Cannot read property 'length' of undefined\n\nThis is absolutely correct. If you look at the codepen and open the console, you can see that this error is ultimately thrown, albeit later in the execution (when the module's hooks are being run).\nThat minimal repro looks better :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "scalvert", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-02-22T03:41:45Z", "contents": "Also, I had a tricky time trying to devise a reasonable test to guard against this regressing. I'm open to suggestions on how to make this better.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1383, "url": "https://github.com/qunitjs/qunit/issues/1383", "title": "CLI should not exit with process.exit", "contents": "Tell us about your runtime:\n\nQUnit version: latest\nWhat environment are you running QUnit in? (e.g., browser, Node): node\nHow are you running QUnit? (e.g., script, testem, Grunt): qunit node cli\n\nWhat are you trying to do?\nCode that reproduces the problem:\nTest leaks timeout that would normally prevent node from exiting.\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\nQUnit shouldn't force exit.\nWhat actually happened?\nQUnit forces exit, hiding leaks.", "createdAt": "2019-03-13T20:53:04Z", "updatedAt": "2019-04-13T01:09:58Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "krisselden", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "krisselden", "company": "@LinkedIn"}, {"login": "rwjblue", "company": "@linkedin"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 1, "comments_data": [{"authorLogin": "rwjblue", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-03-13T21:00:53Z", "contents": "@krisselden mind whipping up a demo repo that shows the bug?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["component-cli", "status-stalled", "type-problem"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1386, "url": "https://github.com/qunitjs/qunit/issues/1386", "title": "Tests involving window scrolling fails in iOS due to iframe not being scrollable", "contents": "Tell us about your runtime:\n\nQUnit version:\nWhat environment are you running QUnit in? (e.g., browser, Node):\nHow are you running QUnit? (e.g., script, testem, Grunt):\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\n\n\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\n\nWhat actually happened?", "createdAt": "2019-04-01T21:18:33Z", "updatedAt": "2019-05-07T23:05:35Z", "closedAt": "2019-05-07T23:05:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pudupa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pudupa", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-07T23:05:35Z", "contents": "Without further information and some more specific instructions on how to reproduce, there's not much we can do here.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1387, "url": "https://github.com/qunitjs/qunit/issues/1387", "title": "Elect / Nominate representative(s) to the OpenJS Foundation CPC\u00a0", "contents": "Context\nAs part of the new OpenJS Foundation's bylaws, the Cross Project Council (CPC) has been chartered to serve as the primary governing body for programs and regular support of Foundation projects. For example, it will be responsible for things like infrastructure, travel assistance, CoC support, accepting new projects into the foundation, and mentorship programs to name a few. It will also be responsible for electing board representative(s) to the OpenJS Foundation board of directors.\nAny interested person from our project communities can attend CPC meetings and volunteer to participate in tasks. For most programs, the CPC is expected to operate on the consensus of OpenJS Foundation project members. Issues that require a vote - namely the election of Board representatives and accepting a new project - will be memorialized by a voting CPC membership comprised of up to 2 representatives from Impact level projects and 2 representatives from Growth and At-Large stages.\nIf you'd like more info/context on the governance of the OpenJS Foundation, please let me know or follow this repo. The main point I hope you take away is that the foundation is to be run by and for the projects, and to do that we need participants from the project community.\nRequest\nAs an At Large stage project, QUnit is encouraged to send representatives to participate in CPC meetings, to advise on programs and support that will be helpful to it, and to nominate someone from the project community to serve in a voting capacity.\nWe anticipate having our first 'official' CPC meeting on May 30 or 31 at the Collaborator Summit in Berlin (sidebar, you should come!). In the interim, we would love for project members to participate in the Bootstrap CPC meetings which are currently held on Mondays (watch this repo for meeting details).\nIf this is not the correct forum to raise this, please let me know and I will close the issue and post it in the preferred channel. Note that I'm posting essentially the same message to all OpenJS Foundation project repos, because I want to get the word out and make sure we all have the same information.\nyour pal,\nJory", "createdAt": "2019-04-07T19:59:30Z", "updatedAt": "2019-06-23T02:00:31Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jorydotcom", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jorydotcom", "company": "Bocoup"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-06-23T01:57:49Z", "contents": "I'm hereby volunteering to attend CPC on behalf of the QUnit project.\n(Others may as well, I'm not aware of a limit.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-06-23T02:00:31Z", "contents": "@jorydotcom It's not entirely clear to me whether you're looking for up to two representatives from the QUnit At-Large project specifically, or whether you're looking for two representatives in total from all At-Large projects (where e.g. we could be nominees for those roles).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1389, "url": "https://github.com/qunitjs/qunit/issues/1389", "title": "assert.throws fails when expected is an arrow function: 'prototype' property of expected is not an object", "contents": "Tell us about your runtime:\n\nQUnit version: 2.9.2 & 2.9.3-pre\nWhat environment are you running QUnit in? (e.g., browser, Node): browser\nMozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:66.0) Gecko/20100101 Firefox/66.0\nHow are you running QUnit? (e.g., script, testem, Grunt): script\n\n\nWhat are you trying to do?\nCode that reproduces the problem:\n\nrun in jsbin\nfunction f() {\n  throw new Error('err');\n}\nfunction errCheck(e) {\n  return e.message == 'err';\n}\nQUnit.test('foo', (t) => {\n  t.throws(f, errCheck); // this assert is passed\n  t.throws(f, (e) => e.message == 'err'); // this assert fails\n})\nWhat did you expect to happen?\ntest passed\n\nWhat actually happened?\n1st assert passed,\nbut 2nd assert fails:\n'prototype' property of expected is not an object", "createdAt": "2019-04-17T18:56:59Z", "updatedAt": "2019-05-07T23:14:52Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "ohze", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ohze", "company": "Ohze .,JSC"}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 2, "comments_data": [{"authorLogin": "ohze", "authorAssociation": "NONE", "createdAt": "2019-04-17T20:43:34Z", "contents": "can be fixed by changing assert.js#L298\n} else if ( expectedType === \"function\" && actual instanceof expected ) {\nto:\n} else if ( expectedType === \"function\" &&\n            expected.prototype !== undefined && actual instanceof expected ) {", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-07T23:14:52Z", "contents": "Since you have identified the fix already, would you mind opening a Pull Request to fix it?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1390, "url": "https://github.com/qunitjs/qunit/issues/1390", "title": "Provide a way to reset the test server", "contents": "Tell us about your runtime:\n\nQUnit version: 2.6\nWhat environment are you running QUnit in? (e.g., browser, Node): browser\nHow are you running QUnit? (e.g., script, testem, Grunt): testem, via ember test\n\n\nWhat are you trying to do?\n\nWe have a large test suite that we don't expect to run entirely in a single browser as it'd take ages to complete (and maybe even crash before it's finished). By default QUnit loads all tests and starts to run them, interacting with the dropdown to filter specific modules can get tricky as tests run in the background.\nWe've worked around this by adding a default filter that doesn't match any tests as the runner is started. This gets us to a state of \"all tests are loaded and nothing is running or filtered to run\".\nIf you have any relevant configuration information, please include that here:\nWhat did you expect to happen?\n\nThe abort button gets us the first part of this state but I haven't been able to find a way to get the latter part (nothing is filtered to run).\nWhat actually happened?\nI've added a button to our test page that changes the URL as a workaround but this seemed like something that could be widely useful for others if there was first-class support.", "createdAt": "2019-04-19T10:07:32Z", "updatedAt": "2019-05-07T23:13:26Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "sduquej", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sduquej", "company": "@intercom "}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-07T23:13:26Z", "contents": "Can you try upgrading to version 2.7 or later? #1311 landed in 2.7 and should help with some of the memory load if using hidepassed.\nAlternatively, you could try breaking up your test suite and using something like https://github.com/JamesMGreene/qunit-composite", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1392, "url": "https://github.com/qunitjs/qunit/issues/1392", "title": "Add support for Google Apps Script", "contents": "It would be great, if QUnit could be used as testing framework for Google Apps Scripts.\nHere is an experimental fork of QUnit that already does this (and works for me):\nhttps://github.com/simula-innovation/qunit/tree/gas/gas\nThe problem with this fork is that it is not maintained for several years and missing new features of QUnit.\nHere is some information about how development with Google Apps Script is working:\nhttps://developers.google.com/apps-script/guides/projects\nhttps://developers.google.com/apps-script/guides/clasp", "createdAt": "2019-05-01T10:07:06Z", "updatedAt": "2019-06-07T17:04:30Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "ahochsteger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ahochsteger", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 4, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-07T23:08:05Z", "contents": "Can you explain which changes need to made in QUnit to support Google Apps Script?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ahochsteger", "authorAssociation": "NONE", "createdAt": "2019-05-09T05:24:38Z", "contents": "I guess this comparison shows the changes that were done for the old fork of qunit:\nmaster...simula-innovation:gas", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-17T16:16:57Z", "contents": "That diff has a lot of changes without much context as to what the changes are fixing/enabling. Having specific action items is needed if we want to move this forward.\nAsking to support GAS without specifying how QUnit does not currently support it means that we're very unlikely to fulfill the request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ahochsteger", "authorAssociation": "NONE", "createdAt": "2019-06-07T17:04:30Z", "contents": "Since I've found a better way for me to test my GAS scripts I'm not depending on the GAS-integration for QUnit anymore.\nFeel free to close the issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1393, "url": "https://github.com/qunitjs/qunit/issues/1393", "title": "Community Invitation to the OpenJS Collaborator Summit + Info", "contents": "Hi all! In an effort to make sure we're fully getting the word out to OpenJS Foundation project communities about the collaborator summit, I'm posting the following message on main or admin repos:\nThis year, the Node Collaborator summit is opening up to include and welcome all former JS Foundation projects. The Collaborator summit is a space where projects and working groups within projects have the dedicated time and space to get together and get work done. We will have project-specific meetings, cross-project meetings on issues like security and standards, and of course meetings to discuss new programs and patterns for the new CPC.\nThe event will be in Berlin on May 30-31st at the Courtyard Marriott City Center. It is free to register with the password 'collabsummit.' We are also inviting all projects/attendees to suggest meetings and sessions via our CFP - these are not conference talks, but rather collaborative conversations or meetings you would like to hold with your peers. We ask that you register in advance so that we can allocate meeting room space and resources, and so that we can publish where conversations are scheduled in the day or two leading up to the event.\nLinks:\n\nSession Proposals\nRegistration (password is collabsummit)\nInformation on how to apply for the Travel Fund\nSummit Planning Repo", "createdAt": "2019-05-01T14:55:50Z", "updatedAt": "2019-06-14T00:06:02Z", "closedAt": "2019-06-14T00:05:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jorydotcom", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jorydotcom", "company": "Bocoup"}, {"login": "trentmwillis", "company": "@Netflix"}, {"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-08T21:24:02Z", "contents": "Wish I would be able to attend, but won't work for my schedule this year.\nI'll leave this open until the summit happens in case any others find interest (particularly @qunitjs/core).", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "HEART"]}, {"authorLogin": "Krinkle", "authorAssociation": "MEMBER", "createdAt": "2019-06-14T00:05:39Z", "contents": "Was looking at this, but the dates overlapped with a different event I was attending already. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["meta"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1394, "url": "https://github.com/qunitjs/qunit/issues/1394", "title": "Display progress in test runner during test suite execution", "contents": "It would be an excellent enhancement to add indication of progress during test execution within the test runner application. The first two indicators that come to mind are number of tests completed and time elapsed (e.g. 40/230 Tests complete after 1890 milliseconds.).", "createdAt": "2019-05-13T22:53:27Z", "updatedAt": "2019-06-18T17:42:10Z", "closedAt": "2019-06-18T17:42:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ghaagsma", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "ghaagsma", "company": null}, {"login": "trentmwillis", "company": "@Netflix"}], "comments_count": 1, "comments_data": [{"authorLogin": "trentmwillis", "authorAssociation": "MEMBER", "createdAt": "2019-05-17T16:12:02Z", "contents": "Seems like a great idea to me! A pull request to implement would be appreciated \ud83d\ude42", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["component-reporter"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1396, "url": "https://github.com/qunitjs/qunit/issues/1396", "title": "Consider renaming \"Main assertions\" page", "contents": "Almost every time I navigate to https://api.qunitjs.com/ I find myself clicking \"Main assertions\" when looking up one of the assert methods, like propEqual or some such.\nThen after a brief moment of confusing and a failed attempt at expanding the page further, I realise I should have clicked \"Assertions\" instead.\nI don't have any good ideas off the top of my head, but we may want to consider renaming this page.", "createdAt": "2019-06-10T15:33:13Z", "updatedAt": "2019-06-10T15:33:24Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Krinkle", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "Krinkle", "company": "Wikimedia Foundation"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": ["category-docs", "type-enhancement"], "milestone": null}, {"repo_name": "qunitjs/qunit", "issue_id": 1399, "url": "https://github.com/qunitjs/qunit/issues/1399", "title": "Can the test file name be passed in the \"suitestart\" and \"suiteend\" callback ?", "contents": "Hi,\nI have a use case where I want to print the name of the testfile before and after the test run.\nFor eg: if I have two test files\ntestFIle1.js\nQUnit.test(\"point1\", function(assert){\nassert.ok(true);\n});\ntestFile2.js\nQUnit.test(\"point1\", function(assert) {\nassert.ok(true);\n});\nwhen I run qunit.js --reporter=myreporter test*.js ...I want the following printed in the console.\ntestStart=>filename: testFile1.js\nprogress: point1 pass\ntestEnd=>filename: testFile1.js result: pass\ntestStart=>filename: testFile2.js\nprogress: point1 pass\ntestEnd=>filename: testFile2.js result: pass", "createdAt": "2019-06-20T23:29:44Z", "updatedAt": "2019-06-20T23:29:44Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "muthu90ec", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "muthu90ec", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}]