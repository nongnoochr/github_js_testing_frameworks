issue_id,title,contents,authorLogin,authorAssociation,createdAt,closed,closedAt,closedDuration_days,milestone,participants_count,comments_count,firstCommentCreatedAt,firstCommentDuration_days,firstCommentAuthor,firstCommentAuthorAssociation,num_unique_comment_author_MEMBER,num_unique_comment_author_CONTRIBUTOR,num_unique_comment_author_COLLABORATOR,num_unique_comment_author_NONE,labels,label_chore,label_refactor,label_good-first-issue,label_stale,label_future,label_semver-patch,label_developer-experience,label_question,label_core-team,label_integration,label_help wanted,label_unconfirmed-bug,label_node.js,label_needs-upstream-fix,label_confirmed-bug,label_qa,label_wontfix,label_semver-minor,label_nice-to-have,label_reporter,label_browser,label_documentation,label_invalid,label_windows,label_async,label_website,label_feature,label_semver-major,label_faq,label_pr-needs-work,label_needs-feedback,label_needs-review,label_discussion,label_duplicate,label_needs-mcve,label_usability,label_security
1,Add tagging,"like visionmedia/expresso#127 something similar to this, but maybe just file based instead, or maybe we just leave this up to the user to separate them into different files",tj,CONTRIBUTOR,2011-09-01 19:44:41+00:00,True,2011-11-03 04:15:20+00:00,62.35,,1,1,2011-11-03 04:15:20+00:00,62.35,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2,base other reporters on JSON-Stream,this way we could add a --concurrency <n> flag and aggregate results,tj,CONTRIBUTOR,2011-09-01 19:55:07+00:00,True,2011-11-15 17:31:34+00:00,74.9,,1,1,2011-11-15 17:31:34+00:00,74.9,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3,"Default all to serial / parallel, toggle with flag","add flag(s) to mocha(1), as well as  interface functions to toggle the behaviour",tj,CONTRIBUTOR,2011-09-06 16:41:43+00:00,True,2011-11-03 04:15:11+00:00,57.48,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
4,before/after callbacks,setup / teardown for TDD interface etc,tj,CONTRIBUTOR,2011-09-06 16:42:29+00:00,True,2011-09-13 23:57:31+00:00,7.3,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
5,test cov,write a proper test cov lib,tj,CONTRIBUTOR,2011-09-06 16:43:19+00:00,True,2012-02-24 05:00:34+00:00,170.51,,15,39,2011-11-23 02:54:52+00:00,77.42,Raynos,CONTRIBUTOR,0,6,0,9,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
6,mutation cov,,tj,CONTRIBUTOR,2011-09-06 16:43:33+00:00,True,2015-07-04 21:42:04+00:00,1397.21,,5,5,2011-12-12 05:11:55+00:00,96.52,BryanDonovan,CONTRIBUTOR,1,3,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
7,finish browser support,make sure not to use things that I normally do like forEach :D,tj,CONTRIBUTOR,2011-09-06 16:43:59+00:00,True,2011-12-23 04:48:10+00:00,107.5,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
8,expect(n) and matchers,come up with an interface for TDD etc as well,tj,CONTRIBUTOR,2011-09-06 16:44:21+00:00,True,2011-09-22 06:34:57+00:00,15.58,,1,1,2011-09-22 06:34:57+00:00,15.58,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
9,html reporter,,tj,CONTRIBUTOR,2011-09-06 16:44:28+00:00,True,2011-11-18 23:48:45+00:00,73.29,,2,2,2011-10-19 13:50:40+00:00,42.88,sebs,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
10,xunit reporter,,tj,CONTRIBUTOR,2011-09-06 16:44:33+00:00,True,2013-12-13 23:08:12+00:00,829.27,,8,9,2011-10-19 13:55:28+00:00,42.88,sebs,NONE,0,1,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
11,optional parallelism via processes,for cpu-bound tests,tj,CONTRIBUTOR,2011-09-06 16:44:53+00:00,True,2011-11-15 17:31:12+00:00,70.03,,1,1,2011-11-15 17:31:12+00:00,70.03,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
12,global leak reporting,with whitelist etc,tj,CONTRIBUTOR,2011-09-06 16:45:14+00:00,True,2011-10-04 04:45:58+00:00,27.5,,2,4,2011-12-10 09:31:11+00:00,94.7,quangv,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
13,ability to target specific tests / suites for execution,this would work into tagging as well,tj,CONTRIBUTOR,2011-09-06 16:45:37+00:00,True,2011-11-03 04:15:41+00:00,57.48,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
14,hook for when all tests are complete,"to manually exit the process, kill connections etc",tj,CONTRIBUTOR,2011-09-06 16:45:55+00:00,True,2011-10-04 04:29:54+00:00,27.49,,1,1,2011-10-04 04:29:54+00:00,27.49,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
15,ensure passing of flags to node(1) is easy,,tj,CONTRIBUTOR,2011-09-08 19:21:15+00:00,True,2011-11-03 04:15:33+00:00,55.37,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
17,switch to stderr,output is getting munged quite a bit since node does not (currently) flush,tj,CONTRIBUTOR,2011-09-13 22:38:08+00:00,True,2011-11-03 02:57:35+00:00,50.18,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
18,object diffs,"when loose equality is performed it's pretty annoying to see the difference between two arrays, two large objects etc",tj,CONTRIBUTOR,2011-09-13 22:43:44+00:00,True,2011-11-16 23:00:12+00:00,64.01,,2,4,2011-11-16 23:00:12+00:00,64.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
19,Fix async support,"few things breaking, and add more test cov",tj,CONTRIBUTOR,2011-09-13 23:59:52+00:00,True,2011-09-22 06:56:44+00:00,8.29,,1,2,2011-09-14 00:06:53+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
20,TextMate etc support,,tj,CONTRIBUTOR,2011-09-14 05:06:40+00:00,True,2011-11-16 22:52:41+00:00,63.74,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
21,report errors thrown / uncaught / passed in hooks nicely,"""some error in setup hook"" etc",tj,CONTRIBUTOR,2011-09-22 07:47:49+00:00,True,2011-09-22 07:56:56+00:00,0.01,,1,1,2011-09-22 07:56:56+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
22,hook uncaught exception error reporting,map hooks to these,tj,CONTRIBUTOR,2011-09-22 08:03:17+00:00,True,2011-11-03 04:14:56+00:00,41.84,,1,1,2011-11-03 04:14:56+00:00,41.84,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
23,Color duration green/yellow/red accordingly,add thresholds and do this for a few of the reporters so that slow tests stand out,tj,CONTRIBUTOR,2011-10-04 04:49:46+00:00,True,2011-10-18 23:47:03+00:00,14.79,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
24,node-growl support,,tj,CONTRIBUTOR,2011-10-12 15:02:22+00:00,True,2011-10-18 23:47:02+00:00,6.36,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
25,test for errors/exceptions,"The testing for a Method to cause a error would be nice, some methods do raise errors/exceptions (validation for example), and testing for them could help avoid people writing boilerplate to simulate this.",sebs,NONE,2011-10-13 08:29:09+00:00,True,2011-10-13 08:29:58+00:00,0.0,,3,3,2011-10-13 08:29:58+00:00,0.0,sebs,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
26,"""spec"" reporter",nesting blah blah,tj,CONTRIBUTOR,2011-11-03 02:48:54+00:00,True,2011-11-03 03:48:43+00:00,0.04,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
27,add support for pending tests,,tj,CONTRIBUTOR,2011-11-03 02:50:27+00:00,True,2011-11-03 03:23:55+00:00,0.02,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
28,merge identically named suites,"shouldn't have two of the same, this makes it easier to meta-generate tests, nicer reporting etc",tj,CONTRIBUTOR,2011-11-03 04:22:15+00:00,True,2011-11-16 23:50:50+00:00,13.81,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
29,declarative js example,,tj,CONTRIBUTOR,2011-11-03 04:22:23+00:00,True,2012-02-03 03:21:24+00:00,91.96,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
30,cascade [before/after]Each() ,"ex:
var app;

describe('config', function(){
  beforeEach(function(){
    app = express();
  })

  describe('.set()', function(){
    it('should set a value', function(){
      app.set('foo', 'bar').should.equal(app);
    })
  })

  describe('.get()', function(){
    it('should get a value', function(){
      //...
    })
  })
})",tj,CONTRIBUTOR,2011-11-08 23:35:36+00:00,True,2011-11-19 23:32:55+00:00,11.0,0.0.1,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
31,consider supporting a test/mocha.opts file,like spec.opts,tj,CONTRIBUTOR,2011-11-09 02:37:58+00:00,True,2011-11-15 17:54:12+00:00,6.64,,2,2,2011-11-09 06:28:58+00:00,0.16,rauchg,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
32,better growl messages,"http://d.pr/nIeW
is not overly useful haha",tj,CONTRIBUTOR,2011-11-10 00:00:02+00:00,True,2011-11-10 23:35:13+00:00,0.98,,2,1,2011-11-10 21:38:54+00:00,0.9,jamescarr,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
33,doc reporter,"it would be cool to output some html that could be used as reference docs with  blocks etc,
retaining the nesting you use in the tests",tj,CONTRIBUTOR,2011-11-10 04:50:02+00:00,True,2011-11-17 00:35:57+00:00,6.82,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
34,double check test durations,"one in express is reporting as 20ms, however when moved below another that one is reported as 20ms haha...",tj,CONTRIBUTOR,2011-11-10 06:02:13+00:00,True,2011-11-16 22:43:36+00:00,6.7,,1,1,2011-11-16 22:43:36+00:00,6.7,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
35,make sure multiple calls to done() fails,,tj,CONTRIBUTOR,2011-11-14 16:20:48+00:00,True,2011-11-15 17:24:29+00:00,1.04,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
36,#<WriteStream> has no method 'getWindowSize',"Hank:admin deedubs$ ./node_modules/.bin/mocha
node.js:134
throw e; // process.nextTick error, or 'error' event on first tick
^
TypeError: Object # has no method 'getWindowSize'
at Object. (/Users/deedubs/Projects/admin/node_modules/mocha/lib/reporters/base.js:68:22)
at Module._compile (module.js:411:26)
at Object..js (module.js:417:10)
at Module.load (module.js:343:31)
at Function._load (module.js:302:12)
at require (module.js:355:19)
at Object. (/Users/deedubs/Projects/admin/node_modules/mocha/lib/reporters/index.js:2:16)
at Module._compile (module.js:411:26)
at Object..js (module.js:417:10)
at Module.load (module.js:343:31)
Hank:admin deedubs$ node -v
v0.4.12",deedubs,NONE,2011-11-15 04:18:37+00:00,True,2011-11-15 19:03:57+00:00,0.61,,3,6,2011-11-15 04:20:46+00:00,0.0,tj,CONTRIBUTOR,0,1,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
37,site,make a website sometime,tj,CONTRIBUTOR,2011-11-17 00:04:08+00:00,True,2011-11-18 05:37:55+00:00,1.23,,1,1,2011-11-18 05:37:55+00:00,1.23,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
38,test non-tty outputs,,tj,CONTRIBUTOR,2011-11-17 00:15:50+00:00,True,2011-11-19 22:59:39+00:00,2.95,0.0.1,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
39,get a domain,,tj,CONTRIBUTOR,2011-11-18 01:11:34+00:00,True,2014-07-12 03:53:03+00:00,967.11,,4,4,2014-07-11 19:41:41+00:00,966.77,jbnicolai,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
40,serve recent .js and .css from site,,tj,CONTRIBUTOR,2011-11-18 01:11:44+00:00,True,2011-11-19 22:34:12+00:00,1.89,,1,1,2011-11-19 22:34:12+00:00,1.89,tj,CONTRIBUTOR,0,1,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
41,don't load all reporters when running in the browser,"no point, just extra code",tj,CONTRIBUTOR,2011-11-18 01:33:08+00:00,True,2011-12-23 04:48:17+00:00,35.14,,1,1,2011-12-23 04:48:17+00:00,35.14,tj,CONTRIBUTOR,0,1,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
42,nicer error reporting for browser tests,,tj,CONTRIBUTOR,2011-11-18 02:08:01+00:00,True,2011-11-18 23:48:45+00:00,0.9,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
43,use assert() so browser can run server tests,,tj,CONTRIBUTOR,2011-11-18 02:08:18+00:00,True,2011-12-23 04:48:27+00:00,35.11,,2,4,2011-12-15 17:27:52+00:00,27.64,jgallen23,NONE,0,1,0,1,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
44,styles failures / pending in browser,,tj,CONTRIBUTOR,2011-11-18 02:08:40+00:00,True,2011-11-18 23:48:45+00:00,0.9,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
45,mocha.css,make target,tj,CONTRIBUTOR,2011-11-18 02:08:55+00:00,True,2011-11-18 23:41:06+00:00,0.9,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
46,browser report stats,,tj,CONTRIBUTOR,2011-11-18 02:09:15+00:00,True,2011-11-18 23:48:02+00:00,0.9,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
47,duration styling in browser,yellow / red etc,tj,CONTRIBUTOR,2011-11-18 02:09:44+00:00,True,2012-04-15 17:14:45+00:00,149.63,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
48,jquery for browser support,with no-conflict or whatever,tj,CONTRIBUTOR,2011-11-18 02:19:56+00:00,True,2011-11-18 23:41:06+00:00,0.89,,1,0,,,,,0,0,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
49,rename tearDown to teardown,bugs me,tj,CONTRIBUTOR,2011-11-18 05:16:24+00:00,True,2011-11-18 23:41:06+00:00,0.77,,2,1,2011-11-18 06:41:07+00:00,0.06,rauchg,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
50,manpage,,tj,CONTRIBUTOR,2011-11-18 05:59:42+00:00,True,2011-11-19 19:53:35+00:00,1.58,,1,1,2011-11-19 19:53:35+00:00,1.58,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
51,moar padding,for the top of the site,tj,CONTRIBUTOR,2011-11-18 06:03:39+00:00,True,2011-11-22 20:05:45+00:00,4.58,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
52,verbose errors for tap output,,tj,CONTRIBUTOR,2011-11-18 16:22:50+00:00,True,2011-11-18 23:41:06+00:00,0.3,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
53,general refactor,make hooks a common proto between tests/hooks etc,tj,CONTRIBUTOR,2011-11-18 23:50:55+00:00,True,2011-12-23 04:49:00+00:00,34.21,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
54,Syntax highlighting,,tj,CONTRIBUTOR,2011-11-19 19:46:45+00:00,True,2011-11-22 04:01:14+00:00,2.34,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
55,Moar screenshots,,tj,CONTRIBUTOR,2011-11-19 19:47:03+00:00,True,2011-11-24 01:21:09+00:00,4.23,,2,17,2011-11-19 20:08:06+00:00,0.01,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
56,docs for extending mocha,"reporters, interfaces etc",tj,CONTRIBUTOR,2011-11-19 20:08:30+00:00,True,2015-03-15 19:18:12+00:00,1211.97,,5,9,2014-07-11 14:46:19+00:00,964.78,TheLudd,NONE,0,1,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
57,docs for meta-generated tests,,tj,CONTRIBUTOR,2011-11-19 20:08:53+00:00,True,2015-03-15 06:47:04+00:00,1211.44,,3,6,2014-09-12 21:56:50+00:00,1028.07,felixrabe,NONE,1,0,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
58,progress reporter is off,,tj,CONTRIBUTOR,2011-11-19 20:31:29+00:00,True,2012-04-10 19:33:48+00:00,142.96,,1,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
59,"More docs for CLI usage, --grep etc",,tj,CONTRIBUTOR,2011-11-19 22:40:09+00:00,True,2011-11-22 04:47:57+00:00,2.26,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
60,Add travis CI badge when public,,tj,CONTRIBUTOR,2011-11-19 23:54:36+00:00,True,2011-11-24 00:49:03+00:00,4.04,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
61,plane crash is no longer red,,tj,CONTRIBUTOR,2011-11-20 06:42:09+00:00,True,2011-11-22 03:30:53+00:00,1.87,,1,1,2011-11-22 03:22:01+00:00,1.86,tj,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
62,menu for site,,tj,CONTRIBUTOR,2011-11-22 04:48:04+00:00,True,2015-03-08 20:39:18+00:00,1202.66,,2,1,2015-03-08 20:39:18+00:00,1202.66,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
63,suite / test-case specific timeouts,,tj,CONTRIBUTOR,2011-11-22 04:49:04+00:00,True,2011-12-23 04:49:14+00:00,31.0,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
64,make a funky reporter with term-canvas,,tj,CONTRIBUTOR,2011-11-22 05:15:14+00:00,True,2011-12-23 04:49:16+00:00,30.98,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
65,add support for err.expected / err.actual,"assertion libraries could opt-in allowing mocha to provide nicer formatting, diffs etc",tj,CONTRIBUTOR,2011-11-22 16:39:28+00:00,True,2015-03-07 22:49:34+00:00,1201.26,,2,1,2015-03-07 22:49:34+00:00,1201.26,danielstjules,CONTRIBUTOR,0,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
66,Pending test cases throw an exception in the browser runner,"The following example from the documentation throws an exception:
describe('Array', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present')
  })
})
Exception thrown:
Uncaught TypeError: Cannot read property 'stack' of undefined in mocha.js:815

See example: http://jsfiddle.net/vxGgv/embedded/result/
Tested in Firefox 7.0.1, Safari 5.1.1 & latest Chrome beta.",aron,NONE,2011-11-22 21:46:39+00:00,True,2011-11-22 21:52:40+00:00,0.0,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
67,node_modules,"If you run a make, can you leverage the node_modules folder? What is the root context  - the test folder?",bingomanatee,NONE,2011-11-23 04:36:13+00:00,True,2011-11-25 00:25:40+00:00,1.83,,3,3,2011-11-23 05:07:31+00:00,0.02,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
68,separate the pending tests,"As of 0.0.2, the pending tests are treated as successful tests. It would be nice to separate them out and highlight them.",marty-wang,NONE,2011-11-23 06:28:05+00:00,True,2012-06-17 03:04:14+00:00,206.86,,4,7,2011-11-23 16:41:06+00:00,0.43,tj,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
69,colors with spawn process,"Is it possible to enable colors on processes started with the require(""child_process"").spawn method ?",pgherveou,NONE,2011-11-23 13:17:34+00:00,True,2011-11-24 01:32:06+00:00,0.51,,2,2,2011-11-23 16:37:00+00:00,0.14,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
70,"""should"" is not defined","An example from http://visionmedia.github.com/mocha/ doesn't work
[1,2,3].indexOf(4).should.equal(-1);
It doesn't look like neither should nor equal are defined.
lib ➤ ack equal --js
lib ➤ 

I'm curious how could it work. Do you intend to extend Object.prototype?",NV,NONE,2011-11-23 15:38:31+00:00,True,2011-11-23 15:47:53+00:00,0.01,,3,4,2011-11-23 15:40:32+00:00,0.0,deedubs,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
71,tweak hook cascading,"this should work:
describe('Batch', function(){
  var batch;
  beforeEach(function(){
    batch = new Batch;
  })

  describe('something', function(){
    describe('else', function(){
      it('should work', function(){
        batch.stuff()
      })
    })
  })
})",tj,CONTRIBUTOR,2011-11-23 18:10:13+00:00,True,2011-11-24 00:31:30+00:00,0.26,,1,1,2011-11-24 00:31:30+00:00,0.26,tj,CONTRIBUTOR,0,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
72,"Add ""watch"" on test files change","Currently there is growl support, which is great. Would it be more useful when it works in combination with watching test files change? Thanks!",marty-wang,NONE,2011-11-23 18:10:22+00:00,True,2011-12-04 16:51:00+00:00,10.94,,4,5,2011-11-23 18:11:29+00:00,0.0,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
74,What am I missing?,"https://gist.github.com/1390560#comments
demonstrates that I'm having some pretty basic issues here - before is not firing and the callback to the function passed into describe is not recognized as a function.",bingomanatee,NONE,2011-11-24 03:25:18+00:00,True,2011-11-25 00:25:23+00:00,0.88,,2,1,2011-11-25 00:25:23+00:00,0.88,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
75,exports style in browser,"What do you think about using  the exports style in the browser too ?
with an amd lib like require.js one could write his tests like this :
require(['test/testFoo', 'test/testBar'], function(foo, bar) {
    mocha.run({
      'foo test': foo
      'bar test': bar
    });
});",pgherveou,NONE,2011-11-24 17:23:22+00:00,True,2011-11-24 17:24:54+00:00,0.0,,1,1,2011-11-24 17:24:54+00:00,0.0,pgherveou,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
76,Strange output when tests fail,"test/test.js
describe('one', function(){
  it('should throw error', function(){

        [1,2,3].indexOf(1).should.equal(8);

  });
})


describe('two', function(){
  it('should pass', function(){

        [1,2,3].indexOf(4).should.equal(-1);

  });
})

command:
mocha -r should
terminal output:
..
←[91m  Ô£û←[0m←[31m 1 of 2 tests failed←[0m←[90m:←[0m
←[0m  0) one should do something: ←[0m←[31mAssertionError: expected 0 to equal 8
←[0m←[90m
at Object.equal (C:\Users\Wilson\Documents\Sites\node_modules\should\lib\shoul
d.js:306:10)
at Test.fn (C:\Users\Wilson\Documents\Sites\meshmesh-node\app\test\first.t
est.js:3:30)
at Test.run (C:\Users\Wilson\Documents\Sites\node_modules\mocha\lib\test.j
s:80:29)
at Array. (C:\Users\Wilson\Documents\Sites\node_modules\mocha\l
ib\runner.js:269:12)
at EventEmitter._tickCallback (node.js:195:26)
←[0m
I thought failed tests were supposed to simple show a red dot amongst green dots. This is on a windows machine. If my tests all pass, terminal output is pretty as in example screen shots.",wilsonpage,NONE,2011-11-24 17:30:36+00:00,True,2011-12-23 04:47:42+00:00,28.47,,3,4,2011-11-24 17:47:34+00:00,0.01,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
78,report filenames in error listings,for the SS,tj,CONTRIBUTOR,2011-11-24 23:47:50+00:00,True,2011-11-24 23:52:26+00:00,0.0,,2,1,2013-02-24 16:48:18+00:00,457.71,krisnye,NONE,0,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
79,Feature: beforeAll() and afterAll(),"Sometimes I want to set up a database with dummy data all tests can query.
The problem is if I set up this in a beforeEach/afterEach it will create and destroy the database with the same dummy data for each test which is unnecessary since the data is just queried.
A really hot feature many want: jasmine/jasmine#56 (comment)",,NONE,2011-11-25 02:01:58+00:00,True,2011-11-25 02:02:47+00:00,0.0,,1,2,2011-11-25 02:02:47+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
80,Weird error thrown,"I have this code in a test:
person.isInState(""Mood"").should.be.true

The test is passing. But when I change the returned value by person.isInState(""Mood"") to false I get the following errors:
✖ 2 of 2 tests failed:

  0) Yobiengine should enter states serially: TypeError: Cannot set property 'failed' of undefined

  at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
      at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
      at EventEmitter._tickCallback (node.js:192:40)

  1) Yobiengine should enter states serially: TypeError: Cannot set property 'failed' of undefined

  at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
      at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
      at EventEmitter._tickCallback (node.js:192:40)




  ✖ 2 of 2 tests failed:

  0) Yobiengine should enter states serially: TypeError: Cannot set property 'failed' of undefined

  at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
      at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
      at EventEmitter._tickCallback (node.js:192:40)

  1) Yobiengine should enter states serially: TypeError: Cannot set property 'failed' of undefined

  at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
      at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
      at EventEmitter._tickCallback (node.js:192:40)

It doesn't make much sense. It comes from the runner.",,NONE,2011-11-25 05:04:06+00:00,True,2011-11-25 17:44:27+00:00,0.53,,2,13,2011-11-25 05:22:35+00:00,0.01,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
81,Writing parallel tests,"What is the intended way to write tests that run in parallel and that need to sync up at a certain point? E.g. I'd love to convert the DB opening test to run in parallel, but they need to sync up at the end. This was easy with beforeExit but it looks like it requires a lot more custom code or third party control flow libraries (like Step) with mocha.",kkaefer,CONTRIBUTOR,2011-11-25 15:47:33+00:00,True,2011-12-23 04:47:01+00:00,27.54,,2,2,2011-11-25 16:57:29+00:00,0.05,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
82,add a flag to ignore global var leaks,currently hard-coded,tj,CONTRIBUTOR,2011-11-25 22:13:00+00:00,True,2011-12-01 16:49:19+00:00,5.78,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
83,Jenkins integration,"It's more a questions then issue.
How to integrate mocha with Jenkins? Actually how to show mocha test results in Jenkins?",podviaznikov,NONE,2011-11-26 20:04:34+00:00,True,2011-11-28 11:24:33+00:00,1.64,,5,11,2011-11-28 11:24:33+00:00,1.64,podviaznikov,NONE,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
84,growl icons,,tj,CONTRIBUTOR,2011-11-26 21:05:21+00:00,True,2011-11-26 21:31:11+00:00,0.02,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
85,Document root suite,9585c00,tj,CONTRIBUTOR,2011-11-26 21:34:16+00:00,True,2015-03-08 20:42:02+00:00,1197.96,,2,1,2015-03-08 20:42:02+00:00,1197.96,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
86,Need equivalent to assert.response(),"Expresso had a really easy way to test servers and their responses: assert.response(server, ...)
I saw you use a small request class (support/http) in connect and express, but copying it to my code didn't work as expected. An official tool to ease this task would be really awesome.",Swatinem,NONE,2011-11-26 21:56:23+00:00,True,2011-12-23 04:46:30+00:00,26.28,,5,12,2011-11-26 22:02:11+00:00,0.0,rauchg,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
87,"document ""assert"" example","Hi,
I'm installed mocha 0.0.8 via NPM (Node.js 0.6.2). And test with this tests https://github.com/visionmedia/mocha/blob/master/test/interfaces/bdd.js & https://github.com/visionmedia/mocha/blob/master/test/interfaces/tdd.js but every time fails with TypeError: Cannot call method 'equal' of undefined.
If I change should.equal to assert.equal (form DOC example) fails with ReferenceError: assert is not defined.
What am I doing wrong? Or is it bug?",Vrtak-CZ,NONE,2011-11-27 22:35:50+00:00,True,2012-06-17 03:04:14+00:00,202.19,,3,6,2011-11-27 23:04:13+00:00,0.02,deedubs,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
88,mocha-debug does not seem to work,"Running mocha --require should works for me.
However, when I do mocha-debug --require should in the same directory, I get this error message:
/usr/bin/env: node debug: No such file or directory
How can I fix this? Thanks for the answer!",aishwar,NONE,2011-11-28 00:21:04+00:00,True,2011-11-30 04:30:34+00:00,2.17,,2,13,2011-11-28 16:55:04+00:00,0.69,tj,CONTRIBUTOR,0,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
90,add some shared behavior style docs,and add the wiki to the site,tj,CONTRIBUTOR,2011-11-28 17:55:04+00:00,True,2015-03-08 20:46:19+00:00,1196.12,,2,1,2015-03-08 20:46:19+00:00,1196.12,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
92,Doc: How to migrate from expresso,"Being a user where all tests are written with expresso, it would be great to have a doc or wiki somewhere what the idea is for migrating to expresso. Obviously my tests are not executing with mocha even when I am using ""-u exports"" because I am heavily relying on the additional methods expresso adds to assert (most importantly assert.response).
Whats the story?",bpasero,NONE,2011-11-29 15:25:50+00:00,True,2011-11-30 19:34:44+00:00,1.17,,2,1,2011-11-30 19:34:44+00:00,1.17,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
93,CWD relative --require,join CWD,tj,CONTRIBUTOR,2011-11-29 16:10:13+00:00,True,2011-12-15 06:33:33+00:00,15.6,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
94,When test fails in async callback it aborts other tests,"describe('mocha tests', function() {
    it('should go to the next test when it fails (outside callback)', function(done){
        throw new Error('the other test should still run');
        done();
    });

    it('should go to the next test when it fails (inside callback)', function(done) {

        setTimeout(function() {
            throw new Error('the other test should still run');
            done();
        }, 0);
    });

    it('should get to this test', function(done) {
        done();
    });
});

I expect that it should run all the tests and report 2 failures and 1 success. Instead I get this (only 2 out of 3 tests were run):
mocha ./test/test.test.js

  ..

  ✖ 2 of 3 tests failed:

  0) mocha tests should go to the next test when it fails (outside callback):
     Error: the other test should still run

  at Test.fn (/Users/me/mochatest/test/test.test.js:3:19)
      at Test.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:103:12)
      at Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:244:10)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:290:12
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:172:14)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:181:7
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:133:23)
      at Array.0 (/usr/local/lib/node_modules/mocha/lib/runner.js:149:5)
      at EventEmitter._tickCallback (node.js:192:40)

  1) mocha tests should go to the next test when it fails:
     Error: the other test should still run

  at Timer.ontimeout (/Users/me/mochatest/test/test.test.js:10:23)

This is the same if I'm running multiple files.",pselden,NONE,2011-11-29 17:41:03+00:00,True,2011-12-15 06:08:17+00:00,15.52,,7,11,2011-11-29 17:55:30+00:00,0.01,tj,CONTRIBUTOR,0,3,0,4,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
96,Weird error messages thrown by Mocha,"I get weird internal error messages from Mocha when having this code that throws an error somewhere in the code:
person.isIn(""Happy"").should.be.false

Output:
..

✖ 2 of 2 tests failed:

0) Statemachine should transition to another state on event: TypeError: Cannot set property 'failed' of undefined

at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
  at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
  at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
  at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
  at EventEmitter._tickCallback (node.js:192:40)

1) Statemachine should transition to another state on event: TypeError: Cannot set property 'failed' of undefined

at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
  at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
  at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
  at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
  at EventEmitter._tickCallback (node.js:192:40)




✖ 2 of 2 tests failed:

0) Statemachine should transition to another state on event: TypeError: Cannot set property 'failed' of undefined

at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
  at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
  at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
  at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
  at EventEmitter._tickCallback (node.js:192:40)

1) Statemachine should transition to another state on event: TypeError: Cannot set property 'failed' of undefined

at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:90:15)
  at next (/usr/local/lib/node_modules/mocha/lib/runner.js:294:12)
  at /usr/local/lib/node_modules/mocha/lib/runner.js:319:25
  at Array.1 (/usr/local/lib/node_modules/mocha/lib/runner.js:272:7)
  at EventEmitter._tickCallback (node.js:192:40)

I have to do this:
try
  person.isIn(""Happy"").should.be.false
catch error
  console.log error

to get the original error message:
{ name: 'AssertionError',
message: 'expected true to be false',
actual: undefined,
expected: undefined,
operator: undefined }
This is the same issue that has been closed. Although it seemed that you fixed it.",,NONE,2011-11-29 23:16:15+00:00,True,2011-11-29 23:54:22+00:00,0.03,,1,3,2011-11-29 23:28:04+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
97,Color highlighting error,"There is no highlighting in here so you can't see the highlighting error.
The line ""Error: You can't goto st"" is red, then it suddenly breaks and jumps into a new line with grey color"".
✖ 1 of 6 tests failed:

0) Statemachine should transition to another state on event:
   Error: You can't goto st
ate <ANgry> through event [accident].
   at [object Object].goto (/Volumes/Private/johnnyluu/Documents/Development/johnnywengluu/yobiengine/lib/yobiengine

This happens all the time.
The whole line ""Error: You can't goto state  through event [accident]."" should be red.",,NONE,2011-11-30 01:49:47+00:00,True,2011-11-30 20:16:24+00:00,0.77,,1,4,2011-11-30 01:51:47+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
98,Running tests asynchronously,"Is there a way for me to run the tests asynchronously.
I am testing my HTTP API for a database and each HTTP request takes 1-2 sec to finish and it would be really good if the tests are run asynchronously so each test doesn't have to wait for the test before to finish.
That would cut down the testing time to 1-2 sec instead of adding 1-2 sec for each test.",,NONE,2011-11-30 10:56:14+00:00,True,2011-11-30 14:05:28+00:00,0.13,,5,19,2011-11-30 14:05:26+00:00,0.13,tj,CONTRIBUTOR,0,2,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
99,Global leaks,"I am using YUI3 on node.js but I get this when running the test:
0) SDK should convert xml into json with yql
  1) SDK should convert xml into json with yql

  ✖ 2 of 2 tests failed:

  0) SDK should convert xml into json with yql:
     Error: global leaks detected: encoding, parseQueryString

  at Runner.checkGlobals (/usr/local/lib/node_modules/mocha/lib/runner.js:78:21)
      at Runner.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runner.js:40:44)
      at Runner.emit (events.js:88:20)
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:268:12)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:291:25
      at done (/usr/local/lib/node_modules/mocha/lib/runnable.js:97:5)
      at Object.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runnable.js:80:7)
      at Timer.ontimeout (timers.js:84:39)

  1) SDK should convert xml into json with yql:
     Error: global leaks detected: encoding, parseQueryString

  at Runner.checkGlobals (/usr/local/lib/node_modules/mocha/lib/runner.js:78:21)
      at Runner.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runner.js:40:44)
      at Runner.emit (events.js:88:20)
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:268:12)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:291:25
      at done (/usr/local/lib/node_modules/mocha/lib/runnable.js:97:5)
      at Object.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runnable.js:80:7)
      at Timer.ontimeout (timers.js:84:39)

It comes from Mocha. The YUI3 code doesn't run into any problem when I run it without Mocha.
YUI = require(""yui3"").YUI

YUI().use ""yql"", (Y) ->

  Y.YQL 'select title from rss where url=""http://rss.news.yahoo.com/rss/topstories""', (r) ->
    console.log r

Any clue?",,NONE,2011-11-30 11:39:09+00:00,True,2011-11-30 13:59:50+00:00,0.1,,2,5,2011-11-30 13:43:45+00:00,0.09,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
100,Allow --globals to be used multiple times,,tj,CONTRIBUTOR,2011-11-30 13:59:24+00:00,True,2012-04-13 22:58:00+00:00,135.37,,2,2,2012-04-13 16:48:35+00:00,135.12,brendannee,CONTRIBUTOR,0,2,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
101,Mocha breaks if no --globals used,To make all the tests in mocha fail remove the --globals line in test/mocha.opts.,volker48,NONE,2011-11-30 19:19:39+00:00,True,2011-11-30 19:30:59+00:00,0.01,,2,2,2011-11-30 19:31:09+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
103,Manipulate mocha programmatically in tests,"Some tests need timeout 4000. Other needs global leak to be accepted.
It's difficult to remember this for all the tests.
Would be making things easier if all cli options could be set in the test files directly programmatically.",,NONE,2011-11-30 21:02:49+00:00,True,2011-12-11 14:38:27+00:00,10.73,,1,1,2011-12-11 14:38:27+00:00,10.73,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
104,"Add ""repository"" and ""homepage"" to package.json",Just a reminder to add the git repo and homepage to package.json so that it would be easy to click to on http://search.npmjs.org/#/mocha,plievone,NONE,2011-11-30 22:29:57+00:00,True,2012-11-02 16:12:55+00:00,337.74,,3,1,2012-11-02 04:01:40+00:00,337.23,Krinkle,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
106,Recursive / Sub-Folders,"So what's Mocha's philosophy on sub-folders ?
I notice right now that sub-folders for instance  ./test/bugs/* would not be run with your standard ./mocha command...
Is it best practice not to use sub-folders? Or it just a feature that hasn't been implement yet?
Or is there a recommended work-around to make -r recursive support unnecessary ?",quangv,CONTRIBUTOR,2011-12-01 19:36:31+00:00,True,2011-12-02 17:01:18+00:00,0.89,,18,38,2011-12-01 19:44:06+00:00,0.01,tj,CONTRIBUTOR,1,2,0,16,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
108,Run tests recursively,"I have a test folder with sub folders containing sub folders.
Could I run all test files recursively?",,NONE,2011-12-02 12:37:32+00:00,True,2011-12-02 17:01:30+00:00,0.18,,1,1,2011-12-02 17:01:30+00:00,0.18,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
110,global leak detected error,"Was trying to unit test the apple push notification library
https://github.com/argon/node-apn
but I get a global leak error when I try to open up an APN connection.  Is that a configuration error on my part or an error in node-apn or mocha?
I'm not sure I understand what checkGlobals is doing... is it just checking to see if any global variable are being set?

Feed ""before all"" hook:
Error: global leak detected: hasCert
at Runner.checkGlobals (/usr/lib/node_modules/mocha/lib/runner.js:96:21)
at Runner. (/usr/lib/node_modules/mocha/lib/runner.js:41:44)
at Runner.emit (events.js:64:17)
at /usr/lib/node_modules/mocha/lib/runner.js:159:12
at Hook.run (/usr/lib/node_modules/mocha/lib/runnable.js:114:5)
at next (/usr/lib/node_modules/mocha/lib/runner.js:157:10)
at Array. (/usr/lib/node_modules/mocha/lib/runner.js:165:5)
at EventEmitter._tickCallback (node.js:126:26)",mypark,NONE,2011-12-02 18:00:18+00:00,True,2011-12-02 18:07:15+00:00,0.0,,3,4,2011-12-02 18:04:11+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
113,Add contexts for shared behaviours,"I dont want to add the concept of shared behaviours, however this will facilitate it",tj,CONTRIBUTOR,2011-12-03 21:08:43+00:00,True,2012-01-04 01:48:42+00:00,31.19,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
114,Html Reporter throws stacktrace immediately on execution,"When I try mocha tests/* --globals name --reporter html i get
node.js:201
        throw e; // process.nextTick error, or 'error' event on first tick
              ^
ReferenceError: $ is not defined
    at new HTML (/usr/local/lib/node_modules/mocha/lib/reporters/html.js:40:14)
    at run (/usr/local/lib/node_modules/mocha/bin/mocha:176:18)
    at /usr/local/lib/node_modules/mocha/bin/mocha:168:16
    at Array.forEach (native)
    at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/mocha:163:7)
    at Module._compile (module.js:432:26)
    at Object..js (module.js:450:10)
    at Module.load (module.js:351:31)
    at Function._load (module.js:310:12)
    at Array.0 (module.js:470:10)
    at EventEmitter._tickCallback (node.js:192:40)```",AutomatedTester,NONE,2011-12-04 10:02:05+00:00,True,2012-06-17 03:04:14+00:00,195.71,,2,5,2011-12-04 10:02:31+00:00,0.0,AutomatedTester,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
115,browser support for running individual tests,"Much like other browser testing frameworks such as jasmine, it would be great if we could just run individual tests or even individual suites specifying which in the URL.
The test result could even have a link just to run the individual test.",pgte,NONE,2011-12-04 14:11:21+00:00,True,2012-05-11 18:20:57+00:00,159.17,,3,9,2011-12-04 14:42:17+00:00,0.02,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
116,Spec reporter missing in reporters/index.js,All the other reporters are required in reporters/index.js.,jgonera,NONE,2011-12-04 20:02:40+00:00,True,2011-12-04 20:20:53+00:00,0.01,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
117,EventEmitter leak,"..........(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
Trace: 
    at Hook.<anonymous> (events.js:133:17)
    at next (/Users/tj/projects/express-resource/node_modules/mocha/lib/runner.js:157:10)
    at Array.0 (/Users/tj/projects/express-resource/node_modules/mocha/lib/runner.js:169:5)
    at EventEmitter._tickCallback (node.js:192:40)
.....


due to the hook error event. we exit currently anyway so it's not a big deal but the warning is annoying",tj,CONTRIBUTOR,2011-12-04 21:24:43+00:00,True,2011-12-04 21:45:30+00:00,0.01,,10,10,2012-04-20 05:09:35+00:00,137.32,sudhirj,NONE,1,0,0,8,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
118,how to setup exports style tests for the browser,"It's not clear to me how to use the exports style for browser-based tests. I have been able use bdd style with very little effort.
I would appreciate a quick pointer (or perhaps an example) of using exports style in the browser.
many thanks!",bennage,NONE,2011-12-06 00:41:22+00:00,True,2012-06-17 03:04:14+00:00,194.1,,2,3,2011-12-06 00:45:44+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
119,Failing async before()  (bdd) or suiteSetup() (tdd) reports against the previous suite,"If you have an asynchronous section in a before() or suiteSetup() that fails, the error is reported against the previous test suite:
TDD ui case
var should = require('should');

testSetup = function(done) {
    setTimeout(function() {
        // Either a failed assertion
        should.exist(somethingthatdoesntexist);
        // Or a thrown error
        //throw new Error(""Something went wrong here... and "");
    }, 10);
};

suite('The First test suite', function() {
    test('has one test', function(done) {
        done();
    });

    test('has a second test', function(done) {
        done();
    });

});

// Now fail inside an async section in the test setup
suite('The Second suite', function() {
    suiteSetup(testSetup);
    test('has one test', function(done) {
        done();
    });
});
Output
  The First test suite
    ? has one test  
    ? has a second test  

  The Second suite
    0) has a second test

  ? 1 of 3 tests failed:

  0) The First test suite has a second test:
     ReferenceError: somethingthatdoesntexist is not defined

BDD ui test case
var should = require('should');

testSetup = function(done) {
    setTimeout(function() {
        // Either a failed assertion
        should.exist(somethingthatdoesntexist);
        // Or a thrown error
        //throw new Error(""Something went wronghere... and "");
    }, 10);
};

describe('The First test suite', function() {
    describe('has one test', function() {
        it('is great', function(done) {
            done();
        });
    });

    describe('has a second test', function() {
        it('is great', function(done) {
            done();
        });
    });

});


// Now fail inside an async section in the test setup
describe('The Second suite', function() {
    before(testSetup);
    describe('has one test', function() {
        it('is great', function(done) {
            done();
        });
    });
});
Expected results
"" 0) The First test suite has a second test:
     ReferenceError: somethingthatdoesntexist is not defined""

This is incorrect - and should report that the failure was in the beforeAll hook:
  0) The Second suite ""before all"" hook:
     ReferenceError: somethingthatdoesntexist is not defined

As it does if the error is thrown outside the setTimeout function.",dhendo,CONTRIBUTOR,2011-12-06 10:16:02+00:00,True,2011-12-08 16:05:38+00:00,2.24,,2,7,2011-12-07 17:40:38+00:00,1.31,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
120,Hooks always have timeout of 2000,"It doesn't matter what timeout I set for the suite, hooks will always have the default 2000. Could we add the following line to the functions that add hooks (Suite.prototype.beforeAll...)?
if (this._timeout) hook.timeout(this._timeout);",jgonera,NONE,2011-12-07 08:52:38+00:00,True,2011-12-07 17:27:31+00:00,0.36,,2,3,2011-12-07 16:48:15+00:00,0.33,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
121,it doesn't catch and display errors that occur asynchronously,"describe('test', function() {
  it('is a test', function(done) {
    process.nextTick(function() {
      'a'.should.equal('b');
      done();
    });
  });
});
expected output
  0) test is a test:
     AssertionError: expected 'a' to equal 'b'

actual output
  0) test is a test:
     Error: timeout of 2000ms exceeded",petejkim,NONE,2011-12-08 20:03:41+00:00,True,2011-12-08 23:19:09+00:00,0.14,,2,4,2011-12-08 20:35:13+00:00,0.02,petejkim,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
122,Solarized,"Solarized is one of the best themes ever.  Unfortunately the tests are unreadable with Solarized Dark (my preferred flavor for Terminal) and look bad with Solarized Light.  I'm in love with Mocha, but I'd like to keep my favorite theme too.  Please help.",orlin,NONE,2011-12-08 20:15:16+00:00,True,2012-06-17 03:04:13+00:00,191.28,,3,3,2011-12-08 20:19:15+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
123,Mocha-tmbundle repo for Vico,"I just started using Vico - a kind of vim + textmate + awesome.  It can load textmate bundles.  But it likes to get them from github.  Which means the mocha/editors/JavaScript mocha.tmbundle needs to become a repo on its own.  Would you mind doing that?  I can live without the bundle, but why not make it more available...",orlin,NONE,2011-12-08 20:29:12+00:00,True,2012-06-17 03:04:13+00:00,191.27,,2,2,2011-12-09 01:00:00+00:00,0.19,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
124,total should adjust for --grep,,tj,CONTRIBUTOR,2011-12-09 00:16:33+00:00,True,2012-04-13 19:46:48+00:00,126.81,,2,2,2012-04-09 16:35:32+00:00,122.68,brendannee,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
125,after[Each] hooks should always fire,"currently will not on failure, this makes it difficult to clean up stubs etc",tj,CONTRIBUTOR,2011-12-09 00:24:04+00:00,True,2011-12-09 01:07:19+00:00,0.03,,1,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
126,expose Runner in browser,currently you cannot whitelist globals etc,tj,CONTRIBUTOR,2011-12-09 00:31:39+00:00,True,2011-12-09 00:54:18+00:00,0.02,,1,0,,,,,0,0,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
127,dox api docs,,tj,CONTRIBUTOR,2011-12-09 00:55:05+00:00,True,2015-03-14 19:58:03+00:00,1191.79,,2,1,2015-03-14 19:58:03+00:00,1191.79,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
128,hotlink build files,on site,tj,CONTRIBUTOR,2011-12-09 01:10:59+00:00,True,2011-12-10 00:24:18+00:00,0.97,,1,0,,,,,0,0,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
131,cancel timers on uncaught exceptions,,tj,CONTRIBUTOR,2011-12-09 07:01:26+00:00,True,2011-12-09 07:19:01+00:00,0.01,,1,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
132,added removeAllListeners,"Hi - when using beforeEach - I was getting an error in the browser as EventEmitter does not have this method. Adding in the following made it work ok :
EventEmitter.prototype.removeAllListeners = function(event) {
delete this.callbacks[event]
}",weepy,NONE,2011-12-09 18:44:45+00:00,True,2011-12-09 19:25:27+00:00,0.03,,2,1,2011-12-09 18:49:29+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
133,test uncaught exception timeouts in the browser,,tj,CONTRIBUTOR,2011-12-10 00:24:28+00:00,True,2011-12-11 14:24:54+00:00,1.58,,1,0,,,,,0,0,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
134,Add support for custom timeouts per-test,,rauchg,CONTRIBUTOR,2011-12-10 00:27:06+00:00,True,2011-12-11 14:35:04+00:00,1.59,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
135,slow in browser ?,"I've got the same tests running in both the browser and in node. In node they take 3ms, and in Chrome they take 700ms. All tests are synchronous and are handling some very basic logic. The Chrome profiler seems to just report that 90% of the time is spend in the ""Program"" so that's not much user.  At first I thought it might be due to some kind of timer - but I can't see that in the codebase. Any ideas ?",weepy,NONE,2011-12-10 00:33:10+00:00,True,2011-12-10 18:23:33+00:00,0.74,,2,12,2011-12-10 00:34:19+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
136,Running mocha tests from inside node?,"I've got a whole tree of test files to run and want to be able select which ones to run using some console commands. I tried using a sort of bootstrap file that mocha would load and it would load the other files depending one what console commands I pass through mocha, but apparently commander just complains when you use a command that hasn't been defined.
What I'd really like is to be able to just require mocha in my code and run tests from there. At the moment I'm just using child_process.spawn and piping it's output to the console, which is kind of hacky and doesn't have the pretty colors. :(",Qard,NONE,2011-12-11 06:18:39+00:00,True,2012-02-15 06:36:24+00:00,66.01,,8,17,2011-12-11 06:27:34+00:00,0.01,tj,CONTRIBUTOR,0,2,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
137,make tm,"$ make tm
cp -fr editors/JavaScript\ mocha.tmbundle ~/Library/Application\ Support/TextMate/Bundles/JavaScript\ mocha.tmbundle
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle: No such file or directory
cp: editors/JavaScript mocha.tmbundle: unable to copy extended attributes to /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/info.plist: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets: No such file or directory
cp: editors/JavaScript mocha.tmbundle/Snippets: unable to copy extended attributes to /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets/bdd - after each.tmSnippet: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets/bdd - after.tmSnippet: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets/bdd - before each.tmSnippet: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets/bdd - before.tmSnippet: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets/bdd - it.tmSnippet: No such file or directory
cp: /Users/dscape/Library/Application Support/TextMate/Bundles/JavaScript mocha.tmbundle/Snippets/untitled.tmSnippet: No such file or directory
make: *** [tm] Error 1",dscape,NONE,2011-12-11 10:33:32+00:00,True,2011-12-23 04:41:39+00:00,11.76,,5,14,2011-12-11 12:19:23+00:00,0.07,tj,CONTRIBUTOR,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
138,silent option (reporter),"It would be nice to have a --quiet option or --reporter silent or something to indicate no output is wanted unless there are errors.  I guess it must be a reporter modifier and not a reporter itself -- we still want the errors in a certain reporter format...  Anyway, it's not unusual for commands to have some such option.  Often, passing tests can just --shut-up :)  --shush?",orlin,NONE,2011-12-11 13:53:21+00:00,True,2012-02-03 03:21:37+00:00,53.56,,11,22,2011-12-11 14:06:04+00:00,0.01,tj,CONTRIBUTOR,0,3,0,8,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
139,Watch what the tests require?,"A common mantra for tdd / bdd is: ""write some tests that fail, make them pass"", aka test-first.  The current implementation of --watch just sits idle in this case.  It's often hard to get the tests wrong, what's being tested is more in need of watching than the code that's testing it.  I think node reloaders have already solved catching this.  I haven't checked how, but if I had to guess: it's by checking what's required...  For simplicity sake (and to avoid circular requires) just one level deep is all that's needed in most test cases.  If what's tested changes, the tests run again.",orlin,NONE,2011-12-11 15:27:26+00:00,True,2012-01-06 00:48:41+00:00,25.39,,10,25,2011-12-11 15:33:32+00:00,0.0,tj,CONTRIBUTOR,0,1,0,9,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
140,CoffeeScript support in doc reporter,"CoffeeScript support in doc reporter, which includes source code below the test name would be a great feature, thanks!",TobiaszCudnik,NONE,2011-12-11 20:53:38+00:00,True,2011-12-15 06:13:51+00:00,3.39,,2,3,2011-12-11 21:09:48+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
142,Can't run tests,"[] $ mkdir mocha-test
[] $ cd mocha-test/
./  ../
[mocha-test] $ npm install mocha
mocha@0.3.6 ./node_modules/mocha
├── debug@0.1.0
└── commander@0.3.2
[mocha-test] $ ls
node_modules/  ./  ../
[mocha-test] $ cd node_modules/
mocha/  ./  ../  .bin/
[node_modules] $ cd mocha/
Makefile  bin/  editors/  images/  lib/  node_modules/  support/  test/  ./  ../  mocha.css  .gitignore  index.js  mocha.js  test.js  package.json  History.md  Readme.md  .npmignore  .travis.yml
[mocha] $ make test-all
node.js:201
throw e; // process.nextTick error, or 'error' event on first tick
^
Error: Cannot find module 'should'
at Function._resolveFilename (module.js:334:11)
at Function._load (module.js:279:25)
at Module.require (module.js:357:17)
at require (module.js:368:17)
at Command. (/Users/johnathan/mocha-test/node_modules/mocha/bin/mocha:86:3)
at Command.emit (events.js:88:20)
at Command.parseOptions (/Users/johnathan/mocha-test/node_modules/mocha/node_modules/commander/lib/commander.js:426:14)
at Command.parse (/Users/johnathan/mocha-test/node_modules/mocha/node_modules/commander/lib/commander.js:322:20)
at Object. (/Users/johnathan/mocha-test/node_modules/mocha/bin/mocha:105:9)
at Module._compile (module.js:432:26)
make: *** [test-bdd] Error 1",jleppert,NONE,2011-12-12 22:28:30+00:00,True,2011-12-12 22:32:12+00:00,0.0,,3,5,2011-12-12 22:32:12+00:00,0.0,jleppert,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
143,'after' not being called on failure,"Issue #125 appears to have addressed afterEach, but I'm seeing 'after' only called on success, not on failure.",pofallon,NONE,2011-12-13 03:40:25+00:00,True,2011-12-15 02:38:17+00:00,1.96,,2,4,2011-12-14 17:06:20+00:00,1.56,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
144,beforeSuite,"I'm experimenting with using Mocha for UI tests. While beforeEach is useful for unit tests, in my UI tests it results in repeating the same execution path before every test which is not what I want. For example, I use describe to describe some actions done on the UI and then use it to check the results of those actions. I don't need those actions to be repeated before every test, though.
I thought about implementing something like beforeSuite (can't come up with a better name) which would work like this:
describe ""suite A"", ->
  beforeSuite -> console.log ""A's beforeSuite""

  describe ""suite B1"", ->
    beforeSuite -> console.log ""B1's beforeSuite""

    describe ""suite C"", ->
      it ""test C"", -> console.log ""test C""

  describe ""suite B2"", ->
    it ""test B2"", -> console.log ""test B2""

###    
A's beforeSuite
B1's beforeSuite
test C
A's beforeSuite
test B2
###
What do you think?",jgonera,NONE,2011-12-13 09:27:59+00:00,True,2011-12-20 14:57:35+00:00,7.23,,2,5,2011-12-14 16:53:43+00:00,1.31,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
149,Load mocha.opts for individual tests,"It doesn't seem like mocha.opts is loaded for running individual tests.
I'm trying to run individual tests inside test/ directory. It would be nice if you could just run mocha sometest.js inside test/ and still have it load mocha.opts.
Otherwise, running a single test seems a little verbose:
mocha sometest.js --growl --require should --reporter list

Let me know your thoughts. Thanks!",matthewmueller,NONE,2011-12-16 05:07:20+00:00,True,2011-12-16 20:37:13+00:00,0.65,,2,4,2011-12-16 17:22:11+00:00,0.51,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
150,Exceptions in hooks are silent,If an exception occurs during a hook (e.g. beforeEach) - it's lost silently - which is difficult to track down where the problem is.,weepy,NONE,2011-12-16 11:37:25+00:00,True,2011-12-18 18:25:10+00:00,2.28,,2,7,2011-12-16 17:01:44+00:00,0.23,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
151,"Stories, functional testing, Cucumber Scenarios","Hey, so I was wondering what's mocha's philosophy on functional/acceptance, high level testing? I understand how to use Mocha for unit testing with describe, it, but how do you use it for higher-level stuff?
Something in the realm of Cucumber.
good add-on syntax for Mocha?
it could be simply like Feature, Scenario, Given, When, Then = describe()
You could write things like, and it'll put everything in a describe()
Feature 'Test',
  ""In order to test"",
  ""as a developer"",
  ""I use mocha"", ->

    Scenario 'BDD', ->
       Given 'should', ->
       When 'true', ->
           it('test'), -> 
                 true.should.be.true
       Then 'assertTrue', ->
Edit:
messing around with it now",quangv,CONTRIBUTOR,2011-12-17 09:11:22+00:00,True,2011-12-23 04:43:25+00:00,5.81,,2,2,2011-12-17 16:19:56+00:00,0.3,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
152,Ability to pass flags to the node process,"Hey TJ. So basically I'm looking to invoke the --expose-gc flag along with my tests. I couldn't see an immediate way to do this with the mocha bin, so it would be sweet to expose the ability to proxy those flags (the harmony ones too, etc.).",TooTallNate,CONTRIBUTOR,2011-12-18 00:38:01+00:00,True,2011-12-18 00:46:24+00:00,0.01,,3,4,2011-12-18 00:46:24+00:00,0.01,rauchg,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
153,process.nextTick in browser too slow with big suites and debugger,"Problem is that without setTimeout to clear the stack - the stack can get riduncuously big - which then a real problem to try to use the Web Inspector with break points etc.
From my experiments I found that the following setZeroTimeout was the best of the ones on the web :
// Only add setZeroTimeout to the window object, and hide everything else in a closure.
(function() {

  var timeouts = [],
      messageName = 'zero-timeout-message';

  // Like setTimeout, but only takes a function argument.  There's
  // no time argument (always zero) and no arguments (you have to
  // use a closure).
  function setZeroTimeoutPostMessage(fn) {
    timeouts.push(fn);
    window.postMessage(messageName, '*');
  }

  function setZeroTimeout(fn) {
    setTimeout(fn, 0);
  }

  function handleMessage(event) {
    if (event.source == window && event.data == messageName) {
      if (event.stopPropagation) {
        event.stopPropagation();
      }
      if (timeouts.length) {
        timeouts.shift()();
      }
    }
  }

  if (window.postMessage) {
    if (window.addEventListener) {
      window.addEventListener('message', handleMessage, true);
    } else if (window.attachEvent) {
      window.attachEvent('onmessage', handleMessage);
    }
    window.setZeroTimeout = setZeroTimeoutPostMessage;
  } else {
    window.setZeroTimeout = setZeroTimeout;
  }

}());",weepy,NONE,2011-12-18 16:08:11+00:00,True,2011-12-18 18:18:41+00:00,0.09,,2,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
154,Errors reporting twice,,tj,CONTRIBUTOR,2011-12-18 18:25:26+00:00,True,2011-12-18 18:30:53+00:00,0.0,,1,0,,,,,0,0,0,0,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
155,Add runnable browser example to the site,,tj,CONTRIBUTOR,2011-12-18 18:48:58+00:00,True,2012-06-17 01:12:55+00:00,181.27,,3,5,2011-12-20 15:10:42+00:00,1.85,jfroffice,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
156,Add IE6-7-8 specific styles,"Just a few mainly for showing passes more clearly, and fixing a positioning issue on IE6",rauchg,CONTRIBUTOR,2011-12-18 19:11:55+00:00,True,2014-07-27 12:41:31+00:00,951.73,,3,1,2014-07-27 05:14:37+00:00,951.42,boneskull,MEMBER,1,0,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
157,IE8<= progress reporter,A simple div-based progress bar or similar instead of the canvas,rauchg,CONTRIBUTOR,2011-12-18 19:13:03+00:00,True,2012-06-17 03:04:13+00:00,181.33,,3,2,2012-04-14 20:52:44+00:00,118.07,brendannee,CONTRIBUTOR,0,2,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
158,Remove jQuery dependency,,rauchg,CONTRIBUTOR,2011-12-18 19:13:22+00:00,True,2012-04-13 17:46:29+00:00,116.94,,5,5,2012-01-23 16:35:14+00:00,35.89,jprichardson,NONE,0,2,0,2,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
160,phantomjs integration,as an extension,tj,CONTRIBUTOR,2011-12-18 20:21:19+00:00,True,2012-01-10 16:40:35+00:00,22.85,,12,26,2011-12-18 20:21:42+00:00,0.0,tj,CONTRIBUTOR,0,1,0,11,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
161,Hide setZeroTimeout,Do not pollute window,rauchg,CONTRIBUTOR,2011-12-18 21:55:32+00:00,True,2011-12-18 22:56:36+00:00,0.04,,3,3,2011-12-18 21:56:19+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
163,add https://github.com/LearnBoost/expect.js to the site,,tj,CONTRIBUTOR,2011-12-19 00:43:53+00:00,True,2012-01-04 01:46:52+00:00,16.04,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
164,Visual bug when emitting error,"Relates to:
https://github.com/visionmedia/mocha/blob/master/mocha.js#L1186
String contatenation with the error in .html.
In my case the error was Error <1> which outputs <div>Error<1/></div>",dscape,NONE,2011-12-19 11:30:21+00:00,True,2011-12-19 16:33:11+00:00,0.21,,2,1,2011-12-19 16:33:15+00:00,0.21,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
165,"""Script error"" regression","cc @c4milo
possibly due to the new IE stuff, taking a look",tj,CONTRIBUTOR,2011-12-19 21:05:41+00:00,True,2014-08-16 05:45:30+00:00,970.36,,5,19,2011-12-19 22:09:46+00:00,0.04,c4milo,NONE,1,1,0,3,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
166,when grepping don't display the empty suites,,tj,CONTRIBUTOR,2011-12-19 21:40:00+00:00,True,2012-04-13 16:56:19+00:00,115.8,,3,3,2012-03-23 02:39:03+00:00,94.21,uipoet,NONE,0,2,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
168,Mention in docs that HTML outputs to #mocha,,tj,CONTRIBUTOR,2011-12-20 16:21:56+00:00,True,2011-12-23 04:45:49+00:00,2.52,,1,1,2011-12-23 04:45:49+00:00,2.52,tj,CONTRIBUTOR,0,1,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
171,"Calling done(obj) for async test should fail it even if ""obj"" is not instance of Error","Hi. I suddenly found that async test fails only when done() function called with instance of Error. That's seames to be unexpected because we typically considering as error any truthy object. In my case done() wasn't called explicitly and there was a bug wich passed to done() wrong object, but nevertheless all tests where passing.",eldargab,NONE,2011-12-22 15:51:47+00:00,True,2011-12-22 17:51:50+00:00,0.08,,2,8,2011-12-22 16:05:01+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
174,Runner/suite accessible within tests?,"I was wondering if the current Runner (and the current suite object) is accessible from within the tests? or is the tests like sandboxed?  (during mocha cml)
Reason being, I wanted to throw custom mocha errors (AssertionErrors) but have it be pretty-printed by the current reporter...
Thanks,
Quang",quangv,CONTRIBUTOR,2011-12-23 04:06:34+00:00,True,2011-12-23 04:38:01+00:00,0.02,,2,1,2011-12-23 04:38:01+00:00,0.02,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
177,mocha is not running all my suites,"Please take a look at this gist:
https://gist.github.com/9799f593133d2b8cafd3",c4milo,NONE,2011-12-23 17:04:08+00:00,True,2011-12-23 17:05:46+00:00,0.0,,2,1,2011-12-23 17:05:46+00:00,0.0,c4milo,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
180,err.stack undefined in ./lib/reporter/base.js:133 on RangeError,"describe('Function', function () {
  function recurseForEver(callback) {
    recurseForEver(callback);
  }

  it('should recurse without error', function (done) {
    recurseForEver(done);
  });
});

produces:
jfk@graz:~/workspace/1/site-manager$ mocha test/range.test.js 
  0) Function should recurse without error:
     TypeError: Cannot call method 'indexOf' of undefined
      at /home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/base.js:133:23
      at Array.forEach (native)
      at Function.list (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/base.js:123:12)
      at Dot.epilogue (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/base.js:224:10)
      at Runner.<anonymous> (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/dot.js:54:10)
      at Runner.emit (events.js:88:20)
      at /home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:390:10
      at /home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:355:7
      at next (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:157:23)
      at Array.0 (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:175:5)
      at EventEmitter._tickCallback (node.js:192:40)

  1) Function should recurse without error:
     TypeError: Cannot call method 'indexOf' of undefined
      at /home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/base.js:133:23
      at Array.forEach (native)
      at Function.list (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/base.js:123:12)
      at Dot.epilogue (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/base.js:224:10)
      at Runner.<anonymous> (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/reporters/dot.js:54:10)
      at Runner.emit (events.js:88:20)
      at /home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:390:10
      at /home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:355:7
      at next (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:157:23)
      at Array.0 (/home/jfk/.nvm/v0.6.6/lib/node_modules/mocha/lib/runner.js:175:5)
      at EventEmitter._tickCallback (node.js:192:40)",joachimkainz,NONE,2011-12-28 04:38:25+00:00,True,2011-12-28 06:50:26+00:00,0.09,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
182,Helpers,"Apologies if there is a better place to ask this...I wasn't sure where to ask about Mocha.
I am coming from Jasmine with its 'helpers' magic.
I am primarily using Mocha for browser BDD specs right now and can't determine the best way to have Mocha run beforeEach on each spec from some kind of helper.
The require option isn't available when running in the browser (I think) and I am not sure how to hook into Mocha to do some kind of setup.
Any guidance or tips would be appreciated...I don't want to bend Mocha into a Jasmine mold, so if I am missing something please let me know.
Thanks!
mike",mnichols,NONE,2011-12-28 20:00:39+00:00,True,2011-12-29 19:36:13+00:00,0.98,,3,8,2011-12-28 21:01:57+00:00,0.04,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
183,"When there is beforeEach hook and test fails in async callback, it aborts other tests and error messages report wrong blocks","describe('mocha tests', function() {
  beforeEach(function() {
    // there is beforeEach hook
  });

  it('should go to the next test when it fails (outside callback)', function(done){
    throw new Error('the other test should still run');
    done();
  });

  it('should go to the next test when it fails (inside callback)', function(done) {
    setTimeout(function() {
      throw new Error('the other test should still run');
      done();
    }, 0);
  });

  it('should get to this test', function(done) {
    throw new Error('YES! This test still runs!');
    done();
  });
});
Expected output:
...

  ✖ 3 of 3 tests failed:

  0) mocha tests should go to the next test when it fails (outside callback):
     Error: the other test should still run
      at ...

  1) mocha tests should go to the next test when it fails (inside callback):
     Error: the other test should still run
      at ...

  2) mocha tests should get to this test:
     Error: YES! This test still runs!
      at ...

Actual output:
..

  ✖ 2 of 3 tests failed:

  0) mocha tests should go to the next test when it fails (outside callback):
     Error: the other test should still run
      at ...

  1) mocha tests ""before each"" hook:
     Error: the other test should still run
      at ...

Notice that the test is aborted and the error block reporting for the second error is also wrong.
Related Issue: Issue 94",petejkim,NONE,2011-12-30 08:57:41+00:00,True,2011-12-30 17:56:22+00:00,0.37,,2,2,2011-12-30 17:48:25+00:00,0.37,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
184,CRs for non-tty,issue that @TooTallNate pointed out https://gist.github.com/671356aa19909ca50746,tj,CONTRIBUTOR,2012-01-02 20:40:01+00:00,True,2013-10-13 23:14:13+00:00,650.11,,1,0,,,,,0,0,0,0,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
185,Would be nice if mocha sets the NODE_ENV variable to 'test',Pretty handy if different middlewares / configs etc. in Express or such is needed when running the test suite.,Cowboy-coder,CONTRIBUTOR,2012-01-03 20:27:09+00:00,True,2012-01-03 20:46:03+00:00,0.01,,15,31,2012-01-03 20:34:04+00:00,0.0,tj,CONTRIBUTOR,1,4,0,10,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
186,images for new reporters,xunit  / teamcity,tj,CONTRIBUTOR,2012-01-04 01:51:08+00:00,True,2014-06-21 21:54:43+00:00,899.84,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
187,v0.8.1 always has exit status of 0,"~/Projects (dev ✘)✭ $ mocha test/test_ben.js
.
✖ 1 of 1 tests failed:

dummy test ""before each"" hook:
Error: test
at Hook.fn (/Users/blindsey/Projects/test/test_ben.js:3:11)
at Hook.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:138:12)
at next (/usr/local/lib/node_modules/mocha/lib/runner.js:166:10)
at Array.0 (/usr/local/lib/node_modules/mocha/lib/runner.js:175:5)
at EventEmitter._tickCallback (node.js:126:26)

~/Projects (dev ✘)✭ $ echo $?
0",blindsey,NONE,2012-01-04 03:38:44+00:00,True,2012-01-04 20:09:35+00:00,0.69,,2,2,2012-01-04 20:07:42+00:00,0.69,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
188,Mocha exits with incorrect code when tests fail,"Mocha exits with exit code 0 when tests fail.  This means it cannot be used with Travis-CI
http://about.travis-ci.org/docs/user/build-configuration/
The standard Unix exit code of “0” means the build passed; everything else is treated as failure.

Output
✖ 1 of 5 tests failed:


 % echo $?                                                              
 0",guyht,NONE,2012-01-05 05:30:45+00:00,True,2012-01-05 05:33:27+00:00,0.0,,2,3,2012-01-05 05:33:25+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
190,Update Commander Dependency?,"Any reason why commander is still at 0.3.2? There are a couple things broken. The process can terminate before help text is fully written to output (see example below).
I believe it's caused by this line in the old commander:
    jakub-air:apiary jakub$ mocha --help

      Usage: mocha [options] [files]

      Options:

        -h, --help             output usage information
        -V, --version          output the version number
        -r, --require <name>   require the given module
        -R, --reporter <name>  specify the reporter to use
        -u, --ui <name>        specify user-interface (bdd|tdd|exports)
        -g, --grep <pattern>   only run tests matching <pattern>
        -t, --timeout <ms>     set test-case timeout in milliseconds [2000]
        -s, --slow <ms>        ""slow"" test threshold in milliseconds [75]
        -w, --watch            watch test files for changes
        -C, --no-colors        force disabling of colors
        -c, --colors           force enabling of colors
        -G, --growl            enable growl notification support
        -S, --say [voice]      enable say notification support
        -d, --debug            enable node's debugger
        --globals <names>      allow the given comma-delimited global [names]
        --ignore-leaks         ignore global variable leaks
        --interfjakub-air:apiary jakub$ 

Also running mocha without parameters throws an error.
    Error: ENOENT, No such file or directory 'test'
        at Object.readdirSync (fs.js:376:18)
        at Object.<anonymous> (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/bin/_mocha:162:14)
        at Module._compile (module.js:411:26)
        at Object..js (module.js:417:10)
        at Module.load (module.js:343:31)
        at Function._load (module.js:302:12)
        at Array.<anonymous> (module.js:430:10)
        at EventEmitter._tickCallback (node.js:126:26)",zzen,CONTRIBUTOR,2012-01-05 13:36:41+00:00,True,2012-01-05 16:39:35+00:00,0.13,,2,3,2012-01-05 16:39:50+00:00,0.13,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
191,document test contexts,,tj,CONTRIBUTOR,2012-01-05 16:41:41+00:00,True,2015-03-11 22:49:56+00:00,1161.26,,4,6,2014-12-15 01:40:44+00:00,1074.37,oveddan,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
193,Run all tests,"Hi,
Is there an option to run all the tests, even if some tests in-between fails without aborting ?
-Thanks",gitfy,NONE,2012-01-06 03:08:22+00:00,True,2012-06-17 03:04:13+00:00,163.0,,2,8,2012-01-06 15:37:41+00:00,0.52,tj,CONTRIBUTOR,0,1,0,1,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
194,add license,"Title says it all.
The project is getting popular and folks starting to include it in their systems. TJ, mind adding a license?",paulmillr,CONTRIBUTOR,2012-01-06 13:51:56+00:00,True,2012-01-06 15:33:44+00:00,0.07,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
195,regression: uncaught exceptions reporting several times,"require('should')

describe('tests: ', function(){
  it('test 1', function (done){
    setTimeout(function() {
      'one'.should.be.equal(1);
      done();
    }, 2000);
  });

  it('test 2', function(){
    'two'.should.be.equal('two');
  });

  it('test 3', function(done){
    process.nextTick(function(){
      'foo'.should.equal('foo');
      done();
    });
  })
})
outputs:

   λ mocha (master): ./bin/mocha test

  ....

  ✖ 2 of 3 tests failed:

  0) tests:  test 1:
     AssertionError: expected 'one' to equal 1
      at Object.equal (/Users/tj/Projects/mocha/node_modules/should/lib/should.js:306:10)
      at Object._onTimeout (/Users/tj/Projects/mocha/test.js:7:23)
      at Timer.ontimeout (timers.js:84:39)

  1) tests:  test 1:
     AssertionError: expected 'one' to equal 1
      at Object.equal (/Users/tj/Projects/mocha/node_modules/should/lib/should.js:306:10)
      at Object._onTimeout (/Users/tj/Projects/mocha/test.js:7:23)
      at Timer.ontimeout (timers.js:84:39)",tj,CONTRIBUTOR,2012-01-06 17:34:04+00:00,True,2012-01-06 18:01:46+00:00,0.02,,1,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
197,--bail to exit on first failure,,tj,CONTRIBUTOR,2012-01-06 22:23:49+00:00,True,2012-04-13 16:56:30+00:00,97.77,,4,5,2012-01-06 22:26:15+00:00,0.0,rauchg,CONTRIBUTOR,0,4,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
198,return done('some custom err') is successful if only one test,"The following will be successful:
$ mocha test/test.mocha.js

var fs = require(""fs"");

describe('cool', function() {
  describe('blah', function() {

    it('should not pass', function(done) {

      fs.readFile('nowheretobefound.txt', 'utf8', function(err, content) {
        if (err) {
          return done('some custom error');
        } else {
          return done();
        }
      });

    });

  });
});

Definitely not a huge priority, just thought I'd point it out.
Thanks!",matthewmueller,NONE,2012-01-08 05:25:17+00:00,True,2012-01-08 05:46:32+00:00,0.01,,3,4,2012-01-08 05:43:56+00:00,0.01,TooTallNate,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
201,Test isolation,"What level of isolation is there between .js files in the test directory?
From casual observation, it appears that if I have two files under test in the same directory, any globals in the first become available in the second.
Is this intentional?",dhendo,CONTRIBUTOR,2012-01-09 15:28:11+00:00,True,2012-01-10 09:13:31+00:00,0.74,,2,2,2012-01-09 17:04:03+00:00,0.07,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
203,Runner.on('end'),"Just wanted to make sure...
So there's no current way to add event listeners to the current running suite,  inside a current test/spec right?
Kinda like...
describe('end', function() {
  it('should fire on suite end', function() {
    Runner.on('end', function() {
      console.log('Mocha Runner has ended');
    });
  });
});
I wanted to fire a function when mocha ends.
Thanks, :)",quangv,CONTRIBUTOR,2012-01-10 22:05:42+00:00,True,2012-01-11 00:45:08+00:00,0.11,,2,8,2012-01-10 22:08:01+00:00,0.0,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
205,"Nested ""describe"" block does not seem to be processed","I tried the following spec with mocha:
describe('pending', function() {
  it('should be allowed');
});

describe('StringCalculator', function() {
  describe('Adding 1', function() {
    it('calculates 1', function() {
      var result = StringCalculator.add('1');
      result.should.equal(1);
    });

    describe('This should be displayed', function() {
      (1 + 1).should.equal(2);
    });
  });
});
And this is the output I received with the ""list"" reporter:
  - pending should be allowed
  ✓ StringCalculator Adding 1 calculates 1: 0ms

  ✔ 2 tests complete (3ms)

I don't see the ""This should be displayed"" string and only 2 tests were executed.",adomokos,CONTRIBUTOR,2012-01-11 04:21:04+00:00,True,2012-01-11 16:39:07+00:00,0.51,,2,2,2012-01-11 16:39:07+00:00,0.51,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
206,timeout override is broken (I think),"It doesn't seem to work for overrides that are longer than the default, which are sometimes necessary if I'm doing something more major in a test like running a node server to test against.
A failing test:
it('timeout override should work for more than 2000ms', function(done){
this.timeout(10000);
setTimeout(done, 4000);
})",cainus,NONE,2012-01-11 11:15:00+00:00,True,2012-01-12 02:18:22+00:00,0.63,,2,3,2012-01-11 16:28:39+00:00,0.22,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
210,Automated Browser Testing,"What do you think about adding something like this to mocha?
http://busterjs.org/docs/browser-testing/",jgallen23,NONE,2012-01-13 19:54:15+00:00,True,2012-01-13 20:00:51+00:00,0.0,,3,1,2012-01-13 19:59:40+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
211,landing strip reporter breaks in iTerm ,and possibly others,tj,CONTRIBUTOR,2012-01-14 02:01:49+00:00,True,2012-06-17 03:04:13+00:00,155.04,,6,10,2012-01-24 01:52:52+00:00,9.99,adomokos,CONTRIBUTOR,0,4,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
216,multiple calls to done() don't cause a test to fail,"describe('The features list contains a lie!', function() {
    it(""should fail when done is called multiple times"", function(done) {
        // this passes and it shouldn't
        done();
        done();
        done();
    });
});",lerouxb,NONE,2012-01-16 12:45:10+00:00,True,2012-06-17 03:04:13+00:00,152.6,,7,24,2012-01-16 16:41:01+00:00,0.16,tj,CONTRIBUTOR,0,2,0,5,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
217,How does mocha do asynchronous tests in browser?,"var a = 10;
setTimeout(function(){ a = 20; }, 0)  // don't change here

// What does mocha do here ???
// Does mocha have 'stop' method like qunit ?

assert(a === 20);",deepinsource,NONE,2012-01-16 16:06:19+00:00,True,2012-01-16 16:30:05+00:00,0.02,,2,5,2012-01-16 16:29:53+00:00,0.02,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
218,suppresses thrown errors,"Code that I'm testing throws an error.  This error does not appear in the test output, making it difficult to determine why the test failed.  It would be much more helpful if mocha always listed the stacktrace of any errors thrown during a test.
This test (along with others):
it (""creates the top-level object"", function () {
var result = fillObjectTree.fillObjectTree (dataSet1, example);
result.id.should.equal (1001);
});
Produces:
✖ 17 of 58 tests failed:


fill_object_tree createMap fillObjectTree creates the top-level object:


fill_object_tree createMap fillObjectTree creates the measurableQuantity:


Note the lack of detail under the failed test.
If I wrap the test code in a try/catch, it outputs the error in the console output:
it (""creates the top-level object"", function () {       
    try {
    var result = fillObjectTree.fillObjectTree (dataSet1, example);
    } catch (e) {
        log.error(e);
    }
    result.id.should.equal (1001);
    });

ERROR The provided object to fill (object) does not match the example object map's type (array) at path [.measurableQuantity.unitConversions], Error",jake-miles,NONE,2012-01-17 03:04:00+00:00,True,2012-01-18 17:55:26+00:00,1.62,,2,3,2012-01-18 17:02:29+00:00,1.58,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
220,Would you be open to adding sinon.js to the project?,I need to spy or stub on some of the functions I am trying to test. Can I add sinon.js as a dependent project to mocha?,adomokos,CONTRIBUTOR,2012-01-18 02:57:51+00:00,True,2012-01-18 03:03:33+00:00,0.0,,2,11,2012-01-18 03:03:33+00:00,0.0,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
222,Suite count is off?,"Using the BDD reporter on https://github.com/IgniterHQ/overmind-github reports the following:
Overmind-Github
✓ should accept POST requests to valid projects github push endpoint
✓ should not accept POST requests to invalid projects github push endpoint
✓ should not accept POST requests without a token
✓ should create an event in the proper container
✔ 4 tests complete (56ms)
the json reporter is showing
{""stats"":{""suites"":2,""tests"":4,""passes"":4,""failures"":0,""start"":""2012-01-18T04:38:09.224Z"",""end"":""2012-01-18T04:38:09.272Z"",""duration"":48}, ...

Unless I'm missing something...",deedubs,NONE,2012-01-18 04:42:13+00:00,True,2012-01-18 23:48:51+00:00,0.8,,2,1,2012-01-18 05:06:13+00:00,0.02,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
226,Adding before/after hooks outside the tests,"Jasmine has a way to add beforeEach/afterEach hooks from outside the test suite code (implemented as a global beforeEach/afterEach functions). This is useful for test helper libraries that, for example, want to hook a cleanup function in after each test case without requiring the test author to wire in the before/afterEach manually. Is there some way to do the equivalent in Mocha?",kevindente,NONE,2012-01-20 00:23:34+00:00,True,2012-01-20 00:59:32+00:00,0.02,,2,2,2012-01-20 00:32:58+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
227,pass args in callback(),"Instead of declaring global variables why not just pass the variables in callback() (similar to how Async and Vows works).
Eg instead of this:
describe '#resetDatabase()', ->

  response = null

  beforeEach (callback) ->
    db.resetDatabase ->
      query = """"""
        START indexedNode = node:groups(name = ""Organizations"")
        RETURN indexedNode.name
      """"""

      dbHttp.cypher {url, query}, (err, res) ->
        if err isnt null
          response = res
          callback null

  it 'should create an indexed node', (callback) ->

    response.data[0][0].should.equal ""Organizations""
    callback()

We do like this:
describe '#resetDatabase()', ->

  beforeEach (callback) ->
    db.resetDatabase ->
      query = """"""
        START indexedNode = node:groups(name = ""Organizations"")
        RETURN indexedNode.name
      """"""

      dbHttp.cypher {url, query}, (err, res) ->
        if err isnt null then callback null, res

  it 'should create an indexed node', (res, callback) ->

    res.data[0][0].should.equal ""Organizations""
    callback()

This could be written like:
describe '#resetDatabase()', ->

  beforeEach (callback) ->
    db.resetDatabase ->
      query = """"""
        START indexedNode = node:groups(name = ""Organizations"")
        RETURN indexedNode.name
      """"""

      dbHttp.cypher {url, query}, callback

  it 'should create an indexed node', (res, callback) ->

    res.data[0][0].should.equal ""Organizations""
    callback()

In this way we don't need to declare global variables and eliminate global side effects between tests.",,NONE,2012-01-20 20:27:42+00:00,True,2012-01-26 00:22:19+00:00,5.16,,2,11,2012-01-21 18:18:57+00:00,0.91,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
228,Rename before() to beforeAll()?,"When throwing an error in before() hook I get this error message:
..
✖ 1 of 2 tests failed:

User #createUser ""before all"" hook:
Error: User exists
at /Volumes/Private/johnnyluu/Development/program/yobistore-web/support/service/yobistore/server/lib/db.coffee:126:29
at /Volumes/Private/johnnyluu/Development/program/yobistore-web/node_modules/async/lib/async.js:525:34
at Array.1 (/Volumes/Private/johnnyluu/Development/program/yobistore-web/node_modules/async/lib/async.js:449:34)
at EventEmitter._tickCallback (node.js:192:40)

It says ""before all"" and not ""before"" hook.
Perhaps we should rename before() to beforeAll() to stay consistent?",,NONE,2012-01-20 21:22:40+00:00,True,2012-02-15 06:34:22+00:00,25.38,,1,3,2012-01-20 21:26:54+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
229,progress reporter bug,"The progress bar isn't fully loaded even when tests are completed.
[▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅]
✔ 3 tests complete (1869ms)",,NONE,2012-01-21 01:23:38+00:00,True,2012-01-21 01:25:36+00:00,0.0,,1,3,2012-01-21 01:25:36+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
230,No error output if thrown expression is a string,"If a test (or the code being tested) throws a new Error('error message'), Mocha's default Node-based runner will display nice details, including the error message and the stack trace. However, if the test throws some other expression -- for example, a string -- then Mocha will only display the name of the test that failed, and not the error message.
There may not be a stack trace to show in that case (since normally the stack trace is a property of the Error object), but Mocha should at least show the expression that was thrown.
I ran into this while testing some code that uses Knockout, which apparently does throw plain strings in some cases (e.g. when you try to write to a computed property). Probably the best fix is to change that code so it throws an Error instead of a string; but as it is Mocha displays nothing, which makes it difficult to diagnose anything at all.
Repro steps:


Create a file called test.js:
describe('MyLibrary', function(){
  it('handles errors', function(){
    throw ""Oops"";
    //throw new Error(""Oops"");
  });
});



Run Mocha on that test. In my case, I'm running on Windows and I've installed Mocha locally via npm install mocha, so I do node_modules\.bin\mocha test.js.


Expected output: Mocha should show the name of the test that failed, followed by the expression that was thrown (in this case, the string ""Oops""), something like this:
  .

  ? 1 of 1 tests failed:

  0) MyLibrary handles errors:
     Oops

Actual output: as above, but no Oops is shown. The last non-blank line that Mocha outputs is 0) MyLibrary handles errors:.
If you comment out the throw ""Oops""; line, and uncomment the throw new Error(""Oops""); line, Mocha behaves as expected, showing the error type and message (Error: Oops) followed by the stack trace. So this only seems to be a problem when a non-Error is thrown.",joewhite,NONE,2012-01-21 20:32:59+00:00,True,2012-01-22 16:02:07+00:00,0.81,,2,1,2012-01-22 16:02:07+00:00,0.81,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
232,done() is not defined,"Hey there,
I have a unit test script which can be seen here: https://gist.github.com/3bc91203fb434a19e9e4
The problem is that tests return the following:
ReferenceError: done is not defined
      at Request._callback (/Users/john/Sites/symble/Backend/test/routes.js:43:4)
      at Request.callback (/Users/john/Sites/symble/Backend/test/node_modules/request/main.js:108:22)
      at Request.<anonymous> (/Users/john/Sites/symble/Backend/test/node_modules/request/main.js:468:18)
      at Request.emit (events.js:67:17)
      at IncomingMessage.<anonymous> (/Users/john/Sites/symble/Backend/test/node_modules/request/main.js:429:16)
      at IncomingMessage.emit (events.js:88:20)
      at HTTPParser.onMessageComplete (http.js:137:23)
      at Socket.ondata (http.js:1137:24)
      at TCP.onread (net.js:354:27)

It seems to happen randomly - on different tests each time. It always happens twice (ie: I get two of the above errors on two tests).",johnhamelink,NONE,2012-01-23 14:09:16+00:00,True,2012-01-23 16:09:51+00:00,0.08,,4,7,2012-01-23 16:06:50+00:00,0.08,jprichardson,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
234,how to run same suite over multiple implementations,"I'd like to be able to run the same suite of tests over multiple implementations of the same API, what's the best way to do such a thing without copy/pasting test files and changing their before() method?
in code, something like:
var unit = inMemoryVersion
doTestsOn(unit)

unit = dbBackedVersion
doTestsOn(unit)",timoxley,NONE,2012-01-24 20:32:51+00:00,True,2012-01-25 03:31:30+00:00,0.29,,3,8,2012-01-25 03:31:30+00:00,0.29,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
235,Accepting tests in Vows format?,"What do you think about allowing tests to use Vows format as well?
For me that would be a big win, and I think that would make other Vows users wanna use Mocha as well.",,NONE,2012-01-24 21:51:03+00:00,True,2012-01-26 00:02:40+00:00,1.09,,1,10,2012-01-25 03:16:55+00:00,0.23,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
237,Reports fake times when used with sinon.useFakeTimers().,"Sinon has the ability to fake the clock. Usually one uses it like so:
describe(""My thing"", function () {
    var clock = null;

    beforeEach(function () {
        clock = sinon.useFakeTimers();
    });

    afterEach(function () {
        clock.restore();
    });

    it(""should be cool"", function () {
        it.should.be(""cool"");
        clock.tick(200);
        it.should.be(""still cool"");
    });
});
However, if you do this, the reporters tell you your test took 200 ms, and it's all red and sad.
Presumably whatever code is counting the time elapsed is using the time APIs Sinon is messing with. But, hopefully the measurements could be moved to before/after the beforeEach/afterEach hooks get executed, so you could use unmolested time APIs.
I'll look into it further and hopefully get a pull request together, but I thought I'd document it here while it's still fresh in my mind.",domenic,CONTRIBUTOR,2012-01-26 18:58:25+00:00,True,2012-05-02 22:42:47+00:00,97.16,,6,7,2012-01-28 06:28:05+00:00,1.48,tj,CONTRIBUTOR,0,2,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
239,"using multiple User Interfaces, -u, --ui","Pretty easy for someone to just add suite = describe; etc., but it's an interesting idea to consider adding native...
mocha test.js -u tdd -u bdd

which would allow syntax like
suite('Test', function() {
  describe('Function', function() {
    setup(function() {
      // setup...
    });
    it('should work', function() {
      // blah blah
    });
    teardown(function() {
      // teardown...
    });
  });
});
lol, I guess I just don't like things like
suite('Parent', function() {
  suite('Child', function() {
    // ""describe"" sounds better nested
  });
});

downside is encouraging bad habits, and name conflicts... what do you think?",quangv,CONTRIBUTOR,2012-01-27 04:50:01+00:00,True,2012-02-03 07:27:45+00:00,7.11,,3,5,2012-01-27 05:44:46+00:00,0.04,quangv,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
242,--watch should run on change of every file in tree,"Currently --watch just run itself after a change to a js in the current folder.
Why don't extend it to every file in the tree (excluding node_modules)?",mcollina,NONE,2012-01-27 15:28:17+00:00,True,2012-02-03 03:11:26+00:00,6.49,,2,5,2012-01-27 21:40:29+00:00,0.26,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
243,Opera reports 1 failure when actually everything passed,"I have a test case that has exactly 41 tests and while testing in node or Chrome/Safari/Firefox everything works great except in Opera.
It says:
passes: 41
failures: 1
duration: 0.21s

In chrome (for example) it says:
passes: 41
failures: 0
duration: 0.31s

This can be reproduced by checking out https://github.com/TrinityJS/Classify and opening test/Classify.all.html in Opera.",satazor,NONE,2012-01-30 16:41:36+00:00,True,2012-11-02 16:12:02+00:00,276.98,,8,15,2012-01-30 16:42:36+00:00,0.0,paulmillr,CONTRIBUTOR,0,3,0,5,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
244,"Maybe it's worth to add that it's BDD, RSpec - like?","Maybe it's worth to add that it's BDD, RSpec - like?
Because I spent a lot of time for searching for RSpec - like tool for JS and just ignored all the ""mocha"" metntion because it only has 'test framework' in its description.
And just now discovered it by accident by looking at the actual code. And realising that it's actually what I was searching for.
So, maybe adding BDD to its title may helps others.",alexeypetrushin,NONE,2012-01-30 22:18:09+00:00,True,2012-01-30 22:27:25+00:00,0.01,,2,1,2012-01-30 22:27:25+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
245,Provide finer grained control of global variable leak detection,"It would be nice to be able to specify global names to ignore within the source file, rather than on the command line. My makefile does one run of mocha on several source files. One of these has a leak in a third party module for the variable named 'result'. I'd rather not exclude that variable for all test files, and I'd rather not have to modify my makefile to run mocha separately on different files.",,NONE,2012-01-31 00:35:52+00:00,True,2018-03-08 05:27:27+00:00,2228.2,,4,9,2012-01-31 01:00:10+00:00,0.02,rauchg,CONTRIBUTOR,1,3,0,0,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
246,How to patch `it`?,"I tried to implement it.sync for pseudo-synchronous mode with fibers.
it.sync ""should provide handy shortcuts to collections"", ->
  $db.collection('test').name.should.eql 'test'
with this code:
it.sync = (desc, callback) ->
  it desc, (done) ->
    Fiber(->
      callback(done)
      done()
    ).run()
But it not works very well, because mocha rewrites its it function on every 'pre-require' event and erases my 'sync' method.
Maybe there's another, better way to do it?",alexeypetrushin,NONE,2012-01-31 19:23:30+00:00,True,2012-02-03 03:09:59+00:00,2.32,,2,3,2012-02-03 03:09:23+00:00,2.32,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
247,node inspector,"Hi
Is it possible for mocha to work with node inspector ?
I tried with mocha -d, but this seemed to just give the node debug prompt.
weepy",weepy,NONE,2012-02-01 14:13:05+00:00,True,2012-02-15 06:00:56+00:00,13.66,,16,42,2012-02-01 16:24:49+00:00,0.09,tj,CONTRIBUTOR,0,2,0,15,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
248,"Add syntax highlighting to client-side ""view source""",,tj,CONTRIBUTOR,2012-02-03 01:07:45+00:00,True,2012-02-03 03:03:44+00:00,0.08,,2,4,2012-02-03 01:13:35+00:00,0.0,jgallen23,NONE,0,1,0,1,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
249,Tests that are supposed to throw exceptions - feedback,"I have a project that does a lot of validations, and if something wrong happens an error is thrown.
Thing is that when an error is thrown it does not give any feedback about the error caught (I'm interested in the message). If I accidentally call an undefined method inside the code being tested, it passes because it was expected to throw an error. To solve this, we could somehow output the error message that was thrown (maybe an option that would activate this behaviour) so the user could verify if the expected error message is correct.
I don't know if this is an issue with mocha or with the assert libraries themselves (I'm using expect.js).",satazor,NONE,2012-02-03 09:34:54+00:00,True,2012-02-03 10:58:58+00:00,0.06,,3,10,2012-02-03 09:39:17+00:00,0.0,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
251,tests run twice if you specify where tests are and where to watch is same place,I stupidly forgot to remove one of them and it ran the tests twice. It would be good if we can check the arguments for watcher and where to run the tests and if the same only run once,AutomatedTester,NONE,2012-02-03 14:09:46+00:00,True,2012-02-16 22:29:02+00:00,13.35,,2,4,2012-02-15 06:28:49+00:00,11.68,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
252,Suggest `npm test` instead of `make test`,"Is there a reason for suggesting the use of make test instead of npm test and users adding ""test"": ""mocha --reporter list"" to their package.json file?
Advantages include integration with travis ci and standardization of testing of node projects",reaktivo,NONE,2012-02-03 16:43:37+00:00,True,2012-02-03 16:44:35+00:00,0.0,,4,4,2012-02-03 16:44:35+00:00,0.0,tj,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
253,"before/after have wrong ""this"" scope?","beforeEach/afterEach correctly invoke with ""this"" set to the scope of the suite. before/after however use global object instead. Maybe I'm missing something, but it seems weird why this would be intentional.
Test case:
assert = require('assert')

describe('scope is lost',function() {
    before(function() { this.foo=""world""}) // also this leaks into global scope
    describe('when using before/after', function() {
        it('should have value set for foo', function() { assert.equal(this.foo,'world') })
    })
})

describe('scope works fine',function() {
    beforeEach(function() { this.bar=""hello""})
    describe('when using beforeEach/afterEach', function() {
        it('should have value set for bar', function() { assert.equal(this.bar,'hello') })
    })
})

Result:
scope is lost
  0) ""before all"" hook
  when using before/after
    1) should have value set for foo

scope works fine
  when using beforeEach/afterEach
    ✓ should have value set for bar 


✖ 2 of 2 tests failed:

0) scope is lost ""before all"" hook:
   Error: global leak detected: foo
    at Runner.checkGlobals (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:103:21)
    at Runner.<anonymous> (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:44:44)
    at Runner.emit (events.js:64:17)
    at /Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:170:12
    at Hook.run (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runnable.js:155:5)
    at next (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:167:10)
    at Array.<anonymous> (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:177:5)
    at EventEmitter._tickCallback (node.js:126:26)

1) scope is lost when using before/after should have value set for foo:

ssertionError: ""world"" == ""undefined""
    at Test.fn (/Users/jakub/Documents/test.js:6:59)
    at Test.run (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runnable.js:153:32)
    at Runner.runTest (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:272:10)
    at /Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:313:12
    at next (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:200:14)
    at /Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:209:7
    at next (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:157:23)
    at Array.<anonymous> (/Users/jakub/.nvm/v0.4.12/lib/node_modules/mocha/lib/runner.js:177:5)
    at EventEmitter._tickCallback (node.js:126:26)",zzen,CONTRIBUTOR,2012-02-07 21:42:26+00:00,True,2012-02-07 23:28:52+00:00,0.07,,4,11,2012-02-07 21:56:54+00:00,0.01,tj,CONTRIBUTOR,1,2,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
256,Browser test failures are not explicit at all,"Hi all,
Sorry for posting this here, but I didn't find your mailing list. I use Mocha to test my Browser JS code. Everything works fine but the failure report is not really readable. When a test fails, a huge stacktrace is displayed and the error message is not properly displayed.  Is there any way to avoid that and have a clean rendering of the exception ?
Regards,
Frank",frankrousseau,NONE,2012-02-09 14:46:55+00:00,True,2012-02-17 16:41:23+00:00,8.08,,2,5,2012-02-09 17:01:22+00:00,0.09,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
257,--require should -> should.exist undefined,"When I add this to my mocha.opts file:
--require should
I could use most of 'should.js' except that should.exist is undefined.
This leads to the following error when doing the test:
TypeError: Object # has no method 'exist'
It can be solved by adding this to the test file:
var should = require('should');
But would expect that the definition in the mocha.opts files is enough.",toberndo,NONE,2012-02-09 20:15:02+00:00,True,2012-02-09 20:24:47+00:00,0.01,,4,4,2012-02-09 20:24:47+00:00,0.01,tj,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
259,this.callback is a dirty word,"When writing specs (BDD interface), writing to this.callback is apparently a no-no because it is overwritten by mocha for it's internal needs.
describe 'something', ->
  beforeEach ->
    @callback = name: 'good day, sir'
  it 'should be polite', ->
    @callback.name.should.equal 'good day, sir'
this.callback is no longer the object it once was in the beforeEach as one would have expected.",JamesMaroney,NONE,2012-02-11 20:54:53+00:00,True,2012-02-11 21:19:28+00:00,0.02,,2,3,2012-02-11 21:00:32+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
262,Tests don't pass with --watch,"I've cloned the mocha repository and bin/mocha shows all 62 tests are passing. If I run bin/mocha --watch and make a whitespace change to a source file then I get 13 failures with the following output:
$ bin/mocha --watch


  .............

  ✖ 13 of 62 tests failed:

  1) Runnable(title, fn) #timeout(ms) should set the timeout:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  2) Runnable(title, fn) .title should be present:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  3) Runnable(title, fn) when arity >= 1 should be .async:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  4) Runnable(title, fn) when arity == 0 should be .sync:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  5) Runnable(title, fn) .run(fn) when .pending should not invoke the callback:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  6) Runnable(title, fn) .run(fn) when sync without error should invoke the callback:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  7) Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  8) Runnable(title, fn) .run(fn) when async without error should invoke the callback:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  9) Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single ""error"" event:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  10) Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single ""error"" event:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  11) Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  12) Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback:
     TypeError: Cannot call method 'test' of undefined
      at Runner.runTest (/home/graeme/Development/mocha/lib/runner.js:268:14)
      at /home/graeme/Development/mocha/lib/runner.js:316:12
      at next (/home/graeme/Development/mocha/lib/runner.js:199:14)
      at /home/graeme/Development/mocha/lib/runner.js:208:7
      at next (/home/graeme/Development/mocha/lib/runner.js:157:23)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

  13) serial ""before each"" hook:
     TypeError: Cannot call method 'test' of undefined
      at next (/home/graeme/Development/mocha/lib/runner.js:159:14)
      at Array.0 (/home/graeme/Development/mocha/lib/runner.js:176:5)
      at EventEmitter._tickCallback (node.js:192:40)

I'm getting similar errors with my own tests, again only when using --watch, especially TypeError: Cannot call method 'test' of undefined.",GraemeF,NONE,2012-02-12 13:57:45+00:00,True,2012-02-15 03:27:39+00:00,2.56,,3,2,2012-02-14 20:09:13+00:00,2.26,FGRibreau,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
263,xdescribe,want Jasmine's xdescribe. :),drypot,NONE,2012-02-14 13:04:18+00:00,True,2012-02-15 05:52:50+00:00,0.7,,6,7,2012-02-14 16:36:06+00:00,0.15,tj,CONTRIBUTOR,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
264,-R spec formatting not interpolating the arguments,"I have some tests that when run with -R spec are rendered as follows:
%s%s
%s%s    app
%s%s      when logged in as activated user
◦ gets the login: Connected to :  coalitions_test
✓ %s  gets the login
✓ %s (%dms) has info about how many issues you've voted on 851
✓ %s (%dms) shows an activity section and a video section 888
✓ %s (%dms) shows how many issues i'm watching 867
✓ %s (%dms) shows how many issues i've not voted on 642
✓ %s (%dms) shows recent conversations section 762
✓ %s (%dms) shows how many issues i've voted on 750
✓ %s  should be get the index
✔ %d tests complete (%dms) 8 4817
Is there something obvious that I may be doing wrong? Some tests give the expected results and its not obvious what could be the cause of the difference.",,NONE,2012-02-14 19:15:44+00:00,True,2012-02-14 20:34:46+00:00,0.05,,1,2,2012-02-14 19:27:10+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
265,higher level js api,"would allow people to bypass mocha(1) if they wish, see #136 and a few others",tj,CONTRIBUTOR,2012-02-15 06:36:09+00:00,True,2012-03-16 17:18:20+00:00,30.45,,2,9,2012-03-06 23:48:56+00:00,20.72,uipoet,NONE,0,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
267,Document local --require,"I'm trying to use the new local require feature introduced in issue #241 like this:
$ mocha --require should --require ./test/api

./test/api is a simple api.js file that exports an object.
So should works as expected, but api doesn't.
How should I access this local require?",thatmarvin,NONE,2012-02-15 22:41:17+00:00,True,2015-03-15 06:45:55+00:00,1123.34,,3,6,2012-02-16 22:14:37+00:00,0.98,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
268,how to make mocha wait for db connection?,"I would like to write a beforeEach handler that purges the database, like
beforeEach(function(done){
  mainapp.statusapp.Users._withCollection(function(err, collection){
    if(err) done(err);
    collection.remove({}, done);
  })
});

I connect to my server asyncronouosly at the beginning of server.js
var db = new Db({
  name: 'test',
  host: '127.0.0.1',
  port: 27017
});
db.on('database', function(status){
  var error = status == 'open' ? null : status;
  if (error) throw 'Could not connect to database';
  else {
    statusapp.Users.fetch({
      error: function(err) {
        throw 'Could not fetch users';
      },
      success: function(results) {
        console.log('Initial fetch success');
      }
    });
  }
})

unfortunately, the tests don't wait for this connection to happen, and putting the test inside a db.on handler did not solve the issue as simply my tests were not recognised at all, and the script finished
how can I make mocha (actually in general javascript code) to wait to start some task?",nagyv,NONE,2012-02-17 01:13:37+00:00,True,2012-02-18 12:19:30+00:00,1.46,,3,5,2012-02-17 03:38:48+00:00,0.1,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
269,when using --watch if test has missing dependency watch dies,"If I run watch on the following and my node_modules havent been installed then watch dies. It would be good for it to notice the error and then wait for an update like nodemon
var mongoose = require(""mongoose"")
  , assert = require(""assert"");

describe('logging',function(){
  beforeEach(function(done){
    done;
  });

  describe('messages', function(){
    it('should push data into mongo', function(done){
      done()
    });
  });

  afterEach(function(done){
    done();
  });
});",AutomatedTester,NONE,2012-02-17 12:30:35+00:00,True,2015-03-07 22:18:27+00:00,1114.41,,2,1,2015-03-07 22:18:27+00:00,1114.41,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
270,browser - exceptions thrown in before/beforeEach are ignored,"I'm finding that exceptions thrown in my before/beforeEach blocks aren't being handled, it's simple enough to reproduce:
    mocha.setup('bdd');
    describe('testing the tests', function(){
        beforeEach(function(){ // also before(), 
            throw new Error('this should fail');
        });

        it('Works', function(){
        });
    });
    mocha.run();

This is on the most recent version, 0.12.1 on Chrome 17 and FireFox 10",spmason,CONTRIBUTOR,2012-02-17 15:16:20+00:00,True,2015-03-07 22:39:31+00:00,1114.31,,10,14,2012-02-20 10:37:12+00:00,2.81,weepy,NONE,0,3,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
273,"tty.getWindowSize() throwing Error: ENODEV, Operation not supported by device","I'm trying to run Mocha through a git pre-commit, spawned by make.
Running the pre-commit script manually works, but when I try to make a commit, and git runs the pre-commit I get the following error:
node.js:134
        throw e; // process.nextTick error, or 'error' event on first tick
        ^
Error: ENODEV, Operation not supported by device
    at Object.<anonymous> (...node_modules/mocha/lib/reporters/base.js:75:13)
    at Module._compile (module.js:404:26)
    at Object..js (module.js:410:10)
    at Module.load (module.js:336:31)
    at Function._load (module.js:297:12)
    at require (module.js:348:19)
    at Object.<anonymous> (...node_modules/mocha/lib/reporters/index.js:2:16)
    at Module._compile (module.js:404:26)
    at Object..js (module.js:410:10)
    at Module.load (module.js:336:31)
make: *** [test] Error 1
I need to set the width manually on line 71 of mocha/lib/reporters/base.js in order for the pre-commit to run:
exports.window = {
  width: 75
};",leisms,NONE,2012-02-20 07:13:49+00:00,True,2015-06-07 01:14:42+00:00,1202.75,,4,4,2012-02-20 15:15:29+00:00,0.33,rauchg,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
274,waitsFor work-a-like for jasmine converts who have been missing it,"I recently switched to mocha, and the one thing I missed was the waitsFor facility provided by Jasmine.
Much of the time, I find I'm better off using EventEmitter to achieve similar results. But there are times when it's just more straightforward to periodically check that a side-effect I'm expecting to occur has occurred.  My standalone waitsFor utility scratches that itch, and I thought some other mocha users might find it helpful too:
https://github.com/michaelsbradleyjr/waitsFor
I'm not sure it merits a mention on mocha's gh-pages site, but if it does that's fine too. :-)",michaelsbradleyjr,NONE,2012-02-22 05:45:21+00:00,True,2012-02-23 00:54:49+00:00,0.8,,3,7,2012-02-22 12:34:01+00:00,0.28,rauchg,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
276,highlight regex needs to be non-greedy for string,"in mocha.js
.replace(/('.*')/gm, '$1')
should be
.replace(/('.*?')/gm, '$1')",plessbd,NONE,2012-02-23 04:46:42+00:00,True,2015-03-07 22:46:31+00:00,1108.75,,3,2,2012-02-23 05:01:41+00:00,0.01,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
277,Set 'require' as a global and Mocha chokes,"I had an odd use case where I wanted to modify the require function to perform a poor man's dependency injection.
Something like this:
var _oldreq = global.require;
global.require = function(mod) {
  //if my module then return mocked functionality
  //else return expected modules
}
As expected, Mocha complains about require global leak. So I added require to my allowed globals and then Mocha crashes.",jprichardson,NONE,2012-02-23 05:07:08+00:00,True,2014-07-27 05:40:45+00:00,885.02,,2,1,2014-07-27 05:40:45+00:00,885.02,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
279,Syntax highlighting,,tj,CONTRIBUTOR,2012-02-24 04:42:36+00:00,True,2014-08-27 09:31:45+00:00,915.2,,3,3,2014-08-26 21:14:36+00:00,914.69,jbnicolai,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
280,Make coverage look better,still not totally happy with it but I didn't want to delay it just from me being picky,tj,CONTRIBUTOR,2012-02-24 04:43:03+00:00,True,2015-03-08 20:57:07+00:00,1108.68,,2,1,2015-03-08 20:57:07+00:00,1108.68,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
281,Code coverage for the client-side,"probably best to remove jade, use one of the really small template engines so we can have it on both ends, less cruft",tj,CONTRIBUTOR,2012-02-24 04:43:44+00:00,True,2015-07-10 04:06:23+00:00,1231.97,,19,20,2012-05-18 18:09:20+00:00,84.56,amatiasq,NONE,2,3,0,13,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
282,scrolling sidebar,if you have lots of files and a small screen this is no good,tj,CONTRIBUTOR,2012-02-24 04:46:15+00:00,True,2015-03-08 21:14:49+00:00,1108.69,,2,2,2015-03-08 20:52:30+00:00,1108.67,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
283,test cov docs,for setup since you can't (easily) do it transparently with node anymore,tj,CONTRIBUTOR,2012-02-24 04:50:31+00:00,True,2015-03-08 20:49:30+00:00,1108.67,,2,1,2015-03-08 20:49:30+00:00,1108.67,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
284,add SLOC missed in cov,,tj,CONTRIBUTOR,2012-02-24 05:56:52+00:00,True,2015-06-07 01:15:30+00:00,1198.8,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
285,"relative --require breaks on folders, shouldn't be necessary","I happened to have the ""should.js"" repo checked out in a folder called ""should.js"" of my cwd, and this broke the tests because it tried to load that instead of the ""should"" that was actually correctly placed in $NODE_PATH.
I'd argue if your dependencies are not in $NODE_PATH or already fully-qualified you're doing it wrong, so I think this feature should be taken out. But if it is to be left in, it should:

ignore directories
support ""modname/index.js"" style modules

But really, it should be unnecessary.",timbertson,NONE,2012-02-25 00:25:29+00:00,True,2015-03-14 19:46:36+00:00,1113.81,,2,1,2015-03-14 19:46:36+00:00,1113.81,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
289,remove hard dependency on growl for test suite,"Currently mocha's own tests won't run without growl, because the checked in test/mocha.opts includes --growl.
I could change the mocha.opts locally, but I don't like being stuck with outstanding changes. I could install growl, but it's a lot of effort (and I don't actually want it).
Perhaps the --growl option should have no effect (and print a warning) if require('growl') fails?",timbertson,NONE,2012-02-25 03:46:53+00:00,True,2012-06-25 16:36:10+00:00,121.53,,2,7,2012-03-02 01:36:23+00:00,5.91,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
290,suppress stdout from test cases,Something nice to have would be a way to silence the stdout from the tests themselves (not the reporters). That way if I have trace output in my program I can easily suppress it to see some nice test output :),defunctzombie,CONTRIBUTOR,2012-02-25 18:52:51+00:00,True,2012-02-25 22:07:26+00:00,0.14,,4,7,2012-02-25 22:04:36+00:00,0.13,tj,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
291,Mocha isn't running when installed locally...,"For some strange reason, mocha is deciding not to run when installed locally anymore... I have no clue why this is, and it only seems to happen on my iMac (works fine on my macbook).
Here's the log:
$ npm install mocha@0.13
npm http GET https://registry.npmjs.org/mocha
npm http 304 https://registry.npmjs.org/mocha
npm http GET https://registry.npmjs.org/commander
npm http GET https://registry.npmjs.org/growl
npm http GET https://registry.npmjs.org/jade/0.20.3
npm http GET https://registry.npmjs.org/debug
npm http 304 https://registry.npmjs.org/growl
npm http 304 https://registry.npmjs.org/debug
npm http 304 https://registry.npmjs.org/jade/0.20.3
npm http 304 https://registry.npmjs.org/commander
npm http GET https://registry.npmjs.org/mkdirp
npm http 304 https://registry.npmjs.org/mkdirp
mocha@0.13.0 ./node_modules/mocha 
├── growl@1.5.0
├── debug@0.5.0
├── commander@0.5.2
└── jade@0.20.3
$ npm install -g mocha@0.13
npm http GET https://registry.npmjs.org/mocha
npm http 304 https://registry.npmjs.org/mocha
npm http GET https://registry.npmjs.org/commander
npm http GET https://registry.npmjs.org/growl
npm http GET https://registry.npmjs.org/jade/0.20.3
npm http GET https://registry.npmjs.org/debug
npm http 304 https://registry.npmjs.org/commander
npm http 304 https://registry.npmjs.org/jade/0.20.3
npm http 304 https://registry.npmjs.org/growl
npm http 304 https://registry.npmjs.org/debug
npm http GET https://registry.npmjs.org/mkdirp
npm http 304 https://registry.npmjs.org/mkdirp
/Users/balupton/.nvm/v0.6.11/bin/mocha -> /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/bin/mocha
/Users/balupton/.nvm/v0.6.11/bin/_mocha -> /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/bin/_mocha
growl@1.5.0 /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/node_modules/growl 
debug@0.5.0 /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/node_modules/debug 
commander@0.5.2 /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/node_modules/commander 
mkdirp@0.3.0 /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/node_modules/jade/node_modules/mkdirp 
jade@0.20.3 /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha/node_modules/jade 
mocha@0.13.0 /Users/balupton/.nvm/v0.6.11/lib/node_modules/mocha
$ node ./node_modules/mocha/bin/mocha  --reporter spec  --ui bdd  --ignore-leaks  --growl
$ ./node_modules/mocha/bin/mocha  --reporter spec  --ui bdd  --ignore-leaks  --growl
$ mocha  --reporter spec  --ui bdd  --ignore-leaks  --growl


  versionCompare
    ✓ should detect 1.1.0 < 1.2.0 is true 
    ✓ should detect 1.2.0 > 1.1.0 is true 
    ✓ should detect 1.2.0 == 1.2.0 is true 
    ✓ should detect 1.2.0 <= 1.2.0 is true 
    ✓ should detect 1.2.0 >= 1.2.0 is true 
    ✓ should detect 1.2.0 < 1.2.1 is true 
    ✓ should detect 1.2.0 < 1.3.0 is true 
    ✓ should detect 1.1.0 >= 1.2.0 is false 
    ✓ should detect 1.2.0 <= 1.1.0 is false 
    ✓ should detect 1.2.0 <> 1.2.0 is false 
    ✓ should detect 1.2.0 > 1.2.0 is false 
    ✓ should detect 1.2.0 < 1.2.0 is false 
    ✓ should detect 1.2.0 >= 1.2.1 is false 
    ✓ should detect 1.2.0 >= 1.3.0 is false 

  packageCompare
    ◦ should run as expected: c^C$ 
$ node --version
v0.6.11
$ npm --version
1.1.1

Ran against the repository: https://github.com/balupton/bal-util.npm",balupton,NONE,2012-02-26 07:28:57+00:00,True,2012-04-02 15:32:20+00:00,36.34,,10,13,2012-03-04 22:07:19+00:00,7.61,emostar,NONE,0,3,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
293,What version of jscoverage are you using?,"(and from where?)
jscoverage 0.5.1 from Homebrew seems to be generating wildly different markup than the version you're using.  An example line is:
<span class=""k"">var</span> dgram <span class=""k"">=</span> require<span class=""k"">(</span><span class=""s"">""dgram""</span><span class=""k"">);</span>
npm install jscoverage attempted to install an 0.0.6 version of https://github.com/sunfang1cn/node-jscoverage, but compilation failed in the process.",mojodna,NONE,2012-02-26 21:01:00+00:00,True,2012-06-17 03:04:12+00:00,111.25,,4,5,2012-02-27 14:13:52+00:00,0.72,alfredwesterveld,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
294,Ability to configure passed/failed checkmarks for the spec reporter,"Currently, the checkmarks for passed/failed tests are hardcoded, and on some systems (Windows in terminal, etc), those symbols are just not available, hence all I see is an empty square symbols.
It would be great if it was possible to configure the checkmarks and we could use things like ""+"" for passed and ""!"" for failed.
Update: This is at least for the spec output (spec.js and base.js).",vvs,NONE,2012-02-27 11:25:30+00:00,True,2012-06-17 03:04:12+00:00,110.65,,3,8,2012-03-02 01:32:58+00:00,3.59,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
295,Guide for setup Mocha with Node.js on TeamCity,"Hello
Is there any good guide to setup continuous integration process for running Mocha tests with node.js on TeacmCity ,
I've tried to play a lot with different reporters, but seems TeamCity doesn't understand the output of tests and no showing number of passed/failed tests
I'm using latest Mocha instaled with npm and TeamCity 6.5.5",eshepelyuk,NONE,2012-02-27 11:29:44+00:00,True,2012-02-27 18:59:16+00:00,0.31,,2,5,2012-02-27 16:18:15+00:00,0.2,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
296,Unshift a path to require.paths --include option,Is there a way to do this in mocha? I have a bunch of expresso tests that I am migrating over to mocha which used the --include option to shift the paths so that you could do var helper = require('lib/helpers/some_helper'). With mocha I now have to do var helper = require('../../lib/helpers/date_helper').,thadclay,NONE,2012-02-27 20:36:46+00:00,True,2012-02-28 02:12:33+00:00,0.23,,2,1,2012-02-28 02:12:33+00:00,0.23,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
297,Incorrect Mocha Global Error,"http://stringjs.com/browser.test.html

This works in Safari 5.1.3 (OS X 10.7.3)
It fails in Chrome 17.0.9 (OS X 10.7.3)
Looks ugly in Firefox, but if I recall reading, Mocha only supports Webkit browsers.

Any thoughts on the Chrome/Safari discrepancy?",jprichardson,NONE,2012-02-27 20:48:10+00:00,True,2012-02-28 15:56:52+00:00,0.8,,3,8,2012-02-28 02:13:04+00:00,0.23,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
298,emacs temporary files causing mocha to throw exception,"I use emacs (crazy, I know) and have run into an issue where the temporary symbolic links automatically created by emacs when I'm modifying a file (they go away after a save operation) cause mocha to throw an exception.
Suppose I start editing mytest.js in myPackage/test, and then I invoke mocha in the terminal prior to saving the file.  I'll get the following:
node.js:201
        throw e; // process.nextTick error, or 'error' event on first tick
              ^
Error: Cannot find module '/path/to/myPackage/test/.#mytest.js'
    at Function._resolveFilename (module.js:332:11)
    at Function._load (module.js:279:25)
    at Module.require (module.js:354:17)
    at require (module.js:370:17)
    at /Users/michael/.nvm/v0.6.11/lib/node_modules/mocha/bin/_mocha:237:27
    at Array.forEach (native)
    at load (/Users/michael/.nvm/v0.6.11/lib/node_modules/mocha/bin/_mocha:234:9)
    at Object.<anonymous> (/Users/michael/.nvm/v0.6.11/lib/node_modules/mocha/bin/_mocha:225:1)
    at Module._compile (module.js:441:26)
    at Object..js (module.js:459:10)
    at Module.load (module.js:348:31)
    at Function._load (module.js:308:12)
    at Array.0 (module.js:479:10)
    at EventEmitter._tickCallback (node.js:192:40)

Relevant information: Why does emacs create temporary symbolic links for modified files?
One ""solution"" is to never invoke mocha until I've saved my changes. However, that doesn't work well if I'm using the ""watch"" option.
A better solution would be for Mocha to ignore these kinds of symbolic links, which I think can be detected with a combination of fs.stat and looking for error code ENOENT.
I can start poking at Mocha's source to see if I can provide a patch, but I was hoping it might be something that the author or another contributor knows how to fix quickly without a lot of r&d.",michaelsbradleyjr,NONE,2012-02-27 20:51:14+00:00,True,2012-06-17 03:04:12+00:00,110.26,,2,8,2012-02-27 22:54:26+00:00,0.09,michaelsbradleyjr,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
299,diff: newlines / spaces,do not report nicely,tj,CONTRIBUTOR,2012-03-02 01:31:43+00:00,True,2012-09-19 16:09:28+00:00,201.61,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
300,this.timeout in before/beforeEach throws error,"Trying to specify the timeout for a before/beforeEach doesn't currently work using this.timeout()
describe('broken before timeout', function() {
  before(function() {
    this.timeout(4000)
    setTimeout(function() {
      done()
    }, 3000)
  })
})
Yields:

  ✖ 1 of 0 tests failed:

  1) broken before timeout ""before all"" hook:
     TypeError: Cannot call method 'timeout' of undefined
      at Context.timeout (/usr/local/lib/node_modules/mocha/lib/context.js:38:14)
      ...",timoxley,NONE,2012-03-02 01:48:05+00:00,True,2012-06-19 05:05:42+00:00,109.14,,5,7,2012-03-08 01:44:25+00:00,6.0,jephir,NONE,0,2,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
302,Browser example should not use github hosted css,"The documentation for the browser example shows mocha.css being loaded from github. Unfortunately, github serves this file as text/plain and Chrome does not apply this as a stylesheet. I think Firefox has the same behavior, although I didn't test. The documentation should be amended to use a local version of the css file.",jlporter,NONE,2012-03-03 19:21:58+00:00,True,2012-03-04 20:03:36+00:00,1.03,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
303,--growl not notifying,"Hi,
Im very new to node and linux in general but cant for the life of me get --growl to show notifications when my test suite is running.
Here is the command line im using to run the suite.
mocha -r should -G -w
And the suite runs fine with changes, but no growl notifications.
I can confirm the following...

Notify-send is working on my system.
I can require growl in a node session if I specify the full path to the growl package that is sitting in mocha.
Mocha is installed globally.

Have I missed something or is there a bug here that Im not aware of?
Thanks for the help.",meboz,NONE,2012-03-05 02:32:16+00:00,True,2012-03-05 11:32:04+00:00,0.37,,1,1,2012-03-05 11:32:04+00:00,0.37,meboz,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
304,json-cov reporter should not print report to stdout,"Hi,
When running mocha --reporter json-cov, the coverage report is printed to process.stdout.
The consequence is that logs are mixed with the JSON coverage report. We are not using html-cov.
This forces us to parse stdout content and separate logs fron the JSON report. It's dirty coding and pretty much unreliable.
Mocha could take an extra parameter like --file <fileName> so that we can separate logs from reports.
Thanks,

Nicolas",nherment,NONE,2012-03-05 13:05:21+00:00,True,2012-06-21 15:24:49+00:00,108.1,,4,14,2012-03-05 16:10:05+00:00,0.13,tj,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
306,Fix --watch spinner,looks a little funky once errors etc start outputting,tj,CONTRIBUTOR,2012-03-06 21:36:02+00:00,True,2015-03-14 19:54:21+00:00,1102.93,,2,1,2015-03-14 19:54:21+00:00,1102.93,danielstjules,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
307,Browser support not expose a require function,"Hello,
I wanted to try browser support of mocha and follow the example from that page (http://visionmedia.github.com/mocha/ )
including mocha.js and mocha.css but I had this error ""require is not defined""
May I miss something  ?
Lionel
ps : Of course, thank you for mocha it's a great tool!",lionelB,NONE,2012-03-09 00:03:32+00:00,True,2012-03-10 12:15:52+00:00,1.51,,3,4,2012-03-09 00:08:41+00:00,0.0,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
309,Do suites running in parallel cause timing issues with the event emitter?,"Let's assume you've got a singleton that you want to test.
You write several tests, and since you have different scenarios of test cases, you split them using suites.
Now today we've had the effect that one of these tests blew up with a ""done called multiple times"" error.
Actually, we've tackled it down to an eventing problem (event in the sense of event emitter):

In both tests we subscribed to an event using once
Due to the fact that tests in different suites seem to run in parallel, it is not guaranteed that the test that causes raising the event is the (only) one whose on function is called when the event is raised - even if you use once to subscribe to the event
This possibly results in event handlers called in the context of another test, which means this test's done function gets called multiple times

Apparently it's a timing issue.
One might argue that it's wrong to use a singleton here, but I think that besides our problem today several other people might have this problem as well.
One possible solution would be to run all tests serialized, or to run each test in a single process.
What do you think about this issue, and the possible solutions?
Is there a recommended way to resolve it (i.e. did we do anything wrong), or might it be a viable improvement?",goloroden,NONE,2012-03-09 12:38:56+00:00,True,2012-03-12 15:38:45+00:00,3.12,,2,2,2012-03-10 19:37:37+00:00,1.29,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
310,BDD vs TDD: setup and teardown,"Is there a special reason why BDD style supports

before
beforeEach
after
afterEach

but TDD only supports

setup
teardown

?",goloroden,NONE,2012-03-09 12:41:43+00:00,True,2012-06-17 03:04:12+00:00,99.6,,15,19,2012-03-10 19:37:05+00:00,1.29,tj,CONTRIBUTOR,0,3,0,12,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
311,mocha/test/browser/index.html doesn’t work properly in Firefox 10,"Hello,
For the unknown reason first browser tests from mocha/test/browser/index.html fail in Firefox 10.0.2.
All tests pass as expected in Chrome.
Best wishes,
Denis",gamtiq,NONE,2012-03-11 16:38:46+00:00,True,2012-03-24 17:26:41+00:00,13.03,,3,4,2012-03-11 18:54:03+00:00,0.09,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
313,forum,can you please create a forum where people can ask questions about mocha?  a google group maybe?,ehartford,NONE,2012-03-13 20:54:33+00:00,True,2012-05-02 16:09:10+00:00,49.8,,3,3,2012-03-13 23:56:01+00:00,0.13,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
316,"Error message masked in async hook when thrown after done() already called ""successfully""","I have an interesting situation where my async beforeEach thinks it's completed successfully, so I call done(). But, in reality an async loader issue ultimately threw an error. Due to the check for multiple calls to done, the error message (of the second call to done) is masked.
Details:
I am running mocha (latest) in node, but testing modules written for requirejs.
There is an interesting situation where you can require a module which has async module requirements embedded inside it. Something like:
first/module:
define [], ->
  require ['some/module'], (someModule) ->
  return {}
If the nested require fails (for instance, the module is not found), an error is thrown -- but not before the original requestor of first/module was given the {} object.
In this case, it is easy for the original requestor to think that all is well and call done(). Then, the exception is thrown by requirejs and ultimately done(err) is called via your runnable.js
Possible solution:
Without a comprehensive study of the impact of such a change, the following modification appropriately fixes the issue for me.
Replacing this line with
if (finished) return err ? fn(err) : multiple();",JamesMaroney,NONE,2012-03-14 03:34:39+00:00,True,2012-06-17 03:04:12+00:00,94.98,,4,4,2012-04-13 15:58:46+00:00,30.52,domenic,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
321,Mocha doesn't execute async tests in order?,"How can I execute async tests in order?  i.e. I want the second test to begin only after the first tests had called done().
I have tried putting the second test in an 'after' call, but this has not helped.
http://stackoverflow.com/questions/9736429/how-can-i-execute-async-mocha-tests-nodejs-in-order
Thanks,
Chris.",chrisdew,NONE,2012-03-16 11:43:51+00:00,True,2012-03-16 15:33:25+00:00,0.16,,2,2,2012-03-16 15:33:25+00:00,0.16,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
322,CoffeeScript class in BeforeEach block,"Hi.
If I specify a CoffeeScript class in a beforeEach block, I can't create instances in examples.
describe 'Example', ->
  beforeEach ->
    class Example
  it 'does something', ->
    new Example # ReferenceError: Example is not defined
  it 'does something else', ->
    new Example # ReferenceError: Example is not defined

What is the reason of this issue? How can I sort it out?
CoffeeScript 1.2.0;
Mocha 0.12.1.",Shamaoke,NONE,2012-03-16 12:24:50+00:00,True,2012-03-16 15:31:26+00:00,0.13,,2,1,2012-03-16 15:31:26+00:00,0.13,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
323,Add arbitrary reporter support to js api,currently just takes the name,tj,CONTRIBUTOR,2012-03-16 17:18:50+00:00,True,2015-06-07 01:17:13+00:00,1177.33,,4,6,2012-06-27 22:30:16+00:00,103.22,Bartvds,NONE,0,1,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
324,Add arbitrary UI support to js api,current takes a name only,tj,CONTRIBUTOR,2012-03-16 17:19:03+00:00,True,2015-06-07 01:17:41+00:00,1177.33,,2,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
325,Add better grep() support to js api,string or regexp,tj,CONTRIBUTOR,2012-03-16 17:19:17+00:00,True,2015-03-07 22:55:00+00:00,1086.23,,3,3,2012-04-10 01:29:09+00:00,24.34,davemckenna01,CONTRIBUTOR,0,3,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
326,Use js api with executable,,tj,CONTRIBUTOR,2012-03-16 17:19:30+00:00,True,2015-06-07 01:17:58+00:00,1177.33,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
327,Add js API docs,,tj,CONTRIBUTOR,2012-03-16 17:19:41+00:00,True,2015-07-12 04:20:00+00:00,1212.46,,2,1,2015-07-12 04:20:00+00:00,1212.46,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
328,make client-side js api match SS,,tj,CONTRIBUTOR,2012-03-16 17:19:58+00:00,True,2015-07-12 04:17:22+00:00,1212.46,,2,1,2015-07-12 04:17:22+00:00,1212.46,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
330,IE8<=fails because of the indexOf method,"It fails in this line:
// FF / Opera do not add the message
if (!~str.indexOf(test.err.message)) {
    str = test.err.message + '\n' + str;
}",satazor,NONE,2012-03-17 19:20:25+00:00,True,2012-03-24 17:30:38+00:00,6.92,,3,10,2012-03-17 20:02:49+00:00,0.03,tj,CONTRIBUTOR,0,2,0,1,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
332,skip suite and test without failing,"I would like some function like skipTest() and skipSuite() that would allow me to skip a test or suite without failing it.
If you are in suiteSetup() then you could skip the suite
if you are in test() then you could skip the rest of the suite or the test
if you are in setup() then you could skip the rest of the suite or the test
if you are in tearDown() then you could skip rest of the suite
if you are in suiteTearDown() then you could not skip either",ehartford,NONE,2012-03-19 22:04:50+00:00,True,2015-02-03 20:03:55+00:00,1050.92,,28,72,2012-05-02 11:17:22+00:00,43.55,Almad,NONE,1,10,0,17,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
333,Output gets cut off if piped into another application,"If I run my Mocha tests directly from the command line, they run fine, and the output displays with no problems. But if I try to pipe Mocha's output to another program, the output doesn't all get there; only the beginning of the output ever makes it into the pipe.
I've seen this in several manifestations, but it's easy to reproduce just from the command line. I've reproduced this on two different computers, both running 64-bit Windows 7, the latest version of Node.js installed from the Web site, and the latest Mocha installed with npm install -g mocha.
If I create a file with just one test in it:
it('works', function() {});

and run it from the command line, I see the expected output:
C:\Temp>mocha test.js

  .

  ✔ 1 tests complete (2ms)


C:\Temp>

But if I pipe its output into any other tool, even something as simple as more, then Mocha's output is cut off. I only see the line of dots -- sometimes not even that. The summary line isn't shown.
C:\Temp>mocha test.js | more

  .

C:\Temp>

If there are failing tests, and you run STDERR through a pipe, then the test-failure information will be cut off:
C:\Temp>mocha fail.js 2>&1 | more

  .  Γ£û 1 of 1 tests failed:


C:\Temp>

I've also seen this behavior when running Mocha from my text editor (Sublime Text 2) and capturing the output into an output window (the output doesn't all appear); and when writing Node.js code that shells out to Mocha (using child_process.exec) and captures its STDOUT and STDERR (the output doesn't all get sent). I haven't seen any other app cutting off its output like this in any of these circumstances, but Mocha does it every time its output is a pipe.",joewhite,NONE,2012-03-19 23:19:52+00:00,True,2015-06-07 01:21:13+00:00,1174.08,,19,62,2012-03-19 23:31:19+00:00,0.01,tj,CONTRIBUTOR,1,5,0,13,"['confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
334,"""ssertionError"" should be AssertionError","I think this is a Mocha bug, but it may be in Node's assertion module.
Many failing tests show ssertionError instead of AssertionError.
Steps to reproduce:
Write a failing test such as:
assert.equal 4, 2

Output:
ssertionError: 4 == 2

Expected output:
AssertionError: 4 == 2

Also:

Why does it say ""4 == 2""? It should say that ""4 != 2"".",topfunky,NONE,2012-03-20 21:21:30+00:00,True,2012-03-20 21:36:38+00:00,0.01,,2,3,2012-03-20 21:24:35+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
336,access to test status in tearDown() and suiteTearDown(),"in tearDown() and suiteTearDown() I am not seeing any way to access 1) list of passed tests 2) list of failed tests 3) list of skipped tests.
I would like my teardown logic to react to whether there were failures.",ehartford,NONE,2012-03-21 16:45:57+00:00,True,2015-03-08 22:40:02+00:00,1082.25,,3,9,2012-03-21 16:51:59+00:00,0.0,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
340,Show number of pending tests,"In the summary at the end of a successful test run, Mocha tells me how many tests there were. If some of those tests were pending tests (i.e., no callback passed to it()), there's nothing to distinguish between passing tests and tests that I haven't finished writing yet. If I sketched out a bunch of pending tests and haven't filled them all in yet, it would be easy for me to forget about them (especially since the light blue dot in the default runner is hard to distinguish from the gray dots, at least on Windows).
It would be helpful if the end-of-test-run summary mentioned how many pending tests there were. Maybe something like ""6 tests complete (2 ignored) (57ms)"", or maybe a separate line showing the number of ignored/pending tests.",joewhite,NONE,2012-03-22 19:20:57+00:00,True,2012-04-11 20:49:52+00:00,20.06,,3,2,2012-04-10 02:40:01+00:00,18.3,adomokos,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
341,Can't change test directory,"The documentation on the main page says that ""By default mocha(1) will use the pattern ./test/*.js, so it's usually a good place to put your tests"", which seems to imply that this pattern could be changed.  The documentation doesn't show any way to do this (shouldn't this be a command line option?) and the code that seems related to this area doesn't clarify much.",JosephJNK,NONE,2012-03-23 01:44:31+00:00,True,2012-03-23 15:55:12+00:00,0.59,,4,5,2012-03-23 01:51:53+00:00,0.01,leadVisionary,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
344,browser support broken,"I was hot linking to mocha.js and after this commit mocha is throwing an exception on load.
ReferenceError: Can't find variable: __dirname",ryanfitz,NONE,2012-03-23 23:49:54+00:00,True,2012-03-24 17:27:27+00:00,0.73,,3,4,2012-03-23 23:54:33+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
347,Should.not.exist doesn't work,"Using Mocha 1.0 I've got a line which looks like ""should.not.exist(user)"" but when I run mocha I get an error:
TypeError: Object # has no method 'exist'
I'm running mocha like this: mocha --require should test/*/.js
I've got the following line right before and it doesn't give any error:
err.should.be.instanceof(Error)
What am I missing?",marlun,NONE,2012-03-24 23:38:40+00:00,True,2012-03-27 21:42:54+00:00,2.92,,3,6,2012-03-27 08:12:23+00:00,2.36,kilianc,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
350,Lazily execute beforeAll/afterAll code blocks (with grep),"When using grep, I would like only the beforeAll/afterAll blocks needed by tests matching my grep to be executed.
Currently all beforeAll and afterAll callbacks get executed, regardless of whether any tests being run depend on them.
If you have a large test suite that uses beforeAll blocks to consolidate expensive setup, using grep to isolate a test may not speed up the run all that much because of this.
In the following example, when running mocha --grep Files I would expect ""expensive setup needed for Database suite"" not to be executed.
describe(""Database"", function() {
    beforeAll(function() {
        // expensive setup needed for Database suite
    });
    ...
});

describe(""File"", function() {
    beforeAll(function() {
        // expensive setup needed for File suite
    });
    ...
});",nonplus,NONE,2012-03-27 17:31:04+00:00,True,2012-06-17 03:04:10+00:00,81.4,,3,4,2012-03-27 17:35:50+00:00,0.0,guybrush,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
354,generate menu for docs,getting to be long now,tj,CONTRIBUTOR,2012-03-30 14:24:17+00:00,True,2015-03-14 20:01:03+00:00,1079.23,,2,1,2015-03-14 20:01:03+00:00,1079.23,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
355,this.timeout(ms) does not work in hooks,Set this.timeout(30000) in a global beforeEach hook and it still times out at 2000ms.,secobarbital,NONE,2012-03-30 18:31:07+00:00,True,2012-03-30 20:08:29+00:00,0.07,,2,1,2012-03-30 20:08:29+00:00,0.07,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
358,"Segmentation faults, stderr and exit code","I'm using mocha to test a C++ addon for node.js, and sometimes the C++ side of things is causing segmentation faults.
If usage of the addon is wrapped in a child proces, e.g. with child_process.exec, the segfault results in ""Segmentation fault"" messages being sent to the child's stderr and the child's exit code is something other than 0 (e.g. 139 in my linux env).
In the context of mocha, the messages to stderr are getting swallowed and the segfault results in the mocha process
exiting with status code 0.
Any thoughts on whether mocha could be adapted to pass on the messages to stderr and close with a non-zero exit code in the event of a segfault?",michaelsbradleyjr,NONE,2012-03-31 21:08:16+00:00,True,2015-03-15 03:02:18+00:00,1078.25,,2,1,2015-03-15 03:02:18+00:00,1078.25,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
360,at <error: TypeError: Object #<error> has no method '__lookupGetter__'>,"If an exception is thrown during test execution, the stack trace frequently contains the line at <error: TypeError: Object #<error> has no method '__lookupGetter__'>.
An example stack trace:
1) Sending something should work:
    ReferenceError: callback is not defined
     at <error: TypeError: Object #<error> has no method '__lookupGetter__'>
     at <error: TypeError: Object #<error> has no method '__lookupGetter__'>
     at <error: TypeError: Object #<error> has no method '__lookupGetter__'>
     at <error: TypeError: Object #<error> has no method '__lookupGetter__'>
     at <error: TypeError: Object #<error> has no method '__lookupGetter__'>
     at /home/user/project/src/server/Database.js:50:15
     at Query.<anonymous> (/home/user/project/node_modules/mysql/lib/client.js:106:11)
     at Query.emit (events.js:67:17)
     at Query._handlePacket (/home/user/project/node_modules/mysql/lib/query.js:29:12)
     at Client._handlePacket (/home/user/project/node_modules/mysql/lib/client.js:319:14)
     at Parser.<anonymous> (native)
     at Parser.emit (events.js:67:17)
     at /home/user/project/node_modules/mysql/lib/parser.js:71:14
     at Parser.write (/home/user/project/node_modules/mysql/lib/parser.js:576:7)
     at Socket.<anonymous> (native)
     at Socket.emit (events.js:67:17)
     at TCP.onread (net.js:347:14)

If anyone familiar with the project has an inkling what's going on I'd love a nudge for where to go look and fix this.
Cheers!
Marcus",marcuswestin,NONE,2012-04-01 23:12:19+00:00,True,2012-04-09 17:24:29+00:00,7.76,,2,2,2012-04-09 17:08:53+00:00,7.75,davemckenna01,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
361,HTML Reporter does not report all errors,"First off, thanks for Mocha, I have been using it over jasmine for my node projects for awhile now.
I just started to need it for a major new project that lives in the client side and I noticed that the HTML reporter does not seem to be reporting all of the errors.
For example when referencing a variable that does not exist, etc...
After digging into it I found that these errors are actually thrown but are not marked as ""uncaught"" see: https://github.com/visionmedia/mocha/blob/master/lib/reporters/html.js#L81
Might suggest a deeper problem.
I was testing in Safari 5.1.4 and Firefox Aurora (latest).
I will try to dig into it and submit a pull request...",lightsofapollo,CONTRIBUTOR,2012-04-02 02:53:22+00:00,True,2012-04-04 19:06:32+00:00,2.68,,3,7,2012-04-02 15:31:38+00:00,0.53,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
362,Deferred execution,"Hey TJ,
Spent the afternoon improving the unit tests for DocPad, but spent about 6 hours tumbling down the rabbit hole of weirdness.
The first issue I came across, is without line 14 in my plugins.test.coffee file, mocha exits absolutely instantly, not good.
The second issue is a bit more complicated, let's now start doing the test, in the same file we hit line 33 which fires another describe for the pluginName, then we continue to call the plugin tester's test function which is all fine and good, however the describes and tests for testLoaded and testGeneration are no longer grouped under the pluginName, although the initial taskCreation is grouped under the pluginName - go figure?!?!
It seems to me that mocha tries to be a lot smarter than it actually is, in terms of predicting when our tests or test suites have actually finished - and it is failing quite miserably in my use cases.
It seems the only solution to this is to create an interface such as:
// Using Total
// tests fire instantly, and when total is hit, then we are done
// the total is set manually at the start by the user
describe('my plugin',function(desc){
    desc.total = 2;
    desc.it('should know 5*5',function(test){
        assert.equal(25,5*5);
        test.done();
    });
    desc.it('should know 5*10',function(test){
        assert.equal(50,5*10);
        test.done();
    });
});

// Using Push
// tests are appended to a queue, and then fired at the end via a sync or async call
// the total is calculated automatically by the queue length
describe('my plugin',function(desc){
    desc.it('should know 5*5',function(test){
        assert.equal(25,5*5);
        test.done();
    });
    desc.it('should know 5*10',function(test){
        assert.equal(50,5*10);
        test.done();
    });
    desc.async();
    // or for sync: desc.sync();
});
that way you always have the correct hierarchy, and will always know exactly when all the children have finished. In DocPad and my other work, we use this paradigm all the time with balUtil's Groups.
What are your thoughts?
Update: Not sure if this will ever make it into Mocha, so I created Joe, which works really really well.",balupton,NONE,2012-04-04 15:46:11+00:00,True,2015-02-16 10:07:00+00:00,1047.76,,15,22,2012-04-04 16:01:34+00:00,0.01,tj,CONTRIBUTOR,1,2,0,12,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
363,DOCS: Sample code for globals ignore flag in browser is incorrect,"In the ""Browser support"" section of the docs, the sample code snippet says:
mocha
.globals(['foo', 'bar']) // acceptable globals
.run()
But this doesn't actually work - acceptable globals are defined as part of mocha.setup(), there is no .globals() function as far as I can see",kevindente,NONE,2012-04-04 21:04:22+00:00,True,2012-04-04 21:18:24+00:00,0.01,,2,2,2012-04-04 21:18:16+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
364,custom fail info display support,"Is it possible to make the Runner accessible in test suite definations, so we write things like this:
runner.on('fail', function() {
   console.log(browser.html());
})
to do the same thing on every possible failure.",ktmud,NONE,2012-04-05 08:16:56+00:00,True,2012-06-17 03:04:10+00:00,72.78,,2,2,2012-04-05 15:59:57+00:00,0.32,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
365,globals,"Hi,
Is it possible to run tests individually, for example, if test/a.coffee sets a global, then it isn't defined in an other test/b.coffee.
Also, I see in the doc we could defined --globals, but where to defined them so they are shared across tests?
Thank you",abernier,NONE,2012-04-06 13:48:49+00:00,True,2012-06-17 03:04:10+00:00,71.55,,3,3,2012-04-06 15:50:50+00:00,0.08,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
366,Add tags for 1.0.0 and 1.0.1,"Could you please push tags for the 1.x releases?
git tag 1.0.0 1b9a427
git tag 1.0.1 10471eb

Tags are helpful for us downstream (Konacha).",joliss,CONTRIBUTOR,2012-04-07 20:13:12+00:00,True,2012-04-08 22:41:37+00:00,1.1,,2,3,2012-04-08 18:04:52+00:00,0.91,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
367,Double test execution,"An example of the test and the hack necessary to work around the issue can be found here.
Basically, one of my test functions is being called twice in a row without the before function being called in between the two executions. Not sure why this is. I was running my tests with the command ""mocha -r should"".",sgoodwin,NONE,2012-04-07 23:36:05+00:00,True,2012-04-09 23:45:18+00:00,2.01,,2,2,2012-04-09 18:39:55+00:00,1.79,nicholasbs,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
369,--require doesn't support non-js langs,"1.0.1, flags: --compilers coffee:coffee-script --require test/common.coffee --colors
mocha tells it's error in test/common.coffee syntax. If I use common.js file everything works",paulmillr,CONTRIBUTOR,2012-04-10 00:33:44+00:00,True,2013-06-26 17:20:48+00:00,442.7,,5,10,2012-04-10 01:31:17+00:00,0.04,domenic,CONTRIBUTOR,0,4,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
372, HTML: TypeError: Cannot call method 'appendChild' of undefined,when using ?grep,tj,CONTRIBUTOR,2012-04-10 19:58:51+00:00,True,2012-04-10 20:08:47+00:00,0.01,,1,0,,,,,0,0,0,0,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
375,Browser should show if a test is slow,"Currently, there is no warning when tests ran from the browser exceed the slow threshold.",antoviaque,CONTRIBUTOR,2012-04-10 20:48:33+00:00,True,2012-04-10 21:58:08+00:00,0.05,,1,1,2012-04-10 21:58:08+00:00,0.05,antoviaque,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
378,Change the color of growl notification when a test is slow/medium,"To allow to spot from the growl notification when a test is slow, change the color of the check mark. The slowest test is used for the color:

If all tests are fast, check mark is green
If at least one test is medium and none is slow, check mark is yellow
If at least one test is slow, check mark is red",antoviaque,CONTRIBUTOR,2012-04-10 22:49:29+00:00,True,2012-04-13 22:17:41+00:00,2.98,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
380,Firefox reports a global leak if firebug console is not open,"The following error only occurs if the firebug console is not active. If we do open it (making it active) the error disappears.
global leak detected: getInterface
([object Object])@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3113
([object Object])@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3028
(""test end"",[object Object])@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:235
()@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3334
((function (err) {test = self.test;if (err) {self.fail(test, err);self.emit(""test end"", test);return self.hookUp(""afterEach"", next);}test.state = ""passed"";self.emit(""pass"", test);self.emit(""test end"", test);self.hookUp(""afterEach"", next);}))@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:2977
((function (err) {test = self.test;if (err) {self.fail(test, err);self.emit(""test end"", test);return self.hookUp(""afterEach"", next);}test.state = ""passed"";self.emit(""pass"", test);self.emit(""test end"", test);self.hookUp(""afterEach"", next);}))@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3279
()@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3323
next((void 0))@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3207
()@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3216
next(0)@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3166
()@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3184
([object MessageEvent])@file:///C:/wamp/www/Trinity/Classify/vendor/mocha/mocha.js:3999",satazor,NONE,2012-04-12 09:18:26+00:00,True,2012-04-14 01:27:05+00:00,1.67,,5,14,2012-04-12 09:27:39+00:00,0.01,satazor,NONE,0,2,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
382,Unexpected behavior with async code in beforeEach,"Consider the setup in the following minimal gist: https://gist.github.com/2378684
I would expect, instead of
Outer beforeEach
Inner beforeEach A
Inner A
Inner beforeEach B
Inner B
Outer beforeEach

to see
Inner beforeEach A
Inner A
Outer beforeEach
Inner beforeEach B
Inner B
Outer beforeEach

i.e. the same behavior for both the first and the second tests.

Furthermore, strangely enough, use process.nextTick instead of setTimeout(..., 0) results in
Outer beforeEach
Inner beforeEach A
Inner A
Outer beforeEach
Inner beforeEach B
Inner B

that is, process.nextTick is not a satisfactory way of delaying outer beforeEach blocks until after inner ones run.",domenic,CONTRIBUTOR,2012-04-13 17:45:46+00:00,True,2012-06-17 03:04:10+00:00,64.39,,3,18,2012-04-13 17:48:43+00:00,0.0,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
384,Ability to filter test results in HTML,"QUnit has a very useful feature, which allows to hide passed test results, which is very handy to identify failed results. Would be good to add this possibility when looking at the HTML results - it would allow to switch between all results and only failed or passed ones, without re-running the whole test suite.",antoviaque,CONTRIBUTOR,2012-04-13 22:05:21+00:00,True,2012-04-13 22:16:27+00:00,0.01,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
385,mocha.css is duplicated,"The Makefile creates a mocha.css in the project root by copying /test/browser/style.css, but this isn't used anywhere.  What is the purpose of this?  Can it be removed to reduce the duplicated code?",brendannee,CONTRIBUTOR,2012-04-13 22:13:17+00:00,True,2012-04-13 23:15:06+00:00,0.04,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
388,Watch not working on Ubuntu 11.10,I run mocha test/exampleTest.js --watch and change exampleTest.js and the test is not run.,shwaydogg,NONE,2012-04-13 22:50:58+00:00,True,2012-04-14 20:05:44+00:00,0.89,,1,1,2012-04-14 20:05:44+00:00,0.89,shwaydogg,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
390,Mocha vs Node,"I am using RequireJS to define and load modules in my project. I am also trying to use it to build a test suite: the main test script will load a bunch of other scripts that call describe(). I have minimized the pattern in this gist. When run with Node, the main test script will load everything properly as evidenced by the logging statements. When run with mocha, however, I get this error:
Error: Calling node's require(""one"") failed with error: Error: Cannot find module 'one'

The backtrace cites a single line from my script:
var one = requirejs(""./one"");

Can anyone help?",thejohnfreeman,NONE,2012-04-15 21:50:34+00:00,True,2012-04-16 16:20:45+00:00,0.77,,1,2,2012-04-16 15:42:47+00:00,0.74,thejohnfreeman,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
391,Mocha fails to report issues during module loading,"My library is split into modules. I try to write tests for specific modules. When using RequireJS to load those modules, an error must be occurring, preventing the test suite from running, but Mocha does not report the issue. I could write a test case if anyone is taking these issues seriously.",thejohnfreeman,NONE,2012-04-16 18:47:12+00:00,True,2012-06-17 03:04:09+00:00,61.35,,2,4,2012-04-16 21:02:06+00:00,0.09,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
393,Weird test loop problem,"Hi,
I'm having a weird problem which may or may be not a real problem, for some reason my test executes its content multiple times.
This is getting executed like 100 times:
https://github.com/tbergeron/ThinAir/blob/4a1e78731f2e72aa590cc36503d09aba440112cc/modules/app/repositories/Projects.js#L37
By this test:
var Projects = require('../modules/app/repositories/Projects')
var newProject = { name: ""TEST_PROJECT"" };

describe('Projects', function() {
  describe('#save()', function() {
    it('should save without error', function(done) {

      Projects.save(newProject, function(project, errors) {
        if (errors) throw errors;
        done();
      });

    });
  });

});
Source: https://github.com/tbergeron/ThinAir/blob/4a1e78731f2e72aa590cc36503d09aba440112cc/test/projects.js#L11
But the test executes only once... Any idea? It may be a really stupid error from myself, but I can't seem to find what's wrong.
Thanks!",tbergeron,NONE,2012-04-18 20:24:00+00:00,True,2012-04-22 18:30:32+00:00,3.92,,2,1,2012-04-18 22:32:13+00:00,0.09,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
395,source-level qunit compatibility,It would have the good property of making it attractive for projects currently using QUnit to migrate over to Mocha without having to run two separate harnesses or do a big test re-write.,dmose,NONE,2012-04-19 18:30:43+00:00,True,2012-06-17 03:04:09+00:00,58.36,,2,5,2012-04-19 18:32:50+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
396,Add `specify` as a synonym for `it` in BDD interface,"Apparently this is in RSpec, as per a blog post I read. It does seem nice in some cases. Yes/no?",domenic,CONTRIBUTOR,2012-04-21 19:52:14+00:00,True,2012-06-14 17:18:49+00:00,53.89,,2,2,2012-04-25 16:37:10+00:00,3.86,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
397,Mocha test page is throwing errors in IE6,"The test page from the latest GitHub master branch is throwing errors in IE6:
Error
Line 1720: Unspecified error
Debugger opens at line 3280 of Mocha.js
Page source (same issues occur if files are localized)
<html>
  <head>
    <title>Mocha</title>
    <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
    <link rel=""stylesheet"" href=""https://raw.github.com/visionmedia/mocha/master/test/browser/../../mocha.css"" />
    <script src=""https://raw.github.com/visionmedia/mocha/master/test/browser/../../mocha.js""></script>
    <script>mocha.setup('bdd')</script>
    <script>
      function assert(expr, msg) {
        if (!expr) throw new Error(msg || 'failed');
      }
    </script>
    <script src=""https://raw.github.com/visionmedia/mocha/master/test/browser/array.js""></script>
    <script src=""https://raw.github.com/visionmedia/mocha/master/test/browser/../acceptance/duration.js""></script>
    <script src=""https://raw.github.com/visionmedia/mocha/master/test/browser/../acceptance/timeout.js""></script>
    <script>
      onload = function(){
        var runner = mocha.run();
        runner.globals(['foo', 'bar', 'baz']);

        // runner.on('test end', function(test){
        //   console.log(test.fullTitle());
        // });
      };
    </script>
  </head>
  <body>
    <div id=""mocha""></div>
  </body>
</html>",twolfson,NONE,2012-04-21 21:05:47+00:00,True,2012-12-15 23:09:27+00:00,238.09,,3,2,2012-12-09 03:01:44+00:00,231.25,ForbesLindesay,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
401,GNU Make: No rule to make target `mocha.css',"With GNU Make 3.81, mocha.js rebuilds fine, but mocha.css doesn't:
$ make clean; make all
rm -f mocha.js mocha.css
rm -fr lib-cov
rm -f coverage.html
make: *** No rule to make target `mocha.css', needed by `all'.  Stop.
make: *** Waiting for unfinished jobs....

  compile : lib/browser/diff.js
  compile : lib/browser/fs.js
  compile : lib/browser/path.js
  compile : lib/browser/debug.js
  compile : lib/browser/events.js
  compile : lib/browser/progress.js
  compile : lib/browser/tty.js
  compile : lib/context.js
  compile : lib/hook.js
  compile : lib/interfaces/bdd.js
  compile : lib/interfaces/exports.js
  compile : lib/interfaces/index.js
  compile : lib/interfaces/qunit.js
  compile : lib/interfaces/tdd.js
  compile : lib/mocha.js
  compile : lib/reporters/base.js
  compile : lib/reporters/doc.js
  compile : lib/reporters/dot.js
  compile : lib/reporters/html-cov.js
  compile : lib/reporters/html.js
  compile : lib/reporters/index.js
  compile : lib/reporters/json-cov.js
  compile : lib/reporters/json-stream.js
  compile : lib/reporters/json.js
  compile : lib/reporters/landing.js
  compile : lib/reporters/list.js
  compile : lib/reporters/markdown.js
  compile : lib/reporters/min.js
  compile : lib/reporters/progress.js
  compile : lib/reporters/spec.js
  compile : lib/reporters/tap.js
  compile : lib/reporters/teamcity.js
  compile : lib/reporters/xunit.js
  compile : lib/runnable.js
  compile : lib/runner.js
  compile : lib/suite.js
  compile : lib/test.js
  compile : lib/utils.js
   create : mocha.js",joliss,CONTRIBUTOR,2012-04-25 20:43:18+00:00,True,2012-04-25 21:03:29+00:00,0.01,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
402,Configure 'slow' property per test,"Hi! I'm using mocha in the browser.
Just the same way I can configure a single test 'timeout' threshold:
it('should take less than 500ms', function(done){
  this.timeout(500);
  setTimeout(done, 300);
});
it would be great to configure 'slow' threshold as there may be some functions heavier than others. Maybe:
it('would take less than 500ms', function(done){
  this.slow(500);
  setTimeout(done, 800);
})
Cheers.",PaquitoSoft,NONE,2012-04-27 20:08:18+00:00,True,2012-09-07 19:40:34+00:00,132.98,,5,7,2012-04-27 21:15:31+00:00,0.05,tj,CONTRIBUTOR,0,2,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
403,test suite is influenced by another test suite,"first look at my example
// src/dbManager.js
var Mongolian = require('mongolian')
  , db = new Mongolian('localhost:27017').db('mocha')

module.exports = {
    coll: db.collection('user')
  , changeColl: function(name) {
      this.coll = db.collection(name);
    }
}

i'm using mongolian. and I made dbManager object for changing collection because I want use diffent collection for test, like user_test not user.
// src/dao.js
var coll = require('./dbManager').coll;

module.exports = {
  insert: function() {
    coll.insert({id:'test'});
  }
}

and some dao object for query.
// test/test1.js
var should = require('should')

describe('dao test', function() {
  var dao = null;
  var coll = null;
  before(function() {
    var db = require('../src/dbManager'); 
    db.changeColl('user_test');
    coll = db.coll;
    dao = require('../src/dao');
  });
  beforeEach(function() {
    coll.remove();
  });
  afterEach(function(){
    coll.remove();
  });
  it('find', function(done) {
    dao.insert();
    coll.findOne({id:'test'}, function(err, obj) {
      should.exist(obj);
      done();
    }); 
  });
});

it's my test suite. in before, I change collection name and require dao object. this test is worked and passed using user_test collection.
// test/test2.js
var should = require('should')
  , dao = require('../src/dao'); 

it's another test suite. in this test suite, it require dao object again. not important test logic,
each test suite is passed when I run test each. but I run test suite togher like run `mocha'
it's fail.
because

first run test2.js
test2.js require dao.js. so dao.js's coll is user
and then run test1.js
in test1.js, chage collection from user to user_test
but in dao.js has coll user

I'm not sure whether it's mocha problem or node.js characteristic like caching require();
but this situation that one test suite fail because another test suite is strange to me.
so is this bug? or I have to avoid this code style?",outsideris,MEMBER,2012-04-28 17:58:57+00:00,True,2012-04-29 02:23:17+00:00,0.35,,2,9,2012-04-28 18:15:07+00:00,0.01,tj,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
404,Async tests never complete with TeamCity reporter,"There is an issue when using the TeamCity reporter, that any exception thrown in an async test causes the runner to stop completely (the rest of the tests do not run).
Full example code to reproduce it here (should show 1 failing, 1 passing): https://gist.github.com/2553096",rdingwall,CONTRIBUTOR,2012-04-29 20:50:54+00:00,True,2013-10-05 22:11:45+00:00,524.06,,2,1,2013-10-05 22:11:45+00:00,524.06,travisjeffery,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
408,Run hierarchically nested page-based suites in the browser,"I love Mocha!
That said, as a primarily JavaScript developer based primarily on the client-side (web), there is one major regret that I have with using Mocha as a testing framework: it cannot run hierarchically nested page-based test suites in the browser.  This idea has been around since the very first JavaScript testing framework, the now defunct JsUnit, in which is was achieved via the framework's addTestPage function.  Similarly, the popular QUnit testing framework offers this capability — albeit a bit more clumsily — via its relatively recent ""composite"" addon.
I feel that support for hierarchically nested page-based test suites is the only legitimate static alternative to globbing in the browser as you must otherwise include all of your test scripts on a single test page, whether via script tags or dynamic script loading.  While this may be fine for most projects, it does not meet the requirements of my employer's enterprise-level needs.  We have a large base of ""platform"" JavaScript as well as many sets of ""product"" JavaScript that extend that.  For each such product, they have their own product-specific test suites but also want to execute the platform test suites at the same time as well.  It is much easier to do this by adding one reference to a page containing all of the references to platform JavaScript tests rather than having to add 20+ test files to each product's test suite page AND needing to keep it up to date as new test suites may be added to the platform.  See my predicament?
I already talked with @visionmedia about this briefly on Twitter but he didn't seem particularly interested in making this functionality a core part of Mocha as he doesn't want to ""reinvent all the JS loaders out there"".  While I can understand that stance, I still feel that this is an important missing piece to make Mocha a competitive choice for browser-based JavaScript testing frameworks.
That said, I am hoping that putting an issue out here will either:
(a) encourage support from others and make him change his mind, or
(b) inspire someone else [with time] to make such an addon/extension for Mocha instead.
General approach is that only ""leaf node"" test pages (those without nested references to other test suite pages) will have any actual test code.  All other test pages (those with nested references to other test suite pages) should not have any actual test code.
Initial thoughts on API syntax adjustments are:
**top.html:
mocha.run([""subA"", ""subB""]);

**subA.html:
mocha.run();

**subB.html:
mocha.run([""B/sub1"", ""B/sub2""]);

**B/sub1.html:
mocha.run();

**B/sub2.html:
mocha.run();

Slight alternatives to the syntax include:
(a) providing the full file name rather than inferring a "".html"" extension:
mocha.run([""subA.html"", ""subB.html""]);

(b) providing a [JSON] object rather than just an array:
mocha.run({ suites: [""subA"", ""subB""] });

Thoughts from others?",JamesMGreene,NONE,2012-05-02 11:20:59+00:00,True,2012-06-17 03:04:08+00:00,45.65,,2,3,2012-05-02 15:52:03+00:00,0.19,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
409,Feature: Add flag to show slow/pending tests,"I would be nice if you could just do mocha --print slow,pending or something and, even though I'm using the dot matrix or spec reporters, at the end it would output the slow and pending tests.  When you start having hundreds or thousands of tests this would be a real help.  Just a thought.",lancejpollard,NONE,2012-05-02 17:35:22+00:00,True,2013-11-08 22:09:22+00:00,555.19,,5,8,2012-11-06 16:08:07+00:00,187.94,mcollina,NONE,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
410,allow multiple globals in mocha.opts,"I tried doing the following in the mocha.opts file. None of these methods allowed for ignoring more than one global.
--globals ""one, two, three""

--globals one, two, three

--globals one
--globals two",defunctzombie,CONTRIBUTOR,2012-05-02 22:20:45+00:00,True,2012-05-02 22:45:20+00:00,0.02,,2,8,2012-05-02 22:22:45+00:00,0.0,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
411,Wait for unrelated EventEmitter listeners,"When testing EventEmitters some tests trigger events but don't care about some/all the listeners on those events, so done() is called before those listeners have completed. These listeners then fail because the db has been wiped by the beforeEach hook setting up for the next test.
Mocha should wait for all EventEmitter listeners to complete before moving on to the next test, like how node figures out when to exit.",secobarbital,NONE,2012-05-02 23:16:36+00:00,True,2012-05-10 16:40:21+00:00,7.72,,2,1,2012-05-02 23:26:12+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
414,done() called multiple times with should.js,"I'm using mocha with should.js and I wonder how this example gives the error done() called multiple times
////////////////////////////////////////////////////////////////// blah.js
var should = require('should');
function _something(cb) {
cb();
}
describe('foo', function () {
describe('bar', function () {
it('should do something', function (done) {
  var x = {};
  _something(function () {
    x.foo = 'bar';
    done();
  });
  x.foo.should.equal('bara');
});

});
});
//////////////////////////////////////////////////////////////////
$ mocha blah.js
..
✖ 1 of 1 test failed:

foo bar should do something:
Error: done() called multiple times
at multiple (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runnable.js:126:24)
at done (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runnable.js:132:26)
at Test.run (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runnable.js:151:7)
at Runner.runTest (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runner.js:292:10)
at /Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runner.js:336:12
at next (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runner.js:220:14)
at /Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runner.js:229:7
at next (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runner.js:179:23)
at Array.0 (/Users/cliffano/.nvm/v0.6.10/lib/node_modules/mocha/lib/runner.js:197:5)
at EventEmitter._tickCallback (node.js:192:40)

But if I changed the equal expectation from 'bara' to the correct 'bar', then the error no longer occurs.
Why is done called multiple times only when should equal check is incorrect?
node v0.6.10
mocha v1.0.3
should v0.6.3",cliffano,NONE,2012-05-05 12:34:24+00:00,True,2012-06-17 03:04:07+00:00,42.6,,3,5,2012-05-08 16:32:11+00:00,3.17,enyo,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
416,More reasonable arguments for callback of mocha.run,"Using the mocha.run callback in JS api is pretty useless givin back only the (number of?) failures. So the cb in
mocha.run(cb);
wouldn't receive anything sensible.
Usecase would be any of the JS-api-using ones. For example running specific tests on request and responding with well... anything but just the number of failures.",Rauno56,CONTRIBUTOR,2012-05-08 21:25:01+00:00,True,2012-06-17 03:04:07+00:00,39.24,,2,2,2012-05-08 21:31:24+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
417,Making output of reporters configurable,"Most of the reporters do process.stdout.write(json) some console.log(tap), some both(list).
Would appriciate if it had configurability for JS api, at least for disabling it. Neither of them make sense in a lot of usecases with the api, but it would be really useful to get json object from the adequate reporter for example.",Rauno56,CONTRIBUTOR,2012-05-08 21:37:51+00:00,True,2012-05-12 10:33:45+00:00,3.54,,2,7,2012-05-08 21:41:30+00:00,0.0,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
419,Should timing badges take into account beforeEach/afterEach?,"My beforeEach functions are pretty slow, and sometimes even dominate test time. (I set up test fixture data and initialize an Ember app.) But the little timing badges that show up in the browser (above 50ms or so) do not include this time, they only seem to measure the time of the test functions themselves.
I'm thinking that it would be sensible for the badges to include the beforeEach/afterEach time.
(Perhaps there are also other parts where these timings are used, like timeouts -- I'm fairly new to mocha.)
What do you think?",joliss,CONTRIBUTOR,2012-05-09 23:24:18+00:00,False,,,,14,20,2012-05-09 23:28:13+00:00,0.0,tj,CONTRIBUTOR,1,6,0,6,"['feature', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
420,Multiple 'it' statements inside of for loops are tied to each other,"When I have some code in a for loop where each statement executes properly, looping over the 'it' statements seems to work fine.
  var field, writableFields, _i, _len;

  writableFields = 'email phone'.split(/\s+/);

  for (_i = 0, _len = writableFields.length; _i < _len; _i++) {
    field = writableFields[_i];
    it(""can write to "" + field, function(done) {
      var fakeEntry, methodName;
      methodName = ""set"" + field;
      clientGroup.now.should.respondTo(methodName);
      fakeEntry = ""fake "" + field;
      return clientGroup.now[methodName](fakeEntry, function() {
        return Client.findOne({}, function(error, client) {
          client[field].should.equal(fakeEntry);
          return done();
        });
      });
    });
  }

However if the 'it' statement fails for one of the loops it appears to fail for all of them. For example changing
writableFields = 'email phone'.split(/\s+/)

to
writableFields = 'email phone flake'.split(/\s+/)

All three mocha tests fail


ClientGroup can write to email:
actual expected
functdefioned


ClientGroup can write to phone:
actual expected
functdefioned


ClientGroup can write to tel:
actual expected
functdefioned


Whats going on?",jkarmel,NONE,2012-05-10 22:47:04+00:00,True,2012-05-11 00:53:41+00:00,0.09,,3,7,2012-05-10 23:32:57+00:00,0.03,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
424,feature: exact match in addition to grep,"I'm looking to only match specific suites because unless I make their names really unique a bunch of other ones show up in grep'ing.
Also it could be a hash on the url in the browser runner
site/test.html#suite

instead of another query string, which would be nice and clean. Although I don't really care either way. Either one would still allow grep'ing as well.",ianstormtaylor,CONTRIBUTOR,2012-05-11 14:17:26+00:00,True,2012-05-11 17:06:16+00:00,0.12,,2,2,2012-05-11 16:32:06+00:00,0.09,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
426,--require failure is not reported,"If I --require something that cannot be required, I get an anonymous printout to thec onsole of the error, but other than that mocha continues on its merry way (and fails horribly later for confusing reasons).
I've fixed this in 4257f5a",timbertson,NONE,2012-05-12 05:58:45+00:00,True,2012-05-31 12:27:05+00:00,19.27,,2,2,2012-05-31 01:28:52+00:00,18.81,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
430,Require 'flag' for JS api,"As far as I know there's no way to add files to require for suites using JS API. If there is, please educate me.
I would really like to help with that but it feels a bit too complex for me to get my hands dirty. If here's anyone who could explain me how it is working for cli, I would appriciate it. require() seems to be modded to able it to usage so the exports of a module would go global. Like here:
module.paths.push(cwd, join(cwd, 'node_modules'));

program.on('require', function(mod){
  var abs = path.existsSync(mod)
    || path.existsSync(mod + '.js');

  if (abs) mod = join(cwd, mod);
  require(mod);
});
Any comments are welcome.",Rauno56,CONTRIBUTOR,2012-05-14 17:11:35+00:00,True,2015-03-09 03:14:32+00:00,1028.42,,6,7,2012-05-31 12:57:20+00:00,16.82,emilecantin,NONE,0,3,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
431,Add `var` to definition of `process` variable in Browser Environment.,"I use global process variable in Browser (to provide environment similar to Node.JS), but mocha overrides it with process = {}; statement.
Maybe it should be changed to var process = {}; ?",alexeypetrushin,NONE,2012-05-16 20:48:26+00:00,True,2012-06-17 03:04:07+00:00,31.26,,2,2,2012-05-16 21:44:58+00:00,0.04,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
433,"""never"" expectation should respect ""with"" clause","Example:
String.expects(:new).with('foo').never
String.new('bar') # => fails

Here's a failing test for test/expected_invocation_count_test.rb but I don't know how to make it pass:
def test_should_fail_if_method_is_called_with_same_argument
  test_result = run_as_test do
    mock = mock('mock')
    mock.expects(:method).with('foo').never
    mock.method('foo')
  end
  assert_failed(test_result)
  assert_equal [
    ""unexpected invocation: #<Mock:mock>.method('foo')"",
    ""unsatisfied expectations:"",
    ""- expected never, invoked once: #<Mock:mock>.method(any_parameters)""
  ], test_result.failure_message_lines
end

def test_should_pass_if_method_is_called_with_different_argument
  test_result = run_as_test do
    mock = mock('mock')
    mock.expects(:method).with('foo').never
    mock.method('bar')
  end
  assert_passed(test_result)
end",zubin,NONE,2012-05-23 22:05:40+00:00,True,2012-05-24 02:00:46+00:00,0.16,,3,3,2012-05-24 00:42:23+00:00,0.11,TEHEK,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
434,Option to suppress error logs,"Hey there,
Maybe I'm missing an option or there is a better way, but I think it would be nice to have some way to suppress errors and just show the report.
Here's some context: I recently ported over a mature test suite to run against a new project and I have 115 errors, which ends up logging out an obscene amount of data. I already know the main bugs that I need to tackle and it's just a matter of coding them up. It'd be great to maintain a nice report (like -R min -w) of how the project is progressing without the information overflow.
Thanks!
Matt",matthewmueller,NONE,2012-05-24 06:54:15+00:00,True,2015-03-14 20:20:06+00:00,1024.56,,4,3,2012-06-17 02:20:10+00:00,23.81,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
435,mocha runs only once in the browser,"Calling mocha.run() again after running tests has finished has no effect.
Being able to run tests multiple times without refreshing the page would be
useful for me for adding some input fields in my testing page that must be
set by the user of the tests (for testing file upload). I need to run the tests
again after setting these since I want to always run the tests, when page is
loaded anyway.",fson,NONE,2012-05-25 15:46:12+00:00,True,2015-06-07 01:24:17+00:00,1107.4,,3,2,2012-05-27 19:14:08+00:00,2.14,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
438,cannot run interdependent tests in a chronological way (eg. nesting its),"I wish to run tests where part B depends on part A but cannot seem to accomplish this with mocha.
For example (this is very rough):
describe('db collections', function() {

    describe('requests', function() {

        it('should open on db.ready', function(done, next) {

            //tells request collection when to open
            mediator = new EventEmitter2();
            require(rtd + '/db/collections/requests')(mediator);

            //simulate a db
            var db = {
                collection: onCollection
            };

            //inform that db is ready
            mediator.emit('db.ready', db);

            //when the collection method was called
            function onCollection(name, cb) {

                next('should pass in a name and cb', function(done, next) {

                    name.should.eql('requests');
                    cb.should.be.a('function');

                    next('should emit collections.requests when cb is called', function(done, next) {

                        mediator.once('db.collections.requests', function(requests) {
                            requests.should.eql(""requests"");
                            done();
                        });
                        cb.call(this, null, ""requests"");

                    });

                });

            };

        });

    });

});

Is something like this possible?",tommedema,NONE,2012-05-27 13:03:00+00:00,True,2012-05-27 18:38:26+00:00,0.23,,3,5,2012-05-27 13:20:26+00:00,0.01,tommedema,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
440,Having trouble with jQuery ajax calls,"Hi there,
I'm new to mocha.js and I started doing a test for a very simple Backbone model. Within the test I create the model and I do model.fetch. error callback is getting called with a response object that contains statusText: 'No Transport'. So my understanding is that my ajax call is being considered cross site, so jQuery doesn't really send it, but dismisses it for security reasons.
I would like to run mocha asynchronous calls against a test server (http://127.0.0.1:8000), running my real API, with fixtures loaded. That before using any mocking library like sinon. I've tried the old trick of setting jQuery.support.cors = true;, but doesn't work.
is this possible? am I doing something wrong? Sorry I have very basic node.js knowledge to try to fix this myself.
Thanks, cheers
Miguel",maraujop,NONE,2012-05-29 15:14:19+00:00,True,2012-05-29 16:01:05+00:00,0.03,,3,5,2012-05-29 15:38:36+00:00,0.02,maraujop,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
441,should.fail fails,"I'm using should as my assertion library with Mocha.
In my tests, there are conditions that if met I want the test to fail explicitly with a message, so I'm using should.fail, but I'm getting TypeError: Object #<Object> has no method 'fail', apparently fail is not an existing prototype.
It's described under the docs of your should.js project at https://github.com/visionmedia/should.js#exist-static
Cheers,
Miguel",maraujop,NONE,2012-05-30 13:34:21+00:00,True,2012-11-15 18:23:58+00:00,169.2,,4,5,2012-06-03 15:48:54+00:00,4.09,mmozuras,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
442,globals is not a mocha method in browser mode,"According to the docs about browser support
You can do mocha.globals(['foo', 'bar'])
This is what you get when you do so:
Uncaught TypeError: Object function Mocha(options) {
  options = options || {};
  this.files = [];
  this.options = options;
  this.grep(options.grep);
  this.suite = new exports.Suite('', new exports.Context);
  this.ui(options.ui);
  this.reporter(options.reporter);
  if (options.timeout) this.suite.timeout(options.timeout);
} has no method 'globals'

Cheers,
Miguel",maraujop,NONE,2012-05-30 15:13:11+00:00,True,2012-08-15 02:48:58+00:00,76.48,,5,5,2012-06-05 14:16:17+00:00,5.96,emilecantin,NONE,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
443,dot reporter outputs summary after process.exit is called,,abrkn,CONTRIBUTOR,2012-05-31 08:30:59+00:00,True,2012-05-31 08:34:13+00:00,0.0,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
444,Windows: mocha.opts is not recognized,"Hi
I'm trying to use the following mocha.opts, which I saw in use in other projects:
--require should
--ui exports

When I pass the flags mannually - it runs well.
But without them - it runs with 0 tests complete (probably because of the default value of --ui)
I suppose it should take them from the file, right?
my platform:

WindowsXP sp3
node 0.6.9
npm 1.1.0-3
mocha 1.0.3 (installed using npm, nesting all it's declared dependencies in node_modules)

Thanks.",osher,NONE,2012-05-31 09:50:54+00:00,True,2015-03-14 20:10:37+00:00,1017.43,,3,3,2012-06-03 15:14:38+00:00,3.22,mmozuras,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
445,Tests only run once using the JS API,"Hi, I'm trying to auto run mocha tests as part of my build process. I have a watcher that watches my application files and recompiles them and runs the tests when they change. Unfortunately I can only get mocha to run my tests once, here's something that reproduces it for me:
# This one will work
mocha = new Mocha
mocha.reporter('spec').ui('bdd')
mocha.addFile myFilename
runner = mocha.run ->
  console.log ""Done!""

# This one is identical but will find zero tests
mocha = new Mocha
mocha.reporter('spec').ui('bdd')
mocha.addFile myFilename
runner = mocha.run ->
  console.log ""Done!""


This happens even if i re-require mocha before the second one. Any ideas?",phpnode,NONE,2012-06-01 08:25:30+00:00,True,2015-06-07 01:25:09+00:00,1100.71,,7,6,2012-06-17 02:20:10+00:00,15.75,tj,CONTRIBUTOR,0,2,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
448,Feature request: Ability to declare beforeEach etc. handlers independent of interface,"In Konacha, which allows you to run Mocha in Rails apps, we need to set up a beforeEach callback (code). Right now this is done by calling beforeEach. But this requires that the 'bdd' interface is used.
This means that Konacha users cannot pick a different interface, because then the beforeEach handler doesn't work anymore.
Instead of adding support for all interfaces to Konacha, I would like to suggest that there could be a simple unified API under the mocha namespace, which would work regardless of the interface chosen. Perhaps all interfaces could actually be implemented using this API.
What do you think?",joliss,CONTRIBUTOR,2012-06-04 19:16:26+00:00,True,2012-06-18 16:29:15+00:00,13.88,,2,2,2012-06-04 19:37:53+00:00,0.01,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
449,'min' reporter missing?,"I get the following error running:
node_modules/.bin/mocha -R min --timeout 180s --slow 10000 test/app-tests.mocha.js
    throw new Error(""Cannot find module '"" + request + ""'"");
          ^
Error: Cannot find module '../lib/reporters/min'
    at Function._resolveFilename (module.js:337:11)
    at Function._load (module.js:279:25)
    at Module.require (module.js:359:17)
    at require (module.js:375:17)
    at Object.<anonymous> (/Users/xxx/functional/node_modules/mocha/bin/_mocha:131:16)
    at Module._compile (module.js:446:26)
    at Object..js (module.js:464:10)
    at Module.load (module.js:353:31)
    at Function._load (module.js:311:12)
    at Array.0 (module.js:484:10)
    at EventEmitter._tickCallback (node.js:190:38)
make: *** [apps] Error 1

± ls node_modules/mocha/lib/reporters
base.js        dot.js         index.js       json.js        list.js        spec.js        teamcity.js
doc.js         html.js        json-stream.js landing.js     progress.js    tap.js         xunit.js",jdpaton,NONE,2012-06-04 21:17:34+00:00,True,2012-06-04 21:43:25+00:00,0.02,,2,2,2012-06-04 21:28:24+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
450,Add more emphasis on failed tests in the browser reporter,"I think it would be a good idea to emphasize a bit more when there are failed tests in the browser reporter. I am starting to have a sizeable test suite, and I always need to scroll to see if there are any failed tests. (I know I should look at the counter in the upper right corner, but it doesn't 'pop' enough to catch my eye)
I think a good idea would be to mimic the 'spec' reporter, and repeat all failures at the top of the page.",emilecantin,NONE,2012-06-05 14:10:51+00:00,True,2015-03-15 03:05:53+00:00,1012.54,,3,2,2012-06-05 15:13:36+00:00,0.04,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
451,Look for mocha.opts not only in the ./test directory,"As it is now, Mocha only looks for the opts file in ./test. It would be great if instead it took into account the path of the [files] argument and look for mocha.opts there. For example:

tests are in ./spec, I run mocha spec/ => looks for mocha.opts in ./spec
tests are in ./test, I am in ./test, I run mocha ./ => looks for mocha.opts in ./
tests are in ./test, I am in ./test, I run mocha *_test.js => looks for mocha.opts in ./

It could also try to find mocha.opts in the current directory if everything else fails, i.e. I run mocha ./test, but there's no ./test/mocha.opts so it tries to load ./mocha.opts. Or even try to find it until reaching the root path /, similarly to what Node does when looking for node_modules.",jgonera,NONE,2012-06-05 16:09:54+00:00,True,2014-07-24 18:45:19+00:00,779.11,,10,10,2012-06-05 16:18:25+00:00,0.01,tj,CONTRIBUTOR,0,3,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
453,Feature request: Complete output of mocha using ant,"I'm using ant on a CI server to run all my tests using Mocha. Unfortunately, the output while executing mocha is incomplete.
Indeed, when all tests complete, we only see ""......"" and nothing more.
Also, when a test fails, the output using ant is :
....
ô£û 1 of 7 tests failed:
...
It would be nice to see the complete output of mocha like when we call ""mocha test"" if it's possible.
Maybe I'm doing something wrong and if it's the case, please let me know how I can do this.
Thank you very much!",jeep87c,NONE,2012-06-07 21:40:35+00:00,True,2012-06-08 12:32:37+00:00,0.62,,2,3,2012-06-07 21:47:33+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
455,Add wildcard support for globals flag,"Some frameworks, such as jQuery, tack variables onto the window object for events.  When events are attached to the window with jQuery, it creates window.jQuery172016156825145170917 objects.  Mocha complains of these global variables.  It would be nice to have the globals flag support wildcards, so we can ignore jQuery* or jQuery%.",nathanbowser,CONTRIBUTOR,2012-06-08 21:40:42+00:00,True,2012-06-18 13:44:16+00:00,9.67,,2,2,2012-06-10 15:14:20+00:00,1.73,nathanbowser,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
457,mocha vs npm test,"I'm new to mocha and am not sure I'm doing things right, but I'm seeing strange behavior when using npm test as opposed to mocha from the CLI. I am just trying to run the basic example right now. There is no problem when all of the tests succeed. It is only when a test fails.
I have a test directory with a file called simple.js, which has the following:
describe('Array', function(){
  describe('#indexOf() 1', function(){
    it('should return -1 when the value is not present', function(){
      [1,2,3].indexOf(5).should.equal(-1);
      [1,2,3].indexOf(1).should.equal(-1); // Intentional problem put here to test.
    })
  })
})
Notice the intentional problem on the second test
When I run mocha from the CLI, I get the following
  1) Array #indexOf() 1 should return -1 when the value is not present

  ✖ 1 of 1 test failed:

  1) Array #indexOf() 1 should return -1 when the value is not present:
     AssertionError: expected 0 to equal -1
      at Object.equal (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/should/lib/should.js:303:10)
      at Context.<anonymous> (/Users/Corey/Documents/workspace_mya/Platform/mya/test/simple.js:5:33)
      at Test.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:168:32)
      at Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:295:10)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:339:12
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:223:14)
      at /usr/local/lib/node_modules/mocha/lib/runner.js:232:7
      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:182:23)
      at Array.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runner.js:200:5)
      at EventEmitter._tickCallback (node.js:190:38)

I expected that. However; when I run npm test, I get
  1) Array #indexOf() 1 should return -1 when the value is not present

  ✖ 1 of 1 test failed:

  1) Array #indexOf() 1 should return -1 when the value is not present:
     AssertionError: expected 0 to equal -1
      at Object.equal (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/should/lib/should.js:303:10)
      at Context.<anonymous> (/Users/Corey/Documents/workspace_mya/Platform/mya/test/simple.js:5:33)
      at Test.run (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runnable.js:168:32)
      at Runner.runTest (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runner.js:295:10)
      at /Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runner.js:339:12
      at next (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runner.js:223:14)
      at /Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runner.js:232:7
      at next (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runner.js:182:23)
      at Array.<anonymous> (/Users/Corey/Documents/workspace_mya/Platform/mya/node_modules/mocha/lib/runner.js:200:5)
      at EventEmitter._tickCallback (node.js:190:38)



npm ERR! mya-api@0.0.1 test: `mocha`
npm ERR! `sh ""-c"" ""mocha""` failed with 1
npm ERR! 
npm ERR! Failed at the mya-api@0.0.1 test script.
npm ERR! This is most likely a problem with the mya-api package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     mocha
npm ERR! You can get their info via:
npm ERR!     npm owner ls mya-api
npm ERR! There is likely additional logging output above.
npm ERR! 
npm ERR! System Darwin 10.8.0
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""test""
npm ERR! cwd /Users/Corey/Documents/workspace_mya/Platform/mya
npm ERR! node -v v0.6.18
npm ERR! npm -v 1.1.21
npm ERR! code ELIFECYCLE
npm ERR! message mya-api@0.0.1 test: `mocha`
npm ERR! message `sh ""-c"" ""mocha""` failed with 1
npm ERR! errno {}
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /Users/Corey/Documents/workspace_mya/Platform/mya/npm-debug.log
npm not ok

My package.json looks like
{
  ""author"": ""Corey Butler <me@myaddress.com> (http://www.coreybutler.com)"",
  ""name"": ""my-api"",
  ""description"": ""Business logic API module."",
  ""version"": ""0.0.1"",
  ""main"": ""MY.js"",
  ""dependencies"": {},
  ""devDependencies"": {
    ""mocha"": ""~1.1.0"",
    ""should"": ""~0.6.3""
  },
  ""optionalDependencies"": {},
  ""engines"": {
    ""node"": "">= 0.6.15""
  },
  ""scripts"": {
    ""test"": ""mocha""
  }
}

and I have a mocha.opts file that looks like
--require should
--reporter list
--growl

Is this expected behavior or am I overlooking something? I'm not sure why I'm seeing all of the npm output.",coreybutler,CONTRIBUTOR,2012-06-10 22:45:03+00:00,True,2012-06-10 22:58:04+00:00,0.01,,5,12,2012-06-10 22:52:33+00:00,0.01,domenic,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
459,Add at least 1 working example to documentation.,"I've been playing with mocha for at least 30 minutes so far. I installed it globally and cut and pasted the first example into a js file. Yes I'm still new to node :-)
All I get is
.

  ✖ 1 of 1 test failed:

  1) Array #indexOf() should return -1 when the value is not present:
 TypeError: Cannot call method 'equal' of undefined
  at Context.<anonymous> (/Users/sensis/projects/Happiness Index/server/tests/groups-mocha.js:4:33)
  at Test.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:168:32)
  at Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:295:10)
  at /usr/local/lib/node_modules/mocha/lib/runner.js:339:12
  at next (/usr/local/lib/node_modules/mocha/lib/runner.js:223:14)
  at /usr/local/lib/node_modules/mocha/lib/runner.js:232:7
  at next (/usr/local/lib/node_modules/mocha/lib/runner.js:182:23)
  at Array.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runner.js:200:5)
  at EventEmitter._tickCallback (node.js:190:38)

At least the first example code in the documentation should be a valid working full example. Can you guys please update it.
Got it working. Can I suggest that you add some doco to outline that you either need to install (globally?) should, expect or chai. And then add require statements to the first example. Here is my exploded version :-)
var assert = require(""assert"");
var should = require(""should"");
var expect = require(""expect"");
//var chai = require(""chai"");

describe('Array', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){

        // Using assert
        assert([1,2,3].indexOf(5) == -1);

        // Using should.    
      [1,2,3].indexOf(5).should.equal(-1);

      // Using expect
      expect([1,2,3].indexOf(5)).to.eql(-1);

      // using Chai - Note: Chai is incompatible with assert, should and expect because it 
      // uses the same keywords.
      // [1,2,3].indexOf(5).should.equal(-1);
      // expect([1,2,3].indexOf(5)).to.equal(-1);
      // assert.equal([1,2,3].indexOf(5),-1);
    })
  })
});",drekka,NONE,2012-06-12 04:12:16+00:00,True,2012-06-17 01:13:10+00:00,4.88,,2,2,2012-06-12 16:25:51+00:00,0.51,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
463,Error: global leak detected in chrome,"Hi,
running the example found at https://github.com/adomokos/mocha-in-browser.git that is a simple mocha setup in browser.
http://sandbox.dev/mocha-in-browser/spec/runner.html run fine in safari and firefox but generate an error in chrome...
Error: global leak detected: script1339717561999 at Runner.checkGlobals (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3139:21) at Runner.<anonymous> (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3054:44) at Runner.emit (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:235:20) at http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3360:14 at Test.run (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3003:5) at Runner.runTest (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3305:10) at http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3349:12 at next (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3233:14) at http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3242:7 at next (http://sandbox.dev/mocha-in-browser/spec/lib/mocha.js:3192:23) 
this error shows on the first test that is fired (if you comment out the first one, the second generates the error)",olivier-o,NONE,2012-06-15 02:15:36+00:00,True,2015-03-08 21:30:30+00:00,996.8,,5,11,2012-06-15 16:16:32+00:00,0.58,tj,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
466,Mocha coverage using jscoverage integration with sonar,"It's more a question then an issue but, I would like to know if there is a way to use Sonar with mocha (unit testing and coverage)? If yes, how can I do this?
For your information, I'm already using Jenkins for CI on my project running all my tests with mocha. I'm also using Ant to do this.
Thanks for the help!",jeep87c,NONE,2012-06-19 15:31:13+00:00,True,2012-06-19 17:12:21+00:00,0.07,,2,5,2012-06-19 16:08:19+00:00,0.03,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
467,"whitelist common globals (setTimeout, etc)","they're non-enumerable so mocha misses them:
Object.keys(window)
[""window"", ""top"", ""location"", ""external"", ""chrome"", ""v8Locale"", ""document"", ""html5"", ""Modernizr"", ""$"", ""jQuery"", ""jQuery1720022294572554528713"", ""moment"", ""GitHub"", ""BaconPlayer"", ""DateInput"", ""clippyCopiedCallback"", ""debug"", ""_gaq"", ""_gauges"", ""$stats"", ""_gat"", ""gaGlobal""]
window.setTimeout
function setTimeout() { [native code] }",tj,CONTRIBUTOR,2012-06-19 15:59:28+00:00,True,2012-10-29 16:11:13+00:00,132.01,,4,5,2012-06-19 16:03:20+00:00,0.0,Raynos,CONTRIBUTOR,0,4,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
471,`mocha --watch` fails on thrown Exception outside of test,"For example, if Controller.Robot is not defined, the following causes Mocha to stop watching files, forcing me to restart it manually.
describe 'Controller.Robot', ->
  r = new Controller.Robot
  it 'has a thruster', ->
    r.should.have.property('thruster')

On a related note, if the test script contains a syntax error, the same thing will happen (at least when using CoffeeScript).",ariofrio,NONE,2012-06-21 05:30:14+00:00,True,2012-06-21 15:45:12+00:00,0.43,,2,1,2012-06-21 15:45:12+00:00,0.43,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
473,Compatibility with LiveScript,"LiveScript is using it as a placeholder for the first argument passed to a function:
greet = -> console.log ""#{it.name}""
greet name: ""Peter""

And since Mocha uses it inside a function that collides with LiveScript.
I get:
TypeError: undefined is not a function

since there is no argument passed to describe.
Perhaps it could be put in this so we could do:
@it ""should ..."" ->

Please help us LiveScripters use Mocha!",,NONE,2012-06-22 18:32:15+00:00,True,2012-06-22 18:38:25+00:00,0.0,,5,5,2012-06-22 18:38:33+00:00,0.0,,NONE,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
474, Error: timeout of 2000ms exceeded,"https1.js:
var https = require('https');

var options = {
  host: 'secure-test.worldpay.com',  port: 443,
  path: '/jsp/merchant/xml/paymentService.jsp',
  method: 'POST'
};

exports.post_proc = function (json, cb) {

    var req = https.request(options, cb)
    req.end(""test"")
    req.on('error', function(e) {
  console.error(e); 
});
  
} 

https2.js:
https1 = require(""./https1"")

// this part works if runs : node https2 */
/*
https1.post_proc(null, function(res) {
    console.log('back')
    console.log('STATUS: ' + res.statusCode);
  console.log('HEADERS: ' + JSON.stringify(res.headers));
  res.on('data', function (chunk) {
    console.log('BODY: ' + chunk);
  });
}) 
*/

describe('test https1', function () {
    describe('#https1', function () {
        it('should return response object', function (done) {

            https1.post_proc(null, function (res) {
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    console.log('BODY: ' + chunk);
                    done()
                });
            })
        })
    })
}) 

got error:

test https1 #https1 should return response object:
Error: timeout of 2000ms exceeded
at Object. (/usr/local/lib/node_modules/mocha/lib/runnable.js:126:14)
at Timer.ontimeout (timers.js:84:39)

mocha --version
1.2.0",angelochen960,NONE,2012-06-24 16:07:47+00:00,True,2012-06-24 16:14:40+00:00,0.0,,4,3,2012-06-24 16:10:06+00:00,0.0,paulmillr,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
477,Empty mocha.opts breaks mocha,"Steps to reproduce:

Create a test/mocha.opts file, but leave it blank
Run mocha

Expected:

The test are run

Actual:

mocha complains about not being able to find a "".js"" file",goloroden,NONE,2012-06-26 15:50:33+00:00,True,2012-07-08 17:27:12+00:00,12.07,,4,3,2012-07-08 17:27:12+00:00,12.07,tj,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
479,Context issue for before and beforeEach,"Hi,
Pretty self-explanatory:
https://gist.github.com/6fa5bae77e3f98086b6e
Am I missing something? I was expecting a match at least for before and beforeEach. Is there any better way to fixate some variables in beforeEach?",Rauno56,CONTRIBUTOR,2012-06-27 23:57:29+00:00,True,2012-06-28 09:54:25+00:00,0.41,,2,2,2012-06-28 00:29:25+00:00,0.02,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
480,--watch fails on Windows,"mocha --watch
results in:
node.js:468
var b = process.binding('signal_watcher');
^
Error: No such module
at process.startup.processSignalHandlers.process.on.process.addListener (node.js:468:27)
at Object. (C:\Users\ShaneC\AppData\Roaming\npm\node_modules\mocha\bin_mocha:242:1
at Module._compile (module.js:449:26)
at Object.Module._extensions..js (module.js:467:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Module.runMain (module.js:487:10)
at process.startup.processNextTick.process._tickCallback (node.js:244:9)
Windows 7 64bit",ShaneCourtrille,NONE,2012-06-28 13:30:46+00:00,True,2012-06-28 16:30:07+00:00,0.12,,5,7,2012-06-28 16:30:06+00:00,0.12,tj,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
482,Feature request: show test file name and line number on error,"In the error summary, it would be useful if the testfile's name and line number would be shown. E.g. like this with the spec reporter:
✖ 1 of 3 tests failed:

foo bar #methods should have some feature:
expected false to be true
(test.foo.js, line #14)

At least the file name would be useful, line number would be a nice to have.",,NONE,2012-06-29 07:16:15+00:00,True,2012-06-29 07:34:37+00:00,0.01,,1,2,2012-06-29 07:30:54+00:00,0.01,logicalparadox,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
483,Make Mocha TextMate bundle,"I just started to use Mocha and found that I really love it. I followed the Mocha Homepage best practice areas to create Makefile and mocha.opts, and run ""make test"" -- my testing projects runs just fine. That means Make works on my machine.
Then in the same file location ( root of the project ) run ""make tm"". It gives me this error ""make: *** No rule to make target `tm'.  Stop."". Where should I run this command to generate the TextMate Bundle ?
I did stackoverflow search, google search, and issue list search, and still no luck to find the answers. Hope that you could help. Thanks.",mattma,NONE,2012-06-30 19:25:09+00:00,True,2012-06-30 20:33:49+00:00,0.05,,4,7,2012-06-30 20:33:47+00:00,0.05,mattma,NONE,0,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
484,Add easily parse-able details to HTML runner,"Would be nice if there were an easier way to parse details out of the html document when using PhantomJS. Specifically looking for a dom node that indicates all the tests have finished running.
Also would be great if there were a hidden JSON string in some node that could be easily parsed.",sym3tri,NONE,2012-06-30 22:06:28+00:00,True,2012-10-15 23:11:17+00:00,107.05,,3,16,2012-07-03 17:47:46+00:00,2.82,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
486,HTML runner doesn't safely escape markup in Suite titles,"If I write the following test for example (using jQuery and Chai):
describe(""when <script> is used in the Suite title"", function(){
    it(""should still cause the DOM to be parseable"", function(){
        $('#mocha').clone.should.not.throw.error(Error);
    });
});",badunk,CONTRIBUTOR,2012-07-02 04:58:18+00:00,True,2012-07-03 16:47:41+00:00,1.49,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
489,Error: Cannot find module '../package',"When mocha is run from within the local (./node_modules/.bin/) directory it fails with thi message:
node.js:134
        throw e; // process.nextTick error, or 'error' event on first tick
        ^
Error: Cannot find module '../package'
    at Function._resolveFilename (module.js:317:11)
    at Function._load (module.js:262:25)
    at require (module.js:346:19)
    at Object.<anonymous> (/usr/src/node/node_modules/grainstore/node_modules/mocha/bin/_mocha:58:12)

Beside, I've seen packages which on ""make install"" suggest a preferred ""global"" install.
Dunno how that is done.",strk,NONE,2012-07-03 10:12:32+00:00,True,2012-07-13 16:57:06+00:00,10.28,,4,13,2012-07-03 10:16:06+00:00,0.0,strk,NONE,0,3,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
491,Mocha With CoffeeScript TypeError,"So I am trying to run unit tests with Mocha and Chai that are written in CoffeeScript.  I know that Mocha has exclude coffeescript since 1.0 so I am passing the compiler flag mocha --compilers coffee:coffee-script.  What ends up happening is that whenever I try to require a file in the test the compiler complains with this error.  Otherwise it runs fine.
/usr/local/lib/coffee-script/lib/coffee-script.js:36
      throw err;
            ^
TypeError: In /Users/chietala/workspaces/twl/test/buttonTest.coffee, Array.prototype.indexOf called on null or undefined
    at indexOf (native)
    at Assign.exports.Assign.Assign.isStatement (/usr/local/lib/coffee-script/lib/nodes.js:1147:72)
    at Block.exports.Block.Block.compileNode (/usr/local/lib/coffee-script/lib/nodes.js:262:27)
    at Block.exports.Block.Block.compileWithDeclarations (/usr/local/lib/coffee-script/lib/nodes.js:308:19)
    at Block.exports.Block.Block.compileRoot (/usr/local/lib/coffee-script/lib/nodes.js:282:19)
    at Block.exports.Block.Block.compile (/usr/local/lib/coffee-script/lib/nodes.js:244:21)
    at exports.compile.compile (/usr/local/lib/coffee-script/lib/coffee-script.js:31:51)
    at Object.require.extensions..coffee (/usr/local/lib/coffee-script/lib/coffee-script.js:13:17)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:362:17)
    at require (module.js:378:17)
    at /usr/local/lib/node_modules/mocha/bin/_mocha:300:27
    at Array.forEach (native)
    at load (/usr/local/lib/node_modules/mocha/bin/_mocha:297:9)
    at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/_mocha:288:1)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.runMain (module.js:487:10)
    at process.startup.processNextTick.process._tickCallback (node.js:244:9)

All thats in my test file is the following
  ButtonConsumer = require '../button/base/coffee/ButtonConsumer'

And ButtonConsumer looks like this.
 class ButtonConsumer
  constructor: ->

directory structure is
/
   test
      buttonTest.coffee
   button
      base
        coffee
           ButtonConsumer.coffee

It's pretty bare bones that's why I'm really confused. I'm running Node v0.8.1, Coffeescript v1.2.0, and mocha 1.2.2.",chadhietala,NONE,2012-07-03 18:01:23+00:00,True,2012-07-03 18:34:56+00:00,0.02,,1,1,2012-07-03 18:35:06+00:00,0.02,chadhietala,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
492,Turn reporters into seperate module,"The mocha reporters are sweet. However they are hard coupled to the mocha interface.
It would be elegant if they were a seperate module.
Consider mocha just outputting TAP format for the tests to stdout
And then doing
mocha test | mocha-reporters --dot
The mocha-reporters module could just be a thing that takes TAP input and outputs to the reporter to stdout.
You could also consider using it programatically as
mocha.output.pipe(mochaReporter.spec).pipe(process.stdout)
This allows people to re-use the reporters in any test framework that outputs TAP.
If you think this is a sensible idea we can draft out how the refactoring would go and I can try migrating the reporters into seperate modules. I've pretty much ported the HTML reporter to something that consumes TAP already so that feels like duplicated effort.",Raynos,CONTRIBUTOR,2012-07-03 19:00:26+00:00,True,2014-06-12 02:26:14+00:00,708.31,,8,28,2012-07-03 19:04:32+00:00,0.0,tj,CONTRIBUTOR,0,4,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
493,TypeError: Cannot read property 'state' of undefined,"Happening with node-0.8.0 and mocha-1.2.2
/home/src/cartodb/superagent/node_modules/mocha/lib/runner.js:410
  if ('failed' == runnable.state) return;
                          ^
TypeError: Cannot read property 'state' of undefined
    at Runner.uncaught (/home/src/cartodb/superagent/node_modules/mocha/lib/runner.js:410:27)
    at process.uncaught (/home/src/cartodb/superagent/node_modules/mocha/lib/runner.js:443:10)
    at process.EventEmitter.emit (events.js:115:20)

Invocation is:
mocha --require should --reporter dot --timeout 100 --growl test/node/*.js

From top-dir of superagent master",strk,NONE,2012-07-04 09:05:23+00:00,True,2015-03-09 04:47:50+00:00,977.82,,6,7,2012-07-04 09:06:10+00:00,0.0,strk,NONE,0,1,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
495,add nyan reporter to Mocha.reporters,"in lib/reporters/index.js, the Nyan reporter isn't added to the exports.  Also, a minor issue, the XUnit and Teamcity reporters don't have semi-colons after them.",leecookson,NONE,2012-07-05 13:31:43+00:00,True,2012-07-05 15:34:15+00:00,0.09,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
496,scroll #mocha in HTML reporter,,tj,CONTRIBUTOR,2012-07-05 16:56:17+00:00,True,2012-07-05 17:12:44+00:00,0.01,,1,0,,,,,0,0,0,0,"['browser', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
497,Mocha should prefix debug(),"Mocha uses the node debug library, debug output can be enabled selectively with DEBUG=""*"" mocha ...
which then prints out a ton of suite, runnable, runner debug messages which makes it complicated to read my own debug output.
It would be awesome if mocha debug was prefixed with, say mocha: so i can just run DEBUG=""* -mocha:*"" mocha ... and just get the messages i care about.",Swatinem,NONE,2012-07-06 15:23:16+00:00,True,2012-07-06 15:51:06+00:00,0.02,,2,1,2012-07-06 15:45:18+00:00,0.02,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
500,Inconclusive tests in mocha,Currently mocha and Nodejs do not have any concept of an inconclusive test (such as when an optional library is not installed). I ran into this problem with Restless. Would this be something worth developing for mocha? I don't want to spend the time if it will just be rejected immediately.,blakevanlan,NONE,2012-07-08 17:16:42+00:00,True,2012-07-09 16:15:52+00:00,0.96,,3,8,2012-07-08 17:25:07+00:00,0.01,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
501,trim() error in IE8,mocha attempts to call .trim() on String but it is not available in <= IE8.,satazor,NONE,2012-07-08 19:39:19+00:00,True,2012-08-22 21:41:44+00:00,45.09,,4,4,2012-07-19 12:42:39+00:00,10.71,jhnns,NONE,0,1,0,3,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
502,Out of stack space error in IE,"Large amounts of tests often cause ""out of stack space"" errors in Internet Explorer (IE <= 9).
After analyzing the call stack when the error is thrown, it is huge!
If I let the tests ""breath"":
  process.nextTick(function(){
    setTimeout(function () {
      next(0);
    }, 5);
  });
.. all is fine.
The project in which this is happening has 258 asserts and a total of 102 tests.",satazor,NONE,2012-07-08 20:12:51+00:00,True,2015-07-05 15:29:03+00:00,1091.8,,12,23,2012-07-16 01:36:20+00:00,7.22,liammclennan,NONE,0,4,0,8,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
503,Context built-in properties cause problems,"A test more or less like this one broke when upgrading to Mocha 1.3, due to 8e5cc0a introducing a test property into the context of all tests that is used if found:
describe(""blah"", function () {
    beforeEach(function () {
        this.test = function () { };
    });

    it(""should not break"", function () {
        this.test().should.not.throw();
    });
});
I previously had the same problem with the name runnable, which took a lot of head-scratching to understand. I guess now it's renamed to _runnable.
In general there is a namespace collision here, between using this as a storage place for things to test (as an alternative to the closure), and Mocha's use of it as a place to put utility functions. It'd be great if Mocha's stuff could be namespaced, perhaps? Something like this.mocha.runnable, this.mocha.test, etc.? Or (double)-underscored? this.__runnable, this.__test?",domenic,CONTRIBUTOR,2012-07-08 21:39:24+00:00,True,2015-03-09 04:46:22+00:00,973.3,,4,4,2012-07-08 21:40:16+00:00,0.0,rauchg,CONTRIBUTOR,0,4,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
507,[mocha.suite] Process exited with code 2 when executed in TeamCity,"Hi, Im trying to get Mocha tests set up within a TeamCity build of a Node.js app.
I have a build option set to ""command line"" with the following command:
node_modules/.bin/mocha --ui bdd --reporter teamcity
I have tested this command locally and it produces what seems like team city friendly output, but it seems not to work within TeamCity!
I receive the following output:
Starting: C:\TeamCity\buildAgent\temp\agentTmp\custom_script1863718145915297496.cmd
[10:50:23]in directory: C:\TeamCity\buildAgent\work\840c799697fbff10
[10:50:24]path.existsSync is now called fs.existsSync.
[10:50:24]mocha.suite
[10:50:24][mocha.suite] Process exited with code 2
[10:50:24][mocha.suite] Publishing internal artifacts
[10:50:24][Publishing internal artifacts] Sending build.finish.properties.gz file
[10:50:24][mocha.suite] Build finished
This causes the build to fail, and no tests to be interpreted. Can anyone help shed some light on how to get this set up properly? It's great that there's already a TeamCity runner, but I can't seem to get it working. Thanks.",JoeStanton,NONE,2012-07-11 09:57:53+00:00,True,2015-03-08 21:48:13+00:00,970.49,,4,3,2012-08-22 17:22:30+00:00,42.31,chrisdeely,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
508,Sinon.js not working with DOM manipulation,"Hi,
Sinon.js is not working with Mocha when manipulating the DOM, with a simple example extracted from Sinon.js website:
describe('Test fake timer', function(){
    beforeEach(function(){
        this.clock = sinon.useFakeTimers();
    });

    afterEach(function(){
        this.clock.restore();
    });

    it('should be fast', function(){
        var el = jQuery(""<div></div>"");
        el.appendTo(document.body);

        el.animate({ height: ""200px"", width: ""200px"" });
        this.clock.tick(510);

        expect(el.css(""height"")).to.equal('200px');
    });

});
This test is failing. However this one is not:
    it('should be fast', function(done){
        setTimeout(function(){done();}, 300000);
        this.timeout(500000);
        this.clock.tick(20000000);
    });
Thanks, cheers
Miguel",maraujop,NONE,2012-07-11 14:41:21+00:00,True,2012-07-11 15:32:16+00:00,0.04,,3,12,2012-07-11 15:30:37+00:00,0.03,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
509,move less important reporters in to npm-land,"I think we should move CI-specific reporters into npm-land, ""teamcity"", ""xunit"" can simply be ""teamcity-reporter"" etc in npm and add to https://github.com/visionmedia/mocha/wiki#interfaces--reporters",tj,CONTRIBUTOR,2012-07-11 15:39:22+00:00,False,,,,8,22,2012-12-08 15:49:25+00:00,150.01,ForbesLindesay,CONTRIBUTOR,0,6,0,0,"['help wanted', 'reporter', 'semver-major']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
513,try domains in a branch,this will fuck over client-side support nicely but yeah,tj,CONTRIBUTOR,2012-07-17 23:45:41+00:00,True,2014-07-08 02:00:53+00:00,720.09,,15,24,2012-07-24 23:37:50+00:00,6.99,nemtsov,NONE,0,4,0,10,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
515,make tm copies textmate bundle into wrong location,"I notice that while fixing #137 the make tm target has been broken.
The bundle is now copied one level too deep.
This:
mkdir -p $(TM_DEST)/$(TM_BUNDLE)
cp -fr editors/$(TM_BUNDLE) $(TM_DEST)/$(TM_BUNDLE)
results in the bundle being placed here:
$(TM_DEST)/$(TM_BUNDLE)/$(TM_BUNDLE)
To put the bundle in the correct location:
$(TM_DEST)/$(TM_BUNDLE)
The rule commands should in fact be this:
mkdir -p $(TM_DEST)
cp -fr editors/$(TM_BUNDLE) $(TM_DEST)",pghalliday,NONE,2012-07-18 19:30:13+00:00,True,2012-07-18 19:38:12+00:00,0.01,,2,1,2012-07-18 19:38:12+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
516,after is not getting called when the test process is interrupted by hitting Ctrl + C,"@visionmedia what do you think about catching SIGTERM, SIGINT and SIGHUP, running the after callback function to clean things up in the test?",c4milo,NONE,2012-07-19 21:04:26+00:00,True,2015-06-07 01:31:30+00:00,1052.19,,3,26,2012-07-19 21:11:53+00:00,0.01,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
517,line diff when really messed up,char gets super annoying,tj,CONTRIBUTOR,2012-07-19 22:49:30+00:00,True,2012-09-19 16:09:32+00:00,61.72,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
518,Generate HTML test results from Node?,"I looked around a bunch for this and couldn't find what I was looking for, but maybe it's right under my nose. Is there a way to generate a page like http://visionmedia.github.com/mocha/example/tests.html (the final result) from node? Obviously the html reporter can only be run in-browser and the doc reporter seems close but it doesn't show the test run stats or pass/fail. Have I skipped over it somewhere or is this not implemented?",caseywebdev,CONTRIBUTOR,2012-07-20 13:48:54+00:00,True,2015-03-09 04:12:11+00:00,961.6,,4,5,2012-07-20 16:23:12+00:00,0.11,tj,CONTRIBUTOR,0,3,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
521,Volume of issues/pull requests,"TJ, do you need help with accepting pull requests? I've been using the HTML reporter version a lot lately and would like to contribute but was wondering if you needed help processing the issue/pull queue.
I am building all of our Frontend tests at Bitly w/ Mocha so I'd like to help make it more robust.
cheers,
joshua",nibblebot,NONE,2012-07-25 17:21:43+00:00,True,2014-07-08 02:00:18+00:00,712.36,,3,2,2012-07-25 18:07:32+00:00,0.03,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
522,Simple style issue with FireFox and the checkmark on passing tests,"There's a small issue with FireFox where the checkmark next to the passing tests looks like...

All it takes is a @charset ""UTF-8""; at the top of mocha.css to fix it.
I can do it and submit a pull request if you would like?
Just let me know what you prefer!
Thanks",jcreamer898,CONTRIBUTOR,2012-07-26 17:31:41+00:00,True,2012-07-26 17:43:04+00:00,0.01,,3,3,2012-07-26 17:33:56+00:00,0.0,rauchg,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
524,"Exclusive suites,specs","There is the issue in Pivotal Jasmine repo that well describes the problem:
jasmine/jasmine#181 (comment)
what do you think is it worth to implement?",whitecolor,NONE,2012-07-27 17:37:25+00:00,True,2012-08-22 22:51:51+00:00,26.22,,7,31,2012-07-27 21:03:41+00:00,0.14,tj,CONTRIBUTOR,0,5,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
525,increase perf for large client-side test suites,chaplinjs/chaplin#147,tj,CONTRIBUTOR,2012-07-27 22:50:00+00:00,True,2012-07-28 22:52:33+00:00,1.0,,2,14,2012-07-27 23:03:55+00:00,0.01,paulmillr,CONTRIBUTOR,0,2,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
526,HTMLCov markup and styles,"This is more a question than an issue. I don't know if this is the right place for it, but this is the first place I thought of, so...
I'm currently working on a Ruby project that uses simplecov and it's HTML output for a better idea of code coverage. It does a good job, but the design is a little lacking and there are aspects of the html-cov design and markup that you've made I think could be incorporated into the simplecov gem.
I wanted to ask if the styles as well as the markup could be ""copied"" (and slightly modified for a few other features) to simplecov to make it a more beautiful gem to work with.
Thanks!",mdespuits,NONE,2012-07-28 04:54:09+00:00,True,2012-07-28 22:54:35+00:00,0.75,,2,1,2012-07-28 22:54:35+00:00,0.75,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
527,Reduce test error output in console,"Is it possible to reduce test output in node console?
Use case:
I have a huge object and expect it to have some property. If the property is not there, mocha spec reporter outputs in a console red error:
expected {.. HUGE OBJECT ON MULTIPLE SCREENS... } to have proper ..
huge error message, but I'd rather see just line about an error and some info that would allow to identify whats happens but not huge redundant output.",whitecolor,NONE,2012-07-28 12:54:52+00:00,True,2012-07-28 22:53:39+00:00,0.42,,2,1,2012-07-28 22:53:39+00:00,0.42,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
530,Add error reason for test failing in growl notifications,Hi I use mocha extensively throughout my node application and have it watching my directory to ensure that code is working as expected. It would be great if my growl notifications could display the reason for a failed test as well. If this is not a priority could u refer me to where I can perhaps learn how to implement this myself? Thanks.,renegaed,NONE,2012-07-31 05:07:09+00:00,False,,,,5,7,2012-07-31 15:41:43+00:00,0.44,tj,CONTRIBUTOR,1,1,0,3,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
531,Double tests executing,"I am now seeing tests execute twice  on a single run. Is this by intent? Did you shift to callbacks? I couldn't track in down the in changesets.
1.3.0 runs fine
1.3.1 errors with odd runs",sjonnet19,NONE,2012-08-01 21:21:38+00:00,True,2012-08-01 21:38:43+00:00,0.01,,2,5,2012-08-01 21:22:29+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
534,after() not called on error,"describe 'Test', ->
  after -> console.error 'cleanup is not called'

  describe 'When I do something', ->
    before -> throw new Error 'BAM' # and there is a problem
    it -> assert.ok true",Almad,NONE,2012-08-07 10:57:56+00:00,True,2015-11-30 15:12:40+00:00,1210.18,,24,41,2012-08-07 15:43:13+00:00,0.2,tj,CONTRIBUTOR,0,5,0,19,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
536,Feature: option to clear require.cache between tests,"We ran into some issues with syntax like:
mocha test1.js test2.js test3.js
Since mocha runs them all in the same process/context, if test1 manipulated the test subject at all (adding a mock, or a shim, or changing state somehow), test2 and test3 inherited those changes... so running mocha test3.js would produce different results than running it with the group.
We ended up adding xargs to scripts/test in order to run the files through mocha individually. The problem with this is, you lose the summary data (# of tests, # of failed tests, etc) and have to scroll through dozens of test summaries to figure out what's going on.
If there's no good reason against this, I might hack on it myself and submit a pull. Any opposition?",hunterloftis,NONE,2012-08-09 23:57:20+00:00,True,2012-08-10 18:55:24+00:00,0.79,,5,6,2012-08-10 18:55:07+00:00,0.79,tj,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
538,Unable to install mocha using npm,"Trying to install mocha using npm results in SHA checksum error. Please find the logs below:
npm install -g mocha
npm http GET https://registry.npmjs.org/mocha
npm http 304 https://registry.npmjs.org/mocha
npm http GET https://registry.npmjs.org/-/mocha-1.3.2.tgz
npm http 404 https://registry.npmjs.org/-/mocha-1.3.2.tgz
npm ERR! Error: shasum check failed for /tmp/npm-1344759895299/1344759895299-0.139258662937209/tmp.tgz
npm ERR! Expected: ab97b4f1e5942b9fe4d4436b8bd9eeda0eb01e13
npm ERR! Actual:   3bb7b8a676e95a33a0f28f081cf860176b8f67c7
npm ERR!     at /usr/local/lib/node_modules/npm/lib/utils/sha.js:25:20
npm ERR!     at [object Object]. (/usr/local/lib/node_modules/npm/lib/utils/sha.js:49:5)
npm ERR!     at [object Object].emit (events.js:64:17)
npm ERR!     at afterRead (fs.js:1111:12)
npm ERR!     at Object.wrapper as oncomplete
npm ERR! Report this entire log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com
npm ERR!
npm ERR! System Linux 2.6.35-28-generic-pae
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""mocha""
npm ERR! node -v v0.6.6
npm ERR! npm -v 1.1.0-beta-4
npm ERR! message shasum check failed for /tmp/npm-1344759895299/1344759895299-0.139258662937209/tmp.tgz
npm ERR! message Expected: ab97b4f1e5942b9fe4d4436b8bd9eeda0eb01e13
npm ERR! message Actual:   3bb7b8a676e95a33a0f28f081cf860176b8f67c7
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     /home/jay/workspace/dev/nicklet/npm-debug.log
npm not ok",jayyvis,NONE,2012-08-12 08:32:32+00:00,True,2012-08-12 10:30:07+00:00,0.08,,1,1,2012-08-12 10:30:13+00:00,0.08,jayyvis,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
539,mocha init no longer works?,"So I saw that there was an init command, and tried it out.  This was the result
$ ./node_modules/mocha/bin/mocha init .

fs.js:338
  return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);
                 ^
Error: ENOENT, no such file or directory '/home/jadams/projects/USPTO_mindmap/node_modules/mocha/support/template.html'
    at Object.fs.openSync (fs.js:338:18)
    at Object.fs.readFileSync (fs.js:182:15)
    at Command.<anonymous> (/home/jadams/projects/xxx/node_modules/mocha/bin/_mocha:91:19)
    at Command.action (/home/jadams/projects/USPTO_mindmap/node_modules/mocha/node_modules/commander/lib/commander.js:232:8)
    at Command.EventEmitter.emit (events.js:115:20)
    at Command.parseArgs (/home/jadams/projects/USPTO_mindmap/node_modules/mocha/node_modules/commander/lib/commander.js:399:12)
    at Command.parse (/home/jadams/projects/USPTO_mindmap/node_modules/mocha/node_modules/commander/lib/commander.js:349:15)
    at Object.<anonymous> (/home/jadams/projects/USPTO_mindmap/node_modules/mocha/bin/_mocha:168:9)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)",knewter,NONE,2012-08-15 15:44:38+00:00,True,2012-08-15 16:02:03+00:00,0.01,,2,1,2012-08-15 16:02:31+00:00,0.01,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
540,struggling with checkGlobals,"So, I know I can turn off checkGlobals if I want to, or whitelist variables that I'm OK with being global.  But what I'm having a hard time with is actually tracking down what's tripping the global check.
I have a fairly simple (I think) test on one of my objects that started throwing this error, and the problem I have with it is that I can't tell from the stack trace where to look in my code.
The stack is:
Error: global leaks detected: app, options
at Runner.checkGlobals (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:127:21)
at Runner. (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:45:44)
at Runner.EventEmitter.emit (events.js:115:20)
at Runner.runTests.next (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:357:14)
at Test.Runnable.run (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runnable.js:186:5)
at Runner.runTest (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:300:10)
at Runner.runTests.next (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:346:12)
at next (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:228:14)
at Runner.hooks (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:237:7)
at next (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:185:23)
at Runner.hook (/Users/pvencill/.nvm/v0.8.6/lib/node_modules/mocha/lib/runner.js:205:5)
at process.startup.processNextTick.process._tickCallback (node.js:244:9)
But that's all in the test stack, there's nothing that tells me what part of my code is causing the leak.  Any suggestions on how to dig into that?",pvencill,NONE,2012-08-16 03:48:13+00:00,True,2012-08-16 03:51:43+00:00,0.0,,2,2,2012-08-16 03:51:43+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
541,mocha third party reporter,"I followed the wiki  to create a reporter. Then i published it to npm and included it in my project as devDependency, but i get an error after running mocha with the reporter:
$ mocha --reporter xunit-file

module.js:340
    throw err;
          ^
Error: Cannot find module './reporters/xunit-file'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Module.require (module.js:362:17)
    at require (module.js:378:17)
    at Mocha.reporter (MOCHA_ROOT/lib/mocha.js:93:20)
    at Object.<anonymous> (MOCHA_ROOT/bin/_mocha:176:7)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.runMain (module.js:492:10)
    at process.startup.processNextTick.process._tickCallback (node.js:244:9)
Seems like mocha is only looking in the ./reporters/ folder. When i am copying the reporter in this folder everything works.",matthaias,NONE,2012-08-18 12:22:52+00:00,True,2014-06-21 22:24:50+00:00,672.42,,6,16,2012-08-18 16:55:48+00:00,0.19,tj,CONTRIBUTOR,0,3,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
542,Using mocha with require('mocha'),"I'd like to use mocha this way:
var mocha = require( 'mocha' );
// Run tests in a specific path

But I haven't found any documentation about using mocha this way.
I console.log'ed require( 'mocha' ), but I couldn't really see what was what.",ralt,CONTRIBUTOR,2012-08-18 17:12:59+00:00,True,2012-08-18 21:37:05+00:00,0.18,,2,6,2012-08-18 18:25:39+00:00,0.05,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
543,Would you be interested in RSpec-style let/memoization/override?,"I'm a ruby dev and have become very accustomed to the semantics of RSpec's #let.  I wanted to emulate something similar in Mocha, so I added a little helper to my test suite.  I haven't properly packaged it up, but if you think it would be a useful addition to Mocha, I'm happy to send a Pull Request.
It looks like this:
var memo = require('./memo');

describe('Memoization', function(){
  var example = memo().is(function(){ return []; });

  describe('when accessed multiple times', function(){
    var a, b;

    beforeEach(function() {
      a = example();
      b = example();
    });

    it('returns a memoized object', function(){
      assert(a === b);
    });
  });

  describe('when modified', function(){
    beforeEach(function(){
      example().push(42);
    });

    it('returns the modified value', function(){
      assert.notStrictEqual(example(), [42]);
    });

    describe('and used in a sub example group', function(){
      it('returns the modified value', function(){
        assert.notStrictEqual(example(), [42]);
      });
    });
  });

  describe('between examples', function(){
    it('is reset', function(){
      assert.notStrictEqual(example(), []);
    });
  });

  describe('when overridden with a new value', function(){
    example.is(function(){ return ['bob']; });

    it('returns the new value', function(){
      assert.notStrictEqual(example(), ['bob']);
    });
  });

  describe('after being overridden', function(){
    it('resets to the previous state', function(){
      assert.notStrictEqual(example(), []);
    });
  });
});
In effect it memoizes a function return value for re-use through the tests, allowing the code to be lazy-executed if the function is not called, rather than using a before() hook.  It also allows stack-based overriding of the value, with a state-reset according to whatever level of the stack you're at.
  Memoization
    when accessed multiple times
      ✓ returns a memoized object 
    when modified
      ✓ returns the modified value 
      and used in a sub example group
        ✓ returns the modified value 
    between examples
      ✓ is reset 
    when overridden with a new value
      ✓ returns the new value 
    after being overridden
      ✓ resets to the previous state",d11wtq,NONE,2012-08-19 04:10:24+00:00,True,2012-08-20 00:31:40+00:00,0.85,,3,12,2012-08-19 06:21:39+00:00,0.09,d11wtq,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
544,Coverage based on uglify-js,"I think it might be possible to use bunker / node-runforcover by the Oakland peeps for test coverage. Since these modules are based on uglify-js, that would remove the dependency on the node-external jscoverage command. External commands might be hard for people to install.
Good idea?",haraldrudell,NONE,2012-08-22 06:18:46+00:00,True,2015-07-10 19:24:56+00:00,1052.55,,4,7,2012-08-22 16:08:38+00:00,0.41,tj,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
545,Shorten stack traces,"80% of the AssertionError stack trace is uninteresting mocha internal code
Suggestion:
suppress all frames from Test.Runnable.run and previous
Suggestion:

Reformat the stack trace so the first text is base-file:line:column, then Object.function, then directory.
Directory can be shortened to be relative to the deploy folder (ie. where app.js is)


I am using node assert, ui exports and spec reporter",haraldrudell,NONE,2012-08-22 09:49:55+00:00,True,2017-12-07 01:19:12+00:00,1932.65,,27,52,2012-08-22 16:09:38+00:00,0.26,tj,CONTRIBUTOR,1,6,0,20,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
546,mocha can't handle hanging code,"If you monitor with:
mocha --ui exports --reporter min --watch
and the code hangs, mocha shows a confusing blank screen
If you press ctrl-C (Linux) the terminal is messed up (no cursor, weird colors)
and mocha leaves behind a zombie process still running your buggy code.",haraldrudell,NONE,2012-08-22 09:56:23+00:00,True,2014-07-08 01:59:40+00:00,684.67,,2,1,2014-07-08 01:59:40+00:00,684.67,jonathanong,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
547,Monitor crashes on syntax error in tests,"If you monitor with:
mocha --ui exports --reporter min --watch
and write a syntax error, the mocha process crashes
It would be expected that test failure be reported instead.
stack trace:
SyntaxError: Unexpected token var
at Module._compile (module.js:437:25)
at Object.Module._extensions..js (module.js:467:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Module.require (module.js:362:17)
at require (module.js:378:17)
at Mocha.loadFiles (/home/foxyboy/Desktop/c505/node/webfiller/node_modules/mochawrapper/node_modules/mocha/lib/mocha.js:125:27)
at Array.forEach (native)",haraldrudell,NONE,2012-08-22 09:59:27+00:00,True,2012-08-30 22:55:05+00:00,8.54,,2,3,2012-08-22 16:10:38+00:00,0.26,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
548,Mocha string diff with \r\n,"Mocha string diff doesn't work well with invisible characters.  It would be nice if it could show up these differences, especially when there are no other differences.  My thinking would be that when there is a \r that's in one but not the other, you'd print the \r character as [\r] and when there's a tab in one & space(s) in the other you'd print them as [tab] and [space] respectively.
For when this isn't the issue, I think it would be a good idea not to do this if there are differences in the strings that are visible.",ForbesLindesay,CONTRIBUTOR,2012-08-22 13:58:34+00:00,True,2012-09-19 16:09:24+00:00,28.09,,3,20,2012-08-22 16:12:11+00:00,0.09,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
549,devicePixelRatio is not defined,"/cc @jfirebaugh
I tried upgrading Konacha to Mocha 1.4.0, but now the test suite fails with the following error:

It might be a problem with how Konacha is calling Mocha, but I suspect that something is going wrong on Mocha's end.
Any ideas?",joliss,CONTRIBUTOR,2012-08-23 01:00:18+00:00,True,2012-08-23 01:45:24+00:00,0.03,,2,2,2012-08-23 01:44:12+00:00,0.03,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
550,JavaScript Source Maps Support,"Maybe it's possible to use source maps for better ""view source"" and doc reporter when testing with minified JS or languages that compile to JS.
http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/
Thank you.",rjanicek,NONE,2012-08-23 05:34:49+00:00,True,2013-08-13 19:18:35+00:00,355.57,,15,20,2013-04-21 02:22:10+00:00,240.87,lavrton,NONE,1,1,0,12,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
552,How to make a failing test pass,"I'm doing some trickery in order to verify whether any assertions were made in a test or not. If no assertions were made, the tests will fail. It's working out nicely, but I can't think of a way to test this ""runner"" if you will. Basically, some tests fail (as they should) because no assertions were made, but in the reporter they show up as failed while I would like to have them show as passed. Is there anyway I can do this?",mstade,NONE,2012-08-23 11:15:20+00:00,True,2012-08-30 23:36:38+00:00,7.51,,2,4,2012-08-24 17:47:38+00:00,1.27,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
553,Option to let exceptions propagate,"Mocha's browser runner always catches exceptions. I wish it could let them propagate so I can see the stack trace in the JS console.
The line numbers Mocha displays are useful when only (1) you have the file open in the editor, and (2) it's not compiled from CoffeeScript. When either of these conditions isn't met, they turn pretty useless, and you'd really prefer to have a linked stack trace like the console in Chrome or Firebug gives you.
See e.g. http://i.imgur.com/CQV37.png - that trace is not very usable, because now I have to go hunting for the offending line.",joliss,CONTRIBUTOR,2012-08-23 21:32:41+00:00,True,2015-09-29 15:50:30+00:00,1131.76,,15,20,2012-08-23 21:35:24+00:00,0.0,joliss,CONTRIBUTOR,0,6,0,8,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
554,"describe(""constructor"") causes markdown reporter to bomb","Error output:
TypeError: Cannot call method 'fullTitle' of undefined
at stringifyTOC (/Users/mandarin/code/Kilgore/node_modules/mocha/lib/reporters/markdown.js:58:72)
at stringifyTOC (/Users/mandarin/code/Kilgore/node_modules/mocha/lib/reporters/markdown.js:60:14)
at stringifyTOC (/Users/mandarin/code/Kilgore/node_modules/mocha/lib/reporters/markdown.js:60:14)
at generateTOC (/Users/mandarin/code/Kilgore/node_modules/mocha/lib/reporters/markdown.js:68:12)
at new Markdown (/Users/mandarin/code/Kilgore/node_modules/mocha/lib/reporters/markdown.js:71:3)
at Mocha.run (/Users/mandarin/code/Kilgore/node_modules/mocha/lib/mocha.js:232:18)
at Object. (/Users/mandarin/code/Kilgore/node_modules/mocha/bin/_mocha:322:7)
at Module._compile (module.js:432:26)
at Object..js (module.js:450:10)
at Module.load (module.js:351:31)
at Function._load (module.js:310:12)
at Array.0 (module.js:470:10)
at EventEmitter._tickCallback (node.js:192:40)
Changing the string to ""the constructor"" makes it happy.",MandarinConLaBarba,NONE,2012-08-24 20:44:00+00:00,True,2014-12-15 01:04:17+00:00,842.18,,3,3,2014-11-11 12:43:35+00:00,808.67,PavelVanecek,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
556,actual-expected string printout buggy,"// mocha-fail.js
/*
invoke like:
mocha --ui exports mocha-fail.js

DOES NOT ECHO MISISNG NEWLINE
- there are many otehr situations when this happens

EXPECTED: ""scripts"":<newline>   {
- in the printout
*/
exports.f = function () {
    var fourSpaces = '   '
    require('assert').equal(
        '""scripts"":' + fourSpaces + '{\n}\n}',
        '""scripts"":\n' + fourSpaces + '{\n}\n}'
        )
}
/*
issue: output is:
  ․

  ✖ 1 of 1 test failed:

  1)  f:

      actual expected

      ""scripts"":
          {
      }
      }
*/",haraldrudell,NONE,2012-08-25 08:31:30+00:00,True,2012-08-25 21:47:55+00:00,0.55,,2,1,2012-08-25 21:47:55+00:00,0.55,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
560,improve Safari performance,tests (or maybe my lib) are roughly 5x slower in safari than FF / Chrome...,tj,CONTRIBUTOR,2012-08-28 04:30:19+00:00,True,2012-09-21 17:52:51+00:00,24.56,,1,1,2012-09-19 02:00:57+00:00,21.9,tj,CONTRIBUTOR,0,1,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
561,add browser support for Markdown reporter,"ATM you have to hack the process.stdout.write's into console.log's, so our tail.js could easily just add process.stdout.write",tj,CONTRIBUTOR,2012-08-28 05:37:37+00:00,True,2017-10-17 04:29:13+00:00,1875.95,,2,0,,,,,0,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
564,Spec reporter shows 'null' line for slow tests in zsh,"In my application, I'm using mocha for a good amount of HTTP request route testing. Many of these authenticate to third party sites and thus have run times in the hundreds of ms.
While I love the spec reporter view, I'm seeing the async test cases that run for a while show up in oh-my-zsh as follows:
User Routes - Authenticating Twitter
✓ POST /user/connect/twitter without token should return 500
✓ POST /user/connect/twitter without secret should return 500
✓ POST /user/connect/twitter with invalid token / secret should return 500
◦ POST /user/connect/twitter with valid creds should return 200: null
✓ POST /user/connect/twitter with valid creds should return 200 (480ms)
Not sure if the issue here is with ZSH or with the spec reporter itself, but it shouldn't be doubling up the line for a long running async test. This only seems to happen after 400ms passes, facebook's tests are long running but don't show the strange multi-line behavior:
User Routes - Authenticating Facebook
✓ POST /user/connect/facebook without token should return 500
✓ POST /user/connect/facebook with invalid token should return 500
✓ POST /user/connect/facebook with valid creds should return 200 (356ms)
Package details:
├─┬ mocha@1.4.0
│ ├── commander@0.6.1
│ ├── debug@0.7.0
│ ├── diff@1.0.2
│ ├── growl@1.5.1
│ ├─┬ jade@0.26.3
│ │ └── mkdirp@0.3.0
│ └── mkdirp@0.3.3",mfrobben,NONE,2012-08-28 20:37:30+00:00,True,2012-08-29 15:54:36+00:00,0.8,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
567,perf regression,"I'll have to take a closer look, the Express tests are much slower but it may be caused by something else",tj,CONTRIBUTOR,2012-09-01 22:46:08+00:00,True,2012-09-01 22:46:57+00:00,0.0,,1,1,2012-09-01 22:46:57+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
572,Different result for `mocha tests/*` and `mocha  tests/a.js tests/b.js`,"I have all by tests under my /test/ folder, I could pass all the test by running them one by one:
mocha tests/a.js tests/b.js tests/c.js tests/d.js
But when I use the * to run them in a concat line I fails one of the tests
mocha tests/*.js
I am wondering how the mocha tests/*.js is interpreted?",yangchenyun,NONE,2012-09-05 03:39:29+00:00,True,2012-09-05 03:57:26+00:00,0.01,,3,5,2012-09-05 03:49:39+00:00,0.01,nouh,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
573,refactor with component(1),"so it's installable as a component and we can offload some of the junk in lib/browser. requires a few steps:

use inherit() component
component build --standalone
find a stupid way to stub ""tty"" etc
tuck tail.js somewhere
profit",tj,CONTRIBUTOR,2012-09-06 04:08:50+00:00,True,2014-07-08 01:59:01+00:00,669.91,,4,12,2013-04-22 10:50:44+00:00,228.28,regular,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
574,include a js file?,"hi does mocha only supports module loading with node?
can it be use just for testing a single js file
eg:
human.js    that returns a  H = new human( name )

test.js          it  'should return some names', ->  H.name",Devric,NONE,2012-09-06 15:04:32+00:00,True,2012-09-06 15:58:13+00:00,0.04,,2,2,2012-09-06 15:55:21+00:00,0.04,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
575,how to run requirejs modules with mocha tests in terminal,"on a tutorial, just source the file and create a namespace and we can run mocha on that test file like so
{TaskList, Task} = require '../task'
but with requirejs, all the files are wrapped within define(['some script'], function('come callback') {} )
how do i require and test the stuff within the define function of that module? inside the terminal",Devric,NONE,2012-09-07 04:40:53+00:00,True,2012-09-07 16:27:53+00:00,0.49,,2,1,2012-09-07 16:27:53+00:00,0.49,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
578,Missing 'ms' in mocha.js,"I recently built my own mocha.js (for the browser) using make. I am now getting 'Uncaught Error: failed to require ""ms""' from Chrome. I noticed that 'ms' just became a new dep. Was this not factored into the build for mocha.js ?",alextucker,NONE,2012-09-10 01:56:02+00:00,True,2013-01-01 22:14:50+00:00,113.85,,4,3,2012-09-10 02:05:57+00:00,0.01,rauchg,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
580,timeout of Infinityms exceeded,haha..,tj,CONTRIBUTOR,2012-09-12 20:18:41+00:00,True,2012-09-12 20:19:23+00:00,0.0,,1,1,2012-09-12 20:19:22+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
581,an error in a beforeEach hook causes the test run to terminate prematurely,"Testcase: https://gist.github.com/3711350
As you can see from the output, only one example was executed. I would have expected the first example to fail, and then the second two to execute and pass.",jfirebaugh,CONTRIBUTOR,2012-09-13 01:53:22+00:00,True,2013-12-02 20:12:59+00:00,445.76,,11,16,2012-09-13 18:08:08+00:00,0.68,tj,CONTRIBUTOR,0,3,0,7,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
582,"IE6,7,8 fails because of Array#forEach",,hax,NONE,2012-09-13 09:27:06+00:00,True,2012-09-21 15:42:21+00:00,8.26,,3,4,2012-09-13 16:14:22+00:00,0.28,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
584,Support for Bower,"I think this is more on them than it is on you, given your spec was first, they're using your component.json filename, etc.... but please consider working with the Twitter folks to let Mocha install through Bower.
bower/bower#56",Iristyle,NONE,2012-09-15 14:46:44+00:00,True,2012-09-15 17:27:35+00:00,0.11,,3,3,2012-09-15 17:27:35+00:00,0.11,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
586,Sandbox utility,"See https://github.com/caolan/nodeunit#sandbox-utility
I think it's very useful. Hope mocha can support it.",hax,NONE,2012-09-17 10:01:30+00:00,True,2012-09-18 18:08:35+00:00,1.34,,2,1,2012-09-18 18:08:35+00:00,1.34,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
587,Cross test pollution through the runnable context,"When building specs, we tend to build up our code under test and attach it to the running context. Sadly, we've noticed that this context is shared across test runs. Here's a minimal failing spec that shows the issue:
var assert= require('assert');
describe('Context Pollution', function(){
    it('First Pass, setting property on context', function(){
      this.pollution = true;
    });

    it('Second Pass, property should not be set', function(){
      assert.equal(undefined, this.pollution);
    });
});
As a stop-gap fix, I added an event handler to the 'test' event which cleans out the test context (keeping your internal keys). I'll put up a pull request with this just in case you like that approach.",JamesMaroney,NONE,2012-09-20 17:31:06+00:00,True,2012-09-20 18:20:36+00:00,0.03,,5,11,2012-09-20 18:20:36+00:00,0.03,tj,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
590,Allow custom color scheme,"It should be possible to override the default color scheme defined in lib/reporters/base.js
The comment for the color function says this is possible:
/**
 * Color `str` with the given `type`,
 * allowing colors to be disabled,
 * as well as user-defined color
 * schemes.
 *
 */

var color = exports.color = function(type, str) {
  if (!exports.useColors) return str;
  return '\u001b[' + exports.colors[type] + 'm' + str + '\u001b[0m';
};

, but I haven't found a way to override the default colors (The types that are displayed in 90 are invisible on the Solarized Dark terminal theme).",balinterdi,NONE,2012-09-25 09:38:43+00:00,True,2012-12-15 23:08:41+00:00,81.56,,13,25,2012-09-25 15:55:58+00:00,0.26,tj,CONTRIBUTOR,1,3,0,8,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
591,Allow to skip() test  inside the function,"In my tests some times test need to run only if certain conditions are met, for example previous test passed (where not skipped like load and save consequent tests).
It would be great if inside test function I could do something like that:

if (!this.fit) this.skip() // and mocha would skip the test.",whitecolor,NONE,2012-09-27 06:49:12+00:00,True,2012-09-27 22:00:57+00:00,0.63,,26,50,2012-09-27 22:00:57+00:00,0.63,tj,CONTRIBUTOR,1,7,0,18,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
592,Possiblity of SandBoxed Tests,"Would it be possible to implement a flag like --sandboxed that will run each test suite in it's own VM.  A feature like this would really make mocking easier, even possible in some cases.",devdazed,CONTRIBUTOR,2012-09-28 22:00:36+00:00,True,2012-12-16 00:45:50+00:00,78.11,,3,6,2012-09-28 22:22:41+00:00,0.02,tj,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
596,xit should set test state to skipped,"Running under Testacular, which has a small wrapper function in it's Mocha adapter.  It uses this to standardize output from Jasmine, Mocha, Angular-Scenario, etc.
I could just use test.pending to set skipped to true... but wondering if perhaps test.state should be set to ""skipped"" by Mocha.
runner.on('test end', function(test) {
      var result = {
        id: '',
        description: test.title,
        suite: [],
        success: test.state === 'passed',
        skipped: false,
        time: test.duration,
        log: test.$errors || []
      };

      var pointer = test.parent;
      while (!pointer.root) {
        result.suite.unshift(pointer.title);
        pointer = pointer.parent;
      }

      tc.result(result);
    });
Before I do a pull, was looking for thoughts since I'm new to Mocha, etc.",Iristyle,NONE,2012-10-03 13:30:25+00:00,True,2015-03-09 03:46:34+00:00,886.59,,4,3,2013-02-18 23:05:11+00:00,138.4,jugglinmike,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
599,suite.timeout() etc,"describe(..., function(){
  this.timeout('5s');
  ...
  slow stuff
})",tj,CONTRIBUTOR,2012-10-03 23:28:48+00:00,True,2012-10-09 00:15:49+00:00,5.03,,4,6,2012-10-04 02:06:57+00:00,0.11,hermanjunge,NONE,0,3,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
606,Wait for db connection or other stuff,"Related to issue #268.
I've tried the suggested hacks to get things working, and didn't manage. I'm a  complete beginner with Node, so there might be things I haven't understood yet ... but shouldn't that code work, and wait for the db connection to run the tests ???
var mongo = require('mongodb')
  , dbServer = new mongo.Server('localhost', mongo.Connection.DEFAULT_PORT, {auto_reconnect: true})
  , db = new mongo.Db('testDb', dbServer)
  , assert = require('assert');

db.open(function(err, db) {
  waiting = 0;

  describe('Array', function(){

    describe('#indexOf()', function(){
      it('should return -1 when the value is not present', function(){
        assert.equal(-1, [1,2,3].indexOf(1)); // Fails
      });
    });

  });

});

var waiting = 1;
function wait_wait() {
  console.log('waiting', waiting);
  if (waiting > 0) setTimeout(wait_wait, 50);
}
wait_wait();
I know it's not Mocha's job to do that ... but still that would be cool for ease of use to have a standard solution to tackle this kind of problem, cause this is probably one of the most common patterns when testing backend code (open db connection, run tests, close). Node.js hangs out when you start it, so there's not this kind of problem. Maybe mocha could hangout as well until you tell it to stop doing so ?",sebpiq,NONE,2012-10-10 13:23:45+00:00,True,2012-10-10 15:41:37+00:00,0.1,,5,7,2012-10-10 13:30:52+00:00,0.0,hermanjunge,NONE,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
607,Due to asych nature of AMD (RequireJS2.1) Mocha tests are run before deps are resolved,"Here's a blog post on the issue. http://www.poeze.nl/wp/?p=139
.",samdelagarza,NONE,2012-10-10 17:10:50+00:00,True,2012-10-10 17:45:18+00:00,0.02,,3,3,2012-10-10 17:45:18+00:00,0.02,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
608,Incorrect expect log is shown on report,"I am using mocha for testing in nodejs and have a test as such:
describe('Interaction', function() {

    describe('#getEmptyData()', function() {

      it('Should get an empty array of offers', function(done) {
          expect(myData).to.have.property('status').and.equal('success');
          expect(myData).to.have.property('results').and.to.have.property('data').to.have.length(0);
          done();
      });
   });
});
This is great and they will fail correctly, but when the second expect fails due to the length being '1' it logs out as if the first expect failed instead.
[/usr/local/lib/node_modules/mocha/lib/reporters/base.js:282]   ✖ 1 of 35 tests failed:

[/usr/local/lib/node_modules/mocha/lib/reporters/base.js:190]   1) Interaction #getEmptyData() Should get an empty array:
     expected { Object (message, actual, ...) } to have a property 'status'

Am I doing something wrong or is this a bug?",unusualbob,NONE,2012-10-11 17:46:25+00:00,True,2012-10-15 22:52:31+00:00,4.21,,3,3,2012-10-11 19:20:36+00:00,0.07,unusualbob,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
609,npm test mocha fails,"I tried to find if this was already reported, so please accept my apolgoies if this has already been reported. I just installed mocha 1.6.0 via npm (v.0.8.11) and then ran npm test mocha. I received the following error:
> mocha@1.6.0 test /root/node_modules/mocha
> make test-all


fs.js:524
  return binding.stat(pathModule._makeLong(path));
                 ^
Error: ENOENT, no such file or directory 'test/acceptance/interfaces/bdd.js'
    at Object.fs.statSync (fs.js:524:18)
    at lookupFiles (/root/node_modules/mocha/bin/_mocha:387:17)
    at /root/node_modules/mocha/bin/_mocha:264:24
    at Array.forEach (native)
    at Object.<anonymous> (/root/node_modules/mocha/bin/_mocha:263:6)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.runMain (module.js:492:10)
    at process.startup.processNextTick.process._tickCallback (node.js:244:9)
make: *** [test-bdd] Error 1
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0",,NONE,2012-10-11 21:23:46+00:00,True,2012-10-15 22:51:24+00:00,4.06,,1,1,2012-10-15 22:51:24+00:00,4.06,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
611,Update documentation for jscoverage/html-cov,"Using Ubuntu 12.04 and running sudo apt-get install jscoverage installs a version of jscoverage that, when used together with mocha & the html-cov reporter, creates code that are ""escaped"" as shown here:

Compiling and installing node-jscoverage from source seems to have fixed it though, but it should be noted that this version of jscoverage is preferred for usage with mocha, if that now is the case.",jockster,NONE,2012-10-12 18:21:09+00:00,True,2012-10-18 16:44:32+00:00,5.93,,2,3,2012-10-18 16:44:32+00:00,5.93,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
612,Debug just failed tests,"I was wondering if there could be an additional option for vows that would allow debugging but only of failed tests.
This would allow me to have mocha running in one window spitting out all the results but another terminal window(/pane) could be responsible for letting me debug against the failed tests.
This would allow a workflow:

Modify the code or tests
Mocha is watching and triggers the tests
The new step is triggered for any failed tests
Debug the first failed test and hopefully then fix the code/tests which triggers a run of all tests.",colin-jack,NONE,2012-10-14 20:08:14+00:00,True,2017-10-17 04:30:11+00:00,1828.35,,5,7,2012-10-15 23:13:50+00:00,1.13,tj,CONTRIBUTOR,0,1,0,2,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
613,Should.js optional description messages are lost when doing string diffs.,When two strings are failing on should.eql the printed message from Mocha does not display the optional error message which can lead to some difficulty tracking down what the error was.,kpdecker,NONE,2012-10-15 04:02:05+00:00,True,2012-10-15 23:14:33+00:00,0.8,,6,10,2012-10-15 23:14:22+00:00,0.8,tj,CONTRIBUTOR,0,1,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
617,"-r produces ""Cannot find module""","Windows 7, mocha 1.6.0
pascal@PASCAL-PC /c/Alcidion/Miya/Web/Web.SampleApplications/Harness/test/SeleniumTests (develop)
$ mocha .



  ? 1 test complete (1 ms)


pascal@PASCAL-PC /c/Alcidion/Miya/Web/Web.SampleApplications/Harness/test/SeleniumTests (develop)
$ mocha . -r tdd

module.js:340
    throw err;
          ^
Error: Cannot find module 'tdd'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Module.require (module.js:362:17)
    at require (module.js:378:17)
    at Command. (c:\Users\pascal\AppData\Roaming\npm\node_modules\mocha\bin\_mocha:151:3)
    at Command.EventEmitter.emit (events.js:123:20)
    at Command.parseOptions (c:\Users\pascal\AppData\Roaming\npm\node_modules\mocha\node_modules\commander\lib\commander.js:475:14)
    at Command.parse (c:\Users\pascal\AppData\Roaming\npm\node_modules\mocha\node_modules\commander\lib\commander.js:347:21)
    at Object. (c:\Users\pascal\AppData\Roaming\npm\node_modules\mocha\bin\_mocha:170:9)
    at Module._compile (module.js:449:26)",pascalopitz,NONE,2012-10-17 06:08:18+00:00,True,2012-10-17 06:15:05+00:00,0.0,,1,1,2012-10-17 06:15:02+00:00,0.0,pascalopitz,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
618,HTML ?grep not reflected by progress indicator,,tj,CONTRIBUTOR,2012-10-18 21:42:33+00:00,True,2012-10-29 21:51:37+00:00,11.01,,2,1,2012-10-29 21:49:56+00:00,11.01,nathanalderson,NONE,0,0,0,1,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
619,Executing a test run fixture before any tests,"One feature I'd find useful is the ability to run a file before any tests, the code in that file being a test run fixture that does some sort of setup.
I realise I can get this behavior by requiring the fixture file from each of my test files, but I'd prefer not to have to not least as it makes moving the test files around harder (paths to the fixture ending up broken).
I was thinking this could be controlled using another mocha option. Only slight complexity I can think of would be if the test fixture file was inside the directory in this sort of situation:
mocha -R spec spec/ -w -G --recursive --runFixture spec/testFixture",colin-jack,NONE,2012-10-19 10:30:34+00:00,True,2012-10-19 20:13:56+00:00,0.41,,2,6,2012-10-19 18:35:32+00:00,0.34,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
620,getting name of test,"Hi,
describe got a name '#create', is there a way to access this from beachEach?
beforeEach (done) ->
console.log 'test'
done()
describe ""#create"", ->",angelochen960,NONE,2012-10-20 07:07:22+00:00,True,2012-10-24 06:27:29+00:00,3.97,,2,1,2012-10-20 18:28:15+00:00,0.47,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
621,false positive async tests,"the majority of tests I write are async. when i forget to add the done param to describe or it, the test will pass with a false positive b/c its properly interpreted as not an async test (user error).
I'd like to introduce a new command line flag --async or some such, that forces each test to be async and so require calling done() which would cause us to be notified with a timeout when there is something wrong with the tests.
thoughts?",aheckmann,CONTRIBUTOR,2012-10-23 04:14:24+00:00,True,2012-10-31 17:56:59+00:00,8.57,,4,14,2012-10-23 06:11:44+00:00,0.08,hermanjunge,NONE,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
624,calling an async function in 'before',"I need to empty a redis db before the test 'create_profile', using redis client, i selected database number 15
and delete all the keys, but seems that the test 'create_profile'  already running
before emptydb is finish, how to ensure that test will run only after the 'before' event?
thanks,
emptydb = (msg, done) ->
rclient.select 15,  (err, reply) ->
rclient.keys ""*"", (err, all_keys) ->
for k in all_keys
rclient.del k
done()
describe ""dao"", ->
before (done) ->
emptydb ""empty db in db1"", done
describe ""#create_profile"", ->
it ""should create a profile"", (done) ->
dao.create_profile profile_info, (err, db_key) ->
should.not.exist err
done()",angelochen960,NONE,2012-10-24 06:33:18+00:00,True,2012-10-24 15:58:10+00:00,0.39,,2,1,2012-10-24 15:58:10+00:00,0.39,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
627,Add test file location on timeout exceeded test failure,"This is a problem when running a directory of multiple tests.
Test failures on assertion or exception give the correct file from the stack trace.
A timeout however leaves us grepping for the correct file:
  2) lophilo watch watching...:
     Error: timeout of 2000ms exceeded
      at Object.<anonymous> (/home/rngadam/local/node/lib/node_modules/mocha/lib/runnable.js:158:14)
      at Timer.list.ontimeout (timers.js:101:19",rngadam,NONE,2012-10-26 05:42:35+00:00,True,2018-03-22 22:50:34+00:00,1973.71,,5,2,2012-12-19 01:19:06+00:00,53.82,ericedem,NONE,0,0,0,2,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
628,Recursive object structures cause stack overflow in deep equal,"As far as I can tell this is handled in QUnit by simply ignoring recursive properties. Here's a simple example to reproduce the issue.
# passes with qunit
test 'stack', ->
  a = {}
  b = {a: a, x: 3}
  a.b = b

  c = {}
  d = {c: c, x: 3}
  c.b = d

  deepEqual a, c

# error with mocha
test 'stack', ->
  a = {}
  b = {a: a, x: 3}
  a.b = b

  c = {}
  d = {c: c, x: 3}
  c.b = d

  a.should.deep.equal c
Changing d = {c: c, x: 3} to d = {c: a, x: 3} still doesn't fail in QUnit. This behavior is good enough I think. I hope to follow up with a pull request if you agree with this, and when I have a bit more time :)",abesto,NONE,2012-10-28 09:07:10+00:00,True,2012-10-28 11:21:15+00:00,0.09,,2,2,2012-10-28 11:21:15+00:00,0.09,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
629,mocha -w  indefinitely creates new lines on Windows,"When I run mocha -w on my Windows machine (Win7 Home Premium x64, node v0.8.14), the ""Watching"" spinner that appears on 'nix systems just keeps adding more lines to the terminal:",casey-chow,NONE,2012-10-29 00:33:16+00:00,True,2013-02-19 23:19:06+00:00,113.95,,5,5,2012-10-29 16:05:31+00:00,0.65,tj,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
634,Mocha Coverage - Jenkins integration ,"Are there any plans, or is there any documentation, to show coverage reports in Jenkins?",BoyCook,NONE,2012-11-01 19:49:07+00:00,True,2012-11-01 23:07:19+00:00,0.14,,3,5,2012-11-01 20:53:46+00:00,0.04,sjonnet19,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
637,client-side grep does not encode #,,tj,CONTRIBUTOR,2012-11-03 19:55:57+00:00,True,2012-11-03 20:00:53+00:00,0.0,,1,0,,,,,0,0,0,0,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
638,"swap ""replay"" button with viewing source","currently you click suite labels to re-run, we should do the same with test-cases to keep things consistent, then a ""view"" link to check the source",tj,CONTRIBUTOR,2012-11-03 20:04:59+00:00,True,2017-10-17 04:32:51+00:00,1808.35,,3,0,,,,,0,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
639,filtering of failed tests should retain state on refresh,"we should be altering the query-string for this, not just holding state in the dom",tj,CONTRIBUTOR,2012-11-04 06:06:09+00:00,True,2017-10-17 04:33:13+00:00,1807.94,,3,0,,,,,0,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
646,remove instanceof occurrences,"Object.prototype.toString.call(err) === ""[object Error]"" etc: jfirebaugh/konacha#74",tj,CONTRIBUTOR,2012-11-06 21:22:39+00:00,True,2012-11-08 17:25:12+00:00,1.84,,2,1,2013-01-06 02:39:41+00:00,60.22,gregrperkins,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
647,--growl not working on mountain lion,"I had a poke around, and it looks like the growl module has been updated, and the package.json for mocha has been updated - but there's just no npm release.
Any chance of pushing out a 1.6.1?
Cheers!",glenjamin,CONTRIBUTOR,2012-11-07 09:25:33+00:00,True,2012-11-07 18:31:56+00:00,0.38,,2,1,2012-11-07 18:31:56+00:00,0.38,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
648,Failure in before of earlier test suite causes later suites to not execute,"With the following in a single file I'd expect to see 1 pass/1fail for the first suite, 1 failure for the second suite and then 1 pass/1 fail for the final suite. Instead, the output I get is 2 failure out of 6 tests, and the console output suggests that everything after the failure in the before() call in the second suite didn't execute.
Is this expected behavior?
describe(""These will pass"", function(){
  it(""async"", function(done){
    console.log(""test 1"");
    done();
  });

  it(""sync"", function(){
      console.log(""test 2"");
  });
});


describe(""Failing a before in a suite."", function () {
  before(function(done) {
   console.log(""in first suite's before"");
   done(new Error('Fail'));
  });
  describe(""these fail"", function(){
      it(""sync test"", function(){
        console.log(""test 3"");
      });

      it(""async test"", function(done){
        console.log(""test 4"");
        done();
      });
  });
});

describe(""These don't execute, though, they are counted"", function(){
  it(""async"", function(done){
    console.log(""test 5"");
    done();
  });

  it(""sync"", function(){
      console.log(""test 6"");
  });
});

The output from this when running mocha on the command line is:
mocha
test 1
test 2
in first suite's before
✖ 2 of 6 tests failed:


These will pass sync:
Error: fail
at Context. (/Users/billmag/code/github/konacha/tmp/test.js:9:11)
at Test.Runnable.run (/opt/local/lib/node_modules/mocha/lib/runnable.js:200:32)
at Runner.runTest (/opt/local/lib/node_modules/mocha/lib/runner.js:307:10)
at Runner.runTests.next (/opt/local/lib/node_modules/mocha/lib/runner.js:353:12)
at next (/opt/local/lib/node_modules/mocha/lib/runner.js:235:14)
at Runner.hooks (/opt/local/lib/node_modules/mocha/lib/runner.js:244:7)
at next (/opt/local/lib/node_modules/mocha/lib/runner.js:192:23)
at Runner.hook (/opt/local/lib/node_modules/mocha/lib/runner.js:212:5)
at process.startup.processNextTick.process._tickCallback (node.js:244:9)


Failing a before in a suite. ""before all"" hook:
Error: Fail
at Context. (/Users/billmag/code/github/konacha/tmp/test.js:17:9)
at Hook.Runnable.run (/opt/local/lib/node_modules/mocha/lib/runnable.js:187:15)
at next (/opt/local/lib/node_modules/mocha/lib/runner.js:201:10)
at Runner.hook (/opt/local/lib/node_modules/mocha/lib/runner.js:212:5)
at process.startup.processNextTick.process._tickCallback (node.js:244:9)",billmag,NONE,2012-11-07 20:08:21+00:00,True,2012-11-07 21:02:42+00:00,0.04,,3,3,2012-11-07 20:23:20+00:00,0.01,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
649,Using multiple greps,"I tried using multiple greps to run specific suites. It appears that the two greps I used (-g @helpers -g date) resulted in that suites featuring either of the greps were run instead of suites that featured both, which I expected.
Is this functionality already there and I am doing something wrong?
If not, I would like to propose this as a future enhancement.",jockster,NONE,2012-11-08 10:58:53+00:00,True,2015-03-08 21:43:37+00:00,850.45,,3,4,2012-11-08 18:58:33+00:00,0.33,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
651,CoffeeScript: Incorrect line numbers in errors,"When I get exceptions running Mocha, the line numbers reported correspond to the generated JavaScript, not the line in the CoffeeScript source.",mpj,NONE,2012-11-09 13:19:42+00:00,True,2012-11-09 17:07:27+00:00,0.16,,10,14,2012-11-09 17:07:27+00:00,0.16,tj,CONTRIBUTOR,0,1,0,9,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
653,Callbacks & errors,"I have some functions that returns an array of errors instead of a single Error instance. To test this functions I simply wrap this array into a new Error instance:
fn (function (errors){
    if (errors) return done (new Error (errors));
});
But this is very ugly and I want to simply call:
fn (done);
I think it's more practical to consider an error any non-null or non-undefined object.",gagle,NONE,2012-11-10 22:49:25+00:00,True,2012-11-11 00:05:43+00:00,0.05,,2,3,2012-11-11 00:05:43+00:00,0.05,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
655,Mocha stops `--watch`-ing when a custom `--compilers` produce error.,"Right now mocha will just outright crash if there is a compilation error in one of the test files.
This includes changes during a --watch session as well. Thus breaking your TDD flow.
Red -> Edit -> Green -> Edit -> Red -> Edit -> Syntax error -> Mocha crashed.
Mocha should stills watch your files and restart even when there is a compilation error.
You can test this with the coffee script compiler.",chakrit,NONE,2012-11-13 09:01:17+00:00,True,2012-12-03 09:55:43+00:00,20.04,,2,3,2012-11-15 18:25:52+00:00,2.39,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
656,Add `--prof` option for node,,alFReD-NSH,NONE,2012-11-15 05:09:41+00:00,True,2012-11-28 23:43:46+00:00,13.77,,3,5,2012-11-18 22:11:44+00:00,3.71,wilmoore,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
658,Scope in before() & beforeEach() methods,"I've tried doing below and found out that the scope seems a little strange to me. Shouldn't all before, beforeEach, after & afterEach methods share the same scope?
describe ""my test"", ->
beforeEach -> this.myVar = true

describe ""suite"", ->

  before -> console.log this.myVar # => undefined

  beforeEach -> console.log this.myVar # => true

  it ""tests stuff"", -> assert.equal true, true",jockster,NONE,2012-11-15 10:03:33+00:00,True,2012-11-15 18:31:15+00:00,0.35,,2,2,2012-11-15 18:22:37+00:00,0.35,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
660,Odd async behavior...,"When I run this test suite...
var throttle = require('../algorithm');
var expect = require('chai').expect;

describe('algorithm', function() {
  it('throttle', function(done) {
    var counter = 0;
    var incr = function(){ counter++; };
    var throttledIncr = throttle(incr, 100);
    throttledIncr(); throttledIncr(); throttledIncr();

    setTimeout(throttledIncr, 70);
    setTimeout(throttledIncr, 120);
    setTimeout(throttledIncr, 140);
    setTimeout(throttledIncr, 190);
    setTimeout(throttledIncr, 220);
    setTimeout(throttledIncr, 240);

    setTimeout(function() {
      expect(counter).to.equal(1)  
    }, 30);

    setTimeout(function() {
      expect(counter).to.equal(4);
    }, 400);

    setTimeout(function() {
      done();
    }, 410);
  });

  it('throttle arguments', function(done) {
    var value = 0;
    var update = function(val){ value = val; };
    var throttledUpdate = throttle(update, 100);
    throttledUpdate(1); throttledUpdate(2); throttledUpdate(3);
    setTimeout(function(){ throttledUpdate(4); }, 120);
    setTimeout(function(){ throttledUpdate(5); }, 140);
    setTimeout(function(){ throttledUpdate(6); }, 250);

    setTimeout(function() {
      expect(value).to.equal(1);
    }, 40);

    setTimeout(function() {
      expect(value).to.equal(6);
    }, 400);

    setTimeout(function() {
      done();
    }, 410);
  });

  it('throttle once', function(done) {
    var counter = 0;
    var incr = function(){ return ++counter; };
    var throttledIncr = throttle(incr, 100);
    var result = throttledIncr();
    setTimeout(function(){
      expect(result).to.equal(1);
      expect(counter).to.equal(1);
      done();
    }, 220);
  });

  it('throttle twice', function(done) {
    var counter = 0;
    var incr = function(){ counter++; };
    var throttledIncr = throttle(incr, 100);
    throttledIncr(); throttledIncr();
    setTimeout(function(){ expect(counter).to.equal(2); done(); }, 1000);
  });

});
It fails them well before a full second. Which is odd because the ""throttle twice"" test has a 1 second timeout. If I remove, the above three tests, mocha will actually treat throttle twice like an asynchronous test (like it should). For some reason though, when the above tests are run before ""throttle twice"" it runs it immediately and passes it.
Removing the tests above it causes mocha to treat this test as an asynchronous test. Because it is...
var throttle = require('../algorithm');
var expect = require('chai').expect;

describe('algorithm', function() {

  it('throttle twice', function(done) {
    var counter = 0;
    var incr = function(){ counter++; };
    var throttledIncr = throttle(incr, 100);
    throttledIncr(); throttledIncr();
    setTimeout(function(){ expect(counter).to.equal(2); done(); }, 1000);
  });

});
Removing the done() in the ""throttle twice"" doesn't result in a timeout either. Leading me to believe that for some reason mocha doesn't think ""throttle twice"" is an asynchronous test despite having done in the parameter list.
This is some really odd and maddening behavior. Perhaps it's my test specifically. Quite confused in terms of what is happening.
Any help would be greatly appreciated.",iammerrick,CONTRIBUTOR,2012-11-17 01:54:49+00:00,True,2015-06-07 01:36:57+00:00,931.99,,4,6,2012-11-17 01:55:58+00:00,0.0,iammerrick,CONTRIBUTOR,0,4,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
662,Bug: if('failed' == runnable.state) - Cannot read state of undefined,"Not sure what I did wrong, but I got this:
/users/alexandruvladutu/www/logit/node_modules/mocha/lib/runner.js:409
if ('failed' == runnable.state) return;
^
TypeError: Cannot read property 'state' of undefined
at Runner.uncaught (/users/alexandruvladutu/www/logit/node_modules/mocha/lib/runner.js:409:27)
at process.Runner.run (/users/alexandruvladutu/www/logit/node_modules/mocha/lib/runner.js:456:10)
at process.EventEmitter.emit (events.js:123:20)
Version:
├─┬ mocha@1.1.0
│ ├── commander@0.5.2
│ ├── diff@1.0.2
│ ├── growl@1.5.1
│ └─┬ jade@0.20.3
│   └── mkdirp@0.3.4",alessioalex,NONE,2012-11-17 17:30:16+00:00,True,2012-11-17 19:55:47+00:00,0.1,,2,1,2012-11-17 19:55:47+00:00,0.1,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
663,"HTML reporter displays ""Script error"" for async tests with qunit interface","suite('test')

test('test msg', function(done) {
  setTimeout(function() {
    throw Error('err')
  }, 0)
})

This displays Error: the string ""Script error."" was thrown, throw an Error :) in the HTML reporter. Seems to work fine in other reporters.",curvedmark,CONTRIBUTOR,2012-11-19 11:35:48+00:00,True,2012-11-28 23:57:30+00:00,9.52,,2,5,2012-11-28 23:57:30+00:00,9.52,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
668,[Browser] Bug on IE8 with undefined indexOf method,"Hi,
I have a problem running my testsuite on IE8<=, I've got this error (tested on browserstack):
mocha.js
Line 3844
Runner.prototype.globalProps = function() {
  var props = utils.keys(global);

  // non-enumerables
  for (var i = 0; i < globals.length; ++i) {
    if (~props.indexOf(globals[i])) continue;
    props.push(globals[i]);
  }",guillaumepotier,NONE,2012-11-26 09:27:37+00:00,True,2012-11-28 23:36:05+00:00,2.59,,3,2,2012-11-28 23:36:05+00:00,2.59,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
669,Can support custom reporter for client side unit test,"For now, if I use some reporter extensions, it can work well when run server-side unit test. But for run client side unit test, it can't find the correct reporter extensions.
Such as for mocha-lcov-reporter, when run client side unit test, it can't be loaded at all.
Please support a way to allow the client side unit test to load the custom reporter extensions.",lsjuanny,NONE,2012-11-27 06:57:12+00:00,True,2012-11-28 23:35:21+00:00,1.69,,2,2,2012-11-28 23:35:21+00:00,1.69,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
672,Tilde (`~`) operator breaks IE<9,!~someArray.indexOf(lala) breaks all functionality in IE7/8. Why not revert them to standart?,akaspin,NONE,2012-11-29 21:40:31+00:00,True,2012-12-06 01:29:22+00:00,6.16,,3,3,2012-12-02 11:42:33+00:00,2.58,satazor,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
675,"A test suite should be treated as one, even if split into several files","To give an example - I have two files:
SubSuite1
module.exports = {
    BigSuite: {
        beforeEach: function(done) {
            console.log('Test');
            done();
        },

        SubSuite1: {
            // ...
        }
    }
};
SubSuite2
module.exports = {
    BigSuite: {
        SubSuite2: {
            // ...
        }
    }
};
As a result, beforeEach() is not executed for test cases in SubSuite2.
Though, if you put beforeEach() in the root, it will be executed for all test cases, regardless of the file they are in. This is a discrepancy in structuring logic.",Shedal,NONE,2012-12-01 19:17:32+00:00,True,2012-12-06 01:30:13+00:00,4.26,,2,3,2012-12-01 19:24:37+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
676,Opera indentation,"The identation at opera is wrong, please see this image: http://cl.ly/image/2H3b12391P1z/opera_identation.png",satazor,NONE,2012-12-02 11:46:03+00:00,True,2015-03-08 21:26:04+00:00,826.4,,3,2,2012-12-06 01:27:45+00:00,3.57,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
677,Output TAP for the browser reporter too,"If the browser reporter also logged TAP to the console, it would more-or-less seamlessly support http://ci.testling.com once it's complete, which would be perfect for our component browser-compatibility badges.",ForbesLindesay,CONTRIBUTOR,2012-12-03 01:18:25+00:00,True,2012-12-08 15:51:34+00:00,5.61,,2,2,2012-12-06 01:22:45+00:00,3.0,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
680,Doesn't work in internet explorer 9,"mocha.js#L3850:
if (~props.indexOf(globals[i])) continue;
Throws:
Object doesn't support property or method 'indexOf'",ForbesLindesay,CONTRIBUTOR,2012-12-06 15:17:48+00:00,True,2012-12-06 16:52:11+00:00,0.07,,2,3,2012-12-06 15:22:46+00:00,0.0,ForbesLindesay,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
687,Only show console output if a test fails,"(I've searched for similar tickets and found a bunch of similar ones but none that suggest exactly this.)
I love the way py.test handles output. When it runs a test, it captures stdout/stderr. If the test then fails it prints out any captured output with the test failure. If the test passes, it throws away the output.
Two reasons this is great:

It doesn't clutter up your passing tests with debug output.
You can easily figure which debug output relates to which test because it displays alongside the failure message at the bottom.

Thoughts on whether this would be good for Mocha?",bfirsh,NONE,2012-12-11 15:28:10+00:00,True,2012-12-15 23:12:58+00:00,4.32,,2,6,2012-12-11 15:29:04+00:00,0.0,bfirsh,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
688,Error when performing Chars diff in mocha-phantomjs,"I'm running some mocha browser tests using phantomjs. When a test fails on a string assertion, mocha attempts to display a string diff but fails with the following error:
TypeError: 'undefined' is not a function (evaluating 'diff['diff' + type](err.actual, err.expected)')
http://localhost:8000/test/ui/lib/mocha.js:1699 in errorDiff
http://localhost:8000/test/ui/lib/mocha.js:1517
It works fine when running in a real browser.",dmayo3,NONE,2012-12-12 10:23:25+00:00,True,2013-01-08 21:46:26+00:00,27.47,,6,8,2012-12-14 00:24:01+00:00,1.58,re5et,NONE,0,1,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
689,mocha not throwing,"server code:
var express = require('express')

var app = express()

app.get('/test', function (req, res) {
    foo.bar.baz
    res.send(200)
})

app.listen(8008)

module.exports = app
client code:
var supertest = require('supertest'),
    server = require('./server'),
    util = require('util')

describe('server', function () {
    it('should throw an error', function (done) {
        supertest(server)
        .get('/test')
        .end(function (err, res) {
            console.log('err', util.inspect(err, true, 10, true))
            console.log('res', util.inspect(res.text, true, 10, true))
        })
    })
})
In the above example, shouldn't mocha simply throw when foo.bar.baz is reached on the server? Instead, I get the following in stdout:
err null
res 'ReferenceError: foo is not defined\n    at /Users/tolga/development/express-bug-test/server.js:6:5\n    at callbacks (/Users/tolga/node_modules/express/lib/router/index.js:160:37)\n    at param (/Users/tolga/node_modules/express/lib/router/index.js:134:11)\n    at pass (/Users/tolga/node_modules/express/lib/router/index.js:141:5)\n    at Router._dispatch (/Users/tolga/node_modules/express/lib/router/index.js:169:5)\n    at Object.router (/Users/tolga/node_modules/express/lib/router/index.js:32:10)\n    at next (/Users/tolga/node_modules/express/node_modules/connect/lib/proto.js:190:15)\n    at Object.expressInit as handle\n    at next (/Users/tolga/node_modules/express/node_modules/connect/lib/proto.js:190:15)\n    at Object.query as handle\n    at next (/Users/tolga/node_modules/express/node_modules/connect/lib/proto.js:190:15)\n    at Function.app.handle (/Users/tolga/node_modules/express/node_modules/connect/lib/proto.js:198:3)\n    at Server.app (/Users/tolga/node_modules/express/node_modules/connect/lib/connect.js:66:31)\n    at Server.EventEmitter.emit (events.js:91:17)\n    at HTTPParser.parser.onIncoming (http.js:1793:12)\n    at HTTPParser.parserOnHeadersComplete as onHeadersComplete\n    at Socket.socket.ondata (http.js:1690:22)\n    at TCP.onread (net.js:402:27)'",ttezel,NONE,2012-12-12 21:19:53+00:00,True,2012-12-15 23:22:57+00:00,3.09,,2,1,2012-12-15 23:22:56+00:00,3.09,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
690,'before' and 'after' run in later suites even with '--bail',"I don't think this should be the case? Shouldn't it skip everything else, including befores and afters?
$ mocha --version
1.7.0

$ cat testing/a.js
describe('Initial test', function() {
    before(function() {
        console.log('initial before');
    });

    describe('test will fail', function() {

        it('will fail', function() {
            throw new Error('failed');
        });
    });

    after(function() {
        console.log('calling after');
    });
});

$ cat testing/b.js 
describe('Second test', function() {
    before(function() {
        console.log('second before');
    });

    describe('second test does not matter', function() {

        it('this test should not run', function() {
            throw new Error('I do not matter');
        });
    });

    after(function() {
        console.log('calling second after');
    });
});


$ mocha --bail testing/

initial before
․calling after
second before // SHOULD NEVER BE CALLED
calling second after // SHOULD NEVER BE CALLED

✖ 1 of 2 tests failed:

1) Initial test test will fail will fail:
    Error: failed",AndrewRayCode,NONE,2012-12-13 03:35:40+00:00,True,2013-05-23 03:20:37+00:00,160.99,,5,16,2012-12-15 23:19:37+00:00,2.82,tj,CONTRIBUTOR,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
693,issues with mocha + http.get,"test.js contains the following code:
http = require('http');                             
http.get('http://www.google.com', function(res) {   
  console.log(res.statusCode);                      
})                                                  
console.log('nope')                                 

I execute test.js with the command: ./node_modules/.bin/mocha test.js
which simply prints ""nope"".
If I run just node test.js it prints nope followed by 200
Why does it not execute the http.get call when using mocha?
(I can do it with describe/it too, but it makes no difference)
~/work$ ./node_modules/.bin/mocha --version
1.7.4",danielb2,NONE,2012-12-20 22:45:45+00:00,True,2012-12-20 22:47:48+00:00,0.0,,2,1,2012-12-20 22:47:37+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
694,"Tests randomly fail with ""Cannot call method 'end' of undefined"" error?",,Broham,NONE,2012-12-26 23:43:19+00:00,True,2013-01-01 21:55:50+00:00,5.93,,2,1,2013-01-01 21:55:50+00:00,5.93,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
695,global leaks in Chrome and Firefox,"Tests that pass in Safari and iOS fail in Chrome and Firefox with 'global leak detected.'

Chrome 23.0.1271.101.
FF 17.0.1.
Mocha 1.7.4, browser build.
Safari 6.0.2

Chrome error:
Error: global leak detected: __screenCapturePageContext__
    at Runner.checkGlobals (http://skookum.github.com/s4client/vendor/mocha.js:3907:21)
    at Runner.<anonymous> (http://skookum.github.com/s4client/vendor/mocha.js:3794:44)
    at Runner.EventEmitter.emit (http://skookum.github.com/s4client/vendor/mocha.js:235:20)
    at http://skookum.github.com/s4client/vendor/mocha.js:4138:14
    at done (http://skookum.github.com/s4client/vendor/mocha.js:3700:5)
    at http://skookum.github.com/s4client/vendor/mocha.js:3712:9
    at onAccount (http://skookum.github.com/s4client/test/test.accounts.js:29:16)
    at onAccount (http://skookum.github.com/s4client/src/status4.js:59:39)
    at ajaxSuccess (http://skookum.github.com/s4client/vendor/zepto.js:1010:22)
    at XMLHttpRequest.xhr.onreadystatechange (http://skookum.github.com/s4client/vendor/zepto.js:1165:16)

Firefox error:
global leaks detected: console, getInterface
Runner.checkGlobals@http://skookum.github.com/s4client/vendor/mocha.js:3905
Runner/<@http://skookum.github.com/s4client/vendor/mocha.js:3794
EventEmitter.emit@http://skookum.github.com/s4client/vendor/mocha.js:235
Runner.runTests/next/</<@http://skookum.github.com/s4client/vendor/mocha.js:4138
done@http://skookum.github.com/s4client/vendor/mocha.js:3700
Runnable.run/<@http://skookum.github.com/s4client/vendor/mocha.js:3712
onAccount@http://skookum.github.com/s4client/test/test.accounts.js:29
onAccount@http://skookum.github.com/s4client/src/status4.js:59
ajaxSuccess@http://skookum.github.com/s4client/vendor/zepto.js:1010
$.ajax/xhr.onreadystatechange@http://skookum.github.com/s4client/vendor/zepto.js:1165",hunterloftis,NONE,2012-12-28 18:00:49+00:00,True,2015-03-09 04:50:46+00:00,800.45,,4,4,2013-01-01 21:58:18+00:00,4.16,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
696,.skip .only not working,"I am using mocha 1.3.0 and .skip and .only aren't working?

Object has no method 'skip'",juzerali,CONTRIBUTOR,2012-12-28 19:35:31+00:00,True,2013-01-01 21:58:33+00:00,4.1,,2,3,2013-01-01 21:58:33+00:00,4.1,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
699,Add custom response when using markdown-reporter,"I'm writing some API-tests and see that the resulting markdown is pretty good as documentation, but it would be even better if I could add a response to the outputted markdown.",hkjels,NONE,2013-01-01 19:09:01+00:00,True,2013-01-01 22:03:39+00:00,0.12,,2,2,2013-01-01 22:03:39+00:00,0.12,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
700,Add ability to add up before() runtime with it() runtime,"--slow is highlighting only long running tests, measuring only time it() took to execute.
This leads to missed slow tests if slow part is hidden in test preparation (in before()).
It would be useful to have some option (--measure-before ?) to highlight tests that are above threshold together with appropriate before(Each)().",Almad,NONE,2013-01-03 15:40:42+00:00,True,2013-01-11 16:54:53+00:00,8.05,,2,5,2013-01-08 21:48:19+00:00,5.26,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
702,Expected/actual output is poor without color,"Example:
% mocha --compilers coffee:coffee-script -C

  ���������

  ��� 1 of 3 tests failed:

  1) filterdata should work for nested hashes:
      
      actual expected
      
      1 | {
      2 |   ""outer"": {
      3 |     ""middle"": ""value""
      4 |   }
      5 | }{}

In this very simple example you should be able to tell that there is a non-empty hash and an empty hash. Looking at just this output you cannot tell which of the two is expected and which is actual.
Maybe you could do diff-style +/- when color is off.",p,NONE,2013-01-06 10:44:12+00:00,True,2015-07-05 15:09:15+00:00,910.18,,6,6,2013-01-08 01:19:15+00:00,1.61,tj,CONTRIBUTOR,0,3,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
704,Incomplete test summary in cygwin,"When tests are running in an cygwin environment the test summary is incomplete.
Sampletest:
var expect = require('chai').expect;

describe('testsuite', function () {
    describe('thing', function () {
        it('should be true', function () {
            expect(true).to.be.false;
        });
    });
});
when running mocha myTest.js --reporter spec in the normal windows console this is what i get:
(everythings fine, just imagine the color)
D:\dev\mochateststuff>mocha myTest.js --reporter spec


  testsuite
    thing
      1) should be true


  ? 1 of 1 test failed:

  1) testsuite thing should be true:
     expected true to be false

running in cygwin:
(the summary is missing, also no colors)
mer@alanis /cygdrive/d/mochateststuff
$ mocha myTest.js --reporter spec


  testsuite
    thing
  ✖ 1 of 1 test failed:


I did a little digging through the code and it appears that the end event of the runner isnt fired.
from the spec runner:
runner.on('end', self.epilogue.bind(self));",seriousManual,NONE,2013-01-08 11:32:18+00:00,True,2013-01-09 06:59:52+00:00,0.81,,3,5,2013-01-08 21:51:25+00:00,0.43,tj,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
713,Add tmbundles for coffeescript as well.,"I know TJ doesn't like coffeescript. But for some of us, it would be quite convenient.",juzerali,CONTRIBUTOR,2013-01-10 18:03:44+00:00,True,2015-03-08 22:04:11+00:00,787.17,,2,1,2015-03-08 22:04:11+00:00,787.17,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
715,watching animation fails in git bash on windows,"It looks like the watching feature is supposed to put out a single line spinner:
var frames = [
      '  \u001b[96m◜ \u001b[90mwatching\u001b[0m'
    , '  \u001b[96m◠ \u001b[90mwatching\u001b[0m'
    , '  \u001b[96m◝ \u001b[90mwatching\u001b[0m'
    , '  \u001b[96m◞ \u001b[90mwatching\u001b[0m'
    , '  \u001b[96m◡ \u001b[90mwatching\u001b[0m'
    , '  \u001b[96m◟ \u001b[90mwatching\u001b[0m'
  ];

But in git bash on Windows (mingw32), it just puts out:
[box character] watching
[box character] watching
[box character] watching
[box character] watching
[box character] watching
[box character] watching
[box character] watching
[box character] watching

Which is kind of annoying, since it swamps the console buffer eventually.",jcollum,NONE,2013-01-11 17:23:53+00:00,True,2013-01-11 17:36:59+00:00,0.01,,2,2,2013-01-11 17:36:59+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
717,Http client test,"Considering the following code:
var http = require('http');
var options = {
  hostname: 'localhost',
  port    : 3000,
  path    : '/api',
  method  : 'POST'
};
function post(text, cb) {
  var req = http.request(options, cb);
  req.write(text);
  req.end();
}
And a mocha test, like this one:
describe('http client test', function() {
  it('will make the request (first)', function(done) {
    post('foo', function(res) {
      throw new Error('bar');
    });
  });
  it('will make the request (second)', function (done) {
    post('foo', function (res) {
      throw new Error('bar');
    });
  });
  it('will make the request (third)', function (done) {
    post('foo', function (res) {
      throw new Error('bar');
    });
  });
  it('will make the request (fourth)', function (done) {
    post('foo', function (res) {
      throw new Error('bar');
    });
  });
  it('will make the request (fifth)', function (done) {
    post('foo', function (res) {
      throw new Error('bar');
    });
  });
  it('will not make the request (sixth)', function (done) {
    post('foo', function (res) {
      throw new Error('bar');
    });
  });
  it('neither will this one (seventh)', function (done) {
    post('foo', function (res) {
      throw new Error('bar');
    });
  });
});
The result is:
http client test
  1) will make the request (first)
  2) will make the request (second)
  3) will make the request (third)
  4) will make the request (fourth)
  5) will make the request (fifth)
  6) will not make the request (sixth)
  7) neither will this one (seventh)


× 7 of 7 tests failed:

1) http client test will make the request (first):
   Error: bar

2) http client test will make the request (second):
   Error: bar

3) http client test will make the request (third):
   Error: bar

4) http client test will make the request (fourth):
   Error: bar

5) http client test will make the request (fifth):
   Error: bar

6) http client test will not make the request (sixth):
   Error: timeout of 2000ms exceeded

7) http client test neither will this one (seventh):
   Error: timeout of 2000ms exceeded

As you can see, after the fifth failed test (the first five), every subsequent test fails because of a timeout. They do not fail because of the throwed error. They fail with a timeout.
Generally speaking, after 5 test error involving an http request, every other test that also depends on an http request (in a async fashion, of course), will fail with a timeout. Their requests will not even hit the server.
Any idea what's going on?",etunior,NONE,2013-01-15 09:59:25+00:00,True,2013-02-27 22:17:55+00:00,43.51,,3,2,2013-02-27 22:09:21+00:00,43.51,penartur,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
718,Running a mocha test with mongojs ,"Hello,
I am doing a test in mocha that requires mongojs in it ...

But when I ran the test it cannot find the mongojs module, but it is installed globally",kugtong33,NONE,2013-01-15 10:29:34+00:00,True,2013-01-15 21:21:22+00:00,0.45,,2,2,2013-01-15 21:21:22+00:00,0.45,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
720,adding tests within an async test no longer works,"This used to work
test('foo', function(done) {
    setTimeout(function() {

        // even tho this is registered before we finish our test
        // this never runs
        test('bar', function() {
            assert.ok(false);
        });

        done();
    }, 100);
});
However, now bar is never registered as a test even though it is added before our test suite is ""done"". I used this to run certain tests after creating some resources which those test file require.
Such a setup used to work but no longer seems to work. Using qunit style testing.",defunctzombie,CONTRIBUTOR,2013-01-16 19:00:01+00:00,True,2013-01-16 19:05:36+00:00,0.0,,2,12,2013-01-16 19:03:45+00:00,0.0,defunctzombie,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
721,Bail bug in 1.8.1 npm mocha.js browser version.,"[Line 1327] of mocha/mocha.js](https://github.com/visionmedia/mocha/blob/master/mocha.js#L1327) has the following in the repo.
if (0 == arguments.length) bail = true;
However, the 1.8.1 npm install has this below, and all browser tests bail at the first failure.
if (null == bail) bail = true;
Can you release a new version that fixes this?",metaskills,NONE,2013-01-17 01:14:43+00:00,True,2013-03-24 00:28:21+00:00,65.97,,4,8,2013-01-17 21:03:26+00:00,0.83,metaskills,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
722,Firefox has lots of additional globals,"So far when running tests in Firefox I've tended to come across unexpected errors about leaking globals.  So far the globals I've seen leaked are:

navigator
getInterface

Neither of these are leaked by my code, and they are not always shown as leaked, so I assume it's something wrong with the browser (N.B. testing in sauce-labs)",ForbesLindesay,CONTRIBUTOR,2013-01-17 01:55:06+00:00,True,2014-01-01 05:53:37+00:00,349.17,,2,2,2014-01-01 13:12:03+00:00,349.47,travisjeffery,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
723,The call to ctx.measureText fails on FireFox 3.0,https://github.com/visionmedia/mocha/blob/master/mocha.js#L657 causes Firefox 3.0 to never get passed the first test when using the html reporter.,ForbesLindesay,CONTRIBUTOR,2013-01-17 09:14:29+00:00,True,2015-03-09 04:23:12+00:00,780.8,,2,1,2015-03-09 04:23:12+00:00,780.8,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
726,persist clicking of failures/passes,these should remain filtered on refresh,tj,CONTRIBUTOR,2013-01-18 04:17:48+00:00,True,2017-10-17 04:33:32+00:00,1733.01,,4,0,,,,,0,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
728,Mocha exists after the first test failure when it is used programmatically,"I am trying to run mocha programmatically.
The code of runner is the following:
var Mocha = require(""mocha"");
var mocha = new Mocha();
mocha.reporter('list').ui('bdd').ignoreLeaks();
//Here the serv_paths variable is defined, -- this code snippet is skipped
// ...
serv_paths.forEach(function(file){
mocha.addFile(file);
});
var runner = mocha.run(function(){ });
The tests are very simple:
var assert = require(""assert"");
describe('True!', function(){
it('true = true', function(){
assert.equal(true, true);
});
it('true = false', function(){
    assert.equal(true, false);
});

it('true = false -- second', function(){
    assert.equal(true, false);
});

it('true = true', function(){
    assert.equal(true, true);
});

});
The mocha runs tests before the first failure and then exits and ignore other tests.
The output is:
[Jan 21 04:57:23]   ✓ True! true = true: 0ms
[Jan 21 04:57:23]   1) True! true = false
[Jan 21 04:57:23]   ✖ 1 of 4 tests failed:
[Jan 21 04:57:23]   1) True! true = false:
AssertionError: true == false
at Context. (/home/ubuntu/project/plugins-server/cloud9.ide.help/test_test.js:14:10)
at Test.run (/home/ubuntu/project/node_modules/mocha/lib/runnable.js:213:32)
at Runner.runTest (/home/ubuntu/project/node_modules/mocha/lib/runner.js:343:10)
at /home/ubuntu/project/node_modules/mocha/lib/runner.js:389:12
at next (/home/ubuntu/project/node_modules/mocha/lib/runner.js:269:14)
at /home/ubuntu/project/node_modules/mocha/lib/runner.js:278:7
at next (/home/ubuntu/project/node_modules/mocha/lib/runner.js:226:23)
at Array. (/home/ubuntu/project/node_modules/mocha/lib/runner.js:246:5)
at EventEmitter._tickCallback (node.js:190:38)
Is there way to force Mocha run all tests?",aneshlya,NONE,2013-01-21 05:33:09+00:00,True,2015-03-09 04:30:09+00:00,776.96,,2,1,2015-03-09 04:30:09+00:00,776.96,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
731,"When an assertion fails, mocha first checks for globals","In a browser environment, using mocha latest, expect.js:
(function (global) {
    describe('a foo', function () {

        it('should be bar', function () {
            global.foo = {};
            expect(global.foo).to.be.a(Function);
            delete global.foo
        });
    });
}(this));
Results in:
Error: global leak detected: foo
    at Runner.checkGlobals (http://localhost:8080/node_modules/mocha/mocha.js:4230:21)
    at Runner.<anonymous> (http://localhost:8080/node_modules/mocha/mocha.js:4115:44)
[...]

This is very tricky because the actual error is that the expect failed and so the delete global.foo failed.
Right?",vvo,NONE,2013-01-22 17:31:54+00:00,True,2015-07-10 19:26:44+00:00,899.08,,2,1,2015-07-10 19:26:44+00:00,899.08,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
732,Add option for passing a WriteableStream to Mocha on init for logging purposes,"I'm interested in running a Mocha instance and capturing output in a WriteableStream. Right now Mocha uses console.log to echo all its messages. To accomplish this, I have to listen to stdout and do some extra work. This could be made easier with an optional stream that the user passes in and simply default to console.log. For example:
myStream = fs.createWriteStream(""path/to/my/file"")

mocha = new Mocha
  ui: 'bdd'
  reporter: 'spec'
  stream: myStream  # defaults to console.log",rquinlivan,NONE,2013-01-22 19:00:43+00:00,True,2015-07-12 04:18:57+00:00,900.39,,2,1,2015-07-12 04:18:57+00:00,900.39,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
735,Fatal error causes Mocha to exit,"Hello! With the recent release of PhantomJS 1.8 I have started to add on front-end testing to my existing tests with Mocha. However, I am running into an issue with errors causing exits.
Running the tests below, I would expect something like..
x should fail
check should pass
1 of 2 tests failed:

reason it failed.

Actual Output
Running ""simplemocha:frontend"" (simplemocha) task
=============
webdriver load
=============

Load Google
Fatal error: expected 'Google' to equal 'Github'

Back on command prompt.
To run the tests, I am using the grunt task simple-mocha via this configuration...
timeout: 5000,
ignoreLeaks: false,
ui: 'bdd',
reporter: 'spec'
The test itself boils down to...
module.exports = function() {
    var chai = require('chai'),
        should = chai.should(),
        wd = require(""selenium-webdriverjs""),
        client;

    describe('Loading google...', function() {
        beforeEach(function() {
            client = new wd.Builder().
                usingServer('http://localhost:10000').
                withCapabilities({
                    'browserName': 'phantomjs',
                    'platform': 'ANY',
                    'version': '',
                    'javascriptEnabled': true
                }).
                build();
        })

        afterEach(function() {
            client.quit();
        })

        it('should fail', function(done) {
            client.get('http://github.com');
            client.getTitle().then(function(title) {
                title.should.equal('Google');
                done();
            });
        })

        it('should pass', function(done) {
            client.get('http://google.com')
            client.getTitle().then(function(title) {
                title.should.equal('Google');
                done();
            })
        })

    });
}();

I have been able to get the behaviour I want by wrapping the async call at getTitle with a try/catch, like so..
try {
    title.should.equal('Google');
    done();
} catch(e) {
    done(e);
}
However, I don't believe you are intended to need to do this.",itsjamie,NONE,2013-01-23 12:23:57+00:00,True,2013-01-24 20:47:26+00:00,1.35,,1,2,2013-01-24 13:26:09+00:00,1.04,itsjamie,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
736,Running the test suite twice skips tests that were already required,"I wanted to run the test suite twice against different browsers on Saucelabs. I'm using the technique to run mocha programatically but on the second run mocha would always report that it did not run any tests.
After a lot of digging around it seems that since mocha uses require() to load the test files, they get cached and if they're cached they're not added to the suite.
I can manually clear all the tests from the require cache, but I'm wondering if maybe mocha shouldn't do this by default?
This is a simplified example of what I end up doing for it to work:
var Mocha = require('mocha');
var path  = require('path');

var testFile = path.resolve(__dirname, './test_file.js');

var set1 = new Mocha({ui: 'tdd'});
set1.addFile(testFile);

var set2 = new Mocha({ui: 'tdd'});
set2.addFile(testFile);

set1.run(function(failures1){
  console.log(require.cache['/Users/patrick/Downloads/mocha_argh/test_file.js']);
  // Need to delete the test from the cache or else
  // the test won't run.
  delete require.cache['/Users/patrick/Downloads/mocha_argh/test_file.js'];
  set2.run(function(failures2){
    process.exit(failures1 && failures2);
  });
});",,NONE,2013-01-24 02:25:53+00:00,False,,,,18,22,2013-01-24 02:27:03+00:00,0.0,,NONE,1,4,0,15,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
737,Cannot register to `end` event after run() has occured in IE,"Hello,
Following https://raw.github.com/visionmedia/mocha-cloud/601b02c1e939d133364e8c657c481836456ffca9/client.js I tried to use the following pattern:
watch(mocha.run());

function watch(runner) {
  runner.on('end', blabla..);
}
On IE8 and 9 at least it seems that the on() call happens after the emit('end') event thus we register to the end() event after having firing it. A race condition occurs.
Maybe it only does it on small test suites (mine has 8 tests).
I guess it's a callstack problem specific to IE but it makes projects like https://github.com/visionmedia/mocha-cloud unusable (at least from what I can experiment right now).
Using setTimeout(function() {self.emit('end');}, 0) in the runner.run code does it. But I guess every other event emitter will emit before I can register to them.",vvo,NONE,2013-01-24 15:56:25+00:00,True,2013-02-20 09:45:58+00:00,26.74,,2,4,2013-01-24 16:08:09+00:00,0.01,vvo,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
738,How loop tests?,"im doing:
test_values = [""test1"", ""test2"", ""test3""]
for value in test_values
describe value, ->
it value, ->
console.log value
result:
one
◦ one: three
✓ one
two
◦ two: three
✓ two
three
◦ three: three
✓ three
Thanks!",viniciuswebdev,NONE,2013-01-31 18:01:22+00:00,True,2013-01-31 19:05:33+00:00,0.04,,2,1,2013-01-31 19:05:32+00:00,0.04,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
740,Expose Base reporter like mocha used to,"mocha on the browser is missing mocha.reporters.Base so it broke JSTestDriver Adapter, since it's now impossible to Base.call(this, runner);
https://github.com/wikidi/mocha-jstd-adapter/blob/master/src/MochaAdapter.js#L24
There's no way to do that now anymore. I want to test my jquery plugin on multiple browsers at once in a CI-like style.",pocesar,NONE,2013-02-03 07:02:16+00:00,True,2013-02-05 17:35:03+00:00,2.44,,2,2,2013-02-05 13:34:03+00:00,2.27,vvo,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
742,How to find out which module is causing a global leak,"I don't know if it has been mentioned before, but a nice trick to find out, which module is leaking is by adding this code on the first line of your test module:
Object.defineProperty(global, ""name_of_leaking_property"", {
    set : function(value) {
        throw new Error(""SHIT!"");
    }
})
This will print a stacktrace that shows which module caused the global leak. I just wanted to share this trick in case a global leak is driving you nuts again 😉.
Maybe you can add a note on this in the documentation.",jhnns,NONE,2013-02-07 17:10:25+00:00,True,2013-02-19 23:29:21+00:00,12.26,,2,2,2013-02-19 23:29:21+00:00,12.26,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
743,Browser / Jenkins CI / TestSwarm / Code coverage support,"I posted a similar issue on jasmine's github page.
We wrote all our tests using Mocha with chai.js to find out it's not supported in IE6/7 (which is still a majority of users on some of our products, sadly)...
As stated on chai.js' site:
Currently supports all modern browsers: IE 9+, Chrome 7+, FireFox 4+, Safari 5+. Please note that the should style is currently not compatible with IE9.

I'm looking around the interwebs trying to figure out the best testing framework for our company.
Supporting all browsers is CRUCIAL.  Ideally, we'd like to run our tests on CI and have the following things met:

 Supporting browsers as old as IE6.

https://github.com/LearnBoost/expect.js (seems inactive though)


 Can run on Jenkins CI
 Has code coverage
 Can run on TestSwarm

Are there any assertion libraries that support more (all) browsers?  How can we continue to work with Mocha for our testing framework?
So, I'm sorry to bloat your issues!  I can close this shortly -- I just couldn't find anything regarding the above questions. 😢
*** note: I'll be updating the check list with answers and solutions ***",j,NONE,2013-02-08 06:05:47+00:00,True,2013-02-19 23:28:45+00:00,11.72,,2,1,2013-02-19 23:28:45+00:00,11.72,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
746,Why mocha returns non-zero exit status for success result,I'm running node_modules/.bin/mocha -R html-cov > coverage.html it returns 23,stereobooster,NONE,2013-02-12 08:29:44+00:00,True,2013-03-01 10:33:25+00:00,17.09,,2,4,2013-02-19 23:23:57+00:00,7.62,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
747,Problem using mocha watch with Mongoose,"Getting this error
Error parsing instrumented code: OverwriteModelError: Cannot overwrite `User` model once compiled.",stereobooster,NONE,2013-02-12 16:04:51+00:00,True,2013-02-12 17:03:17+00:00,0.04,,2,2,2013-02-12 17:03:17+00:00,0.04,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
748,Global memory leak check should ignore explicit properties rather then comparing lengths,"mocha.setup({globals: ['xxx']});

Assume the xxx global variable was not defined during the test.
Now, you need to have at least two memory leaks to get the error, because of the condition in https://github.com/visionmedia/mocha/blob/master/lib/runner.js#L161
See https://github.com/testacular/testacular/issues/351",vojtajina,NONE,2013-02-13 19:41:18+00:00,True,2015-03-09 04:07:47+00:00,753.35,,3,3,2013-02-13 20:18:31+00:00,0.03,vojtajina,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
749,Please add support for running in d8,"d8 being the v8 console utility (https://code.google.com/p/v8/wiki/BuildingWithGYP).
This would be similar to running in node, except lacking all of the node standard libraries.
A bit of background: I'm a chromium/v8 developer and I'd like to switch unit tests for https://github.com/rafaelw/ChangeSummary over to mocha/chai, but I need to be able to run them in d8 for development purposes, as I use those tests to do performance work on Object.observe.",rafaelw,NONE,2013-02-14 01:34:53+00:00,True,2015-03-09 03:18:48+00:00,753.07,,3,2,2013-02-14 02:58:29+00:00,0.06,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
750,Slow is in the eye of the beholder,"I have a test suite
https://gist.github.com/bingomanatee/4957398
that is showing as ""slow"" in the HTML browser
even though I gave it a very generous ""slow"" setting",bingomanatee,NONE,2013-02-14 23:40:35+00:00,True,2014-07-08 10:55:27+00:00,508.47,,3,2,2013-02-15 00:25:40+00:00,0.03,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
753,forced to use ignoreLeaks: true and not global whitelist when using jsonp,"I'm experiencing the same problem @sdepold described on this ticket #305 (comment)

... the getJSON method of jquery. it seems to do a jsonp request which obviously generates a global function like jQuery16405157153122127056_1331042016658. And of course this numbers are random for each request. So it's actually pretty hard to define the right whitelist ...

Mocha should let us define a whitelisted global as a function which would allow us to filter for a matching global. I'm not sure of another way to solve it. Being forced to ignoreLeaks is a horrible option when your primary concern is isolating your specs.
I'd be happy to work on this if it would be pulled in.",CodeOfficer,NONE,2013-02-18 10:11:37+00:00,True,2013-02-19 23:13:57+00:00,1.54,,2,2,2013-02-19 23:13:57+00:00,1.54,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
755,Mocha causes mikeal/request's callback to fire twice,"When you try to access a property of something undefined in a request callback, Mocha causes the callback to fire twice. Running equivalent code straight from node behaves as expected.
I whittled it down to this minimal test case:
var request = require('request');

it('behaves normally when all goes well', function(done) {
  request.get('http://localhost:12345', function(err, response, body) {
    console.log('Logging empty body');
    console.log(body);
    done();
  });
});

it('calls the callback twice if you access something on undefined', function(done) {
  request.get('http://localhost:12345', function(err, response, body) {
    console.log('Logging body.foo');
    console.log(body.foo);
    done();
  });
});

The first test prints Logging empty body and undefined as expected. The second test prints Logging body.foo twice, seemingly once after the test has finished executing.
$ mocha -R dot test.js 

  Logging empty body
undefined
․Logging body.foo
․Logging body.foo


  ✖ 1 of 2 tests failed:

  1)  calls the callback twice if you access something on undefined:
     TypeError: Cannot read property 'foo' of undefined
      at Request._callback (/Users/kristjan/src/rand/test.js:14:21)
      at Request.init.self.callback (/Users/kristjan/.nvm/v0.8.7/lib/node_modules/request/main.js:127:22)
      at Request.EventEmitter.emit (events.js:88:17)
      at ClientRequest.Request.init.self.clientErrorHandler (/Users/kristjan/.nvm/v0.8.7/lib/node_modules/request/main.js:232:10)
      at ClientRequest.EventEmitter.emit (events.js:88:17)
      at Socket.socketErrorListener (http.js:1330:9)
      at Socket.EventEmitter.emit (events.js:88:17)
      at Socket._destroy.self.errorEmitted (net.js:327:14)
      at process.startup.processNextTick.process._tickCallback (node.js:244:9)

Versions are:

Node.js: 0.8.7
Mocha: 1.8.1 (latest)
Request: 2.14.0 (latest)",kristjan,NONE,2013-02-23 01:47:00+00:00,True,2013-02-23 17:45:17+00:00,0.67,,2,3,2013-02-23 08:27:48+00:00,0.28,kristjan,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
764,Expose beforeAll/beforeEach/afterAll/afterEach in require'd files,"Part of the utility of having mocha require in a common .js file (--require) is to be able to set up some common convenience features for ALL tests.
It would be useful to have some hooks similar to, or exactly, the /(after|before)(All|Each)/ hooks.
Use case: Being able to integrate tools like sinon more deeply with mocha, allowing automatic tear-downs of stubs/mocks for each/all steps.",keithamus,CONTRIBUTOR,2013-03-06 10:31:08+00:00,True,2017-07-29 14:26:11+00:00,1606.16,,14,37,2014-03-05 20:54:36+00:00,364.43,glenjamin,CONTRIBUTOR,1,6,0,8,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
768,throw undefined => passes,"Is the following correct?
throw undefined is being treated the same as done():
// mocha version: 1.8.1

it( 'should pass', function (done) {
  done();
});

it( 'passes? Yes it does.', function (done) {
  throw undefined;
  done();  // this is not reached, but it passes.
});

it('throws ""Error: done() called multiple times""', function(done) {
   done();
   throw undefined; // this is reached and is treated as a second done()
});",da99,NONE,2013-03-11 13:51:18+00:00,True,2013-03-11 17:28:22+00:00,0.15,,2,2,2013-03-11 15:48:40+00:00,0.08,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
769,bug: mocha causing EADDRINUSE when spawning a child process in a directory,See https://gist.github.com/superjoe30/5140725 for a simple broken test case.,andrewrk,NONE,2013-03-12 06:21:40+00:00,True,2015-07-05 15:05:49+00:00,845.36,,7,10,2013-03-31 18:52:36+00:00,19.52,ultraflynn,NONE,0,2,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
770,Mocha Breaks Libraries Using process for environment detection.,"Please see an example repository at https://github.com/iammerrick/mocha-rjs-fail.
The Problem
Mocha.js installs a global called process see here. A comment says it is only to allow mocha.js to run untouched, not to allow running node code in the browser, however this has some unfortunate side effects for some libraries that use process for environment detection.
r.js is one of those libraries that uses process for environment detection see here.",iammerrick,CONTRIBUTOR,2013-03-12 17:51:08+00:00,True,2013-06-05 19:10:42+00:00,85.06,,10,19,2013-03-12 18:19:10+00:00,0.02,tj,CONTRIBUTOR,0,4,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
772,test fails after upgrading to Node.js v0.10.0,"Has anyone had their mocha tests break after upgrading to v0.10.0? I'm not sure where to start
Here's what replicates problem on my machine (MacOSX):
mocha: ""1.8.2""
// canary.test.js
""use strict"";

var assert = require('assert'),
    http = require('http');

var test = function test(req, res) {
  res.writeHead(200);
  res.end();
};

describe( 'canary', function () {
  let OPTIONS, SERVER, TEST_HARNESS;

  beforeEach(function(done) {
    OPTIONS = {
      hostname : 'localhost',
      port : 10211,
      path : '/',
      method : 'GET'
    };

    SERVER = {};

    TEST_HARNESS = http.createServer(test.bind(SERVER));
    TEST_HARNESS.listen(10211, function() {
      done();
    });
  });

  afterEach(function(done) {
    TEST_HARNESS.close(function() {
      done();
    });
  });

  it('should return 200', function(done) {
    let req = http.request(OPTIONS, function(response) {
      assert.equal(response.statusCode, 200);
      done();
    });
    req.end();
  });
});
When I run it under node v0.8.22, I get:
./node_modules/.bin/mocha --harmony canary.test.js
  1 test complete (10 ms)

When I run it under node v0.10.0, I get:
./node_modules/.bin/mocha --harmony canary.test.js
  ✖ 1 of 1 test failed:

  1) canary ""after each"" hook:
     Error: timeout of 2000ms exceeded
      at null.<anonymous> (/blah/blah/node_modules/mocha/lib/runnable.js:167:14)
      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)",tristanls,NONE,2013-03-13 13:31:30+00:00,True,2013-03-22 23:59:34+00:00,9.44,,5,5,2013-03-18 23:28:37+00:00,5.41,larsburgess,NONE,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
777,"Tests break in Node.js 0.10.0 with ""warning: Recursive process.nextTick detected""","I have Mocha tests that have started to break in Node.js 0.10.0 with the following message:
(node) warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.

util.js:35
  var str = String(f).replace(formatRegExp, function(x) {
                      ^
RangeError: Maximum call stack size exceeded

The initial ""process.nextTick"" warning is repeated many times, as one might expect from the recursion.
I'm having a very hard time isolating a minimal test case.  It only seems to trigger under a certain combination of test files, but removing tests at random ""fixes"" the problem.  It seems like I can still trigger the problem even if I modify my tests to be empty (i.e., none of my own code is being run, just the BDD ""describe"" and ""it"" calls).
As soon as I can get something minimal, I'll add it here.
Update: The following single-file test suite will trigger the bug.
https://gist.github.com/tomxtobin/5173183",tomxtobin,NONE,2013-03-15 21:10:00+00:00,True,2013-03-17 21:26:26+00:00,2.01,,1,1,2013-03-17 21:26:26+00:00,2.01,tomxtobin,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
778,Include also files in `spec` folder by default?,"mocha.js supports both TDD and BDD styles. In BDD documents are called specifications, not tests.
Putting ""specifications"" inside of folder called ""test"" looks a little strange, it would be nice if it would be possible to call that folder spec or specs. I.e. if mocha.js by default include not only files in test folder but also in spec folder.
What do you think?",alexeypetrushin,NONE,2013-03-17 23:57:19+00:00,True,2015-07-05 15:04:59+00:00,839.63,,3,2,2014-05-20 16:04:47+00:00,428.67,mindjuice,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
779,this.timeout() inside describe() doesn't work for me,"This below JS snippet is from the mocha.js website docs, ""Suite specific timeouts"":
describe('a suite of tests', function(){
  this.timeout(500);

  it('should take less than 500ms', function(done){
    setTimeout(done, 300);
  })

  it('should take less than 500ms as well', function(done){
    setTimeout(done, 200);
  })
})
This code example is a bit confusing, when I put the ""this.timeout()"" call like this I get:
C:\Dev\GitHub\alexlatchford\adfuser\src\test\api\v1\target_groups.js:274
                this.timeout(0); // Extend the timeout for this suite because we're insertin
                     ^
TypeError: Object #<Object> has no method 'timeout'
    at C:\Dev\GitHub\alexlatchford\adfuser\src\test\api\v1\target_groups.js:274:8
    at module.exports.suite.on.context.describe.context.context (C:\Users\alatchford\AppData\Roaming\npm\node_modules\mocha\lib\interfaces\bdd.js:72:7)
    at C:\Dev\GitHub\alexlatchford\adfuser\src\test\api\v1\target_groups.js:272:2
    at module.exports.suite.on.context.describe.context.context (C:\Users\alatchford\AppData\Roaming\npm\node_modules\mocha\lib\interfaces\bdd.js:72:7)
    at Object.<anonymous> (C:\Dev\GitHub\alexlatchford\adfuser\src\test\api\v1\target_groups.js:15:1)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:362:17)
    at require (module.js:378:17)
    at Mocha.loadFiles (C:\Users\alatchford\AppData\Roaming\npm\node_modules\mocha\lib\mocha.js:137:27)
    at Array.forEach (native)
    at Mocha.loadFiles (C:\Users\alatchford\AppData\Roaming\npm\node_modules\mocha\lib\mocha.js:134:14)
    at Mocha.run (C:\Users\alatchford\AppData\Roaming\npm\node_modules\mocha\lib\mocha.js:278:31)
    at Object.<anonymous> (C:\Users\alatchford\AppData\Roaming\npm\node_modules\mocha\bin\_mocha:324:7)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.runMain (module.js:492:10)
    at process.startup.processNextTick.process._tickCallback (node.js:245:9)

It works if I put it inside my before() for that group of tests, which incidentally was what I intended anyway, but I think either the docs need clarifying or the error message investigating :)
Cheers,
Alex",alexlatchford,NONE,2013-03-19 07:51:28+00:00,True,2014-07-24 22:01:31+00:00,492.59,,8,17,2013-10-22 09:40:37+00:00,217.08,rweng,NONE,0,1,0,7,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
782,--require expect.js doesn't work,"hi, so when i include expect.js over the --require parameter, it doesn't work. i also tried putting this option on mocha.opts
--require expect.js
but i still getting ""ReferenceError: expect is not defined""
does --require only work with should.js? or what do i missing?",juanolon,NONE,2013-03-20 20:29:56+00:00,True,2013-03-26 02:55:00+00:00,5.27,,7,7,2013-03-25 20:11:10+00:00,4.99,stephenmathieson,CONTRIBUTOR,0,2,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
784,Spec reporter issue with cursor.CR(),"I would like to have an option to disable cursor.CR() somehow.
Otherwise terminals that don't support it (like writing to file, piping, etc.) look like the following mess:
https://travis-ci.org/AlexeyKupershtokh/node-v8-clone/jobs/3843420#L147",AlexeyKupershtokh,NONE,2013-03-21 05:30:55+00:00,True,2015-07-05 15:07:19+00:00,836.4,,2,1,2015-07-05 15:07:19+00:00,836.4,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
785,Process not killed with keyboard interupt,"I ran tests with the watcher and introduced an infinite loop by accident. When I hit C-c on the watcher terminal the output stopped but the process was still running and eating up memory. I know this because I examined the System Monitor. Here are details about what set up I have.
Linux mint:
RELEASE=14
CODENAME=nadia
EDITION=""Cinnamon 64-bit""
DESCRIPTION=""Linux Mint 14 Nadia""
Running the watcher through tmux,",Satshabad,NONE,2013-03-22 20:28:53+00:00,True,2013-03-22 20:35:50+00:00,0.0,,2,2,2013-03-22 20:35:50+00:00,0.0,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
787,"Add ability to add ""comment"" specs","Sometimes, especially when viewing test output in the browser or using the spec or list reporter, it'd be good for documentation to provide commentary on the stories being spec'd. For this reason, Id' like to be able to have a function because that could be used like
describe('Some major feature', function () {
  it('ought to do this')
  because('but because sometimes X')
  it('ought to do this when X')
})
Or something to that regard. I can currently do that using a pending test case via it, but that's clearly the wrong semantics. Possible names/semantics are ""because"", ""why"", or ""commentary"".",tel,NONE,2013-03-27 16:29:01+00:00,True,2015-03-14 20:16:00+00:00,717.16,,2,1,2015-03-14 20:16:00+00:00,717.16,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
791,disable global leak check by default,annoying edge-cases / perf implications,tj,CONTRIBUTOR,2013-04-02 23:55:18+00:00,True,2013-04-03 15:14:27+00:00,0.64,,3,4,2013-04-03 00:07:15+00:00,0.01,jfirebaugh,CONTRIBUTOR,0,2,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
792,highlight something in red on failures,to make it more obvious without wasting eye-movement effort to look at the count haha. I prefer github.com/visionmedia/mocha-matrix for this reason but it's not a good fit as a default,tj,CONTRIBUTOR,2013-04-03 00:11:02+00:00,False,,,,5,2,2015-03-09 04:57:07+00:00,705.2,danielstjules,CONTRIBUTOR,0,1,0,1,"['browser', 'good-first-issue', 'help wanted', 'reporter']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
794,Expose current test information to beforeEach,"Currently only the reporters have access to find out which is the current running test using runner.on('test', fn).
It would be useful if this information was exposed to the beforeEach method in some way in order to setup perform some custom actions based on the current test being run. This would allow us to write something like:
// TDD interface
suite('foo', function(){
    setup(function(){
        // this.currentTest would be the Test class for the test being executed
        this.processed = processTitle(this.currentTest.title);
    });
    test('bar', function(){
        assert.ok(doStuff(this.processed));
    });
    test('ham', function(){
        assert.ok(doStuff(this.processed));
    });
});",avaly,CONTRIBUTOR,2013-04-05 08:56:59+00:00,True,2013-07-01 21:23:31+00:00,87.52,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
796,Wildcards for globals undocumented,"globals option accepts wildcards but it's hard to find this documented anywhere. Wildcards were introduced in #456.
For example on http://visionmedia.github.com/mocha/ it just states about globals: ""allow the given comma-delimited global [names]""",apaatsio,NONE,2013-04-05 13:10:46+00:00,True,2013-08-30 20:10:19+00:00,147.29,,3,2,2013-08-29 09:31:25+00:00,145.85,OscarGodson,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
797,how to get test data in beforeEach() and afterEach(),"I need to get the name of each test in beforeEach and the pass/fail status of each finished test in afterEach. I looked at using this.test, but from there the best thing I found was this.test.parent, which is the suite of tests. That's all well and good, but how do I know which of those tests is the one whose before/after block I'm in?",jlipps,NONE,2013-04-05 18:37:36+00:00,True,2013-07-01 21:23:27+00:00,87.12,,9,9,2013-04-05 18:38:26+00:00,0.0,jlipps,NONE,0,1,0,7,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
800,Can mocha output the number of assertions?,"I'm a refugee from jasmine-node to mocha, and am thrilled to have a working after function to clean up my test environment (see jasmine/jasmine#56 (comment)). The only thing I miss from jasmine is that it would output the number of assertions, like this:
Finished in 2.754 seconds
59 tests, 556 assertions, 0 failures

I understand that mocha decouples the assertion library (and I'm using expect.js), but does mocha have access to an assertion count that it can report? It's a nice positive feedback loop to see the number of assertions go up as we write more (and more thorough) tests.",dankohn,NONE,2013-04-08 13:15:21+00:00,True,2013-04-30 14:31:15+00:00,22.05,,4,3,2013-04-30 12:05:06+00:00,21.95,greelgorke,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
801,Format errors in Git Bash,"I'm happy to report that mocha's coloration and symbols display properly in Command Prompt terminals in Windows. However, I tend to code in a Cygwin/Git Bash terminal for better Unix support. Fortunately, mocha works very well in Git Bash, it's just that there are display glitches.
> mocha test/email test/models test/routes test/routes/admin test/services test/unit te
t/cron -t 4000


  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․
  ․․․․․․․․․․․․․․․․․․․․․․․․․․․

  ✔ 620 tests complete (24950ms)

On GitHub, this will display as periods. But they're not periods, they're special dots, which confuse Git Bash, displaying as rectangles. And the thing before 620 tests complete also displays as a rectangle.
Could we add a terminal check for raw Command Prompt vs Cygwin/Git Bash, and correct the display accordingly?",mcandre,NONE,2013-04-09 14:30:10+00:00,True,2015-04-03 10:19:41+00:00,723.83,,4,6,2013-04-12 12:15:04+00:00,2.91,mcandre,NONE,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
802,Much of the color output is invisible with solarized terminal theme,"If you use the Solarized Dark terminal theme (very popular), then you can't see the majority of the terminal output for success or error. Bower had a similar problem with a certain shade of grey effectively being invisible.",necolas,NONE,2013-04-10 05:11:43+00:00,True,2013-04-29 19:28:52+00:00,19.6,,9,27,2013-04-10 11:49:31+00:00,0.28,kevva,NONE,1,1,0,8,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
804,Watch files which are autocompiled using `--compilers`,"File extensions which --watch watchers is currently hardcoded here - https://github.com/visionmedia/mocha/blob/master/lib/utils.js#L166
I use Coco language, which compiles fine with --compilers co:coco, but --watch doesn't watch .co files, which it should.",utkarshkukreti,NONE,2013-04-11 08:14:31+00:00,True,2015-07-05 15:08:38+00:00,815.29,,2,1,2015-07-05 15:08:38+00:00,815.29,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
805,Is there a .mocha file where I can specify defaults such as --no-colors?,"I'd like to set some defaults for mocha without having to type them each time. Does mocha look for a config file / dotfile anywhere, as jshint looks for .jshintrc and npm looks for package.json?",mcandre,NONE,2013-04-11 14:11:30+00:00,True,2013-04-30 18:24:54+00:00,19.18,,2,2,2013-04-30 12:02:41+00:00,18.91,greelgorke,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
807,npm test fails in Windows,"Trace:
$ npm test

> mocha@1.9.0 test C:\Documents and Settings\apenneba\Desktop\src\mocha
> make test-all


module.js:340
    throw err;
          ^
Error: Cannot find module 'C:\Documents'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:901:3
make: *** [test-bdd] Error 8
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0

If I call the make task more directly, I get a slightly different error.
$ make test

module.js:340
    throw err;
          ^
Error: Cannot find module 'commander'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at Object.<anonymous> (c:\Documents and Settings\apenneba\Desktop\src\mocha\bin\_mocha:7:15)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
make: *** [test-unit] Error 8

System:
$ specs node os
Specs:

specs 0.4
https://github.com/mcandre/specs#readme

npm --version
1.2.17

node --version
v0.10.3

systeminfo | findstr /B /C:""OS Name"" /C:""OS Version""
OS Name:                   Microsoft Windows XP Professional
OS Version:                5.1.2600 Service Pack 3 Build 2600",mcandre,NONE,2013-04-12 12:19:58+00:00,True,2013-04-12 15:37:25+00:00,0.14,,2,2,2013-04-12 15:37:25+00:00,0.14,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
808,make --grep case insensitive?,,eldargab,NONE,2013-04-13 10:08:35+00:00,True,2016-07-11 08:44:24+00:00,1184.94,,7,6,2013-04-22 01:43:04+00:00,8.65,tj,CONTRIBUTOR,1,1,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
809,Ctrl+C before string diff finishes leaves a zombie node process running,This happens when I have large string diffs.,vjpr,NONE,2013-04-13 16:17:36+00:00,True,2015-07-05 15:03:31+00:00,812.95,,2,1,2015-07-05 15:03:31+00:00,812.95,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
810,Cannot disable diffs - err.showDiff not working,"When err.showDiff is false it does not prevent a diff being shown.
Here is the only place where showDiff is being used in Mocha:
    // msg
    var err = test.err
      , message = err.message || ''
      , stack = err.stack || message
      , index = stack.indexOf(message) + message.length
      , msg = stack.slice(0, index)
      , actual = err.actual
      , expected = err.expected
      , escape = true;

    // explicitly show diff
    if (err.showDiff) {
      escape = false;
      err.actual = actual = JSON.stringify(actual, null, 2);
      err.expected = expected = JSON.stringify(expected, null, 2);
    }

I think its just been overlooked.",vjpr,NONE,2013-04-13 16:36:45+00:00,True,2014-09-16 03:35:14+00:00,520.46,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
811,running mocha without actual test,"Hi,
mocha --reporter spec
this usually runs also the test code, sometimes I just want to see the specs, possible to run it with test code? thanks,
Angelo",angelochen960,NONE,2013-04-14 12:52:52+00:00,True,2015-07-05 15:02:40+00:00,812.09,,2,1,2015-07-05 15:02:40+00:00,812.09,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
812,Support for asynchronous reporters ?,"I'd like to have a reporter that does an asynchronous task (reports test results to an external HTTP service) at the end of test run. However, mocha process ends as soon as test runner ends, so any asynchronous actions is aborted..
While i know there might be some workaround with process piping, I'd prefer make that possible directly with a mocha reporter.
Would this feature make sense ? Any implementation suggestion ?",alexstrat,NONE,2013-04-14 16:16:42+00:00,True,2015-03-09 07:36:28+00:00,693.64,,3,2,2013-05-05 08:07:58+00:00,20.66,jmendiara,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
814,BDD Test Where All Tests are Pending,it seems that the end event is never fired.  is this by design?,jefflage,NONE,2013-04-15 18:44:03+00:00,True,2015-03-09 05:06:04+00:00,692.43,,3,2,2013-04-15 20:34:01+00:00,0.08,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
815,Truncated Stack Trace,"When I run tests through the web-based runner, Mocha will take a stack trace like this:
Uncaught Error: expected undefined to equal 'base:Sample' expect.js:99
Assertion.assert expect.js:99
Assertion.be.Assertion.equal expect.js:200
Assertion.(anonymous function) expect.js:73
(anonymous function) ConstraintSelectorTests.js:88
jQuery.event.dispatch jquery.js:3332
elemData.handle.eventHandle jquery.js:2941
jQuery.event.trigger jquery.js:3210
jQuery.fn.extend.triggerHandler jquery.js:3874
func.apply.$.extend.__callback jquery.jstree.js:237
$.jstree.plugin._fn.loaded jquery.jstree.js:539
$.jstree._fn.(anonymous function) jquery.jstree.js:234
(anonymous function) jquery.jstree.js:410
(anonymous function) jquery.jstree.js:1653
$.jstree.plugin._fn.load_node_json jquery.jstree.js:1724
$.jstree._fn.(anonymous function) jquery.jstree.js:234
$.jstree.plugin._fn.load_node jquery.jstree.js:1653
$.jstree._fn.(anonymous function) jquery.jstree.js:234
$.jstree._fn.(anonymous function) jquery.jstree.js:234
$.jstree.plugin._fn.init jquery.jstree.js:410
$.jstree._fn.(anonymous function) jquery.jstree.js:234
(anonymous function) jquery.jstree.js:162

and reduce it to:
Error: Uncaught Error: expected undefined to equal 'base:Sample' (file:///home/jeremy/workspace/syapse/src/syapse/static/js/ext/expect.js:99)
at window.onerror (file:///home/jeremy/workspace/syapse/src/syapse/static/js/ext/mocha/mocha.js:5286:10)

Is this just an inherent limit of the fact that Mocha uses onerror to catch exceptions, or is there any way that Mocha could display the real stack trace instead?   Because while I can get the real trace from the console, having it in the browser window would be awfully convenient.",machineghost,NONE,2013-04-15 23:10:11+00:00,True,2015-07-05 15:01:27+00:00,810.66,,12,14,2013-04-22 01:39:48+00:00,6.1,tj,CONTRIBUTOR,1,4,0,7,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
816,HTML runner doesn't display error for multiple done calls,"Consider this suite:
describe(""Something"", function () {
  it(""should one"", function (done) {
    done();
    done();
  });
  it(""should two"", function () { });
});
In the html runner, it will say ""passes: 2 failures: 1"" but not show a failure in the test results. This means no stack trace is displayed and it's more difficult to track down which test failed.
The second test is only there to prevent Mocha from immediately exiting after the first done call (see discussion in #216)",Met48,NONE,2013-04-16 22:08:28+00:00,True,2015-03-09 05:08:17+00:00,691.29,,2,1,2015-03-09 05:08:17+00:00,691.29,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
817,Remove HTML output format,"ok ok it is nice, but maybe it is outside of the scope of this project.
If anything it should be another lib that you can use in conjunction with this.",samccone,NONE,2013-04-18 00:16:38+00:00,True,2013-04-18 15:15:41+00:00,0.62,,2,2,2013-04-18 15:15:41+00:00,0.62,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
818,split off test runners from the main repo,"So modularizing the test runners would be a good idea I think.
It would make this more in sync with the ""node"" concept of small packages combined as compared to one monolithic beast.
cc @ForbesLindesay",samccone,NONE,2013-04-18 15:39:39+00:00,True,2013-04-18 15:46:11+00:00,0.0,,2,1,2013-04-18 15:46:11+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
819,add alert and confirm to the list of non-enumerable globals,"In my test I want to mock ""alert"" and when I do that, mocha tells me that I leak ""alert"".",julienw,CONTRIBUTOR,2013-04-18 17:57:30+00:00,True,2013-04-19 01:24:34+00:00,0.31,,2,2,2013-04-19 01:24:34+00:00,0.31,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
821,Arbitrary Metric Comparison,"Maybe this feature doesn't have a place in Mocha, but I feel it could be quite useful.
Benchmarking is essential, and describing benchmarks in the same manner as unittests would allow more organized and uniform code for tests.  While benchmarking time is currently supported in Mocha, some benchmarks can also include byte counts, for minimizing output, and a number of other metrics.
Would it be possible to add other metrics to the tests, for benchmarking purposes?",skeggse,CONTRIBUTOR,2013-04-19 15:40:01+00:00,True,2013-04-22 01:33:32+00:00,2.41,,2,2,2013-04-22 01:33:31+00:00,2.41,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
822,Mocha Test fails and logs an object to console,"When all my tests pass, everything works as expected. However, when a test fails with any reporter active, the runner prints an object representing the strack trace rather than the pretty formatted error messages I see in screen shots
> mocha --reporter spec --ui bdd --ignore-leaks



  Site Routes
    GET /sites
      ✓ should return a 200 OK 
      ✓ should be a JSON response 
      ◦ should be an array: {
  ""date"": ""Fri Apr 19 2013 16:09:20 GMT-0400 (EDT)"",
  ""process"": {
    ""pid"": 34270,
    ""uid"": 1032026306,
    ""gid"": 116266774,
    ""cwd"": ""/Users/squinn/Projects/armada"",
    ""execPath"": ""/usr/local/Cellar/node/0.10.4/bin/node"",
    ""version"": ""v0.10.4"",
    ""argv"": [
      ""node"",
      ""/Users/squinn/Projects/armada/node_modules/mocha/bin/_mocha"",
      ""--reporter"",
      ""spec"",
      ""--ui"",
      ""bdd"",
      ""--ignore-leaks""
    ],
    ""memoryUsage"": {
      ""rss"": 55717888,
      ""heapTotal"": 51000320,
      ""heapUsed"": 22281672
    }
  },
  ""os"": {
    ""loadavg"": [
      1.7001953125,
      1.66162109375,
      1.58984375
    ],
    ""uptime"": 374244
  },
  ""trace"": [
    {
      ""column"": 10,
      ""file"": ""/Users/squinn/Projects/armada/node_modules/should/lib/should.js"",
      ""function"": ""Object.Assertion"",
      ""line"": 368,
      ""method"": ""Assertion"",
      ""native"": false
    },
    {
      ""column"": 43,
      ""file"": ""/Users/squinn/Projects/armada/test/route.sites.js"",
      ""function"": ""null.callback"",
      ""line"": 47,
      ""method"": ""callback"",
      ""native"": false
    },
    {
      ""column"": 21,
      ""file"": ""/Users/squinn/Projects/armada/node_modules/request/main.js"",
      ""function"": """",
      ""line"": 290,
      ""method"": null,
      ""native"": false
    },
    {
      ""column"": 17,
      ""file"": ""events.js"",
      ""function"": ""EventEmitter.emit"",
      ""line"": 95,
      ""method"": ""emit"",
      ""native"": false
    },
    {
      ""column"": 54,
      ""file"": ""/Users/squinn/Projects/armada/node_modules/request/main.js"",
      ""function"": """",
      ""line"": 278,
      ""method"": null,
      ""native"": false
    },
    {
      ""column"": 20,
      ""file"": ""events.js"",
      ""function"": ""IncomingMessage.EventEmitter.emit"",
      ""line"": 117,
      ""method"": ""EventEmitter.emit"",
      ""native"": false
    },
    {
      ""column"": 14,
      ""file"": ""_stream_readable.js"",
      ""function"": null,
      ""line"": 883,
      ""method"": null,
      ""native"": false
    },
    {
      ""column"": 13,
      ""file"": ""node.js"",
      ""function"": ""process._tickCallback"",
      ""line"": 415,
      ""method"": ""_tickCallback"",
      ""native"": false
    }
  ],
  ""stack"": [
    ""AssertionError: expected [ { user: 'test',"",
    ""    group: 'group',"",
    ""    name: 'post-test',"",
    ""    domain: 'localhost:9000',"",
    ""    _id: '51718b214805d8fe83000003',"",
    ""    __v: 0,"",
    ""    modules: [],"",
    ""    labels: [ 'Test' ] } ] not to be an instance of Array: expected [ { user: 'test',"",
    ""    group: 'group',"",
    ""    name: 'post-test',"",
    ""    domain: 'localhost:9000',"",
    ""    _id: '51718b214805d8fe83000003',"",
    ""    __v: 0,"",
    ""    modules: [],"",
    ""    labels: [ 'Test' ] } ] not to be an instance of Array"",
    ""    at Object.Assertion (/Users/squinn/Projects/armada/node_modules/should/lib/should.js:368:10)"",
    ""    at null.callback (/Users/squinn/Projects/armada/test/route.sites.js:47:43)"",
    ""    at null.<anonymous> (/Users/squinn/Projects/armada/node_modules/request/main.js:290:21)"",
    ""    at EventEmitter.emit (events.js:95:17)"",
    ""    at IncomingMessage.<anonymous> (/Users/squinn/Projects/armada/node_modules/request/main.js:278:54)"",
    ""    at IncomingMessage.EventEmitter.emit (events.js:117:20)"",
    ""    at _stream_readable.js:883:14"",
    ""    at process._tickCallback (node.js:415:13)""
  ],
  ""level"": ""error"",
  ""message"": ""uncaughtException""
}
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0

And here is the test
describe('GET /sites', function (){

    var url = 'http://localhost:' + app.get('api').port + '/sites';

    it('should return a 200 OK', function (done){
      request(url, function (err, res){
        res.should.have.status(200);
        done();
      });
    });

    it('should be a JSON response', function (done){
      request(url, function (err, res, body){
        res.should.be.json;
        done();
      })
    });

    it('should be an array', function (done){
      request(url, function (err, res, body){
        JSON.parse(body).should.not.be.an.instanceOf(Array);
        done();
      });
    });

  });

Any clues as to why I'm not getting the pretty view?",srquinn21,NONE,2013-04-19 20:11:48+00:00,True,2013-04-21 15:00:51+00:00,1.78,,1,2,2013-04-21 15:00:51+00:00,1.78,srquinn21,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
823,Growl reporter fails due to recursive structure,"Hi,
I'm using mocha for CSSselect and for some reason, the growl reporter doesn't work.
The project uses the exports style.
feedy:CSSselect felix$ mocha -R growl --watch


/usr/local/share/npm/lib/node_modules/mocha/node_modules/growl/lib/growl.js:197
      args.push(quote(msg));
                ^
TypeError: Converting circular structure to JSON
    at stringify (native)
    at new growl (/usr/local/share/npm/lib/node_modules/mocha/node_modules/growl/lib/growl.js:197:17)
    at Mocha.run (/usr/local/share/npm/lib/node_modules/mocha/lib/mocha.js:309:18)
    at loadAndRun (/usr/local/share/npm/lib/node_modules/mocha/bin/_mocha:300:11)
    at Object.<anonymous> (/usr/local/share/npm/lib/node_modules/mocha/bin/_mocha:311:3)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:901:3

One fix would be to use util.inspect instead of JSON.stringify in node-growl.",fb55,NONE,2013-04-22 19:30:21+00:00,True,2013-08-10 16:10:38+00:00,109.86,,4,6,2013-04-24 15:43:41+00:00,1.84,tj,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
825,Running Mocha on Express makes the server crash,"Trying to run a test when user hits the url on browser.
I can see the test result in the terminal(runs fine), but as soon as the test is finished after 30-40 seconds I get:
events.js:72
throw er; // Unhandled 'error' event
^
Error: read ECONNRESET
at errnoException (net.js:878:11)
at TCP.onread (net.js:539:19)
Server side code:
var express = require(""express""),
app = express(),
server = require('http').createServer(app),
clients = [];
io = require('socket.io').listen(server);
var auditor = require('../node/auditorAdsTest');
app.configure(function(){
app.set('port', process.env.PORT || 8088);
app.set('views', __dirname + '/views');
app.set('view engine', 'jade');
//app.enable('view cache');
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(app.router);
app.use(express.static(__dirname + '/public'));

});
app.get('/', function(req, res){
res.render(""home"");
});
app.post('/test', function(req, res){
if(req.body.jiraId){
res.render(""test"", {jiraId:req.body.jiraId});
var b = new auditor('../node/test/test/');
}else{
res.status(302).redirect(""/"");
}
});
the auditor code:
var AuditorAdsTest = function(testFolder){
/**
*  Auditor (inPowered Testing Framework)
*/
var Mocha = require('mocha'),
path = require('path');
var mocha = new Mocha;
mocha.addFile(
path.join(testFolder, ""ads-3019_1366798349549"")
);
mocha.timeout(9000).reporter('spec').run();

}
module.exports = AuditorAdsTest;",psyCodelist,NONE,2013-04-24 10:44:44+00:00,True,2013-04-24 15:36:02+00:00,0.2,,2,1,2013-04-24 15:36:02+00:00,0.2,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
826,Test clustering code?,"I wanted to do something like:
test/thread-test.js
if (cluster.isMaster)
  // run test suite
  describe(...);
else // is worker
  // echo messages back to master
  cluster.worker.on('message', function() {
    process.send.apply(process, arguments);
  });
However mocha gets forked along with the rest of the process and tries to run all of my other tests. It looks like #601 was an attempt to solve the problem, but the lack of discussion didn't inspire confidence; hence this issue.",mal,CONTRIBUTOR,2013-04-27 16:42:04+00:00,True,2013-04-27 21:43:34+00:00,0.21,,2,3,2013-04-27 21:43:34+00:00,0.21,mal,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
829,No TTY breaks color output,"When executing mocha from another process with spawn, and logging output to console, the colors are gone. If I change https://github.com/visionmedia/mocha/blob/e224188798cd1e871f364631115458dec59a1516/lib/reporters/base.js#L36 to true, color output works fine.
Feels that disabling/enabling color output should be up to the user.",alexgorbatchev,NONE,2013-04-30 04:06:22+00:00,True,2013-05-22 04:11:27+00:00,22.0,,2,1,2013-05-22 04:11:27+00:00,22.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
831,"""mocha test/"": 0 tests complete",I have to manually specify each test subdirectory in order for mocha to execute any tests. Does mocha not run recursively by default?,mcandre,NONE,2013-05-02 14:02:02+00:00,True,2013-05-03 01:48:29+00:00,0.49,,2,3,2013-05-03 01:48:29+00:00,0.49,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
838,Pre release hook,"In this video, TJ talked about pre-release hook to generate mocha.js. After that, don't you need to add this file to index and do another commit, or at least amend the previous commit?
I couldn't find the hook you are referring to in the video in this repository. Could you share the hooks you are using?",albertnetymk,NONE,2013-05-07 19:16:06+00:00,True,2013-05-07 19:31:18+00:00,0.01,,2,4,2013-05-07 19:31:18+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
839,who wants to write javascript?,"I wish I could contribute to this project but unfortunately it's written in plain javascript, which I find unreadable. please consider porting to coffeescript",ricardobeat,NONE,2013-05-08 00:21:59+00:00,True,2013-05-08 00:39:30+00:00,0.01,,2,1,2013-05-08 15:39:43+00:00,0.64,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
843,--require option does not work for absolute path value,"There is a bug in ""\node_modules\mocha\bin_mocha"" file, program.on('require', function(mod){..}); , line 150 - ""if (abs) mod = join(cwd, mod);""
It should be if (!abs) mod = join(cwd, mod);",raikogr,NONE,2013-05-10 07:38:33+00:00,True,2013-05-22 03:53:47+00:00,11.84,,2,1,2013-05-22 03:53:47+00:00,11.84,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
844,The mocha command should work better across platforms,"To get the mocha tests to run in Windows I put this in the package.json:
""test"": ""bash ./node_modules/.bin/mocha --reporter list --timeout 10s ./node_server/test/*_test.js""
This fails on Mac with the following errors:
bash ./node_modules/.bin/mocha --reporter list --timeout 10s ./node_server/test/*_test.js
./node_modules/.bin/mocha: line 3: /Applications: is a directory
./node_modules/.bin/mocha: line 4: COPYING.txt: command not found
./node_modules/.bin/mocha: line 5: syntax error near unexpected token (' ./node_modules/.bin/mocha: line 5: * when found, before invoking the ""real"" _mocha(1) executable.'
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
If I remove 'bash' from the command then it works in Mac but fails in Windows with this error:

./node_modules/.bin/mocha --reporter list --timeout 10s ./node_server/test/*_t
est.js

'.' is not recognized as an internal or external command,
operable program or batch file.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0",apond,NONE,2013-05-10 22:20:49+00:00,True,2013-05-22 03:06:45+00:00,11.2,,3,3,2013-05-10 22:40:08+00:00,0.01,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
855,Window indices are being considered memory leaks,"As there is no syntax in JavaScript to add an index based property to window accidentally (you need to use window name explicitly), these numbered entries should not be considered as global leaks.
This is particularly important when dealing with iframes in browsers as Firefox or Chrome. These iframes produces numbered entries in the global object (window) that are not global leaks.",delapuente,CONTRIBUTOR,2013-05-21 18:01:50+00:00,True,2013-05-22 03:12:19+00:00,0.38,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
857,"-w option, i don't understand, or it's not working like expected","Hi,
whenever i run mocha ion watch mode, the first run wokes great. All after then will bereportet with 0 tests complete. No tests are executed anymore.
Lets assume i have a test like:
var assert = require(""assert"")

describe('A Self Test', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
  })
});
and run mocha with:
node_modules/mocha/bin/mocha -w test/aselftest.js 
the output after breaking the test is:
  A Self Test
    #indexOf()
      ✓ should return -1 when the value is not present 


  1 test complete (11 ms)

  0 tests complete (0 ms)
-V shows mocha Version 1.9.0
Is it a missunderstanding or something in the code? How can I use -w? How can i test continuously.
Thanks,
Peter Shaw",petershaw,NONE,2013-05-22 11:21:15+00:00,True,2015-07-05 15:00:19+00:00,774.15,,5,5,2013-05-22 18:18:29+00:00,0.29,tj,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
858,Web Worker support,See #780 (comment),tanx,NONE,2013-05-22 15:55:21+00:00,True,2015-03-09 05:10:08+00:00,655.55,,3,2,2015-03-09 05:10:08+00:00,655.55,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
863,Display test's time in ms,"One killer feature of qunit, that prevents me from switching to mocha completely for my browser tests, is the display of required time in milliseconds. This allows me to abuse my unit tests for simple benchmarking/profiling and iterate quickly to tweek performance.
Mocha currently only displays the time for longer tests: http://whiteout-io.github.io/crypto-lib/test/index.html
What would be awesome if there was an option to always display runtime like so:",tanx,NONE,2013-05-23 11:22:11+00:00,True,2013-06-13 13:37:01+00:00,21.09,,6,5,2013-06-13 13:37:01+00:00,21.09,tj,CONTRIBUTOR,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
864,Create tag for 1.10.0 release,"Currently, the git repo does not have a tag for the 1.10.0.
This makes it impossible to install the last version from bower package manager:
$ bower info mocha

Versions:
    - 1.9.0
    - 1.8.2
    - 1.8.1
    - 1.8.0
(...)
Even if bower is not supported, creating the tag will be consistent with previous releases",rafeca,NONE,2013-05-23 16:43:46+00:00,True,2013-06-13 13:28:14+00:00,20.86,,3,1,2013-05-24 08:51:36+00:00,0.67,mallim,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
865,Disable timeouts when running under the debug,"Sometime's I'll be stepping through Node code in the debugger, which obviously draws out test execution time considerably, but Mocha still times out the test after 2 seconds. I've been getting around the problem by using .timeout(0), but it would be sweet if Mocha could detect that the code was running under the debugger (by checking the global.v8debug flag, at least in node) and disable timeouts in that case.",kevindente,NONE,2013-05-23 17:57:18+00:00,True,2014-07-13 00:05:15+00:00,415.26,,8,8,2013-08-01 16:18:27+00:00,69.93,fakewaffle,NONE,0,2,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
866,npm warnings on node version > 0.8.0,"Is this strict dependency intentional?
...
npm WARN engine mocha@0.12.1: wanted: {""node"":"">= 0.4.x < 0.8.0""} (current: {""node"":""v0.8.18"",""npm"":""1.2.2""})
...",dzimine,NONE,2013-05-23 22:43:11+00:00,True,2013-06-13 13:28:44+00:00,20.61,,2,1,2013-06-13 13:28:44+00:00,20.61,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
870,Add a way to hint implementation-files to --watch,"Currently, --watch only re-runs your tests when the test files themselves change. Obviously, that's somewhat less than ideal.
I'd love to see --watch take an optional argument, that being a glob of files or directories (other than the tests, which are already listed at the command-line) to subscribe to changes for.
Example:
mocha --watch Source/ --reporter dot --watch Test/*.js",ELLIOTTCABLE,CONTRIBUTOR,2013-05-28 10:15:50+00:00,True,2015-07-05 14:59:57+00:00,768.2,,2,1,2015-07-05 14:59:57+00:00,768.2,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
871,Add a key-press to re-run the specs under --watch,"I love --watch. It's great. But there's a few situations where I need to re-run the tests, and it doesn't catch them (i.e. changing an implementation file, as opposed to a test-file, see #870); it'd be nice if hitting the spacebar with the Terminal focused (or something along those lines) forced a re-run of the tests.
Along the same lines, it might be nice to be able to configure a minimum timeout to re-run them anyway, so that the window is always up-to-date, even if it misses a change. (Obviously more tenable for small projects than big ones … but isn't that already the case with --watch?)",ELLIOTTCABLE,CONTRIBUTOR,2013-05-28 10:17:18+00:00,True,2015-07-05 14:59:11+00:00,768.2,,8,9,2013-06-13 13:15:09+00:00,16.12,tj,CONTRIBUTOR,1,4,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
878,Yadda,"I've written a Mocha plugin for Yadda i thought you might be interested in. It enables you to use write Mocha tests in gherkin  style syntax...
Scenario: should fall from the wall
   Given 100 green bottles are standing on the wall
   when 1 green bottle accidentally falls
   then there are 99 green bottles standing on the wall

mocha --reporter spec bottles-test.js
Bottles
   ✓ should fall from the wall 

https://github.com/acuminous/yadda/tree/master/examples
Cheers,
Steve",cressie176,NONE,2013-05-30 06:51:14+00:00,True,2013-05-30 22:10:49+00:00,0.64,,2,1,2013-05-30 22:10:49+00:00,0.64,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
880,browserify breaks at require('./lib-cov/mocha'),"mocha/index.js:
module.exports = process.env.COV
  ? require('./lib-cov/mocha')
  : require('./lib/mocha');

Error: module ""./lib-cov/mocha"" not found from ""/Volumes/work/Projects/yaas/node_modules/mocha/index.js""",darvin,NONE,2013-05-30 17:04:14+00:00,True,2016-05-23 07:06:23+00:00,1088.58,,13,27,2013-05-30 17:10:46+00:00,0.0,tj,CONTRIBUTOR,1,2,0,9,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
882,Need clear guidelines for contributing,"There's no shortage of people interested in contributing to this project, but there seems to be a shortage of bandwidth on the part of the project owners to review contributions.
It would help contributors and owners if we had a document describing the happy path for contributing: how to structure contributions such that owners can most easily review them and what time frame to expect for feedback and resolution.
This is probably best done as a CONTRIBUTING.md since it changes will need to be reviewed by project owners.
Questions that could be answered in this document:

I think I've found an bug and I want to file an issue.  What information should I include?
I want to request a feature or change in behavior.  What information should I include?
I've filed an issue (feature or bug).  Now what?  Is there some process by which it gets reviewed and approved?
Is there anyway to get an issue important to me fixed quicker?
I didn't read this, and skipped straight to submitting a pull request with code I want to get merged in, was that a mistake?  Should I go back and file a separate issue per the guidelines above?
I've want to help out by fixing an existing issue. How do I pick which issue to fix?  How do I know which ones are important?
I have fixed an issue and want to submit a pull request.  What needs to be included in a good pull request?
Do I really have to include tests for my fix?
What coding style guidelines do should I follow?
I've filed a pull request, but no one seems to be looking at it.  Did I do something wrong?",bitwiseman,CONTRIBUTOR,2013-05-30 18:43:24+00:00,True,2014-11-03 16:59:11+00:00,521.93,,4,7,2013-05-31 15:47:05+00:00,0.88,tj,CONTRIBUTOR,1,3,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
885,mocha.getJSReport() for headless browser testing,"Something like this
It would be nice to have it in base package (just a function that exposes runner information) for easier WD-based CIs integration
Is it going to be accepted into mainstream if implemented?",darvin,NONE,2013-06-02 02:51:07+00:00,True,2013-06-13 13:11:30+00:00,11.43,,2,2,2013-06-02 04:19:31+00:00,0.06,darvin,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
886,Support for branchData (or similar) in coverage,"Some tools such as JSCover allow instrumentation that includes branchData, to better accommodate for whether every branch within code is ran (based on the truthiness of the conditional). It could be nice to have support for it in mocha's cov runner.
I've written my own coverage instrumentation tool for GorillaScript, would like to implement branch coverage, but have no incentive to until mocha supports it.",ckknight,NONE,2013-06-04 13:13:05+00:00,True,2015-07-05 14:56:57+00:00,761.07,,2,1,2015-07-05 14:56:57+00:00,761.07,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
887,readme has outdated link to doc,github changed the pages to tld io instead of com,hcientist,NONE,2013-06-04 19:26:12+00:00,True,2013-06-13 13:05:13+00:00,8.74,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
888,--watch and .only conflict,"Using it.only() with --watch yields unexpected results.
Steps:

Run mocha --watch on your huge test suite
Watch as how it runs 1,000 tests
Mark one of those tests as it.only
Watch as how it now runs just 1 test
Now change back the it.only(...) to it(...)

Expected: run 1,000 tests
Actual: still running just one test",rstacruz,CONTRIBUTOR,2013-06-05 19:47:17+00:00,True,2014-09-13 06:28:40+00:00,464.45,,7,9,2013-06-21 14:25:55+00:00,15.78,alFReD-NSH,NONE,0,2,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
893,"Issue with require, but only when running mocha tests","Please take a look at https://github.com/lloydwatkin/xmpp-ftw/blob/master/test/lib/utils/xep-0004.js
The dataForm variable console.log's out as {}.
The dataForm file exports a bunch of methods using exports.*.
It runs fine in code. I can also create a quick test file and require and see the exported functions fine there too.
Other places in my tests I export 'classes' using module.exports and this is fine.  I have attempted to use module.exports = { function1: {}, function2: {} } rather than the exports helper but this doesn't help.
I run mocha using the following command:
./node_modules/.bin/mocha -R spec --recursive ./test/lib
Using mocha version 1.10.0  and nodejs versions from 0.8.X -> 0.11.X",lloydwatkin,NONE,2013-06-08 18:05:49+00:00,True,2013-06-08 18:17:54+00:00,0.01,,1,2,2013-06-08 18:13:03+00:00,0.01,lloydwatkin,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
899,Mocha test results printing twice when terminal window is too small,"When running tests with descriptors that are too long to fit on one line, mocha prints the descriptor twice, once as if the test wasn't run, the other with the status of the test.
Here's a sample of the outputs I'm getting:
Terminal Window Too Small
Unit Tests
    Internal Caching
      ◦ Should throw an exception when trying to get a key that do      ✓ Should throw an exception when trying to get a key that doesn't exist
      ✓ Should set and retrieve a key from the cache
      ✓ Should delete a key from the cache
    Helpers
      hasTagType()
        ◦ Should return the index of an array where a tag type exi        ✓ Should return the index of an array where a tag type exists
        ✓ Should return false if the type is not found
      mergeTagsWithDefault()
        ✓ Should merge two arrays together
        ◦ Should merge two arrays with conflicting objects with th        ✓ Should merge two arrays with conflicting objects with the second taking precedence
      flattenTags()
        ✓ Should convert an array of tags into a string
      hashCode()
        ✓ Should return a hash from a string
        ✓ Should be idempotent (1,000 tests)

Terminal Window Expanded
Unit Tests
    Internal Caching
      ✓ Should throw an exception when trying to get a key that doesn't exist
      ✓ Should set and retrieve a key from the cache
      ✓ Should delete a key from the cache
    Helpers
      hasTagType()
        ✓ Should return the index of an array where a tag type exists
        ✓ Should return false if the type is not found
      mergeTagsWithDefault()
        ✓ Should merge two arrays together
        ✓ Should merge two arrays with conflicting objects with the second taking precedence
      flattenTags()
        ✓ Should convert an array of tags into a string
      hashCode()
        ✓ Should return a hash from a string
        ✓ Should be idempotent (1,000 tests)

My Setup
OS X 10.8.3
Node v0.10.11
Mocha v1.10.0
Chai v1.6.1",SinisterMinister,NONE,2013-06-14 16:36:05+00:00,True,2013-12-07 20:51:47+00:00,176.18,,4,3,2013-10-12 23:19:34+00:00,120.28,ChrisWren,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
900,Don't diff different object types,"I have a function that returns '1-2-3' and expects [1, 2, 3]
The diff is really annoying to read, highlighting whitespace and commas and dashes.  It's even more annoying with:
[ 2, null, 2 ] vs '2-2-3'
I suggest not showing diffs for differing types (arrays vs strings in this case)",MarkKahn,NONE,2013-06-18 03:26:22+00:00,True,2013-07-01 21:06:08+00:00,13.74,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
901,"--compilers only compile specs, should also compile source","I'm running mocha like this
mocha --reporter spec --compilers coffee:coffee-script --require should
I keep my specs in ./test and my source in ./src. Both are CoffeeScript. When I run mocha, the specs are compiled correctly, but the source seems cached or not run through the CoffeeScript compiler at all. I can verify this by introducing an error in the source code and re-run the tests, but they will still pass.
Funny side note: When using --watch test, the source files are also watched, even though they are not in the test directory, but they are still not compiled before the specs are run.",nordhagen,NONE,2013-06-18 09:07:41+00:00,True,2013-07-01 21:06:16+00:00,13.5,,2,1,2013-07-01 21:06:16+00:00,13.5,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
902,--order option for random test order?,"An --order option would allow people to uncover order dependencies. The three options would be --order random, --order random:seed, and --order default. Each randomized suite outputs the seed it used.
RSpec implements this, but their default order is random. Mocha doesn't have to do that. Some details on their --order parameter are here: http://blog.davidchelimsky.net/2012/01/04/rspec-28-is-released/
What do you think?",sarenji,NONE,2013-06-18 14:42:11+00:00,False,,,,51,66,2013-07-01 21:07:40+00:00,13.27,tj,CONTRIBUTOR,1,7,0,42,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
903,Object diffs shouldn't care if an object has different key orders,"As seen in the screenshot, the only real difference between the objects is date, but the string diff also shows they have different key order. This might get annoying if the order was way different. Maybe you should a more context aware module to get the diff for the object like difflet, which is way better and also works(not perfectly, but better than not working) with circular objects and functions.
Another solution is to order the keys, convert functions and circular properties to strings(note that this has to be done recursively).
In case if you're going for the second solution, make sure it is in a separate module.",alFReD-NSH,NONE,2013-06-21 03:12:05+00:00,True,2014-07-19 18:14:37+00:00,393.63,,4,3,2013-12-13 12:31:29+00:00,175.39,pward123,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
904,Odd Issue,"I dont think this is actually a Mocha issue but its related. My project uses MongoDB which, when invoked, throws up a warning message. So if I start a test who's subject uses MongoDB I get the warning message. The really odd thing is that even if the test contains nothing, I get the warning message. Running a node program with a simple console.out() in the same directory does not show the warning message. So my question is; can you think of a reason why Mocha might be triggering this?
This is my simple test. My expectation is that this should produce nothing.
describe('WTF', function() {

});

This is the output that I get. Again, Mocha is not really the issue, but it's somehow triggering MongoDB and I am wondering if there is something about the way Mongo works with node files in a project that may cause it Mongo to load.
========================================================================================
=  Please ensure that you set the default write concern for the database by setting    =
=   one of the options                                                                 =
=                                                                                      =
=     w: (value of > -1 or the string 'majority'), where < 1 means                     =
=        no write acknowlegement                                                       =
=     journal: true/false, wait for flush to journal before acknowlegement             =
=     fsync: true/false, wait for flush to file system before acknowlegement           =
=                                                                                      =
=  For backward compatibility safe is still supported and                              =
=   allows values of [true | false | {j:true} | {w:n, wtimeout:n} | {fsync:true}]      =
=   the default value is false which means the driver receives does not                =
=   return the information of the success/error of the insert/update/remove            =
=                                                                                      =
=   ex: new Db(new Server('localhost', 27017), {safe:false})                           =
=                                                                                      =
=   http://www.mongodb.org/display/DOCS/getLastError+Command                           =
=                                                                                      =
=  The default of no acknowlegement will change in the very near future                =
=                                                                                      =
=  This message will disappear when the default safe is set on the driver Db           =
========================================================================================


  0 passing (1 ms)",rhythmicdevil,NONE,2013-06-21 19:21:03+00:00,True,2013-07-01 21:08:46+00:00,10.07,,2,1,2013-07-01 21:08:46+00:00,10.07,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
905,"Object diff doesn't show properties set to undefined, which may the difference","As you in the picture, there seems to be no difference, but actually the difference is in that one object contains a property set to undefined and the other doesn't. Here's the code to replicate it. I expected to see at least a more helpful error message.
require('should');
var _ = require('lodash');
it('Help full character diff', function () {
    var objA = {challenge : 'Can you tell me whats the difference between expected and actual?', 'good luck' : true };
    var objB = _.clone(objA);
    objB.a = undefined;
    (objA).should.eql(objB);
})
As for a solution, you fall back to printing the normal error message if the actual and expected are the same.
Again as I said in #903, a better solution is to use a module that is built to make object diffs from javascript like difflet.",alFReD-NSH,NONE,2013-06-25 13:09:37+00:00,True,2015-07-05 14:55:10+00:00,740.07,,4,3,2013-06-26 17:21:58+00:00,1.18,tj,CONTRIBUTOR,1,2,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
907,browser version of mocha.js not regenerated since 1.10?,"In both master and the 1.11 tag, the top-level browser version of mocha.js has a commit message referencing 1.10 and a date that is noticably older then 1.11.",dmose,NONE,2013-06-26 21:10:40+00:00,True,2013-06-26 21:33:27+00:00,0.02,,2,2,2013-06-26 21:33:27+00:00,0.02,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
908,"Release 0.11.0 doesn't include fix for xunit reporter, breaks Jenkins reporting","I've been trying to track down the reason that our internal Jenkins builds have been failing, and traced to a problem with the output of the xunit reporter. The Jenkins guys changed their XSD; in the <testsuite> element mocha spits out a ""skip"" element, while Jenkins is expecting ""skipped"".
I was going to send a PR when I looked in the code in the master branch and discovered this was already fixed in 6af471c
Great! Unfortunately, when I install the latest version of mocha from npm (0.11.0) this change is not in the installed code. Which is really weird, because the commit was merged to master well before the release was cut from what I can tell.
Would it be possible to double check that this change gets into the next release? Thanks!",christav,NONE,2013-06-26 22:11:19+00:00,True,2013-06-28 05:33:13+00:00,1.31,,3,2,2013-06-27 06:59:21+00:00,0.37,mal,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
909,Allow users to specify ignored directories for the -w option or ignore all hidden directories,"Currently 'node_modules' and '.git' are excluded per default. It would be nice if the user could add more ignore paths. Alternatively, maybe all hidden directories should be ignored per default.",brodo,NONE,2013-06-27 14:33:31+00:00,True,2013-07-01 21:17:32+00:00,4.28,,3,2,2013-07-01 21:17:32+00:00,4.28,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
910,"I came across a weird question about mocha and async, not sure which caused the problem.","I use mocha as nodejs testing framework. I found a weird a case for a test. all case test pass in only once, but if i repeat run the test case, i randomly get the error, anyone do me a favor, give me a hint.
activity-test.js
""use strict"";

var assert = require(""assert"");
var Activity = require(""../../models/activity"");
var Board = require(""../../models/board"")
var User = require(""../../models/user"");
var dbinit = require('./dbinit');
var async = require('async');

describe(""Test Activity Model"", function() {
  var user = null;
  var board = null;
  var activity = null;

  //stub data;
  user = new User({ username: ""test_user"",
                  email: ""test_user@example.com"" });

  board = new Board({ title: ""Test board"", creatorId: user.id });

  activity = new Activity({ content: ""User creates an activity for test"",
      creatorId: user.id,
        boardId: board.id
  });


  beforeEach(function(done) {
    async.series([
      function(callback){
        user.save(function(err) {
          callback(err,user);
        });
      },
      function(callback) {
        board.save(function(err) {
          callback(err,board);
        });
      },
      function(callback){
        activity.save(function(err) {
          activity.save(function(err) {
            callback(err,activity);
          })
        });
      }
    ], function(err, results){
      if(err || !results) {
        throw Error(""activity test:"",err);
      }
      if(results.length) return done();
    });
  });

  it(""Create Activity"", function(done) {
    activity.save(function(err, db_activity) {
      assert.strictEqual(err, null);
      assert.notEqual(db_activity, null);
      assert.strictEqual(db_activity.content, activity.content);
      assert.strictEqual(db_activity.creatorId, activity.creatorId);
      assert.strictEqual(db_activity.boardId, activity.boardId);
      done();
    });

  });
});

describe(""Test access activities from board"", function() {
  var user = null;
  var board = null;
  var testLengthOfActvities = 3;

  user = new User({ username: ""test_user"",
                      email: ""test_user@example.com"" });

  board = new Board({ title: ""Test board"", creatorId: user.id });

  beforeEach(function(done) {
    async.series([
      function(callback){
      user.save(function(err) {
        callback(err,user);
      })
    },
    function(callback) {
      board.save(function(err){
        callback(err, board);
      });
    },
    function(callback) {
      var activity1 = new Activity({ content: ""User creates an activity "" + 1 + "" for test"",
                                  creatorId: user.id,
                                  boardId: board.id
      });

      activity1.save(function(err){
        callback(err,activity1);
      });
    },
    function(callback) {
      var activity2 = new Activity({ content: ""User creates an activity "" + 2 + "" for test"",
                                  creatorId: user.id,
                                  boardId: board.id
      });

      activity2.save(function(err){
        callback(err,activity2);
      });
    },
    function(callback) {
      var activity3 = new Activity({ content: ""User creates an activity "" + 3 + "" for test"",
                                   creatorId: user.id,
                                   boardId: board.id
      });

      activity3.save(function(err){
        callback(err,activity3);
      });
    }
    ],
      function(err, results) {
        if(err || !results) {
          throw Error(""activity-test:"",err);
        }
        if(results.length) return done();
      });
  });

  it(""Test to get board's activities."", function(done) {
    assert.notEqual(board.getActivities, undefined,
      ""A board object should have an instance method named getActivities to "" +
      ""get all activities that are associated with itself."")
    board.getActivities(function(err, activities) {
      assert.notEqual(activities, null, ""Error when get board's activities. "" + err);
      assert.equal(activities.length, 3, ""No all activities are retrieved."");
    });
    done();
  });
})
error output:
when i run this command:  mocha spec/node/activity.test.js, i got this error:
[~/Code/cantas] [fix-unittest*]$ mocha spec/node/activity-test.js

  ․․

  ✖ 1 of 2 tests failed:

  1) Test access activities from board ""before each"" hook:
     Error: activity-test:
      at Error (<anonymous>)
      at /Users/xiaodeshi/Code/cantas/spec/node/activity-test.js:123:17
      at /Users/xiaodeshi/Code/cantas/node_modules/async/lib/async.js:229:13
      at /Users/xiaodeshi/Code/cantas/node_modules/async/lib/async.js:133:21
      at /Users/xiaodeshi/Code/cantas/node_modules/async/lib/async.js:226:17
      at /Users/xiaodeshi/Code/cantas/node_modules/async/lib/async.js:553:34
      at Promise.<anonymous> (/Users/xiaodeshi/Code/cantas/spec/node/activity-test.js:82:9)
      at Promise.<anonymous> (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mpromise/lib/promise.js:157:8)
      at Promise.EventEmitter.emit (events.js:95:17)
      at Promise.emit (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mpromise/lib/promise.js:79:38)
      at Promise.reject (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mpromise/lib/promise.js:106:15)
      at Promise.error (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/lib/promise.js:89:15)
      at handleSave (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/lib/model.js:90:15)
      at /Users/xiaodeshi/Code/cantas/node_modules/mongoose/lib/utils.js:414:16
      at null.<anonymous> (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/collection.js:337:9)
      at g (events.js:175:14)
      at EventEmitter.emit (events.js:106:17)
      at Server.Base._callHandler (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/connection/base.js:409:25)
      at /Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/connection/server.js:555:20
      at MongoReply.parseBody (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/responses/mongo_reply.js:131:5)
      at null.<anonymous> (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/connection/server.js:514:22)
      at EventEmitter.emit (events.js:95:17)
      at null.<anonymous> (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:190:13)
      at EventEmitter.emit (events.js:98:17)
      at Socket.<anonymous> (/Users/xiaodeshi/Code/cantas/node_modules/mongoose/node_modules/mongodb/lib/mongodb/connection/connection.js:382:22)
      at Socket.EventEmitter.emit (events.js:95:17)",xiaods,NONE,2013-06-27 23:48:48+00:00,True,2013-07-01 21:17:59+00:00,3.9,,2,1,2013-07-01 21:17:59+00:00,3.9,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
911,`beforeEach` and `afterEach` are running in nested suites/contexts,"There is no documentation on when a beforeEach or afterEach will run. My intuition states that it should be run before/after every describe/it block in the current context completes.
However, the behavior I am noticing, is that beforeEach and afterEach are run before/after every it block in the current context and all nested contexts.
I have created a proof of concept to demonstrate that the noticed behavior is occurring: https://gist.github.com/twolfson/5883057#file-test-js
For convenience, I will copy/paste the script and output here:
Script
describe('An afterEach hook', function () {
  afterEach(function () {
    console.log('afterEach run!');
  });

  before(function () {
    console.log('before run!');
  });

  describe('in some nested contexts', function () {
    before(function () {
      console.log('nested before run!');
    });

    it('runs after this block', function () {
      console.log('nested it run!');

    });

    it('runs again after this block', function () {
      console.log('second nested it run!');
    });
  });
});

Output
before run!
nested before run!
nested it run!
afterEach run!
second nested it run!
afterEach run!

The behavior I intuitively anticipate is afterEach to run once, after the second nested it.
before run!
nested before run!
nested it run!
second nested it run!
afterEach run!

My use case for the intuitive functionality is cleaning out the this context after a context completes. The current implementation will clean out the context after every assertion.
afterEach(function () {
  var key;
  for (key in this) {
    delete this[key];
  }
});

describe('A banana', function () {
  before(function () {
    this.banana = new Banana();
  });

  describe('when peeled', function () {
    before(function () {
      this.peeledBanana = this.banana.peel();
    });

    it('is white', function () {
      assert.strictEqual(this.peeledBanana.color, 'white');
      // `afterEach` is invoked here, cleaning out `this`
    });

    it('is soft', function () {
      // `this.peeledBanana` is no longer defined since `afterEach` cleaned it out
      assert.strictEqual(this.peeledBanana.hardness, 'soft');
    });
  });
});
A comparable example to this would be opening a database transaction in each new context of a test suite.
I can work around it by invoking after in each nested context but I feel like there could be a hook in the framework.",twolfson,NONE,2013-06-28 07:49:18+00:00,True,2014-08-29 20:02:09+00:00,427.51,,12,16,2013-06-28 08:46:23+00:00,0.04,twolfson,NONE,1,0,0,11,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
912,NodeUnit-like expect assertions,"NodeUnit's expect feature:

expect(amount) - Specify how many assertions are expected to run within a test. Very useful for ensuring that all your callbacks and assertions are run.

does indeed seem useful. If mocha has developer docs I'd see about hooking this in as a plugin.",jasonkuhrt,NONE,2013-06-28 12:56:46+00:00,True,2013-07-01 21:20:50+00:00,3.35,,2,7,2013-07-01 21:20:50+00:00,3.35,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
914,Error installing as component: Cannot switch to old mode now.,"I am using node v0.10.12.
_stream_readable.js:720
    throw new Error('Cannot switch to old mode now.');
          ^
Error: Cannot switch to old mode now.
    at emitDataEvents (_stream_readable.js:720:11)
    at IncomingMessage.Readable.pause (_stream_readable.js:711:3)
    at Response.pause (/usr/local/share/npm/lib/node_modules/component/node_modules/superagent/lib/node/response.js:80:12)
    at Response.ondata (stream.js:52:16)
    at Response.EventEmitter.emit (events.js:95:17)
    at Stream.EventEmitter.emit (events.js:117:20)
    at Unzip.<anonymous> (/usr/local/share/npm/lib/node_modules/component/node_modules/superagent/lib/node/utils.js:117:30)
    at Unzip.EventEmitter.emit (events.js:95:17)
    at Unzip.<anonymous> (_stream_readable.js:736:14)
    at Unzip.EventEmitter.emit (events.js:92:17)
make: *** [components] Error 8",aiwilliams,NONE,2013-06-28 17:47:09+00:00,True,2013-06-28 22:28:36+00:00,0.2,,2,1,2013-06-28 22:28:36+00:00,0.2,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
915,"Epilogue After ""AfterEach""","Firstly, fantastic code runner, couldn't imagine ever going back to anything else.
Noticed today when I was doing some console.log spying that the test report is logged prior to the AfterEach. I'm not sure if there was a reason for this, but it hinders the ability to easily reset console.log prior to the epilogue, leaving me to manually do it per task.
If I have some time next week, I'll submit a PR if you would like the change?",jonathanrdelgado,CONTRIBUTOR,2013-06-29 05:44:30+00:00,True,2015-01-23 19:54:33+00:00,573.59,,2,1,2013-08-09 08:12:10+00:00,41.1,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
917,Test result in afterEach() hook,"Hey guys.
Is there any way to access a test result of just completed test from an afterEach() hook?
I need to do additional checks for each test after it's completion, so that's why I'm asking about this feature.
Thanks,
Andrey",DemonShi,NONE,2013-07-02 12:08:00+00:00,True,2013-08-09 08:25:25+00:00,37.85,,3,1,2013-07-02 12:13:26+00:00,0.0,mal,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
921,Test using multiple sets of data?,"Hello,
Can you please add the ability to test multiple sets of data? meaning, given we have the following function.
Add(a, b) { return a + b; }
I'd like to do something like this.
describe(""add"", function() {

    data([1, 2, 3], [4, 6, 10]); // the set of data that is passed during the test.
    it(""should return the computed numbers"", function(a, b, expectedResult) {
        var actualResult = Add(a, b);

        expect(actualResult).to.equal(expectedResult);
    });

});

I'm not sure how it works so please take the code above as an example.
I'm quite new to Mocha so it might be possible and I don't know about it. :)",eyalsk,NONE,2013-07-04 22:20:21+00:00,True,2013-07-04 22:53:04+00:00,0.02,,2,2,2013-07-04 22:53:04+00:00,0.02,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
922,How to use mocha with component?,"Hello,
I want to use mocha in a component only project for testing.
So far I added mocha to component.json and I also created a html file which loads build.js. When I look through build.js I see that mocha.js is registered properly but I cannot access it through require:
// returns {}
console.log(require('mocha'));

// returns also {}
console.log(require('visionmedia-mocha'));

So what to do?",bodokaiser,NONE,2013-07-06 11:30:29+00:00,True,2013-07-07 13:10:09+00:00,1.07,,2,3,2013-07-07 13:10:09+00:00,1.07,bodokaiser,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
926,Include bdd hierarchical structure in json reporter,"I want to grab json test results and generate a report later using a template engine like jade.
As json reporter doesn't have that info I see no programmatic way to get the BDD hierarchy (describe/before/after/it/codeblock) to process or reconstruct an UI like the one mocha presents on the browser version.
Basically what I want is a json reporter that includes all test output data, including bdd structure (if exists), code blocks, and error stack traces.",benjamine,NONE,2013-07-16 04:26:55+00:00,True,2013-08-09 09:03:58+00:00,24.19,,3,2,2013-08-09 09:03:58+00:00,24.19,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
928,Test metadata,"99% of the time grep serves my needs but recently we have a need for running/not running tests (the same tests) under many different conditions (think like a selenium situation on multiple browsers) and only some tests apply in some situations...
Similar to what rspec does this is what I would like to do:
// the metadata itself is irrelevant but there are some uses in my 
// particular instance(related to multiple different ""host"" environments like browsers 
suite('my cool thing', { browsers: ['not-ie6'] }, function() {
});
My initial reaction is to put this in some external repo that extends mocha but I wonder if this is useful enough to put in the core lib so others can use that metadata to extend mocha's behaviors in their extension libraries/projects.
Is this something that would be accepted into core mocha?",lightsofapollo,CONTRIBUTOR,2013-07-16 21:37:34+00:00,False,,,,5,9,2013-08-02 05:28:55+00:00,16.33,park9140,CONTRIBUTOR,1,4,0,0,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
929,How to test a clustered Express app?,"Here is a simplified version of my cluster Express app:
/index.js
module.exports = process.env.CODE_COV
    ? require('./lib-cov/app')
    : require('./lib/app');

/lib/app.js
var cluster = require('cluster'),
    express = require('express'),
    app = module.exports = express.createServer();

if (cluster.isMaster) {
    // Considering I have 4 cores.
    for (var i = 0; i < 4; ++i) {
        cluster.fork();
    }
} else {
    // do app configurations, then...

    // Don't listen to this port if the app is required from a test script.
    if (!module.parent.parent) {
        app.listen(8080);
    }
}

/test/test1.js
var app = require('../');

app.listen(7777);

// send requests to app, then assert the response.

Questions:

var app = require('../'); will not work in this cluster environment. Which of the worker apps should it return? Should it return the cluster object instead of an Express app?
Now, obviously setting the port in the test script will not work. How would you set a port within a test script to a cluster of apps?
How would you send requests to this cluster of apps?

The only solution I can think of is to conditionally turn off the clustering feature and run only one app if the app is requested from a test script (if (module.parent.parent) ...).
Any other way to test a clustered Express app with Mocha?",kadishmal,NONE,2013-07-19 03:06:11+00:00,True,2013-07-19 17:24:27+00:00,0.6,,3,2,2013-07-19 07:19:37+00:00,0.18,mal,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
937,--bail keep executing before/after hooks for remaining suites,"When using --bail option I expect all my subsequent suites to be skipped, including all it's before/after hooks.
The beforeEach/afterEach hooks is properly skipped, but the before/after ones keep being executed.
Test
var assert = require('assert');

describe('first suite', function() {
  it('should just fail', function() {
    assert.equal(1, 2);
  });
});

describe('next suite', function() {

  before(function() {
    console.log('before hook: should never be called!');
  });

  after(function() {
    console.log('after hook: should never be called!');
  });

  describe('should never be executed', function() {
    it('should never reach here', function() {
      throw new Error('bang');
    });
  });
});
Running
mocha --ui bdd --reporter spec --bail tests/test.js

Output
  first suite
    1) should just fail

  next suite
before hook: should never be called!
    should never be executed
after hook: should never be called!


  ✖ 1 of 2 tests failed:

  1) first suite should just fail:
     AssertionError: 1 == 2",arboleya,NONE,2013-07-25 15:10:15+00:00,True,2014-01-01 01:13:04+00:00,159.42,,6,6,2013-07-25 15:49:20+00:00,0.03,tj,CONTRIBUTOR,0,3,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
938,Accessing suite's stats on after / afterEach hooks,"Is it possible to get the tests's stats (fail/pass num) on after / afterEach hooks?
This is essential for notifying other tools about the tests, such as Sauce Labs.
describe('xyz', function() {

  after(function() {
    if( this.stats.failures > 0)
      fail_suite();
    else
      pass_suite();
  });

  afterEach(function() {
    if( this.failed )
      fail_test();
    else
      pass_test();
  });

  // describe [...]
});
Makes sense?",arboleya,NONE,2013-07-25 17:31:13+00:00,True,2013-08-09 07:25:00+00:00,14.58,,3,2,2013-08-02 04:24:01+00:00,7.45,park9140,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
939,Running Tests multiple times through JS API,"I'm trying to build an api endpoint which can run the mocha tests for my project and return a JSON result. The test function:
var Mocha = require('mocha');
var fs = require('fs');
var path = require('path');

var TEST_DIR = 'test';

var _runTests = function(cb){

    var mocha = new Mocha();

    fs.readdir(TEST_DIR, function(err, files){

        if(err) return cb(err);

        files.filter(function(file){
            return file.substr(-3) === '.js';
        }).forEach(function(file){
            mocha.addFile(path.join(TEST_DIR, file));
        });

        var _passed = [];
        var _failed = [];

        var runner = mocha.run(function(){
            cb(null, {
                passed : _passed,
                failed : _failed
            });
        });

        var pruneTest = function(test){
            return {
                title : test.title,
                duration : test.duration,
                state : test.state,
                speed : test.speed
            };
        };

        runner.on('pass', function(test){
            _passed.push(pruneTest(test));
        });

        runner.on('fail', function(test){
            _failed.push(pruneTest(test));
        });

    });
};
This works great the first time the function is called. But once I call it again, the callback is immediately fired with empty output:
{
  ""passed"": [],
  ""failed"": []
}",tshaddix,NONE,2013-07-25 23:00:41+00:00,True,2013-07-25 23:39:39+00:00,0.03,,2,2,2013-07-25 23:39:38+00:00,0.03,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
950,Add filename to Mocha.Test objects,I would like for the mocha runner to send my custom reporter the names of the containing files along with tests. How would people feel about a patch that made test objects aware of the file in which they are declared?,lambdabaa,CONTRIBUTOR,2013-08-14 16:58:21+00:00,True,2014-03-28 17:58:17+00:00,226.04,,9,13,2013-08-14 17:26:58+00:00,0.02,lightsofapollo,CONTRIBUTOR,0,3,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
952,"Object diff is shown as a string, new lines are '\n' characters and it's not readable.","The picture says it all. I remember object diffs were easy to read with new lines!
Using node@0.10.13, mocha@1.12.0, should@1.2.2",alFReD-NSH,NONE,2013-08-15 04:27:38+00:00,True,2015-07-05 14:54:20+00:00,689.44,,2,4,2013-08-15 04:30:55+00:00,0.0,alFReD-NSH,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
955,Not throw exception in `when.js` then callback when assert fail.,"Using when.js for promise something, checking callback's parameter.
var when = require('when');
var assert = require('chai').assert;
var fail = assert.fail;

describe('when', function () {

    it('should reject', function (done) {
        var expected = 123;
        var d = when.defer();
        d.promise.then(
            fail,
            function(err) {
                assert.equal(err, 1); // should throw exception, but timeout
                done();
            }
        );
        d.reject(expected);
    });
});
Should throw exception, but throw timeout after 2000ms.
1 failing

  1) when reject:
     Error: timeout of 2000ms exceeded
      at null.<anonymous> (./node_modules/mocha/lib/runnable.js:165:14)
      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)

Using buster, it's work:
var when = require('when');

var buster = require('buster');
buster.spec.expose();

var assert = buster.assert;
var fail = buster.assertions.fail;

describe('when', function (){
    it('reject', function (done) {
        var expected = 123;
        var d = when.defer();

        d.promise.then(
            fail,
            function(value) {
                assert.equals(value, 1);
                done();
            }
        );
        d.reject(expected);
    });
});
Throw the proper exception:
when: AF
Failure: when reject
    [assert.equals] 123 expected to be equal to 1
    at ./test/reject-buster.test.js:17:24
    at NearRejectedProxy.when (./node_modules/when/when.js:465:11)
    at Object._message (./node_modules/when/when.js:375:25)
    at deliver (./node_modules/when/when.js:270:7)
    at ./node_modules/when/when.js:482:5
    at Object.drainQueue [as _onImmediate] (./node_modules/when/when.js:801:4)
    at processImmediate [as _immediateCallback] (timers.js:330:15)

1 test case, 1 test, 1 assertion, 1 failure, 0 errors, 0 timeouts
Finished in 0.011s",taoyuan,NONE,2013-08-20 08:04:36+00:00,True,2014-07-08 10:48:04+00:00,322.11,,3,3,2014-07-08 10:48:04+00:00,322.11,jonathanong,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
956,opt-out of globals,"@isaacs is complaining that Mocha tests aren't node-able. I think this is a silly complaint, but I think he represents a vocal minority, so shutting them up would be possibly valuable.
Here is what I envision: instead of being able to use e.g. describe, it, etc. by default, you'd do
var mochaBDD = require(""mocha/bdd"");
var describe = mochaBDD.describe;
var it = mochaBDD.it;

// ok, stupid boilerplate is over but at least I don't have to use a test runner, woohoo!
Alternately it could be just
require(""mocha/bdd"");
and that would set up some globals for you.
What do you think?",domenic,CONTRIBUTOR,2013-08-20 21:00:26+00:00,False,,,,18,38,2013-08-21 01:25:16+00:00,0.18,isaacs,NONE,1,8,0,8,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
958,error stack should be displayed for uncaught exceptions in async tests,"Currently exceptions in async tests lose their stack and display unfriendly message like:
Chrome 28.0.1500 (Linux) simple test FAILED
    Error: Uncaught AssertionError: expected 1 to equal 2 (/home/janotav/anywhere/web-ide/client/core/components/chai/chai.js:505)
        at global.onerror (/home/janotav/anywhere/web-ide/server/node_modules/mocha/mocha.js:5343:23)

This has been addressed recently in the HTML5 spec and can produce nice output like:
Chrome 31.0.1605 (Windows 7) simple test FAILED
    AssertionError: expected 1 to equal 2
        at Assertion.assertEqual (/home/janotav/anywhere/web-ide/client/core/components/chai/chai.js:907:12)
        at Assertion.ctx.(anonymous function) [as equal] (/home/janotav/anywhere/web-ide/client/core/components/chai/chai.js:3113:25)
        at /home/janotav/anywhere/web-ide/client/tests/spec/idb-filesystem-spec.js:43:34

If the global handler in mocha re-uses the existing Error object like this:
    global.onerror = function(err, url, line, colno, erroObj){
        fn(erroObj || new Error(err + ' (' + url + ':' + line + ')'));
    };
Currently this extra arguments work in Canary, other browsers are likely to follow. Related blog post:
https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror",janotav,NONE,2013-08-21 07:21:07+00:00,True,2015-04-09 17:21:57+00:00,596.42,,3,2,2015-04-09 17:21:57+00:00,596.42,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
959,COULDNT GET A SESSION ID selenium-server-standalone-2.35.0.jar,"Using the example test from docs, I couldn't get it to work against latest selenium 2.35. Works OK against 2.31. Could be a bug in selenium
verbose logs:
with selenium 2.35:
[19:10:38]:  COMMAND    POST     ""/wd/hub/session""
[19:10:38]:  DATA        {""desiredCapabilities"":{""browserName"":""phantomjs"",""version"":"""",""javascriptEnabled"":true,""platform"":""ANY""},""sessionId"":null}
[19:10:41]:  ERROR  COULDNT GET A SESSION ID
[19:10:41]:  RESULT      {""platform"":""MAC"",""acceptSslCerts"":false,""javascriptEnabled"":true,""browserName"":""phantomjs"",""rotatable"":false,""driverVersion"":""1.0.3"",""locationContextEnabled"":false,""webdriver.remote.sessionid"":""f92d1d23-1153-44f5-8b03-a44409922101"",""version"":""1.9.1"",""databaseEnabled"":false,""cssSelectorsEnabled"":true,""handlesAlerts"":false,""browserConnectionEnabled"":false,""nativeEvents"":true,""webStorageEnabled"":false,""proxy"":{""proxyType"":""direct""},""applicationCacheEnabled"":false,""driverName"":""ghostdriver"",""takesScreenshot"":true}
[19:10:41]:  ERROR  NO SESSION, EXITING
[19:10:41]:  COMMAND    POST     ""/wd/hub/session/:sessionId/url""
[19:10:41]:  DATA        {""url"":""http://www.example.com/""}
[19:10:41]:  COMMAND    GET      ""/wd/hub/session/:sessionId/title""
[19:10:41]:  ERROR  COULDNT GET A SESSION ID
․[19:10:41]:  ERROR   COULDNT GET A SESSION ID
[19:10:41]:  COMMAND    POST     ""/wd/hub/session/:sessionId/element""
[19:10:41]:  DATA        {""using"":""css selector"",""value"":""p""}
[19:10:41]:  ERROR  COULDNT GET A SESSION ID
․[19:10:41]:  COMMAND DELETE   ""/wd/hub/session/:sessionId""
with selenium 2.31 (expected behaviour):
[19:09:18]:  COMMAND    POST     ""/wd/hub/session""
[19:09:18]:  DATA        {""desiredCapabilities"":{""browserName"":""phantomjs"",""version"":"""",""javascriptEnabled"":true,""platform"":""ANY""},""sessionId"":null}
[19:09:20]:  SET SESSION ID 74e3b7cf-c879-48d3-8b0a-a9b88ebe9251
[19:09:20]:  COMMAND    POST     ""/wd/hub/session/74e3b7cf-c879-48d3-8b0a-a9b88ebe9251/url""
[19:09:20]:  DATA        {""url"":""http://www.example.com/""}
[19:09:23]:  COMMAND    GET      ""/wd/hub/session/74e3b7cf-c879-48d3-8b0a-a9b88ebe9251/title""
[19:09:23]:  RESULT      Example Domain
․[19:09:23]:  COMMAND POST     ""/wd/hub/session/74e3b7cf-c879-48d3-8b0a-a9b88ebe9251/element""
[19:09:23]:  DATA        {""using"":""css selector"",""value"":""p""}
[19:09:23]:  RESULT      {""ELEMENT"":""0""}
[19:09:23]:  COMMAND    GET      ""/wd/hub/session/74e3b7cf-c879-48d3-8b0a-a9b88ebe9251/element/0/text""
[19:09:23]:  RESULT      This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.
․[19:09:23]:  COMMAND DELETE   ""/wd/hub/session/74e3b7cf-c879-48d3-8b0a-a9b88ebe9251""",apfrod,NONE,2013-08-24 18:33:56+00:00,True,2013-08-24 19:58:54+00:00,0.06,,2,1,2013-08-24 19:58:54+00:00,0.06,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
960,Feature request: make it possible for Mocha to run on node-webkit without a complex workaround,"As some of you might already know, node-webkit is a fine amalgamation of the Node's API and a WebKit-based (Chromium-based) web browser. The resulting engine makes it possible for cross-platform GUI applications (for Windows, Mac OS X and Linux) to be developed with web technologies (HTML, CSS, JS, WebGL, etc.), their windows are essentially “local webpages” using Node API to access the underlying system.
And it's quite possible to use existing Node modules in a node-webkit-based application.
However, when I try running Mocha on node-webkit, there's an issue.
Most of Mocha's reporters use console.log output with ANSI commands to define colours and to move the cursor. However, inside the node-webkit console.log() is rerouted to the WebKit's “Developer Tools” window, and the reports of Mocha are far from being pretty there.
Mocha does also have a browser-oriented reporter, but, when it runs on node-webkit, there are two problems with it:

It tries to create some minimal versions for a couple of Node interfaces (require and process), though both exist in node-webkit and have their complete form.
It does not walk through the test/ subdirectory; the tests have to be enumerated (as <script src=""…""></script>) below.

That's because the reporter thinks it has only browser's interfaces in its avail, while actually it could also use Node API in node-webkit.
Of course, there's always a workaround. For example, the authors of node-webkit still use Mocha for testing. It is possible to read /tests/index.html and discover how it has been done:

The Node API objects are hidden from the Mocha's browser-oriented reporter:

<script type=""text/javascript"" charset=""utf-8"">
// Remove symbols of node-webkit to avoid conficts with mocha in browser.
var nodeRequire = require;
var nodeGlobal = global;
var nodeProcess = process;
require = undefined;
global = undefined;
process = undefined;
</script>

These objects are then restored in their original form, replacing the reporter's minimalistic mockups:

<script type=""text/javascript"" charset=""utf-8"">
// Restore default node-webkit environment.
require = nodeRequire;
global = nodeGlobal;
process = nodeProcess;
</script>

Mocha is used programmatically. A wrapper script discovers the necessary options and traverses subdirectories in a search for tests.

However, that workaround is a complex one. It's unreasonable to expect the end users of node-webkit to be willing to repeat all these steps to run Mocha tests for their node-webkit-based applications.
Hence the feature request.
Please make a node-webkit-oriented reporter.
It should be similar to the browser-oriented reporter (should make some HTML output inside a <div>), with a couple of differences:

It should expect (and use) Node API instead of building its own versions of them.
It should use Node API to walk through the test/ subdirectory for tests. These tests should then run in the same window's context (by adding <script src=""…""></script> to the DOM) instead of the Node's isolated context (require()), because the tests should have access to that window's DOM.

The reporter could check process.versions['node-webkit'] to ensure that it's indeed running on node-webkit (not in a traditional web browser, not on a vanilla Node.js, not on some other Node+browser system such as AppJS.)",Mithgol,NONE,2013-08-26 05:48:44+00:00,True,2013-12-07 20:34:36+00:00,103.62,,7,10,2013-11-19 23:05:24+00:00,85.72,BenoitZugmeyer,CONTRIBUTOR,0,4,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
961,highlight test codelines in stacktraces,"I'm not sure if this is hard or easy, but here goes:
It would be great if there was a way to get the standard reporter to highlight the lines in the stacktrace that match a simple regexp.
This would be a great tool to quickly find the offending line when looking through a stacktrace of 40 - 50 lines and looking for the one line where you invoke a function - the rest of the lines are often just noise..",tarjei,NONE,2013-08-26 09:15:08+00:00,True,2015-03-14 20:22:35+00:00,565.46,,2,1,2015-03-14 20:22:35+00:00,565.46,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
963,Add beforeDescribe/afterDescribe,"I'm attempting to make a global piece of code which runs around each describe (namely, Sinon's sandboxing features). This works great for beforeEach and afterEach, as they run around each it() statement. However, before and after only run in the given describe context, meaning if I wanted to run a piece of code for every describe, I either need to have before and after for the code in every describe, or override the describe function.
I propose beforeDescribe and afterDescribe functions, which will execute for every describe call that is a child of the current describe call.",keithamus,CONTRIBUTOR,2013-08-29 11:20:52+00:00,True,2013-11-11 09:16:52+00:00,73.91,,4,4,2013-08-29 14:24:29+00:00,0.13,park9140,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
966,named hooks,"Would apply to before(), after(), beforeEach(), afterEach()
Some way to name your hooks would be awesome. When you have a lot of hooks before your tests (seeding different dbs with different data sets) it becomes a pain to debug hooks when they fail. Usually I end up placing console.log statements in each hook to see which one isn't returning (or returning an error to the callback).
Example:

I'm not really sure what the syntax would look like for this.",contra,NONE,2013-09-01 05:08:53+00:00,True,2013-11-18 04:38:05+00:00,77.98,,6,6,2013-11-18 04:38:05+00:00,77.98,travisjeffery,CONTRIBUTOR,0,4,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
967,"timeouts and extant callbacks, forced failures and lying stack traces","(edited for clarity)
Test cleanup seems to be a weak spot; I've got some very timing-sensitive tests that -- when they fail -- cause subsequent tests that should pass to fail, with stack traces that point to the wrong issue.  I'm trying to make sure I'm not missing some obvious way of handling these.
Let's say I have these tests in a single suite:
test(""A"", function(done) {
  this.timeout(1000);
  setTimeout(function() {
    assert(false);
    done();
  }, 2000);
});

test(""B"", function(done) {
  this.timeout(10000);
  setTimeout(function() {
    done();
  }, 3000);
});
A will timeout and fail.  B will start, and though it would pass, A's timer will fire and A's assertion will cause B to fail (with a stack trace that references A).
The only way I've found to get around this (and the problem exists for any delayed event in a test, whether that test times out or finishes in a separate test branch) is to do something like the following for A:
test(""A"", function(done) {
  var _runnable = this.runnable();
  this.timeout(1000);
  setTimeout(function() {
    if (!_runnable.timedOut && !_runnable.duration) {
      assert(false);
      done();
    }
  }, 2000);
});
.. is that the preferred method of handling this issue?",aahoughton,NONE,2013-09-04 05:11:19+00:00,False,,,,5,7,2015-03-09 05:19:39+00:00,551.01,danielstjules,CONTRIBUTOR,0,2,0,2,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
968,escaping error message content prevents displaying images in results,"I'm new to Mocha but liking it so far.  I wanted to port over js-imagediff (https://github.com/HumbleSoftware/js-imagediff) to Mocha as it only provides a jasmine interface currently.  It nicely shows a graphical diff in its error output as can be seen at the example at http://humblesoftware.github.io/js-imagediff/test.html
The problem I've run into with mocha is that it html escapes the error messages preventing the embedding of images.  This makes a port impossible.  As far as I can see the issue lies in html.js
el.appendChild(fragment('%e', str));
where the %e invokes escaping on the message.  Perhaps the framework could provide an option for the matcher to say the output shouldn't be escaped.  I image a flag on the test.err could serve this purpose.
If this seems reasonable I'm willing to work on such a change.",maliberty,NONE,2013-09-06 04:47:32+00:00,True,2015-07-10 19:23:07+00:00,672.61,,2,2,2015-04-09 17:22:52+00:00,580.52,boneskull,MEMBER,1,0,0,0,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
969,some weird incompatibility with readable-stream,"var stream = require('readable-stream');
describe(""foo"", function() {
  it(""works"");
});
$ ./node_modules/.bin/mocha --reporter spec test.js 
TypeError: Cannot set property 'decodeStrings' of undefined
    at WriteStream.Socket (net.js:177:37)
    at new WriteStream (tty.js:73:14)
    at createWritableStdioStream (node.js:555:18)
    at process.stderr (node.js:628:16)
    at console.js:107:53
    at NativeModule.compile (node.js:892:5)
    at Function.NativeModule.require (node.js:861:18)
    at node.js:205:27
    at Runner.<anonymous> (/home/andy/tmp/npmtest/node_modules/mocha/lib/reporters/spec.js:36:5)
    at Runner.EventEmitter.emit (events.js:117:20)
    at Runner.run (/home/andy/tmp/npmtest/node_modules/mocha/lib/runner.js:514:8)
    at Mocha.run (/home/andy/tmp/npmtest/node_modules/mocha/lib/mocha.js:316:17)
    at Object.<anonymous> (/home/andy/tmp/npmtest/node_modules/mocha/bin/_mocha:343:7)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:901:3
$ node -v
v0.10.18

semi-related: nodejs/node-v0.x-archive#6170",andrewrk,NONE,2013-09-08 13:26:29+00:00,True,2013-09-08 13:36:09+00:00,0.01,,1,1,2013-09-08 13:31:17+00:00,0.0,andrewrk,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
971,Ruby's RSpec let syntax,"It would be nice to have the power of let syntax inside mocha specs.
There is a similar feature request for jasmine jasmine/jasmine#101",lucassus,NONE,2013-09-10 14:29:11+00:00,True,2013-09-11 06:44:20+00:00,0.68,,8,17,2013-09-10 17:34:12+00:00,0.13,hallas,CONTRIBUTOR,0,3,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
972,"When run programmatically, subsequent runs produce different results compared to the first run","I've noticed that when running Mocha programmatically in node.js:

A re-run of an originally failing test results in a timeout error subsequently.  This is fixed by deleting the test state in runner.js as attached.
A re-run of an originally timed-out test results in Mocha hanging forever subsequently.  This is fixed by resetting the timedOut attribute to false in runnable.js as attached.

I expected the same results every time - failed and timed out respectively.  The patch below fixes these issues, but since I'm not that familiar with Mocha code, so I'm not sure if these are the best places in the code to make these changes, that's why I didn't do this as a pull request; the diff should help nonetheless.
This may be related to #435.
diff --git a/lib/runnable.js b/lib/runnable.js
index b34bf1e..06f0ada 100644
--- a/lib/runnable.js
+++ b/lib/runnable.js
@@ -161,6 +161,7 @@ Runnable.prototype.run = function(fn){
   // timeout
   if (this.async) {
     if (ms) {
+      self.timedOut = false;
       this.timer = setTimeout(function(){
         done(new Error('timeout of ' + ms + 'ms exceeded'));
         self.timedOut = true;
diff --git a/lib/runner.js b/lib/runner.js
index c42e449..a185321 100644
--- a/lib/runner.js
+++ b/lib/runner.js
@@ -397,6 +397,7 @@ Runner.prototype.runTests = function(suite, fn){
     // execute test and hook(s)
     self.emit('test', self.test = test);
     self.hookDown('beforeEach', function(){
+      delete self.test.state;
       self.currentRunnable = self.test;
       self.runTest(function(err){
         test = self.test;",vwong,NONE,2013-09-11 04:49:07+00:00,True,2015-04-09 17:20:44+00:00,575.52,,3,2,2015-04-09 17:20:44+00:00,575.52,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
973,A single failing hook prevents all future tests from running.,"My Original comment below: It looks like we now correctly report how this is actually prevents other tests from running.
git bisect tells me this was introduced in: 5d1df37
A good example is running two tests and the error looks like this:
  0 passing (3 ms)
  1 failing

When previously it looked like this:
  ✖ 1 of 2 tests failed:",lightsofapollo,CONTRIBUTOR,2013-09-11 06:46:44+00:00,True,2013-12-02 20:12:30+00:00,82.56,,2,1,2013-12-02 20:12:30+00:00,82.56,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
974,sometimes I get no stack trace,"I'm using the tap reporter but for this assertion failure it's the same no matter what:
http://cl.ly/image/0s0s1q2z0S0E
I'm console.log'n the test and err objects here but I have a few questions:

why for this failure is there no stack? it's not an async test
the tap reporter shows the condensed
""AssertionError: expected { Object (startsAt, startsAtStr, ...) } to deeply equal { Object (error) }""
and not the action/expected properties so I don't really have any idea when trying to fix this spec.",malkomalko,NONE,2013-09-11 17:38:06+00:00,True,2013-11-18 04:36:38+00:00,67.46,,2,1,2013-11-18 04:36:38+00:00,67.46,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
978,Change order in the 'epilogue',"When doing test first programming I obviously start out a working session with a lot of failing tests. It seems to me that the output from mocha (any terminal reporter) was not designed with this in mind since the output is in this order:

Progress
Summary
Stack traces

The stack traces obviously requires a lot of space so when working on my code to make a test pass I always have to scroll up to see if I make any progress since all the stack traces fill up the terminal. I think a better order would be:

Progress
Stack traces
Summary

This way the summary would always be shown when the test run is complete. If I need to read a stack trace and/or the the description from the failing test I would have to scroll up, but that's no different from how it is today.
Possibly, the summary could contain the descriptions of the failing tests.
I think this would be an improvement of how the tests results are presented.",TheLudd,NONE,2013-09-19 11:10:03+00:00,True,2013-10-06 11:01:43+00:00,16.99,,2,1,2013-10-06 11:01:42+00:00,16.99,hallas,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
979,"On install: Error: EMFILE, too many open files","thomas@workstation:object-mapper$ npm install -g mocha
npm info it worked if it ends with ok
npm info using npm@1.2.32
npm info using node@v0.10.12
npm info trying registry request attempt 1 at 18:46:04
npm http GET http://registry.npmjs.org/mocha
npm http 304 http://registry.npmjs.org/mocha
npm info install mocha@1.13.0 into /usr/local/lib
npm info installOne mocha@1.13.0
npm info /usr/local/lib/node_modules/mocha unbuild
npm info preuninstall mocha@1.13.0
npm info uninstall mocha@1.13.0
npm info postuninstall mocha@1.13.0
npm info preinstall mocha@1.13.0
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/commander/0.6.1
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/growl
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/jade/0.26.3
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/diff/1.0.7
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/debug
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/mkdirp/0.3.5
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/glob/3.2.3
npm http 304 http://registry.npmjs.org/commander/0.6.1
npm http 304 http://registry.npmjs.org/growl
npm WARN package.json growl@1.7.0 No repository field.
npm http 304 http://registry.npmjs.org/debug
npm http 304 http://registry.npmjs.org/diff/1.0.7
npm http 304 http://registry.npmjs.org/jade/0.26.3
npm WARN package.json jade@0.26.3 No readme data.
npm http 304 http://registry.npmjs.org/glob/3.2.3
npm http 304 http://registry.npmjs.org/mkdirp/0.3.5
npm info install commander@0.6.1 into /usr/local/lib/node_modules/mocha
npm info install growl@1.7.0 into /usr/local/lib/node_modules/mocha
npm info install jade@0.26.3 into /usr/local/lib/node_modules/mocha
npm info install diff@1.0.7 into /usr/local/lib/node_modules/mocha
npm info install debug@0.7.2 into /usr/local/lib/node_modules/mocha
npm info install glob@3.2.3 into /usr/local/lib/node_modules/mocha
npm info install mkdirp@0.3.5 into /usr/local/lib/node_modules/mocha
npm info installOne commander@0.6.1
npm info installOne growl@1.7.0
npm info installOne jade@0.26.3
npm info installOne diff@1.0.7
npm info installOne debug@0.7.2
npm info installOne glob@3.2.3
npm info installOne mkdirp@0.3.5
npm info /usr/local/lib/node_modules/mocha/node_modules/commander unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/growl unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/jade unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/diff unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/debug unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/glob unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/mkdirp unbuild
npm info preinstall diff@1.0.7
npm info build /usr/local/lib/node_modules/mocha/node_modules/diff
npm info linkStuff diff@1.0.7
npm info preinstall growl@1.7.0
npm WARN package.json object-mapper@0.0.0 No repository field.
npm WARN package.json object-mapper@0.0.0 No readme data.
npm info install diff@1.0.7
npm info build /usr/local/lib/node_modules/mocha/node_modules/growl
npm info linkStuff growl@1.7.0
npm info install growl@1.7.0
npm info postinstall diff@1.0.7
npm info postinstall growl@1.7.0
npm info preinstall debug@0.7.2
npm info build /usr/local/lib/node_modules/mocha/node_modules/debug
npm info linkStuff debug@0.7.2
npm info preinstall commander@0.6.1
npm info install debug@0.7.2
npm info postinstall debug@0.7.2
npm info build /usr/local/lib/node_modules/mocha/node_modules/commander
npm info linkStuff commander@0.6.1
npm info install commander@0.6.1
npm info postinstall commander@0.6.1
npm info preinstall mkdirp@0.3.5
npm info build /usr/local/lib/node_modules/mocha/node_modules/mkdirp
npm info linkStuff mkdirp@0.3.5
npm info install mkdirp@0.3.5
npm info postinstall mkdirp@0.3.5
npm info preinstall glob@3.2.3
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/minimatch
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/graceful-fs
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/inherits
npm info preinstall jade@0.26.3
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/mkdirp/0.3.0
npm http 304 http://registry.npmjs.org/inherits
npm http 304 http://registry.npmjs.org/graceful-fs
npm http 304 http://registry.npmjs.org/minimatch
npm http 304 http://registry.npmjs.org/mkdirp/0.3.0
npm info install graceful-fs@2.0.1 into /usr/local/lib/node_modules/mocha/node_modules/glob
npm info install inherits@2.0.1 into /usr/local/lib/node_modules/mocha/node_modules/glob
npm info install minimatch@0.2.12 into /usr/local/lib/node_modules/mocha/node_modules/glob
npm info installOne graceful-fs@2.0.1
npm info installOne inherits@2.0.1
npm info installOne minimatch@0.2.12
npm info /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/graceful-fs unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/inherits unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch unbuild
npm info install mkdirp@0.3.0 into /usr/local/lib/node_modules/mocha/node_modules/jade
npm info installOne mkdirp@0.3.0
npm info /usr/local/lib/node_modules/mocha/node_modules/jade/node_modules/mkdirp unbuild
npm info preinstall inherits@2.0.1
npm info build /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/inherits
npm info linkStuff inherits@2.0.1
npm info install inherits@2.0.1
npm info postinstall inherits@2.0.1
npm info preinstall graceful-fs@2.0.1
npm info build /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/graceful-fs
npm info linkStuff graceful-fs@2.0.1
npm info install graceful-fs@2.0.1
npm info postinstall graceful-fs@2.0.1
npm info preinstall minimatch@0.2.12
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/lru-cache
npm info trying registry request attempt 1 at 18:46:05
npm http GET http://registry.npmjs.org/sigmund
npm info preinstall mkdirp@0.3.0
npm info build /usr/local/lib/node_modules/mocha/node_modules/jade/node_modules/mkdirp
npm info linkStuff mkdirp@0.3.0
npm info install mkdirp@0.3.0
npm info postinstall mkdirp@0.3.0
npm info build /usr/local/lib/node_modules/mocha/node_modules/jade
npm info linkStuff jade@0.26.3
npm info install jade@0.26.3
npm info postinstall jade@0.26.3
npm http 304 http://registry.npmjs.org/lru-cache
npm http 304 http://registry.npmjs.org/sigmund
npm info install lru-cache@2.3.1 into /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch
npm info install sigmund@1.0.0 into /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch
npm info installOne lru-cache@2.3.1
npm info installOne sigmund@1.0.0
npm info /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_modules/lru-cache unbuild
npm info /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_modules/sigmund unbuild
npm info preinstall sigmund@1.0.0
npm info build /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_modules/sigmund
npm info linkStuff sigmund@1.0.0
npm info install sigmund@1.0.0
npm info postinstall sigmund@1.0.0
npm info preinstall lru-cache@2.3.1
npm info build /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_modules/lru-cache
npm info linkStuff lru-cache@2.3.1
npm info install lru-cache@2.3.1
npm info postinstall lru-cache@2.3.1
npm info build /usr/local/lib/node_modules/mocha/node_modules/glob/node_modules/minimatch
npm info linkStuff minimatch@0.2.12
npm info install minimatch@0.2.12
npm info postinstall minimatch@0.2.12
npm info build /usr/local/lib/node_modules/mocha/node_modules/glob
npm info linkStuff glob@3.2.3
npm info install glob@3.2.3
npm info postinstall glob@3.2.3
npm info build /usr/local/lib/node_modules/mocha
npm info linkStuff mocha@1.13.0
/usr/local/bin/mocha -> /usr/local/lib/node_modules/mocha/bin/mocha
/usr/local/bin/_mocha -> /usr/local/lib/node_modules/mocha/bin/_mocha
npm info install mocha@1.13.0
npm info postinstall mocha@1.13.0
npm WARN package.json application-name@0.0.1 No repository field.
npm WARN package.json dotch@0.0.0 No repository field.
npm WARN package.json eyes@0.1.8 No repository field.
npm WARN package.json jshint@2.1.2 No repository field.
npm WARN package.json node@0.0.0 No repository field.
npm WARN package.json recess@1.1.6 No repository field.
npm WARN package.json kontroller@0.0.9-10 No repository field.
npm WARN package.json bytes@0.2.0 No repository field.
npm WARN package.json cookie-signature@1.0.1 No repository field.
npm WARN package.json fresh@0.1.0 No repository field.
npm WARN package.json pause@0.0.1 No repository field.
npm WARN package.json send@0.1.0 No repository field.
npm WARN package.json backbone@1.0.0 No repository field.
npm WARN package.json methods@0.0.1 No repository field.
npm WARN package.json range-parser@0.0.4 No repository field.
npm WARN package.json dateformat@1.0.2-1.2.3 No repository field.
npm WARN package.json eventemitter2@0.4.11 No repository field.
npm WARN package.json eventemitter2@0.4.11 'repositories' (plural) Not supported.
npm WARN package.json Please pick one as the 'repository' field
npm ERR! Error: EMFILE, too many open files
npm ERR!     at new Glob (/usr/local/lib/node_modules/npm/node_modules/glob/glob.js:105:21)
npm ERR!     at glob (/usr/local/lib/node_modules/npm/node_modules/glob/glob.js:57:11)
npm ERR!     at gypfile (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:127:17)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:113:33
npm ERR!     at Array.forEach (native)
npm ERR!     at extras (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:112:21)
npm ERR!     at parseJson (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:89:17)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:61:33
npm ERR!     at fs.js:266:14
npm ERR!     at Object.oncomplete (fs.js:107:15)
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Darwin 11.4.2
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""mocha""

/usr/local/lib/node_modules/npm/lib/utils/error-handler.js:266
  log.error(""cwd"", process.cwd())
                           ^
Error: EMFILE, too many open files
    at process.errorHandler (/usr/local/lib/node_modules/npm/lib/utils/error-handler.js:266:28)
    at process.EventEmitter.emit (events.js:117:20)
    at process._fatalException (node.js:272:26)
thomas@workstation:object-mapper$",reggi,NONE,2013-09-19 22:47:38+00:00,True,2013-09-19 22:50:14+00:00,0.0,,1,1,2013-09-19 22:50:14+00:00,0.0,reggi,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
980,Exception in a reporter silently crashes Mocha,"If a reporter raises an exception, Mocha just stops without any error message. An example reporter demonstrating the problem (needs a failing test in the suite):
module.exports = Crash;

var Spec = require('mocha/lib/reporters/spec');

function Crash(runner) {
    Spec.call(this, runner);

    runner.on('fail', function(test, err){
        throw new Error();
    });
}

Crash.prototype.__proto__ = Spec.prototype;",rassie,NONE,2013-09-20 14:04:06+00:00,False,,,,3,3,2013-09-20 14:43:41+00:00,0.03,rassie,NONE,1,0,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
981,A custom reporter using async functionality is not possible,"Currently, a third-party reporter using asynchronous calls is not possible. See the following example (failing tests required):
module.exports = Async;

var Spec = require('mocha/lib/reporters/spec');

function Async(runner) {
    Spec.call(this, runner);

    runner.on('fail', function(test, err){
        setTimeout(function() {
            console.log(""This should be executed, even though the hook is done"");            
        }, 2000);
    });
}

Async.prototype.__proto__ = Spec.prototype;

Why this is needed: every kind of asynchronous reporting, from fetching screenshots from Selenium to POSTing stuff to a test results web service.",rassie,NONE,2013-09-20 14:18:53+00:00,True,2013-09-20 14:58:32+00:00,0.03,,1,3,2013-09-20 14:29:59+00:00,0.01,rassie,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
982,Async documentation,"I've been stuck a couple of hours with setting up asynchronous tests now, and I think the documentation needs to be updated. The following code can be found in the documentation:
describe('#find()', function(){
    it('respond with matching records', function(done){
      db.find({ type: 'User' }, function(err, res){
        if (err) return done(err);
        res.should.have.length(3);
        done();
      })
    })
  })

The assertion here will crash Mocha, because the AssertionError won't be caught. It should be wrapped in a try-catch statement, it would be good if the official documentation shows that :)",robertherber,NONE,2013-09-24 09:37:54+00:00,True,2013-10-06 10:53:53+00:00,12.05,,4,3,2013-10-06 10:53:53+00:00,12.05,hallas,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
983,test.skip() should return the Test object,"... just like test() does. I have two wrapper functions around test() and test.skip() which set some additional properties on the test objects for reporting later, but using test.skip() gives me no access to the object.
The BDD and QUnit interfaces also have the same issue.",Arnavion,NONE,2013-09-25 07:10:11+00:00,True,2015-07-10 19:28:20+00:00,653.51,,2,1,2015-07-10 19:28:20+00:00,653.51,boneskull,MEMBER,1,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
986,Progress logging inside a test,"When running UI tests with Mocha (e.g. with Selenium / Webdriver), tests can last a long time, especially with complex workflows being checked. In such cases, it'd be a tremendous help to output some kind of progress message ('Clicking on button', 'Form submitted', etc.) which could be rendered by more verbose reporters like spec. I probably could abuse pending tests for that, but it's very unclean.",rassie,NONE,2013-09-27 11:58:30+00:00,True,2015-04-09 17:19:38+00:00,559.22,,4,3,2013-10-05 08:05:20+00:00,7.84,hallas,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
987,Several newlines after tests fails,"I just setup mocha, with a simple bdd ui and regular node assert (I tried should as well), I get a lot of newlines at the end of a test when my test fails:

This happens when running mocha, with a simple testcase like
should = require('should');

describe('The truth', function() {
  it('asserts the truth', function() {
    true.should.equal(true);
  });
});
Is this intended? It's very annoying if you're tmuxing your test results into a small horizontal split (leaving room, ofcourse, for the nyancat.).",timonv,NONE,2013-09-27 13:53:28+00:00,True,2013-09-29 01:55:16+00:00,1.5,,2,4,2013-09-29 01:55:16+00:00,1.5,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
989,BeforeEach context leaks when using --watch,"Running Mocha v1.13.0 with --watch results in this.something being set in the outer test on the 2nd+ run:
describe(""Context leak"", function() {
  describe("""", function() {
    beforeEach(function() { this.something = 1337 })
    it(""inner"", function() {})
  })

  it(""outer"", function() {
    this.must.not.have.property(""something"")
  })
})",moll,NONE,2013-09-30 11:00:08+00:00,True,2014-01-05 03:11:15+00:00,96.67,,3,3,2013-10-05 08:04:34+00:00,4.88,hallas,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
990,If done() is fired twice you get a failure you can't find,"At least on the front-end, if I have a test, say:
it('foo', function (done) {
  done(); done();
});

It'll fail in the stats in the top right, but will not tell you where the test failure was. No tests are flagged and clicking the link shows none.
This is also a major pain since many times I have async events that fire once than once.
Example real world test that fails:
      safetospend.addEvent('change', function () {
        done();
      });
      safetospend.setBalances({});

This is because setBalances is called on page load and then is called again by me below and to test different params.",OscarGodson,CONTRIBUTOR,2013-09-30 22:05:05+00:00,True,2013-10-05 08:00:34+00:00,4.41,,2,4,2013-09-30 22:13:44+00:00,0.01,OscarGodson,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
991,Some reporters don't show reason for failed assertion,"The test below doesn't show the reason for the failed assertion when using the spec reporter, other than that the expectation didn't match.  The tap reporter does show the reason.
tap output
1..1
not ok 1 reporter shows reason for failed assertion
  AssertionError: the foo: expected 'foo' to equal 'bar'
# tests 1
# pass 0
# fail 1

spec output
  reporter
    1) shows reason for failed assertion


  0 passing (8ms)
  1 failing

  1) reporter shows reason for failed assertion:

      actual expected

      ""barfoo""

package.json
{
  ""name"": ""mocha_reporter_bug"",
  ""version"": ""0.0.0"",
  ""description"": ""Reporter does not show reason for failed expectation"",
  ""devDependencies"": {
    ""chai"": ""~1.8.0"",
    ""mocha"": ""~1.13.0""
  }
}
test/aTest.js:
var expect = require(""chai"").expect;

describe(""reporter"", function() {
    it(""shows reason for failed assertion"", function() {
        expect(""foo"", ""the foo"").to.equal(""bar"");
    });
});",blalor,CONTRIBUTOR,2013-10-05 12:47:05+00:00,True,2013-10-06 10:35:22+00:00,0.91,,3,5,2013-10-06 10:33:20+00:00,0.91,hallas,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
992,FEATURE REQUEST: Conditional unitests for optional units,"In large projects, it is common to have several optional units, that the user can choose whether to install or not install. Optional units may require the user to download and install a certain third-party software, that is not required for the other (non-optional) units.
The unit-tests should of course cover all the units - including the optional ones. However, if a user downloads the base project without the optional units, and naively runs the tests, he will get ugly error messages because of the missing third-parties.
Currently, Mocha allows to ""skip"" certain tests, but, this skip is unconditional - if a test is skipped, it is skipped in any computer that runs the project.
It is possible to implement conditional tests in Mocha.js:
http://stackoverflow.com/a/19149003/827927
but it is not easy.
I think Mocha.js can be easier to use, with an option to mark certain tests as ""optional"", depending on a certain boolean variable.",erelsgl,NONE,2013-10-06 06:26:39+00:00,True,2013-10-06 07:04:07+00:00,0.03,,2,1,2013-10-06 07:04:07+00:00,0.03,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
994,"Support a scale factor as input to per-test slow() method, not just absolute values","First, thanks fixing issue #402.
An additional nicety would be to support the input as a multiplier / scale factor rather than an absolute value.
A scale factor may make more sense and be more future-proof.  For example, I may expect a computationally expensive test to be ~10x slower than the baseline limit, but in absolute terms the timeout might vary significantly between my 5-year old netbook and the my modern high-end workstation.  Furthermore, even a very high-end machine, there's still value in a warning that a test is more than 10x slower than the baseline -- even if it finished in an ""ok"" absolute amount of time.
This could likely be cleanly implemented via a ""%"" or ""x"" suffix on the input.
it (""should do something slow"", function() {
     this.slow(""1000%"");

     // The ""x"" suffix might be another option since the %'s
     // likely would often by very large numbers
     // this.slow(""10x"");   

     var n = callSomeSlowFunction();
     expect(n).to.equal(123);
})",bcronin,NONE,2013-10-06 16:00:16+00:00,True,2015-04-09 17:19:05+00:00,550.05,,3,3,2014-08-17 22:54:18+00:00,315.29,mietek,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
995,The same test suite won't run twice when using mocha programmatically,"When trying to execute a test suite twice, using the programmatic approach, the second time it should be executed it isn't found. This is especially annoying when trying to execute the same test with differing configuration.
Minimal Example (the test/test.js file contains a suite with a single always-passing test):
var Mocha = require('mocha');

function runMocha(callback) {
    var mocha = new Mocha();

    mocha.addFile('test/test.js');

    mocha.run(function () {
        callback();
    });
}

runMocha(function () {
    runMocha(function () {});
});
The first time mocha is run it will execute the test, the second time it will not.
The cause for this is that the second time it is required in mocha.js, the file is already cached and won't be executed. The only solution I was able to find is deleting the cached file from require.cache, but that doesn't look like good practice to me at all.",selaux,NONE,2013-10-07 15:08:46+00:00,True,2013-11-04 00:48:07+00:00,27.4,,21,24,2013-10-07 16:06:47+00:00,0.04,isacssouza,NONE,0,1,0,20,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
996,Code coverage doesn't cover files without tests,"Pretty self-explanatory. I have 20 or so files in app/ with zero coverage, and one test in test/. None of the files without tests are showing up in coverage.html
test:
    mocha --reporter spec

coverage: app-cov
    CODE_COVERAGE=1 mocha --reporter html-cov > coverage.html

app-cov:
    jscoverage app app-cov

.PHONY: test",erunion,NONE,2013-10-07 18:29:14+00:00,True,2015-04-09 17:17:31+00:00,548.95,,2,1,2015-04-09 17:17:31+00:00,548.95,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
997,Ignore explicitly exported globals,"It would be nice if mocha ignored explicitly exported globals which are usually meant to be intentional.
For ex
(in browser):
window.MY_GLOBAL = function(){...}
(in node):
global.MY_GLOBAL = function(){...}
Not sure how difficult this would be to do (probably very difficult without doing static analysis of the code itself)
this would be a super useful feature because generally globals are intended when written like that...
maybe the solution is to ignore global leak detection from mocha, and run a jshint on the files before hand and explicitly export the variable to global scope;",cphoover,NONE,2013-10-07 19:13:26+00:00,True,2013-10-07 20:31:55+00:00,0.05,,2,4,2013-10-07 20:31:50+00:00,0.05,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
998,Unhalted exception: RangeError: Invalid array length (failing code attached),"Hello,
while developing node package I ran into an issue with ""mocha"" (Windows 7  with node v0.10.18).
c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\reporters\spec.js:32
    return Array(indents).join('  ')
           ^
RangeError: Invalid array length
    at indent (c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\reporters\spec.js:32:12)
    at Runner.<anonymous> (c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\reporters\spec.js:50:26)

    at Runner.EventEmitter.emit (events.js:95:17)
    at next (c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\runner.js:398:10)
    at next (c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\runner.js:281:14)
    at c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\runner.js:290:7
    at next (c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\runner.js:234:23)
    at Object._onImmediate (c:\Users\mcharytoniuk\workspace\jsloader\flow-inspector\node_modules\grunt-mocha-test\node_modules\mocha\lib\runner.js:258:5)
    at processImmediate [as _immediateCallback] (timers.js:330:15)

The affected code is here (I am going to leave this branch there until this issue is resolved):
https://github.com/jsloader/flow-inspector/tree/mocha-bug
To reproduce this issue do:
$ npm install configuration-processor
$ cd node_modules/configuration-processor
$ git checkout mocha-bug
$ grunt test

Then mocha should fail with this unhalted error.
Best wishes,
Mateusz",mcharytoniuk,NONE,2013-10-08 10:01:42+00:00,False,,,,8,12,2014-05-16 18:07:37+00:00,220.34,joshuafcole,NONE,1,1,0,4,"['help wanted', 'needs-mcve', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1000,Running mocha suites in series,"I am trying to run tests using mocha with what probably is a weird use case, so I'll provide a bit of backstory.
A project I am working on comes with different database configurations which result in a different table structure being created. I would like to be able to test each configuration in the same database in series, but that requires dropping and recreating tables.
Fast forward to using mocha. I love the product and it has been nice to me up until today. Since I need to drop and recreate tables, I have to choose between running each test suite in series, or setup multiple databases for each test suite. Ideally I want to keep a single database for the test process.
This is the style of testing I have been doing now (innards stripped for easier reading)
describe('withConfig1', function() {
    before(function(done) {
        //setup including drop/create tables
        done()
    }
    describe('#someFunction()', function() {

    })
}

describe('withConfig2', function() {
    before(function(done) {
        //setup including drop/create tables
        done()
    }
    describe('#someOtherFunction()', function() {

    })
}


The problem with this approach, is that withConfig1 and withConfig2 get started at the same time and basically try to drop/create the tables at the same time, which leads to several issues.
Is there a way to run these two suites in series? I have tried asyncjs' series method, but it seems that mocha does not pick up the suites when they are enclosed within another function.
It's very possible I'm just doing this wrong, but I searched the issue list and couldn't find much on this topic -- so any help would be very much appreciated. Thank you for your time.",cbebry,NONE,2013-10-10 20:58:44+00:00,True,2013-10-13 00:14:27+00:00,2.14,,3,9,2013-10-10 21:08:29+00:00,0.01,hallas,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1004,"when run without a files parameter, test.js should be run if test/ directory exists","The logic for lookupFiles only adds <name>,js if <name> does not exist:
https://github.com/visionmedia/mocha/blob/master/bin/_mocha#L412-L418
   if (!exists(path)) {
    if (exists(path + '.js')) {
      path += '.js'
    } else {
      return glob.sync(path);
    }
  }

Is there a particular reason for ignoring the .js file if the path exists?  (I'll send a PR if needed)",Niggler,NONE,2013-10-14 01:20:22+00:00,True,2013-10-14 04:31:49+00:00,0.13,,2,1,2013-10-14 04:31:49+00:00,0.13,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1007,Assertion Error reports are truncated to not show the error.,"Assertion Error reports are truncated so as to not show the difference between the asserted and actual values.
For example:
AssertionError: {""xfer"":{""seq"":1,""data"":{""resupd"":{""tom"":""2013-10-15T15:28:23Z"",""reason"":{""code"":127,""device"":109},""pos"":{""tof"":""2013-10-15T15:2 deepEqual {""xfer"":{""seq"":1,""data"":{""resupd"":{""tom"":""2013-10-15T15:28:23Z"",""reason"":{""code"":127,""device"":109},""pos"":{""tof"":""2013-10-15T15:2
Is there a way of turning the truncation off?",chrisdew,NONE,2013-10-15 16:13:53+00:00,True,2015-04-09 17:16:07+00:00,541.04,,3,2,2015-04-09 17:16:07+00:00,541.04,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1011,Run multiple tests in parallel,"I am using mocha/supertest/chai to test an entire api framework. Each time I run a full test (which includes about 40 '_mocha.js' test files)it take roughly 5 minutes to complete.  It would be far more efficient to run tests in parallel completing in roughly 30 seconds.  Other testing frameworks I have used in the past are able to do this and have been great!  So question is, is it possible for mocha to also run tests in parallel?",tkdan235,NONE,2013-10-19 21:53:56+00:00,True,2013-10-19 22:09:51+00:00,0.01,,4,3,2013-10-19 22:09:51+00:00,0.01,travisjeffery,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1012,Browser version should retain current query string,"I have some tests running at a page /test.do?t=DASHBOARD_UNIT.
The suite link/replay button remove the query string, so the URL becomes /test.do?grep=..., what doesn't work for me.
This probably should be fixed, but with a low priority :)",gustavohenke,NONE,2013-10-21 18:20:48+00:00,True,2015-04-09 17:15:27+00:00,534.95,,3,1,2015-01-08 05:37:04+00:00,443.47,callmevlad,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1013,One test fails with Should version 2.0.x,"Since mocha package.json specifies that should.js version is *, it may pull in v2.0.x which causes one test to fail.
The test is in test/runnable.js; the test is:
describe('when sync', ...
  describe('without error'...
    ...
    test.duration.should.be.a('number'); //<--- this line causes failure with should.js v2.0.x
    ...
  });
});
You have two clear options for a fix:

Require mocha.js package.json to depend upon should.js v1.3.x
Change the a in that line to type. => test.duration.should.be.type('number');

See: v2.0.0 release of should.js for more info: https://github.com/visionmedia/should.js/blob/master/History.md",jprichardson,NONE,2013-10-22 02:55:27+00:00,True,2013-10-22 03:14:04+00:00,0.01,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1015,How is mocha.globals supposed to work?,"Sorry for the terrible issue title 😁.
When testing a jQuery plugin with Mocha, I'was warned about a global variable leak which seems to be normal.
So, I decided to get rid of it using mocha.globals([""jQuery*""]) and it worked as expected... but I also tried without the wildcard like this mocha.globals([""jQuery""]), this worked too... and even mocha.globals([""wth""]) got the job done.
So, maybe there is something a little buggy here, what do you think?",sebastien-p,NONE,2013-10-24 12:32:00+00:00,True,2014-01-21 08:34:13+00:00,88.83,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1017,How to stress test mocha unit tests?,Is there a trick or a way to tell mocha to run lots of same tests in parallel for a longer time? Something like a stress test?,binarykitchen,NONE,2013-10-29 03:20:22+00:00,True,2013-10-29 04:31:19+00:00,0.05,,2,2,2013-10-29 04:31:19+00:00,0.05,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1020,Show the code of the line that failed on platforms that support it,"This is a nifty feature that RSpec provides, it looks at the filesystem and includes the failing line of code in the test failure output.
I included this in my own RSpec port, but I'm now using mocha in general (it's better!) - is this a feature you'd accept a PR for?
The implementation in nodespec is here: https://github.com/glenjamin/nodespec/blob/master/lib/formatters/utils.js#L52",glenjamin,CONTRIBUTOR,2013-10-31 11:24:33+00:00,True,2013-11-25 04:21:33+00:00,24.71,,2,1,2013-11-25 04:21:33+00:00,24.71,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1023,mocha is a xunit type framework?,"In wikipedia ,  it shows that mocha is not a xunit type famework.But in mocha, it shows that xunit document needed. I`m confusion. Mocha is a xunit type or not?",ilife5,NONE,2013-11-03 15:07:05+00:00,True,2013-11-03 19:00:19+00:00,0.16,,2,1,2013-11-03 19:00:19+00:00,0.16,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1027,wrong async tests with disabled timeout,"Let's consider the following test:
var assert = require('assert');

describe('suite', function () {
  it('should be unfinished', function (done) {
  });
  it('should be passed', function () {
    assert.equal(1, 1);
  });
});

Test should be unfinished is wrong, because done callback  isn't called.
Running the test with mocha --timeout 0 test/ outputs nothing.
Expected behavior: should be unfinished should be reported as failed and should be passed as passed.",segrey,CONTRIBUTOR,2013-11-07 21:03:48+00:00,True,2015-04-09 17:14:40+00:00,517.84,,5,12,2013-11-11 15:04:12+00:00,3.75,hallas,CONTRIBUTOR,1,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1028,Tutorial?,"Does anyone know of any places where video tutorials about how to go about testing with mocha could be found?
Better yet, is there a tutorial about integrating mocha with node + grunt.js?",andrew-luhring,NONE,2013-11-08 00:01:49+00:00,True,2013-11-08 00:47:59+00:00,0.03,,3,5,2013-11-08 00:02:59+00:00,0.0,andrew-luhring,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1030,Web runner: unable to read end of long lines in test results,"Steps to repro


Clone latest mocha


Create a simple failing test that has a long filename
// (in sample_test_file_with_long_name_so_that_wrapping_behavior_is_apparent.js)
describe('Dummy Test', function(){
    it('Should crash', function(){
        var a = 1;
        a['foo']();
    });
});



Load web runner


<!DOCTYPE html>
<head>
    <meta charset=""utf-8"">
    <title>Dummy Test</title>
    <link rel=""stylesheet"" href=""mocha.css"" />
</head>
<body>
    <div id=""mocha""></div>
    <script src=""mocha.js""></script>
    <script>mocha.setup('bdd')</script>

    <script src=""sample_test_file_with_long_name_so_that_wrapping_behavior_is_apparent.js""></script>
    <script>mocha.run()</script>
</body>

Expected
You can see the filename/linenumber in which the crash occured
Actual
The fact that overflow:hidden is set on the container prevents you from seeing the end of lines

Proposed Fix
Let's set a max-width on the test result container and use the CSS rule word-wrap: break-word; to wrap lines if necessary.

I have a fix for this, but I thought I'd open an issue to be able to reference it in my commit. Expect a pull request soon :)",ArnaudBrousseau,CONTRIBUTOR,2013-11-08 03:58:26+00:00,True,2013-11-10 21:29:20+00:00,2.73,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1032,support co-based generators,"https://github.com/visionmedia/co
it('should work', function* () {
  yield wait(1)
})",jonathanong,CONTRIBUTOR,2013-11-10 10:04:35+00:00,True,2013-11-11 15:02:46+00:00,1.21,,6,8,2013-11-10 21:06:57+00:00,0.46,tj,CONTRIBUTOR,0,3,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1033,exclude console.log when '-R xunit' is used,"Because some of the codes under test use console.log for printing out message for runtime information.
But i need the output file for integratin with Jenkins. Is there any possible ways that i can do it while mocha R xunit > test-result.xml
if it's not possible, how about the alternative like mocha -R tap?
Thanks.",gilbertwyw,NONE,2013-11-11 09:10:15+00:00,True,2013-11-11 15:02:20+00:00,0.24,,2,3,2013-11-11 09:15:43+00:00,0.0,hallas,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1034,testing async functionality ,"it 'First test case ', (done)->
    callbackfun = ()=>
      done()
    setTimeout callbackfun, 2500

// the above test case is failing because of below code block in mocha/lib/runnable.js. 
if (this.async) {
    if (ms) {
      this.timer = setTimeout(function(){
        done(new Error('timeout of ' + ms + 'ms exceeded'));
        self.timedOut = true;
      }, ms);
    }
  }

can anyone explain why this block of code is required.",vvsn,NONE,2013-11-11 12:43:32+00:00,True,2013-11-13 09:17:24+00:00,1.86,,3,3,2013-11-11 15:01:34+00:00,0.1,hallas,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1037,suppress path.existsSync is now called `fs.existsSync`.,"Is there a way to suppress this warning.
It is so annoying :D",kilianc,NONE,2013-11-14 01:29:43+00:00,True,2013-11-18 02:55:22+00:00,4.06,,2,1,2013-11-18 02:55:22+00:00,4.06,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1038,Smarter global leak detection,"We like the global leak detection (and love Mocha generally) but find ourselves needing to add numerous exceptions that it seems should not be necessary.  The problem is that we often create a global in a before function only to clean it up in the corresponding after function.  Mocha's current leak detection logic does not allow for this however, and fails the before function (as if it were a test, odd in itself) for adding the global.    Would it be possible to change the leak detection logic to allow before functions to create globals and only fail if the corresponding after function does not remove them?",kbaltrinic,NONE,2013-11-14 13:12:48+00:00,True,2013-11-15 08:10:13+00:00,0.79,,3,5,2013-11-15 08:10:13+00:00,0.79,travisjeffery,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1040,Can mocha pass compiler switches to coffee-script?,"This is a question rather than an issue .
http://stackoverflow.com/questions/20049790/how-to-pass-compiler-options-to-mocha",gprasant,NONE,2013-11-18 14:10:34+00:00,True,2013-11-19 06:41:33+00:00,0.69,,2,1,2013-11-19 06:41:33+00:00,0.69,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1045,allow certain globals on a per test basis,"Just like you can configure test timeout per test, it would be handy to educate the global leak detection system to ignore certain globals on a per test basis. In cases where you are testing different code paths (maybe for legacy browsers) you want to allow some globals but then other tests you want to make sure those globals don't exist.
I am happy to make the PR if this is something others think should exist too (I couldn't find it in the current code).",defunctzombie,CONTRIBUTOR,2013-11-21 21:12:13+00:00,True,2013-12-06 19:11:35+00:00,14.92,,2,3,2013-11-22 05:56:01+00:00,0.36,travisjeffery,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1048,"Add support for ""expected"" failures","Expected failures are known failures that you want to write a testcase for before having an actual fix. The desired behaviour is that the test exist successfully to signal ""everything is ok"" until the bug is actually fixed, in which case the test exits with a failure to signal ""you need to update the test to stop expecting a failure"".
Dejagnu uses X prefix for expected failures, as in ""xcheck(...)"" or ""xcheck_equals(...)"", and outputs XFAIL for expected failures (everything ok) and XPASS for unexpected successes (need to update the test).
For mocha I've been thinking this could be implemented in terms of an .expected attributes attached to the exception passed to the ""done"" function, so that you could write a test like:
try {
assert.ok(thisShouldBeTrue);
} catch (e) {
e.expected = true;
throw e;
}
Or, even better, some extension to the assertion class to do this automatically (but that'd be outside the scope of mocha)",strk,NONE,2013-11-26 12:34:42+00:00,True,2013-11-27 05:53:09+00:00,0.72,,4,10,2013-11-27 04:57:09+00:00,0.68,tj,CONTRIBUTOR,0,3,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1050,xUnit report is skipping <testresult> for pending tests,"The reporter for xUnit skips pending test. For example, a testsuite with a single pending tests results in:
<testsuite name=""Mocha Tests"" tests=""1""  skipped=""1"" timestamp=""Fri, 29 Nov 2013 15:51:33 GMT"" time=""4.779"">
</testsuite>

instead of:
<testsuite name=""Mocha Tests"" tests=""1""  skipped=""1"" timestamp=""Fri, 29 Nov 2013 15:51:33 GMT"" time=""4.779"">
<testcase classname=""example"" name=""should be skipped"" time=""NaN""><skipped/></testcase>
</testsuite>

This leads to Jenkins not showing the skipped/pending tests on the list of tests.
The JUnit XSD that Jenkins uses can be found at https://svn.jenkins-ci.org/trunk/hudson/dtkit/dtkit-format/dtkit-junit-model/src/main/resources/com/thalesgroup/dtkit/junit/model/xsd/junit-4.xsd",tkmunzwa,NONE,2013-11-29 16:21:09+00:00,True,2013-11-30 03:23:14+00:00,0.46,,2,1,2013-11-30 03:23:14+00:00,0.46,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1052,invalid return statement found in bin/_mocha,,jsdevel,CONTRIBUTOR,2013-12-03 04:33:32+00:00,True,2013-12-03 04:38:30+00:00,0.0,,1,1,2013-12-03 04:38:30+00:00,0.0,jsdevel,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1055,flush any errors to stdout/err if tests are interrupted,"i.e. if i CTRL + C before the tests end. sure, i could use bail, but sometimes i don't want to stop the tests until i see a couple of errors, especially if the first tests are slow.
or bail after X failed tests?",jonathanong,CONTRIBUTOR,2013-12-04 10:43:02+00:00,True,2013-12-07 20:44:52+00:00,3.42,,4,4,2013-12-04 10:47:55+00:00,0.0,hallas,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1056,Possibility to extend epilogue message,"I wanted to extend the default reporter to include any log messages sent through log4js for failing test cases. Capturing the data was easy enough with the various hooks available on the runner.
However, to get the output I wanted I ended up copying a big chunk of base.js into my file. It would be nice if there was a easy way to extra output for each failure from the reporter, possibly through a hook?
my hack for reference https://gist.github.com/keis/7786301
the bit I wanted to add to the output is pretty much only
    if (test.capturedLog) {
        msg += '\n  Captured log messages:\n';
        test.capturedLog.forEach(function (log) {
            msg += '  ' + log;
        });
    }

I might try to dig in and create a patch but wanted to know if this is a good idea at all before starting.",keis,NONE,2013-12-04 11:54:30+00:00,True,2013-12-06 19:07:00+00:00,2.3,,2,2,2013-12-06 19:07:00+00:00,2.3,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1057,Incorrectly detecting global leak,"When running the following code, Mocha incorrectly detects global leaks on the variables ""ctr"", ""username"" and ""email""
function test(){
  this.ctr = typeof this.ctr !== 'undefined' ? this.ctr + 1 : 1;
  this.username = 'test_' + this.ctr;
  this.email = this.username + '@example.com';
  return {ctr: this.ctr, name: this.username, email: this.email};
}

describe('Global leak false positive', function(done){
 it('gives a false positive detection of global leaks', function(done){
   var x = test();
   done();
 });
});

environment
mocha 1.12.0
node 0.10.20",takinola,NONE,2013-12-04 19:08:07+00:00,True,2013-12-04 19:14:26+00:00,0.0,,2,1,2013-12-04 19:14:26+00:00,0.0,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1058,Should be able to delete (fs.unlink) a file inside a Mocha test - test passes but file not deleted. why?,"A simple node filesystem test:
var chai   = require('chai');
var assert = chai.assert; 
var fs     = require('fs');

describe('Node.js Environment Checks', function(){
  describe('Basic IO', function(){
    it('CREATE (temporary) file tests create/write access to FS', function(){
        // setup
        var newFile = new Date().getTime() +"".txt"";

        fs.writeFile(newFile, ""hello!"", function (err) {
            if (err) console.log(err);
            // console.log(""Created file: ""+newFile);
            fs.readdir(__dirname, function(err, list) {
                // console.log(list)
                assert.isTrue(list.indexOf(newFile) > -1)
                fs.unlinkSync(newFile);
                console.log('successfully deleted '+newFile);
                // console.log(""Deleted: ""+newFile)
                fs.readdir(__dirname, function(err, list) {
                    if (err) throw err;
                    assert.isTrue(list.indexOf(newFile) === -1);
                });
            });
        });
    })
  })
}) // end node env checks
Am I doing something wrong?
It works fine outside of the Mocha test:
var fs = require('fs');

var newFile = new Date().getTime() +"".txt"";

fs.writeFile(newFile, ""hello!"", function (err) {
    if (err) console.log(err);
    // console.log(""Created file: ""+newFile);
    fs.readdir(__dirname, function(err, list) {
        // console.log(list)
        console.log(list.indexOf(newFile) > -1)
        fs.unlinkSync(newFile);
        console.log('successfully deleted '+newFile);
        // console.log(""Deleted: ""+newFile)
        fs.readdir(__dirname, function(err, list) {
            if (err) throw err;
            console.log(list.indexOf(newFile) === -1);
        });
    });
});
I've googled this extensively...
Any insight would be much appreciated.",nelsonic,NONE,2013-12-04 23:03:50+00:00,True,2013-12-04 23:18:06+00:00,0.01,,3,6,2013-12-04 23:18:03+00:00,0.01,travisjeffery,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1060,describe.only runs multiple unrelated tests,"When multiple unit tests have same name in describe, mocha ignores the .only setting.
Steps to reproduce:

Create test1.js and test2.js as per template below
Run mocha test1.js test2.js -R spec
Expected result

You should see only the test1 to get run


Actual result

Both test1 and test2 get run



test1.js
describe.only('Test', function () {
        it('Should run test1 only', function() {});
});
test2.js
describe('Test', function () {
        it('Should run test2', function() {});
});",lobodpav,NONE,2013-12-06 05:46:13+00:00,True,2015-11-30 15:59:32+00:00,724.43,,14,31,2014-01-23 18:30:46+00:00,48.53,endlist,NONE,1,4,0,10,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1062,Mocha does not reset 'this' on every test run,"Pretty much all unit test frameworks I've used, allow me to run each test in an isolated environment. I was surprised to find out that this is not the case with mocha:
describe('something', function(){
  it('should one', function(){
    this.ok = true;
  })

  it('should two', function(){
    console.log(this.ok);
  })
})

The second test prints ""true"". I expected ""undefined"".
Is this how mocha is supposed to work, or did I do something wrong? I cannot find any documentation on what the intended behavior is. If this is the intended behavior, how do I reset 'this'? Do I have to manually delete everything?",FooBarWidget,NONE,2013-12-06 17:43:29+00:00,True,2013-12-06 17:59:52+00:00,0.01,,2,5,2013-12-06 17:59:52+00:00,0.01,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1064,--compilers not working with coffee-script-redux,"I'm not sure if this is a problem with mocha or with coffee-script-redux.
Running the command ""mocha --compilers coffee:coffee-script-redux"" gives the following error, which seems to be due to the test not transpiling:
/test/register.coffee:1
ports, require, module, __filename, __dirname) { register = require '../src/re
^^^^^^^^^^^^^^^^^
SyntaxError: Unexpected string
at Module._compile (module.js:439:25)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Module.require (module.js:364:17)
at require (module.js:380:17)
at /usr/lib/node_modules/mocha/lib/mocha.js:157:27
at Array.forEach (native)
at Mocha.loadFiles (/usr/lib/node_modules/mocha/lib/mocha.js:154:14)
at Mocha.run (/usr/lib/node_modules/mocha/lib/mocha.js:341:31)
at Object. (/usr/lib/node_modules/mocha/bin/_mocha:351:7)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
at startup (node.js:119:16)
at node.js:901:3
When I run the command ""mocha --compilers coffee:coffee-script"" everything works fine.",JosephJNK,NONE,2013-12-08 03:28:57+00:00,True,2014-01-24 07:33:14+00:00,47.17,,5,3,2013-12-15 17:50:11+00:00,7.6,lydell,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1065,Diff output discards assertion details,"When a test failure is printed using the diff output, assertion details are discarded by mocha. This makes it more difficult to understand why the test failed without inspecting test source code. It is also inconsistent with the default (non-diff) algorithm.
expect(undefined, 'first name').to.equal('expected');
/* result:
AssertionError: first name: expected undefined to equal 'expected'
*/

expect('actual', 'surname').to.equal('expected');
/* result:
actual expected
""expectedactual""
*/
Update
Another bit of information that is stripped from the output is the stack trace, as pointed out in the mailing list (link).
expect(false).to.equal(true);
/* result:
  + expected - actual

  +true
  -false
*/

assert.equal(false, true);
/* result:
AssertionError: true == false
 at Context.<anonymous> (/private/tmp/asd/test.js:5:12)
 at Test.Runnable.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:211:32)
 [etc.]
*/",bajtos,NONE,2013-12-09 07:22:14+00:00,True,2015-04-09 17:15:05+00:00,486.41,,5,9,2013-12-09 07:27:30+00:00,0.0,bajtos,NONE,1,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1066,"Misleading source info in ""done() called multiple times"" message","The error message ""done() called multiple times"" will be associated with whatever part of the test suite that's currently running. This can lead to a lot of confusion for the uninitiated developer.
For example, consider the following suite:
describe(""a simple test suite"", function () {
    beforeEach(function (done) {
        setTimeout(done, 150);
    });
    afterEach(function (done) {
        setTimeout(done, 50);
        setTimeout(done, 100);
    });
    it(""has a simple test"", function (done) {
        setTimeout(done, 100);
    });
    it(""has another simple test"", function (done) {
        setTimeout(done, 100);
    });
});
Running mocha done-message.js will result in:
  ․․

  1 passing (356ms)
  1 failing

  1) a simple test suite ""before each"" hook:
     Uncaught Error: done() called multiple times
      at multiple (/usr/local/lib/node_modules/mocha/lib/runnable.js:175:31)
      at done (/usr/local/lib/node_modules/mocha/lib/runnable.js:181:26)
      at null._onTimeout (/usr/local/lib/node_modules/mocha/lib/runnable.js:197:9)
      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)

Note how the ""done() called multiple times"" will be listed having the beforeEach hook as the point where it came from. This is of course wrong, the beforeEach simply happens to be the active code part when the second done() call is being run. Additionally, the second test gets marked as a failure, even though it did nothing wrong!
I don't know Mocha's internals, so I don't know whether this can be fixed easily at all.  Some ideas:

Pass a new done callback to the tests each time, that has the source information as a closure variable?
Change the error reporting so that the done error message is not associated to any code part at all?
Make it clear in the error message that this message can literally come from everywhere?
Make double-done-calling a fatal error that causes the entire suite to stop and tell the user that the second call to done can come from anywhere?

Tested with Mocha 1.15.1. This issue may or may not be related to #990.

More examples:
describe(""a simple test suite"", function () {
    beforeEach(function (done) {
        setTimeout(done, 150);
    });
    afterEach(function (done) {
        setTimeout(done, 200);
        done();
    });
    it(""has a simple test"", function (done) {
        setTimeout(done, 100);
    });
    it(""has another simple test"", function (done) {
        setTimeout(done, 100);
    });
});
This will cause the error to be associated to the second test.

describe(""a simple test suite"", function () {
    beforeEach(function (done) {
        setTimeout(done, 150);
    });
    afterEach(function (done) {
        done();
        done();
    });
    it(""has a simple test"", function (done) {
        setTimeout(done, 100);
    });
    it(""has another simple test"", function (done) {
        setTimeout(done, 100);
    });
});
This will result in no error at all, even though done gets called multiple times!",scy,NONE,2013-12-11 11:18:15+00:00,True,2014-10-17 08:15:13+00:00,309.87,,10,15,2014-04-09 17:38:19+00:00,119.26,raydemandforce,NONE,2,0,0,7,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1069,Spec showing tests twice?,"I don't think the spec reporter is running the tests twice, but why is it showing them twice? Example:
Metadata
◦ should be able to get the page title:
✓ should be able to get the page title (259ms)
◦ should be able to get page metadata:
✓ should be able to get page metadata (305ms)",chrisabrams,NONE,2013-12-13 00:19:45+00:00,True,2013-12-13 00:22:20+00:00,0.0,,2,1,2013-12-13 00:22:20+00:00,0.0,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1071,Diff support in browsers,"Would be great.
(I tried to search for this first, sorry if this is a duplicate.)",lydell,NONE,2013-12-15 17:54:28+00:00,True,2015-07-05 14:48:48+00:00,566.87,,3,1,2015-07-05 14:48:48+00:00,566.87,jbnicolai,CONTRIBUTOR,0,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1072,Runner.prototype.uncaught should not assume err object exists,"I can submit a PR for this, but I'd like to confirm that I have the issue correct before I do.
Runner.prototype.uncaught = function(err){
  debug('uncaught exception %s', err.message);

Problem is that err is undefined.
Changing to this:
Runner.prototype.uncaught = function(err){

  if (typeof err === ""undefined"" || err === null) {
    err = {};
    err.message = ""(no message found)"";
  } 
  debug('uncaught exception %s', err.message);

fixes it well enough, but I wonder if mocha is expecting node to throw an error of a certain shape and that's no longer the case.
$ mocha --version
1.15.1

$ which mocha
/home/dev/.nvm/v0.10.23/bin/mocha

$ which node
/home/dev/.nvm/v0.10.23/bin/node",jcollum-hcg,NONE,2013-12-15 23:54:20+00:00,True,2014-09-05 06:02:35+00:00,263.26,,4,4,2014-03-15 23:26:41+00:00,89.98,witoldsz,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1073,skip and only for exports ui,"I see in #524 is where .skip() and .only() where added, and some of the comments were looking for ways that this could be used with the exports ui. The commit including them says ""only tdd and bdd for now"", but that's a year ago.
Could strings of ""comment"" and ""hashbang"" be used for skip and only?
module.exports = {
  Array: {
    '//should be skipped': function() {},
    '#!should be only test': function(){}
  }
};
Or something? Anything? I much prefer exports ui, but I miss being able to use skip and only.",seanmonstar,NONE,2013-12-17 03:59:31+00:00,False,,,,5,5,2014-01-13 13:52:32+00:00,27.41,chopachom,NONE,0,0,0,5,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1074,Add Support for dependency injection,"It would be really nice to support dependency injection.  On the command line, you could add a flag for a provider module path.  In a browser you could load a provider before your test scripts.  It would probably look like angular's factory pattern.
mocha.factory('someDep', function(){return a;});

//later in my test
describe(function(someDep){
//tests here
});",jsdevel,CONTRIBUTOR,2013-12-17 05:45:39+00:00,True,2013-12-24 03:22:56+00:00,6.9,,5,11,2013-12-24 02:16:23+00:00,6.85,jsdevel,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1075,Browser - Mocha and Should.js,"I'm using mocha and should.js in the browser. Everything seems to work, but I'm getting:
TypeError: Object #<Object> has no method 'exist'

when running something like
should.exist(app);


I can't find any specifics on how to make this work.
I understand that I could use app.should.exist(), but then the errors shown in the spec runner become less useful.
Example
app.test.js
describe(""App"", function() {
    var app = window.something;

    it(""should be defined"", function() {
        should.exist(app);
    });

    it(""should have a reqres method like a Marionette Application should"", function() {
        should.exist(app.reqres);
    });
});",andrewjmead,NONE,2013-12-17 17:55:26+00:00,True,2013-12-17 18:11:35+00:00,0.01,,1,1,2013-12-17 18:11:34+00:00,0.01,andrewjmead,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1076,release new version,Lots of new things merged :),defunctzombie,CONTRIBUTOR,2013-12-18 02:38:10+00:00,True,2013-12-18 02:46:55+00:00,0.01,,2,1,2013-12-18 02:46:55+00:00,0.01,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1078,--harmony-generators doesn't work in 1.16,i have to use --harmony :(,jonathanong,CONTRIBUTOR,2013-12-20 04:34:28+00:00,True,2013-12-20 05:19:37+00:00,0.03,,2,2,2013-12-20 04:53:27+00:00,0.01,travisjeffery,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1080,Allow .pending alongside .skip and .only,"Hi,
While working in a bunch of specs, I find myself willing to add a .pending keyword on a regular basis to quickly make a spec, well, pending. Instead, the current setup requires the developer to comment a block of code and remove the function call on the .it line, to actually make the spec pending. It is a bit less cumbersome when using coffeescript, but still not that great. This simple .pending keyword could dramatically improve the UX.
What do you think?",chikamichi,NONE,2013-12-21 00:40:38+00:00,True,2013-12-23 14:39:58+00:00,2.58,,2,1,2013-12-23 14:39:58+00:00,2.58,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1081,.indexOf breaks ie <= 8 ,(https://github.com/visionmedia/mocha/blob/e7364f3c286e435be16e0c085484891b8f8118de/support/tail.js#L37),yields,NONE,2013-12-21 19:39:59+00:00,True,2013-12-21 20:03:01+00:00,0.02,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1082,ie <= 8 .forEach,"haha ie sucks!
also the test/browser tests are not passing in ie ?
might want to use opensauce so we can forget about ie",yields,NONE,2013-12-21 20:19:28+00:00,True,2013-12-21 21:03:37+00:00,0.03,,2,2,2013-12-21 20:50:21+00:00,0.02,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1083,Globals not consistently available,"(Also posted on SO)
I'm having a big problem with my mocha tests around a global object I'm using. I'm able to produce the following MRE which doesn't give the exact same error, but exemplifies the problematic (buggy?) behavior. Any insight would be much appreciated.
I have the following main.js file in /lib:
exports.exec = function(){
  console.log(test);
}

Then the following in /test/test.js:
var should = require('should');
var main = require('../lib/main');

global.test = {something: 1};

describe('normal test', function(){
  beforeEach(function(){
    global.test = {another: 2};
  }),

  afterEach(function(){
    delete global.test;
  });

  it ('might work with global', function(){
    main.exec();
  })
});

Finally, this is test/test2.js:
var should = require('should');
var main = require('../lib/main');

global.test = {third: 3};

describe('some test', function(){
  it ('messes up global', function(){
    main.exec();
  })
});

I expect that the first test would output {another:2} and the second would print {third: 3}. Indeed, this is the behavior I get when I run each test independently. e.g.
jeff@ubuntu:~/workspace/mocha-test$ mocha test/test2.js 

  { third: 3 }
․

  1 passing (6ms)

However, when running both test with npm packages should and mocha (1.16.1), I get the following output:
jeff@ubuntu:~/workspace/mocha-test$ mocha

  { another: 2 }
․․

  1 passing (6ms)
  1 failing

  1) some test messes up global:
     ReferenceError: test is not defined
      at Object.exports.exec (/home/jeff/workspace/mocha-test/lib/main.js:3:15)
      at Context.<anonymous> (/home/jeff/workspace/mocha-test/test/test2.js:8:10)
      at Test.Runnable.run (/usr/lib/node_modules/mocha/lib/runnable.js:211:32)
      at Runner.runTest (/usr/lib/node_modules/mocha/lib/runner.js:355:10)
      at /usr/lib/node_modules/mocha/lib/runner.js:401:12
      at next (/usr/lib/node_modules/mocha/lib/runner.js:281:14)
      at /usr/lib/node_modules/mocha/lib/runner.js:290:7
      at next (/usr/lib/node_modules/mocha/lib/runner.js:234:23)
      at Object._onImmediate (/usr/lib/node_modules/mocha/lib/runner.js:258:5)
      at processImmediate [as _immediateCallback] (timers.js:330:15)",trestletech,NONE,2013-12-23 05:08:31+00:00,True,2013-12-23 05:30:46+00:00,0.02,,3,4,2013-12-23 05:30:45+00:00,0.02,travisjeffery,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1085,Correctly handling Mocha timeouts for reporting errors,"Hi,
I'm in search of a way to call action when the timeout hits. For example, right now I get a timeout error but I'd like to log some text somewhere (as a basic). What is the correct way to catch and process this error?
From what I've seen so far, Mocha just sticks it out in a console, which is fine except I don't want to be monitoring my console the entire time.
My desired workflow:
// Set timeout
this.timeout(10000);

// Actions taking > 10 seconds
setTimeout(function(){
    console.log(""Test causing an error"");
}, 11000);

// Catch error somehow
console.log(""The tests timed out after 10 seconds"")

Is there a known/good way to do this? If not, is this something which may be added in future?
Thanks in advance.",whitfin,NONE,2013-12-27 05:15:18+00:00,True,2014-01-02 06:18:56+00:00,6.04,,2,5,2016-02-24 16:02:22+00:00,789.45,juanmiguelRuaDev,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1086,CR method printing `\n`,"Just wondering is this correct, this doesn't seem to make sense:
https://github.com/visionmedia/mocha/blob/master/lib/reporters/base.js#L145
  CR: function(){
    if (isatty) {
      exports.cursor.deleteLine();
      exports.cursor.beginningOfLine();
    } else {
      process.stdout.write('\n');
    }
  }
Why a line feed? I am seeing some ugly output with double line when running mocha via process_child.spawn. When I replace the line like below, the issue goes away:
process.stdout.write('\r')",sebv,CONTRIBUTOR,2013-12-27 12:50:39+00:00,True,2013-12-29 05:45:12+00:00,1.7,,3,3,2013-12-27 13:55:14+00:00,0.04,refack,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1088,Reporter: TDD+json not showing expected and actual values,"When the following is ran:
mocha --ui tdd --reporter json /path/to/test.js
Then no expected/actual values information is generated
Whereas these two ""reporters"" do provide that information:

mocha --ui tdd --reporter nyan /path/to/test.js
mocha --ui tdd --reporter list /path/to/test.js",nriesco,NONE,2013-12-29 19:33:34+00:00,True,2015-07-05 14:50:01+00:00,552.8,,3,1,2015-07-05 14:50:01+00:00,552.8,jbnicolai,CONTRIBUTOR,0,1,0,0,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1090,.only() is broken,in 1.16.2,tj,CONTRIBUTOR,2013-12-30 20:29:35+00:00,True,2013-12-30 20:53:22+00:00,0.02,,1,1,2013-12-30 20:53:22+00:00,0.02,tj,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1091,Automatic --debug-brk,"Since I always use some kind of watch program to run mocha when files changes, I find it pretty anonying having to restart with --debug-brk whenever I need to debug with node inspector. Thats one reason I wrote this grunt task.
I'm trying to free myself of using grunt and going back to plain makefiles, and while I could write a wrapper script that would do the checking and invoke mocha, this feature would also be useful to others so I think it would be nice if mocha provided some builtin support for that.
The ideal solution would be an option, eg: '--auto-debug-brk' that when used would cause mocha to read files for 'debugger' statements and automatically start node with
'--debug-brk'  when needed",tarruda,NONE,2013-12-31 12:46:47+00:00,True,2014-01-01 05:47:45+00:00,0.71,,2,1,2014-01-01 05:47:45+00:00,0.71,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1093,after/afterEach aren't called when a test fails when using --bail,,travisjeffery,CONTRIBUTOR,2014-01-01 01:17:56+00:00,True,2014-11-27 08:14:20+00:00,330.29,,7,7,2014-02-08 01:58:55+00:00,38.03,alfredwesterveld,NONE,0,1,0,5,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1096,Mocha's 'process' shim produces error when used by lib/reporters/base.js,"When running my tests, I get an error that appears to be caused by an inadequate stub for process.stdout.  It's not clear to me why support/tail.js defines a replacement for process when running under node, where 'process' is available.  Here's the erroneous behavior:
$ node run-tests.js

^[[0m^[[0m
^[[0m  Number^[[0m

./3rdparty/mocha.js:1968
    isatty && process.stdout.write('\u001b[2K');
                             ^
TypeError: Object #<Object> has no method 'write'
    at Object.exports.cursor.deleteLine (./3rdparty/mocha.js:1968:30)
    at Object.exports.cursor.CR (./3rdparty/mocha.js:1977:22)
    at Runner.<anonymous> (./3rdparty/mocha.js:3873:12)
    at Runner.EventEmitter.emit (./3rdparty/mocha.js:588:20)
    at Runner.fail (./3rdparty/mocha.js:4539:8)
    at ./3rdparty/mocha.js:4795:16
    at Runner.runTest (./3rdparty/mocha.js:4715:5)
    at ./3rdparty/mocha.js:4791:12
    at next (./3rdparty/mocha.js:4638:14)
    at ./3rdparty/mocha.js:4648:7",gonzojive,NONE,2014-01-02 17:16:36+00:00,True,2014-08-30 19:42:14+00:00,240.1,,2,1,2014-08-30 19:42:14+00:00,240.1,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1097,Run mocha programmatically with harmony,"I would like to run my tests using harmony programmatically.
As far as I understand it is currently not possible.
It should be possible to pass it in as an option as follows:
var Mocha = require('mocha'),
mocha = new Mocha({
harmony: true,
})",chanukov,NONE,2014-01-03 02:33:53+00:00,True,2014-01-03 03:40:52+00:00,0.05,,2,1,2014-01-03 03:40:52+00:00,0.05,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1098,Can't describe test suites asynchronously,"I want to run a test suite for every file in a directory. This way, if I'm looking at a pull request, I can tell in one run what the failures for each file are.
Since calling describe() in a callback is no good, do I have any options other than doing my suite construction synchronously?",stuartpb,NONE,2014-01-03 04:58:06+00:00,True,2014-01-03 05:42:34+00:00,0.03,,3,2,2014-01-03 05:13:30+00:00,0.01,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1101,Can tests be marked as Pending at runtime?,"Is it possible to mark a test as pending while it's being executed? Something like this.emit('pending') or this.pending = true?
The reason for this is that yadda executes multiple bdd steps per mocha test, and I've had a feature request to change the test to pending if one of the bdd steps hasn't been implemented.
Thanks.",cressie176,NONE,2014-01-05 21:47:59+00:00,True,2014-10-08 18:24:53+00:00,275.86,,6,6,2014-04-16 21:43:57+00:00,101.0,poum,NONE,1,1,0,3,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1103,Add license information,"Seems that there is no reference to a certain license in package.json nor READM.md.
Perhaps these could be added?",paazmaya,NONE,2014-01-06 20:13:29+00:00,True,2014-06-19 05:56:18+00:00,163.4,,6,6,2014-03-18 07:58:37+00:00,70.49,andreineculau,NONE,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1107,"""it"" function being ignored","I'm running browser-side Mocha tests, pulling in an external library using require. However, something strange is happening. The ""it"" function is totally ignored and not called.
This is what I'm using:
define([""require""], 
  function(require){
    //console.log(helpers);
    console.log('A');
    describe('section', function(){
      console.log('B');
      describe('#indexOf()', function(){
        console.log('C');
        it('should return -1 when not present', function(){
          console.log('1');
        });

        it('should return the index when present', function(){
          console.log('2');
        });
      });
      describe('two', function (){
        console.log('D');
      })
    });
});
this code is called from the following:
mocha.setup('bdd');
require.config({
  baseUrl: ""./app/require""
});
require(['test/tests.js'], function(){
  console.log('done')
  mocha.checkLeaks();
  mocha.globals(['jQuery']);
  mocha.run();
});
This returns A B C D done
I'm using the latest version of mocha.",eranimo,NONE,2014-01-10 19:08:28+00:00,True,2014-01-11 03:47:31+00:00,0.36,,2,3,2014-01-10 19:30:19+00:00,0.02,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1108,didn't wait for db open while using mongodb,"the callback of db.open didn't be executed.
Here is the code:
     var mongodb = require('mongodb');
     var assert = require('assert');
     describe('Mongodb',function(){

    describe('#connection',function(){

            it('should connect',function(){
                var host = '127.0.0.1';
                var port = 27017;
                var options = {safe:true};
                var database = 'TEST';

                var server = new mongodb.Server(host,port,{auto_reconnect:true});

                var db = new mongodb.Db(database,server,options);

                db.open(function(err,db){
                        console.log(db);
                        assert.notEqual(err,null);
                    });
            });

        });

});",leeyo,NONE,2014-01-11 03:47:03+00:00,True,2014-01-11 03:51:27+00:00,0.0,,2,2,2014-01-11 03:51:27+00:00,0.0,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1109,Support --harmony in mocha.opts,"My code works only with node --harmony, so I can't run my tests simply by running mocha.
$ mocha

  error: unknown option `--harmony'",kornelski,NONE,2014-01-12 01:47:00+00:00,True,2014-01-12 02:37:59+00:00,0.04,,4,7,2014-01-12 02:37:59+00:00,0.04,travisjeffery,CONTRIBUTOR,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1112,RFC: JSON Reporter - More detail / suites?,"Can suites be added to the JSON output? It's impossible to tell which test belongs to which suite in the current format.
I would expect the output to be more like the doc reporter in this regard. Or the web console reporter. So that it has that hierarchy of suite -> test -> title
Right now the fullTitle isn't particularly useful for much.
Maybe we don't need the full stack trace and all...But certainly the rest of the hierarchy that you see in those other reporters.
Would be awesome.",tmaiaroto,NONE,2014-01-14 18:38:33+00:00,False,,,,3,2,2014-01-14 18:52:22+00:00,0.01,tmaiaroto,NONE,0,0,0,2,"['feature', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1115,Documentation around glob patterns and shell expansion,"Not sure if it is needed, but it may be worth noting that due to shell expansion, glob patterns should be wrapped in single quotes on unix shells.
mocha -w -r should 'test/**/*.js'
Using that would render the --recursive flag useless.",jsdevel,CONTRIBUTOR,2014-01-16 20:52:48+00:00,True,2015-07-12 04:15:59+00:00,541.31,,7,8,2014-04-04 05:24:43+00:00,77.36,mrjoelkemp,CONTRIBUTOR,2,3,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1119,Make runnable to accept generator functions,"Something like described in this blog post: https://labnotes.org/yield-to-the-test-using-mocha-with-es6-generators/
Is there currently any clean and backward compatible way to implement that?",ilkkao,NONE,2014-01-28 09:27:31+00:00,True,2014-07-08 02:12:15+00:00,160.7,,6,11,2014-01-28 16:54:47+00:00,0.31,tj,CONTRIBUTOR,0,3,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1120,Breaks with coffeescript 1.7.x,"Unfortunate that this happens, and is probably at least partially the fault of coffeescript, who had a semver fail pushing breaking changes on a minor version, but mocha no longer works correctly when using coffeescript. It comes up with a rather cryptic error -- here's an example (when my first line on the tests is path = require 'path'
tion (exports, require, module, __filename, __dirname) { path = require 'path'
                                                                        ^^^^^^
SyntaxError: Unexpected string
  at Module._compile (module.js:439:25)
  at Object.Module._extensions..js (module.js:474:10)
  at Module.load (module.js:356:32)
  at Function.Module._load (module.js:312:12)
  at Module.require (module.js:364:17)
  at require (module.js:380:17)
  at /usr/local/lib/node_modules/mocha/lib/mocha.js:157:27
  at Array.forEach (native)
  at Mocha.loadFiles (/usr/local/lib/node_modules/mocha/lib/mocha.js:154:14)
  at Mocha.run (/usr/local/lib/node_modules/mocha/lib/mocha.js:341:31)
  at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/_mocha:341:20)
  at Module._compile (module.js:456:26)
  at Object.Module._extensions..js (module.js:474:10)
  at Module.load (module.js:356:32)
  at Function.Module._load (module.js:312:12)
  at Function.Module.runMain (module.js:497:10)
  at startup (node.js:119:16)
  at node.js:902:3


This is after running mocha --compiler coffee:coffee-script with coffee-script v1.7.x installed globally.",jescalan,NONE,2014-01-29 04:14:21+00:00,True,2014-01-29 04:57:53+00:00,0.03,,5,7,2014-01-29 04:32:59+00:00,0.01,travisjeffery,CONTRIBUTOR,0,2,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1123,"""Error.stackTraceLimit = Infinity"" breaks stack traces for stack overflow","If you have a broken function that triggers a stack overflow via infinite recursion, and you run this under Mocha, the error object that gets trapped has no stack trace in its stack property, and the only error message you get is RangeError: Maximum call stack size exceeded.
Here's a quick demo -- the problem exists with any code loaded by mocha, it doesn't even have to be inside a test or test suite:
magi@ubuntu ~/s/d/experiments> cat exceptional.js
#!/usr/bin/env node

function f() {
   f();
}

function overflowTheStack() {
   try {
      f();
   } catch (err) {
      console.error(err.stack);
   }
}

overflowTheStack();

Invoked via mocha:
magi@ubuntu ~/s/d/experiments> node_modules/.bin/mocha exceptional.js
RangeError: Maximum call stack size exceeded



  0 passing (1ms)

Invoked outside mocha:
magi@ubuntu ~/s/d/experiments> node exceptional.js
RangeError: Maximum call stack size exceeded
    at f (/home/magi/s/d/experiments/exceptional.js:3:11)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)
    at f (/home/magi/s/d/experiments/exceptional.js:4:4)

(Note that V8 itself up through version 3.14 didn't even capture the stack trace for stack overflow errors. So for this to work properly, you also need to be using V8 3.15 or newer, as in recent versions of Chrome, or Node 0.11 or newer. I haven't played around with this in other Javascript engines.)
The problem seems to be this in mocha.js:
// infinite stack traces

Error.stackTraceLimit = Infinity; // TODO: config",metamatt,NONE,2014-02-03 17:47:00+00:00,True,2014-08-30 19:33:33+00:00,208.07,,4,7,2014-06-17 17:58:32+00:00,134.01,apaprocki,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1125,flag to fail if .only() present.,"It would be nice to have a flag to fail the test run if a .only() has been left the suite.
Really need this for CI to people don't forget to remove their .only()s.
Because of the way it's implemented maybe a --no-grep flag would make sense.",smithamax,NONE,2014-02-04 08:27:49+00:00,True,2014-02-04 08:30:32+00:00,0.0,,4,4,2014-02-04 08:30:32+00:00,0.0,travisjeffery,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1126,Docs should make clear that the use of done(); does not make further test wait for completion.,"The documention states: ""By adding a callback (usually named done) to it() Mocha will know that it should wait for completion.""
This sounds like: ""All tests that succeed in the code will wait until the done of this test is called"" to me. At least it can be interpreted in that way, which I did. It confused me a lot.
Please make this unambiguous.",cndreiter,NONE,2014-02-04 09:30:13+00:00,True,2015-07-05 14:43:36+00:00,516.22,,3,1,2015-07-05 14:43:36+00:00,516.22,jbnicolai,CONTRIBUTOR,0,1,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1127,Arbitrary commands sometimes cause a Mocha timeout,"Example
it('I will try to list all domains', function(done){
  request.post(setup.testUrl + '/domains:list', { form: {}}, function(err, response, body){
    body.success.should.be.true;
    done();
  });
});
The line body.success.should.be.true; freezes and a timeout occurs. Lines inserted before this call are executed and finished.
This can also happen to other commands, for instance accessing and printing a variable to the log, i.e. it is not Should.js-related. It must have something to do with Mocha (or possibly Actionhero.js/Node.js).
More details: tj/should.js#71",cndreiter,NONE,2014-02-04 13:25:05+00:00,True,2014-10-08 18:24:35+00:00,246.21,,7,8,2014-02-05 13:18:41+00:00,1.0,arxony,NONE,1,1,0,4,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1128,Async test fails with timeout instead of assertion error,"This test:
    it('returns the correct value', function(done) {
      var returnValue = 5;

      aPromise.then(function() {
        expect(returnValue).to.equal(42);
        done();
      });

    });
This test fails with timeout of 2000ms exceeded instead of assertion error. I guess that’s because expect() call throws an error, and the done() never gets executed, and I’m wondering if there is a better way to test this kind of code.",gurdiga,NONE,2014-02-05 16:59:42+00:00,True,2014-03-19 10:28:10+00:00,41.73,,15,25,2014-03-18 18:40:27+00:00,41.07,NickHeiner,NONE,3,2,0,10,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1130,"nested async test runs fine with .only, timeouts otherwise","Hi,
I'm facing a weird issue with running a nested async test. It's a pretty standard async test, calling done() in some callback: runs fine on its own (when suffixing the it test with .only).
It's located within a describe section, which is itself nested within a describe section. When suffixing the inner describe with .only, it runs fine as well.
But when trying to run the full suite, it timeouts, done being never called.
The test does make use of sinon.useFakeTimers: set up and clean up (.restore()) are handles in beforeEach/afterEach hooks within the inner describe section. Both outer and inner describe sections provide beforeEach/afterEach hooks, although only the inner (nested) ones relates to sinon's fake timers.
Has this behavior already been reported? I looked through the issues mentionning ""nested"" and ""timeouts"" but did not have luck.",chikamichi,NONE,2014-02-07 00:16:45+00:00,True,2014-08-30 19:31:16+00:00,204.8,,3,2,2014-04-04 05:02:39+00:00,56.2,mrjoelkemp,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1131,Pass folder to test for expected files,"I have a Mocha test that checks if certain files exist, but I added a feature to allow users to select what directory files go into, so now my code doesn't work.
it('creates expected files', function (done) {
    var expected = [
        // add files you expect to exist here.
        'kirby/.gitignore',
        'kirby/.htaccess',
        'kirby/assets/',
        'kirby/content/',
        'kirby/index.php',
        'kirby/kirby/',
        'kirby/license.md',
        'kirby/package.json',
        'kirby/readme.md',
        'kirby/site/'
    ];
    // more code here

Instead of saying 'kirby/.gitignore', what should I do?",ilanbiala,NONE,2014-02-12 00:09:49+00:00,True,2014-02-12 00:59:44+00:00,0.03,,2,2,2014-02-12 00:59:43+00:00,0.03,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1132,Diffs for buffers,"Diffs  for buffers seem to be broken:
require('should')

describe('comparing buffers', function () {
  it('should produce correct diff', function () {
    Buffer([0x01]).should.eql(Buffer([0x02]))
  })
})
This code produces the following:
  + expected - actual

       {
      +  ""0"": 2,
      -  ""0"": 1,
         ""length"": 1,
      +  ""offset"": 5752,
      -  ""offset"": 5744,
         ""parent"": {
           ""0"": 47,
           ""1"": 42,
           ""2"": 33,

It's almost ok, except I can see offset and parent, but all I really care is data.
But this example shows the worst scenario:
require('should')

describe('comparing buffers', function () {
  it('should produce correct diff', function () {
    Buffer([0x01]).should.eql(Buffer(0))
  })
})
Not only this diff is veeery long (it shows the whole parent, which is the pool, I assume), but also it takes significant time to be generated.
So, the question is, shouldn't diffs for Buffers be treated specially, to make them really useful?",vkurchatkin,NONE,2014-02-12 07:05:12+00:00,True,2014-11-17 04:57:06+00:00,277.91,,4,5,2014-08-30 19:30:54+00:00,199.52,boneskull,MEMBER,1,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1133,TypeError on undefined caught exception in runner,"Stack trace is:
/usr/local/lib/node_modules/mocha/lib/runner.js:536
  debug('uncaught exception %s', err.message);
                                    ^
TypeError: Cannot read property 'message' of undefined
    at Runner.uncaught (/usr/local/lib/node_modules/mocha/lib/runner.js:536:37)
    at process.uncaught (/usr/local/lib/node_modules/mocha/lib/runner.js:568:10)
    at process.EventEmitter.emit (events.js:95:17)
    at process._fatalException (node.js:272:26)

I have no idea how I managed to break that, as that error popped up during running whole test suite.",OJezu,NONE,2014-02-13 10:39:52+00:00,True,2014-08-30 19:29:49+00:00,198.37,,2,1,2014-08-30 19:29:49+00:00,198.37,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1134,"With --watch, the process exits on compiler errors","Using mocha --watch --compilers coffee:coffee-script/register, if you save a syntax error at any point while you're working on your code, the mocha process exits, which is annoying. It would be nice if mocha could catch compiler errors, print them out and then continue watching.",callumlocke,NONE,2014-02-15 16:55:48+00:00,True,2014-08-30 19:28:34+00:00,196.11,,2,1,2014-08-30 19:28:34+00:00,196.11,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1136,describe() functions are evaluated too soon,"I have a lot of similar its, and want to generate them dynamically. All of them depend on an authentication header, which I request in before and then pass to the generating function. However, at the moment the header is generated my function is already executed, and therefore the dependency is set to undefined. Consider the following example:
var assert = require('assert'),
    dependency

before(function(done){
  setTimeout(function() {
    dependency = 42
    done()
  }, 500)
})

describe('Indirect it', function() {
  it('should have dependency set with a direct call.', function(done){
    assert.equal(dependency, 42)
    done()
  })

  generateIt(dependency)
})


function generateIt(dependency) {
  it('should have dependency set with an indirect call.', function(done){
    assert.equal(dependency, 42)
    done()
  });
}

The first it works just fine, but the second one fails.",vlad-shatskyi,NONE,2014-02-19 17:10:20+00:00,True,2014-02-24 10:33:47+00:00,4.72,,5,6,2014-02-23 06:46:26+00:00,3.57,LarryBattle,NONE,1,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1137,How do you run exports syntax in the browser?,"I was only able to make exports syntax work in the browser via this hack:
http://kirbysayshi.com/2013/07/01/mocha-tests-node-and-browser.html
Is there any integrated/better solution?",bettiolo,NONE,2014-02-24 00:04:18+00:00,True,2014-04-14 22:15:24+00:00,49.92,,3,4,2014-04-14 21:12:18+00:00,49.88,markstos,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1139,Detect test failures from test code?,"Is there a way to detect if any test has failed from within test code?
describe('some tests', function () {
  /*
   * Run some tests...
   */
})

after(function () {
  failures = ? // <--- what goes here?
  console.log(failures + "" tests failed!"")
})

I'd use this to keep chromedriver's browser open if a test failed, and to report success or failure to sauce labs after tests run.  I could see pulling saucelabs reporting out into a reporter using multiple reporters #930, but keeping chromedriver open makes most sense in test code, where we launch the browser.
Runner and Reporters have the info I'm looking for as stats but I'm not sure how to get to them from within a test file.",hurrymaplelad,NONE,2014-02-26 05:21:17+00:00,True,2014-06-22 02:07:13+00:00,115.87,,4,4,2014-02-26 05:29:30+00:00,0.01,hurrymaplelad,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1141,"Problem in osx with reporter, for each test prints two lines.","Example test 1:
  ․ Example test 1: 13ms
    Example test 2:
  ․ Example test 2: 8ms
    Example test 3:
  ․ Example test 3: 2ms

  3 passing (44ms)

Mocha reporter for each test prints two lines, why? Thanks",rdpanek,NONE,2014-03-04 08:37:26+00:00,True,2014-08-30 19:16:55+00:00,179.44,,3,3,2014-03-04 08:42:59+00:00,0.0,rdpanek,NONE,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1142,Sync bug,"Mac: 10.9.1
Node: v0.10.25
Mocha: 1.17.1
describe ""foo"", ->
  it ""should poo"", (done) ->
    f = fs.readFileSync(""cat"")
    asyncTask f, (e,d) ->
      c = fs.readFileSync(""dog"")
      done(null, assert.equal(c,d))
d would be undefined in the assert however a console.log of d above would not be undefined",corysimmons,NONE,2014-03-04 15:56:11+00:00,True,2014-03-07 19:01:49+00:00,3.13,,3,5,2014-03-07 19:01:49+00:00,3.13,tj,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1143,Custom errors not displayed,"I have the following custom error in my code:
function CompileError () {
  Error.apply(this, arguments);
}
CompileError.prototype = new Error();
When I throw this error, Mocha only displays the stack trace but doesn't display the error message/name like it does for regular errors.
Am I doing something wrong?",olalonde,NONE,2014-03-05 07:29:32+00:00,True,2014-03-07 18:56:58+00:00,2.48,,2,2,2014-03-07 18:56:58+00:00,2.48,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1144,a push-up care for ui-exports,"Hi,
I built this mocha-ui-exports for my teams, because I had to get them started and move fast, and did not have time to  figure how you'd like the PR and wait for it to be merged.
In fact, every past communication attempts with this group wasn't smooth, so I could not afford to wait and promised myself to make a try later (which is now).
However, if anyone can guide me through with the 'rules of the house', - i.e I could close my separate project once the PR is merged :)
To have it done I had to read mocha in depth, and I find it fascinating to see how it grew in the past years (on our previous evaluation points we preferred vows).
Basically, I need a little help to understand how to fit my tests in your suite, how you want them organized in coherence with the rest of it, and how you want them run (im a spoiled windows user, never used make before, and not too keen to get started, but will do if that's what it takes...).
If anybody would like to communicate with me about it - I'd be more than happy to contribute.
I respond to my work-mail: osher(o)7elementsstudios.com (the one I associated with public sites is a spam filter).
Thanks
Osher",osher,NONE,2014-03-05 08:30:11+00:00,True,2014-10-08 18:24:12+00:00,217.41,,2,2,2014-08-30 19:16:30+00:00,178.45,boneskull,MEMBER,1,0,0,0,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1145,Strange behavior when comparing objects for equality,"Here's a sample repo https://github.com/emirotin/mocha-async-fail
There are 4 skipped tests, all built around testing objects equality (there's also 1 running test to demonstrate that there're not configuration errors).
All tests has 2 nested async calls with done() called from the inner.
Both tests use mongo-pool2 package which simply creates MongoDB connection and opens it (thus you need local mongo running on default port, or adjust the settings in the beginning of the file).
Now I ""un-skip"" tests 1 by 1 and see these results:
The test should not be ok - 1 compares 2 ""plain"" objects {} for equality inside of the 1st callback. This test properly fails, lists the failing test and shows the diff
Uncaught AssertionError: expected {} to be {}
                                         + expected - actual

This proves that mocha properly handles async exceptions.
The test should not be ok - 2 does the same, but inside the 2nd callback. Same proper result.
This proves that callbacks depth is not the problem per se.
The test should not be ok - 3 compares db connection object to ""plain"" object {} inside of the 1st callback. This test fails, test suite exits, but does not report which test failed:
  ․․․․

  1 passing (86ms)
  2 pending
  1 failing

  (end of output)

Finally, the test should not be ok - 4 compares two db objects inside of the 2nd callback. This test fails as well, but the suite never exits.
If it matters:
OS X 10.9
node version 0.10.26
mocha version 1.17.1
shouldjs version 3.1.3",emirotin,NONE,2014-03-05 11:16:28+00:00,True,2014-08-26 06:21:39+00:00,173.8,,3,5,2014-04-04 04:41:25+00:00,29.73,mrjoelkemp,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1148,path.resolve is not a function,"TypeError: path.resolve is not a function
file = path.resolve(file);

trying to run the test on the browser ""manually"" (without using karma). tried to locate path, it's trying to require('browser/path') but:
require.register(""browser/fs.js"", function(module, exports, require){

}); // module: browser/fs.js

require.register(""browser/path.js"", function(module, exports, require){

}); // module: browser/path.js
it's empty. my build is borked? (installed through bower)",pocesar,NONE,2014-03-07 07:34:09+00:00,True,2014-08-26 06:21:08+00:00,171.95,,3,4,2014-03-07 18:53:15+00:00,0.47,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1149,impossible to run exports on the browser?,"Couldn't find anything related to this, it's currently impossible to run a exports ui on the browser?",pocesar,NONE,2014-03-07 07:35:51+00:00,True,2014-03-07 17:32:51+00:00,0.41,,3,1,2014-03-07 16:59:24+00:00,0.39,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1150,Mocha asynchronous testing with mongoose,"Hi, i am trying to test an insertion in mongoose using asynchronous behavior with the done callback function. The only problem is that I can't enter the mongoose.save anonymous callback function. When I use the mocha debugger, it stops at the save function but doesn't enter in the callback so the done isn't called.
https://gist.github.com/PetitPrince13/9450527",fxleblanc,NONE,2014-03-09 16:50:47+00:00,True,2014-03-09 22:05:04+00:00,0.22,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1152,Setting ifdev on makefile for checking patterns makes mocha crash,"This happens on versions 1.17.x for version 1.16.x it all works fine!
This is my makefile definition:
test-mocha:
@NODE_ENV=test $(MOCHA) 
--ui bdd 
--timeout 5s 
--reporter $(REPORTER) 
ifdef $(PATTERN) 
--grep ""$(PATTERN)"" 
endif 
$(TESTS)
this is the error that im getting:
./node_modules/mocha/bin/_mocha:432
if (!files.length) throw new Error(""cannot resolve path (or pattern) '""
^
Error: cannot resolve path (or pattern) 'ifdef'
at lookupFiles (./node_modules/mocha/bin/_mocha:432:32)
at runAgain (./node_modules/mocha/bin/_mocha:284:24)
at Array.forEach (native)
at Object. (./node_modules/mocha/bin/_mocha:283:6)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
at startup (node.js:119:16)
at node.js:902:3
make: *** [test-mocha] Error 8
So its actually getting ifdef as a path or pattern for the test?",maumercado,NONE,2014-03-11 14:52:33+00:00,True,2014-03-11 15:10:05+00:00,0.01,,1,1,2014-03-11 15:10:05+00:00,0.01,maumercado,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1153,Add 'around' and 'aroundEach',"Right now, we can enhance our suites with before, beforeEach, after, and afterEach.
That ignores a whole class of helper function: those that temporarily modify global state. (You know they exist!)
For instance, take this CoffeeScript function:
withAnimationsDisabled = (code) ->
  x = jQuery.fx.off
  jQuery.fx.off = true
  code()
  jQuery.fx.off = x

I'd find value if Mocha would let me do this:
aroundEach(withAnimationsDisabled)

Without aroundEach or around, there's no way to use a function such as withAnimationsDisabled. You can test it, but you can't use it as a helper unless you write it in every test.
I feel that around and aroundEach promote good test suite hygiene, so I think Mocha should support them.
Precedents:

RSpec: around(:each) and around(:all): https://www.relishapp.com/rspec/rspec-core/v/3-0/docs/hooks/around-hooks
ScalaTest withFixture(): http://www.scalatest.org/user_guide/sharing_fixtures#withFixtureNoArgTest
Specs2 Around: http://etorreborre.github.io/specs2/guide/org.specs2.guide.Structure.html#Around

I know, I know, you can bend beforeEach and afterEach to come close to what aroundEach would do. But aroundEach is better:

aroundEach separates concerns. Every aroundEach can be independent of every other aroundEach. That's not the case with beforeEach and afterEach, which are often intertwined.
aroundEach implicitly does things in the correct order. If a beforeEach initializes 1. a database connection, and 2. some global variable pulled from the database, then code in afterEach sometimes needs to be written ""backwards"". (2. remove global variable; 1. kill database connection.) aroundEach makes the correct ordering the obvious ordering.
aroundEach provides a friendly interface for coding test helpers (like my withAnimationsDisabled example).

Of course, async support would be amazing. It seems straightforward, right?
I'd be happy to contribute lots of feedback and maybe some code, if this feature is a welcome one. I'm using Mocha for an integration-test suite, and it needs lots of this sort of helper (e.g., ""create user / drop user"").",adamhooper,NONE,2014-03-11 20:05:06+00:00,True,2014-03-14 00:59:46+00:00,2.2,,4,3,2014-03-14 00:48:18+00:00,2.2,kwarunek,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1160,There is no `require` interface,"The homepage mentions a require interface:

The require interface allows you to require the describe and friend words directly using require and call them whatever you want. This interface is also useful if you want to avoid global variables in your tests.

The issue:
Unfortunately, I get the following error when I run mocha using --ui require:

Error: invalid interface ""require""

The error comes from this code:
this._ui = exports.interfaces[name];
if (!this._ui) try { this._ui = require(name); } catch (err) {};
if (!this._ui) throw new Error('invalid interface ""' + name + '""');
Sure enough, lib/interfaces/ doesn't contain require.js, and lib/interfaces/index.js doesn't export require.
Background:
Overall, I want to use the bdd interface. However, at the top of each test file, I want to use the suite function to prevent excessive indentation.
Obviously, I have an easy workaround—not indenting the contents of the top-level describe callback.",xcvz,NONE,2014-03-17 03:32:49+00:00,True,2014-08-26 06:19:48+00:00,162.12,,12,16,2014-03-29 16:29:48+00:00,12.54,mattfenwick,NONE,2,3,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1162,v1.18.1 broke mocha html test runner,"Everything was fine until I updated to v1.18.1 and now my tests fail:
Uncaught TypeError: Object #<Object> has no method 'appendChild' visionmedia-mocha/mocha.js:2642

I'm sticking to to v1.18.0 until this gets fixed.",bjornstar,CONTRIBUTOR,2014-03-18 10:48:08+00:00,True,2014-03-18 11:23:57+00:00,0.02,,2,4,2014-03-18 10:50:26+00:00,0.0,travisjeffery,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1163,detect `--watch` restart?,"Hello,
If i start a server inside mocha, wait for it to start up, then test it and exit the server, like so
var child;
it('starts server', function(done){
  this.timeout(10000);
  child = require('child_process').fork('my_server')
  child.on('message', function(d){
    if(d.initialized)
      done();
  });
});

it('does requests', ...);

it('shuts down server', function(){
  child.kill('SIGHUP');
});

it works fine, and using --watch works fine, if I wait for all tests to run.
is there a way to detect mocha is restarting due to a file changed?  Something where I can call child.kill('SIGHUP') early if needed?",danschumann,NONE,2014-03-18 19:38:35+00:00,True,2014-03-24 16:00:03+00:00,5.85,,1,1,2014-03-24 16:00:03+00:00,5.85,danschumann,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1166,HTMLCov should include test failures,"We currently have some tests that are only failing when we run the tests with coverage on our CI server. That is, all tests pass with the spec reporter, but when we subsequently re-run the tests with the HTMLCov reporter, one or more of the tests occasionally fails. We can't figure out which test is failing because HTMLCov does not include details about test failures (unlike JSONCov).",sgilroy,NONE,2014-03-24 16:36:52+00:00,True,2016-11-23 11:39:37+00:00,974.79,,6,5,2014-03-24 18:22:02+00:00,0.07,sgilroy,NONE,0,4,0,1,"['help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1167,watch needs to be debounced,"say you git checkout/merge/stash/bisect or some other operation that changes multiple files at once then mocha -w seems to rerun once per file change (with odd results - see attached image).
It would be great if there was say a 200ms debounce/throttle or something that only caused the tests to rerun once.",simon-lang,NONE,2014-03-25 00:43:38+00:00,True,2014-03-25 01:31:29+00:00,0.03,,2,2,2014-03-25 01:31:29+00:00,0.03,simon-lang,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1168,.only() does not work on it or describe with requirejs,"My specs look like this:
require([""app""], function(app) {
  describe(""Albums, function() {
    it(...)
  });
  describe.only(""Users"", function() {
    it(...)
  });
});

Yet, both describe tests are executed (using newest mochajs)
edit: It seems that when moving the describe.only block outside the require closure it works.",pke,NONE,2014-03-25 20:04:33+00:00,True,2014-03-26 21:29:33+00:00,1.06,,1,1,2014-03-26 21:29:33+00:00,1.06,pke,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1169,Cannot test  Angular promises the new way with mocha 1.18.x,"I was trying to use mocha with new promises testing support for Angular-based code that works with promises but with no luck so far. In case you'd like to take a look there is complete sample repo https://github.com/mostr/mocha-angular-promises-test
Basically the problem is that in the test below:
  // the test below fails as this needs next angular 
  // tick to be invoked by $rootScope.$apply();
  // but don't know where to invoke it

  it('should test promises using return', function() {
    return service.load().then(function(data) {
      expect(data).to.equal('Hi there');
    });

I was  trying something like this
  it('should test promises using return', function() {
    var promise = service.load();
    $rootScope.$apply();
    return promise.then(function(data) {
      expect(data).to.equal('Hi there');
    });

but still with no luck. I don't know how to force Angular's next tick in this setup.
(cc-ing @domenic, as he was involved in working on promises support for mocha)",mostr,NONE,2014-03-26 07:34:08+00:00,True,2014-03-27 00:43:42+00:00,0.71,,4,3,2014-03-26 08:43:43+00:00,0.05,hallas,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1170,Ability to filter out the stack trace,"Something simillar we could do in jasmine-node https://github.com/mhevery/jasmine-node/blob/dfa2e18517d8fbc5357489de643376eb5e303dfe/lib/jasmine-node/index.js#L128
It could be extremely useful for debugging failed scenarios written along with https://github.com/angular/protractor or other library. Currently stack traces contain too much details and it's hard to figure out where we should start debugging the failed scenario. For example https://gist.github.com/lucassus/de99d54cfb98c6ae60eb",lucassus,NONE,2014-03-26 11:10:16+00:00,True,2014-04-16 09:50:34+00:00,20.94,,5,6,2014-03-26 11:21:08+00:00,0.01,lucassus,NONE,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1173,document named hooks,,juliangruber,NONE,2014-03-27 08:20:23+00:00,True,2014-10-17 08:16:39+00:00,204.0,,5,7,2014-04-11 13:12:20+00:00,15.2,hallas,CONTRIBUTOR,1,3,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1175,Mocha aliased via `npm test` fails to glob all files,"In the example enclosed, I have this tree:
.
├── package.json
└── test
    ├── foo.js
    └── lib
        └── bar.js

2 directories, 3 files

Setup:
npm install

Run the tests:
./node_modules/.bin/mocha --reporter spec test/**/*.js

Both test/foo.js and test/lib/bar.js are ran. Now run the tests via the same command, but aliased using npm:
npm test

Only test/lib/bar.js is ran. The glob fails to detect test/foo.js, despite it being the same command.
Example: http://cl.ly/0M130n2u1t40",OliverJAsh,NONE,2014-03-28 21:40:38+00:00,True,2014-04-04 02:16:00+00:00,6.19,,4,3,2014-04-04 02:14:17+00:00,6.19,mrjoelkemp,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1179,Odd Behavior: No Stack Trace and Double Output,"I'm not sure how to go about debugging this scenario. I've narrowed it down to the following snippet. It's plausible that chai is causing this, but I don't know enough about the guts of either chai or mocha to figure out which it is.
Node v0.10.26, Mocha 1.18.2, Chai 1.9.1
Given
var chai = require('chai');
chai.config.includeStack = true;
var expect = chai.expect;

describe('Woops', function() {
  it('should not fail', function() {
    var a = {}, b = {};
    a.b = b;
    b.a = a;
    expect(a).to.eql({});
  });
});
Output

Given
This next bit is probably just an extension of the above issue, but it exhibits slightly weirder behavior.
var chai = require('chai');
chai.config.includeStack = true;
var expect = chai.expect;

describe('Woops', function() {
  it('should not fail', function() {
    var a = {}, b = {};
    a.b = b;
    b.a = a;
    expect(a).to.eql({});
  });

  it('should succeed', function() {});
});
Output",skeggse,CONTRIBUTOR,2014-03-31 18:47:46+00:00,True,2014-07-19 18:32:25+00:00,109.99,,3,4,2014-04-24 01:35:04+00:00,23.28,skozin,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1180,[proposal] Add option to ignore describe.only and it.only,"Hi,
We ran up against a problem where a spec with describe.only was checked into our repo accidentally (left over from someone's debugging code) and we didn't notice for a little while that CI was only running that spec.
There is nothing exposed by mocha other than the total number of tests run to let you know some specs are being excluded. In thinking about a fix for this problem, I propose a new command line option...
--exclusivity

With options true or false and a default of true.
This way you could set up CI to ignore describe.only statements by passing --exclusivity=false and always run all specs.
There may be a better approach to this, that doesn't break the contract with describe.only as much. Open to ideas for improvement.
Would this, or something like this be useful to anyone else?",alexhancock,NONE,2014-03-31 20:45:02+00:00,True,2014-08-04 20:05:30+00:00,125.97,,4,3,2014-07-08 02:23:40+00:00,98.24,blakeembrey,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1183,add optional heartbeat to stderr,"When running very long coverage tests, a heartbeat would prevent a timeout (e.g. from Travis CI).  Not sure if this is something that should be added to individual reporters or to the framework.",SheetJSDev,NONE,2014-04-03 08:32:51+00:00,True,2015-07-05 14:42:32+00:00,458.26,,3,1,2015-07-05 14:42:32+00:00,458.26,jbnicolai,CONTRIBUTOR,0,1,0,0,"['feature', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1185,Why does before each fire after a child describe's before?,"Given a (simplified) scenario like this:
describe('foo', function () {
    beforeEach (function (done) {
        deleteAllFoos(done); // clean out tables
    });

    describe('magical model method', function () {
        before (function (done) {
            createTestFoo(done); // create the one record I want to test around
        });

        it ('should be cool', function () {
            // test out what came back from createTestFoo
        });
    });
});
This will insert the test foo in before then call beforeEach and delete the record.
I always found this weird, what is the thought behind it working in this order?",rschooley,NONE,2014-04-08 02:33:06+00:00,True,2014-04-08 08:19:45+00:00,0.24,,4,6,2014-04-08 08:19:45+00:00,0.24,travisjeffery,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1186,Global leak detection for imported modules,"It seems that Mocha's global leak detection is only triggered for any new globals created during the running of an individual test (an it function).
This means that importing a module with globals outside a test definition will create those globals without detection, and additionally will prevent detection of those globals being leaked in any other tests, even if those tests are setup in a way which Mocha could detect.
For example:
foobar.js:
global.foo = 'bar';
test1.js:
describe('Detect global', function () {
    it('should fail here', function () {
        require('foobar');
    });
});
Correctly fails because of the new global foo.
However, upon adding the following additional test file:
test2.js:
require('foobar');
// doesn't need any tests, or even a describe
test1 is now unable to detect the global leak and passes incorrectly. See also #1083.
What can be done to resolve this?
Thanks.",SystemParadox,NONE,2014-04-09 12:55:57+00:00,True,2014-08-26 06:13:27+00:00,138.72,,2,2,2014-08-26 06:11:50+00:00,138.72,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1187,done() invoked with non-Error,"Using done() as a callback for other libraries that add their own argument data results in errors thrown.
something().then(done);
The only way around it is:
something().then( function(){ done() } );
It'd be great if Mocha accepted and ignored non-Error arguments to avoid the extra code.",stevenvachon,NONE,2014-04-09 16:00:56+00:00,True,2014-04-09 16:14:45+00:00,0.01,,7,10,2014-04-09 16:09:48+00:00,0.01,hallas,CONTRIBUTOR,2,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1188,"""eventually"" not defined","Dealing with promises, the documentation mentions eventually.
return db.find({ type: 'User' }).should.eventually.have.length(3);

However, for me,
return renderSirTrevor(data).should.eventually.equal(html)

gives me the following error:
TypeError: Cannot call method 'equal' of undefined

renderSirTrevor returns a promise.",azhang,NONE,2014-04-09 22:35:47+00:00,True,2014-04-09 22:42:50+00:00,0.0,,2,2,2014-04-09 22:41:13+00:00,0.0,hallas,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1189,Error: done() called multiple times,"I usually run mocha without problems.
Now I added a module that is using mongoose.
If I run an asynchronous test it throws Error: done() called multiple times and
1 passing (351ms)
  1 failing

but the test case is just one, so it should be just 1 passing or 1 failing, no both.
If I don't call the module that is using mongoose and instead i call done() it works, if i call done() inside the callback of the module is using mongoose it throws that error.
The code that throws the error is like this:
it('test', function(done){
              ExternalModuleThatIsUsingMongoose.run(function (err) {
                 done();
              });",bitliner,NONE,2014-04-11 12:28:59+00:00,True,2014-04-11 13:08:08+00:00,0.03,,2,1,2014-04-11 13:08:08+00:00,0.03,hallas,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1191,Tests succeed on rejected falsey promises,"Using Q, one of these two tests fails and the other one succeeds:
describe(""mocha with promises"", function() {
it(""should fail on falsey rejected promises"", function() {
    return q.reject(false);
});

it(""should fail on truthy rejected promises"", function() {
    return q.reject(true);
});
});

It appears that q.reject(x) where x is one of the six falsey values does not fail the test, whereas truthy values do.",djechlin,NONE,2014-04-14 19:18:21+00:00,True,2014-07-08 22:56:51+00:00,85.15,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1192,Unset `this` properties between sibling describe blocks,"We set a bunch of properties on this to share objects/helpers between test cases within describe blocks.
The problem is that these properties persist between sibling describe blocks, like so:
describe('User', function () {
    beforeEach(function() {
        this.user = new User({ name: 'Ben' });
    });

    it('should have a name', function () {
        expect(this.user.name).to.be('Ben');
    });
});

describe('Item', function () {
    beforeEach(function () {
        console.log(this.user.name); // 'Ben'
    });
});
It ends up that this becomes polluted with a bunch of no-longer-used properties, unless we clean them up manually. It would be terrific if Mocha automatically cleared them up for us.
In the meantime, we've been experimenting with overriding describe to do this for us like so:
var oldDescribe = window.describe;

var stack = [];
var describe = function (title, fn) {
    var wrapped = function () {
        // Record all keys on `this` before function is invoked
        before(function () {
            var keys = {};
            for (var key in this) {
                if (this.hasOwnProperty(key))
                    keys[key] = true;
            }
            stack.push(keys);
        });

        fn.apply(this, arguments);

        // Reset keys to recorded state at this depth
        after(function () {
            var keys = stack.pop();
            for (var key in this) {
                if (!keys.hasOwnProperty(key))
                    delete this[key];
            }
        });
    };

    oldDescribe.call(window, title, wrapped);
};
But that might be terribly dangerous, since Mocha sets its own properties on this, and this could potentially delete some of them.
Anyways, would like to get your thoughts on this.",benvinegar,CONTRIBUTOR,2014-04-15 22:21:57+00:00,True,2014-04-15 22:30:25+00:00,0.01,,2,2,2014-04-15 22:25:21+00:00,0.0,benvinegar,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1193,rename browser require() implementation,to something like __require__ so stuff like https://github.com/visionmedia/node-requires and browserify don't try to parse it. wuttaya think,jonathanong,CONTRIBUTOR,2014-04-17 06:20:57+00:00,True,2015-07-05 17:19:48+00:00,444.46,,7,5,2014-04-17 17:52:21+00:00,0.48,tj,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1194,EventEmitter leak - on 'uncaughtException',"version : 1.18.2
https://github.com/visionmedia/mocha/blob/master/lib/runner.js#L588
(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
Trace:
  at process.EventEmitter.addListener (events.js:160:15)
  at process.on.process.addListener (node.js:769:26)
  at Runner.run (/home/safareli/Web/audioviz/node_modules/mocha/lib/runner.js:588:11)
  at Mocha.run (/home/safareli/Web/audioviz/node_modules/mocha/lib/mocha.js:369:17)
  at Transform._flush (/home/safareli/Web/audioviz/node_modules/gulp-mocha/index.js:21:10)
  at Transform.<anonymous> (/home/safareli/Web/audioviz/node_modules/gulp-mocha/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js:135:12)
  at Transform.g (events.js:180:16)
  at Transform.EventEmitter.emit (events.js:117:20)
  at finishMaybe (/home/safareli/Web/audioviz/node_modules/gulp-mocha/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:372:12)
  at endWritable (/home/safareli/Web/audioviz/node_modules/gulp-mocha/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:379:3)
  at Transform.Writable.end (/home/safareli/Web/audioviz/node_modules/gulp-mocha/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:357:5)
  at Transform.onend (/home/safareli/Web/audioviz/node_modules/gulp-cached/node_modules/through2/node_modules/readable-stream/lib/_stream_readable.js:505:10)
  at Transform.g (events.js:180:16)
  at Transform.EventEmitter.emit (events.js:117:20)
  at /home/safareli/Web/audioviz/node_modules/gulp-cached/node_modules/through2/node_modules/readable-stream/lib/_stream_readable.js:942:16
  at process._tickCallback (node.js:415:13)",safareli,NONE,2014-04-17 07:43:26+00:00,True,2014-07-06 01:32:43+00:00,79.74,,3,2,2014-05-28 06:24:32+00:00,40.95,jonathanong,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1195,#1164 breaks before-each blocks' contexts,"v1.18.2 passes, yet the latest change (#1164) to fix context leak breaks the following:
describe(""Outer"", function() {
  beforeEach(function() { this.context = this })

  describe(""Inner"", function() {
    beforeEach(function() { this.context.must.equal(this) })
    it(""must not fail"", function() {})
  })
})",moll,NONE,2014-04-20 11:12:58+00:00,True,2014-04-21 18:29:05+00:00,1.3,,5,35,2014-04-20 15:15:02+00:00,0.17,park9140,CONTRIBUTOR,1,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1196,html-cov add markers or special text for missed lines,"To find missed lines in the html coverage reporter, you have to scroll down and find the lines in red.  There is no easy way to find the first missed line -- you have to scroll down
gcov solves this by writing ##### rather than 0 for lines that are never hit, which is a good solution (then I can search for ""#####"" in the browser and find the misses quickly)
Alternatively, the page could be designed so that there are links in the overview area that jump to the missing lines/blocks.",SheetJSDev,NONE,2014-04-20 19:42:26+00:00,True,2015-07-05 14:41:11+00:00,440.79,,3,1,2015-07-05 14:41:11+00:00,440.79,jbnicolai,CONTRIBUTOR,0,1,0,0,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1199,uncaught exceptions' stack traces aren't being printed,super annoying to debug =/,jonathanong,CONTRIBUTOR,2014-04-24 01:58:21+00:00,True,2014-07-31 05:14:14+00:00,98.14,,4,10,2014-07-28 20:48:25+00:00,95.78,dougwilson,CONTRIBUTOR,1,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1200,Please change color scheme,"I've read through #802 and #590
I believe I've found where the issue lies:
Snippet from base.js
https://github.com/visionmedia/mocha/blob/master/lib/reporters/base.js
exports.colors = {
    'pass': 90
  , 'fail': 31
  , 'bright pass': 92
  , 'bright fail': 91
  , 'bright yellow': 93
  , 'pending': 36
  , 'suite': 0
  , 'error title': 0
  , 'error message': 31
  , 'error stack': 90
  , 'checkmark': 32
  , 'fast': 90
  , 'medium': 33
  , 'slow': 31
  , 'green': 32
  , 'light': 90
  , 'diff gutter': 90
  , 'diff added': 42
  , 'diff removed': 41
};

var color = exports.color = function(type, str) {
  if (!exports.useColors) return str;
  return '\u001b[' + exports.colors[type] + 'm' + str + '\u001b[0m';
};

So the color function takes in a type and uses the conversion table above to get the ANSI escape color.
A chart can be found here:
http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes
As you can see:

Seems to be a closed-source terminal from IBM AIX.
I believe nobody is using mocha on it. (Correct me if I'm wrong)
Furthermore, I found the ECMA specification:
http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf
Here is page 62:

Color 90-99 are not in the specification. Most terminals wouldn't care implementing these colors correctly and god knows what color they'll fall back into.
And not everyone uses iTerm2, which has a contrast setting.
Please use color 30-37, if you want increased intensity then \u001b[30;1m would use the intense variant.
I think users are only responsible for configuring their terminals so the 16 colors look great on their bg/fg colors. So please don't just say ""It's the theme's fault"" and close the issue. It's mocha's problem not using color from the standard palette.",octref,NONE,2014-04-24 19:56:33+00:00,True,2016-07-01 20:22:33+00:00,799.02,,21,70,2014-05-03 13:34:19+00:00,8.73,yoshuawuyts,NONE,1,2,0,17,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1202,mocha not trying to run the next test file when before all hook fails,"I am trying to run mocha with multiple test files:
mocha test1.js test2.js

If the before all hook in test1.js fails, mocha exits right away, instead of trying to run test2.js.
./node_modules/.bin/mocha --version
1.18.2",chenchaoyi,NONE,2014-04-30 23:33:12+00:00,True,2014-07-07 23:13:56+00:00,67.99,,3,3,2014-05-04 11:19:50+00:00,3.49,wejendorp,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1203,Node Built-in debug in api call?,"Hello, I'm asking for this because it can be very useful to configure node built-in debug modes on tasks runners like gulp or grunt through the gulp-mocha plugin for example.
Or there is already some way to do it already? (I tried passing different options to Mocha constructor but they didn't work and I can't find how it works looking at the code)
Or maybe gulp/grunt has to support this?
Currently I can do this by using nodemon like this:
nodemon({script: '/home/usuario/.nvm/v0.10.26/lib/node_modules/mocha/bin/_mocha',
nodeArgs: ['debug']});
(Also I think it can be done with exec/child_process but I cannot get it to work with that, it's a stdin mapping issue. It works with nodemon because it uses fork and that maps automatically stdin and stdout from the parent)
I came to this because I wanted to clean all worflow paths to built in debugger.
For more info: http://nicosommi.com/?p=284
Thanks",nicosommi,NONE,2014-05-04 13:51:38+00:00,True,2015-07-05 14:40:05+00:00,427.03,,3,1,2015-07-05 14:40:05+00:00,427.03,jbnicolai,CONTRIBUTOR,0,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1208,Ability to skip tests in beforeEach,"We have a bunch of tests that we only run optionally based on the environment, we use various ways to do if (build time flags, just putting tests inside an if), but the best place for us to do it would be inside beforeEach, it would be nice if there was a way to provide something to done that indicated the test should be skipped
Can try coming up with a patch if that seems like something likely to be merged?",daleharvey,NONE,2014-05-07 08:58:03+00:00,True,2014-08-26 06:04:36+00:00,110.88,,5,4,2014-06-20 22:18:07+00:00,44.56,JohnArrowwood,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1211,Customize AssertionError,"In my tests I sometimes see:
Uncaught AssertionError: expected { Object (status, message, ...) } to equal undefined

Would be great if I can customize the output of AssertionErrors. For example it calls toString() of that object so that status and message is shown in my case. Will make it easier for me to fix errors.
Not sure if that's already implemented. Would be a nice feature!",binarykitchen,NONE,2014-05-08 03:18:44+00:00,True,2014-08-21 01:47:35+00:00,104.94,,3,4,2014-07-08 01:38:36+00:00,60.93,jonathanong,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1213,root suite usage when running a specific makefile directive test,"I am using the root suite feature within mocha for my test build up and tear down and it works great when i run the body of tests with 'npm test'.  If i run an individual test configured with a directive in makefile, however, it doesn't use it. Is there a way within the makefile to configure it to run a test/rootSuite.js for any individual test?  Maybe this is more of a problem of my test folder structure.  I have several sub folders in test/ that do more modular tests.  I would like to be able to run those and still invoke a global build up and tear down before and after if that is possible.  thanks for any suggestion you can provide.
in package.json, i added this script and it uses root suite...
""scripts"": {
    ""test"": ""istanbul cover node_modules/.bin/_mocha -- --recursive""
},

in my makefile, i have added several entries to be able to do individual tests and test folders similar to this one
MOCHA_OPTS=
REPORTER = tap
TIMEOUT = 2000
db: test-db
test-db:
@./node_modules/.bin/mocha --reporter $(REPORTER) --timeout $(TIMEOUT) $(MOCHA_OPTS) test/dbutils",nicktackes,NONE,2014-05-13 13:46:22+00:00,True,2014-10-08 18:23:51+00:00,148.19,,2,2,2014-08-26 06:07:26+00:00,104.68,boneskull,MEMBER,1,0,0,0,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1215,hide all console log during tests,"I'd like to turn off all console.log used in the tested code using a flag.
Is there a easy way to do this?
I have already tried to override console.log in a beforeEach function but it seems doesn't work.
But if I sostitute the console.log in the test, it's work.",allevo,NONE,2014-05-14 23:12:20+00:00,True,2014-05-16 17:13:12+00:00,1.75,,2,1,2014-05-16 17:13:12+00:00,1.75,tj,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1220,Mocha programmatically and Compiler,"Hi,
Currently, I'm writting Selenium test using this grunt module. This module use Mocha in a programmatic way. Problem is my tests are written in coffeescript.
Normally I should use --compilers coffee:coffee-script/register to compile them. But according to this page compiler is not yet understood.
I found a workaround using grunt-contrib-coffee to compile my code to js. But, when my test failed because of exception, I have a stacktrace on the .js files. So I have to open the  js file, look the line, and then open the .coffee file. It's not really a nice workflow.
Can you tell me if I miss something about the usage of Mocha in Programmatic way?",thibaut-sticky,NONE,2014-05-20 09:08:51+00:00,True,2014-09-01 08:27:16+00:00,103.97,,2,2,2014-08-30 19:13:47+00:00,102.42,boneskull,MEMBER,1,0,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1221,Iced Coffee-Script doesn't work with --watch,"In the following change, support for watching coffee files was added, however, iced coffee-script does not work.
11ff9f0
Instead of hard-coding ""coffee"" into the regex, it would be better if every extension mentioned in the --compilers settings was added.
For example, if you include:
-compilers iced:iced-coffee-script/register,coffee:coffee-script/register
Then the regex would include (js|iced|coffee).
This would future-proof ""watch"" to work with any new compilers.",mindjuice,NONE,2014-05-20 15:56:45+00:00,True,2014-12-15 00:24:38+00:00,208.35,,6,4,2014-07-20 10:20:14+00:00,60.77,xpepermint,NONE,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1223,lookupFiles fails when trying to open a symbolic link,"lookupFiles is using fs.statSync to get stat, but that method throws an error when you pass it the path to a symbolic link.
$ mocha test

fs.js:684
  return binding.stat(pathModule._makeLong(path));
                 ^
Error: ENOENT, no such file or directory 'test/.#foo.js'
    at Object.fs.statSync (fs.js:684:18)
    at /usr/local/lib/node_modules/mocha/bin/_mocha:442:19
    at Array.forEach (native)
    at lookupFiles (/usr/local/lib/node_modules/mocha/bin/_mocha:440:24)
    at runAgain (/usr/local/lib/node_modules/mocha/bin/_mocha:284:24)
    at Array.forEach (native)
    at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/_mocha:283:6)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3

This bug is pretty common if you're using emacs, symbolic links are used as interlocks to prevent the simultaneous editing of the same file. The solution is to change to fs.lstatSync which has the same behavior, but adds the isSymbolicLink method to the fs.Stats class (see jeloou/mocha@157f597).
What do you think?",jeloou,NONE,2014-05-22 18:34:11+00:00,True,2014-09-06 23:18:31+00:00,107.2,,2,1,2014-08-26 06:06:23+00:00,95.48,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1225,Promises testing (RSVP promises),"Hi,
I try to test RSVP promises with Mocha (the old way) and I realize that my tests are useless because sometimes they don't pass whereas they should.
I try to put data on Redis with ""then-redis"".
it 'should add a user test1@tld.com', (done) ->
  service.add('test1@tld.com')
    .then (user) ->
      user.should.have.property('uid')
      user.should.have.property('created_at')
      user.should.have.property('email')
      user.email.should.eql 'test1@tld.com'
    .catch (error) ->
      console.log ""error"", error
      should(error).be.not.ok 'This promise should be resolved'
    .finally -> done()

When promises are rejected, I find this in error argument:
""This socket has been ended by the other party""
but more often
""Error: write after end""
In a sequence of 4 identical tests like above, this occurs 1 times on 2...
When I'm not in the context of Mocha, all is good.
What does that mean?
More worrying, the assertions in catch are useless because in case of rejection, my test passes!
I tried should(error).be.not.ok 'This promise should be resolved' and true.should.not.be.ok but it has no effect.
What am I doing wrong?",neolitec,NONE,2014-05-24 12:22:41+00:00,True,2014-07-08 01:39:46+00:00,44.55,,4,11,2014-05-24 14:28:47+00:00,0.09,hallas,CONTRIBUTOR,0,3,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1228,Change default reporter to spec,Personally I only use spec. I think the default dot-based reporter is essentially useless. Knowing what you're testing is as important as the tests themselves.,jonathanong,CONTRIBUTOR,2014-05-28 00:30:58+00:00,True,2014-07-08 02:19:52+00:00,41.08,,8,15,2014-06-13 15:38:03+00:00,16.63,tunnckoCore,NONE,1,3,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1229,Diff Viewer Verbosity with -0,"As per chaijs/chai#223, it might make sense to display -0 in mocha's diff viewer if the value is actually -0 and not +0.
Thoughts?",skeggse,CONTRIBUTOR,2014-05-28 19:30:10+00:00,True,2015-01-18 14:23:53+00:00,234.79,,4,6,2014-08-26 06:03:37+00:00,89.44,boneskull,MEMBER,1,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1230,More descriptive beforeEach/afterEach messages,"I would like a failure in an beforeEach or afterEach to output which test it ran afterwards. For example:
describe('My Object', function() {
  var myObj;
  beforeEach(function() {
    myObj = new MyObject();
  });
  afterEach(function() {
    myObj.ensureClean(); // May throw an error
  });
  it('should do something', function() {
    myObj.doSomething();
  });
  it('should do something else', function() {
    myObj.doSomethingElse();
  });
});

If ensureClean throws an error, I don't know which test corrupted the object, since the error message gives me something generic:
  1) My Object ""after each"" hook:
     Error: The object was not clean
     <stack>

It would be great if the message said something like this:
  1) My Object ""after each"" hook after ""should do something""
     Error: The object was not clean
     <stack>

I frequently put global checks into the afterEach, maybe that's not the right way to go about this?",YourDeveloperFriend,NONE,2014-05-28 23:37:04+00:00,True,2015-07-10 04:09:25+00:00,407.19,,2,1,2014-07-07 20:05:34+00:00,39.85,boneskull,MEMBER,1,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1235,Don't use console.log in xunit reporter.,"JSON reporter uses process.stdout, but xunit reporter uses console.log.
It causes a problem if one wants to redirect output of mocha to a file.
Please use process.stdout.write instead of console.log in xunit reporter.",crocket,NONE,2014-06-01 15:32:29+00:00,True,2014-06-07 02:25:16+00:00,5.45,,1,1,2014-06-07 02:25:16+00:00,5.45,crocket,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1236,TODO tests,"TODO tests are like pending tests, but better. Perl has them. They're used for tests that are aspirational — a feature hasn't been implemented yet, a bug hasn't been fixed yet, etc. and that's okay, but we know how we want it to be.
When you declare a test as TODO it is still run (unlike an xit or giving it no function at all). When it fails, that's okay — if we're being verbose we report the fact that it ""failed"" but with a note that it's TODO, and it doesn't increase the failure count or make the whole suite fail. If we're not being verbose then the effect is very similar to the test not existing at all (maybe a TODO counter gets incremented).
When a TODO test passes, it's added to a list of ""unexpectedly passing TODO tests"" and generates output that gets the developer's attention. The idea is: great, you tested ahead, you wrote a test for how this thing should work, but you admitted it wasn't working yet and you didn't want to enforce that it passed. But now it is working, so remove the TODO flag so you can commit to not breaking it in the future!",arodland,NONE,2014-06-05 03:29:16+00:00,True,2014-06-21 22:31:13+00:00,16.79,,4,4,2014-06-05 03:31:55+00:00,0.0,arodland,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1237,How do I insert chai without requiring it in every test?,"To programmers, redundant codes are bad, so I looked for a way to reduce redundancy.
For now, I can execute ""mocha --require insert-chai.js ...""
// insert-chai.js
var chai = require(""chai"");
global.expect = chai.expect;
I think it is not wise to use global.
Is there a way to execute the script below directly in every test?
// This snippet is inserted in every test.
var chai = require(""chai"");
var expect = chai.expect;",crocket,NONE,2014-06-07 02:33:02+00:00,True,2014-06-08 21:00:03+00:00,1.77,,2,4,2014-06-08 21:00:03+00:00,1.77,tj,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1238,Chaining beforeEach,Is there anyway to chain beforeEach so that you can reuse code and nest desribes with multiple callbacks?,glassresistor,NONE,2014-06-10 18:38:55+00:00,True,2014-06-22 02:51:13+00:00,11.34,,3,2,2014-06-10 19:02:42+00:00,0.02,tj,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1241,err.showDiff = true breaks string diffs,"Observed:
2)  should compare strings (raw):

    Error: bad stuff
    + expected - actual

    +""a\nb\nc\nd""
    -""a\nb\n""

Wanted:
2)  should compare strings (raw):

    Error: bad stuff
    + expected - actual

     a
     b
    +c
    +d

Example code: (see https://github.com/felixrabe/mocha-chai-string-diff/blob/master/test/test.js for the complete example code, run with mocha)
it('should compare strings (raw)', function() {
  var err = new Error('bad stuff');
  err.expected = 'a\nb\nc\nd';
  err.actual = 'a\nb\n';
  err.showDiff = true;  // breaks string diffs
  // err.showDiff = false;  // string diffs are fine
  throw err;
});

With Chai:
var expect = require('chai').expect;

it('should compare strings (chai)', function() {
  try {
    expect('a\nb\n').to.equal('a\nb\nc\nd');
  } catch (err) {
    // string diffs broken because err.showDiff === true
    // err.showDiff = false;  // string diffs are fine
    throw err;
  }
});

If you uncomment the // err.showDiff = false; lines (ie. if you set showDiff to false), string diffs show up fine.",felixrabe,NONE,2014-06-18 14:00:55+00:00,True,2015-04-07 19:28:29+00:00,293.23,,11,21,2014-08-26 06:01:35+00:00,68.67,boneskull,MEMBER,1,7,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1242,-t isn't honored for long running sync operations.,"I believe the duration should be checked against _timeout here.  Thoughts?
Something like:
if(that._timeout < duration)err = new Error('took too long!');",jsdevel,CONTRIBUTOR,2014-06-19 00:58:22+00:00,True,2014-06-22 02:47:53+00:00,3.08,,1,1,2014-06-19 06:43:34+00:00,0.24,jsdevel,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1245,Inconsistent type.,"Hi,
Given the type test below, the lib type isn't consistent between files. please see more detail at here: https://gist.github.com/dno/5a5190f888fa385ef61e
var Lib1   = require('./lib1.js');
var Lib2   = require('./lib2.js');
var Lib3   = require('./lib3.js');
var assert = require('assert');

describe('Type of', function() {
    'use strict';

    it('all should be function', function() {
        assert.equal(typeof(Lib1), 'function');
        assert.equal(typeof(Lib2), 'function');
        assert.equal(typeof(Lib3), 'function');
    });

    it('all should still be function in lib1', function() {
        var lib1 = new Lib1();
        assert.equal(lib1.lib2Type, 'function');
        assert.equal(lib1.lib3Type, 'function');
    });

    it('all should still be function in lib2', function() {
        var lib2 = new Lib2();
        assert.equal(lib2.lib1Type, 'function'); // fail
        assert.equal(lib2.lib3Type, 'function'); 
    });


    it('all should still be function in lib3', function() {
        var lib3 = new Lib3();
        assert.equal(lib3.lib1Type, 'function'); // fail
        assert.equal(lib3.lib2Type, 'function');
    });
});",dino-su,NONE,2014-06-20 14:50:39+00:00,True,2014-06-20 15:03:24+00:00,0.01,,2,2,2014-06-20 15:03:24+00:00,0.01,hallas,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1248,describe.only will suddenly ignore grep options,"I have a set of protractor end to end tests which look something like this:
describe('login page', function () {

    before(function () {
        loginPage.go();
    });

    // #smoke tags, without @dev or @staging, will run in both mocked and live test runs
    it('should not log you in with invalid credentials #smoke', function () {
        loginPage.login('INVALID', 'INVALID');
        expect(loginPage.invalidNotificationText).to.eventually.contain('Invalid Username or RSA Token');
    });

    // This function will only work on dev environments, so it gets skipped in staging tests
    it('should log you in #smoke @dev', function () {
        loginPage.login();
        expect(ticketsPage.currentUrl).to.eventually.contain(ticketsPage.driver.params.loginRedirect);
    });

    after(function () {
        loginPage.logout();
    });

});

Here's my mocha options that I pass into the runner:

protractor.e2e.conf.js

// Options to be passed to mocha
mochaOpts: {
    reporter: 'spec',
    slow: 5000,
    ui: 'bdd',
    // exclude anything marked as #regression or @dev
    grep: /^(?!.*(#regression|@dev).*).*$/
}
It works just fine when I'm running things normally, but by adding describe.only to the above test, it runs the @dev test.",Droogans,NONE,2014-06-23 19:49:46+00:00,True,2014-08-26 05:59:32+00:00,63.42,,4,6,2014-07-07 20:02:29+00:00,14.01,boneskull,MEMBER,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1249,Including files with 0% coverage in report,"I have an issue where I'm trying to get accurate code coverage numbers for a node package. However, after a test run, files that aren't covered are missing from the report.
At the moment, I'm trying to force them to be there by recursing through the directory which contains the source instrumented by jscoverage and in each instrumented file calling the first three lines after the anonymous function at the beginning which initializes the global jscoverage objects/functions.
In order to do this, I've copied+pasted that anonymous function into my module which is -r required from the mocha command line. This all seems like some dangerous black magic which is destined to break at the first change in any of these tools.
Is there an established way of accomplishing this which will accurately report on source files with 0% coverage?",Irialad,NONE,2014-06-24 00:59:00+00:00,True,2015-07-05 14:38:36+00:00,376.57,,3,1,2015-07-05 14:38:36+00:00,376.57,jbnicolai,CONTRIBUTOR,0,1,0,0,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1250,Installation fails,"Doing npm install mocha fails with mocha 1.20.1.
$ npm i --save-dev mocha

npm ERR! error rolling back Error: ENOTEMPTY, rmdir '/Users/rsc/Projects/@rsc/2014/jsfuse/node_modules/mocha/node_modules/glob'
npm ERR! error rolling back  mocha@1.20.1 { [Error: ENOTEMPTY, rmdir '/Users/rsc/Projects/@rsc/2014/jsfuse/node_modules/mocha/node_modules/glob']
npm ERR! error rolling back   errno: 53,
npm ERR! error rolling back   code: 'ENOTEMPTY',
npm ERR! error rolling back   path: '/Users/rsc/Projects/@rsc/2014/jsfuse/node_modules/mocha/node_modules/glob' }
npm ERR! Error: ENOENT, open '/Users/rsc/Projects/@rsc/2014/jsfuse/node_modules/mocha/node_modules/jade/node_modules/mkdirp/package.json'
npm ERR! If you need help, you may report this *entire* log,
npm ERR! including the npm and node versions, at:
npm ERR!     <http://github.com/npm/npm/issues>

npm ERR! System Darwin 13.2.0
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""i"" ""--save-dev"" ""mocha""
npm ERR! cwd /Users/rsc/Projects/@rsc/2014/jsfuse
npm ERR! node -v v0.10.26
npm ERR! npm -v 1.4.16
npm ERR! path /Users/rsc/Projects/@rsc/2014/jsfuse/node_modules/mocha/node_modules/jade/node_modules/mkdirp/package.json
npm ERR! code ENOENT",rstacruz,CONTRIBUTOR,2014-06-25 03:13:51+00:00,True,2014-06-25 03:32:58+00:00,0.01,,1,2,2014-06-25 03:30:44+00:00,0.01,rstacruz,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1251,Test file name getting passed to interface/bdd does not change,"I am running mocha with protractor. It is being used as a library. In interfaces/bdd the file parameter which is getting passed is not getting reflected in the
context.it = context.specify = function(title, fn){ even after the test has completed.
e.g. Test files : A and B.
When I run mocha, it takes the file name of A and passes to the reporter. But when the test of A finishes the test file name still points to 'A'.
I understand that context.it is called for every it encountered. But when A finishes context.it still contains the file name of 'A'.
To duplicate the issue, please use protractor and put shardTestFile to false. And console.log the file name in the interface/bdd file at two places. Once when listener is activated and second inside context.it function",nirvanagit,NONE,2014-06-25 15:37:10+00:00,False,,,,4,4,2014-08-26 05:58:26+00:00,61.6,boneskull,MEMBER,1,0,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1252,setTimeout inside async test not behaving correctly,"I'm having a problem with a timeout inside an async test. I'm using mocha ~1.20.1 and chai ~1.9.1.
I have other async tests running and they work, but they do not use setTimeout. I've tried changing the duration, but that hasn't worked also.
I would expect the output to be something like this
✓ should deliver successful response (291ms)

but it just gives me a line as if it was ran synchronously
1) should return true when token is expired based on time

test
it( 'should return true when token is expired based on time', function( done ) {
    var AuthClient = new Client({
        clientId: 'test'
        , clientSecret: 'test'
        , expiration: 1
    });

    setTimeout( function() {
        expect( AuthClient.checkExpired() ).to.be.true;
        done();
    }, 1000 );
});
Error
Error: timeout of 2000ms exceeded
      at null.<anonymous> (/usr/local/lib/node_modules/mocha/lib/runnable.js:139:19)
      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)",vernak2539,NONE,2014-06-26 20:47:54+00:00,True,2014-07-07 21:17:30+00:00,11.02,,4,5,2014-07-07 20:00:11+00:00,10.97,boneskull,MEMBER,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1253,After and before and sharing variables,"I'd like to do something like this without have to set a outside of before or after?
var a = undefined;
before(function() {
  a = new Stuff();
});
it(...);
after(function() {
  a.clear();
});",glassresistor,NONE,2014-06-26 20:58:42+00:00,True,2014-06-29 08:09:04+00:00,2.47,,3,2,2014-06-29 07:42:01+00:00,2.45,chinedufn,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1254,Support --harmony in mocha opts,"I read on another ticket with this title that this should work, but what version of mocha do I need for that to work?
$ mocha --harmony --timeout 2000 --reporter tap --ui bdd spec-server/transactions/change-registered-office.js

spec-server/transactions/change-registered-office.js:36
            for (let i=0; i<nodes.length; i++){
                ^
SyntaxError: Illegal let declaration outside extended mode
$ mocha --version
1.20.0
$ node --version
v0.10.28",leegee,NONE,2014-07-02 07:04:46+00:00,True,2014-07-06 06:00:33+00:00,3.96,,2,3,2014-07-02 07:22:49+00:00,0.01,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1255,mocha programatically,"hello,
whenever i am using mocha programmatically, like explained here
https://github.com/visionmedia/mocha/wiki/Using-mocha-programmatically
and i pasted this code into an express route, it works fine the first time.
When i reload the page... the test is not executed anymore, but mocha atleast is executed.
here the console log from express application
GET /event/_test 304 15ms
[2014-07-02 17:19:11.220] [WARN] expresslog - 127.0.0.1 - - ""GET /event/_test HTTP/1.1"" 304 - """" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36""
[2014-07-02 17:19:11.221] [INFO] console -   db test
[2014-07-02 17:19:11.223] [INFO] console -     ✓ checks in database for a user 
[2014-07-02 17:19:11.224] [INFO] console - 
[2014-07-02 17:19:11.224] [INFO] console - 
[2014-07-02 17:19:11.224] [INFO] console -   1 passing (10ms)
[2014-07-02 17:19:11.224] [INFO] console - 
[2014-07-02 17:19:22.678] [INFO] console - 
[2014-07-02 17:19:22.678] [INFO] console - 
[2014-07-02 17:19:22.678] [INFO] console -   0 passing (0ms)
[2014-07-02 17:19:22.678] [INFO] console - 
GET /event/_test 304 3ms
[2014-07-02 17:19:22.680] [WARN] expresslog - 127.0.0.1 - - ""GET /event/_test HTTP/1.1"" 304 - """" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36""

what is obvious is, that the GET request for the successfull test shows up in logs first, for alle following requests it is showing up after the test.
Any help apreciated.",cruiser12,NONE,2014-07-02 15:24:20+00:00,True,2014-07-03 21:21:11+00:00,1.25,,1,1,2014-07-02 17:45:39+00:00,0.1,cruiser12,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1256,[proposal] Convert to ensuring passing tests rather than failing tests,"In its current form, Mocha does not tell you that your tests are passing.  Instead, it only tells you when tests are not passing.  This may seem like a trivial difference until you find that you have ""passing"" tests that are not actually executing any assertions.
This issue was raised a couple years ago and ultimately ended up with the --async-only option being introduced.  Using this option makes it easier to ensure assertions are run as you can make it a habit to place done() directly after the assertion.
Personally, I don't care for this solution as it does not fix the problem for synchronous tests, which remain a feature.  The only advantage synchronous tests seem to provide is the convenience of omitting the done() function.  Nevertheless, this may be reason enough to keep support for this feature.
If we keep synchronous support
I would propose that we ensure at least one assertion is made to consider a test passing.  To do this, Mocha would need to be able to access a ""trip meter"", ""assertion count"", or something similar from assertion libraries.  All Mocha needs is the answer to this question: Were any assertions made during this test?
User should be able to do something really simple like this:
mocha --link should, chai

I would point out that this would also open the door for possible reporting on assertion information (i.e. # of assertions made)
If we drop synchronous support
Then, I would propose making the -A behavior the default.",bitsoflogic,NONE,2014-07-02 20:03:11+00:00,True,2014-11-02 22:41:00+00:00,123.11,,4,5,2014-07-07 19:55:26+00:00,4.99,boneskull,MEMBER,1,0,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1257,Tap reporter can produce invalid output due to stack trace,"The tap reporter does the following on fail:
console.log(err.stack.replace(/^/gm, '  '));
Depending on the stack trace, this can produce invalid tap output.  For example, a tap file with a stack trace from WebDriverJs is below...invalid (try it in http://instanttap.appspot.com/ ).
Ideas for sanitizing the stack trace?
Or providing an option to leave it on err.stack and not print it (so it can be potentially written as a file or written at the end)?
1..5
Selenium Server started on port 4444
Local http server listening at http://localhost:8080
Webdriver navigating to http://localhost:8080/test/ui/fixtures/index.html
ok 1 Instancing Toggle Switch from provided DOM data attribute should automatically instance a toggle button from the expected DOM
ok 2 Instancing Toggle Switch from dynamically-added DOM should not automatically instance a toggle button without the expected DOM
not ok 3 Instancing Toggle Switch from dynamically-added DOM should be instanced via JavaScript
  AssertionError: expected true to be false
      at <anonymous>
  ==== async task ====
  WebDriver.findElements(By.xpath(""//input[last()]/ancestor::div[contains(@class, 'has-switch')]""))
      at webdriver.WebDriver.schedule (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/webdriver.js:267:15)
      at webdriver.WebDriver.findElements (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/webdriver.js:825:17)
      at webdriver.WebDriver.isElementPresent (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/webdriver.js:787:29)
      at /Users/212362413/projects/dx-components/toggle-switch/test/ui/spec/toggle-switch-ui-spec.js:74:20
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/goog/base.js:1178:15
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1445:20)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at Object.webdriver.promise.asap (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:678:5)
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1456:25)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1312:10
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/goog/base.js:1178:15
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1445:20)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/goog/base.js:1178:15
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1445:20)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:613:51
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/http/http.js:96:5
      at IncomingMessage.<anonymous> (/Users/212362413/npm/lib/node_modules/selenium-webdriver/http/index.js:113:7)
      at IncomingMessage.EventEmitter.emit (events.js:117:20)
      at _stream_readable.js:920:16
      at process._tickCallback (node.js:415:13)
  ==== async task ====
      at webdriver.promise.ControlFlow.wait (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1202:15)
      at webdriver.WebDriver.wait (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/webdriver.js:546:21)
      at /Users/212362413/projects/dx-components/toggle-switch/test/ui/spec/toggle-switch-ui-spec.js:45:20
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/goog/base.js:1178:15
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1445:20)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at Object.webdriver.promise.asap (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:678:5)
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1456:25)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1312:10
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/goog/base.js:1178:15
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1445:20)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/goog/base.js:1178:15
      at webdriver.promise.ControlFlow.runInNewFrame_ (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:1445:20)
      at notify (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:328:12)
      at notifyAll (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:297:7)
      at fulfill (/Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:402:7)
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/promise.js:613:51
      at /Users/212362413/npm/lib/node_modules/selenium-webdriver/lib/webdriver/http/http.js:96:5
      at IncomingMessage.<anonymous> (/Users/212362413/npm/lib/node_modules/selenium-webdriver/http/index.js:113:7)
      at IncomingMessage.EventEmitter.emit (events.js:117:20)
      at _stream_readable.js:920:16
      at process._tickCallback (node.js:415:13)
ok 4 Underlying form field interactions should set the ""checked"" property of the checkbox inside the toggle button
ok 5 Underlying form field interactions should unset the ""checked"" property of the checkbox inside the toggle button
# tests 5
# pass 4
# fail 1",jreichenberg,NONE,2014-07-03 06:05:22+00:00,True,2018-11-10 12:09:55+00:00,1591.25,,3,2,2014-07-03 06:41:11+00:00,0.02,jreichenberg,NONE,0,1,0,1,"['help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1258,Missing error message/stack trace,"I'm using the latest mocha and chai with nodeJS v0.10.29 on Windows 7.
When I get a test failure, all I get is:
 /url
   GET
     1) should do the thing

  1 failing

{ [Error: Command failed:   1 failing
] killed: false, code: 1, signal: null }

The error seems to come from the exec function.
I'm running the tests by using my coffeescript Cakefile:
# Cakefile

{exec} = require 'child_process'

REPORTER = 'spec'

mochaOptions = ""--compilers coffee:coffee-script/register
      --reporter #{REPORTER}
      --require coffee-script
      --require test/test_helper.coffee
      --colors""

outputter = (err, stdout, stderr) ->
  console.log stdout
  console.warn stderr if stderr
  console.error err if err

task 'test', 'run tests', ->
  exec 'set NODE_ENV=test'
  exec ""node_modules\\.bin\\mocha #{mochaOptions}"", outputter
Running the equivalent on Ubuntu works fine. Am I doing something wrong or is this a Windows compatibility issue? Let me know if there's anything else you need.",ThomWright,NONE,2014-07-03 16:04:38+00:00,True,2014-07-27 12:04:49+00:00,23.83,,3,2,2014-07-17 21:49:34+00:00,14.24,danquirk,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1259,Better error reporting for stupid developers :),"Being new to mocha, in one of my early test cases I wrote
describe('Composed DSM', function(){
            expect(dsm.state().sid.observable()).to.be(32133);
            expect(dsm.sid).to.be(32133);
        });

// instead of
describe('Composed DSM', function(){
        it('should have the required public interface', function(){
            expect(dsm.state().sid.observable()).to.be(32133);
            expect(dsm.sid).to.be(32133);
        });
    })

Although this is clearly a stupid mistake, mochas error message kind of also was:
expected undefined to not equal undefined
I think: something like: ""Missing specification of it()"" would have spared me half an hour of looking through all the code changes I had made before""",bennidi,NONE,2014-07-06 10:43:55+00:00,True,2014-07-06 10:49:25+00:00,0.0,,4,4,2014-07-06 10:49:25+00:00,0.0,travisjeffery,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1261,Grep should work for describe titles.,"Currently grep only matches it titles.
I could see how this would affect existing behavior, so I'm open to knowing whether or not this would be a welcomed change.",jsdevel,CONTRIBUTOR,2014-07-08 06:32:06+00:00,True,2014-07-08 06:38:45+00:00,0.0,,1,1,2014-07-08 06:38:45+00:00,0.0,jsdevel,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1263,Moving reporters to a separate module.,It would be really nice to have mocha-reporters for other projects.,jsdevel,CONTRIBUTOR,2014-07-08 09:30:55+00:00,True,2014-07-11 23:53:36+00:00,3.6,,2,3,2014-07-11 23:53:36+00:00,3.6,jbnicolai,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1264,TeamCity Reporter Missing?,"http://visionmedia.github.io/mocha/#reporters lists a TeamCity reporter (with documentation needed), but when I check ./lib/reporters, I don't see a matching .js file.",futurechan,NONE,2014-07-09 13:17:55+00:00,True,2014-07-11 23:52:11+00:00,2.44,,2,2,2014-07-11 23:52:08+00:00,2.44,jbnicolai,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1266,it.only ignores --grep options,"Similar to #1248 , although my use case slightly differs.
Running under node (although i will be testing in the browser as well).
options = [
  {foo: false, bar: false, tags: '@no_options'},
  {foo: false, bar: true, tags: '@bar'},
  {foo: true, bar: false, tags: '@foo'},
  {foo: true, bar: true, tags: '@foo @bar'}
]
_.each(options, function(option) {
  describe('Example test ' + option.tags, function() {
    it('Should work', function() {
      // test
    })
    it.only('Should work too', function() {
      // test
    })
  })
})

and then run with --grep @no_options",forivall,NONE,2014-07-10 22:08:25+00:00,True,2014-07-14 03:25:04+00:00,3.22,,2,1,2014-07-14 03:25:04+00:00,3.22,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1271,Only test .coffee files,"I am running Mocha with --compilers coffee:coffee-script/register but Mocha still seems to want to try to run a setup.js I have in the test folder.
Is there a way to tell Mocha to either only run .coffee files, or to ignore files named *.js?",ebaizel,NONE,2014-07-15 16:42:08+00:00,True,2014-07-16 22:43:52+00:00,1.25,,3,4,2014-07-16 11:42:40+00:00,0.79,rlidwka,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1272,before() for individual test cases,"Is there a way to do a before() specifically for a test case?
It would be great to be able to do something like this:
it('should do something', function (done) {

    before(function (done) {
        // prepare something specific to this test case
        done();
    });

    async.operation(function (err, res) {
        assert.ok(res);
        done(err);
    });

})",hacksparrow,NONE,2014-07-17 09:40:51+00:00,True,2014-07-18 03:16:07+00:00,0.73,,3,3,2014-07-18 03:11:12+00:00,0.73,xixixao,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1273,nested describe not working,"all nested describe() are being processed, but the code in the last 2 isn't making any changes as if it wasn't processed. If remove all the other nested describe() preceding the last 2 everything goes fine.
describe('PhoneBook', function() {
describe('postContacts', function() {
it('Should post contacts without error', function(done) {
request({
method: ""Post"",
url: url + ""insertContact"",
headers: {'content-type': 'application/json'},
body: JSON.stringify(contacts)
}, function(err, resp){
assert.equal(resp.statusCode, 201);
done();
});
});
});
describe('postGroup', function() {
it('Should post contacts without error', function(done) {
request({
method: ""Post"",
url: url + ""insertGroup"",
headers: {'content-type': 'application/json'},
body: JSON.stringify(Group.serializeToDocument(favorites))
},function(err, resp){
assert.equal(resp.statusCode, 201);
done();
});
});
});
describe('getContactById', function() {
it(""Should get the contact without error"", function() {
request.get(url + ""contactById/"" + rabih.getId(), function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('getAllContacts', function() {
it(""Should get the contacts without error"", function() {
request.get(url + ""allContacts"", function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('getContactsByEmail', function() {
it(""Should get the contacts without error"", function() {
request.get(url + ""contactsByEmail/""+rabih.getEmails()[0], function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('getContactsByPhone', function() {
it(""Should get the contacts without error"", function() {
request.get(url + ""contactsByPhone/""+rabih.getPhoneNumbers()[0], function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('getContactsByGroupId', function() {
it(""Should get the group without error"", function() {
request.get(url + ""contactsByGroupId/""+favorites.getId(), function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('getGroupById', function() {
it(""Should get the group without error"", function() {
request.get(url + ""groupById/""+favorites.getId(), function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('updateContactFirstName', function(){
it(""should update the firstName of the contact without error"", function(){
request.put(url+""updateContactFirstName/""+rabih.getId()+""/""+""newName"", function(err, resp){
assert.equal(resp.statusCode, 200);
});
});
});
describe('updateContactLastName', function(){
it(""should update the lastName of the contact without error"", function(){
request.put(url+""updateContactLastName/""+rabih.getId()+""/""+""newLastName"", function(err, resp){
assert.equal(resp.statusCode, 200);
});
});
});
describe('updateContactPhoneNumbers', function(){
it(""should update the phoneNumbers of the contact without error"", function(){
request({
method: ""PUT"",
url : url+""updateContactPhoneNumbers/""+rabih.getId(),
headers : {'content-type' : 'application/json'},
body : JSON.stringify(john.getPhoneNumbers())
},function(err, resp){
assert.equal(resp.statusCode,200);
});
});
});
describe('updateContactEmails', function(){
it(""should update the emails of the contact without error"", function(){
request({
method: ""PUT"",
url : url+""updateContactEmails/""+rabih.getId(),
headers : {'content-type' : 'application/json'},
body : JSON.stringify(rabih.getEmails())
},function(err, resp){
assert.equal(resp.statusCode,200);
});
});
});
describe('updateGroupName', function(){
it(""should update the groupName of the group without error"", function(){
request.put(url+""updateGroupName/""+favorites.getId()+""/""+""newGroupName"", function(err, resp){
assert.equal(resp.statusCode, 200);
});
});
});
describe('updateGroupContacts', function(){
it(""should update the contacts of the group without error"", function(){
request({
method: ""PUT"",
url : url+""updateGroupContacts/""+rabih.getId(),
headers : {'content-type' : 'application/json'},
body : JSON.stringify(favorites.getContacts())
}, function(err, resp){
assert.equal(resp.statusCode, 200);
})
});
});
describe('removeContact', function(){
it(""should remove the contact without error"", function(){
request.del(url + ""removeContact/"" + rabih.getId(), function(err, resp) {
assert.equal(resp.statusCode, 200);
});
});
});
describe('removeGroup', function(){
it(""should remove the contact without error"", function(){
request.del(url + ""removeGroup/"" + favorites.getId(), function(err, resp) {
if(err) {
console.error(err);
} else {
assert.equal(resp.statusCode, 200);
}
});
});
});
});",rabihhage,NONE,2014-07-17 15:06:16+00:00,True,2014-07-17 15:15:04+00:00,0.01,,1,1,2014-07-17 15:15:56+00:00,0.01,rabihhage,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1274,asynchronous assertion timeout,"When i try to make a assertion of a asynchronous functions it doesn't throw the error but instead got timeout.

If you can see, my result it is a object and I'm asserting to be equal to 3, it is suppose to fail.",lucasfeliciano,NONE,2014-07-20 08:27:24+00:00,True,2014-07-28 10:44:03+00:00,8.09,,2,1,2014-07-28 10:06:11+00:00,8.07,jonathanong,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1275,--compilers coffee:coffee-script not working?,"// test/mocha.opts
--compilers coffee:coffee-script
--reporter spec
--recursive
--watch
--check-leaks
// test/upstart.coffee
process.env.NODE_ENV = 'test'
process.env.PORT = 1338

Sails = require('sails/lib/app')
app = Sails()

before (done) ->
  app.lift({ globals: false }, done)

after (done) ->
  app.lower(done)
If I run mocha I get
/Users/me/Work/proj/test/upstart.coffee:7
before (done) ->
               ^
SyntaxError: Unexpected token >
  at exports.runInThisContext (vm.js:69:16)
  at Module._compile (module.js:432:25)
  at Object.Module._extensions..js (module.js:467:10)",xpepermint,NONE,2014-07-20 10:28:30+00:00,True,2014-10-17 07:13:46+00:00,88.86,,6,10,2014-07-20 10:32:06+00:00,0.0,xpepermint,NONE,1,0,0,5,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1276,"With gulp, Mocha finishes and then outputs to console afterwards?",sindresorhus/gulp-mocha#49,reywright,NONE,2014-07-21 12:56:49+00:00,True,2014-08-26 05:48:05+00:00,35.7,,2,1,2014-08-26 05:48:05+00:00,35.7,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1279,Mocha from within async JakeJS task says it passes but throws errors,"So I am trying to hook in some functional tests to my build pipeline, so I made a new async task in jake then had mocha interact as shown in the ""using progmatically"" document.
So anyway it loads the simple homepage test I have put in there, which verifies it loads the homepage and then verifies that all modules we expect to be there are there. Now I have put in some random elements that I know dont exist like #trterterererg and yet it still passes the test, then afterwards there is an error once the callback has been called from mocha to say the test is over. So it never passed in the first place but for some reason it thinks it did.

I know there are issues with using Mocha with Jake as it is, but I can cope with the long running task as I manually run tests at the moment so I can manually cancel them, however if I cannot trust the results there is no point me writing the tests.
Here is the code for the tests incase it helps, as you can see I put nonsense in which should fail the tests, yet they still pass.
    it(""should show the homepage"", function() {
        this.browser
            .visit(""/"")
            .then(function(){
                assert.ok(this.browser.success);
            });
    });

    it(""should show all modules"", function() {
        var modules = [""tdtyd"", ""viuv"", ""bhk vkh kh ""];
        this.browser
            .visit(""/"")
            .then(function(){
                modules.forEach(function(module){
                    assert.ok(browser.query(""#some-non-existant-element-"" + module));
                });
            });
    });

Has anyone seen this before?",grofit,NONE,2014-07-25 08:57:18+00:00,True,2014-08-26 05:38:41+00:00,31.86,,2,1,2014-08-26 05:38:41+00:00,31.86,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1280,timeout of 0ms exceeded,"I return promises in tests, and now mocha fails saying ""timeout of 0ms exceeded"".
lib/runnable.js:202 is reponsible for the error.
Why do I see this error?",crocket,NONE,2014-07-25 15:14:36+00:00,True,2014-07-25 15:39:58+00:00,0.02,,2,4,2014-07-25 15:39:58+00:00,0.02,crocket,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1281,Document `enableTimeouts` option.,"The option was added in 1.21.0, but it is not documented yet.",crocket,NONE,2014-07-25 16:06:08+00:00,True,2015-07-12 04:14:57+00:00,351.51,,2,1,2015-07-12 04:14:57+00:00,351.51,boneskull,MEMBER,1,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1282,Fix getting timeout() from Context,#779 (comment),travisjeffery,CONTRIBUTOR,2014-07-25 19:20:19+00:00,True,2014-07-25 19:21:06+00:00,0.0,,3,2,2016-04-07 01:09:01+00:00,621.24,ORESoftware,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1283,done() not working inside promise,"I use mocha and chai to test my AngularJS frontend. My problem is that done does`nt seem to end the test and gives me a timeout error.
it 'should save test if channel exists', (done) - > test = {
    title: 'found'
    keywords: []
}
$httpBackend.when 'GET', url + test.title.respond {
    ""pageInfo"": {
        ""totalResults"": 1,
            ""resultsPerPage"": 5
    },
        ""items"": [{
        ""id"": ""id_found"",
            ""snippet"": {
            ""title"": ""Found"",
                ""thumbnails"": {
                ""default"": {
                    ""url"": ""http://example.com/thumbnail.png""
                }
            }
        }
    }]
}
factory.add test.then(r) - > expect(r.ok).to.equal true
expect(r.id).to.equal 'id_found'
done()
    .
catch (err) -> done err
$httpBackend.flush()",GamingCoder,NONE,2014-07-26 15:53:56+00:00,True,2014-08-23 09:55:17+00:00,27.75,,7,8,2014-07-27 05:53:45+00:00,0.58,boneskull,MEMBER,1,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1285,v1.21.1 doesn't work in-browser,"On line 1401 of mocha.js (ie, the browser one) it has cwd = process.cwd();.
This returns an error when running a browser.  Have had to revert to v1.21.0 as that doesn't have this in",riggerthegeek,NONE,2014-07-27 11:02:29+00:00,True,2014-07-27 18:58:05+00:00,0.33,,4,4,2014-07-27 11:52:43+00:00,0.03,timaschew,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1286,customFds deprecated,"I'm using node version v0.11.14-pre with mocha version 1.21.1.
No tests are running as I get a ""deprecated"" error:
child_process: customFds option is deprecated, use stdio instead.

Reading in the nodejs documentation http://nodejs.org/api/child_process.html this option has been deprecated.",taddei,NONE,2014-07-27 11:47:58+00:00,True,2014-07-27 21:34:32+00:00,0.41,,5,8,2014-07-27 14:26:30+00:00,0.11,taddei,NONE,1,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1288,allow local modules to work as UI and reporters redux,"@giggio @jbnicolai Prompted by #1285, I had to revert #1267 (see fa71d54 and 621c2a8).  Let's try again, and write it in a way that will not break the browser.",boneskull,MEMBER,2014-07-27 19:21:07+00:00,True,2014-07-28 00:43:08+00:00,0.22,,2,2,2014-07-27 20:29:06+00:00,0.05,jbnicolai,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1289,undefined is not a function in mocha@1.21.1,"See details in pouchdb/pouchdb#2541. Downgrading to 1.21.0 fixes it.
Line throwing is
var path = require('browser/path')
  , utils = require('./utils')
  , join = path.join
  , cwd = process.cwd();
process.cwd is undefined in this case, because we're in a browser.
Steps to reproduce:
git clone https://github.com/pouchdb/pouchdb.git
cd pouchdb
git checkout 9c0250e569a0cf0eeb7df85d493f9b99f13e6a17
npm install
CLIENT=selenium:firefox npm test",nolanlawson,NONE,2014-07-28 00:17:07+00:00,True,2014-07-28 00:27:37+00:00,0.01,,2,2,2014-07-28 00:27:37+00:00,0.01,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1291,formalize release steps,"I had to do a release quickly due to #1285, but I wasn't sure what all needed to be done.
I'm thinking it's something like:

make && make test
update History.md (git changelog? Not sure how to use it)
update Readme.md (git summary, I guess)
commit, tag, push

Any steps I'm missing?
thanks,
Chris",boneskull,MEMBER,2014-07-28 03:31:49+00:00,True,2014-07-28 04:00:34+00:00,0.02,,2,1,2014-07-28 04:00:34+00:00,0.02,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1292,"Timeouts can't be disabled in before hooks ""Error: timeout of 0ms exceeded""","Suite-level timeouts may be applied to entire test ""suites"", or disabled via this.timeout(0). This will be inherited by all nested suites and test-cases that do not override the value.

Before hooks are no longer able to disable timeout with this.timeout(0)
before(function (done) {
    this.timeout(0);
    setTimeout(function(){
        done();
    }, 3000);
});

Gives the following error
Error: timeout of 0ms exceeded",ugonnanwosu,NONE,2014-07-28 11:00:43+00:00,True,2014-08-23 03:02:59+00:00,25.67,,3,3,2014-08-18 19:36:40+00:00,21.36,benhutchins,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1293,Enable debug mode,"We should be able to enable mocha debug mode from the command line interface.
For example, when running a mocha test it should be possible to turn that running instance of mocha into debug mode:
$: mocha mytest.js --debug
Browsing through the source I can see that the library debug() is being used - https://github.com/visionmedia/debug
After adding the following statement to the /mocha.js file I was able to get the debug logs:
require('debug').enable('mocha:*');
I would assume that the option to flag debug on/off already exists but it is not documented.
If it does exists, a link in the docs page should be added describing how to enable debug mode.
If it doesn't exists I would suggest that the feature be added to the code base.",diogogmt,CONTRIBUTOR,2014-07-28 18:36:15+00:00,True,2014-07-28 19:16:23+00:00,0.03,,2,5,2014-07-28 19:16:23+00:00,0.03,travisjeffery,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1294,JSON reporter missing error reason,"There is an issue with the json reporter where the error cause is not being captured in the test results.
I was able to trace the problem to here: https://github.com/visionmedia/mocha/blob/master/lib/reporters/json.js#L39
The fail event is not accepting the error argument.
In the Runner implementation, when the fail event is emitted the error is set in the argument list: https://github.com/visionmedia/mocha/blob/master/lib/runner.js#L191
The patch proposed in this ticket adds two new attributes to the json reporter output:
errMessage and errStack
It also saves the json result back into the runner object to allow a programmatically mocha run to query the output.",diogogmt,CONTRIBUTOR,2014-07-28 20:06:45+00:00,True,2014-08-05 07:12:37+00:00,7.46,,2,1,2014-08-05 07:12:37+00:00,7.46,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1296,Color codes are still being output when piped to other programs,"When I pipe mocha | less, ugly color code symbols are showing up:
mocha | less
ESC[0mESC[0m
ESC[0m  regenboogESC[0m
ESC[0m    dbESC[0m
^M    ESC[32m  ✓ESC[0mESC[90m store and retrieve password ESC[0m


ESC[92m ESC[0mESC[32m 1 passingESC[0mESC[90m (17ms)ESC[0m

Good etiquette for command line programs is to hide color codes when a TTY is not attached. jshint and ack behave correctly, for example.
I'm using the following system specs, in case this is an error in my personal configuration.
$ specs mocha node bash os
Specs:

specs 0.8
https://github.com/mcandre/specs#readme

mocha --version
1.21.3

npm --version
1.3.24

node --version
v0.10.25

bash --version
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.1 LTS
Release:    14.04
Codename:   trusty",mcandre,NONE,2014-07-30 16:34:22+00:00,True,2014-08-05 06:40:25+00:00,5.59,,4,3,2014-07-30 19:41:58+00:00,0.13,ethankao,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1298,update Programmatic API documentation,There is very little information that explains how to use the programmatic interface.  All that is really mentioned is this wiki page that provides an example.  It would be nice to see explicitly what is available like this (for example).,DepthDeluxe,NONE,2014-07-30 20:47:25+00:00,True,2015-07-12 04:14:11+00:00,346.31,,5,4,2014-09-20 19:50:19+00:00,51.96,ilanbiala,NONE,1,0,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1300,Error: timeout of 0ms exceeded,"Getting this error when specifiying
this.timeout(0)

Which normally disables timeouts altogether, now it is interpreting it literally.",rook2pawn,NONE,2014-08-04 17:04:41+00:00,True,2014-08-15 02:31:07+00:00,10.39,,5,4,2014-08-05 17:41:08+00:00,1.03,vdamyanov,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1303,Can I wrap tests inside a callback? (i.e. an around hook),"For my tests that write to a database, I want to run each example inside a transaction. This cleanest way to do this is to use a callback-driven approach in Sequelize. But in order for that to work, I'd need an around hook in Mocha. Is it possible?",d11wtq,NONE,2014-08-05 13:56:57+00:00,True,2014-08-26 05:29:48+00:00,20.65,,5,6,2014-08-05 23:12:11+00:00,0.39,ksmithut,NONE,1,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1304,Color codes output to non-ttys,"Like the writer of #1296 I am piping the output of Mocha tests to a non-tty (file in this case), and am getting control characters (specifically those for colors) in my text. This is nasty as I am trying to support unicode characters, and that makes life difficult.
The reports code appears correct, but I tracked the problem down to a combination of two places in lib/mocha.js:

in Mocha.prototype.useColors the default if there is no setting is to be true, if you have selected neither -c/--colors or -C/--no-colors this gets called called by mocha.js with undefined in the line this.useColors(options.useColors), so this.options.useColors is true.
In Mocha.prototype.run there is the line:

exports.reporters.Base.useColors = options.useColors;
Since this does not get run until the Mocha object is instantiated, it is run later than the code in the top-level of the the reports modules. So this one always overrides what is set in reporters modules, and always sets it to true, unless you explicitly call -C/--no-colors.
A correction would be to change that last line to:
if (exports.reporters.Base.useColors == undefined) exports.reporters.Base.useColors = options.useColors;",larkost,NONE,2014-08-05 22:45:02+00:00,True,2018-12-28 19:46:16+00:00,1605.88,,8,21,2014-08-06 06:59:05+00:00,0.34,boneskull,MEMBER,2,1,0,6,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1306,Brackets IO,Is there any plans or do you know of a way that could integrate Mocha into Brackets?,jchannon,NONE,2014-08-10 15:30:50+00:00,True,2014-08-10 23:08:07+00:00,0.32,,2,2,2014-08-10 23:08:07+00:00,0.32,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1307,Mocha not finding the correct tests,"Hey. Im sure this is a problem that I am doing but I can't seem to find an answer online.
I have mocha set up and am testing with the command:
mocha test/*/.js --timeout 5000
My file stucture looks like:

It runs both test files if they both have describe.only('UserController',
but once I change one file to AuthController, The test no longer runs. I go from 2 passing tests to only one.
Why is mocha now unaware of new test because of a name change?
Thanks so much in advance. This is a great framework!",joncodo,NONE,2014-08-11 12:23:50+00:00,True,2014-08-11 12:36:43+00:00,0.01,,1,1,2014-08-11 12:36:43+00:00,0.01,joncodo,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1308,I got the '__screenCapturePageContext__' error when test the ajax method in Chrome browser,"But it seems fine in firefox.
My code is:
it(""it should be success to request 'data/ajax.js'"", function(done) {
    F(function($){
        $.ajax({
            url : 'data/ajax.js',
            onSuccess : function(){
                done();
            }
        });
    });
});
The F is a my js lib, and I am sure the onSuccess event has been triggerd.",fancyboynet,NONE,2014-08-12 09:00:53+00:00,True,2014-08-12 09:03:34+00:00,0.0,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1309,I got the '__screenCapturePageContext__' error when test the ajax method in Chrome browser,"But it seems fine in firefox.
My code is:
it(""it should be success to request 'data/ajax.js'"", function(done) {
    F(function($){
        $.ajax({
            url : 'data/ajax.js',
            onSuccess : function(){
                done();
            }
        });
    });
});
The F is a my js lib, and I am sure the onSuccess event has been triggerd.
The error tips:
Error: global leak detected: __screenCapturePageContext__
    at Runner.checkGlobals (http://_learning.fancyboy.net/F/bower_components/mocha/mocha.js:4588:21)
    at Runner.<anonymous> (http://_learning.fancyboy.net/F/bower_components/mocha/mocha.js:4463:44)
    at Runner.EventEmitter.emit (http://_learning.fancyboy.net/F/bower_components/mocha/mocha.js:588:20)
    at http://_learning.fancyboy.net/F/bower_components/mocha/mocha.js:4871:14
    at done (http://_learning.fancyboy.net/F/bower_components/mocha/mocha.js:4343:5)
    at http://_learning.fancyboy.net/F/bower_components/mocha/mocha.js:4363:9
    at Object.$.ajax.onSuccess (http://_learning.fancyboy.net/F/test/ajax.js:9:29)
    at XMLHttpRequest.request.onreadystatechange (http://_learning.fancyboy.net/F/F.js:544:40)",fancyboynet,NONE,2014-08-12 09:01:14+00:00,True,2014-08-13 02:53:10+00:00,0.74,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1310,additional info added to a test for failure cases?,"Question:
For a use case where a failure would be easier to troubleshoot if additional test information is needed that's not in the description string, is there a way to attach some test-created data to the test case so a custom reporter could display this information instead of a stack trace?
My use case is a supertest wrapper that uses mocha to run the http assertions.  on success, the dsecribe/it labels are perfect.  On failure, it would be great to display the ""request"" object that triggered the failure.  I've seen other issues where this kind of thing was the responsibility of the ""assert"" library, but that's encapsulated within supertest.
Example code (simplified to show data-flow):
describe('site works', function () {
   it('for /news/', function (done) {
        var req = {           // want to attach this to the test somehow
           protocol: 'http',
           domain: ""foo.com"",
           path: '/news/'
         }
         supertest.get(req);
         supertest.expect(200, done);
   });
   it('for /news/technology', function (done) {
         var req = {
           protocol: 'http',
           domain: ""foo.com"",
           path: '/news/technology'
         }
         supertest.get(req);
         supertest.expect(200, done);
   });
});

Example desired output (custom reporter):
site works
    ✓ for /news
    1) for /news/technology

 1) site works for /news/technology:
     Error: expected 200 ""OK"", got 301 ""Moved Permanently""
     request: {
       protocol: 'http',
       domain: ""foo.com"",
       path: '/news/technology'
     }",leecookson,NONE,2014-08-13 16:08:18+00:00,True,2014-08-26 05:35:17+00:00,12.56,,2,2,2014-08-16 05:11:30+00:00,2.54,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1311,xunit reporter crashes when the output directory does not exist,"I was having the following error :
/Users/me/my_project/node_modules/mocha/lib/mocha.js:137
    if (!_reporter) throw new Error('invalid reporter ""' + reporter + '""');
                          ^
Error: invalid reporter ""xunit-file""
    at Mocha.reporter (/Users/me/my_project/node_modules/mocha/lib/mocha.js:137:27)
    at Object.<anonymous> (/Users/me/my_project/node_modules/mocha/bin/_mocha:191:7)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3
make: *** [functional-test] Error 8

Because the output directory didn't exist. I created it, and now it's working. I believe there should be at least a better error message...
Thanks :-)",,NONE,2014-08-13 19:17:00+00:00,True,2015-07-05 15:11:28+00:00,325.83,,2,1,2015-07-05 15:11:28+00:00,325.83,jbnicolai,CONTRIBUTOR,0,1,0,0,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1314,json reporter crash when no error exist,"Hello,
I am using json reporter. But when there is no error, I got a crashed message:
Object.getOwnPropertyNames(err).forEach(function(key) {
^
TypeError: Object.getOwnPropertyNames called on non-object
at Function.getOwnPropertyNames (native)
at errorJSON (C:\Users\IBM_ADMIN\AppData\Roaming\npm\node_modules\mocha\lib
reporters\json.js:87:10)
I checked the code of json.js. when err is undefined, Object.getOwnPropertyNames(err) will raise error.
Should a check statement ""if (!err) return res"" be added before calling getOwnPropertyNames?
function errorJSON(err) {
var res = {};
Object.getOwnPropertyNames(err).forEach(function(key) {
res[key] = err[key];
}, err);",zpdpnn,NONE,2014-08-19 08:43:49+00:00,True,2014-08-26 20:03:14+00:00,7.47,,3,1,2014-08-25 16:35:50+00:00,6.33,ben-bradley,CONTRIBUTOR,0,1,0,0,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1316,Browserify cannot find runnable module when using require('mocha'),"When compiling test scripts into a single monolith using Browserify, I hit the error:
module ""./runnable"" not found from ""../node_modules/mocha/mocha.js"".

Line 846 of mocha.js requires runnable as such:
var Runnable = require('./runnable');
Does this need to be amended as such?
var Runnable = require('./lib/runnable');
If this is true, it seems there are several file paths that need to be renamed. Is there a workaround?",taylor-smith,NONE,2014-08-20 17:19:16+00:00,False,,,,10,27,2014-08-26 05:27:23+00:00,5.51,boneskull,MEMBER,1,0,0,9,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1317,conditional describe,"Is it possible to add describe only if some condition (which depends on dynamic data - callculated inside preceding it) is true, e.g.
var isSecond = false;
describe('1', function() {
    it('1', function() {
        isSecond = true;
    });
});

if (isSecond) describe('2', function() {
    it('2', function() {});
});
describe 2 will not be executed, but i need that. Is it possible in another way?",okv,NONE,2014-08-21 09:07:40+00:00,True,2014-08-23 03:04:02+00:00,1.75,,2,1,2014-08-23 03:04:02+00:00,1.75,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1318,afterFailure hook,"It would be useful to have a hook that could be leveraged to (say) dump out diagnostic information for a failed test. So, something like:
describe(""something"", function () {
    afterFailure(function (testDescription) {
        // testDescription would just be the text from the ""it"".

        // Dump out diagnostics
    });

    it(""does something"", function () {
        // test stuff
    });
});

To give some context: the specific use case I'm thinking of is during a mocha-driven casper test suite - the afterFailure function could dump a screenshot (under a filename derived from the testDescription) from casper so that there is some context to the test failure.",kelveden,NONE,2014-08-21 13:32:22+00:00,True,2017-10-18 03:54:28+00:00,1153.6,,4,4,2014-08-21 13:44:10+00:00,0.01,neuromantic,NONE,1,0,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1319,Error: Cannot find module 'commander' on travis,"I am writing a small app, and I have set it op on github and travis. Unfortunately, even though mocha runs my tests fine on my local mac, on travis, it complains Error: Cannot find module 'commander'. I have made sure that commander is one of my projects dependancies, and also have npm installed in mocha's directory. Help?",christopherdumas,NONE,2014-08-21 20:53:33+00:00,True,2014-08-23 02:58:45+00:00,1.25,,2,1,2014-08-23 02:58:45+00:00,1.25,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1321,this.timeout(0) does not disable 'timeout as test error' ,"The documentation says that test timeouts can be disabled with 'this.timeout(0)' -- however my test fails after timing out in 0ms ...

mocha lib\tests\test_winhelper.js

wim module:
1) ""before all"" hook
0 passing (920ms)
1 failing

wim module: ""before all"" hook:
Error: timeout of 0ms exceeded
at done (c:\win-projects\winlib\node_modules\mocha\lib\runnable.js:204:67)
at callFn (c:\win-projects\winlib\node_modules\mocha\lib\runnable.js:260:7)
at Hook.Runnable.run (c:\win-projects\winlib\node_modules\mocha\lib\runnablele.js:242:7)
at next (c:\win-projects\winlib\node_modules\mocha\lib\runner.js:258:10)
at Object._onImmediate (c:\win-projects\winlib\node_modules\mocha\lib\runner.js:275:5)
at processImmediate as _immediateCallback

npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
node v0.10.28 on win7 x64 with mocha 1.21.4",breathe,NONE,2014-08-23 05:00:30+00:00,True,2014-08-23 07:03:00+00:00,0.09,,5,6,2014-08-23 07:03:00+00:00,0.09,boneskull,MEMBER,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1326,Share a standard Reporter interface?,"We on the QUnit team have been discussing the possibility of working with other JS test frameworks (e.g. Mocha, Jasmine, Intern, etc.) to agree upon a standard Reporter interface so that we could hopefully share Reporter plugins between testing frameworks.
This would most likely come in the form of an EventEmitter interface with an agreed upon minimum viable set of standardly-named events and associated standard set of data/details provided to each.
Would you guys be interested in discussing this further with us?
Cross-reference issues:

qunitjs/qunit#531  (original discussion)
jasmine/jasmine#659
theintern/intern#257

cc: @jzaefferer @Krinkle @leobalter",JamesMGreene,NONE,2014-08-29 13:52:58+00:00,True,2014-09-05 05:39:12+00:00,6.66,v3.0.0,6,12,2014-08-29 14:54:33+00:00,0.04,jbnicolai,CONTRIBUTOR,1,1,0,4,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1327,Test runs twice,"This gist produces the following output, where test 3 runs twice. (It actually does run twice, as can be observed with the process.stdout.writes; it's not just a reporting artifact)
child_process: customFds option is deprecated, use stdio instead.

✓ test 1 
1) test 1
This actually runs twice.
This actually runs twice.
2) test 3
3) test 3

1 passing (8ms)
3 failing

1)  test 1:
   Uncaught Error: Too bad
    at /Users/dom/Dev/JSRad/dupe-test.js:3:15
    at process._tickCallback (node.js:343:11)

2)  test 3:
   Error: done() invoked with non-Error: OUCH
    at Object.<anonymous> (/Users/dom/Dev/JSRad/node_modules/mocha.git/lib/runnable.js:223:25)
    at process._tickCallback (node.js:343:11)

3)  test 3:
   Error: done() invoked with non-Error: OUCH
    at Object.<anonymous> (/Users/dom/Dev/JSRad/node_modules/mocha.git/lib/runnable.js:223:25)
    at process._tickCallback (node.js:343:11)

This looks like it could be related with #660",domq,NONE,2014-08-29 21:30:02+00:00,True,2014-08-29 21:52:21+00:00,0.02,,12,19,2014-08-29 21:52:17+00:00,0.02,travisjeffery,CONTRIBUTOR,0,3,0,10,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1328,mocha bug: can not require outside module.,"I have two test file in test folder:
~/Desktop/test
~> ls
location.js tag.js
location.js:
module.exports.hello = function () {
    console.log(hello)
}
tag.js
var hello = require('./location.js').hello;
debugger
describe('test', function() {
   it('log hello', function() {
        hello();
    }); 
});
When I run $mocha,  it alert:
  1) test log hello:
     TypeError: undefined is not a function
So I try to run mocha with debug $mocha debug:
break in test/tag.js:2
  1 var hello = require('./tag.js').hello;
  2 debugger
  3 describe('test', function() {
  4    it('log hello', function() {
debug> repl
> hello
[Function]
> typeof hello
'function'
> hello()
ReferenceError: hello is not defined
So... What is wrong?
~> mocha -V
1.21.4",TangMonk,NONE,2014-08-30 08:53:28+00:00,True,2014-08-30 18:15:15+00:00,0.39,,2,2,2014-08-30 12:33:12+00:00,0.15,TangMonk,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1329,make syntax highlighting optional,"purpose: let the user use their own highlighting, or simply disable it.",boneskull,MEMBER,2014-08-30 18:08:51+00:00,True,2014-08-30 19:01:19+00:00,0.04,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1330,audit utils.js,"There may be some code in utils.js that would be better handled by 3p modules, or fully eliminated.
Depending where you stand, 3p deps may be good or bad.
An argument ""for"" would be that we don't have to maintain code.  An argument ""against"" is that we have to live with the decisions of whoever maintains the code.
Identify functionality that may be replaced by (better) 3p modules, and raise issues for each.",boneskull,MEMBER,2014-08-30 18:11:44+00:00,True,2017-10-18 04:09:09+00:00,1144.41,,6,26,2014-09-06 23:46:19+00:00,7.23,jbnicolai,CONTRIBUTOR,1,4,0,1,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1331,change mocha's reporter to spec,"I'd like to change it to spec, so if the build fails on Travis, we'll have more info.  Any objections?",boneskull,MEMBER,2014-08-30 18:48:45+00:00,True,2014-08-31 07:42:26+00:00,0.54,,2,2,2014-08-30 18:48:54+00:00,0.0,boneskull,MEMBER,1,1,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1333,documentation for build of documentation,"How Not To Build The Site
I'm gonna update the site!  So excited.  Let's see here.
$ make
/bin/sh: markdown: command not found
What's markdown?
I thought maybe it was markdown.  Nope, different executable.
Maybe it's markdown-cmd?  Has an executable markdown.
So I tried it:
$ npm install markdown-cmd
markdown-cmd@0.1.4 node_modules/markdown-cmd
├── argp@1.0.4
├── marked@0.3.2
└── highlight.js@8.0.0
$ node_modules/.bin/markdown < index.md | cat head.html - foot.html > index.html
markdown: An input file is required
Try 'markdown --help' for more information
Nope.  OK, what else might TJ use?  Right, Ruby.
$ npm remove markdown-cmd
unbuild markdown-cmd@0.1.4

$ gem install markdown
Fetching: props-1.1.1.gem (100%)
ERROR:  While executing gem ... (Gem::FilePermissionError)
    You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
Really?  No.  Maybe Homebrew can save me.
$ brew install ruby
==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/ruby-2.1.2_2.mavericks.bottle.1.tar.gz
==> Pouring ruby-2.1.2_2.mavericks.bottle.1.tar.gz
🍺  /usr/local/Cellar/ruby/2.1.2_2: 942 files, 20M
$ brew install rubygems 
Error: No available formula for rubygems
Apple distributes rubygems with OS X, you can find it in /usr/bin.

But, I don't want to use the built-in rubygems, because I don't want to have to sudo to do this.
I think I could use rvm in some capacity, but I'm not a Ruby guy, and I just want this to work, so:
$ export PATH=/usr/local/opt/ruby/bin:$PATH
$ curl -OL http://production.cf.rubygems.org/rubygems/rubygems-2.4.1.tgz
$ tar zxf rubygems-2.4.1.tgz && \
  cd rubygems-2.4.1 && \
  ruby ./setup.rb && \
  cd - && \
  rm -rf rubygems-2.4.1
$ make clean && make
rm -f index.html

/usr/local/lib/ruby/site_ruby/2.1.0/rubygems/core_ext/kernel_require.rb:54:in `require': 
cannot load such file -- active_record (LoadError)
        from /usr/local/lib/ruby/site_ruby/2.1.0/rubygems/core_ext/kernel_require.rb:54:in `require'
        <snip>
(big sigh)
$ gem install active_record
ERROR:  Could not find a valid gem 'active_record' (>= 0) in any repository
ERROR:  Possible alternatives: activerecord
$ gem install activerecord
Fetching: activerecord-4.1.5.gem (100%)
Successfully installed activerecord-4.1.5
Parsing documentation for activerecord-4.1.5
Installing ri documentation for activerecord-4.1.5
Done installing documentation for activerecord after 7 seconds
1 gem installed
$ make clean && make
rm -f index.html

$ head -n 60 index.html
<!-- === begin markdown block ===

      generated by markdown 1.1.1 on Ruby 2.1.2 (2014-05-08) [x86_64-darwin13.0]
                on 2014-08-30 16:35:37 -0700 with Markdown engine kramdown (1.4.1)
                  using options {}
  -->
<p>Mocha is a feature-rich JavaScript test framework running on <a href=""http://nodejs.org"">node.js</a> and the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases. Hosted on <a href=""https://github.com/visionmedia/mocha"">GitHub</a>.</p>

<h2 id=""features"">Features</h2>

<ul>
  <li>browser support</li>
  <li>simple async support, including promises</li>
  <li>test coverage reporting</li>
  <li>string diff support</li>
  <li>javascript API for running tests</li>
  <li>proper exit status for CI support etc</li>
  <li>auconfdb/1.1.1 on Ruby 2.1.2 (2014-05-08) [x86_64-darwin13.0]
markdown 1.1.1 on Ruby 2.1.2 (2014-05-08) [x86_64-darwin13.0]
searching folder '.'...
  skipping folder '.git'...
  skipping file   '.gitignore'...
  skipping folder '.idea'...
  skipping file   'Gemfile'...
  skipping file   'Gemfile.lock'...
  skipping file   'Makefile'...
  skipping file   'README.html'...
  skipping file   '_mocha.js'...
  skipping file   'coverage.html'...
  skipping folder 'example'...
  skipping file   'favicon.ico'...
  skipping file   'foot.html'...
  skipping file   'head.html'...
  skipping file   'highlight.js'...
  skipping file   'html5shiv.js'...
  skipping folder 'images'...
  skipping file   'index.html'...
  skipping file   'index.js'...
  skipping file   'jquery.js'...
  skipping folder 'lib'...
  skipping folder 'node_modules'...
  skipping file   'normalize.min.css'...
  skipping folder 'rubygems-2.4.1'...
  skipping file   'rubygems-2.4.1.tgz'...
  skipping file   'style.css'...
*** README.md (.) => README.html (.)...
  Removing %-comments (0 lines, 0 begin/end-blocks, 0 end-blocks)...
  Converting Markdown-text (1914 bytes) to HTML using library kramdown (1.4.1)
  using options: {}
*** index.md (.) => index.html (.)...
  Removing %-comments (0 lines, 0 begin/end-blocks, 0 end-blocks)...
  Converting Markdown-text (28788 bytes) to HTML using library kramdown (1.4.1)
  using options: {}
Done. Bye.
    </section>
    <footer>
      <span>© 2011 TJ Holowaychuk. All rights reserved.</span>
    </footer>
  </body>
</html>tests</a></li>
Uh, no.
$ gem uninstall markdown
$ gem uninstall activerecord
$ brew uninstall ruby
Let me just spend some time in Google, please wait.
...
OK, I found peg-markdown which seems to have a markdown executable.
$ brew install peg-markdown
Error: You must `brew link xz' before peg-markdown can be installed
$ brew link xz
Linking /usr/local/Cellar/xz/5.0.5... 
Error: Could not symlink bin/lzcat
Target /usr/local/bin/lzcat
already exists. You may want to remove it:
  rm /usr/local/bin/lzcat

To force the link and overwrite all conflicting files:
  brew link --overwrite xz

To list all files that would be deleted:
  brew link --overwrite --dry-run xz
$ brew link --overwrite xz 
Linking /usr/local/Cellar/xz/5.0.5... 65 symlinks created
$ brew install peg-markdown
==> Downloading https://github.com/jgm/peg-markdown/archive/0.4.14.tar.gz
==> make
🍺  /usr/local/Cellar/peg-markdown/0.4.14: 4 files, 132K, built in 2 seconds
$ make clean && make
rm -f index.html

/bin/sh: markdown: command not found
$ which markdown
$ which peg-markdown
/usr/local/bin/peg-markdown
$ alias markdown=/usr/local/bin/peg-markdown
$ make clean && make 
rm -f index.html

/bin/sh: markdown: command not found
$ ln -s /usr/local/bin/peg-markdown /usr/local/bin/markdown
$ make
$ head -n 60 index.html

<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""utf-8"">
    <title>Mocha - the fun, simple, flexible JavaScript test framework</title>
    <link rel=""stylesheet"" href=""normalize.min.css"">
    <link rel=""stylesheet"" href=""style.css"">
    <link rel=""shortcut icon"" href=""favicon.ico"">
    <script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js""></script>
    <script>window.jQuery || document.write('<script src=""jquery.js""><\/script>')</script>
    <script src=""highlight.js""></script>
    <script>
      setTimeout(function(){
        $('body').addClass('onload');
      }, 0);
    </script>
    <!--[if lt IE 9]>
    <script src=""html5shiv.js""></script>
    <![endif]-->
  </head>
  <body>
    <section id=""content"">
      <h1><a href=""https://github.com/visionmedia/mocha"">Mocha</a></h1>
      <p id=""tag""><em>simple</em>, <em>flexible</em>, <em>fun</em></p>
<p>Mocha is a feature-rich JavaScript test framework running on <a href=""http://nodejs.org"">node.js</a> and the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases. Hosted on <a href=""https://github.com/visionmedia/mocha"">GitHub</a>.</p>

<h2 id=""features"">Features</h2>

<ul>
<li>browser support</li>
<li>simple async support, including promises</li>
<li>test coverage reporting</li>
<li>string diff support</li>
<li>javascript API for running tests</li>
<li>proper exit status for CI support etc</li>
<li>auto-detects and disables coloring for non-ttys</li>
<li>maps uncaught exceptions to the correct test case</li>
<li>async test timeout support</li>
<li>test-specific timeouts</li>
<li>growl notification support</li>
<li>reports test durations</li>
<li>highlights slow tests</li>
<li>file watcher support</li>
<li>global variable leak detection</li>
<li>optionally run tests that match a regexp</li>
<li>auto-exit to prevent &quot;hanging&quot; with an active loop</li>
<li>easily meta-generate suites &amp; test-cases</li>
<li>mocha.opts file support</li>
<li>clickable suite titles to filter test execution</li>
<li>node debugger support</li>
<li>detects multiple calls to <code>done()</code></li>
<li>use any assertion library you want</li>
<li>extensible reporting, bundled with 9+ reporters</li>
<li>extensible test DSLs or &quot;interfaces&quot;</li>
<li>before, after, before each, after each hooks</li>
<li>arbitrary transpiler support (coffee-script etc)</li>
<li>TextMate bundle</li>
<li>and more!</li>
</ul>
Great success!  After much miserable failure.
I'll be adding a short README.md to branch gh-pages.",boneskull,MEMBER,2014-08-31 00:40:37+00:00,True,2014-08-31 01:17:15+00:00,0.03,,3,4,2014-08-31 00:55:44+00:00,0.01,jbnicolai,CONTRIBUTOR,1,2,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1336,Prompt tester for input,"Hi.
Is there a way to ask the tester something during the test?
For example, on the project I am working on, an email validation letter is sent after registration, which is quite hard to test automatically.
So should I only add some 30 sec timeout to have time to check that manually?
Thanks.",beshur,NONE,2014-09-02 11:13:48+00:00,True,2014-09-04 09:59:27+00:00,1.95,,1,1,2014-09-04 09:59:27+00:00,1.95,beshur,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1338,Failing assertion causes async test to timeout,"When an assertion fails in an async test, Mocha freezes and never calls done. If the assertion passes, Mocha calls done per usual. Using Mocha v1.21.4.
var Promise = require('bluebird');
var assert = require('assert');

describe('mocha async timeout', function () {
    it('just works', function (done) {
        Promise.resolve(true).then(function (bool) {
            assert(bool);
            done();
        });
    });

    it('times out', function (done) {
        Promise.resolve(false).then(function (bool) {
            assert(bool);
            done();
        });
    });
});",ravinggenius,NONE,2014-09-05 19:35:58+00:00,True,2014-09-06 21:37:46+00:00,1.08,,3,5,2014-09-05 20:13:18+00:00,0.03,boneskull,MEMBER,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1340,mocha org,"@travisjeffery @jbnicolai @jonathanong @hallas @guille @markelog Any of you own the mochajs org?
TJ has agreed to transfer ownership if we make an org.  This way, he won't have to deal w/ administration of this project.",boneskull,MEMBER,2014-09-07 01:14:07+00:00,True,2014-11-02 10:28:12+00:00,56.38,,3,7,2014-09-07 01:31:21+00:00,0.01,jbnicolai,CONTRIBUTOR,1,2,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1343,Addition of escape-string-regexp breaks browser,"fd6bcc5 adds escape-string-regexp to replace util.escapeRegexp, but a corresponding register didn't make it into https://github.com/visionmedia/mocha/blob/master/mocha.js#L5500.
Causes the browser to bail on the missing requirement.
Uncaught Error: failed to require ""escape-string-regexp""",kevinconway,CONTRIBUTOR,2014-09-07 04:21:32+00:00,True,2014-09-07 10:23:24+00:00,0.25,,2,2,2014-09-07 09:53:47+00:00,0.23,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1345,'glob' dependency causes browser failure.,"The 'glob' dependency added in https://github.com/visionmedia/mocha/blame/master/mocha.js#L5505 did not come with a corresponding parse line in https://github.com/visionmedia/mocha/blob/master/support/compile.js#L44 or an addition to https://github.com/visionmedia/mocha/tree/master/lib/browser. This causes the browser to bail out on the missing dependency.
Uncaught Error: failed to require ""glob""",kevinconway,CONTRIBUTOR,2014-09-07 14:52:04+00:00,True,2014-09-08 21:03:08+00:00,1.26,,2,2,2014-09-07 15:17:48+00:00,0.02,kevinconway,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1347,Mocha breaks under Hapi: something something domains,"I filled an issue for what I thought was my issue (async tests timing out on failure #1338) for what I thought was a general failure case. Turns out the problem is related to how Hapi and Mocha domains interact (see hapijs/hapi#1908). Is there anything I can do to work around this, or am I stuck with not using Mocha for some of my tests? (Hapi's maintainer suggested using Lab.)",ravinggenius,NONE,2014-09-08 15:12:09+00:00,True,2017-03-30 17:50:23+00:00,934.11,,7,9,2014-09-08 21:38:10+00:00,0.27,boneskull,MEMBER,1,1,0,5,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1348,No diff in html report,"I've created a simple test example using latest mocha@1.21.4 and chai@1.9.1
describe(""a suite"", function() {
    it(""a spec"", function() {
        expect(['a', 'b', 'c']).to.deep.equal(['a', 'x', 'c']);
    });
});

When I am running the test in console, it works good and I see a diff in output
But in browser I can't see a diff.
If need, there is a code of runner.html
<html>
<head>
  <meta charset=""utf-8"">
  <title>Mocha Tests</title>
  <link rel=""stylesheet"" href=""node_modules/mocha/mocha.css"" />
</head>
<body>
  <div id=""mocha""></div>
  <script src=""node_modules/chai/chai.js""></script>
  <script src=""node_modules/mocha/mocha.js""></script>
  <script>mocha.setup('bdd')</script>
  <script>
    var expect = chai.expect;
    describe(""a suite"", function() {
      it(""a spec"", function() {
        expect(['a', 'b', 'c']).to.deep.equal(['a', 'x', 'c']);
      });
    });
    mocha.run();
  </script>
</body>
</html>",just-boris,NONE,2014-09-08 20:43:09+00:00,True,2017-10-18 03:50:03+00:00,1135.3,,20,29,2015-01-07 17:30:37+00:00,120.87,NiGhTTraX,NONE,1,5,0,13,"['browser', 'feature', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1351,Update docs to reflect new default reporter,"As mentioned by @rlidwka in #1330:

[...] docs are still saying that default value is ""dot"".

This should obviously be updated.",jbnicolai,CONTRIBUTOR,2014-09-09 20:22:27+00:00,True,2015-07-12 04:12:48+00:00,305.33,,2,1,2015-07-12 04:12:48+00:00,305.33,boneskull,MEMBER,1,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1352,Randomising test order,Would it be possible to execute tests in a random order as in RSpec or are they executed when the file is read?,maxcal,NONE,2014-09-11 09:30:13+00:00,True,2014-09-11 09:32:12+00:00,0.0,,2,2,2014-09-11 09:32:12+00:00,0.0,jbnicolai,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1355,Make markdown generator compatible with GitLab,"GitLab parser can not handle <a name="""">
Make option to generate links to anchors in stringifyTOC compatible with auto generated Header IDs.",hellboy81,NONE,2014-09-12 06:53:22+00:00,True,2015-07-06 22:07:31+00:00,297.63,,3,1,2015-07-06 22:07:31+00:00,297.63,jbnicolai,CONTRIBUTOR,0,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1359,coding style,"I'm unable to really get a handle on it, and what with all the PRs over the years, the codebase seems pretty inconsistent.
We have leading commas in some places, not in others, semi-colons here, no semi-colons there, blocks here and no blocks there.
I'm proposing: let's clean it up!
We could go whatever direction, but in the interest of full disclosure my coding style is different than TJ's.  My style aligns pretty closely with Felix's Style Guide, but I'm more in the ""Crockford"" camp than he is.

Some differences, none of which I am willing to go to war over:

I declare all my vars at the top of each function, as one statement, each separated by newlines + commas.
I tend to use foo_bar for a variable name, and fooBar for a function name
I tend to write ternary statements on one line unless they are hairy.
I use JSDoc docstrings where appropriate, instead of always using slashes
I will use setters.


However...
I would strongly prefer to always use semi-colons,  because it is more friendly to developers who don't know how to not use semi-colons.  (We get a lot of PRs.)
I would strongly prefer using curly braces in conditionals and loops, because I don't trust myself to write a complex ""if/else if/else if/else"" conditional without them.
I strongly prefer not to using leading commas, because it is untoward and impure.
We can set up .jshintrc and go with that; add a jshint target to the Makefile.  Usually I have one for production code, and another for test code (which will have different global vars/functions).  We can specify browser: true and node: true and solve the issue of having Mocha run in dual contexts.
Also an .editorconfig would be helpful.
As far as actually reformatting things, I use PyCharm which is pretty smart about it, and could turn this around pretty quickly.
So my questions are:

Should we enforce a style?
If so, should we use Felix's Style Guide?
Some other guide?
Anything style-related you feel strongly about?",boneskull,MEMBER,2014-09-13 07:31:46+00:00,True,2015-07-05 15:22:34+00:00,295.33,,7,15,2014-09-13 16:04:09+00:00,0.36,jbnicolai,CONTRIBUTOR,1,2,0,4,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1361,Call timeout outside of describe,Im using Mocha with Protractor and has to call this.timeout() into every parent describe block. Is there a way to set it globally from code? I found only --timeout command line option which is not usable in my case.,blacksonic,NONE,2014-09-14 09:21:29+00:00,True,2014-09-14 19:11:15+00:00,0.41,,2,1,2014-09-14 19:11:15+00:00,0.41,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1362,When mocha watch is killed it the tests are still running the old process won't stop,"How to replicate:
echo ""while(1);"" > file.js
mocha -w file.js 

Then press CTRL+C(kill it), but the _mocha process will still be alive after this.
I was wondering why my laptop fan is working unusually and everything seems to be slower and then I realized I was having 5 _mocha processes around, eating all my CPU...
This is just another form of the same issue described in #1163",alFReD-NSH,NONE,2014-09-14 19:16:53+00:00,True,2014-09-15 00:07:51+00:00,0.2,,2,2,2014-09-15 00:07:51+00:00,0.2,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1369,Is that possible to add preprocces script,"I am working on reactjs for a while, using facebook unit test tool http://facebook.github.io/jest
it's async testes sucks, I like mocha very much and using it test the nodejs code.
So i am thinking it's that possible to add a preprocess config to compile the reacjs to normal js then run the unit test. Or is that a good way to test reactjs with mocha now.
http://facebook.github.io/jest/docs/api.html#config-scriptpreprocessor-string",xeodou,NONE,2014-09-22 15:53:19+00:00,True,2014-10-08 18:17:45+00:00,16.1,,2,1,2014-10-08 18:17:45+00:00,16.1,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1370,Allow there to be some way to create setup and teardown methods that are run around every test in the suite,"There are a lot of things that would be made easier if you could run setup and teardown methods around every test method, such as:

Clearing a database
Restoring all mocks/stubs

I've suffered on multiple occasions from improperly restored stubs.
It would be great if you could tell mocha to load some file and run it before the entire test suite, and inside that file before/after hooks could be setup that would run before/after each test.
Something like:

In file test/configuration.js:*

require('mocha');

mocha.configure(function(suite){
  suite.beforeEach(function(){
     // some setup here
  });
  suite.afterEach(function(){
     // some cleanup code here
     SomeDatabase.clearData();
     SomeMockingFramework.restoreAll();
  });
});",oveddan,CONTRIBUTOR,2014-09-23 02:56:32+00:00,True,2014-10-08 18:18:38+00:00,15.64,,2,7,2014-09-23 03:46:51+00:00,0.03,boneskull,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1371,Assertion Error,"I receive an error even if two values are equal. (Node.js, Expressjs, Mongoose).
  it('user should create a post', function(done) {
    User.findOne({ email: 'test@gmail.com' }, function(err, user) {
      if (err) return done(err);
      var message = {
        author: user._id,
        title: 'Post title',
        message: 'Bottle message',
        comments: []
      };
      Post.create(message, function(err, post) {
        if (err) return done(err);
        User.findByIdAndUpdate(user._id, {
          $push: {
            post: post._id
          }
        }, {
          safe: true,
          upsert: true
        }, function(err, user) {
          if (err) return done(err.expected);
          user.posts[0].should.equal(post._id);   // FAIL
          post.author.should.equal(user._id);     // FAIL
          user.posts.should.have.length(1);       // PASS
          done();
        });
      });
    });
 });
This is the error I receive:
Uncaught AssertionError: expected 1 to equal 1
+ expected - actual",Torone,NONE,2014-09-23 13:47:15+00:00,True,2014-10-17 07:25:48+00:00,23.74,,4,6,2014-10-08 18:19:41+00:00,15.19,boneskull,MEMBER,1,2,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1372,npm version of json reporter not current,npm install mocha@1.21.4 installs an old version of the json reporter that bombs because it doesn't have the ... || {}) on line 71,ben-bradley,CONTRIBUTOR,2014-09-23 21:18:12+00:00,True,2014-09-24 08:20:53+00:00,0.46,,2,2,2014-09-24 08:20:53+00:00,0.46,boneskull,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1373,parallel test suites,"i have some tests i want to run in parallel, basically all the permutations of a certain function that are all completely independent from each other. it seems all the ""parallel"" issues and PRs are now closed. anyone interested in doing this now?",jonathanong,CONTRIBUTOR,2014-09-24 21:47:01+00:00,True,2015-01-06 16:40:31+00:00,103.79,,10,16,2014-09-25 21:12:22+00:00,0.98,robpolak,NONE,1,2,0,6,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1374,customFds is deprecated,"in /bin/mocha. it's deprecated in v0.11.14.
child_process: customFds option is deprecated, use stdio instead.",jonathanong,CONTRIBUTOR,2014-09-25 01:34:46+00:00,True,2014-09-25 02:33:12+00:00,0.04,,3,1,2014-09-25 01:47:22+00:00,0.01,rlidwka,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1375,attention NodeJS 0.4.x users and collaborators,"Hi,
I can't build NodeJS 0.4.x on my Mac, so I can't test to ensure we still have compatibility.
Travis' oldest version supported is 0.6.x.  Mocha now builds properly on Travis under 0.6.x.
If anyone is using Mocha under 0.4.x (or can build it and test it!) please pipe up.  Does the latest version of Mocha still work?
I'll give this some time; if I don't hear anything I'd like to move to drop 0.4.x support.",boneskull,MEMBER,2014-09-27 11:07:10+00:00,True,2014-10-29 08:43:43+00:00,31.9,,3,6,2014-09-27 11:22:59+00:00,0.01,boneskull,MEMBER,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1380,Fastest route for Mocha on the browser,"In the docs regarding browser support there's an example simple web page with Mocha integrated inside.
Is this the shortest way to get Mocha in the browser?
Isn't there some command that just opens up a browser or starts a server, with this all ready?
Or, isn't there some way to extract from Mocha HTML for serving?",mightyiam,NONE,2014-10-01 15:07:24+00:00,True,2014-10-08 18:20:30+00:00,7.13,,2,4,2014-10-02 10:41:08+00:00,0.82,mightyiam,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1381,Use special symbols in grep,"Let's say we have three describe() blocks:
describe('booking/summary', function(){...})
describe('coolTest/nonsense', function(){...})
describe('component/booking/summary', function(){...})
And then we want to run only first block booking/summary with ?grep=booking/summary it will launch both 'booking/summary' and 'component/booking/summary'
Proposal is to allow special symbols, at least ^ to mark the beginning of the line. Ideally, both ^ and $ should be allowed to be sure that you'll run specific test without any chance finding suite name somewhere inside another suite.",theghostbel,NONE,2014-10-02 15:21:58+00:00,True,2015-01-05 08:48:01+00:00,94.73,,2,1,2014-10-08 18:21:53+00:00,6.12,boneskull,MEMBER,1,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1382,Would love a release of mocha with a fix to #1300,Just what it says on the tin. #1300 is affecting the tests to generator-kraken in krakenjs/generator-kraken#120,aredridel,NONE,2014-10-03 19:47:36+00:00,True,2014-10-08 18:22:34+00:00,4.94,,2,1,2014-10-08 18:22:34+00:00,4.94,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1383,Mocha silently eating exceptions,"Hello all.
Sometimes mocha just not shows exceptions/errors. Not in testrunner, not in console. Found this during development of async tests. Simplest testcase is below. You will not see any trace of Error(""You'll never see me"");
    describe(""Mocha eating my exceptions, omg, omg"", function () {
        setTimeout(1000, function(){
            throw Error(""You'll never see me"");
        })
        it(""Just be here, bro"", function(){
            throw Error(""But you will see me"");
        });
        //throw Error(""And even me!""); // Uncomment this line if you want
    })
As for me, this is not a correct behaviour.
As I'm pretty new to Mocha I can't send a PR. Simply because I just don't know there to fix it correctly :)",iVariable,NONE,2014-10-04 18:59:11+00:00,True,2014-10-07 03:09:52+00:00,2.34,,2,1,2014-10-07 03:09:52+00:00,2.34,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1384,Setup Method not working,"Even the most simple example on the tutorial page doesn't work (http://visionmedia.github.io/mocha/#browser-support). It claims these two are the same, but I get an error everytime I try the bottom code.
//works
mocha.setup('tdd');

//doesn't work
mocha.setup({
   ui: 'tdd'
});

I believe the issue is here:
ui = mocha.interfaces[ui];
if (!ui) throw new Error('invalid mocha interface ""' + ui + '""');

When I call the setup method with the below method, I get Uncaught Error: invalid mocha interface ""undefined"" because my ui object isn't a string and can't match it up with any of the mocha.intefaces.",gwin003,NONE,2014-10-06 15:24:50+00:00,True,2014-10-08 02:35:02+00:00,1.47,,2,4,2014-10-08 02:35:02+00:00,1.47,boneskull,MEMBER,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1387,Front Page Makes No Mention of non-Node Mocha Use,"Mocha is a great test framework for Node projects, but it's also a great test framework of web projects.  However, the front page of the Mocha site makes no mention whatsoever of the web-based usage, which is somewhat confusing for non-Node users:
Installation

Install with npm:

$ npm install -g mocha

If you just took a few lines to say something to the effect of ""download mocha.js and mocha.css from the GitHub page here, then include both files on an HTML page before including your test files"" I think it would be really helpful to non-Node users.",machineghost,NONE,2014-10-09 18:45:43+00:00,True,2015-07-11 18:29:41+00:00,274.99,,3,3,2014-10-09 18:52:46+00:00,0.0,boneskull,MEMBER,1,0,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1388,Data provider,"Is there any standard way to execute a given test with a data set?
I found leche which seems interesting. Any advices?",julien-f,NONE,2014-10-10 13:23:29+00:00,True,2014-10-17 07:25:28+00:00,6.75,,2,1,2014-10-17 07:25:28+00:00,6.75,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1389,Exiting successfully without running tests in node 0.8,"For some bizarre reason mocha seems to exit successfully without running any of my tests in node 0.8.
I'm seeing this behaviour on the ""cassandra"" branch of the traceview module here: https://github.com/appneta/node-traceview/tree/cassandra. Oddly, master seems to work fine.
It might be helpful to look at the changes for the pull request of that branch here: https://github.com/appneta/node-traceview/pull/19/files.",Qard,NONE,2014-10-10 19:01:36+00:00,True,2015-07-06 22:08:36+00:00,269.13,,3,1,2015-07-06 22:08:36+00:00,269.13,jbnicolai,CONTRIBUTOR,0,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1390,Error in utils.stringify when obj is function,"Interesting how such bug could be escaping for so long. Almost seems like nobody is comparing function in tests :)
Original code from utils:304
exports.stringify = function(obj) {
    if (obj instanceof RegExp) return obj.toString();
    return JSON.stringify(exports.canonicalize(obj), null, 2).replace(/,(\n|$)/g, '$1');
};

I think it should look like this...
exports.stringify = function(obj) {
    if (obj instanceof RegExp || typeof obj !== ""object"") return obj.toString();
    return JSON.stringify(exports.canonicalize(obj), null, 2).replace(/,(\n|$)/g, '$1');
};",FredyC,NONE,2014-10-13 19:01:33+00:00,True,2014-12-11 06:04:32+00:00,58.46,,4,3,2014-11-10 23:10:45+00:00,28.17,dasilvacontin,CONTRIBUTOR,1,1,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1393,Does not abort all threads when interrupted by Ctrl-C,"When one test hangs and I try to abort it with Ctrl-C, then at least some thread(s) are still running.
Sometimes I get a FATAL ERROR: JS Allocation failed - process out of memory error, but only quite some time after the next shell prompt is shown.
I also had some test cases which did not produce this error message and simply kept running at 100% CPU until I killed them explicitly.
Reproduced with:
    it 'loops', ->
      loop 'endless'
Environment:

node v0.10.29
mocha 1.21.4
OS X Yosemite",tali,NONE,2014-10-16 19:24:05+00:00,True,2014-12-01 09:59:38+00:00,45.61,,4,7,2014-10-17 04:03:02+00:00,0.36,boneskull,MEMBER,1,1,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1394,Inexplicable --compiler behaviour,"Given this code:
a = ->
  foo()
  .then -> 'a'
  .then -> 'b'

console.log(a.toString())
$ Mocha --compiler coffee:coffee-script/register
logs:
function () {
    return foo().then(function() {
      return 'a'.then(function() {
        return 'b';
      });
    });
  }
Which is pre CoffeeScript 1.7 behaviour:
http://coffeescript.org/#changelog

Leading . now closes all open calls, allowing for simpler chaining syntax.

You can see that if I compile the JavaScript file directly it compiles as expected:
$ coffee -p ...
(function() {
  var a, deviceOutput;

  deviceOutput = require('../../lib/commands').deviceOutput;

  a = function() {
    return foo().then(function() {
      return 'a';
    }).then(function() {
      return 'b';
    });
  };
What on earth is going on?
-- edit
I had the wrong log output pasted initially, now this issue makes sense .e.g see the diff between outputs",jasonkuhrt,NONE,2014-10-17 14:26:54+00:00,True,2014-11-03 03:48:57+00:00,16.56,,4,9,2014-10-17 14:45:51+00:00,0.01,jasonkuhrt,NONE,0,0,0,3,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1395,throw undefined,"it('expected', function () {
    throw 'foo';
});
it('unexpected', function () {
    throw undefined;
});
then
  1) expected
  ✓ unexpected
in 1.21.5",disjukr,NONE,2014-10-19 14:53:56+00:00,True,2014-11-27 16:59:06+00:00,39.09,,3,4,2014-11-01 13:36:47+00:00,12.95,dasilvacontin,CONTRIBUTOR,1,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1397,visionmedia->tj->mochajs,"Looks like http://visionmedia.github.com/mocha is now http://tj.github.io/mocha
The Project Description at https://github.com/tj/mocha needs to be updated with the new URL.
The https://github.com/visionmedia/mocha links redirect -- it's too bad that http://visionmedia.github.com/mocha is a 404 and not a redirect. :(",cscott,CONTRIBUTOR,2014-10-20 17:22:53+00:00,True,2014-10-20 20:43:10+00:00,0.14,,5,8,2014-10-20 17:24:05+00:00,0.0,cscott,CONTRIBUTOR,1,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1399,mochajs.org,"I've registered mochajs.org and will set the CNAME of the gh-pages site to this, unless anyone objects.",boneskull,MEMBER,2014-10-20 21:11:33+00:00,True,2014-10-21 09:48:43+00:00,0.53,,2,4,2014-10-20 21:59:06+00:00,0.03,travisjeffery,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1402,Change File Pattern.,"By default, Mocha will run on everything under test (test/*.js)
But I have some mock and testCode there that I do not want Mocha to run.
Is there any way to change the default behaviour to something like test/_Test.js or test/_Spec.js?
If I use ./test/*_/_Test.js it runs everything including /test/example.js.
If I use ./_Test.js or *Test.js the threw an error:
E:\workspaces\i8\node_modules\mocha\lib\utils.js:356
if (!files.length) throw new Error(""cannot resolve path (or pattern) '""
^
Error: cannot resolve path (or pattern) '_Test.js'
at Object.lookupFiles (E:\workspaces\i8\node_modules\mocha\lib\utils.js:356:32)
My mocha.opts
--reporter progress
--recursive
*Test.js // Or anything else.",aronrodrigues,NONE,2014-10-23 13:05:41+00:00,True,2014-10-23 13:10:11+00:00,0.0,,1,1,2014-10-23 13:10:11+00:00,0.0,aronrodrigues,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1403,Global hooks file,"It would be really nice if there was a way to define a file to lookup for global hooks.
For example, when I run my tests a connection to the database is opened and all my tests use it and at the end I need to close it but there is not global place where I can close my connection after all my tests have executed.
When we use the CLI it is not necessary to explicitly close the connection because it calls to process.exit() that forces the connection to close but if I'm using mocha from gulp or grunt it won't exit the task because there is this connection hanging. If there was a place to close this connection after all tests run it would work ok.
I would be willing to make a PR for this.",gaastonsr,NONE,2014-10-24 15:27:52+00:00,True,2014-11-11 20:41:19+00:00,18.22,,4,14,2014-10-28 23:38:31+00:00,4.34,ilanbiala,NONE,1,1,0,2,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1405,Segmentation fault  (only in Centos),"No problem on Windows, OS X, Ubuntu...but on Centos, i got a a segmentation fault with my mocha test...
Can't find the problem  :(
Is it possible to put a trace or something else on my test ?",MFraserUQAM,NONE,2014-10-28 14:30:23+00:00,True,2014-10-29 11:50:15+00:00,0.89,,1,1,2014-10-29 11:50:15+00:00,0.89,MFraserUQAM,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1407,intermittent build failures due to timeouts,"1) http server GET /users should respond with ""tobi, loki, jane"":
     Error: timeout of 200ms exceeded
      at Object.<anonymous> (/home/travis/build/mochajs/mocha/lib/runnable.js:158:19)
      at Timer.list.ontimeout (timers.js:101:19)
  2) http server GET /users when given Accept: application/json should respond with ""[""tobi"",""loki"",""jane""]"":
     Error: timeout of 200ms exceeded
      at Object.<anonymous> (/home/travis/build/mochajs/mocha/lib/runnable.js:158:19)
      at Timer.list.ontimeout (timers.js:101:19)
  3) http requests GET / should respond with hello:
     Error: timeout of 200ms exceeded
      at Object.<anonymous> (/home/travis/build/mochajs/mocha/lib/runnable.js:158:19)
      at Timer.list.ontimeout (timers.js:101:19)

seems to happen on 0.8.x",boneskull,MEMBER,2014-10-30 03:32:21+00:00,True,2014-11-02 23:56:38+00:00,3.85,,2,2,2014-10-30 05:47:32+00:00,0.09,boneskull,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1408,Pass arguments to compilers,"My source code is written using the 6to5 compiler on Node Harmony. And to test with mocha, I need to pass the argument --blacklist=generators to the 6to5 compiler, however it doesn't seem like there's any straightforward way to do this through the mocha CLI.
This definitely doesn't work:
mocha --compilers 6to5:6to5/register --blacklist=generators
Any suggestions here?
Thanks.",amsul,CONTRIBUTOR,2014-10-31 04:25:50+00:00,True,2014-11-02 00:15:43+00:00,1.83,,3,3,2014-11-01 09:28:21+00:00,1.21,lydell,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1411,New compiler API?,"I thought it was best to ask here before launching into this work. I have a codebase written in ES6 and I'd like to use mocha to test it. I wish to write the tests in ES6 too. I thought that the best approach to achieving this would be by using a compiler and the --compilers option.
I'm not actually building the ES6 into ES5 as part of a build step, I am on the fly loading and compiling the ES6 code. This allows me to not have to worry about build artifacts needing to be checked in and for the ES6 code to be the only artifact contained in the package.
I investigated how compilers integrated into mocha and it seems to me there is no clearly defined API but instead a reliance on a deprecated require.extensions node module system feature.
The on the fly loading of ES6 modules uses Promises (following the language spec) which makes this sync loading and compiling awkard to support.
I'd therefore like to propose a compiler API that allows async code compilation and loading using Promises while still maintaining backward compatability with the older compiler process.
A strawman of the module properties exported by the proposed new compiler API might be,
extension -> string An extension for the files the compiler compiles.
load(fileName: string) -> Promise A function that takes in a fileName pointing to the registered file. When the returned Promise fulfills the file has been compiled and loaded.
I imagine most of the work would have to be done in
Mocha.prototype.loadFiles = function(fn){
    var self = this;
    var suite = this.suite;
    var pending = this.files.length;
    this.files.forEach(function(file){
    file = path.resolve(file);
    suite.emit('pre-require', global, file, self);
    suite.emit('require', require(file), file, self);
    suite.emit('post-require', global, file, self);
    --pending || (fn && fn());
    });
};
but I'd like some feedback before attempting this.
My main concern is this line here
suite.emit('require', require(file), file, self);
Which seems to result in a CJS module object being emited to other parts of mocha, it's not clear to me how that will interact with what compilers return.",briandipalma,NONE,2014-11-01 19:42:44+00:00,True,2015-03-01 14:41:01+00:00,119.79,,3,5,2014-11-01 23:01:45+00:00,0.14,dasilvacontin,CONTRIBUTOR,1,1,0,1,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1413,Group up descriptions with same names,"Why mocha doesn't grouping them?
File1 about some.foo:
describe('some', function () {
  describe('foo', function () {
    it('should works', function () { });
  });
});

File2 about some.bar:
describe('some', function () {
  describe('foo', function () {
    it('should be after sub', function () { });
  });
});

Expected:
  some
    foo
      ✓ should works
    bar
      ✓ should be after sub

Actual:
  some
    foo
      ✓ should works

  some
    bar
      ✓ should be after sub

Can I force mocha somehow to group them up? Why it forces me to write one big file with all these specs?",zxqfox,NONE,2014-11-02 22:54:45+00:00,True,2014-11-07 00:20:04+00:00,4.06,,6,9,2014-11-07 00:20:03+00:00,4.06,boneskull,MEMBER,1,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1416,Checkmark encoding issue on Appveyor,"Over node-sass, we have a Appveyor CI build configured for testing on Windows: https://ci.appveyor.com/project/sass/node-sass/build/153/job/iv8vm8yh7wx405qv.
In our appveyor.yml, when we run tests with ps: npm test (run tests using windows powershell), it renders the checkmark incorrectly: ΓêÜ. If we remove the ps: and let it run via cmd: (default; not required prefix), it renders it correctly. It seems like some kind of encoding issue. Can this be fixed via mocha code?

Separately, we are struggling with running all (600+) tests (incl. sass-spec) successfully on appveyor (as you can see there in the history tab). The process terminates during npm test. Could it be due to mocha? Locally it reports errors successfully and terminates gracefully both on powershell and cmd. Related: sass/node-sass#506.",am11,NONE,2014-11-03 15:24:22+00:00,True,2014-11-07 00:03:59+00:00,3.36,,2,2,2014-11-07 00:03:59+00:00,3.36,boneskull,MEMBER,1,0,0,1,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1417,"Error in ""done() called multiple times"" assumptions","This code here will hide the true error of certain failed async tests:
https://github.com/mochajs/mocha/blob/master/lib/runnable.js#L216-L230
To reproduce, try this:
it('should work', function (done) {
  setImmediate(done)
  throw new Error('hidden')
})

You will never see the error with the ""hidden"" message. It will just tell you done was called twice, which is terribly misleading, as the user code only called it once.",Qard,NONE,2014-11-05 03:16:25+00:00,True,2016-10-10 00:34:53+00:00,704.89,,6,5,2014-11-06 23:58:17+00:00,1.86,boneskull,MEMBER,1,0,0,4,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1418,URLs to errors.angular.js.org overwhelm test output,"URLs to errors.angular.js.org contain query parameters that overwhelm my console.  The culprit seems to be the ""p1"" param.  Is there a way to turn this off?",lsiden,NONE,2014-11-05 18:06:57+00:00,True,2014-11-06 23:55:57+00:00,1.24,,2,1,2014-11-06 23:55:49+00:00,1.24,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1419,Nyan reporter causing some tests to fail.,"When I run my tests with most reporters everything passes as expected. However when I run my tests with the nyan reporter, some of the tests fail for different reasons. One test is failing due to an uncaught reference error, saying 'done' is not defined. The line in question does not have any use of the word done (nor does any line in the file). Another test is failing saying the expected value does not match the actual value. What is being shown as the expected value in this case is actually not the expected value. It is coming up saying:
+expected -actual
+true
-false
when in reality the expected value is false, not true. This test shows up as failing two more times with the same output with quotes added around the values.
The number of failing tests (or that there are any) does not seem to follow any pattern. Sometimes a single test fails three times, sometimes twice, sometimes once, and other times every test passes.",somethingShiny,NONE,2014-11-06 17:24:11+00:00,True,2014-11-07 01:48:50+00:00,0.35,,2,2,2014-11-06 23:54:40+00:00,0.27,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1420,Pass metadata to reporters,Is it possible to pass some metadata about a certain test to the test reporter? I put arbitrary data in the error message for failed tests but I'd like to pass some data about passed tests too.,robrichard,NONE,2014-11-06 21:53:36+00:00,True,2014-12-15 01:12:06+00:00,38.14,,4,9,2014-11-06 23:54:11+00:00,0.08,boneskull,MEMBER,1,1,0,2,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1421,afterEach hook is called after the timeout expires when using with chai and chai-as-promised,"I've opened up an issue on the Chai As Promised plugin as well since I am uncertain what is happening, but the problem is that the afterEach hook in the test suite gets called after the timeout of 2000 milliseconds, thus my test fails.
""use strict"";


describe(""Promise"", function () {

    var $rootScope,
        $scope,
        $q;

    beforeEach(angular.mock.inject(function (_$rootScope_, _$q_) {
        $rootScope = _$rootScope_;
        $q = _$q_;
        $scope = $rootScope.$new();
    }));

    afterEach(function () {
        $scope.$apply();
    });

    it(""should resolve promise and eventually return"", function () {

        var defer = $q.defer();

        defer.resolve(""incredible, this works like a charm"");

        return defer.promise.should.eventually.deep.equal(""incredible, this works like a charm"");
    });

    it(""should resolve promises as expected"", function () {

        var fst = $q.defer(),
            promise = fst.promise,
            snd = $q.defer();

        promise
            .then(function (value) {
                value.should.eql(""phew, this works"");
            });

        fst.resolve(""phew, this works"");
        snd.resolve(""wow, this works as well"");

        var all = $q.all([
            promise,
            snd.promise
        ]);

        return all.should.be.fullfiled;
    });

    it(""should reject promise because something happens along the way"", function () {

        var promise = $q.reject(""sadly I failed for some stupid reason"");

        promise
            [""catch""](function (reason) {
                reason.should.eql(""sadly I failed for some stupid reason"");
            });

        var all = $q.all([
            promise
        ]);

        return all.should.be.rejected;
    });

});
Above is just a slim version of what I'm actually running, but the idea is the same and actually the above suite will fail the first and the last test because of a Error: timeout of 2000ms exceeded.
It is a bit strange and I could not figure out what is the cause, the only thing that I discovered as described on the other issue opened on the plugin is that there is some time spent somewhere after the return statement return all.should.be.rejected; and the call of afterEach.",rolandjitsu,NONE,2014-11-07 13:24:39+00:00,True,2014-11-08 11:15:44+00:00,0.91,,1,1,2014-11-08 11:15:44+00:00,0.91,rolandjitsu,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1422,http acceptance test not passing travis build,"Timeout should be incremented, seems like 200ms is too low.",dasilvacontin,CONTRIBUTOR,2014-11-07 18:09:29+00:00,True,2014-12-11 07:00:24+00:00,33.54,,2,3,2014-11-15 19:52:41+00:00,8.07,boneskull,MEMBER,1,1,0,0,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1426,beforeEach / afterEach does not happen if only one describe.only,"beforeEach ->
  debug 111
  @sinon = sinon.sandbox.create()

afterEach ->
  debug 222
  @sinon.restore()

describe 'Youtube', ->
  describe.only 'when mobile webkit, orepa', ->
    $player = {}

    before ->
      @sinon.stub(Uppod.Browser, 'userAgent')
        .returns('Mozilla/5.0 (iPad; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5')

    after ->
      $player.remove()

    it 'show youtube control bar, fix #xHflunb9', (async_end) ->",SergXIIIth,NONE,2014-11-10 06:52:18+00:00,True,2014-11-11 05:41:49+00:00,0.95,,2,3,2014-11-10 21:51:05+00:00,0.62,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1429,base reporter lacks more intensive tests,As evidenced by #1241.,dasilvacontin,CONTRIBUTOR,2014-11-11 20:16:23+00:00,True,2017-10-18 03:47:49+00:00,1071.31,,3,2,2014-12-08 11:17:56+00:00,26.63,dasilvacontin,CONTRIBUTOR,0,2,0,0,"['help wanted', 'qa', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1430,"Jasmine to Mocha ""Bridge"" or Polyfill","I've put in a fair amount of time scouring the googs and looking through the issues in the repo here, but haven't managed to find dig up anything yet. I'm looking for a syntax ""bridge"" for easily moving hundreds of tests written in Jasmine to Mocha.
We use a centralized test runner and it's not something we can decouple at the moment. Decoupling this test running from our build processes would be about the same amount of effort as going through hundreds of sets of specs and manually migrating to mocha. It's safe to say we've been invested in Jasmine for some time, but it's time for change.
Does anything like a ""Jasmine polyfill for Mocha syntax"" exist? If not, what is the opinion on the value of such a thing to the community at large?",shellscape,NONE,2014-11-12 18:54:48+00:00,True,2014-11-15 19:52:17+00:00,3.04,,4,4,2014-11-12 18:57:26+00:00,0.0,joshbedo,NONE,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1431,async describe,"it, beforeEach, and afterEach allow you to return a promise if you need to do an asynchronous operation.
I've found myself needing similar behaviour for describe:
describe('test', () => {
    return doSomethingAsync().then(() => {
        it('should', () => {
            // test
        });
    });
});
I can only define my tests once I have done something asynchronous. In my case, the async operation I need to do is to inject with my dependency injection framework (https://github.com/angular/di.js). Perhaps there are other use cases?",OliverJAsh,NONE,2014-11-13 16:25:02+00:00,True,2014-11-16 21:47:57+00:00,3.22,,4,4,2014-11-15 20:00:08+00:00,2.15,boneskull,MEMBER,1,1,0,2,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1432,[Question] Persisiting global objects between tests + preinitialized custom reporter,"Hi
I'm trying to use mocha to run some unit tests against hardware devices (to see if the output behaves properly for given input) and so far it was going quite well. I've bumped into some problems which maybe someone here will know the anwser to:


I've made a super simple node.js script based on the /usr/local/bin/mocha script which performs the tests provided. I would like to pass a already initialized serial port reference. Since I'm using a configuration which takes ~3 seconds to set up, running this 100 times gives 300 seconds wasted just on setup and that's quite a lot... and since I'm writing this post it's not that simple to change the ~3sec delay :) What I'm aming for is setting up mocha more as a deamon, which initializes all peripherals and runs tests when triggered by some event. And I'm wondering if that's possible since it's quite off from a regular use case


I would like to extend the reporter to provide it with reference to a socket.io so the test results could be also shown in the browser and not only in the console. For now I've found that the reporters can be customized but i don't see how i could pass a already initialized instance to mocha instead of passing the script's path like this:


mocha.reporter(__dirname + '/custom-reporter');

What I'd need to do is more like:
mocha.reporter( new CustomReporter( parameters, used, by, custom, logger ) );",1am,NONE,2014-11-14 15:57:23+00:00,True,2014-11-14 17:56:39+00:00,0.08,,1,1,2014-11-14 17:56:39+00:00,0.08,1am,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1433,Extremely slow diff report with buffers,"mocha version 1.21.5
Comparing Buffers take too long. assert fails instantly, where mocha uses so many resources that my computer crashes.
This has become a problem since mongoose ObjectId's use Buffers, and if two Id's are not the same instead of test failing, our test suite freezes.
https://gist.github.com/t1bb4r/407d88178686b7471911",t1bb4r,NONE,2014-11-15 03:48:43+00:00,True,2014-11-17 04:57:06+00:00,2.05,,3,3,2014-11-15 09:14:27+00:00,0.23,dasilvacontin,CONTRIBUTOR,1,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1434,Every test file should have its own context,"I would like to run tests in isolation (specifically unaffected by listeners on events).
Tests pass when run individually, when all tests are tun together listeners cause problems making it difficult to write certain unit tests.
https://gist.github.com/t1bb4r/4fde343447bdd91b9f74
In this example my User unit tests do not care about the School or any other models listening on the User:created event.",t1bb4r,NONE,2014-11-15 05:18:45+00:00,True,2014-11-15 19:51:14+00:00,0.61,,3,5,2014-11-15 05:26:32+00:00,0.01,t1bb4r,NONE,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1435,Add setImmediate() and clearImmediate() to the list of non-enumerable globals,"With the latest version of Sinon.JS (1.12.1) I see the following error when clock = sinon.useFakeTimers() is used within Mocha:
Error: global leaks detected: setImmediate, clearImmediate

even though I'm invoking clock.restore() within my afterEach() method. I raised this very same bug with Sinon.JS, but they said it was a Mocha issue, since:

They are restored, but the process of faking/restoring them copies them from window's prototype to window. This has been a known issue in the past: #143
Either apply the solution in #143 (comment) or ask the mocha team to add setImmediate and clearImmediate to the list of properties it should not detect as leaked globals.

They specifically pointed to this section of code within Mocha. Since this stuff should just work out of the box, I thought it was best to raise it here.",dchambers,NONE,2014-11-17 21:08:53+00:00,True,2014-11-18 05:39:01+00:00,0.35,,2,2,2014-11-18 05:41:02+00:00,0.36,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1436,Add CNAME record for www.mochajs.org?,"Recently noticed the shift to the domain mochajs.org from visionmedia.github.io, but the www subdomain still redirects to a parking page. May I recommend adding a CNAME record for *.mochajs.org to mochajs.org... or at least from www.mochajs.org to mochajs.org...?",al-the-x,NONE,2014-11-18 13:32:58+00:00,True,2014-11-21 19:06:23+00:00,3.23,,2,2,2014-11-19 17:33:54+00:00,1.17,boneskull,MEMBER,1,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1437,Argument fixtures,"The Python test framework py.test has a very nice fixture concept. A test can request a certain fixture by specifying it as an argument name. For example:
def test_write_config_to_custom_location(tmpdir):
    . . .

This function will receive the path of a temporary directory, that will automatically be destroyed when the test is over
I have a proposal to implement this in Mocha. I know my proposal has backwards incompatibility problems, but I hope we can find a way around them. I also know that anything  this enables is already possible using hooks, but I think this would make code that would otherwise go in hooks more reusable.
Let's say I want to use sinon.js's fake timer, which they call 'clock', I'd do that as follows:
describe(""something"", function(){
    it(""should use setTimeout a certain way."", function(clock){
        // Because there's an argument named 'clock', mocha pases in a clock from sinon;
        clock.tick(500);
    });
});

After this function has completed, the fixture automatically calls clock.restore() to restore setTimeout and friends to their original values.
The definition of such a fixture would look something like this:
defineFixture(""clock"", {
    setUp: function(){
        // Sets up the fixture, and returns the value that will be passed to our test
        this.clock = sinon.useFakeTimers();
        return this.clock();
    }
    tearDown: function(){
        this.clock.restore();
    }
});

These fixtures would work both for describe and it
Backwards incompatible?
Mocha allows test to take a callback as a parameter, and doesn't care about the parameter name. So if a test wanted a fixture, but no callback, there would be no way for Mocha to know that.
A possible sollution would be to add a withFixtures method to the return value of it and describe,
with done', orcallback` being an available fixture, so it could look as follows:
describe(""something"", function(){
    it(""should do stuff"").withFixtures(function(clock, done){
        // ... test code
    });
})

I'd be willing to write a pull request for this if peope think it's a good idea.",bigblind,NONE,2014-11-18 20:45:21+00:00,True,2014-11-18 22:06:03+00:00,0.06,,2,1,2014-11-18 22:06:03+00:00,0.06,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1441,Sharing context between tests,"I was working on some tests and noticed a strange behavior where a test was modifying the context of another test. When I looked at the code, I saw that this is intentional; there are even tests that check for this ""feature"".
From the context.js in test/acceptance:
    it('should not have value set within a sibling describe', function(){
      'This should be hidden'.should.not.eql(this.hiddenFromSibling);
      this.visibleFromTestSibling = 'Visible from test sibling';
    })

    it('should allow test siblings to modify shared context', function(){
      'Visible from test sibling'.should.eql(this.visibleFromTestSibling);
    })
I think I understand why this is implemented that way. With this, a test can share values it created with other tests without the sibling needing to re-create it or even needing code for that.
However, I believe that this is a really bad idea. This feature fosters bad testing practices since tests should be independent and should not have dependencies to other tests. If it is about code duplication, then just create a new describe context with a beforeEach, and that should be it. If the creation of the value that is shared is really soo costly that it needs to be shared, then it shouldn't be in a unit-test to begin with. And if someone REALLY wants to share values between tests, then a variable in the parent scope could be used:
describe('Whatever', function () {
    var sharedValue;

    it('should do something', function () {
        ...
        sharedValue = 'This value is shared';
    });
    it('should do something else', function () {
        fnCall(sharedValue);
        ...
    });
});
What I propose is to have a new context for each test that uses the parentContext for the prototype, just as describes use of the parent context. This will make the tests really independent.
In suite.js in lib:
  ...
  test.slow(this.slow());

  var context = function() {};
  context.prototype = this.ctx;
  test.ctx = new context();

  this.tests.push(test);
  ...
That's exactly how describe does it.
Currently, this is:
  ...
  test.slow(this.slow());
  test.ctx = this.ctx;
  this.tests.push(test);
  ...
Is there something I misunderstood? May be there is a legitimate reason for this, but I don't get it right now.
Any thoughts?",marcelerz,NONE,2014-11-21 22:42:47+00:00,True,2014-11-21 23:39:41+00:00,0.04,,2,3,2014-11-21 22:52:33+00:00,0.01,marcelerz,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1442,Coffeescript compile issue kills watcher,"Test watching is useful to leave running in a term whilst developing new code. However, if I'm writing CoffeeScript and I make a syntax error (that never happens 😼 ) , it kills mocha -w --compilers:coffee:coffeescript test/something.coffee .
I would like mocha to recover from coffee compile errors if in watch mode.",MaerF0x0,NONE,2014-11-22 05:36:33+00:00,True,2014-11-22 05:39:05+00:00,0.0,,1,1,2014-11-22 05:39:05+00:00,0.0,MaerF0x0,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1444,Want overridable default glob pattern in mocha.opts,"I'd like a mechanism for setting an overridable default test file glob pattern so that I can configure mocha.opts to run all test files but also mocha foo_test.js could be used to run a single test file.
The mocha.opts file allows for setting any valid command line arguments so it's nice and simple. For options that can be set more than once these act like default settings since they can be given again on the command line. Unfortunately not everything works this way. In my case the fact that there's no overridable glob pattern is a bit of an issue.
Here are a few ways that we might solve this that I'll toss out for discussion:

also look for a require-able config file by default (e.g., test/mocha.opts.js)

it would export an Array of args but unlike the regular mocha.opts this one could conditionally change the returned options based on the current state of process.env, process.argv, etc.


support a --default-pattern option to set a glob pattern to be used only if no other pattern was given.

Once we've settled on a preferred method I'll be more than happy to submit a PR to make it happen.
I think option 1 is more flexible but option 2 is more straight-foward. Thoughts?",KylePDavis,NONE,2014-11-23 03:28:18+00:00,True,2014-11-23 11:07:56+00:00,0.32,,4,5,2014-11-23 04:04:54+00:00,0.03,boneskull,MEMBER,1,0,0,3,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1446,-t 0 causes immediate failure,"From the docs:

Test-specific timeouts may also be applied, or the use of this.timeout(0) to disable timeouts all together:

Passing -t 0 to the mocha binary results in this error:

Error: timeout of 0ms exceeded",bblack,NONE,2014-11-24 20:59:16+00:00,True,2014-12-11 06:39:23+00:00,16.4,,2,1,2014-11-25 01:54:00+00:00,0.2,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1449,use `travis_retry` for avoiding non-relevant timeout failures,,dasilvacontin,CONTRIBUTOR,2014-11-25 15:00:24+00:00,True,2014-12-11 06:59:17+00:00,15.67,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1451,bump to 2.0.1 not documented in History.md,,dasilvacontin,CONTRIBUTOR,2014-11-26 17:49:11+00:00,True,2014-11-26 18:33:59+00:00,0.03,,1,1,2014-11-26 18:33:59+00:00,0.03,dasilvacontin,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1454,Data-generated test cases (parameterized tests),"At the moment, generating multiple test cases that differ only by input data is rather cumbersome:
describe('prime number checker', function() {
  [2,3,5,7].forEach(function(value) {
    it('returns true for prime number ' + value, function() {
      expect(isPrime(value)).to.be.true();
    });

  [4,6,8,9].forEach(function(value) {
    it('returns false for composite number ' + value, function() {
      expect(isPrime(value)).to.be.false();
    });
});
I am proposing to extend the current API with syntactic sugar for data-generated test cases by adding an optional second parameter to both it and describe, this parameter will be an array of data points to test.
describe('prime number checker', function() {
  it('returns true for prime numbers', [2,3,5,7], function(data) {
    expect(isPrime(data)).to.be.true();
  });

  it('returns false for composite number', [4,6,8,9], function(data) {
    expect(isPrime(data)).to.be.false();
  });
});
More advanced example:
var SAMPLES = [
  { scheme: 'http', host: 'localhost', path: '/', url: 'http://localhost/' },
  { scheme: 'https', host: '127.0.0.1', path: '/test', url: 'https://127.0.0.1/test' }
];

describe('url helper', SAMPLES, function(data) {
  it('builds url from components', function() {
    var str = urlHelper.build({ scheme: data.scheme, host: data.host, path: data.path });
    expect(str).to.equal(data.url);
  });

  it('parses url into components', function() {
    var components = urlHelper.parse(data.url);
    expect(components).to.eql({ scheme: data.scheme, host: data.host, path: data.path });
  });
});
I am happy to contribute the implementation.
The purpose of this issue is to discuss necessary details and to get maintainers' approval before I start writing code.
Related to #57.
/cc @mcollina",bajtos,NONE,2014-11-28 12:37:53+00:00,True,2014-11-28 13:19:48+00:00,0.03,,13,28,2014-11-28 13:19:48+00:00,0.03,travisjeffery,CONTRIBUTOR,1,3,0,9,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1455,Add a Folder of tests through the API?,"Hi,
I was looking through mocha.js, and it seems that there is no way to simply tell mocha to test everything in the tests/ directory via javascript, is that correct?
I will work on it and put in a pull request, I just want to make sure I'm not missing anything.
Thanks!
Ari",ariporad,NONE,2014-11-30 15:50:10+00:00,True,2014-12-11 06:42:10+00:00,10.62,,2,1,2014-12-11 06:42:10+00:00,10.62,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1456,after hook is not called when before hook times out,"Simple test case:
var assert = require('assert')

describe('mocha after not being called', function() {
    before(function(done) {
        console.log(""before callback"")
       // never call done
    })

    it('should add two numbers together', function() {
        assert.equal(2, 1+1)
    })

    after(function() {
        console.log(""after callback"")
    })
})

Expected output: 'before callback\nafter callback'
Actual output: 'before callback'
Shouldn't after hook be always called? In my case, before hook is leaving files behind which I'm trying to clean up in the after hook, but if the before hook times out, after callback is not called at all.",mnylen,NONE,2014-11-30 16:54:25+00:00,True,2015-02-02 23:24:43+00:00,64.27,,2,1,2015-02-02 23:24:43+00:00,64.27,dasilvacontin,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1457,Plugin API,"We need plugin API(s).
More to follow.",boneskull,MEMBER,2014-11-30 19:35:05+00:00,False,,,,11,31,2014-11-30 21:00:41+00:00,0.06,boneskull,MEMBER,1,3,0,6,"['feature', 'future']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1458,What are the requirements for a script passed to the compilers option?,"I would like to pass a JSX preprocessor to Mocha: mocha --compilers js:./preprocessor.js. I haven't been able to find any documentation about writing Mocha compilers, so I just tried the most intuitive thing I could think of, in ./preprocessor.js:
var ReactTools = require('react-tools');

module.exports =  function(src) {
    return ReactTools.transform(src);
}

I was hoping to get an error message that might lead me a step forward, but it looks like the compilers option was simply ignored.
Next attempt: Imitate the Coffeescript compiler, because it looks like that is working nicely for other people. Since the command for compiling Coffeescript is mocha --compilers coffee:coffee-script/register, I took a look at this crazy require patcher thing. It looks like a Mocha expects the compiler to patch require, but then the actual compilation step is obscured in the example by some process fork operation and by my lack of experience with Coffeescript in general. I am not understanding yet.
Third attempt: There is a 6to5 compiler with a register module written in a more familliar syntax, and it does not fork out to something else. It looks like the idea is to set require.extensions['jsx'] = preprocess where preprocess works like function(m, filename) -> compiledJS. I am so close! But for the life of me, I can't figure out what the m parameter is, and I feel like it is long past time to ask for help.
TL;DR How do I create a Mocha compiler from a function compile(src) -> output?",d4goxn,NONE,2014-12-01 08:23:41+00:00,True,2014-12-01 10:05:09+00:00,0.07,,3,3,2014-12-01 10:05:09+00:00,0.07,d4goxn,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1460,Feature proposal: global setup and teardown,"When testing a server code base and wishing to generate code coverage via an external tool such as istanbul it does not make sense to start and stop the server for every test suite using before and after - especially if there are a lot of test suites and the server performs various operations when starting.
I propose adding the ability to configure a setup function to be invoked asynchronously before any tests are executed and a teardown function after all test suites have been executed.
Whilst I have read CONTRIBUTING.md and imagine this feature is unlikely to be accepted as it may not be a common use case, I have implemented, tested and integrated this functionality with a real project, full details are in the (squashed) commit:
https://github.com/socialally/mocha/commit/fd744e480fa4acbc0846cdaa41f866034bdd38ab
If the consensus is that this feature would be useful to other people and a PR would be accepted then I will issue a PR with the linked commit.",tmpfs,NONE,2014-12-03 03:52:49+00:00,True,2015-09-11 05:25:40+00:00,282.06,,7,15,2014-12-03 05:13:11+00:00,0.06,boneskull,MEMBER,1,3,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1461,Nyan Reporter ignores useColors,"Just what the title says. Nyan reporter is (understandably) doing a lot with colors. Unfortunately it ignores the useColors configuration altogether and outputs directly to process.stdout. From looking at the code, I understand it may be complex to honor that setting. The rest of the output from mocha honors that setting, it's just the reporter that doesn't.
Running a stripcolors function on the output before process.stdout.write in the write method might be an acceptable solution for a configuration that's probably not used very often.",shellscape,NONE,2014-12-05 16:50:54+00:00,True,2014-12-15 19:02:09+00:00,10.09,,3,6,2014-12-06 13:52:29+00:00,0.88,dasilvacontin,CONTRIBUTOR,0,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1462,_name variable conflict with commander.js,"Please see this issue _name variable conflict with mocha on the commander.js Issues list, for a conflict caused by the overwrite of the _name value",DinisCruz,NONE,2014-12-06 02:54:34+00:00,True,2017-09-29 19:01:57+00:00,1028.67,,4,7,2014-12-11 07:02:34+00:00,5.17,boneskull,MEMBER,1,2,0,1,"['confirmed-bug', 'future']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1463,tests fail in latest version of mozilla firefox (ver 34.0.5) only,"We have been running unit tests for our ember application using testem(2.0.1) and everything was running fine until we upgraded our firefox version to 34.0.5. We get this error on random tests ::
process.on/global.onerror@http://localhost:7359/7167/tests/lib/scripts/mocha.js:5964:20
which points to this function
/**
 * Implements uncaughtException listener.
 */

process.on = function(e, fn){
    if ('uncaughtException' == e) {
        global.onerror = function(err, url, line){
            fn(new Error(err + ' (' + url + ':' + line + ')'));
            return true;
        };
        uncaughtExceptionHandlers.push(fn);
    }
};

At this point I am not sure if there is fault in our project code but its just weird that things would run in chrome/FF ver 33 but not in ver 34. Also to note that when I manually ran the tests in the latest FF, all the tests ran successfully without any issues!
I am really sorry if this is not a mocha issue but rather something to do with testem. I was not sure so I just raised a bug here too.(testem/testem#442)",dshrestha,NONE,2014-12-10 19:23:15+00:00,True,2015-02-03 14:33:55+00:00,54.8,,3,3,2014-12-11 06:33:55+00:00,0.47,boneskull,MEMBER,1,1,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1465,Exception within async before hook prevent other test suite to be run,"Hi all,
This issue is simular to #581 but in the async world. I'm using mocha@2.0.1.
Here a simple test to reproduce my issue:
describe('first', function(){
  before(function(done){
    process.nextTick(function(){
      throw new Error('failed')
    });
  })

  it('should do something', function(done){
    done()
  })
})

describe('second', function(){
  it('should something', function(done){
    done()
  })
})
As you can see, I have a first test suite with a before hook throwing an exception. I'm expecting this first test suite to failed.
Then, I have an other test suite, outside the first one. This one should passed.
Now, here what happen:
first
    1) ""before all"" hook

  0 passing (3ms)
  1 failing

  1) first ""before all"" hook:
     Uncaught Error: failed
      at /home/tetienne/test.js:4:13
      at process._tickCallback (node.js:419:13)

The second test suite is not run at all.
In the sync world, it works as expected:
describe('first', function(){
  before(function(){
      throw new Error('failed');
  })

  it('should do something', function(){

  })
})

describe('second', function(){
  it('should something', function(){
  })
})
  first
    1) ""before all"" hook

  second
    ✓ should something 


  1 passing (4ms)
  1 failing

  1) first ""before all"" hook:
     Error: failed
      at Context.<anonymous> (/home/tetienne/test2.js:3:13)
      at callFn (/home/tetienne/.node_modules/lib/node_modules/mocha/lib/runnable.js:250:21)
      at Hook.Runnable.run (/home/tetienne/.node_modules/lib/node_modules/mocha/lib/runnable.js:243:7)
      at next (/home/tetienne/.node_modules/lib/node_modules/mocha/lib/runner.js:258:10)
      at Object._onImmediate (/home/tetienne/.node_modules/lib/node_modules/mocha/lib/runner.js:275:5)
      at processImmediate [as _immediateCallback] (timers.js:345:15)

So to sum up, as soon as an async before hook catch an error, all the next tests, even unrelated, failed.
Have you any idea on what is wrong here?",thibaut-sticky,NONE,2014-12-12 10:22:47+00:00,True,2014-12-12 11:56:34+00:00,0.07,,2,2,2014-12-12 11:56:34+00:00,0.07,hallas,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1466,xunit reporter should fill classname with relative path to test file,"Hi,
currently, the xunit reporter generate test case with test full title in classname attribute.
Example:
<testcase classname=""Foo #hello"" name=""should return hello $name"" time=""0""/>
It would be great, especially for Sonar compatibility, to have a path to test file instead.
<testcase classname=""toto/foo-spec"" name=""Foo #hello should return hello $name"" time=""0""/>
The mocha-sonar-reporter is a clone of the xunit reporter already solving this issue.
Best regards",Chcap,NONE,2014-12-12 12:13:56+00:00,False,,,,3,1,2017-02-17 06:40:34+00:00,797.77,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['chore', 'help wanted', 'reporter', 'semver-major']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
1468,"False positives when mocha allowes async execution between ""before"" and test","Below are 3 examples of tests that all pass but as far as I can see, they should not. The tests all go through a before or beforeEach function that performs changes necessary for the tests to pass, but they all do it on the next tick and without telling mocha to wait.
It appears that mocha allows at least one tick between the before functions and the tests. Is this correct? I would have expected it to run synchronously.
var chai = require('chai');
var Promise = require('bluebird');
chai.should()

describe('test', function() {
  var changedInBefore = 0;
  var changedInBeforeEach = 0;
  var nextTick = 0;

  before(function() {
    //Not returning promise, expecting the tests to run before setting changedInBefore to 1
    Promise.resolve().then(function() {
      changedInBefore = 1
    });
  });

  beforeEach(function() {
    //Not returning promise, expecting the tests to run before setting changedInBeforeEach to 1
    Promise.resolve().then(function() {
      changedInBeforeEach = 1
    });
  });

  beforeEach(function(done) {
    process.nextTick(function() {
      nextTick = 1;
    });
    done(); //Calling done before nextTick is set to 1, expecting tests to run before this happens
  });

  it('before with promise', function() {
    changedInBefore.should.equal(1);
  });

  it('beforeEach with promise', function() {
    changedInBeforeEach.should.equal(1);
  });

  it('beforeEach with next tick', function() {
    nextTick.should.equal(1);
  });

}",TheLudd,NONE,2014-12-13 12:07:39+00:00,True,2015-07-06 22:12:20+00:00,205.42,,4,5,2014-12-16 07:57:07+00:00,2.83,TheLudd,NONE,0,1,0,2,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1471,Empty mocha.opts file throws glob exception,".../node_modules/mocha/node_modules/glob/glob.js:120
    throw new Error(""must provide pattern"")
          ^
Error: must provide pattern
    at new Glob (/Users/deric/Dropbox/Projects/mm-api/services/notifications/node_modules/mocha/node_modules/glob/glob.js:120:11)
    at glob (/Users/deric/Dropbox/Projects/mm-api/services/notifications/node_modules/mocha/node_modules/glob/glob.js:57:11)
    at Function.globSync [as sync] (/Users/deric/Dropbox/Projects/mm-api/services/notifications/node_modules/mocha/node_modules/glob/glob.js:76:10)
    at Object.lookupFiles (/Users/deric/Dropbox/Projects/mm-api/services/notifications/node_modules/mocha/lib/utils.js:355:20)
    at runAgain (/Users/deric/Dropbox/Projects/mm-api/services/notifications/node_modules/mocha/bin/_mocha:302:30)
    at Array.forEach (native)
    at Object.<anonymous> (/Users/deric/Dropbox/Projects/mm-api/services/notifications/node_modules/mocha/bin/_mocha:301:6)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:906:3",monowerker,CONTRIBUTOR,2014-12-15 14:20:13+00:00,True,2014-12-16 18:43:16+00:00,1.18,,2,1,2014-12-15 15:39:20+00:00,0.05,boneskull,MEMBER,1,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1479,Mocha --require option only available through cli?,"Is it possible to access the require option through the programmatic api?
ie:
var Mocha = require('mocha');

new Mocha({
    require: ['should']
}).run(...)",DylanPiercey,NONE,2014-12-22 20:31:57+00:00,True,2017-04-03 15:37:19+00:00,832.8,,7,16,2014-12-23 00:12:36+00:00,0.15,boneskull,MEMBER,1,1,0,5,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1480,"""Warn"" ability, instead of fail","We at @FiftyThree ❤️ Mocha. We use it to test Mix and more.
As our test codebase has grown, there are a few test suites we'd like to run like usual, but not fail overall if they fail. We just want to be warned, sort of like pending tests.
I emailed the group about this a year ago, so starting a formal issue for this now:
https://groups.google.com/d/topic/mochajs/zpCTMFD5EQ8/discussion
Strawman proposal: describe.warn('foo') / it.warn('should bar'). Or, if you like cuteness, it.ideally('should bar'). =)
WDYT? Thanks for the consideration!",aseemk,NONE,2014-12-22 23:18:25+00:00,True,2015-07-05 15:21:48+00:00,194.67,,11,21,2014-12-22 23:19:49+00:00,0.0,rlidwka,NONE,1,4,0,6,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1481,describe.only matches more that one describe test suite,"If I have these two test suites (just showing the first one)
describe 'Boolean',->

  it 'is_True',->
    expect(true.is_True    ).to.be.an('Function')
    expect(false.is_True   ).to.be.an('Function')
    expect(true.is_True()  ).to.be.true
    expect(false.is_True() ).to.be.false
    expect((1==1).is_True()).to.be.true
    expect((1==2).is_True()).to.be.false
    expect((1!=1).is_True()).to.be.false
and
describe 'Assert | Boolean',->
  it 'assert_Is_True', ->
    true.assert_Is_True.assert_Is_Function()
    true.assert_Is_True().assert_Is_True()
    (-> false.assert_Is_True()).assert_Throws()
If I add .only to the first one :
describe.only 'Boolean',->
both will now be executed:


and I would expect only the first one to execute
I assuming that mocha behind the scenes is not keeping a pointer to the actual tests to execute, it is just keeping the name/string, which is then searched on all tests/describes loaded (is that correct?)",DinisCruz,NONE,2014-12-23 11:31:50+00:00,True,2016-07-03 06:18:10+00:00,557.78,v3.0.0,13,38,2014-12-23 11:47:18+00:00,0.01,dasilvacontin,CONTRIBUTOR,1,3,0,9,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1482,Add timeout from env,"Pls, add for run big tests with use mongo.aggregate
this._timeout = process.env.MOCHA_TIMEOUT || 2000;
2000 ms is small for real data tests
Thx, Vitaly",Laboratory,NONE,2014-12-25 15:11:23+00:00,True,2014-12-25 22:07:27+00:00,0.29,,4,9,2014-12-25 18:39:27+00:00,0.14,dasilvacontin,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1483,Can't dynamically create tests,"If I try to create tests in BDD style with it() dynamically at ""runtime"", Mocha ignores them. See below for an example (live viewable example at http://sil.jsbin.com/vuteko/edit?html,output).
Note that if I populate TEST_NAMES statically (hardcode the entries into it in the global scope) then it works fine, but attempting to add them in before() does not work, even though before runs before the tests themselves (that's why it's called ""before"", after all). It does not seem to run before the thing which gathers which tests there are, though. Is there any way around this?
<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""utf-8"">
    <title>Mocha: dynamic tests don't work (hotlinking from mocha site)</title>
    <link rel=""stylesheet"" href=""http://mochajs.org/example/mocha.css"">
  </head>
  <body>
    <div id=""mocha""></div>
    <script src=""http://mochajs.org/example/mocha.js""></script>
    <script src=""http://mochajs.org/example/chai.js""></script>
    <script>mocha.setup('bdd')</script>
    <script>expect = chai.expect</script>
    <script>
    var TEST_NAMES = [];
    describe('Mocha tests', function(){

      before(function(done) {
        TEST_NAMES = [""test1"", ""test2""];
        done();
      });

      describe('Static hardcoded tests', function(){
        it('should correctly add numbers', function(){
          expect(1+1).to.equal(2);
          expect(1+1).to.not.equal(3);
        });
      });

      // So why don't these dynamic tests run? We populate TEST_NAMES 
      // in before(), which clearly should run before the tests.
      describe('Dynamically created tests (which do not work)', function() {
        TEST_NAMES.forEach(function(testname) {
          it(testname, function(done) {
            expect(testname).to.not.equal(""not this"");
            expect(1+1).to.equal(2);
            done();
          });
        });
      });
    })
    </script>
    <script>
      mocha.run();
    </script>
    <p>Observe that there is no section called ""Dynamically created tests"" above, although there should be.</p>
  </body>
</html>",stuartlangridge,NONE,2014-12-31 06:31:40+00:00,True,2015-01-06 16:40:37+00:00,6.42,,6,7,2014-12-31 20:57:39+00:00,0.6,travisjeffery,CONTRIBUTOR,0,2,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1487,"""sh: 1: mocha: Permission denied"" - Running mocha test via ""npm test"" fails ","I am attempting to use Mocha for testing in a project. I've followed the steps in this tutorial: https://www.joyent.com/blog/risingstack-writing-testable-apis-the-basics
My package.json looks like this:
{
  ""name"": ""cyoab"",
  ""version"": ""0.0.1"",
  ""private"": true,
  ""scripts"": {
    ""test"": ""mocha test""
  },
  ""dependencies"": {
    ""express"": ""~4.2.0"",
    ""static-favicon"": ""~1.0.0"",
    ""morgan"": ""~1.0.0"",
    ""mongoose"": ""*"",
    ""cookie-parser"": ""~1.0.1"",
    ""body-parser"": ""~1.0.0"",
    ""debug"": ""~0.7.4""
  },
  ""devDependencies"": {
    ""mocha"": ""~2.1.0"",
    ""chai"": ""~1.10.0"",
    ""sinon"": ""~1.12.2""
  }
}

When I run ""npm test"" or ""sudo npm test"" I get the following output:
matt@matt-Inspiron-N5040:/media/matt/Storage1/Dev/cyoab$ sudo npm test

> cyoab@0.0.1 test /media/matt/Storage1/Dev/cyoab
> mocha test

sh: 1: mocha: Permission denied
npm ERR! weird error 126
npm WARN This failure might be due to the use of legacy binary ""node""
npm WARN For further explanations, please read
/usr/share/doc/nodejs/README.Debian

npm ERR! not ok code 0

I have tried making mocha executable via chmod, but that didn't work.
I am using node v0.10.25 on Ubuntu 14.04 LTS.
Any ideas? Or am I posting this in the wrong place? I have a feeling it isn't necessarily a Mocha issue, but I'm not sure.
Thank you,
Matt",granmoe,NONE,2015-01-04 01:45:20+00:00,True,2015-01-04 03:25:07+00:00,0.07,,3,5,2015-01-04 02:57:11+00:00,0.05,granmoe,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1489,AfterAll hook doesn't run when 'bail' is set,"This appears intentional, but has some unfortunate unintentional consequences, the most obvious of which I'm currently encountering.
I need to run some tests against an instantiated application; when the tests are done, I want to shut down the application gracefully. Before and After hooks make sense for this, right? Wrong! The application will never get cleaned up if there is an error because the after hook doesn't run!
I'm not sure why hooks are treated the same as test suites; the intent of the 'bail' option is just to stop running tests, but cleanup should still happen; that is, 'after' hooks that apply to tests that did run should be executed.",myndzi,NONE,2015-01-06 19:44:00+00:00,True,2015-01-06 20:44:13+00:00,0.04,,2,5,2015-01-06 19:47:26+00:00,0.0,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1491,Execute suites (bdd) when needed,"Hi, is there a way to execute suites ('describe') on demand. I am running a server using node and all test suites are supposed to be generated when the client connects, so they are not visible by the mocha executable when starting the program.
Thanks for some help!",crishushu,NONE,2015-01-07 16:24:07+00:00,True,2015-04-09 17:13:48+00:00,92.03,,3,3,2015-03-07 02:16:54+00:00,58.41,jasonkarns,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1494,HTML reporter retains old 'grep=' querystrings when changing suites,"Currently, if you use the http://localhost/tests.html?grep=MySuite format for limiting Mocha tests in the browser, all the suite/test links in the report get additional grep= params. Clicking on them retains older (ignored) values in the URL:
http://localhost/tests.html?grep=MySuite&grep=MySuite%20%23someMethod
Switching back to the higher suite will tack on yet another param:
http://localhost/tests.html?grep=MySuite&grep=MySuite%20%23someMethod&grep=MySuite
Ideally, switching to a new grep setting should clear the existing one in the URL. I'll submit a PR which implements this desired behavior.",callmevlad,CONTRIBUTOR,2015-01-07 23:57:33+00:00,True,2015-01-13 06:34:00+00:00,5.28,,3,2,2015-01-08 00:33:55+00:00,0.03,kristoferjoseph,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1496,Mocha.run throws a TypeError if callback is not provided,"To reproduce the issue, install Mocha 2.1.0 and run this script on Node console.
var Mocha = require(""mocha"");
var mocha = new Mocha();
mocha.addFile(""./test.js"");
mocha.run();
Here is test.js
it(""nothing"", function() {});
Then, I get:
Donghwan@DONGHWAN ~/Documents/GitHub/vibe-javascript-client (master)
$ node test-runner


  √ nothing

  1 passing (7ms)


c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\mocha.js:414
          fn(failures);
          ^
TypeError: undefined is not a function
    at done (c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\mocha.js:414:11)
    at Runner.<anonymous> (c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\runner.js:590:5)
    at Runner.emit (events.js:117:20)
    at c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\runner.js:597:10
    at c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\runner.js:518:7
    at next (c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\runner.js:248:23)
    at Object._onImmediate (c:\Users\Donghwan\Documents\GitHub\vibe-javascript-client\node_modules\mocha\lib\runner.js:276:5)
    at processImmediate [as _immediateCallback] (timers.js:345:15)

2.0.1 works fine. As the wiki page shows use of mocha.run(), I think it's a regression in 2.1.0. A workaround is to pass an empty callback.
It looks like that 30582e6 is the cause. Before executing fn(failures);, it should check if fn is available.",flowersinthesand,NONE,2015-01-08 04:23:24+00:00,True,2015-02-03 02:56:43+00:00,25.94,,5,5,2015-01-27 17:30:13+00:00,19.55,julien-f,NONE,0,1,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1498,io.js support,"What is the recommended way of running mocha tests in io.js given an iojs binary (i.e. assuming node isn’t symlinked to iojs)? alias node=iojs; mocha? Or is there a command-line flag that instructs mocha to use the node binary at a given location?
(Asking because it would be useful to run continuous integration tests in both Node and io.js.)",mathiasbynens,NONE,2015-01-14 08:10:07+00:00,True,2015-01-16 18:57:56+00:00,2.45,,4,6,2015-01-16 09:59:07+00:00,2.08,edi9999,NONE,1,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1499,Concurrent suites execution ,"Hello,
do you have a concurrent suites execution on the project's roadmap? It can be really beneficial for headless browsers like Zombie.js, which can be spawned and executed in parallel. At the moment Mocha runs suites one by one, so there is no gain from having multiple headless browser instances.",emdin,NONE,2015-01-14 10:36:09+00:00,True,2015-02-16 09:37:45+00:00,32.96,,5,7,2015-02-06 03:08:40+00:00,22.69,scott2449,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1500,Feature: signal from a test code to abort the current running suite,"Hi.
I need some help and i did not know where to turn to. The question is:
Do we have this functionality in mocha, or is this a new feature?
More details:
I'm trying to use mocha to code some DB tests. Assume the following structure
migrate db to current version:
    setup:  
        - connect as admin 
        - create test db as target db
        - close admin connection
        - run 'create-db' of previous version
    the migration flow:
        setup: connect to target db
        should pass with no errors:
            setup: begin transaction
            - alter tables & SPs
            - add built-in records to root tables
            teardown: decide if to commit or rollback AND ABORT SUITE
        run of sanity test sqls should pass with no errors:
            setup: begin transaction
            - insert demi data
            - execute some ETL sp
            teardown: decide if to pass or fail, but ALWAYS rollback
        teardown: db close connection
    teardown:
        - connect as admin 
        - connect to main db
        - close connection

Now, this flow makes great sense.
In fact, all the the migration flow section is a code that if we could abort it on first error, and take decisions on the teardown - it would even be safe enough to run as part of rollout to production db itself.
Now since a DB rollout happens on some DevOps machine that would talk to the db, there's no problem running mocha there, and have the communication with the db a side-effect of running the suite, and enjoying the explicitness of the spec reporter, the well-programmed waterfall, and all the rest :)
But - for that, I should be able to abort a suite with all it's yet-to-be-exectuted steps, without skipping hooks like teardown/afterall hooks.
I found the Runner.prototype.abort API and it looks almost like what I need - except for the fact it aborts the entire execution, and not only the current suite - but if it works I might be able to live with that.
But I did not find a way to access the runner from code of user-function for test or for a hook...
Do we have this functionality in mocha, or is this a new feature?
P.S
The only place I saw runner.abort() used is the process.on('SIGINT', function() { runner.abort(); }) on the CLI file in bin.
Is this how it's intended to be used? sounds hacky to me...
I need some confirmation that I'm not abusing this whole thing before I'll feel good with harsh statements like process.emit('SIGINT') ...
Any word would be a help :)
Thanks for bearing with me",osher,NONE,2015-01-14 11:16:50+00:00,True,2015-04-09 17:13:09+00:00,85.25,,3,4,2015-01-14 17:26:14+00:00,0.26,jonathanrdelgado,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1501,this.timeout in before ignored?,"describe(""something"", function() {
    beforeEach( function(){ this.timeout(0) });
    it(""should keep going"", function(done) {
        // ""Error: timeout of 2000ms exceeded""
    });
});
And this just kills the whole test:
describe(""something"", function() {
    this.timeout(0);
    it(""should keep going"", function(done) {
        // exits program.. no exit code given
    });
});",stevenvachon,NONE,2015-01-15 03:46:58+00:00,True,2015-02-01 02:52:48+00:00,16.96,,4,3,2015-01-19 20:13:14+00:00,4.68,stevenvachon,NONE,0,2,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1502,Is it possible to access the test instance `done` in the `beforeEach`?,"I've read that Expose current test information to beforeEach #794, however when I access this.currentTest.fn.arguments, it turned out to be null, not done, in my code I used spooky for automatic test, and I need to bind test case done with spooky's run.complete event. So in order to handy bind the done method in every test case, I tried to make the bind in the beforeEach, so this is the situation, is it possible to access the test instance done in the beforeEach?
describe('xxx', function() {

        beforeEach(function(done){
            var itDone = this.currentTest.fn.arguments[0];
            // error: this.currentTest.fn.arguments == null
            done();
        });

        it('should open calendar', function (done) {

            var self = this;
            self.ok = true;

        });


        it('should return a 200 OK status', function(done) {

            var self = this;
            self.ok = true;

            //context.spooky.beforeTest(self, done);

            context.spooky.then(function() {

                // casper API
                this.test.assertHttpStatus(200, 'successfully received 200 OK');

            });

            context.spooky.run(function() {
                this.test.done();
            });
        });
    });

Thank you!",dickeylth,NONE,2015-01-15 05:20:16+00:00,True,2015-03-14 20:54:31+00:00,58.65,,3,2,2015-03-12 02:03:06+00:00,55.86,blenderer,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1503,"Remind to call ""done()"" on test timeouts","I understand the reason the done() callback is required, but I've tripped myself up multiple times forgetting to add it to the end of a test. In each case, I assumed it was an issue with my code, not the test itself.
It would be nice if the test timeout error message had some kind of reminder to make sure done() was somewhere in the test.",Soviut,NONE,2015-01-16 02:45:29+00:00,True,2015-02-02 08:47:51+00:00,17.25,,3,15,2015-01-28 19:03:05+00:00,12.68,DanielApt,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1504,mocha.opts folder placement,"Hi, I have a question on using mocha.opts
This is my folder structure:
node-client-api
|__ test-complete
|__ some-test.js
All my tests are under ""test-complete"" folder and I run the test on my test in this way:
mocha node-client-api/test-complete/some-test.js
Where do I put my test/mocha.opts? Putting the test/ under node-client-api/test-complete is not working",ayuwono,NONE,2015-01-16 19:47:02+00:00,True,2015-04-03 10:21:08+00:00,76.61,,3,3,2015-03-25 06:54:56+00:00,67.46,TheLudd,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1507,Unable to get the --globals argument working,"I am trying to do a variant of end-to-end testing on a sailjs system using mocha. What I want to do is to simulate the action program flow by doing things like creating a user, and then performing other action with that user.
I'd like to be able to separate my tests into separate files that run in order in relation to different operations, such as ""register new user"" etc. To do this I need to be able to pass values between testing files.
Mocha contains an option setting --globals <value1, value2, etc>. Here is the description from the docs:

--globals                allow the given comma-delimited global [names]

However, I've been unable to get this to work. Here's what I've tried. I have a bootstrap.test.js file that does basic before and after operations, starting and stopping sails:
var Sails = require('sails'),
  sails;

before(function(done) {
  Sails.lift({
    log: {
        level: 'error'
    }
  }, function(err, server) {
    sails = server;
    if (err) return done(err);
    // here you can load fixtures, etc.
    done(err, sails);
  });
});

after(function(done) {
  // here you can clear fixtures, etc.
  sails.lower(done);
});

Then let's say I have two test files a.js and b.js that will run consecutively and for testing purposes contain very little:
a.js:
var user = 'some user';

b.js:
console.log( user );

If I then run mocha --globals, I get the error:

ReferenceError: user is not defined

What am I doing wrong here? I have been unable to find anywhere on the web a description of how this would be used.",ezmiller,NONE,2015-01-19 12:56:50+00:00,True,2015-04-09 17:12:30+00:00,80.18,,2,1,2015-04-09 17:12:29+00:00,80.18,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1509,Configuring context for test execution from command line,"I was looking a way to provide additional context for a tests during a run. Something  like following:
mocha --configure KEY=VALUE

Is it possible with Mocha? I think it is valuable option, as it is pretty often that scripts differ only by configuration, but not by logic and depends on a stage you want to execute them differently.",nikita-leonov,NONE,2015-01-21 03:24:47+00:00,True,2015-01-21 16:52:24+00:00,0.56,,2,4,2015-01-21 03:31:35+00:00,0.0,jonathanrdelgado,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1510,request: `it.todo`,"Use case:

tests that can't be yet implemented, but should be.
'remind' the author, be grepabble.

benefit

more literate programming.
""todo"" lives in the code.

why not use  it.skip.

like it.skip should 'orange' a bug tracking / code review board.
it.skip should be reserved for ""commenting"" out tests (during an active session).
it.todo is more forceful / intentional.

Costs to implement

more readme, docs work.
yet another state, that all reporters must know about.  (only if todo is a new state, per proposal 2 following).

possible implementations

alias todo to it.skip, which preserves the distinction in the code, even if
new function todo that can be logged in reporters as distinct from pending.",gregglind,NONE,2015-01-21 18:30:22+00:00,True,2015-01-21 18:38:19+00:00,0.01,,4,5,2015-01-21 18:31:38+00:00,0.0,gregglind,NONE,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1511,'then' function is not never getting called by Mocha for assertion checking,"I have written the following test case in Mocha, where the my code uses Q module.
var expect = require(""chai"").expect;
var utils = require(""../Utils.js"");
var utils1 = require(""../a.js"");
var sinon = require('sinon');
var request = require('requestretry');
var querySys = require('../b.js');
var Q = require(""q"");

describe(""Sample"", function () {
    var results;
    describe(""#get()"", function () {
        before(function (done) {
            done();
        });
        it(""equal"", function () {
            var deferred = Q.defer();
            var responseData = {};
            responseData.code = 200;
            responseData.data = [{a:1,b:2}];
            deferred.resolve(responseData);
            //querySys1 method uses Q promises. That is how I stubbed the response.
            sinon.stub(querySys, 'querySys1').returns(deferred.promise);

            //get function internally calls querySys1. Hence I have stubbed that.
            results = utils1.get(specification);
            results.then(function (data) {
                //Here I do see data coming as {in:1, out:1}. But still the test case is passing when compare it with {}.
                console.log(data);
                //Ideally, it should have failed. But it is passing.
                expect(data).to.be.equal({});
            });
        });
        after(function (done) {
            done();
        })
    });
});

So, if you see, I am trying to do assertion check in results.then part. I have printed the response, which I am receiving. That is coming as expected. But I am intentionally trying to match with wrong value, but test case is still passing.",prachicsa,NONE,2015-01-22 06:48:35+00:00,True,2015-03-07 23:14:17+00:00,44.68,,3,2,2015-01-22 15:20:39+00:00,0.36,jonathanrdelgado,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1513,Browser mocha use nyan reporter error,"other reporters are quite ok, howerver I get a undefined is not a function error when using nyan reporter in browser mocha
I find that Nyan constructor is rewrited by Hook
function F(){};
F.prototype = Base.prototype;
NyanCat.prototype = new F;
NyanCat.prototype.constructor = NyanCat;
so it will panic when init the rainbowcolors
 var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
      // Panic here ! self is the F above, without generateColors
    , rainbowColors = this.rainbowColors = self.generateColors() 
cannot understand why browser mocha rewrite all reporters constructor, please help! Thanks!",chunpu,NONE,2015-01-23 06:00:50+00:00,True,2015-07-06 22:13:48+00:00,164.68,,3,1,2015-07-06 22:13:48+00:00,164.68,jbnicolai,CONTRIBUTOR,0,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1515,Option to retry tests,"Tests should be consistent.  They should either always fail or always pass.  Unit tests are generally pretty consistent.  With functional tests, however, several factors outside of our control may cause a test to fail.  For example, my functional testing stack consists of MochaJS, WebDriverJS, and BrowserStack.  The tests usually pass.  However, in some cases, like when the network is congested or BrowserStack is slow in creating a VM session, a test may fail.
Since mocha doesn't support retries yet, I have to re-run test suites in their entirety.  With each suite taking a non-trivial amount of time (between 5 to 15 minutes) to complete, this solution isn't ideal.
It would be nice if mocha supported retries.  If a test in a suite fails, then I could retry that test instead of of re-running the entire suite.",kpheng,NONE,2015-01-27 22:04:04+00:00,True,2015-04-09 17:11:04+00:00,71.8,,5,5,2015-01-27 22:18:54+00:00,0.01,dasilvacontin,CONTRIBUTOR,1,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1516,Run `after` and `afterEach` even after spec failure,"I think the after and afterEach should run even if the spec fails. Sometimes its needed to because we might be doing some clean up work inside after and afterEach functions.
Example would be:
Let say I am testing a module which copies a directory recursively into a different directory. Now after the test is over I want to delete the newly created a directory as a cleanup.
Its like in the database world, when you test you manipulate the data inside the tables but when your test finishes you always rollback the changes regardless of failure or success.",gyandeeps,CONTRIBUTOR,2015-01-27 22:28:01+00:00,True,2015-01-28 00:06:18+00:00,0.07,,2,3,2015-01-27 22:37:11+00:00,0.01,dasilvacontin,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1517,Very simple test calls done() multiple times. What to do?,"I've created a very simple test, to demonstrate the following:
We want to test that the click event works on both div and div > span.
In this scenario the second test seems to invoke the first one, which leads to the error:
 1) Example should trigger on DIV:
     done() called multiple times

The source for the test can be found below:
describe('Example', function () {
    before(function () {
        $('body').append('<div><span></span></div>');
    });

    it('should trigger on DIV', function (done) {
        $('div').on('click', function (e) {
            e.stopPropagation();
            done();
        });

        $('div').click();
        this.timeout(50);
    });

    it('should trigger on DIV > SPAN', function (done) {
        $('span').on('click', function (e) {
            e.stopPropagation();
            done();
        });

        $('span').click();
        this.timeout(50);
    });

});

Update Added stopPropogation as suggested by @toastynerd, but still no luck. Either way let's keep it in, as it illustrates that this isn't caused by event propogation.
Update 2: Moved stopPropogation above done(). Still no luck.
*Update 3: as @dasilvacontin explains, this was caused by the presence of two div tags:

$('div') gets all div elems (2 in this case). Therefore you are defining a listener for both divs, and then executing each of them.",DanielApt,NONE,2015-01-28 19:11:31+00:00,True,2015-01-29 19:11:20+00:00,1.0,,3,11,2015-01-28 19:30:41+00:00,0.01,toastynerd,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1518,Mocha unit testing with node-inspector hangs on Windows,"I apologize ahead of time, since this post will be rather long due to me trying to be as thorough as possible. As it stands, this bug has been reproduced a handful of times by my team and I with 3 different laptops running windows 7, 8, and 8.1 respectively. We are all running the latest stable version of node-inspector (0.8.3) on an instance of the git shell for windows (MING32/bash), as well as node 0.10.36.
If you go ahead and download this simple nodeshell app that only tests a simple GET request from the localhost route, you can follow the steps below to reproduce this issue:

Follow the instructions in the repo's README up to the 6th step to quickly set up the environment for use
Run node-inspector from one cmd shell instance, and mocha --debug-brk test/test.js from a second cmd shell (both should be located inside the project directory)
After opening node-inspector in Chrome, set a breakpoint at the declaration of the describe block in line 82 of test.js. Hit play, and wait for the mocha files to load and it will reach this breakpoint shortly thereafter.
Go ahead and set a breakpoint inside of function startServer(done), the function being called inside of the before hook. Logically, this simple invokes a ""forked"" instance of our backend server environment in order for us to run api route tests against it. You can try placing the breakpoint at any of the function/event listener declarations, but you will immediately notice that you:

a. Cannot ""step into"" the `fork` function call at all. It will simply skip to the first `child.on` event listner function.
b. Cannot place a breakpoint inside of the callback of either one of the event listeners, because it simply hangs before then.

That's the last place it ever touches our code. You can obviously circumvent the specific breakpoints I've mentioned and just run the test to achieve the same result that ends up occuring in the screenshots below:


Occasionally the console output will also include an Error 0 or Error 10054 in the log after the tests hang.",yoavgurevich,NONE,2015-01-29 21:06:52+00:00,True,2017-06-08 03:02:08+00:00,860.25,,2,1,2017-05-24 21:20:14+00:00,846.01,stale,NONE,0,0,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1521,Errors in third party reporters get swallowed by Mocha,"I've been working on building a reporter for Mocha but it can be difficult to debug errors in the reporter because Mocha eats them up. Would be great if Mocha could at least log the reporter error before throwing an invalid reporter error. Something like this?
Mocha.prototype.reporter = function(reporter, reporterOptions){
  if ('function' == typeof reporter) {
    this._reporter = reporter;
  } else {
    reporter = reporter || 'spec';
    var _reporter;
    try { _reporter = require('./reporters/' + reporter); } catch (err) {};
    if (!_reporter) try { _reporter = require(reporter); } catch (err) {
      console.warn(err);
    };
    if (!_reporter && reporter === 'teamcity')
      console.warn('The Teamcity reporter was moved to a package named ' +
        'mocha-teamcity-reporter ' +
        '(https://npmjs.org/package/mocha-teamcity-reporter).');
    if (!_reporter) throw new Error('invalid reporter ""' + reporter + '""');
    this._reporter = _reporter;
  }
  this.options.reporterOptions = reporterOptions;
  return this;
};",adamgruber,CONTRIBUTOR,2015-02-02 04:44:49+00:00,True,2015-03-14 05:52:10+00:00,40.05,,4,5,2015-02-02 04:50:25+00:00,0.0,dasilvacontin,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1522,Can we get a release?,"I'm mostly looking forward to the fix to the grep querystring.
Pretty please?",bjornstar,CONTRIBUTOR,2015-02-02 07:03:42+00:00,True,2015-02-02 07:45:16+00:00,0.03,,3,4,2015-02-02 07:08:32+00:00,0.0,dasilvacontin,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1524,Ensure done() is being called within tests,"As was discussed in #1503 it would be good to scan each test to make sure the done() callback is actually called. An appropriate error should be thrown if the callback is missing.
For background, forgetting to add done() results in a somewhat ambiguous timeout error on a test, this would make things more specific and easier to debug.",Soviut,NONE,2015-02-02 08:52:06+00:00,True,2015-03-11 04:40:49+00:00,36.83,,6,15,2015-02-06 03:11:11+00:00,3.76,scott2449,NONE,1,2,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1525,How to switch between stable (0.10.x) and unstable (0.11.x) node while running test at runtime?,"In my machine I'm running both stable and unstable version of node, and using n to switch between them to start the apps with correct version. No problem.
But I have problem when running test with mocha. For example, testing an application which run on 0.11.x while  the current installed node is 0.10.x will throw error. There is no way to switch to 0.11.x at runtime when running tests.
Anyone know how to solve this problem?",ntquyen,NONE,2015-02-02 11:48:53+00:00,True,2015-02-03 06:32:13+00:00,0.78,,2,1,2015-02-03 06:31:13+00:00,0.78,ntquyen,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1526,add link to gitter on mochajs.org,,boneskull,MEMBER,2015-02-02 20:20:10+00:00,True,2015-02-04 02:00:03+00:00,1.24,,2,3,2015-02-02 20:24:41+00:00,0.0,dasilvacontin,CONTRIBUTOR,1,1,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1528,fix tests that need to be uncommented,"Some tests ask to be uncommented to see actual behaviour, because they are designed to fail.
Instead of doing that, another instance of mocha should be run and then test on that instance if the before/after/tests are run/failed/etc. Kinda of what I've done at test/mocha.js.",dasilvacontin,CONTRIBUTOR,2015-02-03 03:51:04+00:00,True,2015-07-05 16:39:15+00:00,152.53,,3,2,2015-02-03 21:30:24+00:00,0.74,dasilvacontin,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1529,"Have option to make tests warn or fail on describe.only, it.only, xdescribe or xit","There have been many a time when I have glanced over describe.only, it.only, xdescribe or xit in a PR.  Unfortunately, these PRs get merged and can cause problems with tests that should fail going undetected.
It would be tremendously helpful if there was an option or environment variable to automatically exit with a non-zero code upon detecting these methods in tests.  This would run in CI and automatically fail the build.",khoomeister,NONE,2015-02-03 05:42:34+00:00,True,2015-02-05 05:09:46+00:00,1.98,,7,12,2015-02-03 06:29:26+00:00,0.03,dasilvacontin,CONTRIBUTOR,1,1,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1530,Make mocha persist Express 4 session,There is some way to make Mocha persist with session data when testing with supertest?,VictorQueiroz,NONE,2015-02-04 04:26:58+00:00,True,2015-02-04 04:43:52+00:00,0.01,,2,5,2015-02-04 04:30:36+00:00,0.0,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1532,Rejecting a promise with an object gives a blank failure,"If a promise is rejected with a normal javascript object the test still fails, but with a blank message. This confused me for the longest time.. It would be great if we could have it at least JSON.stringify the object or alert the user that they should return an Error object like it does if you resolve with a string.
Test case to reproduce plus show current behavior using RSVP promise library:
var RSVP = require('rsvp');

it('gives helpful message when rejected with string', function() {
  return RSVP.reject('an error message');
});
// => Error: the string ""an error message"" was thrown, throw an Error :) ... stack

it('gives helpful message when rejected with error', function() {
  return RSVP.reject(new Error('an error message'));
});
// => Error: an error message ... stack

it('gives blank message and no stack when rejected with object', function() {
  return RSVP.reject({});
});
// => nothing",jakecraige,CONTRIBUTOR,2015-02-04 18:22:54+00:00,True,2015-02-06 20:08:25+00:00,2.07,,3,3,2015-02-04 18:35:19+00:00,0.01,dasilvacontin,CONTRIBUTOR,1,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1536,Give Assertion name even on the state passed. ,"I have an concern here. When ever the assert is getting failed, the state is put as failed along with err object, which has the details about the assertions. Which has the message property:
message: 'failed asserts: expected 11 to equal 29',
which is what getting used in the report generation. But in case of passed asserts, the assert name aren't stored in the object.
It will be really great to see that happen, because then we can have reports like this:
      Spec Name
             Assert Name    passed
             Assert Name2  failed etc


which gives more useful info onto the report regarding what all asserts got passed in the passed spec.
If this can be an simple change, can you point me where I need to add these properties to the object?",antsmartian,NONE,2015-02-06 06:36:41+00:00,True,2017-05-25 07:53:26+00:00,839.05,,2,1,2017-05-24 21:20:13+00:00,838.61,stale,NONE,0,0,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1538,Question: How to clear tests in browser?,"I assign different tests for mocha.js at runtime in browser.
How to clean or clear mocha.js state and test state and DOM states added with describe(), it() and mocha.run() methods?",s-a,NONE,2015-02-06 17:42:29+00:00,True,2015-02-08 18:16:13+00:00,2.02,,2,1,2015-02-08 18:16:13+00:00,2.02,s-a,NONE,0,0,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1539,Node.js 0.12: child_process warning,"child_process: customFds option is deprecated, use stdio instead.",XhmikosR,CONTRIBUTOR,2015-02-07 10:57:33+00:00,True,2015-02-07 11:12:55+00:00,0.01,,2,3,2015-02-07 11:12:55+00:00,0.01,travisjeffery,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1541,A few doubts,"I have been using mocha for a while and there's this particular behavior of mocha that's been constantly bugging me.
So today I decided to face it.
I have a nodejs server built using something like express.
I have a test suite with 100% results, but just to understand how mocha works I have tweaked the code to not respond to a particular call. Thus it is failing a test.
What is failing ?
client2 receives client1s msg under Routes/Message sending route
(Note : output given below)
Why is it failing ?
Because done() never gets called
Other info
I use --bail to abort the execution when a test fails. Also note that in most of the tests I use the done() method, as they are async calls.
Okay, so let's get started
Doubt 0
done() is never called, yet why does it say done() called multiple times ?
Doubt 1
In the output, you can notice that it constantly mentions /home/jaydeep/Documents/nodejs/falcon/test/auth.js, that's a little surprising to me as the failing test is in home/jaydeep/Documents/nodejs/falcon/test/routes.js. And all the tests in auth.js have already passed.
Doubt 2
As I use --bail, it should abort the execution as soon as it finds a failing test, yet Delivery ACK route gets executed.
First Output
Authentication
00:44:00.916Z  WARN Falcon: username or password empty! (module=server, method=authenticate)
    ✓ forbids unauthorized connection 
    ✓ allows authorized connection 
    ✓ rejects publish to registerMe 
    Register mode
      ✓ allows connection to register mode 
      allowed pub/sub
        ✓ subscribe to registerMe/+ 
        ✓ rejects subscription to any other topic 
        register mode publish attempts
          ✓ some other topic 
          ✓ reject subscriptions to registerMe 

  Routes
    Message sending route // <------------------------- Here's the problem
      1) client2 receives client1s msg
    Delivery ACK route
      2) ""after all"" hook: destroy clients

  13 passing (1s)
  2 failing

  1) Routes Message sending route client2 receives client1s msg:
     Uncaught Error: done() called multiple times
      at Hook.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Hook (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/hook.js:22:12)
      at Suite.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/suite.js:224:14)
      at context.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:53:17)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:127:17)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:123:13)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:78:9)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:64:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  2) Routes Message sending route ""after all"" hook: destroy clients:
     Uncaught Error: done() called multiple times
      at Hook.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Hook (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/hook.js:22:12)
      at Suite.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/suite.js:224:14)
      at context.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:53:17)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:127:17)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:123:13)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:78:9)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:64:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3
Doubt 3
Other strange thing is when I run the same tests again I get different output, have a look at the below output.
Second Output
  Authentication
00:49:31.848Z  WARN Falcon: username or password empty! (module=server, method=authenticate)
    ✓ forbids unauthorized connection 
    ✓ allows authorized connection 
    ✓ rejects publish to registerMe 
    Register mode
      ✓ allows connection to register mode 
      allowed pub/sub
        ✓ subscribe to registerMe/+ 
        ✓ rejects subscription to any other topic 
        register mode publish attempts
          ✓ some other topic 
          ✓ reject subscriptions to registerMe 

  Routes
    Message sending route // <------------------------- Here's the problem
      1) client2 receives client1 msg
      2) client2 receives client1 msg
    Delivery ACK route
    Read ACK route
      3) allows authorized connection
    Registered Contacts routes
    Forwards typing
    Profile changes
    Online notification

  Falcondb Connection test
    4) reject subscriptions to registerMe
    5) some other topic
    6) rejects publish to registerMe
    7) ""after all"" hook: closing server

  13 passing (1s)
  7 failing

  1) Routes Message sending route client2 receives client1 msg:
     Uncaught Error: done() called multiple times
      at Hook.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Hook (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/hook.js:22:12)
      at Suite.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/suite.js:224:14)
      at context.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:53:17)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:127:17)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:123:13)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:78:9)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:64:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  2) Routes Message sending route client2 receives client1 msg:
     Uncaught Error: done() called multiple times
      at Hook.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Hook (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/hook.js:22:12)
      at Suite.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/suite.js:224:14)
      at context.beforeEach (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:53:17)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:127:17)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:123:13)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:78:9)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:64:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  3) Authentication allows authorized connection:
     Error: done() called multiple times
      at Test.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Test (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/test.js:22:12)
      at context.it.context.specify (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:112:18)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:41:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  4) Authentication Register mode allowed pub/sub register mode publish attempts reject subscriptions to registerMe:
     Error: done() called multiple times
      at Test.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Test (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/test.js:22:12)
      at context.it.context.specify (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:112:18)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:148:17)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:123:13)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:78:9)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:64:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  5) Authentication Register mode allowed pub/sub register mode publish attempts some other topic:
     Error: done() called multiple times
      at Test.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Test (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/test.js:22:12)
      at context.it.context.specify (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:112:18)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:141:17)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:123:13)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:78:9)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:64:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  6) Authentication rejects publish to registerMe:
     Error: done() called multiple times
      at Test.Runnable (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/runnable.js:49:17)
      at new Test (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/test.js:22:12)
      at context.it.context.specify (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:112:18)
      at Suite.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:52:5)
      at context.describe.context.context (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/interfaces/bdd.js:74:10)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/test/auth.js:8:1)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Module.require (module.js:364:17)
      at require (module.js:380:17)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:185:27
      at Array.forEach (native)
      at Mocha.loadFiles (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:182:14)
      at Mocha.run (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/lib/mocha.js:394:31)
      at Object.<anonymous> (/home/jaydeep/Documents/nodejs/falcon/node_modules/mocha/bin/_mocha:394:16)
      at Module._compile (module.js:456:26)
      at Object.Module._extensions..js (module.js:474:10)
      at Module.load (module.js:356:32)
      at Function.Module._load (module.js:312:12)
      at Function.Module.runMain (module.js:497:10)
      at startup (node.js:119:16)
      at node.js:929:3

  7) Routes ""after all"" hook: closing server:
     Uncaught TypeError: Object #<Client> has no method 'emit'
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mosca/lib/persistence/abstract.js:79:16
      at RedisPersistence.lookupRetained (/home/jaydeep/Documents/nodejs/falcon/node_modules/mosca/lib/persistence/redis.js:193:20)
      at Server.server.forwardRetained (/home/jaydeep/Documents/nodejs/falcon/node_modules/mosca/lib/persistence/abstract.js:77:10)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/lib/client.js:446:21
      at Array.forEach (native)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/lib/client.js:444:26
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/node_modules/async/lib/async.js:254:17
      at done (/home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/node_modules/async/lib/async.js:135:19)
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/node_modules/async/lib/async.js:32:16
      at /home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/node_modules/async/lib/async.js:251:21
      at Object._onImmediate (/home/jaydeep/Documents/nodejs/falcon/node_modules/mors/node_modules/mosca/lib/client.js:412:7)
      at processImmediate [as _immediateCallback] (timers.js:354:15)",jaydp17,NONE,2015-02-08 01:19:24+00:00,True,2015-03-14 22:09:22+00:00,34.87,,5,5,2015-02-08 02:28:55+00:00,0.05,travisjeffery,CONTRIBUTOR,1,3,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1548,ES6 String Templates Throw Errors,"String templates even when the --harmony flag is set for mocha throws a token ILLEGAL error;
Simple before to replicate.
before(function() {
  let a = 1;
  console.log(`${a}`);
});

  console.log(`${a}`);
              ^
SyntaxError: Unexpected token ILLEGAL
    at exports.runInThisContext (vm.js:73:16)
    at Module._compile (module.js:443:25)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Module.require (module.js:365:17)
    at require (module.js:384:17)
    at <redacted>/node_modules/mocha/lib/mocha.js:185:27
    at Array.forEach (native)
    at Mocha.loadFiles (/Users/Tivs/Documents/github/nurfed/curio-node/node_modules/mocha/lib/mocha.js:182:14)
    at Mocha.run (<redacted>/node_modules/mocha/lib/mocha.js:394:31)
    at Object.<anonymous> (<redacted>/node_modules/mocha/bin/_mocha:394:16)
    at Module._compile (module.js:460:26)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:501:10)
    at startup (node.js:124:16)
    at node.js:842:3",Tivoli,NONE,2015-02-12 19:27:49+00:00,True,2015-02-16 02:25:17+00:00,3.29,,5,14,2015-02-12 20:20:12+00:00,0.04,boneskull,MEMBER,1,2,0,2,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1549,Before function doesn't allow console to print output,"I have a before function that makes an API call, and if the test times out, then it doesn't print anything, which isn't useful when I'm trying to see what the server logs.",ilanbiala,NONE,2015-02-13 00:08:47+00:00,True,2015-03-14 22:06:09+00:00,29.91,,5,10,2015-02-15 07:04:13+00:00,2.29,a8m,CONTRIBUTOR,1,3,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1554,"Why ""return done(err)""?","Hi,
Just a quick question about something I can't fully grasp.
Could you help me understand why in the docs  the async example rejects with return done(err) instead of simply done(err)?
This is the code I'm referring to:
describe('Connection', function(){
  var db = new Connection
    , tobi = new User('tobi')
    , loki = new User('loki')
    , jane = new User('jane');

  beforeEach(function(done){
    db.clear(function(err){
      if (err) return done(err);
      db.save([tobi, loki, jane], done);
    });
  })

  describe('#find()', function(){
    it('respond with matching records', function(done){
      db.find({ type: 'User' }, function(err, res){
        if (err) return done(err);
        res.should.have.length(3);
        done();
      })
    })
  })
})
What would be the difference it was written like this?
describe('Connection', function(){
  var db = new Connection
    , tobi = new User('tobi')
    , loki = new User('loki')
    , jane = new User('jane');

  beforeEach(function(done){
    db.clear(function(err){
      if (err) done(err);
      db.save([tobi, loki, jane], done);
    });
  })

  describe('#find()', function(){
    it('respond with matching records', function(done){
      db.find({ type: 'User' }, function(err, res){
        if (err) done(err);
        res.should.have.length(3);
        done();
      })
    })
  })
})
In fact, it seems unconsistent to me that when there is an error the promise is rejected with return done(err), but if all is fine is fulfilled insted with done(). Shouldn't we simply call done([err]) in both cases, without the need to return it?
Btw, this seems to be the same approach used in the docs of chai-as-promised.
Thanks!",pensierinmusica,NONE,2015-02-16 17:00:14+00:00,True,2015-02-16 20:33:23+00:00,0.15,,3,3,2015-02-16 19:54:17+00:00,0.12,rlidwka,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1556,HTML runner formats function source incorrectly,"We noticed an issue with the source code of a test function shown in the HTML runner when a user clicks on a test case. When the function's body curly bracket starts on a new line, the output is not truncated correctly, i.e.:
it(
    'test case',
    function ()
    {
        say('hi!');
    }
);
is presented in the browser as
function ()
    {
        say('hi!');

If the curly bracket is on the first line, then everything is fine.
it(
    'test case',
    function () {
        say('hi!');
    }
);
correctly renders as
say('hi!');

I was able to work around this issue by manually changing the regular expression
/^function *\(.*\) *{|\(.*\) *=> *{?/
into
/^function *\(.*\)\s*{|\(.*\) *=> *{?/
in mocha.js and lib/utils.js.
A more robust solution would be better here.",fasttime,NONE,2015-02-17 15:33:08+00:00,True,2015-03-23 08:07:46+00:00,33.69,,2,1,2015-03-23 07:49:40+00:00,33.68,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1557,Some documentation appears backwards,"Synchronous code
When testing synchronous code, omit the callback and Mocha will automatically continue on to the next test.
The callback is not introduced till the Asynchronous section right below.
Asynchronous code
All ""hooks"", that is before(), after(), beforeEach(), afterEach() may be sync or async as well, behaving much like a regular test-case.
Hooks aren't described till after this section.",travisperson,NONE,2015-02-17 21:02:18+00:00,True,2015-07-05 15:14:39+00:00,137.76,,3,1,2015-07-05 15:14:39+00:00,137.76,jbnicolai,CONTRIBUTOR,0,1,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1558,Uncaught ReferenceError: Buffer is not defined [mocha.js:5833],Getting this error with the latest version of the mocha.js file. I'm using the browser interface. Looks like the line that causes this error was added in eab389f. I set up a dummy app demonstrate the error. Just open up spec-runner.html and open up the developer tools. Any thoughts on how to fix this? (Thanks to @clemf for finding this),dustinbrownman,NONE,2015-02-18 17:50:56+00:00,True,2015-02-21 06:36:43+00:00,2.53,,3,6,2015-02-18 18:52:50+00:00,0.04,callmevlad,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1563,Loop in test,"Hello,
I am trying to use data provider in mocha to write less code
var should = require('should'); 
var assert = require('assert');
var request = require('supertest');  
var mongoose = require('mongoose');
var winston = require('winston');
var config = require('../app/config');

describe('Authentification', function() {
    var url = config.web.protocol + '://' + config.web.host + ':' + config.web.port;

    describe('signin',function()
    {
        var provider = [
            {
                describe: 'should return error trying to signin with empty body',
                body: {},
                status: 404,
                message: ""firstName not found""
            },
            {
                describe: 'should return error trying to signin with no first name',
                body: {
                    lastName: 'test',
                    password: 'test',
                    email: 'test'
                },
                status: 404,
                message: ""firstName not found""
            },
            {
                describe: 'should return error trying to signin with no last name',
                body: {
                    firtsName: 'test',
                    password: 'test',
                    email: 'test'
                },
                status: 404,
                message: ""lastName not found""
            },
            {
                describe: 'should return error trying so signin with no password',
                body: {
                    lastName: 'test',
                    firstName: 'test',
                    email: 'test'
                },
                status: 404,
                message: ""password not found""
            },
            {
                describe: 'should return error trying so signin with no email',
                body: {
                    lastName: 'test',
                    password: 'test',
                    firstName: 'test'
                },
                status: 404,
                message: ""email not found""
            },
            {
                describe: 'should return error trying so signin a too long firstName',
                body: {
                    firstName: 'kldsfjghsldkglsqkdjghqlkfjdsghldfksjghfdlskjgkldjfsdj',
                    lastName: 'test',
                    password: 'testhdksjdhfb',
                    email: 'test@aa.aa'
                },
                status: 400,
                message: ""invalid firstName""
            },
        ];

        for (var i in provider) {
            it(provider[i].describe, function(done) {
            request(url)
                .post('/user/signin')
                .send(provider[i].body)
                .expect(provider[i].status)
                .expect(function(res)
                {
                    assert.equal(res.body.code, provider[i].status);
                    assert.equal(res.body.message, provider[i].message);
                })
                .end(done);
            });
        }
    });
});

But in this case it only check the last test.
The output is
  Authentification
    signin
      ✓ should return error trying to signin with empty body 
      ✓ should return error trying to signin with no first name 
      ✓ should return error trying to signin with no last name 
      ✓ should return error trying so signin with no password 
      ✓ should return error trying so signin with no email 
      ✓ should return error trying so signin a too long firstName 


  6 passing (71ms)

But if the last test fail, all others test fail. and if one of the other test is wrong, the test pass.
There is maybe an asynchronious problem, but I don't know how to solve it",ajouve,NONE,2015-02-21 16:56:58+00:00,True,2015-02-21 17:49:03+00:00,0.04,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1565,grep behaviour is badly documented,"I think that the following line of lib\mocha.js:

should change to",,NONE,2015-02-22 02:29:13+00:00,False,,,,9,32,2015-02-22 05:30:14+00:00,0.13,dasilvacontin,CONTRIBUTOR,1,4,0,4,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1566,Create a release tag and npm publish for --delay option,"I'm looking forward to taking advantage of the --delay option, but without a tag, I have to manually point to the commit hash (or the master branch) to be able to use it.  It would be cool to point to a specific tag.",rfink,NONE,2015-02-23 20:33:45+00:00,True,2015-03-14 22:04:34+00:00,19.06,,2,2,2015-03-14 22:04:34+00:00,19.06,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1568,publish a minor release,"It's been asked for weeks already, maybe over a month.",dasilvacontin,CONTRIBUTOR,2015-02-25 07:25:30+00:00,True,2015-03-07 12:30:30+00:00,10.21,,3,7,2015-02-25 15:30:23+00:00,0.34,a8m,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1570,Command line option for running tests by substring match?,"It can be annoying to express test names as regular expressions in order to --grep specific tests, especially when you are copying and pasting the name of a failing test in your terminal.
For example, on todays mocha repository:
> mocha --grep ""grep()""
  ․․․․․․․․․

  9 passing (69ms)

> mocha --grep ""grep\(\)""
  ․․․․․

  5 passing (61ms)

Is there an easy way of avoiding this issue? If not, perhaps the mocha command line would be a little friendlier with an option to avoid escaping:
> mocha --matching ""grep()""
  ․․․․․

  5 passing (61ms)

I implemented a small change to achieve this: joshski@e064320
Please say if you'd like a PR.",joshski,NONE,2015-02-28 12:15:37+00:00,True,2015-03-09 14:17:47+00:00,9.08,,4,4,2015-03-09 13:35:52+00:00,9.06,refractalize,NONE,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1571,"Using ""-gc"" flag omits all tests","When I run mocha tests normally, everything works.
But when I use the ""-gc"" flag which is supposed to expose garbage collection, I just get ""0 passing"", it skips all tests.",GeoffreyPlitt,NONE,2015-02-28 23:03:16+00:00,True,2015-03-14 22:24:14+00:00,13.97,,2,4,2015-02-28 23:04:09+00:00,0.0,GeoffreyPlitt,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1573,mocha.opts does not support --harmony,"If you run mocha --harmony that works fine, but placing --harmony in mocha.opts doesn't seem to work.",matthewmueller,NONE,2015-03-01 21:44:37+00:00,True,2015-03-09 13:14:17+00:00,7.65,,4,3,2015-03-02 17:26:26+00:00,0.82,fixe,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1574,Stop printing trailing whitespace for it(...) checked messages,"As a power user, I want to be able to feed Mocha output to other command line programs without fear of trailing whitespace gumming up things. As of Mocha 1.21.4, each checked message prints with an extra space at the end, creating issues with documentation tools and editorconfig.",mcandre,NONE,2015-03-03 23:14:14+00:00,True,2015-03-15 21:35:35+00:00,11.93,,2,3,2015-03-14 21:32:06+00:00,10.93,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1576,Documentation - coverage report when running programmatically,"I found in the wiki how to run mocha programmatically:- https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically
It would be helpful if you can include how to generate coverage report when running programmatically as well.
Thanks",vasanthps,NONE,2015-03-04 14:20:29+00:00,True,2015-03-26 12:35:57+00:00,21.93,,2,2,2015-03-23 07:45:22+00:00,18.73,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1577,Option exclude certain files by pattern when testing recursively,"I would like the ability to provide an exclusion pattern so that I can only test files that match my test file pattern. This would allow data files to coexist with test files so long as they follow a reasonable pattern.
I think this would be simply providing an option that sets ignore option in glob.
Thoughts? I can make a PR for it real quick if you'd like.",KylePDavis,NONE,2015-03-04 14:52:35+00:00,True,2018-04-01 04:42:15+00:00,1123.58,,30,71,2015-03-05 16:41:34+00:00,1.08,alinex,NONE,2,2,0,26,"['feature', 'good-first-issue', 'help wanted', 'usability']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
1582,get the default `process.stdout.write` back after tests are finished,"I have a test which tests stdout so I need to change the default behaviour of process.stdout.
process.stdout.write = (function(write) {
    return function(string, encoding, fd) {
      var args = _.toArray(arguments);
      callback.call(callback, string);
    };
  }(process.stdout.write));
mocha's report, however, cannot be seen any more if I use this. It would be good if mocha remembers the default process.stdout.write at the beginning and change it back after tests are finished.",stevemao,NONE,2015-03-07 07:59:50+00:00,True,2015-03-29 21:27:35+00:00,22.56,,9,46,2015-03-14 02:30:18+00:00,6.77,JohnnyEstilles,NONE,1,4,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1583,Error: spawn --harmony ENOENT;  mocha --harmony on node 0.12.0 and mocha 2.2.0,"Not sure what happened in a day but my builds are failing and all signs point to something related with mocha and using the harmony flag.  I have been on 0.12.0 for a while now and have tried every 2.X version of mocha.  The error looks like its process related but all my apps run fine with every other package.
Do you guys have any ideas?
mocha --harmony
events.js:85
      throw er; // Unhandled 'error' event
            ^
Error: spawn --harmony ENOENT
    at exports._errnoException (util.js:746:11)
    at Process.ChildProcess._handle.onexit (child_process.js:1046:32)
    at child_process.js:1137:20
    at process._tickCallback (node.js:355:11)
    at Function.Module.runMain (module.js:503:11)
    at startup (node.js:129:16)
    at node.js:814:3

 mocha --harmony-generators
events.js:85
      throw er; // Unhandled 'error' event
            ^
Error: spawn --harmony-generators ENOENT
    at exports._errnoException (util.js:746:11)
    at Process.ChildProcess._handle.onexit (child_process.js:1046:32)
    at child_process.js:1137:20
    at process._tickCallback (node.js:355:11)
    at Function.Module.runMain (module.js:503:11)
    at startup (node.js:129:16)
    at node.js:814:3",thecaddy,NONE,2015-03-07 16:04:30+00:00,True,2015-03-09 06:13:13+00:00,1.59,,2,3,2015-03-07 20:13:23+00:00,0.17,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1584,Error while installing on Linux (ENOENT),"I cannot seem to install Mocha on my Linux machine.
$ npm install mocha
npm http GET https://registry.npmjs.org/mocha
npm http 304 https://registry.npmjs.org/mocha
npm http GET https://registry.npmjs.org/diff/1.0.8
npm http GET https://registry.npmjs.org/commander/2.3.0
npm http GET https://registry.npmjs.org/debug/2.0.0
npm http GET https://registry.npmjs.org/escape-string-regexp/1.0.2
npm http GET https://registry.npmjs.org/glob/3.2.3
npm http GET https://registry.npmjs.org/growl/1.8.1
npm http GET https://registry.npmjs.org/jade/0.26.3
npm http GET https://registry.npmjs.org/mkdirp/0.5.0
npm http GET https://registry.npmjs.org/supports-color
npm http 304 https://registry.npmjs.org/diff/1.0.8
npm http 304 https://registry.npmjs.org/growl/1.8.1
npm http 304 https://registry.npmjs.org/commander/2.3.0
npm http 304 https://registry.npmjs.org/debug/2.0.0
npm http 304 https://registry.npmjs.org/escape-string-regexp/1.0.2
npm http 304 https://registry.npmjs.org/glob/3.2.3
npm http 304 https://registry.npmjs.org/mkdirp/0.5.0
npm http 304 https://registry.npmjs.org/jade/0.26.3
npm http 304 https://registry.npmjs.org/supports-color
npm http GET https://registry.npmjs.org/ms/0.6.2
npm http 304 https://registry.npmjs.org/ms/0.6.2
npm http GET https://registry.npmjs.org/minimist/0.0.8
npm http 304 https://registry.npmjs.org/minimist/0.0.8
npm http GET https://registry.npmjs.org/inherits
npm http GET https://registry.npmjs.org/minimatch
npm http GET https://registry.npmjs.org/graceful-fs
npm http 304 https://registry.npmjs.org/inherits
npm http 304 https://registry.npmjs.org/minimatch
npm http 304 https://registry.npmjs.org/graceful-fs
npm http GET https://registry.npmjs.org/lru-cache
npm http GET https://registry.npmjs.org/sigmund
npm http GET https://registry.npmjs.org/commander/0.6.1
npm http GET https://registry.npmjs.org/mkdirp/0.3.0
npm http 304 https://registry.npmjs.org/lru-cache
npm http 304 https://registry.npmjs.org/sigmund
npm http 304 https://registry.npmjs.org/commander/0.6.1
npm http 304 https://registry.npmjs.org/mkdirp/0.3.0
npm ERR! Error: ENOENT, chmod '/path/to/my_project/node_modules/mocha/node_modules/glob/node_modules/minimatch/n
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Linux 3.10.40-50.136.amzn1.x86_64
npm ERR! command ""node"" ""/usr/bin/npm"" ""install"" ""mocha""
npm ERR! cwd /path/to/my_project
npm ERR! node -v v0.10.28
npm ERR! npm -v 1.3.6
npm ERR! path /path/to/my_project/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_modules/lru-c
npm ERR! fstream_path /path/to/my_project/node_modules/mocha/node_modules/glob/node_modules/minimatch/node_modul
npm ERR! fstream_type File
npm ERR! fstream_class FileWriter
npm ERR! fstream_finish_call chmod
npm ERR! code ENOENT
npm ERR! errno 34
npm ERR! fstream_stack /usr/lib/node_modules/fstream/lib/writer.js:305:19
npm ERR! fstream_stack Object.oncomplete (fs.js:107:15)
npm ERR! Error: ENOENT, open '/path/to/my_project/node_modules/mocha/node_modules/jade/node_modules/mkdirp/packa
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Linux 3.10.40-50.136.amzn1.x86_64
npm ERR! command ""node"" ""/usr/bin/npm"" ""install"" ""mocha""
npm ERR! cwd /path/to/my_project
npm ERR! node -v v0.10.28
npm ERR! npm -v 1.3.6
npm ERR! path /path/to/my_project/node_modules/mocha/node_modules/jade/node_modules/mkdirp/package.json
npm ERR! code ENOENT
npm ERR! errno 34
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     /path/to/my_project/npm-debug.log
npm ERR! not ok code 0",barmatz,NONE,2015-03-07 22:16:10+00:00,True,2015-03-09 03:26:10+00:00,1.22,,2,5,2015-03-07 22:31:53+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1585,Coverage script failing,"Redirected from: travis-ci/travis-ci#3347
Hi, we have a coverage script in node-sass for TravisCI. It was last updated on Nov 4 2014. It was reporting coverage to covealls till yesterday when I bumped mocha version sass/node-sass@c9ed930. Now we get permission denied on TravisCI: https://travis-ci.org/sass/node-sass/jobs/53495198#L1320 on running the coverage script (after passing all tests with mocha).


node-sass@2.0.1 coverage /home/travis/build/sass/node-sass
node scripts/coverage.js

/home/travis/build/sass/node-sass/node_modules/.bin/_mocha: 1: /home/travis/build/sass/node-sass/node_modules/.bin/_mocha: /bin: Permission denied

If I downgrade mocha to 2.1.0, the result is: https://travis-ci.org/am11/node-sass/jobs/53533514#L1310:

$ npm run-script coverage
node-sass@2.0.1 coverage /home/travis/build/am11/node-sass
node scripts/coverage.js
Done. Your build exited with 0

Is it related to #1567?",am11,NONE,2015-03-08 12:14:55+00:00,True,2015-03-23 08:47:42+00:00,14.86,,5,24,2015-03-09 04:19:28+00:00,0.67,danielstjules,CONTRIBUTOR,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1587,--debug-brk broken as of 2.2.0,"on node 0.10.36
./node_modules/.bin/mocha -C --debug-brk

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: spawn ENOENT
    at errnoException (child_process.js:1011:11)
    at Process.ChildProcess._handle.onexit (child_process.js:802:34)
make: [test-debug] Error 8 (ignored)",wenzowski,NONE,2015-03-09 11:16:38+00:00,True,2015-03-09 13:00:05+00:00,0.07,,2,3,2015-03-09 11:17:09+00:00,0.0,wenzowski,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1588,"`""before each"" hook` messages do not include any information on cause of error","Where the message 1) ""before each"" hook in red appears, there is no indication of the cause of the message - whether it's:

a timeout
a broken assertion
An Error being thrown
done() being called with a truthy err
Something else

The docs also don't seem to cover handling these errors.",mikemaccana,NONE,2015-03-09 12:05:34+00:00,True,2015-03-14 21:18:07+00:00,5.38,,3,3,2015-03-14 21:18:07+00:00,5.38,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1589,before blocks outside of describe blocks aren't scoped to file,"Given:
// File A
require('./spec-helper');
before(function(){
    this.someVar = 1;
});
describe(...);

// File B
require('./spec-helper');
before(function(){
    console.log(this.someVar); //=> 1
});
describe(...);

The before blocks the exist outside of the files' ""root"" describe blocks are being invoked with a shared context. Shouldn't the running context for a test be clean per file?",jasonkarns,NONE,2015-03-09 18:38:45+00:00,True,2015-03-09 18:57:48+00:00,0.01,,2,1,2015-03-09 18:57:48+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1592,mocha.js browser version: support for third party reporters,"I am having trouble requiring new reporters using the browser based version of mocha.js. the require object and associated methods seem to be locked away behind the IEFE that surrounds mocha. If this is wrong, feel free to enlighten me.
Also, the process.stdout.write() stub is missing in the browser version of mocha. This makes reporters like JSONreporter, which is included inside the IIFE fail with no output.
Thanks",errold32,NONE,2015-03-12 00:56:50+00:00,True,2015-04-09 17:08:59+00:00,28.68,,3,6,2015-03-16 20:37:49+00:00,4.82,errold32,NONE,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1593,How to report a failed test manually? (globally),"Hello,
I'm working on a WinJS Windows 8 app and MochaJS is mostly running great.
My problem comes with a global exception is raised. WinJS does not use global.onerror to trap errors, but WinJS.Application.onerror.
I can handle the error in WinJS.Application.onerror, but have not yet figured out a way to tell mocha about this exception and allow it to fail the currently running test.
Any thoughts?",staxmanade,NONE,2015-03-12 04:54:39+00:00,True,2015-03-14 21:23:40+00:00,2.69,,2,3,2015-03-14 21:08:47+00:00,2.68,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1594,_mocha not work under mac os,"Error Info:
./node_modules/.bin/_mocha: line 1: /Applications: is a directory
./node_modules/.bin/_mocha: line 2: LICENSE: command not found
./node_modules/.bin/_mocha: line 3: node_modules/: is a directory
./node_modules/.bin/_mocha: line 5: syntax error near unexpected token `('
./node_modules/.bin/_mocha: line 5: `var program = require('commander')'
make: *** [test] Error 2
Solution:
Add this line to the top of _mocha file
#!/usr/bin/env node",calidion,NONE,2015-03-13 03:30:11+00:00,True,2015-03-13 05:52:03+00:00,0.1,,3,5,2015-03-13 04:26:46+00:00,0.04,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1596,On timeout 'after' or 'afterEach' doesnt run,"I had one asyn test which fails because the operation timeout. But what I saw was the after and afterEach did not run after that.
Since it is important in my case because I do some clean up in those steps.
Is this desired behavior or its a bug?",gyandeeps,CONTRIBUTOR,2015-03-13 22:32:29+00:00,True,2015-03-14 20:06:15+00:00,0.9,,2,7,2015-03-13 23:18:42+00:00,0.03,danielstjules,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1604,bug with dynamic skip functionality,"I'm getting error with using dynamic skip() functionality with asyn function. Is this a bug or I'm doing something wrong?
    it('should skip after callback', function(done){
        var self = this;
        var asyncFunc = function(cb) {
            setTimeout(cb, 1000);
        };

        asyncFunc(function() {
            self.skip();
            throw new Error('never thrown');
        });
    })
Here's error I'm getting:
  1) skip in test should skip after callback:
     Error: the object {
  ""message"": [undefined]
  ""uncaught"": true
} was thrown, throw an Error :)
      at Runner.fail (/usr/local/lib/node_modules/mocha/lib/runner.js:207:11)
      at Runner.uncaught (/usr/local/lib/node_modules/mocha/lib/runner.js:580:8)
      at process.uncaught (/usr/local/lib/node_modules/mocha/lib/runner.js:609:10)
      at process.EventEmitter.emit (events.js:95:17)
      at process._fatalException (node.js:272:26)",ghughal,NONE,2015-03-16 21:13:02+00:00,True,2016-11-26 01:51:07+00:00,620.19,,6,8,2015-03-16 22:54:06+00:00,0.07,a8m,CONTRIBUTOR,0,3,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1605,[Question] Purpose of process.exit(failures); when running programmatically,"In the wiki for running Mocha programmatically (https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically), there is a strange bit of code at the end and I can't determine its purpose:
process.on('exit', function () {
  process.exit(failures);
});

According to the Node docs for the exit event, the snippet above seems to do nothing other than exit with the same error status that the process would have exited with in the first place.
I could see this being more useful if it were perhaps:
process.on('exit', function () {
  if (failures > 0) {
    console.log(failures, 'Failing Tests');
  } else if (failures === 0) {
    console.log('All Tests Passed!');
  }
});

I'm not very experienced with Node, so is there some reason for having these lines which I'm not understanding?",IanVS,NONE,2015-03-17 01:30:37+00:00,True,2015-03-17 01:56:40+00:00,0.02,,2,8,2015-03-17 01:38:34+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1606,Tests throw an error in IE8,"Have been running tests on numerous browsers and all has been running fine. Have now come to run the tests on IE8. The tests begin to run and then stop.
The error I see in the console is
'undefined' is not null or object
and it points to this code in the debug, at the } catch (err) {
Runner.prototype.runTest = function(fn){
  var test = this.test
    , self = this;

  if (this.asyncOnly) test.asyncOnly = true;

  try {
    test.on('error', function(err){
      self.fail(test, err);
    });
    test.run(fn);
  } catch (err) {
    fn(err);
  }
};
This is the block of code that is running at the time, I believe but I've run out of IE testing time..
        var  maxLength = Math.pow(2, 32) - 1,
              testSubject1 = [2, 3, undefined, true, 'hej', null, false, 0, , 9];
              testSubject2 = [];
              testSubject3 = [ , , ];

        it('should have a correct length between 0 and ' + maxLength, function () {
            var  max = [];

            expect(function () {
                max[maxLast] = 'ok';
            }).to.not.throwException();

            expect(max.length).to.be(maxLength);

            max = [];
            expect(function () {
                max.length = maxLength;
            }).to.not.throwException();

            expect(max.length).to.be(maxLength);

            testValue = 10;
            expect(testSubject1.length).to.be(testValue);

            testValue = 0;
            expect(testSubject2.length).to.be(testValue);

            testValue = 2;
            expect(testSubject3.length).to.be(testValue);
        });
The blocks before the one above output results in the browser. The block after the above, in case needed is
        it('should throw RangeError if length is set to < 0', function () {
            expect(function () {
                var max = [];

                max.length = -1;
            }).to.throwException(function (e) {
                expect(e).to.be.a(RangeError);
            });
        });
I am using the a copy of the current master.
Any pointers to what the problem could be? Is it a mocha problem?
Update: I have just tried the latest release (2.2.1) and it does not have the problem.",Xotic750,NONE,2015-03-18 00:30:37+00:00,True,2015-03-23 06:25:44+00:00,5.25,,3,8,2015-03-22 16:50:06+00:00,4.68,dasilvacontin,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1607,Tests failing because mocha itslef...,"/*
This simple test should pass but it simple fails because of mocha . Also, very strange but  the order of calls in setTimeout function create various wrong behaviours.
*/
function EventDispatcher(){
    var _callback = null;
    this.dispatch = function(){

        _callback();
    }

    this.on = function(type, callback){
        _callback = callback;
    }
}

var clientDoctor        = new EventDispatcher();
var clientPatient       = new EventDispatcher();

var clientDoctor2       = new EventDispatcher();

describe(""Test notification clientDoctor2"" , function(){

    it(""Should dispatch clientDoctor2"", function(done){
        clientDoctor2.on(""Notifications.js"", function(){
            done();
        });
    })
});


describe('Test notification for both doctor and patient', function() {

    it(""Should dispatch clientDoctor"", function(end){
        clientDoctor.on(""RequestAccess.js"", function () {
            end();
        });
    })

    it(""Should dispatch clientPatient"", function(end){
        clientPatient.on(""RequestAccess.js"", function () {
            end();
        });
    })
});


setTimeout(function(){
    console.log(""Dispatching..."");
    clientDoctor2.dispatch();
    clientDoctor.dispatch();
    clientPatient.dispatch();
}, 100)
Link to code: https://github.com/salboaie/mocha-fail/blob/master/MochaFail.js",salboaie,NONE,2015-03-18 16:16:16+00:00,True,2015-03-19 09:48:06+00:00,0.73,,3,7,2015-03-18 17:08:27+00:00,0.04,danielstjules,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1608,Add support for nativescript,https://www.nativescript.org/,gngeorgiev,NONE,2015-03-19 09:01:28+00:00,True,2015-03-28 02:18:09+00:00,8.72,,4,4,2015-03-19 10:07:15+00:00,0.05,dasilvacontin,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1609,Infinite loops seem to escape timeouts,"I wrote a test where the fail condition would be an infinite loop. However, infinite loops seem to escape the normal mocha timeout. See trivial test case below:
expect = require(""chai"").expect

describe(""loops"", function() {
    it(""does timeout"", function(done) {
        setTimeout(done, 3000);
    });

    it(""should timeout"", function(done) {
        while (true) {}
        done();
    });
});
The ""does timeout"" test fails as expected, but the ""should timeout"" test runs forever.",akrs,NONE,2015-03-19 22:31:06+00:00,True,2015-03-23 05:37:17+00:00,3.3,,4,6,2015-03-20 03:36:39+00:00,0.21,akrs,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1612,"Mocha does not call ""global after"" if a test's before function returns failure.","I have following format:
before <-- global
after <-- global
describe(
beforeEach();
afterEach();
it();
it();
)
If beforeEach returns failure, global after is not called. We need to in our situation to clean up things in global before. Is this a bug or Mocha just behaves this way?",psinghsp,NONE,2015-03-20 22:59:30+00:00,True,2015-03-28 02:14:35+00:00,7.14,,3,3,2015-03-23 05:28:59+00:00,2.27,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1614,String diffs not shown anymore when using node assert.equal,"I created a gist that reproduces the issue for me on OS X with node 0.10.32:
https://gist.github.com/mantoni/e2927ced1484f01b1fb8
Thanks for looking into it!",mantoni,CONTRIBUTOR,2015-03-21 20:35:35+00:00,True,2015-03-26 12:15:05+00:00,4.65,,5,19,2015-03-21 21:02:17+00:00,0.02,a8m,CONTRIBUTOR,0,3,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1620,How to implement setTimeout in TDD user-interface,"I need setTimeout in TDD user-interface.
I want to do something like,
suite('Sample Suite', function() {
    suite('sample timeout test', function() {
        test('should know 5+5', function() {
            setTimeout(function() {
                expect(11).to.equal(10);
            }, 1000);
        });
    });
});

This test case should fail but it is passing and giving error in console like Uncaught AssertionError: expected 11 to equal 10
How can I force this test case to fail ?",Virbhadrasinh,NONE,2015-03-23 13:15:52+00:00,True,2015-03-28 02:14:20+00:00,4.54,,3,3,2015-03-23 13:24:56+00:00,0.01,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1623,scoped bail and multiple test files,"What I would like to do is execute mocha sometimes with the bail option on and sometimes off, something like this
mocha --check-leaks -u bdd -t 140000 -b -R tap tests/*.js
and
mocha --check-leaks -u bdd -t 140000 -R tap tests/*.js
The test directory has numerous test files. There is one file, let's call it array.js that I do not want to bail on when mocha is run with -b, and so I went and set the option in-file like so
    describe('Native array', function () {
        this.bail(false);

Now with -b, even if one of the tests in this file (array.js)  fail then it continues to run all the tests in this file (array.js). That's great and that's what I want. However, if a test did fail in this file (array.js) then I was expecting the rest of the files to execute, but they don't.
So I guess I'm looking for advice on how to achieve this, and if it is not currently possible then this is an option that I would like to have available.
Many thanks.",Xotic750,NONE,2015-03-24 20:55:13+00:00,True,2015-04-01 19:59:39+00:00,7.96,,5,19,2015-04-01 18:45:38+00:00,7.91,dasilvacontin,CONTRIBUTOR,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1624,Comparing buffers hangs when computing the diff report,"I am having the very same issue as #1433 mocha 2.2.1 and chai 2.1.1. When 2 buffers are not equal, the diff computation hangs and CPU gets crazy.
Any chance of a regression bug here?
Sample code to reproduce this:
var chai = require('chai');
var expect = chai.expect;

// chai.config.showDiff = false; // Without this line, the diff generation hangs

describe('Testing buffer equality', function () {
  it('should not take foreveeeeeer', function () {
    var file1 = Fs.readFileSync('/tmp/file1');
    var file2 = Fs.readFileSync('/tmp/file2');
    expect(file1).to.deep.equal(file2);
  });
});
At this point of writing, I am unclear if this issue comes from mocha or from chai, though...",astorije,CONTRIBUTOR,2015-03-24 21:29:14+00:00,False,,,,7,15,2015-03-24 21:36:20+00:00,0.0,a8m,CONTRIBUTOR,1,3,0,3,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1625,dynamic skip -- works in some places...,"Thanks very much for dynamic skip!
It works well for me like this:
describe ""foo"", ->
   beforeEach ->
       @skip()
    it ""should foo"", ->

However, it doesn't work if the ""beforeEach is in a wrapping suite:
describe ""foo"", ->
   beforeEach ->
       @skip()
    describe ""bar"", ->
        it ""should foo"", ->

Also doesn't seem to work in ""before"".",shaunc,NONE,2015-03-25 01:47:12+00:00,True,2019-01-24 14:28:35+00:00,1401.53,,6,10,2015-03-25 02:05:30+00:00,0.01,danielstjules,CONTRIBUTOR,2,2,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1627,Do not hard code err instanceof Error checks,"Specifically this line: https://github.com/mochajs/mocha/blob/master/lib/runner.js#L205
Long story short, err may be a valid Error instance but in situations such as iframes each window will have its own Error object, and this will therefore always always fail.
I would suggest taking after what lodash does in its isError function.
It just ensures its ""object like"", has a string for message property, and is [object Error]
//lodash isError implementation
function isError(value) {
  return (isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag) || false;
}",brian-mann,NONE,2015-03-26 04:38:51+00:00,True,2015-06-28 01:14:51+00:00,93.86,,4,7,2015-03-26 04:57:16+00:00,0.01,danielstjules,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1628,Allow before() hook to be called before describe() also instead of only it() OR beforeDescribe() hook,"Hello,
First of all, Mocha is a GREAT testing framework. It has amost everything except one feature which i would like it to have.
If we define a code in before() hook, it only gets executed before it(),
So called before() hook before describe() or added a beforeDescribe() hook.
Is it possible to add?",MayurVirkar,NONE,2015-03-26 07:10:11+00:00,True,2015-03-28 01:59:24+00:00,1.78,,11,27,2015-03-26 15:36:26+00:00,0.35,Pampattitude,NONE,2,3,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1629,CLI doesn't support the `-v` option,"➜  Desktop  mocha -v
  error: unknown option `-v'",dasilvacontin,CONTRIBUTOR,2015-03-26 10:31:44+00:00,True,2015-03-26 12:14:47+00:00,0.07,,4,8,2015-03-26 11:53:26+00:00,0.06,a8m,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1632,a more descriptive/user-friendly error when describe title is not provided,"describe(function () {
    before(function () {
        this.credentials = {id: 123};
    })

    it('should work', function () {
        expect(this.credentials.id).to.equal(123);
    })
})
/usr/local/lib/node_modules/mocha/lib/interfaces/bdd.js:49
      fn.call(suite);
         ^
TypeError: Cannot call method 'call' of undefined
    at context.describe.context.context (/usr/local/lib/node_modules/mocha/lib/interfaces/bdd.js:49:10)
    at Object.<anonymous> (/Users/dasilvacontin/temp/test/kek.js:1:63)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at /usr/local/lib/node_modules/mocha/lib/mocha.js:187:27
    at Array.forEach (native)
    at Mocha.loadFiles (/usr/local/lib/node_modules/mocha/lib/mocha.js:184:14)
    at Mocha.run (/usr/local/lib/node_modules/mocha/lib/mocha.js:405:31)
    at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/_mocha:405:16)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:906:3",dasilvacontin,CONTRIBUTOR,2015-03-27 08:25:10+00:00,True,2016-08-13 13:51:58+00:00,505.23,,3,3,2015-03-27 08:27:07+00:00,0.0,dasilvacontin,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1633,new ui / reporter thing,"I just created a new ui / reporter thing.
It will make the results pretty by sending them to the browser..
It combines the debug level of the console (it watches stdout and stderr)
with the pretty output of a browser ui.
report-viewer
I would add it to the wiki if I may (Add-ons -> Interfaces & Reporters ?)",paulpflug,NONE,2015-03-27 22:23:38+00:00,True,2015-03-28 15:52:26+00:00,0.73,,3,4,2015-03-27 23:15:18+00:00,0.04,danielstjules,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1635,afterEach halts suite,"This is a common pattern with tools like sinon or nock - to have afterEach do some standard verification at the end of each test.
I'm fairly sure this used to work - not sure what's changed.
var assert = require('assert');

describe(""afterEach"", function() {
    var verificationFlag;
    beforeEach(function() {
        verificationFlag = 0;
    });
    afterEach(function() {
        assert.equal(verificationFlag, 1);
    });

    it(""0"", function() { })
    it(""1"", function() { verificationFlag = 1 })
    it(""2"", function() { verificationFlag = 2 })
});
Expected output: 3 tests, 3 failures
Actual output: 1 test, 1 pass, 1 fail (from hook)",glenjamin,CONTRIBUTOR,2015-03-31 13:56:25+00:00,False,,,,15,43,2015-04-01 12:06:59+00:00,0.92,m-reiniger,NONE,1,3,0,12,"['confirmed-bug', 'help wanted', 'semver-major']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
1636,update documentation of `--async-only` for v2.3.0,It can be now satisfied by returning a promise. Related: #1490.,dasilvacontin,CONTRIBUTOR,2015-03-31 16:53:07+00:00,True,2015-08-31 05:22:09+00:00,152.52,v2.3.0,2,3,2015-04-09 17:24:58+00:00,9.02,boneskull,MEMBER,1,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1637,Isolation of Test scripts,"I have two test scripts in my tests path server-side.js and client-side.js.  Both utilize React and a set of related modules for an ""isomorphic"" dev experience. Great.  Individually, both do their thing, and tests pass. Beautiful.  When I allow both to run, that is I don't comment out the other one, the server-side fails. Why, oh, why?  The problem seems to stem from using React's TestUtils library on the client-side , which may be making unknown changes to the node environment (I've already gone down the road of manually setting/unsetting global.window and global.document for similar reasons).  That sucks, and it's non-obvious what it's doing.  So, yes, I should complain to ReactJS that they need proper tear-downs for whatever environmental modifications they are making.  In the mean time though, I'd like my testing framework to be able to run these in isolation.",robcolburn,NONE,2015-04-01 00:41:58+00:00,True,2015-04-01 18:31:13+00:00,0.74,,3,6,2015-04-01 01:17:23+00:00,0.02,dasilvacontin,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1638,setting currentTest in a hook is incorrect,"This line:

  
    
      mocha/lib/runner.js
    
    
         Line 263
      in
      41a2119
    
    
    
    

        
          
           hook.ctx.currentTest = self.test; 
        
    
  


This is completely wrong based on the when self.test is defined.
Currently self.test is defined when a test emits its test event here:

  
    
      mocha/lib/runner.js
    
    
         Line 462
      in
      41a2119
    
    
    
    

        
          
           self.emit('test', self.test = test); 
        
    
  


This has the following problems:

A beforeAll hook will not have hook.ctx.currentTest defined, since self.test has not been assigned to the runner yet.
Nested suites which have a beforeAll hook will actually set the hook.ctx.currentTest to the PREVIOUSLY run test, based on the same logical problem as the previous bullet point.
beforeEach hooks do not suffer from this problem because tests emit their test event prior to the hooks being invoked, thus setting self.test on the runner.

The structure I'm referring to looks like this:
before ->
  ## this.currentTest is undefined

describe ""outer suite"", ->
  it ""foo"", ->

  context ""nested [0me]"", ->
    before ->
      ## this.currentTest will refer to ""foo"" test and not ""bar"" test

    it ""bar"", ->",brian-mann,NONE,2015-04-02 15:33:41+00:00,True,2019-01-28 18:55:51+00:00,1397.14,,5,5,2015-04-16 20:05:10+00:00,14.19,danielstjules,CONTRIBUTOR,1,1,0,3,"['confirmed-bug', 'help wanted', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1639,How to test an ES7 async function,"Hey guys,
I use ES7 async functions and tried to debug them. Having this method to test:
// ...
const local = new WeakMap();

export default class User {

  // ...

  async password(password) {
    if (!password) return local.get(this).get('hash'); // remove this for security reasons!
    if (password.length < 6) throw new Error('New password must be at least 6 characters long');
    if (!password.match(passwordPattern)) throw new Error(`New password must match ${passwordPattern}`);
    local.get(this).set('hash', await Password.hash(password));
  }

  // ...

}
and this test case:
import chai from 'chai';
import chaiAsPromised from 'chai-as-promised';

import User from '../../../server/User';

chai.use(chaiAsPromised);
const expect = chai.expect;

describe('.password()', () => {

  const testuser = new User({username: 'Testuser', password: '123abc'});

  // FINDME
  it(`should throw when too short`, () => {
    return expect(testuser.password('1a')).to.eventually.throw();
  });

  // ...

});
...the test case does not catch the error thrown - instead the case succeeds first and fails later (asynchronously) with an uncaught error because the method threw in the scope of the it() function not the expect().
Any suggestions or advice?
Thanks in advance!
P.S.: Also I created a stackoverflow issue for this a few days ago, but now answer so far. Th. t's why I am calling you guys http://stackoverflow.com/questions/29334775/how-to-test-an-es7-async-function-using-mocha-chai-chai-as-promised",krnlde,NONE,2015-04-02 18:56:33+00:00,True,2015-04-05 11:27:38+00:00,2.69,,1,2,2015-04-02 19:00:12+00:00,0.0,krnlde,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1640,jekyll gh-pages,"This is in progress.  If anyone knows how I can use syntax highlighting and valid GFM markdown in Jekyll, please let me know.",boneskull,MEMBER,2015-04-06 18:44:55+00:00,True,2015-07-05 21:46:29+00:00,90.13,,3,6,2015-04-06 19:41:17+00:00,0.04,dasilvacontin,CONTRIBUTOR,1,2,0,0,"['chore', 'documentation']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1642,npm release,"Last release was on March 9. There's a page full of commits waiting to be released.
Afaik, this has been requested at #1626 and at #1616.
/cc @boneskull @travisjeffery",dasilvacontin,CONTRIBUTOR,2015-04-07 07:48:13+00:00,True,2015-04-07 18:53:42+00:00,0.46,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1643,Error: timeout of 1.7976931348623157e+308ms exceeded.,"I set this.timeout(Number.MAX_VALUE); to see what would happen, and my tests instantly fail with the following error:
Error: timeout of 1.7976931348623157e+308ms exceeded. Ensure the done() callback is being called in this test.

I definitely didn't wait that long",callumacrae,CONTRIBUTOR,2015-04-07 15:25:12+00:00,True,2015-04-07 16:11:55+00:00,0.03,,3,4,2015-04-07 16:11:55+00:00,0.03,dasilvacontin,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1644,throw an exception when using a big value for timeout,"The exception should remind about the behavior of setTimeout when the timeout value is greater than 2^31. Related: #1643.
This would be a breaking change, and it should be added on a major version.",dasilvacontin,CONTRIBUTOR,2015-04-07 18:43:10+00:00,True,2015-04-16 19:56:32+00:00,9.05,v3.0.0,4,3,2015-04-10 11:18:38+00:00,2.69,callumacrae,CONTRIBUTOR,0,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1645,2.2.3 no longer exposes suite global,"suite is no longer a global, is this intentional?
/Users/sebmck/Projects/babel/core/test/core/api.js:6
suite(""api"", function () {
^
ReferenceError: suite is not defined",sebmck,NONE,2015-04-08 01:05:29+00:00,True,2015-04-08 07:33:51+00:00,0.27,,6,18,2015-04-08 01:08:10+00:00,0.0,sebmck,NONE,1,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1646,Meta test generation fails to behave as expected when using promises,"I'll preface this by saying that I know that I'm taking the meta test generation a bit farther than is probably intended.
I'm attempting to build a regression test suite using mocha, and we need to be able to compose and parameterize mocha test suites. Here's a simple example:
var expect = require(""chai"").expect,
    Q = require(""q"");

var Workflow1 = {},
    Workflow2 = {};

Workflow1.run = function(param) {
  var deferred = Q.defer();

  describe(""Example workflow1"", function() {
    it(""should have an assertion"", function() {
      expect(param).to.be.an(""object"")
    });

    it(""should have another assertion"", function() {
      expect(10).to.not.equal(20);
    });

    after(function() {
      deferred.resolve();
    });
  });

  return deferred.promise;
}

Workflow2.run = function() {
  var deferred = Q.defer();

  describe(""Example workflow2"", function() {
    it(""should have an assertion"", function() {
      expect(2).to.equal(2)
    });

    it(""should have another assertion"", function() {
      expect(10).to.not.equal(20);
    });

    after(function() {
      deferred.resolve();
    });
  });

  return deferred.promise;
}

var Manifest = {};

Manifest.run = function() {
  Workflow1.run({blah: ""blah""}).then(function() {
    debugger;
    Workflow2.run().then(function() {
      debugger;
    });
  });
};

Manifest.run();
However, if you run a file with this in it using mocha debug path/to/file.js, it will only run the first workflow. It will execute Workflow2.run, but the tests within will not be executed.
However, if you nest the deferred.resolve() statement within another describe block, as seen in this gist:
https://gist.github.com/carrollgt91/9f2a74a9b8faf31a93da
it works as intended, and will correctly chain the tests. That being said, it requires you to hack it a bit when you don't actually need the nested describe block there.
My first thought is I should probably use the programmatic interface to get this sort of fine grained control over what Mocha is running, but I would love the ability to maintain the BDD syntax within my workflows.",carrollgt91,NONE,2015-04-08 15:00:50+00:00,True,2017-06-08 03:02:11+00:00,791.5,,5,7,2015-04-09 17:04:33+00:00,1.09,boneskull,MEMBER,1,1,0,4,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1649,Is it possible to describe a 'skip'?,"Similar to JUnit's Ignore annotation, it would be nice to be able to describe a skip, e.g. by overloading to allow for an extra descriptive piece of text that could be output with the test results.
Happy to look into this, but as per contrib guidelines said I'd raise it for discussion first.
Something like:
it.skip('should display results', function(){
    //…
})

becoming
it.skip('skipped until bug-fix 123 implemented', 'should display results', function() {
    //…
})

Which could output something along the lines of:


should display results (skipped until bug-fix 123 implemented)

1 pending

Best
Dave",another-dave,NONE,2015-04-09 10:15:47+00:00,True,2015-04-09 17:00:39+00:00,0.28,,3,4,2015-04-09 11:52:28+00:00,0.07,dasilvacontin,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1651,better support for assertion libraries,"Mocha could have a simple way to plug in assertion counting, assertion libraries could then reset the counter on beginning of each test.
Default number of assertions could be guessed from simply searching ""assert"" or some other word provided by assertion library from within the string of the test content.",Ciantic,NONE,2015-04-13 09:31:58+00:00,False,,,,4,10,2015-04-16 19:35:53+00:00,3.42,danielstjules,CONTRIBUTOR,1,2,0,1,"['feature', 'future', 'nice-to-have']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1656,Using sinon.js sinon.stub() or sinon.spy() does not work with global functions in Safari,"I have run into an issue with global functions and trying to stub or spy on them with sinon.js. It seems that whatever the Safari launcher is doing to start Safari makes it so that there are two instances of global functions.
For example, if I create a function like so:
function myFunc() {
  return true;
}

console.log(window.myFunc === myFunc);  //-> true

Then use sinon to stub or spy that function, there are now two instances of myFunc.
sinon.stub(window, 'myFunc');  // spying has the same problem

console.log(window.myFunc === myFunc);  //-> false

The myFunc function does not get stubbed, but the window.myFunc function does. This causes problems as calls to myFunc will still call the original function and not the stubbed one.
I have created a few test cases to demonstrate the problem. This jsFiddle shows that on all browsers including Safari, using just qunit and sinon.js and stubbing a global function behaves as expected.
I also created two test repositories using karma, one that uses Jasmine and the other that uses Mocha, to test the exact same code. In both cases, the test fail in Safari after stubbing the global function.
I've had to get around this issue by stubbing out the window function, then making the non-window function equal to the the window function. Then when I restore the function, I have to make the non-window function equal to the window function.
describe('test', function() {

  beforeEach(function() {
    sinon.stub(window, 'myFunc');
    myFunc = window.myFunc;
  });

  afterEach(function() {
    myFunc.restore();  // this actually doesn't restore the myFunc function, only window.myFunc
    myFunc = window.myFunc;
  });

});

I posted this in karma-runner/karma-safari-launcher#11, but since it hasn't gotten any comments I'm moving it to here just for visibilities sake.",,NONE,2015-04-16 16:10:14+00:00,True,2015-04-16 18:14:20+00:00,0.09,,1,2,2015-04-16 18:14:20+00:00,0.09,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1658,Error information not printed for errors thrown while evaluating using vm.runInContext,"It looks like the runtime formats the error message in a different way for vm.runInContext and mocha seems to have trouble and doesn't print the message at all.
Test:
var vm = require('vm');
require('should');

describe(""BDD framework"", function(){
    it(""throws an undefined error"", function() {
        //(function() {
            undefined();
        //}).should.throw(/undefined is not a function/);
    });

    it(""throws an undefined error from a runInContext"", function() {
        //(function() {
            vm.runInContext('undefined();', vm.createContext({}), {showErrors: true});
        //}).should.throw(/undefined is not a function/);
    });
});
Mocha output:
  0 passing (19ms)
  2 failing

  1) BDD framework throws an undefined error:
     TypeError: undefined is not a function
      at Context.<anonymous> (spec/mocha-problem-spec.js:7:13)

  2) BDD framework throws an undefined error from a runInContext:
     Error: the error {} was thrown, throw an Error :)

Jasmine output:
Failures:
1) BDD framework throws an undefined error
  Message:
    TypeError: undefined is not a function
  Stack:
    TypeError: undefined is not a function
        at Object.<anonymous> (/Users/mikebush/Workspace/spec-verify/spec/mocha-problem-spec.js:7:13)

2) BDD framework throws an undefined error from a runInContext
  Message:
    TypeError: evalmachine.<anonymous>:1
    undefined();
    ^
    undefined is not a function
  Stack:
    evalmachine.<anonymous>:1
    undefined();
    ^
    TypeError: undefined is not a function
        at evalmachine.<anonymous>:1:1
        at Object.exports.runInContext (vm.js:64:17)
        at Object.<anonymous> (/Users/mikebush/Workspace/spec-verify/spec/mocha-problem-spec.js:13:16)",platy,NONE,2015-04-17 16:35:33+00:00,True,2015-09-13 09:36:42+00:00,148.71,,3,3,2015-04-26 18:10:38+00:00,9.07,boneskull,MEMBER,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1660,Unable to assert invalid dates,"When asserting something that may return an invalid date mocha will error trying to report the invalid date due to calling toISOString on an invalid date.
Example (using should):
describe('mocha', function() {
  it('should not error when comparing invalid dates', function() {
    new Date('').should.equal(new Date(''));
  })
})
I can submit a PR if it helps, I think the stringify utility just needs to call toString() in the event that the date is invalid, which will result in ""[Date: Invalid Date]""",meandmycode,NONE,2015-04-18 14:42:43+00:00,True,2015-04-18 17:03:29+00:00,0.1,,3,3,2015-04-18 15:13:25+00:00,0.02,a8m,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1664,Async tests without calling 'done' always displayed as succeeded in UI,"return WinJS.Promise.timeout(1, promise).should.eventually.be.rejectedWith(/Timeout reached/) does print the failure in the console but in the UI the test is displayed as being successful.
WinJS.Promise.timeout(1, promise).should.eventually.be.rejectedWith(/Timeout reached/).and.notify(done) works as expected and displays the test in the UI als failed.",pke,NONE,2015-04-20 15:37:24+00:00,True,2016-07-21 14:06:35+00:00,457.94,,3,9,2015-04-26 18:06:42+00:00,6.1,boneskull,MEMBER,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1667,Timing out a finished test makes no sense,"Specifically this line: https://github.com/mochajs/mocha/blob/master/lib/runnable.js#L221
Why would this ever make sense to check?
If the test is going to time out, it already has had a setTimeout function which fails the test.  If the test hasn't failed, why would you then check to see if it has timed out?  It hasn't timed out!
In previous versions of Mocha this wasn't a problem, but now this one line creates havoc in the following situations:
You use debugger
Going into the debugger is basically 100% guaranteed timeout.  The duration of the test will ALWAYS exceed its start time.  This wasn't a problem before, because debugger would halt javascript execution and the real setTimeout function wouldn't be ""counted down"".  This was ideal.  Now its untenable.
You change timeouts within a test
I have a situation where I am modifying a runnable's timeout dynamically.  One piece of code may extend it to 30s, another may reduce it down to under 2 secs.  The problem with this is after each command successfully runs I reset the timeout back to the original.  But by the time the test passes the test will always fail at this last step because its duration will always exceed the current timeout value.
In what situation could the test ever have timed out without the actual timeout setTimeout function running?",brian-mann,NONE,2015-04-21 15:23:20+00:00,True,2017-06-08 03:02:09+00:00,778.49,,2,4,2015-04-21 20:22:47+00:00,0.21,boneskull,MEMBER,1,0,0,2,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1668,consider adding mocha.opts parsing to the API,"Some folks using gulp-mocha would like to be able to re-use mocha.opts when invoking mocha via gulp.  Looks like since parsing is done in bin/options.js, not only is it not part of Mocha's accessible API, but that function modifies process.argv rather than returning an options hash.
Discussion at sindresorhus/gulp-mocha#44
I imagine the case would be the same for other builders like grunt and broccoli.",thom-nic,NONE,2015-04-24 15:41:38+00:00,True,2015-04-26 17:59:03+00:00,2.1,,2,1,2015-04-26 17:59:03+00:00,2.1,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1669,Exceptions outside tests are silent when using --delay flag ,"Here's a sample.
When using the ""--delay"" flag, exceptions outside of a test are silent. For context, I'm using delay in order to load my test files with requirejs, which the timeout is meant to simulate.
When running without --delay (and removing the timeout), the exception is not silent, so I'm assuming this is unintentional.",BrennanRoberts,NONE,2015-04-24 19:16:11+00:00,True,2015-09-13 19:58:43+00:00,142.03,,3,2,2015-04-26 18:00:19+00:00,1.95,boneskull,MEMBER,1,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1670,Should `if (err) throw err` be `if (err) throw done(err)`?,"http://mochajs.org/#asynchronous-code
Asynchronous code

Testing asynchronous code with Mocha could not be simpler! Simply invoke the callback when your test is complete. By adding a callback (usually named done) to it() Mocha will know that it should wait for completion.

describe('User', function(){
  describe('#save()', function(){
    it('should save without error', function(done){
      var user = new User('Luna');
      user.save(function(err){
        if (err) throw err;
        done();
      });
    })
  })
})

Just thinking if (err) throw err; should be if (err) throw done(err);, right?
(PS: Can't find the correct file to create a pull request)",freewind,NONE,2015-04-25 02:55:37+00:00,True,2015-04-25 11:25:14+00:00,0.35,,2,3,2015-04-25 11:25:14+00:00,0.35,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1671,How to return value in async testing via `done`?,"I am testing my apis by using mocha. Since calling to my apis needs authorization, I call the authorization api to get the access token in the beforeEach hook. I wrap the doFakeAuth function in the utils.js file and export it, which is denoted as follows.
exports.doFakeAuth = function (done) {
  var route = '/v1/auth/weibo';
  var body = {
    weibo_uid: 'test_weibo_uid_full_data',
    avatarurl: 'http://fake_weibo',
    birth_year: 1995,
    birth_month: 5,
    birth_day: 8,
    gender: 2,
    nickname: 'cw',
    signature: 'i will win'
  }

  request(url)
    .post(route)
    .send(body)
    .expect('Content-Type', /json/)
    .expect(200)
    .end(function (err, res) {
      if (err) throw err;
      //
      res.body.should.have.property('user');
      res.body.should.have.property('token');
      res.body.user.should.have.length(24);
      return res.body.token;
      done();
    });
}

However, I cannot get the res.body.token in the async call. I also tried
done(res.body.token);

But it said Error: done() invoked with non-Error: <token detail>.
So how can I get the token in the caller.",chenweiyj,NONE,2015-04-25 04:07:11+00:00,True,2015-04-25 19:19:50+00:00,0.63,,3,4,2015-04-25 19:19:49+00:00,0.63,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1672,Hijacking and silencing the console with beforeEach / afterEach,"For some tests I find myself needing to hijack the console (or stdout) and silence it. It would be ideal if I could do this in the beforeEach / afterEach events but that doesn't really work, see the test case below:
'use strict';
const expect = require('chai').expect;

describe('hijacking the console with beforeEach / afterEach', function() {
  const consoleLog = console.log;

  beforeEach(function() {
    // hijack
    console.log = function() {};
  });

  afterEach(function() {
    // restore
    console.log = consoleLog;
  });

  it('doesn\'t work well', function() {
    console.log('this doesn\'t get logged (as expected), but the test case won\'t either');
    expect(true).to.equal(true);
  });
});

describe('hijacking the console per test case', function() {
  const consoleLog = console.log;

  it('works fine but is repetitive', function() {
    // hijack
    console.log = function() {};

    console.log('this doesn\'t get logged (as expected), but the test case will');

    // restore
    console.log = consoleLog;

    expect(true).to.equal(true);
  });
});
Check out the missing logs for the first test case:
$ mocha


  hijacking the console with beforeEach / afterEach

  hijacking the console per test case
    ✓ works fine but is repetitive


  2 passing (9ms)

It would be kind of nice if it was possible to hijack the console with beforeEach / afterEach. I wonder how others approach this, maybe there is a better pattern that I don't know of?",maximilianschmitt,NONE,2015-04-26 01:56:40+00:00,True,2015-04-26 17:53:23+00:00,0.66,,5,7,2015-04-26 03:09:48+00:00,0.05,danielstjules,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1673,disallow/warn if this.timeout() called multiple times within same test,"The following tests run to completion, but report they've timedout after period*4 ms. Is this a bug or is calling this.timeout() multiple times simply a bad idea?
'use strict';

// These are examples of how to do weird things with Mocha

describe.only('Mocha', function() {
  describe('#timeout()', function() {
    var start;

    beforeEach(function() {
      start = Date.now();
    });

    afterEach(function() {
      console.log('Duration:', Date.now() - start);
    });

    var period = 250;
    var duration = 3000;

    it('resets the test\'s timer everytime it is called (Promise syntax)', function() {
      var interval;
      var i = 0;
      interval = setInterval(function() {
        console.log('reset', i++);
        this.timeout(period*2);
      }.bind(this), period);

      return new Promise(function(resolve) {
        setTimeout(function() {
          console.log('resolve');
          clearInterval(interval);
          this.timeout(period*4);
          resolve();
        }.bind(this), duration);
      }.bind(this));
    });

    it('resets the test\'s timer everytime it is called (done syntax)', function(done) {
      var i = 0;
      var interval = setInterval(function() {
        console.log('reset', i++);
        this.timeout(period*2);
      }.bind(this), period);

      setTimeout(function() {
        console.log('done');
        clearInterval(interval);
        this.timeout(period*4);
        done();
      }.bind(this), duration);
    });
  });
});
Output:
  Mocha
    #timeout()
Mocha #timeout() resets the test's timer everytime it is called (Promise syntax)
reset 0
reset 1
reset 2
reset 3
reset 4
reset 5
reset 6
reset 7
reset 8
reset 9
reset 10
resolve
      1) resets the test's timer everytime it is called (Promise syntax)
Duration: 3005
Mocha #timeout() resets the test's timer everytime it is called (done syntax)
reset 0
reset 1
reset 2
reset 3
reset 4
reset 5
reset 6
reset 7
reset 8
reset 9
reset 10
done
      2) resets the test's timer everytime it is called (done syntax)
Duration: 3003


  0 passing (6s)
  2 failing

  1) Mocha #timeout() resets the test's timer everytime it is called (Promise syntax):
     Error: timeout of 1000ms exceeded. Ensure the done() callback is being called in this test.


  2) Mocha #timeout() resets the test's timer everytime it is called (done syntax):
     Error: timeout of 1000ms exceeded. Ensure the done() callback is being called in this test.
      at Context.<anonymous> (test/unit/spec/mocha.js:49:9)",ianwremmel,CONTRIBUTOR,2015-04-26 14:50:12+00:00,True,2016-07-03 06:17:02+00:00,433.64,,2,6,2015-04-26 18:02:19+00:00,0.13,boneskull,MEMBER,1,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1674,XUnit reporter should use process.stdout if available... fallback to console.log,"Hello
I'm running Mocha on PhantomJS using https://github.com/metaskills/mocha-phantomjs This means Mocha is not run in Node and thus has no access to fs.
Mocha-PhantomJS provides the option of dumping the reporter output to a file by redirecting process.stdout.write. Unfortunately, I'm having issues with the xunit reporter since it is using console.log.
I understand this is to maintain compatibility with browsers, but would it be desirable to check the existence of process.stdout and call it if available?
It would be a trivial PR... I would gladly prepare it but I would like to ask for your insight first:
/**
 * Write out the given line
 */
XUnit.prototype.write = function(line) {
    if (this.fileStream) { 
        // Node JS environment
        this.fileStream.write(line + '\n');
    } else if (process && process.stdout) {
        // Browser with process.stdout (as in mocha-phantomjs)
        process.stdout.write(line + '\n');
    } else {
        // Browser
        console.log(line);
    }
};",alemangui,NONE,2015-04-28 07:20:43+00:00,True,2015-12-25 17:10:07+00:00,241.41,,4,5,2015-05-12 16:58:52+00:00,14.4,boneskull,MEMBER,1,2,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1676,Impossible to only run a dynamically generated test,"I'm working inside of a very large mocha test suite with hundreds of tests, so having the ability to run a single test using .only is extremely useful during test development.
However, as far as I can tell, there's no way to mark a dynamically generated test suite as being the only one that runs. I'd really like to write some dynamically generated tests, and it's hard to run all the tests every time. Am I missing something? Is there a pattern you might suggest to get around this issue?
I expected there might be something like:
mocha = new Mocha
suite = Mocha.Suite.create mocha.suite, config.name
suite.only()
mocha.run()

I have stumbled across this pattern, but it only runs the first of my dynamically generated tests
describe.only config.name, ->
  it 'should run tests', ->
     mocha = new Mocha
     ...stuff...
     mocha.run()",ZECTBynmo,NONE,2015-04-29 20:04:08+00:00,True,2016-10-27 17:47:30+00:00,546.91,,5,5,2015-05-12 16:57:43+00:00,12.87,boneskull,MEMBER,2,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1677,Runner#fail should work with Error-like objects,"Problem
The check if (!(err instanceof Error)) at https://github.com/mochajs/mocha/blob/master/lib/runner.js#L205 causes a problem when writing tests for an Angular app using the angular-mocks module. All failed assertions and/or uncaught errors from within an inject-ed function are displayed as
the object {...} was thrown, throw an Error :)

JSFiddle: http://jsfiddle.net/tybx9zwp/
Reason
The angular.mock.inject function catches errors, wraps them in an Error-like object (which does not inherit from Error), transforms the stack property, and re-throws the wrapper object. See https://github.com/angular/angular.js/blob/master/src/ngMock/angular-mocks.js#L2416. The commit which introduced this mechanism is angular/angular.js@7e91645. The given justification is
Recent browsers, particularly PhantomJS 1.9.2 and Safari 7.0
treat the stack property as non-configurable and unwritable.

which seems reasonable.
Solution
This can of course be fixed quickly by replacing the instanceof check in Runner#fail with something like
if (!err || typeof err.stack !== 'string') {
  err = new Error('the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw something Error-like :)');
}
but it is probably also a good idea to follow Angular's example and wrap err in an Error-like object before modifying its stack on https://github.com/mochajs/mocha/blob/master/lib/runner.js#L209.
I would be happy to submit a PR to address this, please let me know if the above approach is acceptable.",igorraush,NONE,2015-04-30 07:54:23+00:00,True,2015-09-11 04:07:06+00:00,133.84,,5,6,2015-05-09 05:23:31+00:00,8.9,boneskull,MEMBER,1,2,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1679,How to Inject an Object/Variable into Mocha?,"I am working on a project where we need to start mocha from within the node application:
e.g.
var browser = new myBrowser();
var mocha = new Mocha({});
mocha.addFile('./' + file);
mocha.run();
Since we do browser automation, we need the browser handle within the it(...) function. Hence the question is how we can make the browser object available within each it() block?",benmarten,NONE,2015-04-30 12:56:08+00:00,True,2015-05-13 09:32:50+00:00,12.86,,3,2,2015-05-12 16:40:58+00:00,12.16,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1683,Large test suite just stops running,"We're using Mocha and Karma to run a large (~4000 tests) suite in Chrome. Recently, however, we have been unable to run the entire test suite. The suite simply stops after a certain number of tests have been run, with no error. Eventually a warning is logged that no communication has been received after 240 seconds.
I've attached an image of a chrome CPU profile showing what happens at the end of the test run. The call stack becomes unbelievably nested, with huge amounts of time being spent inside mocha run, callFn, and done. Eventually mocha just refuses to run any further tests, represented by the cliff at the end of the profile run. The browser prints no errors about a stack overflow or similar though.
Any suggestions as to what might be going on here?

The chrome CPU profile can be downloaded from https://dl.dropboxusercontent.com/u/24050078/CPU-20150505T115402.cpuprofile",KJTsanaktsidis,NONE,2015-05-05 01:59:53+00:00,True,2015-05-23 03:03:21+00:00,18.04,,4,8,2015-05-12 16:45:08+00:00,7.61,boneskull,MEMBER,1,2,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1684,mocha does not allow for return values from test,"done() call does not allow any other return parameter except `undefined' (i.e. no parameter at all) or Error(). Following test results in exception:
it('pass', function (done) {
    done('test finished ok');
});

The only way to pass the return value from test is to call done(null, val):
it('pass', function (done) {
done(null, 'test finished ok');
});
But then such return value is not available in custom reporter.",milanbella,NONE,2015-05-05 12:07:43+00:00,True,2015-05-12 16:40:33+00:00,7.19,,3,5,2015-05-06 09:09:15+00:00,0.88,dasilvacontin,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1685,deepEqual does not descriminate by type,"assert.deepEqual({foo:10}, {foo:'10'}); returns true.",chrisdew,NONE,2015-05-05 14:36:55+00:00,True,2015-05-05 15:27:54+00:00,0.04,,3,4,2015-05-05 15:27:54+00:00,0.04,dasilvacontin,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1687,html reporter link to specific test is broken on some special characters,"If the test title contains some special characters (for instance $ or () ) then its link in the HTML report does not work.
IMO the fix should be escaping regex here before calling encodeURIComponent(s)",amir-arad,NONE,2015-05-06 13:49:48+00:00,True,2015-07-03 01:04:53+00:00,57.47,,5,4,2015-05-13 06:01:14+00:00,6.67,benvinegar,CONTRIBUTOR,0,2,0,1,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1688,Not supporting latest V8 flags,"Mocha is not passing the latest V8 flags, including for example ""--harmony_computed_property_names"".",jclem,NONE,2015-05-06 16:19:16+00:00,True,2015-05-09 05:12:32+00:00,2.54,,4,11,2015-05-06 16:21:09+00:00,0.0,danielstjules,CONTRIBUTOR,1,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1690,Continue large test suite where I left off,"When running through a large (and slow) test suite, fixing errors one by one, it becomes tedious to run through all the passing tests each time to find the next error.
It would be great if mocha was able to keep a log of tests which had passed, so that it can quickly skip all these when running again after fixing an error.
Does anyone have any thoughts about how this could be implemented?
Thanks.",SystemParadox,NONE,2015-05-07 12:17:38+00:00,False,,,,6,9,2015-05-12 16:55:52+00:00,5.19,boneskull,MEMBER,1,2,0,3,"['feature', 'help wanted', 'semver-minor']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1691,mocha didn't work when using fs.readFile or fs.writeFile,"mocha 2.2.4
I tried assert, expect.js, and should.js.  All the three assert modules didn't work in mocha when they were called in fs.readFile or fs.writeFile.  My test file is in this gist post.",cwchentw,NONE,2015-05-09 08:14:14+00:00,True,2015-05-09 11:06:12+00:00,0.12,,4,4,2015-05-09 10:52:44+00:00,0.11,a8m,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1692,Ability to externalize/delegate it() methods and make before() method async,"Observation:

Mocha prevents from before() method getting triggered if it() methods are externalized/delegated to independent module units.

Expectation:

Mocha should allow the ability to externalize/delegate it() methods into separate modules.
Mocha should allow before() method to be asynchronous if it() methods are externalized/delegated.",shantadam,NONE,2015-05-11 17:58:22+00:00,True,2017-06-08 03:02:10+00:00,758.38,,4,7,2015-05-12 16:38:31+00:00,0.94,boneskull,MEMBER,1,1,0,3,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1693,Before each suite and after each suite functionality,"I was wondering if there were any plans to add functionality so that you can run before and after hooks on the describe level instead of the test level.  Although I'm new to best-practices of testing, I think this functionality would be super helpful for resetting conditions (especially with integration testing)",mcquackers,NONE,2015-05-11 18:22:16+00:00,True,2015-05-12 16:38:04+00:00,0.93,,2,1,2015-05-12 16:38:03+00:00,0.93,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1694,inner 'before' runs before outer 'beforeEach',"given e.g.
describe('foo', function(){
  beforeEach('1', function(){})
  describe('bar', function(){
    before('2', function(){})
})

'2' will run before '1'. However, changing '2' to a 'beforeEach' will cause 2 to run after 1.",bblack,NONE,2015-05-12 15:59:40+00:00,True,2015-05-12 16:37:01+00:00,0.03,,3,3,2015-05-12 16:37:01+00:00,0.03,boneskull,MEMBER,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1695,Error when using compilers option,"My technology stack is ReactJS + JSX + Mocha, hence I need to compile the .js files beforehand, however there seems to be some error as I get this output:

C:\Users\Frank\Dropbox\PycharmProjects\DLL>npm test
DLL@0.0.0 test C:\Users\Frank\Dropbox\PycharmProjects\DLL
mocha --compilers js:./DLL_application/frontend/tests/compiler.js ./DLL_application/frontend/tests --recursive
C:\Users\Frank\Dropbox\PycharmProjects\DLL\node_modules\mocha\lib\interfaces\bdd.js:32
var common = require('./common')(suites, context);
^
TypeError: object is not a function
at Suite. (C:\Users\Frank\Dropbox\PycharmProjects\DLL\node_modules\mocha\lib\interfaces\bdd.js:32:37)
at Suite.emit (events.js:129:20)
at C:\Users\Frank\Dropbox\PycharmProjects\DLL\node_modules\mocha\lib\mocha.js:191:11
at Array.forEach (native)
at Mocha.loadFiles (C:\Users\Frank\Dropbox\PycharmProjects\DLL\node_modules\mocha\lib\mocha.js:189:14)
at Mocha.run (C:\Users\Frank\Dropbox\PycharmProjects\DLL\node_modules\mocha\lib\mocha.js:422:31)
at Object. (C:\Users\Frank\Dropbox\PycharmProjects\DLL\node_modules\mocha\bin_mocha:398:16)
at Module._compile (module.js:460:26)
at Object.Module._extensions..js (module.js:478:10)
at Module.load (module.js:355:32)
at Function.Module._load (module.js:310:12)
at Function.Module.runMain (module.js:501:10)
at startup (node.js:129:16)
at node.js:814:3
npm ERR! Test failed.  See above for more details.

Using the following package.json:
{
  ""name"": ""DLL"",
  ""version"": ""0.0.0"",
  ""main"": ""server.js"",
  ""dependencies"": {
    ""classnames"": ""^2.1.1"",
    ""react-bootstrap"": ""^0.21.2"",
    ""react-router-bootstrap"": ""^0.13.0"",
    ""jquery"": ""^2.1.4""
  },
  ""devDependencies"": {
    ""jsx-loader"": ""^0.13.2"",
    ""react"": ""^0.13.2"",
    ""react-hot-loader"": ""^1.2.6"",
    ""react-router"": ""^0.13.3"",
    ""webpack-dev-server"": ""^1.8.2"",
    ""jsdom"": ""^3.1.2"",
    ""mocha"": ""^2.2.4"",
    ""react-tools"": ""^0.13.2"",
    ""sinon"": ""^1.14.1""
  },
  ""scripts"": {
    ""dev"": ""webpack-dev-server --config webpack-config.js --hot --progress --colors --port 3001 --inline"",
    ""build"": ""webpack --config webpack-config.js --progress --profile --colors"",
    ""test"": ""node_modules/.bin/mocha --compilers js:./DLL_application/frontend/tests/compiler.js ./DLL_application/frontend/tests --recursive""
  },
  ""author"": """",
  ""license"": ""ISC""
}

And the following setup.js:
/**
 * Created by Frank van Heeswijk on 12-5-2015.
 */

var jsdom = require('jsdom');

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = document.parentWindow;
global.$ = require('jquery')(window);

And this compiler.js:
/**
 * Created by Frank van Heeswijk on 12-5-2015.
 */

var fs = require('fs');
var ReactTools = require('react-tools');

var originalJS = require.extensions['.js'];

require.extensions['.js'] = function (module, filename) {
    if (filename.indexOf(""node_modules"") > -1) {
        return (originalJS || require.extensions['.js'](module, filename));
    }

    console.log(""compiling "" + filename);

    var content = fs.readFileSync(filename, 'utf8');
    var compiled = ReactTools.transform(content, {harmony: true});

    return module._compile(compiled, filename);
};

I really have no clue what is going wrong, can anyone help me on this?",skiwi2,NONE,2015-05-12 18:30:06+00:00,True,2015-05-14 16:36:46+00:00,1.92,,2,2,2015-05-12 18:40:34+00:00,0.01,skiwi2,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1696,Make stack-traces in node_modules configurable ,"As of Mocha 2.2.2   558191d@a8mfeat(runner/stack-trace): solve issue #545 + tes  -  lines 6358-63560
Errors that occur inside node_modules are not shown, this may not be ideal for people who are testing code that is running with node_modules or running a full stack test suite as the stack traces do not show.
Let me know your thoughts, i'm happy to PR a way to make this configurable.",raadad,NONE,2015-05-13 00:22:41+00:00,True,2015-05-13 03:09:45+00:00,0.12,,2,2,2015-05-13 01:24:03+00:00,0.04,twada,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1700,"""PhantomJS timed out, possibly due to a missing Mocha run() call"" regression","I'm getting a
Warning: PhantomJS timed out, possibly due to a missing Mocha run() call. Use --force to continue.

after upgrading mocha from 2.1.0 to 2.2.0 (or any of the 2.2.x series, including the most recent 2.2.5 release).
I've managed to track it to 521b7e4, specifically, lines 4485-4488:
    // Discard the resolution if this test has already failed asynchronously
    if (self.state) return;
Commenting out if (self.state) return; eliminates the error (I've tested against mocha 2.2.0 and 2.2.5).
Steps to reproduce:
Disclaimer: I never used mocha, grunt, yeoman, bower, or npm prior to two weeks ago, so I fully accept that the problem lies solely with how I'm testing rather than a problem with mocha itself. That said, I noticed this problem using Yeoman's generator-webapp after updating mocha in bower.json from 1.14.0 to 2.2.4. Dropping to v2.1.0 fixed the issue.
I've pushed a stripped-down, minimal version of an ""app"" that reproduces the problem: https://github.com/eddies/mocha-test-case
git clone git@github.com:eddies/mocha-test-case.git
cd mocha-test-case
npm install && bower install
grunt test

Comment out line 4512 of bower_components/mocha/mocha.js and re-run grunt test for the test to now pass.",eddies,NONE,2015-05-15 18:00:54+00:00,True,2015-06-05 10:08:00+00:00,20.67,,2,1,2015-06-05 10:08:36+00:00,20.67,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1703,missing possibility customize error list output,"At the end of running tests is printed a short summary (passed, failed, pending) and a list of errors numbered from 1 to n. The list of errors is implemented by lib/reporters/base.js:list() , which loops through array of failed tests and prints ""something"" based on err.message and err.stack attributes. We find this insufficient as there are types of errors where we would like to print more information about them. Customizing this output proved to be difficult. It requires overriding the list method and to large extent duplicating the code from it.
What I would like is a new public ""listFailure"" method in base reporter which would be called from list() method and users could redefine this method if they required a special output. In my particular case when I'm happy with the standard output and just need to add some extra info, I would redefine the method to call the original method plus print extra info if error is instance of particular class.
I can submit a pull request to make this happen unless there is a better way how to accomplish the same. Opinions?",jkryl,NONE,2015-05-18 15:53:54+00:00,True,2015-06-10 20:48:27+00:00,23.2,,2,1,2015-06-10 20:48:27+00:00,23.2,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1704,document `--full-trace` option,(Thank @twada for pointing it out at #1696),dasilvacontin,CONTRIBUTOR,2015-05-19 07:18:40+00:00,True,2015-07-04 21:40:15+00:00,46.6,,4,2,2015-07-01 16:26:56+00:00,43.38,EvanHahn,NONE,0,1,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1705,runner should emit 'skip' event when skipping a test,"Would allow reporters to show skipped tests, etc.",avetisk,NONE,2015-05-20 13:52:53+00:00,True,2015-05-21 15:36:19+00:00,1.07,,3,4,2015-05-21 15:36:18+00:00,1.07,dasilvacontin,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1706,missing `pending` event,"Runner doesn't throw a pending event when a test is marked as pending after firing its test event.
Runner checks for .pending at https://github.com/mochajs/mocha/blob/master/lib/runner.js#L465. If the test is marked as pending after that, it will get detected at https://github.com/mochajs/mocha/blob/master/lib/runnable.js#L256-L257 (afaik it's the only way to get to that code branch).
However, it is executing done without arguments. Runner is expecting a Pending error for tests ran that are either pending or skipped. https://github.com/mochajs/mocha/blob/master/lib/runner.js#L477",dasilvacontin,CONTRIBUTOR,2015-05-21 16:54:03+00:00,True,2017-03-30 17:51:47+00:00,679.04,,3,2,2015-06-09 18:29:44+00:00,19.07,rojaro,NONE,0,0,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1708,exit process with non-zero code if `.only` was used,"It's been always an issue for every project i worked on that used mocha. Once in a while someone accidentally commits describe.only and starts the CI\CD pipeline. In the best case it'll fail during the code coverage check, but if the test suite is relatively small, or the suite that is not checked for coverage (integration, functional) the broken code potentially can go to production.
What if mocha would keep track of all .only that have been used during the test execution and when it's done, print the results + an optional warning that .only has been used and exit the process with non-zero.
In this case there will be less confusion around 'why is my build failing' and all the tests are guaranteed to run.",aaronabramov,NONE,2015-05-21 18:55:51+00:00,True,2015-05-21 19:37:53+00:00,0.03,,2,1,2015-05-21 19:37:53+00:00,0.03,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1709,sourcemaps with Karma,"I'm using karma, karma-sourcemap-loader, and karma-mocha. Noticed that upgrading from 2.2.1 to 2.2.3 causes sourcemap info not to be included in test reports to the console. Related issue: demerzel3/karma-sourcemap-loader#15
Sorry I can't provide you with more details at this time.",necolas,NONE,2015-05-21 19:14:39+00:00,True,2017-10-18 04:18:19+00:00,880.38,,10,9,2015-06-08 16:13:06+00:00,17.87,anatomic,NONE,1,2,0,6,"['browser', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1710,AssertionError not caught by mocha 2.2.5,"Whenever there is a failing assertion, I tried with both nodejs' native assertion and chai's, mocha will crash. The end result is I cannot run all tests, unless all tests pass, as it will crash at the first failure.
Example
var assert = require('assert')

describe('something', function() {
  assert(true == false)
}

describe('something else', function() {
  assert(true == true)
}
will output
assert.js:86
  throw new assert.AssertionError({
        ^
AssertionError: false == true
    at Suite.<anonymous> (/home/charlie/code/code-fellows/jsf2/foundations-js-lab1/test/excercise1Tests.js:12:3)
    at context.describe.context.context (/home/charlie/lib/node_modules/mocha/lib/interfaces/bdd.js:49:10)
    at Object.<anonymous> (/home/charlie/code/code-fellows/jsf2/foundations-js-lab1/test/excercise1Tests.js:10:1)
    at Module._compile (module.js:460:26)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Module.require (module.js:365:17)
    at require (module.js:384:17)
    at /home/charlie/lib/node_modules/mocha/lib/mocha.js:192:27
    at Array.forEach (native)
    at Mocha.loadFiles (/home/charlie/lib/node_modules/mocha/lib/mocha.js:189:14)
    at Mocha.run (/home/charlie/lib/node_modules/mocha/lib/mocha.js:422:31)
    at Object.<anonymous> (/home/charlie/lib/node_modules/mocha/bin/_mocha:398:16)
    at Module._compile (module.js:460:26)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:501:10)
    at startup (node.js:129:16)
    at node.js:814:3",CADBOT,NONE,2015-05-22 03:30:12+00:00,True,2015-05-22 06:42:45+00:00,0.13,,2,3,2015-05-22 06:42:45+00:00,0.13,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1711,Setting global timeout/slow via code?,"Is there a way to set a global timeout/slow value from code? I want to be able to do the same thing that --timeout and --slow do, but via code running via npm test.
I'm setting up server stuff in a global before()/after() that all test files will require and was hoping to specify timeout stuff there. The tests are going to be spread out into a bunch of different projects so I can't use mocha.opts to set these values, and requiring multiple people to remember to set the CLI values is a no-go as well. I tried calling this.timeout(...) and this.slow(...) from the global before() but that just set those values for the before() itself, not all the other tests.
Is there a way to do what I want? I haven't been able to find a reference to the mocha global or anything and digging through mocha's code hasn't really helped me narrow it down either.",tivac,NONE,2015-05-22 21:08:06+00:00,True,2015-05-28 20:02:26+00:00,5.95,,2,3,2015-05-26 23:33:43+00:00,4.1,tivac,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1712,Diffs no longer show line changes,"Update from 2.2.4 to 2.2.5 improved diff color contrast, but lost information on line changes.
Before
After",raine,NONE,2015-05-26 20:09:14+00:00,False,,,,6,5,2015-05-26 20:33:32+00:00,0.02,a8m,CONTRIBUTOR,1,3,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1713,Feature: Reporter for programatic use of Mocha,"The JSON reporter would be almost perfect, but it spits the JSON out to STDOUT instead of returning it from the mocha instance's run command. I'd like to make a new reporter based off of this one, but instead this JSON as a result. For example:
Mocha = require('mocha')

mocha = new Mocha
mocha.addFile('test/tests.js')
mocha.reporter('programmatic') // Proposed new reporter

var results = mocha.run()
Where the results variable would contain the JSON usually output by the JSON reporter.
I'm willing to code up this feature myself, but I wanted to see if it would likely be merged before spending the time.",CADBOT,NONE,2015-05-27 00:53:15+00:00,True,2015-06-05 13:21:47+00:00,9.52,,4,4,2015-05-27 21:37:05+00:00,0.86,danielstjules,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1714,site improvements,"would you guys be interested in a contribution to make the gh-pages branch more maintainable? i can do a PR when i'm free.

use github pages's jekyll to automatically format index.md as markdown.
locally, use the github-pages gem to build the site instead of markdown.
that means no more build step :)
move *.js and *.css into assets/ to make the root directory cleaner.

there are also some questionable files in gh-pages that can probably be (re)moved:

http://mochajs.org/index.js (what's this?)
http://mochajs.org/_mocha.js (should've been gitignored but got committed)
http://mochajs.org/coverage.html (same)
http://mochajs.org/html5shiv.js (can be linked to cdn)
http://mochajs.org/jquery.js (same)
http://mochajs.org/normalize.min.css (same)
http://mochajs.org/head.html (can be moved to jekyll's _layouts)
http://mochajs.org/foot.html (same)",rstacruz,CONTRIBUTOR,2015-05-29 08:53:54+00:00,True,2015-10-05 05:45:48+00:00,128.87,,5,5,2015-05-29 08:57:11+00:00,0.0,rstacruz,CONTRIBUTOR,0,4,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1715,How can I pass custom data to my mocha test suite?,"We are using sauce labs to do cross-platform/cross-browser testing.
You can find my test suite in this gist (to save room here): https://gist.github.com/chevex/397a5a18a1a386897b41
The problem is that the only way I could figure out how to pass custom data to the test suite is via an environment variable. Because of this, when my gulp task tries to run the test suite against multiple targets in parallel, they all end up running against the same target since the loop is done iterating and process.env.SAUCE_TARGET is set to the final value before the first suite even runs.
var gulp = require('gulp');
var gulpMocha = require('gulp-mocha');
var mergeStream = require('merge-stream');
gulp.task('sauce-tests', function () {
  var targets = ['chrome', 'firefox', 'internet explorer'];
  var streams = targets.map(function (target) {
    process.env.SAUCE_TARGET = target;
    return gulp.src('./test/sauce-tests.js', {read:false})
      .pipe(gulpMocha({ reporter: 'spec' });
  });
  return mergeStream.apply(null, streams);
});
The closure provided by forEach doesn't help because it's setting an essentially global value (process.env.SAUCE_TARGET) on each iteration.
Is there a better way to pass the SAUCE_TARGET to my test suite so that I can run multiple test suites in parallel with different target values?
I can get it working if I run all the tests synchronously but that takes far longer than I want it to. The only thing preventing parallelism is the fact that I can't pass encapsulated values to my mocha suite.",chevex,NONE,2015-05-30 21:35:16+00:00,True,2015-06-10 20:46:55+00:00,10.97,,2,2,2015-05-30 23:12:44+00:00,0.07,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1716,Travis isn't running,Seems like builds are completely absent... any idea why?,kevinji,NONE,2015-05-31 06:53:24+00:00,True,2015-06-05 21:56:50+00:00,5.63,,4,8,2015-06-05 04:51:34+00:00,4.92,danielstjules,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1717,Does not work with CoffeeScript 1.9.2,"With CoffeeScript version 1.9.2, the following error is thrown on attempting to use mocha --compilers coffee:coffee-script:
$ mocha --compilers coffee:coffee-script -R spec
/Users/<REDACTED>/Dropbox/Projects/CoffeeScript/CoffeeNode CMS/node_modules/coffee-script/lib/coffee-script/coffee-script.js:210
          throw new Error(""Use CoffeeScript.register() or require the coffee-s
                ^
Error: Use CoffeeScript.register() or require the coffee-script/register module to require .coffee.md files.
  at Object.base.(anonymous function) [as .coffee] (/Users/<REDACTED>/Dropbox/Projects/CoffeeScript/CoffeeNode CMS/node_modules/coffee-script/lib/coffee-script/coffee-script.js:210:17)
  at Module.load (module.js:355:32)
  at Function.Module._load (module.js:310:12)
  at Module.require (module.js:365:17)
  at require (module.js:384:17)
  at /Users/<REDACTED>/Dropbox/Projects/CoffeeScript/CoffeeNode CMS/node_modules/mocha/lib/mocha.js:192:27
  at Array.forEach (native)
  at Mocha.loadFiles (/Users/<REDACTED>/Dropbox/Projects/CoffeeScript/CoffeeNode CMS/node_modules/mocha/lib/mocha.js:189:14)
  at Mocha.run (/Users/<REDACTED>/Dropbox/Projects/CoffeeScript/CoffeeNode CMS/node_modules/mocha/lib/mocha.js:422:31)
  at Object.<anonymous> (/Users/<REDACTED>/Dropbox/Projects/CoffeeScript/CoffeeNode CMS/node_modules/mocha/bin/_mocha:398:16)
  at Module._compile (module.js:460:26)
  at Object.Module._extensions..js (module.js:478:10)
  at Module.load (module.js:355:32)
  at Function.Module._load (module.js:310:12)
  at Function.Module.runMain (module.js:501:10)
  at startup (node.js:129:16)
  at node.js:814:3",alexbuzzbee,NONE,2015-05-31 15:53:31+00:00,True,2015-06-05 15:18:20+00:00,4.98,,3,6,2015-06-05 13:02:26+00:00,4.88,jbnicolai,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1721,Support mocha.opts in root,"One of the benefits of mocha.opts is to be able to specify your flags there and be able to just call mocha from the command line. However, if your tests aren't in the ./tests directory, mocha doesn't know where to look to find a mocha.opts file to find your tests.
This problem would be solved if we were able to have mocha also look in the cwd of where mocha was run as well as up the tree until it found one (optional). Then I can specify in the mocha.opts file in my project root which folder my tests are in.",TheSavior,NONE,2015-06-03 04:19:56+00:00,True,2015-06-10 21:16:56+00:00,7.71,,3,7,2015-06-05 13:05:19+00:00,2.36,jbnicolai,CONTRIBUTOR,1,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1722,Problems with Mocha / Jsdom / React testing,"This is a crosspost with facebook/react#4025 because I'm not sure if the problem is with Mocha or React
I'm not entirely sure if what I'm having here is a problem with Mocha or React, but I really need some help figuring out why my tests are failing with what looks like leaks across siloed documents.
My test setup is using Mocha, where each individual test spins up a document with jsdom before loading React. I then proceed to run the test of the individual component in each of these separate documents.
My tests run fine if I only run a single file at a time, but when I run all tests I get errors like DOMException: Wrong document (from jsdom) and Error: Invariant Violation: findComponentRoot(..., .1): Unable to find element... (from React).
I've created a repository with a minimal setup and a more detailed description here: https://github.com/Munter/MochaJsdomReact
Can anyone help me figure out what the problem is, and how to avoid it, or maybe even fix it?",Munter,MEMBER,2015-06-04 08:54:41+00:00,True,2015-06-07 01:11:39+00:00,2.68,,4,9,2015-06-05 13:03:36+00:00,1.17,jbnicolai,CONTRIBUTOR,1,1,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1728,Replace __proto__ throughout with setPrototypeOf shim,See #1727 (comment) for details,ndhoule,CONTRIBUTOR,2015-06-07 00:48:02+00:00,True,2015-07-05 17:02:58+00:00,28.68,,3,4,2015-06-07 00:48:54+00:00,0.0,jbnicolai,CONTRIBUTOR,1,2,0,0,"['chore', 'needs-feedback']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1731,Remove non-HTML reporters from built mocha.js,"See #1727, #509 for details.
tl;dr: Right now the built mocha.js file includes all of the reporters, even though they aren't useful in the browser.
Seems like we should expose a browser plugin/reporter interface before we remove these, seems like we'll break https://github.com/metaskills/mocha-phantomjs/ otherwise.
cc/ @metaskills @nathanboktae",ndhoule,CONTRIBUTOR,2015-06-07 19:49:33+00:00,True,2017-10-18 04:19:04+00:00,863.35,,4,2,2015-06-08 17:56:04+00:00,0.92,nathanboktae,CONTRIBUTOR,1,1,0,0,"['browser', 'chore', 'reporter', 'wontfix']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1732,Add browser testing to CI,"This probably involves some test refactoring work, but moving to Browserify means it's easy to add a Node shim without really thinking about it, and some of Browserify's shims rely on an ES5 environment. Would be easy to break IE6 without noticing.",ndhoule,CONTRIBUTOR,2015-06-07 19:55:20+00:00,True,2016-04-22 06:54:34+00:00,319.46,,3,4,2015-06-08 18:52:57+00:00,0.96,boneskull,MEMBER,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1733,Global leaks old firefox versions strange behavior,"Hi, i'm currently doing lot of tests using Browserstack.
Today I executed unit tests on the ~500 browsers Browserstack supports and encountered a strange Error: global leak detected: navigator which appears only with old Firefox versions (the error is encountered in Firefox 5.X and older).
My settings are very simple ;
<script type=""text/javascript"">
    mocha.setup({ui: 'bdd'});
</script>

<script type=""text/javascript"" src=""test/spec/my-tests.js""></script>

<script type=""text/javascript"">
    mocha.checkLeaks();
    mocha.run();
</script>
The first time I execute the tests the following error is reported : Error: global leak detected: navigator.
But if I refresh the tab it works without problem, what's strange is that if I add only navigator.userAgent; before mocha.checkLeaks(); then it works.
...
<script type=""text/javascript"">
    navigator.userAgent;
    mocha.checkLeaks();
    mocha.run();
</script>
Do you know why I encounter this strange behavior ? Is it a bug in Mocha's leaks detection ?
If somebody else encounters the same error the workaround is simply to change you Mocha settings.
mocha.setup(
    {
        ui: 'bdd',
        globals: ['navigator'] 
    }
);
Thanks,
Baptiste",bgaillard,NONE,2015-06-08 08:51:28+00:00,True,2015-06-08 18:52:32+00:00,0.42,,2,2,2015-06-08 18:52:32+00:00,0.42,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1734,mixed use of promise and async APIs is hard to debug,"I was converting some Mocha tests I'd written to use promises instead of async callbacks, because the underlying API I was testing had changed to use promises.
Given a testSomething function that returns a promise, I had a test that looked something like
it('should', function(done) {
  testSomething().then(function(result) {
    // check result
    done();
  });
});

and I converted it to
it('should', function(done) {
  return testSomething();
});

can you spot the bug that cost me some head-scratching?
It's probably pretty obvious in the context of this bug report and with such simple test code, but with much more complicated test code, I investigated a bunch of dead ends (e.g. is my promise actually resolving) before I realized that the promise I was returning was being ignored entirely by Mocha because of the function signature of my it handler.
I suggest that Mocha should consider it a coding error to have an it handler accept a done argument and then return a promise.",metamatt,NONE,2015-06-09 18:10:46+00:00,True,2018-10-11 09:27:50+00:00,1219.64,,5,7,2015-06-10 20:36:27+00:00,1.1,boneskull,MEMBER,1,1,0,2,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1736,"Stack traces missing for >= 2.2.1, regression?","For some reason more recent versions of Mocha do not display stack traces anymore in some cases.
The code snippet below stops working with all versions after 2.2.1 – the diff output is there but the stack trace is missing (2.2.1 shows both). Seems to be a regression.
Commenting out the it call gives me a stack trace again, but in this case it’s just a raw Node stack trace, without any test runner output (… chai/lib/chai/assertion.js:107 throw new AssertionError(msg, { …).
// Test run with: `./node_modules/.bin/mocha dist/test/test.js`,  Node.js v0.12.4

// Works with mocha 2.2.1 (also tested with 2.0.0)
// Does not work with: 2.2.5, 2.2.4, 2.2.3

'use strict';

var chai = require('chai');       // v3.0.0
chai.config.includeStack = true;  // (makes no difference)
var expect = chai.expect;

describe('This test', function () {

    it('should work ', function () {    // <----

        expect(true).to.equal(false);
    });
});",j13z,NONE,2015-06-09 21:29:38+00:00,True,2015-06-10 14:17:21+00:00,0.7,,3,3,2015-06-10 01:08:24+00:00,0.15,twada,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1737,weird timeouts on Appveyor (Windows CI),"Consistently on x86 io.js v1.x
And what's weirder is that with higher timeouts (like 10+ seconds), they pass consistently and no single test takes longer than 200ms. So, what is timing out?? https://ci.appveyor.com/project/stevenvachon/hidefile/build/12",stevenvachon,NONE,2015-06-10 00:18:27+00:00,True,2017-10-18 04:20:53+00:00,861.17,,2,8,2015-06-10 20:37:59+00:00,0.85,boneskull,MEMBER,1,0,0,2,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1738,Idea: mocha for your browser instructions,"Today, to get mocha running on your browser, you have a snippet on the mochajs.org website that looks like this:
<html>
<head>
  <meta charset=""utf-8"">
  <title>Mocha Tests</title>
  <link rel=""stylesheet"" href=""mocha.css"" />
</head>
<body>
  <div id=""mocha""></div>
  <script src=""jquery.js""></script>
  <script src=""expect.js""></script>
  (snip...)
This isn't ideal because:

there's no indication where mocha.css and expect.js (et al) come from.
it doesn't even mention the mocha init command.

Instead, I propose to replace it with something more useful like so:
<!doctype html>
<html>
<head>
  <title>Mocha</title>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <link href=""https://cdn.rawgit.com/mochajs/mocha/2.2.4/mocha.css"" rel=""stylesheet"" />
</head>
<body>
  <div id=""mocha""></div>
  <script src=""https://cdn.rawgit.com/mochajs/mocha/2.2.4/mocha.js""></script>
  <script src=""https://cdn.rawgit.com/chaijs/chai/2.3.0/chai.js""></script>
  <script>mocha.setup('bdd')</script
  <script src=""tests.js""></script>
  <script>mocha.run()</script>
</body>
</html>",rstacruz,CONTRIBUTOR,2015-06-10 07:16:29+00:00,True,2015-07-05 21:46:29+00:00,25.6,,4,4,2015-06-10 07:26:56+00:00,0.01,rstacruz,CONTRIBUTOR,0,3,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1742,this.timeout(0),"Frankly, thinking about it for a couple seconds
for developers sharing code:
this.timeout('disable') is a lot more clear in terms of intent than this.timeout(0)
the latter makes it seem like the test should fail almost automatically
the former makes it clear that you actually want to disable timeouts for the test
would be easy to implement, but might be too late in terms of backward compatibility",ORESoftware,NONE,2015-06-11 00:45:25+00:00,True,2015-07-01 20:00:04+00:00,20.8,,5,12,2015-06-11 00:46:42+00:00,0.0,ORESoftware,NONE,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1743,Should.js on site points to the old should.js repo,The link on the mochajs.org for should.js points to the wrong repo,cloud-walker,NONE,2015-06-12 10:33:13+00:00,True,2015-07-05 21:46:29+00:00,23.47,,3,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1744,unhelpful error when describe lacks second argument,"➜  temp  cat test/test.js
it('rulz')
describe('very cofee')
it('sucks')

➜  temp  mocha
/usr/local/lib/node_modules/mocha/lib/interfaces/bdd.js:49
      fn.call(suite);
        ^
TypeError: Cannot read property 'call' of undefined
    at context.describe.context.context (/usr/local/lib/node_modules/mocha/lib/interfaces/bdd.js:49:9)
    at Object.<anonymous> (/Users/dasilvacontin/temp/test/test.js:2:1)
    at Module._compile (module.js:460:26)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Module.require (module.js:365:17)
    at require (module.js:384:17)
    at /usr/local/lib/node_modules/mocha/lib/mocha.js:192:27
    at Array.forEach (native)
    at Mocha.loadFiles (/usr/local/lib/node_modules/mocha/lib/mocha.js:189:14)
    at Mocha.run (/usr/local/lib/node_modules/mocha/lib/mocha.js:422:31)
    at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/_mocha:398:16)
    at Module._compile (module.js:460:26)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:501:10)
    at startup (node.js:129:16)
    at node.js:814:3",dasilvacontin,CONTRIBUTOR,2015-06-13 16:25:22+00:00,True,2016-09-19 06:36:17+00:00,463.59,,7,12,2015-06-13 16:27:06+00:00,0.0,dasilvacontin,CONTRIBUTOR,1,2,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1747,Mocha and jspm dependencies,"By default, Mocha launches its tests with node_modules dependencies.
Is there way to use jspm_packages dependencies as well?
As an example, I wrote this setup.js file:
import { expect } from 'chai';
import $ from 'jquery';
global.expect = expect;

Launching mocha --compilers js:babel/register --require ./test/setup.js gives the error Cannot find module 'jquery' (chai is correctly imported, it was installed with npm install --save-dev).
The problem is that jquery has been installed with jspm install jquery and thus is only available in jspm_packages. In the client code, the import from 'jquery' works fine. But because mocha look for jquery in node_modules, it can't find it.
Is there a way to fix this?
Maybe using System.config({..})  somewhere will do the trick?
ps. issue opened in jspm-cli",yamsellem,NONE,2015-06-15 14:39:36+00:00,True,2015-07-06 22:02:05+00:00,21.31,,2,1,2015-07-06 22:02:05+00:00,21.31,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1748,Merge  co-mocha into mocha source tree so that mocha support for generator function testing in browser.,https://github.com/blakeembrey/co-mocha,lygstate,NONE,2015-06-16 01:10:01+00:00,True,2015-06-16 18:16:54+00:00,0.71,,4,3,2015-06-16 01:41:26+00:00,0.02,danielstjules,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1751,SyntaxError: Unexpected token *,Im trying to require a selfwritten script that use generators. But when I run my tests with mocha --reporter --harmony spec it cant seem to get past the require inn the files stage. Any suggestions how to get this work?,vongohren,NONE,2015-06-17 07:26:31+00:00,True,2015-07-05 18:02:46+00:00,18.44,,3,2,2015-07-05 18:01:44+00:00,18.44,ndhoule,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1755,"Run all tests declared with .only, not just the last one","At the moment, if multiple tests are declared with describe.only or it.only, mocha will only run the last one it finds.
It would be much more useful if mocha would run all tests declared with .only. I regularly want to run a few selected tests, or check another test in addition to the one I am currently working on.
Also, with the current behaviour it is impossible to select some tests when they are generated. Consider:
function test(mode) {
    it.only('should do something with mode', function () {
        assert(foobar(mode));
    });

    // many more tests
}

describe('foobar', function () {
    test('foo');
    test('bar');
});

This will only run the test for 'bar'. It is impossible to select just 'foo'. It would be much more useful to run all of them.
Thanks.
Related: #1060, #1676",SystemParadox,NONE,2015-06-18 12:29:46+00:00,True,2015-07-10 19:22:43+00:00,22.29,,3,2,2015-07-06 12:03:52+00:00,17.98,domarmstrong,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1756,Bundle mocha for Nashorn,"I need to have a single file with Mocha and all it's dependencies to use in a Nashorn environment. I can't have any requires in the final file as it stands for node, or as the browser mocha.js stands, since my environment will not allow for that. I've tried this with browserify and I'm getting a number of dependency errors. Currently I'm using Jasmine as it nicely stands as a single file, but there have been some issues with Jasmine lately so I thought I'd try Mocha.
Anyone have any pointers? Has anyone tried this? This is the gist of what I'm trying:
// gulpfile
var browserify = require('browserify');
var sourceStream = require('vinyl-source-stream');
var gulp       = require('gulp');

gulp.task('build-mocha', function () {
    browserify('mocha-browserify-me.js')
        .bundle()
        .pipe(sourceStream('mymocha-2.2.5-bundle.js'))
        .pipe(gulp.dest('./'))
});
//mocha-browserify-me.js
var Mocha = require('./lib/mocha.js');",wejrowski,NONE,2015-06-18 19:24:01+00:00,True,2015-07-06 22:04:11+00:00,18.11,,2,2,2015-06-18 19:52:39+00:00,0.02,wejrowski,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1757,Errors messages and stack traces from JSDOM loaded scripts are no longer useful in mocha@2.2.X,"I put up a test case repo at https://github.com/mjhm/mocha_jsdom_test
As mentioned in the README the repo shows a change in handling jsdom stack traces.
The problem is that for mocha@2.2.X the handling of stack traces has changed so that stack traces of JSDOM loaded scripts are no longer useful.
In particular the report of last test using mocha@2.1.0 is
6) Basic Test with beforeEach jsdom setup throws a jsdom browser error from preloaded file.:
     Error: globalThrower
      at window.browserThrower (file:///Users/johnmclaughlin/git/mocha_jsdom_test/browserThrower.js:5:9)

But the result for mocha@2.2.5 is not useful for tracking down the source of the error:
6) Basic Test with beforeEach jsdom setup throws a jsdom browser error from preloaded file.:
   Error: the error {} was thrown, throw an Error :)
    at Context.jsdomDoneCallback (all_tests.js:12:3)

There are differences in the other tests as well.

1 -- 3  the filtering of mocha@2.2.5 is more helpful than mocha@2.1.0
4 The verbosity of the the mocha@2.1.0 report is arguable more helpful.
5 Although the top line for the reports of the two versions are essentially the same.  The mocha@2.1.0 report is somewhat more helpful to track down that this was a callback from jsdom.

Complete test report for mocha@2.2.5:

  Basic Test
    1) throws an error in the actual test
    2) throws an error from a node require
    3) throws an async error from a node require
jsdomDoneCallback: [ { type: 'error',
    message: 'Running file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js failed.',
    data: 
     { error: [Error: direct throw from file],
       filename: 'file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js' } } ]
    4) throws an error in a jsdom script
    5) throws an error in a jsdom done callback
    with beforeEach jsdom setup
      6) throws a jsdom browser error from preloaded file.


  0 passing (52ms)
  6 failing

  1) Basic Test throws an error in the actual test:
     Error: throws something
      at Context.<anonymous> (all_tests.js:27:11)

  2) Basic Test throws an error from a node require:
     Error: thrower
      at module.exports (thrower.js:3:9)
      at Context.<anonymous> (all_tests.js:31:5)

  3) Basic Test throws an async error from a node require:
     Uncaught Error: thrower
      at module.exports (thrower.js:3:9)
      at null._onTimeout (all_tests.js:36:7)

  4) Basic Test throws an error in a jsdom script:
     the object {
  ""data"": {
    ""error"": ""Error: direct throw from file""
    ""filename"": ""file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js""
  }
  ""message"": ""Running file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js failed.""
  ""type"": ""error""
  ""uncaught"": true
} was thrown, throw an Error :)
  Error: the object {
    ""data"": {
      ""error"": ""Error: direct throw from file""
      ""filename"": ""file://directThrow.js""
    }
    ""message"": ""Running file://directThrow.js failed.""
    ""type"": ""error""
    ""uncaught"": true
  } was thrown, throw an Error :)

  5) Basic Test throws an error in a jsdom done callback:
     Uncaught Error: thrower
      at Object.module.exports [as done] (thrower.js:3:9)

  6) Basic Test with beforeEach jsdom setup throws a jsdom browser error from preloaded file.:
     Error: the error {} was thrown, throw an Error :)
      at Context.jsdomDoneCallback (all_tests.js:12:3)


Complete test report for mocha@2.1.0

  Basic Test
    1) throws an error in the actual test
    2) throws an error from a node require
    3) throws an async error from a node require
jsdomDoneCallback: [ { type: 'error',
    message: 'Running file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js failed.',
    data: 
     { error: [Error: direct throw from file],
       filename: 'file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js' } } ]
    4) throws an error in a jsdom script
    5) throws an error in a jsdom done callback
    with beforeEach jsdom setup
      6) throws a jsdom browser error from preloaded file.


  0 passing (48ms)
  6 failing

  1) Basic Test throws an error in the actual test:
     Error: throws something
      at Context.<anonymous> (/Users/johnmclaughlin/git/mocha_jsdom_test2/all_tests.js:27:11)
      at callFn (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runnable.js:251:21)
      at Test.Runnable.run (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runnable.js:244:7)
      at Runner.runTest (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:374:10)
      at /Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:452:12
      at next (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:299:14)
      at /Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:309:7
      at next (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:248:23)
      at Immediate._onImmediate (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:276:5)
      at processImmediate [as _immediateCallback] (timers.js:358:17)

  2) Basic Test throws an error from a node require:
     Error: thrower
      at module.exports (/Users/johnmclaughlin/git/mocha_jsdom_test2/thrower.js:3:9)
      at Context.<anonymous> (/Users/johnmclaughlin/git/mocha_jsdom_test2/all_tests.js:31:5)
      at callFn (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runnable.js:251:21)
      at Test.Runnable.run (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runnable.js:244:7)
      at Runner.runTest (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:374:10)
      at /Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:452:12
      at next (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:299:14)
      at /Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:309:7
      at next (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:248:23)
      at Immediate._onImmediate (/Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/mocha/lib/runner.js:276:5)
      at processImmediate [as _immediateCallback] (timers.js:358:17)

  3) Basic Test throws an async error from a node require:
     Uncaught Error: thrower
      at module.exports (/Users/johnmclaughlin/git/mocha_jsdom_test2/thrower.js:3:9)
      at null._onTimeout (/Users/johnmclaughlin/git/mocha_jsdom_test2/all_tests.js:36:7)
      at Timer.listOnTimeout (timers.js:110:15)

  4) Basic Test throws an error in a jsdom script:
     Uncaught Running file:///Users/johnmclaughlin/git/mocha_jsdom_test2/directThrow.js failed.


  5) Basic Test throws an error in a jsdom done callback:
     Uncaught Error: thrower
      at Object.module.exports [as done] (/Users/johnmclaughlin/git/mocha_jsdom_test2/thrower.js:3:9)
      at /Users/johnmclaughlin/git/mocha_jsdom_test2/node_modules/jsdom/lib/jsdom.js:249:18
      at process._tickCallback (node.js:355:11)

  6) Basic Test with beforeEach jsdom setup throws a jsdom browser error from preloaded file.:
     Error: globalThrower
      at window.browserThrower (file:///Users/johnmclaughlin/git/mocha_jsdom_test2/browserThrower.js:5:9)",mjhm,NONE,2015-06-19 16:54:09+00:00,False,,,,4,6,2015-06-28 01:17:25+00:00,8.35,danielstjules,CONTRIBUTOR,1,1,0,3,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1759,Don't allow duplicate function descriptions in the same describe block,"There should be an error or at least a warning if multiple it functions have the same description string within the same describe block. (Or at least it should be configurable if you want it not to give a warning.) Many times a copy and paste happens and you might forget to change the string.
Forgetting to change it from the default copy and paste description means the string doesn't represent what's actually being tested, so this error or warning serves as a good reminder to update the text to match the code.
I found one situation where duplicate description strings cause problems. Marking one of the functions below as it.only doesn't work, all 3 get run because they have the same string.
var assert = require(""assert"")
describe('Array', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
    it.only('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
    it('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
  })
})",rightaway,NONE,2015-06-20 00:51:10+00:00,False,,,,5,9,2015-07-04 21:33:20+00:00,14.86,jbnicolai,CONTRIBUTOR,0,4,0,0,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1760,`this.skip()` completely broken if html reporter used.,"Demo: https://github.com/Kirill89/mocha-test
Error: TypeError: test.err is undefined (http://localhost:1111/node_modules/mocha/mocha.js:2786)

Firefox 38.0.5
Chrome 43.0.2357.124 (64-bit)",Kirill89,NONE,2015-06-20 11:30:03+00:00,True,2016-02-17 02:38:24+00:00,241.63,,6,16,2015-07-06 00:19:25+00:00,15.53,boneskull,MEMBER,1,2,0,3,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1762,ReferenceError: before is not defined,"I'm trying to make some tests with Mocha for my Sails application. As described here.
I have files:
test/mocha.opts:
--require test/bootstrap.test.js

test/bootstrap.test.js:
var Sails = require('sails'), sails;


before(function(done) {
  Sails.lift({
    // configuration for testing purposes
  }, function(err, server) {
    sails = server;
    if (err) return done(err);
    // here you can load fixtures, etc.
        console.log(""Sails Loaded"");
    done(err, sails);
  });
});

after(function(done) {
  // here you can clear fixtures, etc.
  sails.lower(done);
});

test/unit/model/User.test.js
/* global describe, User */

describe.only('UserModel', function() {

    describe('#find()', function() {
        it('should check find function', function(done) {
            User.find()
                            .then(function(results) {
                                console.log(results);
                                done();
                            })
                            .catch(done);
        });
    });

});

When I'm running tests, I see an error:
...
test\bootstrap.test.js:4
before(function(done) {
^
ReferenceError: before is not defined
...",elennaro,NONE,2015-06-25 11:30:56+00:00,True,2015-06-25 12:40:21+00:00,0.05,,7,9,2015-06-25 12:31:58+00:00,0.04,dasilvacontin,CONTRIBUTOR,0,1,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1763,this.timeout not working in promise,"Hello,
I have the following before setup:
before('Init the feeditem\'s data from the server', () => {
    return (TestDataProvider.GetSingleExpandedDataItem()
            .then((item) => {
                              feedItemData = item;
                            }));
  });
Running the tests, I am getting the following error:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.

Trying to set this.timeout (5000), throws the following error:
TypeError: Cannot read property 'timeout' of undefined

The code with the timeout:
before('Init the feeditem\'s data from the server', () => {  
    this.timeout(5000);  
    return (TestDataProvider.GetSingleExpandedDataItem()
            .then((item) => {
                              feedItemData = item;
                            }));
  });
Omer",omerts,NONE,2015-06-25 11:35:46+00:00,True,2015-06-28 01:30:14+00:00,2.58,,2,2,2015-06-28 01:30:14+00:00,2.58,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1764,use process.browser to detect environment,"I think it's generally accepted that to check whether an environment is node or browser, we should type check window, instead of document, because sometimes document is mocked for testing purpose.",limdauto,NONE,2015-06-25 13:08:16+00:00,False,,,,5,6,2015-07-04 20:39:40+00:00,9.31,jbnicolai,CONTRIBUTOR,1,2,0,2,"['help wanted', 'refactor']",False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1766,Remove 3rd party function calls from stack trace only when earlier than user code,"Hey,
Shortening of stack traces is great, but it shouldn't suppress the exception's source from 3rd party (stuff in node_modules) function calls that come after user code. The ones leading up to user code are definitely useless (like two dozens of Mocha internal calls), but hiding the the path from user code to the possibly faulty library makes it a little difficult to discern the problem.
Case in point, I had a problem in a module:
      at normalizeValue (/Users/user/node_modules/whatwg-fetch/fetch.js:20:20)
      at Headers.append (/Users/user/node_modules/whatwg-fetch/fetch.js:45:13)
      at /Users/user/node_modules/whatwg-fetch/fetch.js:38:14
      at Array.forEach (native)
      at new Headers (/Users/user/node_modules/whatwg-fetch/fetch.js:37:43)
      at new Request (/Users/user/node_modules/whatwg-fetch/fetch.js:211:20)
      at self.fetch (/Users/user/node_modules/whatwg-fetch/fetch.js:276:17)
      at /Users/user/fetch.js:9:10
      ...

With short stack traces on, the only lines visible were:
      at Array.forEach (native)
      at /Users/user/fetch.js:9:10

Impossible to decipher. ;-)",moll,NONE,2015-06-27 21:26:20+00:00,True,2015-07-05 10:25:42+00:00,7.54,,5,4,2015-06-28 00:05:37+00:00,0.11,danielstjules,CONTRIBUTOR,1,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1768,Passthrough --use_strict option to node,"I've seen it mentioned that this is not currently supported, but is there a reason for that?",andrewbranch,NONE,2015-06-29 17:44:58+00:00,True,2015-07-04 20:25:16+00:00,5.11,,4,2,2015-06-30 02:59:43+00:00,0.39,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1769,Asynchronous error handling,"This issue seems like a missing piece of this fixed issue - #1043
The issue and fix referenced in the above link is working as expected when using the hooks in sync mode. When I attempt to use the hooks in async mode (with done callback), sibling suites do not get executed.
If I have two sibling suites with async beforeEach, afterEach and tests - an async error thrown in the afterEach of the first suite will fail all tests in that suite (as expected) and also will stop execution of the second suite which does not seem expected.
Sample Code:
describe('Multiple Suites Test', function() {
describe('Suite 1', function() {

    beforeEach(function(done){
        console.log('Suite1:beforeEach');
        done();
    });

    afterEach(function(){
        console.log('Suite1:afterEach');

//        Code to throw Error in async mode
//            setTimeout(function(){
//                throw new Error('Error in afterEach of Suite1!!');
//            },1000);
throw new Error('Error in afterEach of Suite1!!');
});
    it('Suite1-Test1', function(done) {
        console.log('Suite1:Test1');
        done();
    });

    it('Suite1-Test2', function(done) {
        console.log('Suite1:Test2');
        done();
    });

});

describe('Suite 2', function() {

    beforeEach(function(done){
        console.log('Suite2:beforeEach');
        done();
    });

    afterEach(function(done){
        console.log('Suite2:afterEach');
        done();
    });

    it('Suite2-Test1', function(done) {
        console.log('Suite2:Test1');
        done();
    });

    it('Suite2-Test2', function(done) {
        console.log('Suite2:Test2');
        done();
    });

});

});
When the above file is executed you see the below output as expected:
Multiple Suites Test
Suite 1
Suite1:beforeEach
Suite1:Test1
✓ Suite1-Test1
Suite1:afterEach
1) ""after each"" hook
Suite 2
Suite2:beforeEach
Suite2:Test1
✓ Suite2-Test1
Suite2:afterEach
Suite2:beforeEach
Suite2:Test2
✓ Suite2-Test2
Suite2:afterEach
3 passing (14ms)
1 failing

Multiple Suites Test Suite 1 ""after each"" hook:
Error: Error in afterEach of Suite1!!
at Context. (simpleTests.js:12:19)

If the same code is run with commented code enabled and the first afterEach in async mode, the output looks like below,
Multiple Suites Test
Suite 1
Suite1:beforeEach
Suite1:Test1
✓ Suite1-Test1
Suite1:afterEach
1) ""after each"" hook
1 passing (1s)
1 failing

Multiple Suites Test Suite 1 ""after each"" hook:
Uncaught Error: Error in afterEach of Suite1!!
at null._onTimeout (simpleTests.js:14:23)

The second suite is completely ignored.",ajaks328,CONTRIBUTOR,2015-06-29 18:09:05+00:00,True,2015-08-21 16:45:20+00:00,52.94,,3,6,2015-07-05 18:08:26+00:00,6.0,boneskull,MEMBER,1,2,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1770,errors thrown from a vm aren't recognized as errors,"As you can read in the comments on commit 02d421b, it seems that if code under test uses vm.runInNewContext() and throws an Error:
try {
  vm.runInNewContext('throw new TypeError()');
} catch (e) {
  e instanceof Error; // false
}
I think we can safeguard against this by duck-typing instead of an instanceof check.",boneskull,MEMBER,2015-06-30 15:12:26+00:00,True,2015-07-02 18:40:47+00:00,2.14,,2,25,2015-06-30 15:13:04+00:00,0.0,boneskull,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1773,Option to retry tests,"When writing Selenium/browser tests, weird things just break unreliably. I suspect most people who write browser tests find this to be true.
I would love to be able to retry failing tests a certain number of times.
I would love to do something like this:
mocha --retries 3 
...or maybe this:
it('works', function () {
  this.retries(3);
  // try stuff...
});
I'd be willing to PR this if this sounds like a good idea.",EvanHahn,NONE,2015-06-30 23:55:02+00:00,True,2016-03-23 05:36:38+00:00,266.24,,12,41,2015-07-01 05:25:06+00:00,0.23,chenchaoyi,NONE,1,5,0,6,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1775,Fun way to set shared scope with a before-like function,"When I was new to Mocha, I thought that maybe this would work:
describe('Redis should failover successfully', function () 

    before(function(){
         var sentinel = require('redis-sentinel');
         var sentinelClient = sentinel.createClient(endpoints, {role: 'sentinel'});
    });

    it('Should return error 400 when message is not application/json', function (done) {

        sentinelClient.send_command('SENTINEL', ['failover', 'my master'], function(err, resp){
        //of course, sentinelClient is not defined so this won't work
        });
    });
});
however, of course, the before() callback function doesn't share the same scope as the it() callback function.
So you have to do something like this:
describe('Should accept all incoming message.', function () {

    var sentinel = null;
    var sentinelClient = null;

    before(function(){
         sentinel = require('redis-sentinel');
         sentinelClient = sentinel.createClient(endpoints, {role: 'sentinel'});
    });
    it('Should return error 400 when message is not application/json', function (done) {

        sentinelClient.send_command('SENTINEL', ['failover', 'my master'], function(err, resp){

        });
    });
});
Frankly, I find this to be pretty unclean - having to declare variables in the describe block. It would really nice to be able to declare them in the before.
In other words, it would be really slick, using the plasticity of JS, to make the scope for the describe callback to be shared with the scope from the callback of before(), so that you could do what I wanted Mocha to be able to do when I was a Mocha newb.
Has anyone made a request like this prior? Does this make any sense?",ORESoftware,NONE,2015-07-01 19:22:41+00:00,True,2015-07-02 01:00:04+00:00,0.23,,2,8,2015-07-01 20:11:34+00:00,0.03,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1776,--grep is not working,"I can't get --grep to work for either test/filename or the names passed to it().
How can I demonstrate a failing test for this on my local system?",ORESoftware,NONE,2015-07-01 20:15:59+00:00,True,2015-07-02 21:16:47+00:00,1.04,,2,5,2015-07-01 20:34:40+00:00,0.01,ORESoftware,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1778,Put http://mochajs.org/ behind cloudflare,"Should improve caching, adds TLS and should improve search engine ranking (slightly).
What do you guys think?



Current Nameservers
Change Nameservers to:




ns1.dreamhost.com
chad.ns.cloudflare.com


ns2.dreamhost.com
lorna.ns.cloudflare.com


ns3.dreamhost.com
Remove this nameserver",jbnicolai,CONTRIBUTOR,2015-07-05 12:10:28+00:00,True,2015-07-05 20:12:45+00:00,0.33,,2,9,2015-07-05 18:05:31+00:00,0.25,boneskull,MEMBER,1,1,0,0,"['chore', 'needs-feedback']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1779,"Extract the website to a separate repository, mochajs.github.io","For history reasons the mocha website is currently a github project page rather than an organisation site. I'd like to propose we change this.
This would entail:

Create a new repository at github.com/mochajs/mochajs.github.io
Place the content (and perserve history) of the gh-pages branch of this repository under that repository

Benefits:

Separate issue and PR tracking for the website
The direct URL would be http://mochajs.github.io rather than http://mochajs.github.io/mocha
We wouldn't have a gh-pages branch that is completely unrelated to master

So all in all not a huge deal, but I figured it might be nice.",jbnicolai,CONTRIBUTOR,2015-07-05 12:15:01+00:00,True,2015-07-06 00:14:17+00:00,0.5,,2,8,2015-07-05 18:09:36+00:00,0.25,boneskull,MEMBER,1,1,0,0,"['chore', 'documentation', 'needs-feedback']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1780,Deprecate --watch,"@boneskull commented on Jan 30

IMO ""watch"" should be killed. There are other tools which do this sort of thing much better.

@dasilvacontin commented on Jan 31

+1 to kill watch. I don't see the point of replicating the functionality of a watcher inside the project, when any watcher tool will do the job.

Creating a separate issue for this, so we can close the unrelated #871",jbnicolai,CONTRIBUTOR,2015-07-05 14:58:42+00:00,True,2018-03-18 05:49:35+00:00,986.62,,14,37,2015-07-05 18:09:03+00:00,0.13,boneskull,MEMBER,1,3,0,9,"['chore', 'future']",True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1783,Consider relicencing mochajs.org's source,See discussion in #1777,jbnicolai,CONTRIBUTOR,2015-07-05 18:38:03+00:00,True,2015-07-11 18:26:03+00:00,5.99,,2,13,2015-07-05 20:14:01+00:00,0.07,boneskull,MEMBER,1,1,0,0,"['chore', 'documentation']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1786,move all documentation issues into mochajs.github.io repo,"except this one, I guess.",boneskull,MEMBER,2015-07-06 00:17:38+00:00,True,2015-07-12 17:46:46+00:00,6.73,,1,1,2015-07-12 17:46:46+00:00,6.73,boneskull,MEMBER,1,0,0,0,"['chore', 'documentation']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1789,html-runner crashing because of missing process.stdout shim,"When running mocha in the browser you get a crash in the following code:
if (isatty) {
  exports.window.width = process.stdout.getWindowSize
    ? process.stdout.getWindowSize(1)[0]
    : tty.getWindowSize()[1];
}
PR #1788 fixes that.",sunesimonsen,CONTRIBUTOR,2015-07-06 19:52:09+00:00,True,2015-07-06 21:58:07+00:00,0.09,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1790,Certain mocha command line options not working,"I'm baffled by this.  I have mocha 2.2.5 installed globally
Running:
mocha --bail

give the error:
  error: unknown option `--bail'

Other options work fine like
mocha -V
mocha --help
mocha --trace

Then some other options give the same error as --bail
mocha --watch
 error: unknown option `--watch'

mocha --no-timeouts
error: known option `--no-timeouts`

Any clue what could be causing this?  I'm using Node v0.12.6",sarus,NONE,2015-07-06 20:47:32+00:00,True,2017-03-30 18:00:35+00:00,632.88,,9,15,2015-07-06 21:57:07+00:00,0.05,jbnicolai,CONTRIBUTOR,1,2,0,6,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1791,"When a beforeEach fails, the subsequent tests are not reported as failed.","If I write a test like the following:
describe('suite', function () {

  beforeEach(function () {
    throw new Error('Something happened');
  });

  it('should report as failed', function () {

  });

  it('should also report as failed', function () {

  });
});
The output is:

I expected the report to show that two tests failed, and list the names of each of the tests. This is important to me, because I would like to see a consistent list of all of the tests listed in the report and a reason why they failed.",justspamjustin,NONE,2015-07-06 21:31:01+00:00,True,2015-07-06 23:24:36+00:00,0.08,,1,1,2015-07-06 23:24:36+00:00,0.08,justspamjustin,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1792,Group suites over multiple files,"When splitting my tests accross multiple files I got them grouped for each file.
// file1.js
describe('test 1 - file 1', function () {
    // more testcode here
});

// file2.js
describe('test 1 - file 2', function () {
    // more testcode here
});

The output is as expected
test 1 - file 1
    (tests listed here)
test 1 - file 2
    (tests listed here)

But I wonder if it is possible to group these tests by defining an additional ""shared"" describe
// file1.js
describe('grouped', function () {
    describe('test 1 - file 1', function () {
        // more testcode here
    });
});

// file2.js
describe('grouped', function () {
    describe('test 1 - file 2', function () {
        // more testcode here
    });
});

The expected output would be
grouped
    test 1 - file 1
        (tests listed here)
    test 1 - file 2
        (tests listed here)",marcojahn,NONE,2015-07-07 08:37:47+00:00,True,2015-07-10 19:16:46+00:00,3.44,,2,2,2015-07-07 08:45:26+00:00,0.01,marcojahn,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1793,Unexpected working of an after hook,"$ mocha -V
2.2.5
var Q = require('q');

first().then(second)

function first() {
    var deffered = Q.defer();
    describe('First suite', function() {
        after(function someTeardownTask(done) {
            setTimeout(function() {
                deffered.resolve();
                done();
            }, 0);
        });
        it('first spec');
    });
    return deffered.promise;
}
function second() {
    describe('Second suite', function() {
        it('second spec');
    });
}
$ mocha
  First suite
    - first spec

  0 passing (12ms)
  1 pending
if i replace the after hook with before then this works fine.",gig177,NONE,2015-07-10 12:19:38+00:00,True,2015-08-19 18:23:10+00:00,40.25,,3,6,2015-07-10 19:17:31+00:00,0.29,boneskull,MEMBER,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1794,Can't --require custom UI and use it,"In the Third party UIs wiki page, it is said that one can --require a module which enriches the mocha.interfaces object bag with a custom UI and directly use it with the --ui option.
This doesn't seem to work.
Looking at the latest bin/_mocha, I can see why: the UI lookup happens before all the requires are required.
Is this a regression?",joaomoreno,CONTRIBUTOR,2015-07-10 14:27:46+00:00,True,2015-12-25 22:10:47+00:00,168.32,,7,15,2015-07-10 19:18:08+00:00,0.2,boneskull,MEMBER,1,3,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1795,Support Wallaby.js,http://mochajs.org/#editor-plugins — it would be great if you had mentioned Wallaby.js with an intro video here. Much better than default JetBrains test runner.,DenisGorbachev,NONE,2015-07-11 10:18:58+00:00,True,2015-07-11 18:23:49+00:00,0.34,,2,3,2015-07-11 18:08:25+00:00,0.33,boneskull,MEMBER,1,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1796,documentation issues,"now that I've actually moved all the documentation issues, I'm thinking maybe I shouldn't have.  people are probably going to post them here anyway.  maybe I should delete those in the site repo, and reopen the ones I closed here, then disable ""issues"" for the site repo...?
cc @mochajs/mocha",boneskull,MEMBER,2015-07-12 17:48:49+00:00,True,2019-06-03 07:18:31+00:00,1421.56,,4,2,2015-07-15 10:20:14+00:00,2.69,danielstjules,CONTRIBUTOR,1,1,0,0,"['documentation', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1797,"grep does not handle ""("" and "")"" in title","On selecting a set of tests in the web UI, the grep expression is invalid if the title contains parenthesis.
I have a title: ""/blah-endpoint blah blah blah (STATUS: JIRA-313 Story Not Begun)""
On selecting that title, the grep regex that is generated is:
/\/blah-endpoint blah blah blah (STATUS: JIRA-313 Story Not Begun)/
Which fails as it should be:
/\/blah-endpoint blah blah blah \(STATUS: JIRA-313 Story Not Begun\)/",michaelkantor,NONE,2015-07-13 19:38:05+00:00,True,2016-06-09 16:34:50+00:00,331.87,,4,13,2015-07-13 20:59:30+00:00,0.06,michaelkantor,NONE,1,1,0,2,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1798,mocha loses the right title when done called multiple times ,"I just finished trouble-shooting a wierd ""done called multiple times"" message.... phewee.. here's a tricky one:
I had a before-all hook that looked as following:
{ ""lib/rest"" : 
  { beforeAll:
    function(done) {
        this.slow(""1.1s"");
        rest = require('../lib/rest')(sockets, eventsHandler, done);
        setTimeout(done, 1000)
    }
  , 

Where evidently, the done is called both from ../lib/rest and the setTimeout.
Anyway, the ../lib/rest was not calling the callback for a long time, and evidently, making it call the callback as it should - was actually what broke the build.
(I'm using mocha-ui-exports, that's why it looks like that)
However, mocha could not direct me to the right place - probably because the setTimeout handler that was fired after 1s - was called in the midst of some other suite that followed - and mocha was pointing me to the suite and the test that during it's run the timer was fired...
looking there obviously brought nothing, and pending the tests that were reported as failing just moved the failure to another test that was not pended - and that's where I started suspecting that mocha reports the wrong place, and expanded my search.
After fixing the issue (removing the setTimeout from the beforeAll hook) - the suite passes.",osher,NONE,2015-07-14 07:17:51+00:00,True,2015-09-14 19:02:21+00:00,62.49,,2,4,2015-09-11 03:44:51+00:00,58.85,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1799,Using delay in setup() depends on object property ordering,"When trying to set {delay: true} in a mocha.setup() call, it only works if the delay property is set before the ui property.
Here's some reproduction steps for Chrome.
<!doctype html>
<html>
  <head>
    <link rel=""stylesheet"" href=""mocha.css"" />
  </head>
  <body>
    <div id=""mocha""></div>
    <script src=""mocha.js""></script>
    <script>
      window.onload = function() {
        // This works
        mocha.setup({delay: true, ui: 'bdd'});

        // This doesn't
        // mocha.setup({ui: 'bdd', delay: true});


        setTimeout(function() {
          describe('a test', function() {
            it('works', function() {});
          });
          run();
        }, 500);
        mocha.run();
      };
    </script>
  </body>
</html>
In the case where it doesn't work, the global run() method is undefined.
The issue is that mocha.setup() just iterates over the properties and calls their corresponding methods
for (var opt in opts) this[opt](opts[opt]);
And in the ui method, the pre-require event is emitted, and it's in those event handlers that the global ""run"" method is supposed to be registered:
context.run = mocha.options.delay && common.runWithSuite(suite);
However, if the ui method is called before the delay method, then mocha.options.delay will not be set and the global run method will not be defined.",jRiest,NONE,2015-07-14 16:26:59+00:00,False,,,,5,6,2016-08-31 18:59:57+00:00,414.11,jRiest,NONE,2,0,0,3,"['confirmed-bug', 'help wanted', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1801,allowUncaught in 2.3.0 doesn't work for async errors,"Runner.prototype.run adds on a window.onerror handler when it calls
process.on('uncaughtException', uncaught);

This causes tests that throw async errors to fail even if I add my own window.onerror handler.  To fix this it should check the value of this.allowUncaught first, e.g.
if (!this.allowUncaught) {
   process.on('uncaughtException', uncaught);
}

I made this change and the tests I was writing passed.  Would you be willing to accept a pull request for this change?",kevinbarabash,NONE,2015-07-15 01:54:28+00:00,True,2018-01-17 01:45:02+00:00,916.99,,4,9,2015-07-15 09:06:20+00:00,0.3,danielstjules,CONTRIBUTOR,1,1,0,3,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1803,Mocha might crash on unit testing failure randomly,"This is hard to provide reproduce code, but we get mocha randomly crashed if there is unit testing failure.
We have +700 test cases. From time to time, mocha just died silently without any error message. By looking up the reported log, we know there is some unit testing failure. However, since mocha died before spit out the details of assertion statements, we don't know why the unit test case fail.
Is there any way to make mocha dump test case failure info into log file?
For the time being, we just change
https://github.com/mochajs/mocha/blob/master/lib/reporters/spec.js#L74 to be like
  runner.on('fail', function(test, err) {
    cursor.CR();
    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title, err);
  });

So that there is failure reason even mocha crashed.",mocheng,NONE,2015-07-16 11:35:25+00:00,False,,,,6,4,2015-09-11 03:47:06+00:00,56.67,danielstjules,CONTRIBUTOR,0,1,0,3,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1804,How return value from async function in before in mocha and use same value in same describe in function?,"Faced with the problem when writing code. I want to reduce the amount of code used in the tests, but there are problems.
I have test, but he don't worked:
var repeatTests = function(value){
    it ('test1 use value', function(done){
        console.log (value) // return undefined
    }

    it ('test2 use value', function(done){
       console.log (value) // return undefined
    }
}

describe ('test', function(){
    var _value
    before(function(done){
        asyncFunction(function(err, value){
            _value = value
            done();
        }
    })
    repeatTests(_value) // value is undefined
})

But this worked:
describe ('test', function(){
    var _value
    before(function(done){
        asyncFunction(function(err, value){
            _value = value
            done();
        }
    })

    it ('test1 use value', function(done){
        console.log(_value); // return _value
    }

    it ('test2 use value', function(done){
        console.log(_value); // return _value
    }
})
I know why this is happening. Please tell me, how do I implement the first version of the test.",arzonus,NONE,2015-07-16 12:22:28+00:00,True,2015-07-18 10:07:58+00:00,1.91,,2,2,2015-07-16 15:53:37+00:00,0.15,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1805,Console.write() not showing up in terminal,"I'm doing a console.write but do not see it in the mocha test results
        it('we should have an application available', function(done){
            console.write(""I cannot see this in the terminal"");
            server.app.should.be.a('object');
            done();
        });",dschinkel,NONE,2015-07-16 16:05:48+00:00,True,2015-07-16 17:36:18+00:00,0.06,,2,3,2015-07-16 16:35:31+00:00,0.02,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1806,"Mocha loggin ""NaN passing"" and ""NaN failing"" when running tests","The title says it all, I guess.
I run mocha in the root of my project and then I get the output like usual, except for the number of tests passing/failing.
Some class
    ......
    .....


  NaN passing (36ms)
  NaN failing",CGavrila,NONE,2015-07-16 22:25:10+00:00,True,2015-07-16 23:18:43+00:00,0.04,,3,3,2015-07-16 22:45:49+00:00,0.01,boneskull,MEMBER,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1810,"Adding -p,--prepare option to allow async initialization before loading test files","I came across a situation where async initialization before loading all test files has become necessary. The --require option allows us to some initialization tasks but this is synchronous. It would be really great if mocha offers a new option which allows us to give a path to an initialization files like this:
// mocha.ops
-r test/require
--prepare test/init_a
--prepare test/init_b

The init_x files would have something like this:
module.exports = function (cb) {
    // do some async stuff
    cb();
}
or;
module.exports = function () {
    // do some async stuff
    return Promise.resolve().then(function () { /* do something */ });
}
My project started without needing such async initialization for testing. Now it is needed, but we already have a number of test cases that references some variables before before handlers are executed. Modifying all these test cases to do all the initialization in the before handlers are not realistic/doable at this point.
We have experimented the proposed option, in this branch, which works very well. This change is done off of 2.2.5 tag.
Please let me know if this has already been addressed or discussed elsewhere. If this feature is found useful to other users (I am sure it is), I will be more than happy to send a PR for an appropriate branch/revision.",enobufs,NONE,2015-07-20 22:04:47+00:00,True,2019-01-23 22:11:42+00:00,1283.0,,15,35,2015-08-23 12:08:27+00:00,33.59,willfrew,NONE,3,1,0,10,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1811,upgrade Jade dependency,"Our Jade version is ancient and should be upgraded to latest.
But I know that it will break things.
I also know that I'm not interested in fixing it.  So... PR's accepted
(see old PR #1084)",boneskull,MEMBER,2015-07-24 17:58:15+00:00,True,2015-08-16 22:31:03+00:00,23.19,,3,2,2016-04-08 13:41:54+00:00,258.82,timbeadle,NONE,0,0,0,2,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1812,Bail flag causes before() hooks to be run even after a failure,"Example file:
describe('one', function(){
  it('fails', function(){
    throw Error(""failed"");
  });
});

var slowHook = function(next) {
  console.log(""hook"");
  setTimeout(next, 1000);
};

describe('two', function(){
  before(slowHook);
  it('never runs', function(){ });
});

describe('three', function(){
  before(slowHook);
  it('never runs', function(){ });
});

describe('four', function(){
  before(slowHook);
  it('never runs', function(){ });
});
So what I'm seeing is that when you run this with --bail and the first test fails, it keeps going and runs all the other hooks before actually quitting. The output looks like this:
$ mocha --version
2.2.5
$ mocha timeout.js -b


  one
    1) fails

  two
hook

  three
hook

  four
hook


  0 passing (3s)
  1 failing

  1) one fails:
     Error: failed
      at Error (<anonymous>)
      at Context.<anonymous> (timeout.js:3:11)

In our actual code base we have hundreds of test suites each with sometimes lengthy hooks that set up and tear down fixtures in the db. When you run the whole suite with -b, you might see one red dot, and then it appears to hang for over a minute while it is running all the other hooks. Finally it reports with the failure. I can't think of why this would be desirable, so my best guess is that it is a bug.",dpatti,NONE,2015-07-25 18:54:34+00:00,True,2015-09-02 21:22:32+00:00,39.1,,5,5,2015-08-20 13:18:19+00:00,25.77,okv,NONE,0,2,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1813,Tests are broken in Windows,"Having read the contributing guidelines, I realized that on a windows machine I could not confirm whether any changes I committed failed tests or not because many of the tests are failing in windows.
Summary of issues and potential fixes:

I wasn't able to get the windows make to work properly at all.  using cygwin seems to works though.
many references to '/tmp' inside acceptance fs/utils - these can be updated to use os.tmpdir()
passing bin/mocha to exec fails,  ""bin is not recognized as an internal or external command"" -- updating it to node bin/mocha makes it work.
using spawn in integration/helpers doesn't work at all.  Updating to use exec, passing args delimited by a space works. (also need to preface with node, similar to above)

The trickiest one relates to the dot symbol used by windows --
Integration/hook tests takes the output of test results and splits by new lines and the dot symbol.  Thing is, windows doesn't use the dot symbol (\u2024) - it uses a full stop, so the tests fail because the split doesn't work, and a full stop winds up in some of the titles.  Updating the regexp to use a dot in addition to \u2024 makes it fail in a different way (similar to how the tests would fail if the test titles included \u2024).
I think the best way to fix this is to first, change the test to use whatever base reporter exports for the dot symbol, and second, change the windows dot to use \u00B7.   \u2024 would work, but using the default cmd font causes a beep every time it is used (which gets exceedingly annoying) - \u00B7 looks pretty close to the dot character, is supported by cmd and likely wouldn't be used in test titles.
I have fixes ready for these and will send a PR...  I'm looking for confirmation that these changes (a) are welcome, (b) wouldn't break the tests when run in a unix environment (unsure if spawn vs. exec produces different results and whether prefacing the command with node causes issues)",tswaters,NONE,2015-07-26 08:04:45+00:00,True,2016-07-02 05:12:19+00:00,341.88,,4,6,2015-07-26 10:49:40+00:00,0.11,jbnicolai,CONTRIBUTOR,0,1,0,2,"['confirmed-bug', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1815,"Summary lists skipped tests as ""pending"" which isn't entirely correct","Summary example
  27 passing (1m)
  2 pending
  1 failing

You know, you can skip tests with .skip() and these appear in the summary at the end under the pending category which is IMO not correct. Pending != Skipped. Pending can be interpreted as ""not completed yet"" whereas ""skipped"" can mean, code is not complete yet or is breaking for whatever reason.
Any chance skipped tests can be summarised under a new group, i.E.
  27 passing (1m)
  2 skipped
  1 failing",binarykitchen,NONE,2015-07-26 22:59:28+00:00,False,,,,7,5,2015-09-10 01:10:42+00:00,45.09,danielstjules,CONTRIBUTOR,0,2,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1816,document is not defined,"when I typed 'mocha -R HTML test.js'  in CL, it happens!",hardog,NONE,2015-07-27 03:21:08+00:00,True,2015-09-10 01:08:43+00:00,44.91,,2,2,2015-08-13 14:48:54+00:00,17.48,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1818,add --strict flag ,"I'd like a --strict CLI flag that will cause my tests to exit with non-zero status if

any test is marked as only
any test is marked as skipped
any test is marked as pending",charlierudolph,CONTRIBUTOR,2015-07-28 23:54:59+00:00,True,2017-06-04 12:04:11+00:00,676.51,,6,8,2015-07-29 23:00:36+00:00,0.96,boneskull,MEMBER,1,2,0,2,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1819,Mocha versions 2.3.0 and 3.0.0,"Hi,
I am doing some research on Mocha 2.3.0 and 3.0.0 versions and am interested in end of availability/support dates for these versions.
What kind of support I can have if I use theses versions beyond their end of their availability/ support?
Any information on this subject is appreciated.
Best regards,
Ardeshir.",ardeshirbadr,NONE,2015-07-29 13:20:59+00:00,True,2015-09-10 01:08:13+00:00,42.49,,2,1,2015-09-10 01:08:12+00:00,42.49,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1820,xunit reporter broken,"express deprecated res.sendfile: Use res.sendFile instead test/res.sendFile.js:627:15
express deprecated res.sendfile: Use res.sendFile instead test/res.sendFile.js:643:15
express deprecated res.sendfile: Use res.sendFile instead test/res.sendFile.js:655:15
express deprecated res.sendfile: Use res.sendFile instead test/res.sendFile.js:667:15
express deprecated res.sendfile: Use res.sendFile instead test/res.sendFile.js:680:15
express deprecated res.sendfile: Use res.sendFile instead test/res.sendFile.js:707:17
express deprecated res.vary(): Provide a field name test/res.vary.js:12:13
express deprecated res.vary(): Provide a field name test/res.vary.js:28:13
express deprecated utils.flatten: use array-flatten npm module instead test/utils.js:92:11
<testsuite name=""Mocha Tests"" tests=""678"" failures=""0"" errors=""0"" skipped=""0"" timestamp=""Wed, 29 Jul 2015 18:58:44 GMT"" time=""1.859"">
<testcase classname=""Route .all"" name=""should add handler"" time=""0.002""/>
<testcase classname=""Route .all"" name=""should handle VERBS"" time=""0.005""/>
<testcase classname=""Route .all"" name=""should stack"" time=""0.001""/>

here is a small example when you use the xunit reporter on the express framework. I believe that the deprecated warning should also be part of xunit or removed since it breaks the output.",michaeljs1990,NONE,2015-07-29 19:01:46+00:00,True,2015-07-29 23:24:57+00:00,0.18,,2,2,2015-07-29 23:22:41+00:00,0.18,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1821,Ability to force strict mode for all tests.,"Basically, either make mocha itself do something to turn strict mode on or run child process with --use_strict (is that possible somehow?).",diversario,NONE,2015-07-30 21:01:50+00:00,True,2015-12-25 17:31:31+00:00,147.85,,2,2,2015-08-13 14:47:47+00:00,13.74,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1822,How can I just run one test with mocha?,"I have many unit test files and in each one there are plenty of tests.
It takes long to run all of them. But sometimes I only want to see the result of one or several tests.
How can I do?
To add an 'x' before each describe will work. But I will add plenty of 'x', I feel that troublesome. Is there any more simple way to do this?",xidui,NONE,2015-08-01 10:12:32+00:00,True,2015-08-01 10:38:39+00:00,0.02,,3,3,2015-08-01 10:22:07+00:00,0.01,a8m,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1823,Possible to use custom UIs in browser?,I was wondering if this was possible? My naive approach to doing this by using Webpack and following the documentation on the wiki is not working.,keirlawson,NONE,2015-08-03 09:56:23+00:00,True,2016-01-08 04:35:33+00:00,157.78,,5,4,2015-09-09 19:10:03+00:00,37.38,jasonkarns,NONE,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1824,allow multiple globs,"currently, as far as I can tell, mocha only allows you to provide 1 glob per run.  I'd like to be able to provide multiple globs.
i.e.
mocha ""src/**/tests/*.js"" ""tests/**/*.js""
or something along those lines",benmonro,NONE,2015-08-07 11:29:29+00:00,True,2015-08-07 16:59:37+00:00,0.23,,1,1,2015-08-07 16:59:51+00:00,0.23,benmonro,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1825,'Timeout of 2000ms exceeded' issue with Mocha and Mongoose,"Here is my mocha testing file test-api.js :
var should = require('should');
var mongoose = require('mongoose');
var request = require('supertest');
var db = require('../config/db');
var post = require('../app/models/post');
var faker = require('faker');


describe('Post', function () {
    var url = 'http://localhost:3000';

    before(function (done) {
        var db_url = db.url_test;
        mongoose.connect(db_url, done);
    });

    it('should post a post and get the post back', function (done) {
        var _body = {
            title: faker.name.title(),
            body: faker.lorem.paragraph()
        };
        //console.log(_body);
        request(url)
            .post('/api/post')
            .send(_body)
            .end(function (err, res) {
                //if (err) {
                //    console.log(err);
                //    //console.log('/api/post post method failed!');
                //}
                //console.log('res.body: ');
                //console.log(res.body);
                res.body.should.have.property('url');
                res.body.should.have.property('title');
                res.body.should.have.property('body');
                res.body.should.have.property('date');
                done();
            });
    });

    it('should get all the posts', function (done) {
        request(url)
            .get('/api/post')
            .expect(200)
            .end(function (err, res) {
                if (err) {
                    console.log(err);
                    //console.log('/api/post get method failed!')
                }
                res.body.should.have.property('count');
                res.body.should.have.property('limit');
                res.body.should.have.property('page');
                res.body.should.have.property('results');
                //console.log(res.body);
                done();
            });
    });
});
I think the problem is inside the before function, because if I run mongoose.connect() inside the server.js (Which is the api launching js file), I can get the test passing output.
But I want to use the specific database only for testing, so I don't want to put the mongoose.connect() inside the server.js file.
Here is the problematic output of mocha:
  Post
    1) should post a post and get the post back
    ✓ should get all the posts (52ms)


  1 passing (2s)
  1 failing

  1) Post should post a post and get the post back:
     Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.

Now I have no idea how to deal with this problem, please help me (T_T).... Thank you.!",elegracer,NONE,2015-08-11 05:07:08+00:00,True,2015-09-10 01:03:07+00:00,29.83,,8,9,2015-08-13 14:45:33+00:00,2.4,danielstjules,CONTRIBUTOR,0,1,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1826,"all asserts uncluided inside any 'it' function, always return true.","In windows, I've the following code:
var Sequelize = require('sequelize'),
    assert = require('chai').assert,
    expect = require('chai').expect;

describe('sequelize', function(){
    describe('Select * from table', function(){

        it('should return a list', function(){
            sequelize.query('SELECT * from table').spread(function (results, metadata) {
                expect(results).be.a('array');
                assert.typeOf(results,'number');
            });
        });      
    })
});


I'm sure that return is an array. but the result of test is always ok:
sequelize
Select * from account_
√ should return a list
But if I take out the assert from 'it' method, it runs like is espected.",juanmiguelRuaDev,NONE,2015-08-11 12:43:00+00:00,True,2015-09-10 01:05:08+00:00,29.52,,2,2,2015-08-13 14:43:38+00:00,2.08,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1828,Glob pattern not working as expected,"I'm using mocha on a node project. I'd like to run all js files in a test directory and its subdirectories. I've added this block to my package.json:
  ""scripts"": {
    ""test"": ""mocha ./test/**/*.js""
  }

This glob pattern ONLY matches files in subdirectories of tests; it does not match top level files. This is confusing to me because the pattern as run through the glob module does indeed match as desired. Am I missing something obvious here or is this a bug?",cappslock,NONE,2015-08-11 16:09:54+00:00,True,2015-08-12 20:54:51+00:00,1.2,,4,7,2015-08-11 16:13:04+00:00,0.0,cappslock,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1831,Add `--grep` extension to run all tests if no matches,"We have a make task that runs a watcher; the watcher runs our test suite after each build of our app. If I want to solo out a test I have to quit the watcher and rerun it passing in --grep @solo. It would be great to be able to hardcode the --grep @solo in our make task, so that all we have to do is add the tag whenever we want and it will match just what we want. However, if we don't have anything soloed out, we would want the entire test suite to run.
I'm thinking I could implement this by adding a an extra flag that causes mocha to first do the grep silently then run all tests if there are no matches. Maybe something like:
mocha --grep @solo --run-all-no-matches tests
Before I start trying to implement and send a PR, I wanted to get the feel from the community. Does this functionality exist and I'm missing something? If not, is this something others would find useful?",joefiorini,NONE,2015-08-14 16:16:46+00:00,False,,,,5,4,2015-08-24 17:51:32+00:00,10.07,dasilvacontin,CONTRIBUTOR,1,1,0,0,"['feature', 'needs-review']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False
1832,Kill diff support,"In #1071 I requested diff support in the HTML reporter, but it was closed pointing to http://unexpected.js.org/.
In other words, the response was “it’s up to the assertion library”.
At first I thought that was a shame, because it felt like such duplicated effort for each assertion library to implement diffing (of course, every assertion library doesn’t have to do it; some might dislike diffing and consider it a feature, but most, I think, like diffs).
Now I’ve tried Unexpected (see link above) a bit, and boy do I like it! It’s diffs are pure awesomeness! When playing with it I realized that if assertion libraries do diffs themselves they can do it a lot better, since they have access to much more information than mocha. Another example is https://github.com/power-assert-js/power-assert.
mocha’s diffing has been plagued with issues and regressions, and has a bunch of open (and semi-open) issues right now: #1241, #1348, #1624, #1712.
I’d like to open the discussion on removing diffs from mocha entirely, and let it focus on doing what it does well. Leave diffs to the assertion libs which have the possibility to do it better. Just my 2¢.",lydell,NONE,2015-08-15 14:25:46+00:00,True,2017-04-27 15:28:47+00:00,621.04,,2,0,,,,,0,0,0,0,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1833,Mocha npm module request testing,"var request = require('request')
var fs = require('fs')

describe('request', function () {

    it('request module testing ', function (done) {

      request('http://www.google.com', function (error, response, body) {
        if (!error && response.statusCode == 200) {
          console.log(body) // Show the HTML for the Google homepage.
        }
        })

        done();
    });
});

Why does this test not print anything ?",orbatschow,NONE,2015-08-15 14:52:33+00:00,True,2015-08-15 15:14:51+00:00,0.02,,2,1,2015-08-15 15:14:51+00:00,0.02,jbnicolai,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1834,describe.only() does not work when string is the same as another describe() block,"With two describe() blocks that have identical strings,
when one of them is a describe.only(),
only that one's tests should run,
however, both of them run.
describe.only('foo', function() {
  it('bar', function(done) { done(); });
});

describe('foo', function() {
  it('baz', function(done) { done(); });
});
[foo]
  ✓ bar

[foo]
  ✓ baz
More worryingly, if there are other unrelated describe() blocks,
they also seems to get run for no reason as well.
describe.only('foo', function() {
  it('bar', function(done) { done(); });
});

describe('foo', function() {
  it('baz', function(done) { done(); });
});

describe('completely', function() {
  it('unrelated', function(done) { done(); });
});
[foo]
  ✓ bar

[foo]
  ✓ baz

[completely]
  ✓ unrelated
Changing the string in describe() causes the behaviour to be normal
describe.only('foo only', function() {
  it('bar', function(done) { done(); });
});

describe('foo', function() {
  it('baz', function(done) { done(); });
});
[foo only]
  ✓ bar",bguiz,NONE,2015-08-15 23:32:55+00:00,True,2015-08-19 18:25:42+00:00,3.79,,4,5,2015-08-19 18:25:42+00:00,3.79,boneskull,MEMBER,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1836,merge v2.3.0 -> v3.0.0,there's a conflict in lib/runnable.js that I need to sort out,boneskull,MEMBER,2015-08-16 22:46:19+00:00,True,2017-10-18 04:16:30+00:00,793.23,,3,7,2015-08-16 22:53:28+00:00,0.0,boneskull,MEMBER,1,2,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1837,mocha can't find module 'coffee-script/register' if not run at the root of the project,"How to Reproduce the problem


Setup the repo and install its coffee-script dependency.
git clone https://github.com/albertnetymk/mocha_dummy
cd mocha_dummy
npm install



Run mocha at the root of the project.
mocha --compilers coffee:coffee-script/register test/*

and the output is:
    0 passing



Run mocha at the non-root of the project.
cd test; mocha --compilers coffee:coffee-script/register *

and the output is:
...
Error: Cannot find module 'coffee-script/register'
...



ENV
mocha: 2.25",albertnetymk,NONE,2015-08-17 18:56:32+00:00,True,2015-08-19 18:24:42+00:00,1.98,,2,2,2015-08-19 18:24:42+00:00,1.98,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1838,"When using --delay, .only() no longer works","When I run a test with --delay, and I specify only(), the entire test suite gets run, not just the only block.",wlingke,NONE,2015-08-19 16:39:23+00:00,True,2019-01-22 21:31:34+00:00,1252.2,,7,9,2015-08-19 18:21:54+00:00,0.07,boneskull,MEMBER,2,2,0,4,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1842,better scoping for css rules,"It's easy for mocha browser elements to inherit undesired css rules. Just look at those class names.. .progress...
Quoting  @irnc at #1827 (comment):

In order to prevent such conflicts from happening, it is a good idea to avoid nesting in mochas CSS, e.g. by adapting BEM naming convention (see https://css-tricks.com/bem-101/).
Giving mocha elements classes named mocha-stats-progress will eliminate conflicts with other libraries entirely.",dasilvacontin,CONTRIBUTOR,2015-08-22 23:08:30+00:00,True,2018-10-11 09:27:10+00:00,1145.43,,2,0,,,,,0,0,0,0,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1843,how to show the whole stacktrace when there is exception in test case of bower mocha,"At the current time, it's only output the error string
but without the stacktrace information and hard to debugging",lygstate,NONE,2015-08-23 05:14:22+00:00,True,2015-08-23 17:27:18+00:00,0.51,,5,7,2015-08-23 17:27:18+00:00,0.51,boneskull,MEMBER,2,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1844,update deps,"It seems that several dependencies are outdated
When upgrading outdated on our project mocha blows up because it uses an old commander dependency that causes
(node) child_process: options.customFds option is deprecated. Use options.stdio instead.",thepian,NONE,2015-08-23 21:00:43+00:00,True,2017-09-29 18:54:33+00:00,767.91,,7,9,2015-08-25 09:19:50+00:00,1.51,listepo,NONE,1,2,0,3,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1845,Execution order with before and describe,"Hello,
If you follow this example :
before(function() { console.log('before exterior'); });
    after(function() { console.log('after exterior'); });
    describe('test', function() {
        describe('testUnder', function() {

            var declaration = ""Declaration"";
            console.log(declaration);

            before(function() { console.log('before'); });
            after(function() { console.log('after'); });

            beforeEach(function() { console.log('beforeEach'); })
            afterEach(function() { console.log('afterEach'); });

            it('fails sync', function(done) {
                console.log(""Func 1"");
                done();
                //throw new Error('failed');
            });

            it('fails async', function(done) {
                console.log(""Func 2"");
                process.nextTick(function() {
                    done();
                    //throw new Error('failed');
                });
            }); 
        });
    });
The result is  :
LOG: 'Declaration'
LOG: 'before exterior'
LOG: 'before'
LOG: 'beforeEach'
LOG: 'Func 1'

Start:
  test
    testUnder
      ✔ fails sync
LOG: 'afterEach'
LOG: 'beforeEach'
LOG: 'Func 2'
      ✔ fails async
LOG: 'afterEach'
LOG: 'after'
LOG: 'after exterior'

I notice that the variable assignment of declaration is done before the execution of the before statement. It looks really counterintuitive.
Should not it be the opposite ?",Jno21,NONE,2015-08-24 13:30:21+00:00,True,2015-08-24 14:21:13+00:00,0.04,,2,2,2015-08-24 14:21:13+00:00,0.04,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1846,Harmony flags,"Rather than exposing individual node/iojs harmony flags, what if we were to expose only a single --harmony flag that enabled all harmony features for that environment?",danielstjules,CONTRIBUTOR,2015-08-26 05:28:43+00:00,True,2017-03-30 14:34:53+00:00,582.38,,5,20,2015-09-10 03:57:47+00:00,14.94,jkresner,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1847,watch fails when requiring mocha functions,"consider following script:
// test.js
var describe = require('mocha').describe;
var it = require('mocha').it;

describe('suite', function () {
  it('should', function () { });
});
when run with the following command:
mocha -w test
The test runs once but as soon as you save the file the tests don't run anymore and the output says 0 passing",Janpot,NONE,2015-08-26 09:13:44+00:00,True,2017-03-30 14:53:22+00:00,582.24,,7,9,2015-08-29 08:02:06+00:00,2.95,SerkanSipahi,NONE,0,0,0,7,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1849,Manually import / require describe it etc?,"Is there anyway to manually import / require functions like describe and it?
I'd like to use mocha without the commandline interface, in a regular browser. (I'm using JSPM as dependency manager)
I couldn't find documentation on this on the Mocha website.",peteruithoven,NONE,2015-08-28 16:37:51+00:00,True,2015-09-23 03:34:36+00:00,25.46,,3,4,2015-08-29 06:05:01+00:00,0.56,SerkanSipahi,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1850,Reduce mocha bundle filesize,Based on defunctzombie/zuul#227 (comment) mocha's size blew up a bit in the latest master.,danielstjules,CONTRIBUTOR,2015-08-31 05:26:44+00:00,False,,,,4,2,2017-10-17 05:24:21+00:00,778.0,stale,NONE,0,0,0,2,"['chore', 'good-first-issue', 'help wanted', 'semver-patch']",True,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1851,add gitter notifications to .travis.yml,"I'm not sure, but I believe it's currently sending notices to Slack, which we don't use.",boneskull,MEMBER,2015-08-31 05:43:11+00:00,False,,,,2,0,,,,,0,0,0,0,['nice-to-have'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1853,-,"My bad, close this, sorry.",jdelafon,NONE,2015-09-02 07:29:41+00:00,True,2015-09-02 07:32:45+00:00,0.0,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1854,"How to continue test, when was called assert.equal","My test:
var assert = require('assert'),
    test = require('selenium-webdriver/testing'),
    webdriver = require('selenium-webdriver');

test.describe('Start tests', function() {
    var driver;
    var hrefs = [];
    test.before(function () {
        driver = new webdriver.Builder().
            withCapabilities(webdriver.Capabilities.chrome()).
            build();
    });
test.it('HomePage and parsing URLs', function(done) {
        driver.get('http://site.local');
        var startButton = driver.findElement({css:'.btn-green'});
        startButton.click();
        driver.findElements({css: '.list-services-desktop a.list-services-link'}).then(function (elements_arr) {
            for (index in elements_arr) {
                if (!elements_arr.hasOwnProperty(index)) continue;
                elements_arr[index].getAttribute('href').then(function(value){
                    hrefs.push(value);
                });
            }
            done();
        });
    });
    test.it('Bypassing links', function(done) {
        for (index in hrefs) {
            if(index > 5){
                break;
            }
            if (!hrefs.hasOwnProperty(index)) continue;
            driver.get(hrefs[index]).then(function(){
                driver.getTitle().then(function(title){
                    //assert.equal(title, 'webdriver');
                });

            });
            driver.sleep(1000);
        }
        done();
    });

    test.after(function () {
        driver.quit();
    });
});
I want, that when called assert.equal,  test continued to work. But, exceptions should be recorded in the report. Please help me",combatx007,NONE,2015-09-02 08:58:27+00:00,True,2015-09-02 21:18:56+00:00,0.51,,2,2,2015-09-02 21:18:56+00:00,0.51,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1855,Fail tests/suites that does not exit gracefully when --no-exit flag is used,"I recently tried the --no-exit flag and found it a terrific way to determine if any of my modules keep active listeners. However, if it is the case that I have open listeners then mocha never exits. Would it be possible to add a timeout just as in asynchronous tests for this. Meaning that if I use the --no-exits flag and the event loop is not clear after my suite is complete, then make the test fail.
I'd be happy to supply this as a PR if the idea is accepted.",TheLudd,NONE,2015-09-02 10:03:36+00:00,False,,,,5,5,2015-09-02 21:17:16+00:00,0.47,boneskull,MEMBER,1,2,0,2,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1856,Bind ES6 arrow functions to Context,"disclaimer: I'm quite new to Mocha and to arrow functions, so feel free to close this if it's nonsense. :)
Consider these three tests:
test('Mocha Context available in normal ES5 functions', function() {
  expect(this.slow).to.be.a('function');
});
test('Mocha Context available ES6 arrow functions', () => {
  // Will fail, because it's bound to `window`:
  expect(this.slow).to.be.a('function');
});
test('Mocha Context available in nested, bound ES6 arrow functions', function() {
  (() => {
    expect(this.slow).to.be.a('function');
  })();
});
afaics this is because Mocha uses fn.call(ctx); to execute the function passed to test, which does not have the desired effect in case of ES6 arrow functions, as you can read here and also see if you run this in your browser console:
(() => { console.log(this); }).call({ foo: 'bar' });
// prints the Window object
(function() { console.log(this); }).call({ foo: 'bar' });
// prints { foo: 'bar' }
(function() { (() => { console.log(this); })(); }).call({ foo: 'bar' });
// prints { foo: 'bar' }
Looking especially at how that third test (arrow function wrapped inside a normal function) does pass, I think it could be fixed by wrapping the variable fn in a normal ES5 function before calling its .call method, i.e. replacing that fn.call(ctx); with (function() { fn(); }).call(ctx); on line 289 of Runnable.js",michielbdejong,CONTRIBUTOR,2015-09-02 13:57:09+00:00,True,2015-09-10 00:52:24+00:00,7.46,,5,10,2015-09-02 14:42:40+00:00,0.03,michielbdejong,CONTRIBUTOR,0,3,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1857,Spies not being removed after tests in 2.3.0,"As soon as we upgraded to mocha 2.3.0 our tests started failing with the error:
TypeError: Attempted to wrap {some function name} which is already wrapped. We're using sinon.js to create spies. Seems like there's some kind of incompatibility with sinon and mocha 2.3.0?",rayd,NONE,2015-09-02 20:01:38+00:00,True,2017-10-31 17:23:10+00:00,789.89,,3,3,2015-09-02 21:16:01+00:00,0.05,boneskull,MEMBER,1,0,0,1,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1859,Error stack filtering should be configurable,"While I think excluding lines with node_modules substring from error stacks is reasonable, excluding stack lines with components substring seems very questionable. We have hit the issue in wallaby.js and I'm sure many people may have missing stack lines for their components folders and subfolders in their specs and source folders.
Setting fullTrace somewhat helps, but it starts reporting node_modules stack lines.
What do you think about having a setting to set an array of strings (or a function) to be used for filtering error stacks?",ArtemGovorov,CONTRIBUTOR,2015-09-03 03:26:34+00:00,True,2017-03-30 16:48:21+00:00,574.56,,5,6,2015-09-03 04:47:21+00:00,0.06,aaronjensen,NONE,0,1,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1860,Unable to listen end of test,"I write my own reporter and I am wondering how to detect end of testcase.
I tried to listen event test end, but according to source code afterEach hooks are invoked after this event. It affects me, because I want to know time of whole test execution, including teardown actions. Also afterEach, can emit a fail event and it a bit unexpected, because a test already report about its finish.
Moreover, test event is emitted before beforeEach hooks invocation.
What about extra event afterEach end which will be fired after afterEach hooks invocation?",just-boris,NONE,2015-09-03 13:18:21+00:00,False,,,,6,8,2015-09-09 23:36:21+00:00,6.43,danielstjules,CONTRIBUTOR,1,2,0,2,"['feature', 'needs-feedback', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1861,"How to get runner in my module, if it is not reporter","I wrote assert module for my tests. Now i want to get runner, that catch event of end any test. After or afterEach does not suit me.",combatx007,NONE,2015-09-03 17:11:26+00:00,True,2017-08-12 13:29:59+00:00,708.85,,3,2,2015-09-09 21:38:57+00:00,6.19,danielstjules,CONTRIBUTOR,0,1,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1863,stack traces are useless,"Chrome 45.0.2454 (Mac OS X 10.10.5) ERROR
  Uncaught TypeError: Cannot read property 'actions' of undefined
  at /Users/vlin/workspace/source-2/responsive-web/src/tests.bundle.js:55939:0 <- webpack:///src/modules/flux-context/index.jsx:41:8
Chrome 45.0.2454 (Mac OS X 10.10.5): Executed 0 of 0 ERROR (1.175 secs / 0 secs)

Great? Could really use more than one line of context here. I'm not sure if the problem lies in mocha, karma-webpack, webpack, karma, babel, or any of the other bricks in the towering abomination of build tools we've constructed...",wonnage,NONE,2015-09-03 22:28:58+00:00,True,2015-09-04 23:30:43+00:00,1.04,,4,6,2015-09-04 01:06:14+00:00,0.11,danielstjules,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1864,xunit reporter does not report <testcase />,"currently Xunit reporter only reports the top
<testsuite name=""Mocha Tests"" tests=""16"" failures=""0"" errors=""0"" skipped=""0"" timestamp=""Fri, 04 Sep 2015 23:05:49 GMT"" time=""0.043"">`

but not the child test cases
something that i would expect is:
<testsuite name=""Mocha Tests"" tests=""16"" failures=""0"" errors=""0"" skipped=""0"" timestamp=""Fri, 04 Sep 2015 23:35:14 GMT"" time=""0.043"">
  <testcase classname=""case1"" name=""abc"" time=""0.2""/>
  <testcase classname=""case2"" name=""cde"" time=""0.1""/>
</testsuite>

is there a reason for it?",aaronabramov,NONE,2015-09-05 00:10:17+00:00,True,2015-09-09 20:15:54+00:00,4.84,,7,10,2015-09-05 04:18:35+00:00,0.17,boneskull,MEMBER,1,2,0,4,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1865,Single-expression ES6 arrow functions being treated as Promises,"I have some test code I am converting to ES6.
The ES5 version of the code is as follows:
it(""should be a function"", () => {
    test.function(encapsulate);
});

Converting it to ES6 Arrow functions one would think to use the following form:
it(""should be a function"", () => test.function(encapsulate));

Unfortunately, this test fails because Mocha seems to think that if a value is returned by a test it must be a Promise and works on the assumption that is is one. This breaks the above form.
Instead, one is forced to do the following:
it(""should be a function"", () => { test.function(encapsulate) });

While there isn't much difference I do think the 2nd form is optimally readable and it would be nice if Mocha allowed some way to handle it...",OOPMan,NONE,2015-09-06 08:33:43+00:00,True,2015-09-08 20:31:34+00:00,2.5,,3,12,2015-09-06 08:50:35+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1866,ES6 Template strings break describe,"I am writing my tests in ES6 and using babel to transpile them. I ran into the following issue when attempting to use an ES6 template string.
ES6 version of code:
describe(```
    var A = encapsulate({
        x: 0,
        y: function () {
            return this.x;
        }
    })```,
    () => {
        // DO STUFF
});

ES5 version of code:
describe(
    ""var A = encapsulate({"" +
    "" x: 0,"" +
    "" y: () => {"" +
    "" return this.x;"" +
    "" }"" +
    ""})"",
    function () {
        // DO STUFF
});

The ES6 version fails with the following error when run:
 adamj@Harvester  ~/Development/Personal/Javascript/encapsulate   master ●✚  babel-node ./node_modules/mocha/bin/mocha
/home/adamj/Development/Personal/Javascript/encapsulate/test/encapsulate.es6:63
    describe(''(_templateObject2)(_templateObject), function () {
               ^
TypeError: """" is not a function
    at Suite.<anonymous> (/home/adamj/Development/Personal/Javascript/encapsulate/test/encapsulate.es6:40:13)
    at context.describe.context.context (/home/adamj/Development/Personal/Javascript/encapsulate/node_modules/mocha/lib/interfaces/bdd.js:47:10)
    at Object.<anonymous> (/home/adamj/Development/Personal/Javascript/encapsulate/test/encapsulate.es6:5:1)
    at Module._compile (module.js:430:26)
    at normalLoader (/home/adamj/Development/Personal/Javascript/encapsulate/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:199:5)
    at Object.require.extensions.(anonymous function) [as .es6] (/home/adamj/Development/Personal/Javascript/encapsulate/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:216:7)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Module.require (module.js:365:17)
    at require (module.js:384:17)
    at /home/adamj/Development/Personal/Javascript/encapsulate/node_modules/mocha/lib/mocha.js:216:27
    at Array.forEach (native)
    at Mocha.loadFiles (/home/adamj/Development/Personal/Javascript/encapsulate/node_modules/mocha/lib/mocha.js:213:14)
    at Mocha.run (/home/adamj/Development/Personal/Javascript/encapsulate/node_modules/mocha/lib/mocha.js:453:10)
    at Object.<anonymous> (/home/adamj/Development/Personal/Javascript/encapsulate/node_modules/mocha/bin/_mocha:401:18)
    at Module._compile (module.js:430:26)
    at Object.Module._extensions..js (module.js:448:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:471:10)
    at startup (node.js:117:18)
    at node.js:953:3
 ✘ 

My mocha.opts is as follows:
--require babel/register -C -R spec ./test/*.es6",OOPMan,NONE,2015-09-06 09:11:53+00:00,True,2015-09-06 17:51:00+00:00,0.36,,3,3,2015-09-06 17:51:00+00:00,0.36,danielstjules,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1867,2.3.0 no longer installs on older npm versions,"Hi! It looks like PR #1753 added the line ""lodash.create"": ""^3.1.1"" to package.json, which means that mocha no longer installs with versions on npm that do not understand the ^ specifier. It's also the only non-exact version in dependencies. Can a version be published with that changed to an exact version, please?",dougwilson,CONTRIBUTOR,2015-09-07 03:15:54+00:00,True,2015-09-07 03:29:40+00:00,0.01,,2,18,2015-09-07 03:17:43+00:00,0.0,boneskull,MEMBER,1,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1868,remove lodash.create for npm < v1.3.7 support,prompted by #1867,boneskull,MEMBER,2015-09-07 17:25:58+00:00,True,2015-09-07 18:27:43+00:00,0.04,,5,9,2015-09-07 18:34:45+00:00,0.05,boneskull,MEMBER,1,4,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1869,remove npm upgrade in .travis.yml,"currently we run scripts/ensure-compatible.npm.sh to upgrade npm if it's old.  since we want to retain support for old npm versions (for now), let's not do that.",boneskull,MEMBER,2015-09-07 18:25:06+00:00,True,2015-09-07 18:34:08+00:00,0.01,,2,14,2015-09-07 18:30:33+00:00,0.0,boneskull,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1870,set up codeclimate properly,"add a .codeclimate.yml or whatever the hell.
 is a little embarrassing, even if it doesn't mean much",boneskull,MEMBER,2015-09-08 01:51:14+00:00,False,,,,3,2,2015-09-08 14:57:12+00:00,0.55,dasilvacontin,CONTRIBUTOR,0,1,0,1,"['documentation', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1872,IE8 compatibility,"We should setup some unit tests or linting rules for verifying basic compatibility with IE8 and lower. An es5 shim might also work, but is a bit heavy.
#1617
#1858",danielstjules,CONTRIBUTOR,2015-09-08 18:52:15+00:00,True,2017-08-25 21:43:30+00:00,717.12,,3,1,2017-08-25 21:43:30+00:00,717.12,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['browser', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1873,error with out line info.,"sails GroceryController should update store info

60 passing (12s)
1 failing

sails GroceryController should update store info:
Uncaught TypeError: undefined is not a function

only tells that there is undefined variable but don't given the line that have such variable",calidion,NONE,2015-09-09 04:59:40+00:00,True,2017-10-31 08:23:11+00:00,783.14,,4,3,2015-09-09 20:22:15+00:00,0.64,danielstjules,CONTRIBUTOR,0,2,0,1,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1874,Command-line Flag for io.js support,"Will there be a command-line flag to support io.js. I am having difficulties in running libraries like zombie.js. I hope we could have something like
mocha --iojs",,NONE,2015-09-09 07:32:45+00:00,True,2015-09-09 21:37:07+00:00,0.59,,1,1,2015-09-09 21:37:07+00:00,0.59,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1875,Markdown reporter error: Maximum call stack size exceeded,"We are using Markdown reporter for our Mocha tests and started having troubles with version 2.3.0 and above. There seems to be an infinite recursion in Markdown reporter:
$ NODE_ENV=test ./node_modules/.bin/mocha --reporter markdown >> docs/README.md

/home/balder/git/payments/node_modules/mocha/lib/reporters/markdown.js:40
    obj = obj[key] = obj[key] || { suite: suite };
                        ^

RangeError: Maximum call stack size exceeded
  at mapTOC (/home/balder/git/payments/node_modules/mocha/lib/reporters/markdown.js:40:25)
  at /home/balder/git/payments/node_modules/mocha/lib/reporters/markdown.js:42:7
  at Array.forEach (native)
  at mapTOC (/home/balder/git/payments/node_modules/mocha/lib/reporters/markdown.js:41:18)
  at /home/balder/git/payments/node_modules/mocha/lib/reporters/markdown.js:42:7

Apparently, the issues started with commit 3f78f10, with the changes in the mapTOC function in lib/reporters/markdown.js, more precisely, deletion of callback parameter in the foreach loop:
function mapTOC(suite, obj) {
    var ret = obj;
    var key = SUITE_PREFIX + suite.title;

    obj = obj[key] = obj[key] || { suite: suite };
    suite.suites.forEach(function() { // suite param missing leads to infinite recursion
      mapTOC(suite, obj);
    });

    return ret;
  }
I have tested locally and adding the param back fixes the issue.",baldercm,NONE,2015-09-09 12:15:39+00:00,True,2015-09-09 19:17:34+00:00,0.29,,2,1,2015-09-09 18:14:07+00:00,0.25,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1877,include version number in build,There needs to be a way for someone to ascertain which version of mocha they are using (if using the browser distribution).,jasonkarns,NONE,2015-09-09 18:37:58+00:00,False,,,,3,1,2015-12-16 16:03:00+00:00,97.89,bcowgill,NONE,0,0,0,1,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1879,_mocha fails --use_strict  --harmony_arrow_functions  --expose_internals with IO.js,"in this line ""Reporter"" isn't declared properly
try {
  Reporter = require('../lib/reporters/' + program.reporter);
} catch (err) {
SHOULD BE
var Reporter = null;
try {
  Reporter = require('../lib/reporters/' + program.reporter);
} catch (err) {",TroyWorks,NONE,2015-09-09 21:56:07+00:00,True,2015-12-25 17:31:31+00:00,106.82,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1884,upgrade to 2.3.x makes markdown reporter fail,"When using mocha 2.3.x together with the markdown reporter I am getting the following error:
/home/frederik/foobar/node_modules/mocha/lib/reporters/markdown.js:41
    suite.suites.forEach(function() {
                 ^
RangeError: Maximum call stack size exceeded

This is called using a npm script:
  ""scripts"": {
    ""pretest"": ""jshint ."",
    ""test"": ""mocha test/."",
    ""posttest"": ""cat README.install.md > README.md && mocha test/. -R markdown >> README.md""
  }

The test hook itself will pass just fine.
When I downgrade to 2.2.5 it will work as expected.
The test suite sems to be of no importance as I tried using:
var assert = require('assert');
describe('test', function(){
  it('passes', function(){
    assert(true);
  });
});
and the issue persists.",m90,NONE,2015-09-10 15:49:53+00:00,True,2015-09-10 15:54:06+00:00,0.0,,2,2,2015-09-10 15:54:06+00:00,0.0,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1887,"2.3.{0,1,2} no longer installs on older npm versions","This is a new issue to continue discussion around this (previous #1867 and #1868). There were multiple attempts to fix this regression in 2.3.x, but there is still an issue. The currently known issue is the jade upgrade: jade was upgraded in 2.3.0 up past a major breaking version, which dropped npm supported versions.
@boneskull had some thoughts on what to do here: #1868 (comment)",dougwilson,CONTRIBUTOR,2015-09-11 23:39:02+00:00,True,2015-09-13 20:03:49+00:00,1.85,,4,5,2015-09-12 23:29:59+00:00,0.99,danielstjules,CONTRIBUTOR,1,3,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1890,specify type of runnable in multiple done error,"before:
 1) suite test1:
     Uncaught Error: done() called multiple times
      at Suite.<anonymous> (test/integration/fixtures/multiple.done.beforeEach.js:2:3)
      at Object.<anonymous> (test/integration/fixtures/multiple.done.beforeEach.js:1:63)
      at Array.forEach (native)
      at node.js:814:3

after:
 1) suite test1:
     Uncaught Error: done() called multiple times in `beforeEach` hook
      at Suite.<anonymous> (test/integration/fixtures/multiple.done.beforeEach.js:2:3)
      at Object.<anonymous> (test/integration/fixtures/multiple.done.beforeEach.js:1:63)
      at Array.forEach (native)
      at node.js:814:3",dasilvacontin,CONTRIBUTOR,2015-09-14 11:07:48+00:00,True,2015-09-14 17:41:07+00:00,0.27,,2,3,2015-09-14 16:57:15+00:00,0.24,danielstjules,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1891,Node 4.0 and Mocha Generator Functions,"Just wondering if I need to try to use middleware such as gulp-mocha-co or mocha-generators since Node 4.0 includes support for generators via ES6.
So should we assume we should be able to now run tests like this with Node 4.0 which would use ES6 natively?
it('should return all countries when no id passed', function*(done){

    ..some code
    responseModel.countries.should.have.length(2);
    responseModel.countries[0].id.should.equal(55);
    responseModel.countries[1].id.should.equal(10);
    done();
});",dschinkel,NONE,2015-09-14 20:05:10+00:00,True,2015-09-14 20:16:10+00:00,0.01,,2,7,2015-09-14 20:16:10+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1892,Wrong line numbers in stack traces if a test fail,"When my tests fail, I'm having wrong line numbers in stack traces.
Look at this stackoverflow: http://stackoverflow.com/q/25770946/535203",anthony-o,NONE,2015-09-15 13:57:37+00:00,True,2015-09-15 15:48:51+00:00,0.08,,2,3,2015-09-15 14:13:05+00:00,0.01,dasilvacontin,CONTRIBUTOR,0,1,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1893,"HTML reporter fails if some Unicode characters are in use, causing tests to stop running","I was working on a project that ran test vectors of the IdnaTest.txt Unicode data file, and I noticed that when certain Unicode characters were in use, the HTML reporter (but not the standard node.js reporters) would stop working properly. An example of such a test case is:
test('T;  퀬-\uDF7E\uD9AE\uDD23.\u200C\uD804\uDD33\uD95B\uDF38𝟤;  [P1 V6 C1]; [P1 V6 V5 A3]', function () {
  assert.throws(function () { toUnicode(""퀬-\uDF7E\uD9AE\uDD23.\u200C\uD804\uDD33\uD95B\uDF38𝟤"", true); });
  assert.throws(function () { toAscii(""퀬-\uDF7E\uD9AE\uDD23.\u200C\uD804\uDD33\uD95B\uDF38𝟤"", true); });
});
After laboriously trying to catch it in a debugger (I originally found this in a test case where I dynamically generated the functions, so I had to first write another preprocessing step to dump code to a file), I found that the problem was that there was a URIError that was thrown. Unfortunately, I don't have the exact error message or its exact location.
While I do understand that using random Unicode is likely to cause lots of issues, it would be nice to see the actual characters involved for debugging purposes, so I do like using crazy raw test names if possible.",jcranmer,NONE,2015-09-16 03:46:17+00:00,False,,,,3,0,,,,,0,0,0,0,"['browser', 'confirmed-bug', 'reporter', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1894,no method 'match',"after upgrading to 2.3.2, I receive this:
usr/local/lib/node_modules/mocha/lib/reporters/base.js:201
var match = message.match(/^([^:]+): expected/);
^
TypeError: Object 0,1,2,3 has no method 'match'
at /usr/local/lib/node_modules/mocha/lib/reporters/base.js:201:27
at Array.forEach (native)
at Function.exports.list (/usr/local/lib/node_modules/mocha/lib/reporters/base.js:163:12)
at Spec.Base.epilogue (/usr/local/lib/node_modules/mocha/lib/reporters/base.js:321:10)
at Runner.emit (events.js:117:20)
at /usr/local/lib/node_modules/mocha/lib/runner.js:717:12
at done (/usr/local/lib/node_modules/mocha/lib/runner.js:615:7)
at Runner.next as nextSuite
at Runner.uncaught (/usr/local/lib/node_modules/mocha/lib/runner.js:686:17)
at process.uncaught (/usr/local/lib/node_modules/mocha/lib/runner.js:710:10)
at process.emit (events.js:95:17)
at process._fatalException (node.js:295:26)",ainthek,NONE,2015-09-16 20:40:15+00:00,True,2015-09-18 20:19:15+00:00,1.99,,2,3,2015-09-16 20:46:14+00:00,0.0,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1895,How to test this kind of application,"Hi,
I'm using the cluster module and mocha to test it.
It seems when mocha finishes a test and exits (I get a new command line), it doesn't actually exit because I get all these statements, which are the print statements that I had the workers of cluster printout and some mocha stuff

""before all"" hook

0 passing (2s)
1 failing


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook


0 passing (2s)
1 failing


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook


""before all"" hook


0 passing (2s)
1 failing
0 passing (2s)
1 failing


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook


0 passing (2s)
1 failing


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook


0 passing (2s)
1 failing


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook


""before all"" hook


0 passing (2s)
1 failing
0 passing (2s)
1 failing


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


""before all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


I was wondering how to test cluster using mocha. Thanks.",AlaRuba,NONE,2015-09-16 23:16:52+00:00,True,2017-04-03 15:41:56+00:00,564.68,,2,1,2017-04-03 15:41:56+00:00,564.68,drazisil,NONE,0,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1896,"Mocha exploded, Map is not defined","Hi I ran mocha test on my MEAN stack project and it exploded. I used the same set up on windows and it doesn't show the problem, just on linux, don't know why it can't find the Map() function. Although the Map() function is new for js, I don't know why it works on windows but not linux and how to fix it.
Mocha set up for my project:
""grunt-mocha-istanbul"": ""^3.0.1"",
""grunt-mocha-test"": ""~0.12.1"",
""mocha-junit-reporter"": ""^1.6.1"",
Any help will be appreciated!
Below are the output when I ran the test:


Mocha exploded!
ReferenceError: Map is not defined
at Object. (/home/ ...'project directory' ...)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Module.require (module.js:364:17)
at require (module.js:380:17)
at ... 'project directory' .../node_modules/mocha/lib/mocha.js:216:27
at Array.forEach (native)
at Mocha.loadFiles (...'project directory' .../node_modules/mocha/lib/mocha.js:213:14)
at MochaWrapper.run (...'project directory' .../node_modules/grunt-mocha-test/tasks/lib/MochaWrapper.js:51:15)
at ...'project directory' .../node_modules/grunt-mocha-test/tasks/mocha-test.js:86:20
at capture (...'project directory' .../node_modules/grunt-mocha-test/tasks/mocha-test.js:33:5)
at Object. (...'project directory' .../node_modules/grunt-mocha-test/tasks/mocha-test.js:81:5)
at Object. (...'project directory' .../node_modules/grunt/lib/grunt/task.js:264:15)
at Object.thisTask.fn (...'project directory' .../node_modules/grunt/lib/grunt/task.js:82:16)


......
var versionList = new Map();                                // <----- Problem comes from this line
^
ReferenceError: Map is not defined
at Object. (...'project directory' ...)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Object.Module._extensions.(anonymous function) [as .js](...'project directory' .../node_modules/istanbul/lib/hook.js:109:37)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Module.require (module.js:364:17)
at require (module.js:380:17)
at ...'project directory' .../node_modules/mocha/lib/mocha.js:216:27
at Array.forEach (native)
at Mocha.loadFiles (...'project directory' .../node_modules/mocha/lib/mocha.js:213:14)
at Mocha.run (...'project directory' .../node_modules/mocha/lib/mocha.js:453:10)
at Object. (...'project directory' .../node_modules/mocha/bin/_mocha:401:18)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Object.Module._extensions.(anonymous function) [as .js](...'project directory' .../node_modules/istanbul/lib/hook.js:109:37)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
at runFn (...'project directory' .../node_modules/istanbul/lib/command/common/run-with-cover.js:122:16)
at ...'project directory' .../node_modules/istanbul/lib/command/common/run-with-cover.js:251:17
at ...'project directory' .../node_modules/istanbul/lib/util/file-matcher.js:68:16
at ...'project directory' .../node_modules/istanbul/node_modules/async/lib/async.js:52:16
at ...'project directory' .../node_modules/istanbul/node_modules/async/lib/async.js:363:13
at ...'project directory' .../node_modules/istanbul/node_modules/async/lib/async.js:52:16
at done (...'project directory' .../node_modules/istanbul/node_modules/async/lib/async.js:248:21)
at ...'project directory' .../node_modules/istanbul/node_modules/async/lib/async.js:44:16
at ...'project directory' .../node_modules/istanbul/node_modules/async/lib/async.js:360:17
at LOOP (fs.js:1361:14)
at process._tickCallback (node.js:415:13)",littleCoderVA,NONE,2015-09-17 19:23:32+00:00,True,2015-09-19 04:07:29+00:00,1.36,,3,5,2015-09-17 21:30:13+00:00,0.09,danielstjules,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1898,Observables,"So there's this cool thing called Observables that is (likely) coming to the language soon (ref 1, ref 2).
They are similar to promises in a number of ways.

They both attempt to deal with asynchronous actions in a reasonable manner.
They both define a standard interface that can be implemented and extended by third parties.

Since Mocha supports returning promises in order to avoid using the done callback, it'd be nice if it did the same thing with observables:
it('should do something with an Observable', () => {
  return Observable.of(1, 2, 3).subscribe(...);
});
People are already using these with http://reactivex.io/.
cc @Blesh",jamiebuilds,NONE,2015-09-20 20:53:35+00:00,True,2017-08-12 14:30:00+00:00,691.73,,5,6,2015-09-20 20:54:51+00:00,0.0,jamiebuilds,NONE,0,1,0,4,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1899,Issue with beforeEach hook,"Hello All,
I am new to JS and mocha.
My code looks something like this -
describe (""MODULE 1 "", function(){
    beforeEach(function (){
        //Some actions to complete before each Test Case
    });

    it(""TestCase 1"", function(){
    });

    context(""TestCase 2"", function(){
        it(""Step 1"" function(){
            //1st part of the test case
        });
        it(""Step 2"" function(){
            //2nd part of the test case continue after 1st part
        });
    });
});
My issue is, I want the beforeEach method to run before every test case only, and not before each 'it' method. Is there a way to do that.
Right now my test case runs like below -
beforeEach > it(TestCase 1) > beforeEach > context(TestCase2) > it(Step 1) > beforeEach > it(Step 2)
Is there anyway to run the script as below -
beforeEach > it(TestCase 1) > beforeEach > context(TestCase2) > it(Step 1) > it(Step 2)",poorvikamahesh,NONE,2015-09-21 11:32:08+00:00,True,2017-03-30 14:45:41+00:00,556.13,,3,2,2015-11-11 21:45:45+00:00,51.43,cowboyd,NONE,0,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1901,Add a way of a programmatically skipping a test,"I have a code where certain tests will always fail in CI environment. I would like to disable them based on an environment condition.
How to programmatically skip a test in mocha during the runtime execution?

– http://stackoverflow.com/q/32723167/368691",gajus,NONE,2015-09-23 10:01:06+00:00,True,2016-09-16 23:56:00+00:00,359.58,,7,11,2015-09-23 10:02:55+00:00,0.0,gajus,NONE,1,2,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1902,Non-blocking it() calls,"I am sure you have had this question before but I am really struggling to find information about this online.
I am looking for a way to make it() calls non-blocking
currently, if I run this code:
var request = require('request');
var path = require('path');
var fs = require('fs');
var assert = require('assert');
var colors = require('colors');
var async = require('async');


describe('@Test_Enrichment*', function () {

    var config, constants, serverURL, serverPort;

    before(function () {
        config = require('univ-config')(this.test.parent.title, 'setup/testSetup');
        constants = config.get('sc_constants');
        serverURL = config.get('test_env').smartconnect_server_config.url;
        serverPort = config.get('test_env').smartconnect_server_config.port;
    });


   fs.readdirSync(__dirname + '/test_data/enriched_payloads').filter(function (file) {

        return (path.extname(file) === '.json');

    }).map(function (file) {

        return __dirname + '/test_data/enriched_payloads/' + file;

   }).forEach(function (file) {

        it('[test] ' + path.basename(file), function (done) {
            var jsonDataForEnrichment = require(file);
            jsonDataForEnrichment.customer.accountnum = ""8497404620452729"";
            jsonDataForEnrichment.customer.data.accountnum = ""8497404620452729"";

            var options = {
                url: serverURL + ':' + serverPort + '/event',
                json: true,
                body: jsonDataForEnrichment,
                method: 'POST'
            };

            request(options, function (error, response, body) {
                if (error) {
                    done(error);
                }
                else {
                    assert(response.statusCode == 201, ""Error: Response Code"");
                    done();
                }
            });
        });

       console.log(Date.now());   // this logging statement logs everything before any it() tests are invoked
    });
});
then I get this output:
CACSVML-13295:smartconnect amills001c$ mocha test/testEnrichment.js 
1443133002097
1443133002100
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002101
1443133002102
1443133002102
1443133002102
1443133002102
1443133002102
1443133002102
1443133002102
1443133002102
1443133002102
1443133002103
1443133002103
1443133002103
1443133002103
1443133002103
1443133002103


  @Test_Enrichment*
[2015-09-24 22:16:42.132Z] file=testSetup.js mod=SmartConnect 

runtime NODE_ENV: dev_local
    ✓ [test] Activate_CDV.json (248ms)
    ✓ [test] Active_HSI.json (226ms)
    ✓ [test] Appt.json (208ms)
    ✓ [test] Bill.json (212ms)
    ✓ [test] Billing.json (203ms)
    ✓ [test] Cable_Card.json (225ms)
    ✓ [test] Cable_Card_Issue.json (200ms)
    ✓ [test] Caption.json (212ms)
    ✓ [test] Channel_Lineup.json (205ms)
    ✓ [test] Guide_To_Be_Announced.json (202ms)
    ✓ [test] OMP.json (209ms)
    ✓ [test] On_Demand_General.json (204ms)
    ✓ [test] On_Demand_Issue_General.json (205ms)
    ✓ [test] Othr.json (209ms)
    ✓ [test] ParentalControl.json (203ms)
    ✓ [test] Phone_Block_Calls.json (226ms)
    ✓ [test] Phone_Long_Distance_Issue.json (203ms)
    ✓ [test] Phone_Number_Change.json (239ms)
    ✓ [test] Retention.json (198ms)
    ✓ [test] Retn.json (197ms)
    ✓ [test] Sale.json (208ms)
    ✓ [test] Sales.json (199ms)
    ✓ [test] Screen_Freeze.json (196ms)
    ✓ [test] Screen_Snow.json (208ms)
    ✓ [test] Store_Locator.json (205ms)
    ✓ [test] Tech.json (236ms)
    ✓ [test] Vacation_Hold.json (203ms)
    ✓ [test] Video_EAS.json (204ms)
    ✓ [test] Video_Unauthorized.json (200ms)
    ✓ [test] Xfinity_Home.json (200ms)


  30 passing (6s)

as you can see, and as you probably know, the it() callbacks are delayed such that one it() doesn't run before the previous one completes - in other words, they are synchronous or blocking.
Is there a way around this?
My tests take too long to run as is!",ORESoftware,NONE,2015-09-24 22:22:34+00:00,True,2015-09-24 22:44:23+00:00,0.02,,3,6,2015-09-24 22:44:23+00:00,0.02,danielstjules,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1903,--sort option for mocha.run,"Hi,
It looks like --sort is only picked up in _mocha, is there a plan to make these run options available to mocha in the browser? Specifically being able to pass sort: true into mocha.setup or adding it to the mocha.options object would be nice.",chrisskilton,NONE,2015-09-25 16:06:24+00:00,False,,,,4,3,2016-06-09 10:19:46+00:00,257.76,chrisskilton,NONE,0,1,0,2,"['browser', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1904,Hooks inside 'describe' not firing,"describe('Hooks', function() {
  console.log('Prints')  // <--------------- Prints
  before('Fire Up', function() {
    console.log('Nope') // <---------------- Not this one
  });

  after('Cleanup', function() {
    console.log('Nope') // <---------------- Not this one
  });
});
But they are working fine, if I remove the 'describe' block",dacodekid,NONE,2015-09-25 18:36:02+00:00,True,2015-09-27 14:40:36+00:00,1.84,,3,9,2015-09-26 00:26:47+00:00,0.24,danielstjules,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1906,HTML reporter used on CLI gets ReferenceError: document is not defined,"I am using mocha testing framework to test Http rest-api. I want to generate test-report for all test case, but when I ran mocha --reporter html > report.html
Getting following error
/usr/local/lib/node_modules/mocha/lib/reporters/html.js:263
var div = document.createElement('div');
^
ReferenceError: document is not defined
at fragment (/usr/local/lib/node_modules/mocha/lib/reporters/html.js:263:13)
at new HTML (/usr/local/lib/node_modules/mocha/lib/reporters/html.js:53:14)
at Mocha.run (/usr/local/lib/node_modules/mocha/lib/mocha.js:459:18)
at Object. (/usr/local/lib/node_modules/mocha/bin/_mocha:393:18)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
at startup (node.js:119:",neelabhsingh,NONE,2015-09-26 08:04:01+00:00,True,2018-01-19 06:04:13+00:00,845.92,,8,5,2015-10-14 17:32:38+00:00,18.39,tdrach,NONE,0,1,0,4,"['documentation', 'faq', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
1908,Using mocha programmatically: make mocha not exit when running many tests?,"I am attempting to run mocha over a variety of specific submodules at once, and have followed (and contributed to) https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically.
However as soon as the first test suite completes, even with 0 failures, mocha exits the process. How can I make mocha not exit the process? Thanks!",mikemaccana,NONE,2015-09-29 12:30:14+00:00,True,2017-08-12 13:30:02+00:00,683.04,,3,2,2015-11-20 17:39:51+00:00,52.22,seawatts,NONE,0,0,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1912,mocha watching fails under npm,"Hi,
I have a very simple Koa application:
var app = module.exports = require(""koa"")();

app.use(function *(){
    this.body = ""Koa says Hi!"";
});

var port = process.env.PORT || (process.argv[2] || 3000);
port = (typeof port === ""number"") ? port : 3000;

app.listen(port);
console.log(""Application started. Listening on port:"" + port);
that I test with mocha and supertest like this;
var app = require(""../"");
var request = require(""supertest"").agent(app.listen());

describe(""Our amazing site"", function () {

    it(""has a nice welcoming message"", function (done) {
        request
            .get(""/"")
            .expect(""Koa says Hi!"")
            .end(done);
    });
});
I want to watch my files for changes and use the -w flag like this
mocha -u bdd -R min -w
That works fine. I change a file, the test is reexcuted and all is well.
Now I move that command into my package.json file as a script, like this:
""scripts"": {
    ""watch:test"": ""mocha -u bdd -R min -w""
  },
The first time I run the command it works, when I make a change that is picked up but now the test fails with:
1)  Uncaught error outside test suite:
     Uncaught Error: listen EADDRINUSE :::3000
      at Object.exports._errnoException (util.js:837:11)
      at exports._exceptionWithHostPort (util.js:860:20)
      at Server._listen2 (net.js:1231:14)
      at listen (net.js:1267:10)
      at Server.listen (net.js:1363:5)
      at Application.app.listen (node_modules/koa/lib/application.js:70:24)
      at Object.<anonymous> (index.js:10:5)
      at Object.<anonymous> (test/site.spec.js:1:73)
      at Array.forEach (native)
      at StatWatcher._handle.onchange (fs.js:1285:10)
That error will not go away until I stop mocha and then restart it.
Why does it behave differently when run via npm?
What can I do to fix this?",marcusoftnet,NONE,2015-09-30 14:20:07+00:00,True,2015-09-30 16:57:54+00:00,0.11,,4,7,2015-09-30 14:29:36+00:00,0.01,dasilvacontin,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1913,Reporting the wrong test failing,"So I created a folder for all of my functional route tests for an API I am building. I kept getting the following error:
  1) /listing should return a successfully created listing:
     Uncaught AssertionError: expected 'New Name' to be false
      at Assertion.fail (node_modules/should/lib/assertion.js:180:17)
      at Assertion.prop.value (node_modules/should/lib/assertion.js:65:17)
      at Test.<anonymous> (tests/functional/routes/calendar_spec.js:92:59)
      at Test.assert (node_modules/supertest/lib/test.js:156:6)
      at assert (node_modules/supertest/lib/test.js:127:12)
      at node_modules/supertest/lib/test.js:124:5
      at Test.Request.callback (node_modules/supertest/node_modules/superagent/lib/node/index.js:785:12)
      at IncomingMessage.<anonymous> (node_modules/supertest/node_modules/superagent/lib/node/index.js:990:12)
      at _stream_readable.js:908:16

The following is the file containing the test it was referencing:
listing_spec.js
'use strict';

var should = require('should'),
    jwt = require('jsonwebtoken'),
    app = require('../../../bin/www'),

    request;

var data = {
    male: 1,
    female: 2,
    cal_tz: 1,
    lang: 'English',
    auth: null
};

describe('/listing', function () {

    beforeEach(function (done) {
        request = require('supertest')(app);

        var profile = {
            account_id: 1,
            account_email: ""first@test.com""
        };

        var token = jwt.sign(profile, process.env.SECRET, {expiresInMinutes: 60 * 5});

        data.auth = 'Bearer ' + token;
        done();
    });


    it('should return a successfully created listing', function (done) {
        var listing = {
            ""max_attendance"": 1,
            ""skill_id"": 3,
            ""listing_type_id"": 1,
            ""billing_policy_id"": 1,
            ""lang"": ""English"",
            ""calendar_id"": 1
        };

        request
            .post('/listing')
            .set('Authorization', data.auth)
            .send(listing)
            .end(function (err, res) {
                if (err) {
                    throw new Error(err);
                }

                res.should.have.property('status').which.equal(200);


                res.body.max_attendance.should.equal(1);

                // skill object
                res.body.skill.should.have.property('skill_id').which.equal(3);
                res.body.skill.should.have.property('skill_name').which.equal('Spanish');
                res.body.skill.should.have.property('skill_name_label').which.equal('SPANISH_LANGUAGE_SKILL');

                // listing type object
                res.body.listing_type.should.have.property('listing_type_id').which.equal(1);
                res.body.listing_type.should.have.property('listing_type').which.equal('Private');
                res.body.listing_type.should.have.property('listing_type_label').which.equal('PRIVATE_LISTING_TYPE');

                // listing status object
                res.body.listing_status.should.have.property('listing_status').which.equal('Draft');

                // billing policy object
                res.body.billing_policy.should.have.property('billing_policy_id').which.equal(1);
                res.body.billing_policy.should.have.property('billing_policy_name').which.equal('Flexible');

                done();
            });
    });
});
After an embarrassing amount of time I realized the stacktrace was actually referencing a different test in a different file. The following is that file:
calendar_spec.js
'use strict';

var should = require('should'),
    jwt = require('jsonwebtoken'),
    app = require('../../../bin/www'),

    request;

var data = {
    male: 1,
    female: 2,
    cal_tz: 1,
    lang: 'English',
    auth: null
};

describe('/calendar', function() {

    beforeEach(function(done) {
        request = require('supertest')(app);

        var profile = {
            account_id: 1,
            account_email: ""first@test.com""
        };

        var token = jwt.sign(profile, process.env.SECRET, {expiresInMinutes: 60 * 5});

        data.auth = 'Bearer ' + token;
        done();
    });

    describe('Add', function() {
        it('should create a new calendar', function(done) {
            request
                .post('/calendar')
                .set('Authorization', data.auth)
                .send({""test"": ""test""})
                .end(function(err, res) {
                    if(err) {
                        throw new Error(err);
                    }

                    res.should.have.property('status').which.equal(200);
                });

            done();
        });
    });

    describe('Edit', function() {
        it('should successfully change the calendar name', function(done) {
            var calendar = {
                ""calendar_name"": ""New Name""
            };

            request
                .put('/calendar/1')
                .set('Authorization', data.auth)
                .send(calendar)
                .end(function(err, res) {
                    if(err) {
                        throw new Error(err);
                    }

                    res.should.have.property('status').which.equal(200);
                    res.body.should.have.property('calendar_name').which.equal(calendar.calendar_name);
                });

            done();
        });

        it('should successfully deactivate the calendar', function(done) {
            var calendar = {
                ""is_active"": false
            };

            request
                .put('/calendar/1')
                .set('Authorization', data.auth)
                .send(calendar)
                .end(function(err, res) {
                    if(err) {
                        throw new Error(err);
                    }

                    res.should.have.property('status').which.equal(200);
                    res.body.should.have.property('calendar_name').which.equal(calendar.is_active);
                });

            done();
        });
    });
});
More specifically the problem was the following test:
               it('should successfully deactivate the calendar', function(done) {
            var calendar = {
                ""is_active"": false
            };

            request
                .put('/calendar/1')
                .set('Authorization', data.auth)
                .send(calendar)
                .end(function(err, res) {
                    if(err) {
                        throw new Error(err);
                    }

                    res.should.have.property('status').which.equal(200);
                    res.body.should.have.property('calendar_name').which.equal(calendar.is_active);
                });

            done();
        });
The following assertion
res.body.should.have.property('calendar_name').which.equal(calendar.is_active);
should have been
es.body.should.have.property('is_active').which.equal(calendar.is_active);
The following is the Makefile I created to run the tests:
test: unit integration functional

.PHONY: test

unit:
    @NODE_ENV=test PORT=4000 ./node_modules/.bin/mocha tests/unit

.PHONY: unit

integration:
    echo 'No integration tests written yet
.PHONY: integration

functional: routes

.PHONY: functional

routes: setup
    @NODE_ENV=test PORT=4000 ./node_modules/.bin/mocha tests/functional/routes

.PHONY: routes

setup:
    dropdb api-test-db --if-exists
    createdb api-test-db
    psql api-test-db < test-db-image.sql

.PHONY: setup

I am fairly new to mocha but I don't believe this is the intended behavior. I tried to provide everything I thought would be necessary to investigate further, but please let me know if you need anything else.",aray12,NONE,2015-10-02 18:25:13+00:00,True,2015-10-05 20:36:31+00:00,3.09,,2,3,2015-10-05 05:53:41+00:00,2.48,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1914,Is there a way to have multiple function for `it`?,"I'd like to find a nice way to define some prerequisite for test. I know I can use the before but it would be nice to have it for each it statement. for example:
it('should error on existing user', createTestUser, done => {
      request.post('/api/users')
        .set('Content-Type', 'application/json')
        .send({username: 'test', password: 'test', email: 'test@test.com'})
        .expect(400)
        .end(done);
    });
``` ",paparent,NONE,2015-10-06 18:53:17+00:00,True,2015-10-06 20:34:26+00:00,0.07,,3,4,2015-10-06 18:54:24+00:00,0.0,danielstjules,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1915,Hanging after assert.deepEqual,"I have run into a problem where mocha hangs forever in garbage collection using 100% cpu rather then ending.
I have narrowed all this down to a simple test case I have created in this repo.
I am using node version v0.10.35.
You can replicate the error by doing:
git clone git@github.com:flippmoke/mochaAssertHang.git
cd mochaAssertHang
npm install
npm test

You will note however, that simply running node ./index.js will not hang and will just output the exception thrown from assert.deepEqual.
I traced back the last working version of this with mocha and it works properly with 2.2.1 but fails with later versions of mocha.
Here is a screen cap of a sample of the process while hung, as you can see it seems to be stuck doing garbage collection.",flippmoke,NONE,2015-10-07 01:00:02+00:00,True,2017-10-18 04:23:28+00:00,742.14,,4,4,2015-10-07 01:48:34+00:00,0.03,flippmoke,NONE,0,0,0,3,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1916,can't use es6 import,"This works:
`const verticals = require('./verticals');``
This doesn't work:
import verticals from './verticals';",luisrudge,NONE,2015-10-09 01:44:25+00:00,True,2015-10-09 01:51:35+00:00,0.0,,5,6,2015-10-09 01:51:35+00:00,0.0,luisrudge,NONE,0,1,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1917,Best way to extend bdd.js UI,"I'd like to create a new custom UI based on bdd.js. This UI would have all of the existing BDD functionality plus a few additional functions that I need to attach to context.
The Third-party-UIs page illustrates how to create a new UI from scratch, but doesn't show how to extend an existing UI with additional functionality.
Is there a good way to do this?",tauren,NONE,2015-10-09 20:52:30+00:00,True,2017-04-03 15:40:23+00:00,541.78,,2,1,2017-04-03 15:40:23+00:00,541.78,drazisil,NONE,0,0,0,1,"['question', 'usability']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1918,Feature to enhance async flow,"I would like to create a PR to enhance async flow, it will let mocha support all async mode with good back compatibility.
After PR, mocha support:
// backward compatibility for old callback style!
it('test1', function(done) {
  // do some test
  done()
})

// backward compatibility for simple sync test!
it('test2', function() {
  // do some test
})

// support generator
it('test3', function*() {
  // do some test
  // yield promise
  // yield thunk
  // yield generator
  // ...
})

// support promise
it('test4', function() {
  // do some test
  return promiseLikeObject
})

// another way with thunk function
it('test5', function() {
  // do some test
  return thunkFunction
})
It only need a little changes like as https://github.com/zensh/mocha/commit/b963f6fadef8e3ad4ff603fc74831a30180209d1, and some changes in test cases(some about ""sync"" asserts).
Would you guys like this PR?",zensh,NONE,2015-10-11 13:59:33+00:00,True,2016-08-29 01:00:25+00:00,322.46,,2,4,2015-10-11 15:39:50+00:00,0.07,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1920,window is undefined error in a cmd on window.,wrong issue reported,JWplanet,NONE,2015-10-13 03:27:32+00:00,True,2016-03-20 10:04:05+00:00,159.28,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1921,errors are not logged into stderr,"test.js:
describe('describe', function() {
    it('fails', function() {
        throw new Error('boo');
    });
});
mocha 2.0.1 mocha test.js > /dev/null produces:
  1 failing

  1) describe fails:
     Error: boo
      at Context.<anonymous> (/home/okv/tmp/mocha/test.js:4:9)
      at callFn (/home/okv/tmp/mocha/node_modules/mocha/lib/runnable.js:250:21)
      at Test.Runnable.run (/home/okv/tmp/mocha/node_modules/mocha/lib/runnable.js:243:7)
      at Runner.runTest (/home/okv/tmp/mocha/node_modules/mocha/lib/runner.js:373:10)
      at /home/okv/tmp/mocha/node_modules/mocha/lib/runner.js:451:12
      at next (/home/okv/tmp/mocha/node_modules/mocha/lib/runner.js:298:14)
      at /home/okv/tmp/mocha/node_modules/mocha/lib/runner.js:308:7
      at next (/home/okv/tmp/mocha/node_modules/mocha/lib/runner.js:246:23)
      at Object._onImmediate (/home/okv/tmp/mocha/node_modules/mocha/lib/runner.js:275:5)
      at processImmediate [as _immediateCallback] (timers.js:354:15)

Which is correct because stdout data redirected to /dev/null and only stderr data appears at console.
latest mocha (2.3.3) for the same command produces nothing.",okv,NONE,2015-10-13 11:17:53+00:00,True,2018-09-04 08:44:41+00:00,1056.89,,4,4,2017-10-17 05:24:16+00:00,734.75,stale,NONE,1,1,0,2,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1922,[Proposal] Make timeout message configurable,"When a test times out the following message is displayed:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.

This is pretty helpful, but in some cases it could be more helpful to display a custom message.
I propose adding an option to Runnable such that you can do something like this:
this.timeoutMessage('Check the server is running.');

Such that the output now becomes:
Error: timeout of 2000ms exceeded. Check the server is running.

I'm happy to create a PR if this is likely to be accepted.",euoia,NONE,2015-10-13 18:24:31+00:00,True,2015-10-30 21:49:42+00:00,17.14,,6,10,2015-10-30 21:49:03+00:00,17.14,boneskull,MEMBER,1,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1924,Grep URLs escaped incorrectly,"If a test suite has a name that contains a . it will be escaped as \. in the grep URL. For example test-suite.html becomes test-suite\.html which translates incorrectly into a link ...?grep=test-suite%5Chtml
In mocha v2.2.5 the URL is escaped like this:
return window.location.pathname + (search ? search + '&' : '?' ) + 'grep=' + encodeURIComponent(s);
But after commit a81e555 in v2.3.0 it has been escaped like this: return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));
Can't tell if this change has been done intentionally or not...",Saulis,NONE,2015-10-15 11:49:23+00:00,False,,,,3,2,2017-10-17 05:24:15+00:00,732.73,stale,NONE,1,0,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1925,array of errors instead of just single error,"Is it at all possible to pass an array of error objects to done()
some of my tests naturally generate multiple errors
I know it's a little crazy, but could we handle
var errArray = [];
done(errArray);
?",ORESoftware,NONE,2015-10-15 23:07:04+00:00,True,2017-03-30 14:37:14+00:00,531.65,,4,9,2015-10-15 23:30:55+00:00,0.02,danielstjules,CONTRIBUTOR,0,2,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1926,Detect uncaught rejection in Promise,"If I trigger an event from a promise onFulfilled function and an error is thrown from the handler of the event mocha doesn't detect this Error.
I create a fiddle where this can be seen: http://jsfiddle.net/dsrhmvLz/3/.
AFAIK there is no standard way of detecting this unhandled promise rejection but using bluebird it can be detected with the unhandledrejection event as seen in the fiddle. Could it make sense adding support for this in mocha? There is another way of detecting this? If I'm not wrong currently something like this is done in mocha with the uncaughtException event.
With this little change (http://jsfiddle.net/dsrhmvLz/4/) the error is detected by mocha but it would seem nicer seeing the uncaught rejection in mocha without that trouble.",kai670,NONE,2015-10-16 22:05:22+00:00,False,,,,6,5,2015-10-16 22:19:17+00:00,0.01,danielstjules,CONTRIBUTOR,1,2,0,2,"['feature', 'future']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1927,Stacktraces display incorrect line when tests throw errors,"When an Error is thrown and unhandled in a test being run, a stacktrace is printed to stderr in the middle of the test runner output. However, on the line which includes my own files, the line number will usually become line 9 (regardless of the file or code), and the character count is relative to the position of the code in the file, as if the file is being strangely minified (note that I am not minifying or in any other way compiling my javascript or changing it before running it). This makes it impossible to tell where the error is actually being generated. This does not occur for stacktrace lines that I did not create (e.g. those in libraries).
Example of that output:
Unhandled rejection Error: Can't set headers after they are sent.
    at ServerResponse.OutgoingMessage.setHeader (_http_outgoing.js:335:11)
    at ServerResponse.header ([project root]/node_modules/express/lib/response.js:718:10)
    at ServerResponse.send ([project root]/node_modules/express/lib/response.js:163:12)
    at ServerResponse.json ([project root]/node_modules/express/lib/response.js:249:15)
    at ServerResponse.send ([project root]/node_modules/express/lib/response.js:151:21)
    at [project root]/src/activities.js:9:7248
    at tryCatcher ([project root]/node_modules/knex/node_modules/bluebird/js/main/util.js:26:23)
    at Promise._settlePromiseFromHandler ([project root]/node_modules/knex/node_modules/bluebird/js/main/promise.js:503:31)
    at Promise._settlePromiseAt ([project root]/node_modules/knex/node_modules/bluebird/js/main/promise.js:577:18)
    at Async._drainQueue ([project root]/node_modules/knex/node_modules/bluebird/js/main/async.js:128:12)
    at Async._drainQueues ([project root]/node_modules/knex/node_modules/bluebird/js/main/async.js:133:10)
    at Immediate.Async.drainQueues [as _onImmediate] ([project root]/node_modules/knex/node_modules/bluebird/js/main/async.js:15:14)
    at processImmediate [as _immediateCallback] (timers.js:367:17)

This is an error from express, that I apparently am setting response headers twice. Where, though? at [project root]/src/activities.js:9:7248
This is on mocha 2.3.3 on node 0.12.7.",LyonesGamer,NONE,2015-10-16 22:29:07+00:00,True,2017-03-30 16:44:13+00:00,530.76,,6,6,2016-07-11 18:33:35+00:00,268.84,agessner,NONE,0,0,0,6,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1929,Stream does not read in tests,"Running mocha 2.3.3. I have a simple app to read a big file by stream:
var fs = require('fs'),
    path = require('path'),
    stream = fs.createReadStream(path.join(__dirname, 'datc_v2.4_06.txt'), { encoding: 'utf8' }),
    expect = require('chai').expect;

console.log(fs.readFileSync(path.join(__dirname, 'datc_v2.4_06.txt')));

stream.on('error', function(err) {
    debugger;
});

stream.on('data', function(line) {
    debugger;
});

stream.on('end', function() {
    debugger;
});

If I run node-debug myfile.spec.js, the breakpoints are hit right away.
If I run mocha myfile.spec.js --debug-brk, the code walks through the topmost code and then exits. No stream events are triggered, no breakpoints are hit. Needless to say any other logging or efforts to demonstrate this haven't worked. My only conclusion is that somehow mocha is preventing my stream from reading properly. But, the readFileSync() dumps correctly, so I have no idea what's going on.",spamguy,NONE,2015-10-19 03:14:17+00:00,True,2015-10-19 17:13:18+00:00,0.58,,2,1,2015-10-19 17:12:48+00:00,0.58,travisjeffery,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1930,Mocha Integration Tests Timing out,"I've got a problem whereas sometimes my tests fail due to the asserts being run before the response comes back here in my integration tests:
   it('should find all countries when no id is specified', co.wrap(function *(){
        var uri = '/countries';
        var response = yield request.get(uri);

        should.exist(response.body);
        response.status.should.equal(200);
    }));

Not sure how to tweak mocha or supertest to wait or if I should use a promise here or what. I'm using generators with mocha here.
I'm using Supertest to make the requests...so they are hitting a real database.",dschinkel,NONE,2015-10-19 03:17:21+00:00,True,2015-10-30 02:52:57+00:00,10.98,,4,9,2015-10-30 01:58:54+00:00,10.95,marcelocure,NONE,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1931,Custom reporter and event handling ,"I'm writing my own reporter and on failure taking a screenshot and saving to disc. But it seems that the event onEnd doesn't wait for my event onFailure to finish.
The process ends after on end and my screenshots is never saved to disc.
Tried to push my promises in onFailure to an array and in onEnd use Promise.settle but that doesn't work.
Is there any way of running onEnd first after all other events has finished?",axelssonHakan,NONE,2015-10-20 07:54:24+00:00,False,,,,6,4,2016-02-12 11:53:54+00:00,115.17,jaydlawrence,NONE,1,0,0,3,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1932,Generator functions should at least not pass,"there are npm modules that make mocha work with generator functions (like this one https://github.com/vdemedes/mocha-generators)
But mocha should at least fail the test, because this is horrible behaviour in production
  it('meh', function*() {
    expect(0).to.equal(1);
  });
// this will pass :(",antpaw,NONE,2015-10-20 09:13:19+00:00,False,,,,4,10,2016-06-03 01:18:37+00:00,226.67,ajsharp,NONE,0,1,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1934,Mocha output readability is worse when using Bunyan or other logging facilities,"Is there a good way to marry a logging module like Bunyan with Mocha? I find that the output from Mocha becomes harder to read, not easier, when piping through Bunyan - but I do want Bunyan because then I can ignore higher levels of logging output that don't matter in my tests.
Is there a good solution? Will Mocha start using a logging module?",ORESoftware,NONE,2015-10-21 00:34:03+00:00,True,2017-03-30 16:34:54+00:00,526.67,,4,4,2015-10-21 01:08:44+00:00,0.02,kaiquewdev,NONE,0,0,0,4,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1936,this.skip causes: Cannot read property 'toString' of undefined,"Error line in mocha.js
    var el;
    if (test.state === 'passed') {
      var url = self.testURL(test);
      el = fragment('<li class=""test pass %e""><h2>%e<span class=""duration"">%ems</span> <a href=""%s"" class=""replay"">‣</a></h2></li>', test.speed, test.title, test.duration, url);
    } else if (test.pending) {
      el = fragment('<li class=""test pass pending""><h2>%e</h2></li>', test.title);
    } else {
      el = fragment('<li class=""test fail""><h2>%e <a href=""%e"" class=""replay"">‣</a></h2></li>', test.title, self.testURL(test));
      var stackString; // Note: Includes leading newline
      var message = test.err.toString(); // mocha.js:2427
My test cases are
describe('mod', function(){
  describe('mod1', function(){
    before(function(){
       if(!modLoaded) this.skip(); // causes the error
    });

    it('should do stuff', function(){
       // stuff
    });
  });
});
Not sure why this.skip() is causing an error...",ryan-shaw,CONTRIBUTOR,2015-10-21 08:59:17+00:00,True,2016-02-17 02:38:24+00:00,118.74,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1938,Mocha stores instance state in shared global space - ie. the require cache,"This is reflected in #995 and pghalliday/grunt-mocha-test#108, and many other issues that keep cropping up with watch tasks even though I keep telling people to rerun tests in new processes and not reuse the same process (admittedly this pattern has other problems too)
Basically, you cannot create a new instance of mocha and add the same test files as a previously created instance. This is because require is used to run the test files and when you require them again they hit the require cache and don't run (ie. they fail to register their tests).
IMHO this is a bad design choice as instance state should not be dependent on the global state of the require cache. I suggest that addFile be changed to actually load and evaluate the file and not depend on require.
Rant over ;)",pghalliday,NONE,2015-10-21 10:24:02+00:00,False,,,,4,4,2016-06-24 01:10:48+00:00,246.62,pelotom,NONE,0,0,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1939,Execute the same test suite several times with multiple configurations,"Hi,
I would like to execute the same test suite, a set of tests in the same folder several times with a different configuration.
Is it possible?",jabrena,NONE,2015-10-21 16:07:58+00:00,True,2015-10-23 12:13:49+00:00,1.84,,2,2,2015-10-23 06:34:07+00:00,1.6,chilicoder,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1940,Can't resolve absolute path in mocha tests,"I did some test using mocha and testem and found some wierd behavior of the path resolver.
The function
 function (postfix) {
     var result = process.cwd()+postfix;
     return result;
     };

that did return the absolute path with postfix didn't returned it but only postfix. And in normal environment it works as expected.
I created a supplementary repo to show the bug. It raises in 0.10, 0.12 and 4.1 node versions.
Does anybody can explain where is the problem? Because now I can't resolve absolute path to file.",chilicoder,NONE,2015-10-21 20:10:21+00:00,True,2017-10-18 04:24:12+00:00,727.34,,4,2,2015-11-03 20:45:49+00:00,13.02,kaiquewdev,NONE,0,0,0,2,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1941,Using ,,madcapnmckay,NONE,2015-10-21 20:15:02+00:00,True,2015-10-21 20:15:54+00:00,0.0,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1942,Using 'this' as a way to pass context,"I was wondering whether there was any interest/desire to support this style of testing in mocha. I personally dislike polluting the shared scope and I also like to keep my ""it"" handlers assertion only if possible.
https://gist.github.com/traviskaufman/11131303
It seems like allowing ""this"" to act as the carrier for the scope is the nice middle ground between the two extremes.",madcapnmckay,NONE,2015-10-21 20:18:26+00:00,True,2015-10-22 01:45:22+00:00,0.23,,3,3,2015-10-21 20:48:39+00:00,0.02,boneskull,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1943,Allow providing config to compiler hooks ,"Wondering what the best approach is to tackling this issue. For instance, the Babel compiler can be supplied with additional config https://github.com/babel/babel/blob/master/packages/babel/src/api/register/node.js#L213-L227.
However mocha is currently not taking this into account, https://github.com/mochajs/mocha/blob/master/bin/_mocha#L296.
Config provided with either .babelrc or elsewhere are not supplied to the compiler. Could this be made possible, I'm unsure of implications for other hooks (if any).",Swaagie,NONE,2015-10-22 13:36:22+00:00,True,2017-06-08 03:02:12+00:00,594.56,,3,3,2015-10-22 23:09:20+00:00,0.4,boneskull,MEMBER,1,0,0,2,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1946,Exclusive feature runs unwanted suites,"var expect = require('chai').expect;

describe.only('aaa', function() {
    it('should be true', function () {
        expect(true).to.be.true;
    });
});

describe('aaa bbb', function() {
    it('should be false', function () {
        expect(false).to.be.false;
    });
});
Execute this with mocha and both suites are run, not just the first. Surely this is not right?
It causes a problem for me because I describe my tests in a hierarchical structure like this:
describe('components/Form', function() { ... })
describe('components/FormField', function() { ... })
describe('components/FormControls', function() { ... })",evoyy,NONE,2015-10-27 03:20:43+00:00,True,2015-10-27 03:31:06+00:00,0.01,,1,1,2015-10-27 03:31:06+00:00,0.01,evoyy,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1948,--check-leaks only detects leak the first time (e.g. when running twice with `--watch`),"I have the following bit of code, for which mocha correctly detects a leak:
describe('leak detection', function() {

    function testMe(){
        x = 123; // here I add 'var ' to make the test pass
    }

    it('should not leak', function() {
        testMe();
    });
});

By substituting 'x' for 'var x' the test passes. Seemingly, the same applies when running mocha with the --watch task, but when I remove the var statement the test still passes without any error about leaking. This is a bug.
$ mocha --check-leaks --watch

  leak detection
    ✓ should not leak
    1) should not leak

  1 passing (13ms)
  1 failing

  1) leak detection should not leak:
     Error: global leak detected: x

  leak detection
    ✓ should not leak

  1 passing (1ms)

  leak detection
    ✓ should not leak

  1 passing (2ms)

Using mocha 2.3.3 on Node 4.2.1",fatso83,CONTRIBUTOR,2015-10-28 13:56:55+00:00,False,,,,3,2,2017-10-17 05:24:14+00:00,719.64,stale,NONE,0,1,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1949,beforeEach and afterEach affects tests in other files,"When I create tests in different files and at least one of them includes the beforeEach or afterEach hook, those hook gets called for all tests.
You can reproduce this with the following code.
test1.js
module.exports = {
        test1: function () {
            console.log('test1');
        }
};

test2.js
module.exports = {
    beforeEach: function () {
        console.log('beforeEach');
    },
    test2: function () {
        console.log('test2');
    }
};

Then run:
mocha -u exports --recursive .

beforeEach
test1
  ✓ test1
beforeEach
test2
  ✓ test2

  2 passing (8ms)",Bartinger,NONE,2015-10-28 19:03:34+00:00,True,2015-12-04 05:04:54+00:00,36.42,,3,2,2015-12-02 01:31:01+00:00,34.27,ORESoftware,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1950,Stack trace cleaning not happening when using Babel's async/await,"Test:
describe('foo', function() {
  it('bar', async function() {
    await bar();
  });
});

function bar() {
  return new Promise(function(resolve, reject) {
    reject(new Error('bar'));
  });
}
mocha --compilers js:babel/register foo_test.js 


  foo
    1) bar


  0 passing (194ms)
  1 failing

  1) foo bar:
     Error: bar
      at foo_test.js:9:12
      at new Promise (node_modules/babel/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js:183:7)
      at bar (foo_test.js:8:10)
      at Context.callee$1$0$ (foo_test.js:3:11)
      at tryCatch (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:61:40)
      at GeneratorFunctionPrototype.invoke [as _invoke] (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:328:22)
      at GeneratorFunctionPrototype.prototype.(anonymous function) [as next] (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:94:21)
      at invoke (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:136:37)
      at callInvokeWithMethodAndArg (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:172:16)
      at previousPromise (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:194:19)
      at new Promise (node_modules/babel/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js:183:7)
      at AsyncIterator.enqueue (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:193:13)
      at AsyncIterator.prototype.(anonymous function) [as next] (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:94:21)
      at Object.runtime.async (node_modules/babel/node_modules/babel-core/node_modules/regenerator/runtime.js:215:14)
      at Context.callee$1$0 (foo_test.js:2:13)",djanowski,NONE,2015-10-29 21:20:45+00:00,True,2015-10-30 06:55:18+00:00,0.4,,2,3,2015-10-30 06:55:18+00:00,0.4,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1952,Wrong error message when a reporter blows up trying to load another module,"I was trying to use the xunit-file reporter in conjunction with gulp-mocha, and that reporter blows up with the error ""Error: Cannot find module 'mocha'""
However, because mocha just checks for the string 'Cannot find module' it incorrectly logs that the reporter wasn't found and makes things take a bit longer to debug.",nfriedly,NONE,2015-10-30 21:25:57+00:00,True,2017-11-01 05:05:10+00:00,732.32,,3,2,2015-11-02 16:50:23+00:00,2.81,nfriedly,NONE,0,0,0,2,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1953,Inquery: Would this project welcome a PR that adds in a programmatic API?,"I'm using Mocha all over the place these days and I love it. However, I often find myself parallelizing test runs. For example, I often have to spin up the same test suite multiple times for use with Sauce Labs cloud testing on multiple platforms. The only way to do this currently is to spin up child processes and load up those processes with different environment variables, telling the test suite which platform and browser to fire up when talking to Sauce Labs.
Here's an example of this happening in a gulpfile:
gulp.task('selenium', (done) => {
  selenium.install((err) => {
    if (err) return done(err);
    selenium.start((err, child) => {
      if (err) return done(err);
      selenium.child = child;
      done();
    });
  });
});

var testDependencies = [];
if (yargs.argv.local) {
  testDependencies.push('selenium');
}
gulp.task('test', testDependencies, () => {
  var targets;
  if (yargs.argv.local) {
    targets = [
      'mac.chrome',
      'mac.firefox'
      //'mac.safari'
    ];
  } else {
    targets = [
      'windows.chrome',
      'windows.firefox',
      'windows.ie',
      'mac.chrome',
      'mac.firefox',
      'mac.safari',
      'linux.chrome',
      'linux.firefox'
    ];
  }

  function runMocha(target, done) {
    var env = Object.assign({ TARGET: target }, process.env);
    var args = ['--color', '--colors'];
    if (yargs.argv.local) {
      args.push('--local');
    }
    var mocha = spawn('mocha', args, { env });
    mocha.stdout
      .pipe(split())
      .pipe(through(function (text, enc, callback) {
        text = text.toString().replace('\r', '').trim();
        if (stripColorCodes(text).length > 0) {
          var padded = `${target.blue}:                              `.slice(0, 30);
          this.push(`${padded} ${text}${endOfLine}`);
        }
        callback();
      }))
      .pipe(process.stdout);
    mocha.on('close', done);
  }

  var jobs = targets.map(
    (target) => new Promise( (resolve) => runMocha(target, resolve))
  );

  return Promise.all(jobs).then(() => {
    if (yargs.argv.local) {
      selenium.child.kill();
    }
    console.log('ALL SUCCESSFUL');
  });
});
This configuration works great for running local selenium tests as well as cloud selenium tests on Sauce Labs. It's just cumbersome and far more low-level than I'd like. Simple things become complicated, such as formatting the test output and preserving colors. You'll note above that I have to pass in both the --color and --colors flags to the child processes to force mocha and selenium to preserve their colors; otherwise they think they are not running in a TTY-enabled terminal. Similarly I have to pipe the streamed output into a custom transform stream so I can format things appropriately. I'd still have to do this to a degree even with a programmatic mocha but it would be much simpler and far more readable. It took a lot of poking and prodding to finally arrive at a solution that worked well and printed clean readable output.
I'm writing so much code like this that I thought maybe it's time to crack open the Mocha source and start working on a programmatic API. The ability to drive mocha programmatically would be a huge help for these kinds of scenarios. Instead of spawning child processes to drive the CLI interface, I could just create mocha instances right inside of gulp and pass in options.
Before I dedicate time to this I first want to make sure it's something that would be welcomed by the project maintainers. What do you guys think? Does this just not exist because nobody has taken the time to do it, or are there other reasons to oppose such a change? I welcome the feedback :)",chevex,NONE,2015-10-30 22:57:20+00:00,True,2015-10-31 04:36:16+00:00,0.24,,2,1,2015-10-31 04:36:16+00:00,0.24,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1955,Hook failures change the shape of the test suite,"If a beforeEach hook fails, then all subsequent tests in a suite and all sub-suites are not run. For example:
// hook-test.js
describe(""outer context"", function() {
  beforeEach(function() {
    throw new Error(""this is a failure in a before each hook"");
  });
  it(""reports the first assertion"", function() {

  });
  it(""does not report the existence of this test case"", function() {

  });
  describe(""inner context"", function() {
    it(""does not report report its existence in the output"", function() {

    });
  });

});
reports only a single testcase, even though there are three defined:
$ mocha --reporter min hook-test.js
0 passing (6ms)
  1 failing

  1) outer context ""before each"" hook for ""reports the first assertion"":
     Error: this is a failure in a before each hook
      at Context.<anonymous> (test/mocha-test.js:3:11)

As outlined in #1043, this is the intended behavior for both beforeEach as well as other hooks. This makes sense from an efficiency prespective; after all, there is no point in actually running the testcases when it is assured that they are going to fail.
The problem with this is that when you're refactoring a large codebase, or doing something like upgrading an underlying library, or rehabilitating a codebase that has allowed its test suite to get out o sync.... work that might take days or weeks, this behavior alters how many total testcases are reported. So as you make changes, the reporting varies widely. We've seen the pass/total numbers of test cases jump from 95/220, to 4/8, then down to 0/1 in the case of a global hook failure, then back up to 35/160 in a matter of minutes.
This can be very disorienting, and it obscures your overall progress towards your goal which is a completely green suite where all tests are passing. The fact that a test is not run, does not mean that it doesn't exist, and that it is not important.
Rather than exclude a test completely from the output, it makes more sense to not run it, but still report it as a failure. That way, the shape of the test suite remains constant. If I have 225 testcases, then that's what I have, even if only 26 of them are passing. I at least know that I'm 12% there, which test suites are related by the same failure, and I can track total progress.
If this makes sense, it would be something I'd be happy to help implement.",cowboyd,NONE,2015-11-05 18:34:15+00:00,False,,,,10,12,2015-11-11 22:49:48+00:00,6.18,cowboyd,NONE,1,1,0,7,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1956,xunit reporter: datetime format,"Hi,
I've raised this issue to request a change in the xunit reporter to the format of the timestamp attribute (of the testsuite element) be changed from UTC format to XSD DateTime format (e.g. 2015-09-08T05:06:45).
This will keep the format in-line with the JUnit format and will allow better integration with tools that are likely to consume these reports (e.g. Jenkins).
More Info;
•http://help.catchsoftware.com/display/ET/JUnit+Format
•http://windyroad.com.au/dl/Open%20Source/JUnit.xsd
I've already implemented this in xunit-file (peerigon/xunit-file#17), I was thinking it would be good to include in the base.xunit reporter.
Also this another change implement with that issue to add a properties section populated with environment setting (see XUNIT_LOG_ENV setting on https://github.com/peerigon/xunit-file), it would be good to include as it does help with debugging environmental problems.
Cheers
Peter",whamBamDev,NONE,2015-11-06 05:38:13+00:00,True,2017-08-12 13:30:00+00:00,645.33,,2,1,2017-07-28 15:18:59+00:00,630.4,stale,NONE,0,0,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1957,Introduction to mocha.js on Global Ember Meetup,"mocha.js can be used with EmberCLI with ember-cli-mocha library. EmberCLI uses QUnit by default, so most people are not familiar with mocha.js.
We have a ""Ember Testing Day"" coming up on Global Ember Meetup in 2 weeks. Would someone who loves mocha.js be interested in coming on and giving a lightning talk about mocha.js and why use it?",taras,NONE,2015-11-09 15:30:54+00:00,True,2015-11-13 20:31:04+00:00,4.21,,4,8,2015-11-09 15:38:24+00:00,0.01,dasilvacontin,CONTRIBUTOR,1,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1959,MOCHA_REPORTER environment variable as override for --reporter,"Challenge: I want to use default reporter when running tests locally (npm test) and https://www.npmjs.com/package/mocha-teamcity-reporter when running tests in ci. And I want this to be as transparent as possible for developers (given we have tens/hundreds of npm modules).
Do you think it makes sense to add this feature like:
default:
$ mocha

ci:
$ npm install -g mocha-teamcity-reporter
$ export MOCHA_REPORTER=mocha-teamcity-reporter
$ mocha

Thanks",viliusl,NONE,2015-11-11 09:03:41+00:00,True,2015-11-11 10:05:17+00:00,0.04,,2,1,2015-11-11 10:05:17+00:00,0.04,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1960,Tests display full stacktrace in 2.3.3 by default,"I'm using mocha 2.3.3 which should have the shortened stacktraces by default yet I am still receiving them in full:
2) conditionBuilder greater_than_condition returns false with smaller input:
 AssertionError: expected undefined to equal false
  at evaluateCondition (C:\Users\jeroen\Documents\Github\MyPackage\tests\conditionBuilderTests.js:44:11)
  at Context.<anonymous> (C:\Users\jeroen\Documents\Github\MyPackage\tests\conditionBuilderTests.js:31:4)
  at callFn (C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runnable.js:286:21)
  at Test.Runnable.run (C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runnable.js:279:7)
  at Runner.runTest (C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runner.js:421:10)
  at C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runner.js:528:12
  at next (C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runner.js:341:14)
  at C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runner.js:351:7
  at next(C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runner.js:283:14)
  at Immediate._onImmediate(C:\Users\jeroen\Documents\Github\MyPackage\node_modules\mocha\lib\runner.js:319:5)

npm show mocha version returns 2.3.3 and I execute my tests using mocha myTestFile (so there is no full-trace flag specified).
Does anyone else notice this? Did I make a mistake anywhere? I would show a test but I don't think its contents are relevant.",Vannevelj,NONE,2015-11-11 12:17:19+00:00,False,,,,5,8,2015-11-11 12:46:07+00:00,0.02,danpantry,NONE,0,1,0,3,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1961,invalid custom reporter,"Previously, we could just drop some reporter.js into mocha/lib/reporters/ and it would be picked up.  However, the below commit removed that functionality and would now force you to add it to reporters/index.js for it to work.
Commit: a81e555
Any way we can add that back in, possibly like this?
if (reporters[reporter]) {
     _reporter = reporters[reporter];
}
else {
    try {
        _reporter = require('./reporters/' + reporter);
    } catch (err) {
        // Ignore
    }
}",bonjonbovi87,NONE,2015-11-11 16:25:33+00:00,True,2017-10-17 06:28:24+00:00,705.59,,4,3,2015-11-11 16:26:20+00:00,0.0,jfbibeau,NONE,0,1,0,2,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1962,HTML Reporter: combine suites,"This code would generate
describe 'Preview', ->
  describe 'Bool', ->
    it 'first', ->
      expect(true).to.be.true

describe 'Preview', ->
  describe 'Bool', ->
    it 'more', ->
      expect(true).to.be.true
it would generate this html:
Preview
  Bool
    [check] first

Preview
  Bool
    [check] more

but if would be much better if it would generate this html:
Preview
  Bool
    [check] first
    [check] more

i've looked at the code and was not sure if that's even possible?",antpaw,NONE,2015-11-11 19:16:58+00:00,False,,,,5,3,2016-04-03 18:41:59+00:00,143.98,jandockx,NONE,1,0,0,2,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1964,require('mocha').beforeEach does not run outer lifecycle hooks when running inner testcases marked by `it.only`,"This code associated with this writeup is available here: https://gist.github.com/cowboyd/f5611829c7a3ad084642
given the following mocha code:
var beforeEach = require('mocha').beforeEach;
describe(""the outer context"", function () {
  beforeEach(function() {
    this.didRunBeforeEach = true;
  });
  describe(""the inner context"", function() {
    it(""runs its parent beforeEach"", function() {
      expect(this.didRunBeforeEach).to.equal(true);
    });
  }) ;
});
because ""the inner context"" is nested inside ""the outer context"",
it should run the outer context's beforeEach hook. It does do this
under normal circumstances:
~/C/E/mocha-demo ❯❯❯ npm t

> mocha-demo@1.0.0 test /Users/cowboyd/Code/Ember/mocha-demo
> mocha index.js



  the outer context
    the inner context
      ✓ runs its parent beforeEach


  1 passing (7ms)
But if we configure the inner context to
use it.only to select only the single test-case:
var beforeEach = require('mocha').beforeEach;
describe(""the outer context"", function () {
  beforeEach(function() {
    this.didRunBeforeEach = true;
  });
  describe(""the inner context"", function() {
    it.only(""runs its parent beforeEach"", function() {
      expect(this.didRunBeforeEach).to.equal(true);
    });
  }) ;
});
Then it fails with the following error:
~/C/E/mocha-demo ❯❯❯ npm t                                                                                                                                                                                                                  ⏎

> mocha-demo@1.0.0 test /Users/cowboyd/Code/Ember/mocha-demo
> mocha index.js


  1) runs its parent beforeEach

  0 passing (9ms)
  1 failing

  1)  runs its parent beforeEach:
     AssertionError: expected undefined to equal true
      at Context.<anonymous> (index.js:15:40)



npm ERR! Test failed.  See above for more details.

Which indicates that the hook is either not being run.
¯",cowboyd,NONE,2015-11-11 22:42:56+00:00,True,2015-12-22 21:19:49+00:00,40.94,,1,2,2015-11-12 16:23:26+00:00,0.74,cowboyd,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1966,New release,When's the next release planned? I think this 039a8a7 would deserve a point release soonish...,ockham,NONE,2015-11-15 11:58:34+00:00,True,2015-11-15 20:27:58+00:00,0.35,,2,2,2015-11-15 20:27:58+00:00,0.35,travisjeffery,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1968,Error on web workers,I've got the error Uncaught ReferenceError: window is not defined while I was trying to load mocha on web workers via importScripts method. Mocha should've used self instead.,lewispham,NONE,2015-11-17 08:55:56+00:00,True,2017-08-12 13:30:01+00:00,634.19,,2,2,2015-11-17 11:23:00+00:00,0.1,lewispham,NONE,0,0,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1969,mocha: the next big thing,"(..or maybe Mocha 4.  I don't know.)
@mochajs/mocha + everyone,
I mentioned this in the mochajs/maintainers room on Gitter, but since it appears people aren't using Gitter much, I'll repeat it here:
Pitch
Mocha's old.  What's cool about that is that we know what's wrong with it.  And indeed, it has problems which make certain issues difficult to address.  The major issue is ""plugins"".  Others include (but are not limited to):

The whole thing is written in ES5
The core is bloated (modularize it)
Test files are not node-able
No parallelism
Lack of automated browser tests
Inability to leverage domains
Patchwork ""diff"" support
Too many hand-rolled shims/polyfills
Too much hand-rolled stuff in general which should be replaced by 3p libs that do it better
""Configuration"" is tightly coupled with the CLI
Programmatic usage is undefined
Multiple executables = pain
Various instances of callback hell
Poor support for writing 3rd-party reporters and interfaces

It's my opinion that any attempt to address these problems in an iterative fashion is a fool's errand.  Components are too tightly coupled; each item above, if taken in the context of the current codebase, is a major undertaking.  I propose we rewrite Mocha from scratch.
Plan
Mocha should made of plugins--all the way down.  It should come with a default interface and a default reporter, but little else--Mocha's business is running tests and reporting the output.  This is what it does well, and this is what the core should be.
From the current version of Mocha, we'd retain:

The ""simple, flexible, fun"" motto.  Mocha should remain unopinionated; its core should be simple.  We would split some portion of the existing functionality into plugins (separate modules) which can be easily included if necessary.
The interface APIs.  Users should not have to modify their tests.
Support for ""deprecated"" APIs would move to plugins or separate modules.  For example:

I'd like to move to using JSON/YAML/JS .mocharc file(s) instead of mocha.opts.  We would retain the mocha.opts functionality in a plugin; package mocha-opts-plugin, for example.
--watch, which should be handled by a plugin or another executable entirely.
Command-line flags to node should be handled by node itself--either by executing mocha with node, or using node-able tests.
The CLI itself should move to a package mocha-cli, as not everyone uses it.


Some portion of the E2E tests should be retained to guide adherence to the API.

For libraries and tools which consume Mocha (I'm thinking stuff like JetBrains Mocha reporter, Wallaby.js, mochify, karma-mocha, any Grunt/Gulp plugin which executes _mocha), we must keep lines of communication open to ensure a smooth transition.  Ideally, these tools should use the resulting programmatic interface instead of forking processes!
We should supply a Yeoman generator for Mocha plugins, which would provide starting points and boilerplate for Browserify (since certain plugins will need to run in a browser).
Conclusion
If you guys are buying what I'm selling, I think the best thing to do is just start coding.  The direction is clear, and the requirements are known.  Let's create a prototype and take it from there.  When the dust settles, we can address specific areas of concern, and begin to deprecate whatever needs deprecating.  And start documenting.  An upgrade to v3 shouldn't require the user to do much more than install an extra package or two.
cc @segrey @mantoni @ArtemGovorov @vojtajina @maksimr @dignifiedquire",boneskull,MEMBER,2015-11-18 02:11:37+00:00,True,2018-08-10 22:23:30+00:00,996.84,,14,76,2015-12-01 10:19:04+00:00,13.34,danielstjules,CONTRIBUTOR,1,7,0,6,"['feature', 'future', 'needs-feedback']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1970,Mocha Suite Parse Error,"2 macs, same Node version, same npm version, same mocha local version... mine works, her's fails. We even updated her Mac to El Capitan, same problem.
If we compare the suite variable after the pre-require event, mine appears correctly parsed, her's does not. If someone could tell me what this line of code does, maybe I could solve it. It's in mocha.js 's Mocha.prototype.loadFiles method.
suite.emit('require', require(file), file, self);
I ask because by the time gets to after the loadFiles method call in Mocha's run, my suite is correctly parsed, her's is not.
Mine:
suite: Suite {
  title: '',
  ctx: {},
  suites: 
   [ Suite {
       title: 'Array',
       ctx: {},
       suites: [Object],
       tests: [],
       pending: false,
       _beforeEach: [],
       _beforeAll: [],
       _afterEach: [],
       _afterAll: [],
       root: false,
       _timeout: 2000,
       _enableTimeouts: true,
       _slow: 75,
       _bail: undefined,
       delayed: false,
       parent: [Circular],
       file: '/Users/jessewarden/Documents/_Work_Projects/Circus/test3/basic.spec.js' } ],

Hers:
suite: Suite {
  title: '',
  ctx: {},
  suites: [],
  tests: [],
  pending: false,
  _beforeEach: [],
  _beforeAll: [],
  _afterEach: [],
  _afterAll: [],
  root: true,
  _timeout: 2000,
  _enableTimeouts: true,
  _slow: 75,
  _bail: undefined,
  delayed: false,
  _events: { 'pre-require': [ [Function], [Function], [Function] ] },
  _eventsCount: 1 }",JesterXL,NONE,2015-11-18 20:58:19+00:00,True,2015-11-20 13:17:50+00:00,1.68,,1,1,2015-11-20 13:18:22+00:00,1.68,JesterXL,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1971,`this` keyword does not get cleaned after each test,"How come mocha does not this keyword for each test?
describe.only('A spec', function () {

  beforeEach(function () {

    this.foo = 0;

  });

  it('can use the `this` to share state', function () {

    expect(this.foo)
      .to
      .equal(0);

    this.bar = 'test';

  });

  it('prevents test pollution by having an empty `this` created for the next spec', function () {

    expect(this.foo)
      .to
      .equal(0)

    expect(this.bar)
      .to
      .equal(undefined); // still 'test'
  });

});",rodoabad,NONE,2015-11-19 04:25:44+00:00,True,2015-11-19 19:16:39+00:00,0.62,,4,9,2015-11-19 19:16:39+00:00,0.62,boneskull,MEMBER,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1973,[Learning Help] Mocha done callback,"Sorry if it is the wrong place to ask help.
I was learning mocha and its done call back. I have created a repo to test it.
Error :

should have sso session:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.

Code repo:
git@github.com:DeChrish/request-node.git",DeChrish,NONE,2015-11-21 19:39:44+00:00,True,2015-11-22 04:21:23+00:00,0.36,,3,3,2015-11-21 23:58:53+00:00,0.18,dasilvacontin,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1974,Mock Data Undefined,"I'm trying to create a unit test that checks if a GET request returns the correct amount of items, but I'm using mock data to do this.
My test looks like this:
test.js
describe('Customer Controller', function () {
    var controller;
    var customers = mockData.getMockCustomers(); // fake customers (5 customers)

    beforeEach(function() {
      bard.appModule('app');
      bard.inject('$controller', '$q', '$rootScope');

      var cs = {
        getCustomers: function() {
          return $q.when(customers);
        }
      };

      controller = $controller('scoreListCtrl', {
        CustomerService: cs
      });
    });

    it('should return 5 customers', function() {
      $rootScope.$apply();
      expect(controller.customers).to.have.length(5);
    });
});

I keep getting this error when I run the test:

TypeError: Cannot read property 'length' of undefined

It looks like controller.customers is coming back as undefined for some reason. Am I mocking the data correctly?
I'm very new to this and can't work out what I'm doing wrong. I don't even know how to debug such an issue.
Any help is appreciated. Thanks in advance!",realph,NONE,2015-11-22 19:56:11+00:00,True,2017-12-09 01:34:46+00:00,747.24,,3,2,2017-07-27 23:52:11+00:00,613.16,johnkpaul,NONE,0,0,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1975,afterEach inside beforeEach and mocha timing issues.,"Just spent ages figuring out why our tests seem to slow down about half way through a test suite and continue slowly from then on.
Basically, through what looks like a git merge, an afterEach call had got inside a beforeEach call.
This seemingly causes the afterEach to be run in the outer context (or whatever mocha calls the describe-scoped before/after mechanism) which was adding a load of afterEach calls for every subsequent it in the suite, causing every test thereafter to run slower.
Mocha's slow test reporting was not picking this up and it was a nightmare to figure out.
This brings up two issues:

Should the mocha ""slow"" timing take into account beforeEach and afterEach calls? It doesn't seem to, and if it did it would have made debugging this a whole lot easier.
Should there be some warning/error about running an afterEach inside a beforeEach? I can't think of a reason why you would ever want to do this?

Example:
// test1.js
describe(""first suite"", function() {
  beforeEach(function() {
    // setup

    afterEach(function() {
      console.log(""after each first file"")
    })
  })

  it(""first test"", function () { console.log(""test1"") })

  it(""second test"", function () { console.log(""test2"") })

  it(""third test"", function() { console.log(""test3"") })
})

// test2.js

describe(""second test"", function() {
  it(""fourth test"", function() { console.log(""test4"") })
})

// output
test1
after each first file
test2
after each first file
after each first file
test 3
after each first file
after each first file
after each first file
test 4
after each first file
after each first file
after each first file

As you can see, this adds an extra after step each time an it is run. This resulted in ~10,000 extra calls being made to the afterEach in one test file, which slowed our tests down significantly. These tests were definitely taking more than the --slow timeout, but they were not being reported as slow.
Expected output would be an error being thrown that afterEach cannot be run inside beforeEach.
Obviously, this is a mistake in the test code, but an error would have been handy. This would also be avoided by using a proper language that doesn't have significant whitespace and linting the indentation, but I feel like mocha could have been more helpful here.",tomhicks,NONE,2015-11-23 20:34:57+00:00,True,2017-10-18 04:26:20+00:00,694.33,,7,7,2015-12-03 04:40:42+00:00,9.34,rodoabad,NONE,0,2,0,4,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1978,Markdown reporter doesn't understand `=>`functions from es6,"I learned that when using the markdown reporter on tests with => functions, mocha deletes the function call from the output completely
Example:

original code - https://github.com/ipfs/js-ipfs-api/blob/auto-docs/test/api/add.spec.js#L36-L40
output with markdown reporter - https://github.com/ipfs/js-ipfs-api/blob/auto-docs/API.md#add",daviddias,NONE,2015-11-25 11:54:57+00:00,True,2017-07-28 03:57:50+00:00,610.67,,3,2,2017-07-27 23:53:35+00:00,610.5,johnkpaul,NONE,0,0,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1979,Return full error with window.onerror handler,Now window.onerror handler from support/browser-entry.js creates new error with uncaught error message and short location. Spec says that window.onerror has full uncaught error as last argument and it seems that all latest browsers support this spec. It would be great for reporting to return full uncaught error for mocha tests in browsers in case it is supported. I am ready to create PR if you find this idea ok.,roadhump,NONE,2015-11-25 15:15:07+00:00,False,,,,2,0,,,,,0,0,0,0,"['browser', 'feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
1980,--harmony-proxies option not working,"This is my mocha.opts file in my test/ folder:
--compilers js:babel/register
--require mocha.conf.js
--harmony-proxies

I'm using mocha v2.3.4, and node v5.1.0 and I get the error:
  error: unknown option `--harmony-proxies'

EDIT: In fact, none of the --harmony options are working.",JaKXz,NONE,2015-11-26 01:35:11+00:00,True,2015-12-26 06:34:20+00:00,30.21,,4,12,2015-11-26 03:15:16+00:00,0.07,danielstjules,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1983,Mocha compiler not working?,"According to all the blog posts I've read, the following setup should work:
package.json (I am showing only relevant bits here):
{
  ""main"": ""./lib/main.js"",
  ""scripts"": {
    ""test"": ""NODE_ENV=test _mocha"",
  },
  ""devDependencies"": {
    ""babel"": ""^6.1.18"",
    ""babel-core"": ""^6.2.1"",
    ""istanbul"": ""^0.4.1"",
    ""mocha"": ""^2.3.4""
  }
}
test/unit/setup.test.js:
import API from '../../';
console.log('API', API);
test/mocha.opts:
--recursive
--debug
--reporter spec
--bail
--ui bdd
--compilers js:babel-core/register
test/**/*.test.js

However, it doesn't and upon running npm test it throws this error:
import API from '../../';
^^^^^^

SyntaxError: Unexpected reserved word

It seems like the code isn't getting transpiled despite being instructed to by the compiler.",niftylettuce,NONE,2015-11-27 16:32:02+00:00,True,2015-11-27 19:13:31+00:00,0.11,,2,3,2015-11-27 19:13:30+00:00,0.11,niftylettuce,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1984,console.log suppressed,"when require'ing modules, if there is console.log inside of it, it will get suppressed.
is there a way to turn this on?",niftylettuce,NONE,2015-11-27 20:01:48+00:00,True,2015-11-27 20:14:11+00:00,0.01,,1,2,2015-11-27 20:07:20+00:00,0.0,niftylettuce,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1985,"allow hooks to easily set ""allowUncaught"" flag","Both suite.allowUncaught and test.allowUncaught are completely ignored by the mocha.Runner instance being used at any time. (See code: https://github.com/mochajs/mocha/blob/master/lib/runner.js#L413-L416).
  if (this.allowUncaught) {
    test.allowUncaught = true;
    return test.run(fn);
  }
Which really should be something like:
  if (this.allowUncaught || test.parent.allowUncaught || test.allowUncaught) {
    test.allowUncaught = true;
    return test.run(fn);
  }
Now I'm not really sure the best way to traverse up the tree of suites to find all of the parents so the test.parent.allowUncaught is pretty naive, but the second test.allowUncaught check allows for a (somewhat) elegant work-around:
describe('Anything', function () {
  this.on('test', function (test) {
    test.allowUncaught = true;
  });
});
The super-hack work-around until I have the time to make a pull-request for this is:
//
// This is an awful and fragile hack that
// needs to be changed ASAP.
//
var _runTest = mocha.Runner.prototype.runTest;
mocha.Runner.prototype.runTest = function () {
  this.allowUncaught = true;
  _runTest.apply(this, arguments);
};

describe('Anything', function () {

  after(function () {
    mocha.Runner.prototype.runTest = _runTest;
  });
});
Worth noting that the --allowUncaught CLI option also appears to be completely broken right now. My use-case is slightly different, however, since I only want to set allowUncaught to true for some test suites (not all).",indexzero,NONE,2015-11-27 21:39:36+00:00,False,,,,8,13,2016-02-29 23:48:34+00:00,94.09,kevinoid,NONE,1,1,0,6,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
1986,chai.check helper function - can we merge it into the main repo?,Can we merge my package into this repo? https://github.com/niftylettuce/check-chai,niftylettuce,NONE,2015-11-27 21:44:36+00:00,True,2017-12-07 01:12:25+00:00,740.14,,5,4,2015-12-01 10:03:46+00:00,3.51,danielstjules,CONTRIBUTOR,0,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1987,Cannot combine --delay and --watch and --require hook,"Title says all: this command does not restart my tests when changing them:
mocha --recursive --watch --require setup.js --delay

With gist!",opatut,NONE,2015-11-30 11:44:14+00:00,True,2018-10-31 20:04:22+00:00,1066.35,,7,23,2016-01-14 23:18:19+00:00,45.48,Download,NONE,1,1,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1988,.only() fails for identifiers that are substrings of other identifiers,".only() incorrectly runs all tests that contain a substring of the string you are running only() on.
Example:
describe('#getAssets', () =>
    it('this shouldn\'t run', () => console.log('#1 ran')));

describe.only('#getAsset', () =>
    it('this should only run', () => console.log('#2 ran')));
Result:
assets
    #getAssets
#1 ran
      ✓ this shouldn't run
    #getAsset
#2 ran
      ✓ this should only run

  2 passing (9ms)

Expected result:
assets
    #getAsset
#2 ran
      ✓ this should only run

 1 passing (9ms)",edmulraney,NONE,2015-11-30 14:09:23+00:00,True,2015-11-30 15:11:00+00:00,0.04,,2,1,2015-11-30 15:11:00+00:00,0.04,dasilvacontin,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1990,Question:  Why is --harmony flag required for ES6 when using Node v4 locally?,"Spent some time trying to figure this out today and decided to open a question in hopes that someone here might know the answer.
I am trying to use ES6 + mocha without transpiling (i.e. Babel).  I am using Node 4.2.1 (which supports all the ES6 harmony features by default).
If I just run mocha test (without the --compile babel option) then I get errors whenever I use any ES6 features.  I can get around this by enabling the --harmony flag as part of the mocha cli options.
Since I am running node 4 I dont understand why the --harmony flag is required to use ES6 functionality with mocha.  From everything I can see in bin/babel mocha is just using my local node version.
As ES6 and Node 4 become more popular I am thinking this question might come up more and more - any help understanding this is greatly appreciated.
Thanks!",mikrofusion,NONE,2015-12-01 01:15:09+00:00,True,2015-12-01 15:45:37+00:00,0.6,,2,3,2015-12-01 09:12:31+00:00,0.33,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1991,Declarations do not get cleaned up unless you set them to `null`,"@boneskull Just wondering if we should be actively cleaning up out declarations per describe block.
Leaking

(function () {

  'use strict';

  function MemoryLeak() {
  }

  for (var i = 0; i < 1000; i += 1) {

    describe('Suite #' + i, function () {

      var suite;

      beforeEach(function () {

        suite = new MemoryLeak();

      });

      it('should do something', function () {

        suite.isLeaking = true;

      });

    });

  }

})();
Not Leaking

(function () {

  'use strict';

  function MemoryLeak() {
  }

  for (var i = 0; i < 1000; i += 1) {

    describe('Suite #' + i, function () {

      var suite;

      beforeEach(function () {

        suite = new MemoryLeak();

      });

      afterEach(function () {

        suite = null;

      });

      it('should do something', function () {

        suite.isLeaking = true;

      });

    });

  }

})();

More here - https://github.com/rodoabad/mocha-memory-leak",rodoabad,NONE,2015-12-02 06:07:45+00:00,True,2019-06-06 21:40:31+00:00,1282.65,,9,19,2015-12-02 18:31:00+00:00,0.52,boneskull,MEMBER,1,3,0,6,"['help wanted', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1992,Allow to rerun flaky tests,"Some test suites are very flaky. Flaky means it can generate false negatives for some tests. An example, is if we query an external web service and the network, one in every 100 times the socket hangs up. It would generate a false positive.
My proposal is have an CLI option:
--max-test-fails [number]

that defaults to 0.
Also you can set this for a specific test suite and all its children suites:
describe('SuiteName', function() {
    this.maxTestFails(3);
    ...
})
I have PR ready, if this sounds interesting enough for you. But for me, I cannot use Mocha without it. My test suite generates false negatives in nearly every run.",tinganho,CONTRIBUTOR,2015-12-02 13:03:23+00:00,True,2015-12-29 12:53:35+00:00,26.99,,3,9,2015-12-02 18:58:54+00:00,0.25,rodoabad,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1994,XUnit reporter hangs if output directory doesn't exist,,ianwremmel,CONTRIBUTOR,2015-12-04 02:56:48+00:00,True,2015-12-09 17:34:48+00:00,5.61,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1996,Recursive requiring causing Mocha to blow up?,"Rather than re-post the entire question here, I'll just link to this: http://stackoverflow.com/questions/34079751/catch-22-recursive-node-modules-blowing-up-when-using-mocha
In a nutshell though, this is the behavior:
/helpers/index.js
module.exports = { build: require('./build') }

/helpers/build.js
var Entity = require('../lib/entity')

/lib/entity.js
var helpers = require('../helpers/')

When running under Mocha, Entity, when logging out helpers, logs it as an empty object and throws an error that properties inside don't exist (obviously).
But when running the entity.js file directly with Node, it loads the module properly and logs it out correctly.",brandonscript,NONE,2015-12-04 03:10:09+00:00,True,2015-12-04 04:34:48+00:00,0.06,,1,1,2015-12-04 04:34:48+00:00,0.06,brandonscript,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1997,`specify` missing from documentation (synonym for `it`),"Per #396, it sounds like specify and xspecify are deliberate parts of the API -- synonyms for it and xit -- but the documentation doesn't mention them.
Not a big deal, but figured I would mention it.",cspotcode,CONTRIBUTOR,2015-12-04 19:36:23+00:00,True,2016-04-10 04:28:52+00:00,127.37,,3,1,2015-12-05 13:42:56+00:00,0.75,dasilvacontin,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1998,Suppress `console.log` output from tests that succeed,"I do not want to see debug output from tests that succeed but would like to see it for tests that fail. Is there a way to achieve this currently?
I have seen some recommendations to only conditionally log based on environment variables in responses to similar questions but I would like to see the debug information if the test fails which is slightly different. It seems like that would be a mocha level or reporter level feature, not something the code under test could control.",justinmchase,NONE,2015-12-07 18:05:49+00:00,True,2016-10-26 16:16:59+00:00,323.92,,8,13,2015-12-07 19:07:18+00:00,0.04,dasilvacontin,CONTRIBUTOR,0,2,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2002,Should not throw error when files.length == 0,"Directory structure likes below:
tests/
    units/

In units, there isn't any file. When I use mocha to run this path, it throws can't resolve path, but glob(path) returns []. Maybe, it shouldn't throw error.
tests/
    units/
        lib-test.js

If directory structure likes above, it works well.
see pull request #2001",mariodu,NONE,2015-12-11 06:17:26+00:00,True,2017-03-30 14:54:58+00:00,475.36,,2,1,2017-03-30 14:54:58+00:00,475.36,drazisil,NONE,0,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2004,Assertions that compare two numbers for equality are confusing,"Maybe it's just me, but I find this presentation very confusing:

It takes me a few seconds to mentally parse that. The plus and minus characters throw me because they look like they're positive/negative numbers at first. (I get that it's standard diff formatting, but I don't think diff formatting is appropriate when comparing integers.) After that, you have to mentally link up the colours or the symbols to work out which way round the problem is.
Wouldn't something like this be much clearer:
      AssertionError: should contain one changed file

        expected: 1
          actual: 2

(This could be just for when both the expected and actual values are numbers.)",callumlocke,NONE,2015-12-14 10:36:05+00:00,False,,,,6,4,2015-12-16 15:57:46+00:00,2.22,bcowgill,NONE,0,1,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2006,It mentions case name from previous suite if the before hook fails,"Given the test script:
describe('good test', function() {
  it('should not blame me', function() { });
});

describe('bad test', function() {
  before('fail init', function() {
    throw new Error();
  });

  it('skipped');
});
It outputs:
  good test
    ✓ should not blame me

  bad test
    1) ""before all"" hook: fail init for ""should not blame me""

It should not mention the case name ""should not blame me"".",stonelgh,NONE,2015-12-15 02:05:17+00:00,True,2015-12-29 02:50:39+00:00,14.03,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2010,White colour scheme hurts my eyes.,"I've had a personal mocha.css/js which uses a dark colour scheme because I can't look at a white scheme all day long.  I've got code changes which I could commit but don't know the contribution process.
What I've done is add a body class of mocha-dark or mocha-light and mocha.css changes to apply a dark scheme if mocha-dark is present.
In code, it stores a cookie mocha-scheme=mocha-light or mocha-dark with an expiry of  1 year.
The mocha object gets two new methods:
mocha.initColorScheme(options.colorScheme) which reads the cookie and sets the body class
mocha.setColorScheme('mocha-dark') which sets the body class and the cookie value.
Default is to use mocha-light scheme so no one's the wiser.
Comments ? Criticisms ? What to do to submit it?",bcowgill,NONE,2015-12-16 14:55:27+00:00,True,2017-03-30 17:40:00+00:00,470.11,,3,4,2015-12-16 15:26:29+00:00,0.02,bcowgill,NONE,1,0,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2012,add/ the ability to tag test files for easy multi-topic coverage,"For large applications, it would be great to tag files using Mocha. We've made the switch from vows but lost that ability because of the difference in UI and how Mocha runs. As in, adding extra attributes to Mocha export tests fail because it tries to run the attribute as either a title or function. My solution proposed below is to offer the option of adding tags by using a utility taggable.js. For example:
var Taggable = require('mocha').Taggable;

module.exports = Taggable(['foo', 'bar'], {
  Foo: {
    '#new Foo()': {
      'foo should be of Foo': function() {
        var foo = new Foo();
        foo.should.be.instanceOf(Foo);
      }
    }
  }
});
Please see PR #2011
If there is a better way to do this, please suggest it. Thanks!",davidpaulhunt,NONE,2015-12-17 17:27:06+00:00,True,2017-03-30 15:03:51+00:00,468.9,,2,1,2017-03-30 15:03:51+00:00,468.9,drazisil,NONE,0,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2013,Passing URL parameters into components,"I'm trying to test a page component in React JS, but it relies on getting url parameters. When I try to test it in Mocha, I get this error:
'var reset_key = this.props.params.reset_key ? this.props.params.reset_key : null;
^
TypeError: Cannot read property 'reset_key' of undefined'
Params being the url parameters.
This is when I try to build the component, even before I get to testing.",taichatha,NONE,2015-12-17 20:06:45+00:00,True,2015-12-18 14:12:13+00:00,0.75,,2,1,2015-12-18 14:12:13+00:00,0.75,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2014,Contexts not properly reset between tests within the same level,"Hey,
I wouldn't be surprised if related to my years old bug report and gripe: #1195
var assert = require(""assert"")

describe(""Parent"", function() {
  beforeEach(function() { this.value = 42 })

  it(""must pass 1"", function() { assert.equal(this.value, 42) })
  it(""must pass 2"", function() { assert.equal(this.value, 42) })

  describe(""Child"", function() {
    beforeEach(function() {
      assert.equal(this.value, 42)
      this.value = 13
    })

    it(""must pass 1"", function() { assert.equal(this.value, 13) })
    it(""must pass 2"", function() { assert.equal(this.value, 13) })
  })
})
Fails with:
  1) Parent Child ""before each"" hook for ""must pass 2"":

      AssertionError: 13 == 42
      + expected - actual

      -13
      +42

      at Context.<anonymous> (test/index_test.js:11:14)",moll,NONE,2015-12-17 23:00:29+00:00,False,,,,10,46,2015-12-18 14:22:01+00:00,0.64,danielstjules,CONTRIBUTOR,1,3,0,7,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2015,feature request: support customized command line parameters,"Currently mocha only support predefined cmdline parameters, but it reports error for any customized ones. It is common to use cmdline parameters due to, e.g. test against 'http://internal.abc.com', instead 'http://www.abc.com' in internal env. And using cmdline parameter is the most direct way.
Two workarounds are

'Using mocha programmatically' can read cmdline parameters as any other nodejs application
in test/mytest.js file, read a hardcode parameter file to get those parameters

If you agree, those 2 workarounds are indirect. It would helpful if providing cmdline parameters, such as
mocha -Dkey1=value1 -Dkey2=value2
mocha -Dkey1 value1 -Dkey2 value2",mkatsoho,NONE,2015-12-18 02:42:55+00:00,True,2018-05-18 13:45:22+00:00,882.46,,4,2,2018-05-18 02:50:15+00:00,882.01,plroebuck,MEMBER,2,0,0,0,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2016,Mocha does not support Node 5.2,"Hi I am having this issue when trying to run ""npm test"" with mocha, I know that is clear that mocha does not support Node 5.2 but maybe should be a request or update.
MEAN.JS - Test Environment
Environment:            test
Port:               3001
Database:               mongodb://localhost/mean-test
App version:            0.4.2
MEAN.JS version:            0.4.2
Running ""mochaTest:src"" (mochaTest) task


Mocha exploded!
Error: Unsupported Node version: 5.2.0
at Object. (/home/casertillo/NorthwindNode/node_modules/mock-fs/lib/index.js:35:9)
at Module._compile (module.js:399:26)
at Object.Module._extensions..js (module.js:406:10)
at Module.load (module.js:345:32)
at Function.Module._load (module.js:302:12)
at Module.require (module.js:355:17)
at require (internal/module.js:13:17)
at Object. (/home/casertillo/NorthwindNode/modules/core/tests/server/core.server.config.tests.js:12:10)
at Module._compile (module.js:399:26)
at Object.Module._extensions..js (module.js:406:10)
at Module.load (module.js:345:32)
at Function.Module._load (module.js:302:12)
at Module.require (module.js:355:17)
at require (internal/module.js:13:17)
at /home/casertillo/NorthwindNode/node_modules/mocha/lib/mocha.js:172:27
at Array.forEach (native)
at Mocha.loadFiles (/home/casertillo/NorthwindNode/node_modules/mocha/lib/mocha.js:169:14)
at MochaWrapper.run (/home/casertillo/NorthwindNode/node_modules/grunt-mocha-test/tasks/lib/MochaWrapper.js:51:15)
at /home/casertillo/NorthwindNode/node_modules/grunt-mocha-test/tasks/mocha-test.js:86:20
at capture (/home/casertillo/NorthwindNode/node_modules/grunt-mocha-test/tasks/mocha-test.js:33:5)
at Object. (/home/casertillo/NorthwindNode/node_modules/grunt-mocha-test/tasks/mocha-test.js:81:5)
at Object. (/home/casertillo/NorthwindNode/node_modules/grunt/lib/grunt/task.js:264:15)
Warning: Task ""mochaTest:src"" failed. Use --force to continue.


Aborted due to warnings.
npm ERR! Test failed.  See above for more details.",casertillo,NONE,2015-12-20 00:33:17+00:00,True,2015-12-20 00:49:31+00:00,0.01,,2,1,2015-12-20 00:49:31+00:00,0.01,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2017,es6 rest params,"I'm not sure, if this is not supported yet, or I'm missing something? I'm using version 2.3.3",ivaylopivanov,NONE,2015-12-20 20:26:00+00:00,True,2015-12-21 07:20:25+00:00,0.45,,1,1,2015-12-21 07:20:25+00:00,0.45,ivaylopivanov,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2018,this.timeout() fails when using ES6's arrow functions,"When using Node >= 4 with ""use strict"" and ES6 syntax for arrow functions, mocha fails:
describe('foo', () => {
  this.timeout(100);
});

# => TypeError: this.timeout is not a function
Using ES5 syntax does work:
describe('foo', function() {
  this.timeout(100);
});
So, which kind of ugly trick does mocha with this?",ibc,NONE,2015-12-21 15:44:14+00:00,True,2015-12-21 16:07:42+00:00,0.02,,27,57,2015-12-21 16:07:42+00:00,0.02,danielstjules,CONTRIBUTOR,2,3,0,22,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2019,options for ui,"I created ""ui"" library https://github.com/stalniy/bdd-lazy-var and want to add some configuration:

global getters for variables
getters on ""get"" function

depending on ui configuration. So, I have 3 suggesstions:

Simple: add options for UI, so ""ui"" libraries are able to be dependent on configuration (similar to reporterOptions)
Even simpler: inside bin/_mocha pass all arguments as options in Mocha constructor
Conflicting: allow to combine multiple ui-s (e.g. new Mocha({ ui: 'bdd+lazy-var+lazy-var-global' }) or new Mocha({ ui: [ 'bdd', 'lazy-var', 'lazy-var-global' ] }). But this will allow to merge tdd and bdd ui-s which are so natural as bdd and lazy-var

Let me know your opinions and I would be able to create an appropriate PR",stalniy,NONE,2015-12-21 19:07:33+00:00,True,2015-12-21 19:10:00+00:00,0.0,,2,2,2015-12-21 19:09:52+00:00,0.0,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2020,ReferenceError: describe is not defined,"Hello,
I'm currently using mocha v2.3.4, chai, and es6 with babel 6 and running in node v5.3.0.
This is my test script that I run with npm:
mocha --compilers js:babel-core/register  --require ./test/test_helper.js  --recursive
I have mocha globally installed, but whenever I run the test script I get the following output in my terminal:
ReferenceError: describe is not defined
Does anyone have any Ideas for why this may be happening?",kennetpostigo,NONE,2015-12-21 20:28:59+00:00,True,2016-01-09 04:33:20+00:00,18.34,,3,10,2015-12-21 20:30:51+00:00,0.0,boneskull,MEMBER,1,0,0,2,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2022,Mocha results gone,"Hey,
I've got a question, that drives me crazy like hell...
I'm using mocha in a couple of projects, and had never problems. I use grunt-mocha-test as grunt integration, and it works so far, no problems with it.
For using multible reporters one should rerun the tests, because mocha caches the result. That is great, and is very simple as well, so I'm using this in some private projects, as well as in our company. But since I installced mocha 2.3.4 only the first testrun has a reporter with data, every following call has no data. I switched back to 2.3.3, but it's not changing 0.0
As reference you can use my node-package-boilerplate and change in grunttasks/mocha.task.js the config to this:
    grunt.config('mochaTest', {
        run: {
            options: {
                reporter: 'spec',
                captureFile: 'test/results/result.txt',
                require: [
                    'test/setup/chai',
                    'test/setup/chaispies'
                ]
            },
            src: ['./test/tests/**/*.js']
        },
        runxunit: {
            options: {
                reporter: 'XUnit',
                captureFile: 'test/results/result.xml',
                quiet: false
            },
            src: ['./test/tests/**/*.js']
        }
    });

The XUnit run has no results, it's just empty.
I opened the bug here, because mocha seems to do something unintended, it doesn't rerun my tests, but the reporter is empty as well. Maybe someone here can help me, it worked for a long time, and now I don't get why not even mocha@2.2.5 or so will give me new results..
Can someone help me?",sateffen,NONE,2015-12-23 19:44:36+00:00,True,2017-04-08 20:53:55+00:00,472.05,,3,4,2015-12-23 21:40:35+00:00,0.08,sateffen,NONE,0,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2023,failing assertion prevents coverage tool from running,"Reference: a failing assertion will not produce a coverage report
There is no issue if all Mocha tests pass.
I'm not sure if this has something to do with how Mocha handles assertionError/uncaughtException. Any help on the issue would be appreciated.
setup
./src/test.js
const zero = () => 0;
export { zero };

./test/test.spec.js
const assert = require('assert');
import { zero } from '../src/test';

describe('assert', () => {
  it('fails', done => {
    const result = zero();
    try {
      assert.strictEqual(result, 1);
      done();
    } catch (error) {
      done(error);
    }
  });
  it('passes', done => {
    const result = zero();
    try {
      assert.strictEqual(result, 0);
      done();
    } catch (error) {
      done(error);
    }
  });
});

package.json
{
  ""name"": ""test"",
  ""devDependencies"": {
    ""babel-core"": "">=6.1.21"",
    ""babel-preset-es2015"": "">=6.1.18"",
    ""isparta"": "">=4.0.0"",
    ""mocha"": "">=2.3.4""
  }
}

results
If a test fails (coverage tool does not run)
$ ./node_modules/isparta/bin/isparta cover --root ./src --include-all-sources ./node_modules/mocha/bin/_mocha -- ./test/test.spec.js --require babel-core/register  

  assert
    1) fails
    ✓ passes

  1 passing (33ms)
  1 failing

  1) assert fails:

      AssertionError: 0 === 1
      + expected - actual

      -0
      +1

      at Context.<anonymous> (test.spec.js:10:14)

If all tests pass (coverage tool runs)
$ ./node_modules/isparta/bin/isparta cover --root ./src --include-all-sources ./node_modules/mocha/bin/_mocha -- ./test/test.spec.js --require babel-core/register

  assert
    ✓ passes
    ✓ passes again

  2 passing (25ms)

================================================================================
Writing coverage object [./coverage/coverage.json]
Writing coverage reports at [./coverage]
================================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 4/4 )
Branches     : 100% ( 0/0 )
Functions    : 100% ( 1/1 )
Lines        : 100% ( 2/2 )
================================================================================",,NONE,2015-12-24 19:55:11+00:00,True,2017-11-01 05:05:09+00:00,677.38,,2,1,2017-10-17 04:24:40+00:00,662.35,stale,NONE,0,0,0,1,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2024,Feature Request: ES2015 Generator Support,"There are a couple of modules (mocha-co, mocha-generators) out there that patch Mocha to allow writing tests as generator functions.
This is a highly desirable feature for me, and I think potentially for many other folks as well. The mocha-as-promised precedent makes me think that this feature request aligns with the philosophy of Mocha and worth it to pursue.",airportyh,CONTRIBUTOR,2015-12-26 08:35:16+00:00,True,2016-03-21 04:17:28+00:00,85.82,,5,8,2015-12-26 15:24:24+00:00,0.28,danielstjules,CONTRIBUTOR,0,2,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2025,timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.,"I'm getting the following error when running the entire suite of tests:
timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
I found this super useful response on StackOverflow http://stackoverflow.com/questions/16607039/in-mocha-testing-while-calling-asynchronous-function-how-to-avoid-the-timeout-er# and here #278
However, the problem still persists even after deleting every occurrence in my  tests that deal with HTTP and promises. All I've got now are Angular directive and controller specs which doesn't seem to do much other than checking template data, directive and controller logic.
Does anyone know why this is still happening and if there's a better way to know exactly what the issue is? thanks!",gumatias,NONE,2015-12-26 19:09:51+00:00,True,2015-12-29 11:30:54+00:00,2.68,,14,17,2015-12-26 20:09:53+00:00,0.04,boneskull,MEMBER,2,1,0,11,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2026,Add a description with the reason why a test is pending.,"I can add pending reason in Jasmine tests with .pend() method and replacing it() with xit() like this:
xit('should save settings when proper object is passed', function(){}).pend('No local storage is supported yet');

Can I somehow add a pending reason message for Mocha tests?",basharov,NONE,2015-12-27 15:37:30+00:00,False,,,,7,5,2016-01-10 11:54:49+00:00,13.85,gurdiga,NONE,0,0,0,5,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2027,--fgrep doesnt work with --watch,"Expected
when using --fgrep ""my search string"" --watch one would think a file change would run tests with the provided fgrep string.
Actual
all tests re-run when a file is changed as if --fgrep was never used.",VictorioBerra,NONE,2015-12-27 18:07:55+00:00,False,,,,6,8,2017-05-23 15:34:53+00:00,512.89,fahrradflucht,NONE,2,0,0,3,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2030,Memory leak in tests,"I'm getting the following error when running the entire suite of tests:
timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
After some investigation, I found out to be a memory leak issue. Looking at some heap profiling snapshot, objects still seem to be referenced and not getting garbaged collected.
Anyone know a solution that would prevent it from happening? There's some options such as going through each one of my 1000ish specs and adding afterEach to do some clean up, but that seems like a lot of work.
Here's a sample layout of how most of my tests look like
describe('MyClassCtrl', function() {

  var $httpBackend, $rootScope, ctrl;
  ctrl = $rootScope = $httpBackend = null;

  beforeEach(function() {
    module('myApp');
    inject(function($controller, $rootScope, _$httpBackend_, $stateParams) {
      var $scope;
      $stateParams.id = 1;
      $httpBackend = _$httpBackend_;
      $scope = $rootScope.$new();
      ctrl = $controller('MyClassCtrl', {
        $scope: $scope
      });
    });
  });

  describe('#_getMyList', function() {
    beforeEach(function() {
      $httpBackend.expectGET(""/my/app/url"").respond({
        my_list: [1, 2, 3]
      });
      ctrl._getMyList();
      $httpBackend.flush();
    });

    it('sets property document results', function() {
      expect(ctrl.my_list).to.eql([1, 2, 3]);
    });
  });
});

Below are some profiling screenshots:



Thanks!",gumatias,NONE,2015-12-29 11:29:37+00:00,True,2015-12-29 16:28:06+00:00,0.21,,4,5,2015-12-29 16:28:06+00:00,0.21,danielstjules,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2031,Insane error noise?,"So I have a syntax error:
> mocha --compilers js:babel-core/register --recursive ""--watch""

SyntaxError: /Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/test/core_spec.js: Unexpected token (71:37)
  69 |         vote: Map({
  70 |           pair: List.of('Trainspotting', '28 Days Later'),
> 71 |           tally: Map({'Trainspotting', 1})
     |                                      ^
  72 |         })
  73 |       }))
  74 | 
...
This small error was reported with hundreds of lines!
Is that really necessary?
...
  74 | 
    at Parser.pp.raise (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/location.js:22:13)
    at Parser.pp.unexpected (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/util.js:91:8)
    at Parser.pp.parseObjPropValue (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:820:8)
    at Parser.pp.parseObj (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:750:10)
    at Parser.pp.parseExprAtom (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:479:19)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:265:19)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseObjPropValue (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:777:99)
    at Parser.pp.parseObj (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:750:10)
    at Parser.pp.parseExprAtom (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:479:19)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:265:19)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseObjPropValue (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:777:99)
    at Parser.pp.parseObj (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:750:10)
    at Parser.pp.parseExprAtom (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:479:19)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:265:19)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:85:19)
    at Parser.pp.parseStatement (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:156:19)
    at Parser.pp.parseBlockBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:500:21)
    at Parser.pp.parseBlock (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:481:8)
    at Parser.pp.parseFunctionBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:886:22)
    at Parser.pp.parseArrowExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:865:8)
    at Parser.pp.parseParenAndDistinguishExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:597:17)
    at Parser.pp.parseExprAtom (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:469:19)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:265:19)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:85:19)
    at Parser.pp.parseStatement (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:156:19)
    at Parser.pp.parseBlockBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:500:21)
    at Parser.pp.parseBlock (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:481:8)
    at Parser.pp.parseFunctionBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:886:22)
    at Parser.pp.parseArrowExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:865:8)
    at Parser.pp.parseParenAndDistinguishExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:597:17)
    at Parser.pp.parseExprAtom (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:469:19)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:265:19)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:85:19)
    at Parser.pp.parseStatement (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:156:19)
    at Parser.pp.parseBlockBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:500:21)
    at Parser.pp.parseBlock (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:481:8)
    at Parser.pp.parseFunctionBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:886:22)
    at Parser.pp.parseArrowExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:865:8)
    at Parser.pp.parseParenAndDistinguishExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:597:17)
    at Parser.pp.parseExprAtom (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:469:19)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:265:19)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExprListItem (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:988:16)
    at Parser.pp.parseCallExpressionArguments (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:341:20)
    at Parser.pp.parseSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:304:29)
    at Parser.pp.parseExprSubscripts (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:275:15)
    at Parser.pp.parseMaybeUnary (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:245:19)
    at Parser.pp.parseExprOps (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:176:19)
    at Parser.pp.parseMaybeConditional (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:158:19)
    at Parser.pp.parseMaybeAssign (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:121:19)
    at Parser.pp.parseExpression (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/expression.js:85:19)
    at Parser.pp.parseStatement (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:156:19)
    at Parser.pp.parseBlockBody (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:500:21)
    at Parser.pp.parseTopLevel (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/statement.js:29:8)
    at Parser.parse (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/parser/index.js:98:17)
    at Object.parse (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babylon/lib/index.js:44:50)
    at File.parse (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-core/lib/transformation/file/index.js:480:24)
    at File.parseCode (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-core/lib/transformation/file/index.js:560:20)
    at /Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-core/lib/transformation/pipeline.js:45:12
    at File.wrap (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-core/lib/transformation/file/index.js:520:16)
    at Pipeline.transform (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-core/lib/transformation/pipeline.js:43:17)
    at Object.transformFileSync (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-core/lib/api/node.js:116:10)
    at compile (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-register/lib/node.js:102:20)
    at loader (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-register/lib/node.js:130:14)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/babel-register/lib/node.js:140:7)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at /Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/mocha/lib/mocha.js:216:27
    at Array.forEach (native)
    at Mocha.loadFiles (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/mocha/lib/mocha.js:213:14)
    at Mocha.run (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/mocha/lib/mocha.js:453:10)
    at loadAndRun (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/mocha/bin/_mocha:349:22)
    at Object.<anonymous> (/Users/dmitrizaitsev/Dropbox/Sandbox/voting-server/node_modules/mocha/bin/_mocha:366:3)
    at Module._compile (module.js:435:26)
    at Object.Module._extensions..js (module.js:442:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Function.Module.runMain (module.js:467:10)
    at startup (node.js:136:18)
    at node.js:963:3",dmitriz,NONE,2015-12-30 03:48:33+00:00,True,2015-12-30 19:26:20+00:00,0.65,,2,2,2015-12-30 19:26:20+00:00,0.65,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2034,Run tests on globals without exports/imports,"I'm writing a program that runs unit tests on user inputted code. The goal is to help users learn to code by verifying their work.
I want to be able to run mocha tests from a separate file without explicitly exporting them. An example:
/file.js has no module, no exports, etc. addOne is attached to the global scope.
function addOne(x) {
    return x + 1;
}
/test.js must run tests on file/js's globals.
var assert = require('assert');
describe('addOne', function() {
  it('should add one to the total', function() {
    assert.equal(2, addOne(1));
  });
});
How could I make the mocha test in test.js target addOne in file.js?",ShMcK,NONE,2016-01-02 00:24:04+00:00,True,2016-12-16 23:00:24+00:00,349.94,,2,1,2016-12-16 23:00:19+00:00,349.94,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2035,Promises works only with done but not with assertaions,"I was bumping my had against a wall whit unit testing my code. So I tried to make a little experiment...
So When I pass a function that simply calls done() to .then all is ok. But when I pass function that tests if 3 is 4 and then calls done() it timeouts.
This is the code the first test passes the second gets timeouted:
         describe ""my expectaion"", ->
           p = undefined
           beforeEach ""makes new promise"" ->
             p = new Promise (resolve) -> resolve()
            it ""just calls done()"", (done) ->
              p.then ->
                done()
            it ""makes fail assertaion and then calls done()"", (done) ->
              p.then ->
                expect(3).to.equal 4
                done()",NoHomey,NONE,2016-01-02 11:49:25+00:00,True,2016-01-02 16:52:15+00:00,0.21,,2,2,2016-01-02 16:52:15+00:00,0.21,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2036,add .mochaignore,"Please add .mochaignore file same as .gitignore
to ignore some files
yes i know there is .skip for tests but it would be good to ignore dirs or files with utils and configs",TrejGun,NONE,2016-01-03 11:47:04+00:00,True,2019-04-12 18:28:38+00:00,1195.28,,6,11,2016-01-03 22:33:00+00:00,0.45,boneskull,MEMBER,2,1,0,2,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2039,this.timeout does not work inside anonymous functions,"it('tests a promise', () => {
    this.timeout(5000);
    return new Promise(function(resolve) {
        setTimeout(resolve, 2500);
    });
  });
// Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
  it('tests a promise 2', function() {
    this.timeout(5000);
    return new Promise(function(resolve) {
        setTimeout(resolve, 2500);
    });
  });
// pass",z-vr,NONE,2016-01-06 12:50:50+00:00,True,2016-01-06 15:03:38+00:00,0.09,,5,3,2016-01-06 15:03:38+00:00,0.09,danielstjules,CONTRIBUTOR,1,1,0,1,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2040,New version of Mocha requested,"The last release of Mocha was on Nov. 15th and many improvements have been added since then. Specifically for my needs, the retry functionality was introduced after the latest release. Can we get a new release of Mocha to take advantage of these changes?
Another request for a release was made here: https://groups.google.com/forum/#!topic/mochajs/Olw3berArnA (so i'm not the only one 😄)",klamping,NONE,2016-01-06 16:19:35+00:00,True,2016-01-26 19:36:15+00:00,20.14,,9,15,2016-01-06 16:27:17+00:00,0.01,longlho,CONTRIBUTOR,1,3,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2041,Block-level before hook,"Is it possible to define a block-level before() hook when using parent beforeEach() hooks?
Take the following example:
describe(""something"", function() {
  beforeEach(function() {
    console.log(""parent beforeEach"");
  });

  it(""should do something"", function() {});

  describe(""something else"", function() {
    before(function() {
      console.log(""child before"");
    });

    it(""should do something else"", function() {});
  });
});
Which produces:
  something
parent beforeEach
    ✓ should do something
    something else
child before
parent beforeEach
      ✓ should do something else

Logically that does actually make sense: it always runs the before() hooks before any beforeEach() hooks. Unfortunately that means if you depend on some setup done within a parent beforeEach() hook, you cannot use before() hooks lower down. If you're doing something relatively expensive that doesn't need to be run before every test in that block, you're still forced to use beforeEach().
I'm using v2.3.4.",AdamBoxall,NONE,2016-01-06 16:40:54+00:00,True,2017-03-30 16:46:14+00:00,449.0,,3,2,2016-08-03 15:57:24+00:00,209.97,Sinewyk,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2042,closer integration with assertion libraries,"describe(""functionName"", () => {

    it(""it's passing because you forgot to write its body"", () => {

    });

causes:
  ✓ it's passing because you forgot to write its body

I suggest:
  - it's passing because you forgot to write its body (body is empty)",willnwhite,NONE,2016-01-07 11:58:53+00:00,True,2016-01-07 22:59:15+00:00,0.46,,3,10,2016-01-07 16:00:28+00:00,0.17,danielstjules,CONTRIBUTOR,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2043,enhancement: use --watch-extensions for default files list pattern,"IMHO, it would make sense to augment the default file list pattern (./test/**/*.js) with the extensions provided with the --watch-extensions flag; e.g.:
mocha --watch-extensions js,jsx ...

should result in the default file list pattern:
./test/**/*.@(js|jsx)

And maybe the same for the extensions given for --compilers flag?",Kosta-Github,NONE,2016-01-07 16:22:34+00:00,False,,,,5,4,2016-06-19 07:18:59+00:00,163.62,moll,NONE,0,1,0,2,"['documentation', 'feature']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2044,discussion: bundled assertion library,"Mocha's always been unopinionated and flexible.  That being said, it may be a barrier to entry that an assertion library is not included.
In Node.js, one can require('assert') (though it's not recommended by the Node.js team) without installing extra packages.  In a browser context, you're going to have to explicitly grab some library via some means.  Packages like karma-chai make this less of a burden, however.
In my experience, the lack of a bundled library has never been a barrier, however there are reason(s) to want closer integration with assertion libs (see #1651).  So I'm fine with the status quo, but am wondering about others' thoughts here?
cc @mochajs/mocha @dasilvacontin",boneskull,MEMBER,2016-01-07 23:02:17+00:00,True,2018-11-18 18:12:53+00:00,1045.8,,5,4,2016-01-08 00:47:16+00:00,0.07,willnwhite,NONE,1,1,0,2,"['future', 'needs-feedback']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2045,Retries hang on async tests,"As shown by this PR tests something is wrong when async test fails and we want to retry it
#2046
What we experienced aside of no retry, is also lack of higher level afterEach being called.",chrmod,NONE,2016-01-08 13:17:54+00:00,True,2016-01-09 05:07:46+00:00,0.66,,3,8,2016-01-08 13:19:12+00:00,0.0,chrmod,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2049,Browser test `array pop` fail due to bad test script,"Using the test in ""mocha/test/browser/"" fails under  Array #pop()
Test result (Copied from browser):
Array
#pop()
X should remove and return the last value ‣
Error: failed
    at assert (:11:26)
    at Context.<anonymous> (array.js:29:7)
var arr = [1,2,3];
assert(arr.pop() == 3);
assert(arr.pop() == 2);
assert(arr.pop() == -1);
V should adjust .length

I Guess due to the last assert '-1'  should be '1'.",hllhll,NONE,2016-01-12 15:54:24+00:00,True,2016-01-12 18:53:59+00:00,0.12,,2,1,2016-01-12 18:53:59+00:00,0.12,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2050,Mocha Crash -- mocha/lib/reporters/base.js:208:27 -- TypeError: message.match is not a function,"Mocha crashes on this exception below.
mocha"": ""2.3.4""
> mocha --compilers js:babel-core/register --recursive ""--watch"" ""test/wallet_api_spec.js""




  Wallet API client
    ✓ createWallet (147ms)
    ✓ createWallet (duplicate) (144ms)
    ✓ fetchWallet (Recovery)
    ✓ fetchWallet (Not Modified)
    ✓ fetchWallet (Not Exist)
    1) saveWallet
    2) saveWallet (Conflict)
    3) saveWallet (Unknown key)
    ✓ changePassword
    ✓ deleteWallet
WARN: close called with active subscriptions 2


  7 passing (2s)
  3 failing

  4) ""after all"" hook

  7 passing (2s)
  4 failing

/home/jcalfee/plasma/node_modules/mocha/lib/reporters/base.js:208
      var match = message.match(/^([^:]+): expected/);
                          ^
TypeError: message.match is not a function
    at /home/jcalfee/plasma/node_modules/mocha/lib/reporters/base.js:208:27
    at Array.forEach (native)
    at Function.exports.list (/home/jcalfee/plasma/node_modules/mocha/lib/reporters/base.js:163:12)
    at Spec.Base.epilogue (/home/jcalfee/plasma/node_modules/mocha/lib/reporters/base.js:328:10)
    at emitNone (events.js:72:20)
    at Runner.emit (events.js:163:7)
    at /home/jcalfee/plasma/node_modules/mocha/lib/runner.js:735:12
    at done (/home/jcalfee/plasma/node_modules/mocha/lib/runner.js:619:7)
    at Runner.next [as nextSuite] (/home/jcalfee/plasma/node_modules/mocha/lib/runner.js:586:16)
    at Runner.uncaught (/home/jcalfee/plasma/node_modules/mocha/lib/runner.js:703:17)
    at process.uncaught (/home/jcalfee/plasma/node_modules/mocha/lib/runner.js:727:10)
    at emitOne (events.js:77:13)
    at process.emit (events.js:166:7)
    at process._fatalException (node.js:218:26)
    at emitNone (events.js:72:20)
    at Runner.emit (events.js:163:7)
    at /home/jcalfee/plasma/node_modules/mocha/lib/runner.js:735:12
    at /home/jcalfee/plasma/node_modules/mocha/lib/runner.js:626:9
    at next (/home/jcalfee/plasma/node_modules/mocha/lib/runner.js:283:14)
    at Immediate._onImmediate (/home/jcalfee/plasma/node_modules/mocha/lib/runner.js:319:5)
    at processImmediate [as _immediateCallback] (timers.js:368:17)
npm ERR! Test failed.  See above for more details.

npm ERR! Linux 3.13.0-66-generic
npm ERR! argv ""/home/jcalfee/opt/iojs-v2.0.1-linux-x64/bin/iojs"" ""/home/jcalfee/opt/iojs-v2.0.1-linux-x64/bin/npm"" ""run"" ""test:watch"" ""--"" ""test/wallet_api_spec.js""
npm ERR! node v2.0.1
npm ERR! npm  v2.9.0
npm ERR! code ELIFECYCLE
npm ERR! @graphene/wallet-client@1.0.0 test:watch: `npm test -- --watch ""test/wallet_api_spec.js""`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the @graphene/wallet-client@1.0.0 test:watch script 'npm test -- --watch ""test/wallet_api_spec.js""'.
npm ERR! This is most likely a problem with the @graphene/wallet-client package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     npm test -- --watch ""test/wallet_api_spec.js""
npm ERR! You can get their info via:
npm ERR!     npm owner ls @graphene/wallet-client
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /home/jcalfee/plasma/libraries/@graphene/wallet-client/npm-debug.log",jcalfee,NONE,2016-01-13 14:34:27+00:00,True,2018-03-21 21:15:45+00:00,798.28,,7,10,2016-04-30 11:15:21+00:00,107.86,chandankrishnan,NONE,2,1,0,3,"['confirmed-bug', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2051,timeout override,"Hi,
When using this.timeout(0) on a suite, it disables all timeouts even if an inner test case overrides it.
For example, the following snippet will pass and not timeout.
describe('timeout test', function() {
    this.timeout(0);

    it('should timeout', function(done) {
        this.timeout(100);

        setTimeout(function() {
            done();
        }, 1000);
    });
});
This will timeout:
describe('timeout test', function() {
    this.timeout(999999);

    it('should timeout', function(done) {
        this.timeout(100);

        setTimeout(function() {
            done();
        }, 1000);
    });
});
I think the issue is that there when calling this.timeout() with a positive number is doesn't reenable timeouts.",shaharmor,NONE,2016-01-14 10:53:58+00:00,True,2017-03-30 15:16:24+00:00,441.18,,2,1,2017-03-30 15:16:24+00:00,441.18,drazisil,NONE,0,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2054,Babel 6 not working with mocha,"I am facing issues using Babel 6 with mocha CLI and Node module to be required. I use Gulp but the result is the same than if I run with the CLI.
Run mocha --compilers js:babel-core/register:
.../test/title-generation.babel.js:1
(function (exports, require, module, __filename, __dirname) { import { assert } from ""assert"";
                                                              ^^^^^^

SyntaxError: Unexpected token import
    at exports.runInThisContext (vm.js:53:16)
    at Module._compile (module.js:404:25)
    at loader (.../node_modules/babel-register/lib/node.js:130:5)
    at Object.require.extensions.(anonymous function) [as .js] (.../node_modules/babel-register/lib/node.js:140:7)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at .../node_modules/mocha/lib/mocha.js:216:27
    at Array.forEach (native)
    at Mocha.loadFiles (.../node_modules/mocha/lib/mocha.js:213:14)
    at Mocha.run (.../node_modules/mocha/lib/mocha.js:453:10)
    at Object.<anonymous> (.../node_modules/mocha/bin/_mocha:393:18)
    at Module._compile (module.js:425:26)
    at Object.Module._extensions..js (module.js:432:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Function.Module.runMain (module.js:457:10)
    at startup (node.js:136:18)
    at node.js:972:3

package.json:
{
  ""devDependencies"": {
    ""babel-core"": ""^6.4.0"",
    ""babel-preset-es2015"": ""^6.3.13"",
    ""gulp"": ""^3.9.0"",
    ""gulp-mocha"": ""^2.2.0"",
    ""mocha"": ""^2.3.4""
  },
  ""dependencies"": {
    ""babel-polyfill"": ""^6.3.14"",
    ""babel-require"": ""^1.0.1""
  }
}",carlosbaraza,NONE,2016-01-15 07:01:13+00:00,True,2016-01-15 07:06:39+00:00,0.0,,11,11,2016-01-15 07:06:39+00:00,0.0,carlosbaraza,NONE,1,1,0,9,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2055,Mocha omits parts of the path ,"Hello,
I’m relatively new to Mocha, and though overall it works fine for me, I have a strange issue that I do not know how to fix and could not find an issue that describes the problem and the solution.
For some reason Mocha omits part of the path to a file when it resolves it from a path in a file it tests. The part that is omitted is the base directory of the project.
E.g. actual path to a file is C:/Users/Me/Projects/SampleProject/test/file.js
In the production code I use “../test/file.js” to reference the needed file and it works fine. However, Mocha resolve this as “C:/Users/Me/Projects/test/file.js”, omitting the base directory of the project –“SampleProject”.
If I explicitly specify the base directory in the Mocha files (e.g. “../SampleProject/test/file.js”), it resolves the path correctly and works fine.
This behavior was not very convenient, but more or less usable when I tested simple files, I would simply use different paths for Mocha and the production code.
But recently I started testing more complex scripts, that in turn use other modules/scripts. And Mocha fails in this scenario, unless I change the paths in all the nested levels of files, which becomes very inconvenient, time consuming and prone to mistakes.
Could someone advise me where to look into how to fix the issue?
Thanks!
Vlad",spatialvlad,NONE,2016-01-15 10:24:35+00:00,True,2017-08-12 13:30:03+00:00,575.13,,3,2,2017-07-28 15:18:57+00:00,560.2,stale,NONE,0,1,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2057,All but last test both passes and fails when `done` is called twice,"Is this by design? It's not helpful with the HTML reporter.
Here's a repro for the BDD interface, but it's the case with all the ones that work in the browser:
<!DOCTYPE html>
<meta charset=""utf-8"">
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/mocha/2.3.4/mocha.min.css"">
<div id=""mocha""></div>

<script src=""https://cdnjs.cloudflare.com/ajax/libs/mocha/2.3.4/mocha.min.js""></script>

<script>
mocha.setup(""bdd"")
describe(""foo"", function () {
    it(""fails"", function (done) {
        done()
        done(new Error(""fail!""))
    })

    it(""fails 2"", function (done) {
        done()
        done(new Error(""fail!""))
    })
})
mocha.run()
</script>",isiahmeadows,NONE,2016-01-18 08:39:50+00:00,True,2017-08-25 02:35:39+00:00,584.75,,5,4,2017-08-24 23:50:28+00:00,584.63,fesebuv,NONE,0,1,0,2,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2058,Upgrade glob to latest,"Mocha is using glob module version from 2013. I would be good if we can upgrade that to latest so that we can use a lot of globbing patterns with it.
If its ok, then I can send the PR.",gyandeeps,CONTRIBUTOR,2016-01-19 15:46:31+00:00,True,2016-01-20 03:49:15+00:00,0.5,,5,10,2016-01-19 15:52:53+00:00,0.0,danielstjules,CONTRIBUTOR,1,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2060,"Travis --no-color, truncated test cases","When testing using Travis using the option --no-colors, color escape codes are still being outputted. This leads to some test cases being truncated.
Latest mocha master branch

See Travis with --no-color option

Here's the raw outputs of a different repo I have running mocha+travis:
Not truncated, colorized (using mocha) output from travis:
 [0m [0m
 [0m  CAR COLOR: [0m
 [0m    find [0m
 [2K [0G     [32m  âœ“ [0m [90m return all car colors [0m [33m (55ms) [0m
 [2K [0G     [32m  âœ“ [0m [90m return all managed car colors [0m
 [2K [0G     [32m  âœ“ [0m [90m return all unmanaged car colors [0m

Truncated, colorized turned off (using mocha --no-colors) output from travis:
  CAR COLOR:
    find
 [2K [0G      âœ“ return all car colors (48ms)
 [2K [0G      âœ“ return all managed car colors
 [2K [0G      âœ“ return all unmanaged car colors


I've spoken with Travis and they have a couple issues already open for it. Support Engineer's reply:

I am afraid that some escape sequences are hard to emulate on line-oriented log display like ours. For example, [nK (https://github.com/travis-ci/travis-ci/issues/1950) and [nG (https://github.com/travis-ci/travis-ci/issues/1951) are not supported as a result.
Is there a way to suppress these ANSI sequences on your testing tool?",kevinawoo,NONE,2016-01-20 07:40:37+00:00,True,2017-08-12 14:29:55+00:00,570.28,,3,2,2016-01-26 23:54:26+00:00,6.68,boneskull,MEMBER,1,0,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2061,mocha node.js programmatically (broken) [solved],"Link:  https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically
Try 1:
Mocha works on the first run but after that it no longer reloads the files,
    mocha = new Mocha(config.testing)

    fs.readdirSync(config.testing.path).filter (file)->
        /\.(coffee|js)$/.test file
    .forEach (file)->
        mocha.addFile path.join(config.testing.path, file)

    mocha.run()

    watcher = chokidar.watch config.testing.path,
        persistent: true

    watcher
        .on 'change', ()->
            console.log mocha.files
            mocha.run()

        .on 'add', (path)->
            if not mocha.files.some((item)-> item == path)
                mocha.addFile path
                mocha.run()
Scenario: Start the script, mocha runs successfully, we break some test and mocha still behaves like the previous state of the file is loaded hence I come to the conclusion that it does not reload the file.
Try 2:
recreating mocha each every time an update occurs does not work either, it is totally broken all files are unloaded on the second run (0 passing - no info). What I mean is that basically re-executing the following code does not work more than once either:
 mocha = new Mocha(config.testing)

    fs.readdirSync(config.testing.path).filter (file)->
        /\.(coffee|js)$/.test file
    .forEach (file)->
        mocha.addFile path.join(config.testing.path, file)

    mocha.run()
Scenario: Running this more than once just makes mocha super weird like we haven't loaded any files at all.
Help, much appreciated!",jellytux,NONE,2016-01-21 23:00:41+00:00,True,2016-01-22 00:32:01+00:00,0.06,,1,1,2016-01-22 00:31:36+00:00,0.06,jellytux,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2062,assert does not always work,"I have the following code inside an it() function:
        const transformFunction = function(err, dirName, fileName, callback) { callback(false); }
        const afterFunction = function(err, results) {·
            console.log('afterFunction starts', paths);
            assert.ok(false, 'assertion fails!!!!!');
            console.log('afterFunction ends');
        };
        atomic.transformSingleFile('source', 'file.txt', transformFunction, afterFunction, 'target', 'file.txt');

in this case, afterFunction gets called (so my function obviously calls it), but the assertion text never appears, and neither does the 'afterFunction ends' text. So the assertion gets triggered, but is swallowed, and the test runs through as if there was no assertion at all.",christianfriedl,NONE,2016-01-22 12:28:56+00:00,True,2016-01-27 00:01:52+00:00,4.48,,3,2,2016-01-22 15:18:59+00:00,0.12,ryan-shaw,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2063,--delay option causes incorrect nesting of suites/tests,"When I recursively run multiple files using the --delay option, all suites and tests are mixed together in one hierarchy and run out of order.
Expected result from running recursively three files, each of which contains two suites, each of which contains one or two tests:
  file I, suite A
    ✓ test 01
    ✓ test 02
    file I, suite B
      ✓ test 03
  file II, suite C
    ✓ test 04
    ✓ test 05
    file I, suite D
      ✓ test 06
  file III, suite E
    ✓ test 07
    ✓ test 08
    file III, suite F
      ✓ test 09

Actual result:
  file I, suite A
    file II, suite C
      file III, suite E
        ✓ test 01
        ✓ test 08
        file I, suite B
          ✓ test 04
          ✓ test 05
          ✓ test 09
          file II, suite D
            ✓ test 07
            ✓ test 02
            ✓ test 06
            file III, suite F
              ✓ test 03

I tried removing run() from all files but the last, however the result is the same.  In fact if you look carefully even the test order within a given file is not respected due to a later test being placed in a higher suite than an earlier test!
While the asynchronous test definition of a single file works correctly with --delay, suites and test from different files become interwoven I believe due to this code:
Mocha.prototype.loadFiles = function(fn) {
  ...
  this.files.forEach(function(file) {
    ...
    suite.emit('require', require(file), file, self);
    ...
  });
};
Does anyone know of a way to also require the test files asynchronously, or to otherwise prevent a describe/it in one file from being attached to a describe/it in another file?",sa-0001,NONE,2016-01-22 19:36:57+00:00,True,2017-06-08 03:02:15+00:00,502.31,,2,2,2016-08-28 19:57:48+00:00,219.01,hollomancer,NONE,0,0,0,2,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2064,Colors lost when piping,"Theres a possibility I'm doing something wrong, but a little bit of insight could go a long way.
When building a custom reporter, ANSI character codes are stripped when spawning mocha and piping the child process stdout using Base.color. This is the undesired behavior.
Some assertions I can make to help narrow the issue:

I am passing the --color option to mocha. I can clearly see the --color option working, because base reporters (tested dot & spec) correctly output color, only when this switch is set.
I am using Base.color ""correctly,"" because the reporter outputs colors just fine when not spawning a child process.
I notice internally, Base.color uses chalk, which in-turn uses supports-color. I tried enforcing the FORCE_COLOR environment variable (used by supports-color), with no luck. I also validated that FORCE_COLOR works as expected with other (non-mocha) modules I have written.
I have validated that exports.useColors is correctly set to true in the conditions under test.

When using chalk directly, there are no issues; the color outputs correctly in the spawned child process. However, to take advantage of self.epilogue() and mocha's built-in color map, it would be ideal if we could get this resolved.",justinhelmer,NONE,2016-01-24 17:38:04+00:00,True,2019-02-21 17:33:50+00:00,1124.0,,5,15,2016-01-26 23:52:27+00:00,2.26,boneskull,MEMBER,2,1,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2065,Ideas on getting the current testname outside of the mocha test file,"We have a module where we'd like to get the test name information in order to send it over to module's server it is interacting with.  Is it possible to get the ""test name"" which could be the full file path of the mocha .js file, or the string in the 'it'.
I know this is possible from within the test it self by doing this.test.title but we don't want to put the burden of having the users of our node module need to get the test name and pass it into our module.
Things I've tried:

I tried looking at process.env values and mocha doesn't create a env property var for the current test.
I can't find an equivalent in mocha to separate testNG's listener where i could possibly intercept each mocha run, and in an onBeforeTest, with the mocha suite or test , get the test name and save it to en env variable so that my module can read it at server connection time.

Any creative ideas on how to get the test title or mocha file's .js full path outside of the mocha js test file?",ILikeToNguyen,NONE,2016-01-25 17:33:19+00:00,True,2017-08-12 13:30:04+00:00,564.83,,2,1,2017-07-28 15:18:56+00:00,549.91,stale,NONE,0,0,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2067,HTML/DOC reporter regressions as a result of #2037,"#2037
As a result of that PR, the browser & doc reporters cannot handle showing function bodies when exceptions are thrown async, outside of the duration of the originating suite (after the suite has ended). They'll result in: Uncaught TypeError: Cannot read property 'toString' of undefined
The line in question:
var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));
Rather than revert #2037, I propose caching the function body strings, which should still be light.",danielstjules,CONTRIBUTOR,2016-01-26 07:53:00+00:00,True,2016-01-26 19:01:17+00:00,0.46,,3,2,2016-02-08 15:43:23+00:00,13.33,francisco-sanchez-molina,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2070,"grep links for test names with dots ""."" don't get escaped correctly.","Steps to Reproduce:

Create a test whose suite name contains a dot, for example ""crud-behavior-basic.html""
Navigate to the test page, for example: http://localhost:5000/test/index.html
Click on the link to ""crud-behavior-basic.html""

Expected result:
Link reduces the tests to be run to those inside crud-behavior-basic.html file.
Generated link has: grep=crud-behavior-basic.html
Actual result:
No tests are run.
Generated link has: grep=crud-behavior-basic%5C.html
Related bug: #1687
Related PR: #1698
It appears the following line of code is overzealous. Replacing the . with %5C
benvinegar@3166e70#diff-998e3fb668a2094eedccab3e56199e4fR204",btelles,NONE,2016-01-26 17:20:03+00:00,False,,,,3,2,2016-02-24 12:00:33+00:00,28.78,btelles,NONE,0,0,0,1,"['browser', 'confirmed-bug', 'needs-review', 'reporter', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
2071,Colors not working correctly,"In version 2.3.4 the colors were working fine. The commit that  added in Chalk doesn't work.
Mocha 2.3.4: 
Mocha 2.4.1: 
Removing the String '\u001b[' +  from the return '\u001b[' + exports.colors[type] + 'm' + str + '\u001b[0m'; , the output shows fine as seen here:

Using cmder with powershell on Windows 10
Currently works fine as well on Linux and removing the code also works fine.",thedark1337,CONTRIBUTOR,2016-01-26 21:56:20+00:00,True,2016-01-26 23:55:16+00:00,0.08,,2,4,2016-01-26 21:58:20+00:00,0.0,danielstjules,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2073,-c option broken in 2.4.1,"-c CLI option is broken in 2.4.1 but works in 2.3.4.
Scenario 1
If I run mocha with -c flag then it doesnt even run my tests.
./node_modules/mocha/bin/_mocha -R progress -c tests/*.js
Scenario 2
If I run mocha without -c flag then it does run my tests but there is no color.
./node_modules/mocha/bin/_mocha -R progress tests/*.js",gyandeeps,CONTRIBUTOR,2016-01-26 22:36:50+00:00,True,2016-01-27 00:01:09+00:00,0.06,,3,5,2016-01-26 22:39:54+00:00,0.0,danielstjules,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2077,test.only is not working if code is loading after mocha.run(),"Hi, I am a newbie to use Mocha and I think it is a really really cool tool to test my javascript code. Thanks for creating such great tool.
However, I met some problem to test my AMD module code. See the following. Please let me know if it is worked as designed.
Currently, I am using mocha delay method to test AMD modules. However, I just found the test.only is not  working. My way is:

Use node(or electron) to start a thread to load bin/_mocha javascript file.
bin/_mocha will find the test/mocha.opts file and load it, then run the tests specified in opts. (--delay is specified in opts)
Actually, there is only one TestsLoader.test.js in opts. That file is to load the AMD scripts and when the loading is done, fire run() method provided by mocha

It works well until I found test.only won't work, while test.only works well in browser mode.
After some investigation, I found probably it is a design issue. The runner instance is started when mocha.run() is fired, and the options.grep is stored in runner immediately. See the following code I grabbed from mocha.js. As a result, whiling loading AMD modules after mocha.run() is fired and before run() is issued, the test.only will change the mocha.options.grep, but it won't change the runner's grep. As a result, when the run() and then runner.runTests() is issued, the grep is not working.
/**
 * Run tests and invoke `fn()` when complete.
 *
 * @api public
 * @param {Function} fn
 * @return {Runner}
 */
Mocha.prototype.run = function(fn) {
  if (this.files.length) {
    this.loadFiles();
  }
  var suite = this.suite;
  var options = this.options;
  options.files = this.files;
  var runner = new exports.Runner(suite, options.delay);
  var reporter = new this._reporter(runner, options);
  runner.ignoreLeaks = options.ignoreLeaks !== false;
  runner.fullStackTrace = options.fullStackTrace;
  runner.asyncOnly = options.asyncOnly;
  runner.allowUncaught = options.allowUncaught;
  if (options.grep) {
    runner.grep(options.grep, options.invert);
  }
  if (options.globals) {
    runner.globals(options.globals);
  }
  if (options.growl) {
    this._growl(runner, reporter);
  }
  if (options.useColors !== undefined) {
    exports.reporters.Base.useColors = options.useColors;
  }
  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;

  function done(failures) {
    if (reporter.done) {
      reporter.done(failures, fn);
    } else {
      fn && fn(failures);
    }
  }

  return runner.run(done);
};

I just think it would be better to let runner to read mocha.options.grep rather than reading a temp value stored.
My current workaround is to rewrite the _mocha file and:

register mocha, suite, test as global value
to load the AMD scripts, set delay mode =false
fire mocha.run()

Please let me know I am doing towards the right direction. Thanks :)",TheLevenCreations,NONE,2016-01-27 14:30:46+00:00,False,,,,3,5,2016-01-27 15:53:12+00:00,0.06,boneskull,MEMBER,1,1,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2078,Doesn't work in IE8 after release v2.4.1,"All my tests started to fail after new release in IE8 with the following error:
Object doesn't support this property or method
  at /home/travis/build/driveback/digital-data-manager/node_modules/mocha/mocha.js:11671",ConstantineYurevich,NONE,2016-01-27 14:47:24+00:00,True,2016-01-27 16:17:09+00:00,0.06,,4,13,2016-01-27 15:16:22+00:00,0.02,gyandeeps,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2079,Add browser test suite to CI,Should hopefully catch some issues going forward. Very simple cross-browser tests with testling.com/saucelabs would be nice too.,danielstjules,CONTRIBUTOR,2016-01-27 16:14:23+00:00,True,2016-05-23 05:01:42+00:00,116.53,,6,18,2016-01-27 19:45:50+00:00,0.15,boneskull,MEMBER,1,4,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2080,Breaking change from version 2.4.2 to 2.4.3,"We are suddenly experiencing hangs in our test run when updating from mocha 2.4.2 to 2.4.3.
We are using mochify to run our tests and I believe what it does is run your test file through browserify then runs the test with mocha in phantom.
One of your recent changes:
a4345ef
Appears to be setting the variable require onto the global object, thus breaking mochify and causing it to hang.
https://github.com/mochajs/mocha/blob/master/mocha.js#L1
I'm not sure what the solution is. But manually reverting our local version back to 2.4.2 works around the issue.",justinmchase,NONE,2016-01-27 17:45:01+00:00,True,2016-01-28 21:47:05+00:00,1.17,,11,32,2016-01-27 18:31:02+00:00,0.03,boneskull,MEMBER,1,2,0,8,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2083,Regression: Failures rendering twice,"I just happened to start up a simple hello world mocha test project (to test something else :) ), and I noticed that versions >= 2.4 now double-render the failure in my example.  Reverting to 2.3.3 makes the behavior go away.  I will try to get to the bottom of it, but I see several releases in the last few days so I thought maybe you'd want to know.
https://github.com/ahamid/mocha-phantomjs-blanket/tree/mocha-failure-double-render",ahamid,CONTRIBUTOR,2016-01-29 03:00:48+00:00,True,2016-05-25 07:57:23+00:00,117.21,,8,21,2016-01-29 03:22:06+00:00,0.01,ahamid,CONTRIBUTOR,1,3,0,4,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2085,Please allow describe can do async with done/promise,"In addition to --delay flag. Describe should also able to use done/promise flow to do async before using it
Such as, I want to do dynamic test for all user in database. I need to query user in database with async first, then each of user will emit their own test case in block
describe(function(done){
   query(function(users){
       users.forEach(function(user,i){
             it(""Test : "" + user.ID,function() {
                  if(!user.ID)
                        throw new Error(""user "" + i + has no ID);
             });
       });

       done();
   }); 
});",Thaina,NONE,2016-02-02 11:10:42+00:00,True,2016-02-16 08:57:40+00:00,13.91,,4,22,2016-02-07 07:25:17+00:00,4.84,ORESoftware,NONE,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2087,beforeEach doesn't run with it.only ,"describe('group', () => {

    beforeEach('before', () = > {doSmth()});

    it.only('only me', () => {expect('').to.be.eq('');});

  });

If there is no it.only then doSmth will be called;
If there is no only doSmth will be called;",Yeti-or,NONE,2016-02-03 12:37:50+00:00,True,2019-01-24 15:48:08+00:00,1086.13,,6,4,2016-02-08 18:00:11+00:00,5.22,ORESoftware,NONE,1,0,0,3,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2088,Watch mode doesn't work when importing describe/it,"When I use import {describe, it} from 'mocha' and enable --watch, tests are only executed once on start. When I change a file, the watcher registers that change, but does not execute any tests and just prints 0 passing.
(I'm using babel 6.x and --compilers js:babel-register here, haven't had the time to try this with commonjs requires yet)",c089,CONTRIBUTOR,2016-02-03 13:53:32+00:00,True,2017-10-17 05:32:52+00:00,621.65,,4,3,2016-02-07 14:58:15+00:00,4.04,thangngoc89,NONE,0,1,0,2,"['confirmed-bug', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2089,Diff doesn't be displayed when object has Symbol value,"When I assert an object that has a Symbol value, the test doesn't display diff even if it fails. For example, the following test fails without generating diff.
// test.js
const assert = require('assert');

it('should generate diff', () => {
  const obj = { type: Symbol('foo') };
  assert.deepEqual(obj, { type: null });
});
result:

Then I found the stringify function in lib/utils throws a following error when the argument object has a Symbol value.
TypeError: Cannot convert a Symbol value to a string

environment:

mocha: v2.4.5
node: v4.2.2",ryym,CONTRIBUTOR,2016-02-03 15:23:40+00:00,True,2016-02-17 02:15:24+00:00,13.45,,2,6,2016-02-06 01:03:47+00:00,2.4,glenjamin,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2090,Change console output icons,"Hi,
I am wiring up a lambdacd build pipeline for my nodejs application. The CI somehow captures the console output, stores it into JSON and then prints it to the webui.
This process destroys the nice checkmark icons (✓) so every test is prefixed with a ?. Is it possible to replace the checkmark (or error icon) with a custom string like [SUCCESS]?
findLanguageOrUseCustomerDefault()
      ? is a function
      ? finds and returns requested language (customer.language undefined)",konradjurk,NONE,2016-02-03 18:17:11+00:00,True,2017-12-13 17:16:05+00:00,678.96,,3,3,2017-07-29 14:26:24+00:00,541.84,stale,NONE,0,1,0,1,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2092,HTML reporter bug: error is shown twice,"Everytime a error happens the HTML reporter shows it twice.
here is a testcase:
http://stuff.antpaw.de/mocha.html or https://jsfiddle.net/u5zqnwrv/",antpaw,NONE,2016-02-04 11:30:17+00:00,True,2016-02-16 08:31:59+00:00,11.88,,4,4,2016-02-11 05:03:13+00:00,6.73,ArnaudBuchholz,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2093,mocha does not work in watch mode with node 5.0 flags,"mocha works fine one only one flag is passed to node compiler but does not work when I add the second compiler opts  --harmony_default_parameters
λ npm run test-watch

billboard@1.0.0 test-watch P:\billboard
SET NODE_ENV=test&& node --harmony_destructuring --harmony_default_parameters  node_modules/mocha/bin/_mocha -w  test/*.test.js

SyntaxError: Unexpected token ;
at exports.runInThisContext (vm.js:53:16)
at Module._compile (module.js:387:25)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Module.require (module.js:367:17)
at require (internal/module.js:16:19)
at Object. (P:\billboard\server.js:5:15)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Module.require (module.js:367:17)
at require (internal/module.js:16:19)
at Object. (P:\billboard\test\api.test.js:14:18)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Module.require (module.js:367:17)
at require (internal/module.js:16:19)
at P:\billboard\node_modules\mocha\lib\mocha.js:219:27
at Array.forEach (native)
at Mocha.loadFiles (P:\billboard\node_modules\mocha\lib\mocha.js:216:14)
at Mocha.run (P:\billboard\node_modules\mocha\lib\mocha.js:468:10)
at loadAndRun (P:\billboard\node_modules\mocha\bin_mocha:359:22)
at Object. (P:\billboard\node_modules\mocha\bin_mocha:376:3)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Function.Module.runMain (module.js:447:10)
at startup (node.js:139:18)
at node.js:999:3",afaayerhan,NONE,2016-02-05 19:07:49+00:00,True,2017-05-25 06:03:32+00:00,474.46,,3,2,2017-05-25 06:01:00+00:00,474.45,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2095,"Output in Chrome console includes ""stdout:""-prefixed lines","Mocha 2.4.5
Chrome 48.0.2564.103
Pretty much with any reporter I use, Mocha outputs the following poorly-formatted text to the browser console.
Note the weird ""stdout:""-prefixed lines.
  Foo
     #bar
 stdout: [2K
       1) should work
       ✓ should still work
   1 passing (770ms)
   1 failing
   1) Foo #bar should work:
     Error: oops
      at Context.shouldWork (test/test.js!transpiled:11:35)

 stdout: [0G
 stdout: [2K
 stdout: [0G

This seem to be the result of code in most reporters using a combination of calls to console.log() and process.stdout.write().  In the browser, process.stdout is ultimately implemented as calls to the console with ""stdout:"" prefixed in front on each line (not really sure why, just something BrowserStdout does) which is often just a cursor movement escape code (which, in many cases, like above, really contributes nothing to the final formatting).
So, this just doesn't work well, eh?  Can something be done to make reporter output look better in the browser?  Mocha is advertised as working ""in the browser""   ...but it doesn't really.",mattflix,NONE,2016-02-06 05:16:00+00:00,True,2018-10-20 20:45:31+00:00,987.65,,6,11,2016-05-22 12:08:23+00:00,106.29,ebbe-brandstrup,NONE,3,1,0,2,"['confirmed-bug', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2098,The home page should mention --inline-diffs along with the screenshot,"http://mochajs.org/#diffs shows output of mocha --inline-diffs, which is not the default (since #862?).
I needed inline diffs and spent some time figuring out what I had done wrong, a pointer to --inline-diffs near the screenshot would be very helpful.",nickolay,NONE,2016-02-07 13:17:37+00:00,False,,,,3,1,2016-02-08 08:39:57+00:00,0.81,mattflix,NONE,0,0,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2099,mocha + ejs - Syntax error: unexpected token <,"When I run mocha test on a react + webpack + babel app where a dependency (auth0-lock) has .ejs files, I get a SyntaxError: Unexpected token <
mocha test/components/channel.spec.js --compilers js:babel-register
/myapp/node_modules/auth0-lock/lib/html/main.ejs:1
(function (exports, require, module, __filename, __dirname) { <div id=""a0-lock"" class=""a0-lock<%= (locals && locals.options.theme) ? ' a0-theme-' + locals.options.theme : ''%>"" dir=""auto"">
                                                              ^
SyntaxError: Unexpected token <

Any help on this is appreciated.",caalberts,NONE,2016-02-08 13:25:01+00:00,True,2016-04-16 09:49:25+00:00,67.85,,3,3,2016-02-23 00:16:58+00:00,14.45,iamjpg,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2100,Unexpected token ...,"I'm getting the same error message that is in this stackoverflow question:
http://stackoverflow.com/questions/34559822/spread-operator-in-react-native-causes-unexpected-token-error-with-mocha
The line ""...require('React'),"" was added to Libraries/react-native/react-native.js.
Now when trying to unit test anything that touches something that includes 'react-native' (in my case an import of AsyncStorage) will cause the ""Unexpected token ..."" error message.
I have installed 'stage-2' preset and included it in my .babelrc file but that does not seem to have made any difference.
Are there any ideas on how to continue using Mocha in this project?",zentuit,NONE,2016-02-08 21:54:13+00:00,True,2016-02-16 08:41:24+00:00,7.45,,2,1,2016-02-16 08:41:24+00:00,7.45,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2102,Does Mocha support Node 5.x?,"Mocha seems to crash when testing against Node 5.6.0 on our repository's Travis CI. It seems that Mocha supports everything at least 0.8 though, so I'm not sure what versions work.",ilanbiala,NONE,2016-02-10 19:18:17+00:00,True,2016-02-10 21:16:00+00:00,0.08,,2,1,2016-02-10 21:16:00+00:00,0.08,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2103,How to run under rhino ?,Any experiences please ?,ainthek,NONE,2016-02-11 07:19:51+00:00,True,2016-02-17 03:02:02+00:00,5.82,,2,1,2016-02-17 03:02:02+00:00,5.82,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2105,Error: Unsupported Node version: 5.6.0,"Hi I am having this issue when trying to run ""npm test"" with mocha.
I've copied the stack below. Thank you.

MEAN.JS - Test Environment
Environment:            test
Port:               3001
Database:               mongodb://localhost/mean-test
App version:            0.4.2
MEAN.JS version:            0.4.2
Running ""mochaTest:src"" (mochaTest) task


Mocha exploded!
Error: Unsupported Node version: 5.6.0
at Object. (/Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/mock-fs/lib/index.js:35:9)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Module.require (module.js:367:17)
at require (internal/module.js:16:19)
at Object. (/Users/busta/Documents/proyectos_eclipse/node_test/mean/modules/core/tests/server/core.server.config.tests.js:12:10)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Module.require (module.js:367:17)
at require (internal/module.js:16:19)
at /Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/mocha/lib/mocha.js:172:27
at Array.forEach (native)
at Mocha.loadFiles (/Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/mocha/lib/mocha.js:169:14)
at MochaWrapper.run (/Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/grunt-mocha-test/tasks/lib/MochaWrapper.js:51:15)
at /Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/grunt-mocha-test/tasks/mocha-test.js:86:20
at capture (/Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/grunt-mocha-test/tasks/mocha-test.js:33:5)
at Object. (/Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/grunt-mocha-test/tasks/mocha-test.js:81:5)
at Object. (/Users/busta/Documents/proyectos_eclipse/node_test/mean/node_modules/grunt/lib/grunt/task.js:264:15)
Warning: Task ""mochaTest:src"" failed. Use --force to continue.


Aborted due to warnings.",bustazone,NONE,2016-02-13 01:22:36+00:00,True,2016-02-13 01:40:19+00:00,0.01,,2,1,2016-02-13 01:40:19+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2106,allowUncaught is not working as expected,"In my code there are cases where I might get some errors, which I'm fine with.
I looked around and found the allowUncaught flag to prevent uncaught errors to fail my tests.
Problem is, I don't really understand what this flag does, because the tests keep failing.
process.on = function(e, fn){
        if ('uncaughtException' == e) {
      global.onerror = function(err, url, line){
      fn(new Error(err + ' (' + url + ':' + line + ')'));
      return !mocha.allowUncaught;
    };
    uncaughtExceptionHandlers.push(fn);
  }
};
As you can see in the code, there is no way to block the fn callback in cause of uncaughtException.
If this flag is not intended for this use case, please add some proper documentation for it.",yonida,NONE,2016-02-14 08:30:50+00:00,True,2017-03-30 16:45:33+00:00,410.34,,4,3,2016-03-25 10:56:33+00:00,40.1,lolmaus,NONE,0,0,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2107,Suppress console output during tests,"Like stated out in this issue #2084, it is very vital to suppress console.log output, when testing e.g. command line tools. All reporters seem to write to console.log while tests are running, so neither before nor beforeEach hooks will work to suppress the messy, mixed output. I tried it like this:
    before(function () {
        //silence the console
        console.log = function () {};
    });

    after(function () {
        //reset console
        delete console.log;
    });

My suggestion is to overwrite console.log with an empty function to suppress the output, allowing mocha to override it, without any changes to the reporters - maybe in the manner above using the well-known hooks. But, that would require some caching of the reporters’  output, which may be kind of senseless, when dealing with asynchronous tests, because writing to console will only be save, when all tests are done,  right!? Bye, bye progress-reporting!   Anyway! If the solution above would only work...",HansHammel,NONE,2016-02-15 14:40:17+00:00,True,2018-10-11 09:26:02+00:00,968.78,,7,6,2016-04-20 22:34:09+00:00,65.33,raphaklaus,NONE,0,0,0,4,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2108,show full pathes of files in stack trace,"Hey,
i have a test-directory with a spec file in a structure like that:
test/packages/liveGames/actions/addLiveGame_spec.js

this file tests a file at
src/packages/liveGames/actions/addLiveGame.js

i run mocha like that
    ""test"": ""node_modules/mocha/bin/mocha --compilers js:babel-core/register --require mocha-clean --require ./test/utils/chaiImmutable.js 'test/**/*_spec.@(js|jsx)'"",

i let that test fail and get a stack trace like that:
TypeError: ...
  at addLiveGame (addLiveGame.js:5:33)
  ...
  at Context.<anonymous> (addLiveGame_spec.js:36:34)

I really like to see the full path of the file addLiveGame.js and addLiveGame_spec.js.
ie like that
at addLiveGame (src/packages/liveGames/actions/addLiveGame.js)
...
at Context.<anonymous> (test/packages/liveGames/actions/addLiveGame_spec.js)

Is that somehow possible with mocha?
Background:

i use tmux and will jump from that path directly to the file in vim",divramod,NONE,2016-02-15 19:44:29+00:00,True,2016-02-16 08:45:44+00:00,0.54,,2,1,2016-02-16 08:45:44+00:00,0.54,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2109,Comparing certain objects throws `TypeError: Cannot convert object to primitive value`,"When comparing objects with certain length properties, the reporter throws when stringifying the diff.  Reduced repro:
it('compare two objects', function () {
   assert.deepEqual({length: {toString: 0}}, {length: 1});
});
Expected:
AssertionError: { length: { toString: 0 } } deepEqual { length: 1 }
+ expected
- actual

 {
-  ""length"": {
-    ""toString"": 0
-  }
+  ""length"": 1
 }
Actual:
TypeError: Cannot convert object to primitive value
at jsonStringify (mocha/lib/utils.js:504:7)
at Object.exports.stringify (mocha/lib/utils.js:431:14)
at mocha/lib/reporters/base.js:203:37
at Array.forEach (native)
at Function.exports.list (mocha/lib/reporters/base.js:163:12)
at Spec.Base.epilogue (mocha/lib/reporters/base.js:328:10)
at Runner.emit (events.js:129:20)
at mocha/lib/runner.js:791:12
at mocha/lib/runner.js:644:9
at next (mocha/lib/runner.js:284:14)",joshlory,CONTRIBUTOR,2016-02-16 01:30:29+00:00,True,2016-03-20 05:48:24+00:00,33.18,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2111,Deprecated graceful-fs,"Hi, I just noticed after installing mocha that it relies on an outdated dependency on glob@3.2.3 which uses graceful-fs@2.0.3 .
npm WARN deprecated graceful-fs@2.0.3: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible
See the tracking issue here: nodejs/node#5213",thedark1337,CONTRIBUTOR,2016-02-16 03:50:37+00:00,True,2016-02-16 09:22:44+00:00,0.23,,3,5,2016-02-16 09:06:32+00:00,0.22,LinusU,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2114,What to do with enormous stack traces?,"I've seen stack traces that'd shock your eyelids. Hundreds of lines long, these majestic beasts reign supreme over node.js reporter output, overfilling all but the most capacious terminal scrollback buffers.
Something ought to be done! But what?

A reporter option for turning off stack trace printing?
A reporter option for truncating stack traces to the top n lines?
A core Mocha option that drops or truncates stack traces before passing them to the reporter?
We hate adding options; change the default behavior to truncating stack traces to the top n lines?
Something else?

I'll make the PR if a maintainer can point me in the desired direction!",rhendric,NONE,2016-02-16 20:26:20+00:00,True,2016-03-21 04:11:46+00:00,33.32,,2,1,2016-03-21 04:11:46+00:00,33.32,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2116,Please allow describe can do async with done/promise,"In addition to --delay flag. Describe should also able to use done/promise flow to do async before using it
Such as, I want to do dynamic test for all user in database. I need to query user in database with async first, then each of user will emit their own test case in block
describe(function(done){
   query(function(users){
       users.forEach(function(user,i){
             it(""Test : "" + user.ID,function() {
                  if(!user.ID)
                        throw new Error(""user "" + i + has no ID);
             });
       });

       done();
   }); 
});

ps. This thread is copied from #2085 . It was ruin by a someone and was locked. And I need to make it reopen to ask for something
@boneskull I know that it would not be implemented immediately. That's what software development process is
What I would like you to do is consider you will never do it. Or will be doing it in which version. So I would consider move to another tool or make it by myself
ps2 @boneskull if you just not hurry lock that thread I would not need to waste another thread like this",Thaina,NONE,2016-02-18 04:51:06+00:00,False,,,,6,7,2016-02-24 19:58:56+00:00,6.63,boneskull,MEMBER,2,0,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2117,update glob dep?,"any chance to get an upgrade of the glob module to 7.x or so?
The currently referenced version is 3.2.3 and about 3 years old and is using an outdated graceful-fs module internally producing this nasty warning with npm 3.x:
npm WARN deprecated graceful-fs@2.0.3: graceful-fs version 3 and
before will fail on newer node releases. Please update to
graceful-fs@^4.0.0 as soon as possible.",Kosta-Github,NONE,2016-02-18 12:45:57+00:00,True,2016-02-19 17:59:39+00:00,1.22,,4,3,2016-02-18 17:38:51+00:00,0.2,escaton,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2118,Error in IE9: Unable to get value of 'currentRetry',"I'm running karma-mocha for cross-browser testing.  For IE I'm running a modern ie virtual machine on my macbook pro.
I'm getting the following error from mocha.js in IE9:
Line 4867: Unable to get value of the property 'currentRetry': object is null or undefined
    self.runTest(function(err) {
        test = self.test;
        if (err) {
     -->  var retry = test.currentRetry();
          if (err instanceof Pending) {
            test.pending = true;
            self.emit('pending', test);
          } else if (retry < test.retries()) {
            var clonedTest = test.clone();
            clonedTest.currentRetry(retry + 1);
            tests.unshift(clonedTest);

            // Early return + hook trigger so that it doesn't
            // increment the count wrong
            return self.hookUp('afterEach', next);
          } else {
            self.fail(test, err);
          }
          self.emit('test end', test);

          if (err instanceof Pending) {
            return next();
          }

          return self.hookUp('afterEach', next);
        }

To reproduce run npm test on the repository.",rhewitt22,NONE,2016-02-18 15:20:24+00:00,True,2019-03-20 14:35:54+00:00,1125.97,,3,0,,,,,0,0,0,0,"['browser', 'confirmed-bug', 'stale', 'unconfirmed-bug', 'windows']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
2120,Retry logic is not working when beforeEach() or afterEach() functions fail,"Hello,
I've been trying to run a simple suite:
describe(""Suite"", function() {

    this.retries(1);
    var toFail = true;

    beforeEach(function(){
        console.log(""beforeEach"");
    });

    afterEach(function() {
        console.log(""afterEach"");
        if (toFail) {
            toFail = false;
            throw new Error(""Cause retry"");
        }
    });

    it(""Test"", function() {
        console.log(""it"");
    });
});

My expectation was that if it(), beforeEach() or afterEach() fail, then beforeEach() > it () > afterEach() functions are to be executed again. However, it appears that retry logic is not triggered if beforeEach() or afterEach() fail. It works only if the failing function is it()",grvk,NONE,2016-02-20 01:21:17+00:00,True,2016-02-24 19:13:52+00:00,4.74,,4,6,2016-02-24 01:34:09+00:00,4.01,longlho,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2121,Looks like glob needs to be upgraded to at least 3.2.4,"Graceful was removed as of glob 3.2.4:
isaacs/node-glob@49122ad
Installing latest mocha (mocha@2.4.5 ) yields:
npm WARN deprecated graceful-fs@2.0.3: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.

Install log / dep tree:
├─┬ mocha@2.4.5 
│ ├── commander@2.3.0 
│ ├── diff@1.4.0 
│ ├── escape-string-regexp@1.0.2 
│ ├─┬ glob@3.2.3 
│ │ ├── graceful-fs@2.0.3",andresn,NONE,2016-02-22 20:13:10+00:00,True,2016-04-15 06:46:37+00:00,52.44,,12,21,2016-02-22 20:21:37+00:00,0.01,danielstjules,CONTRIBUTOR,1,3,0,7,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2122,Before not waiting for promises to be resolved,"Hi guys,
I'm trying to make a test suite where in Before() I handle a promise but others test cases run first than promise is resolved. My setup is webdriverio+mocha
What I'me doing wrong ?
describe('#test', function(done) {
    before(function(done) {
        var p1 = Promise.resolve(3);
        var p2 = 1337;
        var p3 = new Promise(function(resolve, reject) {
            setTimeout(resolve, 100, ""foo"");
        });

        Promise.all([p1, p2, p3]).then(function(values) {
            console.log(values); // [3, 1337, ""foo""] 
            browser.call(done);
        }.bind(done));
    });
    it('should enter a space', function(done) {
        console.log('XPTO');
        // more code
        browser.call(done);
    });

The console.log() in the first it is executed first than promise resolve but that's not what I want.
From Mocha docs I understood Before() would wait for everything to be done.
I tried returning the promise and written in docs but got same symptoms.
Note
If I put the Before() code inside describe() but before Before() it works. It waits for promises to be resolved.
What am I missing ?
Thanks",michaelDomingues,NONE,2016-02-23 22:13:24+00:00,True,2017-08-12 14:29:58+00:00,535.68,,5,5,2016-07-16 06:47:58+00:00,143.36,frogcjn,NONE,0,1,0,3,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2125,Is there a way to make mocha to not stop on first error?,"Mocha crashed when reporting errors:
describe ( 'test', function () {
it ( '#asyncCall()', function ( done ) {
someAsyncCall ( function ( err ) {
done ( err ? new Error ( err + '' ) : null );
});
});
});",Ziv-Barber,NONE,2016-02-25 11:53:02+00:00,True,2016-03-21 04:07:19+00:00,24.68,,3,2,2016-03-21 04:07:19+00:00,24.68,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2126,Stack trace filtering causing duplicate error messages,"describe('foo', function() {
  it('bar', function() {
    throw new Error('this is a test in ' + process.cwd() + '/foo/bar/test.js and it fails');
  });
});
will output
  1) foo bar:
     this is a test in /Users/tbn/Code/tmp/mocha-stack-bug/foo/bar/test.js and it fails
  Error: this is a test in foo/bar/test.js and it fails
      at Context.<anonymous> (test/test.js:5:11)

and as you can see the this is a test in message is duplicated in the output. In this example it is not a big deal but once you have larger error messages this becomes really problematic (see BadgeLabs/mocha-eslint#29).
I've tracked this down to stackTraceFilter() being applied before the BaseReporter.list() method runs which removes the message from the stack property. But since the stack has been beautified the messages will no longer be equal due to the process.cwd() removal.",Turbo87,CONTRIBUTOR,2016-02-25 13:46:47+00:00,True,2016-03-21 08:07:58+00:00,24.76,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2127,retry if `afterEach` fails,"in continuation of #2120 and #1989
the issue is that if anything throws in afterEach hook, the test won't retry and fail immediately.
I'll try to explain the use case.
When we test our application end-to-end (using webdriver or similar technologies) we need retries, because most of the time tests fail due to network errors, webdriver errors or other stuff that we don't control. And it's been working great if something sketchy happens inside the it body. But there is one use case:
When we test an app using webdriver, often times we want to make sure that there was no errors in the console after the test has finished. Even though the functionality works, something can throw (React.propTypes validation, logging, random undefined is not a function, etc..) and you most likely want to catch errors like that.
here is a simplified version of an example test:
describe('a button', function() {
    it('shows a modal window when button is clicked', function(done) {
        webdriverAPI.click('.button') // we find some button on our page that has a specific class and click it
        .then(() => webdriverAPI.isPresentOnThePage('.modal-window')) // then we expect a window to show up
        .then(() => done()); // if it's there, we assume that functionality is ok and pass the test
    });

    // in after each hook, we want to make sure nothing threw an error in the browser.
    // 
    // Just to be clear. the browser environment is a completely separate process and
    // not the current node.js process. We only interact with it via `webdriverAPI`
    afterEach(function(done) {
        webdriverAPI.getConsoleOutput().then((output) => {  // capture the output of the browser console that was printed during the test execution
            if (output) {
                // if there is something => blow up the test
                return done(new Error(`unexpected output in the console: ${output}`));
            }

            done();
        });
    });
});
It's been working fine, but sometimes you get a weird errors like profile_picture.jpg failed to load because of some network problem which brings your entire test suite down.
It would be really awesome if we could retry the entire test if the afterEach hook fails.
Often people propose some kind of local retry solution like
afterEach(function() {
  tryFiveTimes(function() {
      /* check the console and throw if errors are present */
  });
});
but in this case it won't work, becasue by the time you enter the afterEach hook, the output is already in the console, and every time you check for it you'll get the same result. The only solution is to retry the whole thing (fail the test and run it again with all the hooks).
I understand that before and after hooks are supposed to setup/teardown the environment and if we do retry on all the hook failures it can mess it up, but maybe there can be some kind of explicit API for it. for example
afterEach(function(done) {
    webdriverAPI.getConsoleOutput((output)  => {
        if (output) {
            this.failAndRetry(); // basically does `retries++` and runs the test again if the are still retries left
        } else {
            done();
        }
    });
});",aaronabramov,NONE,2016-02-25 22:15:58+00:00,False,,,,4,2,2016-09-29 20:36:41+00:00,216.93,chipsenkbeil,NONE,0,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2130,AssertionError thrown in callback inside Promise are not caught,"sample test case using node LTS (currently 4.3.1) and mocha 2.4.5
var assert = require ('assert');

describe ('AssertionError', function () {

  it ('is not caught with callbacks', function () {
    return new Promise (function (resolve) {
      setImmediate (function () {
        assert (false);
        resolve ();
      });
    });
  });

  it ('is caught without callbacks', function () {
    return new Promise (function (resolve) {
      assert (false);

      resolve ();
    });
  });

});
produces
$ ./node_modules/.bin/mocha sample/


  AssertionError
    1) is not caught with callbacks
    2) is caught without callbacks


  0 passing (21ms)
  2 failing

  1) AssertionError is not caught with callbacks:

      Uncaught AssertionError: false == true
      + expected - actual

      -false
      +true

      at Immediate._onImmediate (sample/foo_test.js:8:9)

  2) AssertionError is caught without callbacks:

      AssertionError: false == true
      + expected - actual

      -false
      +true

      at foffo/foo_test.js:16:7
      at Context.<anonymous> (sample/foo_test.js:15:12)
the setImmediate call is to represent a classic node-style function with callback.
the main problem (for me at least) happens when running mocha -w inside a npm run script: uncaught errors make the npm run exit thus ""invalidating"" the watch functionality (running mocha -w alone doesn't interrupt the watching.
Thanks for any feedback",onip,NONE,2016-02-26 13:46:24+00:00,True,2016-03-21 04:03:55+00:00,23.6,,2,1,2016-03-21 04:03:55+00:00,23.6,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2131,problems with require('@mycompany/mymodule') - npm private modules,"Mocha borks on require's like @mycompany/mymodule
node_modules/.bin/mocha --compilers js:mocha-traceur spec/
Error: ENOENT: no such file or directory, open 'D:\floorplanner\pdf-export\fp.engine.export\node_modules\@floorplanner\package.json'
    at Error (native)
    at Object.fs.openSync (fs.js:584:18)
    at Object.fs.readFileSync (fs.js:431:33)
    at D:\floorplanner\pdf-export\fp.engine.export\node_modules\traceur-runner\lib\traceur-runner.js:16:30
    at shouldCompile (D:\floorplanner\pdf-export\fp.engine.export\node_modules\traceur\src\node\require.js:51:20)
    at Object.Module._extensions..js (D:\floorplanner\pdf-export\fp.engine.export\node_modules\traceur\src\node\require.js:66:9)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at Object.<anonymous> (D:\floorplanner\pdf-export\fp.engine.export\lib\svg.js:65:11)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (D:\floorplanner\pdf-export\fp.engine.export\node_modules\traceur\src\node\require.js:68:21)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at Object.<anonymous> (D:\floorplanner\pdf-export\fp.engine.export\lib\main.js:68:35)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (D:\floorplanner\pdf-export\fp.engine.export\node_modules\traceur\src\node\require.js:68:21)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at Object.<anonymous> (D:\floorplanner\pdf-export\fp.engine.export\spec\main.spec.js:1:22)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (D:\floorplanner\pdf-export\fp.engine.export\node_modules\traceur\src\node\require.js:68:21)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at D:\floorplanner\pdf-export\fp.engine.export\node_modules\mocha\lib\mocha.js:219:27
    at Array.forEach (native)
    at Mocha.loadFiles (D:\floorplanner\pdf-export\fp.engine.export\node_modules\mocha\lib\mocha.js:216:14)
    at Mocha.run (D:\floorplanner\pdf-export\fp.engine.export\node_modules\mocha\lib\mocha.js:468:10)
    at Object.<anonymous> (D:\floorplanner\pdf-export\fp.engine.export\node_modules\mocha\bin\_mocha:403:18)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Function.Module.runMain (module.js:430:10)
    at startup (node.js:141:18)
    at node.js:980:3
Makefile:23: recipe for target 'test' failed
make: *** [test] Error 1",timknip,NONE,2016-02-26 17:25:02+00:00,True,2017-10-17 06:25:18+00:00,598.54,,3,2,2017-10-17 04:24:36+00:00,598.46,stale,NONE,0,1,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2132,The growl code in _mocha is dead code,"The code in 
  
    
      mocha/bin/_mocha
    
    
        Lines 435 to 451
      in
      9c41051
    
    
    
    

        
          
           function growl(runner, reporter) { 
        

        
          
             var notify = require('growl'); 
        

        
          
            
        

        
          
             runner.on('end', function(){ 
        

        
          
               var stats = reporter.stats; 
        

        
          
               if (stats.failures) { 
        

        
          
                 var msg = stats.failures + ' of ' + runner.total + ' tests failed'; 
        

        
          
                 notify(msg, { name: 'mocha', title: 'Failed', image: images.fail }); 
        

        
          
               } else { 
        

        
          
                 notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', { 
        

        
          
                     name: 'mocha' 
        

        
          
                   , title: 'Passed' 
        

        
          
                   , image: images.pass 
        

        
          
                 }); 
        

        
          
               } 
        

        
          
             }); 
        

        
          
           } 
        
    
  

 is not used anywhere anymore.",julienw,CONTRIBUTOR,2016-02-28 17:15:55+00:00,True,2016-03-21 02:05:42+00:00,21.37,,2,2,2016-03-09 03:52:12+00:00,9.44,danielstjules,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2133,When the Response is not a valid object issue,"Hi
I have problem a problem with mocha  sorry if it has been posted before me
When I have a response and is not a valid json object , Its playing creazy the response has a status code and a reponse like this
Status 400 Bad Request
Response body :
{""message"": ""{ ""message"" : ""Field: 'name' is null"" }""}
but the mocha says
TypeError: Cannot read property 'statusCode' of undefined
    at Test.<anonymous> (29.Preference.js:371:27)
    at Test.assert (/Users/macbookpro/Desktop/java-api/hk-api-v3/hotelkey/node_modules/supertest/lib/test.js:156:6)
    at assert (/Users/macbookpro/Desktop/java-api/hk-api-v3/hotelkey/node_modules/supertest/lib/test.js:127:12)
    at /Users/macbookpro/Desktop/java-api/hk-api-v3/hotelkey/node_modules/supertest/lib/test.js:124:5
    at Test.Request.callback (/Users/macbookpro/Desktop/java-api/hk-api-v3/hotelkey/node_modules/superagent/lib/node/index.js:781:12)
    at /Users/macbookpro/Desktop/java-api/hk-api-v3/hotelkey/node_modules/superagent/lib/node/index.js:955:25
    at IncomingMessage.<anonymous> (/Users/macbookpro/Desktop/java-api/hk-api-v3/hotelkey/node_modules/superagent/lib/node/parsers/json.js:13:7)
    at endReadableNT (_stream_readable.js:903:12)


I know that is not a valid json object but its better to have a better response from mocha
I had many days problem till I found with Postman what was the problem
thank you for your work",GranitB,NONE,2016-02-29 15:15:33+00:00,True,2016-03-09 03:51:15+00:00,8.52,,3,7,2016-03-09 03:51:15+00:00,8.52,danielstjules,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2134,Mocha reports the wrong message for a before() failure,"With nested test suites, a failure will be reported for the last 'it' clause that ran, regardless of whether it has any relationship to the before() that caused the failure.
it('does something or other', function() {
    // Do something or other
});

describe('Outer suite', function() {
    before(function() {
        throw new Error(""Something went wrong"");
    });

    describe('when nothing goes wrong', function() {
        before(function() {
            //...
        });
        it('should have done something interesting', function() {
            //Do something interesting.
        });
    });
});

Expected behavior:
""before all"" hook for ""should have done something interesting""
Actual behavior:
""before all"" hook for ""does something or other""",jdmarshall,NONE,2016-02-29 21:50:15+00:00,True,2019-01-28 18:55:52+00:00,1063.88,,7,12,2016-03-18 22:13:36+00:00,18.02,mekdev,NONE,0,1,0,5,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2135,code of conduct,"here's a rough draft:

Mocha Code of Conduct
This code of conduct is applicable to issues and pull requests on Mocha's GitHub repository, and its Gitter chat room.

Be nice; don't attack or threaten anyone.


If you aren't nice, expect someone to let you know.
...and if you let somebody know, be nice when you do it.


It is difficult to convey tone or attitude in GitHub issues.  Be clear, and slow down.
If you're new to GitHub or OSS, look around for resources on etiquette and how to get started--these will help you!
Read CONTRIBUTING.md before you contribute.
Mocha is free; please temper your expectations.


that's all I got.",boneskull,MEMBER,2016-03-01 02:11:54+00:00,True,2017-05-26 16:56:14+00:00,451.61,,4,3,2016-03-21 03:53:36+00:00,20.07,danielstjules,CONTRIBUTOR,1,2,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2136,HTML Reporter crashes when an error is thrown in a beforeEach hook,"It appears that the HTML reporter in 2.4.x crashes when an error is thrown in a beforeEach hook. This may effect other hooks (afterEach, before, after) as well. If I swap mocha out for version 2.3.x, everything works as expected.
For a repro, please see this SAP test repo. Clone, start up your favorite http server (e.g. http-server), and hit index.html from your browser.
Chrome 48
Node 4.2.2
NPM 3.3.12",delta62,NONE,2016-03-01 18:34:32+00:00,True,2017-03-30 16:11:32+00:00,393.9,,3,3,2016-03-31 09:18:43+00:00,29.61,andrei-picus-hs,NONE,0,0,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2137,Retry logic does not work with uncaught exceptions,"Hi,
I'm writing mostly asynchronous tests with Promises. For some reason, retry logic does not work on any of them:
describe(""Suite"", function() {
    this.retries(1);
    var flag = true;

    it(""Test"", function(done) {
        console.log(""Test!!!"");
        setTimeout(function() {
            if (flag) {
                flag = false;
                throw new Error()
                done()
            }
            else
                done()
        }, 250);
    });
});

Here is the output:

Suite
Test!!!
1) Test
0 passing (265ms)
1 failing

Suite Test:
Uncaught
rror
at null._onTimeout (c.js:12:11)


Could you take a look into it?
Thanks,
George",grvk,NONE,2016-03-01 18:56:28+00:00,True,2017-10-17 05:56:11+00:00,594.46,,4,5,2016-03-08 06:26:55+00:00,6.48,Turbo87,CONTRIBUTOR,0,2,0,2,"['confirmed-bug', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2138,Sub folders ignored (even with `--recursive`) when tests present in parent folder,"I'm encountering a strange issue, which I assume is a bug.
The relevant folder structure looks roughly like this:
app
  |_ shared
    |_ helpers

My mocha.opts contains the following:
--recursive
--require test/helpers/setup
--require mocha-clean

And I am running Mocha using an NPM run script, using:
mocha app/**/*.spec.js

This was working fine as long as I only had tests in the shared/helpers folder. The moment I created a .spec.js file in the shared folder itself, the tests from shared/helpers were no longer executed.
I found a fix for this on StackOverflow, which recommended putting the tests command in a string, like so:
mocha ""app/**/*.spec.js""

However, not sure if that's an artefact of npm or an issue with Mocha.
I also tried to put app/**/*.spec.js as the last parameter in mocha.opts, but that had the same effect, and putting quotes around it in there caused Mocha to crash.
If any more information is required to reproduce/debug this please let me know.",adamreisnz,NONE,2016-03-02 02:13:20+00:00,True,2017-10-17 06:11:20+00:00,594.17,,9,9,2016-05-06 12:10:29+00:00,65.41,stephanebruckert,NONE,0,2,0,6,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2139,This Context Pollution And Inaccessibility,"describe(""Context Pollution"", function () {
  let someErrorMessage;
  beforeEach(function () {
    console.log(""bef"", this.expectedErrorMessage); // WILL ALWAYS PRINT UNDEFINED
    delete this.expectedErrorMessage; // CANNOT RESET CONTEXT POLLUTION
    this.expectedErrorMessage = undefined; // CANNOT RESET CONTEXT POLLUTION
  });
  it(""should fail when the first parameter in mockThisFunction is not a string."", function () {
    this.expectedErrorMessage = constants.errorMessages.MockThisFunctionMockString;
    someErrorMessage = constants.errorMessages.MockThisFunctionMockString;
    expect(this.expectedErrorMessage).eql(this.expectedErrorMessage);
    expect(someErrorMessage).eql(someErrorMessage);
  });
  it(""should have undefined values if they are not defined for this test."", function () {
    expect(this.expectedErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
    expect(someErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
  });
  it(""should still have undefined values if they are not defined for this test."", function () {
    expect(this.expectedErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
    expect(someErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
  });
});
I know that the context pollution issue has already been discussed, but I still believe this to be a serious defect.  A defect that will push me back towards Jasmine very quickly.  I should only have the variables in a test, that I have explicitly defined within that test.  Anything else WILL lead to false positives in test suites.  This is a basic building block to sustainable test suites!!!

That being said, an even more important issue that I am seeing, is that the same this context is not available in the afterEach & beforeEach, that is available in the it blocks.  This means that I can never reset the context pollution, unless I manually do it inside of every it block. Is this intended functionality?  Am I doing something wrong?

I would expect to have access to the same this context throughout all describe, afterEach, beforeEach, and it blocks.  Especially since Mocha allows the this context to be polluted between tests.

I am using the most recent version of Mocha as of today which I believe is 2.4.5.  Thanks for any help / direction you can provide.  Thanks.",corybill,NONE,2016-03-02 21:30:11+00:00,True,2016-03-09 03:40:38+00:00,6.26,,2,1,2016-03-09 03:40:38+00:00,6.26,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2140,Inaccessibility Of 'this' Context In 'beforeEach',"describe(""Context Pollution"", function () {
  let someErrorMessage;

  beforeEach(function () {
    console.log(""bef"", this.expectedErrorMessage); // WILL ALWAYS PRINT UNDEFINED
    delete this.expectedErrorMessage; // CANNOT RESET CONTEXT POLLUTION
    this.expectedErrorMessage = undefined; // CANNOT RESET CONTEXT POLLUTION
  });
  
  it(""should fail when the first parameter in mockThisFunction is not a string."", function () {
    this.expectedErrorMessage = ""Some errorMessage defined inside of this context"";
    someErrorMessage = ""Some errorMessage defined outside of this context"";
    expect(this.expectedErrorMessage).eql(this.expectedErrorMessage);
    expect(someErrorMessage).eql(someErrorMessage);
  });

  it(""should have undefined values if they are not defined for this test."", function () {
    expect(this.expectedErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
    expect(someErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
  });

  it(""should still have undefined values if they are not defined for this test."", function () {
    expect(this.expectedErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
    expect(someErrorMessage).eql(undefined); // WILL FAIL BECAUSE OF CONTEXT POLLUTION & INABILITY TO RESET THIS CONTEXT
  });
});

I know that the this context pollution issue has already been discussed, but I still believe this to be a serious defect.  I should only have the variables in a test, that I have explicitly defined within that test.  Anything else breaks encapsulation fundamentals and, in my opinion, will lead to false positives in test suites.  Obviously there are work arounds to that issue, by building your own context for each test instead of using 'this'.
That being said, an even more important issue that I am seeing, is that the same this context is not available in the 'afterEach' & 'beforeEach', that is available within the 'it' blocks.  This means that I can never reset the context pollution, unless I manually do it inside of every it block. Is this intended functionality?  Am I doing something wrong?
Expected Behavior
I would expect to have access to the same this context throughout all describe, afterEach, beforeEach, and it blocks.  Especially since Mocha allows the this context to be polluted between tests.
I am using the most recent version of Mocha as of today which I believe is 2.4.5.  Thanks for any help / direction you can provide.  Thanks and I am looking forward to your reply.",corybill,NONE,2016-03-02 21:30:50+00:00,True,2016-03-09 03:42:06+00:00,6.26,,2,1,2016-03-09 03:42:06+00:00,6.26,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2141,Compiler and Require Programatic Options,"I am using gulp 4, gulp-mocha, with babel, so the babel-register is included.  I cannot get mocha to work with babel.  I have searched everywhere and doing require('babel-register') in the gulpfile does not work.  When I run mocha on the command line it works fine:
mocha --compilers js:babel-register tests/
After looking at the mocha source it looks like neither the require nor the compiler options are supported programatically.
/**
 * Set up mocha with `options`.
 *
 * Options:
 *
 *   - `ui` name ""bdd"", ""tdd"", ""exports"" etc
 *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`
 *   - `globals` array of accepted globals
 *   - `timeout` timeout in milliseconds
 *   - `retries` number of times to retry failed tests
 *   - `bail` bail on the first test failure
 *   - `slow` milliseconds to wait before considering a test slow
 *   - `ignoreLeaks` ignore global leaks
 *   - `fullTrace` display the full stack-trace on failing
 *   - `grep` string or regexp to filter tests with
Can these options be supported?  Looks like they would be similar to the globals implementation.
Edit:  Even better could we just get an arguments array that tacks onto the CLI?",trainerbill,NONE,2016-03-02 22:07:47+00:00,True,2016-03-09 03:38:37+00:00,6.23,,2,1,2016-03-09 03:38:37+00:00,6.23,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2142,Bug: it.only does not work with --delay option - Delayed Root Suite,"I just found that there is malfunction of mocha if we use it with --delay option. It does not consider only method for the context.
setTimeout(function() {
  // do some setup

  describe('my suite', function() {
    it('my it block 1', function(){
        //
    });

    it.only('my it block 2', function(){
        //
    });
  });

  run();
}, 2000);
If we run mocha --delay test-case.js the output came:
  my suite
    ✓ my it block 1
    ✓ my it block 2

The skip works perfectly, only issue is with only case. I am using mocha version 2.4.5.",nazarhussain,NONE,2016-03-03 12:24:00+00:00,True,2019-01-22 21:16:14+00:00,1055.37,,5,4,2016-03-09 03:32:33+00:00,5.63,danielstjules,CONTRIBUTOR,1,1,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2143,Block-scoped declarations not yet supported outside strict mode in debug --use_strict,"Hello,
I am getting this error when I try to debug in the node debugger:
node_modules\.bin\mocha debug --ui bdd --use_strict --harmony tests/**/httpHandler.test.js
<     for (let prop in headers) {
<          ^^^
< SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode
<     at exports.runInThisContext (vm.js:53:16)
<     at Module._compile (module.js:387:25)
<     at Object.Module._extensions..js (module.js:422:10)
<     at Module.load (module.js:357:32)
<     at Function.Module._load (module.js:314:12)
<     at Module.require (module.js:367:17)
<     at require (internal/module.js:16:19)
<     at Object.<anonymous> (C:\Dev\PickAGrade\tests\engines\httpHandler.test.js:2:16)
<     at Module._compile (module.js:413:34)
<     at Object.Module._extensions..js (module.js:422:10)
<     at Module.load (module.js:357:32)
<     at Function.Module._load (module.js:314:12)
<     at Module.require (module.js:367:17)
<     at require (internal/module.js:16:19)
<     at C:\Dev\PickAGrade\node_modules\mocha\lib\mocha.js:219:27
<     at Array.forEach (native)

The tests all pass outside the debugger in node. Has the --use_strict flag been added to handle debugging sessions?",beautifulcoder,NONE,2016-03-03 13:25:17+00:00,False,,,,8,10,2016-03-09 03:30:40+00:00,5.59,danielstjules,CONTRIBUTOR,1,1,0,6,"['help wanted', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2146,Uncaught exception on failing hook,"I am using the latest 2.4.5 release and the HTML reporter. When a hook fails, an uncaught exception is thrown and the runner simply stops.
describe ""test"", ->
  beforeEach ""bar is not defined"", ->
    foo = bar

  it ""fails without feedback"", ->

Uncaught TypeError: Cannot read property 'replace' of undefinedBuffer.39.exports.clean @ mocha.js:5937(anonymous function) @ mocha.js:2518Buffer.3.EventEmitter.emit @ mocha.js:200(anonymous function) @ mocha.js:2451Buffer.3.EventEmitter.emit @ mocha.js:200Buffer.36.Runner.fail @ mocha.js:4564Buffer.36.Runner.failHook @ mocha.js:4593(anonymous function) @ mocha.js:4638done @ mocha.js:4251Buffer.35.Runnable.run @ mocha.js:4267next @ mocha.js:4629(anonymous function) @ mocha.js:4651timeslice @ mocha.js:12619


Works fine in Node otherwise.",langri-sha,NONE,2016-03-07 11:27:44+00:00,True,2016-03-21 03:40:24+00:00,13.68,,6,8,2016-03-11 12:31:02+00:00,4.04,lss876,NONE,0,2,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2147,Mocha bails on compile-time exceptions in test files.,"If I have a test file that fails to properly compile, mocha bails and does not try to run any other tests in any other files.
$: ../node_modules/.bin/mocha badFile*.js goodFile.js
/Users/.../badFile.js:1
(function (exports, require, module, __filename, __dirname) { var blah = notaglobal;
                                                                         ^
ReferenceError: notaglobal is not defined
It would be nice to have the option to output this as part of the test suite to continue to run good test files.  For example:
../node_modules/.bin/mocha -r mocha-loadFiles-patch.js badFile*.js goodFile.js

  !! Test file errors
    1) Failed to load: badFile.js
    2) Failed to load: badFile2.js

  SomeFeature
    ✓ should pass.

  1 passing (9ms)
  2 failing

  1) !! Test file errors Failed to load: badFile.js:
     ReferenceError: notaglobal is not defined
     ...

  2) !! Test file errors Failed to load: badFile2.js:
     Error: Cannot find module 'thismoduledoesntexist'
     ...
I've accomplished this in my own project by using a pre-require script to monkey patch Mocha.prototype.loadFiles.  I realize my specific use case is... specific... but at least some output, failing the overall test run, but still generating test results on the clean files could be useful to others as well.",jj4th,NONE,2016-03-08 21:04:44+00:00,True,2016-03-09 02:47:34+00:00,0.24,,2,3,2016-03-09 02:47:34+00:00,0.24,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2148,this.skip() is also skipping teardown()/afterEach(),"setup(function() {
      mock.innerHTML = 'Temporary stuff';
    });
    teardown(function() {
      mock.innerHTML = ''; // THIS ISN'T BEING RUN
    });
    test('test', function() {
      if ('some precondition is unmet') {
        this.skip();
      }
    });
With Mocha v2.4.5: http://jsbin.com/bijuru/edit?html,output
With latest master branch: http://jsbin.com/dajugel/edit?html,output
Observed: Temporary stuff is leftover from test setup
Expected: Temporary stuff should've been cleared by test teardown",laughinghan,NONE,2016-03-08 21:20:35+00:00,True,2016-11-03 05:38:05+00:00,239.35,,4,10,2016-03-21 03:35:04+00:00,12.26,danielstjules,CONTRIBUTOR,1,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2149,Update TAP reporter to TAP 13,"I noticed that mocha is using the older TAP specification and wondering if you would be open to updating it to TAP 13? It is pretty similar. I think the main differences are that version 13 starts with a line that says TAP version 13, and encodes test output in YAML.
General format:
TAP version 13
1..N
ok 1 Description # Directive
# Diagnostic
  ---
  message: 'Failure message'
  severity: fail
  data:
    got:
      - 1
      - 3
      - 2
    expect:
      - 1
      - 2
      - 3
  ...
ok 47 Description
ok 48 Description
more tests....",lencioni,NONE,2016-03-10 17:44:58+00:00,True,2018-11-10 12:09:54+00:00,974.77,,3,1,2016-06-18 08:57:06+00:00,99.63,cades,NONE,0,0,0,1,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2150,HTML Reporter: Add count of pending / skipped tests and provide same functionality when clicked as passes and fails,"in HTML reporter, currently there is functionality to filter test results by passes and fails. Requesting the same for pendings (skips). If you think this functionality is good I don't mind taking on the PR work in a few weeks.",ericlau-solid,NONE,2016-03-10 20:11:10+00:00,True,2017-03-30 16:10:10+00:00,384.83,,3,3,2016-03-21 03:25:07+00:00,10.3,danielstjules,CONTRIBUTOR,0,1,0,2,"['feature', 'pr-needs-work']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False
2151,I want to use `tests` directory rather than `test` for testing,"May I implement it through PR?
Or, Are there some old issues or PR related my issue?
Thanks.",,NONE,2016-03-11 19:24:32+00:00,True,2016-03-21 03:24:26+00:00,9.33,,2,3,2016-03-13 18:57:21+00:00,1.98,bbultman,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2152,Failure in nested `before` prevents execution of outer `afterEach`,"Failure in a nested before function may prevent an outer afterEach.  This could result in test data leaking from one test to the next should the afterEach be responsible for generic test data cleanup code.
To reproduce:
'use strict';

let q = require('q');

describe('outer', function() {
  afterEach(function() {
    console.log('I’d expect this to run after each');
    console.log('So this should appear twice');
  });
  it('first test', function(done) {
    console.log('A test ran');
    done();
  });
  describe('inner', function() {
    before(function() {
      return q.reject('An irrelevant test setup error');
    });
    after(function() {
      console.log('Did this after run?');
    });
    it('a test', function(done) {
      console.log('whatever');
      done();
    });
  });
});

Produces:
vagrant@vagrant-ubuntu-trusty-64:/vagrant$ mocha test/experiment.js 


  outer
A test ran
    ✓ first test
I’d expect this to run after each
So this should appear twice
    inner
      1) ""before all"" hook for ""first test""
Did this after run?


  1 passing (29ms)
  1 failing

  1) outer inner ""before all"" hook for ""first test"":
     Error: the string ""An irrelevant test setup error"" was thrown, throw an Error :)
      at _rejected (node_modules/q/q.js:844:24)
      at node_modules/q/q.js:870:30
      at Promise.when (node_modules/q/q.js:1122:31)
      at Promise.promise.promiseDispatch (node_modules/q/q.js:788:41)
      at node_modules/q/q.js:857:14
      at runSingle (node_modules/q/q.js:137:13)
      at flush (node_modules/q/q.js:125:13)",mike-lang,NONE,2016-03-12 00:42:16+00:00,True,2016-03-21 03:20:10+00:00,9.11,,2,1,2016-03-21 03:20:10+00:00,9.11,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2154,Mocha nomenclature support question,"Hey all
I am wondering what the nomenclature is for Suites and Tests in Mocha.
For example:
describe('A', function(){    // ""suite"" or ""test suite""?

    it('a', function(){    // ""test case"" ?

    });

   describe('B', function(){     // ""suite"" or ""test suite""?

    it('b', function(){      // ""test case"" ?

    });
  });

});
I am wondering what the official terms are for these. Do A and B have different names or are they the same? Likewise a and b? My guess is that the top level describe can be considered ""Suite"", but then what are the nested describes? Are they also monikered ""Suite""? I think that's what the code indicates.",ORESoftware,NONE,2016-03-14 05:44:05+00:00,True,2016-03-21 03:13:05+00:00,6.9,,2,1,2016-03-21 03:13:05+00:00,6.9,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2155,"Allow ""describe"" first parameter an array","I am pretty sure it is a common pattern to have a single file per subject function, e.g.
./tests/utilities/fixText.js
describe('utilities', () => {
    describe('fixText', () => {
        context('unrecognized syntax', () => {
            it('throws an error', () => {
                expect(() => {
                    fixText('', {
                        syntax: 'java'
                    });
                }).to.throw(Error, 'Unknown syntax ""java"".');
            });
        });
        context('JavaScript syntax', () => {
            context('invalid syntax', () => {
                it('throws an error', () => {
                    expect(() => {
                        fixText('let foo;<>;;', {
                            syntax: 'js'
                        });
                    }).to.throw(Error, 'Parsing error: Unexpected token (line: 1, column: 10).');
                });
            });
            it('fixes syntax error', () => {
                const report = fixText('let foo;;;', {
                    syntax: 'js'
                });

                expect(report).to.equal('let foo;\n');
            });
        });
    });
});
I'd have a separate test file for each utility.
I am using describe blocks to categorize tests (utilities, fixText, ...), which gives a grouped output, e.g.
  utilities
    fixFiles
      no file paths
        ✓ generates empty report
      JavaScript syntax
        ✓ fixes syntax error (554ms)

  utilities
    fixText
      unrecognized syntax
        ✓ throws an error
      JavaScript syntax
        ✓ fixes syntax error (88ms)
        invalid syntax
          ✓ throws an error

  utilities
    lintFiles
      no file paths
        ✓ generates empty report

  utilities
    lintText
      unrecognized syntax
        ✓ throws an error

The problem with this pattern is that my tests are nested in many functions, requiring a lot of levels of indentation. It could be made a lot simpler if describe would accept an array of descriptions that describe different levels, e.g. original code could be re-written to be:
describe(['utilities', 'fixText'], () => {
    context('unrecognized syntax', () => {
        it('throws an error', () => {
            expect(() => {
                fixText('', {
                    syntax: 'java'
                });
            }).to.throw(Error, 'Unknown syntax ""java"".');
        });
    });
    context('JavaScript syntax', () => {
        context('invalid syntax', () => {
            it('throws an error', () => {
                expect(() => {
                    fixText('let foo;<>;;', {
                        syntax: 'js'
                    });
                }).to.throw(Error, 'Parsing error: Unexpected token (line: 1, column: 10).');
            });
        });
        it('fixes syntax error', () => {
            const report = fixText('let foo;;;', {
                syntax: 'js'
            });

            expect(report).to.equal('let foo;\n');
        });
    });
});",gajus,NONE,2016-03-14 16:48:59+00:00,True,2016-03-15 16:54:26+00:00,1.0,,2,7,2016-03-15 15:33:00+00:00,0.95,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2156,Problem with --use_strict,"Trying to use --use_strict option:
$ ./node_modules/mocha/bin/mocha --use_strict tests/integration/contractor/account.js
/home/nbasov/Documents/~SSPlatform/ssp-api/node_modules/mocha/bin/_mocha:355
  function loadAndRun() {
  ^^^^^^^^
SyntaxError: In strict mode code, functions can only be declared at top level or immediately within another function.
    at exports.runInThisContext (vm.js:73:16)
    at Module._compile (module.js:443:25)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:501:10)
    at startup (node.js:129:16)
    at node.js:814:3

But works good when using ""_mocha"":
$ ./node_modules/mocha/bin/_mocha --use_strict tests/integration/contractor/account.js
...
  3 passing (659ms)

Is it possible to use --use_strict with mocha not _mocha?
mocha 2.4.5
node: 0.12.4
npm: 2.10.1",nbasov,NONE,2016-03-15 08:06:49+00:00,True,2016-03-15 15:24:42+00:00,0.3,,2,1,2016-03-15 15:24:29+00:00,0.3,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2157,"Test is passing without running when putting "".only"" on ""it""","We worked with old mocha (1.18.2) and decided to upgrade to the latest.
Then, we saw that some tests are passing without even running.
We found that this regression started in mocha version 2.4.1 (it worked on 2.3.4, stopped working on 2.4.1 and also on latest).
This is a simple tests that reproduce the issue:
it.only('mocha test', function() {
    var addAppBtn = $('[debugId=""create-new-app-btn""]');
    addAppBtn.click();      
    // You see this console.log on both 2.3.4 and 2.4.1,
    // but on 2.4.1 the test stop right after it, not doing the rest of the actions.
    console.log('HERE');

    var appNameElem = $('[debugId=""new-app-name-input""]');
    appNameElem.clear();
    appNameElem.sendKeys('new app');
    var okBtn = $('[debugId=""ok0-btn""]');
    okBtn.click();
});

We didn't see any relevant breaking change in the mocha change logs, unless we missed it.
Any idea how this should be resolved / what's the issue here?",benbracha,NONE,2016-03-15 15:24:47+00:00,True,2016-03-22 10:07:46+00:00,6.78,,6,25,2016-03-15 15:36:19+00:00,0.01,danielstjules,CONTRIBUTOR,0,2,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2159,Indent all lines on message,"As discussed at BadgeLabs/mocha-eslint#38 (comment) mocha only indent the first line of the report message, making it ugly since it gets unaligned with the mocha output. I've also seen that the code to indent the message is duplicated in several of the reporters, so if you like the idea I could try to unify them and implement it myself.
/cc @Turbo87",piranna,NONE,2016-03-17 08:25:35+00:00,False,,,,5,3,2016-03-21 02:53:20+00:00,3.77,danielstjules,CONTRIBUTOR,0,2,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2160,Tests are not executing if global.process is set to undefined in NodeJS,"If process variable is overridden in beforeEach with undefined, no tests from this suite are executed, and no failures are visible.
here's a minimal failing example:
""use strict"";

var assert = require('assert');

describe(""global process variable overriden"", function() {
  var overriddenProcess;
  beforeEach(function() {
    overriddenProcess = process;
    process = undefined; // commenting out this line causes test case to be executed
  });

  afterEach(function() {
    process = overriddenProcess;
    overriddenProcess = undefined;
  });

  it('causes no tests to be executed', function(done) {
    assert(true);
    done();
  });
});
In case you wonder why would I do such a thing: ultimately, I want to port my project (asynchronous time forwarding library: https://github.com/Lewerow/zurvan) to the browser. However, since right now I'm not able to set up entire CI infrastructure for the browser (since most probably it won't work now anyway, as in the beginning I was writing a library dedicated for Node.js), I'm trying to add tests in Node.js that would verify that the library is able to run without some assumptions that can be made for Node.js - such as existence of process variable.",tlewowski,NONE,2016-03-17 20:27:09+00:00,True,2016-03-21 03:08:05+00:00,3.28,,2,3,2016-03-17 20:31:27+00:00,0.0,tlewowski,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2161,Example doesn't work from mocha website doesn't work for me,"describe('Blog Model', function() {
  describe('#save()', function() {
    it('should save', function (done) {
      let blogpost = new Blog({
        title: 'Foobar',
        plaintextcontent: 'foobar',
        htmlcontent: '<p> Hello! </p>'
      })

      blogpost.save(function (err) {
        if (err) throw err
        done()
      })
    })
  })
})

I get Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
Shouldn't the done() callback be executed? This is probably the wrong place to ask this question but, man, I feel stupid and frustrated every time I try to use Mocha. My code works as far as being feature complete and functional but, for the life of me, I can't figure out how to get my unit tests to pass and I've been through three dozen half-complete stack overflow posts and a dozen blog articles.
I'm using Mongoose and my model looks like this:
'use strict'

var mongoose = require('mongoose')
var uniqueValidator = require('mongoose-unique-validator')

let blogSchema = new mongoose.Schema({
  title: { type: String, required: true, unique: true },
  htmlcontent: String,
  plaintextcontent: String,
  date: { type: Date, default: Date.now },
  published: Boolean
})

blogSchema.plugin(uniqueValidator)

module.exports = mongoose.model('Blog', blogSchema

And how I'm consuming it in my controllers:
  postBlogNew: function (req, res) {
    let content = req.body.blogcontent

    let blogpost = new Blog({
      title: req.body.blogtitle,
      plaintextcontent: content,
      htmlcontent: markdown.toHTML(content)
    })

    blogpost.save(function (err) {
      if (err) {
        req.flash('errors', { msg: 'Error saving blog post' })
      } else {
        req.flash('success', { msg: 'Success! Blog post created' })
        return res.redirect('/blog')
      }
    })
  },

Everything works like how I want it to except I can't figure out how to unit test it.
Mocha 2.3.4
Mongoose 4.3.5",howdoicomputer,NONE,2016-03-18 08:40:33+00:00,True,2016-03-19 20:23:21+00:00,1.49,,1,1,2016-03-18 08:52:50+00:00,0.01,howdoicomputer,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2163,Ignoring browser-related variables while frontend testing react + redux app,"I'm currently using mocha for frontend testing my react/redux app.
It seems like whenever there are browser-related variables in my functions, the test fails.
For example, one of my functions looks like this:
export const loginUserSuccess = (token, user) => {
    localStorage.setItem('token', token); // browser-related variable here
    return {
        type: LOGIN_USER_SUCCESS,
        payload: {
            token: token,
            user: user
        }
    }
}

Note my use of localStorage. This variable is obviously not available while testing, so any test that happens to trigger the loginUserSuccess action never passes. To be honest I don't need to test the localStorage logic -- I just want the action to return the correct thing. But even if I do something like this:
if (localStorage) localStorage.setItem('token', token);
I still get an error saying localStorage is undefined. How can I get the testing module to ignore certain variables? I also get an error when I call the global window.",Robinnnnn,NONE,2016-03-21 17:06:31+00:00,True,2017-08-25 02:24:41+00:00,521.39,,4,4,2016-04-10 04:25:15+00:00,19.47,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['browser', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2165,Context in before differs when it's in a nested describe vs top level,"Hey all, I am trying to wrap my head around the contexts in the before hooks.
One discrepancy I noticed was the following


As you can see, for the first before hook in the top-level describe ""currentTest"" is undefined as we would probably expect, since before() hooks don't pertain to a particular test.
But what I didn't except was in the nested describe, the before hook 'this' value has ""currentTest"" defined. When I inspected with the debugger I could verify this. Why is this the case? Perhaps explaining this might help me understand Mocha contexts. Thanks!",ORESoftware,NONE,2016-03-23 04:46:22+00:00,True,2016-03-23 05:35:03+00:00,0.03,,2,3,2016-03-23 04:49:11+00:00,0.0,ORESoftware,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2166,Failing Tests display twice in HTML,"Here is a link to the jsfiddle.
Passing tests correctly pass and display only once.",sgnl,NONE,2016-03-25 19:20:24+00:00,True,2016-03-25 19:41:20+00:00,0.01,,2,2,2016-03-25 19:41:20+00:00,0.01,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2167,Mocha 2.3.4: Errors That Occur Outside of `beforeEach`/`it` in an AMD Module Lose Stack Trace,"Short Version: If an error occurs inside a Mocha function inside an AMD module, but not inside a Mocha function that expects errors (eg. it), the stack trace of the error somehow gets eaten.
Reproduction Steps:
Step 1: npm install mocha
Step 2: create testMain.js (ie. a file which does nothing but use Require.js to import testFoo.js):
requirejs = require('node-requirejs').requirejs();
requirejs('testFoo');

Step 3: create testFoo.js (ie. a simple test file with errors thrown in unexpected places)
define([], function() {
    throw new Error('a: no trace');
    describe('Foo', () => {
        throw new Error('b: no trace');

        it('does bar', () => {
            throw new Error('c: has stack trace');
        });
    });
});

Step 4: run mocha testMain.js; you will get the following output (without a stack trace):
[Error: a: no trace]

NOTE 1: The stack trace is also lost if you comment out error ""a"" and make it to error ""b""
NOTE 2: The stack trace is NOT lost if you comment out the first two errors and make it to error ""c"".
NOTE 3: The stack trace is also not lost if you throw a new error before the mocha code starts (ie. if you throw new Error('d') before the define).
Obviously it's very hard to debug a problem when this happens (you have to resort to ""delete debugging"", ie. removing random chunks of modified code until the error goes away), so if there's any way Mocha could provide a stack trace under these conditions it would be very helpful.
P.S.  I suppose one could argue that this is a Require.js problem, not a Mocha problem.  However, the fact that everything works as expected outside Mocha in an AMD environment, or inside an AMD environment inside an  it/after/beforeEach/etc., but not inside the other Mocha functions, suggests that Mocha is doing something in those functions that's the root cause of the issue (even though Requirejs/AMD does seem to be a key component).",machineghost,NONE,2016-03-25 21:06:34+00:00,False,,,,3,1,2017-10-17 04:24:34+00:00,570.3,stale,NONE,0,0,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2169,"Mocha crashes silently, and there's no guaranteed change in output when Mocha shows test results normally","I've spent time trying to ""fix"" working code because Mocha has silently crashed and is showing an old report. I can't easily see that saving a file isn't running the tests because normally the only thing that changes is the milliseconds, and that's subtle and doesn't always happen anyway.
In lieu of Mocha not crashing silently, it would be helpful if it made it more obvious when tests have run. For the moment, I've put:
tests
    ✓ are working if number changing: 0.5267636976204813

but I want something more visible (I might make the number length change if the digits changing doesn't work for me).",willnwhite,NONE,2016-03-27 10:43:16+00:00,True,2017-10-31 08:23:08+00:00,582.9,,3,1,2017-10-17 04:24:33+00:00,568.74,stale,NONE,0,0,0,1,"['needs-mcve', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
2171,expect().fail not working,"npm install q expect.js mocha

var expect = require('expect.js');
var Q = require('q');

describe('issue', function () {
    it('Q.reject', function (done) {
        Q.reject('fail')
         .catch(function () {
            expect().fail('XX');
         })
         .fin(done);
    });
});
➜  issue node_modules/.bin/mocha main.js


  issue
    ✓ Q.reject


  1 passing (20ms)",leeight,NONE,2016-03-29 01:28:30+00:00,True,2016-06-16 01:58:36+00:00,79.02,,2,2,2016-06-09 00:26:09+00:00,71.96,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2174,"Glob difficulties: {app,src}/**/*.spec.js not working","Hello!
This works:
mocha app/**/*.spec.js
mocha src/**/*.spec.js

This does not:
mocha {app,src}/**/*.spec.js

Neither does this:
mocha app/**/*.spec.js src/**/*.spec.js

The error is… completely free of new lines. I also don't understand it.
Here it is:
error: uncaughtException: Cannot read property 'protocol' of undefined date=Tue Mar 29 2016 16:09:44 GMT+0100 (BST), pid=57513, uid=501, gid=20, cwd=/Users/callumacrae/Sites/lmn/phoenix, execPath=/Users/callumacrae/.nvm/versions/node/v4.3.2/bin/node, version=v4.3.2, argv=[/Users/callumacrae/.nvm/versions/node/v4.3.2/bin/node, /Users/callumacrae/.npm/lib/node_modules/mocha/bin/_mocha, --require, should, --require, ./test/setup, app/app.spec.js, app/lib/assets.spec.js, app/lib/eagleRequest.spec.js, app/lib/lang.spec.js, src/js/partials/BarTabs/duck.spec.js, src/js/partials/BarTabs/index.spec.js, src/js/partials/BookPreview/index.spec.js, src/js/partials/Dedication/DedicationSave.spec.js, src/js/partials/Dedication/index.spec.js, src/js/partials/GiftOption/index.spec.js, src/js/partials/GiftOptionList/duck.spec.js, src/js/partials/GiftOptionList/index.spec.js, src/js/partials/LMNChildFields/duck.spec.js, src/js/store/customisation/characters.duck.spec.js, src/js/store/customisation/dedication.duck.spec.js, src/js/store/preview/overlay.duck.spec.js], rss=242008064, heapTotal=202270048, heapUsed=162439064, loadavg=[2.47021484375, 2.6083984375, 2.54443359375], uptime=2411355, trace=[column=41, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server.js, function=null, line=39, method=null, native=false, column=2, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server.js, function=, line=247, method=null, native=false, column=26, file=module.js, function=Module._compile, line=409, method=_compile, native=false, column=10, file=module.js, function=Module._extensions..js, line=416, method=_extensions..js, native=false, column=7, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js, function=Object.require.extensions.(anonymous function) [as .js], line=134, method=require.extensions.(anonymous function) [as .js], native=false, column=32, file=module.js, function=Module.load, line=343, method=load, native=false, column=12, file=module.js, function=Function.Module._load, line=300, method=Module._load, native=false, column=17, file=module.js, function=Module.require, line=353, method=require, native=false, column=17, file=internal/module.js, function=require, line=12, method=null, native=false, column=9, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server_with_clock.js, function=loadDependencies, line=89, method=null, native=false, column=9, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server_with_clock.js, function=null, line=97, method=null, native=false, column=2, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server_with_clock.js, function=, line=101, method=null, native=false, column=26, file=module.js, function=Module._compile, line=409, method=_compile, native=false, column=10, file=module.js, function=Module._extensions..js, line=416, method=_extensions..js, native=false, column=7, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js, function=Object.require.extensions.(anonymous function) [as .js], line=134, method=require.extensions.(anonymous function) [as .js], native=false, column=32, file=module.js, function=Module.load, line=343, method=load, native=false, column=12, file=module.js, function=Function.Module._load, line=300, method=Module._load, native=false, column=17, file=module.js, function=Module.require, line=353, method=require, native=false, column=17, file=internal/module.js, function=require, line=12, method=null, native=false, column=9, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/sandbox.js, function=loadDependencies, line=149, method=null, native=false, column=9, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/sandbox.js, function=null, line=161, method=null, native=false, column=2, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/sandbox.js, function=, line=168, method=null, native=false, column=26, file=module.js, function=Module._compile, line=409, method=_compile, native=false, column=10, file=module.js, function=Module._extensions..js, line=416, method=_extensions..js, native=false, column=7, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js, function=Object.require.extensions.(anonymous function) [as .js], line=134, method=require.extensions.(anonymous function) [as .js], native=false, column=32, file=module.js, function=Module.load, line=343, method=load, native=false, column=12, file=module.js, function=Function.Module._load, line=300, method=Module._load, native=false, column=17, file=module.js, function=Module.require, line=353, method=require, native=false, column=17, file=internal/module.js, function=require, line=12, method=null, native=false, column=9, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon.js, function=loadDependencies, line=29, method=null, native=false, column=9, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon.js, function=null, line=40, method=null, native=false, column=2, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon.js, function=, line=47, method=null, native=false, column=26, file=module.js, function=Module._compile, line=409, method=_compile, native=false, column=10, file=module.js, function=Module._extensions..js, line=416, method=_extensions..js, native=false, column=7, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js, function=Object.require.extensions.(anonymous function) [as .js], line=134, method=require.extensions.(anonymous function) [as .js], native=false, column=32, file=module.js, function=Module.load, line=343, method=load, native=false, column=12, file=module.js, function=Function.Module._load, line=300, method=Module._load, native=false, column=17, file=module.js, function=Module.require, line=353, method=require, native=false, column=17, file=internal/module.js, function=require, line=12, method=null, native=false, column=1, file=index.spec.js, function=, line=2, method=null, native=false, column=26, file=module.js, function=Module._compile, line=409, method=_compile, native=false, column=5, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js, function=loader, line=126, method=null, native=false, column=7, file=/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js, function=Object.require.extensions.(anonymous function) [as .js], line=136, method=require.extensions.(anonymous function) [as .js], native=false, column=32, file=module.js, function=Module.load, line=343, method=load, native=false, column=12, file=module.js, function=Function.Module._load, line=300, method=Module._load, native=false, column=17, file=module.js, function=Module.require, line=353, method=require, native=false, column=17, file=internal/module.js, function=require, line=12, method=null, native=false, column=27, file=/Users/callumacrae/.npm/lib/node_modules/mocha/lib/mocha.js, function=null, line=185, method=null, native=false, column=null, file=null, function=Array.forEach, line=null, method=forEach, native=true, column=14, file=/Users/callumacrae/.npm/lib/node_modules/mocha/lib/mocha.js, function=Mocha.loadFiles, line=182, method=loadFiles, native=false, column=31, file=/Users/callumacrae/.npm/lib/node_modules/mocha/lib/mocha.js, function=Mocha.run, line=394, method=run, native=false, column=16, file=/Users/callumacrae/.npm/lib/node_modules/mocha/bin/_mocha, function=, line=394, method=null, native=false, column=26, file=module.js, function=Module._compile, line=409, method=_compile, native=false, column=10, file=module.js, function=Object.Module._extensions..js, line=416, method=Module._extensions..js, native=false, column=32, file=module.js, function=Module.load, line=343, method=load, native=false, column=12, file=module.js, function=Function.Module._load, line=300, method=Module._load, native=false, column=10, file=module.js, function=Function.Module.runMain, line=441, method=Module.runMain, native=false, column=18, file=node.js, function=startup, line=134, method=null, native=false, column=3, file=node.js, function=null, line=962, method=null, native=false], stack=[TypeError: Cannot read property 'protocol' of undefined,     at /Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server.js:39:41,     at Object.<anonymous> (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server.js:247:2),     at Module._compile (module.js:409:26),     at Module._extensions..js (module.js:416:10),     at Object.require.extensions.(anonymous function) [as .js] (/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js:134:7),     at Module.load (module.js:343:32),     at Function.Module._load (module.js:300:12),     at Module.require (module.js:353:17),     at require (internal/module.js:12:17),     at loadDependencies (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server_with_clock.js:89:9),     at /Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server_with_clock.js:97:9,     at Object.<anonymous> (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/util/fake_server_with_clock.js:101:2),     at Module._compile (module.js:409:26),     at Module._extensions..js (module.js:416:10),     at Object.require.extensions.(anonymous function) [as .js] (/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js:134:7),     at Module.load (module.js:343:32),     at Function.Module._load (module.js:300:12),     at Module.require (module.js:353:17),     at require (internal/module.js:12:17),     at loadDependencies (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/sandbox.js:149:9),     at /Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/sandbox.js:161:9,     at Object.<anonymous> (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon/sandbox.js:168:2),     at Module._compile (module.js:409:26),     at Module._extensions..js (module.js:416:10),     at Object.require.extensions.(anonymous function) [as .js] (/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js:134:7),     at Module.load (module.js:343:32),     at Function.Module._load (module.js:300:12),     at Module.require (module.js:353:17),     at require (internal/module.js:12:17),     at loadDependencies (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon.js:29:9),     at /Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon.js:40:9,     at Object.<anonymous> (/Users/callumacrae/Sites/lmn/phoenix/node_modules/sinon/lib/sinon.js:47:2),     at Module._compile (module.js:409:26),     at Module._extensions..js (module.js:416:10),     at Object.require.extensions.(anonymous function) [as .js] (/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js:134:7),     at Module.load (module.js:343:32),     at Function.Module._load (module.js:300:12),     at Module.require (module.js:353:17),     at require (internal/module.js:12:17),     at Object.<anonymous> (index.spec.js:2:1),     at Module._compile (module.js:409:26),     at loader (/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js:126:5),     at Object.require.extensions.(anonymous function) [as .js] (/Users/callumacrae/Sites/lmn/phoenix/node_modules/babel-register/lib/node.js:136:7),     at Module.load (module.js:343:32),     at Function.Module._load (module.js:300:12),     at Module.require (module.js:353:17),     at require (internal/module.js:12:17),     at /Users/callumacrae/.npm/lib/node_modules/mocha/lib/mocha.js:185:27,     at Array.forEach (native),     at Mocha.loadFiles (/Users/callumacrae/.npm/lib/node_modules/mocha/lib/mocha.js:182:14),     at Mocha.run (/Users/callumacrae/.npm/lib/node_modules/mocha/lib/mocha.js:394:31),     at Object.<anonymous> (/Users/callumacrae/.npm/lib/node_modules/mocha/bin/_mocha:394:16),     at Module._compile (module.js:409:26),     at Object.Module._extensions..js (module.js:416:10),     at Module.load (module.js:343:32),     at Function.Module._load (module.js:300:12),     at Function.Module.runMain (module.js:441:10),     at startup (node.js:134:18),     at node.js:962:3]
Any ideas what's wrong? How can I fix this?",callumacrae,CONTRIBUTOR,2016-03-29 15:11:41+00:00,True,2016-03-30 14:28:13+00:00,0.97,,1,1,2016-03-30 14:28:13+00:00,0.97,callumacrae,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2176,cli don't watch new added file,"let's say there is one file name  a.js in a dictionary test
my test script mocha test/*.js -w
when i change a.js and save ,mocha will restart;
but when i add a new b.js in test ,mocha won't restart;",p2227,NONE,2016-03-30 02:20:10+00:00,False,,,,10,8,2016-04-16 05:51:28+00:00,17.15,jordanmkoncz,NONE,0,1,0,7,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2177,Mocha throw error with npm `run-script` command,"Hi,
I'm using mocha 2.4.5 and I get the following error only when i use the npm run-script command line:
My package.json scripts:
{
  ""scripts"": {
    ""test"": ""mocha -d -c --compilers js:babel-core/register --recursive test"",
    ""test:watch"": ""npm test -- --watch""
  }
}

My test.js file:
import {assert} from 'chai';

describe('addition', () => {
    it('should return the correct result', () => {
        assert.equal(1 + 1, 1);
        assert.equal(1 + 1, 2);
    });
});

The result:
pc-if24:app fgirardey$ npm run-script test

> my-project@0.1.0 test /Users/fgirardey/my-project/app
> mocha -d -c --compilers js:babel-core/register --recursive test

Debugger listening on port 5858


  addition
    1) should return the correct result


  0 passing (93ms)
  1 failing

  1) addition should return the correct result:
     AssertionError: expected 2 to equal 1
      at Context.<anonymous> (test.js:5:10)




npm ERR! Darwin 15.4.0
npm ERR! argv ""/Users/fgirardey/.nvm/versions/node/v4.4.1/bin/node"" ""/Users/fgirardey/.nvm/versions/node/v4.4.1/bin/npm"" ""run-script"" ""test""
npm ERR! node v4.4.1
npm ERR! npm  v2.14.20
npm ERR! code ELIFECYCLE
npm ERR! my-project@0.1.0 test: `mocha -d -c --compilers js:babel-core/register --recursive test`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the my-project@0.1.0 test script 'mocha -d -c --compilers js:babel-core/register --recursive test'.
npm ERR! This is most likely a problem with the my-project package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     mocha -d -c --compilers js:babel-core/register --recursive test
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs my-project
npm ERR! Or if that isn't available, you can get their info via:
npm ERR! 
npm ERR!     npm owner ls my-project
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/fgirardey/my-project/app/npm-debug.log

Is it normal to have all these errors?",fgirardey,NONE,2016-03-31 10:20:17+00:00,True,2016-04-13 09:55:49+00:00,12.98,,3,6,2016-04-13 09:55:49+00:00,12.98,dasilvacontin,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2179,beforeEach hook in describe behaves as a global hook,"For the following code:
var describe = require(""mocha"").describe;
var it = require(""mocha"").it;

describe(""describe1"", function() {
  beforeEach(function(done) {
    console.log(""hello before1"");
    done();
  });

  it(""should do stuff1"", function(done) {
    done();
  });
});

describe(""describe2"", function() {
  beforeEach(function(done) {
    console.log(""Hello before2"");
    done();
  });

  afterEach(function(done) {
    console.log(""Hello after2"");
    done();
  });

  it(""should do stuff2"", function(done) {
    done();
  });

  it(""should do more stuff2"", function(done) {
    done();
  });
});

Should the output be the following?
hello before1
Hello before2
    ✓ should do stuff1
Hello after2

  describe2
hello before1
Hello before2
    ✓ should do stuff2
Hello after2
hello before1
Hello before2
    ✓ should do more stuff2
Hello after2


  3 passing (11ms)

I believe beforeEach should run on the context of the describe? Thank you.",rportugal,NONE,2016-03-31 16:50:23+00:00,True,2016-04-01 13:40:28+00:00,0.87,,1,2,2016-03-31 16:53:19+00:00,0.0,rportugal,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2180,Update glob dependency ,"mocha still depends on glob@3.2.3 when the version 7.0.3 is out
Having mocha to depend on glob@3.2.3 means that graceful-fs is still at version 2.0.3, so the following warning is shown:
npm WARN deprecated graceful-fs@2.0.3: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.",denysvitali,NONE,2016-04-01 07:46:45+00:00,True,2016-04-01 08:37:30+00:00,0.04,,2,1,2016-04-01 08:37:30+00:00,0.04,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2183,Does not show diff when contains any Symbol,"expect({ 
      a: Symbol('test'),
      b: 'bar',
    }).to.deep.equal({ 
      a: 'foo', 
      b: 'bar',
    })
Fails but does not show the diff.
If Symbol('test') is replaced by 'test', It works",bigomega,NONE,2016-04-02 10:37:56+00:00,False,,,,7,7,2016-04-27 09:22:09+00:00,24.95,danielstjules,CONTRIBUTOR,0,3,0,3,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2185,"Ignore "".only"" by config","What do you think about an option to ignore "".only"" by config. This can be useful if a developer forget and commit such code, but in build we want to execute all tests.",amiram,NONE,2016-04-04 07:12:33+00:00,True,2016-04-13 10:06:52+00:00,9.12,,3,4,2016-04-13 00:24:24+00:00,8.72,jiangyang,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2187,mocha-typescript,Do you think this may gain traction: https://www.npmjs.com/package/mocha-typescript,FireSt-dead,NONE,2016-04-05 13:44:21+00:00,True,2016-04-27 09:22:45+00:00,21.82,,2,1,2016-04-27 09:22:45+00:00,21.82,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2188,Mocha programmatic API doesn't report retries,"When using Mocha programmatically with the new retries feature, tests that fail the first time but eventually succeed are not marked as ""passed"" in the suite's tests array.
index.js:
var Mocha = require('mocha');
var mocha = new Mocha({
  retries: 1
});
mocha.addFile('test.js');
mocha.run().on('suite end', function(suite) {
  console.dir(suite);
});
test.js:
var currentRun = 0;

it('should mark tests that succeed on 2nd try as ""passed""', function() {
  currentRun++;
  console.log('running test');
  if (currentRun === 1) {
    console.log('failing test');
    throw new Error('hi');
  }
  console.log('passing test');
});
Output:
running test
failing test
running test
passing test
  ✓ should mark tests that succeed on 2nd try as ""passed""
Suite {
  title: '',
  ctx: 
   Context {
     _runnable: 
      Test {
        title: 'should mark tests that succeed on 2nd try as ""passed""',
        fn: [Function],
        async: 0,
        sync: true,
        _timeout: 2000,
        _slow: 75,
        _enableTimeouts: true,
        timedOut: false,
        _trace: [Error: done() called multiple times],
        _retries: 1,
        _currentRetry: 1,
        pending: false,
        type: 'test',
        body: 'function () {\n  currentRun++;\n  console.log(\'running test\');\n  if (currentRun === 1) {\n    console.log(\'failing test\');\n    throw new Error(\'hi\');\n  }\n  console.log(\'passing test\');\n}',
        _allowedGlobals: undefined,
        parent: [Circular],
        file: '/Users/claytonwatts/dev/domo/domoweb/DomoWeb/test.js',
        ctx: [Circular],
        _events: [Object],
        _eventsCount: 1,
        callback: [Function: done],
        duration: 0,
        state: 'passed',
        speed: 'fast' },
     test: 
      Test {
        title: 'should mark tests that succeed on 2nd try as ""passed""',
        fn: [Function],
        async: 0,
        sync: true,
        _timeout: 2000,
        _slow: 75,
        _enableTimeouts: true,
        timedOut: false,
        _trace: [Error: done() called multiple times],
        _retries: 1,
        _currentRetry: 1,
        pending: false,
        type: 'test',
        body: 'function () {\n  currentRun++;\n  console.log(\'running test\');\n  if (currentRun === 1) {\n    console.log(\'failing test\');\n    throw new Error(\'hi\');\n  }\n  console.log(\'passing test\');\n}',
        _allowedGlobals: undefined,
        parent: [Circular],
        file: '/Users/claytonwatts/dev/domo/domoweb/DomoWeb/test.js',
        ctx: [Circular],
        _events: [Object],
        _eventsCount: 1,
        callback: [Function: done],
        duration: 0,
        state: 'passed',
        speed: 'fast' } },
  suites: [],
  tests: 
   [ Test {
       title: 'should mark tests that succeed on 2nd try as ""passed""',
       async: 0,
       sync: true,
       _timeout: 2000,
       _slow: 75,
       _enableTimeouts: true,
       timedOut: false,
       _trace: [Error: done() called multiple times],
       _retries: 1,
       _currentRetry: 0,
       pending: false,
       type: 'test',
       body: 'function () {\n  currentRun++;\n  console.log(\'running test\');\n  if (currentRun === 1) {\n    console.log(\'failing test\');\n    throw new Error(\'hi\');\n  }\n  console.log(\'passing test\');\n}',
       file: '/Users/claytonwatts/dev/domo/domoweb/DomoWeb/test.js',
       parent: [Circular],
       ctx: [Object],
       _events: [Object],
       _eventsCount: 1,
       callback: [Function: done],
       duration: 0 } ],
  pending: false,
  _beforeEach: [],
  _beforeAll: [],
  _afterEach: [],
  _afterAll: [],
  root: true,
  _timeout: 2000,
  _enableTimeouts: true,
  _slow: 75,
  _bail: undefined,
  _retries: 1,
  delayed: false,
  _events: { 'pre-require': [ [Function], [Function] ] },
  _eventsCount: 1 }

  1 passing (22ms)

Notice that the test objects in Context are correctly marked with state: ""passed"", but the one in the tests array is from the first run (note _currentRetry: 0) and has no state property.",cletusw,NONE,2016-04-05 20:27:34+00:00,False,,,,6,14,2016-04-05 20:28:16+00:00,0.0,cletusw,NONE,1,1,0,4,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2189,Assertion errors catched in next test when mocha timeout is applicated,"Hi guys,
I'm having troubles with assertions in mocha, which are thrown after mocha timeout and are catched in next running tests.
Example code:
file testA.js
var assert = require('assert');

module.exports = {
    'Test A': {
        before: function (done) {
            done();
        },
        'Test step': function (done) {
            this.timeout(5000);
            setTimeout(function (err) {
                assert(false, 'My assertion error!');
                done();
            }, 10000);

        },
        'Test step 2': function (done) {
            done();
        },
        after: function (done) {
            done();
        }
    }
};
file testB.js
module.exports = {
    'Test B': {
        before: function (done) {
            done();
        },
        'Test step': function (done) {
            this.timeout(25000);
            setTimeout(function (err) {
                done();
            }, 20000);
        },
        'Test step 2': function (done) {
            done();
        },
        after: function (done) {
            done();
        }
    }
};
If I run mocha -u exports . I get:
 Test A
    1) Test step
    ✓ Test step 2

  Test B
    2) Test step
    ✓ Test step 2


  2 passing (10s)
  2 failing

  1) Test A Test step:
     Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test.


  2) Test B Test step:

      Uncaught AssertionError: My assertion error!
      + expected - actual

      -false
      +true

      at null._onTimeout (TestA.js:15:5)


Problem here is a fact, that assertion error is in testA and I don't want to have it in testB.
Do you have any suggestion how to solve this?
Using:
mocha 2.4.5 with node LTS v4.4.1",mpetrak,NONE,2016-04-06 13:45:13+00:00,True,2016-04-27 09:12:35+00:00,20.81,,3,5,2016-04-12 05:51:55+00:00,5.67,mpetrak,NONE,0,2,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2190,Callback for timed out async call run for different test,"Hi,
We are running mocha  and need  to wait for one test file to be done before the next one is run.
For example

In the before hook for test file 1 we have a an asynchronous login ( using chaiHttp) and load test data.
Before that file is done we log in using another test Fiile and make calls to the same db
Now in the first test file the expected data is overwritten with data from the second test file .

A related stack overflow post is here:
http://stackoverflow.com/questions/26027890/running-two-different-test-files-sequentially-in-mocha
Thanks,
Deepak",deepakmani,NONE,2016-04-06 17:01:00+00:00,True,2017-10-31 08:23:10+00:00,572.64,,5,8,2016-04-06 18:08:12+00:00,0.05,danielstjules,CONTRIBUTOR,1,2,0,3,"['needs-feedback', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2191,How do I know if `beforeEach` is before which task?,"I have gone through the docs and issues here but I can't find related information. Basically I wanna do something like this:
beforeEach(function() {
  if (this.testId === 1) {
    console.log('before test 1');
  }
  if (this.testId === 2) {
    console.log('before test 2');
  }
  if (this.testId <= 3) {
    console.log('before test 1, 2 and 3');
  }
  console.log('before every test');
});
Is it possible? Or am i using the wrong approach? Thanks.",stevemao,NONE,2016-04-07 02:04:28+00:00,True,2017-08-12 14:29:56+00:00,492.52,,4,3,2016-04-27 09:06:05+00:00,20.29,danielstjules,CONTRIBUTOR,0,1,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2192,2 support questions,"Two questions that I couldn't find answers to in the dox
Question 1 -  if there is a before/after hook, but no applicable test cases, the hooks don't run - does the same apply when the tests are stubbed out / ""pending"" ?
It appears that the hooks do in fact run for pending tests, and that seems inconsistent. For example:
describe('a', function () {

    before(function(){
        console.log('before this a:', this.parent);
    });

    after(function  () {

        console.log('after this a:', this.parent);

    });

    it('a');

});
Question 2 - The docs make it clear that we can stub out tests, but my question is can we stub out hooks too? Would be curious, thanks.",ORESoftware,NONE,2016-04-07 02:33:26+00:00,True,2016-04-27 09:03:23+00:00,20.27,,2,1,2016-04-27 09:03:23+00:00,20.27,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2193,nodejs logs dirtied the report xml file,"when I run mocha --recursive -R xunit test > test-reports.xml
the report is not formal xml format and jenkins can not open it with Junit\xunit plugin, the report  looks like below
Listening on port 8079 upload file to : app/1362726851/9089e1faceac11d2767dad24ca410928.png ,success <testsuite name=""Mocha Tests"" tests=""98"" failures=""3"" errors=""3"" skipped=""0"" timestamp=""Fri, 08 Apr 2016 09:21:03 GMT"" time=""6.467""> <testcase classname=""addAdopt"" name=""cookieId null"" time=""0.065""/> .......
how can I fix this?",fanguigui,NONE,2016-04-08 09:24:25+00:00,False,,,,2,0,,,,,0,0,0,0,"['confirmed-bug', 'reporter', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2194,Feature request: better error reporting when mocha can't find tests (getting started),"The getting started tutorial on the home page looks pretty simple, but if you put the test in a different directory than ""test"" it's suddenly not very friendly:
/usr/local/lib/node_modules/mocha/lib/utils.js:628
throw new Error(""cannot resolve path (or pattern) '"" + path + ""'"");
^
Error: cannot resolve path (or pattern) 'test'
at Object.lookupFiles (/usr/local/lib/node_modules/mocha/lib/utils.js:628:15)
at /usr/local/lib/node_modules/mocha/bin/_mocha:326:30
at Array.forEach (native)
at Object. (/usr/local/lib/node_modules/mocha/bin/_mocha:325:6)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Function.Module.runMain (module.js:447:10)
at startup (node.js:142:18)
at node.js:939:3",richburdon,NONE,2016-04-08 14:12:53+00:00,True,2016-09-18 22:06:13+00:00,163.33,,5,4,2016-08-16 23:35:41+00:00,130.39,govind999,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2195,Feature request: better error reporting when mocha can't find tests (getting started),"The getting started tutorial on the home page looks pretty simple, but if you put the test in a different directory than ""test"" it's suddenly not very friendly:
/usr/local/lib/node_modules/mocha/lib/utils.js:628
throw new Error(""cannot resolve path (or pattern) '"" + path + ""'"");
^
Error: cannot resolve path (or pattern) 'test'
at Object.lookupFiles (/usr/local/lib/node_modules/mocha/lib/utils.js:628:15)
at /usr/local/lib/node_modules/mocha/bin/_mocha:326:30
at Array.forEach (native)
at Object. (/usr/local/lib/node_modules/mocha/bin/_mocha:325:6)
at Module._compile (module.js:413:34)
at Object.Module._extensions..js (module.js:422:10)
at Module.load (module.js:357:32)
at Function.Module._load (module.js:314:12)
at Function.Module.runMain (module.js:447:10)
at startup (node.js:142:18)
at node.js:939:3",richburdon,NONE,2016-04-08 14:18:18+00:00,True,2016-04-27 08:58:44+00:00,18.78,,2,1,2016-04-27 08:58:44+00:00,18.78,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2196,Tests directory,"No docs on how to change from the default ""test"" directory.

By default, mocha looks for the glob ./test/*.js, so you may want to put your tests in test/ folder.",richburdon,NONE,2016-04-08 14:20:11+00:00,True,2016-04-27 08:57:51+00:00,18.78,,3,4,2016-04-08 14:28:10+00:00,0.01,1j01,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2197,Async tests that must run sequentially.,"I'm trying to test some async calls under multiple test cases that must run sequentially.  So something like this:
describe ('case 1', () => {
  it('should test case 1 asynchronously', done => {
       // use setTimeout to run some async tests
       done();
  });
});

describe ('case 2, which should wait for 1 to finish', () => {
  it('should test case 2 asynchronously', done => {
       // use setTimeout to run some async tests
       done();
  });
});

Is there an easy way to tell the second ""it"" to wait until the first one has called done?
Thanks!
Alvaro",alvaro1728,NONE,2016-04-10 00:43:57+00:00,True,2016-04-10 19:15:35+00:00,0.77,,4,5,2016-04-10 04:50:37+00:00,0.17,boneskull,MEMBER,1,0,0,3,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2198,"Interface ""exports"" not working in browser","Getting error due to module not being defined, no tests detected because of that error in the JS file.
Windows 8.1, IE 11 & Firefox 45.0.1, Mocha 2.4.5
Works in Mocha commandline. Also works in browser if I use BDD interface instead of exports interface.
./index.html:
<!DOCTYPE html>
<html>
<head>

<link rel=""stylesheet"" href=""./node_modules/mocha/mocha.css"" />
<script src=""./node_modules/mocha/mocha.js""></script>
<script>mocha.setup(""exports"")</script>
<script src=""./test/X.js""></script>
<script>
document.addEventListener(""readystatechange"",function initialize(){
    if (document.readyState == ""interactive"") {
        mocha.checkLeaks()
        mocha.run()
        document.removeEventListener(""readystatechange"",initialize)
    }
})
</script>

</head>
<body>

<div id=""mocha""></div>

</body>
</html>
./test/X.js:
;(function(){""use strict""

module.exports = {
    ""foo"": function bar(done) {
        setTimeout(done,10)
    },
    ""bar"": function foo() {
        throw new Error(""FAILED TEST!"")
    }
}

}())",ScottFreeCode,CONTRIBUTOR,2016-04-10 05:36:11+00:00,True,2018-11-18 18:10:43+00:00,952.52,,3,3,2016-04-11 21:39:28+00:00,1.67,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['browser', 'documentation']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2200,Change jade dependency to pug after their renaming,"It was already mentioned in #1811, and the original discussion comes from pugjs/pug#2184.
At the moment, installing the latest mocha (2.4.5), we get the following warning:
npm WARN deprecated jade@0.26.3: Jade has been renamed to pug, please install the latest version of pug instead of jade
I wanted to take a shot at it but realized you've been using a 2012-old version of jade for reasons, and it looks like they haven't released old versions under the new name, so unless they do, it's not a trivial change.
Maybe a start could be requesting them to publish specific versions considering they have git tags for them...",astorije,CONTRIBUTOR,2016-04-11 00:51:48+00:00,True,2016-07-27 05:54:48+00:00,107.21,,14,30,2016-04-23 07:47:48+00:00,12.29,boneskull,MEMBER,1,7,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2202,In-page (HTML reporter) UX issues,"[EDITTED to update some of these.] There are points on which the HTML reporter could use a little more TLC and polish:

The ""100%"" in the upper-right is unlabelled; there should be some indication of what it's a percent of. Coverage? Tests run so far as a long testsuite runs (this would be self-evident while long test-suites are running, but not once they're done and especially not in short test-suites that are done almost immediately)? Tests run vs. pending tests/suites?
There's an unobvious difference between clicking suite/context names to grep and clicking tests to show their code. How would a user who has tried one know that something different would happen if (s)he were to do the other?
The triangle for grepping is highlighted when a test's name is hovered even though clicking then will not grep.
The test names that can be clicked on to show their code are the only thing that doesn't give a visual indication of clickability other than the cursor. Since so many other things can be clicked on, it's easy to overlook the cursor indication. Since the triangle for grepping on the other side of the page is highlighted when the test name is hovered, attention is actually drawn away from the test name where one would click to see the source code.
The triangles for grepping are far from the names with which they're associated and there's just blank space in between. This makes them both initially easy to miss and then hard to tell which lines up with what, except for the way they highlight when the name on the other end of the page is hovered, which is a difficult way to tell (have to keep the mouse on one end of the page while looking at the other for indications) -- and as already discussed causes other usability issues by making them less easy to miss in cases where they actually shouldn't be drawing attention.
[EDIT: Technically, clicking on the suite links doesn't indicate that they'll grep either... except for the URL in the browser status bar, which the triangles have too.] The triangles don't really indicate what they're for before you click on them and get the grepping action. The only relationship I can think of between the grepping and a triangle even knowing what they do is that it's meant to be an arrow for navigating into a structure; but since the stuff inside was already visible before the grepping, I don't think that really applies -- the triangle/arrow somehow means ""stop seeing other things"" more than ""go into this thing""... Granted it can be used with the same suite/context structure split across multiple files, in which case the matter of already having had the contents visible isn't applicable, but then similarly named structures from elsewhere are being pulled in so the notion of navigating into the structure that was clicked on doesn't fit well in that case either. [EDIT: I am no longer sure what I was talking about in the immediately preceding sentence!] (Plus -- although this is significantly more subjective than the rest of these points, there are lots of things that have more than one meaning in different backgrounds or contexts, but for what it's worth -- I've seen user-interfaces before where a triangle is used to indicate unfolding a hidden set of content, where the triangle rotates or flips as the content is pulled out or re-hidden, so my instinct is that triangles should be associated with showing the code. [EDIT: maybe if they pointed down instead of to the side. See comment.])
When grepping on a test by clicking the triangles, the test code is revealed briefly before the navigation to the grepped page, making it harder to figure out which of those two things is supposed to be performed by what method. [EDIT: I can no longer reproduce this; it might have been specific to a certain browser, but... I am guessing it has been fixed!]
The usefulness of grepping to a specific test in a specific suite structure is dubious altogether (unlike grepping to a suite/context, since a suite/context might be split across multiple test files); grepping to see all tests with the same name/description in a variety of suites might be handy instead, however. (Something similar may go for a sub-context within another context/suite, e.g. show the ""#slice"" suites on both String and Array.)",ScottFreeCode,CONTRIBUTOR,2016-04-11 23:50:22+00:00,False,,,,3,4,2016-04-22 12:28:44+00:00,10.53,mderijcke,NONE,0,1,0,2,"['browser', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2203,Promise handling not working in node v5.5.0,"Simple test:
it('should wait for the promise', function() {
  console.log(""foo..."")
  return new Promise(function(resolve, reject) {
    setTimeout(function () {
      console.log('bar.')
      resolve();
    }, 100);
  });
});
Using node v4.2.2, mocha waits for the promise to resolve and ""bar"" is printed to the console.  Using node v5.5.0, that does not occur.",danieldkim,NONE,2016-04-12 02:41:48+00:00,True,2016-04-14 19:54:05+00:00,2.72,,3,4,2016-04-12 02:44:31+00:00,0.0,danieldkim,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2204,Exports interface comment has wrong name,"In lib/interfaces/exports.js, the in-comment documentation is labelled ""TDD-style interface"".
Some possible/suggested accurate labels:

""Node-module-exports-style interface""
""Exports-style (as Node.js module) interface""
""JS structure interface through Node.js module export""",ScottFreeCode,CONTRIBUTOR,2016-04-12 04:10:06+00:00,True,2016-04-15 06:35:40+00:00,3.1,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2206,Inability to teardown globals on after hooks,"When run with --check-leaks, this test:
describe('geolocate', () => {
    before(() => global.navigator = {});
    after(() => delete global.navigator);

    it('should get the current position from navigator', () => {
        // Do nothing.
    });

});

fails with ""Error: global leak detected: navigator"", even though the after cleans up the navigator object.",jwalton,NONE,2016-04-12 14:55:27+00:00,False,,,,5,6,2016-04-13 07:48:19+00:00,0.7,dasilvacontin,CONTRIBUTOR,0,3,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2207,BDD-style interface still active when other interface selected in CLI,"When Mocha is run from the CLI and another interface is selected, BDD-style tests are still run. For instance, create the following two test files and then run mocha -u exports to see two tests run instead of only one.
test/bdd.js
it(""should run only if the other does not"", function(){})
test/exports.js
exports[""should only run if the other does not""] = function(){}",ScottFreeCode,CONTRIBUTOR,2016-04-14 05:33:58+00:00,True,2019-05-06 08:21:00+00:00,1117.12,,4,4,2016-04-14 08:45:49+00:00,0.13,dasilvacontin,CONTRIBUTOR,1,2,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2208,Imbalance in function source opening/closing shown in markdown/html reports,"This is a bit of an edge case since normally test functions are not named (in the sense of the function itself having a name) and one does not usually compress the body of the function due to readability/structure, but for what it's worth, this code...
var assert = require(""assert"")

it(""has the head of the function but not the closing brace"", function opening() {
    assert(true)
})
it(""does the same thing with a function declared elsewhere"", functionDeclaredOutside)
it(""has the closing brace of the function but not the head"", function () {assert(true)}) // a space before the parens doesn't affect it, must be the name
it(""does not have the closing brace because of just one space after the contents"", function() {assert(true) })
it(""has the closing brace if the function body is entirely empty"", function()
    {}
)
it(""does not have the closing brace because of just one space in the body"",function(){ })

function functionDeclaredOutside() {
    assert(true)
}
...yields this output when run with the markdown reporter...

has the head of the function but not the closing brace.
function opening() {
    assert(true)
does the same thing with a function declared elsewhere.
function functionDeclaredOutside() {
    assert(true)
has the closing brace of the function but not the head.
assert(true)}
does not have the closing brace because of just one space after the contents.
assert(true)
has the closing brace if the function body is entirely empty.
}
does not have the closing brace because of just one space in the body.


I would guess that the inclusion of function name() { in named functions is intentional, so that references to the name from within the function are clear; but in any case the closing brace being included or not should match whether the function name/opening is included, rather than whether there's whitespace before it.",ScottFreeCode,CONTRIBUTOR,2016-04-14 05:48:17+00:00,True,2016-06-11 21:22:39+00:00,58.65,,1,1,2016-04-15 04:33:24+00:00,0.95,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2209,Document hooks better,"The main documentation on hooks portrays things as if the hooks will always be the ones from the bdd interface. It would be helpful to note there that there are different interfaces that may use different names for the equivalent hooks. This is especially bad when combined with bug #2207 which makes the bdd interface hooks actually available if using another interface, but with unexpected behavior.",jmm,NONE,2016-04-14 15:03:57+00:00,False,,,,3,1,2016-04-15 05:46:25+00:00,0.61,ScottFreeCode,CONTRIBUTOR,0,1,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2210,`--ui require` for require interface,"There seems to be quite a bit of discussion about how to handle globals in future versions of Mocha, e.g. #1969. It seems like that stuff is going to be slow to hash out. In the meantime I'd like to suggest that you consider making it possible to do mocha --ui require to signal that you want the require interface -- meaning that you don't want globals defined. To me the current system is a half measure -- if you want to avoid using globals what you really want is to avoid them being defined at all to eliminate pollution of the global namespace and a source of potential bugs. To me it's very odd that ""using"" the require interface still requires using one of the other interfaces, which by default is bdd which defines globals.",jmm,NONE,2016-04-14 15:31:09+00:00,False,,,,2,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2211,str is undefined when running the HTML function,"Hey there!
I was testing my angular app in the browser when I was receiving a Type Error str is undefined.
After digging into the source code and the call stack, i found out that the calling function to the clean function was passing the object test.body, which was undefined, and that was causing the error.
I managed to put a sanity check to see if the str argument was undefined or not, and then the code followed on without producing the error but still i was not sure what the behavior would be, so i reverted my changes and decided to open an issue here in order to have it fixed and expose this bug.
STACKTRACE:
[39]</</exports.clean()
mocha.js:5936
HTML/<()
mocha.js:2518
[3]</EventEmitter.prototype.emit()
mocha.js:200
HTML/<()
mocha.js:2451
[3]</EventEmitter.prototype.emit()
mocha.js:200
[36]</</Runner.prototype.fail()
mocha.js:4564
[36]</</Runner.prototype.failHook()
mocha.js:4593
next/<()
mocha.js:4638
done()
mocha.js:4251
[35]</</Runnable.prototype.run()
mocha.js:4286
next()
mocha.js:4629
[36]</</Runner.prototype.hook/<()
mocha.js:4651
timeslice()
mocha.js:12619
Calling function passing undefined parameter:
// line 2518
 var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.body)); <--- test.body is undefined
      el.appendChild(pre);
      pre.style.display = 'none';

Function throwing the Type Error
// line 5935
exports.clean = function(str) {
  str = str <--- this guy is undefined
    .replace(/\r\n?|[\n\u2028\u2029]/g, '\n').replace(/^\uFEFF/, '')
    .replace(/^function *\(.*\)\s*\{|\(.*\) *=> *\{?/, '')
    .replace(/\s+\}$/, '');

  var spaces = str.match(/^\n?( *)/)[1].length;
  var tabs = str.match(/^\n?(\t*)/)[1].length;
  var re = new RegExp('^\n?' + (tabs ? '\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');

  str = str.replace(re, '');

  return exports.trim(str);
};


Mocha Version 2.4.5
The distribution i am using is the Bower Component",ubirajaramneto,NONE,2016-04-15 02:23:17+00:00,True,2016-04-27 08:35:12+00:00,12.26,,3,6,2016-04-22 04:39:33+00:00,7.09,ScottFreeCode,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2215,Failed on Node6,"$ ./node_modules/.bin/node --version
v6.0.0-rc.2

$ cat ./node_modules/mocha/package.json | head -n 3
{
  ""name"": ""mocha"",
  ""version"": ""2.4.5"",

$ ./node_modules/.bin/node ./node_modules/.bin/mocha
module.js:128
  for (var i = 0; i < exts.length; i++) {
                          ^

TypeError: Cannot read property 'length' of undefined
    at tryExtensions (module.js:128:27)
    at tryPackage (module.js:107:10)
    at Function.Module._findPath (module.js:182:18)
    at Function.Module._resolveFilename (module.js:434:25)
    at Function.Module._load (module.js:384:25)
    at Module.require (module.js:464:17)
    at require (internal/module.js:16:19)
    at Object.<anonymous> (/Users/popomore/code/tmp/a/node_modules/mocha/bin/_mocha:12:11)
    at Module._compile (module.js:539:32)
    at Object.Module._extensions..js (module.js:548:10)",popomore,NONE,2016-04-18 18:33:39+00:00,True,2016-04-18 18:51:55+00:00,0.01,,2,2,2016-04-18 18:51:12+00:00,0.01,popomore,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2216,2.4.5 - afterEach run multiple extra times and wrong number of tests reported if a test errors,"I think I've stumbled into a weird edge case here.
I have global-level beforeEach and afterEach handlers, as well as some nested in a describe, basically like this:
beforeEach(function () {
  console.log('GLOBAL BEFORE');
});

afterEach(function () {
  console.log('GLOBAL AFTER');
});

describe('', function() {
  beforeEach(function () {
    console.log('BEFORE');
  });

  afterEach(function () {
    console.log('AFTER');
  });

  it('test 1', function () {
    console.log('test 1');
  });

  it('test 2', function () {
    console.log('test 2');
  });
});

It seems that if all my tests pass, I get the output
LOG: 'GLOBAL BEFORE'
LOG: 'BEFORE'
LOG: 'test 1'
LOG: 'AFTER'
LOG: 'GLOBAL AFTER'
LOG: 'GLOBAL BEFORE'
LOG: 'BEFORE'
LOG: 'test 2'
LOG: 'AFTER'
LOG: 'GLOBAL AFTER'
LOG: 'GLOBAL BEFORE'
LOG: 'BEFORE'
LOG: 'test 3'
LOG: 'AFTER'
LOG: 'GLOBAL AFTER'
PhantomJS 1.9.8 (Mac OS X 0.0.0): Executed 91 of 91 SUCCESS (0.981 secs / 0.702 secs)

Note the test count is 91 (correct) and it measures the execution time at 0.702s.
However, if one of my tests errors, I get:
LOG: 'GLOBAL BEFORE'
LOG: 'BEFORE'
LOG: 'test 1'
LOG: 'AFTER'
LOG: 'GLOBAL AFTER'
LOG: 'GLOBAL BEFORE'
LOG: 'BEFORE'
LOG: 'test2'
LOG: 'AFTER'
LOG: 'GLOBAL AFTER'
LOG: 'GLOBAL BEFORE'
LOG: 'BEFORE'
LOG: 'test3'
PhantomJS 1.9.8 (Mac OS X 0.0.0) test 3 FAILED
    TypeError: 'undefined' is not a function (evaluating 'this.foo()') (/Users/me/Projects/foo/test/tests.js:1212)
LOG: 'AFTER'
LOG: 'AFTER'
LOG: 'GLOBAL AFTER'
LOG: 'GLOBAL AFTER'
LOG: 'GLOBAL AFTER'
PhantomJS 1.9.8 (Mac OS X 0.0.0): Executed 94 of 91 (3 FAILED) (0.969 secs / NaN secs)

Note now that after the failing ""test 3"" the nested afterEach is called twice, and the global afterEach is called 3 times!
Also it reports 94/91 tests now (cool, it ran 103% of my tests! :) ) and reports the execution time as NaN

I'll try to distill my actual test code into a sharable example to reproduce this behavior, but I suspect there is some weird edge case I've run into that will disappear as soon as I change anything...",rally25rs,NONE,2016-04-19 13:59:44+00:00,True,2016-04-27 08:34:58+00:00,7.77,,2,4,2016-04-19 15:32:41+00:00,0.06,rally25rs,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2217,Suppress intentionally thrown errors,I'm building a module that handles Express error logging and I have an endpoint where I intentionally throw an error. I do this because I want the error to pass through the error handling Express middleware and log it with a specific winston transport. However I would like to suppress the error so it's stack is not printed when I run my tests with mocha. Any way to do this?,teckays,NONE,2016-04-20 17:24:48+00:00,True,2016-04-27 08:33:54+00:00,6.63,,2,1,2016-04-27 08:33:54+00:00,6.63,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2220,Internal errors in reporter for pending tests incorrectly labelled,"In the process of digging into #2211 (e.g. as discussed in this comment), I discovered that failures when processing a test that was not run (e.g. incorrect pending checks in a reporter, although it seems those particular errors have been fixed in master) will be reported as belonging to a previously run test or hook. To see, simply take master, add an error to a reporter's processing of a pending test result, and run a suite with pending tests after either non-pending tests or a before or beforeEach hook that will run.
I've narrowed it down to the fact that the currentRunnable variable in mocha/lib/runner.js is assigned whenever a hook is found and whenever a test is run, but not if a test is pending. I believe there are a couple possible fixes:

Remove self.currentRunnable = self.test; on line 527 of runner.js, add self.currentRunnable = test; at line 509 (well, between what's currently lines 508 and 510; there should probably be a couple newlines on either side of the added line), so that errors occurring during processing of pending tests are reported with that test's description rather than with the most recently run test or hook's description. (currentRunnable isn't used except in uncaught error reporting, so this shouldn't have any unwanted side effects.)
Detect and specially label errors originating in Mocha code rather than test code; for instance, wherever it's getting the stack location of the error in the case of internal errors, also override the name associated with the error to something like ""Mocha internal error"" instead of the name of the currentRunnable.
Both -- fix the currentRunnable for the case of pending tests, but also prepend ""Mocha internal error processing: "" to the name reported when a Mocha internal location is found for the error's origin.",ScottFreeCode,CONTRIBUTOR,2016-04-24 03:49:54+00:00,False,,,,2,0,,,,,0,0,0,0,"['confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2221,Referencing async values with dynamically generated test cases?,"Can someone enlighten me on how to reference async values with dynamically generated test cases?
The scenario is as follows:

Tests are dynamically generated through a Function.
A async Function needs to be invoked to fetch the value for which the tests will run against.
The value from the async Function needs to be passed to the test generator Function.

Illustration that doesn't work:
        var testArray = function(input, results) {
            it('should be a Array', function() {
                expect(input).to.be.a('array');
            });

            if (Object.prototype.toString.call(results) === '[object Array]') {
                it('should contain `' + JSON.stringify(results) + '`.', function() {
                    expect(input.join()).to.equal(results.join());
                });
            }
        }

        var input;

        before(function(done) {
            require(['some/random/library/on/the/fly'], function(libraryValue) {
                input = libraryValue;
            });
        });

        testArray(input, ['test']);
Issue(s):

We cannot nest it statement(s). If I could in this scenario, it would solve the problem.
Wrapping another describe Function will be invoked immediately and not prior to the before Function completing. If this worked, I could just wrap the invocation for testArray within a describe.

So I really don't see a way around this here without re-writing code.
A hacky solution could be to use a Object reference, but I'm against it.
Example:
        var testArray = function(input, results) {
            it('should be a Array', function() {
                expect(input.results).to.be.a('array');
            });

            if (Object.prototype.toString.call(results) === '[object Array]') {
                it('should contain `' + JSON.stringify(results) + '`.', function() {
                    expect(input.results.join()).to.equal(results.join());
                });
            }
        }

        var input = {};

        before(function(done) {
            require(['some/random/library/on/the/fly'], function(libraryValue) {
                input.results = libraryValue;
            });
        });

        testArray(input, ['test']);
I'm unable to find a adequate solution. Any ideas?",sgarbesi,NONE,2016-04-24 07:45:11+00:00,True,2016-04-27 08:24:09+00:00,3.03,,3,11,2016-04-24 08:14:04+00:00,0.02,sgarbesi,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2222,Html reporter displays duplicate results,"Html reporter re-emits 'test-end' for some reason on failure, so the event gets reported once by the runner, and once by the reporter, duplicating the results.
inside html reporter:
  runner.on('fail', function(test) {
    // For type = 'test' its possible that the test failed due to multiple
    // done() calls. So report the issue here.
    if (test.type === 'hook'
      || test.type === 'test') {
      runner.emit('test end', test);
    }
  });",npbenjohnson,NONE,2016-04-25 23:33:00+00:00,True,2016-04-27 08:08:28+00:00,1.36,,3,2,2016-04-26 01:15:11+00:00,0.07,yefim,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2223,Cannot find module 'chai' ?,"I'm trying to study mocha and after I execute the getting started demo ,It show me the error
Cannot find module 'chai'",sunnysk,NONE,2016-04-26 05:56:59+00:00,True,2016-04-27 08:07:33+00:00,1.09,,2,4,2016-04-27 08:07:33+00:00,1.09,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2224,Feature: Add ability to bail from current suite only,"I have a lot of tests that are dependent on previous steps, and when an early step fails it causes everything after it to fail too, leading to a lot of unnecessary noise.  There's only so much that makes sense to go in the before() block.  I've implemented the feature myself, but the contributions guidelines say not to PR new features, so I'll just link to my fork here: master...hoverduck:master
It's a relatively simple change, but it's possible (likely) I missed something, so I'd love feedback even if you opt not to accept a PR for it.
My implementation works by calling this.bailSuite( true ); at the top of the suite (inside the describe() block) you want chunked together, and then on failure it will bail out of that suite to the next one at the same level in the hierarchy.",hoverduck,NONE,2016-04-26 15:14:34+00:00,True,2016-05-23 13:02:46+00:00,26.91,,3,4,2016-04-27 08:06:53+00:00,0.7,danielstjules,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2225,Configure compilers from mocha setup,"Hello,
Would that make sense to add the ability to configure compilers from mocha.setup ?
I noticed it is possible to configure some options like : ui, reporter, bail etc ... but the cli has still more options which are not accessible programatically.
I just ask the question, I'm a beginner with mocha so maybe I didn't get some points.
Thanks for your responses !",akofman,NONE,2016-04-27 09:43:28+00:00,True,2018-11-18 18:11:05+00:00,935.35,,3,2,2016-05-22 00:20:43+00:00,24.61,boneskull,MEMBER,1,0,0,1,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2226,Exclusive Tests running different test suite with same title,"Minor issue but it caused me a headache to pin down and see what was happening.
I have two test files with the same suite name:
//MyComponent.test.js
describe(""MyComponent"", function()....

//MyComponent.test.jsx
describe(""MyComponent"", function()....

After putting a .only on the first suite, it was running tests in the second one:
//MyComponent.test.js
describe.only(""MyComponent"", function()....

//THESE TESTS RUN INSTEAD!
//MyComponent.test.jsx
describe(""MyComponent"", function()....

The obvious fix was to change the suite titles so they are unique, but I feel like this should either be fixed or well documented somewhere.",andrewmunro,NONE,2016-04-27 09:54:23+00:00,True,2016-05-22 00:21:56+00:00,24.6,,3,2,2016-04-29 17:43:10+00:00,2.33,scags9876,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2227,deprecated graceful-fs usage,"When including mocha as a dependency, I'm getting the following warning at 'npm install'

npm WARN deprecated graceful-fs@2.0.3: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.

Traced this to the use of an old version of 'glob' in mocha (I think).
I also receive a warning about jade, but that issue is already reported under #2200.",CafeLungo,NONE,2016-04-27 15:18:22+00:00,True,2016-04-27 16:00:52+00:00,0.03,,3,2,2016-04-27 16:00:52+00:00,0.03,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2228,Pending constructor does not inherit from the Error constructor,"I ran into the following annoying warning, thrown by Bluebird, when a test is skipped at runtime within a Bluebird promise chain.
Warning: a promise was rejected with a non-error: [object Object]

Some context on the warning thrown by Bluebird: http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-rejected-with-a-non-error
Nevertheless, the root cause is that the Pending constructor in pending.js does not inherit from the Error constructor.
You can reproduce this by writing and running the following asynchronous test:
var Promise = require('bluebird');

Promise.config({
  warnings: true,
  longStackTraces: true
});

describe('Suite', function () { 
  it('Test', function () { 
    return Promise.bind(this).then(function () {
       this.skip();
    });
  });
});
Can this be fix?",mojwang,NONE,2016-04-27 18:35:04+00:00,False,,,,2,1,2016-05-05 02:29:44+00:00,7.33,boneskull,MEMBER,1,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2230,Please update glob version,"I am trying to use mocha with node v6.  When I npm install mocha, it pulls mocha 2.4.5 (the latest tagged version) and I get the message:
""graceful-fs@2.0.3: graceful-fs v3.0.0 and before will fail on node releases >= v6.0""
graceful-fs is a dependency of glob, which is specified in package.json (of mocha 2.4.5) to be exactly 3.2.3.  The latest version of glob does not use graceful-fs.",plynchnlm,NONE,2016-04-28 19:49:56+00:00,True,2016-04-28 20:56:57+00:00,0.05,,2,1,2016-04-28 20:56:56+00:00,0.05,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2235,Not able to find element using element id on webview,"I want to automation one login page (web-view) for an ios application, i can locate the ID of the username and password field but when i am using the driver.elementById() it shows no such element found. Does any one have any idea about this.
I am using mocha and chai.",PankajImpetus,NONE,2016-05-02 15:04:11+00:00,True,2016-05-02 15:54:06+00:00,0.03,,2,1,2016-05-02 15:54:06+00:00,0.03,danielstjules,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2237,NPM dependencies need updating,Getting warnings about Jade being renamed to Pug and also graceful-fs version being deprecated and no longer working with newer versions of NPM.,genyded,NONE,2016-05-03 12:52:11+00:00,True,2016-05-05 00:59:42+00:00,1.51,,5,4,2016-05-03 19:41:24+00:00,0.28,aaronmcohen,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2238,"mocha unit-test return ""lib"" undefined","NOTE: This is a question not an issue.

Page loads and work perfectly, however when trying to run unit test i get axios is not defined.
Here's what my code looks like.
library is located on the index of the application e.g:
<html>
 <body> ... </body>
 ...
 <script src=""/lib/axios.js"">
</html>  

on my list.js file i ref. axios as:
const { get } = axios
...
class List extends Component { ... }
export default List;

on my test code i ref. the react module as:
import List = '../../list';
describe('load list', () => {
...
}

when i run the test i get: axios is not defined
I have try the following w/o luck...
const axios = 'path/to/lib/axios.j';
const axios = requiere('path/to/lib/axios.js'
How can i make axios to be defined (imported?) before List module gets imported/called during test?",the-creature,NONE,2016-05-04 05:19:09+00:00,True,2016-05-04 13:03:19+00:00,0.32,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2239,add node 6 to CI matrix,,boneskull,MEMBER,2016-05-04 23:48:02+00:00,True,2016-05-13 05:19:49+00:00,8.23,,2,1,2016-05-06 17:51:59+00:00,1.75,alsotang,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2240,--require doesn't work for properly formed modules,"I've seen a number of examples around the internet of using --require for example to do:
mocha --require chai
While that will load chai, since chai is a normal module, it doesn't write any values into the global namespace, so --require means you still have to do require('chai')
As written, it seems to only be useful for loading arbitrary javascript files.  Was that the intended use case?",jdmarshall,NONE,2016-05-06 22:40:43+00:00,True,2016-05-22 00:19:54+00:00,15.07,,2,1,2016-05-22 00:19:54+00:00,15.07,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2241,Shared Specs - Incorrect Logging,"Let's assume I have two files:
user.js
import { User } from '../../app/models'
import { validatesPresence } from './shared-specs'

describe('User', () => {
  describe('.jsonSchema', () => {
    validatesPresence(User, 'username')
  })
})
shared-specs.js
import { expect } from 'chai'

export function validatesPresence(model, attribute) {
  it(`validates presence of ${attribute}`, () => {
    expect(() => {
      const json = {}
      json[attribute] = null
      model.fromJson(json)
    }).to.throw(model.ValidationError)
  })
}
When running my tests, I expect the following output:
User
  .jsonSchema
    ✓ validates presence of username

...but instead I'm getting this:
✓ validates presence of username
User
  .jsonSchema
[OTHER SPECS]",jamescmartinez,NONE,2016-05-07 00:23:08+00:00,True,2017-07-30 15:02:15+00:00,449.61,,3,6,2016-05-17 14:14:34+00:00,10.58,ScottFreeCode,CONTRIBUTOR,1,1,0,1,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2242,path.resolve('C:') is different from process.cwd() on Windows.,"When the following code is executed,
const path = require('path');

console.log('1.');                                                     
console.log(process.cwd());
console.log(path.resolve('C:'));

process.chdir(process.cwd());

console.log('2.');
console.log(process.cwd());
console.log(path.resolve('C:'));
the result is as follows:
C:\Users\sttk\Works>node test
1.
C:\Users\sttk\Works
C:\Users\sttk\Works
2.
C:\Users\sttk\Works
C:\Users\sttk\Works

C:\Users\sttk\Works>mocha test
1.
C:\Users\sttk\Works
C:\                   <= why?
2.
C:\Users\sttk\Works
C:\Users\sttk\Works",sttk,NONE,2016-05-08 09:44:33+00:00,True,2016-09-24 03:56:33+00:00,138.76,,4,9,2016-05-22 00:17:24+00:00,13.61,boneskull,MEMBER,1,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2243,How to mock session storage when running a test?,"I am trying to setup mocha for my reactjs app.
However, running the command mocha --compilers js:babel-register --recursive produces an error saying
mocha --compilers js:babel-register --recursive

/Users/purezen_/workspace/webapp/src/js/data/reducers/auth.js:31
var auth = sessionStorage.getItem('auth');
           ^

ReferenceError: sessionStorage is not defined
    at Object.<anonymous> (auth.js:5:14)
    at Module._compile (module.js:397:26)
    at loader (/Users/purezen_/workspace/kredx-fe/client/node_modules/babel-register/lib/node.js:158:5)

even when I have included code to mock session storage inside the test file according to  http://stackoverflow.com/q/11485420/1509855",purezen,NONE,2016-05-09 17:18:56+00:00,True,2016-05-10 14:25:12+00:00,0.88,,3,4,2016-05-10 14:25:12+00:00,0.88,purezen,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2245,"is it possible to pass values from ""beforeEach"" to the actual test","I am writing unit tests for file operation functions. This tests work in a temporary directory, which I create with
fs.mkdtemp()

But now the test has to know its temporary directory. Can I somehow pass this information to the test?",RudolfVonKrugstein,NONE,2016-05-10 23:16:37+00:00,True,2016-05-11 00:17:07+00:00,0.04,,3,3,2016-05-10 23:28:20+00:00,0.01,iknowcss,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2246,reference update request,"Dear Mocha.
is it possible to update the references in package.json? Particularly the reference to glob 3.2.11 and this references the old graceful-fs resulting in warnings.
Thanks",Laro88,NONE,2016-05-11 05:52:58+00:00,True,2016-05-14 08:35:27+00:00,3.11,,2,1,2016-05-14 08:35:27+00:00,3.11,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2247,Bump major version of glob,Can you please bump the version of glob? I think this repo is the reason why I see deprecations warnings for graceful-fs on nearly every npm install,eljefedelrodeodeljefe,NONE,2016-05-11 07:34:52+00:00,True,2016-05-14 08:34:28+00:00,3.04,,4,12,2016-05-11 07:37:23+00:00,0.0,eljefedelrodeodeljefe,NONE,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2249,Error code remains zero when assertion failed,"I've been asserting deep equality of React components, and noticed a test silently failing with return code 0 (NB: I'm generally quite new to JavaScript). This seems to relate to React objects containing Symbol.
Considering the following test:
const expect = require('chai').expect;
const a = Symbol('a');
console.log(`a = ${a.toString()} of type ${typeof a}`);

it(""deep equal demo"", () => {
  expect({ a, b: 'foo' }).to.deep.equal({ a, b: 'bar' });
});

I get a return code of 0 instead of 1, thus test is silently ignored in CI:
$ node --version; mocha --version; mocha demo.test.js; echo ""Return code is $?""
v5.11.0
2.4.5
a = Symbol(a) of type symbol

  1) deep equal demo

  0 passing (12ms)
  1 failing

Return code is 0

If I comment out the it (leaving expect uncommented), I can see that the exception is thrown by chai and the error code is correct:
$ node --version; mocha --version; mocha demo.test.js; echo ""Return code is $?""
v5.11.0
2.4.5
a = Symbol(a) of type symbol

XXX/node_modules/chai/lib/chai/assertion.js:107
      throw new AssertionError(msg, {
      ^
AssertionError: expected { a: {}, b: 'foo' } to deeply equal { a: {}, b: 'bar' }
    at Assertion.assertEqual (XXX/node_modules/chai/lib/chai/core/assertions.js:485:19)
    at Assertion.ctx.(anonymous function) [as equal] (XXX/node_modules/chai/lib/chai/utils/addMethod.js:41:25)
    at Object.<anonymous> (XXX/demo.test.js:6:35)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Module.require (module.js:367:17)
    at require (internal/module.js:20:19)
    at XXX/node_modules/mocha/lib/mocha.js:219:27
    at Array.forEach (native)
    at Mocha.loadFiles (XXX/node_modules/mocha/lib/mocha.js:216:14)
    at Mocha.run (XXX/node_modules/mocha/lib/mocha.js:468:10)
    at Object.<anonymous> (XXX/node_modules/mocha/bin/_mocha:403:18)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Function.Module.runMain (module.js:447:10)
    at startup (node.js:148:18)
    at node.js:405:3
Return code is 1

In both cases, the test passes with return code 0 if I change bar to foo.
The problem seems specific to the ES2015 Symbol, although it seems to be properly recognized as the logs show.
It's not clear to me if mocha needs Babel in order to recognize Symbol (the log above makes me think not), but adding --compilers js:babel-register,js:babel-polyfill did not help.",sedubois,NONE,2016-05-11 14:57:04+00:00,True,2016-05-13 21:17:53+00:00,2.26,,2,1,2016-05-13 21:17:53+00:00,2.26,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2250,How to require multiple modules?,I am setting up tests for my app using mocha and wanted to use multiple modules but it seems the -r (--require) argument only allows to use one module(?).,purezen,NONE,2016-05-12 14:32:38+00:00,True,2016-05-13 06:56:18+00:00,0.68,,3,6,2016-05-13 06:56:18+00:00,0.68,boneskull,MEMBER,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2254,Mocha output only showing timing for the the first it function,"When I run my tests, I can see the following:

Why Mocha is showing the time employed only for the first ""it"" ?
The code is something like this:
describe( 'html rendering through smarty', function() {
  it( 'returns an HTML response', function( done ) { .. });
  it( 'write templates variables on html document', function( done ) { .. });
  it( 'write snippets on html document', function( done ) { .. });
});

I guess this is not correct, or is this expected ?",Avcajaraville,NONE,2016-05-13 15:27:28+00:00,True,2016-05-15 00:46:41+00:00,1.39,,2,2,2016-05-15 00:46:41+00:00,1.39,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2255,How do I test my code which requires 'window' and 'sessionStorage' objects?,"I am writing an integration test for my application with mocha.
Basically I want to test my authentication flow, which has files making network calls and saving details in browser storage.
I am facing issues with importing a file which requires 'window' and 'sessionStorage' objects. When I run the test file, it gives error where sessionStorage is being used.
ReferenceError: sessionStorage is not defined
I have tried mocking the window and sessionStorage objects in an IIFE using
(function (glob) {
    function mockStorage() {
        var storage = {};
        return {
            setItem: function(key, value) {
                storage[key] = value || '';
            },
            getItem: function(key) {
                return storage[key];
            },
            removeItem: function(key) {
                delete storage[key];
            },
            get length () {
                return Object.keys(storage).length;
            },
            key: function(i) {
                var keys = Object.keys(storage);
                return keys[i] || null;
            }
        };
    }
    glob.localStorage = mockStorage();
    glob.sessionStorage = mockStorage();
}(typeof window !== 'undefined' ? window : global));

before the import calls as well but it still fails.",purezen,NONE,2016-05-13 16:20:40+00:00,True,2017-04-03 15:32:24+00:00,324.97,,3,2,2016-05-15 00:41:56+00:00,1.35,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2256,exports.clean method erring out when arg is undefined,"Hi,
I am using mocha along with karma (with client reporting turned on) and I have a global afterEach method that is called after every tests. I do some checks within this afterEach method, but since the actual test passed before reaching this afterEach, the following line in mocha.js errors out:
https://github.com/mochajs/mocha/blob/master/mocha.js#L2518
The above line is passing in test.body to the clean method. But since my afterEach is outside of any tests, the test.body variable is undefined causing the clean method to error out with the following error:
mocha.js:5937 Uncaught TypeError: Cannot read property 'replace' of undefined
The fix is pretty simple - within the clean method, just check if the str is defined, else ignore it. Let me know if you want me to create a PR for this. I will be happy to do it",devangnegandhi,NONE,2016-05-15 02:58:49+00:00,True,2016-05-22 00:14:10+00:00,6.89,,3,4,2016-05-15 19:42:55+00:00,0.7,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2257,--delay does not delay execution of suite functions as expected.,"I am trying to see if I can find a solution to chimp #355.
I tried the demo provided by @boneskull for using --delay from #1628.
This demo did not demonstrate the expected benefit to using --delay.  Maybe I am expecting something it does not do?
Expected
--delay flag would delay execution of suite functions or child suite functions until run() is called.
Observed
suite functions are executed prior to run() call being made.
I added some console output and I think that this shows that the --delay flag does not allow you to initialize variables prior to any suite functions code being run. You can see from my test console the sequence is:

run describe1
run describe2
handle nextTick callback

Result: foo is only properly set within the it block.
This is exactly the same as not using the --delay flag.
Modified test @boneskull test
var foo;

// process.nextTick to be replaced with your async setup function
process.nextTick(function() {
  foo = 'bar'; // or ""credentials"" object w/ user id
  console.log(""in nextTick"");
  run(); // this is exposed when running mocha with the --delay flag
});

describe(require('path').basename(__filename), function() {
  console.log('describe1 foo: ' + foo);
  describe('describe: '+ foo + ' ===? bar', function() {
    console.log(""describe2 foo: "" + foo);
    it('it: '+ foo + ' ===? bar', function() {
      console.log('within it: ' + foo + ' ===? bar')
      require('assert')(true);
    });
  })
});

Modified Console output
mocha --delay
describe1 foo: undefined
describe2 foo: undefined
in nextTick


  test.js
    describe: undefined ===? bar
within it: bar ===? bar
      √ it: undefined ===? bar


  1 passing (0ms)",brucejo75,NONE,2016-05-15 17:14:09+00:00,True,2016-05-22 15:37:03+00:00,6.93,,3,9,2016-05-15 22:00:18+00:00,0.2,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2260,describe.only fails when used in combination with -i and -g command-line options,"Steps to reproduce:

Create a test suite that has multiple top-level describe tests.
Mark one of those tests as describe.only.
Run mocha with -i and -g options. (Choose a filter that does not match the test chosen for step 2 above.)

Expected result:
Only tests within the top-level suite chosen within step 2 above are executed, provided they do not match the filter specified in step 3.
Actual result:
The test specified in step 2 does not run. Tests in every other top-level suite are executed, again provided they do not match the filter specified in step 3.
Note that the obvious workaround (to try to use describe.skip) also fails, because .skip actually works as intended. 😢",scouten,NONE,2016-05-16 23:46:25+00:00,True,2017-09-26 01:21:36+00:00,497.07,,3,8,2016-05-16 23:47:35+00:00,0.0,scouten,NONE,1,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2261,Mocha doesn't play nicely with absolute import paths,"When my Mocha tests import some of my React components that use absolute import paths, things go south. For instance, I might have a test that imports a JS file which starts out with:
import React from 'react';
import MyThing from '/client/components/MyThing';

Mocha bombs out at the second line because it doesn't understand absolute paths. These are used all over my app which has thousands of lines of code, so I'd rather not go through and change all my imports. Especially since I have a pretty deep folder structure and would wind up with import statements such as:
import MyThing from '../../../../client/components/MyThing';",ffxsam,NONE,2016-05-17 06:50:03+00:00,True,2016-05-18 20:27:13+00:00,1.57,,3,8,2016-05-17 14:07:42+00:00,0.3,ScottFreeCode,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2262,npm WARN deprecated graceful-fs,"I get the following error:

npm WARN deprecated graceful-fs@2.0.3: graceful-fs v3.0.0 and before will fail on node releases >= v7.0. Please update to graceful-fs@^4.0.0 as soon as possible. Use 'npm ls graceful-fs' to find it in the tree.

Tree:

├─┬ mocha@2.4.5
│ └─┬ glob@3.2.3
│   └── graceful-fs@2.0.3",efortes,NONE,2016-05-17 08:47:06+00:00,True,2016-05-22 00:03:58+00:00,4.64,,5,6,2016-05-17 10:41:32+00:00,0.08,gagern,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2263,Double error report on minimal test case,"A (purposely) failing test in gertsonderby/C1-Prototype (described in this file) shows the error report twice. It's set up to be run in the browser, go to /test/index.html.
The same problem occurs if replacing the assertion with a throw statement.
This is tested on Windows, using npm 2.15.1, jspm 0.16.34, systemjs 0.19.27, mocha 2.4.5, unexpected 10.13.2.",gertsonderby,NONE,2016-05-18 17:00:21+00:00,True,2016-05-23 10:17:43+00:00,4.72,,3,1,2016-05-23 10:17:43+00:00,4.72,dasilvacontin,CONTRIBUTOR,0,1,0,0,"['browser', 'confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2264,Retry logic should accommodate a timeout between retries,"this.retries(N); should support a timeout value before attempting to run the test again.
A signature like this.retries(N[, M]); where N is the # of retries & M is the # of ms to wait before trying the test again would be ideal",enigmatic00,NONE,2016-05-18 18:10:50+00:00,False,,,,5,3,2016-09-21 18:12:57+00:00,126.0,aaclarker,NONE,0,0,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2265,Mocha times out when function being tested uses generator functions,"I want to unit test a function.
In that function I'm using Co with a generator function.
When an error occurs I catch it, and I call cb with the error
In my unit test I make a false assertion but mocha doesn't report it, it just times out:
//function to test

function start(data, cb) {
  co(function * coStart() {
    yield Promise.reject('err'); // yield error for sake of demo
  }).then(function(result){
    return cb(null, result);
  }).catch(function (err) {
    // we get here
    return cb(err);
  });
}

// mocha test

it('fails on incorrect data', function(done){
  MyModel.start({'foo': 'bar'}, function(err, res){
    assert.equal(err, 'err2'); //this fails but mocha just stops here and times out
    done();
  });
});

Clearly I'm doing something wrong here?
I know you can return a promise to mocha and omit the done-callback in the test, but my function 'start' cannot return a promise, its like middleware so it should work with a callback",ernie58,NONE,2016-05-19 07:33:36+00:00,True,2016-05-19 10:39:02+00:00,0.13,,1,1,2016-05-19 10:39:02+00:00,0.13,ernie58,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2268,don't use a makefile,it's not portable.,boneskull,MEMBER,2016-05-21 21:03:54+00:00,True,2016-05-22 00:05:37+00:00,0.13,,1,2,2016-05-21 21:28:10+00:00,0.02,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2269,drop component support,...since it's dead.  that means removing component.json.  targeting major,boneskull,MEMBER,2016-05-21 21:29:21+00:00,True,2016-07-03 20:41:27+00:00,42.97,v3.0.0,2,3,2016-05-23 09:13:18+00:00,1.49,gluons,NONE,1,0,0,1,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2272,Mocha 2.5.0 runs with error,"I just ran our tests where we have mocha: * in package.json and got this error:
module.js:327
    throw err;
    ^

Error: Cannot find module 'to-iso-string'
    at Function.Module._resolveFilename (module.js:325:15)
    at Function.Module._load (module.js:276:25)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at Object.<anonymous> (/Users/nordenfelt/Documents/dev/jayway/tobii/tobii-fire-cloud/services/apiAuthorizer/node_modules/mocha/lib/utils.js:15:19)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
    at Object.Module._extensions.(anonymous function) [as .js] (/Users/nordenfelt/Documents/dev/jayway/tobii/tobii-fire-cloud/services/apiAuthorizer/node_modules/istanbul/lib/hook.js:109:37)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)

I reverted back to version 2.4.5 in package.json and the tests worked.",carlnordenfelt,NONE,2016-05-23 07:46:40+00:00,True,2016-05-23 08:44:18+00:00,0.04,,4,3,2016-05-23 07:59:57+00:00,0.01,gabrieledarrigo,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2276,mocha@2.5.0 depends on to-iso-string,"When I upgrade from mocha@2.4.5 to mocha@2.5.0, I fail with
eric@mouni2:/tmp/checkouts/shex.js$ npm test

> shex@0.5.9 test /tmp/checkouts/shex.js
> mocha -C -R dot

module.js:327
    throw err;
    ^

Error: Cannot find module 'to-iso-string'
    at Function.Module._resolveFilename (module.js:325:15)
    at Function.Module._load (module.js:276:25)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at Object. (/tmp/checkouts/shex.js/node_modules/mocha/lib/utils.js:15:19)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Module.require (module.js:353:17)
npm ERR! Test failed.  See above for more details.

I see
""to-iso-string"": ""0.0.2""
in devDependencies but not dependencies.",ericprud,NONE,2016-05-23 08:25:04+00:00,True,2016-05-23 08:53:43+00:00,0.02,,7,13,2016-05-23 08:28:28+00:00,0.0,elrrrrrrr,NONE,1,0,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2277,Dinamically use data from a previous test,Somebody knows how to fix this: http://stackoverflow.com/questions/37389478/mocha-use-data-from-a-previous-test ?,roccomuso,NONE,2016-05-23 11:30:50+00:00,True,2017-03-30 16:33:06+00:00,311.21,,3,5,2016-05-23 11:40:25+00:00,0.01,roccomuso,NONE,0,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2278,2.4.5 -> 2.5.0 update: Error: Cannot find module 'to-iso-string',"$ node --version
v4.4.4
$ npm --version
2.15.1

I see a lot of errors like these: https://travis-ci.org/hoodiehq/hoodie-app-tracker/jobs/132202611. Seems like others have the issue, too. Look for mocha@2.5.0 breaks build 🚨 in https://github.com/greenkeeperio-bot?tab=activity
Pretty much every project I use mocha in right now has that failing build. I could not reproduce the problem locally yet. I tried clearing travis cache and restart, didn’t help. My guess is that it is somehow related to npm 2.15.1?
Others might run into the same problem so I thought it’d be worth opening the issue",gr2m,NONE,2016-05-23 14:24:02+00:00,True,2016-05-24 11:33:42+00:00,0.88,,2,2,2016-05-23 14:33:02+00:00,0.01,gr2m,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2279,Global variables cleared/blocked instead of reported?,"In my tests I have several describe blocks each with their own set of tests and before/after hooks.
In my very first describe block I am making a backup of a json file that gets changed during the tests. I save it to a global variable and logging the contents I can see that everything is good.
However, when I get to my very last describe block the variable is empty. Absolutely nothing has changed this file during the previous tests so I'm a bit confused about what is going on.
I read somewhere that mocha will bind all the test functions before execution so I'm wondering if that has anything to do with it.",justinireland,NONE,2016-05-23 21:51:07+00:00,False,,,,5,6,2016-05-23 23:09:50+00:00,0.05,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['confirmed-bug', 'needs-feedback', 'needs-mcve', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
2280,Add a command line flag to error on `.only`,"Exclusive tests / .only is a great development-time convenience. However, it seems like it might be easy to forget to remove an .only call before committing.
Can we add a command line option to force the runner to fail if there are any .only calls present?
This would be handy to specify on the build server and when running locally before committing.",jacobcarpenter,NONE,2016-05-26 18:04:47+00:00,True,2018-10-11 09:33:20+00:00,867.64,,5,3,2016-06-24 15:03:50+00:00,28.87,dahjelle,NONE,1,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2281,Mocha silently discards Promise rejection in browser when `allowUncaught` is enabled.,"Context
I’m using allowUncaught to allow exceptions to propagate to the browser, so that I can inspect it via Chrome DevTools (which converts the source maps).
mocha.allowUncaught()
But there is a problem in allowUncaught: It makes all async tests pass.
Test case
describe('a rejected promise', () => {
  it('should fail the spec', () => {
    return Promise.reject(new Error('meow'))
  })
})
Actual result
The spec passed despite promise rejection. This problem doesn’t occur when allowUncaught is not set. In both cases, there are no errors reported to console.

## Expected result
The spec should fail.

An error should be reported in the console.

## Workaround
Don’t use allowUncaught(), but add a fail handler so that it can be logged.
var runner = mocha.run()
runner.on('fail', function (test) {
  setTimeout(() => { throw test.err })
})",dtinth,NONE,2016-05-27 03:13:24+00:00,False,,,,3,2,2016-06-11 15:44:21+00:00,15.52,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['browser', 'confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2282,Improve README usefulness,"why mocha vs other js test frameworks? differences
 getting started with testing and mocha
 simple example maybe?
 how to contribute / how to get started contributing
 etc (suggest; specially if you personally found something lacking)",dasilvacontin,CONTRIBUTOR,2016-05-27 21:40:44+00:00,True,2018-10-11 09:30:11+00:00,866.49,,6,14,2016-05-28 20:00:05+00:00,0.93,ScottFreeCode,CONTRIBUTOR,1,3,0,1,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2283,Incorrect character in browser report,"The HTML reporter is supposed to use ‣ for its grep buttons (&#x2023; is the hex code I believe), but I'm getting this symbol instead: â€",ScottFreeCode,CONTRIBUTOR,2016-05-28 00:51:07+00:00,True,2017-01-08 20:33:50+00:00,225.82,,4,2,2016-08-07 23:50:32+00:00,71.96,spiritphyz,NONE,0,1,0,1,"['browser', 'confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2284,Expecting `afterEach` to fail,"I wrote an afterEach function to check that each test correctly finalizes some data.
I'd like to write a test for it, to be sure that afterEach works, since it already broke a couple of times.
Is that possible?",peoro,NONE,2016-05-28 17:00:39+00:00,True,2016-06-27 06:32:35+00:00,29.56,,3,2,2016-05-29 09:29:58+00:00,0.69,dasilvacontin,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2285,window.location.pathname in links in browser HTML reporter,"A link starting with window.location.pathname (which is used in the grep links in the HTML reporter) is treated oddly in some browsers, at least when the page is run without a server (straight from the filesystem). For example, Internet Explorer on Windows gets ""/C:/path/to/page.html"" for window.location.pathname, which causes it to try to go to ""C:/C:/path/to/page.html?grep=..."" when the grep links are clicked. (I am not sure if this issue affects any other browsers. I'm also not sure whether this is strictly a problem for browsing the page straight off the filesystem, although I wouldn't be surprised if it is.) We should find out if simply removing pathname and using just ""?grep=..."" for the links works in all browsers, or if there's any other fix.
Looks like test/browser/ui.html tests this, but I don't know whether we can get all the same behavior in automated testing for it or not (or even whether the approach used by test/browser/ui.html works for automated testing).",ScottFreeCode,CONTRIBUTOR,2016-05-28 19:47:04+00:00,False,,,,2,0,,,,,0,0,0,0,"['browser', 'confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2286,Regression after doesn't execute if tests skipped in beforeEach,"after(function () {
  console.log('after outside suite')
})

describe('suite', function () {
  var count = 0

  beforeEach(function () {
    if (count > 2) this.skip()
  })

  after(function () {
    console.log('after in suite')
  })

  it('test 1', function () { ++count })
  it('test 2', function () { ++count })
  it('test 3', function () { ++count })
  it('test 4', function () { ++count })
  it('test 5', function () { ++count })
  it('test 6', function () { ++count })
})
will not output the after in suite since v2.5.0 due to PR #2081 (found via git bisect)
reported by @blueice349, confirmed by myself",dasilvacontin,CONTRIBUTOR,2016-05-29 18:09:07+00:00,True,2016-06-11 06:22:41+00:00,12.51,,3,3,2016-05-29 18:11:45+00:00,0.0,dasilvacontin,CONTRIBUTOR,1,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2288,Multiple Assertions?,"Testing for one single component
Does it make sense to write separate it() statements with one expect for each attribute of an element.
Or just one it() for the component with multiple expects for that component's attributes
it(""with class name = btn btn-primary & label = Add Project"", () => {
            let myButton = scryRenderedDOMComponentsWithTag(component,'button')[0];
            expect(myButton.className).to.equal(""btn btn-primary"");
            expect(myButton.textContent).to.contain(""Add Project"");
});
VS
it(""with class name = btn btn-primary"", () => {
            let myButton = scryRenderedDOMComponentsWithTag(component,'button')[0];
            expect(myButton.className).to.equal(""btn btn-primary"");
});
it(""with label = Add Project"", () => {
            let myButton = scryRenderedDOMComponentsWithTag(component,'button')[0];
            expect(myButton.textContent).to.contain(""Add Project"");
});",Aftabnack,NONE,2016-05-30 12:47:37+00:00,True,2016-06-08 05:28:19+00:00,8.69,,3,3,2016-06-07 15:01:00+00:00,8.09,agyanttiwari,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2289,How to dynamic load config,"the problom is：
one.js
var config = require('./config');

if(config.enable) {
  // branch a
} else {
  // branch b
}
when i test one.js with mocha and istanbul，I can't run every branches(a, b). Is there any way to dynamic change the config.js when run test spec?",keenwon,NONE,2016-05-31 07:36:42+00:00,True,2016-05-31 16:24:29+00:00,0.37,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2290,thanks,,alihanniba,NONE,2016-06-01 10:06:07+00:00,True,2016-06-27 06:31:34+00:00,25.85,,2,1,2016-06-27 06:31:34+00:00,25.85,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2292,Merge bin/mocha and bin/_mocha,"Tools providing integration with mocha need to use bin/_mocha sometimes. For example, debugging mocha test is possible with bin/_mocha only, because it's impossible to pass --debug-brk=<port> option to _mocha child process from bin/mocha.
Well, it's easy for IDE to use bin/_mocha under the hood, but it might be not so obvious for users who debug mocha tests using node-inspector. Though, there is a hint, one need to take it into account. Also, debugging npm script that runs mocha tests leads to the same confusion (e.g. this WebStorm issue).
Related to #1969 (comment) //cc @boneskull
Please merge bin/_mocha and bin/mocha to have single public main script file in mocha3. Thanks.",segrey,CONTRIBUTOR,2016-06-01 22:40:19+00:00,False,,,,3,2,2016-06-03 04:30:55+00:00,1.24,boneskull,MEMBER,1,1,0,0,['semver-major'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
2293,Watch from programmatic API,"Is there an equivalent of the --watch flag for the programmatic (from Node) API? If not, we should look into adding one. If there is, we should make sure it's as easy as --watch to find in the documentation.
This was prompted by Gitter discussion with @DrMabuse23",ScottFreeCode,CONTRIBUTOR,2016-06-02 20:12:06+00:00,True,2018-10-11 09:28:11+00:00,860.55,,5,4,2016-06-02 22:20:18+00:00,0.09,DrMabuse23,NONE,1,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2294,Clarify timeout message,"We should consider updating the timeout error message from ""timeout of [time] exceeded. Ensure the done() callback is being called in this test."" to something like ""timeout of [time] exceeded. Ensure the test completes within [time] or increase the timeout set, and ensure the done() callback is being called when this test completes."" The current message makes it sound like the problem is forgetting to call done even when the problem is simply that the test took too long or that some asynchronous action never got called back.",ScottFreeCode,CONTRIBUTOR,2016-06-02 20:15:43+00:00,True,2016-10-29 13:18:53+00:00,148.71,,4,4,2016-06-03 19:36:23+00:00,0.97,dasilvacontin,CONTRIBUTOR,2,2,0,0,"['chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2295,"Base reporter, add unified diff separator","Right now the unified diff output has no separators.  Resulting in output similar to this:

Having not used mocha in some time, I had completely forgotten it splits before/after 4 lines from the affected text and spent a while trying to figure out how ""PD"" could possibly be having values of ""15/30"" or ""50/100"".
I don't know what kind of separator to add, but a blank line or two should suffice for majority of cases.  I'd have to check to see if other libraries have tackled this problem how they went about it.
The code to modify would be this:

  
    
      mocha/lib/reporters/base.js
    
    
        Lines 161 to 207
      in
      7493bca
    
    
    
    

        
          
           failures.forEach(function(test, i){ 
        

        
          
             // format 
        

        
          
             var fmt = color('error title', '  %s) %s:\n') 
        

        
          
               + color('error message', '     %s') 
        

        
          
               + color('error stack', '\n%s\n'); 
        

        
          
            
        

        
          
             // msg 
        

        
          
             var err = test.err 
        

        
          
               , message = err.message || '' 
        

        
          
               , stack = err.stack || message 
        

        
          
               , index = stack.indexOf(message) 
        

        
          
               , actual = err.actual 
        

        
          
               , expected = err.expected 
        

        
          
               , escape = true; 
        

        
          
             if (index === -1) { 
        

        
          
               msg = message; 
        

        
          
             } else { 
        

        
          
               index += message.length; 
        

        
          
               msg = stack.slice(0, index); 
        

        
          
               // remove msg from stack 
        

        
          
               stack = stack.slice(index + 1); 
        

        
          
             } 
        

        
          
            
        

        
          
             // uncaught 
        

        
          
             if (err.uncaught) { 
        

        
          
               msg = 'Uncaught ' + msg; 
        

        
          
             } 
        

        
          
             // explicitly show diff 
        

        
          
             if (err.showDiff !== false && sameType(actual, expected) 
        

        
          
                 && expected !== undefined) { 
        

        
          
            
        

        
          
               escape = false; 
        

        
          
               if (!(utils.isString(actual) && utils.isString(expected))) { 
        

        
          
                 err.actual = actual = utils.stringify(actual); 
        

        
          
                 err.expected = expected = utils.stringify(expected); 
        

        
          
               } 
        

        
          
            
        

        
          
               fmt = color('error title', '  %s) %s:\n%s') + color('error stack', '\n%s\n'); 
        

        
          
               var match = message.match(/^([^:]+): expected/); 
        

        
          
               msg = '\n      ' + color('error message', match ? match[1] : msg); 
        

        
          
            
        

        
          
               if (exports.inlineDiffs) { 
        

        
          
                 msg += inlineDiff(err, escape); 
        

        
          
               } else { 
        

        
          
                 msg += unifiedDiff(err, escape); 
        

        
          
               } 
        

        
          
             }",olsonpm,CONTRIBUTOR,2016-06-03 22:06:23+00:00,True,2017-10-18 05:00:25+00:00,501.29,,3,10,2016-06-12 01:57:14+00:00,8.16,ScottFreeCode,CONTRIBUTOR,1,2,0,1,"['help wanted', 'semver-major', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
2296,Docs about timeout for hooks,"It seems that one can use this.timeout to set timeout for hooks. Here is an example:
describe('case', function() {
    beforeEach(function(done) {
        this.timeout(3000);
        setTimeout(done, 2500);
    });

    it('should do something', function(done) {
        // ...
       done();
    });
});
The problem is there is nothing in docs about such feature. I believe it could be useful to document it.
I could open a PR for docs but I'm not sure where the docs are situated.",JustBlackBird,CONTRIBUTOR,2016-06-05 11:01:40+00:00,True,2016-06-27 06:28:40+00:00,21.81,,3,2,2016-06-09 03:36:34+00:00,3.69,ScottFreeCode,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2297,"XUnit Reporter Throws Fatal Error ""test.isPending is not a function""","The XUnit reporter (/lib/reporters/xunit.js) fails on line 134 when attempting to call test.isPending(). The error reported is: Fatal error: test.isPending is not a function.
When I inspect the test object passed into XUnit.prototype.test, I do not see isPending defined on the object.
If I modify the else if condition to typeof test.isPending === 'function' && test.isPending(), all tests complete successfully and the XUnit report is written correctly.
What I cannot determine (at least not without a little help) is if this is a valid error or if this is a downstream effect caused by something my code is doing incorrectly.
I’m calling mocha from grunt-mocha for client side tests. If this is an upstream error on their side I’m happy to help track it down.",matthewriley,NONE,2016-06-06 19:05:09+00:00,True,2016-06-10 21:07:53+00:00,4.09,,3,20,2016-06-07 23:22:28+00:00,1.18,ScottFreeCode,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2298,Suite `only` not anchored to title start,"In the process of looking into #2157 (comment), I noticed that the BDD interface's it.only escapes the regular expression and requires it to match the whole title with ^ and $, but describe.only merely passes the string to grep, which escapes it but does not require it to begin with ^. This same issue also affects the QUnit and TDD interfaces.
Contrived example:
describe.only(""one"", function() {
  it(""two"", function() { /* succeed */ })
})
describe(""you know"", function() {
  it(""one of these should not run"", function() {
    throw new Error(""Specifically, this one should not run!"")
  })
})",ScottFreeCode,CONTRIBUTOR,2016-06-08 03:49:48+00:00,True,2016-09-28 21:02:10+00:00,112.72,,2,3,2016-06-09 03:52:34+00:00,1.0,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['confirmed-bug', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2300,"HTML reporter grep links do not respect fgrep, handle existing ? wrong","The grep links in the HTML reporter replace an existing grep=... parameter in the URL, but not fgrep=.... Furthermore, they tend to append an extra ? if ?fgrep=... is already in the URL instead of appending with & in that case.
Note that this code is in the same area as #2285.",ScottFreeCode,CONTRIBUTOR,2016-06-09 03:55:40+00:00,False,,,,2,0,,,,,0,0,0,0,"['browser', 'confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2302,allowUncaught doesn't work in hooks,For example if exception was thrown in beforeEach hook then it will be caught even if mocha.allowUncaught() was executed. This is because during the hook execution the runner not sets allowUncaught parameter for it.,dima117,NONE,2016-06-10 11:06:26+00:00,True,2019-03-06 10:13:55+00:00,998.96,,4,5,2016-06-11 15:44:33+00:00,1.19,ScottFreeCode,CONTRIBUTOR,1,2,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2304,Combine mocha tests programmatically,"I'm trying to combine mocha tests in a programmatic way with (so that I can pass arguments between tests).
But the tests don't get detected by Mocha if they're not there at the beginning of the run.
This is the code I got to so far:
for (var i = 0; i < buildingBlocks.length; i++) {
        (function (index) {
            var buildingBlock = buildingBlocks[index];
            it(buildingBlock.getDescription(), function (done) {
                var executeCallback = function (err, args) {
                    done();
                    console.log(""after done"");
                    function(index+1)(args);
                };
                args.push(executeCallback);
                buildingBlocks[index].execute.apply(null, args);

            })
        })(i);
    }

Thanks a lot for your help.",jhagege,NONE,2016-06-10 13:30:16+00:00,True,2016-06-27 06:27:48+00:00,16.71,,3,3,2016-06-10 20:55:12+00:00,0.31,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2306,Escape special characters for markdown reporter,"If I put any character has a special meaning in markdown, into the describe message. Run Mocha with -R md .The output markdown will have wrong semantic with any special character in messages.
Just write test like this:
describe('***', function() {
  describe('\\\\', function() {
    it('>>> should be escaped');
  });
});
Markdown would have:
# TOC
   - [***](#)
     - [\\](#-)
<a name=""""></a>

<a name=""""></a>
# ***
<a name=""-""></a>
## \\
The special characters changed markdown output's semantic, finally brings out a strange look.",frantic1048,NONE,2016-06-12 15:14:29+00:00,False,,,,4,8,2016-06-13 16:15:33+00:00,1.04,ScottFreeCode,CONTRIBUTOR,1,1,0,3,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2308,Inconsistent return of suite/test,"All the interfaces' (except the JSONesque exports interface, of course) regular suite and test functions return the new suite or test. The only and skip versions, however, do not return the pending suite or test -- except the only versions in the BDD interface. Is this intentional?",ScottFreeCode,CONTRIBUTOR,2016-06-13 20:47:51+00:00,False,,,,2,1,2016-06-27 06:25:05+00:00,13.4,boneskull,MEMBER,1,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2309,Replace manually activated failure tests with throw assertions,"Go through the test suites and find things that are failure-tests but either commented out or otherwise unusually handled and if possible change them to assert that the failure throws or passes an error to a callback or whatever the expectable failure mode is.
For example: 
  
    
      mocha/test/acceptance/fs.spec.js
    
    
        Lines 17 to 18
      in
      2bb2b9f
    
    
    
    

        
          
           // uncomment 
        

        
          
           // fs.readFile(tmpFile('does-not-exist'), done);",ScottFreeCode,CONTRIBUTOR,2016-06-13 20:52:34+00:00,False,,,,2,0,,,,,0,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2310,Can not find module 'C',"Run tests with custom compilers:
mocha --compilers js:Absolute Path
Absolute Path: C:\Users\xxxx\test-demo\lib\compiler.js is my custom file;
windows system, what's the right way?",silentcloud,CONTRIBUTOR,2016-06-14 07:33:52+00:00,True,2016-07-01 18:25:21+00:00,17.45,,3,3,2016-06-21 13:53:32+00:00,7.26,afc163,NONE,1,0,0,1,"['confirmed-bug', 'windows']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
2311,`this.slow()` doesn't work in describe callbacks like `this.timeout`,"describe('a', function() {
  this.timeout(5000);
  this.slow();

  it('1', function(cb) {
    setTimeout(cb, 3000);
  });

  it('2', function(cb) {
    this.slow(); // just for contrast with test 1
    setTimeout(cb, 3000);
  });
});
If I understand the docs correctly, I expect neither of the tests to timeout or have slow warnings because they're both covered by this.timeout and this.slow calls in the describe section. Neither of the tests timeout, but the first test (not covered by its own redundant this.slow) has a slow warning still:
  a
    ✓ 1 (3008ms)
    ✓ 2


  2 passing (6s)

mocha version 2.5.3",Macil,NONE,2016-06-15 20:26:22+00:00,True,2016-06-28 05:56:55+00:00,12.4,,2,3,2016-06-27 06:23:55+00:00,11.41,boneskull,MEMBER,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2312,Add a `--clearscreen` option to go with `--watch`,"We should add a --clearscreen flag that clears the console before a test run, for use with --watch. This would be handy for reporters other than ""min"" (which has this effect built in and can be used as an example for implementation). It can currently be done with a global before hook, but that's clumsier than a flag would be (you have to go out of your way to set it up so that you can choose to include it or not as easily as if it were a flag) and could work incorrectly in the unlikely edge case that you have other global before hooks printing stuff.
Inspired by @AshCoolman on Gitter.",ScottFreeCode,CONTRIBUTOR,2016-06-15 20:59:04+00:00,False,,,,9,14,2016-06-18 21:22:27+00:00,3.02,dNitro,NONE,2,0,0,6,"['feature', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2313,markdown reporter doesn't work with source maps,"When using Mocha with a compiler such a Babel or CoffeeScript, is it possible to view the original function body instead of the transpiled function body in Mocha reports such as the Markdown reporter?
cc: @thomas88",ScottFreeCode,CONTRIBUTOR,2016-06-15 22:30:51+00:00,False,,,,6,4,2016-06-15 22:31:54+00:00,0.0,ScottFreeCode,CONTRIBUTOR,1,1,0,2,"['confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2314,Run Mocha tests from within existing Node.js code,"It would be nice to be able to run Mocha tests from within normal Node.js code. Here's what I'm talking about:
const Mocha = require('Mocha');
const mocha = new Mocha();
const assert = require('chai').assert;

//do normal Node.js things

mocha.run(() => {
     describe('an amazing suite of tests', () => {
         it('should be true', () => {
             assert.equal(true, true);
         });
     });
});

// do some more Node.js things

Or maybe a template string could work if we had to:
const Mocha = require('Mocha');
const mocha = new Mocha();
const assert = require('chai').assert;

//do normal Node.js things

mocha.run(`
     describe('an amazing suite of tests', () => {
         it('should be true', () => {
             assert.equal(true, true);
         });
     });
`);

// do some more Node.js things

I'm running into problems with the limitations of only being able to run Mocha tests by loading stand-alone files. I'm trying to get some interesting test environments working inside of Electron and with web components.",lastmjs,NONE,2016-06-16 22:18:59+00:00,True,2016-06-17 21:32:25+00:00,0.97,,5,4,2016-06-17 21:32:25+00:00,0.97,boneskull,MEMBER,1,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2315,Uncaught TypeError: Cannot read property 'currentRetry' of undefined,"Tested on Mocha 2.5.3.
When uncaught error is thrown during ""before"" phase additional ""Uncaught TypeError: Cannot read property 'currentRetry' of undefined"" error is thrown from mocha.
Simple test case:
'use strict';

describe('test', function () {
    before(function () {
        require('http').createServer().listen(1);
    });

    it('something', function () {
    });
});
output:
  test
    1) ""before all"" hook

  2) Uncaught error outside test suite

  0 passing (27ms)
  2 failing

  1) test ""before all"" hook:
     Uncaught Error: listen EACCES 0.0.0.0:1
      at Object.exports._errnoException (util.js:953:11)
      at exports._exceptionWithHostPort (util.js:976:20)
      at Server._listen2 (net.js:1240:19)
      at listen (net.js:1289:10)
      at Server.listen (net.js:1385:5)
      at Context.<anonymous> (test/test.js:5:40)

  2) test Uncaught error outside test suite:
     Uncaught TypeError: Cannot read property 'currentRetry' of undefined",ksuszka,NONE,2016-06-17 08:32:15+00:00,True,2016-09-22 05:55:56+00:00,96.89,,8,17,2016-06-17 22:00:52+00:00,0.56,boneskull,MEMBER,1,2,0,5,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2316,update jade dependency to pug,"On installation of your fine module in its latest version 2.5.3 I get the following warning:

npm WARN deprecated jade@0.26.3: Jade has been renamed to pug, please install the latest version of pug instead of jade

Please change jade dependency to pug as suggested.",arturh85,NONE,2016-06-19 05:02:34+00:00,True,2016-06-27 06:07:34+00:00,8.05,,3,2,2016-06-19 06:43:09+00:00,0.07,marvinhagemeister,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2317,QUnit interface missing from help overview,"mocha/bin/_mocha
    
    
         Line 77
      in
      dce0aec
    
    
    
    

        
          
           .option('-u, --ui <name>', 'specify user-interface (bdd|tdd|exports)', 'bdd') 
        
    
  

 is missing the QUnit interface in its list: ""(bdd|tdd|exports)""
Incidentally, would it be feasible to just copy the names from lib/interfaces/index.js (e.g. with a for in loop or the keys function)? (Both there and at 
  
    
      mocha/bin/_mocha
    
    
         Line 157
      in
      dce0aec
    
    
    
    

        
          
           program.on('interfaces', function(){ 
        
    
  

) That way they couldn't get out of sync like this in the future.",ScottFreeCode,CONTRIBUTOR,2016-06-19 19:37:09+00:00,True,2016-07-01 06:21:33+00:00,11.45,,2,2,2016-06-27 06:06:41+00:00,7.44,boneskull,MEMBER,1,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2318,DoS vulnerability in glob dependency,"glob version 3.2.11 includes a dependency on minimatch 0.3.0, which contains a DoS vulnerability as documented here:
https://nodesecurity.io/advisories/118
This should be resolvable by updating to the current version of glob, which uses the up-to-date minimatch version.",lucioperca,NONE,2016-06-20 22:39:27+00:00,True,2016-07-02 23:04:41+00:00,12.02,v3.0.0,5,16,2016-06-20 23:48:22+00:00,0.05,ScottFreeCode,CONTRIBUTOR,1,1,0,3,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2319,Running mocha programmatically doesn't show outside-of-test errors,"Currently, for example, I was missing a module that I was attempting to require within the only test with which I did mocha.add(test).
When I do mocha.run() by running my test runner, as expected - none of the tests run. However, there is no error printed out, the node process just silently dies.
However, when I call mocha from the command line on the same test file, a nice error is printed telling me I forgot to install the module.
Why is this happening :(",super-cache-money,NONE,2016-06-21 00:07:14+00:00,True,2016-06-21 00:09:58+00:00,0.0,,2,3,2016-06-21 00:09:58+00:00,0.0,super-cache-money,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2320,display helpful error when if --compilers used incorrectly,"$ mocha --compilers babel/register
/usr/local/lib/node_modules/mocha/bin/_mocha:302
if (mod[0] == '.') mod = join(process.cwd(), mod);
^
TypeError: Cannot read property '0' of undefined
at /usr/local/lib/node_modules/mocha/bin/_mocha:302:10
at Array.forEach (native)
at Object. (/usr/local/lib/node_modules/mocha/bin/_mocha:297:19)
at Module._compile (module.js:409:26)
at Object.Module._extensions..js (module.js:416:10)
at Module.load (module.js:343:32)
at Function.Module._load (module.js:300:12)
at Function.Module.runMain (module.js:441:10)
at startup (node.js:139:18)
at node.js:968:3",fendoude007,NONE,2016-06-21 08:18:59+00:00,False,,,,3,4,2016-06-21 12:56:39+00:00,0.19,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2321,"""--require"" does not honour ""--compilers"" file extension support","babel-register registers file extensions like "".es"" and "".jsx"". You cannot:
--compilers js:babel-register
--require ./test/installDirtyChai

when installDirtyChai has a different extension: ./test/installDirtyChai.es
In other oddness if you do:
# test/mocha.opts
--compilers js:babel-register
--require ./test/installDirtyChai

// test/installDirtyChai.js
require('./installDirtyChaiActual');
// test/installDirtyChaiActual.es
import chai from 'chai';
import dirtyChai from 'dirty-chai';

chai.use(dirtyChai);
everything works, so it's like the require function is not being overridden correctly",graingert,CONTRIBUTOR,2016-06-21 11:51:20+00:00,True,2017-06-08 03:02:13+00:00,351.63,,3,7,2016-06-21 12:59:45+00:00,0.05,ScottFreeCode,CONTRIBUTOR,1,2,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2322,Fix SauceLabs not running for on non-member's PRs,,dasilvacontin,CONTRIBUTOR,2016-06-21 16:58:12+00:00,True,2016-06-27 05:48:57+00:00,5.54,,2,1,2016-06-27 05:48:57+00:00,5.54,boneskull,MEMBER,1,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2323,browser-entry.js not present when mocha 2.5.3 is installed via npm,"cd /tmp; npm i mocha; stat node_modules/browser-entry.js
# => stat: node_modules/browser-entry.js: stat: No such file or directory
This causes require('mocha') to fail in a webpack environment",qrohlf,NONE,2016-06-21 18:50:12+00:00,True,2016-06-22 13:52:41+00:00,0.79,,3,4,2016-06-21 18:51:42+00:00,0.0,boneskull,MEMBER,1,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2326,Not all tests are run using npm test vs global mocha,"I have this code in package.json-scripts:
""test"": ""NODE_ENV=test mocha --compilers js:babel-core/register --require babel-polyfill --require ignore-styles src/**/*.spec.js --recursive""

Only tests at this dir (I have tests in other subdirs of src/client/components aswell) are picked up (11 tests)
If I run this code in bash: (the same code as above):
NODE_ENV=test mocha --compilers js:babel-core/register --require babel-polyfill --require ignore-styles src/**/*.spec.js --recursive

It picks up all my tests (12)
If I add a new test in src/lib (where my picked up tests are), it is picked up, if I add it in a deeper directory, it is not picked up
I am using mocha@^2.5.3 locally and globally (-g)
If I change the globbing pattern to **/*.spec.js, every test is picked up (including node_modules)
Am I doing something wrong here?",phun-ky,NONE,2016-06-22 07:30:34+00:00,True,2016-06-27 06:34:31+00:00,4.96,,5,8,2016-06-22 07:50:39+00:00,0.01,phun-ky,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2327,--watch and --recursive command line parameters not executing tests correctly on Windows,"Setup
Tested with node 6.2.2 (https://nodejs.org/dist/v6.2.2/node-v6.2.2-x64.msi)
and current master build (v7.0.0-pre) built with MinGW 64 compiler
on Windows 8.1
npm install mocha -g installs mocha 2.5.3 with warnings

npm WARN deprecated jade@0.26.3: Jade has been renamed to pug, please install the latest version of pug instead of jade
npm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue

Going through walkthrough https://www.codementor.io/nodejs/tutorial/unit-testing-nodejs-tdd-mocha-sinon
Same results executing in a DOS prompt, or a MinGW64 console.
Steps
Running mocha tests --recursive --watch --colors where tests is a root level directory containing tests.
Correctly runs tests initially.

CartSummary
√ getSubtotal() should return 0 if no items are passed in
√ getSubtotal() should return the sum of the price * quantity of the items
2 passing (6ms)

Then edit a test file to introduce non-breaking change.
Output appends

0 passing (0ms)

Any subsequent edits go ignored.
Expected Behaviour
Changes to test files to trigger execution.
Subsequent edits to be noticed.",WaffleSouffle,NONE,2016-06-22 14:17:03+00:00,True,2017-12-05 17:23:17+00:00,531.13,,12,26,2016-06-22 14:51:45+00:00,0.02,dasilvacontin,CONTRIBUTOR,1,2,0,9,"['needs-mcve', 'unconfirmed-bug', 'windows']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False
2330,ENAMETOOLONG when files() from utils.js encounters a symlink loop,"On one of my projects, when I run Mocha in watch mode, I get the error below.  This is because meteor-roles/examples/flow-router/alanning:roles is a symlink back to meteor-roles.
Error: ENAMETOOLONG: name too long, stat '/Users/andy/jcore-portal/meteor-roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/examples/flow-router/packages/alanning:roles/docs/assets/vendor/prettify/prettify-min.css'
    at Error (native)
    at fs.statSync (fs.js:892:18)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:234:11
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at /Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:235:17
    at Array.forEach (native)
    at Object.exports.files (/Users/andy/jcore-portal/node_modules/mocha/lib/utils.js:232:6)
    at Object.<anonymous> (/Users/andy/jcore-portal/node_modules/mocha/bin/_mocha:353:26)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Function.Module.runMain (module.js:447:10)
    at startup (node.js:139:18)
    at node.js:999:3",jedwards1211,NONE,2016-06-24 15:03:52+00:00,False,,,,3,4,2016-06-27 05:43:19+00:00,2.61,boneskull,MEMBER,1,0,0,2,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2332,Re-run a test multiple times,"this.retries() allows to run a test multiple times, but the test will pass on the first successful run.
I'm suggesting to add this.rerun() for tests that might randomly succeed (false positives). It will run the test n times and will pass only if all of the reruns have passed successfully. It's useful when testing behavior that is probabilistic.
At the moment I'm running the test in a loop:
for (var i = 1; i <= 100; i++) {
  it('tests something #' + i, function(done) {
    //
  });
}
The problem with this approach is that it outputs 100 different tests and messes up the test counting.",guyb7,NONE,2016-06-26 11:14:31+00:00,False,,,,6,6,2016-06-27 05:41:09+00:00,0.77,boneskull,MEMBER,3,0,0,3,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2334,can't use this.skip() in an async test context,see comments near end of #946,boneskull,MEMBER,2016-06-27 00:30:17+00:00,True,2016-06-28 15:21:04+00:00,1.62,,1,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2337,`Runner#fail` is getting executed with an instance of `Pending`,"code smell: #946 (comment)

  
    
      mocha/lib/runner.js
    
    
        Lines 221 to 234
      in
      8a37e01
    
    
    
    

        
          
           Runner.prototype.fail = function(test, err) { 
        

        
          
             ++this.failures; 
        

        
          
             test.state = 'failed'; 
        

        
          
            
        

        
          
             if (!(err instanceof Error || err && typeof err.message === 'string')) { 
        

        
          
               err = new Error('the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)'); 
        

        
          
             } 
        

        
          
            
        

        
          
             err.stack = (this.fullStackTrace || !err.stack) 
        

        
          
               ? err.stack 
        

        
          
               : stackFilter(err.stack); 
        

        
          
            
        

        
          
             this.emit('fail', test, err); 
        

        
          
           };",dasilvacontin,CONTRIBUTOR,2016-06-28 15:21:38+00:00,True,2017-10-20 07:35:29+00:00,478.68,,3,8,2016-06-28 15:22:26+00:00,0.0,dasilvacontin,CONTRIBUTOR,1,2,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2338,fix karma tests,Karma tests are failing because socket.io@1.4.8 broke IE,boneskull,MEMBER,2016-06-29 04:21:36+00:00,True,2016-06-29 04:37:59+00:00,0.01,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2340,internal integration test limitations,"See test/integration/regression.js for some examples of the problem.
It appears we're running integration tests by using the dot reporter (I think?) then grepping the output.
This is one reason we why can't run these tests in the browser.
We should use a different, machine-readable reporter for these tests.  If that's json, so be it.
Questions:

Are there limitations to using non-html reporters in Karma?  I know Karma can use alternate reporters, but I'm not sure what the consequences of that are, if any.
Will the chosen reporter need to be modified?
Would it be a good idea to develop a reporter specifically for internal consumption?
The integration tests launch new instances of Mocha via the executable.  Can we achieve this in the browser without too much difficulty?  How?

Maybe a custom bundle?  Probably too risky.
Since Mocha stuffs things in window--including the instance--we will start overwriting things quickly and run into trouble.",boneskull,MEMBER,2016-06-29 05:05:48+00:00,True,2018-12-08 01:25:06+00:00,891.85,,2,3,2016-06-30 20:39:18+00:00,1.65,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['needs-feedback', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2341,WallabyJS configuration,"I've taken several half-assed stabs at getting WallabyJS running to test Mocha.
Currently we can only run a subset of the tests (afaik) due to issues explained in wallabyjs/public#674.
But something is better than nothing.",boneskull,MEMBER,2016-06-29 05:27:45+00:00,False,,,,1,0,,,,,0,0,0,0,"['help wanted', 'nice-to-have', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2342, minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue,"Could you please update your package to use the latest version of minimatch?
Error: minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue
``-- mocha@2.5.3
-- glob@3.2.11 -- minimatch@0.3.0
`",efortes,NONE,2016-06-30 13:18:26+00:00,True,2016-07-01 05:05:50+00:00,0.66,,3,2,2016-07-01 05:05:50+00:00,0.66,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2344,expand IE matrix,"saucelabs should test ie9, ie10, ie11",boneskull,MEMBER,2016-07-01 05:06:35+00:00,True,2017-01-28 12:33:06+00:00,211.31,,2,4,2017-01-17 15:10:44+00:00,200.42,coderbyheart,CONTRIBUTOR,1,1,0,0,"['chore', 'help wanted', 'qa']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2346,we need stinkin' badges,I guess I'd like to see some badges that show what environments Mocha claims to support.,boneskull,MEMBER,2016-07-01 06:49:34+00:00,False,,,,4,3,2016-12-23 19:53:33+00:00,175.54,hollomancer,NONE,0,2,0,1,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2347,utils.lookupFiles test has too broad of an assertion,"Not sure how this happened, or what made those temp files, but:
  1) lookupFiles should not choke on symlinks:
     Error: expected [ '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_6f352fce4279ee1002338a0672d7c659e6b9e387.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_7efa3d9e30be1a19d22d03438ad79efdb0421ec0.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_96d9e06669262c395d74a12c2f15490535829507.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_9ac4a2d4799c05535966dbe43561384d33ce39f9.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_abaffa4e0efeeb0e05b6936dd3ed75fb625d264d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/karma.conf_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_context_After_b50aecc863f5de2af9a13d201a9cebaa66b4c9da.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_mocha_After_2975dc5ca9a0c6869a580c201f2698882b8b8b95.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_reporters_doc_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_reporters_html_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_reporters_json-cov_After_add08adb004cf249433c99c572f3dcf4d376f53d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_reporters_json-cov_After_e88d5910023ec0db794733866a58a9359a21da19.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_reporters_json-stream_After_add08adb004cf249433c99c572f3dcf4d376f53d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_reporters_json-stream_After_e88d5910023ec0db794733866a58a9359a21da19.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_runnable_After_b50aecc863f5de2af9a13d201a9cebaa66b4c9da.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_runnable_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_suite_After_2975dc5ca9a0c6869a580c201f2698882b8b8b95.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_utils_After_6f352fce4279ee1002338a0672d7c659e6b9e387.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_utils_After_7efa3d9e30be1a19d22d03438ad79efdb0421ec0.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_utils_After_9ac4a2d4799c05535966dbe43561384d33ce39f9.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_utils_After_b50aecc863f5de2af9a13d201a9cebaa66b4c9da.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/lib_utils_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/mocha-utils-link.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/mocha-utils.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/mocha_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_acceptance_fs_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_acceptance_lookup-files_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_acceptance_utils_After_6f352fce4279ee1002338a0672d7c659e6b9e387.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_acceptance_utils_After_9ac4a2d4799c05535966dbe43561384d33ce39f9.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_color_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_diffs_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_diffs_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_hooks_multiple.hook.async.error_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_hooks_multiple.hook.error_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_pending_skip.async.beforeEach_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_pending_skip.async.before_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_pending_skip.async.spec_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_regression_issue-1991_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_fixtures_regression_issue-1991_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_helpers_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_hook.err_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_hook.err_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_hook.err_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_hooks_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_hooks_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_hooks_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_multiple.done_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_multiple.done_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_pending_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_pending_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_pending_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_regression_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_regression_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_retries_After_8fe36a36c41aa22ceaa98fd86958d89c2b67fae5.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_timeout_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_timeout_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_uncaught_After_4af2b8d1ca4cae8ddafa89fa34018ebc0f7cb60d.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_integration_uncaught_After_78f36fcfd9f54c655e7621a6ae6741454ccaae39.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_runnable_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_utils_After_6f352fce4279ee1002338a0672d7c659e6b9e387.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_utils_After_9ac4a2d4799c05535966dbe43561384d33ce39f9.js',
  '/var/folders/7f/7vr9hv5j35zd_0k42n8m4xhw0000gs/T/test_utils_After_b9e96311b6ee73080ef51521496bbfeef4c3cb03.js' ] to have a length of 2 but got 64
      at Assertion.assert (node_modules/expect.js/index.js:96:13)
      at Assertion.length (node_modules/expect.js/index.js:345:10)
      at Context.<anonymous> (test/acceptance/lookup-files.js:35:8)
      at callFn (lib/runnable.js:330:21)
      at Test.Runnable.run (lib/runnable.js:323:7)
      at Runner.runTest (lib/runner.js:428:10)
      at lib/runner.js:534:12
      at next (lib/runner.js:348:14)
      at lib/runner.js:358:7
      at next (lib/runner.js:284:14)
      at lib/runner.js:321:7
      at done (lib/runnable.js:287:5)
      at callFn (lib/runnable.js:348:7)
      at Hook.Runnable.run (lib/runnable.js:323:7)
      at next (lib/runner.js:298:10)
      at Immediate._onImmediate (lib/runner.js:326:5)",boneskull,MEMBER,2016-07-01 07:12:29+00:00,True,2016-07-03 06:19:13+00:00,1.96,v3.0.0,1,1,2016-07-03 06:19:13+00:00,1.96,boneskull,MEMBER,1,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2348,upgrade eslint,"eslint is stuck at 1.x due to breaking changes.  I'm not going to change it for v3.0.0, so sometime thereafter would be fine.",boneskull,MEMBER,2016-07-02 03:04:29+00:00,True,2016-07-22 13:56:42+00:00,20.45,,2,4,2016-07-02 18:27:21+00:00,0.64,tjni,NONE,1,0,0,1,"['chore', 'nice-to-have']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2351,code coverage in CI,"CodeClimate or Codacy or Coveralls.  Or some combination thereof.  Thoughts, preferences?
cc @mochajs/core",boneskull,MEMBER,2016-07-03 20:48:59+00:00,True,2017-05-25 20:59:46+00:00,326.01,,5,5,2016-07-03 22:52:09+00:00,0.09,dasilvacontin,CONTRIBUTOR,1,3,0,1,"['chore', 'needs-feedback', 'qa']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2352,replace GNU make with something else,"scripty is a thing and so is p-s.
I don't want the overhead of a full-blown task runner like Grunt or Gulp, as I don't want to rely on plugins.
Thoughts?
@kentcdodds Have you seen scripty?  p-s looks similar.  Maybe you guys should pool efforts?
cc @searls
cc @mochajs/core",boneskull,MEMBER,2016-07-03 20:57:37+00:00,True,2018-01-15 18:20:59+00:00,560.89,,5,10,2016-07-03 21:02:13+00:00,0.0,kentcdodds,CONTRIBUTOR,1,3,0,1,"['chore', 'developer-experience']",True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2353,delete old branches,too many branches just hangin' around.,boneskull,MEMBER,2016-07-05 07:04:01+00:00,True,2018-11-18 18:17:03+00:00,866.47,,3,5,2017-04-03 15:54:37+00:00,272.37,drazisil,NONE,1,0,0,1,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2354,Deprecation Warning because of Mocha@2.5.3,"I get those deprecation warning because of mocha@2.5.3
npm WARN deprecated jade@0.26.3: Jade has been renamed to pug, please install the latest version of pug instead of jade
npm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue

I am very worried about minimatch@0.3.0 knowing that the current version is 3.0.2.
± npm ls minimatch                                                                                                                                                        
react-redux-universal-hot-example@0.9.0 /Users/pierrecaserta/workspace/working/casertap_working/js/react/react-redux-universal-hot-example
├─┬ babel-cli@6.10.1
│ └─┬ chokidar@1.6.0
│   └─┬ fsevents@1.0.12
│     └─┬ node-pre-gyp@0.6.25
│       ├─┬ rimraf@2.5.2
│       │ └─┬ glob@7.0.3
│       │   └── minimatch@3.0.0
│       └─┬ tar-pack@3.1.3
│         └─┬ fstream-ignore@1.0.3
│           └── minimatch@3.0.0
├── minimatch@3.0.2
└─┬ mocha@2.5.3
  └─┬ glob@3.2.11
    └── minimatch@0.3.0

 npm ls jade                                                                                                                                                            
react-redux-universal-hot-example@0.9.0 /Users/pierrecaserta/workspace/working/casertap_working/js/react/react-redux-universal-hot-example
└─┬ mocha@2.5.3
  └── jade@0.26.3",casertap,NONE,2016-07-05 09:43:29+00:00,True,2016-07-05 20:13:59+00:00,0.44,,3,3,2016-07-05 09:59:53+00:00,0.01,AviVahl,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2355,moral of the story: quote your globs on the command-line,"I'm using Mocha.js as part of a CI pipeline.
Recently the failing tests don't actually cause the npm test step to fail the build because it looks like Mocha.js doesn't exit in an failure state.
ERROR: {""error"":{""message"":""Cannot read property 'where' of undefined"",""stack"":""TypeError: Cannot read property 'where' of undefined\n    at Object.undeleted
info: Done.
npm info posttest api@0.0.0
npm info ok
This is quite annoying as it allows commits with failing tests to still be build in our CI pipeline.",sverraest,NONE,2016-07-05 11:07:48+00:00,True,2016-11-02 19:50:42+00:00,120.36,,6,9,2016-07-11 07:20:22+00:00,5.84,gurdiga,NONE,2,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2356,drop HTMLCov and JSONCov reporters,"I mentioned this in Gitter, but both of these reporters leverage node-jscoverage, which is old and busted.  It's my suspicion that these two reporters are rarely--if ever--used by anyone.  Better coverage options exist in the form of istanbul, nyc, etc.
Furthermore, the only reason we have a dependency on jade/pug is these reporters.
I would like to drop them completely for v3.0.0, and remove the jade/pug dependency.
If anyone out there uses either of these reporters, please let us know!
cc @mochajs/core",boneskull,MEMBER,2016-07-05 20:11:50+00:00,True,2016-07-07 06:40:03+00:00,1.44,v3.0.0,3,4,2016-07-06 07:07:17+00:00,0.46,dasilvacontin,CONTRIBUTOR,1,2,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2358,Highlight words wrapped in backticks on reporter output,"It's a common practice to wrap words related to code in backticks on test titles, which can make a lot of visual noise on the reporter output.
I suggest to add an option that could enable such feature, for example --highlight-backticks, which could transform this:

Into this:

I already made a draft of its implementation but I would like to have some feedback about its usefulness  prior to opening a PR.",ricardogama,NONE,2016-07-06 17:21:24+00:00,False,,,,2,3,2016-07-07 05:53:56+00:00,0.52,boneskull,MEMBER,1,0,0,1,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2359,add working examples,"We should have some working examples of common configurations.  Ideally these will also be available on mochajs.org, but should live in the repo as well.  These files should not be distributed with a production npm install nor a bower install.
If anyone is interested in adding something, I'm using the examples branch; send a PR or commit there.",boneskull,MEMBER,2016-07-07 05:36:03+00:00,False,,,,3,2,2016-07-09 09:18:13+00:00,2.15,gurdiga,NONE,0,0,0,2,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2360,Q: CLI grep regex behavior?,"it('hey', () => {})
$ mocha test.js 
# _mocha /(?:)/


  ✓ hey

  1 passing (6ms)

$ mocha test.js -g hey
# _mocha /hey/


  ✓ hey

  1 passing (5ms)

$ mocha test.js -g ^hey$
# _mocha /^hey$/


  0 passing (0ms)
Is this the expected behavior?",simov,CONTRIBUTOR,2016-07-07 11:39:31+00:00,False,,,,4,7,2016-07-07 11:44:57+00:00,0.0,simov,CONTRIBUTOR,1,1,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2361,Error name is truncated in message.,"describe(""it"", function() {
    it(""should work"", function() {
        throw new Error;
    });
});
It prints:
  it
    1) should work


  0 passing (10ms)
  1 failing

  1) it should work:

  rror
      at Context.<anonymous> (example.js:12:15)


rror?",kownacki,NONE,2016-07-07 13:03:25+00:00,True,2016-07-09 06:10:30+00:00,1.71,,2,2,2016-07-09 04:13:12+00:00,1.63,boneskull,MEMBER,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2363,Update minmatch/dependencies who pull in minimatch to avoid RegExp DoS issue? ,"npm WARN deprecated jade@0.26.3: Jade has been renamed to pug, please install the latest version of pug instead of jade
npm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue",yaananth,NONE,2016-07-07 18:43:40+00:00,True,2016-07-09 03:33:42+00:00,1.37,,3,4,2016-07-09 03:33:42+00:00,1.37,boneskull,MEMBER,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2368,'Suite End' event not waiting for promises to finish,"I'm writing a reporter to send results to a database and, because there is no deferred test emitter in the event that a suite bails out early, I'm collecting them and sending all of the deferred tests on suite end.
  runner.on('suite end', function (suite)
  {

    // Skip the global suite
    if (suite.title === '') { return; }
    /*
     * If the suite bailed out early and didn't run some of it's tests,
     * we want to make sure we track them as skipped.
     */
    if (remainingTests.length != 0)
    {
      console.log('       Suite ended with ' + remainingTests.length + ' tests remaining');

      remainingTests.forEach(function (skipped_test) {

        console.log(skipped_test.test_title);
        skipped_test.finish_time  = moment().format();
        skipped_test.duration     = 0;
        skipped_test.order_number = order_number;
        skipped_test.status       = 'skipped';

        order_number++;

        elastic.addResult(skipped_test)

      }); // end forEach

      remainingTests.length = 0;
    } // end if

  }); // end...suite end

The issue is that the suite end event doesn't wait for the addResult promises to resolve before exiting. This only becomes an problem if the final suite has deferred tests because the Node process exits too early.
I have tried collecting the promises in an array and calling Promises.all, but no luck.
Currently, I'm solving this problem with a wait function on the end event, but this is hacky and unreliable. Am I missing something here? Shouldn't suite end be waiting for the promises to resolve?",WillLuce,NONE,2016-07-10 23:39:34+00:00,True,2017-04-02 02:18:18+00:00,265.11,,3,12,2016-07-11 04:31:39+00:00,0.2,boneskull,MEMBER,1,0,0,2,"['feature', 'future', 'needs-feedback']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2369,proper name,"Okay, since we needed to use mochajs for the GH org and mochajs.org for the site, there's a precedent for MochaJS as the proper name, or Mocha.js.  But then again mocha is the package and mocha is the repo and the logo reads ""mocha"".
An argument for ""MochaJS"" or ""Mocha.js"" is that it is unique, and thus easily searchable.  An argument for ""Mocha"" is that it is simple.  Curious to hear anybody's thoughts.
@mochajs/core",boneskull,MEMBER,2016-07-11 08:29:41+00:00,True,2016-07-21 01:14:15+00:00,9.7,,6,8,2016-07-11 09:00:14+00:00,0.02,gurdiga,NONE,1,3,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2370,to-iso-string renamed to @segmentio/to-iso-string,,graingert,CONTRIBUTOR,2016-07-11 16:22:25+00:00,True,2016-07-21 02:23:00+00:00,9.42,v3.0.0,9,19,2016-07-11 19:16:06+00:00,0.12,boneskull,MEMBER,1,4,0,4,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2372,Is the browser module not available in the npm-distribution?,"I am looking for the equivalents of thes rawgits in the npm package.  It seems, they are not available there.
https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.css
https://cdn.rawgit.com/Automattic/expect.js/0.3.1/index.js
https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.js",mkastner,NONE,2016-07-12 11:55:01+00:00,True,2016-07-12 13:57:58+00:00,0.09,,1,1,2016-07-12 13:57:58+00:00,0.09,mkastner,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2374,Putting a testing suite in a function causes it to execute last,"I'm fairly new to mocha, just started working with it for my summer internship, just as a forewarning in case I'm just doing something stupid.
I've written some code to dynamically test a feature of my company's product. We're able to send a request and get back all of the possible values to test the feature with. From there, the testing suite is basically the same and I have it all in a function with a few variables. That way I should be able to call the function with the desired values and the test suite will run for that case. However, the issue I'm getting is that it runs all the tests in the function at the very end of the testing for some reason, and it puts them outside of the overarching suite when looking at test results. In addition, a console log right before entering the function will print in the right order, but a console log inside the function will all print at the very end.
I made some extremely simplified code that kind of shows the layout of what I'm trying to do:
function test(){
    //Testing suite to test through a certain functionality using different variables
    describe('inner',function(){
        it('test3',function(){
            console.log('\ninner test');
        });
    });
}
function entityLoop() {
    describe('outer',function(){
        //Get field values from an http request
        it('test1',function(){
            console.log('\ntest1');
        });
        it('test2',function(){
            console.log('\ntest2');
        });

        //This MUST run after the other two tests, as those tests get the values needed to run the following tests
        //I know it's typically bad practice to make dependent tests, but that's how we're dynamically creating the tests
        after(function(){
            //Use field values in a testing suite
            console.log('after test');
            test();
        })
    })
}

describe(""Overall loop"",function(){
    //Need to loop through a testing suite, changing some variables each time
    for(var i = 0; i < 5;i++){
        entityLoop();
    }

});

This is the console output of it:
test1
test2
after test
test1
test2
after test
test1
test2
after test
test1
test2
after test
test1
test2
after test
inner test
inner test
inner test
inner test
inner test
Process finished with exit code 0

Issue is that 'inner test' is for some reason all printed at the very end, instead of in the patter the other 3 console.logs are printed at.",brubakbd,NONE,2016-07-15 19:50:22+00:00,True,2016-07-19 13:35:33+00:00,3.74,,2,1,2016-07-19 13:35:33+00:00,3.74,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2375,"WARN deprecated to-iso-string@0.0.2: to-iso-string has been deprecated, use @segment/to-iso-string instead","package.json
-""to-iso-string"": ""0.0.2""
+""@segment/to-iso-string"": ""1.0.1""",denji,NONE,2016-07-16 20:27:42+00:00,True,2016-07-17 04:11:30+00:00,0.32,,2,1,2016-07-17 04:11:30+00:00,0.32,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2376,Running test-suites in independent process/thread?,"Running my tests one suite at a time and they all pass. Running them together gives an AdapterError.
https://github.com/SamuelMarks/waterline-test-case
Is there some way to run them independently yet concurrently? - Failing, how do I configure them to run sequentially? (await one suite's end before beginning another)
BTW: Posted on the mailing-list about a week ago also",SamuelMarks,NONE,2016-07-17 04:19:26+00:00,True,2016-07-29 12:28:57+00:00,12.34,,3,2,2016-07-18 04:41:23+00:00,1.02,boneskull,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2378,Nested describes don't run if parent describe has .only (mocha 3),"Previously, if you had a nested describe and tests inside a parent describe with .only, the child-describe blocks would also run.
It seems #1481 may have broken this behavior. While I think the actual fix in 1481 makes sense, this side-effect of it seems counter-intuitive, and at least goes against my expectations of how this should work. It's also different from how this works in some other testing tools I've used in the past with similar features.
Steps to reproduce

Create a test file with a root describe using .only.
Put another describe inside it, with an it inside
Run test

Expected result
The tests inside the nested describe run
Actual result
Only tests immediately inside the parent describe block run, at least with mocha@3.0.0-1
Sample code
describe.only('this should run', function() {
  it('an it should also run', function() { });

  describe('this nested describe should run', function() {
    it('and this nested it should run as well', function() { });
  });
});
Output:
  this should run
    ✓ an it should also run


  1 passing (14ms)

Expected output:

  this should run
    ✓ an it should also run
    this nested describe should run
      ✓ and this nested it should run as well


  2 passing (17ms)",jhartikainen,NONE,2016-07-18 06:19:06+00:00,True,2016-07-26 06:14:34+00:00,8.0,v3.0.0,2,7,2016-07-20 01:03:57+00:00,1.78,boneskull,MEMBER,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2379,Need update glob version,"Now mocha dependent on glob@3.2.11 and glob dependent on minimatch， the version of minimatch is too low。
Please update glob to the newest version ，it has fix the minimatch's RegExp DoS issue.",yuzhigang33,NONE,2016-07-18 07:04:31+00:00,True,2016-07-19 13:24:17+00:00,1.26,,3,2,2016-07-18 09:10:42+00:00,0.09,marvinhagemeister,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2380,None files match should not throw,"When none files match the pattern test/**/*.test.js, call mocha with --opts will throw Error: cannot resolve path (or pattern) 'test/**/*.test.js'. The pattern for glob is ok, even though its return files.length = 0. So I think this case should not be considered as an error.
The code in mocha is:
      files = glob.sync(path);
      if (!files.length) {
        throw new Error(""cannot resolve path (or pattern) '"" + path + ""'"");
      }",tianjianchn,NONE,2016-07-19 03:11:48+00:00,True,2016-07-27 03:32:32+00:00,8.01,,2,3,2016-07-20 01:00:47+00:00,0.91,boneskull,MEMBER,1,0,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2382,Stop testing io.js,"io.js has merged with the Node.js project again.
There won't be any further io.js releases.
Remove io.js inv from matrix testing.",anthony-redFox,CONTRIBUTOR,2016-07-19 19:10:22+00:00,True,2016-07-20 00:48:58+00:00,0.24,,2,1,2016-07-20 00:48:58+00:00,0.24,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2383,consistently name (and rename) test files,"We should rename test files in test/**/*.js to test/**/*.spec.js.  This would help with quickly opening files in an IDE or text editor.  I often open the wrong runnable.js:

Renaming the test files will eliminate potential confusion here and improve DX.
However, not everything in the glob test/**/*.js is a test.
Fixtures (e.g. test/integration/fixtures/**/*.js and others) should not be renamed to *.spec.js.  Ideally we could settle on a convention (*.fixture.js?) and eliminate the weirdo filenames with umpteen extensions; multiple.done.before.js could be multiple-done-before.fixture.js, for example.
Mostly I'm looking for consistency in recognizing that I'm about to open a source file, a test file, a fixture, or whatever else.",boneskull,MEMBER,2016-07-20 00:58:16+00:00,True,2016-09-19 05:38:23+00:00,61.19,,1,0,,,,,0,0,0,0,"['chore', 'nice-to-have', 'qa']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2384,Getting started guide throw error because chai is not found,The getting started guide at https://mochajs.org/#getting-started gives me error when I try to run the test using the mocha command. It complained about unable to find chai. I had to do npm install chai to resolve it,gerrytan,NONE,2016-07-20 02:13:02+00:00,True,2016-07-27 20:23:24+00:00,7.76,,3,2,2016-07-20 03:44:50+00:00,0.06,boneskull,MEMBER,1,1,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2385,Update glob to update vulnerable minimatch package,minimatch < 3.0.2 is vulnerable to a DoS and fails nsp checks.  Recommend updating to latest glob (>=7.0.5) to pick up a more recent minimatch.,nbergseng,NONE,2016-07-20 15:35:41+00:00,True,2016-07-20 17:12:54+00:00,0.07,,3,4,2016-07-20 16:46:09+00:00,0.05,marvinhagemeister,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2388,upload karma bundles to s3 with public read access,"currently we are uploading to s3 but the bundles are not readable by the general public (or anyone besides me, actually..).  they should sync to s3 with ""read"" access, so PR senders can get at the artifacts for debugging.",boneskull,MEMBER,2016-07-21 14:28:57+00:00,True,2018-03-23 17:15:36+00:00,610.12,,1,2,2017-09-05 04:50:49+00:00,410.6,boneskull,MEMBER,1,0,0,0,"['chore', 'help wanted', 'qa']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2390,Resolving a relative path,"Basically my webpack.config.js has this context - context: path.resolve( __dirname, '../app' ), so that in all the various nested files I can import anything directly
import Button from 'app/components/button'
(http://stackoverflow.com/questions/27502608/resolving-require-paths-with-webpack/27512914)
How can configure something like this in mocha, so that it doesn't break at the import statements?",pnkapadia6,NONE,2016-07-22 11:56:32+00:00,True,2016-07-26 06:12:13+00:00,3.76,,6,9,2016-07-26 06:12:13+00:00,3.76,boneskull,MEMBER,1,0,0,5,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2392,Option to exit with code 0 for test runners that produce structured reports,"I'm using mocha with jenkins and xunit. Jenkins builds have three basic states: failed, unstable, success. unstable implies some tests failed, but the general set of orchestration to run the tests succeeded whereas failed implies the test script is incorrect. It would be helpful if mocha could (optionally) follow a similar strategy (at least when using test reporters that produce structured output).
(I'm invoking mocha via grunt, so it's not as simple as wrapping in a bash script and suppressing the exit code)",ianwremmel,CONTRIBUTOR,2016-07-23 00:42:39+00:00,True,2017-06-22 04:14:54+00:00,334.15,,5,10,2016-07-25 17:18:48+00:00,2.69,boneskull,MEMBER,2,1,0,3,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2393,after method is not working with mocha-steps,"I have written some mocha-steps tests, and when the test failed in the step, the after method is not getting called",ashlynjiang,NONE,2016-07-25 19:04:57+00:00,True,2016-07-25 19:50:42+00:00,0.03,,2,1,2016-07-25 19:50:42+00:00,0.03,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2394,When is v3.0.0 going to be released on npm . Since npm site still picks up 2.5.3 version,,Aashima89,NONE,2016-07-25 21:03:37+00:00,True,2016-07-26 06:04:38+00:00,0.38,,2,1,2016-07-26 06:04:38+00:00,0.38,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2395,Console logging gets extremely mixed up after a retry,"I'm running a very long test suite that sends many requests to our API, so it's nice to be able to log what request I'm sending and what the response is for debugging purposes if a test fails. All goes well if I don't allow retries. Everything stays in order and everything gets printed. However, if I turn on any retrying using this.retries(1) the logging is fine until it hits a retry. Then it starts getting really weird. It continues logging most(some of the console.log statements appear to never be printed), but it puts some out of order and no longer splits into the separate suites. It begins printing everything into one suite until it randomly moves on to the next and is completely out of order. In addition, it doesn't actually print the error that caused the retry until ~3 tests after it happened.
My best guess as to what is causing this is that it has something to do with using promises and/or a setTimeout function in the area that gets retried.",brubakbd,NONE,2016-07-26 13:04:44+00:00,True,2018-09-04 08:39:49+00:00,769.82,,3,5,2016-07-27 03:27:58+00:00,0.6,boneskull,MEMBER,2,0,0,2,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2396,Question: Has anyone noticed a speed difference in initialization on a Windows vs Mac,"I am using mocha with our team, and others on the team including our build box take a long time to initialize tests(6 mins). However, on my mac I am able to run the multiple times over before they see the result of their first run.
I assume it is initialize, because based on the metrics all of my 100+ tests take under 200ms to run.
We are using NODE_ENV = 'test', disabled css, scss, png, jpg extensions, and are using babel-register",kwelch,NONE,2016-07-27 13:11:18+00:00,True,2017-08-12 14:30:01+00:00,381.05,,4,3,2016-07-27 20:21:55+00:00,0.3,boneskull,MEMBER,1,0,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2397,Q: How to test es6 code in combination with coffee-script in my mocha tests,"Hi I have posted a question on stackoverflow because I have a hard time configuring mocha to test my es6 production code with coffee-script mocha tests.
Since I got no feedback I would like to ask if someone could help either here or on stackoverflow to answer my question.
I explained my tryings and details here: http://stackoverflow.com/questions/38445457/how-to-use-babel-in-combination-with-coffee-script-in-my-mocha-tests
Any help would be kindly appreciated.
Thanks",felixbecker,NONE,2016-07-27 17:56:02+00:00,True,2016-07-27 20:20:24+00:00,0.1,,2,1,2016-07-27 20:20:23+00:00,0.1,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2398,Windows 8.1 issue installing mocha -g,"After running npm install mocha -g it throws an error.
npm ERR! not a package C:\Users\homer\AppData\Roaming\npm\mocha
npm ERR! addLocal Could not install C:\Users\homer\AppData\Roaming\npm\mocha
npm ERR! Windows_NT 6.3.9600
npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""mocha"" ""-g""
npm ERR! node v4.4.2
npm ERR! npm  v2.15.0
npm ERR! path C:\Users\homer\AppData\Local\Temp\npm-25356-63c186ca\unpack-298d18e03c67\package.json
npm ERR! code ENOENT
npm ERR! errno -4058
npm ERR! syscall open

npm ERR! enoent ENOENT: no such file or directory, open 'C:\Users\homer\AppData\Local\Temp\npm-25356-63c186ca\unpack-298d18e03c67\package.json'
npm ERR! enoent This is most likely not a problem with npm itself
npm ERR! enoent and is related to npm not being able to find a file.
npm ERR! enoent

npm ERR! Please include the following file with any support request:
npm ERR!     D:\tmp\test-mocha\npm-debug.log

Looking inside:
C:\Users\homer\AppData\Local\Temp\npm-25356-63c186ca\unpack-298d18e03c67
I see only 1 file, index.js
I tried running from both power shell, and git-bash.
(I am able to install mocha to a local folder)",teebu,NONE,2016-07-27 21:20:02+00:00,True,2016-07-28 22:01:05+00:00,1.03,,2,2,2016-07-28 22:01:05+00:00,1.03,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2399,"Watch does work only for test files, does not refresh for project files","I have this strange issue, when mocha reloads only when I update a ""test"" file. When I update a project file (SUT) the mocha keeps the original version somehow cached. I tried different approaches and nothing works. Any ideas?
Here is how I run it:
mocha --colors --watch imports/test/browser.js imports/**/tests/**/*.js* --compilers js:babel-core/register",tomitrescak,NONE,2016-07-28 08:07:01+00:00,True,2016-07-28 22:06:58+00:00,0.58,,2,4,2016-07-28 22:05:44+00:00,0.58,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2404,Update minimatch,"Minimatch seems to be vulnerable:

npm WARN deprecated minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue
npm WARN deprecated minimatch@1.0.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue",rugk,NONE,2016-07-31 10:26:55+00:00,True,2016-07-31 19:01:12+00:00,0.36,,3,4,2016-07-31 18:09:54+00:00,0.32,marvinhagemeister,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2405,Jade transition to Pug,"Jade is renamed to Pug.  Although dependencies on Jade work, the code is not maintained from what I have gathered as all the new changes will be under the pug package.  There are some syntax differences, so moving from Jade to Pug may require verifying that all the views still work.
Refrence: https://github.com/pugjs/pug#rename-from-jade",YasharF,NONE,2016-08-01 03:39:19+00:00,True,2016-08-01 04:12:47+00:00,0.02,,2,2,2016-08-01 04:12:47+00:00,0.02,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2406,.only() no longer works with nested describe()s in Mocha 3.0.0,"I was excited to see improvements to .only() in the Mocha 3.0.0 changelog. It's mostly working well, but I found a regression. Consider the following test file with nested describe()s:
var assert = require('assert');

describe('Array', function() {

  describe('.push()', function() {

    it('appends a value to the end of the array', function() {
      var array = [1];
      array.push(2);
      assert.deepEqual(array, [1, 2]);
    });

    it('can append more than one value to the end of the array', function() {
      var array = [1];
      array.push(2, 3);
      assert.deepEqual(array, [1, 2, 3]);
    });
  });

  describe('.reverse()', function() {

    it('reverses a non-empty array', function() {
      assert.deepEqual([1, 2, 3].reverse(), [3, 2, 1]);
    });

    it('does nothing to an empty array', function() {
      assert.deepEqual([].reverse(), []);
    });
  });
});

In previous versions of mocha, you could add a .only() to one of the inner describe()s and it would do what you expect. For example, if I changed that file to look like:
  describe.only('.push()', function() {

It should run 2 tests. That's the way previous versions of Mocha behaved. It's a very useful behavior that my team uses every day.
In Mocha 3.0.0 it runs 0 tests.
A few other notes:

.only() on the top-most describe() in a file works fine
changing describe() to context() doesn't affect the behavior (same issue with context())",adamjmurray,NONE,2016-08-01 19:39:00+00:00,True,2016-08-04 04:31:04+00:00,2.37,,2,2,2016-08-03 23:22:25+00:00,2.16,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2407,Error: Resolution method is overspecified.,"This:
before(done => {
    return Promise
        .all([])
        .then(() => Model.insert(...)) // Bookshelf model returning a Bluebird Promise
        .then(() => done())
        .catch(done)
})

will result in an error Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.
Docs say:

In Mocha v3.0.0 and newer, returning a Promise and calling done() will result in an exception, as this is generally a mistake:

The model call is resolving with a Promise.<Object> of the newly inserted entry, however if I omit .then(() => done()) then the test timeouts.",teckays,NONE,2016-08-02 05:19:06+00:00,True,2017-01-02 21:51:52+00:00,153.69,,32,76,2016-08-03 23:15:55+00:00,1.75,elado,NONE,3,3,0,25,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2408,Compiler not using Babel Plugins?,"Shouldn't Mocha be able to compile presets AND plugins?
Plugin
{
  ""presets"": [
    ""es2015""
  ],
  ""plugins"": [
    ""version-inline""
  ]
}
$ mocha --compilers js:babel/register
Uncaught ReferenceError: __VERSION__ is not defined",alycda,NONE,2016-08-03 00:15:17+00:00,True,2016-08-04 01:14:43+00:00,1.04,,2,6,2016-08-03 20:34:05+00:00,0.85,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2409,Mention on Totally Tooling Tips,"I'm a big fan of Mocha and would like to mention it on Totally Tooling Tips, is this ok with the org / project?
(Totally Tooling Tips is a Video series me and Addy Osmani do here: https://www.youtube.com/watch?v=IWgNn1kqrsA&list=PLOU2XLYxmsILKwwASNS0xgfcmakbK_8JZ)
Cheers,
Matt",gauntface,NONE,2016-08-03 14:50:57+00:00,True,2016-08-03 17:31:52+00:00,0.11,,2,2,2016-08-03 16:02:05+00:00,0.05,danielstjules,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2410,Improve tap reporter,"It currently generates output like this:
1..1
ok 1 describe it
# tests 1
# pass 1
# fail 0

for
describe('describe', () => {
  it('it', () => {
    expect(true).to.eql(true)
  })
})
It just flattens out describes and prepends them the to test name.
This makes the tap-spec reporter unable to recognize test-cases.
echo '1..1\nok 1 describe it\n# tests 1\n# pass 1\n# fail 0' >> test
cat test | node_modules/.bin/tap-spec
    ✔ describe it


  ✖ No tests found

I think a viable alternative would be to print diagnostic messages for describe blocks.
1..1
# describe
ok 1 it
# tests 1
# pass 1
# fail 0

prints
>cat test | node_modules/.bin/tap-spec

  describe

    ✔ it


  total:     1
  passing:   1
  duration:  8ms

Nested describes should be concatened though I suppose.",dszakallas,NONE,2016-08-03 15:19:04+00:00,False,,,,3,6,2016-08-03 15:20:37+00:00,0.0,dszakallas,NONE,1,1,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2412,Mocha is supporting BDD?,"I got a little scared when I saw BDD + Mocha. So I looked it up:
**What is BDD?**

Body dysmorphic disorder is a type of chronic mental illness 
in which you can not stop thinking about a flaw in your appearance — a flaw that
 is either minor or imagined. But to you, your appearance seems so shameful that 
you do not want to be seen by anyone.
So my question is simple. Is it safe to use Mocha? Will it harm me?",,NONE,2016-08-04 01:19:14+00:00,True,2016-08-04 01:57:54+00:00,0.03,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2414,Unexpected token export,"$ mocha  test -r jsdom-global/register --compilers js:babel-core/register --recursive
Exports used directly in our project work fine.
import * as exampleActions from './exampleActions';
import * as authentication from './authentication';
import * as questions from './questions';

export default {
  exampleActions,
  authentication,
  questions
};

Exports from a plugin (react-native-storage) receive an error.
/business-logic/node_modules/react-native-storage/storage.js:7
export default class Storage {
^^^^^^
SyntaxError: Unexpected token export
    at Object.exports.runInThisContext (vm.js:53:16)
    at Module._compile (module.js:513:28)
    at Module._extensions..js (module.js:550:10)
    at Object.require.extensions.(anonymous function) [as .js] (/business-logic/node_modules/babel-register/lib/node.js:159:7)
    at Module.load (module.js:458:32)
    at tryModuleLoad (module.js:417:12)
    at Function.Module._load (module.js:409:3)
    at Module.require (module.js:468:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/business-logic/src/utils/storageHelper.js:1:157)",asciiman,NONE,2016-08-04 13:07:39+00:00,True,2016-08-04 18:46:46+00:00,0.24,,2,1,2016-08-04 18:46:45+00:00,0.24,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2415,investigate test flake on AppVeyor,The 'delay' test on Node.js v4 on AppVeyor seems to have a high failure rate (though inconsistent).  Let's fix it.,boneskull,MEMBER,2016-08-04 18:48:33+00:00,True,2018-12-19 18:46:50+00:00,867.0,,2,2,2017-08-25 21:45:06+00:00,386.12,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['developer-experience', 'invalid', 'qa']",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2417,infinite loop with nested .only(),"Run the following test through mocha 3.0.1:
var assert = require('assert');

describe('Array', function() {

  describe.only('.push()', function() {

    it.only('appends a value to the end of the array', function() {
      var array = [1];
      array.push(2);
      assert.deepEqual(array, [1, 2]);
    });
  });
});


Mocha exits with an exception that seems to indicate an infinite loop occurred:
RangeError: Maximum call stack size exceeded
    at filterOnly (/Users/adam/workspace/cirrus/node_modules/mocha/lib/runner.js:857:23)
    at /Users/adam/workspace/cirrus/node_modules/mocha/lib/runner.js:861:9
    at Array.forEach (native)
    at filterOnly (/Users/adam/workspace/cirrus/node_modules/mocha/lib/runner.js:857:23)
    at /Users/adam/workspace/cirrus/node_modules/mocha/lib/runner.js:861:9
    at Array.forEach (native)
    at filterOnly (/Users/adam/workspace/cirrus/node_modules/mocha/lib/runner.js:857:23)
    ...

This is a simplified example. In practice, I sometimes focus on getting a single it.only() test passing, and then go ""up a level"" and test a group of related tests via a describe.only() block.
Not a blocker. Workaround: don't use nested .only()",adamjmurray,NONE,2016-08-04 23:43:24+00:00,True,2016-08-08 05:33:20+00:00,3.24,,2,1,2016-08-05 18:02:32+00:00,0.76,not-an-aardvark,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2418,Third party reporters (mocha 3.0.0),"I'm on OSX, have mocha installed globally and locally.  I added a custom reporter to both my global node install path and my local node install path in the /lib/reporters folder, and when I try to run
mocha myRepoter -R ./spec/test.js I get ""unknown reporter"".",genzoman,NONE,2016-08-05 17:37:01+00:00,True,2016-08-08 05:34:01+00:00,2.5,,3,2,2016-08-06 11:31:24+00:00,0.75,gurdiga,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2420,"invalid reporter ""html-cov""","sudo mocha indexSpec.js --reporter html-cov
""html-cov"" reporter not found
/usr/local/lib/node_modules/mocha/lib/mocha.js:164
throw new Error('invalid reporter ""' + reporter + '""');
^
Error: invalid reporter ""html-cov""
at Mocha.reporter (/usr/local/lib/node_modules/mocha/lib/mocha.js:164:13)
at Object. (/usr/local/lib/node_modules/mocha/bin/_mocha:209:7)
at Module._compile (module.js:541:32)
at Object.Module._extensions..js (module.js:550:10)
at Module.load (module.js:458:32)
at tryModuleLoad (module.js:417:12)
at Function.Module._load (module.js:409:3)
at Function.Module.runMain (module.js:575:10)
at startup (node.js:160:18)
at node.js:456:3
Can anyone help me to deal with this issue? thanks a lot!",tuanlv1206,NONE,2016-08-06 05:20:22+00:00,True,2016-08-06 20:09:37+00:00,0.62,,3,2,2016-08-06 12:17:00+00:00,0.29,gurdiga,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2421,JS errors block tests from running,"I recently noticed that if I had a parse error in one of my test files, it seems to block execution of all the tests in that and subsequent test files. It would be nicer if any JS errors would trigger an overall run failure instead.",arosenb2,NONE,2016-08-06 17:59:32+00:00,True,2016-08-08 05:32:17+00:00,1.48,,2,1,2016-08-08 05:32:17+00:00,1.48,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2422,Question: Is there a javascript API documentation?,Mocha seems to output its results only over CLI. Is there a way to use mocha programmatically without having to parse stdout for the results?,moglars,NONE,2016-08-06 18:19:58+00:00,True,2016-08-08 05:29:27+00:00,1.46,,4,5,2016-08-06 18:42:50+00:00,0.02,gurdiga,NONE,2,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2423,Error: Cannot find module './options' (fresh start),"Trying to create a simple test app from scratch.   When executing from CLI, receive this error.  If I downgrade to 2.5.3 then all is fine.  Trying either of the commands below, error.
$ mocha 
$ mocha --help


Error: Cannot find module './options'
    at Function.Module._resolveFilename (module.js:339:15)
    at Function.Module._load (module.js:290:25)
    at Module.require (module.js:367:17)
    at require (internal/module.js:16:19)
    at Object.<anonymous> (/Users/mikeerickson/Documents/Projects/node/mocha-test/node_modules/.bin/mocha:11:16)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Function.Module.runMain (module.js:447:10)",mikeerickson,NONE,2016-08-06 23:12:52+00:00,True,2016-08-07 20:53:14+00:00,0.9,,14,25,2016-08-07 07:20:14+00:00,0.34,gurdiga,NONE,1,1,0,11,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2424,"Mocha v3 triggers ""mismatched anonymous define()"" error","Using mocha v3 with RequireJS, causes it to throw a mismatched anonymous define() error. I've verified with 3.0.0 and 3.0.1. The latest 2.x (2.5.3) branch works flawlessly. I didn't see anything that seemed related in the change log
Error: Mismatched anonymous define() module: function () {
      return JSON3;
    }
http://requirejs.org/docs/errors.html#mismatch
Requirejs v2.2.0 (latest)
Another reference: karma-runner/karma-requirejs#50 (This is not my ticket, just came up in Googling)",fearphage,NONE,2016-08-07 12:21:04+00:00,True,2016-08-08 07:26:28+00:00,0.8,,3,5,2016-08-07 18:58:37+00:00,0.28,lddubeau,NONE,1,0,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2426,add integration tests for AMD,"We should have something that ensures Mocha can be used with require.js & its ilk.
Relevant: #2424, #880 sort of",boneskull,MEMBER,2016-08-08 05:27:53+00:00,False,,,,2,1,2018-11-18 18:15:15+00:00,832.53,Bamieh,MEMBER,1,0,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2427,Exit Code 0 when mocha stack traces,"Description
Recent changes to mocha caused stack traces, which is fine, but what is not fine is that the exit code is 0.
Actual Results
$ NODE_ENV=""test"" PORT=""6004""  mocha --recursive --timeout 8000 --reporter ${REPORTER_OPTS} ${COLOR_OPTS} 2>&1 | tee -a ${APP_ROOT}/logs/app-test.log
...
Created logger states level info path logs/test.log
Express server listening on port 6004 in test mode
module.js:327
    throw err;
    ^

Error: Cannot find module '../../services/selectLite/LiteActivityService'
    at Function.Module._resolveFilename (module.js:325:15)
    at Function.Module._load (module.js:276:25)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at Object.<anonymous> (/gobalto/test/controllers/Sites.js:13:27)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at /usr/lib/node_modules/mocha/lib/mocha.js:220:27
    at Array.forEach (native)
    at Mocha.loadFiles (/usr/lib/node_modules/mocha/lib/mocha.js:217:14)
    at Mocha.run (/usr/lib/node_modules/mocha/lib/mocha.js:485:10)
    at Object.<anonymous> (/usr/lib/node_modules/mocha/bin/_mocha:403:18)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Function.Module.runMain (module.js:441:10)
    at startup (node.js:139:18)
    at node.js:968:3
$ echo $?
0

Expected Behavior
Mocha would return a non-0 exit code.
Regression
This happens with 3.0.2, but with version 2.5.3, such an error will return an exit code.  It looks like this might be an regression issue after the 3.0.0 update.",darkn3rd,NONE,2016-08-08 23:56:20+00:00,True,2016-09-12 13:46:21+00:00,34.58,,4,8,2016-08-09 00:25:25+00:00,0.02,darkn3rd,NONE,2,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2428,Test succeeds but should fail. Plus sign in the test name.,"This test succeeds in Mocha 3.0.2 but should fail.
const assert = require('assert');

it('+ ', function () {
    assert(false);
});

This test is failing under Mocha 2.5.3 as expected.
Output:
Test Name:  +
Test Outcome:   Passed
Result StandardOutput:  
1..0
# tests 0
# pass 0
# fail 0

Visual Studio 2015 Pro v.14.0.25425.01 Update 3
Node.js Tools 1.2.40726.00
TypeScript 1.8.36.0
Mocha 3.0.2",Andreyul,NONE,2016-08-09 02:55:54+00:00,True,2016-08-09 17:06:48+00:00,0.59,,2,3,2016-08-09 12:21:00+00:00,0.39,gurdiga,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2429,--watch option works strangely with `.only()`,"After adding .only() and removing it, --watch doesn't work correctly. After removing .only from a test case, I expected mocha should test all test cases, but it did not test any case at all.
steps to reproduce

mocha test.js --watch  with following code.

// test.js 
// Sample code to reproduce 
describe('test with --watch', () => {
  it('should be ok', () => {
    //
  });
  it('should be ok too', () => {
    //
  });
});
// output
  test with --watch
    ✓ should be ok
    ✓ should be ok too

  2 passing (8ms)


Add .only to the first test.

// output
  test with --watch
    ✓ should be ok too

  1 passing (2ms)


Remove .only from the first test.

// output
  0 passing (1ms)

Expected Behavior
After removing .only, all tests should be tested again.
Environmet

OS: windows 10 / Ubuntu 16.04.1
node : 6.3.0
mocha : 3.0.2",fediev,NONE,2016-08-09 09:07:02+00:00,True,2017-09-29 02:34:52+00:00,415.73,,10,18,2016-08-09 09:23:12+00:00,0.01,dobryanskyy,NONE,1,2,0,7,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2430,.only not working in 3.0.2,"We run mocha tests using grunt with a simple config:
mochaTest: {
            functional: {
                options: {
                    reporter: 'dot',
                    timeout: '10000',
                    recursive: true
                },
                src: ['tests/functional/**/test*.js']
            },
            unit: {
                options: {
                    reporter: 'dot',
                    timeout: '10000',
                    recursive: true
                },
                src: ['tests/unit/**/test*.js']
            }
        },

However when we upgraded to mocha 3.0.2, the .only feature does not work anymore. It runs all tests all the time. It works fine with mocha 2.5.3.
I tested it using mocha directly using:
mocha tests/functional/**/test*.js

and .only still not working.
Any help appreciated.",richardlay,NONE,2016-08-10 04:52:37+00:00,True,2016-08-11 03:26:12+00:00,0.94,,5,10,2016-08-10 10:58:38+00:00,0.25,gurdiga,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2431,browser mocha globals,"In browser mocha, how can I access the items, defined in mocha.globals?
    var myVar = {var: 'var'};

   mocha.globals(['myVar']);

I've tried all of these in my test and I am running out of ideas:

myVar
window.myVar
mocha.myVar
mocha.options.myVar
mocha.options.globals.myVar",mkastner,NONE,2016-08-10 08:53:39+00:00,True,2016-08-23 05:50:05+00:00,12.87,,3,3,2016-08-10 11:14:09+00:00,0.1,gurdiga,NONE,1,0,0,2,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2432,Mochawesome reporter no more working,"not sure what happened here but Since this morning, i got this error when running
with mochawesome 1.4.0, and it used to work properly
mocha --timeout 5000 tests/stats --reporter mochawesome
""mochawesome"" reporter not found
/Users/qwerty/npm/lib/node_modules/mocha/lib/mocha.js:164
      throw new Error('invalid reporter ""' + reporter + '""');
      ^

Error: invalid reporter ""mochawesome""
    at Mocha.reporter (/Users/qwerty/npm/lib/node_modules/mocha/lib/mocha.js:164:13)
    at Object.<anonymous> (/Users/qwerty/npm/lib/node_modules/mocha/bin/_mocha:207:7)
    at Module._compile (module.js:541:32)
    at Object.Module._extensions..js (module.js:550:10)
    at Module.load (module.js:458:32)
    at tryModuleLoad (module.js:417:12)
    at Function.Module._load (module.js:409:3)
    at Module.runMain (module.js:575:10)
    at run (bootstrap_node.js:352:7)
    at startup (bootstrap_node.js:144:9)
    at bootstrap_node.js:467:3",chrisvidal,NONE,2016-08-12 08:53:19+00:00,True,2016-08-23 04:39:31+00:00,10.82,,3,3,2016-08-12 11:44:19+00:00,0.12,gurdiga,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2433,JSON reporter doesn't work (no output),"The issue occur to me on mocha v3.0.2 and node v5.8.0 on Mac OS X. Here's my test file
'use strict';
var app = require('./app');

describe('Converting strings.', function() {

  it('Can convert a string with one space', function() {
    var result = app.convertString('hello world');
    result.should.eql('hello-world');
  });

  it('Replaces two spaces with one dash', function() {
    app.convertString('hello  world').should.eql('hello-world');
  });
});
and the code I'm testing
function convertString(str) {
  return str.split(' ').join('-');
}

module.exports = {
  convertString: convertString
};
With json-stream reporter everything works fine:
$ mocha --require should --reporter json-stream test.js
[""start"",{""total"":2}]
[""pass"",{""title"":""Can convert a string with one space"",""fullTitle"":""Converting strings. Can convert a string with one space"",""duration"":2,""currentRetry"":0}]
[""fail"",{""title"":""Replaces two spaces with one dash"",""fullTitle"":""Converting strings. Replaces two spaces with one dash"",""duration"":0,""currentRetry"":0,""err"":""expected 'hello--world' to equal 'hello-world'"",""stack"":""AssertionError: expected 'hello--world' to equal 'hello-world'\n    at Assertion.fail (node_modules/should/cjs/should.js:205:17)\n    at Assertion.Object.defineProperty.value (node_modules/should/cjs/should.js:277:19)\n    at Context.<anonymous> (test.js:12:46)""}]
[""end"",{""suites"":1,""tests"":2,""passes"":1,""pending"":0,""failures"":1,""start"":""2016-08-12T15:34:45.144Z"",""end"":""2016-08-12T15:34:45.155Z"",""duration"":11}]

but with the json reporter nothing comes out:
$ mocha --require should --reporter json test.js  # No output!

Am I doing something wrong?",sakovias,NONE,2016-08-12 15:40:18+00:00,True,2018-04-08 05:50:22+00:00,603.59,,3,4,2016-08-13 13:33:30+00:00,0.91,gurdiga,NONE,1,0,0,2,"['confirmed-bug', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2434,Project-local custom reporters,"According to the wiki, you can

define custom third-party reporters within your own test suite, or by using npm modules

The second part (""reporters that are npm modules"") works fine, but when I try to use a project-local custom reporter, I'm forced to specify the path relative to node_modules/mocha/lib/.
That is, supposing I have a custom-reporter.js in the root of my project, running
node_modules/.bin/mocha --reporter=./custom-reporter.js

fails, but
node_modules/.bin/mocha --reporter=../../../custom-reporter.js

works.
It would instead be nice if the --reporter option were relative to the current directory for non-npm reporters.
Here's the relevant line that needs fixing. It would need to fall back to something like path.resolve(process.cwd(), reporter). I can try to put together a PR, but I want to make sure I'm not missing something.",cletusw,NONE,2016-08-12 21:43:00+00:00,True,2017-01-10 08:22:12+00:00,150.44,,5,7,2016-08-23 04:38:28+00:00,10.29,boneskull,MEMBER,1,2,0,2,['help wanted'],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2437,Cyclic JSON Error when invoking Mocha 3.0.2 from express.js,"I've got a programmatic way to run mocha
var Mocha = require(""mocha""),
  fs = require(""fs""),
  path = require(""path"");
var Promise = require(""bluebird"");

var mocha = new Mocha();
mocha.addFile(""./spec/spec.js"")
module.exports = doMocha;
function doMocha() {

  var failures = [];

  return new Promise(resolve => {
    mocha.run()
      .on('test', function (test) {

      })
      .on('test end', function (test) {

      })
      .on('pass', function (test) {

      })
      .on('fail', function (test, err) {
        failures.push(test);
      })
      .on('end', function (results) {
        console.log(""DONE"")
        resolve(failures);
      });
  });
}
doMocha()
  .then(data=>{
    console.log(data);
  })

and if I run this from node, it prints out the JSON as expected, so I know the logic here is correct.
If I remove the actual invocation of doMocha, and instead try to call mocha from an express server.
app.get(""/api/data"", (req, res) => {
  runner()
    .then(data=>{
      res.send(data);
    });
});

I get the error Converting circular structure to JSON.  This only seems to happen if there are failures in the test suite.",genzoman,NONE,2016-08-13 15:04:20+00:00,True,2016-09-17 00:11:07+00:00,34.38,,3,4,2016-08-13 17:44:00+00:00,0.11,genzoman,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2438,Ambiguous cli exit status,"Mocha exits with an exit status equal to the amount of errors in the test run. This is a potentially huge problem causing ambiguous exit codes.
Exit codes have a range from 0-255. An exit value greater than 255 returns an exit code modulo 256.
This means a test with 256 errors will exit with code 0. Run this example as a proof:
for (var i = 0; i < 256; i += 1) {
    it('test ' + i, function () {
        throw new Error('waat');
    });
}
then echo $?
Further more, certain exit codes have special meaning which can cause tools further down a unix pipe to misbehave. See http://tldp.org/LDP/abs/html/exitcodes.html
Mocha cli should always exit with code 1 if there are tests failing and code 0 if there are no tests failing",Munter,MEMBER,2016-08-13 22:20:15+00:00,True,2016-09-18 21:48:15+00:00,35.98,,5,7,2016-08-15 22:36:30+00:00,2.01,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2444,Mocha --watch,"When i run the tests with ""--watch"" flag and change a .jsx file in this path ""./src/components/screens/Proposals/New.jsx"" the tests aren't reload. But, if i change a test file (tests/unit/components/screens/Proposals/New.js) the tests are reload.
So, i try run pass a regular expression in the flag like ""--watch .src/*/.jsx"" . The console shows only the jsx files in ""components/screens"" level. So, i think that Mocha is not load correctly the subdirectories.
It is my test command: NODE_PATH=./src mocha --require test/unit/.setup.js --compilers js:babel-register --recursive test/unit",BrunoQuaresma,NONE,2016-08-15 20:16:12+00:00,True,2016-10-05 21:42:10+00:00,51.06,,10,11,2016-08-16 23:36:47+00:00,1.14,govind999,NONE,1,1,0,8,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2446,npm install produces unwanted .orig files in mocha lib directory.,"When I npm install mocha, I also receive half a dozen git .orig files in the lib/ directory, complete with git diffing markup.  Is there an error in mocha's current deployment to npm?
The files are:
runner.js.orig
runnable.js.orig
mocha.js.orig
suite.js.orig
test.js.orig
utils.js.orig",bigtimecriminal,NONE,2016-08-17 17:30:23+00:00,True,2016-09-17 00:08:52+00:00,30.28,v3.1.0,2,7,2016-08-19 18:01:58+00:00,2.02,boneskull,MEMBER,1,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2448,How to build mocha with webpack,"For some reason I need to bundle mocha with webpack.
I see browser section in mocha package.json so it looks like webpack should exclude node specific require's.
But when i try var mocha = require('mocha') I'm getting warnings:
WARNING in ./~/mocha/lib/mocha.js
Critical dependencies:
151:20-37 the request of a dependency is an expression
183:17-30 the request of a dependency is an expression
220:26-39 the request of a dependency is an expression
 @ ./~/mocha/lib/mocha.js 151:20-37 183:17-30 220:26-39

WARNING in ./~/mocha/lib/interfaces/bdd.js.orig
Module parse failed: /Users/vitalets/projects/autotester/node_modules/mocha/lib/interfaces/bdd.js.orig Unexpected token (93:0)

and errors:
ERROR in ./~/mocha/~/growl/lib/growl.js
Module not found: Error: Cannot resolve module 'fs' in /Users/vitalets/projects/autotester/node_modules/mocha/node_modules/growl/lib
 @ ./~/mocha/~/growl/lib/growl.js 8:9-22

Can anybody help to fix this?
How to correctly use browser-entry.js?
thanks!",vitalets,NONE,2016-08-20 06:28:06+00:00,True,2016-08-23 04:28:47+00:00,2.92,,7,10,2016-08-21 16:44:47+00:00,1.43,Munter,MEMBER,2,0,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2449,Can't get relative path of tests,"I can't seem to get a good relative path (to the project root) of failed tests.
Since I write tests next to my source folder, every failing tests reports back with something like:
      at Context.<anonymous> (spec.js:13:44)

Is it possible to get something more concrete with a longer path?",fgarcia,NONE,2016-08-20 19:57:39+00:00,True,2016-08-28 17:10:29+00:00,7.88,,2,3,2016-08-23 04:22:10+00:00,2.35,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2451,Question: Allow failures?,Is there a way to allow the failure of specific tests but show that they are failing?,amilajack,NONE,2016-08-21 17:18:52+00:00,True,2017-06-30 10:48:20+00:00,312.73,,5,8,2016-08-23 04:20:09+00:00,1.46,boneskull,MEMBER,1,0,0,5,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2452,How to allowUncaught in Node?,"How to allowUncaught in Node?
just let the uncaught error stop the debugger.",frogcjn,NONE,2016-08-22 17:05:54+00:00,True,2016-09-16 21:00:25+00:00,25.16,,4,7,2016-08-23 04:41:06+00:00,0.48,boneskull,MEMBER,1,0,0,3,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2455,es6 without babel,Are there any plans to start supporting es2015 code like import and export without the use of babel?,caperavensoftware,NONE,2016-08-26 11:04:54+00:00,True,2016-09-04 02:15:47+00:00,8.63,,4,7,2016-08-26 20:19:52+00:00,0.39,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2456,before() and after() hooks run in a completely skipped test file,"I recently stumbled upon this. A test file containing the following:
describe('something', () => {
  before(() => { console.log('I should really not run') })
  it.skip('skipped test', () => {})
  after(() => { console.log('I should really not run either') })
})

Will produce the following output:
  something
I should really not run
    - skipped test
I should really not run either


  0 passing (8ms)
  1 pending

The workaround is to skip the entire describe() instead of the individual tests, so I wonder if there's interest in fixing this. Should a before or after function be preparing or cleaning up a test which didn't run?
Thanks for this amazing piece of software ❤️",fabiosantoscode,CONTRIBUTOR,2016-08-28 12:17:58+00:00,False,,,,3,3,2016-09-04 02:18:39+00:00,6.58,boneskull,MEMBER,1,0,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2457,lint more stuff,"add bin/, ./*.js (less mocha.js), scripts/*.js",boneskull,MEMBER,2016-08-28 19:24:45+00:00,True,2016-08-29 04:02:31+00:00,0.36,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2459,process.stdout may not exist,"When using browserify, it uses https://github.com/defunctzombie/node-process/blob/master/browser.js But stdout is not shimmed apparently on purpose. Need to check for process.stdout in base reporter.",pcfreak30,NONE,2016-08-29 05:47:00+00:00,True,2017-10-31 17:23:08+00:00,428.48,,2,13,2016-08-29 05:52:13+00:00,0.0,pcfreak30,NONE,1,0,0,2,"['needs-feedback', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2461,using child_process.exec in test does not execute callback,"Config:

Mocha 3.0.2
Node 5.9.1
OSX

I have a simple child_process.exec call as follows
    it.only('should use child process', () => {
        child_process.exec('npms search gulp --output --size 5', 'utf8', (err, stdout, stderr) => {
            let obj = JSON.parse(stdout)
            console.log(obj.length)
        })
    })

When the rest is run, nothing is output to console.
However, if I have the same code (minus the it block) outside of the describe block, it returns the correctly results and outputs info to console
        child_process.exec('npms search gulp --output --size 5', 'utf8', (err, stdout, stderr) => {
            let obj = JSON.parse(stdout)
            console.log(obj.length)
        })

I have also created a very basic call to node which does not work either
        child_process.exec('node test.js', 'utf8', (err, stdout, stderr) => {
            console.log(stdout)
        })",mikeerickson,NONE,2016-08-29 16:45:28+00:00,True,2016-08-29 18:17:25+00:00,0.06,,3,4,2016-08-29 18:17:25+00:00,0.06,mikeerickson,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2462,Support for ES2015 classes as tests containers in the `exports` UI,"Hi.
I'm discovering and using Mocha for a fresh ES2015/2017 node app, and am enjoying the exports UI. To my eyes, it makes for concise and ""normal-looking"" test code, especially when used with ES2015 exports (which I get through Babel):
export function test_a() {/* ...*/}
export function test_b() {/* ...*/}
It works great and running Mocha tells me:
✓ test_a
✓ test_b

Now, say I want to group test_a and test_b into a SuiteOne test suite. With the current exports interface, if I understand correctly, I have to:
let SuiteOne = {
  test_a() {/* ... */}
  test_b() {/* ... */}
}

export {SuiteOne}
Yay:
SuiteOne
  ✓ test_a
  ✓ test_b

Awesome, but I was thinking:

Now that ES has a class keyword...
And following the established practice of test runners from OO-inspired languages (e.g. PyTest and many others)...
And taking hints from recent versions of React which added support for using regular class instead of custom React.createClass() to declare components, enabling relying on a close-enough standard construct/syntax rather than custom APIs....

... I was wondering if it would make sense to make Mocha understand classes as tests containers:
export class SuiteOne {
  before() {/* ...*/}
  test_a() {/* ...*/}
  test_b() {/* ...*/}
}

export class SuiteTwo {
  test_c() {/* ...*/}
}
would output:
SuiteOne
  ✓ test_a
  ✓ test_b
SuiteTwo
  ✓ test_c

Wouldn't that look good / has this already been considered? Thanks for Mocha!",ronjouch,NONE,2016-08-29 20:17:14+00:00,True,2016-09-16 23:47:39+00:00,18.15,,4,5,2016-08-29 20:41:24+00:00,0.02,TrejGun,NONE,1,1,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2463,Cant scroll test results in debug mode.,This issue seems to be happening for me on version 2.2.5 and even after upgrading to latest 3.0.2.,kakadiya91,NONE,2016-08-30 22:19:13+00:00,True,2016-08-30 22:34:19+00:00,0.01,,1,1,2016-08-30 22:28:43+00:00,0.01,kakadiya91,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2465,Calling done() after this.skip() results in 'done() called multiple times',"The following code skips the test in mocha v2, but causes an error in v3
Test
describe('broken skip behaviour', function() {
    it('should not report done() called multiple times', function(done) {
        this.skip()
        done()
    })
})

v2 Output
  broken skip behaviour
    - should not report done() called multiple times


  0 passing (11ms)
  1 pending

v3 Output
  broken skip behaviour
    - should not report done() called multiple times
    1) should not report done() called multiple times


  0 passing (15ms)
  1 pending
  1 failing

  1) broken skip behaviour should not report done() called multiple times:
     Error: done() called multiple times
      at Suite.<anonymous> (test/index.test.js:3:5)
      at Object.<anonymous> (test/index.test.js:1:63)
      at require (internal/module.js:20:19)
      at Array.forEach (native)
      at node.js:463:3

Unfortunately I rely on this behaviour for skipping tests in Yadda.
I've tried with various version of mocha from 1-3 and it looks like I can simply remove the call to done() in all versions. Can you confirm?",cressie176,NONE,2016-08-31 18:49:10+00:00,True,2016-09-16 23:47:20+00:00,16.21,,3,4,2016-08-31 20:04:00+00:00,0.05,ScottFreeCode,CONTRIBUTOR,1,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2466,TypeError: Cannot read property 'plugins' of undefined,"I use sample code to test a website,but got a type error of cannot read property,someone help?
const Browser = require('zombie');
// We're going to make requests to http://example.com/signup
// Which will be routed to our test server localhost:3000
//Browser.localhost('www.douban.com');
Browser.strictSSL = false;
Browser.loadCSS = false;
var domain = 'http://beijing.douban.com';
describe('User visits signup page', function() {
const browser = new Browser();

before(function() {
    return browser.visit(domain + '/');
});

describe('submits form', function() {

    before(function() {
        browser
            .fill('email',    'zombie@underworld.dead')
            .fill('password', 'eat-the-living');
        return browser.pressButton('Sign Me Up!');
    });

    it('should be successful', function() {
        browser.assert.success();
    });

    it('should see welcome page', function() {
        browser.assert.text('title', 'Welcome To Brains Depot');
    });
});

});",prinspark,NONE,2016-09-01 08:35:38+00:00,True,2016-09-04 02:14:27+00:00,2.74,,2,1,2016-09-04 02:14:27+00:00,2.74,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2467,Unittests fail in node 6.5.0,"With Node 4 unittests fail:

Suite .beforeAll() wraps the passed in function in a Hook adds it to _beforeAll:
Suite .afterAll() wraps the passed in function in a Hook adds it to _afterAll:
Suite .beforeEach() wraps the passed in function in a Hook adds it to _beforeEach:
Suite .afterEach() wraps the passed in function in a Hook adds it to _afterEach:

All have a similar Error:
AssertionError: expected '""before all"" hook: fn' to be '""before all"" hook'
Reason:
In node 6.5.0 anomynous functions have a name when assigned to a variable:
var myFunc = function(){};
console.log(myFunc.name); // ->  'myFunc'

Prior to node 6.5.0 the function name would be empty",palortoff,NONE,2016-09-02 22:25:45+00:00,True,2016-09-14 19:51:18+00:00,11.89,,5,4,2016-09-04 17:31:08+00:00,1.8,ScottFreeCode,CONTRIBUTOR,1,1,0,1,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2469,"appveyor test flake in ""options"" test for ""--delay""",I think it's mostly because setTimeout() isn't guaranteed to be precise.  I'll probably just remove one of the assertions.,boneskull,MEMBER,2016-09-04 02:05:18+00:00,True,2016-09-14 23:29:33+00:00,10.89,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2471,mocha --help gets it's output cut off.,"Hi!
In my osx terminal i get the output of running mocha --help cut off.

I've tested on windows command-line and it works there.
Node: 6.2.0
Mocha: 3.0.2
Edit: I upgraded to node 6.5.0. And it now seems to work.",Jontem,NONE,2016-09-04 14:50:09+00:00,True,2019-03-07 01:10:48+00:00,913.43,,5,4,2016-09-14 19:30:00+00:00,10.19,boneskull,MEMBER,1,0,0,1,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2472,extract error formatter to another module,"As a maintainer of cucumber-js, I want to have the same awesome error diffs that mochajs provides. I was just curious what your thoughts were on extracting the error formatter to another module so that it could be used by both. I'm happy to tackle the problem and was just curious if the team would welcome a PR that uses the new module.",charlierudolph,CONTRIBUTOR,2016-09-09 04:56:40+00:00,False,,,,3,2,2016-09-14 19:25:14+00:00,5.6,boneskull,MEMBER,1,1,0,0,"['nice-to-have', 'semver-major']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
2473,Possible to run Mocha *after* a promise resolves / async?,"It's possible that this is already possible with the existing mocha suite, but I am just unaware of how to do it. For that reason, I've got a Stack Overflow with pretty much the same issue, here.
http://stackoverflow.com/questions/39421068/how-can-i-build-a-mocha-suite-of-tests-in-my-app-and-run-them
I'm trying to develop a test suite for my company's application. We have a list of reports: [reportA, reportB, reportC... ad nauseum] and there are about 120 of these.
For each report, we need to (asynchronously) grab a record from the server. Once we have that record, we then need to run a (similar, but not identical) battery of tests on it (roughly ~200 or so per report.) Complicating the fact is that I'll have to do some if/then routing in order to make sure only the correct tests are run on the correct report, but that's a minor issue compared to running the tests in the first place.
My first thought was to grab the reports with a Promise, and the inside the .then() method, run those ""describe()"" and ""it()"" statements. No dice - Mocha will not run inside a .then() statement.
My second thought: create a ""testmaker"" function that returns a mocha test, and run them one after each other.
Again, no such luck, I'm getting a ""describe is not defined"" error.
ERROR: ReferenceError: describe is not defined
I can't really use the ""before()"" or ""beforeEach()"" functions, because the asynchronous task needs to be completed before describe() executes.
If this is not an actual issue - or inappropriate, I apologize, but I'm starting to get to the end of my rope.",brianboyko,NONE,2016-09-09 23:46:05+00:00,True,2016-09-12 13:49:01+00:00,2.59,,3,2,2016-09-10 00:51:08+00:00,0.05,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2476,npm installs version 3.0.2 by default,"If you currently run $ npm install --save mocha, it installs version 3.0.2. Given that this version is in pre-release beta, shouldn't version 2.5.3, be installed instead? I had this happen on accident and it gave me some very strange errors. I can report those errors in another issue 😃",JuanCaicedo,NONE,2016-09-14 17:17:39+00:00,True,2016-09-14 19:23:58+00:00,0.09,,2,1,2016-09-14 19:23:58+00:00,0.09,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2478,address saucelabs flake,"We're hitting some flake when running tests against SauceLabs; from time-to-time the browsers fail to launch, for whatever reason.  Investigate, fix, etc.",boneskull,MEMBER,2016-09-14 19:22:11+00:00,False,,,,1,1,2019-02-27 00:37:23+00:00,895.22,boneskull,MEMBER,1,0,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2480,babel-register: stack trace with correct line numbers,"hello!
We have test sute writen on ES2015 and run mocha as writted on official site with parameter --compilers js:babel-register. Everything goes well except error stack trace. We get incorrect line numbers into console when Mocha fail test.
Example:

TypeError: Cannot read property 'listenerCount' of undefined
at Context. (test/view/SlovoAsListItemView.Test.js:184:32)

SlovoAsListItemView.Test.js has 79 lines at all. Not 184! As far as I can see babel transpile our code into ES 5 and it grows up to 184+ lines. And then Mocha get this temp file and execute it as a source.
How can we get correct line numbers into console?
package.json with babel section
{
...
    ""babel"": {
        ""plugins"": [
            ""fast-async"",
            ""transform-class-properties"",
            ""transform-es2015-parameters"",
            ""transform-es2015-destructuring""
        ],
        ""sourceMaps"": ""inline""
    }
}",alexey2baranov,NONE,2016-09-15 10:56:09+00:00,True,2016-09-17 00:03:32+00:00,1.55,,2,4,2016-09-17 00:03:32+00:00,1.55,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2481,Options interpreted as filenames cause ENOENT,"When I run my test suite, I always get this error printed in the console:
Unhandled rejection Error: ENOENT: no such file or directory, open 'C:\Users\OliverSalzburg\project\--timeout'
    at Error (native)

I simply run the suite with mocha test, test being the directory that contains the tests. The same directory contains a mocha.opts file with the option --timeout 5000 in it.
$ mocha --version; node --version
3.0.2
v6.5.0
This happens both in bash and the Windows Command Prompt on Windows 10",oliversalzburg,NONE,2016-09-16 12:23:21+00:00,True,2016-09-16 12:49:31+00:00,0.02,,1,1,2016-09-16 12:49:31+00:00,0.02,oliversalzburg,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2482,Call done with string or error type argument support.,"If done is invoked with string in argument, done function should throw error with argument from done.
This test:
it('should fail',function(done){
    done('Should not pass');
})

Should throw error:
Error: Should not pass

And not this error:
Error: done() invoked with non-Error: Should not pass",urosjarc,NONE,2016-09-18 13:44:39+00:00,True,2016-09-19 05:30:25+00:00,0.66,,2,3,2016-09-19 05:30:25+00:00,0.66,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2483,audit slow tests,"some tests may need new slow values (e.g. this.slow(1000);) since they consistently run at a certain speed.

run all mocha tests
find the ones reporting slowness
increase this value to something reasonable if the test can't be made faster",boneskull,MEMBER,2016-09-18 19:30:30+00:00,True,2018-10-11 09:29:45+00:00,752.58,,3,2,2017-01-17 08:42:40+00:00,120.55,coderbyheart,CONTRIBUTOR,1,1,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2484,globs matching is not working,"i am running tests like this:
mocha api/**/__tests__/*.js
however, this only runs tests that match the pattern api/*/__tests__/*.js.
here is how the glob should have matched files:
$ls api/**/__tests__/*.js
api/metadata/__tests__/index.js
api/my/things/GET/__tests__/guest.js
api/my/things/GET/__tests__/user.js
api/users/-id/DELETE/__tests__/index.js
api/users/-id/things/GET/__tests__/index.js
api/users/-id/things/POST/__tests__/index.js
api/users/GET/__tests__/index.js
currently, mocha only matches api/metadata/__tests__/index.js",jonathanong,CONTRIBUTOR,2016-09-18 20:25:46+00:00,True,2016-09-18 20:31:49+00:00,0.0,,1,1,2016-09-18 20:31:49+00:00,0.0,jonathanong,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2485,Test issue #213,,boneskull,MEMBER,2016-09-18 21:12:32+00:00,True,2016-09-18 21:12:40+00:00,0.0,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2486,"discuss use of conventional-changelog, semantic-release, commitizen","Releasing is a manual--and often painful--process.  Especially generating the changelog.  When we go a long time between releases, it takes me forever to get the changelog updated.
If we used a combination of the tools mentioned, we could likely release more quickly.  The drawback being that commit messages would have to be in a very particular format.",boneskull,MEMBER,2016-09-18 21:37:13+00:00,True,2018-01-15 22:01:45+00:00,484.02,,3,13,2016-09-18 21:37:22+00:00,0.0,boneskull,MEMBER,1,2,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2487,karma-mocha: revisit browser test framework solution,"The current state of things is that we use karma-no-mocha, which is a fork of  karma-mocha with the peer dep of mocha@* removed.
Different versions of npm do different things with the peer dependency:

npm v1/v2 would attempt to install mocha@* to satisfy the peer dep, and karma-mocha would end up using it for testing--which is exactly what we don't want to happen.
npm v3 warns about the peer dep instead, which is better, but still a warning, and bad DX.

I question the suitability of mocha as a peer dependency of karma-mocha.  If anything, the peer dependency seems like it should be karma--it's a Karma plugin, not a Mocha plugin. It doesn't seem like it should be a hard dependency either.  I'll bring this up over yonder.
Anyhow.
Open to other possible solutions.  Maintaining a fork sucks.

The following solution is a workaround, which would be superior if done correctly.
Execute a preinstall script that effectively does:

mkdir -p /path/to/mocha/node_modules
ln -sf /path/to/mocha /path/to/mocha/node_modules/mocha

The concerns I have about this approach are:

Portability is a question mark; we'd have to implement the preinstall script using the vanilla fs module, and take care not to clobber an actual directory or linked package (though I don't know why this would ever happen).
This preinstall script should only be run if the prepublish script (which doesn't exist, but if it did) would be run after npm install.  So how do we know if prepublish should be run?  This is how.


Similar to the above, we could simply defer installation of karma-mocha until make test-browser is run.  We could then use something like shelljs to help, and wouldn't need to worry about lifecycle scripts.  I'm not sure there's a precedent for this type of behavior, though; it definitely smells funny.

If it's possible to tell npm 2.x and/or npm 3.x to ignore peer dependencies via an .npmrc or something, that'd be great as well.  @othiym23 do you know if this is possible?",boneskull,MEMBER,2016-09-19 05:11:18+00:00,True,2016-11-25 00:03:51+00:00,66.79,,2,3,2016-09-24 19:18:23+00:00,5.59,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2488,browser tests should cleanup after themselves,"Currently we have to build Mocha (I think) to use it with karma-mocha.  But after the tests are complete, we tend to have a modified mocha.js.
Solution:  modify the clean target to git checkout -f -- mocha.js instead of rm -f mocha.js.
I hope that works in Windows.",boneskull,MEMBER,2016-09-19 05:24:42+00:00,True,2017-07-10 06:11:32+00:00,294.03,,2,2,2016-11-02 22:27:55+00:00,44.71,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['help wanted', 'nice-to-have', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2490,use semistandard,"We have some code standards in place, but not enough.  We have disabled many warnings which we probably shouldn't have, to avoid changing too much code when we picked up ESLint originally.  I'd also prefer to use a widely-used style instead of a custom style.

Install eslint-semistandard-config and all necessary dependencies
Update .eslintrc to be just {""extends"": ""semistandard""}
eslint --fix everything
Manually fix everything else

If anyone disagrees, please let me know.  Unless that disagreement involves ""semicolons""; if so, please keep it to yourself.  😄",boneskull,MEMBER,2016-09-19 05:36:45+00:00,True,2016-10-10 03:59:57+00:00,20.93,,2,1,2016-09-19 11:17:07+00:00,0.24,Munter,MEMBER,1,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2492,The 'it' function description text don't display,"My system is  Windows 10 Version 1607 X64. In travis CI, the output infomation has no problem.",zhanba,NONE,2016-09-19 10:04:25+00:00,True,2016-09-19 19:55:27+00:00,0.41,,3,3,2016-09-19 11:16:24+00:00,0.05,Munter,MEMBER,2,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2493,Investigate deprecation of --compilers,"--compilers may be useless with later versions of Node.js, and commonly --require is sufficient instead. Example:
--compilers js:babel-register

Is better written as
--require babel-register

I don't know if this
--compilers coffee:coffee-script/register

Is equivalent to this:
--require coffee-script

If so, it's probably only true for some versions of Node.js and/or coffee-script.
If you use a different extension with Babel--say .es6--I think you would need --compilers? How does this work with TypeScript?
Regardless, --compilers js:some_module may always be better written with --require if that extension is .js.  Something similar is noted in the docs.",boneskull,MEMBER,2016-09-19 19:54:19+00:00,True,2017-10-02 04:27:30+00:00,377.36,,3,9,2016-12-14 22:06:44+00:00,86.09,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2494,all async test should catch errors,"Hi!
it(""some desc"", async function(done){
    try{
        //some test
        done();
    }
    catch(err){
        done(err);
    }
));
should become just short
it(""some desc"", async function(done){
    //some test
    done();
));
it is very simple to diagnose if it function return Promise catch and pass their error into test done() function.
Thanks",alexey2baranov,NONE,2016-09-20 12:06:54+00:00,True,2016-09-22 06:38:50+00:00,1.77,,5,12,2016-09-20 12:10:59+00:00,0.0,Munter,MEMBER,2,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2496,Objects prematurely coerced into string primitives,"This is regarding an issue I reported on the WebStorm tracker: https://youtrack.jetbrains.com/issue/WEB-23383
Differences between symbols that are not strictly equal, appear as being equal and are thus hard to read and confusing.
Here is a simplified version of a test where I noticed this behavior:
""use strict"";

const chai           = require( ""chai"" );
const expect         = chai.expect;

chai.config.truncateThreshold = 0;

describe( ""Strings"", () => {
    it( ""should correctly display differences"", () => {
        expect( new String( ""foo"" ) ).to.equal( ""foo"" );
    } );
} );
Because new String( ""foo"" ) is not equal to the primitive ""foo"", the test will correctly fail. However, in the resulting output, the difference is not immediately apparent.
In this simple test, the AssertionError will pretty clearly identify the issue. However, in larger objects, this can be much harder to identify, especially if the truncation threshold is not raised.",oliversalzburg,NONE,2016-09-22 06:40:41+00:00,True,2016-09-27 07:29:24+00:00,5.03,,4,5,2016-09-22 07:09:42+00:00,0.02,Munter,MEMBER,2,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2497,Can't run tests on Browser,"Hello,
For the last few days I've been trying to run Mocha tests on Browser. Following the documentation I have an ""Require not defined"" issue. After trying several things I was able to do it with Chai, but the tests don't run (I have 0 passed, 0 fails, etc).
index.html (in the test folder)
<html>
<head>
  <meta charset=""utf-8"">
  <title>Mocha Tests</title>
  <link href=""https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.css"" rel=""stylesheet"" />
</head>
<body>
  <div id=""mocha""></div>
  <script src=""https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.js""></script>
  <script src=""../chai.js""></script>
  <script>mocha.setup(""bdd"")</script>
  <script src=""test.js"" type=""text/javascript""></script>
  <script>
    mocha.run();
  </script>
</body>
</html>
test.js (in the test folder)
var expect = chai.expect;
expect(1).to.equal(1);

Is this a bug?
Thanks.",priverop,NONE,2016-09-22 07:39:15+00:00,True,2016-09-24 18:14:37+00:00,2.44,,2,5,2016-09-22 13:31:51+00:00,0.24,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2498,.only does not respect hierarchy in mocha 3.x,"I don't know if this is intentional, but I could not find it in the changelog.
In version 2.x if there was an upper level with the tag .only then all the childs would run. For example in:
var assert = require('assert')
describe.only('First level', function () {
    describe('Second level a', function () {
       it('Third level a', function () {
           assert.equal(1,1)
       })
       it('Third level b', function () {
           assert.equal(1,1)
       })
    })
    describe('Second level b', function () {
        it('Third level c', function () {
              assert.equal(1,1)
        })
        it.only('Third level d', function () {
            assert.equal(1,1)
        })
    })
  })

All the four tests would be run. This is very nice in some scenarios, for example, forcing all tests to be ran in the CI tool even if I forget a .only tag in one of the children.
However, this is no longer the case in Mocha 3.0.2, now only the test ""Third level b"" is ran. Is there a way to go back to the previous behaviour?",furstenheim,NONE,2016-09-22 17:05:18+00:00,True,2016-09-27 04:45:48+00:00,4.49,,3,1,2016-09-22 20:12:11+00:00,0.13,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2500,Slack Channel,"Is there a Mocha slack channel? If not, would anyone be opposed to me starting one? Would you guys rather see a Mocha channel or a JS Testing Stack channel?",WillLuce,NONE,2016-09-23 15:52:42+00:00,True,2016-09-23 18:35:15+00:00,0.11,,2,4,2016-09-23 17:56:17+00:00,0.09,dasilvacontin,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2501,"Why in callback always pass, even obvious a failed case","describe('#find', () => {
        it('test have email ""test20160925@gmail.com""', () => {
            db.findOne('tbl_user', ['email'], {name: 'test'}, (err, result) => {
                if(err) throw err;
                expect(result[0].email).to.be.equal('test20160925@test.com');
                done();
            });
        });
    });

#find
  √ test have email ""test20160925@gmail.com""",GongDexing,NONE,2016-09-25 10:12:04+00:00,True,2016-09-25 12:22:47+00:00,0.09,,2,1,2016-09-25 12:22:47+00:00,0.09,Munter,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2502,stackTraceFilter windows issue,Original PR: #2377,boneskull,MEMBER,2016-09-27 04:46:47+00:00,True,2016-09-27 07:01:38+00:00,0.09,v3.1.0,1,0,,,,,0,0,0,0,['windows'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
2504,steal ES5 shims from somewhere else,"Our shims (in lib/utils.js) probably miss quite a few edge cases.
es5-shim has better--and more thoroughly tested--implementations.
But we can't monkeypatch globals, so we can't just throw this in.  We'd have to isolate the implementations somehow.",boneskull,MEMBER,2016-09-27 07:06:35+00:00,True,2017-09-29 18:19:39+00:00,367.47,,4,8,2016-09-27 20:37:58+00:00,0.56,ScottFreeCode,CONTRIBUTOR,2,2,0,0,"['help wanted', 'nice-to-have']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2505,"We shouldn't rely on the existence of ""module.paths"" (Meteor)","According to CommonJS specs, the paths property is optional. Depending on its existence, e.g.
https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L28
may cause unnecessary runtime errors, for example:
benjamn/install#9
We should probably test against the property existence before modifying module.paths.",apendua,NONE,2016-09-27 11:06:31+00:00,False,,,,2,1,2016-09-27 18:49:33+00:00,0.32,boneskull,MEMBER,1,0,0,0,"['chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2506,Promise in beforeEach not working,"I have this kind of code using mocha where all the functions inside database return a promise.
  beforeEach(function () {
    return database.truncate();
  });

  describe('customers', function () {
    it('should create a default customer', function () {
      return database.addDefaultCustomer();
    });
  });

  describe('users', function () {
    it('should create a default user for the default customer', function () {
      return database.addDefaultCustomer()
        .then(() => database.addDefaultUser());
    });
  });

This code is not working (the database.truncate is not called as it is expected to be, so If I try to add the same customer again, I have a ConflicError), but if I switch to something like
describe('customers', function () {
  it('should create a default customer', function () {
    return database.truncate()
      .then(() => database.addDefaultCustomer());
  });
});

it works. Is it not supposed to be the same thing ? Mocha is not supposed to go into the tests if the beforeEach hook does not resolve, right ?
Did I miss something or is it a bug ?",thomasthiebaud,NONE,2016-09-27 15:13:07+00:00,True,2016-09-28 10:51:47+00:00,0.82,,2,3,2016-09-27 18:21:49+00:00,0.13,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2507,Root-Level Hooks not working with --require option,"According to the docs:

You may also pick any file and add “root”-level hooks. For example, add beforeEach() outside of all describe() blocks. This will cause the callback to beforeEach() to run before any test case, regardless of the file it lives in (this is because Mocha has an implied describe() block, called the “root suite”).
... This is typically done in Node by placing your hook(s) in a .js module, and using the --require /path/to/module option on the command-line.

However, if I attempt to load a ""hook"" file with --require, I get an error like:
$ mocha --require /path/to/hook/file.js
ReferenceError: before is not defined
    at Object.<anonymous> (/path/to/hook/file.js:1:1)",eschwartz,NONE,2016-09-27 19:01:33+00:00,True,2016-09-28 00:46:29+00:00,0.24,,2,3,2016-09-28 00:43:59+00:00,0.24,boneskull,MEMBER,1,0,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2508,Babel is not defined,"I am running the following
./node_modules/mocha/bin/mocha --timeout 30000 --compilers js:babel-register --require babel-polyfill ./tests/**/*.test.js


My test has the following imports

import System from 'systemjs';
import '../config.js';

import 'babel-polyfill'


import 'jsdom-global/register'

var chai = require('chai');
var spies = require('chai-spies');
var expect = chai.expect;
var assert = require('chai').assert;

chai.use(spies);


var jsdom = require('mocha-jsdom');

When using 'jsdom-global/register' i am getting the error 'SystemJS babel is not defined'
Has anyone seen this before?
Thanks,",peteringram0,NONE,2016-09-28 08:33:47+00:00,True,2016-10-05 21:21:42+00:00,7.53,,2,1,2016-10-05 21:21:42+00:00,7.53,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2509,new test resolution behavior,"See #2413 and other various issues and PRs for previous discussion.
In Mocha 2.x, when a Promise is returned from an ""async"" test (using the done() callback), the Promise resolution is effectively ignored, though it may cause an unhandled rejection after the test has finished.
In Mocha 3.x to the present, returning a Promise from an ""async"" test is disallowed; tests must use either done() or return a Promise, but not both.
A better solution in this case would be to wait for both resolutions (the call of done() and Promise fulfillment) before the test can end.
Specification
When a test requests done() and returns a Promise:

and when it has fulfilled before done() is called

and when the Promise has been resolved

the runner should wait until done() is called to conclude the test
and when done() is called with an error parameter

the test should fail


and when done() is called without an error parameter

the test should pass




and when the Promise has been rejected

the runner should not wait until done() is called to conclude the test
and when/if done() is eventually called, it should be ignored
the test should fail warning the user that if done() was called,  any error parameter would have been ignored




and when done() is called before it is fulfilled

and when done() is not called with an error parameter

the runner should wait until Promise fulfillment to conclude the test
and when the Promise has been rejected

the test should fail


and when the Promise has been resolved

the test should pass




and when done() is called with an error parameter

the runner should not wait until Promise fulfillment to conclude the test
and when/if the Promise fulfills, it should be ignored
the test should fail warning the user that if the Promise has been rejected, any error parameter would have been ignored





Normal timeout rules apply.

Comments, suggestions, questions, concerns?",boneskull,MEMBER,2016-09-28 19:02:21+00:00,False,,,,6,11,2016-09-28 21:30:18+00:00,0.1,bitsoflogic,NONE,2,2,0,2,"['feature', 'help wanted', 'semver-major']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False
2510,detecting the active mocha-ui,"Hi,
I'm working on a utilizer that works with a custom mocha-ui, I want to think of a way to help it serve users of the standard bdd ui.
For this I need to detect the current active mocha-ui and decide how to operate.
More specifically, if I need to return an object for ui-exports OR use describe/it.
(even more specific, see the following branch: https://github.com/osher/mocha-ui-exports-request/tree/dev-ui-bdd)
The obvious thing I would fallback to do is to check process.argv for --ui, and fallback to trying to read path.join(process.cwd(), 'test', 'mocha.opts')  looking --ui flag there, and default to bdd.
But I'm here because I hope there's a standard API to accomplish this task that somebody here can point me to...
If there is no such API and the proposed strategy is not guaranteed to work because of whatever reason I'd be very happy to hear about it now.
The last resort will be to ask the user to call an additional method, which is not very pretty and less than the level of service I aspire to give my users...
Any advise will be appreciated...",osher,NONE,2016-09-28 19:20:50+00:00,True,2016-10-05 21:23:57+00:00,7.09,,2,3,2016-10-05 21:23:57+00:00,7.09,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2511,How to avoid false positives now?,"Back on #621, the --async-only feature was created to force developers to use done as a work-around to mocha not knowing anything about the assertion libraries.  It provided a way for devs to ensure their assertions were hit.
It looks like this functionality is now lost when returning promises (See #1490, #1636), which hurts when using Babel's awesome async-to-generator plugin.  With the --async-only flag on, false positives are possible again as you're no longer forced to use done with it enabled.
// Babel example
it('will produce a false positive', async () => {
  // no assertions or code required for a passing test here.
});

Thoughts?",bitsoflogic,NONE,2016-09-28 21:26:11+00:00,True,2017-10-18 04:32:21+00:00,384.3,,4,8,2016-09-28 22:06:56+00:00,0.03,ScottFreeCode,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2514,Option to disable diff,"Hi,
We currently have a use case where we're testing a large array for deep equality against something returned from a function. The problem is that when the test fails the output in the reporter is very long and clogs all the tests.
Is there any option to disable the diff? In this case it would be very useful, since we don't really need to know where the output is different from the expected result, but just if it's deeply equal to it or not.
Thanks!",pensierinmusica,NONE,2016-09-30 21:22:50+00:00,True,2017-12-12 20:52:11+00:00,437.98,,2,1,2016-10-01 03:38:21+00:00,0.26,boneskull,MEMBER,1,0,0,0,"['feature', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2515,Default test directory with non-global mocha installation,"I am trying to write an npm script in my package.json to run a bunch of pre-test tasks followed by my mocha unit tests. I want the caller to be able to specify which paths mocha will run. This is how it's currently implemented, which works correctly if I want to run all tests in my test directory.
""test"": ""eslint && gulp db:prepare_test && istanbul cover _mocha ./test""
If I want to specify a single test or directory for mocha to run, I can do this:
""test"": ""eslint && gulp db:prepare_test && istanbul cover _mocha --""
and then call it like this:
npm test ./path/to/specific/test.js

The second form should, theoretically, support both the default case and the specific case. So if I don't specify a path, it will default to the test directory. However, the default case does not work, and results in 0 tests being executed.
I'm going to assume this is because I'm not using the global installation of mocha, so the node_modules version in my project doesn't know where to look for the default test directory to run. If that's the case, I guess this can be filed as a bug?",RyanMcDonald,NONE,2016-10-03 19:31:13+00:00,True,2016-10-05 04:00:26+00:00,1.35,,2,2,2016-10-04 20:38:37+00:00,1.05,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2516,multiple compilers for one extension,"Is there a way to apply multiple compilers to an extension (karma allows this via webpack, for example). The use case is transpiling TypeScript to ES6 and then using babel to transpile to ES5.",Mosho1,NONE,2016-10-04 00:00:44+00:00,True,2016-10-04 02:07:12+00:00,0.09,,2,2,2016-12-09 09:43:34+00:00,66.4,alveflo,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2517,Consider using flagged-respawn,"From bin/mocha:
/**
 * This tiny wrapper file checks for known node flags and appends them
 * when found, before invoking the ""real"" _mocha(1) executable.
 */
It appears likely that we could merge bin/_mocha into this file (and probably simplify the code currently in bin/mocha) using https://www.npmjs.com/package/flagged-respawn
May need to consider whether removing the direct _mocha executable would be a breaking change.",ScottFreeCode,CONTRIBUTOR,2016-10-05 08:32:06+00:00,False,,,,2,2,2016-10-05 21:35:15+00:00,0.54,boneskull,MEMBER,1,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2518,Paranthesis in it name makes unit test pass,"This might be related to Microsofts (NTVS / VS2015) test inspector, however I find the behaviour a bit worrying.
I have some unit tests and I found a couple of tests that certainly should fail. However when I have a set of matching paranthesis inside a guaranteed fail such as around published in the code snippet then the test passes. Removing both or just one makes the test fail - strict mode on thisisnotdefined
I am on node 6.7, Windows platform, mocha and others up to date.
Is there something that I have overlooked completely?
it('mqtt publish to mosca.on(published)', function (done) {
        thisisnotdefined
        this.timeout(5000);

        testconfig.moscaserver.on('published', function (packet, client) {
            assert.equal('c', packet.payload);
            done();
        });

        var mqttclient;
        mqttclient = mqtt.connect('mqtt://localhost');

        mqttclient.on('connect', function (pkg) {
            mqttclient.publish('a', 'b');
        })
    });",Laro88,NONE,2016-10-05 12:53:13+00:00,True,2016-10-06 06:42:59+00:00,0.74,,3,3,2016-10-05 20:44:15+00:00,0.33,ScottFreeCode,CONTRIBUTOR,1,1,0,1,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2519,"""compilers"" does not compile fork scripts","Running a project that depend on some features not available in the latest Node js yet such as async await I use --compilers js:babel-register on mocha to compile my code during the tests. This works really well in most cases. But this does not work if I have a fork process which also use async.
If I run babel-node over the main script it will by default compile the fork scripts as well.
But running mocha with --compilers js:babel-register it does not happen. I was expecting it would work the same way babel-node does.
Here is the a project to help reproduce the problem: https://github.com/maxcnunes/problem-fork-with-babel-node",maxcnunes,NONE,2016-10-05 19:34:20+00:00,True,2016-10-05 20:52:30+00:00,0.05,,2,3,2016-10-05 20:52:30+00:00,0.05,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2521,use appropriate error messaging when timeouts occur in synchronous or Promise-returning runnables ,"Occasionally on our Jenkins server we get the following error on synchronous tests:
timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.

This message does not make sense to the user since it is a synchronous test which has no done callback.
It looks like Runnable's done() is always called, even in the sync case. (When there is no done function parameter and no Promise is returned). The issue is the following code inside done()
if (!err && self.duration > ms && self._enableTimeouts) {
  err = new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.');
}

Is it expected for done to throw an error in this case? If so it would be nice to have an option to only warn when the timeout was exceeded. Otherwise it is just a bug that needs to be fixed. I don't mind making a PR but I'm not sure what is expected.",ckedwards,NONE,2016-10-07 15:26:31+00:00,False,,,,3,2,2016-10-07 21:38:37+00:00,0.26,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2522,Moving test files with a mocha.opts file,"I want to move my test files and put them next to my React code.  Foo is a React component and index.js is the component file, and Foo.spec.js is my test.
An example of my file structure:
root-folder
    src
        components
            Foo
                Foo.spec.js
                index.js
    test
        mocha.opts

mocha.opts:
src/components/**/*.spec.js
--recursive

This options file isn't working as expected.  I don't even know if I'm doing it correctly.  There isn't really any documentation on this file.  When I run it, I get this error:
Error: Cannot find module '../../src/components/Foo'

Here is my current test script:
""test"": ""mocha --recursive --require babel-register --require ignore-styles || true""

I need to use ignore-styles because I am using CSS modules with Webpack.",MatthewKosloski,NONE,2016-10-08 01:30:31+00:00,True,2016-10-09 23:56:24+00:00,1.93,,3,2,2016-10-08 17:02:28+00:00,0.65,ScottFreeCode,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2523,improve error messaging,"This is a general effort.
(I'm creating this to see how ZenHub's ""epics"" work)",boneskull,MEMBER,2016-10-10 00:05:01+00:00,True,2017-05-24 05:30:08+00:00,226.23,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2524,phantomjs 1.9.8 cannot be run on macOS Sierra,"See ariya/phantomjs#14558.
We need to use 1.9.8 in CI to ensure compatibility, so upgrading is not yet on the table (unless we can get some numbers around 1.9.x's popularity).
My proposed workaround is to add karma-chrome-launcher and use that instead if the browser suite is running on Sierra.  It's better than nothing. 😝",boneskull,MEMBER,2016-10-10 03:55:40+00:00,True,2016-10-10 04:02:54+00:00,0.01,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2525,lint all the things,"semistandard is in place; I'm going to fix the rest of the issues across the codebase in skipped files.
currently we're skipping the tests (which are a mess).  there's also a few other issues (such as strict mode) scattered about.",boneskull,MEMBER,2016-10-10 05:23:35+00:00,True,2016-10-10 06:01:03+00:00,0.03,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2527,use thunk-mocha with mocha@3.1.1 got error,"https://github.com/thunks/thunk-mocha
work at 3.1.0
/Users/tz/Workspaces/eggjs/aliyun-egg/node_modules/.3.1.1@mocha/lib/runnable.js:52
  this.async = fn && fn.length;
             ^

TypeError: Cannot set property async of #<Runnable> which has only a getter
    at Test.Runnable [as constructor] (/Users/tz/Workspaces/eggjs/aliyun-egg/node_modules/.3.1.1@mocha/lib/runnable.js:52:14)
    at new Test (/Users/tz/Workspaces/eggjs/aliyun-egg/node_modules/.3.1.1@mocha/lib/test.js:28:12)
    at context.it.context.specify (/Users/tz/Workspaces/eggjs/aliyun-egg/node_modules/.3.1.1@mocha/lib/interfaces/bdd.js:86:18)",atian25,NONE,2016-10-10 07:36:43+00:00,True,2016-10-10 07:39:27+00:00,0.0,,1,1,2016-10-10 07:39:27+00:00,0.0,atian25,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2528,Broken Source Maps or Stack Traces for async functions after upgrading from 3.1.0 to 3.1.1,"Given a test like this:
import 'babel-polyfill';
import expect from 'expect';

describe('test my code', () => {
  it('should show my app', async (): Promise<any> => {
    expect(2).toBe(1);
  });
});
3.1.1 shows:
ERROR: 'Unhandled promise rejection', TypeError{stack: 'fail@http://localhost:9876/absolute/Users/foo/Workspace/project/node_modules/mocha/mocha.js?60c338ed8db7987f07880c121c83fed2648782f6:4726:6

And also:
10 10 2016 15:35:06.809:WARN [PhantomJS 2.1.1 (Mac OS X 0.0.0)]: Disconnected (1 times), because no message in 10000 ms.
PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR
      Disconnected, because no message in 10000 ms.

3.1.0 correctly reports an error with a correct stack trace and isn't disconnected from PhantomJS. (I guess the promise rejection is handled correctly.)
Note that I use an async function here. (In my real test I also await something, but it is not necessary to do that to reproduce the error.
Maybe it was introduced by fixing #1417?",donaldpipowitch,NONE,2016-10-10 13:38:35+00:00,True,2016-10-11 05:13:10+00:00,0.65,,2,10,2016-10-11 03:12:57+00:00,0.57,boneskull,MEMBER,1,0,0,1,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2529,Can't see how retried test failed before passing.,"It would be great when using the retries feature if I could get the exception and stack trace info on the failed attempts before it eventually passes.
Currently it looks like this.currentTest.err remains undefined unless the last retry is a failure. Instead when going through afterEach() before retrying the test I'd like to be able to log the contents of this.currentTest.err.",JustinRainwater,NONE,2016-10-10 18:30:32+00:00,True,2018-12-14 20:30:36+00:00,795.08,,5,7,2016-10-10 19:00:01+00:00,0.02,JustinRainwater,NONE,1,1,0,3,"['feature', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2532,increase browser coverage,"Only a fraction of our test suite runs in browsers.  Everything that should work in a browser should run in a browser.
Here are some reasons:

Mocha's I/O is not sufficiently abstracted.  Too much Node.js-specific stuff strewn throughout various places.  As a result, the specs suffer the same problem; they overwhelmingly expect a Node.js environment.
Initialization of interfaces (tdd, bdd, etc) and actually running Mocha differs wildly between Node.js and the browser.  See karma.conf.js for examples of the Broadway production necessary to simply test the qunit interface.
Exposed globals and module exports are inconsistent.  For compatibility, browser-entry.js actually exports global, which is a profound WTF.  This probably has to do with the fact that Mocha originally hand-rolled its own Browserify implementation.

That being said, I believe there are a small handful of tests that can be run with little or no modification which simply aren't being run.
To address this, start by telling Karma to run everything, and then remove the tests that break. 😄",boneskull,MEMBER,2016-10-11 06:03:04+00:00,False,,,,2,0,,,,,0,0,0,0,"['developer-experience', 'help wanted', 'qa']",False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2533,Mocha expect() is undefined,"Running Mocha with Proclaim and testing in IE11/10/9.
The below assert gets called from the bottom section of code when testing assert.strictEqual(records.length, 2); if the number of records == 2. Why would expect() become undefined?
var assert = {    
        strictEqual: function(src, model) {
        expect(src).to.be(model);
    }
};

from this:
  it('attr', function() {
    var div = document.createElement('div');
    var observer = new MutationObserver(function() {});
    observer.observe(div, {
      attributes: true
    });
    div.setAttribute('a', 'A');
    div.setAttribute('a', 'B');

    var records = observer.takeRecords();
    assert.strictEqual(records.length, 2);

    expectRecord(records[0], {
      type: 'attributes',
      target: div,
      attributeName: 'a',
      attributeNamespace: null
    });
    expectRecord(records[1], {
      type: 'attributes',
      target: div,
      attributeName: 'a',
      attributeNamespace: null
    });
  });",hipkiss91,NONE,2016-10-11 14:00:50+00:00,True,2016-10-13 20:11:06+00:00,2.26,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2535,--watch crashes mocha on startup,"I'm getting error below when running mocha in watch mode. As you can see, the file it tries to find is not even js file. Apparently the file link which breaks the mocha is somehow broken. It shouldn't break the mocha though. Without --watch, mocha runs just fine. i'm running mocha version 3.1.2 with following command from package.json:
""test-rc"": ""mocha 'frontend/*/.spec.js' --watch""
The error is following:
Error: ENOENT: no such file or directory, stat '/Users/me/code/my-project/public/index-apitest.php'
at Error (native)
at fs.statSync (fs.js:987:18)
at /Users/me/code/my-project/node_modules/mocha/lib/utils.js:255:11
at Array.forEach (native)
at Object.exports.files (/Users/me/code/my-project/node_modules/mocha/lib/utils.js:253:6)
at /Users/me/code/my-project/node_modules/mocha/lib/utils.js:256:17
at Array.forEach (native)
at Object.exports.files (/Users/me/code/my-project/node_modules/mocha/lib/utils.js:253:6)
at Object. (/Users/me/code/my-project/node_modules/mocha/bin/_mocha:408:26)
at Module._compile (module.js:556:32)
at Object.Module._extensions..js (module.js:565:10)
at Module.load (module.js:473:32)
at tryModuleLoad (module.js:432:12)
at Function.Module._load (module.js:424:3)
at Module.runMain (module.js:590:10)
at run (bootstrap_node.js:394:7)
at startup (bootstrap_node.js:149:9)
at bootstrap_node.js:509:3",villesau,CONTRIBUTOR,2016-10-12 16:04:10+00:00,True,2016-11-24 08:23:52+00:00,42.68,,3,8,2016-10-12 16:12:02+00:00,0.01,villesau,CONTRIBUTOR,1,2,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2537,timeout of 0 (no timeout) for tests that never resolve closes Mocha with always successful exit-code without finishing reporter output,"Timeout 0 and un-resolved async function lead nowhere.
No throw, no error, no next test running, nothing.
describe(""should never end"", function(){
  this.timeout(0);

  it(""should never end"", function(done){ });

  it(""is here now"", function(){
    console.log(""Allgood"");
  });
});

Current result
R:\>node d:dvp\node_modules\mocha\bin\_mocha test.js
  should never end
R:\>

Expected result
R:\>node d:dvp\node_modules\mocha\bin\_mocha test.js
  should never end
  (???? something ?? waiting undefinitively ?) , but NOT nothing
R:\>",131,NONE,2016-10-13 08:14:02+00:00,False,,,,5,10,2016-10-15 22:38:19+00:00,2.6,boneskull,MEMBER,1,1,0,3,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2539,async-only should apply to test setup and tear down routines (or a similar option should be provided),"async-only doesn't apply to before beforeAll etc.., only test. It would be nice for it either to apply across the board, or for their to be a different option which applies the same constraints across the board.",bpytlik,NONE,2016-10-15 02:16:53+00:00,False,,,,3,3,2016-10-15 22:40:50+00:00,0.85,boneskull,MEMBER,1,0,0,2,"['needs-feedback', 'semver-major']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
2540,ignore-promises option would be useful,"For those of us who agree with issue #2511, having an option to ignore the promises that are returned from a test would be useful. It would allow an easy way to shift to mocha 3.X without having to touch every test case in a test suite. It would also act as a bridge until #2509 is finished.",bpytlik,NONE,2016-10-15 02:43:19+00:00,True,2016-10-15 22:48:36+00:00,0.84,,3,6,2016-10-15 22:48:36+00:00,0.84,boneskull,MEMBER,2,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2541,"runner.on('end', ...) issue with custom reporter","my current annoyance with runner.on('end', ...) in my custom reporter is that mocha doesn't wait for any async/promises to complete.  my reporter writes to an xlsx file and this gets aborted on the end handler, prompting me to add the dreaded setTimeout kludge--e.g.:
var reportDone = false; // set to true in an async xlsx writer when it's done.
function isReportDone() {
    if (!reportDone) {
        setTimeout(1000, isReportDone())
    }
}

// ...

runner.on('end', function() {
  // ...
  setTimeout(1000, isReportDone());
})
with a test suite, end() handler can be optionally passed with done callback which prevents mocha from ending the suite until done() is called.
i propose that runner.on('end', ...) could optionally have the same structure:
runner.on('end', function(done) { 
  // ...
  aPromiseCalled.then(function() {
     console.log('really done!');
     done();
  });
});
with the same behavior as end() test suite: prevent the reporter to end until done() callback is called, thereby not requiring the setTimeout kludgy fix.",dalegaspi,NONE,2016-10-16 01:10:01+00:00,False,,,,4,7,2016-10-16 01:55:55+00:00,0.03,boneskull,MEMBER,1,1,0,2,"['feature', 'help wanted', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2542,Expand CONTRIBUTING.md,"CONTRIBUTING.md lacks some information for contributors. For example, you shouldn't push changes to mocha.js; I suspect there are more similar gotchas that contributors should be aware of.",CapacitorSet,CONTRIBUTOR,2016-10-16 10:08:35+00:00,True,2016-12-03 04:46:14+00:00,47.78,,2,1,2016-10-18 03:39:23+00:00,1.73,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2543,"""it.skip"" throws an exception (when running e2e with protractor)","Recently I noticed that adding a ""skip"" to an ""it"" cause an exception, and tests are failing to run.
I think it is related to some Mocha/Protractor packages mismatch, but not sure.
I couldn't find a working configuration easily.
Currently we use:
Protractor: 3.0.0
Mocha: 3.0.2
Downgrading mocha to 2.4.5 solves the issue (but we miss some features and bug fixes we need).
I see this was discussed here:
http://stackoverflow.com/questions/38876476/running-protractor-tests-with-jenkins-throws-test-title-should-be-a-string
Any plan to fix this in future mocha versions / is it a protractor issue?
This is the error and stack trace we get:
Error: Test title should be a ""string"" but ""function"" was given instead.
at new Test (/Users/benbracha/workspace/ravelloui/ravello-ui/node_modules/mocha/lib/test.js:24:11)
    at context.it.context.specify (/Users/benbracha/workspace/ravelloui/ravello-ui/node_modules/mocha/lib/interfaces/bdd.js:84:18)",benbracha,NONE,2016-10-16 12:46:51+00:00,True,2017-10-31 08:23:09+00:00,379.82,,7,15,2016-10-18 03:42:01+00:00,1.62,boneskull,MEMBER,1,1,0,6,"['needs-feedback', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2546,"Test case skip()ed, beforeEach() hook still executed, afterEach() missed","This with Mocha 3.1.2. Source test file:
""use strict"";
describe('outer', function() {

  beforeEach(function() {
    console.log(""A"");
    this.skip();
  });

  describe('inner', function() {
    beforeEach(function() {
      console.log(""B"");
    });

    it('test case', function() {
      console.log(""C"");
    });

    afterEach(function() {
      console.log(""Y"");
    });
  });

  afterEach(function() {
    console.log(""Z"");
  });
});
Expected output: either ""B"" and ""Y"" should be printed, or neither ""B"" nor ""Y"" should be printed.
Actual output: ""B"" is printed, but not ""Y"":
  outer
    inner
A
B
      - test case


  0 passing (11ms)
  1 pending

In general,

If I call skip(), then I would not expect that inner beforeEach blocks would be executed.
If a beforeEach block is executed, then the corresponding afterEach blocks should also be executed, for symmetry.",s100,NONE,2016-10-17 17:27:02+00:00,False,,,,7,9,2016-10-26 22:15:42+00:00,9.2,ORESoftware,NONE,2,0,0,4,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2547,npm test aways fails,"OS: Mac
npm: 3.10.8
node: 6.8.1
mocha: 3.1.2
package.json scripts:
""scripts"": { ""test"": ""mocha tests/**/*.js"" },
output:
$ npm test

> project@1.0.0 test /Users/user/project
> mocha tests/**/*.js
  testA File
    ✓ First it()
    ✓ Second it()
npm ERR! Test failed.  See above for more details.

folder structure:

tests/

fristFolder/

testA.js (only the first one shows in the console)
testB.js





what i tried:

use --reporter spec on the npm test script",kauegimenes,NONE,2016-10-18 17:21:51+00:00,True,2016-10-25 14:53:46+00:00,6.9,,3,3,2016-10-18 21:22:28+00:00,0.17,ScottFreeCode,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2548,Explodes on ES6 default parameters,"Mocha is having trouble when it encounters ES6 default parameters being given to functions, even if it is encountered in a depency node module.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters
E.g.:
constructor(name, hostname='localhost') {
    this._name = name;
    this._hostname = hostname;
    this._openChannels = {};
}

In the console, it gives a message like this:
/path/to/src/index.js:44
  constructor(name, hostname='localhost') {
                            ^

SyntaxError: Unexpected token =
    at exports.runInThisContext (vm.js:53:16)
    at Module._compile (module.js:413:25)
    at Object.Module._extensions..js (module.js:452:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Module.require (module.js:365:17)
    at require (module.js:384:17)
...",Cazra,NONE,2016-10-19 21:56:46+00:00,True,2016-10-22 18:05:53+00:00,2.84,,3,4,2016-10-19 22:12:23+00:00,0.01,ScottFreeCode,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2549,want to be able to force process.exit(0),"The mocha --watch switch isn't sufficient for the watching that I need, so I'm using nodemon.
However, nodemon exits if the spawned processes exit code is non-zero.
I would like some way to force the exit code from mocha to be 0.
Maybe a --clean-exit switch.
I'm happy to do a PR for this, but it's a feature not a bug so wanted to talk about it first.",mikael-entefy,NONE,2016-10-20 16:57:56+00:00,True,2016-11-17 02:25:25+00:00,27.39,,2,2,2016-11-17 02:25:25+00:00,27.39,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2550,Unexpected behavior of skip().,"I have resided to rewrite my test using skip() inside of before().
describe(Comparison... `, function() {
xmlFilesInDir.forEach(function(file) {

    var docId = path.basename(file, '.xml');
    var eResponse;
    var mResponse;

    before(`Get data for ${docId}`, function() {
        var self = this;
        return helper.getEventsByDocId(docId).then(function(eRes) {
            if (eRes.status !== 200) {
                console.log(`Document id: ${docId}. Get Document\'s Events(s). Expected HTTP status 200 but was received ${eRes.status}. Test is skiped.`); 
                self.skip();
            }
            eResponse = eRes;
        }).then(function(){
            return helper.getMetadataByDocId(docId).then(function(mRes) {
                if (mRes.status !== 200) {
                    console.log(`Document id: ${docId}. Get Document\'s Metadata. Expected HTTP status 200 but was received ${mRes.status}. Test is skiped.`); 
                    self.skip();
                }
                mResponse = mRes;
            });
            });
    });     

    it(`Document id: ${docId}. Should...`, function(done){

        done();             
    }); 

});

});`
Where xmlFilesInDir = [""1.xml"", ""2.xml""] and I expect that test for 1.xml will be performed, but for 2.xml will be skipped.
But in execution I found that the Mocha are skipped the test for both documents:
Comparison...
Document id: 2. Get Document's Metadata. Expected HTTP status 200 but was received 404. Test is skiped.
- Document id: 1. Should...
- Document id: 2. Should...
If there is something that I forgot to add or the issue is not related to Mocha just let me know.",yuriyKazan,NONE,2016-10-21 10:25:22+00:00,True,2016-10-25 13:30:05+00:00,4.13,,2,5,2016-10-22 18:37:19+00:00,1.34,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2551,Stuck at bootstrap_node.js:509:3,,kyawzayya97,NONE,2016-10-22 05:19:32+00:00,True,2016-10-22 18:44:26+00:00,0.56,,2,1,2016-10-22 18:44:26+00:00,0.56,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2552,Time-travelling `this` value: an assignment brings back prior test's value before that assignment occurs,"Hi,
I encountered a possible bug in Mocha while writing tests for our React+Redux application. The code snippets are not from the app but a simplified versions of them. So the problem is that first describe blocks second run fails because for some reason this.state ends up being what it was during first run. Can someone explain why this happens? Or am I using the Mocha Context in a wrong way or something?
Has been tested with Mocha 2.4.1 and 3.1.2
import { expect } from 'chai';

describe('with mocha context second run fails', function() {
  context('outer context', function() {
    beforeEach(function() {
      this.state = [];
      this.value = Math.random();
      this.secondValue = Math.random();
      this.state = tester(this.state, this.value);
      this.state = tester(this.state, this.secondValue);
      console.log('1: ', this.state);
    });

    context('inner context', function() {
      beforeEach(function() {
        this.thirdValue = Math.random();
        this.state = tester(this.state, this.thirdValue);
        console.log('2: ', this.state);
      });

      it('first run', function() {
        expect(this.state[0]).to.eq(this.value);
      });

      it('second run', function() {
        expect(this.state[0]).to.eq(this.value);
      });
    });
  });
});

describe('with mocha context and local state', function() {
  context('outer context', function() {
    let state;
    beforeEach(function() {
      state = [];
      this.value = Math.random();
      this.secondValue = Math.random();
      state = tester(state, this.value);
      state = tester(state, this.secondValue);
      console.log('1: ', state);
    });

    context('inner context', function() {
      beforeEach(function() {
        this.thirdValue = Math.random();
        state = tester(state, this.thirdValue);
        console.log('2: ', state);
      });

      it('first run', function() {
        expect(state[0]).to.eq(this.value);
      });

      it('second run', function() {
        expect(state[0]).to.eq(this.value);
      });
    });
  });
});

function tester(state, value) {
  let newArray = [...state];
  newArray.push(value);
  return newArray;
}
Output of the failing test:
  with mocha context second run fails
    outer context
      inner context
1:  [ 0.928367618410991, 0.38121689123832225 ]
2:  [ 0.928367618410991, 0.38121689123832225, 0.10734651491339164 ]
        ✓ first run
1:  [ 0.9018743997228822, 0.7692656494317256 ]
2:  [ 0.928367618410991,
  0.38121689123832225,
  0.10734651491339164,
  0.8602155400890177 ]
        1) second run


  1 passing (1s)
  1 failing

  1) with mocha context second run fails outer context inner context second run:

      AssertionError: expected 0.928367618410991 to equal 0.9018743997228822
      + expected - actual

      -0.928367618410991
      +0.9018743997228822",harjis,NONE,2016-10-25 14:53:43+00:00,True,2017-10-17 06:07:19+00:00,356.63,,4,4,2016-10-25 22:50:57+00:00,0.33,ScottFreeCode,CONTRIBUTOR,0,2,0,1,"['confirmed-bug', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2554,Allow to customize ignored files?,"When in --watch mode, it currently only ignores node_modules and .git by default. I would like to add other folders such as dist. Is it possible to customize ignored files? If not please consider it. It takes way too much resources at initial load time going through setting up monitors for unnecessary files.",laggingreflex,NONE,2016-10-26 14:21:03+00:00,True,2016-11-17 02:26:15+00:00,21.5,,3,3,2016-10-26 16:27:59+00:00,0.09,laggingreflex,NONE,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2555,out of memory issue: garbage collection ?,"Recently we ran into out of memory issues (in node) when executing our tests via mocha.
We are running about 5000 tests/specs and are guessing it has something to do with closures and garbage collection.
For now we have logically splitted our runs into multiple ones, but it is just a matter of time before we encounter the same problems.
I am certain this issue will affect other teams also.
Can someone tell me how we can pinpoint/analyze/solve the problem?
Thank you very much in advance.",TomVanHaver,NONE,2016-10-26 19:10:10+00:00,True,2016-11-29 23:42:02+00:00,34.19,,5,12,2016-10-27 09:46:44+00:00,0.61,tommarien,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2556,Output indenting issue,"See https://travis-ci.org/oddui/webdriver-extension/jobs/170984533 the first run passes and the second fails. The indentation starts to be one level further after the failed test.
Is it just a formatting issue or are the tests running in some strange order/nesting/context? I'm not able to find out why my tests fail from time to time and hope to get some ideas here. The code for the failed test can be found here. Thank you!",oddui,NONE,2016-10-27 04:35:41+00:00,False,,,,3,8,2016-10-27 20:07:16+00:00,0.65,ScottFreeCode,CONTRIBUTOR,1,1,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2557,"I have asserts and sometimes errors in promises, but all tests passing! Why asserts in promises does not count as tests?","Using mocha for typescript tests

Errors like field is undefined (runtime error), or assert is failed.",idchlife,NONE,2016-10-27 16:11:53+00:00,True,2016-11-01 10:55:04+00:00,4.78,,4,4,2016-10-27 16:41:33+00:00,0.02,ORESoftware,NONE,0,2,0,2,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2558,Support for reporting both to console and a file?,"Is there an easy solution for running a spec reporter while also writing out an xunit.xml?
https://www.npmjs.com/package/reporter-file seems built for that, but since it's a little old I was wondering if there's another way.
(Opening this as an issue since I didn't get a response in Gitter.)",jeversmann-civitas,NONE,2016-10-28 20:11:56+00:00,True,2016-11-17 02:30:18+00:00,19.26,,3,2,2016-10-31 00:58:04+00:00,2.2,ScottFreeCode,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2562,ES6 mocha.opts return error,"When I try run my tests with mocha.opts I get this error. Not sure if it's a Mocha error.

When I pass the parameters without using the mocha.opts the test runs normally.",carloschneider,NONE,2016-10-29 17:12:17+00:00,True,2016-10-29 18:55:03+00:00,0.07,,2,2,2016-10-29 17:44:03+00:00,0.02,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2563,Test fail with Appveyor,"I am using devtool and mocha to debug atom-keymap. Although it success on Travis but it is failing on Appveyor:
Error: 
C:\projects\atom-keymap\node_modules\mocha\bin\_mocha
Cannot find module 'C:\projects\atom-keymap\spec\fixtures'
  at Module._resolveFilename (module.js:455:15)
  at Function.Module._resolveFilename (C:\projects\atom-keymap\node_modules\electron\dist\resources\electron.asar\common\reset-search-paths.js:35:12)
  at Function.Module._load (module.js:403:25)
  at Module.require (module.js:483:17)
  at require (internal/module.js:20:19)
  at C:\projects\atom-keymap\node_modules\mocha\lib\mocha.js:222:27
  at Array.forEach (native)
  at Mocha.loadFiles (C:\projects\atom-keymap\node_modules\mocha\lib\mocha.js:219:14)
  at Mocha.run (C:\projects\atom-keymap\node_modules\mocha\lib\mocha.js:487:10)
  at Object.<anonymous> (C:\projects\atom-keymap\node_modules\mocha\bin\_mocha:458:18)
  at Module._compile (module.js:556:32)
  at Object.devtoolCompileModule (C:\projects\atom-keymap\node_modules\devtool\lib\require-hook.js:32:14)
  at Module.load (module.js:473:32)
  at tryModuleLoad (module.js:432:12)
  at Function.Module._load (module.js:424:3)
  at Module.require (module.js:483:17)
  at require (internal/module.js:20:19)
  at EventEmitter.<anonymous> (C:\projects\atom-keymap\node_modules\devtool\lib\preload.js:88:16)
  at emitOne (events.js:96:13)
  at EventEmitter.emit (events.js:188:7)",,NONE,2016-10-30 14:38:59+00:00,True,2016-10-31 20:24:34+00:00,1.24,,1,4,2016-10-30 21:02:21+00:00,0.27,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2564,Consider clarifying `--recursive` doc,"As I understand it, --recursive has an effect roughly equivalent to changing path/to/directory into path/to/directory/**/*.js. In any case, however, people are occassionally confused expecting it to somehow complement globbing rather than act as an alternative to globbing -- I suspect that some people expect it to turn *.js or *.spec.js into **/*.js and **/*.spec.js (respectively), which it doesn't in fact. The current documentation, as far as I've found, is vague enough to justify the misunderstanding.
We probably should make sure the documentation for this option, both on the commandline and on the website, briefly notes both what exactly it does and its relationship to globbing, preferably with a minimal example.",ScottFreeCode,CONTRIBUTOR,2016-10-31 01:05:41+00:00,True,2018-10-11 09:31:16+00:00,710.35,,3,1,2018-10-11 09:31:16+00:00,710.35,Bamieh,MEMBER,1,0,0,0,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2565,Add a command line option to filter only specific test description,"This is a feature request to add a command line option able to filter tests matching a specific description. Similar to .only() but from command line.
e.g.
describe('Test', function () {
  describe('.clone()', function () {
    ...
    it('should copy the title', function () {
      this._test.clone().title.should.equal('To be cloned');
    });

If this test is failing, I would get this report:
 Test
   .clone()
    1) should copy the title

  ...
  1 failing

  1) Test .clone() should copy the title

Now, let's assume the requested option is called filter.
Then if I want to re-run only that test, I would do it from command line like this:
mocha --filter ""Test .clone() should copy the title""
And this should behave exactly like a it.only() on that test.
Some additional proposed details:

A plain text and a regexp alternative (e.g; --filter & --rfilter)
Plain text should match if the string is contained in the test full description
Regex can be used to match full description unsing ^...$
The match can be at any part, so --filter "".clone()"" should run everything under describe(' .clone()', ...)",pmoleri,NONE,2016-10-31 16:40:18+00:00,True,2016-10-31 20:20:15+00:00,0.15,,2,3,2016-10-31 20:20:15+00:00,0.15,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2569,"beforeEach/afterEach runs regardless of the block, before/after runs are not synchronized","The first part of this issue seems to be very important and there are no open issues that I've found. It's possible that it's caused by the environment I'm running this in.
The second part may be intended, but that causes problems (for example, mocking a global object and restoring it after a test will fail other tests).
describe('TEST1', () => {
    before(() => {
        console.log('outer before')
    })
    beforeEach(() => {
        console.log('outer beforeeach')
    })
    afterEach(() => {
        console.log('outer aftereach')
    })
    after(() => {
        console.log('outer after')
    })
    describe('inner1', () => {
        before(() => {
            console.log('inner1 before')
        })
        beforeEach(() => {
            console.log('inner1 beforeeach')
        })
        afterEach(() => {
            console.log('inner1 aftereach')
        })
        after(() => {
            console.log('inner1 after')
        })
        it('test inner1', () => {
            console.log('inner1 test')
        })
        it('test2 inner1', () => {
            console.log('inner1 test2')
        })
    })
    describe('sub-inner', () => {
        describe('inner2', () => {
            before(() => {
                console.log('inner2 before')
            })
            beforeEach(() => {
                console.log('inner2 beforeeach')
            })
            afterEach(() => {
                console.log('inner2 aftereach')
            })
            after(() => {
                console.log('inner2 after')
            })
            it('test inner2', () => {
                console.log('inner2 test')
            })
        })
    })
})

Outputs
2016-11-01T21:40:08Z [1] INFO outer before
2016-11-01T21:40:08Z [1] INFO inner1 before
2016-11-01T21:40:08Z [1] INFO inner2 before
2016-11-01T21:40:08Z [1] INFO outer beforeeach
2016-11-01T21:40:08Z [1] INFO inner1 beforeeach
2016-11-01T21:40:08Z [1] INFO inner2 beforeeach
2016-11-01T21:40:08Z [1] INFO inner1 test
2016-11-01T21:40:08Z [1] INFO outer aftereach
2016-11-01T21:40:08Z [1] INFO inner1 aftereach
2016-11-01T21:40:08Z [1] INFO inner2 aftereach
2016-11-01T21:40:08Z [1] INFO outer beforeeach
2016-11-01T21:40:08Z [1] INFO inner1 beforeeach
2016-11-01T21:40:08Z [1] INFO inner2 beforeeach
2016-11-01T21:40:08Z [1] INFO inner1 test2
2016-11-01T21:40:08Z [1] INFO outer aftereach
2016-11-01T21:40:08Z [1] INFO inner1 aftereach
2016-11-01T21:40:08Z [1] INFO inner2 aftereach
2016-11-01T21:40:08Z [1] INFO outer beforeeach
2016-11-01T21:40:08Z [1] INFO inner1 beforeeach
2016-11-01T21:40:08Z [1] INFO inner2 beforeeach
2016-11-01T21:40:08Z [1] INFO inner2 test
2016-11-01T21:40:08Z [1] INFO outer aftereach
2016-11-01T21:40:08Z [1] INFO inner1 aftereach
2016-11-01T21:40:08Z [1] INFO inner2 aftereach
2016-11-01T21:40:08Z [1] INFO outer after
2016-11-01T21:40:08Z [1] INFO inner1 after
2016-11-01T21:40:08Z [1] INFO inner2 after

As you can see,  ""inner1 test"" is wrapped by 2 beforeEach and 2 afterEach, one coming from its own block (expected) and the other coming from the inner2 block which is not expected according to the documentation. The same problem applies for all other tests run.
Also, ""inner2 before"" is run right after ""inner1 before"", before ""inner1 after"" is run. This may be by design but it would be great to have a way to wrap multiple tests assuring the before and after are both run before the next test is. Without it you can't mock a global object that may be used elsewhere.",lewisdiamond,NONE,2016-11-01 21:59:00+00:00,True,2016-11-02 00:00:05+00:00,0.08,,2,4,2016-11-02 00:00:05+00:00,0.08,lewisdiamond,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2570,use karma-mocha,karma-mocha dropped the Mocha peer dep in v2.0.0 v1.3.0.  Let's use it and kill our dumb fork of it.,boneskull,MEMBER,2016-11-03 03:43:11+00:00,True,2016-11-16 07:45:42+00:00,13.17,,1,1,2016-11-03 03:46:05+00:00,0.0,boneskull,MEMBER,1,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2572,Setting message (reason) for test skip,"Is it possible to set a message (mentioning reason) why a particular test is skipped, so that it could be used in reporters.
describe('xxx', function() {
 checkToSkip(1)(""test1"", function() {\*test goes here*\});
 checkToSkip(4)(""test2"", function() {\*test goes here*\});
});

function checkToSkip(now) {
    return now > 3 ? it : xit; 
   //return now > 3 ? it : it.skip; 
}

Here 'test1' will be skipped as 'checkToSkip' returns 'xit' (or it.skip). Is it possible to pass a message to reporter mentioning the reason for the test skip? something like below (or any other possible way).
checkToSkip(4)(""test2"", function() { \\ test goes here}, ""My Skip message!!!!"" );
or
checkToSkip(4)(""test2"", function() { \\ test goes here}).pending(""My Skip message!!!!"");
Note: Im using mocha in webdriverIO.
Thanks.",ponmudivn,NONE,2016-11-03 08:42:17+00:00,True,2018-04-18 18:16:57+00:00,531.4,,6,8,2016-11-03 09:20:13+00:00,0.03,ponmudivn,NONE,1,1,0,4,"['feature', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
2573,Explicitly disable cursor manipulation,"I know that cursor manipulation is disabled when output is going to a non-tty output but sometimes that check isn't enough – for example, running tests in Jenkins yields an output file that has control characters and is difficult to parse and it looks like a mess:

In this case, each test name is printed twice and they have leading control chars.
It would be good to have a reporter option to disable such output and print lines in their final form.",diversario,NONE,2016-11-04 18:17:33+00:00,True,2018-06-18 17:22:37+00:00,590.96,,3,1,2018-06-18 17:22:37+00:00,590.96,outsideris,MEMBER,1,0,0,0,"['confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2574,BeforeEach inside Describe,"I'm not sure if my case is actually a bug or if I'm not understanding correctly how to use beforeEach.
I have a common.js file with:
describe('API', function () {
  console.log(""Common - Describe"")
  beforeEach(async () => {
    console.log(""Common - Before"")
  })
})

Then in my test file I have:
require ('./common')

describe.only('API', function () {
  it('should do something', async () => {
    console.log(""it"")
  })
  // many more ""it""s
})

I only get logs for ""Common - Describe"" and ""it"".  The beforeEach never gets called.
Any ideas on what I'm doing wrong?",heynemann,NONE,2016-11-08 18:15:35+00:00,True,2016-11-08 21:25:04+00:00,0.13,,3,7,2016-11-08 18:31:48+00:00,0.01,ORESoftware,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2575,"errors loading 3rd-party reporters swallowed and replaced with generic ""invalid reporter"" error","SR:

Use the npm to install third-party reporter (e.g. myReporter).
Modify the reporter by adding a module (e.g. ""diff = require('diff')"") into myReporter.js file.
Try to run the mocha with the report.

ER: Appears correct error message (e.g. Error: Cannot find module 'diff').
AR: Appears error message:
node node_modules/mocha/bin/mocha test.js --reporter myReporter
""myReporter"" reporter not found
\node_modules\mocha\lib\mocha.js:166
      throw new Error('invalid reporter ""' + reporter + '""');
      ^

Error: invalid reporter ""myReporter""
    at Mocha.reporter (\node_modules\mocha\lib\mocha.js:166:13)
    at Object.<anonymous> (\node_modules\mocha\bin\_mocha:212:7)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Function.Module.runMain (module.js:441:10)
    at startup (node.js:139:18)
    at node.js:968:3

I reported the issue here in case if someone also will encounter the problem.",yuriyKazan,NONE,2016-11-09 13:45:16+00:00,False,,,,3,2,2016-11-09 16:10:37+00:00,0.1,boneskull,MEMBER,1,1,0,0,"['help wanted', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
2576,Should not silently fail given --opts option,"We had a problem where mocha wasn't finding mocha.opts, but it was silently just letting it fly and trying to run the tests. If I specify with --opts, I would expect it to throw an error if the file doesn't exist:
mocha --opts foo.opts # should throw an error if foo.opts doesn't exist",mockdeep,NONE,2016-11-09 17:14:32+00:00,True,2018-12-10 16:53:10+00:00,760.99,,3,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2577,"write EINVAL ""Unhandled 'error' event"" on Windows 10 with Node 7.1.0","Hello all,
New to mocha here. I have npm install mocha --save-dev. I have a folder named test with an empty file messages.js. If I run mocha, I get the following error:
Mocha 3.1.2
events.js:160
      throw er; // Unhandled 'error' event
      ^

Error: write EINVAL
    at exports._errnoException (util.js:1022:11)
    at WriteStream.Socket._writeGeneric (net.js:715:26)
    at WriteStream.Socket._write (net.js:734:8)
    at doWrite (_stream_writable.js:334:12)
    at writeOrBuffer (_stream_writable.js:320:5)
    at WriteStream.Writable.write (_stream_writable.js:247:11)
    at WriteStream.Socket.write (net.js:661:40)
    at c:\leoboto\node_modules\mocha\bin\_mocha:483:12
    at Array.forEach (native)
    at exit (c:\leoboto\node_modules\mocha\bin\_mocha:480:11)
    at done (c:\leoboto\node_modules\mocha\lib\mocha.js:517:13)
    at Runner.<anonymous> (c:\leoboto\node_modules\mocha\lib\runner.js:826:5)
    at emitNone (events.js:91:20)
    at Runner.emit (events.js:185:7)
    at c:\leoboto\node_modules\mocha\lib\runner.js:813:12
    at Runner.runSuite (c:\leoboto\node_modules\mocha\lib\runner.js:606:12)
    at start (c:\leoboto\node_modules\mocha\lib\runner.js:811:10)
    at Runner.run (c:\leoboto\node_modules\mocha\lib\runner.js:838:5)
    at Mocha.run (c:\leoboto\node_modules\mocha\lib\mocha.js:521:17)
    at Object.<anonymous> (c:\leoboto\node_modules\mocha\bin\_mocha:458:18)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32)
    at tryModuleLoad (module.js:449:12)
    at Function.Module._load (module.js:441:3)
    at Module.runMain (module.js:607:10)
    at run (bootstrap_node.js:420:7)
    at startup (bootstrap_node.js:139:9)
    at bootstrap_node.js:535:3
npm ERR! Test failed.  See above for more details.

Mocha 2.5.3
events.js:160
      throw er; // Unhandled 'error' event
      ^

Error: write EINVAL
    at exports._errnoException (util.js:1022:11)
    at WriteStream.Socket._writeGeneric (net.js:715:26)
    at WriteStream.Socket._write (net.js:734:8)
    at doWrite (_stream_writable.js:334:12)
    at writeOrBuffer (_stream_writable.js:320:5)
    at WriteStream.Writable.write (_stream_writable.js:247:11)
    at WriteStream.Socket.write (net.js:661:40)
    at c:\leoboto\node_modules\mocha\bin\_mocha:426:12
    at Array.forEach (native)
    at exit (c:\leoboto\node_modules\mocha\bin\_mocha:423:11)
    at done (c:\leoboto\node_modules\mocha\lib\mocha.js:498:13)
    at Runner.<anonymous> (c:\leoboto\node_modules\mocha\lib\runner.js:799:5)
    at emitNone (events.js:91:20)
    at Runner.emit (events.js:185:7)
    at c:\leoboto\node_modules\mocha\lib\runner.js:786:12
    at Runner.runSuite (c:\leoboto\node_modules\mocha\lib\runner.js:584:12)
    at start (c:\leoboto\node_modules\mocha\lib\runner.js:784:10)
    at Runner.run (c:\leoboto\node_modules\mocha\lib\runner.js:811:5)
    at Mocha.run (c:\leoboto\node_modules\mocha\lib\mocha.js:502:17)
    at Object.<anonymous> (c:\leoboto\node_modules\mocha\bin\_mocha:404:18)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32)
    at tryModuleLoad (module.js:449:12)
    at Function.Module._load (module.js:441:3)
    at Module.runMain (module.js:607:10)
    at run (bootstrap_node.js:420:7)
    at startup (bootstrap_node.js:139:9)
    at bootstrap_node.js:535:3
npm ERR! Test failed.  See above for more details.

Windows 10
Node v7.1.0
Any ideas what could be causing this?",DeividasK,NONE,2016-11-09 18:27:39+00:00,True,2016-11-10 12:12:17+00:00,0.74,,4,8,2016-11-10 04:54:41+00:00,0.44,ScottFreeCode,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2578,Make CLI more reusable,"Hi
In our use case mocha is basically the underlying engine for a behavioural framework we wrote that tests a bunch of async systems we use in-house.
We did a lot, but for brevity we write the behaviours in mocha specs, and use it to assert the systems output during a test case run. This allows us to test that the system is behaving the way that it should since it's basically a giant async state machine constantly spewing out state change notifications.
In our test case we want our framework to work as much as is possible with other mocha tools.
The problem is that using the Runner class you basically lose all of the third party tool support unless you want to reimplement the entire mocha cli on your own.
I have used Commander extensively in many other projects, so I have figured out how to make the CLI more reusable.
More details are in the PR (#2553)
I am willing to make any changes requested myself. And the functionality of the cli has not changed, so if you choose not to expose a CLI component for reuse then this can be looked at as just a code cleanup.
I know I shouldn't have made these changes without speaking to you first, but as the PR says I didn't even know if it would be possible or work, so I dug into it face first and by the time I proved it could be done, I had it working.
FYI I am using my PR in said testing framework and its working well.",rijnhard,NONE,2016-11-10 14:50:06+00:00,True,2019-01-15 17:38:34+00:00,796.12,,6,11,2016-11-10 15:01:13+00:00,0.01,sgen,NONE,1,1,0,3,"['feature', 'needs-review']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False
2579,Watch Not Working With Shared Folder on Vagrant,"Hi there. The watch option isn't working for me when using mocha on a Vagrant virtual machine in a Samba-shared folder. The host machine is Windows.
Having encountered the problem with Webpack, it seems inotify doesn't work with shared folders as discussed here.
The solution, with Webpack at least, is to set the watch flag to work with polling rather than on inotify. Would it be possible to get a similar option in Mocha? Or is it currently possible?",archy-bold,NONE,2016-11-10 15:02:36+00:00,True,2016-11-10 15:16:28+00:00,0.01,,1,1,2016-11-10 15:16:28+00:00,0.01,archy-bold,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2580,Expose Mocha instances Runner,"So I'm writing a custom interface thats basically the bdd interface.
Alongside that I have a framework that wraps mocha and basically uses it as the underlying engine.
One of the things we do is we use the mocha specs as a predefined ""behaviour"" and then with the custom interface we run the same behaviour with variances. Kind of like mocha-cases but with describes and the variances are written in yaml files.
One of the big issues we have is that we have to hack a bunch of things into the interface between runs on the variances on the behaviours.
This is pretty difficult to explain, but what I would like is the Runner instance that the mocha instance uses should be a property on the mocha instance instead of created on the run command.
This will allow users to

add custom events in the Runners EventEmitter that will allow us to wrap mocha more easily
allow us to replace the Runner instance with our own instance

At the moment mocha.run returns a Runner instance, but at this point its too late to setup anything useful ahead of time, because the testing has already started.",rijnhard,NONE,2016-11-11 12:17:35+00:00,True,2016-11-24 08:49:39+00:00,12.86,,2,2,2016-11-24 08:49:39+00:00,12.86,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2581,"Done called, but next test never runs","I have an unconventional setup I can't change. It looks something like this:

test POSTs to server
server POSTs to blockchain
blockchain updates
syncing script updates the database

It is absolutely imperative that I do not run the next test until the test before it has completed that entire workflow, which typically takes 2-3 seconds. Here is an example of a test written for that flow with supertest and chai:
it('should create a user', done => {
  request(server)
    .post(`${API}/signup`)
    .set('Content-Type', 'application/json')
    .send(`{
      ""email"":""${USER_EMAIL}"",
      ""password"":""${USER_PASSWORD}""
    }`)
    .expect(200)
    .expect(res => {
      expect(res.body.role).to.equal('user');
      expect(res.body.id).to.match(ID_PATTERN);
    })
    .end(_wait(done));
});
That _wait function is the key issue here. If I write it very naively with a setTimeout, it will work:
const _wait = cb => () => setTimeout(cb, 5000);
However, this isn't a great solution since the blockchain is very unpredictable, and can sometimes take much more than 2-3 seconds. What would be much better is to watch the database for changes. Thankfully the database is written in Rethink, which provides cursor objects that update dynamically on changes. So that should be easy, and look something like this:
var _wait = cb => () => {
  connector.exec(db => db.table('chain_info').changes())
  .then(cursor => {
    cursor.each((err, change) => {
      cb(err);
      return false;
    });
  });
};
This setup breaks the tests. As near as I can tell done does get called. Any console logs in and around it fire, and the test itself is logged as completed, but the next test never starts, and eventually everything times out:
  Manager API Workflow:
    Account Creation:
      ✓ should create a user (6335ms)
      1) should login an administrator


  1 passing (1m)
  1 failing

  1) Manager API Workflow: Account Creation: should login an administrator:
     Error: timeout of 60000ms exceeded. Ensure the done() callback is being called in this test.
Any assistance would be greatly appreciated. I am using Mocha 3.1.2, Chai 3.5.0, Supertest 2.0.1, and Node 6.9.1.",delventhalz,NONE,2016-11-11 15:11:48+00:00,True,2016-11-11 20:20:53+00:00,0.21,,2,2,2016-11-11 20:20:53+00:00,0.21,delventhalz,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2582,Error: Cannot find module './options',"when starting mocha the recommended way:
$(npm bin)/mocha

I get the following error:
module.js:474
    throw err;
    ^

Error: Cannot find module './options'
    at Function.Module._resolveFilename (module.js:472:15)
    at Function.Module._load (module.js:420:25)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> ([...]/node_modules/.bin/mocha:12:18)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32)
    at tryModuleLoad (module.js:449:12)
    at Function.Module._load (module.js:441:3)

the error goes away if I start mocha via:
./node_modules/mocha/bin/mocha

Here some system info:
macOS Sierra 10.12.1
node v7.1.0
npm 3.10.9",dastrobu,NONE,2016-11-13 17:40:02+00:00,True,2017-11-16 03:35:51+00:00,367.41,,9,13,2016-11-14 06:05:32+00:00,0.52,ScottFreeCode,CONTRIBUTOR,0,1,0,8,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2583,deprecate karma-no-mocha,"after next release, deprecate karma-no-mocha (and remove the repo?)",boneskull,MEMBER,2016-11-16 07:46:33+00:00,True,2016-11-25 00:06:20+00:00,8.68,,2,4,2016-11-25 00:06:20+00:00,8.68,boneskull,MEMBER,1,1,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2584,XUnit reporter TypeError: Cannot read property 'reporterOptions' of undefined,"When running testee with the XUnit reporter (no matter command-line or grunt task), the following error occurs:
testee test/unit/unitTests.qunit.html --reporter XUnit
//node_modules/testee/node_modules/mocha/lib/reporters/xunit.js:44
if (options.reporterOptions && options.reporterOptions.output) {
^
TypeError: Cannot read property 'reporterOptions' of undefined
at new XUnit (//node_modules/testee/node_modules/mocha/lib/reporters/xunit.js:44:14)
...
reference https://github.com/bitovi/testee/issues/93[https://github.com/bitovi/testee/issues/93](url)",hummelo,NONE,2016-11-16 18:25:25+00:00,True,2016-11-24 08:26:24+00:00,7.58,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2586,this.timeout is undefined,"Hi,
I can't increase the timeout of my tests. I get error saying that this is undefined.
describe('Queue', () => {
  this.timeout(10000);
});
ok, arrow function. Take 2:
describe('Queue', (suite) => {
  suite.timeout(10000);
suite is undefined. What's going on here and how to fix it?",pronebird,NONE,2016-11-18 16:29:22+00:00,True,2016-11-19 01:22:48+00:00,0.37,,3,2,2016-11-19 01:22:48+00:00,0.37,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2588,Run a single file ok but not with multi test files,"I run a single test file by mocha --compilers js:babel-register --recursive ./src/service/__test__/wechat.js get all tests passed, like bellow
[ian@ian-mbp ~/git/kindle-server (master)]$ mocha --compilers js:babel-register --recursive ./src/service/__test__/wechat.js 


  WeChatService
    #checkSignature
[2016-11-23 15:53:25.348] [INFO] wechat.js:WeChatService - Signature check is skipped because config.checkSignature = false
      ✓ should skiped when checkSignature is false
      ✓ should not skiped when checkSignature is true
      ✓ signature should be valid
      ✓ signature should be invalid 1
      ✓ signature should be invalid 2
    #getToken
      ✓ ok
      ✓ invalid appid


  7 passing (149ms)

but when I run like mocha --compilers js:babel-register --recursive ./src/***/__test__/*.js, the test is failed
[ian@ian-mbp ~/git/kindle-server (master)]$ mocha --compilers js:babel-register --recursive ./src/***/__test__/*.js


  #DI
    ✓ Inject an object

  WeChatService
    #checkSignature
[2016-11-23 15:56:48.007] [INFO] wechat.js:WeChatService - Signature check is skipped because config.checkSignature = false
      ✓ should skiped when checkSignature is false
      ✓ should not skiped when checkSignature is true
      ✓ signature should be valid
      ✓ signature should be invalid 1
      ✓ signature should be invalid 2
    #getToken
      1) ok
      2) invalid appid


  6 passing (153ms)
  2 failing

  1) WeChatService #getToken ok:
     TypeError: Cannot convert undefined or null to object
      at getOwnPropertyNames (native)
      at getOwnPropertyNames (node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-regenerator/node_modules/private/private.js:72:20)
      at Function.assign (node_modules/di/node_modules/traceur/bin/traceur-runtime.js:163:19)
      at FetchMock.(anonymous function) [as getOnce] (node_modules/fetch-mock/src/fetch-mock.js:281:47)
      at Context.<anonymous> (src/service/__test__/wechat.js:80:17)

  2) WeChatService #getToken invalid appid:
     TypeError: Cannot convert undefined or null to object
      at getOwnPropertyNames (native)
      at getOwnPropertyNames (node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-regenerator/node_modules/private/private.js:72:20)
      at Function.assign (node_modules/di/node_modules/traceur/bin/traceur-runtime.js:163:19)
      at FetchMock.(anonymous function) [as getOnce] (node_modules/fetch-mock/src/fetch-mock.js:281:47)
      at Context.<anonymous> (src/service/__test__/wechat.js:92:17)



What is wrong with my test.
If you guys need, I can provide the sample code.
Here is my test/wechat.js
/*
* @Author: Ian Hu
* @Date:   2016-11-19 23:28:35
* @Last Modified by:   Ian Hu
* @Last Modified time: 2016-11-23 10:02:45
*/

import {describe, it, before, after} from 'mocha'
import {expect, assert} from 'chai'
import log4js from 'koa-log4'
import mockery from 'mockery'

log4js.configure({
  levels: {
    '[all]': 'info'
  },
  appenders: [{type: 'console'}]
})

let WeChatService, WeChatApiError, wechatService, fetchMock

const token = 'mytoken'
const signature = '182d3eb04d23938eaab9f916d48995755c8f8093'
const params = [2, 3]

const appid = 'appid'
const secret = 'secret'

describe('WeChatService', () => {
  before(function () {
    mockery.enable({
      warnOnReplace: false,
      warnOnUnregistered: false
    })
    fetchMock = require('fetch-mock')
    mockery.registerMock('node-fetch', fetchMock.fetchMock)
    let holder = require('../wechat')
    WeChatService = holder.default
    WeChatApiError = holder.WeChatApiError
    // {'default': WeChatService, WeChatApiError} = (require('../wechat'))
    wechatService = new WeChatService({checkSignature: true, urlPrefix: 'http://127.0.0.1/cgi-bin'})
  })

  after(function () {
    mockery.disable()
  })

  describe('#checkSignature', () => {
    it('should skiped when checkSignature is false', () => {
      let result = new WeChatService({checkSignature: false}).checkSignature('wrong', token, ...params)
      expect(result).to.equal(true)
    })

    it('should not skiped when checkSignature is true', () => {
      let result = new WeChatService({checkSignature: true}).checkSignature('wrong', token, ...params)
      expect(result).to.equal(false)
    })

    it('signature should be valid', () => {
      let result = wechatService.checkSignature(signature, token, ...params)
      expect(result).to.equal(true)
    })

    it('signature should be invalid 1', () => {
      let result = wechatService.checkSignature('wrong', token, ...params)
      expect(result).to.equal(false)
    })

    it('signature should be invalid 2', () => {
      let result = wechatService.checkSignature(signature, 'wrong-token', ...params)
      expect(result).to.equal(false)
    })
  })

  describe('#getToken', () => {
    before(() => {
      // not defined
    })
    it('ok', done => {
      fetchMock.getOnce(/\/token/, {access_token: 'fake_token', expires_in: 7200})
      wechatService.getToken(appid, secret).then(resp => {
        let {errcode, errmsg, access_token: accessToken, expires_in: expires} = resp
        // console.info('resp: %j', resp)
        expect(errcode).to.be.undefined
        expect(errmsg).to.be.undefined
        expect(accessToken).to.be.a('string')
        expect(expires).not.to.be.NaN
      }).then(done)
    })

    it('invalid appid', done => {
      fetchMock.getOnce(/\/token/, {errcode: 40013, errmsg: 'invalid appid'})
      wechatService.getToken('wrong appid', secret).then(resp => {
        assert.fail()
      }).catch(err => {
        expect(err).to.be.instanceof(Error)
          .and.to.be.instanceof(WeChatApiError)
          .and.have.property('code', 40013)
      }).then(done)
    })
  })
})",ian4hu,NONE,2016-11-23 07:58:35+00:00,True,2016-11-24 08:32:50+00:00,1.02,,3,2,2016-11-24 05:16:13+00:00,0.89,ScottFreeCode,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2589,"BUG/FEAT: Dynamic title does NOT change, when set during setup-hook.","I have a simple gist with output commented:
const expect = require('expect')

describe('dynamic tests', () => {
  const c = 1
  let s

  before('setup', () => {
    s = 1
    expect(s).toBe(1)
  })

  describe('dynamic title', () => {
    it(`working with const: '${c}'`, () => {
      expect(c).toBe(1)
    })
    it(`not working when set during setup: '${s}'`, () => {
      expect(s).toBe(1)
    })
    it(`check title of the test, first OK, second NOT`)
  })

})

//mocha --require babel-register mocha_test.tests.js6
//
// dynamic tests
//   dynamic title
//     ✓ working with const: '1'
//     ✓ not working when set during setup: 'undefined'
//     - check title of the test, first OK, second NOT
//
// 2 passing (54ms)
// 1 pending
Or am I missing some feature?
I use the latest mocha 3.1.2 and babel-register 6.18.0.
Thanks",evandenrijd,NONE,2016-11-23 10:50:12+00:00,True,2016-11-24 04:48:45+00:00,0.75,,2,2,2016-11-24 04:47:32+00:00,0.75,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2591,add more browsers to matrix,"IE7 and IE8 are tested, but IE9, IE10 and IE11 should also be tested, for example.",boneskull,MEMBER,2016-11-23 20:53:53+00:00,True,2017-08-25 21:49:07+00:00,275.04,,4,2,2017-01-17 08:45:16+00:00,54.49,coderbyheart,CONTRIBUTOR,0,2,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2592,split CI matrix on browser,Currently we're running all browsers in a single build; let's split that up.,boneskull,MEMBER,2016-11-23 20:54:22+00:00,False,,,,1,2,2016-11-27 05:51:55+00:00,3.37,boneskull,MEMBER,1,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2594,mocha's tests should use spec reporter by default,"in mocha.opts there's --reporter dot, but in the Makefile most everything forces the spec reporter.  Why?  Because of the way the runMocha() integration test helper function works.  But we can modify this function to specify the dot reporter instead, since it's the exception instead of the rule.",boneskull,MEMBER,2016-11-24 08:55:13+00:00,True,2016-11-24 09:53:27+00:00,0.04,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2595,don't use runMocha() for what we're using it for,"runMocha() in module test/integration/helpers is suited to testing raw reporter output, but unfortunately it's being used in a couple places to check failures, passes, errors, etc.
Use runMochaJSON() instead if we're not testing raw reporter output.",boneskull,MEMBER,2016-11-24 09:12:56+00:00,False,,,,1,0,,,,,0,0,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2597,make test timeouts closer to reality,"Many tests in our suite regularly output ""slowness"" warnings:

Let's increase the --timeout and/or --slow setting so the information it produces is actually helpful.",boneskull,MEMBER,2016-11-24 09:23:34+00:00,False,,,,2,1,2017-08-25 21:47:12+00:00,274.52,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['chore', 'help wanted', 'qa']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2598,Calling `done` with circular reference object results in type error converting JSON instead of correct failure message,"Just spent way too long getting this bug and not knowing why. After figuring it out, here's the simplest repro I could make
it('Mocha is confused', function(done) {
  new Promise(function(resolve, reject) {
    var a = {};
    a.b = a;
    resolve(a);
  }).then(done).catch(done);
});

Produces
  1) Mocha is confused

  0 passing (20ms)
  1 failing

  1)  Mocha is confused:
     TypeError: Converting circular structure to JSON
      at Object.stringify (native)

The problem here is that there isn't a stack-trace, so I start off with absolutely no idea how to solve the problem. I have no idea why Mocha wants to stringify what I give to the done function, but it does...",hrdwdmrbl,NONE,2016-11-25 20:43:52+00:00,False,,,,3,1,2016-11-25 22:25:30+00:00,0.07,ScottFreeCode,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2599,Nested Stub,"I think this is some kind of bug. why can't the second stub know about the first one?
 test ""test1"" do    
    @var1 = stub do
      stubs(:method1).returns(0)
    end 
    second_stub = stub do 
        #error, @var1 is nil
        stubs(:find_by_id).with(@var1.method1).returns(@var1)
    end 
 end",ggaston095,NONE,2016-11-25 23:33:12+00:00,True,2016-11-26 00:45:55+00:00,0.05,,2,1,2016-11-26 00:05:20+00:00,0.02,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2600,Calling `done(undefined)` passes a test,"When using done() in an async test, if it's called with an argument whose value is undefined, the test is successfully passed.
Simple example:
it(""should fail, but will pass"", (done) => {
  done(undefined);
});
This feels like incorrect behaviour because done was explicitly called with an argument, which happened to not have a value. A test should only pass if done is called without arguments (as per docs).",adityavm,NONE,2016-11-26 06:03:54+00:00,True,2019-02-28 21:19:52+00:00,824.64,,9,20,2016-11-26 06:58:56+00:00,0.04,ORESoftware,NONE,2,4,0,3,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2602,investigate jwt for saucelabs integration in PRs,"Apparently, using json web tokens, we can run our browser tests (on SauceLabs) on pull requests.  Currently, we're not doing this, because security.
Not sure when Travis-CI introduced its JWT addon, but we should be able to leverage it.",boneskull,MEMBER,2016-11-27 05:16:24+00:00,False,,,,3,4,2017-06-04 21:10:53+00:00,189.66,boneskull,MEMBER,2,1,0,0,"['developer-experience', 'qa']",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2604,TypeError: Cannot read property 'datepicker' of undefined. Bootstrap-datepicker with React,"Working with React js application, Using mocha+enzyme+chai for unit testing, I have customized bootstrap-datepicker to show calendar in my application. I created a test method to verify the react customized datepicker component, but i got the below error when I execute the test method.
Issue:
TypeError: Cannot read property 'datepicker' of undefined
at node_modules\bootstrap-datepicker\dist\js\bootstrap-datepicker.js:1679:16
at node_modules\bootstrap-datepicker\dist\js\bootstrap-datepicker.js:11:9
at Object. (node_modules\bootstrap-datepicker\dist\js\bootstrap-datepicker.js:15:2)
at Object.require.extensions.(anonymous function) [as .js] (node_modules\babel-register\lib\node.js:152:7)
at require (internal/module.js:20:19)
at Object.
React Component code.
var React = require('react');
var $ = require('jquery');

require('bootstrap-datepicker');
require('bootstrap-datepicker/dist/css/bootstrap-datepicker.css');


var datePicker = React.createClass({
    getInitialState: function () {
        return { displayDatePicker: false };
    },
..........
    }
});

module.exports = datePicker;

UnitTest code:
'use strict';

/*libraries*/
var React = require('react');
var enzyme = require('enzyme');
var expect = require('chai').expect;
var jsdom = require('mocha-jsdom');

describe('DatePicker', function () {

    var DatePicker;
    var Wrapper;

    before(function () {
        jsdom();
        global.$ = global.jQuery = require('jquery');
        DatePicker = require('../../../js/components/common/datePicker');       
        Wrapper = enzyme.shallow(<DatePicker embedded></DatePicker>)
    });

    it('should render inside the div', function () {
        expect(Wrapper.find('div')).to.have.length(1);
    });
});

Please any one can help to resolve the issue. Please provide is there any workaround.",pariventhans,NONE,2016-11-27 19:37:01+00:00,True,2017-08-12 14:29:57+00:00,257.79,,2,1,2017-07-29 14:26:21+00:00,243.78,stale,NONE,0,0,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2605,Filter individual tests programmatically ,"For the JavaScript mutation testing framework Stryker we to be able to filter out individual tests based on its index in the entire run. The it.only won't work in our case, we need to do it programmatically. Is this possible? If not, is this something you would want to support? If you point me in the right direction, i can create a PR for this.
Right now, i'm using this piece of ugly magic. It works by overriding the AddTest method:
var mocha = require('mocha');
var current = 0;
var realAddTest = mocha.Suite.prototype.addTest;
mocha.Suite.prototype.addTest = function () {
    if (filteredTestIds.indexOf(current) > -1) {
        realAddTest.apply(this, arguments);
    }
    current++;
};
However this only works for the server-side version of Mocha. Also, I'm overriding the addTest method, which is a kind of private interface. I would much rather have a supported way of filtering files, like Jasmine's specFilter
If your interested in our use case:
We measure the ability of your unit tests to identify bugs, or mutants. We do this by automatically inserting mutants in your source code, then rerunning your tests for each mutant. To speed things up, we first measure the code coverage per test. Once we know that, we know exactly which tests to run for each mutant. In order for this to work, we need a way to hookup into the test framework. For the code coverage we need a beforeEach and afterEach hook. Mocha got us covered here. However, we still need a way to exactly point out which tests we want to run.",nicojs,NONE,2016-11-28 06:09:12+00:00,True,2017-06-08 03:02:16+00:00,191.87,,3,16,2016-11-28 08:51:59+00:00,0.11,ScottFreeCode,CONTRIBUTOR,1,1,0,2,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2606,nested tests/suites marked with .only() does not always run,"If there is .only test in some parent scopes, nested .only might not run. There is even a test to document this behaviour: https://github.com/mochajs/mocha/blob/master/test/integration/fixtures/options/only/bdd.fixture.js#L63
I strongly believe that every suite and test marked with .only() should run, no matter how nested they are. Here is a pr which refactors the .only() logic a bit and fixes it: #2601",villesau,CONTRIBUTOR,2016-11-28 06:23:37+00:00,True,2016-12-01 08:13:56+00:00,3.08,,3,4,2016-12-01 08:13:56+00:00,3.08,boneskull,MEMBER,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2607,less @import syntax error error when running tests (webpack/mocha),"I am using Mocha to write tests for my application. Any time I try to test a component that uses a widget from the library react-widgets I am presented with the following error message:
<path_to_my_app>/app/node_modules/react-widgets/lib/less/react-widgets.less:1
(function (exports, require, module, __filename, __dirname) { 
@import ""./variables.less"";
                                                              
^

SyntaxError: Unexpected token ILLEGAL

I have the following loaders in my webpack.config.js:
loaders: [
      { test: /\.js$/, exclude: /(node_modules|bower_components)/, loader: 'babel' },
      { test: /\.json$/, loader: 'json' },
      { test: /\.css$/,  loader: 'style-loader!css-loader' },
      { test: /\.less$/, loader: 'style-loader!css-loader!less-loader' },
      { test: /\.gif$/, loader: 'url-loader?mimetype=image/png' },
      { test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/, loader: 'url-loader?limit=10000&minetype=application/font-woff' },
      { test: /\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/, loader: 'file-loader?name=[name].[ext]' },
      { test: require.resolve('trackjs'), loader: 'exports?trackJs'}
    ]

I get no such errors when actually running my application, simply when trying to test components that eventually reach this import.
I also found reports of a similar error logged here on the repo for webpack's less-loader however in that case, the users seem to experience the error in all cases, whereas I only experience the error in testing.",cdmcmahon,NONE,2016-11-28 15:01:16+00:00,True,2016-11-29 22:27:54+00:00,1.31,,4,5,2016-11-29 21:28:08+00:00,1.27,villesau,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2608,Hook failures do not print the full test title,"Is it intentional that the hook failure only include the immediate test title and not its full title include context? We have a lot of tests with different context names but the same it(""...."") name so it would be really helpful to see the full name with contexts in the hook failure at the summary of the test run at the end.",vegetabill,NONE,2016-11-29 18:14:41+00:00,True,2017-06-19 17:10:09+00:00,201.96,,3,2,2017-06-04 12:27:13+00:00,186.76,Elergy,CONTRIBUTOR,0,1,0,1,"['feature', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2609,skip the beforeEach for the particular it function,It would be better if we have function to skip the beforeEach for a particular it function,sugirthanr,NONE,2016-11-30 08:00:56+00:00,False,,,,3,1,2017-06-11 09:02:18+00:00,193.04,kunagpal,CONTRIBUTOR,0,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2610,Error: global leak detected: tvt,"I'm creating the issue after searching google for similar issue w/o any results.
Two issues here:


Each time this exception is raised somewhere else; meaning, test A can fail now - and after a refresh test B will fail with the exact same traceback.


There's nothing called tvt not via the API results which I'm testing or any JS script in the entire directory/files ... including the npm directories


It only happens in Chrome ( everytime ), Firefox/Safari - this exception never raised


Before ""ignoring"" this issue - I want to understand ""who"" is creating this variable
Error: global leak detected: tvt
    at Runner.checkGlobals (js/qa/mocha.js:4773:21)
    at Runner.<anonymous> (js/qa/mocha.js:4648:44)
    at Runner.EventEmitter.emit (js/qa/mocha.js:616:20)
    at js/qa/mocha.js:5077:14
    at done (js/qa/mocha.js:4518:5)
    at js/qa/mocha.js:4538:9
    at qa/api.js:77:13
    at p.callback (js/qa/superagent.min.js:1:9482)
    at p.<anonymous> (js/qa/superagent.min.js:1:6403)
    at p.n.emit (js/qa/superagent.min.js:1:4073)

And the row is:
it('test A', function(done) {
  ...... testing .....

   done();               <= this is where it raises the exception
}
it('test B', function(done) {
  ...... testing .....

   done();               <= this is where it raises the exception
}",arLevi,NONE,2016-11-30 10:01:05+00:00,True,2016-12-01 07:54:31+00:00,0.91,,3,3,2016-11-30 22:38:57+00:00,0.53,Slayer95,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2612,before block gets called after test suites,"If I run the following code, string 'before block' is logged to console only after both 'test suite 1' and 'test suite 2'. beforeEach, after and afterEach all work as intended
describe('before', () => {
  before(() => {
    console.log('before block\n');
  });

  it('should log after before block', () => {
    console.log('test suite 1\n');
  });

  it('should log after before block', () => {
    console.log('test suite 2\n');
  });
}
Mocha version 3.2.0",SergeyKhval,NONE,2016-12-01 14:42:17+00:00,True,2016-12-16 13:50:02+00:00,14.96,,2,2,2016-12-01 17:45:43+00:00,0.13,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2613,add yarn lockfile,"(prompted by this post)
In my naive testing, Mocha is installable via Yarn from a working copy (v0.17.10), and all tests pass under Node.js v7.2.0.  The next step will be to add it to Travis-CI & AppVeyor (assuming the latter has support).
I know of no reason why we shouldn't publish a yarn.lock file with the next release.",boneskull,MEMBER,2016-12-01 23:46:46+00:00,True,2017-06-03 04:47:43+00:00,183.21,,1,1,2017-06-03 04:47:43+00:00,183.21,boneskull,MEMBER,1,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2615,do not commit generated files to VCS,"When we added Bower support long ago (#584), it was implemented by committing the bundle (the root mocha.js) to VCS.
This, of course, is bad practice.
I have no numbers anywhere on how many people install Bower via Mocha, but it's probably enough to cause pain if we stop supporting it.
Instead, we can create a script that dumps the dist file(s) into another repository, a la AngularJS.  The dist file(s) would still be published to npm.
Practically speaking, whenever anybody runs the browser-based tests via Karma, we generate a new bundle so that karma-mocha uses Mocha to test itself.  That's inconvenient for contributors and causes confusion.

An alternative or supporting solution is to consume unpkg in some way.  I'm a little hesitant to depend on this service.  It's open-source, so we could run our own server, but $.",boneskull,MEMBER,2016-12-02 06:42:24+00:00,True,2017-10-01 06:16:06+00:00,302.98,v4.0.0,4,10,2016-12-13 21:37:59+00:00,11.62,ScottFreeCode,CONTRIBUTOR,2,2,0,0,"['browser', 'chore', 'semver-major']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
2617,create roadmap,It should reference the projects,boneskull,MEMBER,2016-12-02 08:06:02+00:00,False,,,,3,1,2017-10-30 06:01:03+00:00,331.91,brutalcrozt,NONE,0,0,0,1,"['chore', 'documentation']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2618,Audit missing feature documentation,"Cross-reference the site's docs with the actual features.

 Find missing features
 Find inaccurately documented features
 Find documented features that no longer exist

The deliverable is an enumeration of the above",boneskull,MEMBER,2016-12-02 08:09:36+00:00,False,,,,2,0,,,,,0,0,0,0,"['chore', 'documentation', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2619,identify areas that need more examples,"a good way might be to look at SO and see the most upvoted mocha-related questions.
another is the ""common mistake"" label in this repo.
deliverable is a proposed list of items to add examples for, then on to #2359.",boneskull,MEMBER,2016-12-02 08:22:11+00:00,False,,,,2,2,2016-12-02 08:22:55+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['chore', 'documentation', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2620,add coverage to CI; use a coverage service,"nyc is appropriate for Node.js coverage with all the process forking we need to do; karma-coverage probably fine for browser.
Coveralls.io is straightforward.  Code Climate is probably going to have more info.  Codacy is another one.  There are a ton of these things.  Anybody have a favorite?",boneskull,MEMBER,2016-12-02 08:41:03+00:00,True,2017-01-17 22:39:25+00:00,46.58,,3,2,2017-01-16 19:05:11+00:00,45.43,pgoldrbx,NONE,0,1,0,1,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2622,drop npm v1.x.x support,"Currently we support npm v1.4.0 and greater.  This will allow us to upgrade production dependencies (or dependencies thereof) which use carets in semver ranges.  It should also allow scoped packages.
I'm not sure exactly in what version of npm v2.x.x scoped packages were introduced.  I've asked @seldo if any data is available for npm v1.x.x usage.",boneskull,MEMBER,2016-12-02 21:06:23+00:00,True,2017-09-27 04:34:07+00:00,298.31,,1,3,2016-12-02 21:06:39+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['chore', 'security', 'semver-major']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True
2624,try beta trusty container on travis-ci,we'll need to revisit uploading artifacts to S3.,boneskull,MEMBER,2016-12-03 05:13:58+00:00,True,2016-12-03 08:34:30+00:00,0.14,,1,0,,,,,0,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2626,3.x: url encoded grep not properly unescaped,"HI,
Running 3.0.2, in browser tests grep argument
won t work properly with an url like http://localhost:3000/test/?grep=CustomAjaxTable+should+update+header+class+on+sortable+header+click
It will work if the spaces are not replaced by + sign,
http://localhost:3000/test/?grep=CustomAjaxTable should update header class on sortable header click
It s a bit of problem, my test need to manage url parameters, it uses the URL / URLSearchParams API (https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams), and it seems like to encode it in such way mocha won t follow up.
I gone through the changelog, look likes it was not fixed since the reported version.",mh-cbon,NONE,2016-12-03 16:13:34+00:00,True,2016-12-19 05:27:02+00:00,15.55,,2,1,2016-12-19 00:57:49+00:00,15.36,boneskull,MEMBER,1,0,0,0,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2627,I am unable to run my test cases as a normal user but all test cases are running if I run then as root or sudo.,"I am running my test cases on my machine running ubuntu 16.04 and mocha@3.2.0 but I am unable to run them as normal user but test cases are running ad root.
I am using node 7.2.0 and npm 4.0.3.
What might be the cause of this problem ?",RatanShreshtha,NONE,2016-12-05 07:35:25+00:00,True,2017-02-28 09:45:14+00:00,85.09,,3,9,2016-12-05 07:55:29+00:00,0.01,ORESoftware,NONE,1,0,0,2,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2628,Support configurable name for XUnit reporter,"The XUnit reporter produces an XML report that has a hard-coded name 'Mocha Tests'. In the XML this appears as: <testsuite name=""Mocha Tests"". When using mocha for various types of tests in the same CI build, it would be great to be able to specify this name to something more descriptive, e.g. ""Unit Tests"", ""Integration Tests"", etc.",ngeor,CONTRIBUTOR,2016-12-05 14:55:00+00:00,True,2017-09-28 18:16:30+00:00,297.14,,3,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2630,Error messages not appearing for syntax errors when using `--compiler` and `--watch`,"I'm using the ts-node to compile TypeScript tests as described in their README, however when there is a compilation error in a test file, no error message is displayed in watch mode (works fine with a single run). I've done some investigation and it appears the problem is two fold:

The mocha watcher catches the exception that is thrown by require, but only prints e.stack. The works because Node puts the error message into e.stack in addition to the stack trace.
ts-node only sets e.message instead of e.stack, so the error message is lost.

Would you accept a PR that changed the error printing logic to this?
if (e.stack) {
  console.log(e.stack);
} else {
  console.log(e.message);
}
This should preserve the existing behavior and allow error messages from ts-node to be displayed.",mylesmegyesi,NONE,2016-12-06 21:46:12+00:00,True,2016-12-16 20:01:55+00:00,9.93,,3,3,2016-12-08 18:45:19+00:00,1.87,KaidenR,NONE,0,0,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2631,Test suite oganisation,"I need to organise different test suites using mocha, but I ain't find the way to do that, need some help!
something like these:
    //main entry for testing stuff
    for (let p : testSuiteCollection) {
        runSuite(p);    
    }
thx in advance",PigeonT,NONE,2016-12-06 22:36:20+00:00,True,2017-01-30 21:21:04+00:00,54.95,,2,1,2017-01-30 21:21:04+00:00,54.95,Munter,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2632,Specify path pattern within mocha.opts,Is it possible to specify the file pattern within mocha.opts? I cant find a full-reference for the options supported within mocha.opts.,vekexasia,NONE,2016-12-07 16:06:40+00:00,True,2017-01-31 13:23:45+00:00,54.89,,3,2,2016-12-13 21:37:24+00:00,6.23,ScottFreeCode,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2633,An in-range update of eslint is breaking the build 🚨,"Version 3.12.1 of eslint just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      eslint
    
  
  
    
      Current Version
    
    
      3.12.0
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As eslint is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ continuous-integration/appveyor/branch Waiting for AppVeyor build to complete Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Release Notes
v3.12.1


0ad4d33 Fix: indent regression with function calls (fixes #7732, fixes #7733) (#7734) (Teddy Katz)

ab246dd Docs: Rules restricting globals/properties/syntax are linked together (#7743) (Kevin Partington)

df2f115 Docs: Add eslint-config-mdcs to JSCS Migration Guide (#7737) (Joshua Koo)

4b77333 Build: avoid creating broken rule links in the changelog (#7731) (Teddy Katz)



Commits
The new version differs by 6 commits .

9679daa 3.12.1
8a31bc8 Build: package.json and changelog update for 3.12.1
0ad4d33 Fix: indent regression with function calls (fixes #7732, fixes #7733) (#7734)
ab246dd Docs: Rules restricting globals/properties/syntax are linked together (#7743)
df2f115 Docs: Add eslint-config-mdcs to JSCS Migration Guide (#7737)
4b77333 Build: avoid creating broken rule links in the changelog (#7731)

See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2016-12-12 22:37:04+00:00,True,2017-01-30 08:26:34+00:00,48.41,,0,4,2016-12-12 22:58:29+00:00,0.01,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2634,Issues while naming tests containing [],"I'm using mocha package(v 3.2) for running my tests using Visual Studio tools for Nodejs extension for VS 2015(v 1.2) and I've observed that that if My test name contains [] chars, the test doesn't even enter the first line but returns prematurely and marking it as passed.
Like: it(""[nativeApi] tests"")
If I remove [] from the test name it works as expected.
This used to work several months back and not sure if this is an issue with the latest version of mocha.",rnagpal,NONE,2016-12-13 01:59:44+00:00,True,2017-11-01 05:05:09+00:00,323.13,,5,4,2016-12-13 07:25:08+00:00,0.23,ORESoftware,NONE,0,1,0,3,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2635,Windows: Unable to add dynamic content,"The error:
HTML1701: Unable to add dynamic content '<ul id=""mocha-stats""><li class=""progress""><canvas width=""40"" height=""40""></canvas></li><li class=""passes""><a href=""javascript:void(0);"">passes:</a> <em>0</em></li><li class=""failures""><a href=""javascript:void(0);"">failures:</a> <em>0</em></li><li class=""duration"">duration: <em>0</em>s</li></ul>'. A script attempted to inject dynamic content, or elements previously modified dynamically, that might be unsafe. For example, using the innerHTML property to add script or malformed HTML will generate this exception. Use the toStaticHTML method to filter dynamic content, or explicitly create elements and attributes with a method such as createElement.  For more information, see http://go.microsoft.com/fwlink/?LinkID=247104

The reason:
<ul id=\""mocha-stats\""><li class=\""progress\""><canvas width=\""40\"" height=\""40\""></canvas></li><li class=\""passes\""><a href=\""#\"">passes:</a> <em>0</em></li><li class=\""failures\""><a href=\""#\"">failures:</a> <em>0</em></li><li class=\""duration\"">duration: <em>0</em>s</li></ul>

has changed into
<ul id=""mocha-stats""><li class=""progress""><canvas width=""40"" height=""40""></canvas></li><li class=""passes""><a href=""javascript:void(0);"">passes:</a> <em>0</em></li><li class=""failures""><a href=""javascript:void(0);"">failures:</a> <em>0</em></li><li class=""duration"">duration: <em>0</em>s</li></ul>

Notice the href=""javascript:void(0);""
That particular piece of code, triggers the error above on Windows.
A simple removal of that (or an external binding made via an unique id attribute) can stop this problem for Windows users.
My temporary solution was to go to function fragment (html) { and update the code:
  var result = html.replace(/%([se])/g, function (_, type) {
    switch (type) {
      case 's': return String(args[i++]);
      case 'e': return escape(args[i++]);
      // no default
    }
  });

   div.innerHTML = window.toStaticHTML(result);

I could make a patch to go back to href=""#"".",serbanghita,NONE,2016-12-13 16:07:11+00:00,True,2016-12-13 22:03:52+00:00,0.25,,2,4,2016-12-13 21:36:37+00:00,0.23,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2637,"mocha --opts not in ""mocha --help""","--opts is an option for mocha to specify the location of mocha.opts, but this option is not in the list of ""mocha --help"" informations.",likegun,NONE,2016-12-14 07:04:07+00:00,True,2016-12-23 08:49:34+00:00,9.07,,2,1,2016-12-14 22:03:12+00:00,0.62,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2638,Run test from string code,"I want to run my mocha test from a string with code instead to use the addFile method. Is there some way to do this, without writing the code to a file first?",ToonvanStrijp,NONE,2016-12-14 09:14:45+00:00,True,2017-08-12 14:29:59+00:00,241.22,,4,6,2016-12-14 22:11:35+00:00,0.54,ScottFreeCode,CONTRIBUTOR,1,1,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2639,--compiler then --require does use compiler for the required file,"With a command containing
... --compilers js:babel-register --require test/helper.js
The helper.js file is loaded before babel is setup and hence fails with syntax errors.",memelet,NONE,2016-12-14 12:17:06+00:00,True,2016-12-15 17:32:44+00:00,1.22,,3,4,2016-12-14 22:04:29+00:00,0.41,ScottFreeCode,CONTRIBUTOR,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2640,unhandledRejection,"These should be handled automatically, as to reduce boilerplate. A common issue as a result of this is #1128.
process.on('unhandledRejection', (reason, promise) => throw promise);
For web browsers, we could use window.addEventListener.",stevenvachon,NONE,2016-12-17 18:49:44+00:00,False,,,,10,16,2017-05-04 03:01:41+00:00,137.34,ScottFreeCode,CONTRIBUTOR,2,2,0,5,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2643,async failed test doesn't display an assertion error when using promise,"code for example:
`
function fakePromise() {
  var promise = new Promise((res)=>{
    setTimeout(()=>{
      res();
    },100)
  })
  
  return promise;
}

it('should display assertion error', (done) => {
  var promsie = fakePromise();
  promsie.then(()=>{
    console.log('hi')
    expect(2).to.equal(1);
    done();
  })  
})

`",itayod,NONE,2016-12-20 15:59:52+00:00,True,2017-03-30 17:09:06+00:00,100.05,,3,4,2016-12-20 18:24:57+00:00,0.1,anthony-redFox,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2645,Cursor dissapears after CTRL-C in mocha --watch,"It seems mocha hides the cursor during the run but it forgots to enable it again when a SIGINT is sent...
In my script i had to do:
  process.on('SIGINT', function() {
    // show cursor
    console.log(""\x1B[?25h"");
    process.exit();
  });",mcortesi,NONE,2016-12-21 18:37:23+00:00,False,,,,8,8,2016-12-29 17:55:20+00:00,7.97,rzane,NONE,1,0,0,5,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2647,Progress on HTML reporter always 0% when delay,"When using the html reporter, and the root test suite is delayed, the progress is always 0% when completed.

using
<html>

<head>
  <meta charset=""utf-8"">
  <title>Progress on delay</title>
  <link href=""https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.css"" rel=""stylesheet"" />
</head>

<body>
  <div id=""mocha""></div>
  <script src=""https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.js""></script>
  <script src=""http://chaijs.com/chai.js""></script>
  <script>
    mocha.setup({
      delay: true,
      ui: 'bdd'
    });
    mocha.reporter('html');
    var expect = chai.expect;
  </script>
  <!-- Tests -->
  <script src=""tests.js""></script>
  <script>
    mocha.run();
  </script>
</body>

</html>
and the following tests.js
setTimeout(() => {
    describe('Window', () => {
      it('it has to exist', () => {
        expect(window).to.exist;
      });
    });
  run();
}, 3000);",chantalgo,NONE,2016-12-27 12:11:51+00:00,False,,,,5,3,2017-01-02 03:45:29+00:00,5.65,MarcusSorealheis,NONE,0,0,0,3,"['browser', 'confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2650,TypeError: #<CustomPromise> is not a promise,"class CustomPromise extends Promise {}

it('do something', () => {
 return new CustomPromise( accept => accept() );
});

Im subclassing Promise ... however mocha thinks its not a instance of promise.... any workaround?",milewski,NONE,2016-12-29 05:42:33+00:00,True,2018-10-11 09:37:29+00:00,651.16,,5,2,2017-06-28 15:51:06+00:00,181.42,ferm10n,NONE,0,0,0,2,['needs-review'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
2652,Empty xdescribes cause improper nesting of subsequent tests in output,"I have noticed some strange behavior when using xdescribe with no callbacks. If I use the default reporter and have an xdescribe with no callback before an it test, the xdescribe nests everything after it within itself. This also happens if there's a describe with implemented tests and at least one xdescribe inside it, followed by implemented tests.
Input
xdescribe('empty describe 1')
xdescribe('empty describe 2')
it('pending test 1')
it('pending test 2')

Output
  empty describe 1
    empty describe 2
      - pending test 1
      - pending test 2


  0 passing (0ms)
  2 pending

Environment

Node 7.3.0
Mocha 3.2.0",nickmccurdy,NONE,2017-01-02 09:30:33+00:00,True,2017-10-18 04:33:44+00:00,288.79,,3,2,2017-10-17 04:24:26+00:00,287.79,stale,NONE,0,0,0,2,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2655,ES6 import not working when using babel in Mocha.,"I based on official document using mocha --require babel-register to run my test code,but not working.
""mocha"": ""^2.5.3"",
""babel-register"": ""^6.18.0"",",huyaxiong,NONE,2017-01-03 08:30:49+00:00,True,2017-01-08 14:01:49+00:00,5.23,,11,15,2017-01-06 06:50:33+00:00,2.93,Rukeith,NONE,0,0,0,12,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2656,Idea: scoped globals,"Sometimes I write tests that modify a global in a beforeEach and cleanup restore the global in an afterEach. Right now this is a violation of the global variable leak detection. To get around this I allow modifications to explicit globals. However, it would be more ideal to allow global 'leaks' within the context of a suite. Something like this:
describe('My test suite', function () {
  // same argument type as http://mochajs.org/#globals-names
  this.allowGlobalLeaks('foo'); 
 
  beforeEach(function () {
    foo.bar = 5;
  });

  afterEach(function () {
     delete foo.bar;
  });
});

describe('My second suite', function () {
  beforeEach(function () {
    // this would be considered a global leak
    foo.bar = 5;
  });
});",alexreardon,NONE,2017-01-03 10:00:39+00:00,False,,,,5,3,2017-01-03 12:37:22+00:00,0.11,Munter,MEMBER,1,0,0,2,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2657,enhancement: new interface to support arrow functions,"Currently functions that use () => cannot take advantage of the mocha context: http://mochajs.org/#arrow-functions.
However, arrow function usage could be improved by passing the context as an argument:
it('should do something cool', (done, context) => {
  context.timeout = 5000;
  ...
});
The complicating factor is the done argument. The presence of which makes the test async. Perhaps if you want to use the context argument then you need to also call done when appropriate.",alexreardon,NONE,2017-01-03 10:13:46+00:00,False,,,,7,7,2017-01-03 12:40:31+00:00,0.1,Munter,MEMBER,3,0,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2658,An in-range update of browserify is breaking the build 🚨,"Version 13.2.0 of browserify just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      browserify
    
  
  
    
      Current Version
    
    
      13.1.1
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As browserify is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ continuous-integration/appveyor/branch Waiting for AppVeyor build to complete Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Commits
The new version differs by 6 commits .

1635157 13.2.0
d2392a4 Merge branch 'master' of https://github.com/laurynasl-wix/node-browserify
bf061d8 Allow configuring transformKey option for module-deps
9e3b11e Merge branch 'master' of https://github.com/Abhinay077/node-browserify
71240c2 Update package.json
5c87f47 Update package.json

See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-01-04 08:18:02+00:00,True,2017-05-24 05:34:00+00:00,139.89,,1,2,2017-01-04 08:30:38+00:00,0.01,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2661,cannot pass reporterOptions to progress reporter,"progress reporter reads values from options, but reporterOptions retrieved from args are passed in options.reporterOptions field.
submitted this pr (#2649) for the solution.",canoztokmak,CONTRIBUTOR,2017-01-06 09:00:57+00:00,True,2017-12-14 06:13:23+00:00,341.88,,3,1,2017-12-14 06:13:23+00:00,341.88,boneskull,MEMBER,1,0,0,0,"['confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2663,Inline diff code appears dead,"I searched around and found this:

useInlineDiffs is only used with --inline-diffs, and the option is never used anywhere.
exports.inlineDiffs from lib/reporters/base.js is never modified.

So, this basically equates to a bunch of visibly dead code.
Related: #2098",isiahmeadows,NONE,2017-01-10 04:44:21+00:00,True,2017-10-06 05:27:22+00:00,269.03,,4,3,2017-04-28 17:04:22+00:00,108.51,ScottFreeCode,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2664,"Sorry, misinformation, forget it","Sorry, misinformation, forget it...",lnshi,NONE,2017-01-10 10:15:13+00:00,True,2017-01-11 02:35:18+00:00,0.68,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2665,Document how to use --harmony* flags with _mocha,"I expect these flags to work because
➜ node_modules/.bin/_mocha --help               

  ...

  Options:

    ...
    --harmony<_classes,_generators,...>     all node --harmony* flags are available
However, as of
➜ node_modules/.bin/_mocha --version
3.2.0
I get
➜ node_modules/.bin/_mocha --harmony_async_await

  error: unknown option `--harmony_async_await'",BrandonZacharie,NONE,2017-01-11 23:23:36+00:00,False,,,,5,10,2017-01-11 23:46:58+00:00,0.02,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2666,Question: specifying compilers programmatically?,"I found this issue elsewhere online without answer but my specific use case is that I have at test runner similar to guybedford's guide for mocha and I'm unable to specify a compiler so that my tests can be written for my react app with full enzyme/jsx support.
The specific snippet I'm trying to work this into is here:
var Mocha = require('mocha');

SystemJS.import('./test.config.js')
.then(function() {
  var runner = new Mocha({
    ui: 'bdd',
    // this line is what will allow this runner to work in both the browser and Node
    reporter: typeof window != 'undefined' ? 'html' : 'spec'
  });

  // set up the global variables
  runner.suite.emit('pre-require', global, 'global-mocha-context', runner);

  return SystemJS.import('./test/app/components/index.js')
  .then(function(tests) {
    return new Promise((resolve, reject) => {
      runner.run((failures) => {
        if (failures)
          reject(failures);
        else
          resolve();
      });
    });
  });
})
.catch(console.error.bind(console));",buddyp450,NONE,2017-01-13 21:50:50+00:00,True,2017-10-14 04:46:02+00:00,273.29,,3,2,2017-06-02 03:55:06+00:00,139.25,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2667,An in-range update of karma is breaking the build 🚨,"Version 1.4.0 of karma just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      karma
    
  
  
    
      Current Version
    
    
      1.3.0
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As karma is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ continuous-integration/appveyor/branch Waiting for AppVeyor build to complete Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Release Notes
v1.4.0
Bug Fixes


browser: filter browser logging by level  (35965d9), closes #2228


cli: restore shell completion in the npm package (f56b5a5), closes #2351


config: add crossOriginAttribute config option (1e465b1)

middleware: update Buffer usage (3d94b8c)

reporter: do not allow URL domains to span new lines (2c13404)

reporter: strip only hostname/port (fbbeccf), closes #2209


reporters:  cannot read property map of undefined  (305df2c), closes #1662


server: exit with code 1 when failing due to missing browser (86e2ef2), closes #2403


Features


api: add constants to the public api (ee10977), closes #2361


api: expose config.parseConfig on the public api (7d2c1ae)

client: capture confirm & prompt  (3a618b3), closes #694


server: add listen address option so that IPv6 and loopback interfaces can be used (8e5bee6), closes #2477


web-server: allow overriding of default http module (1e7514d), closes #2424




Commits
The new version differs by 42 commits .

99d647b chore: release v1.4.0
c168b79 chore: update contributors
fbbeccf fix(reporter): strip only hostname/port
3a618b3 feat(client): capture confirm & prompt 
35965d9 fix(browser): filter browser logging by level 
305df2c fix(reporters):  cannot read property map of undefined 
79bc193 Merge pull request #2510 from karma-runner/greenkeeper-useragent-2.1.10
e89f092 Merge pull request #2527 from karma-runner/greenkeeper-qunitjs-2.1.1
85beac2 Merge pull request #2530 from karma-runner/greenkeeper-eslint-plugin-react-6.9.0
daeb31e Merge pull request #2531 from karma-runner/greenkeeper-grunt-auto-release-0.0.7
ea40f15 chore(package): update grunt-auto-release to version 0.0.7
495ab0c chore(package): update eslint-plugin-react to version 6.9.0
c20d004 chore(package): update qunitjs to version 2.1.1
13cefee Merge pull request #2503 from karma-runner/greenkeeper-eslint-3.12.1
c9a3a63 docs(config): add jsdom to the browser launchers list

There are 42 commits in total. See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-01-14 20:02:27+00:00,True,2017-05-24 05:34:00+00:00,129.4,,1,1,2017-01-14 20:19:11+00:00,0.01,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2673,An in-range update of nyc is breaking the build 🚨,"Version 10.1.0 of nyc just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      nyc
    
  
  
    
      Current Version
    
    
      10.0.0
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As nyc is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ continuous-integration/appveyor/branch Waiting for AppVeyor build to complete Details


❌ coverage/coveralls Coverage pending from Coveralls.io Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Commits
The new version differs by 14 commits .

8f7af3a chore(release): 10.1.0
8c58d68 fix: address edge-cases related to --all when instrumentation is disabled (#482)
8b58c05 feat: allow eager instantiation of instrumenter (#490)
d8d2de0 feat: upgrade to istanbul-lib-instrument with support for 'const foo = function () {}' name preservation. upgrade to istanbul-lib-hook with fix for ts-node. (#494)
7708235 chore: add test and docs for high and low watermarks (#493)
0a1d72a feat: reporting watermarks can now be set in nyc config stanza (#469)
1022b16 fix: pass configuration options to --check-coverage (#483)
7b4c090 chore(package): update tap to version 9.0.3 (#488)
093963b chore(release): 10.0.2
e01ec8c fix: upgrade to newer istanbul-lib-instrument, with fixes for inferred function names (#479)
2e39e00 chore(release): 10.0.1
e0ef1d5 fix: upgrade spawn-wrap and istanbul-lib-instrument (#477)
8603aa9 chore(package): update is-windows to version 1.0.0 (#466)
64ae4f3 chore(package): update standard-version to version 4.0.0 (#461)

See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-01-18 02:13:17+00:00,True,2017-05-24 05:34:00+00:00,126.14,,1,5,2017-01-18 02:31:28+00:00,0.01,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2679,describe.only inside describe.skip,"Hi:
A describe.only inside a describe.skip is taking precedence and preventing rest of tests from running.
Shouldn't describe.skip override any embedded modifier? I think it should.
Example:
file1.spec.js:
describe.skip('test1: this should not run at all', function() {
    describe.only('run only this', function() {
        it('should not run this', function(){
           expect(true).to.be.true;
        });
    });
});

file2.spec.js:
describe('test2: this should run if no other is marked as only', function() {
    describe('run this', function() {
        it('should run this', function(){
           expect(true).to.be.true;
        });
    });
});
Regards",alex-pollan,NONE,2017-01-22 11:13:16+00:00,True,2017-02-13 16:49:00+00:00,22.23,,2,4,2017-02-10 03:42:27+00:00,18.69,dennisbaskin,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2683,skip doesn't work for nested describes,"copied from my question on SO
I have some code below:
const assert = require('assert')

describe('server', function() {
  before(function() {
    // HACK: skip the tests in staging environment until we find to provide db in it
    if(process.env.NODE_ENV === 'staging') {
      this.skip();
    }
  });

  it('list request', function() {
    assert.fail('fails wo db')
  })
  describe('detail requests', function() {
    it('some arguments', function() {
      assert.fail('fails wo db')
    })
  })
})

When I run NODE_ENV='staging' npm test:
> @ test /Users/kharandz/Projects/mocha-bug
> mocha



  server
    - list request
    detail requests
      1) some arguments


  0 passing (10ms)
  1 pending
  1 failing

  1) server detail requests some arguments:
     AssertionError: 'fails wo db' undefined undefined
      at Context.<anonymous> (test/sample.spec.js:16:14)

But I expect that all the tests are skipped. So, the question:

How to achieve the expected behavior without copying before-code in every describe?
Is there any reason why it works like this?",kharandziuk,NONE,2017-01-23 15:08:48+00:00,True,2017-01-30 20:40:31+00:00,7.23,,6,10,2017-01-28 12:24:41+00:00,4.89,Munter,MEMBER,1,1,0,4,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2684,Run tests in definition order,"It'd be great if mocha would run tests in its definition order. Let's consider this example:
var assert = require('assert');
var runOrder = 1;

describe('Mocha test runner', () => {
  it('1st test', function () {
    assertRunOrder(1)
  });
  describe('inner suite', () => {
    it('2nd test', () => {
      assertRunOrder(2)
    });
  });
  it('3rd test', () => {
    assertRunOrder(3)
  });
});

function assertRunOrder(expectedRunOrder) {
  assert.equal(runOrder++, expectedRunOrder);
}
Actual test run order:

Mocha test runner > inner suite> 2nd test
Mocha test runner > 1st test
Mocha test runner > 3rd test

Expected test run order:

Mocha test runner > 1st test
Mocha test runner > inner suite> 2nd test
Mocha test runner > 3rd test",segrey,CONTRIBUTOR,2017-01-24 12:10:32+00:00,True,2018-10-12 14:47:52+00:00,626.11,,7,7,2017-01-27 11:13:30+00:00,2.96,albertogasparin,NONE,1,1,0,3,"['nice-to-have', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2685,Add an 'alone' modifier to 'it' and 'describe'.,"Hello!
My suggestion is to include a new modifier to it and describe that will force the test(s) to be run without any other tests in their scope running concurrently. The full behavior of this feature can be described as: Any test marked as alone will be run seperately from all other features in it's scope. The goal of this feature is to simplify the implementation of tests that depend on a single resource without confliction.
Consider the following scenario:
describe(""A process intensive resource test"", function() {
    let resource;
    before(function() {
        resource = createSomeExpensiveResource();
    });

    beforeEach(function() {
        resource.reset(); // reuse resource without recreating
    });

    it(""should be able to be set to 5"", function() {
        return resource.setValue(5)
            .then(() => resource.getValue())
            .should.eventually.be.eql(5);
    });

    it(""should be able to be set to 6"", function() {
        return resource.setValue(6)
            .then(() => resource.getValue())
            .should.eventually.be.eql(6);
    });
});
Currently, mocha will run the two tests concurrently causing them to write to the same resource before either finish, causing a race condition. Modifying the above situation to include this suggestion results in the following:
describe(""A process intensive resource test"", function() {
    let resource;
    before(function() {
        resource = createSomeExpensiveResource();
    });

    beforeEach(function() {
        resource.reset(); // reuse resource without recreating
    });

    it.alone(""should be able to be set to 5"", function() {
        return resource.setValue(5)
            .then(() => resource.getValue())
            .should.eventually.be.eql(5);
    });

    it.alone(""should be able to be set to 6"", function() {
        return resource.setValue(6)
            .then(() => resource.getValue())
            .should.eventually.be.eql(6);
    });
});
This would cause the tests marked as alone to run separately from any other tests in it's describe block.",Lindenk,NONE,2017-01-24 18:05:50+00:00,True,2017-01-31 18:48:43+00:00,7.03,,2,2,2017-01-28 04:01:23+00:00,3.41,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2686,An in-range update of coffee-script is breaking the build 🚨,"Version 1.12.3 of coffee-script just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      coffee-script
    
  
  
    
      Current Version
    
    
      1.12.2
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As coffee-script is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ continuous-integration/appveyor/branch Waiting for AppVeyor build to complete Details


❌ coverage/coveralls Coverage pending from Coveralls.io Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Commits
The new version differs by 23 commits .

635e207 Update release date for 1.12.3
e87d574 Merge pull request #4429 from GeoffreyBooth/1.12.3
b89dd04 Add other 1.12.3 updates to changelog
8ce7c30 Update generated docs for 1.12.3
45d0a7d Update browser compiler for 1.12.3
7291277 Bump version
6d27277 Update documentation for 1.12.3.
3108244 Fix stack trace (#4428)
d0ed2de Merge pull request #4420 from GeoffreyBooth/backport-2-doc-changes
a61429c Updated output
fbdfa65 Apply SVG fill color through CSS
02198eb Fix link to Try CoffeeScript
cd8be89 Trim the installation and usage sections; can backport to v1
b398c88 Fix releaseHeader for the initial release; should backport to v1
f4353fa Merge pull request #4417 from BrianRossmajer/patch-1

There are 23 commits in total. See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-01-24 18:06:03+00:00,True,2017-05-24 05:34:00+00:00,119.48,,1,3,2017-02-18 09:17:56+00:00,24.63,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2688,How to run a single test with Mocha,"I have the below test case.
describe(""Test 1"", function() {
        var data;
        function execute(data) {

        before('should create a review', function () {

            res = call.post(testConfig.APP_URL + testConfig.CREATE_REVIEW, JSON.parse(data));
            return expect(res).to.have.json(function(json)  {
            reviewid = json.reviewid;
           console.log(""API Response ----> "" + JSON.stringify(json));
           });
        });

        it('should return 201 in @success', function() {
            return expect(res).to.have.status(201);
        });
}
});

I run it using mocha -g 'Test 1' but I get the error.
/usr/local/lib/node_modules/mocha/lib/utils.js:652
        throw new Error(""cannot resolve path (or pattern) '"" + path + ""'"");
        ^


Error: cannot resolve path (or pattern) 'test'
    at Object.lookupFiles (/usr/local/lib/node_modules/mocha/lib/utils.js:652:15)
    at /usr/local/lib/node_modules/mocha/bin/_mocha:326:30
    at Array.forEach (native)
    at Object.<anonymous> (/usr/local/lib/node_modules/mocha/bin/_mocha:325:6)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:394:7)
    at startup (bootstrap_node.js:149:9)
    at bootstrap_node.js:509:3

Can anyone help please?
Thanks,
Kunal",ksachdeva11,NONE,2017-01-25 06:56:25+00:00,True,2017-02-08 11:34:30+00:00,14.19,,6,11,2017-01-26 20:14:06+00:00,1.55,jaysonpf,NONE,1,1,0,4,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2692,Mocha test for Socket.io not starting API? ,"I have a nodejs API project which I am testing with mocha and Chai. I am now trying to develop a socket.io aspect of my API. To test it I have the following test:
    var socket = require('socket.io-client')('http://localhost:3000/api/jobs');
    
    describe('Jobs Socket /api/jobs', function () {
        it('Should connect', function (done) {
            socket.on('connect', function () {
                done()
            });
        })
    })

However, the test times out. I am assuming that this is because my API isn't running in these tests. Despite having already developed quite a lot of REST end points, I haven't paid much attention as to how the API server is being run. I have a ../index.ts file which includes:
    var server = http.createServer(app);
    //var io = require('socket.io')(server);
    //server.listen(80);
    
    var io = require(""socket.io"").listen(server);
    new RealTimeJobs(io);

So this is how the socket it being created, so do I need to call this file somehow from my mocha test?",georgeedwards,NONE,2017-01-29 10:03:24+00:00,True,2017-01-31 14:30:41+00:00,2.19,,2,1,2017-01-30 20:45:02+00:00,1.45,Munter,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2694,Bluebird promises not completing with Mocha,"I have some code which makes use of promises, but it fails to run when run through Mocha. I have simplified it to the essentials:
process.env.NODE_ENV = 'test';

const Promise = require('bluebird');

console.log('zzzz IN');
Promise.resolve('xxx').then(function(val) {
    console.log('[normal]', val);
}).catch(function(error) {
    console.log('[error]', error);

})
console.log('zzzz OUT');

when run via  node test/index.js I get:
zzzz IN
zzzz OUT
[normal] xxx

but via mocha:
> my-server@0.0.1 test /Users/ajmas/Development/mocha-and-promise
> eslint lib && mocha --timeout 10000

zzzz IN
zzzz OUT


  0 passing (0ms)


Is this an issue in Mocha or in the way I have configured things?
Package.json:
{
    ""name"": ""my-server"",
    ""version"": ""0.0.1"",
    ""description"": ""Mocha and Promises test case"",
    ""main"": ""lib/main.js"",
    ""scripts"": {
        ""start-dev"": ""NODE_ENV=dev node test/index.js"",
        ""start-dev-debug"": ""DEBUG=express:* npm run start-dev"",
        ""start"": ""node lib/main.js"",
        ""test"": ""eslint lib && mocha --timeout 10000""
    },
    ""engines"": {
        ""node"": "">=6.7.0""
    },
    ""dependencies"": {
        ""bluebird"": ""^3.4.6""
    },
    ""devDependencies"": {
        ""chai"": ""^3.5.0"",
        ""chai-http"": ""^3.0.0"",
        ""eslint"": ""^3.8.1"",
        ""eslint-config-standard"": ""^6.2.1"",
        ""eslint-plugin-promise"": ""^3.3.0"",
        ""eslint-plugin-standard"": ""^2.0.1"",
        ""mocha"": ""^3.2.0""
    }
}

Also, running with node 6.7.0 on MacOS X 10.12.2
BTW this code is meant to be part of the application I am integration testing, because no promises  are completing, I can't launch the server from within Mocha.",ajmas,NONE,2017-01-30 20:48:32+00:00,True,2017-01-30 21:35:06+00:00,0.03,,1,1,2017-01-30 21:35:06+00:00,0.03,ajmas,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2702,To specify watching directories with mocha-cli,"refs: #1780 (comment)
When we use --watch, mocha watches cwd(and all files under it). So, how about to specify watching directories and just watch them?
example)
If I want to run test/**/*.spec.js when src/directory/ and lib/directory/ have changed, type this:
mocha --watch src/directory:lib/directory test/**/*.spec.js
I'm glad if someone considers about this.
Thanks.",ShiMeiWo,NONE,2017-02-06 04:51:46+00:00,False,,,,6,12,2017-02-10 03:27:02+00:00,3.94,dennisbaskin,NONE,0,0,0,5,"['confirmed-bug', 'documentation', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2706,mocha 3.2.0 throws error if it is running a spec more than once,"taken from https://cdnjs.com/libraries/mocha
> mocha.run();

everything ok!

> mocha.run()

TypeError: Cannot read property 'call' of undefined
    at r (https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.min.js:2:8563)
    at r.run (https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.min.js:2:9635)
    at n (https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.min.js:2:13371)
    at https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.min.js:2:13710
    at i (https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.min.js:1:572)",crishushu,NONE,2017-02-08 09:49:11+00:00,False,,,,12,19,2017-02-10 03:01:26+00:00,1.72,dennisbaskin,NONE,1,0,0,10,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2707,Feature Request - xit.only should be a noOp function,"Sometimes I want to start like this:
//a
it('...',function(){...});
//b
xit('...',function(){...pseudo test});
//c
xit('...',function(){...pseudo test});

But later come into moments like:
//a
it('...',function(){...});
//b
it.only('...',function(){...new test});
//c
xit('...',function(){...pseudo test});

and somehow (just ""because"") end up wanting to do this:
//a
it('...',function(){...});
//b
xit.only('...',function(){...new test});  //<- I want to silence this test - but it was easier to just hit `(home-key)` and `""x""` it out than it was to type out the `only` method.
//c
xit('...',function(){...pseudo test});

But I can't.  Totally trivial.  But I want it.  Can I make a PR?",wi-ski,NONE,2017-02-10 06:08:24+00:00,False,,,,2,1,2017-02-10 06:22:45+00:00,0.01,wi-ski,NONE,0,0,0,1,"['feature', 'pr-needs-work']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False
2709,Add this.fast(),In a similar idea to this.slow(); shouldn't there be an option to configure this.fast(); it seems the ms label disappears when a test takes less then 70ms it would be nice to configure this.,Burden50,NONE,2017-02-10 08:43:15+00:00,False,,,,5,4,2017-06-21 19:36:13+00:00,131.45,kunagpal,CONTRIBUTOR,0,2,0,2,"['feature', 'help wanted', 'needs-review', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False
2711,Mocha configuration with webpack 2 Tree Shaking,"With Webpack 2 we get a built-in tree-shaking feature. It demands to turn off modules transformation in babel (webpack right now understands native modules). Basically what has to be done in .babelrc:
""presets"": [[""es2015"", { ""modules"": false }]]

However, then mocha has problems with native modules. I added plugin to transform modules only for tests:
""env"": {
    ""test"": {
      ""plugins"": [
        [""babel-plugin-transform-es2015-modules-commonjs""]
      ]
    }
  }

Then I run my tests:
BABEL_ENV=test mocha --compilers js:babel-register

However, this still doesn't work:
{ import assert from 'assert';
SyntaxError: Unexpected token import

Is there any way to setup mocha with webpack 2 treeshaking mode ?",Olgagr,NONE,2017-02-12 08:58:30+00:00,True,2017-02-22 12:48:16+00:00,10.16,,5,7,2017-02-21 23:01:06+00:00,9.59,jeffijoe,NONE,1,0,0,4,"['faq', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2712,importing dependecy problem,"Hello.I have a node.js app which works correctly.When i try to run some tests that i have written
i get Class extends value undefined is not a function or null.When i try to run the tests via webstorm i get
'class TennisGame  extends Game.Game' that Game is an empty object.I'm using const Game = require(""./Game.js""); which works correctly on runtime(when i run via node the application).
What am i missing? Thanks!",tasoss,NONE,2017-02-14 13:55:21+00:00,True,2017-11-03 07:59:30+00:00,261.75,,4,2,2017-06-21 19:38:36+00:00,127.24,kunagpal,CONTRIBUTOR,0,1,0,1,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2713,Mocha exits with 0 exit code with failing tests,"Node: 7.2.1
Mocha: 3.2.0
MacOSX: Sierra (10.12.3)
Cmdline: mocha my_test.js
Seeing mocha exit with a 0 exit code after failing a test in an after each hook.  I traced it down to this code: 
  
    
      mocha/bin/_mocha
    
    
         Line 425
      in
      9ae6a85
    
    
    
    

        
          
           stream.write('', done); 
        
    
  


The function is called with the correct exit code, but then stream.write('', done); doesn't call the callback before the process terminates.",chrisleck,CONTRIBUTOR,2017-02-15 05:38:00+00:00,True,2017-05-24 16:09:57+00:00,98.44,,11,13,2017-02-15 05:40:58+00:00,0.0,chrisleck,CONTRIBUTOR,1,2,0,7,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2717,Spec reporter should display test file name,"When defining tests with a helper function (shared behaviours) the stack trace does not include the test file name. This makes it difficult to track down the failing test.
(Related: #1466)",lrowe,CONTRIBUTOR,2017-02-17 03:43:04+00:00,False,,,,3,1,2017-02-17 06:56:41+00:00,0.13,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['documentation', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2718,An in-range update of rimraf is breaking the build 🚨,"Version 2.6.0 of rimraf just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      rimraf
    
  
  
    
      Current Version
    
    
      2.5.4
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As rimraf is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ coverage/coveralls Coverage pending from Coveralls.io Details


✅ continuous-integration/appveyor/branch AppVeyor build succeeded Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Commits
The new version differs by 5 commits .

5b661e4 v2.6.0
c09915f update tap
d53235d Make rimraf.sync 10000% more reliable on Windows
e8b10a7 Retry on EBUSY et al on non-windows platforms as well
0fac5f7 Add --no-glob option to cli

See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-02-18 22:28:44+00:00,True,2017-05-24 05:34:00+00:00,94.3,,1,1,2017-02-24 05:59:03+00:00,5.31,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2719,"mocha.setup('bdd'),where does it from?","I've download a demo form the internet,and I found that there is a line mocha.setup('bdd');.
Why?
Does it belong to API of mocha?",zzzgit,NONE,2017-02-20 15:09:25+00:00,True,2017-02-26 01:16:01+00:00,5.42,,3,2,2017-02-26 01:16:01+00:00,5.42,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2720,Add support for --inspect-brk,Nodejs 7.6.0 has added the flag --inspect-brk as an alias for --inspect --debug-brk. Would it be possible to support it in mocha as well?,stropitek,NONE,2017-02-22 09:09:44+00:00,True,2017-04-21 16:00:52+00:00,58.29,,3,2,2017-04-21 16:00:52+00:00,58.29,dasilvacontin,CONTRIBUTOR,0,1,0,0,['help wanted'],False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2723,Stack errors,"Im getting a JS error in the base reporter when i try to run a test on an express route. This route responds with a 500 error as part of my test, and i get the following error in my console whenever a route doesn't return OK.
[app path]/node_modules/mocha/lib/reporters/base.js:223
    stack = stack.replace(/^/gm, '  ');
                 ^

in doing a console log in this file, i noticed that typeof stack is an object for me, instead of a string, which is why I think the .replace() is failing.
To provide more context, i'm using chai and supertest with mocha to run http tests on my api.
chai
	.request(server)
	.post('/v1/introductions')
	.set('Authorization', ""Bearer ""+token)
	.end(function(err, res) {
		// if not a 200, we see the JS stack error happen
		// all good if this passes
		res.should.have.status(200);
		done();
	});",mattfiocca,NONE,2017-02-25 23:41:11+00:00,True,2017-02-26 04:10:15+00:00,0.19,,3,5,2017-02-25 23:49:54+00:00,0.01,mattfiocca,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2724,Mocha Monthly newsletter,"From my chats with @boneskull @dasilvacontin @hollomancer, I get the impression that none of them have a lot of bandwidth right now to spend on Mocha. As someone who uses Mocha daily but has no idea on what's needed or would be most helpful, I'd love to see a monthly newsletter/email from Mocha that includes things like: new functionality/bug fixes in the last month (aka changelog), any new popular issues, new requests, areas where help is needed, etc. All of this with the uber-goal of engaging the community.
Since the core folks don't have enough bandwidth, what does the community think about using funds from Mocha's Open Collective to pay for a technical writer to draft and send out the update? I estimate that it'll cost around $150/month in the beginning. It's a few hours of work for someone to go through Github commits, issues, etc.
Please vote yay/nay via emojis.",asood123,NONE,2017-03-02 15:36:28+00:00,True,2019-05-20 08:18:15+00:00,808.7,,4,2,2017-03-02 15:51:43+00:00,0.01,boneskull,MEMBER,1,0,0,1,"['documentation', 'needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2726,behavior unhelpful for process kill default signal SIGTERM,"So, with Mocha's programmatic API basically broken for running multiple times, I have a process that is spawning the commandline Mocha to run multiple times on demand. Then there's also the ability to stop one of these instances on demand. Naturally, child-process's .kill method makes that easy, right?
Today I learned:

.kill() defaults to .kill('SIGTERM')
SIGTERM kills the mocha instance without affecting the _mocha instance that is actually running the tests. [SEE UPDATE...] Not only that, but it seemed like it exited with code 0 reporting no signal stopped it (but I'd have to double-check that, as I was experimenting trying to see if I could find an easy fix, so it's possible my experiments were causing that bit). [UPDATE: Ran a quick double-check, and it seems to exit with no exit code and signal SIGTERM; exiting with code 0 and no signal reported must have been what happened when I tried to get Mocha to handle SIGTERM (see below).]

(This came up on a Mac using Node 6. I could fairly easily put together an integration test to demonstrate the issue if we wanted to see what all environments it affects, I think...)
Obviously, this is easy to handle outside of Mocha: use .kill('SIGINT') instead of .kill(). But it was such counterintuitive and unhelpful default behavior, and considering that the alternative to spawn (the programmatic API) is known to be broken in some cases, that I'm somewhat surprised we don't appear to have any existing issues about it.
Anyway, does anyone know what it would take to fix this? I tried adding a SIGTERM handler and a process.on('exit' ... handler to the mocha file that runs _mocha, but couldn't really get clean results like for SIGINT -- but maybe I was doing something wrong. I just figure that it's probably not worth it if it's difficult, but would be very much worth it if it happens to be easy. I know we're also considering switching to a library that would handle the Node flag spawning mechanism for us (#2517); I would be interested in seeing what happens if we use that and send .kill() to a spawned Mocha process.",ScottFreeCode,CONTRIBUTOR,2017-03-04 04:54:10+00:00,False,,,,4,6,2017-03-04 07:41:14+00:00,0.12,ORESoftware,NONE,1,1,0,2,['semver-major'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
2729,Flag to detect `process.env` changes after tests,"To detect problems like this: #2711 (comment) Could we do something like the global leak detection, only for process.env's properties and concerned with changes in general rather than with additions?",ScottFreeCode,CONTRIBUTOR,2017-03-06 01:14:52+00:00,False,,,,3,2,2017-06-11 09:09:05+00:00,97.33,kunagpal,CONTRIBUTOR,0,2,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2730,Terminal indentation behaves not as expected,"I'd like to apologize beforehand if this has been described earlier, I just could not find any related solution either on SO or in the repositories issues.
I'm writing test for a small module and noted the output indentation of my tests is off:

While my tests are structured like this:
describe('Testing JS-HTTP', function() {
  it(...);

  describe('Helpers', function() {
    it(...); // 7x

    describe('Argument handling', function() {
      it(...); // 7x
    });
  });

  describe('HTTP methods', function() {
    it(...);

    describe('GET', function() {
      it(...); // 5x
    });
  });
});

While I already read that Promises could pose a problem, only the last section (GET) creates promises. I can neither explain the missing indentation, the single items being correctly indented, nor the line break before the last test.
What am I doing wrong? (Complete tests: http://pastebin.com/QgKdeZuk)",Radiergummi,NONE,2017-03-06 10:02:41+00:00,True,2017-03-06 10:07:55+00:00,0.0,,1,1,2017-03-06 10:07:55+00:00,0.0,Radiergummi,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2732,An in-range update of should is breaking the build 🚨,"Version 11.2.1 of should just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      should
    
  
  
    
      Current Version
    
    
      11.2.0
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As should is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ coverage/coveralls Coverage pending from Coveralls.io Details


✅ continuous-integration/appveyor/branch AppVeyor build succeeded Details


❌ continuous-integration/travis-ci/push The Travis CI build could not complete due to an error Details




Commits
The new version differs by 1 commits .

52b984f Fix .match(RegExp) for everything not supported

See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-03-09 10:25:34+00:00,True,2017-05-24 05:34:00+00:00,75.8,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2734,An in-range update of karma-phantomjs-launcher is breaking the build 🚨,"Version 1.0.3 of karma-phantomjs-launcher just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      karma-phantomjs-launcher
    
  
  
    
      Current Version
    
    
      1.0.2
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As karma-phantomjs-launcher is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪


Status Details


❌ coverage/coveralls Coverage pending from Coveralls.io Details


✅ continuous-integration/appveyor/branch AppVeyor build succeeded Details


❌ continuous-integration/travis-ci/push The Travis CI build failed Details




Commits
The new version differs by 5 commits .

00c3321 chore: release v1.0.3
c342607 chore: update contributors
db7ebc3 chore: add yarn.lock
fe013cd Merge pull request #131 from leightarasenko/master
482eba5 fix: path issue with phantomjs and phantomjs-prebuilt

See the full diff.


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-03-10 09:32:25+00:00,True,2017-05-24 05:34:00+00:00,74.83,,1,1,2017-03-10 15:11:10+00:00,0.24,greenkeeper,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2735,Add support for outputting nested stack traces from VError,"We are using VError to gather up nested traces which is something proving to be very useful with promises and generators (we can actually get complete stack traces that way). However the default reporting with Mocha only outputs the first error in the stack.
For example, with this code:
const VError = require('verror');

describe('Test', () => {
  it('Test', () => {
    function1();
  });
});

function function1() {
  try {
    function2();
  } catch (e) {
    throw new VError(e);
  }
}

function function2() {
  throw new Error('Something Bad');
}

You get the output:
 VError: : Something Bad
  at function1 (test\sandbox.js:13:11)
  at Context.it (test\sandbox.js:5:5)
  at Test.Runnable.run (node_modules\co-mocha\lib\co-mocha.js:43:16)

This doesn't actually tell me where the root error came from (in function2)
If I add a try...catch and then console.error(e) the top level error, I got a lot more detail:
{ VError: : Something Bad
    at function1 (C:\Work\NPS\nps-dev\test\sandbox.js:17:11)
    at Context.it (C:\Work\NPS\nps-dev\test\sandbox.js:6:7)
    at callFn (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runnable.js:343:21)
    at Test.Runnable.run (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runnable.js:335:7)
    at Test.Runnable.run (C:\Work\NPS\nps-dev\node_modules\co-mocha\lib\co-mocha.js:43:16)
    at Runner.runTest (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:444:10)
    at C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:550:12
    at next (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:361:14)
    at C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:371:7
    at next (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:295:14)
    at Immediate.<anonymous> (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:339:5)
    at runCallback (timers.js:649:20)
    at tryOnImmediate (timers.js:622:5)
    at processImmediate [as _immediateCallback] (timers.js:594:5)
  jse_shortmsg: '',
  jse_cause: 
   Error: Something Bad
       at function2 (C:\Work\NPS\nps-dev\test\sandbox.js:22:9)
       at function1 (C:\Work\NPS\nps-dev\test\sandbox.js:15:5)
       at Context.it (C:\Work\NPS\nps-dev\test\sandbox.js:6:7)
       at callFn (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runnable.js:343:21)
       at Test.Runnable.run (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runnable.js:335:7)
       at Test.Runnable.run (C:\Work\NPS\nps-dev\node_modules\co-mocha\lib\co-mocha.js:43:16)
       at Runner.runTest (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:444:10)
       at C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:550:12
       at next (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:361:14)
       at C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:371:7
       at next (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:295:14)
       at Immediate.<anonymous> (C:\Work\NPS\nps-dev\node_modules\mocha\lib\runner.js:339:5)
       at runCallback (timers.js:649:20)
       at tryOnImmediate (timers.js:622:5)
       at processImmediate [as _immediateCallback] (timers.js:594:5),
  jse_info: {},
  message: ': Something Bad' }

Of course, this is incredibly verbose but I would prefer this over less. I suspect this is because of the features that have been implemented that clean up the stack traces. I don't see why those couldn't run recursively and clean up all the nested stacks and output something more like this:
{ VError: : Something Bad
    at function1 (C:\Work\NPS\nps-dev\test\sandbox.js:17:11)
    at Context.it (C:\Work\NPS\nps-dev\test\sandbox.js:6:7)
    at Test.Runnable.run (C:\Work\NPS\nps-dev\node_modules\co-mocha\lib\co-mocha.js:43:16)
   Error: Something Bad
       at function2 (C:\Work\NPS\nps-dev\test\sandbox.js:22:9)
       at function1 (C:\Work\NPS\nps-dev\test\sandbox.js:15:5)
       at Context.it (C:\Work\NPS\nps-dev\test\sandbox.js:6:7)
       at Test.Runnable.run (C:\Work\NPS\nps-dev\node_modules\co-mocha\lib\co-mocha.js:43:16)

Now I can see the original exception in function2.",TazmanianDI,NONE,2017-03-13 18:12:26+00:00,False,,,,3,2,2019-01-18 19:09:56+00:00,676.04,andykais,NONE,0,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2736,Question: How to call specific test cases from one file to another file.,"Hi All,
I'm new to Mocha. I want to call Test case 2 from a.js file to b.js like import the test case because of same test cases repeatable in the b.js file. Example
File a.js :
describe('Sample a',function(){
it('Test case1',function(done){
console.log('Testing test case1');
});
it('Test case2',function(done){
console.log('Testing test case2');
});
it('Test case3',function(done){
console.log('Testing test case3');
});
});
File b.js:
describe('Sample b',function(){
it('Test case2',function(done){
console.log('Testing test case2');
});
});
I tried below approach, it took entire test cases in the js file.
exports.importTest = function(name, path) {
it(name, function() {
require(path);
});

};
Kindly provide the solution for this problem.
Thanks
VV",velanbabu,NONE,2017-03-14 02:23:12+00:00,True,2017-08-12 14:30:02+00:00,151.5,,2,1,2017-07-29 14:26:15+00:00,137.5,stale,NONE,0,0,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2737,Override describe and it behavior,"Hi, is it possible to override somehow the describe and it behavior?
I need to automatically keep the full test path in a global variable for my snapshot testing mechanism for mocha.
Currently I cannot find a way of how to override it.
this is the implementation that will be used:
const origDescribe = global.describe;
  global.describe = (name, impl) => {
    testName.push(name);
    try {
      origDescribe(name, impl);
    } catch (ex) {
      throw ex;
    } finally {
      testName.pop();
    }
  };
  const origIt = global.it;
  global.it = (name, impl) => {
    testName.push(name);
    try {
      origIt(name, impl);
    } catch (ex) {
      throw ex;
    } finally {
      testName.pop();
    }
  };",tomitrescak,NONE,2017-03-14 09:15:46+00:00,True,2017-03-16 22:10:37+00:00,2.54,,2,2,2017-03-16 18:09:16+00:00,2.37,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2738,"Getting error ""Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.""","I have something simple as this.
` it(""should call promise"", async (done) => {
    const testPromise = new Promise((resolve, reject) => {

        setTimeout(() => {

            resolve(""Hello World!"");

        }, 200);
    });


    const result = await testPromise;

    done();

}`
But I keep on getting the error "" Error: Resolution method is overspecified. Specify a callback or return a Promise; not both."".
If I take out done() then the test times out.
tsconfig.json
{ ""compilerOptions"": { ""module"": ""commonjs"", ""target"": ""ES6"", ""noImplicitAny"": false, ""types"": [""node"", ""mocha"",""supertest""], ""typeRoots"": [ ""./node_modules/@types"" ] } }
mocha.opts
--require ts-node/register  --reporter dot --watch-extensions tsx,ts  test/**/*.ts",fbarnard,NONE,2017-03-15 09:12:46+00:00,True,2017-03-16 16:31:01+00:00,1.3,,4,4,2017-03-15 11:50:42+00:00,0.11,fbarnard,NONE,0,1,0,3,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2740,Can't create more than 1 instance of Mocha programatically,"When I create 2 instances of mocha programatically, and run them, I can only get the first one to give me the actual results.
import Mocha from 'mocha';
import path from 'path';

const files = ['mixins/_BiDi', 'utils/utils'];

for (let i = 0; i < files.length; i++) {
  const mocha = new Mocha({});
  mocha.addFile(path.resolve(__dirname, files[i]));
  mocha.run(function() {});
}

When I run this code, only the tests for the first file are run, and I get 0 passing (0ms) for the second one.
I've tried setting the tests so that one mocha instance only runs after the previous one has finished, but the result is the same.
For this case in particular, adding both files to the same Mocha instance is not an option.",tigermarques,NONE,2017-03-15 17:53:11+00:00,False,,,,3,1,2017-10-17 04:24:24+00:00,215.44,stale,NONE,0,0,0,1,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2741,Ability to register a one-time 'after' hook from inside beforeEach() or it(),"I'd love it if there were some Mocha API that lets me add a hook to run whenever the current context's afterEach() would run, but only a single time (i.e. only for the current test).
There are two use cases for this:
1) Easy clean up one-off, test-specific bits of test state
A test like this, with a one-off bit of setup that needs cleanup, is dangerous since if it fails the cleanup won't happen and later tests could get broken:
it(""some test"", function () {
    sinon.stub(someGlobal, ""someAPI"");
    // ...test something...
    someGlobal.someAPI.restore();
});
Yet it's verbose to have to wrap a single test like this just because it's stubbing one extra API that the rest of the suite doesn't stub:  (and it gets in the way of grouping tests more semantically)
describe(""verifying someAPI"", function () {
    beforeEach(function () {
        sinon.stub(someGlobal, ""someAPI"");
    });
    afterEach(function () {
        someGlobal.someAPI.restore();
    });

    it(""some test"", function () {
        // ...rest of test body...
    });
});
It would be nice if the test could just register a one-off ""after this single runnable"" hook, like this -- functioning sort of like a catch block:
it(""some test"", function () {
    sinon.stub(someGlobal, ""someAPI"");
    afterThisTime(function () {
        someGlobal.someAPI.restore();
    });
    // ...test something...
});
(note that you couldn't use the existing afterEach() like this, since then it would run after every subsequent test in the suite too)
This is similar to some C++ unit-test patterns, where you have a local object tracking a certain stubbed/mocked thing, and when that variable goes out of scope at the end of the test its destructor automatically cleans up the stubbing/mocking.
2) Easier to write 'self-cleaning-up' utility functions
If the same thing were possible during a beforeEach() too, then instead of setup utilities that need manual cleanup, like this:
beforeEach(function () {
    // ...
    testUtils.disableAllAnalytics();
});
afterEach(function () {
    // ...
    testUtils.reenableAllAnalytics();
});
You could write a utility that automatically registers its own cleanup hook by calling the global ""afterThisTime"" API:
beforeEach(function () {
    // ...
    testUtils.temporarilyDisableAllAnalytics();
});
You can't do this either by calling today's afterEach() -- since beforeEach() is called once per test, it'll add an extra afterEach hook each time, causing the Nth test to run the cleanup code N times.  (You could get clever, e.g. passing this to the utility API so it can set a flag indicating whether it's attached its cleanup hook to the current test context or not, but that is messier and more verbose).",peterflynn,NONE,2017-03-15 21:23:17+00:00,False,,,,3,1,2017-03-16 16:57:00+00:00,0.82,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2742,Hope that --require option support requiring local module,"When I'm trying to require some modules with mocha.opts like below
--require should
--require ../Utils/Logger
--recursive

I get the error in the stderr:
Error: Cannot find module '../Utils/Logger'
    at Function.Module._resolveFilename (module.js:469:15)
    at Function.Module._load (module.js:417:25)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at E:\WebstormProjects\activity-system\node_modules\mocha\bin\_mocha:345:3

Why not try to support the user to require a local module not only a module from node_modules?",xingxingted,NONE,2017-03-16 12:14:43+00:00,True,2017-08-12 14:30:03+00:00,149.09,,4,5,2017-03-16 17:03:06+00:00,0.2,ScottFreeCode,CONTRIBUTOR,0,1,0,3,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2743,Context Variables and Functions,"Here's a proposal for how we can add contextual variables and functions to make context blocks more useful and reduce redundancy when the same variable or function is needed within several nested contexts.
(Related to #2656, but solving the same problem by exposing functionality that avoids the pitfalls of global usage)
In Ruby:
In Ruby's RSpec, it is a very common (recommended) pattern to reduce code redundancy by extracting before-each blocks that would be repeated in sub-contexts and setting relevant variables within each of the relevant contexts to account for any minor differences:
describe ""getUsers"" do
  # a contrived example as this block doesn't constitute much redundant code, but...
  before(:each) { create_list(userCount, :users) } 
  let(:userCount) { 1 }

  it ""returns the right user fields"" { ... }

  context ""when there are 10 users"" do
    let(:userCount) { 10 }
    it ""returns a first page of 5 users"" { ... }
  end
end
The let function above is taking a block (function definition) and running it once per test, storing the result, and upon additional requests, returning the stored result (basically creating a singleton function out of the provided block) in order to:

optimize for efficiency (avoid running the block more than necessary) and
isolate the values from mutation by other contexts

The defined functions are available to all child contexts, but can be overridden by any child context, (as shown above) so that they can minimize redundancy in cases where the same value is valid for multiple contexts.
In Mocha:
Almost the same thing can easily be accomplished currently by assigning an arrow function to a property of thix.ctx within the scope of a context block, and then accessing that function with this.currentText.ctx within a beforeEach or it block.  This works because ctx is ""cloned"" (technically child contexts are created using the parent's context as a prototype), passing all properties to the child, and allowing them to be overridden without affecting the parent context:
describe(""getUsers"", function() {
  beforeEach(function() { factory.createList(this.currentTest.ctx.userCount(), 'user') });
  this.ctx.userCount = () => 1;

  it(""returns the right user fields"", function() { ... });

  context(""when there are 10 users"", function() {
    this.ctx.userCount = () => 10;
    it(""returns a first page of 5 users"", function() { ... });
  });

  it(""still has userCount 1 here"", function() {
    expect(this.currentTest.ctx.userCount()).to.equal(1);
  });
});
The differences are that:

It's more cumbersome, for lack of syntactic sugar
It uses an internal object (this.ctx) that it probably shouldn't be using without an exposed API
It's not converted to a singleton function

Proposal
I propose making a variable called something like scope available in the context block, which would allow the assigning of arrow functions, and in an actual test/before block, make a variable with the same name available, which has, as properties all the previously assigned functions as singleton functions, i.e.:
describe(""getUsers"", function() {
  beforeEach(function() { factory.createList(scope.userCount(), 'user') });
  scope.userCount = () => 1;

  it(""returns the right user fields"", function() { ... });

  context(""when there are 10 users"", function() {
    scope.userCount = () => 10;
    it(""returns a first page of 5 users"", function() { ... });
  });

  it(""still has userCount 1 here"", function() {
    expect(scope.userCount()).to.equal(1);
  });
});
Alternately, the scope available in a context block could be a function, so that you would set a scoped variable like this (which might make implementation easier?):
scope('userCount', () => 1);",mltsy,NONE,2017-03-16 15:41:02+00:00,False,,,,4,22,2017-03-22 20:14:21+00:00,6.19,mltsy,NONE,0,1,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2744, Cannot set property 'onchange' of null,"I got some code like this
index.js
export function makeEl(){
  console.log('mama')
}
window.onload = function(){
	document.querySelector('#upload').onchange = function() {
		console.log('a')
	}

}

home.spec.js
import {makeEl} from '../app/index'

describe('makeEl', () => {
	it('should create an element', () => {
	
	})
})

when I run npm run test. I got this error in chrome's console",craigcosmo,NONE,2017-03-17 15:22:17+00:00,True,2017-08-12 14:30:04+00:00,147.96,,3,2,2017-03-18 02:27:47+00:00,0.46,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2745,`mocha -h` doesn't always display help,"Pretty straightforward testcase:
zarel@Phenylalanine ~> mocha -h

  Usage: mocha [debug] [options] [files]

  [...]

zarel@Phenylalanine ~> mkdir test
zarel@Phenylalanine ~> echo ""test"" > test/mocha.opts
zarel@Phenylalanine ~> mocha -h
No test files found

In other words, if test/mocha.opts exists, mocha -h won't display help.",Zarel,CONTRIBUTOR,2017-03-17 17:49:50+00:00,True,2017-10-18 03:48:39+00:00,214.42,,2,2,2017-10-17 04:24:23+00:00,213.44,stale,NONE,0,1,0,1,"['confirmed-bug', 'pr-needs-work']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
2748,mocha test files from memory,"any chance, that mocha is able to run tests from files, that are stored in memory-fs 'filesystem' ?
Somethig like this:
const MemoryFS = require(""memory-fs"");
const webpack = require(""webpack"");
const Mocha = require('mocha');
const config = require('webpack.config.js');

// use webpack to compile tests written in typescript and store outputs in memory
const fs = new MemoryFS();
const compiler = webpack(config);
compiler.outputFileSystem = fs;
compiler.run(function (err) {
    if (!err) {
        // run tests in compiled files
        const mocha = new Mocha();
        // mocha.useFs(fs); - specify source 'filesystem'
        mocha.addFile('test.js')
        mocha.run(function (failures) {
            ...
        });
    }
});",CzBuCHi,NONE,2017-03-24 09:04:43+00:00,True,2017-05-31 07:18:55+00:00,67.93,,5,6,2017-03-25 04:54:43+00:00,0.83,ScottFreeCode,CONTRIBUTOR,0,2,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2749,Promise does not work in combination with native addon,"I wrote a demo application where mocha Promises do not work in combination with native node modules: https://github.com/hollei/nodejs-native-async-callback
The native addon just calls asynchronously a calback function. The mocha test just waits for the callback. If I use a Promise to wait for the callback, mocha test failes with a timeout.
See the Readme.md in the test project how to build and run the test.",hollei,NONE,2017-03-24 13:33:23+00:00,True,2017-11-01 05:05:07+00:00,221.65,,4,2,2017-03-25 00:13:12+00:00,0.44,isortegah,NONE,0,0,0,2,"['stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2750,afterEach cleanup running is late,"When I using mocha to test code with printing I need to mock it in the beforeEach and restore the original printing in the afterEach hook. But in mocha the afterEach hook is running after the pass and the end test emitted to the reporters meaning the printing of the pass check or the fail check is printed into my mock function.
As an exmple code:
'use strict';

describe('Hello World', function () {

    beforeEach(function () {
        this.originalConsoleLog = console.log;

        console.log = text => {
            this.loggedText = text;
        };
    });

    afterEach(function () {
        console.log = this.originalConsoleLog;
    });

    it('passing test', function () {
        console.log('hello world !!');

        if (this.loggedText !== 'hello world !!') {
            throw new Error('Did not print hello world');
        }
    });

    it('failing test', function () {
        console.log('Hello');

        if (this.loggedText !== 'hello world !!') {
            throw new Error('Did not print hello world');
        }
    });
});

When running this with no flags the output is:
  Hello World


  1 passing (8ms)
  1 failing

  1) Hello World failing test:
     Error: Did not print hello world
      at Context.<anonymous> (test.spec.js:29:19)

I would have expected that the output would be like this:
  Hello World
    ✓ passing test
    1) failing test

  1 passing (8ms)
  1 failing

  1) Hello World failing test:
     Error: Did not print hello world
      at Context.<anonymous> (test.spec.js:29:19)",roy-codefresh,NONE,2017-03-24 15:14:48+00:00,False,,,,5,6,2017-03-25 06:31:20+00:00,0.64,ScottFreeCode,CONTRIBUTOR,1,1,0,2,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2751,Mocha.utils.stringify() hangs on recursive data structures,"I'm using Chai, and often use assert.deepEqual() to make sure that one object is equal to another. This works as expected, but to print out the diff, Chai uses Mocha.utils.stringify(). When there are recursive objects involved, however, the whole tests fails at this point, so I've had to use this fix in my tests:
const util = require('util');
Mocha.utils.stringify = value => util.inspect(value, {depth: 5});

That prevents the test from hanging, but doesn't always work as well as Mocha's stringify function.
As an example of a test that would hang, consider:
it('should fail', () => {
  const a = {};
  const b = {a};
  a.b = b;
  assert.deepEqual(b, {});  // Expected to fail, but instead the whole test suite hangs.
});",vaskevich,NONE,2017-03-24 21:43:25+00:00,True,2017-03-28 21:18:51+00:00,3.98,,2,2,2017-03-25 06:03:49+00:00,0.35,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2752,"""commander.opts"" function gets overwritten with string ""test/mocha.opts"" in grunt-mocha-istanbul","I did file an issue against grunt-mocha-istanbul and was able to find a workaround for it: pocesar/grunt-mocha-istanbul#67
However, the purpose of this issue is to see if there's a legitimate fix on this side.
Environment:

Node: 4.7.3
NPM: 3.10.10
OS: macOS Sierra 10.12.3
Mocha: 3.2.0

Steps to reproduce:

Download and unzip sandbox3.zip
Run npm install && npm test

Observed behavior:
Running ""mocha_istanbul:coverage"" (mocha_istanbul) task


  commander
    1) exposes extension functions


  0 passing (9ms)
  1 failing

  1) commander exposes extension functions:
     AssertionError: expected 'test/mocha.opts' to be a function
    expected 'test/mocha.opts' to have type function
        expected 'string' to be 'function'
      at Assertion.fail (node_modules/should/cjs/should.js:258:17)
      at Assertion.Object.defineProperty.value [as Function] (node_modules/should/cjs/should.js:335:19)
      at Context.<anonymous> (commander_test.js:9:463)

Notes:

If we run our unit test with mocha@3.2.0 as a standalone, then our assertion passes.
If we run the above sample attachment with mocha@2.5.3, then our assertion passes.
If we run the above sample attachment with any mocha version starting at 3.0.0 and higher, then we get the above error.
Here is the workaround specified in pocesar/grunt-mocha-istanbul#67:

var program = null,
      should = require('should');

describe('commander', function () {
	before(function () {
		delete require.cache[require.resolve('commander')];
		program = require('commander');
	});

	it('exposes extension functions', function () {
		program.parse.should.be.a.Function();
		program.opts.should.be.a.Function();
	});
});",wluu,NONE,2017-03-25 00:24:52+00:00,True,2017-08-12 14:30:06+00:00,140.59,,3,4,2017-03-25 01:52:22+00:00,0.06,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['needs-upstream-fix', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2753,unable to listen to start event during programmatic run,"The 'start' event is emitted synchronously downstream of the mocha.run method. Thus, if you are attaching a listener to that event after calling mocha.run (to get the runner instance), you miss the event:
var runner = mocha.run(function (failures) {
  process.on('exit', function () {
    process.exit(failures);  // exit with non-zero status if there were failures
  });
});
runner.on('start', function (Evt) {
  //never called
});
Maybe there is some other way to attach event listeners to the runner prior to calling run, but I haven't found it yet.",grawk,NONE,2017-03-27 04:02:47+00:00,False,,,,6,4,2017-05-30 21:39:20+00:00,64.73,kunagpal,CONTRIBUTOR,1,2,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2755,"Decouple the ""root"" property on Suite from title length.","Right now, Mocha deems a Suite to be a root if the title for it is empty, as can be seen here:
function Suite (title, parentContext) {
  if (!utils.isString(title)) {
    throw new Error('Suite `title` should be a ""string"" but ""' + typeof title + '"" was given instead.');
  }
  this.title = title;
  // skipping non-pertinent stuff...
  this.root = !title;

Mocha creates a first Suite with '' for title, which marks that suite as the root suite. This is a problem because, it seems to me when the user uses an empty string to name a suite, this should not result in Mocha building a structurally deficient tree of tests. (A tree with two ""root"" suites.)
Being able to name suites with the empty string (without at the same time marking them as ""root"") is useful. Sometimes I have suites where testing what is logically a single piece of functionality is best done by dividing the tests into two groups: simple tests that can be performed with super fast setup code, more complex tests that need a costlier setup. Oh, I could use the setup code for the 2nd group for all tests, but that would increase the total run time. I end up with something like:
// Testing the method foo on class Bar.
describe(""#foo"", () => {
  describe("""", () => { 
    beforeEach(() => {
       // create a trivial data structure that is quick to create and sufficient for the tests in this group.
    });

    // tests...
  });

  describe("""", () => { 
    beforeEach(() => {
       // create a complex structure that is costlier to create but needed for these tests.
    }); 

    // tests...
  });
});

The fact that the suite uses different setups for the two groups of tests is an internal detail that is not useful to know in test reports. The need for different test setups does not always correlate with divisions that are meaningful from the point of view of reporting successes or failures. It often does, but not always.
So I would suggest that the code be changed to determine the value of root through some other test than the length of the suite's title. There could be a unique object that serves as a marker to indicate ""this suite I'm building is a root suite"". It could be ""statically"" added to Suite (e.g. Suite.Root so doing new Suite(Suite.Root, ...) would result in a root suite).
Ultimately, though, the root property seems redundant to me: a Suite which has no parent is a root suite, no? So ""root""-ness should correlate with the absence of a set parent. But maybe there's some scenario I'm missing? At any rate, removing root cannot be done without breakage. The karma-mocha plugin, for instance, relies on it to produce reports (which is how I discovered the problem).",lddubeau,NONE,2017-03-29 17:46:36+00:00,True,2019-01-16 06:41:35+00:00,657.54,,3,0,,,,,0,0,0,0,"['feature', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
2756,run browsers tests in child process and feed TAP output to parent process,"I am missing some know-how here - I am looking for a way to run Mocha tests running in the browser in child processes.
Is this possible? How do people run their front-end unit tests and collect the results in an automated way?",ORESoftware,NONE,2017-03-30 17:34:51+00:00,True,2017-11-02 08:34:48+00:00,216.62,,4,5,2017-03-30 20:27:52+00:00,0.12,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2757,Required problem : when I try require same file ,"--- test.js
var authBlackListService = require(path.resolve('api/services/auth/blacklist'));
var authPoliceService = require(path.resolve('api/services/auth/police'));

---api/services/auth/police
 var authBlackListService = require(path.resolve('api/services/auth/blacklist')); 

Running Result:
Uncaught TypeError: authBlackListService.add is not a function
      at async.auto.addBlackList (api/services/auth/police/index.js:125:32) 

I don't know why the error has occurred. so I changed blacklist => blackList like below code
--- test.js
var authBlackListService = require(path.resolve('api/services/auth/blackList'));
var authPoliceService = require(path.resolve('api/services/auth/police'));

It's working now... I don't understand why ... anybody can explain about it ?",love8587,NONE,2017-04-03 10:56:12+00:00,True,2017-04-03 15:09:19+00:00,0.18,,2,4,2017-04-03 13:31:16+00:00,0.11,drazisil,NONE,0,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2758,expect().to.have.all.members on equivalent arrays throws assertion error,"As a quick disclaimer, I just began using Mocha today and I may be misunderstanding something - but currently I'm convinced this is a bug.
I have the following assertion:
expect([false,0,"""",null,undefined,NaN,""positive"",""negative""]).to.have.all.members(
    [false,0,"""",null,undefined,NaN,""positive"",""negative""]
);

This raises an assertion error.
AssertionError: expected [ Array(8) ] to have the same members as [ Array(8) ]

I believe this is a bug because the following did not raise an assertion error:
expect(['a','b','c','d','e','f','1','-1']).to.have.all.members(
    ['a','b','c','d','e','f','1','-1']
);",KernelDeimos,NONE,2017-04-04 04:02:18+00:00,True,2017-04-04 04:47:56+00:00,0.03,,2,4,2017-04-04 04:08:59+00:00,0.0,KernelDeimos,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2760,`it` not called when setting up tests through code.,"I am using the below code to kick off the tests.
export default function() {
    var mocha = new Mocha({timeout: 100000, reporter: 'spec'});
    var testDir = 'test'
    mocha.reporter('progress');

    // Add each .js file to the mocha instance
    fs.readdirSync(testDir).filter(function(file){
        // Only keep the .js files
        return file.substr(-3) === '.js';
    }).forEach(function(file){
        mocha.addFile(
            path.join(testDir, file)
        );
    });
    // mocha.reporter('list').ui('tdd').run();

    // Run the tests.
    mocha.run(function(failures) {
      process.on('exit', function () {
        process.exit(failures);  // exit with non-zero status if there were failures
      });
    });
}

The above code doesn't run the test inside the it block.
For e.g:
describe('Array', function() {
  it('#indexOf()', function() {
  		console.log(""works"")
      assert.equal(-1, [1,2,3].indexOf(4));
  });
});

The it block doesn't work. But if i replace the it block with describe, then it works fine.
For e.g:
describe('Array', function() {
  describe('#indexOf()', function() {
  		console.log(""works"")
      assert.equal(-1, [1,2,3].indexOf(4));
  });
});

But, if i run the above tests through command line, everything works fine.
Please advice.
Thanks.",amol-c,NONE,2017-04-06 16:01:38+00:00,True,2017-11-01 04:05:08+00:00,208.5,,3,3,2017-04-06 16:57:40+00:00,0.04,amol-c,NONE,0,1,0,2,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2761,How to prevent console clears when using --reporter min (-R min),"Right now I get lots of clears in my console when using the --reporter min flag. This is not desired because I am running tests as part of a gulpfile that does watching / transpiling / linting etc. The console clears really obfuscate some of the other important info that I get.
Is there any way to stop the console clears? I perused the mochajs homepage and couldn't find a way.
Thanks!",erikmellum,NONE,2017-04-07 19:24:32+00:00,True,2017-10-28 20:56:53+00:00,204.06,,3,3,2017-04-07 19:26:34+00:00,0.0,erikmellum,NONE,0,0,0,3,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2762,Add ability to run Mocha in debug mode from programmatic API,"Adding the ability to run Mocha in debug mode through the programmatic interface would be very helpful for testing suites that use Mocha internally, but do not run it as a subprocess and, thus, do not have access to many of the command-line parameters (ex: Truffle).
If there is currently a way to do this that I am unaware of, please advise.",travs,NONE,2017-04-08 16:02:18+00:00,True,2017-08-26 14:14:36+00:00,139.93,,5,4,2017-04-09 12:23:14+00:00,0.85,ScottFreeCode,CONTRIBUTOR,0,1,0,3,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2763,feature: better watch,"Hey,
I came up for a fast and efficient way to watch all dependencies for changes for my package autodev. I think this would be very suitable for mocha.
Here is the core extracted:
# save already loaded modules as they don't need to get watched
unwatchedModules = []
for k,v of require.cache
  unwatchedModules.push k

watcher = null
busy = false

runTests = () =>
 # statemanagement if many files change in short time
 busy = true
 
 ### run the tests ###
 
 # get real dependencies of the tests
 filesToWatch = []
 for k,v of require.cache
  if unwatchedModules.indexOf(k) < 0
   filesToWatch.push k

  # use e.g. chokidar to watch all deps
  unless watcher?
    watcher = chokidar.watch filesToWatch, ignoreInitial: true
    .on ""all"", (e,filepath) =>
      # needs to clear cache recursivly
      # https://github.com/paulpflug/recursive-uncache
      uncache(filepath,__filename)
      unless busy
        runTests()
  else
    watcher.add filesToWatch # chokidar handles double entries
  busy = false
This works out of the box for coffeescript and json dependencies, zero-config.
Even local npm link dependencies getting watched this way - very helpful
If this pleases, this could get put behind a --auto-watch flag to prevent breaking stuff.
Update:
I implemented a quick and dirty wrapper: mocha-watch
relevant part",paulpflug,NONE,2017-04-10 21:50:27+00:00,False,,,,2,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2764,Faster way to evaluate network,"Is there any faster way to evaluate a net, other than defining a new data layer, creating a new network, than forwarding the network and reading the outputs on the final layer? It currently takes about 2 seconds for a rather small network. Not including the back end.  Thanks.",dryden3,NONE,2017-04-11 01:10:28+00:00,True,2017-08-26 14:14:38+00:00,137.54,,2,1,2017-08-12 13:30:06+00:00,123.51,stale,NONE,0,0,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2765,Option to disable globals,"I don't want anything mocha-related defined on global. I understand that not everyone cares to explicitly have everything required/imported, but I do, so it can be optional.",stevenvachon,NONE,2017-04-11 23:27:43+00:00,True,2017-10-06 05:08:57+00:00,177.24,,5,14,2017-04-12 01:09:31+00:00,0.07,ORESoftware,NONE,1,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2766,Mocha not throwing error when undefined pass as callback on describe,"I am using mocha 3.0.2 with karma 1.3.0
This is my code
import { notExists } from './module' 
describe('.....', notExists)

Mocha not throwing error and my coverage increase..",Altiano,NONE,2017-04-13 05:09:05+00:00,True,2017-10-14 22:01:24+00:00,184.7,,3,2,2017-06-02 21:09:56+00:00,50.67,Elergy,CONTRIBUTOR,0,1,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2767,New syntax suggestion ,"Now that we have native async-await in node (soon to be in the LTS version)
we don't need so many blocks
maybe we can have a new syntax for e.g:
describe('Test Something',  async () => { // the new syntax will be used only if the function is async
  // initializing can be done here like the before() block
  const paramA = 'test';
  const asyncParam = await getAsyncParam();
  // the await ensure that the tests will be executed after all this is ready

  beforeEach(async () => {
    // set up whatever
  })

  afterEach(""runs after every test"", function() {
    // clean up what `beforeEach` set up
  })

lt('lt description, let mocha know a new test started, it will also run beforeEach ');

  // do some testing, you can use await
  // no need for a block because we have await syntax
  // if no error was thrown, the above lt was passed

lt('second lt description, let mocha know that the previous test is complete and  run afterEach => beforeEach');

  // do some more testing, you can use await
  // if an error occurred here the describe block will catch it
  // the describe will assign the error to the last lt that was executed

  end()

  //after block

});",shai32,NONE,2017-04-13 06:24:06+00:00,True,2017-12-07 01:43:03+00:00,237.8,,4,4,2017-04-14 19:24:14+00:00,1.54,ScottFreeCode,CONTRIBUTOR,1,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2768,TypeError: Cannot read property 'currentRetry' of undefined,"Running node_modules/mocha/bin/mocha -w ""test/**/*.js"" I saw.
/app/node_modules/mocha/lib/runner.js:553
          var retry = test.currentRetry();
                          ^

TypeError: Cannot read property 'currentRetry' of undefined
    at /app/node_modules/mocha/lib/runner.js:553:27
    at done (/app/node_modules/mocha/lib/runnable.js:295:5)
    at Test.<anonymous> (/app/node_modules/mocha/lib/runnable.js:370:16)
    at Test.assert (/app/node_modules/supertest/lib/test.js:179:6)
    at Server.assert (/app/node_modules/supertest/lib/test.js:131:12)
    at Object.onceWrapper (events.js:293:19)
    at emitNone (events.js:86:13)
    at Server.emit (events.js:188:7)
    at emitCloseNT (net.js:1562:8)
    at _combinedTickCallback (internal/process/next_tick.js:77:11)
    at process._tickCallback (internal/process/next_tick.js:104:9)

Wasn't reproduced immediately when I restarted the process.",steadysupply,NONE,2017-04-15 08:17:39+00:00,True,2017-10-17 22:53:07+00:00,185.61,,3,2,2017-04-15 16:32:42+00:00,0.34,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['confirmed-bug', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2770,Node stack traces truncated,"I think this is a Mocha problem but it's hard to say, since I don't have anything to compare to, though it could be a general environmental problem. We are getting out of memory errors on a large test suite. I've researched this a lot, and it seems it could be one of several things, but at this point it's very difficult to troubleshoot because I can't get a full stack trace.
Node@6.9.5, mocha@3.2.0
<--- Last few GCs --->

   82518 ms: Mark-sweep 807.1 (1039.7) -> 802.3 (1038.7) MB, 149.2 / 0.0 ms [allocation failure] [GC in old space requested].
   82668 ms: Mark-sweep 802.3 (1038.7) -> 802.3 (1036.7) MB, 150.6 / 0.0 ms [allocation failure] [GC in old space requested].
   82838 ms: Mark-sweep 802.3 (1036.7) -> 802.2 (993.7) MB, 169.7 / 0.0 ms [last resort gc].
   82989 ms: Mark-sweep 802.2 (993.7) -> 802.2 (982.7) MB, 150.6 / 0.0 ms [last resort gc].


<--- JS stacktrace --->

==== JS stack trace =========================================

Security context: 0000024EE58CFB61 <JS Object>
    1: SparseJoinWithSeparatorJS(aka SparseJoinWithSeparatorJS) [native array.js:~75] [pc=000002B8298FC057] (this=0000024EE5804381 <undefined>,w=0000011715C4D061 <JS Array[7440]>,F=000003681BBC8B19 <JS Array[7440]>,x=7440,I=0000024EE58B46F1 <JS Function ConvertToString (SharedFunctionInfo 0000024EE5852DC9)>,J=000003681BBC8AD9 <String[4]\: ,\n  >)
    2: DoJoin(aka DoJoin) [native array.js:137...

FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory

As you can see it's truncating it. I've tried everything I can think of, but none of the node command line options have any effect, e.g.
node --stack_trace_limit=1000 --max_stack_trace_source_length=1000 ./node_modules/mocha/bin/_mocha ./test --full-trace
I looked at all the v8 options with stack here:
node --v8-options | grep -B0 -A1 stack
.. and didn't see any others that might be related. Thoughts?",jamietre,NONE,2017-04-19 14:22:28+00:00,True,2017-04-26 01:06:41+00:00,6.45,,4,3,2017-04-26 01:05:11+00:00,6.45,jamietre,NONE,0,1,0,2,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2771,Timeout multiplier.,"Background
We have a suite of Mocha tests that are functional in nature and use Selenium to fully test our web application. Due to the amount of interconnected components, tests can often take a couple of seconds (each) to complete. For this reason the test timeouts are finely tuned to allow just enough time (and a bit more) for each test to complete, without wasting too much time waiting if the test times out.
Problem
The timeouts are set according to the capabilities of our development server. The problem we have encountered is that, when these tests are run by other developers on their local machines they often timeout due to the other machines not being as powerful.
Suggestion
Instead of changing all the timeouts to accommodate the slowest machine, we thought it would be an elegant solution to simply add a timeout multiplier, such that a machine that is twice as slow could simply add a 2x multiplier somewhere in a local config file (or command line parameter). This would allow the tests to pass without any modification to the existing codebase.
What do you think? Is this a problem worthy of addressing? Are there perhaps better solutions?",bennieswart,NONE,2017-04-19 15:53:12+00:00,False,,,,3,1,2017-04-20 00:48:03+00:00,0.37,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['feature', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2772,Add tests for loading reporters w/ relative/absolute paths,"I'd like to have tests for the new feature added in #2659.
Gonna do this today after I review the rest of the un-released commits. Let me know if you want to tackle it for me.",dasilvacontin,CONTRIBUTOR,2017-04-20 15:51:09+00:00,True,2017-04-24 09:21:31+00:00,3.73,,3,5,2017-04-20 18:04:50+00:00,0.09,sul4bh,CONTRIBUTOR,0,2,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2774,Broken symbolic link for supports-color,"I noticed that the symbolic link for node_modules/mocha/node_modules/.bin/supports-color is not pointing to an existing file.  I found this out when part of the runtime environment walked the directory tree under node_modules.
I'm not sure if this is an issue with mocha, npm, or supports-color, but I thought I'd try reporting it here first.
Here's what I notice so far:
[node_modules/mocha/node_modules/.bin]$ ls -l
total 4
lrwxr-xr-x 1 xxxx xxxx 24 Mar  2 14:41 supports-color -> ../supports-color/cli.js

[node_modules/mocha/node_modules/.bin]$ ls -l ../supports-color/
total 20
-rw-r--r-- 1 xxxx   38 Jul 18  2015 browser.js
-rw-r--r-- 1 xxxx 1154 Oct 13  2015 index.js
-rw-r--r-- 1 xxxx 1119 Apr  6  2014 license
-rw-r--r-- 1 xxxx 2837 Apr 18 09:15 package.json
-rw-r--r-- 1 xxxx 1491 Jul 15  2015 readme.md

and here's some information about my environment
$ npm --version
3.10.7

$ node --version
v6.6.0

$ npm ls mocha
tdc@1.1.2 xxxxx
└── mocha@3.2.0 

I'm happy to do some more digging and/or submit a pull request, if anyone has any suggestions on where to start looking.",kkrull,NONE,2017-04-20 23:27:17+00:00,True,2017-04-21 00:06:19+00:00,0.03,,2,2,2017-04-21 00:06:19+00:00,0.03,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2775,Supporting interactive debugger for tests,"I've never been able to get my debuggers or breakpoints to work inside tests. Typically using Webstorm or Intellij Ultimate. Just tried again today with node v7.7.4 and Intellij 2017.1 since I noticed that a Jetbrains developer added support for child process debugging to ava: avajs/ava#874
Thoughts on adding this functionality, perhaps by taking a close look at ava's approach? It's also possible that this will be more widely available once nodejs/node#5025 lands; also a feature request at nodejs/node#9621
If this is already supported, some tips would be handy. Noticed this issue #1091 where someone was talking about --debug-brk so maybe I'm missing something",jcrben,NONE,2017-04-21 04:44:21+00:00,True,2017-06-11 22:45:45+00:00,51.75,,3,2,2017-06-03 04:53:38+00:00,43.01,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'question', 'unconfirmed-bug']",False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2776,Question: How to download excel file from nodejs Terminal (not via browser),"Hello, I am new to nodejs mocha. Need your help. From the nodejs terminal, i want to download an excel file and convert it to csv (say, mocha online.js). Note: i don't want to do this via a browser.
Below is a script i am working on to download and convert to csv. There is no error nor the expected result:
online.js
if (typeof require !== 'undefined') XLSX = require('xlsx');
var XMLHttpRequest = require(""xmlhttprequest"").XMLHttpRequest;

/* set up XMLHttpRequest */
var url = ""http://oss.sheetjs.com/js-xlsx/test_files/formula_stress_test_ajax.xlsx"";
var xhr = new XMLHttpRequest();
xhr.open(""GET"", url, true);
xhr.responseType = ""arraybuffer"";
describe('suite', function () {
     it('case', function () {
          var arraybuffer = xhr.response;

          /* convert data to binary string */
          var data = new Uint8Array(arraybuffer);
          var arr = new Array();
          for (var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
          var bstr = arr.join("""");

          /* Call XLSX */
          var sheetName = 'Database';
          var workbook = XLSX.read(bstr, { type: ""binary"" });
          var worksheet = workbook.Sheets[sheetName];
          var csv = XLSX.utils.sheet_to_csv(worksheet);
          console.log(csv);
          xhr.send();
          //.... perform validations here using the csv data
      });
});",bipo1980,NONE,2017-04-23 02:58:46+00:00,True,2017-04-23 10:40:39+00:00,0.32,,2,2,2017-04-23 10:40:39+00:00,0.32,Munter,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2777,Hostile Custom Runner API - Silent crash,"I've just noticed that my custom runner started crashing silently. The problem is that Runner errors cause Mocha to crash with an OK exit status and no error notice.
For example:
var mocha = require('mocha');

function FooReporter(runner) {
  mocha.reporters.Base.call(this, runner);
  
  //return visual(runner)

  let count = 0
  runner.on('suite', function(test){
  })

  runner.on('pass', function(test){
    count++
    if(count > 3) throw Error('An error!')
    process.stdout.write('.')
  });

  runner.on('fail', function(test, err){
    process.stdout.write('x')
  });

  runner.on('end', function(){
    console.log()
    console.log('end!')
  });
}

module.exports = FooReporter;
Using the above runner will silently crash Mocha after 3 test passes. The thrown Error will not be shown and shell exit status of mocha will be 0",fgarcia,NONE,2017-04-23 10:27:47+00:00,True,2017-07-12 16:32:39+00:00,80.25,,4,4,2017-07-08 22:33:31+00:00,76.5,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2779,Mocha enforces synchronous timeouts,"It seems to me that the timeout in mocha exists to catch unhandled asynchronous tests, which would otherwise cause the test to hang indefinitely.
However, Mocha also fails synchronous steps which exceed this limit. The problem with this is that Mocha can only enforce this limit after the step has successfully finished processing, so there is no reason the test could not be allowed to complete successfully.
I'd like to propose either removing synchronous timeouts, demoting them to a warning or allowing a separate timeout to be set for synchronous/asynchronous.
Timeout test cases: https://gist.github.com/peterjwest/ae556cfd329983575a47ca0b9d4b1cd3",peterjwest,NONE,2017-04-26 10:32:11+00:00,True,2019-04-10 12:25:38+00:00,714.08,,9,10,2017-04-27 02:19:43+00:00,0.66,ScottFreeCode,CONTRIBUTOR,3,1,0,3,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2780,An in-range update of coveralls is breaking the build 🚨,"Version 2.13.1 of coveralls just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      coveralls
    
  
  
    
      Current Version
    
    
      2.13.0
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As coveralls is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪

Status Details
- ✅ **continuous-integration/appveyor/branch** AppVeyor build succeeded [Details](https://ci.appveyor.com/project/boneskull/mocha/build/734),- ❌ **continuous-integration/travis-ci/push** The Travis CI build could not complete due to an error [Details](https://travis-ci.org/mochajs/mocha/builds/226573440),- ✅ **coverage/coveralls** First build on greenkeeper/coveralls-2.13.1 at 88.283% [Details](https://coveralls.io/builds/11278164)



Commits
The new version differs by 1 commits0.

b9032a1 better Jenkins detection

false
See the full diff


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-04-27 21:47:30+00:00,True,2017-05-24 05:34:00+00:00,26.32,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2781,Mocha test stops without further execution of other test cases if an expect fails in a test case.,"describe('API testing: meeting', function () {
it('Testing meeting update view count call without error', function (done) {
request(app).post('/meeting/updateViewCount').send({ videoId: 17 }).set('Accept', 'application/json').expect(200).end(function (err, res) {
should.not.exist(err);
should.exist(res.body);
expect(res.body.status).to.equal('Success'); // This fails
done();
});
});-- In above test case I am passing invalid videoId as 17 , no record exists with this id and it will fail and mocha throws below error and exit.
throw err;
^
AssertionError: expected 'Error' to equal 'Success'
But I want it to continue further executing below test and also many other in different files and show the result of passed and failed with proper execution.
it('Testing meeting update view count call with error', function (done) {
    request(app).post('/meeting/updateViewCount').send({ videoId: 's' }).set('Accept', 'application/json').expect(200).end(function (err, res) {
        expect(res.body.status).to.equal('Error');
        done();
    });
});

});
Is this an issue or am i missing something here, I am new to mocha tests, earlier i worked on java and grails testing frameworks where i never faced any such issues.
Thanks
Sandeep",sandeepvedavyas,NONE,2017-05-02 03:46:02+00:00,True,2017-05-08 09:50:09+00:00,6.25,,4,7,2017-05-02 19:43:56+00:00,0.67,ScottFreeCode,CONTRIBUTOR,0,1,0,3,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2782,Using mocha programmatically - mocha/lib/runner.js - getting expected and actual results,"mocha/lib/runner.js
    
    
        Lines 47 to 57
      in
      8cae7a3
    
    
    
    

        
          
            *   - `start`  execution started 
        

        
          
            *   - `end`  execution complete 
        

        
          
            *   - `suite`  (suite) test suite execution started 
        

        
          
            *   - `suite end`  (suite) all tests (and sub-suites) have finished 
        

        
          
            *   - `test`  (test) test execution started 
        

        
          
            *   - `test end`  (test) test completed 
        

        
          
            *   - `hook`  (hook) hook execution started 
        

        
          
            *   - `hook end`  (hook) hook complete 
        

        
          
            *   - `pass`  (test) test passed 
        

        
          
            *   - `fail`  (test, err) test failed 
        

        
          
            *   - `pending`  (test) test pending 
        
    
  


So in mocha.run().on(eventName, handler), I can listen to many types of events, such as test end, end and so on.
I was wondering if there was a way to emit my own custom event from the mocha test JS.
For example, I want to know about which assertions took place, the values of each assertion (the expected and actual values).
Thank you.",aDu,NONE,2017-05-02 15:59:02+00:00,True,2017-09-30 19:25:18+00:00,151.14,,3,3,2017-05-02 20:46:49+00:00,0.2,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2783,Mocha can't run tests twice programmatically,"Programmatically, I cannot run a Mocha test twice.
I.e. I can't do mocha.run() twice.
I looked at a similar issue (#995), however, the solutions are not optimal and/or not work.
For example, deleting the require cache is not a solution for me, as I need to use the require cache.
Is there a way to mocha.run() twice?
Thanks in advance!",aDu,NONE,2017-05-03 12:25:43+00:00,False,,,,14,26,2017-05-03 14:15:10+00:00,0.08,aDu,NONE,2,0,0,11,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2784,Exit code - differentiate between being unable to run tests and failing the tests,"I want to differentiate between the tests successfully running (but failing assertions) - giving an exit code of NumOfFailedTests, verses other errors due to the test suite (i.e. out of memory, no permissions to access the test suite file, undefined variable).
Alternatively, is there an option to force an exit code of 0 instead of an exit code of NumOfFailedTests, that way when I see that the exit code is 0, I know the tests ran properly (regardless if it passed or failed).
Is there a way to do this?
Thank you.",aDu,NONE,2017-05-03 14:43:09+00:00,False,,,,3,1,2017-05-04 04:09:59+00:00,0.56,ScottFreeCode,CONTRIBUTOR,0,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2785,Errors in Async aren't caught correctly,"This feels very similar to #1128, however, that solution was helped along with promises. I can't find a way to solve this with promises. My specific example is when I'm testing an Express.js controller:
// the Controller
let Promise = require('bluebird');

var controller = function (req, res, next) {
  let promise = new Promise(function(resolve) {
    setTimeout(resolve);
  });

  promise.then(function () {
    res.redirect('/otherPath');
  });
};

// the Test
let expect = require('chai').expect;

it('propagates errors correctly', function (done) {
  let res = {
    redirect: function(route) {
      expect(route).to.eql('/somePath');
      done();
    }
  };

  controller({}, res, function () {});
});
There is a promise involved which causes the mocha test runner to lose context, however, the promise happens in the controller, then resolves through a callback.
Here it is in JSFiddle... https://jsfiddle.net/ccwapndu/ (ProTip: open the console)",jonstorer,NONE,2017-05-03 16:08:58+00:00,True,2017-05-04 03:30:31+00:00,0.47,,2,1,2017-05-04 03:30:27+00:00,0.47,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2786,Mocha doesn't report pending test as inconclusive,"It seems mocha can only report the test as failed or passed but not inconclusive.
Proposal would be to map pending to inconclusive.
Pending is done when the skip method is called.
This would requires to introduce a new property into the testexecutor / testframework exchange data structure about skipped tests.
Any thought ?",fforjan,NONE,2017-05-04 02:09:24+00:00,True,2017-05-04 02:10:27+00:00,0.0,,2,2,2017-05-04 02:10:27+00:00,0.0,fforjan,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2787,An in-range update of karma-chrome-launcher is breaking the build 🚨,"Version 2.1.1 of karma-chrome-launcher just got published.

  
    
      Branch
    
    
      Build failing 🚨
    
  
  
    
      Dependency
    
    
      karma-chrome-launcher
    
  
  
    
      Current Version
    
    
      2.1.0
    
  
  
    
      Type
    
    
      devDependency
    
  

This version is covered by your current version range and after updating it in your project the build failed.
As karma-chrome-launcher is “only” a devDependency of this project it might not break production or downstream projects, but “only” your build or test tools – preventing new deploys or publishes.
I recommend you give this issue a high priority. I’m sure you can resolve this 💪

Status Details

❌ continuous-integration/travis-ci/push The Travis CI build is in progress Details,- ❌ coverage/coveralls Coverage pending from Coveralls.io Details,- ❌ continuous-integration/appveyor/branch AppVeyor build failed Details




Release Notes
v2.1.1
Bug Fixes

add disable-renderer-backgrounding flag (6bfc170), closes #123



Commits
The new version differs by 6 commits0.

f61d786 chore: release v2.1.1
253f168 chore: update contributors
0db9489 Merge pull request #124 from cexbrayat/feat/disable-renderer-backgrounding
6bfc170 fix: add disable-renderer-backgrounding flag
5b5b4ae Merge pull request #121 from karma-runner/add-supported-browsers-info
aa5b581 docs: add supported browsers list

false
See the full diff


Not sure how things should work exactly?
There is a collection of frequently asked questions and of course you may always ask my humans.


Your Greenkeeper Bot 🌴",greenkeeper,NONE,2017-05-05 17:01:53+00:00,True,2017-05-24 05:34:01+00:00,18.52,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2788,Mocha throws TypeError: XYZ is not a function,"I am getting this TypeError on a function that works perfectly fine in the application.
     TypeError: _dompurify2.default.sanitize is not a function
      at createMarkup (.tmp/mocha-webpack/webpack:/app/js/components/presentation/Dribbble.js:7:1)

Component code:
import React from 'react';
import PropTypes from 'prop-types';
import DOMpurify from 'dompurify';

function createMarkup(html) {
  return {__html: DOMpurify.sanitize(html)};
}

function mapTags(tags) {
  return tags.map( (item, index) => <li key={ index.toString() }>{ item }</li> );
}

const Dribbble = (props) => (
  <div className={ `block-dribbble ${props.className}` }>
    <img src={ props.image } alt="""" />
    { props.description ? <div dangerouslySetInnerHTML={ createMarkup(props.description) } /> : null }
    <ul>
      { mapTags(props.tags) }
    </ul>
    <a href={ props.url }>View on Dribbble</a>
  </div>
);

Dribbble.propTypes = {
  description: PropTypes.string,
  image: PropTypes.string.isRequired,
  className: PropTypes.string,
  tags: PropTypes.array.isRequired,
  url: PropTypes.string.isRequired
};

Dribbble.defaultProps = {
  className: '',
  description: ''
};

export default Dribbble;

Here is the test code:
import expect from 'expect';
import React from 'react';
import { shallow } from 'enzyme';
import enzymify from 'expect-enzyme';
import Dribbble from './Dribbble';

expect.extend(enzymify);

const props = {
  description: '<p>A dribbble description</p>',
  image: 'https://cdn.dribbble.com/users/5146/screenshots/3479870/ddc-hardware-specimen-2-2.gif',
  className:'dribbble',
  tags: ['font', 'typeface'],
  url: 'https://dribbble.com/shots/3479870-DDC-Hardware-Features'
};

describe('Dribbble', () => {
  it('renders Dribbble with className .block-dribbble', () =>{
    const wrapper = shallow(<Dribbble { ...props } />);
    expect(wrapper.find('.block-dribbble')).toExist();
  });
});

and my relevant package.json:
    ""enzyme"": ""^2.8.2"",
    ""expect"": ""^1.20.2"",
    ""expect-enzyme"": ""^0.15.0"",
    ""dompurify"": ""^0.8.7"",
    ""mocha"": ""^3.2.0"",
    ""react"": ""^15.5.4"",",afholderman,NONE,2017-05-05 20:51:06+00:00,True,2018-04-01 03:53:17+00:00,330.29,,5,4,2017-05-23 05:42:32+00:00,17.37,tswaters,NONE,0,1,0,3,"['needs-mcve', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
2789,Randomly unable to find modules (possible mocha caching issue?),EDIT: looks like a Webstorm Config Issue,alxlu,NONE,2017-05-07 23:53:12+00:00,True,2017-05-08 01:13:05+00:00,0.06,,1,2,2017-05-08 00:52:32+00:00,0.04,alxlu,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2790,Expose Runner in Suite,"Hello,
Would it be a good idea to expose the Runner instance inside of Suite? It would enable the users to do something like:
describe('my suite', function () {
  this.runner.emit('some arbitrary event')
});
This would give reporters more powerful logging. I think this change could be backward compatible, since it's not changing how the Runner or the Suite works.",dok,NONE,2017-05-08 05:18:49+00:00,True,2017-05-08 07:27:53+00:00,0.09,,1,1,2017-05-08 07:27:53+00:00,0.09,dok,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2791,Vulnerability in dependency growl 1.9.2,"Hi,
I got a report that mocha includes growl 1.9.2 which is vulnerable to an arbitrary code injection.
https://snyk.io/vuln/npm%3Agrowl%3A20160721?utm_campaign=vuln_alert&utm_medium=email&utm_source=Vuln
This issue is closed in growl 1.9.3.
Thanks.",balsamiqFlorian,NONE,2017-05-08 07:44:47+00:00,True,2018-01-19 06:18:02+00:00,255.94,,9,8,2017-05-14 06:39:50+00:00,5.95,ScottFreeCode,CONTRIBUTOR,1,1,0,6,['needs-upstream-fix'],False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2792,Mocha browser test failing when i run on iOS based browsers,"Hello Experts, Need your help again to run a mocha test using an html file on iOS/Safari or iOS/Chrome browser. I have tried asking the question at SO but have had not had luck. I come here sincerely hoping i am not breaking rules but hope to find a solution for the same. Much Thanks in advance.
Below is the scripts i am using. No problems if in run on Windows/Chrome.
But i get this Error when i run on iOS/Safari/Chrome:
""before all"" hook
SyntaxError: Unexpected identifier ""a""(https://..../test/iosmodule.js:10)(https://..../node_modules/mocha/mocha.js:64) 

ios.js
var mod;
describe('suite', function(){
    before(function(done){
        requirejs.config({ baseUrl: '.', paths: { }, nodeRequire: require });
            require(['./iosmodule'], 
                function(_mod) {
                    mod = _mod;
                    done();
            });                        
    });
    it('case', function(){
        console.log(mod.get());        
    });    
});

iosmodule.js
define([], function() {
    return {
        get: function() {
            return ""Hello Node World!!!"";
        }
    };
});

ios.html
<!DOCTYPE html>
<html>
<head>
  <title>Mocha Test</title>
  <link rel=""stylesheet"" href=""../node_modules/mocha/mocha.css"">
</head>
<body>
  <div id=""mocha""></div>  
  <script src=""../node_modules/mocha/mocha.js""></script>
  <script src=""../node_modules/requirejs/require.js""></script>
  <script>mocha.setup('bdd')</script>
  <script src=""./ios.js""></script>
  <script>mocha.run()</script>
</body>
</html>",bipo1980,NONE,2017-05-09 03:05:30+00:00,True,2017-12-09 00:34:47+00:00,213.9,,3,2,2017-07-27 23:36:32+00:00,79.85,johnkpaul,NONE,0,0,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2796,"Test duration not shown for failed tests, but does for passed tests","Concerning runners, listening to 'test end' events.
For passed tests, test.duration is given in milliseconds.
However, when there is a failed test, test.duration is not defined.
Why is that? Can test.duration be implemented for failing tests?
Thanks in advance! =)",aDu,NONE,2017-05-10 13:57:58+00:00,False,,,,4,1,2017-05-26 21:56:49+00:00,16.33,Elergy,CONTRIBUTOR,0,1,0,0,"['feature', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False
2797,unhandled promise rejection in async tests,"I can't seem to get this to work.  If a routine under test uses promises at some point and catches any errors returning the result to the callback function, it's not possible to throw assertion exceptions in the test code without resulting in an unhandled promise rejection and the test timing out
Consider the following:
const assert = require('assert');

function test (cb) {
    new Promise((resolve, reject) => reject(new Error('aw snap!')))
        .then(result => cb(null, result))
        .catch(err => cb(err));
}

describe('test', () => {
    it('should function properly', done => {
        test(err => {
            assert.equal(err.message, 'oops!');
            done();
        });
    });
});
Results in:
$ mocha 


  test
(node:15999) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): AssertionError: 'aw snap!' == 'oops!'
^CTerminated
I don't understand why the assert.equal throw isn't handled - the only promise in play here is in the test function and it is handled and returns the error to the first parameter of cb properly.  I would call catch on the promise in the test code, but as far as I can tell there is no promise to attach a catch to!
To get this to work, I need to wrap assertion code in a try/catch and call done with the error if one is encountered.... which is not ideal.
    it('should function properly', done => {
        test(err => {
            try {
                assert.equal(err.message, 'oops!');
            } catch (e) {
              return done(e);
            }
            done();
        });
    });
Or, attach a event handler for unhandledRejection on process which, again, is not ideal
process.on('unhandledRejection', e => { throw e; });

Is there a reason mocha doesn't do this itself, i.e.:
diff --git a/lib/runner.js b/lib/runner.js
index b024e0d..21c56f9 100644
--- a/lib/runner.js
+++ b/lib/runner.js
@@ -827,6 +827,7 @@ Runner.prototype.run = function (fn) {
 
   // uncaught exception
   process.on('uncaughtException', uncaught);
+  process.on('unhandledRejection', uncaught);
 
   if (this._delay) {
     // for reporters, I guess.
With that modified directly in the node_modules directory everything works as expected.",tswaters,NONE,2017-05-10 18:52:20+00:00,True,2017-05-12 22:34:19+00:00,2.15,,4,5,2017-05-12 22:34:19+00:00,2.15,ScottFreeCode,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2799,I get this: /usr/bin/env: ‘node\r’,"I run this mocha --recursive at Ubuntu 16.04, and I get this output:
/usr/bin/env: ‘node\r’: No such file or directory
npm ERR! Test failed.  See above for more details.

I use mocha@3.4.0
There is problem with line ending, you should use UNIX like version instead of Windows one.",theofilis,NONE,2017-05-14 18:22:36+00:00,True,2017-05-14 19:07:01+00:00,0.03,,7,14,2017-05-14 18:39:23+00:00,0.01,JigSawFr,NONE,0,1,0,6,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2800,Unix/Linux line endings in CLI need to be enforced,"bin/mocha and bin/_mocha need to have Unix line endings. Currently Git's autocrlf setting can screw this up. (See also #2799 for an example of when this goes wrong.) Our tests don't check for it either.
We will need to either check for or fix the line endings in these files as part of publishing. Or, if doing it on publish isn't feasible (prepublish vs. prepublishOnly seems to be a bit of an issue?), on version (most of our other publishing prep is in versioning already anyway...).
Ideally, I'd like to just run a Node command and convert the line endings, so it doesn't matter what Git did (or the user, etc) -- this isn't something that should have to be fixed manually when it is detected.",ScottFreeCode,CONTRIBUTOR,2017-05-14 19:31:31+00:00,True,2017-06-08 06:43:57+00:00,24.47,,1,2,2017-05-14 21:28:02+00:00,0.08,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['chore', 'needs-upstream-fix', 'windows']",True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
2801,Line endings and test files,"Similar to #2800, while the test suite can be run on Windows (e.g. using MinGW make with either Cygwin or Git Shell), certain tests fail if certain files do not have the right line endings:

test/acceptance/glob/glob.sh -- this just needs to be Linux line endings, should probably be converted to them by the test run if possible regardless of how they may have been changed
something in test/integration/fixtures/diff -- perhaps just the output file? and not sure if the right line endings here are always Linux, or depend on the OS, or depend on whether the tests are being run from a Posixy environment (as is necessary to use the Makefile)

More meta-like, if this ends up requiring per-file fiddling, then it would be really, really helpful to have some way of guaranteeing that our CI runs won't succeed just because they happen to have the right global settings that developers may or may not have. It doesn't make sense to have something that we need to set up correctly for certain tests that won't fail CI if we get it wrong.",ScottFreeCode,CONTRIBUTOR,2017-05-14 19:46:21+00:00,True,2017-12-12 04:48:22+00:00,211.38,,1,1,2017-05-14 21:39:43+00:00,0.08,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2802,Deprecation warning in Mocha's test,"mocha/test/integration/reporters.spec.js
    
    
         Line 39
      in
      0a93024
    
    
    
    

        
          
           var tmpDir = os.tmpDir().replace(new RegExp(path.sep + '$'), ''); 
        
    
  

 is using os.tmpDir and that's printing a deprecation warning.
Depending on supported versions of Node and how far back the replacement os.tmpdir goes, we may have to dynamically detect the availability of os.tmpdir.
Otherwise, we should just change that one letter and be done with it.",ScottFreeCode,CONTRIBUTOR,2017-05-14 19:49:01+00:00,True,2017-05-23 03:36:19+00:00,8.32,,1,0,,,,,0,0,0,0,"['chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2803,Mocha semver minor update 3.4.0 breaks builds,"Details and linked failed builds:
sourcegraph/javascript-typescript-langserver#253
felixfbecker/node-sql-template-strings#38",felixfbecker,NONE,2017-05-14 19:49:25+00:00,True,2017-05-24 05:35:46+00:00,9.41,,5,10,2017-05-14 19:53:22+00:00,0.0,ScottFreeCode,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2804,Intermittent EPERM when running the test suite on Windows,"mocha/test/integration/reporters.spec.js
    
    
         Line 53
      in
      0a93024
    
    
    
    

        
          
           fs.unlinkSync(tmpFile); 
        
    
  

 gets a spurious EPERM error trying to unlink the temporary file about half the time. Should we try graceful-fs here? Or would it suffice to try-catch the error and make multiple unlink attempts if necessary?",ScottFreeCode,CONTRIBUTOR,2017-05-14 19:50:30+00:00,False,,,,1,0,,,,,0,0,0,0,"['chore', 'help wanted', 'windows']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
2805,Eliminate shell scripts from Mocha's test suite,"Besides getting ourselves off the Makefile (#2268?), the other thing that doesn't work on a default Windows development environment is Unix/Linux shell scripts. (Even with a Posixy environment, they can have problems with line endings like #2801; this would not be an issue if they weren't Posixy shell scripts in the first place.) As far as I am aware, Node's child_process actions can run anything in a shell the same as if it were in a .sh script, so we should be able to convert any such test files to proper JS test files.
The one of these of which I am aware is:

test/acceptance/glob/glob.sh

(We can make an exception for scripts used only by CI and not local test runs, of course.)",ScottFreeCode,CONTRIBUTOR,2017-05-14 21:36:01+00:00,True,2017-08-02 04:12:28+00:00,79.28,,3,4,2017-05-15 09:39:44+00:00,0.5,Munter,MEMBER,1,2,0,0,"['chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2808,double asterisk not working on mac,"I'm calling mocha with this line:
mocha --compilers js:babel-register --require ignore-styles --require babel-polyfill ./client/**/*.spec.js
It does work perfectly on windows machines, but on mac it only handles tests from the first level of directories, ie.
./client/dirA/testA.spec.js
but not test that are located deeper, ie.
./client/dirA/dirB/testB.spec.js
It looks like a bug, but for now I'm looking for a quick workaround for it.",krzysztofpniak,NONE,2017-05-15 12:10:46+00:00,True,2017-05-15 14:58:05+00:00,0.12,,4,6,2017-05-15 14:58:04+00:00,0.12,ScottFreeCode,CONTRIBUTOR,0,1,0,3,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
2809,Execute flags are missing in Mocha 3.4.1 when installed with --no-bin-links,"When Mocha is installed with --no-bin-links, the executable flags are missing in bin/ folder. So all the test that are configured for no-bin-links environments will fail to execute.
Environment:
Node v6.10.2
NPM v3.10.10
bash-4.3# npm install --no-bin-links mocha@3.4
/test
`-- mocha@3.4.1

bash-4.3# ls -l node_modules/mocha/bin/
total 24
-rw-r--r--    1 root     root         12862 May 14 19:03 _mocha
-rw-r--r--    1 root     root          2234 May 14 19:03 mocha
-rw-r--r--    1 root     root           710 May 14 19:03 options.js
bash-4.3# npm install --no-bin-links mocha@3.3
/test
`-- mocha@3.3.0

bash-4.3# ls -l node_modules/mocha/bin/
total 24
-rwxr-xr-x    1 root     root         12575 Apr 24 08:46 _mocha
-rwxr-xr-x    1 root     root          2179 Apr 24 08:46 mocha
-rw-r--r--    1 root     root           710 Oct 24  2016 options.js

Note the missing x flag in 3.4.1 installation.",meister,NONE,2017-05-16 08:05:56+00:00,True,2017-05-26 03:00:32+00:00,9.79,,4,8,2017-05-16 16:58:19+00:00,0.37,ScottFreeCode,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2810,Add a hook to fail current test,"We would like to enforce that our tests are not emitting any warnings. We have some 3rd party modules that console.error warnings, which we can overload in our mocha --require bootstrap.js file, but unfortunately some modules catch any errors we throw, so they never bubble back up to our unit test. It would nice if Mocha exposed some hook where we could just call Mocha.fail(message || error)",jason-krypton,NONE,2017-05-16 19:37:08+00:00,True,2017-05-17 16:35:13+00:00,0.87,,1,1,2017-05-17 16:35:13+00:00,0.87,jason-krypton,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2811,Allowing functions to be passed in as titles as long as they have names,"This would allow functions or even React classes to be passed in when testing against them and allow for easier refactoring than praying IntelliJ finds all of your stings with that function in them.
For example:
function addition (a, b) { return a+b; };
describe(addition, function () {
    it('will add the two numbers', function () {
       ....
    });
});

Now if addition were ever renamed to addNumbers our test would nicely be updated along the way.",armsteadj1,NONE,2017-05-18 05:26:55+00:00,True,2017-06-03 06:50:39+00:00,16.06,,3,3,2017-05-18 05:36:11+00:00,0.01,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2815,[Suggestion] Shift contributors from package.json to CONTRIBUTORS.md,,kunagpal,CONTRIBUTOR,2017-05-21 18:19:37+00:00,True,2018-02-11 06:27:54+00:00,265.51,,2,3,2017-09-05 04:50:09+00:00,106.44,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2816,Tests not run/reported using ES modules in browser,"I am trying – and failing – to use mocha to test ES modules in the browser.
I am using the following code:
test.html:
<!doctype html>
<html lang=""en"">
<head>
    <title>Mocha/Chai ES Modules Test</title>
    <meta charset=""utf-8"">
    <link rel=""stylesheet"" href=""//cdnjs.cloudflare.com/ajax/libs/mocha/3.4.1/mocha.min.css"">
</head>

<body>
    <div id=""mocha""></div>

    <script src=""//cdnjs.cloudflare.com/ajax/libs/mocha/3.4.1/mocha.min.js""></script>
    <script src=""//cdnjs.cloudflare.com/ajax/libs/chai/3.5.0/chai.js""></script>

    <script>mocha.setup('bdd')</script>
    <script type=""module"" src=""./test.js""></script>
    <script>mocha.run()</script>
</body>

</html>

test.js:
import MyLib from './lib.js';

const expect = chai.expect;

describe('test', function() {
    it('should invoke test without run', function() { expect(MyLib.hypotenuse(5, 12)).to.equal(13); });
    it('needs run to invoke test',       function() { expect(MyLib.hypotenuse(8, 15)).to.equal(17); }).run();
});

lib.js:
class MyLib {

    static hypotenuse(x, y) {
        console.log('MyLib.hypotenuse', x, y);
        return Math.sqrt(x**2 + y**2);
    }

}

export default MyLib;

I am running tests in Chrome 60.0.3100.0 (dev channel, using Experimental Web Platform flag, on Linux).
At first I got no tests run at all; going through issues, I discovered #2760 suggested adding .run(), which does invoke the test (per the console.log), but still does not make the test appear in the browser:

This test can be run from www.movable-type.co.uk/dev/mocha-es-modules (using Chrome 60 with flag).",chrisveness,NONE,2017-05-21 18:33:35+00:00,True,2017-05-23 08:56:30+00:00,1.6,,2,4,2017-05-21 23:16:32+00:00,0.2,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['browser'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2819,this.skip() in before fails to skip tests with nested describe calls,"Based on the documentation:

To skip multiple tests in this manner, use this.skip() in a “before” hook

I expected the test below to never run.
describe('skip', function() {
  before(function() {
    this.skip();
  });

  describe('bug', function() {
    it('should never be called', function() {
      throw new Error('Why is this reached?');
    });
  });
});
However, here is the output.
✗ mocha bug.js


  skip
    bug
      1) should never be called


  0 passing (7ms)
  1 failing

  1) skip bug should never be called:
     Error: Why is this reached?
      at Context.<anonymous> (bug.js:8:19)
This seems like a bug to me. If it is expected behavior, then the documentation should be updated to reflect this.",fearphage,NONE,2017-05-23 14:20:52+00:00,True,2018-12-11 22:57:51+00:00,567.36,,15,14,2017-05-31 20:09:53+00:00,8.24,kunagpal,CONTRIBUTOR,1,1,0,11,['needs-review'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
2827,Move Example Tests to Documentation (or delete them),"We have at least one file in the test folder that is an example of testing something else with Mocha, not an actual test of Mocha itself: https://github.com/mochajs/mocha/blob/3e7152f1bbcf0715d115a2281383c6d84fa47462/test/acceptance/http.spec.js (originating here)
This would make a pretty good example on the site. It's only marginally less trivial than an example using setTimeout, but infinitely more meaningful, and uses a readily available and familiar Node API rather than a hypothetical one or a very particular package. We could replace the existing done example with it if we want to, or we could use both to make it really clear that done works with anything you want to throw at it.
Meanwhile, all it's accomplishing right now is to add one more place that our test suite could be flakey (or could be affected by unrelated bugs in the library being used in that test, however unlikely those are in a stable Node core module...), which is how I noticed it in the first place.
(If such examples are not needed on the site currently, they should probably be removed from the code in any case since they're neither needed for example nor needed for contributing to testing Mocha.)
Are there other example files lurking among our test files? We should audit them to find such things and move them all out into the website or other documentation, not just this one.",ScottFreeCode,CONTRIBUTOR,2017-05-24 05:27:06+00:00,False,,,,1,0,,,,,0,0,0,0,"['chore', 'documentation']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2828,configure probot-stale,it's this thing,boneskull,MEMBER,2017-05-24 05:41:32+00:00,True,2017-05-24 19:05:06+00:00,0.56,,1,0,,,,,0,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2833,Mocha 3.4.2 | Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.,"Hi,
Even though issue #2407 and #2413 are closed, I am still getting same error with mocha 3.4.2.
Thanks,
Sanjeev",skumar568,NONE,2017-05-26 12:21:35+00:00,True,2017-05-26 15:21:42+00:00,0.13,,2,2,2017-05-26 13:16:41+00:00,0.04,fearphage,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2837,normalize test timeouts,"Various tests generally produce ""slow"" warnings.  The ""slow"" threshold is based on a fraction of the timeout setting, unless it is otherwise supplied.
The timeout setting is set to a default of 200ms as per mocha.opts.  This is generally OK for unit tests, but inappropriate for anything invoking Mocha itself.
However, there are various overrides in Makefile and the test files themselves; let's find a single place to put them all, and avoid one-off settings, if possible.
It's important to note that our tests run much more slowly on AppVeyor.  That should be the baseline for timeout values--not your MacBook Pro. 😉",boneskull,MEMBER,2017-05-27 18:02:27+00:00,False,,,,3,2,2017-08-25 21:46:53+00:00,90.16,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['developer-experience', 'help wanted', 'qa']",False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2838,better test directory organization,"The directory hierarchy of the test dir is confusing and doesn't have much relationship to how the tests are actually run.
In Makefile, our tests are put into many different buckets.  This is typically because each bucket requires unique command-line options.  Some options (such as setting the interface) cannot be set from tests themselves, so we have to split them up in this manner.
Let's rearrange these files into directories which correspond to the divisions as in Makefile.",boneskull,MEMBER,2017-05-27 18:06:02+00:00,True,2017-06-04 12:21:30+00:00,7.76,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2839,run Mocha's tests concurrently,"I don't see why we couldn't leverage something like concurrently to run our Node.js-based tests concurrently, since we have to invoke Mocha many different times for each type of test.",boneskull,MEMBER,2017-05-27 18:09:33+00:00,False,,,,4,2,2017-10-31 11:41:58+00:00,156.73,osalama7,NONE,0,0,0,2,"['developer-experience', 'help wanted', 'qa']",False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2840,fix broken phantomjs test execution,"At some point we wound up running PhantomJS v2.x, which is why 93392dd happened.
But this was erroneous--we should still be running PhantomJS v1.9.8 to assert compatibility.  And no, I still can't run that version on macOS Sierra.
93392dd should be reversed.  karma-phantomjs-launcher installs PhantomJS v2.x since v1.0.1, and I think this doesn't play nicely with npm v4+.  It should be downgraded.",boneskull,MEMBER,2017-05-27 18:45:29+00:00,True,2017-05-27 19:51:11+00:00,0.05,,2,2,2017-05-27 18:46:07+00:00,0.0,boneskull,MEMBER,1,1,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2843,move BUILDTMP/mocha.js to .karma/<build>/mocha.js,"...because this directory already exists, and the contents are shipped to S3 for debugging in CI.  It would be helpful to have the built mocha.js which the tests run against available as an artifact.",boneskull,MEMBER,2017-05-27 20:00:05+00:00,True,2017-06-04 21:09:48+00:00,8.05,,1,2,2017-05-27 20:05:57+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2844,diffing has non-obvious output when expected and actual stringify identically,"I execute this code:
    const v1 = vector.Vector(1,1);
    const v2 = vector.Vector(1,1);
    assert.deepEqual(v1, v2);

with this command mocha --inline-diffs
and get this error:
  AssertionError: { x: 1,
  y: 1,
  magnitude: [Function: magnitude],
  mult: [Function: mult] } deepEqual { x: 1,
  y: 1,
  magnitude: [Function: magnitude],
  mult: [Function: mult] }
  actual expected

  1 | {
  2 |   ""magnitude"": [Function]
  3 |   ""mult"": [Function]
  4 |   ""x"": 1
  5 |   ""y"": 1
  6 | }

http://imgur.com/KbMoaix
^Image of output
Why am I not getting two different object with color highlighting?",SaarLevy,NONE,2017-05-28 19:42:14+00:00,False,,,,3,10,2017-05-29 19:08:05+00:00,0.98,ScottFreeCode,CONTRIBUTOR,1,1,0,1,"['confirmed-bug', 'needs-feedback']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2845,npm test doesn't work from WebStorm interface,"WebStorm provides an interface to run tests by click:

But when I run tests this way, one of them is broken, because WebStorm's console prints colored text:
1) Mocha should not output colors to pipe:

      Uncaught AssertionError: false == true
      + expected - actual

      -false
      +true
      
      at test/color.spec.js:15:7
      at ChildProcess.exithandler (child_process.js:204:7)
      at maybeClose (internal/child_process.js:827:16)
      at Socket.<anonymous> (internal/child_process.js:319:11)
      at Pipe._onclose (net.js:477:12)",Elergy,CONTRIBUTOR,2017-05-30 19:11:42+00:00,True,2017-10-16 13:24:11+00:00,138.76,,2,4,2017-05-30 19:12:36+00:00,0.0,Elergy,CONTRIBUTOR,1,1,0,1,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2847,How to pull array values in post body request,Can anyone suggest a method to pull array values dynamically from and post in post body request along with other parameters.,kvb6682,NONE,2017-05-31 06:56:34+00:00,True,2017-05-31 23:36:06+00:00,0.69,,3,2,2017-05-31 19:50:13+00:00,0.54,kunagpal,CONTRIBUTOR,0,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2849,mocha/test/browser/index.html doesn't find array.js,"Reproducing:
open mocha/test/browser/index.html with Chrome Dev Tools :",PopradiArpad,CONTRIBUTOR,2017-05-31 15:02:55+00:00,True,2017-10-26 20:25:28+00:00,148.22,,2,2,2017-06-07 04:03:48+00:00,6.54,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2851,Suggestion: Add issue and pull request templates,"Sample reference:
https://github.com/atom/atom/blob/master/PULL_REQUEST_TEMPLATE.md
https://github.com/atom/atom/blob/master/ISSUE_TEMPLATE.md",kunagpal,CONTRIBUTOR,2017-05-31 19:56:16+00:00,True,2017-09-03 21:44:55+00:00,95.08,,2,3,2017-06-02 05:40:42+00:00,1.41,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['chore', 'developer-experience', 'documentation']",True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2852,Mocha making uncaughtExceptions unreadable,"Version 3.4.2
Given the following file with a syntax error:
let a = {1,2,3}

If this file is run with mocha, it outputs this completely unreadable block of text:

error: uncaughtException: Unexpected token , date=Wed May 31 2017 16:10:09 GMT-0700 (PDT), pid=22316, uid=26283, gid=100, cwd=/home/redacted/dev/workspace/example/packages/example-project, execPath=/usr/bin/node, version=v6.10.3, argv=[/usr/bin/node, /usr/lib/node_modules/mocha/bin/_mocha, test/, --recursive], rss=26505216, heapTotal=18911232, heapUsed=9472600, external=108709, loadavg=[0.0771484375, 0.07080078125, 0.072265625], uptime=5424230, trace=[column=10, file=vm.js, function=createScript, line=56, method=null, native=false, column=10, file=vm.js, function=Object.runInThisContext, line=97, method=runInThisContext, native=false, column=28, file=module.js, function=Module._compile, line=542, method=_compile, native=false, column=10, file=module.js, function=Object.Module._extensions..js, line=579, method=Module._extensions..js, native=false, column=32, file=module.js, function=Module.load, line=487, method=load, native=false, column=12, file=module.js, function=tryModuleLoad, line=446, method=null, native=false, column=3, file=module.js, function=Function.Module._load, line=438, method=Module._load, native=false, column=17, file=module.js, function=Module.require, line=497, method=require, native=false, column=19, file=internal/module.js, function=require, line=20, method=null, native=false, column=27, file=/usr/lib/node_modules/mocha/lib/mocha.js, function=null, line=222, method=null, native=false, column=null, file=null, function=Array.forEach, line=null, method=forEach, native=true, column=14, file=/usr/lib/node_modules/mocha/lib/mocha.js, function=Mocha.loadFiles, line=219, method=loadFiles, native=false, column=10, file=/usr/lib/node_modules/mocha/lib/mocha.js, function=Mocha.run, line=487, method=run, native=false, column=18, file=/usr/lib/node_modules/mocha/bin/_mocha, function=, line=459, method=null, native=false, column=32, file=module.js, function=Module._compile, line=570, method=_compile, native=false, column=10, file=module.js, function=Object.Module._extensions..js, line=579, method=Module._extensions..js, native=false, column=32, file=module.js, function=Module.load, line=487, method=load, native=false, column=12, file=module.js, function=tryModuleLoad, line=446, method=null, native=false, column=3, file=module.js, function=Function.Module._load, line=438, method=Module._load, native=false, column=10, file=module.js, function=Module.runMain, line=604, method=runMain, native=false, column=7, file=bootstrap_node.js, function=run, line=390, method=null, native=false, column=9, file=bootstrap_node.js, function=startup, line=150, method=null, native=false, column=3, file=bootstrap_node.js, function=null, line=505, method=null, native=false], stack=[/home/redacted/dev/workspace/example/packages/example-project/test/unit/lib/test_consumer.js:19, let a = {1,2;3},           ^, SyntaxError: Unexpected token ,,     at createScript (vm.js:56:10),     at Object.runInThisContext (vm.js:97:10),     at Module._compile (module.js:542:28),     at Object.Module._extensions..js (module.js:579:10),     at Module.load (module.js:487:32),     at tryModuleLoad (module.js:446:12),     at Function.Module._load (module.js:438:3),     at Module.require (module.js:497:17),     at require (internal/module.js:20:19),     at /usr/lib/node_modules/mocha/lib/mocha.js:222:27,     at Array.forEach (native),     at Mocha.loadFiles (/usr/lib/node_modules/mocha/lib/mocha.js:219:14),     at Mocha.run (/usr/lib/node_modules/mocha/lib/mocha.js:487:10),     at Object. (/usr/lib/node_modules/mocha/bin/_mocha:459:18),     at Module._compile (module.js:570:32),     at Object.Module._extensions..js (module.js:579:10),     at Module.load (module.js:487:32),     at tryModuleLoad (module.js:446:12),     at Function.Module._load (module.js:438:3),     at Module.runMain (module.js:604:10),     at run (bootstrap_node.js:390:7),     at startup (bootstrap_node.js:150:9),     at bootstrap_node.js:505:3]

On the other hand, running the file with just node gives us this clear and useful output:
let a = {1,2,3}
          ^
SyntaxError: Unexpected token ,
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:390:7)
    at startup (bootstrap_node.js:150:9)

If anything, mocha should make error reporting clearer, not obfuscate the problem. At the very least, there should be an option to disable error reporting for uncaughtExceptions.",jmwilkinson,NONE,2017-05-31 23:29:13+00:00,True,2017-06-02 15:26:24+00:00,1.66,,2,3,2017-06-02 03:27:53+00:00,1.17,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2853,Don't depend on macaddress,This issue is almost a year old.,stevenvachon,NONE,2017-06-02 15:47:48+00:00,True,2017-06-02 17:10:51+00:00,0.06,,2,2,2017-06-02 16:25:23+00:00,0.03,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2854,Q: proper way to create a test case in the suite that's already running?,"I am implementing a tool for combinatorial reachability testing of asynchronous code -- https://github.com/MaxMotovilov/cort. It operates by running a test case repeatedly to execute all valid permutations of its explicitly declared asynchronous steps. Because of that, individual runs of the same case have to be registered with the reporting platform dynamically, not knowing in advance how many will there be (a while loop, not a for loop).
The trouble I run into when trying to integrate it with Mocha is that at a point where test case is running, list of tests to be executed within the suite is already inaccessible. The best solution I came up with so far is a fairly nasty monkey patch: replace suite.tests.slice with a function that would return an in-place window into suite.tests so that the execution loop can be extended while it's still running. Simplified sample code is below; I would very much like to know of a better way to achieve the same end if it exists.
class InPlaceSlice extends Array {
	constructor( from ) {
		super( ...from );
	}

	slice( from, to ) { return new Window( this, from, to ) }
}

describe( ""Dynamic test creation"", function() {	

	this.tests = new InPlaceSlice( this.tests );

	var total = 3, suite = this;

	it( testName(), function myTest( done ) {
		setImmediate( () => {
			if( --total > 0 ) {
				suite.addTest( new this.test.constructor( testName(), myTest ) );
			}
			done();
		} );
	} );

	function testName() {
		return ""Should create "" + (total-1) + "" more tests asynchronously""	
	}
} );

class Window {
	constructor( array, from, to ) {
		this.array = array;
		this.from = from || 0;
		this.to = to;
	}

	shift() {
		return this.array[ this.from++ ]
	}

	get length() {
		return this.end - this.from
	}

	get end() {
		return this.to == null ? this.array.length : this.to < 0 ? this.array.length + this.to : this.to
	}
}",MaxMotovilov,NONE,2017-06-02 16:05:59+00:00,True,2017-06-12 01:20:00+00:00,9.38,,2,8,2017-06-02 16:21:11+00:00,0.01,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2855,Exit code and test summary clarity request,"Maybe I'm the only one who does this but when npm told me that
npm ERR! api@1.0.0 test: `mocha --compilers js:babel-core/register --recursive --colors`
npm ERR! Exit status 40

And then
npm ERR! api@1.0.0 test: `mocha --compilers js:babel-core/register --recursive --colors`
npm ERR! Exit status 5

I started googling for the exit code meanings e.g. ""mocha exit code 40"". I expected one of them to mean that the tests had an unhandled exception, perhaps the other had an unawaited promise, maybe there was another for failed tests, and another for warnings. Maybe it was a bit mask. I don't know. I would never have guessed that it's the amount of tests failed until I googled and found this:
#2438
I assumed there was no output depicting the amount of tests failing because it was buried in between the full test output and the failure output. Which brings me to the feature request. Please print the total succeeded/failed summary at the very bottom of the output. Also more prominent banners between sections would be nice.
I would request that the exit code was just 1 when the tests fail, but I believe that will break backwards compat more than it's worth.",ubershmekel,NONE,2017-06-02 22:24:04+00:00,True,2017-10-06 05:06:53+00:00,125.28,,3,4,2017-06-22 13:51:52+00:00,19.64,mlucool,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2856,when i import file of css.web.js，how should i config the extensions ?,"i use listView for antd-mobile in my project.but it depend css for antd-mobile/lib/list-view/style/css.web.js，how should i run to test?
import { ListView } from 'antd-mobile';
Error: Cannot find module 'antd-mobile/lib/list-view/style/css'
at Function.Module._resolveFilename (module.js:339:15)
at Function.Module._load (module.js:290:25)
at Module.require (module.js:367:17)
at require (internal/module.js:16:19)",GZWZC,NONE,2017-06-03 01:35:24+00:00,True,2017-10-15 03:01:24+00:00,134.06,,1,1,2017-10-01 02:12:49+00:00,120.03,stale,NONE,0,0,0,1,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2857,"After Node 8 release, ""after"" hook issue","I am not sure whether Node 8.0.0 broke Mocha or Node broke itself, but here is my problem:

For node-fetch we use mocha before and after hook to launch and stop a simple local test server. The code is deliberately simple.

function TestServer() {
	this.server = http.createServer(this.router);
	this.port = 30001;
	this.hostname = 'localhost';
	this.server.on('error', function(err) {
		console.log(err.stack);
	});
	this.server.on('connection', function(socket) {
		socket.setTimeout(1500);
	});
}

TestServer.prototype.start = function(cb) {
	this.server.listen(this.port, this.hostname, cb);
}

TestServer.prototype.stop = function(cb) {
	this.server.close(cb);
}

As you can see there is a stop() method that invokes server.close() with callback. This is how we actually use them.

describe('node-fetch', function() {

	before(function(done) {
		local = new TestServer();
		base = 'http://' + local.hostname + ':' + local.port;
		local.start(done);
	});

	after(function(done) {
		local.stop(done);
	});

//...

});
Now my issue: after Node 8.0.0 release, we realise what was working before now leaves an error on Travis CI.


node-fetch ""after all"" hook:
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.


I can't imagine closing a server would take that long, so my guess is either:

Node 8.0.0 somehow changed how fast server is closed.
Mocha done() in after hook is somehow broken.
Travis CI is fucked up (I have tried restarting the job, same result).

If anyone have been experimenting with this, please let me know, thx!",bitinn,NONE,2017-06-03 05:26:43+00:00,True,2017-06-03 06:36:17+00:00,0.05,,2,3,2017-06-03 06:36:17+00:00,0.05,boneskull,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2859,upgrade debug,There's a vulnerability in ms.  See #2710 etc.,boneskull,MEMBER,2017-06-03 06:00:11+00:00,True,2017-06-17 01:13:49+00:00,13.8,,1,0,,,,,0,0,0,0,['security'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
2862,Automate tests in browser HTML files,"Our test suite contains a folder ""browser"" full of HTML files. The ones I've seen typically take other test files (which are run by our automated process) and demonstrate using them manually in the browser. It would be great to find a way to programmatically test these pages, however -- the tests themselves are covered under Karma/Sauce, but the way of including them in an HTML page with the HTML reporter would be great to have an automated test for.",ScottFreeCode,CONTRIBUTOR,2017-06-04 00:11:49+00:00,False,,,,1,1,2017-10-02 00:44:11+00:00,120.02,stale,NONE,0,0,0,1,"['browser', 'chore', 'needs-review', 'nice-to-have', 'qa']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
2866,"Explanation of running tests in browser lacks details, full working source code","I've been trying very hard to make this do something: https://mochajs.org/#running-mocha-in-the-browser. There isn't enough information for a beginner to fully understand what is going on, and I'm trying to make a list of all the questions I had.

The tests are not included.
How would I run the examples without a CDN? Even though I am using a browser, there is no guarantee that a CDN is available or will continue to be available in the future, or that I even have a network connection.
What are the non-Mocha CDN libraries for? Are they required?
How do I indicate to Mocha where my test files are and which ones to run?
Ideally I would like my tests to be runnable both in the browser and from the console. Is this possible?

Can these script tags have some more explanation? Up until now, this naming scheme has not been introduced in the documentation. What is the contents of these files?
<script src=""test.array.js""></script>
<script src=""test.object.js""></script>
<script src=""test.xhr.js""></script>",wmakley,NONE,2017-06-04 15:27:00+00:00,False,,,,4,5,2017-06-05 20:39:36+00:00,1.22,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2867,fix false positives in CI,First bad revision is e00d27b.  Probably something to do with either Node.js 8 or npm v5.,boneskull,MEMBER,2017-06-07 18:53:24+00:00,True,2017-06-16 19:33:53+00:00,9.03,,1,0,,,,,0,0,0,0,"['confirmed-bug', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2871,Suggestion: Automate greenkeeper pull request management,https://github.com/greenkeeper-keeper/reference-instance,kunagpal,CONTRIBUTOR,2017-06-10 13:56:19+00:00,True,2017-10-06 05:06:09+00:00,117.63,,2,1,2017-10-06 05:06:08+00:00,117.63,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2873,HTML reporters fails,"I tried to use html reporters but it failed. The doc reporter works fine.
mocha -s 1 -R html > report.html

The error trace is
  var div = document.createElement('div');
            ^

ReferenceError: document is not defined
    at fragment (/Users/xgwang/.nvm/versions/node/v8.0.0/lib/node_modules/mocha/lib/reporters/html.js:285:13)
    at new HTML (/Users/xgwang/.nvm/versions/node/v8.0.0/lib/node_modules/mocha/lib/reporters/html.js:57:14)
    at Mocha.run (/Users/xgwang/.nvm/versions/node/v8.0.0/lib/node_modules/mocha/lib/mocha.js:501:18)
    at Object.<anonymous> (/Users/xgwang/.nvm/versions/node/v8.0.0/lib/node_modules/mocha/bin/_mocha:469:18)
    at Module._compile (module.js:569:30)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Function.Module.runMain (module.js:605:10)
    at startup (bootstrap_node.js:158:16)
    at bootstrap_node.js:575:3

I'm using Mocha 3.4.2 with node v8",xg-wang,NONE,2017-06-11 17:24:23+00:00,True,2017-06-14 02:38:52+00:00,2.39,,2,1,2017-06-14 02:38:52+00:00,2.39,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2875,"FYI: a tool for exhaustive (combinatorial) testing of async code, now integrated with Mocha","With gratitude to Scott Santucci for explanations and helpful suggestions.
Cort is a tool (library) for exhaustive enumeration of all possible event sequences in asynchronous test cases. Version 0.2.0 supports integration with Mocha 3+; the two examples in the readme are Mocha test cases.
npm install cort-unit

Questions, suggestions for improvement and especially bug reports are very welcome.",MaxMotovilov,NONE,2017-06-12 01:29:30+00:00,True,2017-10-06 05:05:32+00:00,116.15,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2878,Mocha doesn't respect command line `--timeout 10000` setting,"Like title indicated, I use mocha with istanbul, previously(end of last year) it works totally fine, but don't know since when, mocha start not respecting the global command line --timeout 10000 setting.
""scripts"": {
   ""test"": ""./node_modules/istanbul/lib/cli.js cover ./node_modules/.bin/_mocha --check-leaks --timeout 10000 --sort ./test/index.js""
}

Like above, then it will report: Warning: Could not find any test files matching pattern: 10000
""scripts"": {
   ""test"": ""./node_modules/istanbul/lib/cli.js cover ./node_modules/.bin/_mocha --check-leaks --timeout=10000 --sort ./test/index.js""
}

Like above, no that warning, but got bunches of error due to the test cases timeout:
Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.

it just all goes back to the default 2000ms default setting.
And I updated to the latest release 3.4.2, still exactly same error happens.
@Munter @ScottFreeCode @kunagpal @boneskull  pls help to fix.",lnshi,NONE,2017-06-12 02:30:32+00:00,True,2017-06-12 07:34:31+00:00,0.21,,2,2,2017-06-12 06:13:35+00:00,0.15,kunagpal,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2879,Do not force exit of a process (by default),"I'm talking about behaviour that can be switched off with --no-exit option.
Having this as default looks dangerous, as it may hide serious issues in tests (any orphaned async flow is just silenced, leaving no clue to developer)
e.g. on my side I had a promise with crashing test not returned properly. Still test process as handled by mocha was exiting smiling with a success. It took me a while to figure out why it happens.",medikoo,NONE,2017-06-12 13:43:55+00:00,True,2017-10-01 02:18:39+00:00,110.52,,5,11,2017-06-12 14:27:24+00:00,0.03,michaelBenin,NONE,1,1,0,3,"['help wanted', 'semver-major']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
2880,npm install error,"Hi,
I am getting this error when trying to install mocha:
npm ERR! Darwin 15.6.0
npm ERR! argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""mocha"" ""--save""
npm ERR! node v6.10.2
npm ERR! npm  v3.10.10
npm ERR! code ETARGET
npm ERR! notarget No compatible version found: balanced-match@^1.0.0
npm ERR! notarget Valid install targets:
npm ERR! notarget 0.4.2, 0.4.1, 0.4.0, 0.3.0, 0.2.1, 0.2.0, 0.1.0, 0.0.1, 0.0.0
npm ERR! notarget
npm ERR! notarget This is most likely not a problem with npm itself.
npm ERR! notarget In most cases you or one of your dependencies are requesting
npm ERR! notarget a package version that doesn't exist.
npm ERR! notarget
npm ERR! notarget It was specified as a dependency of 'brace-expansion'
npm ERR! notarget
I've checked ""brace-expansion"" and it looks like it is currently using 1.0.0 which is throwing the error.
Help!",fmegclark,NONE,2017-06-12 15:41:13+00:00,True,2017-06-12 20:50:42+00:00,0.21,,1,2,2017-06-12 16:03:24+00:00,0.02,fmegclark,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2882,replace uses of should with expect.js,"Most of the tests are written using expect.js or assert.  A small handful are using should, which requires ES5.
I can't determine any reason why we're using multiple assertion libraries other than to assert we can use multiple assertion libraries.  If that's the case, we should be explicit about it instead.
Currently we have some failing tests because of f20de56, which passed CI due to false positives (see #2867).",boneskull,MEMBER,2017-06-14 02:38:00+00:00,True,2017-06-16 19:33:53+00:00,2.71,,2,5,2017-06-14 02:52:51+00:00,0.01,boneskull,MEMBER,1,1,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2883,in-browser coverage numbers,"We have coverage numbers, but only in Node.js.  I'd like to see the coverage numbers against tests run with Karma.
Gathering coverage from Karma seems fraught with peril.
I would entertain other suggestions to improve how we run browser-based tests.  My only requirement is that the tests run in a strict browser-like environment--jsdom shenanigans or Electron won't do.",boneskull,MEMBER,2017-06-14 06:18:02+00:00,False,,,,2,3,2017-06-15 21:10:27+00:00,1.62,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['browser', 'developer-experience', 'qa']",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2884,gather anonymous usage metrics,"Before anyone jumps down my neck, this would be strictly opt-in, like Yeoman.  Some of you may hate this idea anyway.  That said, I think it's important to be transparent about what information we'd be gathering and why it's useful.
In a nutshell, we should know where Mocha is being used, and how it's used.  This will inform how we spend maintenance resources.
For example:
We want to know what language users of Mocha speak in order to start thinking about translating documentation and i18n.  Off the top of my head, there are two ways to gather this.  One is detecting the language via browser or command-line environment.  Another is GeoIP.
I don't need the IP addresses of anyone, but it'd be helpful to have an idea of what country, so we could guess at the native language of a Mocha user.  VPN usage will dirty this data.  Likewise, not every user configures their OS or browser to use their native tongue.
These are imperfect solutions, but they are better than what we currently have, which is nothing.

Another is ""what environment is Mocha running in?""  If it's a browser, which one?  If it's Node.js, which version?  What tools is it used with?  Are we using Babel or TypeScript alongside it?  What assertion library?
A useful question (which may not be answerable) is ""are we running unit tests or functional tests?""
How do users structure their tests?  How many tests do they run?  How many people actually use the QUnit interface or Nyan reporter??
What percentage of our users are using Mocha to test proprietary codebases?

It's possible we could query GitHub or use BigQuery and get at some of this information by analyzing public repositories.  It'd be cool to chat with a data scientist if anybody knows one.  ;)
Insofar as implementation details, we will need a data store.  Yeoman consumes Google Analytics, which I'd rather not use.  This has the potential to be a substantial amount of data; it might be cost-prohibitive to run our own, say, Graphite server.
Be sure to disable if Travis, Jenkins, Snap, TeamCity, Bamboo, Circle CI, etc., is encountered.",boneskull,MEMBER,2017-06-14 06:35:10+00:00,False,,,,2,1,2017-06-14 15:10:13+00:00,0.36,j-f1,NONE,0,0,0,1,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2887,Not able to run Mocha tests with node-schedule npm module,"I've setup a suite of tests in mocha using Sinon and Chai.
What I'm aiming for is that the tests will run daily and then email the results to my team.
So I installed below npm modules,
--> node-schedule: To run tests daily
--> mocha-runner-reporter: To send the test report as email.
The tests are all running and sending email as expected only first time. From second time on wards it's neither running the tests nor sending email. I have attached the sample project as well.
i'd appreciate any suggestions.
Samplecode.zip",manikumar446,NONE,2017-06-16 04:37:24+00:00,True,2017-06-19 13:06:22+00:00,3.35,,3,4,2017-06-18 15:03:11+00:00,2.43,ScottFreeCode,CONTRIBUTOR,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2888,Doesn't colorize output in Git Bash terminal,"bash.exe
Apparently colors work right:

git-bash.exe
Doesn't colorize output:

Why is it happening? How to fix it? I use git-bash.exe in my work, so it wold be great if you explain how to fix the issue.",wzup,NONE,2017-06-16 04:54:53+00:00,True,2017-10-06 05:05:11+00:00,112.01,,5,3,2017-06-16 05:03:58+00:00,0.01,ScottFreeCode,CONTRIBUTOR,0,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2890,Mocha's hanging CI browser tests,"Of late, there has been a failure in CI that looks like a browser flake... except that it's far too consistent to be a flake. Doesn't always happen, but usually does, and always the same browsers (and usually the same point in the test). It seems like the browser hangs or something -- Sauce disconnects with a timeout of 20,000ms partway through the testsuite.
It's blocking #2886, notably, but some testing determined that it affected the commits there even before coverage was actually added, so it seems to be something that coverage makes more likely to happen but isn't the sole cause.
I have had a... cryptic breakthrough, inasmuch as while I was experimenting with something else I accidentally wound up reproducing a hang in PhantomJS with Node 8.0.0 at the same points where Sauce is disconnecting. I do not know what about my local experiment triggerred this, and am going to move further experimentation to a new checkout of Mocha to ensure this one stays where it can reproduce the hangy issue.
Here's what I have been able to discover:

In Travis, it occurs for Edge, IE7 and Safari.
It seems like it may happen more consistently with my PR of adding coverage to Karma runs, but it has happened to builds that lack those changes as well (e.g. master, other PRs).
Both in travis and locally, it happens after printing the success result for should format functions saved in windows style - spaces and for the last unit test.
Adding console.logs to later tests indicates that, when it hangs after the ""- spaces"" test, not only is the next test started, but many more tests are actually run even though no more get their results printed; however, at some point there is a test that is never console.logged, thus indicating that it also stops running tests somewhere along the line.
The point at which it actually stops running tests does not seem to be consistent.
Adding console.logs may affect the point where it stops running tests and/or whether the issue occurs at all. It's hard to tell for sure. Sometimes it changes after I add a console.log and then changes back when I remove that console.log; other times it changes after I add a console.log and does not change back when I remove it.
On the theory that the continued running of tests past the point where the reporter ceases output suggest that output is somehow gummed up and perhaps the system hangs for real when buffers waiting for the output to ungum finally fill up, I tried upgrading the two things that I presume affect output: karma and karma-spec-reporter. Results were much like adding console.logs: it seems like these upgrades may affect whether and when the issue occurs, but niether one (nor even both together) consistently eliminates the issue.
By saving the Browserify bundle of the test files, I see that the tests when this issue occurs (where I've been adding console.logs) is not minified or obfuscated, so it is unlikely to be due to a bug in bundling that the exact code affects nondeterministically. At least, I think so anyway.

I feel just as stuck as before, but maybe this information will ring a bell to somebody.",ScottFreeCode,CONTRIBUTOR,2017-06-18 05:20:09+00:00,True,2017-09-28 18:02:03+00:00,102.53,,2,9,2017-06-19 04:21:11+00:00,0.96,ScottFreeCode,CONTRIBUTOR,1,1,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2891,Possibly speed up dev-dependency installs?,"I've probably been watching too many Travis builds lately, but it seems like at least half (and sometimes most) of the two to five minutes taken by non-browser jobs is just installing through NPM. With several times as many jobs in our build matrix as Travis allows us to run at once, this can really slow each build down a lot. Mocha installs quickly enough as a dependency of other projects, it's all those dev dependencies that make its own CI installs (and local development installs) sloooow.
Caching may or may not be a viable strategy to speed any of that up -- obviously we want to reinstall cleanly if anything that could affect it changes, and obviously running on so many different environments there isn't going to be a whole lot of opportunity to share an install between multiple jobs even in the same build. I suppose all the Node 8 environments could be sped up by sharing an NPM cache (not the install itself but the cache NPM uses to install from), but that still leaves the variety of non-browser Node test jobs...
However, not all of our dev dependencies are actually needed by all jobs. Could we perhaps make them optional dev dependencies and install them where they're needed? Is optional dev dependencies a thing?
Here's what I believe are prematurely pessimizing our installs by being downloaded in all of them:

watchify appears to be referenced nowhere in our codebase except package.json; unless I've missed something, we can just remove it
eslint and eslint-* are only used in the lint job to my knowledge
the following are only used in browser jobs, to my knowledge:

browserify
browserify-istanbul (in my browser coverage branch/PR)
karma
karma-*
os-name? the one place I know it's being used is to determine whether to use Phantom or Chrome in a non-Sauce browser test
rimraf? (nope, that's actually being used in a node-only test, and if we want to get off the Makefile we'll probably need rimraf to clean the build before publishing as well as before at least some testing)
through2


the following are only used in the PhantomJS browser job, to my knowledge:

phantomjs
karma-phantomjs-launcher


karma-sauce-launcher is only used in Sauce browser jobs, to my knowledge
karma-chrome-launcher is used if somebody runs the browser tests locally on Mac, but not in CI as far as I can tell
the following are used in CI, extensively with my coverage enhancements, but might not be needed locally unless you want to generate coverage reports:

coveralls
istanbul-combine
nyc



Obviously, whatever makes these get pulled in for the relevant CI would also need to happen for local uses of them in order for us to be able to not download them by default...
And if there's no optional dev dependencies, then removing them from package.json may be dubious anyway (they'd be depended upon but untracked...).
Anywho, I figured I'd throw the idea out there and see if anybody wants to look into it further. It would be awesome to bring the install time down, both locally and to speed up CI builds; but it would depend on really being able to get this all correct...",ScottFreeCode,CONTRIBUTOR,2017-06-18 06:06:11+00:00,False,,,,5,13,2017-06-18 11:00:43+00:00,0.2,j-f1,NONE,0,2,0,3,"['chore', 'developer-experience', 'help wanted']",True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2892,Empty error in before/after hook,"Trying to get mocha error stack.
2) Menus: when a Print Group is added to a Menu Item: ""after all"" hook:
     ReferenceError: updateMenuItem is not defined
      at module.exports (node_modules/fuzzball-core/lib/helpers/menu_items.js:35:22)
      at Context.<anonymous> (medium_tests/menus/print_group_publishing_test.js:100:7)

when suite fails in before or after hooks.
getting empty error obj instead.
failed test {
  ""title"": ""\""after all\"" hook"",
  ""body"": ""function (done) {\n      var errors;\n      Items()\n      menuItems()\n        .updateMenuItem({\n          menuID: menuDefault,\n          menuItemID: menuItemDefault,\n          printGroupID: null\n        })\n        .exec()\n        .catch(function (err) {\n          errors = err;\n        })\n        .then(function () {\n          done(errors);\n        });\n    }"",
  ""async"": 1,
  ""sync"": false,
  ""timedOut"": false,
  ""pending"": false,
  ""type"": ""hook"",
  ""parent"": ""#<Suite>"",
  ""ctx"": ""#<Context>"",
  ""timer"": {
    ""0"": null
  },
  ""duration"": 1,
  ""state"": ""failed"",
  ""err"": {}
}


var mochaOptions = { ui: 'bdd', timeout: 15000, reporter: JsonReporter };
  mocha.reporters.Base.call(this, runner);
runner.on('fail', function (test) {
  console.log(test);
}
}",sdiachenko,NONE,2017-06-19 20:26:34+00:00,True,2018-02-17 06:16:57+00:00,242.41,,2,2,2017-10-06 05:04:28+00:00,108.36,boneskull,MEMBER,1,0,0,1,"['needs-mcve', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
2893,browser reporter suite unhide is broken (only unhides half the suites),"Found out exactly what's going on in #2754: the HTMLCollection returned by document.getElementsByClassName, at least in some browsers, actually drops elements that get their className changed such that they no longer match the criteria on which the collection was based; thus, Mocha will only unhide the first half of the hidden suites or every other one of them.
#2754 attempted to fix this by converting the collection to an array. Currently Mocha runs in some pretty old environments. If we have a shim for the array slice method we should use that rather than assuming the native [].slice. If we don't have such a shim, we should simply reverse the for loop: start at .length - 1 and decrement while >= 0 instead of starting at 0 and incrementing while < .length.
(We should also get a test for the unhiding of more than one suite. I will incorporate this into my work on testing the HTML reporter and mark it as .skip until a fix can also be PR'd.)
I'd like to thank @ZeroBinbin for bringing this to our attention, and apologize for taking so long to get around to digging into it.",ScottFreeCode,CONTRIBUTOR,2017-06-20 04:05:16+00:00,False,,,,2,1,2017-11-19 19:53:53+00:00,152.66,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['browser', 'confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2894,How to bail only failed describe() in nested describe() ?,"My test structure is as follows
describe('Test Suite'){
     describe('First Test Case'){
        it('1st step'){};
        it('2nd step'){};
        it('3rd step'){};
    }
     describe('SecondTest Case'){
        it('1st step'){};
        it('2nd step'){};
        it('3rd step'){};
    }
}

I want to use --bail such that if inside First Test Case any it() fails then that describe() should be bailed.But the Second Test Case should run.
I am getting the expected result by using:
describe('Test Suite'){
     this.bail(false)
     describe('First Test Case'){
        this.bail(true);
        it('1st step'){};
        it('2nd step'){};
        it('3rd step'){};
    }
     describe('SecondTest Case'){
        this.bail(true);
        it('1st step'){};
        it('2nd step'){};
        it('3rd step'){};
    }
}

Is there any other way to do it without explicitly assigning bail to true in each describe()?",shashikumarraja,NONE,2017-06-20 06:16:13+00:00,True,2018-02-17 06:16:56+00:00,242.0,,4,6,2017-08-24 20:38:05+00:00,65.6,artyomtrityak,NONE,1,0,0,3,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2895,Warning: Could not find any test files matching pattern:,"Why the plugin doesn't see files when files 100% exist in my test folder?
I want to run test for certain files only.
How do I do it with mocha?
My set up:
// test folder. Files are the same. Changed name for the sake of showing you an error
/test
    nock.js
    nock_test.js

// package.json
""scripts"": { ""test"": ""mocha"" }

None of these work. All throw the same error:
$ npm test nock
$ npm test nock.js
$ npm test nock_test
$ npm test nock_test.js

Error:

Warning: Could not find any test files matching pattern: nock
Warning: Could not find any test files matching pattern: nock.js
Warning: Could not find any test files matching pattern: nock_test
Warning: Could not find any test files matching pattern: nock_test.js
No test files found
npm ERR! Test failed.  See above for more details.

How it can be? No test files matching pattern? It is not even a pattern! It is exactly a file name.
How to run it?",wzup,NONE,2017-06-20 15:58:04+00:00,True,2018-04-07 19:59:39+00:00,291.17,,9,10,2017-06-21 01:33:43+00:00,0.4,ScottFreeCode,CONTRIBUTOR,2,1,0,5,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2896,isolate-000000233DCD5DB0-v8.log - what file is this?,"Everytime I run a mocha test, such a log file is created in my app root directory.
$ npm test test/file.test.js

What are they? What do they do? How to set up a config so they will be saved in other directory?",wzup,NONE,2017-06-20 17:58:18+00:00,True,2017-10-06 05:00:18+00:00,107.46,,3,2,2017-06-21 01:23:10+00:00,0.31,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2899,Unexpected token ... - is the spread operator supported?,"I am running Node 8.1.0, developing in TypeScript and setting the output to ""EsNext"".
Now, I can downgrade my TypeScript output to Es2015, and this problem goes away - but I'd really like to use the spread operator.
This is the offending code:

const someObject = {
    ...someOtherObject
};


Mocha chokes on the spread operator.
Will this ever be a supported feature? What can I do to get mocha to run my program?",bryanrideshark,NONE,2017-06-21 14:33:24+00:00,True,2017-06-21 15:23:24+00:00,0.03,,2,1,2017-06-21 15:23:24+00:00,0.03,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2902,Cannot find module issue,"Error: Cannot find module 'has-flag'
    at Function.Module._resolveFilename (module.js:485:15)
    at Function.Module._load (module.js:437:25)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (/Users/niftylettuce/Public/koa-better-error-handler/node_modules/mocha/node_modules/supports-color/index.js:2:15)
    at Module._compile (module.js:569:30)
    at Module.replacementCompile (/Users/niftylettuce/Public/koa-better-error-handler/node_modules/append-transform/index.js:58:13)
    at Module._extensions..js (module.js:580:10)
    at require.extensions.(anonymous function) (/Users/niftylettuce/Public/koa-better-error-handler/node_modules/babel-register/lib/node.js:152:7)
    at Object.<anonymous> (/Users/niftylettuce/Public/koa-better-error-handler/node_modules/append-transform/index.js:62:4)

node v8.0.0
npm v5.0.0",niftylettuce,NONE,2017-06-26 05:25:26+00:00,True,2017-11-23 00:44:15+00:00,149.8,,3,4,2017-06-26 15:03:33+00:00,0.4,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2903,Print debug logs in CI,"In Node CI tests, we should consider setting DEBUG=mocha:* to get the debug logs, if it won't interfere too much with the reporter output (and if we can find a way to deactivate it for integration tests without breaking Node 0.10, see #2897).
In browser CI tests... I don't know, we are currently suppressing the debug module using the browsers entry in package.json; most likely we can't just stop doing that because debug might not support all the old browsers Mocha supports, but maybe we could selectively convince Browserify to not do it for the BUILDTMP build and activate mocha:* for debug logging in Karma?
Why is this worth looking into? I believe getting these logs in the browser runs will show us a message that is being suppressed about #2890.",ScottFreeCode,CONTRIBUTOR,2017-06-26 16:44:04+00:00,False,,,,1,0,,,,,0,0,0,0,"['chore', 'developer-experience', 'help wanted', 'qa']",True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2905,Before/After middleware,"I would like to reduce repeatedly used before/after hooks like:
describe('...', () => {
    before(() => {
        StartSomething();
    });
    after(() => {
        StopSomething();
    });

    // ... test code
});

Could it be possible to have some kind of middleware that adds a before and after hook to a describe block? So the above code could become something like:
describe('...', () => {
    IncludeSomething()
    
    // ... test code
});

Is something like this possible today, or could block middlewares be an idea for a new feature?",henit,NONE,2017-06-29 10:20:57+00:00,True,2017-06-29 23:59:34+00:00,0.57,,2,1,2017-06-29 23:59:34+00:00,0.57,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2906,Duplicated failing test summary,"Running Mocha 3.4.2 on Node 8.1.3 (also reproducible on Node 7.6.0).
describe('mocha', function() {
  it('should report the first of multiple exceptions', function(done) {
    process.nextTick(() => {
      console.log('first');
      throw new Error('first');
    });
    process.nextTick(() => {
      console.log('second');
      done(new Error('second'));
    });
  });
});
Output:
$ mocha 


  multiple errors
first
    1) should report on multiple uncaught exceptions
second
    2) should report on multiple uncaught exceptions


  0 passing (12ms)
  2 failing

  1) multiple errors should report on multiple uncaught exceptions:
     Error: second
      at process.nextTick (test/index.js:9:12)
      at _combinedTickCallback (internal/process/next_tick.js:95:7)
      at Immediate._tickCallback (internal/process/next_tick.js:161:9)

  2) multiple errors should report on multiple uncaught exceptions:
     Error: second
      at process.nextTick (test/index.js:9:12)
      at _combinedTickCallback (internal/process/next_tick.js:95:7)
      at Immediate._tickCallback (internal/process/next_tick.js:161:9)




  0 passing (14ms)
  2 failing

  1) multiple errors should report on multiple uncaught exceptions:
     Error: second
      at process.nextTick (test/index.js:9:12)
      at _combinedTickCallback (internal/process/next_tick.js:95:7)
      at Immediate._tickCallback (internal/process/next_tick.js:161:9)

  2) multiple errors should report on multiple uncaught exceptions:
     Error: second
      at process.nextTick (test/index.js:9:12)
      at _combinedTickCallback (internal/process/next_tick.js:95:7)
      at Immediate._tickCallback (internal/process/next_tick.js:161:9)




Not only does mocha output four (!) copies of the second error, it fails to output any copies of the first error. This makes it difficult to debug tests if the second error is merely a symptom of the first.",skeggse,CONTRIBUTOR,2017-06-29 20:25:19+00:00,False,,,,5,13,2017-06-30 00:06:14+00:00,0.15,ScottFreeCode,CONTRIBUTOR,0,2,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2907,Incorrect line numbers in error stacks,"When I take my code out of mocha, the line numbers are correct, so I know that mocha is to blame.
stevenvachon/incomplete-url@9c6eb47
produces: https://travis-ci.org/stevenvachon/incomplete-url/jobs/248590761",stevenvachon,NONE,2017-06-30 00:13:18+00:00,True,2017-06-30 00:18:39+00:00,0.0,,1,1,2017-06-30 00:18:39+00:00,0.0,stevenvachon,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2909,[BUG] it.only run two test case,"it.only('send example', function *() {
      console.log(1);
    });
    it ('send example', function *() {
      console.log(2);
    });
then i got output as below
1
2",Matrixbirds,NONE,2017-07-03 07:05:40+00:00,True,2017-07-04 03:14:24+00:00,0.84,,2,2,2017-07-03 21:44:55+00:00,0.61,ScottFreeCode,CONTRIBUTOR,0,1,0,1,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2910,mocha.opts file should define the default options when using new Mocha on nodejs,"Currently, when using mocha programmatically one has to provide options like so new Mocha(options) but it would be helpful if the default options were read from the mocha.opts file which is already done when using mocha via cli.
So that new Mocha() would check for the mocha.opts file and use the options defined there by default, when used on nodejs, obviously in the browser context this is not possible.",erikvold,NONE,2017-07-04 05:50:42+00:00,False,,,,4,4,2017-10-06 04:57:09+00:00,93.96,boneskull,MEMBER,2,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
2911,Mocha done() invoked error,"done() invoked with non-Error: Log : Wait until element is visible, selector: ""#appointment .active"",
Error: done() invoked with non-Error: Log : Wait until element is visible, selector: ""#appointment .active"",
at promise.ControlFlow.runInFrame_ (eval at  (node_modules/selenium-webdriver/lib/goog/base.js:1094:19), :1857:20)
at goog.defineClass.notify (eval at  (node_modules/selenium-webdriver/lib/goog/base.js:1094:19), :2448:25)
at promise.Promise.notify_ (eval at  (node_modules/selenium-webdriver/lib/goog/base.js:1094:19), :564:12)
at Array.forEach (native)
at promise.Promise.notifyAll_ (eval at  (node_modules/selenium-webdriver/lib/goog/base.js:1094:19), :553:15)
at goog.async.run.processWorkQueue (node_modules/selenium-webdriver/lib/goog/async/run.js:125:21)",pc-snandakumar,NONE,2017-07-05 01:30:55+00:00,True,2018-01-16 18:54:52+00:00,195.72,,2,4,2017-07-05 03:33:10+00:00,0.08,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['needs-feedback', 'needs-mcve', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
2913,Update `should` vs. `expect` for `/test/unit/mocha.spec.js`,"This file was updated to expect as part of the test hierarchy reorganization, then subsequently had a pull merged to add more tests in the old format; consequently Travis is failing all browser tests and not just the handful affected by the other recent flakes.
We'll need to update the new tests from should to expect -- which will hopefully just require find-replacing/sed'ing <object>.should to expect(<object>).to, but could require more attention in a few cases depending on which specific assertions are being made.",ScottFreeCode,CONTRIBUTOR,2017-07-05 19:31:03+00:00,True,2017-07-06 02:46:02+00:00,0.3,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2914,Context mutations in `it` blocks leak into sibling `describe` blocks,"When a describe block has inner describe blocks, as well as immediate it blocks, the this context of the immediate it blocks leak to the tests in the inner describe blocks.

""tests should not leak to sibling describe blocks"" - Fail (expected: Pass) ❌

describe(""asdf"", function () {
  describe(""inner 1"", function () {
    it(""works"", function () {
      if (this.foo) {
        throw new Error('foo should not exist');
      }
    });
  });
  it(""setting foo"", function () {
    this.foo = true;
  });
});

In addition, when a describe block has inner describe blocks, as well as immediate it blocks, all in the context of some parent describe block with a beforeEach, the this context of the immediate it blocks leak to the tests in the inner describe blocks, overriding the top level beforeEach!

""tests should not leak to sibling describe blocks when a higher beforeEach exists"" - Fail (expected: Pass) ❌

describe(""asdf"", function () {
  beforeEach(function () {
    this.foo = false;
  });
  describe(""inner"", function () {
    describe(""superinner 1"", function () {
      it(""works"", function () {
        if (this.foo) {
          throw new Error('foo should not exist');
        }
      });
    });
    it(""setting foo"", function () {
      this.foo = true;
    });
  });
});

Interestingly, when beforeEach is sibling to the it block and the inner describe block, mocha works as expected: the context mutation doesn't override the beforeEach.

""tests should not leak to sibling describe blocks when a sibling beforeEach exists"" - Pass (expected: Pass) ✅

describe(""asdf"", function () {
  beforeEach(function () {
    this.foo = false;
  });
  describe(""inner 1"", function () {
    it(""works"", function () {
      if (this.foo) {
        throw new Error('foo should not exist');
      }
    });
  });
  it(""setting foo"", function () {
    this.foo = true;
  });
});",sleexyz,NONE,2017-07-05 21:48:45+00:00,True,2017-12-15 22:05:30+00:00,163.01,,4,10,2017-07-06 03:11:11+00:00,0.22,ScottFreeCode,CONTRIBUTOR,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2916,pointless function in nyancat reporter implementation,"Some of our reporters use console.log, others use process.stdout.write. Nyancat uses write. What is write?
function write (string) {
  process.stdout.write(string);
}
This isn't being used to pass process.stdout.write into anything else without having to bind it to process.stdout, it's just being called directly, so all it does is omit the text process.stdout.. Furthermore, I reviewed the file's commit history and wasn't able to find any evidence that it was ever used differently than it is now, nor was it at any point implemented differently (the only change in these three lines was to add a space after the function name), and it goes back to the reporter's original commit.
(In terms of metrics, this function plus its JSDoc adds nine lines to the file, but it's only about 150 bytes while it would be about 350 bytes to add process.stdout. to every write(...) call, thus it costs 9 lines and saves about 200 bytes. Just in case anyone cares. I don't think it matters to anything but coverage line and function counts.)
If this were something any of the other reporters were also doing, I'd chalk it up to being a preferred style; if the write function were in its own module and being used by other reporters, I'd say cool, we can make any updates to the implementation in just one place... As is, it just looks like a needless function that needlessly makes this reporter's implementation look different from the others when it really isn't. (Then again, maybe if it were var write = process.stdout.write; up front, a la x = require(""whatever"").x, I'd have a different impression despite that being technically nearly identical assuming it works at all [no binding needed].)
Anyone feel strongly for or against removing it? Part of me doesn't want to clutter the file's blame history with a change from write to process.stdout.write all over. But it seems like an obvious cleanup.",ScottFreeCode,CONTRIBUTOR,2017-07-08 18:01:52+00:00,False,,,,4,3,2017-07-09 09:12:38+00:00,0.63,ORESoftware,NONE,1,1,0,1,"['chore', 'reporter']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2917,test output order,"In #2846 it came up that some of our integration and reporter tests check multiple lines of output using a set of RegExp tests via forEach that ensures each line is present but does not ensure they are in the right order. We should find all instances of this pattern and correct it to ensure the right order somehow. (They should remain insensitive to the style of line ending used by the OS's shell/whatever...) (#2846 may need to be updated to the new style if this issue is resolved before we can merge #2846 into a semver-major release, or if this is not resolved against a semver-major branch to which #2846 is merged while awaiting such a release.)",ScottFreeCode,CONTRIBUTOR,2017-07-09 00:11:09+00:00,False,,,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2919,Windows (AppVeyor) coverage,"Besides browser coverage, there are a few environmental factors that affect the branches covered in our tests:

Environment version, inasmuch as we shim some stuff or otherwise handle outdated environments specially.
Special environments, e.g. whether the shell is or is not running in a TTY or whatever isatty is about.
Travis Linux tests vs. AppVeyor Windows tests.

The first of these is addressed as much as can be hoped by adding coverage to all Node versions' tests in the multi-coverage branch (PR #2886, it also contains coverage for the browser tests; #2900 adds tests for the browser reporter to bring the numbers back up to a new record high). The second is going to require some kind of special testing if it's possible at all. I'm opening this issue to discuss and/or track the last one.

According to this issue: lemurheavy/coveralls-public#613 it should be possible to have AppVeyor report coverage too, but (unless Coveralls has fixed this and didn't close the issue on the tracker) it will be reported as though it were a separate commit/PR/build, not merged together like how multiple jobs are automatically merged together.

We should probably go ahead and try it anyway just to see what happens -- it's possible the issue would still be better than not having those coverage numbers, or that the issue was fixed without updating the tracker; and if niether of those turns out to be the case, we can just close the PR after we see it.
If that doesn't do, we could consider switching services: lemurheavy/coveralls-public#613 (comment)
Or we could consider a (dubious) workaround: create a Node version of this hack that:

runs on Travis (could be a great opportunity to using a build stage instead of trying to shoehorn it into the test jobs or creating a test job that doesn't run tests)
waits for AppVeyor to complete
downloads the coverage report(s) from AppVeyor
fixes any Windows formatting/path issues
and then leaves us with our existing tools to do any coverage-report merging necessary and upload AppVeyor coverage to Coveralls as though it were part of the Travis job set

A variation of the latter might be to have both CI services send their reports immediately, but add COVERALLS_PARALLEL=true and have the job or stage that waits for both CI services simply trigger the associated webhook rather than doing any report downloading or merging on its own, and see if simply using COVERALLS_PARALLEL ""fixes"" lemurheavy/coveralls-public#613",ScottFreeCode,CONTRIBUTOR,2017-07-09 05:05:41+00:00,False,,,,2,2,2017-09-05 05:24:07+00:00,58.01,boneskull,MEMBER,1,1,0,0,"['developer-experience', 'qa']",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2923,Allow calling only on multiple its and describes,"Currently the first ( or a random ) block tagged .only( is executed if multiple calls of only exist.
I would like to propose adding a behavior that is more aligned to a common usecase I have:
Run all its and describes that are setup with .only(.
(Haven't yet looked in to the amount of work behind this change proposal)",danielbaak,NONE,2017-07-13 13:11:52+00:00,True,2017-07-18 08:37:07+00:00,4.81,,2,3,2017-07-13 21:20:31+00:00,0.34,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2925,--debug and --debug-brk doesn't work on node 8.x: Add support for --inspect / --inspect-brk,"Node 8.x deprecates the --debug and --debug-brk flags, and fails with the following message:
$ nvm use 8.1.4
Now using node v8.1.4 (npm v5.0.3)
$ mocha --debug-brk                                                                  
(node:18978) [DEP0062] DeprecationWarning: node --debug and node --debug-brk are invalid. 
Currently, mocha ignores --inspect and --inspect-brk.
Can we pass these through?",aneilbaboo,NONE,2017-07-14 15:34:06+00:00,True,2017-07-14 15:40:09+00:00,0.0,,2,2,2017-07-14 15:40:09+00:00,0.0,aneilbaboo,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2927,Allow before hook for specific tests,"Maybe this is already possible? But I'm not seeing it in the Docs or through Googling.
Basically.. I have a suite of tests for a method, and I utilize beforeEach() for calling the method for each test case.  The problem is, I need to manipulate things before certain test cases run and before the beforeEach() fires.
It would be really nice to have something like:
import mything from 'my-thing'
import {expect} from 'chai'

describe('my test suite', () => {
  let opts
  before(() => {
    opts = {
      foo: 'foo',
      bar: 'bar'
    }
  })

  beforeEach(() => {
    mything(opts)
  })

  it('Should do the default thing', () => {
    expect(defaultThing).to.have.happened
  })

  it('Should do something different w/ different foo', () => {
    expect(differentFooThing).to.have.happened
  }).before(() => {
    opts.foo = 'differentFoo'
  }).after(() => {
    opts.foo = 'foo'
  })

  it('Should do something else w/o bar', () => {
    expect(noBarThing).to.have.happened
  }).before(() => {
    delete opts.bar
  }).after(() => {
    opts.bar = 'bar'
  })
})
So...
A) Is there a way to accomplish this functionality in a test suite already?
B) if (A) { How can I do it? }
C) if (!A) { Does this sound like a probable feature that could be implemented? }",RavenHursT,NONE,2017-07-14 21:36:04+00:00,True,2017-10-06 04:54:58+00:00,83.3,,6,10,2017-07-14 23:09:48+00:00,0.07,ScottFreeCode,CONTRIBUTOR,1,1,0,4,"['question', 'wontfix']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2928,Does mocha watch the test files modified only?,"I use mocha -w --recursive cli to watch my test files changed.
But it will re-run all my tests, even I just modify a single test file.
I want something like just watch and re-run the modified test file tracked by git?",mrdulin,NONE,2017-07-15 08:37:53+00:00,True,2018-01-16 18:54:51+00:00,185.43,,5,9,2017-07-17 22:27:37+00:00,2.58,maraisr,CONTRIBUTOR,0,2,0,4,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2929,Using --opts flag does not make mocha.opts work as expected ,"I have used the --opts flag to change the location of the mocha.opts file location. Doing so throws an error. If erase the --opts flag and put back the file under ./test everything works fine
I get an unexpected identifier issue referencing the first line of my mocha.opts file. As stated the content is correct as it works when placed under ./test.
Below is the content of the file
--require apps.js
--recursive test",alaboudi,NONE,2017-07-16 03:11:42+00:00,True,2017-07-16 05:15:57+00:00,0.09,,2,6,2017-07-16 04:01:03+00:00,0.03,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2935,Not able to delete table and recreate it in mocha using vogels(dynamodb),"I think I am missing something very fundamental. I tried creating deleting and creating table outside. It worked. The part under beforeEach(for deleting and recreating) is not working though it does not show any error.
Here is the code that worked:

const vogels = require('vogels');
if (process.env.NODE_ENV === ""test"" || process.env.NODE_ENV === ""development"") {
    vogels.AWS.config.update({ accessKeyId: ""myKeyId"", secretAccessKey: ""secretKey"", region: ""us-west-2"" });
    vogels.dynamoDriver(new vogels.AWS.DynamoDB({ endpoint: 'http://localhost:8000' }));
} else {
    vogels.AWS.config.update({accessKeyId: process.env.AWS_ACCESS_KEY, secretAccessKey: process.env.AWS_SECRET_KEY, region: process.env.AWS_REGION});
}

function wait(ms){
    var start = new Date().getTime();
    var end = start;
    while(end < start + ms) {
        end = new Date().getTime();
    }
}


const DeliveryOrder = require(""../api/models/DeliveryOrder"");

vogels.createTables({
}, function(err) {
    if (err) {
        console.log('Error creating tables: ', err);
    } else {
        console.log('First creation');
        DeliveryOrder.deleteTable(function(err) {
            if (err) {
                console.log('Error deleting table: ', err);
            } else {
                console.log('Table has been deleted');
                vogels.createTables({
                }, function(err) {
                    if (err) {
                        console.log('Error creating tables: ', err);
                    } else {
                        console.log('Tables have been created');
                    }
                });
            }
        });
    }
});

I tried doing the very same in mocha. it does not run or throw errors(I know this because none of the messages in console log are printed). I was under the impression that mocha should be able to run any js code as long as I require the necessary files. Here is my test file:
process.env.NODE_ENV = 'test'; //Just being safe. 
let vogels = require('vogels');
vogels.AWS.config.update({ accessKeyId: ""myKeyId"", secretAccessKey: ""secretKey"", region: ""us-west-2"" });
vogels.dynamoDriver(new vogels.AWS.DynamoDB({ endpoint: 'http://localhost:8001' }));

//Require the dev-dependencies
let chai = require('chai');
let chaiHttp = require('chai-http');
let server = require('../server');
let should = chai.should();
const DeliveryOrder = require(""../api/models/DeliveryOrder"");
const _      = require('lodash');
chai.use(chaiHttp);


describe('DeliveryOrders', () => {

    function wait(ms){
        var start = new Date().getTime();
        var end = start;
        while(end < start + ms) {
            end = new Date().getTime();
        }
    }
    beforeEach(() => { //Before each test we empty the database
        console.log(""in before ............"")
        vogels.createTables({
        }, function(err) {
            if (err) {
                console.log('Error creating tables: ', err);
            } else {
                console.log('First creation');
                DeliveryOrder.deleteTable(function(err) {
                    if (err) {
                        console.log('Error deleting table: ', err);
                    } else {
                        console.log('Table has been deleted');
                        vogels.createTables({
                        }, function(err) {
                            if (err) {
                                console.log('Error creating tables: ', err);
                            } else {
                                console.log('Tables have been created');
                            }
                        });
                    }
                });
            }
        });

        console.log(""in after ............"")
    });


    /*
     * Test the /GET route
     */

    describe('POST DO', () => {
        it('should throw an error on create do with empty data', (done) => {
            let doData = {

            }
            chai.request(server)
                .post('/api/dos')
                .send(doData)
                .end((err, res) => {
                    res.should.have.status(400);
                    res.body.should.have.property('error');
                    // res.body.error.should.have.property('message').eql('LR Number Missing');
                    done();  
                })
        })



        it('should create a delivery order', (done) => {
            let doData = {
                ""deliveryOrderNumber"" : ""03.05.2017"",
                ""companyId"" : ""BMM"",
                ""locationId"" : ""TADIPATRI"",
                ""branch"" : ""KPCL"",
                ""createdDate"" : ""2017"",
                ""vesselName"" : ""MV ANANGEL VICTORY"",
                ""cargo"" : ""coal"",
                ""cargoType"" : ""steamCoal"",
                ""cargoGrade"" : ""SOUTH AFRICA"",
                ""partyName"" : ""PENNA CEMENTS LTD"",
                ""subPartyName"" : ""PENNA CEMENTS LTD"",
                ""totalIssuedQuantity"" : ""5000"",
                ""transinIssuedQuantity"" : ""1000"",
                ""companyInchargeName"" : ""RAMESH BABU"",
                ""companyInchargePhoneNumber"" : ""8096696663.0"",
                ""transinInchargeName"" : ""RAMESH REDDY"",
                ""transinInchargePhoneNumber"" : ""9666777636.0"",
                ""tolerance"" : ""1"",
                ""billOfEntry"" : {
                    ""billEntryNumber"" : ""9106716/31.03.2017"",
                    ""customHouseAgent"" : ""NL"",
                    ""portOfLoading"" : ""RICHARDS BAY"",
                    ""countryOfOrigin"" : ""SOUTH AFRICA"",
                    ""grossWeight"" : ""5000"",
                    ""seller"" : ""SWISS SINGAPORE OVERSEAS ENTERPRISES"",
                    ""netValuePrice"" : ""3365568""
                },
                ""completedQuantity"" : ""999.21"",
                ""material"" : ""coal-steamCoal-SOUTH AFRICA"",
                ""status"" : ""inactive"",
                ""deliveryOrderType"" : ""has_a_tdo"",
                ""deliveryOrderTypeId"": [""TDO001""]

            }

            chai.request(server)
                .post('/api/dos')
                .send(doData)
                .end((err, res) => {
                    // console.log(""Post response"", res.body);
                    res.should.have.status(200);
                    res.body.should.have.property('data');
                    done();  
                })
            // DeliveryOrder.destroy('03.05.2017', function (err) {
            //       if (err) {
            //         console.log('Error deleting item: ', err);
            //       } else {
            //         console.log('Item has been deleted');
            //       }
            // });

            // DeliveryOrder.deleteTable(function(err) {
            //   if (err) {
            //     console.log('Error deleting table: ', err);
            //   } else {
            //     console.log('Table has been deleted');
            //   }
            // });
            //  wait(2000);

        })

    });


    describe('/GET delivery orders by DO Number', () => {
        it('it should GET all the delivery orders', (done) => {
            chai.request(server)
                .get('/api/do/03.05.20178')
                .end((err, res) => {
                    console.log(""GET by DO number response"", res.body);
                    res.should.have.status(200);
                    res.body.should.be.a('object');
                    // res.body.data.length.should.be.eql(0);
                    done();
                });
        });
    });


    describe('/GET delivery orders by Location Id', () => {
        it('it should GET all the delivery orders', (done) => {
            chai.request(server)
                .get('/api/do/location/tadipatri')
                .end((err, res) => {
                    console.log(""GET by Location Id response"", res.body);
                    res.should.have.status(200);
                    res.body.should.be.a('object');
                    // res.body.data.length.should.be.eql(0);
                    done();
                });
        });
    });


    describe('/GET delivery orders by Branch Id', () => {
        it('it should GET all the delivery orders', (done) => {
            chai.request(server)
                .get('/api/do/branch/kpcl')
                .end((err, res) => {
                    res.should.have.status(200);
                    res.body.should.be.a('object');
                    // res.body.data.length.should.be.eql(0);
                    done();
                });
        });
    });

});",helloravi,NONE,2017-07-26 09:52:14+00:00,True,2017-08-01 17:26:28+00:00,6.32,,3,3,2017-07-27 23:18:22+00:00,1.56,johnkpaul,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2936,explore CircleCI for build matrix,"According to @drazisil, CircleCI now supports build matrices:

With the Release of CircleCI 2.0 and Workflows, we can do a build matrix. I created a proof of concept, if you would like to take a look. https://circleci.com/workflow-run/31659e67-7b38-4ed0-ba84-cd3f54c5d931
The config file is here https://github.com/drazisil/mocha/blob/workflows-matrix/.circleci/config.yml

We should evaluate to see if running our complex build process on CircleCI would buy us anything.  I think it's probably important to first enumerate requirements (blue-sky).
cc @ScottFreeCode",boneskull,MEMBER,2017-07-26 18:09:14+00:00,True,2018-10-11 09:35:15+00:00,441.64,,4,3,2017-07-26 19:29:40+00:00,0.06,drazisil,NONE,1,1,0,1,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2939,Update dependency version for debug,"Hi guys,
I'm getting this warning from debug every time I run mocha tests:
(node:13161) DeprecationWarning: DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/vMUyr)
Based on visionmedia/debug#410 issue, they fixed it in version 2.6.1. However, the mocha@3.4.2 still depend on debug@2.6.0. Could anyone please update debug version to fix this issue?",danhdoancs,NONE,2017-07-30 01:09:39+00:00,True,2017-08-05 03:45:13+00:00,6.11,,2,3,2017-08-01 21:49:00+00:00,2.86,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2940,Running from node yields ReferenceError: describe is not defined,"Hi, I'm following the wiki page but when running it via node, the above error exists.
I was expecting the same test files can be run using mocha CLI or via the node require style.
Is there anything that I missed out?
Thanks in advance.",beeing,NONE,2017-07-30 02:13:23+00:00,True,2017-08-02 04:21:09+00:00,3.09,,3,7,2017-07-30 03:35:25+00:00,0.06,ORESoftware,NONE,0,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2942,second then promise not work,"Hi, i use mocha test
and in target function use multi then promise
exports.getCompanyDetailsAll = function ($version, $response) {
    pg_vendor.openConn(global_config.dbConfig).then(function (db) {
        pg_vendor.query(db, 'my query')
            .then(_databaseResultOutput.bind(null, $version, 'companyDetailsAll', $response))
            .fail(_databaseErrorOutput.bind(null, $response, 1))
    }).fail(_databaseErrorOutput.bind(null, $response, 1))
}
and my mocha test script
const codal = require('my_address/db');

//noinspection JSUnresolvedFunction
describe('Codal', function () {
    it('service check', function (done) {
        codal.getCompanyDetailsAll('v1', {
            writeHead: function () {
                console.log('>', arguments);
            },
            end: function () {
                console.log('>', arguments);
            }
        })
        done()
    })
});
in first script in pg_vendor.query first then executed but secend then function not called and no return output
it's work with http server as well but with mocha not work

ps
if i use defer in exports.getCompanyDetailsAll and return defer.promise, second then function is called and return output
exports.getCompanyDetailsAll = function ($version, $response) {
   let defer = require('q').defer()
    pg_vendor.openConn(global_config.dbConfig).then(function (db) {
        pg_vendor.query(db, 'SELECT fa_name, fa_symbol FROM codal.companies')
        .then(function (data) {
            _databaseResultOutput($version, 'companyDetailsAll', $response, data, defer)
        })
        .fail(function (error) {
            _databaseErrorOutput($response, 1)
            defer.reject(error)
        })
    }).fail(_databaseErrorOutput.bind(null, $response, 1))
    return defer.promise
}
describe('Codal', function () {
    it('service check', function (done) {
        codal.getCompanyDetailsAll('v1', {
            writeHead: function () {
                console.log('>', arguments);
            },
            end: function () {
                console.log('>', arguments);
            }
        }).then(function () {
            console.log('finish')
            done();
        }).fail(function (error) {
            done(error)
        })
    })
});",poyaz,NONE,2017-07-31 06:52:05+00:00,True,2017-08-02 16:01:00+00:00,2.38,,2,2,2017-08-02 06:20:12+00:00,1.98,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2943,Inconsistent Reporter Use of Console and Stdout,"The title of this issue is the crux. It appears that the default spec reporter uses console.log rather than the built-in process.stdout that other reporters use. And there doesn't seem to be a pattern to which reporters use which output method.
Some reporters like spec (https://github.com/mochajs/mocha/blob/master/lib/reporters/spec.js#L40) are using console.log, some like dot(
  
    
      mocha/lib/reporters/dot.js
    
    
         Line 31
      in
      503627c
    
    
    
    

        
          
           process.stdout.write('\n'); 
        
    
  

) use stdout.
My use case involves utilizing headless chrome to run mocha tests. I'm providing a proxy to window.mocha.process.stdout to use a message bus that I've injected, that pipes raw messages back to the node app which catches them via the Chrome DevTools Protocol. It might sound complex, but it's rather simple. Without knowing which actor (user code or mocha) is calling console.log, I can't effectively show console messages in the terminal with any distinction between actors.
The ""simple"" fix would be to standardize all reports on one output method - preferably mocha.process.stdout.",shellscape,NONE,2017-08-01 04:19:36+00:00,False,,,,4,4,2017-08-01 21:55:15+00:00,0.73,ScottFreeCode,CONTRIBUTOR,2,1,0,0,"['chore', 'help wanted', 'semver-patch']",True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2944,`--forbid-only` does not error on suite marked `only` with no tests,"Both before and after #2874, the --forbid functions are implemented in terms of tests, whereas only is quite aware of suites including empty ones; thus, the following file:
describe.only(""nothing"", function() {})
it(""should fail"", function() { throw new Error(""Ouch!"") })
...passes with 0 tests run instead of failing due to only being forbidden (or ignoring the empty onlyed suite and failing the other test).",ScottFreeCode,CONTRIBUTOR,2017-08-02 04:15:33+00:00,True,2018-12-07 18:05:01+00:00,492.58,,4,8,2018-11-27 00:16:58+00:00,481.83,plroebuck,MEMBER,3,0,0,0,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2945,Unreadable text problem on some color scheme (especially Solarized Dark),"Some people say that the mocha's output is unreadable because texts are colorlized quite same to the background color. For example:

Please change color scheme · Issue #1200 · mochajs/mocha
Much of the color output is invisible with solarized terminal theme · Issue #802 · mochajs/mocha
Solarized · Issue #122 · mochajs/mocha

Just changing color is not best solution, because there are too many color schemes on the world. It is very hard to keep enough contrast between fixed text color and platform's background color.
Instead, I think some logical control code is better on this case. They reporters say that texts colorized with 90 is unreadable on Solarized Dark. By default the color is applied for pass, error stack, fast, light, and diff gutter; they all mean ""weaker than other information"" logically. In other words, we just hope that important information to be highlighted and others to be dim. And I've found that the control code 2 means dim which seem to be designed for this purpose. I believe that the logical code 2 is better than phisical color code 90 in this context. Could you consider to use that?",piroor,NONE,2017-08-07 04:52:27+00:00,True,2017-10-06 04:53:46+00:00,60.0,,2,1,2017-10-06 04:53:46+00:00,60.0,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2947,HTML report pass/fail filters do not work correctly while testsuite runs,"The HTML report can filter by failures. Clicking on the Mocha stats in the top-right to inspect the failures, while the test suite is still running, all suites that have all passing tests are still added to the page. E.g. if you have a test that fails, clicking on failures shows that test. However, every consecutive suite that passes just fine is appended (just the name) to the report. Clicking on passes and then back on failures clears these names and again only shows the failures.
Therefore, I would like to have the failures page filter out fully passing test suites while the full test suite is running. I think that after this line the code from here must be run to then hide the suite name?",TimvdLippe,NONE,2017-08-07 18:45:53+00:00,False,,,,4,6,2017-08-07 22:34:45+00:00,0.16,ScottFreeCode,CONTRIBUTOR,0,1,0,2,"['browser', 'confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2949,options,,mrwht,NONE,2017-08-08 17:28:12+00:00,True,2017-10-06 04:42:46+00:00,58.47,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2950,emit retry so we know when tests are using this feature,"Hi,
I would like to know which of my tests are being retried but, with existing mocha this is not possible.
I was thinking to emit 'test retry' on the block below and then, the reporters could display this. 
  
    
      mocha/lib/runner.js
    
    
        Lines 556 to 563
      in
      075bd51
    
    
    
    

        
          
           } else if (retry < test.retries()) { 
        

        
          
             var clonedTest = test.clone(); 
        

        
          
             clonedTest.currentRetry(retry + 1); 
        

        
          
             tests.unshift(clonedTest); 
        

        
          
            
        

        
          
             // Early return + hook trigger so that it doesn't 
        

        
          
             // increment the count wrong 
        

        
          
             return self.hookUp('afterEach', next); 
        
    
  


Would it be possible to add this, or is there another way that this can be achieved?
Thanks!",fpereira1,NONE,2017-08-10 09:20:47+00:00,True,2017-08-10 20:58:57+00:00,0.48,,2,2,2017-08-10 14:18:47+00:00,0.21,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2951,String timeout 0 (or really high) handling,Is there a reason this is not doing the string conversion before the check for 0 or too-high values?,ScottFreeCode,CONTRIBUTOR,2017-08-11 05:51:56+00:00,True,2018-11-09 12:42:54+00:00,455.29,,1,0,,,,,0,0,0,0,"['confirmed-bug', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2952,Incorrect `debug` log in `Runnable.prototype.slow`,This is the same log message as the Runnable.prototype.timeout function.,ScottFreeCode,CONTRIBUTOR,2017-08-11 05:54:42+00:00,True,2018-03-22 22:49:20+00:00,223.7,,2,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2953,Returning a promise that rejects - real error is obscured,"I am using async/await in my tests like this:
it('should work', async () => {
  const result = await sthAsync();
  expect(result).to.be.ok;
});
It works perfectly unless the async function actually returns a rejection. So if I make a typo for instance:
it('should work', async () => {
  const result = await sthAsyncWhoopsTypoHere();
  expect(result).to.be.ok;
});
When I run this I get the following error:
Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.

How hard would it be to actually report the true error that's behind it i.e.:
Uncaught ReferenceError: sthAsyncWhoopsTypoHere is not defined",kamilkp,NONE,2017-08-11 07:20:21+00:00,True,2017-08-11 09:08:39+00:00,0.08,,2,3,2017-08-11 07:58:00+00:00,0.03,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2955,ANSI escape codes in messages break xunit file,"When the error message or stack contains any non-safe characters, it breaks the xunit file and the resulting report is no longer valid XML.
Repro:
# Explicit:
npm init --yes
npm i -D mocha
echo ""it('throws', () => { throw new Error('\x1B[32mfoo\x1B[0m'); })"">test.js
./node_modules/.bin/mocha -R xunit -O output=report.xml test.js

# One-liner:
npm init --yes >/dev/null && npm i -D mocha >/dev/null && echo ""it('throws', () => { throw new Error('\x1B[32mfoo\x1B[0m'); })"">test.js && ./node_modules/.bin/mocha -R xunit -O output=report.xml test.js
Running report.xml through an online validator will trigger messages like the following:

An invalid XML character (Unicode: 0x1b) was found in the element content of the document.",jkrems,CONTRIBUTOR,2017-08-12 18:12:52+00:00,True,2017-09-03 23:01:40+00:00,22.2,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2958,Error: Timeout of 2000ms exceeded,"When I try to use promises with mocha, I'm getting the error below:

Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.

Actually, I'm trying to retireve data from a remote server. Mocha won't wait until the promise has been resolved or rejected.

function fn(){
  return new Promise((resolve, reject) => {
       setTimeout(() => resolve({foo:'bar'}),7000);
  })
}

 it('should retrieve data',function(done){
            fn().then((res) => done()).catch((err) => done(err));
 });

After 2 seconds, this error occurs.
I've been planning to check the returning data within then and call the assert.
it('should retrieve data',function(done){
   fn().then(() => {
       assert(true)
       done()
   });
});

What am I doing wrong? I want to check the returning data if it has proper keys, etc.",cemiltokatli,NONE,2017-08-13 07:06:18+00:00,True,2018-04-07 17:10:49+00:00,237.42,,10,12,2017-08-13 07:22:28+00:00,0.01,ScottFreeCode,CONTRIBUTOR,1,1,0,7,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2960,"Still complains about ""window is not defined"" but have it defined in globals","Should not complain about undefined window when I have it defined like that:
NODE_PATH=./src/modules:./lib \
  ./node_modules/.bin/mocha \
  --globals window,navigator \
  --colors \
  --compilers coffee:coffee-script/register \
  ./**/__mocha__/*

Happens on latest version.",binarykitchen,NONE,2017-08-14 03:09:13+00:00,True,2017-10-06 04:54:29+00:00,53.07,,3,2,2017-08-17 06:56:33+00:00,3.16,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2964,Mocha ignoring .litcoffee files in test/,"Hi!
I'm using iced-coffee-script, which is essentially coffeescript for our purposes AFAIK.
I have a few .litcoffee files inside test/, and running mocha --compilers coffee:iced-coffee-script/register will result in:
No test files found
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! mypackagename@0.0.0 test: `mocha --compilers coffee:iced-coffee-script/register`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the mypackagename@0.0.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

Issuing mocha --compilers coffee:iced-coffee-script/register test/*.litcoffee runs all files just fine:
  File1
    ✓ Test1-1
    ✓ Test1-2
  File2
    ✓ Test2-1
    ✓ Test2-2
  4 passing (0ms)

If I add a .coffee file to the test/ directory, running mocha --compilers coffee:iced-coffee-script/register results in:
  SimpleCoffeeFile1
    ✓ Test1-1
    ✓ Test1-2
  2 passing (0ms)",joaomlneto,NONE,2017-08-16 16:14:27+00:00,True,2017-08-21 12:41:04+00:00,4.85,,2,3,2017-08-17 06:25:46+00:00,0.59,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2965,Update growl to 1.10.2 to prevent vulnerability,"Can growl be updated to 1.10.2 to prevent Command Injection vulnerability
https://nodesecurity.io/advisories/146",rmdort,NONE,2017-08-21 07:20:29+00:00,True,2017-08-21 13:29:29+00:00,0.26,,2,1,2017-08-21 13:29:29+00:00,0.26,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2966,Cannot read property 'timeout' of undefined,"Uncaught TypeError: Cannot read property 'timeout' of undefined
Error occurs when trying to skip test with increased default timeout.
  xit('true equals true', (done) => {
    setTimeout(() => {
      expect(true).to.be.true
    }, 2200)
  }).timeout(3000)

Both xit and it.skip don't work.",YevheniiHerasymchuk,NONE,2017-08-22 13:37:21+00:00,True,2017-10-06 04:38:34+00:00,44.63,,3,2,2017-08-24 13:47:36+00:00,2.01,ScottFreeCode,CONTRIBUTOR,1,1,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2967,Puppeteer support,Is there any plans for Puppeteer support?,sauliusgrigaitis,NONE,2017-08-23 10:25:39+00:00,True,2017-10-06 04:36:13+00:00,43.76,,3,3,2017-08-24 04:42:45+00:00,0.76,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2968,QUESTION: mocha with loopback.get null from db built in memory.,"In mocha test,app.models.User.findOne() return null though there's data in memoryDB.json.
the definition in datasource config is
""memory"": { ""name"": ""memory"", ""connector"": ""memory"", ""file"": ""memoryDB.json"" },.
Is there someway mocha can get data from a memory db.",xisuoyo,NONE,2017-08-24 10:45:29+00:00,True,2017-08-24 13:29:55+00:00,0.11,,2,1,2017-08-24 13:29:55+00:00,0.11,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2969,--bail option doesnt work with retries,Bail kicks in if test fails even if rertries are configured,larstonne,NONE,2017-08-25 12:05:05+00:00,True,2017-10-06 04:37:51+00:00,41.69,,4,4,2017-08-28 02:22:29+00:00,2.6,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2970,--bail option does not work for dynamically generated tests.,"Running the following code 'npm test --bail' will run the test even after first failure
var test= function() {
describe('Test Print', function () {
var x=[1,-1,2,3]
x.forEach(function(num){
it('Test1:'+num, function () {
assert.notEqual(num,-1);
});
it('Test2:'+num, function () {
assert.equal(num,5)
});
});
});
}
test();
Result
Test Print
✓ Test1:1
✓ Test2:1
1) Test1:-1
✓ Test2:-1
✓ Test1:2
✓ Test2:2
✓ Test1:3
✓ Test2:3
7 passing (10ms)
1 failing",rps1007,NONE,2017-08-26 02:34:38+00:00,True,2017-10-06 04:37:42+00:00,41.09,,4,4,2017-08-26 10:33:59+00:00,0.33,larstonne,NONE,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2971,leak detection overwrites test error (OR: subsequent errors can clobber prior in report?),"Run this test file with --check-leaks:
it(""leak issue"", function() {
  leaky = true
  throw new Error(""And also fail the test"")
})
You should get one error ""And also fail the test"" and another ""Error: global leak detected: leaky"" (or perhaps, if not both, then only one or the other). Instead you get two of the latter.
I'd guess that the error property on the failed test is being overwritten and an extra fail event emitted for that test, instead of generating a fail event associated with the test but with its own error property.",ScottFreeCode,CONTRIBUTOR,2017-08-28 02:08:50+00:00,False,,,,2,1,2017-11-07 07:13:17+00:00,71.21,ScottFreeCode,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2972,import / require xit,"Is there a way to import / require to satisfy my tooling?
I can do
import { it } from 'mocha';
but not
import { xit } from 'mocha';
or
import { xit } from 'mocha/lib/interfaces/bdd';",LukasBombach,NONE,2017-08-28 13:52:21+00:00,True,2017-09-10 03:16:36+00:00,12.56,,4,6,2017-08-31 01:05:04+00:00,2.47,ScottFreeCode,CONTRIBUTOR,0,2,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2973,Security Report: growl@1.9.2,"146 - Command Injection
Vulnerable: <1.10.2 - Patched: >=1.10.2 - Path: mocha@3.5.0 > growl@1.9.2
How to fix
Update to version 1.10.2 or greater
https://nodesecurity.io/orgs/eggjs/projects/16be4d34-c7a2-4e01-9696-62a90742d571/71",atian25,NONE,2017-08-29 08:48:06+00:00,True,2017-08-31 02:06:52+00:00,1.72,,3,2,2017-08-30 11:37:22+00:00,1.12,d4nyll,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2975,Describe block with async function behaving weirdly,"Mocha 3.5
Node 8.4
describe('Test Suite 1', async function(){
  let email = await faker.internet.email();
  it('should print email', function(){
     email.should.not.be.a('string')
   )}
})

Running this test should give
Test Suite 1
   ✓should print email

But its giving
0 passing
Also modifying the above code to
describe('Test Suite 1', async function(){
  let email;
  it('should print email', async function(){
     email = await faker.internet.email()
     email.should.not.be.a('string')
   )}
})

Runs the test but doesn't print the name of describe i.e Test Suite 1
 ✓should print email
Removing the async from describe and putting it in it works fine
 describe('Test Suite 1', function(){
  it('should print email',async  function(){
     let email = await faker.internet.email();
     email.should.not.be.a('string')
   )}
})

Test Suite 1
   ✓should print email

Also .only and .skip do not work when async function is included in the describe block",shashi-raja,NONE,2017-08-29 09:17:24+00:00,True,2018-11-04 01:53:00+00:00,431.69,,13,20,2017-08-31 01:25:33+00:00,1.67,ScottFreeCode,CONTRIBUTOR,3,1,0,8,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2976,Disabling linting errors when writing test files?,"Those errors are pretty useless and annoying when it comes to writing test files.  ""Cannot find name 'describe.'"". How would I go about disabling these errors? I tried writing /* eslint-disable */ at the top and it didn't work. I tried the same thing but replacing the eslint with tslint since im using typescript and it still doesn't work.
I create a .eslintignore file in the directory and it still doesn't make those fake-errors disappear.
What is the solution? Thank you",pfftdammitchris,NONE,2017-08-30 20:56:58+00:00,True,2017-10-06 04:35:40+00:00,36.32,,4,3,2017-08-31 01:12:21+00:00,0.18,ScottFreeCode,CONTRIBUTOR,1,2,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2977,`this` using inheritance causes problems,"The last it will unexpectedly fail.
describe.only('Example', function() {
  beforeEach(function() {
    this.value = 5;
  });

  it('should have the right value', function() {
    this.value.should.equal(5);

    this.value = 'who cares';
  });

  it('should still have the right value', function() {
    this.value.should.equal(5);

    this.value = 'who cares';
  });

  describe('Inner', function() {
    it('should have the right value', function() {
      this.value.should.equal(5);

      this.value = 'who cares';
    });

    it('should still have the right value but won\'t', function() {
      this.value.should.equal(5);
    });
  })
});

Using console.log, I have verified the beforeEach is running before each and every test and it is, so the only way this could occur is if the this in the Inner tests is different from the one in the outer tests and the beforeEach. Since values are still accessible, I am guessing Inner blocks' this prototypically inherits from the outer block. If that is the case, why? Suites are never running simultaneously, so how would injecting the exact same object as this regardless of nesting cause an error? FWIW, Karma, which it seems like your this is based off of, doesn't use inheritance.
It also seems dangerous that you're reusing this but that might be a performance thing; to make tests more isolated from each other I would expect a new this to be instantiated for each and every it but that's not the case given this error.",tsclaus,NONE,2017-09-01 20:26:54+00:00,True,2017-10-04 05:19:20+00:00,32.37,,3,2,2017-09-03 17:47:48+00:00,1.89,ScottFreeCode,CONTRIBUTOR,1,1,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2979,drop support for non-ES5 compliant environments,"Support for IE7, IE8, and PhantomJS 1.x is an albatross.
By dropping support for these environments, we should:

Reduce code complexity by removing handrolled shims.
Reduce CI failures (hopefully!)
Reduce number of edge cases in tests
Reduce size of build matrix

Unfortunately I have no metrics on how many use Mocha for these environments.
Please speak up if you are writing new tests for these environments with Mocha, and don't want to see support dropped.  I'm willing to entertain a good argument against!",boneskull,MEMBER,2017-09-03 21:59:55+00:00,True,2017-09-29 23:51:01+00:00,26.08,v4.0.0,3,7,2017-09-04 06:37:53+00:00,0.36,bdsomer,NONE,1,1,0,1,"['chore', 'semver-major']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
2980,automate code formatting,"I've played with prettier a bit, and it seems like a reasonable solution (especially when combined with husky) to enforce a code style across the codebase.
This should prevent nitpicks about style in PRs.
We could also likely make the pre-commit hook run eslint --fix.
semver-patch because it should have no impact upon API or program output.",boneskull,MEMBER,2017-09-03 23:00:19+00:00,True,2018-05-12 04:32:59+00:00,250.23,,3,6,2017-10-06 18:00:36+00:00,32.79,boneskull,MEMBER,1,1,0,1,"['developer-experience', 'semver-patch']",False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2982,"test ""require interface""","We're currently testing the ability to require(""mocha"").it and require(""mocha"").describe but none of the other exported interface functions: https://github.com/mochajs/mocha/blob/f20de56637b2223f614ce40adc0d41a58030f042/test/unit/required-tokens.spec.js
Full list here: 
  
    
      mocha/lib/mocha.js
    
    
        Lines 200 to 214
      in
      2bc9c4d
    
    
    
    

        
          
           this.suite.on('pre-require', function (context) { 
        

        
          
             exports.afterEach = context.afterEach || context.teardown; 
        

        
          
             exports.after = context.after || context.suiteTeardown; 
        

        
          
             exports.beforeEach = context.beforeEach || context.setup; 
        

        
          
             exports.before = context.before || context.suiteSetup; 
        

        
          
             exports.describe = context.describe || context.suite; 
        

        
          
             exports.it = context.it || context.test; 
        

        
          
             exports.setup = context.setup || context.beforeEach; 
        

        
          
             exports.suiteSetup = context.suiteSetup || context.before; 
        

        
          
             exports.suiteTeardown = context.suiteTeardown || context.after; 
        

        
          
             exports.suite = context.suite || context.describe; 
        

        
          
             exports.teardown = context.teardown || context.afterEach; 
        

        
          
             exports.test = context.test || context.it; 
        

        
          
             exports.run = context.run; 
        

        
          
           }); 
        
    
  


I think the test file above should just use the global describe and it, but inside the it we should assert that the exports all are equal to the corresponding globals. It would be ""more brittle"" in the sense that we would have to change the test if we wanted to change the implementation from a simple reference copy to having separate global and exported functions, but I have a hard time imagining why we'd want/need to do that at the moment, and equality comparison would be fine for the current implementation and waaaaay easier than coming up with a way to use every last one of them and check for the correct behavior (and the current test doesn't even do the correct-behavior part for the two functions it does try using).
While we're in there, let's remove the done since the test is (and would still be) synchronous.
Note that once #2972 is resolved we should include xit (and whatever other x functions we have) in the new test.",ScottFreeCode,CONTRIBUTOR,2017-09-04 04:49:56+00:00,False,,,,2,1,2017-09-13 00:31:07+00:00,8.82,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['help wanted', 'qa', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2984,fix broken coveralls reporting,"from recent builds:
> mocha@3.5.0 postcoverage /home/travis/build/[secure]/mocha
> istanbul-combine -d coverage -r lcov -r html coverage/reports/*/*.json
=============================== Coverage summary ===============================
Statements   : 100% ( 0/0 )
Branches     : 100% ( 0/0 )
Functions    : 100% ( 0/0 )
Lines        : 100% ( 0/0 )
================================================================================
[error] ""2017-08-02T05:02:44.817Z""  'error from lcovParse: ' 'Failed to parse string'
[error] ""2017-08-02T05:02:44.821Z""  'input: ' ''
[error] ""2017-08-02T05:02:44.822Z""  'error from convertLcovToCoveralls'
/home/travis/build/[secure]/mocha/node_modules/coveralls/bin/coveralls.js:18
        throw err;
        ^
Failed to parse string",boneskull,MEMBER,2017-09-05 04:52:31+00:00,True,2017-09-05 19:46:53+00:00,0.62,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2986,"document ""how to become a maintainer"" and ""how to be a good maintainer""","This probably exists in a ""project"" somewhere, but we need to formalize contribution guidelines, decision-making process, etc.  I like what ESLint has done.
UPDATE: I forgot that I already wrote up CONTRIBUTING.md, and I can live with that for now.  What we're missing is ""how to become a maintainer"" and ""how to be a good maintainer once you are one"", etc.
I'll tackle ""governance"" in another issue.",boneskull,MEMBER,2017-09-05 05:26:11+00:00,False,,,,1,1,2017-10-06 04:59:59+00:00,30.98,boneskull,MEMBER,1,0,0,0,"['developer-experience', 'help wanted', 'semver-patch']",False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2987,fold mochajs.github.io into this repo,"GH Pages now supports docs/ since whenever.
I propose we fold that repo into this one, because:

Discoverability is an issue if the docs live in a separate repo.
The alternative is a gh-pages branch, but it's plainly silly to maintain a branch with a completely separate VCS root.

Potential drawbacks:

Tooling on that repo is kind of iffy.
May need to manually move some issues over.

What does @mochajs/core think?",boneskull,MEMBER,2017-09-05 05:46:40+00:00,True,2017-12-09 08:55:32+00:00,95.13,,3,5,2017-09-05 06:03:16+00:00,0.01,dasilvacontin,CONTRIBUTOR,1,2,0,0,"['developer-experience', 'documentation']",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2988,How to make my event test fail using async/await,"Description
I'm working on a library that throws errors using event emitter. I subscribe to receive the ""error"" event from my library and, when it happens, I want to make my tests fail. If no error is emitted, then I expect that the test is passed.
Code
// Imports and Globals
import {IListener} from ""typescript.events"";
import { expect } from 'chai';
import 'mocha';
import * as assert from ""assert""

describe('Public functions', () => {

  describe('getMessage(error : string) : any', () => {

    let responseGiver;

    beforeEach(function() {
      responseGiver = require(""../index"");
      responseGiver.setLoggerLevel(""none"");
    });

    // 1
    it('should throw when the dictionary is not set', async () => {

      const handler : IListener = async function(e){
        await responseGiver.removeListener(""error"", handler);
        // This test should fail here
      };

      await responseGiver.on('error', handler);
    
      await responseGiver.getMessage(""A"");
    });

    // 2
    it('should throw when the dictionary is set, but there is not the key we are looking for', async () => {
      
      const handler : IListener = async function(e){
        await responseGiver.removeListener(""error"", handler);
        // This test should fail here
      };

      await responseGiver.on('error', handler);
    
      await responseGiver.setDictionary( { ""A"" : ""B"" } )
      await responseGiver.getMessage(""C"");
    });

  });
});",Giovarco,NONE,2017-09-05 13:38:45+00:00,True,2017-09-08 05:31:47+00:00,2.66,,3,9,2017-09-05 14:50:39+00:00,0.05,ScottFreeCode,CONTRIBUTOR,0,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2989,server side version of init,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label

Description

This is a feature suggestion - I was wondering about creating a version of mocha init that would work for server side code rather than client side, e.g. just create a test dir with a single test file that might have some boilerplate code in it ...
It could also update package.json to have:
""test"": ""mocha test/**/*.js""
I'm thinking about similar server side init things I've seen for the ruby projects bundler and rspec.
I've looked and I don't seem to see the existence or discussion of such a thing.  Would this be desirable for anyone?  I'd find it handy to have when starting up a new project to speed things up a little ...",tansaku,NONE,2017-09-06 08:28:00+00:00,True,2018-05-21 04:39:55+00:00,256.84,,3,2,2017-09-27 02:53:58+00:00,20.77,boneskull,MEMBER,2,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2991,"Test case related to excel,file and PDF operation are not failing ","I have written a test case for UI testing as well as integrated Excel,pdf and File operation . Now when I run test my test.js file I am able to see the failure for UI in report but for excel I am getting below promise rejection warning  and test case are marked as pass:
(node:9628) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): AssertionError: in fnExcelEnterDatainemptyrow
I am using assert for failing the test case and it is working fine for UI test cases.
Please find my test.js as below:
var Yadda = require('yadda');
var library = require('./step-definition/intranet-step.js');
var assert;
var webdriver = require('selenium-webdriver');
var config = require('config');
var fs = require('fs');
const gBrowser = config.get('browser');
var logger = require('./log4js.js'); //This is required to set the var to log configuration file where log configuration has been defined.
var log = logger.LOG; //This is how you can get hold of LOG static variable which you can use to log details.
var driver;
Yadda.plugins.mocha.StepLevelPlugin.init();
var features = new Yadda.FeatureFileSearch('example/features');
features.each(function(file) {
featureFile(file, function(feature) {
before(function(done) {
log.info('Start of the automation test Execution');
        driver = new webdriver.Builder().usingServer().withCapabilities({'browserName': gBrowser}).build();
        
        driver.manage().timeouts().implicitlyWait(10000);
        done();
    });

    var yadda = new Yadda.Yadda(library);
    scenarios(feature.scenarios, function(scenario) {
        steps(scenario.steps, function(step, done) {
            executeInFlow(function() {
                new Yadda.Yadda(library,{ driver: driver }).yadda(step);
            }, done);
            // yadda.yadda(step,done);

        });
    });

    afterEach(function(done) {
        takeScreenshotOnFailure(this.currentTest);
        done();
    });

    after(function(done) {
        log.info('End of the automation test Execution');
        driver.quit().then(done);
    });
});

});
function executeInFlow(fn,done) {
webdriver.promise.controlFlow().execute(fn).then(function() {
   done();
   // process.on('unhandledRejection', () => {});
}, done);

}
function takeScreenshotOnFailure(test) {
if (test.status != 'passed') {
var path = 'screenshots/' + test.title.replace(/\W+/g, '_').toLowerCase() + '.png';
driver.takeScreenshot().then(function(data) {
fs.writeFileSync(path, data, 'base64');
});
}
}
and excel function as below:
ExcelUtil.prototype.fnExcelGetCellData =  function (path, sheetName, row, col) {
var promDefer = webdriver.promise.defer();
workBook.xlsx.readFile(path).then(function () {
var workSheet = workBook.getWorksheet('Sheet1');
var rowVal = workSheet.getRow(row);
var cellData = rowVal.getCell(col).value;
promDefer.fulfill(cellData);
assert.equal(true, false, ""in fnExcelGetCellData"");
}, function (e) {
promDefer.fulfill(false);
log.error(e.message);
});
return promDefer.promise;
};
I have done the same thing for my all function for UI testing and they are working fine:
FunctionLibrary.prototype.fnVerificationOfElementAttributeValue = function (element, attribute, strText) {
var d = webdriver.promise.defer();
this.driver.findElement(element).getAttribute(attribute).then(function (text) {
if (text === strText) {
log.info(""Pass - Value of Element's attribute "" + attribute + "" has been verified successfully."");
assert.equal(true,true,""Pass - Value of Element's attribute "" + attribute + "" has been verified successfully."");
d.fulfill(true);
}
else {
log.error(""Fail - Element with attribute "" + attribute + ""- value has not been verified."");
assert.equal(true,false,""Fail - Element with attribute "" + attribute + ""- value has not been verified."");
d.fulfill(false);
}
}, function (e) {
d.fulfill(false);
assert.equal(true,false,""Error: "" +e.message);
log.error(e.message);
});
return d.promise;
};
Please help me in finding the right approach and let me know what needs to be corrected here.
Regards,
Raj",rajtomar99,NONE,2017-09-07 15:18:30+00:00,True,2017-09-27 02:50:02+00:00,19.48,,3,2,2017-09-08 05:19:25+00:00,0.58,ScottFreeCode,CONTRIBUTOR,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2992,Tutorial on how to prevent silent failures?,"Mocha appears to be extremely prone to failing silently.  I'm not sure if this is because of the child spawning process (which, btw, makes it Mocha also very hard to debug), but when using mocha in a codebase that uses Babel and an extreme reliance on promises, syntax errors or thrown exceptions cause mocha to end with no warning whatsoever.  It's wildly frustrating.
Are there any tutorials on ways to increase Mocha's verbosity when such errors occur?",CodeOtter,NONE,2017-09-07 16:21:05+00:00,True,2017-09-27 02:53:02+00:00,19.44,,4,3,2017-09-08 05:59:17+00:00,0.57,ScottFreeCode,CONTRIBUTOR,1,2,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2993,@std/esm compatibility for running mocha programmatically,"I am trying to run mocha programmatically using @std/esm but have run into the issue where a loader might be necessary (see standard-things/esm#89).
I have an example repo set up for the problem I am facing: https://github.com/eliw00d/std-esm-example
Basically, if you npm run test in the dependency project, you get SyntaxErrors for import being an unexpected token. However, if you mocha -r @std/esm ./src/test those errors are not present as the correct loader is being used.
Are there any plans to allow @std/esm's require to be used instead of what mocha uses internally?",eliw00d,NONE,2017-09-07 19:32:26+00:00,True,2018-01-27 08:00:41+00:00,141.52,,4,4,2017-09-27 02:49:24+00:00,19.3,boneskull,MEMBER,1,0,0,2,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
2994,"""mocha -ui tdd -w"" do not working","The first test working but on next changes return this 0 passing
const assert = require('assert');

describe('Default', () => {
  it('format', () => {
    assert.equal('a', 'a');
  });
});
☝️  return this  👇
  Default
    √ format


  1 passing (7ms)
but when i change and  save this
const assert = require('assert');

describe('Default', () => {
  it('format', () => {
    assert.equal('a', 'b');
  });
});
☝️  return this  👇
  0 passing (1ms)",codermarcos,NONE,2017-09-08 01:23:56+00:00,True,2017-09-09 14:32:19+00:00,1.55,,2,3,2017-09-08 05:05:07+00:00,0.15,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2995,Test fail without reason + #2906,"OS: Linux (Ubuntu)
Node: v8.1.4
NPM: 5.4.0
Mocha: 3.5.0
How to reproduce:
const fs = require('fs');

function write() {
  return new Promise(async (resolve) => {
    try {
      await new Promise((resolve, reject) =>
        fs.createWriteStream('/dev/full', {flags: 'a'})
          .write('lo', 'utf8', (err) => (err) ? reject(err) : resolve())
      );
      resolve();
    } catch (e) {
      resolve(e);
    }
  });
}
describe('Logger', () => {
  it('Try to log with /dev/full', async () => {
    console.log('!!!!');
    const err = await write();
    console.log(err.message);
    console.log('????');
  });
});

Output of mocha:


  Logger
!!!!
    1) Try to log with /dev/full
????
ENOSPC: no space left on device, write
    ✓ Try to log with /dev/full


  1 passing (12ms)
  1 failing

  1) Logger Try to log with /dev/full:
     Uncaught Error: ENOSPC: no space left on device, write
  




  1 passing (14ms)
  1 failing

  1) Logger Try to log with /dev/full:
     Uncaught Error: ENOSPC: no space left on device, write",robininfo-edsx,NONE,2017-09-08 08:53:46+00:00,True,2017-09-11 07:58:35+00:00,2.96,,2,7,2017-09-08 08:58:01+00:00,0.0,robininfo-edsx,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2996,.env variables not accessed while testing,"I have Database values in .env file.
It works fine.
I wrote a test.js for unit testing. It throws error.
The reason was, during test run .env variables where not accessed.
How to make .env variables available for test execution. How to resolve it?",vishnu2prasadh,NONE,2017-09-08 10:37:02+00:00,True,2017-09-09 14:25:22+00:00,1.16,,4,5,2017-09-08 16:21:14+00:00,0.24,markowsiak,MEMBER,1,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2998,"Export all BDD functions for ""require interface""","From my research in #2997, the ""require interface's"" exports are still missing:

specify (alias of it)
xspecify (alias of xit)
xdescribe (can use context.suite.skip on the TDD side of the ||)
context (context.context in this code; alias of describe)
xcontext (alias of xdescribe)

It appears that the BDD functions are exported using || to separate BDD and TDD functions they're taken from, basically preferring to take the BDD functions but exporting the TDD functions under BDD names as a fallback, if I've understood the code correctly.
So, each of these should take from the BDD function with the same name; the ones marked ""alias of"" another should take from the same TDD function as the ones they're aliases of.
These additions don't need tests added unless #2982 is resolved first; if #2982 is resolved first then the added functions should be added to the new/improved test that resolves #2982.",ScottFreeCode,CONTRIBUTOR,2017-09-10 03:53:48+00:00,False,,,,2,0,,,,,0,0,0,0,"['chore', 'confirmed-bug', 'help wanted', 'nice-to-have']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2999,ensure versioning/publishing validated properly,"given the root mocha.js dist file shouldn't change until a version bump, and we build a new version of this dist file for tests, we are missing the potential problem where everything is fine for releasing except someone forgot to rebuild mocha.js.
granted, the preversion script should avoid this problem, but there's nothing stopping a maintainer from bumping via other means.",boneskull,MEMBER,2017-09-10 04:57:28+00:00,False,,,,2,10,2017-09-10 16:57:49+00:00,0.5,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['chore', 'help wanted', 'qa']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3000,3.5.1-introduced dependency `he` breaks AMD usage,"@FelixHenninger on Gitter reported that Mocha 3.5.1 gets a ""Mismatched anonymous define"" error from RequireJS. The following is my investigation of the issue.
Our define-removing script uses the regex /typeof define === ['""]function['""] && define\.amd/g but the new dependency he uses a different, multi-line check.
Would it be possible to replace the dedefine script with a proper codemod using an AST parser and get something more like ""if typeof define and define.amd are both checked in any way""?
Otherwise, I guess we could update the regex to something like /typeof\s+define\s*===?\s*['""]function['""]\s*&&\s*(?:define\.amd|typeof\s+define\.amd\s*===?\s*['""]object['""])/g And then update it again if we ever run into Yoda-style ""function"" === typeof define. Or if we ever run into typeof define.amd !== 'undefined'. Etc.
Alternatively, we could look for a bundler, bundler flag/option or bundler plugin that handles this stuff for us. Or request that he use the standard typeof define === 'function' && define.amd check.",ScottFreeCode,CONTRIBUTOR,2017-09-10 19:14:07+00:00,True,2017-09-10 20:37:58+00:00,0.06,,3,2,2017-09-10 19:28:18+00:00,0.01,boneskull,MEMBER,1,0,0,0,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3002,mocha escapes the grave character incorrectly in xunit reporter,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The mocha xunit reporter escapes the grave character (`) incorrectly in the xunit reporter when placed in the spec name. It escapes it with &grave; which is valid in html but not in xml causing junit parsers (specifically jenkins in my test case but I have tested it with the w3schools validator as well with the same result) to not be able to parse test results.
Steps to Reproduce
Run the following code in the terminal.
npm init --yes
npm i -D mocha
echo ""const assert = require('assert');\nit('this `creates` bad xml', () => {assert.ok(true);});"" > test.js
./node_modules/.bin/mocha -R xunit -O output=report.xml test.js
Then take the resulting file and run it through an xml validator or a junit test result parser.
Expected behavior: [What you expect to happen]
produces a valid xml file
<testsuite name=""Mocha Tests"" tests=""1"" failures=""0"" errors=""0"" skipped=""0"" timestamp=""Mon, 11 Sep 2017 18:19:30 GMT"" time=""0.004"">
<testcase classname="""" name=""this `creates` bad xml"" time=""0.001""/>
</testsuite>
Actual behavior: [What actually happens]
Produces an invalid xml file with &grave; instead of the ""`"" character
<testsuite name=""Mocha Tests"" tests=""1"" failures=""0"" errors=""0"" skipped=""0"" timestamp=""Mon, 11 Sep 2017 18:19:30 GMT"" time=""0.004"">
<testcase classname="""" name=""this &grave;creates&grave; bad xml"" time=""0.001""/>
</testsuite>
Reproduces how often: [What percentage of the time does it reproduce?]
I am able to reproduce this 100% of the time.
Versions
Happens on mocha>=3.5.1
tested on osx 10.12 and ubuntu 14.04 with node 6.11.1, 6.11.2, 6.11.3
Additional Information",arwilczek90,NONE,2017-09-11 18:48:36+00:00,True,2017-09-11 19:57:35+00:00,0.05,,2,2,2017-09-11 19:57:35+00:00,0.05,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3004,Cannot run `ui: 'exports'` tests using API.,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Cannot run ui: 'exports' tests using API.  The call to mocha.run() throws an exception ""TypeError: Cannot read property 'skip' of undefined"".
Steps to Reproduce
Create a file MyTestFile.js with contents:
exports.MyTest = {
    myTestFunction() {
    }
};
Then run node -e ""const Mocha = require('mocha'); const mocha = new Mocha({ ui: 'exports' }); mocha.addFile('./MyTestFile.js'); mocha.run();""

Expected behavior:
Test should pass.
Actual behavior:
Throws exception:
/home/rpaterson/programming/signpost/toshokan/node_modules/mocha/lib/mocha.js:207
    exports.xit = context.xit || context.test.skip;
                                             ^

TypeError: Cannot read property 'skip' of undefined
    at Suite.<anonymous> (/home/rpaterson/programming/signpost/toshokan/node_modules/mocha/lib/mocha.js:207:46)
    at emitThree (events.js:116:13)
    at Suite.emit (events.js:194:7)
    at /home/rpaterson/programming/signpost/toshokan/node_modules/mocha/lib/mocha.js:230:11
    at Array.forEach (native)
    at Mocha.loadFiles (/home/rpaterson/programming/signpost/toshokan/node_modules/mocha/lib/mocha.js:228:14)
    at Mocha.run (/home/rpaterson/programming/signpost/toshokan/node_modules/mocha/lib/mocha.js:514:10)
    at [eval]:1:117
    at ContextifyScript.Script.runInThisContext (vm.js:25:33)
    at Object.exports.runInThisContext (vm.js:77:17)

Reproduces how often:
100% of the time.
Versions

Problem does not happen in v3.5.0, starts happening in v3.5.1.  The line that is throwing the exception was added in that release by 1cc0fc0.
Additional Information",rpaterson,NONE,2017-09-12 10:50:12+00:00,True,2018-12-17 16:15:10+00:00,461.23,,7,8,2017-09-13 00:26:24+00:00,0.57,ScottFreeCode,CONTRIBUTOR,3,1,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3006,Support ES6 style tests without transpiler usage,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Before I start, there are already some closed issues regarding this topic but as the prerequisites have changed I would like to start a new attempt.
Now that node supports running EMCAScript modules (yes, I know it is experimental) it would be great to see mocha to work in conjunction with mjs test definitions.
Steps to Reproduce
I have a very simple test
describe('Test', function () {
});

Which i have saved as test.js and test.mjs
Expected behavior: I would like both tests to show
- test/test.js 
  0 passing (1ms)
(node:70422) ExperimentalWarning: The ESM module loader is experimental.

Actual behavior: While the js test works, the mjs test gives me
- test/test.mjs 
module.js:658
    throw new errors.Error('ERR_REQUIRE_ESM', filename);
    ^

Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: /Users/dgehl/Repositories/LOreal/code/ecom-lora/test/frontend/components/global/test.mjs

Reproduces how often: 100%
Versions
 node --version - v8.5.0
mocha --version - 3.5.3
Additional Information
I think that this might be that mocha's runner is using commonjs and nodejs' current implementation disallows to use ECMAScript modules from a commonjs context.
Please don't reply with ""use a transpiler"", I want to explicitly not use one.
Edit: in an earlier version I accidentally used jsx instead of mjs.",SGD1953,NONE,2017-09-18 11:54:58+00:00,False,,,,19,55,2017-09-18 15:45:47+00:00,0.16,ScottFreeCode,CONTRIBUTOR,2,3,0,15,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3007,--delay and grep not working reliably,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I am running mocha with --delay and calling run(). Grep works unreliable with my tests unless I specify the exact file.
Steps to Reproduce
I created a gist to replicate: https://gist.github.com/plasticrake/71e6a69de1c9bf8d8234ab597cde6a77
mocha --delay

  Sync Mocha
    Will it grep3?
      ✓ it grepped3!

  Async Mocha
    Will it grep1?
      ✓ it grepped1!

  Async Mocha
    Will it grep2?
      ✓ it grepped2!

  3 passing (5ms)

grep1 works
mocha --delay -f grep1

  Async Mocha
    Will it grep1?
      ✓ it grepped1!

  1 passing (4ms)

grep3 works
mocha --delay -f grep3

  Sync Mocha
    Will it grep3?
      ✓ it grepped3!

  1 passing (4ms)

grep2 does not work
mocha --delay -f grep2


  0 passing (1ms)

However grep2 works if I specify the file:
mocha --delay test/mi2.js -f grep2


  Async Mocha
    Will it grep2?
      ✓ it grepped2!


  1 passing (5ms)

Expected behavior: grep to work consistantly
Actual behavior: grep fail to match SOME tests, but not all
Reproduces how often: always for certain files
Versions
mocha 3.5.3
node v8.5.0
Additional Information",plasticrake,NONE,2017-09-18 20:30:17+00:00,False,,,,3,2,2017-09-20 20:51:35+00:00,2.01,markowsiak,MEMBER,1,1,0,0,"['feature', 'needs-feedback', 'needs-review', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False
3008,await -require,"There's a script populating the database before tests.
There are tests manipulating on data in the database.
And those manipulations are deterministic therefore dealing with exact certain rows and exact certain values.
Those values are taken from the database (could be random as well), but since the process of taking the values is asynchronous the tests don't wait for it and proceed with executing themselves therefore failing.
Is there any way to wait for some asynchronous code before the tests run.",catamphetamine,NONE,2017-09-20 09:31:48+00:00,True,2017-09-20 19:37:51+00:00,0.42,,2,7,2017-09-20 19:12:34+00:00,0.4,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3009,Impact of `setImmediate` between hooks on Promises,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I'm opening this issue as a result of an investigation into domenic/chai-as-promised#173. However, there's a lot of unrelated noise in that thread, so I'll demonstrate the issue here independently of chai-as-promised.
Hooks typically wait until the next tick of the event loop before proceeding, per these lines. As a result, if a Promise with no rejection handler is declared in a hook prior to the test in which the rejection handler is added to the Promise, then a warning is typically generated about an unhandled promise rejection, followed by another warning about asynchronous handling of the promise rejection.
I used the word ""typically"" twice above because what I described doesn't apply to the final beforeEach prior to the test; unlike the other hooks, the final beforeEach proceeds immediately to the test, without waiting for the next tick of the event loop.
Steps to Reproduce
Example 1:
let promise;

describe(""mySuite"", function () {
  before(function () {
    promise = Promise.reject(new Error());
  });

  it(""myTest"", function () {
    promise.catch(function () {});
  });
});
Example 2:
let promise;

describe(""mySuite"", function () {
  beforeEach(function () {  // This is the only different line
    promise = Promise.reject(new Error());
  });

  it(""myTest"", function () {
    promise.catch(function () {});
  });
});
Expected behavior: Although the tests are meaningless, ideally I'd expect neither of the examples to generate any unhandled promise rejection warnings, or at least for both examples to result in the same behavior.
Actual behavior: Example 1 generates an unhandled promise rejection and Example 2 doesn't.
Example 1 output:


mocha

mySuite
(node:14219) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error
(node:14219) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
✓ myTest
(node:14219) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 1)
1 passing (11ms)

Example 2 output:


mocha

mySuite
✓ myTest
1 passing (7ms)

Reproduces how often: 100%
Versions
Node v8.5.0
Mocha v3.5.3
Additional Information
Changing this line to favor process.nextTick over global.setImmediate fixes the issue so that neither example generates a warning, and the Mocha test suite still passes. But I don't know what other consequences there are.
I think that in most situations this issue isn't a problem. Most promises being tested in the wild have (or should have) rejection handlers already registered, so no warning would be generated in those cases, despite the next tick between hooks. I just started digging in order to understand what was happening with domenic/chai-as-promised#173. The example in that issue is completely contrived, as are the examples I provided here.",meeber,NONE,2017-09-21 01:07:50+00:00,False,,,,5,15,2017-09-21 02:01:47+00:00,0.04,ScottFreeCode,CONTRIBUTOR,1,1,0,2,"['confirmed-bug', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3010,Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.,"I had the error Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test., but in this test, done() not used. in before() function, promise returned.
I tried to look into this issue: 1, any done() hidden? 2, I searched in the repo, but I did not find Ensure the done() callback is being called in this test. in the source codes.
By the way, my mocha version is 2.1.0
Is it because of bluebird is used and the returned promise not resolved?",chengchengpei,NONE,2017-09-21 20:07:04+00:00,True,2017-09-29 18:55:58+00:00,7.95,,9,13,2017-09-21 23:05:25+00:00,0.12,ORESoftware,NONE,1,1,0,6,"['faq', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3011,Expose public API for accessing diffs,"Prerequisites


[ x] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha prints nice diffs for failed assertions. It'd be great to show these diffs when running mocha tests in IDE.
Currently, IDE accesses err object directly to format error info: https://github.com/JetBrains/mocha-intellij/blob/3c40655fcb8e4b216586d19ab83cac8c3f98e4a9/lib/mochaIntellijReporter.js#L157-L176 and doesn't print diffs in console (only clicking ""Click to see difference"" opens a separate diff dialog).
What do you think about allowing IDE to show unified diffs for failed assertions? // cc @boneskull
A possible API might look this:
// lib/utils.js

exports.prettifyError = function (err) {
  return {
    msg: '<colored text with unified diff>',
    stack: '<colored tail of stack>'
  };
};
In this case, both list function from lib/reporters/base.js and IDE may use prettifyError.
Original issue in WebStorm's tracker: https://youtrack.jetbrains.com/issue/WEB-28905",segrey,CONTRIBUTOR,2017-09-25 15:40:22+00:00,False,,,,6,5,2017-09-26 18:46:10+00:00,1.13,boneskull,MEMBER,2,0,0,2,"['feature', 'help wanted', 'reporter']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3012,Rest API Performance.,"I have been trying to run a node.js application having database calls(sqllite3) and then running mocha tests to check the REST API endpoints. I am making around 5k requests, and on my system it takes around 30 sec to execute all of it.
I have a platform where I have 1gb RAM to use and when I run the exact above application with the tests it takes around 4 minutes to execute.
Does the RAM make such a difference or I am doing anything wrong?",monera23,NONE,2017-09-25 18:33:38+00:00,True,2017-09-27 02:43:04+00:00,1.34,,3,3,2017-09-25 23:10:11+00:00,0.19,ScottFreeCode,CONTRIBUTOR,1,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3013,use dont-break,"See dont-break which is pretty awesome.

take a look on libraries.io and see what the most popular packages built on top of mocha are (mocha would be a dependency of said projects)
add a select few to the dont-break config

This could be slow, but perhaps do it as a preversion lifecycle script.
BONUS POINTS: Implement something that will automatically pull the top n packages depending on package x and hand them off to dont-break.",boneskull,MEMBER,2017-09-26 03:30:59+00:00,True,2017-10-03 06:11:38+00:00,7.11,,2,3,2017-09-26 03:40:27+00:00,0.01,ScottFreeCode,CONTRIBUTOR,1,1,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3014,setTimeout() after done() is called (--watch mode),"Hello, thanks for your work on this project.
The following test passes when calling mocha from cli, but the assertion throws after the test passes when adding the --watch flag.
Changing setTimeout to process.nextTick makes the test always pass in both modes.
Changing the delay on setTimeout to lower values (10ms) makes the test pass sometimes in watch mode.
What is the expected behaviour?
var assert = require('assert');

describe('Works consistently in regular cli and watch mode', function() {
  it('ignores setTimeout after done is called', function(done) {
    function myFunc(callback) {
      callback('sync');
      setTimeout(function() { callback('async'); }, 100);
    }

    myFunc(function(data) {
      assert.equal(data, 'sync');
      done();
    });
  });
});
Kind regards,
mocha 3.5.3
node 6.11.2
macOS 10.12.6",gabssnake,NONE,2017-09-26 09:53:21+00:00,True,2018-02-17 06:16:55+00:00,143.85,,3,5,2017-09-26 21:29:53+00:00,0.48,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['stale'],False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3016,drop Node.js v0.10 and v0.12 support,"We can no longer run our development environment on node.js v0.10/v0.12 (see request/request#2772) without adding a npm-shrinkwrap.json or doing other high-effort/low-reward things to work around this.
furthermore, it's making it more difficult to apply security fixes.  at least one of these Node.js  versions (v0.10) has known vulnerabilities which have gone unpatched (in an official capacity).
we should not continue to supply updates for these environments.

 remove 0.10, 0.12, iojs & 5 from .travis-ci.yml and appveyor.yml
 update engines field in package.json
 necessary security upgrades (this includes debug and growl)
 upgrade anything else we can get away with (stick to dev deps)

To be clear, Mocha still runs in Node.js v0.10 and v0.12; you just can't clone a working copy and run the test suite.",boneskull,MEMBER,2017-09-27 03:17:44+00:00,True,2017-09-27 17:29:12+00:00,0.59,v4.0.0,2,10,2017-09-27 03:21:39+00:00,0.0,boneskull,MEMBER,1,1,0,0,"['chore', 'security', 'semver-major']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True
3018,upgrade (mostly) production deps,"after #3016 but before v4.0.0, these production deps should be upgraded to the latest version, if not too painful:

commander
debug
diff
glob
lodash.create
readable-stream
supports-color

the following dev deps should be upgraded as well, with caveats:

karma-phantomjs-launcher: this should be part of #2979
karma: depends on previous item
browserify: unknown effect on browser bundle",boneskull,MEMBER,2017-09-27 04:50:42+00:00,True,2017-09-29 23:50:32+00:00,2.79,v4.0.0,1,1,2017-09-29 23:50:32+00:00,2.79,boneskull,MEMBER,1,0,0,0,"['chore', 'semver-major']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
3021,use difft karma reporter,As per #2882 there are problems showing diffs.  this reporter looks better; let's try it.,boneskull,MEMBER,2017-09-27 20:01:42+00:00,True,2017-09-29 18:12:22+00:00,1.92,v4.0.0,1,1,2017-09-29 18:12:22+00:00,1.92,boneskull,MEMBER,1,0,0,0,"['chore', 'qa']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3022,add Electron build to matrix?,"I'd like to see an assertion that Mocha works in Electron.
maybe using dont-break (#3013) against electron-mocha would be sufficient?  thoughts?
cc @mochajs/core",boneskull,MEMBER,2017-09-27 20:33:59+00:00,False,,,,3,3,2018-12-20 22:55:48+00:00,449.1,craigtaub,MEMBER,3,0,0,0,"['chore', 'qa', 'semver-patch']",True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3023,Mocha doesn't run async code properly have to add wrapper,"it('should run async code', function() {

    (async function main() {

      let upload = await Upload.findOne({
        uploadUrl: {$exists: true},
        visibility: 'public'
      }).populate('checkedViews uploader').exec();

      console.log(upload);

      upload.should.be.an('object');

    })();

  });

Otherwise I get
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
If I try and change the it function to an async function. How can I use async/await?",mayeaux,NONE,2017-09-28 02:31:49+00:00,True,2017-09-28 02:36:31+00:00,0.0,,2,2,2017-09-28 05:02:49+00:00,0.1,ORESoftware,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3025,allow package-lock.json,"mainly for performance reasons.  this will allow for better caching in CI, among other things.",boneskull,MEMBER,2017-09-28 04:24:30+00:00,True,2017-12-10 05:41:36+00:00,73.05,,1,1,2017-09-28 05:38:18+00:00,0.05,boneskull,MEMBER,1,0,0,0,"['chore', 'help wanted', 'qa', 'semver-patch']",True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3027,Cannot run the same suite multiple times,"Description
I want to run mocha tests programmatically multiple times.
I'm aware of the workaround with deleting require.cache but it works only for a small number of tests.
Steps to Reproduce
let mocha = new Mocha({
            ui: 'bdd',
            reporter: 'spec',
            useColors: true,
            timeout: 50000,
            fullTrace: true
        });
        let alltests = 10, finished = 0;
        for(let id=0;id<alltests;id++) {
            let filename = '../test/sometest.spec.js';
            mocha.addFile(filename);

            mocha.run(failures => {
                if(failures)
                    logger.error('#' +id + ' All done - test failures: ', failures);
            })
            .on('test', function(test) {
                logger.info('#' +id + ' Test started: '+test.title);
            })
            .on('test end', function(test) {
                logger.info('#' +id + ' Test done: '+test.title);
            })
            .on('pass', function(test) {
                logger.info('#' +id + ' Test passed: '+test.title);
            })
            .on('fail', function(test, err) {
                logger.info('#' +id + ' Test fail: '+test.title, err);
            })
            .on('end', function() {
                logger.info('#' +id + ' All done');
            });

            //mocha.suite.suites = [];
            let p = path.resolve(path.join(__dirname, filename));
            let rp = require.resolve(p);

            delete require.cache[rp];
        }
Expected behavior:
All 10 runs should pass
Actual behavior:
First 7 runs pass, the last 3 runs fail with error:
TypeError: Cannot read property 'call' of undefined
If I uncomment mocha.suite.suites = [], all tests end right away.
Reproduces how often:
always
Versions
mocha --version: 3.5.3
node node_modules/.bin/mocha --version: 3.5.3
node --version: v6.11.1",markb-trustifi,NONE,2017-09-28 10:56:22+00:00,True,2018-06-06 20:22:00+00:00,251.39,,3,7,2017-09-29 18:57:53+00:00,1.33,boneskull,MEMBER,2,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3028,make grep more powerful,"I not infrequently find that I want to use both --grep and --invert --grep in the same test command: inclusively filter to a set of tests and exclude a subset of those too.
Just to put this out there for discussion, what if we:

created --invert-grep or --grep-not, which would be equivalent to the current --invert --grep
optionally remove --invert for clarity in a semver major (we could see how much confusion it causes first)
until it's removed consider it an error to use --invert with the new --invert-grep/--grep-not
allow both --grep and --invert-grep/--grep-not in the same command, filtering to tests that satisfy both
optionally allow multiple --grep or --invert-grep/--grep-not, filtering to tests that satisfy all (this allows more flexible filtering than --grep ""one thing.*another thing"" as it does not care about the order; ORing is not significantly more powerful than | in a --grep in contrast and makes almost no sense for --invert-grep/--grep-not*, so we don't really need it but if there's any use for it a --or-greps option to change from ANDing to ORing would do -- I guess some of this explanation also applies even if multiple of the same type aren't allowed, just one of each type)

* You'd only exclude tests that contain the --invert-grep/--grep-not and do not also contain the --grep, which is awfully broad... conceivably this could mean ""use --grep to make exceptions to the tests filtered out by --invert-grep/--grep-not"", but this seems less likely to be a common use case. Something similar goes for ORing multiple --invert-grep/--grep-not.",ScottFreeCode,CONTRIBUTOR,2017-09-28 15:21:46+00:00,False,,,,4,0,,,,,0,0,0,0,"['feature', 'help wanted', 'semver-minor']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3029,remove special cases around unsupported Node.js versions,"@ScottFreeCode I think basically we're looking at reverting  8710438, but also if you see anything else in the code please zap that nasty",boneskull,MEMBER,2017-09-28 18:11:16+00:00,False,,,,2,4,2017-09-29 18:20:20+00:00,1.01,boneskull,MEMBER,1,0,0,0,"['chore', 'help wanted', 'semver-patch']",True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3030,Make --forbid-only (but not --forbid-pending) default,"Eventually let's make --forbid-only the default and use --no-forbid-only to disable it. Lots of CI will get safer for free!
(Pending, on the other hand, isn't so dangerous to begin with and has more long-term use-cases. It'll be inconsistent, but let's leave pending as-is.)",ScottFreeCode,CONTRIBUTOR,2017-09-29 00:24:12+00:00,False,,,,4,3,2017-09-29 06:42:56+00:00,0.26,boneskull,MEMBER,2,0,0,1,['semver-major'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
3031,Print one failure per suite with forbid-only/forbid-pending,"As of #2874, forbid-only and forbid-pending print one failure for each test in a suite that is marked only or skip. It would be neater if they just printed one failure per suite. This would probably also solve #2944, which is a more critical correctness issue where this is... just a matter of good output.",ScottFreeCode,CONTRIBUTOR,2017-09-29 00:30:12+00:00,False,,,,1,0,,,,,0,0,0,0,['semver-major'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
3032,Ensure Mocha's tests are checking forbid with/without suite,"At least since we moved from .hasOnly to hasOnly(...) (#2544), the behavior of the forbid options must be carefully implemented to avoid accidentally not checking from all the way back at the root suite when:

the tests are in a (non-root) suite
the tests are not in a (non-root) suite
the tests are in a suite that is in a (non-root) suite

The current implementation should be fine, but we only have tests for some of these cases; add tests for the rest of them to ensure future changes don't break anything.",ScottFreeCode,CONTRIBUTOR,2017-09-29 02:39:24+00:00,False,,,,2,0,,,,,0,0,0,0,"['help wanted', 'qa', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3035,Nuke `should`,"I am tired of running into this: https://travis-ci.org/mochajs/mocha/builds/281135003?utm_source=github_status&utm_medium=notification [To save others digging: these tests are fine, they pass on Node, they would pass in browser but we're using only expect.js in browser because there used to be no should compatibility there.]
We need to go through the remaining uses of should in our tests and change them to expect, then remove should from our mocha.opts and any fixtures, then remove should from package.json!",ScottFreeCode,CONTRIBUTOR,2017-09-29 03:15:32+00:00,True,2017-10-06 01:41:07+00:00,6.93,,3,4,2017-10-02 07:21:01+00:00,3.17,ngeor,CONTRIBUTOR,0,2,0,0,"['help wanted', 'qa', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3037,consider using something else instead of commander,"there are a couple problems with commander:

the upgrade from 2.9.x to 2.11.x introduced breaking changes
we're fiddling with commander's internals in at least one place in bin/_mocha
no out-of-box support for passing node flags

Ideally whatever module we consume instead should adhere more strictly to semver and allow us to consolidate the executables in bin/.",boneskull,MEMBER,2017-09-29 19:07:10+00:00,True,2018-12-10 16:52:58+00:00,436.91,,4,5,2017-12-18 11:48:32+00:00,79.7,Bamieh,MEMBER,2,1,0,1,"['chore', 'nice-to-have', 'semver-minor']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3043,How to set value of dropdownlist in React?,"I'm beginner to testing side of programming and try to learn mocha while preparing BDD scenarios.
I tried to setValue of dropdown list but I couldn't achieve it.
Also I couldn't decide if I post this here or stackoverflow so pardon me if I did the wrong.
Here's the codes;
describe('Authentication Test Suite', function () {
    it('should click on the Add Device button and fill step 1', function () {
        return browser
            .url('http://localhost:8765')
            .click('.page-actions')
            .getText('.selectTemplate')
            .setValue('#name', 'iotdemo')
            .setValue('#description', 'deneme')
            .setValue('#authToken', '1234')
            .setValue('#selectTemplate', 'emre')
            .click('.next')
            .waitForVisible('.deviceInfo.serialNumber', 9000)
        //.getText('.login-form-error').description
        //.should.eventually.be.equal('Login is failed.');
    });
});

And my dropdown list;
<FormItem label=""Device Template"">
                <Select id=""selectTemplate"" placeholder=""Select device template"" value={this.props.rootObject.templateId} onChange={this.props.selectTemplate}>
                  {this.props.templates && this.props.templates.map((template, index) => 
                    <Option key={index} value={template.id}>{template.name}</Option>
                  )}
                  
                  {/* <Option value=""template2"">Template 2</Option> */}
                </Select>
              </FormItem>",burakuluu,NONE,2017-10-03 06:47:30+00:00,True,2017-10-04 05:04:44+00:00,0.93,,2,1,2017-10-04 05:04:44+00:00,0.93,boneskull,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3044,mocha 4 doesn't exit unlike mocha 3,"Prerequisites

[x ] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have been running specific set of tests for few years now and have been always upgrading to the latest mocha and everything was ok.
With mocha 4 suddenly all tests are passing but it doesn't end as if the --no-exit is automatically added although I never added it.
Steps to Reproduce
Expected behavior:
After all tests end, the process should stop even if there are timeoutes or sockets that prevent the process from existing.
Actual behavior:
Mocha 4 process waits forever like mocha 3 with --no-exit flag
Reproduces how often:
With our tests always. I have 700 tests so it is hard to pinpoint which one casuses the issue or if maybe it is in our codebase.
Versions
mocha 4.0.0 fails. before that everything works good.",sagiegurari,NONE,2017-10-03 08:00:14+00:00,True,2017-10-04 05:02:34+00:00,0.88,,21,49,2017-10-03 08:49:40+00:00,0.03,mkrufky,NONE,1,1,0,19,"['faq', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3045,Add `--expose-internals` to `bin/mocha`'s allowed Node flags,Allow tools such as why-is-node-running to be used with Mocha calling mocha --expose-internals instead of node --expose-internals node_modules/mocha/bin/_mocha. Helps with #3044,ScottFreeCode,CONTRIBUTOR,2017-10-03 18:44:36+00:00,False,,,,4,9,2017-10-04 04:27:17+00:00,0.4,boneskull,MEMBER,1,1,0,2,"['chore', 'semver-minor']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3046,unexpected token import if use of import with promise,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Using a setup wit react and webpack 3, js/jsx is transpiled with babel preset es2015. Of course we use import to get the components, no problems so far. For code splitting we also use import with promises within functions. Running the test we now get the error ""unexpected token import"". Webpack itself runs without problems and creates the needed bundles.
Steps to Reproduce
no problems with usual import like
import React, { Component, PropTypes } from 'react';
problems occur with promises to split the code:
    importLayout() {
        import('./foobar/index').then(module => {
            this.setState({ foobar: module.default });
        });
    }

In earlier Versions of Webpack this was done with require.ensure
the testing-script in package.json contains
mocha --compilers js:babel-register
Expected behavior:
Mocha has no problems wit the regular import, there should'nt be problems with the promises neither
Actual behavior:
Syntax Error while testing ""unexpected token import""
The test is interrupted
Reproduces how often:
always happening
Versions
If applicable, please specify:

The output of mocha --version and node node_modules/.bin/mocha --version: 3.5.3
The output of node --version: v8.4.0
The version and architecture of your operating system: Mac OSX Sierra
Your shell (bash, zsh, PowerShell, cmd, etc.): Darwin
Your browser and version (if running browser tests): Any Browser, e.g. latest Chrome
Any other third party Mocha related modules (with versions):
The code transpiler being used: 6.26.0 (babel-core 6.26.0)

Additional Information
Also tried with the latest version of Mocha without success",wende60,NONE,2017-10-04 09:18:44+00:00,True,2017-10-04 19:17:20+00:00,0.42,,3,8,2017-10-04 13:45:58+00:00,0.19,ScottFreeCode,CONTRIBUTOR,1,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3050,mocha 4.0.0 hangs with mocha-mongoose,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

when running with:
    ""mocha-mongoose"": ""^1.2.0"",
    ""mongoose"": ""^4.12.0""

It hangs:
https://travis-ci.org/amongouser/mocha-mongoose-hang/builds/283281361
works fine for mocha 3.x:
https://travis-ci.org/amongouser/mocha-mongoose-hang/builds/283280299
Steps to Reproduce
see this code: https://github.com/amongouser/mocha-mongoose-hang
Expected behavior: Runs ok like 3.x
Actual behavior: Hangs
Reproduces how often: 100%
Versions
see travis builds
Additional Information
mocha-mongoose issue: elliotf/mocha-mongoose#22",amongouser,NONE,2017-10-04 16:56:58+00:00,True,2017-10-04 18:04:19+00:00,0.05,,2,1,2017-10-04 18:04:19+00:00,0.05,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3052,Cannot shrinkwrap because of UNMET PEER DEPENDENCY eslint@>=3.1.0,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Cannot run  npm shrinkwrap because of UNMET PEER DEPENDENCY eslint@>=3.1.0 following installation.
npm ERR! Windows_NT 10.0.15063
npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""shrinkwrap""
npm ERR! node v7.10.0
npm ERR! npm  v4.2.0

npm ERR! Problems were encountered
npm ERR! Please correct and try again.
npm ERR! peer invalid: eslint@>=3.1.0, required by eslint-plugin-node@5.2.0
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     <https://github.com/npm/npm/issues>

Steps to Reproduce

Delete node_modules directory
Run npm install
Run npm shrinkwrap
Expected behavior: npm shrinkrwap should generate an npm-shrinkwrap.json file
Actual behavior: npm ERR!
Reproduces how often: 100%
Versions
If applicable, please specify:

The output of mocha --version and node node_modules/.bin/mocha --version: 3.5.0
The output of node --version: v7.10.0
The version and architecture of your operating system: Windows x64
Your shell (bash, zsh, PowerShell, cmd, etc.): cmd/PowerShell

Additional Information",clocked0ne,NONE,2017-10-05 10:44:03+00:00,True,2017-10-05 23:58:23+00:00,0.55,,3,4,2017-10-05 16:39:50+00:00,0.25,dpogue,CONTRIBUTOR,1,1,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3056,normalize suite and test titles,"This has bugged me since forever.
Some suites and tests have titles like #foo or .foo and some which correspond to a function have parens (#foo()) and some don't.
let's make sure this is consistent across the tests.  I propose doing away with any leading or trailing punctuation",boneskull,MEMBER,2017-10-06 15:46:51+00:00,True,2018-11-18 18:23:30+00:00,408.11,,3,3,2017-10-06 21:08:43+00:00,0.22,ScottFreeCode,CONTRIBUTOR,2,1,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3058,normalize setters and getters,"The main classes (Runnable, Test, Context, Suite, Mocha, etc.) have these setter/getter functions, e.g. Runnable#timeout().  Not all of these, however, implement the ""getter"" part, where it's supposed to just return the value if it receives no arguments.
Furthermore, there are some methods that might check if the first argument is undefined; they need to check length of arguments instead, because undefined or void 0 is a valid argument.",boneskull,MEMBER,2017-10-06 16:08:56+00:00,True,2017-10-27 01:13:26+00:00,20.38,,1,0,,,,,0,0,0,0,"['chore', 'help wanted', 'semver-minor']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3059,"after 3 with 4, I have a client side function, and all it does it stops processing","Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

I found the file that stops, do you have an idea why it stops the processing?
Although, I am using Chrome instead of PhatomJs, but it is an older functions, so it works with very old functions as well, so it is so weird.
(function(window, document, navigator) {
    'use strict';
    if (window.corifeusCssFiles === undefined && window.corifeusScriptFiles === undefined) {
        window.corifeusCssFiles = [];
        window.corifeusScriptFiles = [];
    }
    window.corifeus = {
        booted: false,
        core: {
            http: {
                counter: 0
            }
        }
    }
    window.corifeusPreloader = {
        wait: navigator.userAgent === 'corifeus-server-renderer',
        status: {
            corifeus: window.corifeus
        }
    }

    'GENERATED-HEAD';

    if (!document.getElementById) {
        document.getElementById = function() {};
    }

    var cssFiles = window.corifeusCssFiles;
    var scriptFiles = window.corifeusScriptFiles;
    var files = cssFiles.concat(scriptFiles);
    var progress = {};
    var responseText = {};
    var started = new Date().getTime();

    function formatBytes(bytes,decimals) {
        if(bytes == 0) return '0 Byte';
        var k = 1000; // or 1024 for binary
        var dm = decimals + 1 || 3;
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        var i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    var formatTime = function(time) {
        var seconds = Math.floor(time / 1000);
        var minutes = Math.floor(seconds / 60);
        var hours = Math.floor(minutes / 60);
        var days = Math.floor(hours / 24);

        hours = hours - (days * 24);
        minutes = minutes - (days * 24 * 60) - (hours * 60);
        seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);
        if (days < 10) days = '0' + days;
        if (hours < 10) hours = '0' + hours;
        if (minutes < 10) minutes = '0' + minutes;
        if (seconds < 10) seconds = '0' + seconds;

        var template = '';
        if (days != '00') {
            template += days + ':';
        }
        if (hours != '00' || days != '00') {
            template += hours + ':';
        }
        template += minutes + ':';
        template += seconds

        return template;
    }
    function loadFile(url) {
        var xhr = new XMLHttpRequest();
        xhr.open(""GET"", url, true);
        xhr.onreadystatechange = function() {
            if (this.readyState == this.DONE) {
                responseText[url] = xhr.responseText;
                fire(true, this.responseText);
            }
        };
        xhr.onprogress = function(event) {
            progress[url] = event;
            fire();
        }
        xhr.send();
    }
    function iterate(cb) {
        for(var index = 0; index < files.length; index++) {
            var file = files[index];
            cb(file);
        }
    }
    function includesCss(file) {
        for(var index = 0; index < cssFiles.length; index++) {
            var cssFile = cssFiles[index];
            if (cssFile === file) {
                return true;
            }
        }
        return false;
    }
    var total = 0;
    var loaded = 0;
    var counter = 0;
    var totalDone = false;
    var frame = 33;
    var computable = true;
    var overlayPercent = function(percent) {
        document.getElementById('cory-loader-progress-overlay').style.height = Math.round(percent) + '%';
        document.getElementById('cory-loader-progress-overlay').style.width = '100%';
    }

    var loop = (function() {
        if (totalDone) {
            return;
        }
        if (document.getElementById('cory-loader-progress-bottom')) {
            var percentRaw = (loaded / total);
            var percent = (percentRaw * 100).toFixed(2);
            var totalMB = formatBytes(total, 1);
            var loadedMB = formatBytes(loaded, 1);
            if (isNaN(percent)) {
                percent = 0.5;
            }
            var current = new Date().getTime() - started;
            var maxTime = current / percent * 100;
            var left = maxTime - current;

            overlayPercent(percent);
            var top = document.getElementById('cory-loader-progress-top');
            var bottom = document.getElementById('cory-loader-progress-bottom');

            if (computable) {
                top.innerHTML = formatTime(left);
                bottom.innerHTML  = percent + '%' + '<div class=""cory-loader-progress-info"">' + loadedMB + ' / ' + totalMB + '</br>' + formatTime(current) + ' / ' + formatTime(maxTime) + '</div>';
            } else {
                top.innerHTML = '<div class=""cory-loader-progress-info"">gzip</div>';
                bottom.innerHTML = formatTime(current) + '</br></br>' + loadedMB;
            }
        }
        setTimeout(loop, frame);
    });
    loop();

    function fire(isDone) {
        total = 0;
        loaded = 0;
        iterate(function(file) {
            if (progress[file] !== undefined) {
                if (progress[file].lengthComputable === false) {
                    computable = false;
                    total += progress[file].loaded;
                } else {
                    total += progress[file].total;
                }
                loaded += progress[file].loaded;
            }
        })

        totalDone = isDone === true && ++counter == files.length;

    }
    var final = function() {
//        document.getElementById('cory-loader-progress-top').innerHTML = '<div></div>';
//        document.getElementById('cory-loader-progress-bottom').innerHTML = '<span class=""cory-loader-progress-start"">START</span>';
        overlayPercent(100);
        setTimeout(function() {
            iterate(function(file) {
                var body = document.querySelector('body');
                var head = document.querySelector('head');
                // it is important so that the css is in the head
                if (includesCss(file)) {
                    /*
                    var style = document.createElement('style');
                    style.type = 'text/css';
                    style.innerHTML = responseText[file];
                     head.appendChild(style)
                    */
                    var link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.href = file;
                    link.type = 'text/css';
                    head.appendChild(link);
                } else {
                    var script = document.createElement(""script"");
                    script.type = 'text/javascript';
                    script.defer = true;
                    script.src = file;
                    /*
                    script.innerHTML= responseText[file];
                    */
                    body.appendChild(script);
                }
            })
            var booted = function() {
                if (window.corifeus.booted === true) {
                    var removeMe = document.getElementById('cory-loader');
                    if (removeMe !== null) {
                        removeMe.parentNode.removeChild(removeMe);
                    }
                }
                else {
                    setTimeout(booted, 100);
                }

            }
            booted();
        }, frame)
    }

    iterate(function(file) {
        loadFile(file, fire)
    })

    var waitForDone = function() {
        if (totalDone && !window.corifeusPreloader.wait) {
            final();
            return;
        }
        window.corifeusPreloader.status.corifeus = window.corifeus;
        setTimeout(waitForDone, frame);
    }
    waitForDone();
})(typeof(window) === 'undefined' ? this : window, typeof(document) === 'undefined' ? {} : document, typeof(navigator) === 'undefined' ? { userAgent : 'corifeus-server-renderer'} : navigator);
Expected behavior: [What you expect to happen]
Continue to process with mocha (with v4 or above)
Actual behavior: [What actually happens]
Stops processing.
Reproduces how often: [What percentage of the time does it reproduce?]
Versions

Pure Js, no transpiler, although
4.0.1
Additional Information


Although, there are other files, but I choose js only.",p3x-robot,NONE,2017-10-06 18:12:47+00:00,True,2017-10-09 05:12:08+00:00,2.46,,2,1,2017-10-09 05:12:08+00:00,2.46,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3060,Passing Flags to Node.js,"I can't figure out a way to pass the --expose-http2 flag to node. I would like to be able to do:
mocha test.js -- --expose-http2
OR
mocha test.js --node-flags 'expose-http2'

Is this currently possible (using mocha v3.2.0)?",MarkHerhold,NONE,2017-10-07 02:34:05+00:00,True,2017-10-07 18:31:30+00:00,0.66,,12,15,2017-10-07 13:45:04+00:00,0.47,jondubois,NONE,0,2,0,10,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3063,Nested describe with loop inside,"First of all I already searched for issues and answers on this repository and on Stack Overflow but I didn't find a solution that fit with my needs.
I have to follow these steps:

Get some user from DB
Perform a login
Test the policy of my application
Logout

I have to do this for each user that i fetch from the DB. So i write my test like this:
describe('Starting the server', function () {

  before(function () {
    // .... code to start the nodejs server
  });

  after(function () {
    // ... code to stop the server
  });

  describe('Fetching Users' , function () {
    return MyDbService.getUsers(myCriteria).toArray().each(function (user) {
     describe('Testing the user: ' + user.username, function () {

       before(function () {
         // ... login
       });
       after(function () {
         // ... logout
       });

       it('Check policy', function () {
           supertest(myServerInstance)
            .get('/myRoute')
            .expect(200)
        });

      });
    });
  });

});

The primary problem is that the first before functions aren't executed, so the login won't be performed. In this way the test will always fail.
So I tried to replace the describe functions with the it ones where I need to execute the before and after hooks.
It still doens't work as I expect. I see this issue. The beforeDescribe could solve all my problems but I saw that it won't be implemented.
So here I am asking: How should I write this test?",NicholasPeretti,NONE,2017-10-09 10:51:13+00:00,True,2017-10-10 09:09:45+00:00,0.93,,2,2,2017-10-09 16:51:07+00:00,0.25,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3065,Runner `end` event can’t be caught if the `grep` option matches no tests,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When running Mocha programmatically or in a browser, mocha.run() returns the test runner instance and event handlers can be attached to it. However, when the grep option is used and it matches no tests, ]it emits the end event synchronously](https://github.com/mochajs/mocha/blob/master/lib/runner.js#L621-L623) before the runner is ever returned from mocha.run() and before any third-party code could attach a listener.
I know I can work around this by providing a callback to mocha.run(), but it still seems reasonable to expect that you’d always have an opportunity to attach an event listener before the end event fires.
Steps to Reproduce
If I have a test suite at /single-test.js that looks like:
describe('Test suite', function () {
  it('A single passing test', function() {
    // this passes
  });
});
And I run the following:
const Mocha = require('mocha');
const mocha = new Mocha({ui: 'bdd', grep: /unmatchable/});
mocha.addFile('/single-test.js');
mocha
  .run()
  .on('end', () => console.log('End event handled!'));
Expected behavior: I expect “End event handled!” to be logged to the console.
Actual behavior: The test suite runs, but my handler does not.
Reproduces how often: 100%
Versions
Mocha 4.0.1",Mr0grog,NONE,2017-10-11 01:35:43+00:00,True,2017-10-17 04:17:31+00:00,6.11,,3,3,2017-10-11 02:50:56+00:00,0.05,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3066,`mocha -w` continuously reruns when writing a file,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
mocha -w continuously reruns when writing a file during the test
Steps to Reproduce
clone https:github.com/zwhitchcox/mocha-err
run yarn test
. I created a video description of the problem
Expected behavior: mocha -w should run once when writing a file unrelated to test
Actual behavior: mocha -w continuously reruns when writing a file
Reproduces how often: [What percentage of the time does it reproduce?] 100%
Versions
mocha v4.0.1
node 8.4.0
GaliumOS
bash",zwhitchcox,NONE,2017-10-11 23:02:40+00:00,True,2017-10-17 04:20:07+00:00,5.22,,3,3,2017-10-11 23:06:01+00:00,0.0,zwhitchcox,NONE,1,1,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3067,Errors if growlnotify is not in path on mac,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
As titled.
Steps to Reproduce

Expected behavior: no error
Actual behavior:
An error occured. { Error: spawn growlnotify ENOENT
    at _errnoException (util.js:1019:11)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:192:19)
    at onErrorNT (internal/child_process.js:374:16)
    at _combinedTickCallback (internal/process/next_tick.js:138:11)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'ENOENT',
  errno: 'ENOENT',
  syscall: 'spawn growlnotify',
  path: 'growlnotify',
  spawnargs:
   [ '--image',
     '/Users/matteo/Repositories/MQTT.js/node_modules/mocha/images/error.png',
     '--name',
     'mocha',
     '-m',
     '1 of 352 tests failed',
     'Failed' ] }

Reproduces how often: 100%
Versions
4.0.1, worked fine on 3.",mcollina,NONE,2017-10-13 13:01:26+00:00,True,2017-10-16 16:46:21+00:00,3.16,,7,12,2017-10-13 17:59:46+00:00,0.21,tripu,CONTRIBUTOR,1,2,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3068,Karma + Mocha + reporter options crash,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha crash when setup option that are not prototyped (a.k.a function)
Error is: Uncaught TypeError: this[opt] is not a function at node_modules/mocha/mocha.js:135
Steps to Reproduce
Create a karma boilerplate and setup in karma.conf.js:
        // Pass configuration options directly to mocha
        client: {
            mocha: {
                reporter:        'myReporter',
                reporterOptions: { /*Ka-boom*/ }
            }
        }
Expected behavior: This to be fixed ?
Actual behavior: This crash the test run when set reporter options in karma.conf.js
Reproduces how often: 100%
Versions
Mocha version: 4.0.1
Node version: 8.7.0
System: Win10 x64
Shell: any
Browser: any
Third party: Karma v1.7.1
No transpiling
Additional Information
https://github.com/Itee/karma-mocha-reporterOption-crash
PR: #3069",Itee,NONE,2017-10-13 15:55:08+00:00,True,2017-10-17 04:21:05+00:00,3.52,,3,5,2017-10-15 06:48:53+00:00,1.62,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3070,#after not working while other hooks (ie. beforeEach) are,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[no-idea] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
My test did work, but then I needed some post-test logic and I wanted to use #after.
My code is in ts ran through ts-node and this is a 'compilation' error but would you please advice ?
Steps to Reproduce
process.env.NODE_ENV = 'test';

let mongoose = require(""mongoose"");

let chai = require('chai');
let expect = chai.expect;
let chaiHttp = require('chai-http');
import { app, end } from '../../src/server/app';
let should = chai.should();

chai.use(chaiHttp);
describe('Tests', () => {
  after(function(done) {
    end();
  });......

 mocha test/server/test.ts  --required --require ts-node/register                                                                                                                                   

/home/ubuntu/workspace/node_modules/ts-node/src/index.ts:307
        throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset))
              ^
TSError: ⨯ Unable to compile TypeScript
test/server/test.ts (13,3): Cannot find name 'after'. (2304)
    at getOutput (/home/ubuntu/workspace/node_modules/ts-node/src/index.ts:307:15)
    at /home/ubuntu/workspace/node_modules/ts-node/src/index.ts:336:16
    at Object.compile (/home/ubuntu/workspace/node_modules/ts-node/src/index.ts:498:11)

Versions
xxx:~/workspace (master) $ mocha --version
4.0.1
xxx:~/workspace (master) $ node node_modules/.bin/mocha --version
4.0.1
xxx:~/workspace (master) $ node -v
v6.11.0

Edit 1
Debugging I can see the #after defined (if I remove the call).
So this is a compilaltion issue about typecript not knowing #after is defined...",ArThoX,NONE,2017-10-14 15:04:07+00:00,True,2017-10-15 04:31:13+00:00,0.56,,2,2,2017-10-14 21:35:14+00:00,0.27,ArThoX,NONE,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3071,html reporter needs tests,"We have decent coverage in most places now.  The glaring exception is the HTML reporter, which is completely untested.
Add tests for the HTML reporter.
This will necessitate likely some unit tests and browser-based functional tests.  The latter of which we have none of, so we'd need to pull in some extra dependencies to do so.  This won't be trivial.",boneskull,MEMBER,2017-10-18 03:52:22+00:00,False,,,,4,3,2017-10-18 08:03:42+00:00,0.17,ScottFreeCode,CONTRIBUTOR,1,1,0,1,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3072,How to submit new --exit option when running mocha programmatically,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label

Description
The Mocha 4 CLI has a new option --exit and was wondering if there is a corresponding option when invoking Mocha programmatically like const mocha = new Mocha({exit: true});
I was not able to find anything in the documentation or release notes.",doberkofler,NONE,2017-10-18 08:06:33+00:00,True,2017-10-19 02:37:00+00:00,0.77,,2,1,2017-10-19 02:37:00+00:00,0.77,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['documentation', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3073,remove engines.npm from package.json,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Node 4.0 introduced an engine dependency on npm >= 2.15.11.  The blog post says this is because that version shipped with Node.js v4.0.0.
This is incorrect.  Nodejs v4.0.0 shipped with npm 2.14.2.  Nodejs v4.5.0, which I have to use, shipped with 2.15.9.
It is true that the current Nodejs 4 (v4.8.4 at time of writing) does use 2.15.11, but that update wasn't done until v4.6.2.
Please consider reducing the dependency to 2.14.2, if your intent is to support all Nodejs 4 releases.
Steps to Reproduce

Expected behavior: Installation of mocha 4.0.1 under nodejs 4.5.0 emits no diagnostics.
Actual behavior:
npm WARN engine mocha@4.0.1: wanted: {""node"":"">= 4.0.0"",""npm"":"">= 2.15.11""} (current: {""node"":""4.5.0"",""npm"":""2.15.9""})

Reproduces how often: Every time
Versions

Additional Information",pabigot,NONE,2017-10-18 10:08:24+00:00,True,2017-12-14 06:02:24+00:00,56.83,,3,10,2017-12-13 03:25:02+00:00,55.72,boneskull,MEMBER,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3074,it in for loop,"Hi everyone I'm tryin to execute 'it' in for loop. I'm changing a part of my test model at random. But İt works after for loop finished. But I want to execute it every iteration with different model. Here is my code:
describe('', () => {
const objNames = Object.getOwnPropertyNames(myModel);
    const len = objNames.length;
    for (let i = 0; i < len; i++) {
        const rnd = (Math.floor(Math.random() * len) + 0);
        const model = myModel;
        console.log('loop')
        model[objNames[rnd]] = null;
        it('', () => {
            //console.log(JSON.stringify(model)) // Everytime getting same model ( I think the last one)
            // Do something
        });
    }
});",spolat,NONE,2017-10-19 08:49:47+00:00,True,2017-11-12 13:05:03+00:00,24.18,,4,4,2017-10-23 17:01:29+00:00,4.34,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3076,Feature Request: Hook for timed-out test,"Hi,
I occasionally have integration tests time out, and

I often still have resources I'd like to cleanup in the test.
I may want to log some additional data to help me troubleshoot.

For example, consider the following test:
describe('My API', () => {
  let client

  beforeEach(() => {
    client = new Client()
  })

  it('should return 200', async () => {
    await client.get('/foo') // => Assume this times out
  })

  afterEach(() => {
    client.destroy() // => Not called on timeout
  })
})
It would be nice to have a timeout hook of some sort to let me ensure destroy is called and to possibly print some diagnostic information about the state of client (simple example, but in my actual codebase this would be more useful). I haven't thought very much about the API for this. Maybe it could even be more generic than just for handling timeouts. For example, any error?
Alternatively, I could write a wrapper to do this myself, but it might be a nice improvement to Mocha.
Thanks!
Mark",markandrus,NONE,2017-10-20 17:18:20+00:00,True,2017-10-20 18:42:24+00:00,0.06,,1,1,2017-10-20 18:42:24+00:00,0.06,markandrus,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3077,enhancement: granular control over retries,"when a test is being retried the beforeEach hook runs as expected, but the before hook does not",dalimian,NONE,2017-10-21 02:45:24+00:00,False,,,,4,10,2017-10-23 16:41:41+00:00,2.58,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3078,Performance problem. An execution time of entire test suit is not equal to the execution time of its parts.,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have a big test suit which contains to major describe-blocks. The first one takes me 3 seconds to run and the second one 2, but tougher they are executed for 17 seconds. It is visually noticeable that inside of a test suit latter tests are slower then if they are executed independently.
Steps to Reproduce

Create a test suit with two describe-blocks
Run each of them separately with .only()
Run entire pack of tests at ones.

Expected behavior:
Some of test suit part's execution time have to be roughly equal to the execution time of entire test suit.
Actual behavior:
Entire test suit execution takes several times more time than a sum of an execution  time of its part separately.
Reproduces how often:
Always.
Versions
mocha: 3.4.2
node: v6.11.3
Windows 10, ArchLinux, Mac OS High Sierra, Fedora Linux
Any terminal ( we develop project at several different machines with different os and terminals )",AIRTucha,NONE,2017-10-23 06:22:39+00:00,True,2017-11-01 14:45:40+00:00,9.35,,3,1,2017-10-23 07:00:08+00:00,0.03,ORESoftware,NONE,0,0,0,1,"['needs-feedback', 'needs-mcve']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
3079,Tests with Mocha on Sequelize application disconnect after first test,"I use Mocha to test my CRUD API application. I have three tests and I have before/after function with callback:
before((done) => {
    done();
});

after(function () {
    sequelize.close();
});

But, when the first test is executed, the Sequelize connection is closed. How I can change this to run test and automaticaly close tests?",pirmax,NONE,2017-10-23 10:09:34+00:00,True,2017-12-09 09:20:56+00:00,46.97,,3,1,2017-10-23 16:35:18+00:00,0.27,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['needs-feedback', 'needs-mcve', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
3080,before hook with promises: TypeError: Cannot read property 'call' of undefined,"When running mocha test
// test/index.js
const assert = require('assert');
const delay = (x,t) => new Promise(r => setTimeout(r, t, x));

before(delay('lol', 1000));

describe('Great test', () => {
	it('should pass', () => {
		assert(1);
	});

	it('should pass again', async() => {
		const v = await delay('ok', 200);
		assert.equal(v, 'ok');
	});
});
The output is:
  1) ""before all"" hook: [object Promise]

  0 passing (19ms)
  1 failing

  1) ""before all"" hook: [object Promise]:
     TypeError: Cannot read property 'call' of undefined

mocha version: 4.0.1
possibly related to #2706, #2315",caub,NONE,2017-10-23 18:12:05+00:00,True,2017-10-23 18:19:22+00:00,0.01,,2,2,2017-10-23 18:19:22+00:00,0.01,caub,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3081,Could not find a testrunner with name mocha,"Error: Could not find a testrunner with name mocha, did you install it correctly (for example: npm install --save-dev stryker-mocha-runner)?",KathiresanRamkumar95,NONE,2017-10-24 10:25:12+00:00,True,2017-10-25 13:36:07+00:00,1.13,,1,1,2017-10-25 05:14:59+00:00,0.78,KathiresanRamkumar95,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3083,Failed assertion in Describe(),"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Is there any way to have Mocha not throw a stack-trace when an assertion fails in a describe() block?  (as opposed to within it())
We are looking into change behaviour on a product, but we simply get a stack trace, rather than a list of broken tests.   This is because several thousand of our test cases have expect(s) within a describe rather than within an it() // presumably done by peple in error.
Others, are using them in context() and setting up a context, and making assertions that the context is valid, before moving on to it() test cases.
Either way, there's no way to determine the full extent of how much will break, because it simply dumps out a single stack trace, rather than being captured and sent to a reporter.
Steps to Reproduce
describe('a', () => {
expect(false).equal(true);
});
Expected behavior: [What you expect to happen]
Not throw a stack trace.
Reporter: ""Test Case a failed. "" (where ""a"" here is the tree of describes/contexts that we are in)
Nice to Have, but probably not possible:
If an assertion is called outside of an it(), to display it in the test results as well.  As it stands, we have no idea how many test cases across our GHE are in this state, all that we know is that they currently pass.
Actual behavior: [What actually happens]
Stack trace.
Reproduces how often: [What percentage of the time does it reproduce?]
Always",icywolfy,NONE,2017-10-24 23:47:42+00:00,True,2017-12-09 09:21:40+00:00,45.4,,3,2,2017-11-03 06:42:22+00:00,9.29,ScottFreeCode,CONTRIBUTOR,1,1,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3084,mocha no-ops when calling require() on file that is in node cache,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha no-ops when calling require() on file that is in node cache. This occurs when using mocha programmatically. We have a test script that calls mocha twice - the first time, we don't actually run tests, we just build up the mocha suites and tests, and we run some filtering on them. We return the subset of files that include tests matching these filters. On the second time we call mocha, we actually run the tests on the set of matching files. However, in some node environments I am seeing require(file) pick up the file from the node cache instead of actually loading it and parsing it, so the require(file) call ends up being a no-op for mocha (mocha depends on the file being executed during require(file) to invoke describe() and it() statements and emit test code). Seems like this problem can be easily avoided by ensuring the file is not in the require cache before calling require(file).
Steps to Reproduce
Invoke mocha in two passes in a test script.
In the first pass, load files and look over mocha.suite.eachTest and do some filtering. Return a subset of files that we want to run tests on for this script run.
  mocha.files = files;
  mocha.loadFiles();

In the second pass, with a separate mocha instance, for each matched file we add it to mocha and then call mocha.run().
  mocha.addFile(file);
  mocha.run();

Expected behavior: In the second pass, mocha parses tests in the file and runs them.
Actual behavior: In the second pass, mocha no-ops.
Reproduces how often: 100% (in my node env - node v6.11.0)
Versions
mocha --version: 4.0.1
node --version: 6.11.0
OSX Sierra 10.12.6
zsh
Additional Information
N/A",finnigantime,CONTRIBUTOR,2017-10-25 15:02:56+00:00,True,2017-11-07 07:07:19+00:00,12.67,,3,7,2017-10-25 21:12:04+00:00,0.26,ORESoftware,NONE,0,2,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3086,Option.args mochaOpts tagging tests,"I have tried to run my tests with in-line args, but it seems i cant find right syntax for it.
My cmd command for calling the test is:
grunt e2e:cert:ed:regression_part_3
and am trying to add tagging args something like this:
grunt protractor --mochaOpts={tags: ""myTag""} e2e:cert:ed:regression_part_3
but it doesn't seem to work ...
any ideas ?",djordje-mmilovanovic,NONE,2017-10-26 09:24:06+00:00,True,2017-11-03 07:19:52+00:00,7.91,,2,1,2017-11-03 07:19:52+00:00,7.91,ScottFreeCode,CONTRIBUTOR,0,1,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3087,Using only() to run a specific test is too quiet,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha should be louder when the only() method is used, for example by outputting an obvious warning to the console. The docs say:

Be mindful not to commit usages of .only() to version control, unless you really mean it!

But this isn't really enough. It's still easy to accidentally commit .only() and disable a large part of a test suite without noticing. I'd love an output to the console that says something like:
=================================================
You're using .only() to disable some tests!
=================================================

Steps to Reproduce
Expected behavior: Use .only(), accidentally commit it and your colleagues are more likely to notice that it's there
Actual behavior: Use .only(), accidentally commit it and have it disable most of your test suite for a year before anyone notices 😱
Reproduces how often: Always
Versions
1.18.2 and 4.0.1 are both affected.",alexmuller,NONE,2017-10-30 13:22:48+00:00,True,2017-11-20 20:39:37+00:00,21.3,,3,4,2017-10-30 21:12:01+00:00,0.33,markowsiak,MEMBER,1,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3088,Error: spawn growlnotify ENOENT,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I'm unclear if its the same problem discussed here, but having problems running mocha for a newly created project on my mac...
#3067
For the following project...
https://github.com/cssagogo/pikadeck
When I try running the grunt task, I get the following error...
Running ""mocha:test"" (mocha) task
>> 0 passed! (0.00s)
An error occured. { Error: spawn growlnotify ENOENT
  at _errnoException (util.js:1024:11)
  at Process.ChildProcess._handle.onexit (internal/child_process.js:192:19)
  at onErrorNT (internal/child_process.js:374:16)
  at _combinedTickCallback (internal/process/next_tick.js:138:11)
  at process._tickCallback (internal/process/next_tick.js:180:9)

  code: 'ENOENT',
  errno: 'ENOENT',
  syscall: 'spawn growlnotify',
  path: 'growlnotify',
  spawnargs: 
   [ '--image',
     '/Users/adamyoungers/projects/pikadeck/node_modules/grunt-mocha/growl/ok.png',
     '-m',
     '0 passed! (0.00s)',
     '0 passed! (0.00s)' ] }

Done.

Process finished with exit code 0

Steps to Reproduce

Install project
Run grunt test_js task

Expected behavior: Tests to pass
Actual behavior: Get error above
Reproduces how often: Always
Versions
mocha --version: bash: mocha: command not found
node node_modules/.bin/mocha --version: 4.0.1
node --version: v8.8.0
OS: macOS Sierra 10.12.6
grunt-mocha: ^1.0.4",cssagogo,NONE,2017-10-31 22:06:58+00:00,True,2017-12-05 17:29:05+00:00,34.81,,9,13,2017-11-01 17:58:34+00:00,0.83,jlchereau,NONE,2,1,0,6,['integration'],False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3090,Fatal error: test.titlePath is not a function,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have a new project I'm putting together and I'm running 2 very simple unit tests.  The test run and the broken test shows as being broken, but it looks like something fails before it can tell me what about it is failing.  This is what the output says:
Running ""mocha:test2"" (mocha) task
Testing: test/index.html

  unitTest.init()
    1) Sample Unit test 1

  unitTest.pdf().init()
    ✓ Sample Unit test 2

  1 passing (1ms)
  1 failing

Fatal error: test.titlePath is not a function

Process finished with exit code 3

I'm running Node v9.0.0 and NPM 5.5.1 on a mac running Sierra.
Steps to Reproduce

This is the repo I'm working on: https://github.com/cssagogo/pikadeck
Run the test_js grunt task.

Expected behavior: One test pass and one fail with a description of how it failed in the terminal.
Actual behavior: Tests show pass/fail, but hits a fatal error before printing out what was wrong.
Reproduces how often: Always",cssagogo,NONE,2017-11-03 03:26:02+00:00,True,2018-03-23 17:38:12+00:00,140.59,,9,11,2017-11-09 19:04:47+00:00,6.65,dreuxl,NONE,1,1,0,6,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3091,Cannot find module issue with mocha.js in browser,"Hi,
I'm using mocha with requirejs for browser testing and got a weird issue when updated to 4.0.1.
By some reason I got the following issue when run tests:

You can find the code that reproduce the issue here: https://github.com/killmenot/mocha-cannot-find-module-issue (just do npm install and then open testrunner.html in browser or run npm run test)
I took a look at mocha.js (I run make mocha.js) I found the following:

When I remove require= from mocha.js file the test works fine.
Any advices?",killmenot,NONE,2017-11-03 17:30:06+00:00,True,2018-01-09 19:21:41+00:00,67.08,,4,5,2017-11-07 06:45:32+00:00,3.55,ScottFreeCode,CONTRIBUTOR,2,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3092,"Cannot find module 'tap', but tap isn't listed as a dependency","Description
On mocha 4.0.1 writing tests for backend node code. Upon running npm run test error is thrown saying 'tap' module can't be found. Upon checking dependencies, TAP isn't listed",ChrisCallanJr,NONE,2017-11-03 17:46:28+00:00,True,2017-12-09 09:20:40+00:00,35.65,,14,15,2017-11-03 17:48:30+00:00,0.0,ORESoftware,NONE,1,1,0,10,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3093,Replacing current working directory in stack trace message not always working as intended.,"I had the following test fail when running npm test in a docker container where I had mounting the mocha source at /local.
https://github.com/mochajs/mocha/blob/master/test/unit/runner.spec.js#L406
The issue is here.

  
    
      mocha/lib/utils.js
    
    
         Line 600
      in
      1bb6b39
    
    
    
    

        
          
           line = line.replace(cwd, ''); 
        
    
  


The replace call, causes '/usr/local/dev' to be changed to '/usrdev/, and the string comparison fails in the assert.
I imagine you would have to do a fancier regex replacement to get this to work correctly. In practice this might not be a huge issue since users tend to be in /home/username/path which should be reasonably unique.
However, I can imagine a situation where some files being stored at /tmp/<random_string>/home/username/path/filename or a similar location would occur in a stack trace message and be replaced to /tmp/<random_string>/filename.",zrbecker,NONE,2017-11-03 19:49:19+00:00,True,2018-03-06 01:23:17+00:00,122.23,,3,3,2017-11-05 04:11:13+00:00,1.35,ScottFreeCode,CONTRIBUTOR,1,1,0,0,"['good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3094,global before/after helpers,"this super useful feature is somehow still not implemented however lots of people would like to see it. It can be used for opening/closing db connection, creating test db, running migrations, starting selenium driver or doing any other action without calling mocha programmatically like we have to do now
the actual implementation may be different but the idea is to add before and after to mocha.opts to be included the same was as require currently does and has signature
export before () {
    // do some async calls
    return promise; // or call done()
}",TrejGun,NONE,2017-11-06 01:10:00+00:00,True,2018-03-23 17:40:08+00:00,137.69,,7,16,2017-11-06 01:46:04+00:00,0.03,ORESoftware,NONE,1,1,0,5,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3095,Mocha testing socketio middleware won't finish suite,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I am testing an nodejs-app with a server and a client component on nodejs 8.9.0 with mocha 4.0.1 and chai 4.1.2.
For mocha to end properly, I have to make sure that all socketio and http-servers are closed after the tests have been run. This works fine with normal tests, but as soon as I register a middleware to the socketio-server, the mocha-process won't close and stay open forever.
Steps to Reproduce
copy into a minimal test-file:
// test.spec.js
'use strict'

const Express = require('express')
const Http = require('http')
const io = require('socket.io')
const ioclient = require('socket.io-client')

const NODE_PORT = process.env.NODE_PORT || 3000

describe('Client', function () {
    beforeEach(() => {
        const express = new Express()
        this._http = Http.Server(express)
        this._socketio = io(this._http)
        this._http.listen(NODE_PORT)
    })

    // this test works perfectly, even when I copy it and run it
    // multiple times in this suite
    it('should connect to a socketio-server', (done) => {
        const client = ioclient.connect(`http://localhost:${NODE_PORT}`)
        this._socketio.on('connection', () => {
            client.close()
            done()
        })
    })

    // this test also finished, but the suite hangs afterwards - as if
    // a socket-client or socket-server was not closed properly.
    it('should finish the test suite even with a middleware', (done) => {
        const client = ioclient.connect(`http://localhost:${NODE_PORT}`)

        this._socketio.use((socket, next) => {
            return next()
        })

        this._socketio.on('connection', () => {
            client.close()
            done()
        })
    })

    afterEach(() => {
        this._socketio.close()
        this._http.close()
    })
})

Install dependencies: npm i express@4.16.2 socket.io@2.0.3 chai@4.1.2 mocha@4.0.1
Run the Testfile: npx mocha test.spec.js
Expected behavior: [What you expect to happen]
All tests to run, and mocha exiting properly
Actual behavior: [What actually happens]
All tests run, mocha does not exit
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
see above",LarsKumbier,NONE,2017-11-06 09:49:21+00:00,True,2017-11-06 16:38:30+00:00,0.28,,1,2,2017-11-06 09:58:39+00:00,0.01,LarsKumbier,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3096,Bail with failing after() runs suite twice,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
With a failing test suite using the bail option in conjuncture with an after clause that throws an error.
Mocha bails properly, executes the after as expected.
Then it does it all again. But Why?
Steps to Reproduce
Very simple repro steps.
File new with latest mocha.
""scripts"": {
    ""test"": ""./node_modules/.bin/mocha --reporter spec --bail""
  }

and
describe(""some suite"", function() {
    it(""does the first test"", function() {
        throw new Error('first error')
    });
    after(() => {
        throw new Error('after error')
    })
})

yarn test, observe double suite run
remove error in after, observe one suite run
Expected behavior: [What you expect to happen]
test suite is only ran once
Actual behavior: [What actually happens]
test suite is ran twice
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

node node_modules/.bin/mocha --version => 4.0.1
macOS Sierra 10.12.6
zsh",rawb,NONE,2017-11-06 16:56:39+00:00,True,2018-03-20 01:10:55+00:00,133.34,,7,3,2017-11-07 06:12:40+00:00,0.55,ScottFreeCode,CONTRIBUTOR,1,1,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3097,UnhandledPromiseRejectionWarning: Unhandled promise rejection,"When I run tests on functions that returns a rejected promise, the test passes but an UnhandledPromiseRejectionWarning: Unhandled promise rejection is outputted to the console.
const chai = require('chai');
const expect = chai.expect;

function testFunc (opt) {
  if (opt === undefined) {
    return Promise.reject(new Error());
  }
}

describe('testFunc', function () {
  it('return with a promise', function () {
    expect(testFunc()).to.be.a('promise');
  })
  describe('return with a promise that', function () {
    it('is rejected when no parameters are passed to it', async function () {
      try {
        const result = await testFunc();
      } catch (e) { return; }
      return Promise.reject(new Error('Should have thrown'))
    })
  });
});
It produces the following output:
$ npx mocha

  testFunc
    ✓ return with a promise
(node:28519) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error
(node:28519) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
    return with a promise that
      ✓ is rejected when no parameters are passed to it

  2 passing (29ms)
I have created a repository at to repreduce this issue.
I believe this will be fixed with #2640 and a similar issue was filed at #2797, but this repository provides an easy, minimalistic way to reproduce the issue.",d4nyll,NONE,2017-11-06 21:39:42+00:00,True,2017-11-06 21:39:46+00:00,0.0,,5,4,2018-05-04 21:07:24+00:00,178.98,JimTheMan,NONE,0,0,0,4,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3098,File globbing not documented on site,"How to configure it? This for example

By default, mocha looks for the glob ./test/.js and ./test/.coffee, so you may want to put your tests in test/ folder.

No any info in whole docs and wiki",wzup,NONE,2017-11-07 19:07:40+00:00,True,2018-01-23 15:37:00+00:00,76.85,,3,2,2017-11-08 04:04:47+00:00,0.37,ORESoftware,NONE,0,1,0,1,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3099,describe.only and context.only run all the describe/context suites which match the pattern instead of only one selected describe/context suite,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Using describe.only causes that instead only this one describe suite, mocha runs all the describe suites which match the pattern given as the describe.only suite's message.
The same is for context.only.
It works correctly for it.only if there is no additional only at the describe or context level.
Steps to Reproduce


case 1:
Expected behavior: [What you expect to happen]
I run ./node_modules/.bin/mocha foobarbaz.js
foobarbaz.js:
describe('GET /users', () => {
  it('foo', () => {});
});

describe.only('GET /', () => {
  it('bar', () => {});
  it('baz', () => {});
});

It should run only GET / tests
GET /
  ✓ bar
  ✓ baz

Actual behavior: [What actually happens]
It runs all the tests
GET /users
  ✓ foo

GET /
  ✓ bar
  ✓ baz

Reproduces how often: [What percentage of the time does it reproduce?]
100 %


case 2:
Expected behavior: [What you expect to happen]
I run ./node_modules/.bin/mocha foobarbaz.js
foobarbaz.js:
describe('GET /users', () => {
  it('foo', () => {});
});

describe.only('GET /', () => {
  it('bar', () => {});
  it.only('baz', () => {});
});

It should run only GET / baz test
GET /
  ✓ baz

Actual behavior: [What actually happens]
It runs all the tests
GET /users
  ✓ foo

GET /
  ✓ bar
  ✓ baz

Reproduces how often: [What percentage of the time does it reproduce?]
100 %


case 3:
Expected behavior: [What you expect to happen]
I run ./node_modules/.bin/mocha foobarbaz.js
foobarbaz.js:
describe('', () => {
  context('GET /users', () => {
    it('foo', () => {});
  });

  context.only('GET /', () => {
    it('bar', () => {});
    it('baz', () => {});
  });
});

It should run only GET / tests
GET /
  ✓ bar
  ✓ baz

Actual behavior: [What actually happens]
It runs all the tests
GET /users
  ✓ foo

GET /
  ✓ bar
  ✓ baz

Reproduces how often: [What percentage of the time does it reproduce?]
100 %


Versions

mocha version: 2.5.3
NodeJS version: 8.6.0
npm version: 5.5.1
OS: Mac OS X 10.12.2
shell: fish 2.4.0",piotr-s-brainhub,NONE,2017-11-08 14:47:41+00:00,True,2017-11-08 21:36:19+00:00,0.28,,3,2,2017-11-08 17:02:50+00:00,0.09,ORESoftware,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3100,First unit test always slower than the others.,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
For some reason the first unit test of my test suit is always slower than the others. When executing the tests in my console I get something like:
 √ unit test A (483ms)
 √ unit test B
But in the code if I change the unit test B to above the unit test A, I get this:
 √ unit test B (470ms)
 √ unit test A
For some reason the first unit tests gets always slower and because of that I think, the reason of being slow in not my code, but something in Mocha. At the same time I have others tests suits that are testing other code and it works fine, so I'm confused. Maybe is not Mocha, but due to not being sure, I need to ask if you have an idea of what can be happening.
The test is something like this:
let target = require('...');

describe('Module of unit tests', function () {
  this.timeout(1000);
  before(function () {
    ...
    target = proxyquire('...', {
      'node-chartist': sinon.stub().resolves('...'),
      'ws': function(){
        return {
          'close': function(){ /*Do nothing*/ },
          'send': function(){ /*Do nothing*/ },
          'on': function(arg, callback){
            ...
          }
        };
      }
    });
  });

  //Warning happens here
  it('unit test A', function () {
    ...
    target();
    ...
  });

  //If this unit test goes above unit test A, this will be the one to get the warning.
  it('unit test B', function () {
    ...
    target();
    ...
  });
})

Steps to Reproduce
I tried to reproduce in other projects without success, so I doubt you will be able to do it, but what I'm doing is:

Execute tests suit with unit test A above.
Execute tests suit with unit test B above.

Expected behavior: [What you expect to happen]
Don't get any warning about the time in both cases.
Actual behavior: [What actually happens]
The first unit test gets always a warning about the time.
Reproduces how often: [What percentage of the time does it reproduce?]
Around 90% of the times.
Versions
node v6.11.4
npm 3.10.10
mocha 4.0.1
sinon 4.1.2
chai 3.5.0
proxyquire 1.8.0
Additional Information
I used fiddler to make sure that while executing the unit tests, none network request was being made for the outside, to make sure that the delay is not caused by any network request.
I also debugged the code that the unit test is testing and I really don't see any reason for the delay in any case.",danielserrao,NONE,2017-11-10 11:29:24+00:00,True,2017-11-15 04:21:29+00:00,4.7,,2,3,2017-11-11 02:33:11+00:00,0.63,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3103,Get current test's name of test generate on loop?,"This code works: I used the variable testTitle in beforeEach function.
const list = [
    { title: 'login', uri: '/login', should: 'Login' },
    { title: 'signup', uri: '/signup', should: 'Create'}
];

let testTitle = '';

beforeEach(function() {
    testTitle = this.currentTest.fullTitle();
});

describe('navegation', () => {
    list.forEach(function(item) {
        it(item.title, (done, obj) => {

            // ------------------------------------
            // Not work it
            // console.log(this.test.fullTitle()); 
            // ------------------------------------

            request(server)
                .get(item.uri)
                .expect(constant.STATUS.OK)
                .then(res => {
                    res.text.should.include(item.should);
                    done();
                })
                .catch(err => {
                    console.log(testTitle + ': ' + err);
                    return done(err);
                });
        });
    });
});

Question:
How I can improve my code for used this.test.fullTitle() directly on loop and avoid I used the variable testTitle and beforeEach function?
Thanks.",alditis,NONE,2017-11-12 03:07:05+00:00,True,2017-11-12 07:02:37+00:00,0.16,,2,2,2017-11-12 05:20:33+00:00,0.09,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3104,No documentation on third party reporters example,"I am attempting to build a custom third party reporter and I am using the simple example presented on this page : https://github.com/mochajs/mocha/wiki/Third-party-reporters. However, I cannot find any wiki or a simple explanation of how everything works.
Questions :

Is the ""test"" parameter in the runner.on function  a .js file containing the tests?
If test is not the file containing the tests, how can I supply one?
How do I run this reporter? Can I do something similar to ""mocha testreporter.js"" and it would know to check my test files?
How do I include my test reporter in my existing project? Do I need to add it in the package.json? I do not want to publish it on npm, only to use it in my project.

What I am trying to achieve:
-> I need a simple custom test reporter which, based on my tests, can give me back the number of tests which have passed/failed / or a percentage. My plan would be to render my own html based on these results. For this reason, I am not interested in the already existing html test reporters, as I do not want to include error messages etc.",patrickptm,NONE,2017-11-15 10:57:03+00:00,False,,,,3,1,2017-11-16 05:56:40+00:00,0.79,ScottFreeCode,CONTRIBUTOR,0,1,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3105,afterEach called multiple times when there is an error in an inner suite,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When you have a nested suite that throws an error, the afterEach in the outer suite may be called twice and/or called in the middle of the inner afterEach.
Steps to Reproduce

Create an outer suite with an inner suite.
Add a test in the inner suite.
Add afterEach hook in both suites.
Add some async calls.
Throw an error after the test ended but before the inner afterEach ended.

Example:
const bluebird = require(""bluebird"");

describe(""outer tests"", () => {

  afterEach(async () => {
    console.log(""outer afterEach started"");
    bluebird.delay(1000);
    console.log(""outer afterEach ended"");
  });

  function doSomething(cb) {
    fs.exists(""temp.sh"", () => {
      cb();
      setTimeout(() => {
// This error is thrown after test was ended but before the inner afterEach ended. 
// it will trigger the outer afterEach
        throw new Error(); 
      }, 100);
    });
  }

  describe(""inner tests"", function () {

    afterEach(async () => {
      console.log(""inner afterEach started"");
      await bluebird.delay(1000);
      console.log(""inner afterEach ended"");
    });

    it(""should do something"", function (done) {
      doSomething(() => {
        done();
      });
    })
  });
});

Output:
outer tests
    inner tests
      ✓ should do something
inner afterEach started
      1) ""after each"" hook
outer afterEach started
outer afterEach ended


  1 passing (117ms)
  1 failing

  1) outer tests
       inner tests
         ""after each"" hook:
     Uncaught 
  Error
      at Timeout.setTimeout (src/tests/test.spec.ts:20:15)



inner afterEach ended
  2) ""after each"" hook

  1 passing (1s)
  2 failing

  1) outer tests
       inner tests
         ""after each"" hook:
     Uncaught 
  Error
      at Timeout.setTimeout (src/tests/test.spec.ts:20:15)

  2) outer tests
       ""after each"" hook:
     TypeError: Cannot read property 'call' of undefined

Expected behavior:
Outer afterEach is called once and only after inner AfterEach ended.
Actual behavior: [What actually happens]
Outer AfterEach is called before inner AfterEach ended. If you play with the delays you might see that sometimes the outer AfterEach is called twice, but it is hard to reproduce.
Reproduces how often:
Always
Versions
mocha - 4.0.1
node - 6.12.0
OS - ubuntu 17.10 x64
Shell - bash
typescript 2.3.4

Additional Information",amiram,NONE,2017-11-15 11:58:01+00:00,True,2017-11-15 21:49:31+00:00,0.41,,2,1,2017-11-15 21:49:30+00:00,0.41,ScottFreeCode,CONTRIBUTOR,0,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3106,async describe,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
In my use case, I'm declaring my test routines declaratively using https://github.com/pana-cc/mocha-typescript, so the tests get registered the moment the @suite classes are loaded.
I'm currently loading part of the test classes using require inside of a describe block that groups a couple of tests together:
  describe('Authorized calls on the part of a staff member', () => {
    require('./tests/asp-net-user');
    require('./tests/crawler-status');
    ...
  });

However, I'm now trying to use https://github.com/shannonmoeller/require-glob so that all files the conform to a given glob pattern (e.g., are located in a specifc folder) are included automatically inside that describe block:
  describe('Authorized calls on the part of a staff member', () => {
    requireGlob('./tests/staff/*.ts');
  });

However, the problem with require-glob is that it works asynchronously. Resulting in that the tests get run outside of the 'Authorized calls on the part of a staff member' block.
Steps to Reproduce

Expected behavior:
It would be nice if describe supported the done() parameter, just like it, beforeEach, afterEach do:
  describe('Authorized calls on the part of a staff member', (done) => {
    requireGlob('./tests/staff/*.ts').then(_ => { done(); });
  });

Actual behavior:
done parameter of describe callback is not supported
Reproduces how often: Always
Versions

Additional Information

This is a duplicate of #1431, but that one had been illustrated using a different use case and has been legitimately closed.",Maximaximum,NONE,2017-11-15 12:51:14+00:00,True,2017-11-15 12:53:31+00:00,0.0,,1,1,2017-11-15 12:53:31+00:00,0.0,Maximaximum,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3107,Using context only for the sake of hooks not for title and reporting,"Hello!
Thank you for this great framework!
I'm using some contexts (the describe blocks) only in order to specify before and after hooks to be ran after the test inside of it. But, I do not want these blocks to affect the report structure or to add any additional titles. However, each new context would create a new level in tests hierarchy, which is used for reporting. The problem is that I need to provide two titles for describe block, which is just used as a wrapper for my test, and in the test itself, and I don't have two titles for them. Of course I can just skip the title for context or for the test, but it will look ugly both in code (I will have to pass an empty string) and in test reports.
I think the overall problem is that contexts are serving two different purposes:


To organize test hierarchy in order to build test reports.


To serve as a ""container"" for hooks executions.


So, this leads to conflict: on one hand I need to add a context in order to have hooks for my test, on the other hand, I don't want to introduce another structural level in my report.
I see the possible solutions as follows:


Allow to specify before/after hooks for specific tests w/o using contexts (the test itself serves as a context of some kind).


Allow to omit titles for tests or describe blocks, effectively making them ephemeral (i.e. not displaying in reports as a distinct level).


Does this makes sense?
Thank you!",slavafomin,NONE,2017-11-15 14:46:30+00:00,True,2017-12-05 06:24:12+00:00,19.65,,3,5,2017-11-16 07:04:11+00:00,0.68,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3108,Mocha strange behavior with adding/remove only statement while using watch flag,"Mocha version: v3.5.3
I have the following in my package.json:
    ""test:watch"": ""NODE_ENV=test mocha --watch --watch-extensions js,jsx --reporter nyan"",

When I run this, everything seems to be running well and fine at first.
However, the problem manifests itself when I start playing around with adding "".only"" to my describe blocks.
I'll do something like this on a describe block with 1 it block that is already passing:
describe.only('#blah', () => ....blah....

and all is well. The spec reporter will report 1 spec passing. So far, looking good.
Now, I go ahead and remove the only statement:
describe('#blah', () => ....blah....

The spec reporter reports 0 passing (in green).
At this point, none of the changes I make to any spec files will be picked up anymore.
I either have to avoid use of only, or be very careful about when I add/remove the only statement when using the watch flag.
Anyone else experiencing this?",rickarubio,NONE,2017-11-15 19:04:27+00:00,True,2017-11-15 21:58:47+00:00,0.12,,2,3,2017-11-15 21:08:13+00:00,0.09,ScottFreeCode,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3109,Nested this Not Reset for Every Test,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
Doesn't appear to be any other issues like this, except this one.
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
Not using any of that fancy stuff.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
Tested completely separate from rest of system.
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.
Don't have a globally installed version of mocha.

Description
When setting a value in an outer describe block on this in a beforeEach, the value should be reset for all tests defined within this describe block and all nested describe blocks.  However, this is not the case.  Nested describe block maintain their own state.  This is noticeable when attempting to append a string to the end of the value defined in the outer describe block.
Use Case: Appending a string to the end of a variable defined on this is extremely useful for testing, especially routes.  For instance, if this worked, I could create tests for my API like so:
describe('API Integration Tests', function() {
  beforeEach(function() {
    this.route = '';
  });

  describer('User Endpoints', function() {
    beforeEach(function() {
      this.route += '/users';

      this.user = new User();
    });

    describe(""User's Children Endpoints"", function() {
      beforeEach(function() {
        this.route += ('/' + user.id + '/children');
      });
    });
  });
});
Steps to Reproduce
Copy/paste the following code and run.  1 test (the last one) will fail.
'use strict';

describe.only('Outer Block', function() {
  beforeEach(function() {
    this.myVar = 'myVar';
  });

  it('should equal myVar', function() {
    this.myVar.should.equal('myVar');
  });

  describe('Inner Block', function() {
    beforeEach(function() {
      this.myVar += ' is the best!';
    });

    it('should equal ""myVar is the best!""', function() {
      this.myVar.should.equal('myVar is the best!');
    });

    it('should equal ""myVar is the best!""', function() {
      this.myVar.should.equal('myVar is the best!');
    });
  });
});
Expected behavior: [What you expect to happen]
All tests should pass.  This would mean the inner this.myVar is reset to equal the string ""myVar"" (the value it is being set to in the outer beforeEach) before every test.
Actual behavior: [What actually happens]
The last test is failing because this.myVar refers to the value of this.myVar from the last test.  I.e. mocha maintains state across tests 😱
Reproduces how often: [What percentage of the time does it reproduce?] Every time
Versions
Shouldn't be necessary, but

mocha --version: The program 'mocha' is currently not installed. You can install it by typing:
sudo apt install mocha
node node_modules/.bin/mocha --version: 4.0.1
node --version: 8.9.1

The rest seems unnecessary.
Possible Solutions
Set this to an empty object ({}) for every test.",c1moore,NONE,2017-11-16 20:05:04+00:00,True,2017-11-20 02:20:41+00:00,3.26,,2,2,2017-11-16 20:13:57+00:00,0.01,c1moore,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3110,HTML-Reporter filters does not unhide all hidden suites,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

HTML-Reporter filters does not unhide all hidden suites
Steps to Reproduce
Run tests using the html reporter - click on the passes / failures filters

Expected behavior: [What you expect to happen]
When clicking on a filter twice all suites should be visible
Actual behavior: [What actually happens]
Only the odd numbered of the hidden reappears
Reproduces how often: [What percentage of the time does it reproduce?]
100% It happens every time
Versions

Additional Information

While working on making a html-electron reporter I noticed this issue.
The function unhide() only un-hides the odd numbered hidden suites.
The problem is the mutation of the html collection as the parameters used for selecting the elements are removed from said elements.
This is the working solution I arrived at.
/**
 * Unhide .hidden suites.
 */
function unhide () {
  var els = document.getElementsByClassName('suite hidden');
  // as the search criterion is changed the elements are removed from the collection
  while (els[0]) { 
    els[0].className = els[0].className.replace('suite hidden', 'suite');
  }

// *** This only removes the odd numbered ***

  // for (var i = 0; i < els.length; ++i) {
  //   els[i].className = els[i].className.replace('suite hidden', 'suite');
  // }
}",HeilTec,NONE,2017-11-17 15:04:42+00:00,True,2017-11-19 19:55:12+00:00,2.2,,2,2,2017-11-17 17:21:00+00:00,0.09,HeilTec,NONE,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3111,Warn on incorrect Growl usage,"Description
In #3088 and #3067, Growl throws a not particularly helpful error if used without the OS-specific non-Node library.
We could consider having Mocha detect this issue and transform the error into something more helpful. For instance, it could be a warning at the start of the test run, before anything might otherwise be printed: ""Growl mode activated in the options sent to Mocha, but Growl could not find the corresponding library; please see  for assistance."" Or instead of a warning it could be a hard error at whatever point Mocha first attempts to use Growl, without preemptively checking before the test run -- basically just catch the error from Growl, check if it's a file not found from the spawn command and if so throw the more helpful error, otherwise rethrow. In any case, besides CLI option (and/or mocha.opts), this ought to be useful when used through the programmatic API or with Grunt.
Steps to Reproduce
Run with --growl on a machine that does not have Growl installed.
Expected behavior: A warning or error that tells me I need to install Growl or stop using the option.
Actual behavior: An error along the lines of ""ENOENT libnotify"".
Reproduces how often: 100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 4.x -- the version of Growl used by earlier versions of Mocha seems to have been bugged so as to suppress this error even though the readme specified the needed installation even back then

Additional Information
Or since this is probably just biting people due to switching to Mocha 4, we could just field it till most people have transitioned and consider it handled. 🤷‍♂ (And if Grunt has defaults exasperating this then those should get fixed too.)",ScottFreeCode,CONTRIBUTOR,2017-11-20 02:47:00+00:00,True,2018-12-23 17:47:54+00:00,398.63,,6,4,2017-12-13 12:32:10+00:00,23.41,xxczaki,CONTRIBUTOR,1,2,0,1,"['good-first-issue', 'help wanted', 'usability']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3112,Run code before beforeEach for each it,"Description
I would like to have a new type of test with I can reduce the repetition or code.
The problem happens if I have mocked something for the component and little changes needed to be done to the mocks. (e. g. for this test I need another value for test 6) In the beforeEach I create the component, with the dependencies. If I do the modification in the it the component is created and I can't apply changes to the mock for the creation part.
Example code:
class Component {
  constructor(service) {
    this.data = service.ex();
  }
}
describe('component', () => {
  const mock = {
    ex() { return 1; }
  };
  let component;
  beforeEach(() => {
    component = new Component(mock);
  });
  it(() => {
    expect(component.data).toEqual(1);
  });
  it(() => {
    spyOn(mock, 'ex').and.returnValue(2); // The component is created, it is too late to set value.
    expect(component.data).toEqual(2);
  });
});
A workaround can be:
describe('component', () => {
  const mock = {
    ex() { return 1; }
  };
  let component;
  it(() => {
    component = new Component(mock);
    expect(component.data).toEqual(1);
  });
  it(() => {
    spyOn(mock, 'ex').and.returnValue(2);
    component = new Component(mock);
    expect(component.data).toEqual(2);
  });
});
But the real solution would be:
describe('component', () => {
  const mock = {
    ex() { return 1; }
  };
  let component;
  beforeEach(() => {
    component = new Component(mock);
  }, {
    name: 'creation'
  });
  it(() => {
    expect(component.data).toEqual(1);
  });
  it(() => {
    expect(component.data).toEqual(2);
  }, {
    before:{
      creation: () =>  spyOn(mock, 'ex').and.returnValue(2); // The component is not created.
    }
  });
});
Additional information:
Sometimes the code of creation is not one line and it is really annoying if the test file has the same lines in most of the tests.",csutorasr,NONE,2017-11-20 15:23:25+00:00,True,2017-12-05 17:39:01+00:00,15.09,,3,5,2017-11-20 18:26:43+00:00,0.13,ORESoftware,NONE,1,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3113,Error thrown between `it` clauses disappears,"Prerequisites


[x ] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce
git clone https://github.com/javinor/mocha-swallows-error
cd mocha-swallows-error
npm install
npm run test

Expected behavior:
Should get some indication to the error thrown from within the unhandledRejection error handler, preferably an exception and stopping the tests.
Actual behavior:
I appears that everything works fine
Reproduces how often:
100%
Versions


OS X Sierra 10.12.6
node 8.7.0
mocha 4.0.1

Additional Information
In our large test suite, we catch unhandledRejections since they .shouldn't happen. I expected throwing an error would somehow get propagated so that tests will fail, with an informative message/error.",javinor,NONE,2017-11-21 17:46:01+00:00,True,2017-12-05 06:22:50+00:00,13.53,,5,8,2017-11-21 17:53:06+00:00,0.0,Munter,MEMBER,2,1,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3114,Is it possible to customize `it` method?,"Since all my test cases have some common procedure, I'd like to customize the global.it as below.
const originaIt = global.it;

global.it = function(description, fn) {
    originaIt(description, function() {
        // do something before test
        try {
           fn();
           // do something after test
        } finally {
           //do something to clean up 
        }
    });
};

I put above code in file helper.js and import it from each test files. It turns out that imported files are executed only once, but Mocha re-initialize it to be its original function for each file. So, only the first test file has the customized it.
I know that beforeEach and afterEach serves same purpose, but customized it is preferred.
So, is there any other way to customize it for all test files?",mocheng,NONE,2017-11-23 03:41:22+00:00,True,2017-12-05 17:26:20+00:00,12.57,,4,5,2017-11-23 04:10:18+00:00,0.02,ScottFreeCode,CONTRIBUTOR,1,1,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3115,"mocha, ts-node and recursively loading files","Using this script:
""test"": ""./node_modules/mocha/bin/mocha --recursive --require ts-node/register ./test/**/*.spec.ts --opts ./test/mocha.opts"",

I've tried to load some test files inside the tree:
.
├── controllers
│   ├── admin
│   │   └── users.spec.ts
│   ├── authentications.spec.ts

The authentications.spec.ts test file gets loaded but the users.spec.ts doesn't.
My mocha.opts file looks like just:
--timeout 5000

I've also tried to remove the --recursive flag and just have a glob but it doesn't work.
I can't work out whether the problem is with ts-node or with mocha?
Any ideas?",alexpchin,NONE,2017-11-23 03:51:29+00:00,True,2017-11-23 04:26:38+00:00,0.02,,2,1,2017-11-23 04:26:38+00:00,0.02,ScottFreeCode,CONTRIBUTOR,0,1,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3117,Redundant Folders of Pictures,"Mocha's repo has no less than three different folders at the top level for pictures: assets, images and media. Some of these are used in Growl notifications and should live or die with the Growl integration. The rest... actually, I'm not sure they're used anywhere. Unless the (currently separate) mocha website is somehow pulling in images from this repo, or something.
While this isn't technically harmful, it's needlessly confusing for new contributors (one of whom brought it to my attention by asking when to look in which folder, more or less). I'd like to propose that:

Any of these that need to be in this repo should get moved into a single folder and organized in subfolders that indicate how they're used or what they're for.
Any of them that are needed but do not need to be in this repo get moved either to where they're needed (e.g. if they're part of the site put them with the site) or into some dedicated repo or host.
Any of them that are no longer needed should be removed (if we really want to get them back for some reason we can always dig them out of the commit history).

(NOTE: If some of them are needed for running Mocha, e.g. the Growl ones, and others are only needed e.g. for the readme or the site, this plan may require us to be more specific with specifying which files to publish instead of publishing the whole images folder.)",ScottFreeCode,CONTRIBUTOR,2017-11-25 04:04:17+00:00,True,2018-04-30 18:54:36+00:00,156.62,,4,2,2018-03-26 13:47:30+00:00,121.41,DavNej,CONTRIBUTOR,1,1,0,0,"['chore', 'developer-experience', 'good-first-issue']",True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3118,TextMate integration?,"It appears Mocha's repo sports an unadvertised TextMate integration that can be installed using make tm.
Why is TextMate the only editor or IDE with an integration directly maintained as part of Mocha itself?
Can we move this out into its own repo? (Would that be semver-major? The install is with make instead of npm run and it's only available in the first place if you clone the repo, not if you npm i mocha.)
It doesn't seem like it's needed maintenance since I've been here, but it would be one fewer folders for new contributors to wonder about.",ScottFreeCode,CONTRIBUTOR,2017-11-25 04:16:06+00:00,True,2018-01-09 20:28:12+00:00,45.68,,3,1,2017-12-21 21:13:19+00:00,26.71,Bamieh,MEMBER,1,0,0,0,"['chore', 'developer-experience', 'good-first-issue']",True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3119,Error object stored on Runnable._trace leaks memory,"FYI: In V8, Error objects keep closures alive until the err.stack property is accessed, which prevents collection of the closure (and associated objects) until the Error objects die.
Mocha creates a long-living Error for each Runnable: 
  
    
      mocha/lib/runnable.js
    
    
         Line 56
      in
      2303c66
    
    
    
    

        
          
           this._trace = new Error('done() called multiple times'); 
        
    
  

.
Would it make sense to either 1. store a string message instead of an Error, or 2. clear Error.stack, or 3. format Error.stack eagerly instead?
See also: https://crbug.com/v8/7142 and https://twitter.com/wSokra/status/935790750188625920.",schuay,NONE,2017-11-29 13:26:01+00:00,True,2018-01-29 05:11:19+00:00,60.66,,5,17,2017-12-05 06:25:35+00:00,5.71,boneskull,MEMBER,1,1,0,3,"['confirmed-bug', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3120,after() hook called even if this.skip() is called in the before() hook.,"Prerequisites


[ x] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
As the title says. If I call this.skip() in the before hook, the after hook is still called.
Is this a correct behavior?
describe('test', function () {
   before(function() {
        this.skip();
    });
    it('it', function* () {
        // foobar
    });
    after(function() {
        // Will be called
    });
});

It can be solved by calling this.skip(); in the after hook as well. But since the DOC says:

Mocha provides the hooks before(), after(), beforeEach(), and afterEach(). These should be used to set up preconditions and clean up after your tests.

It feels like an odd behavior that skipping the test in before still results in after being called.
Not test setup was done so why should the cleanup still be executed?
Kind regards,
Edvin
P.S
I'm quite new to github so please excuse any rookie mistakes that I've made.
I hope I have provided all the necessary information in a good manner.
Thank you for any and all help.
Versions
If applicable, please specify:

The output of mocha --version and node node_modules/.bin/mocha --version: 3.5.0
The output of node --version: v6.10.3
The version and architecture of your operating system: Ubuntu 17.04 x86_64
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:",EdvinOlofsson,NONE,2017-12-01 13:08:09+00:00,True,2017-12-04 08:39:15+00:00,2.81,,2,2,2017-12-01 15:37:29+00:00,0.1,ScottFreeCode,CONTRIBUTOR,0,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3121,Mocking mobile user agent,"[x ] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have a unit test to test an android/ios update
Steps to Reproduce
Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions -
mocha - 4.0.1
node - 6.11.4
os - MacOS
my code is -
  describe('GET /ios/update', function () {
  	it('should update ios', function (done) {
 	   		var self = this;
      	self.sess.get('/ios/update')
      	.expect('Content-Type', /json/)
        .expect(200, done);
      });
});

I just want to be able to mock a mobile user agent for the test above.
Thanks !",NateZ7,NONE,2017-12-04 09:52:13+00:00,True,2017-12-05 17:25:25+00:00,1.31,,2,1,2017-12-05 17:25:25+00:00,1.31,boneskull,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3125,enhancement: error codes!,"Every Error generated by Mocha should have a code property, like Node.js now has.
We should keep a nice wiki page or table of the error codes alongside more helpful information, and  provide a URL to look this up.
These needn't be implemented all at once.",boneskull,MEMBER,2017-12-07 05:06:04+00:00,True,2019-01-01 18:52:27+00:00,390.57,,1,1,2017-12-07 05:07:03+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['feature', 'help wanted', 'semver-minor', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
3126,Bizarre test case pattern passes without errors,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha.

Description
We have this in package.json
    ""karma"": ""^1.7.1"",
    ""karma-chai"": ""^0.1.0"",
    ""karma-chrome-launcher"": ""^2.2.0"",
    ""karma-jasmine"": ""^1.1.0"",
    ""karma-junit-reporter"": ""^1.2.0"",
    ""karma-mocha"": ""^1.3.0"",
    ""karma-ng-html2js-preprocessor"": ""^1.0.0"",
    ""karma-sinon"": ""^1.0.5"",
    ""karma-sonarqube-unit-reporter"": ""0.0.14"",
    ""karma-spec-reporter"": ""0.0.31"",
    ""karma-webdriver-launcher"": ""^1.0.5"",
    ""mocha"": ""^4.0.1"",
We are using Mocha with Karma. My coworker wrote a bunch of tests that look like this.
They should totally fail, but they don't fail, they pass.  But assigneeList should be undefined. I am mystified. Does anyone know why an error would not be thrown?
  it('should get a assignment with id', function () {

      //expectGET to make sure this is called once.
      var url = encodeURI('/api/v1/assignments?filter={""promptId"":""foobar""}');

      httpBackend.expectGET(url).respond(assigns);

      var assigneeList;

      myService.getAssignmentsByPromptId(""foobar"").then(function (response) {
        assigneeList = response;
      });

      httpBackend.flush();

      expect(assigneeList.length).to.equal(2);  // assigneeList should be undefined...
      expect(assigneeList[0]._id).to.equal(assigns[0]._id);
    });",ORESoftware,NONE,2017-12-07 20:29:34+00:00,True,2017-12-08 05:28:04+00:00,0.37,,2,2,2017-12-08 05:28:04+00:00,0.37,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3127,drop node.js v7 from build matrix; add node.js v9,I think it's safe to do this now that npm v5.6.0 has been released.,boneskull,MEMBER,2017-12-08 05:29:34+00:00,True,2018-01-09 19:19:18+00:00,32.58,,3,3,2017-12-12 23:38:06+00:00,4.76,xxczaki,CONTRIBUTOR,2,1,0,0,"['good-first-issue', 'help wanted', 'qa']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3128,stop using phantomjs to run browser tests,"headless Chromium probably makes sense.  I'm not sure how far along headless FF is yet, but would prefer this over Chromium.

 remove karma-phantomjs-launcher
 add karma-headless-chrome-launcher
 reconfigure karma.conf.js as appropriate",boneskull,MEMBER,2017-12-08 05:35:33+00:00,True,2018-01-09 04:46:54+00:00,31.97,,2,2,2017-12-08 05:36:26+00:00,0.0,boneskull,MEMBER,1,1,0,0,"['good-first-issue', 'help wanted', 'qa']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3129,-,,Geoffrey-Guilbon-Bose,NONE,2017-12-08 20:44:32+00:00,True,2017-12-09 09:11:47+00:00,0.52,,2,0,,,,,0,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3131,Documented Undocumented Reporters,"From @ScottFreeCode on October 4, 2017 3:58
https://mochajs.org/#undocumented-reporters documents the XUnit reporter. Instead of the section being labelled ""XUnit"", it is labelled ""Undocumented Reporters"". Since the section documents the XUnit reporter, the XUnit reporter is not undocumented as the section name implies.
Amusing anecdote: this reminds me somewhat of the Liar Paradox, but I think it can be resolved without needing to understand the Incompleteness Theorem. (...It is possible I am using a non-standard implementation of the amusement module...)
Copied from original issue: mochajs/old-mochajs-site#83",boneskull,MEMBER,2017-12-09 09:10:27+00:00,True,2018-01-22 04:59:25+00:00,43.83,,2,2,2018-01-22 03:59:54+00:00,43.78,outsideris,MEMBER,2,0,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3132,Update comment about default glob,"From @ScottFreeCode on October 4, 2017 3:52
Here: https://mochajs.org/#the-test-directory
Currently says:

By default, mocha looks for the glob ./test/*.js and ./test/*.coffee, so you may want to put your tests in test/ folder.

This is inaccurate in one big way and one small way.
Big way: .coffee no longer used by default.
Small way: technically, the default glob is test; when a directory is specified Mocha looks in it for *.js files (or *.{js,<other extensions from --compilers}) or for **/*.js files when --recursive is specified. This is really only important if you need to understand adding *.{<extensions>} when replacing --compilers or if you need to understand --recursive, but we do occasionally get people confused about the interaction between globbing and --recursive...
Copied from original issue: mochajs/old-mochajs-site#82",boneskull,MEMBER,2017-12-09 09:10:56+00:00,True,2018-01-23 15:37:00+00:00,45.27,,1,0,,,,,0,0,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3133,docs: clarify pending test output wording,"From @rcjsuen on April 14, 2017 13:26
In the index.md, it says...

Pending tests will be reported as such.

...and that's all it says. There is no example output provided with the ""as such"" claim.
Copied from original issue: mochajs/old-mochajs-site#78",boneskull,MEMBER,2017-12-09 09:13:32+00:00,True,2018-03-20 17:05:30+00:00,101.33,,1,4,2017-12-09 09:13:34+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3134,Document the `done()` contract,"From @FagnerMartinsBrack on February 22, 2016 6:57
When I call done() passing a non Error instance (let's say an error Object Literal, for instance) I get the following message:

done() invoked with non-Error: [Object object]

If the contract is that you should pass an Error instance to the async done handler, then that should be documented. I couldn't find that when looking at the site, only looking at the internals (which, as we all know, should not be relied upon).
If you pass a String (done(""it should not do this"")), according to the source, it is supposed to be casted accordingly, but then the result will be something like:

done() invoked with non-Error: it should not do this

That is interpreted as a mistake, but then the docs should reflect what should be done to prevent that mistake.
Below is the relevant piece of code from source (2.4.5):
function callFnAsync(fn) {
  fn.call(ctx, function(err) {
    if (err instanceof Error || toString.call(err) === '[object Error]') {
      return done(err);
    }
    if (err) {
      if (Object.prototype.toString.call(err) === '[object Object]') {
        return done(new Error('done() invoked with non-Error: '
          + JSON.stringify(err)));
      }
     return done(new Error('done() invoked with non-Error: ' + err));
    }
    done();
  });
}
TL DR;
Document that done accepts either undefined or an Error object to reflect the current undocumented behavior.
Copied from original issue: mochajs/old-mochajs-site#24",boneskull,MEMBER,2017-12-09 09:17:01+00:00,True,2018-01-09 04:33:34+00:00,30.8,,1,0,,,,,0,0,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3135,"""features"" list should link to the documentation for said feature.","From @AshKyd on December 16, 2015 1:38
Invariably when I land on the Mocha site and search for a thing, I land on the ""Features"" list and am dismayed that it's not clickable. IMO the features list should link to the relevant feature docs, similar to the TOC.

I'm happy to look into this if there's no objections.
Copied from original issue: mochajs/old-mochajs-site#21",boneskull,MEMBER,2017-12-09 09:17:14+00:00,True,2018-01-17 05:26:54+00:00,38.84,,3,3,2017-12-09 09:17:15+00:00,0.0,boneskull,MEMBER,1,1,0,1,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3136,Documentation around glob patterns and shell expansion,"From @boneskull on July 12, 2015 4:15
from #1115

Not sure if it is needed, but it may be worth noting that due to shell expansion, glob patterns should be wrapped in double quotes on unix shells.
mocha -w -r should ""test/**/*.js""

Using that would render the --recursive flag useless.

Copied from original issue: mochajs/old-mochajs-site#8
UPDATE Double quotes for portability--don't want to say single quotes in one place and double quotes in the other, so DOUBLE QUOTES (single quotes fine on *nix if you don't want variable expansion to happen, but let's assume there are no variables in use)",boneskull,MEMBER,2017-12-09 09:17:26+00:00,True,2018-06-29 03:48:13+00:00,201.77,,3,5,2017-12-11 20:03:23+00:00,2.45,akrawchyk,CONTRIBUTOR,1,2,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3137,Document `enableTimeouts` option,"From @boneskull on July 12, 2015 4:14
from #1281

The option was added in 1.21.0, but it is not documented yet.

Copied from original issue: mochajs/old-mochajs-site#7",boneskull,MEMBER,2017-12-09 09:17:41+00:00,True,2018-01-09 04:32:04+00:00,30.8,,1,0,,,,,0,0,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3138,update Programmatic API documentation,"From @boneskull on July 12, 2015 4:13
from #1298

There is very little information that explains how to use the programmatic interface. All that is really mentioned is this wiki page that provides an example. It would be nice to see explicitly what is available like this (for example).

Copied from original issue: mochajs/old-mochajs-site#6",boneskull,MEMBER,2017-12-09 09:17:52+00:00,True,2018-04-12 21:37:46+00:00,124.51,,5,9,2017-12-09 09:17:53+00:00,0.0,boneskull,MEMBER,1,1,0,3,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3139,Can not import Mocha as a native ES6 module in a browser,"Prerequisites

[ x] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Can not import Mocha as a native ES6 module in a browser (Chrome 62). I tried several variant with import statement but with no success:
import 'https://unpkg.com/mocha@4.0.1/mocha.js';
// or 
import mocha from 'https://unpkg.com/mocha@4.0.1/mocha.js';
// or 
import mocha from 'https://unpkg.com/mocha@4.0.1/index.js';
Steps to Reproduce
See jsFiddle: https://jsfiddle.net/Lph8mrbe/2/
Expected behavior:
Mocha will be loaded into global context without errors.
Actual behavior:
Error:
mocha.js:1 Uncaught ReferenceError: require is not defined at mocha.js:1

Reproduces how often:
Always
Versions
4.0.1",vitalets,NONE,2017-12-09 11:29:31+00:00,True,2017-12-12 07:50:20+00:00,2.85,,3,4,2017-12-10 23:39:59+00:00,1.51,ScottFreeCode,CONTRIBUTOR,1,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3140,Very hard to find docs for using mocha programmatically,"mochajs.org and the github wiki do not have any obvious links to the mocha API for using mocha in a script.
The best I could quickly find was the wiki article ""Using mocha programmatically"", which only gives a short example.
Is there any docs that list the methods of the mocha object?",BebeSparkelSparkel,NONE,2017-12-09 16:26:16+00:00,True,2017-12-11 02:59:51+00:00,1.44,,4,4,2017-12-11 02:29:02+00:00,1.42,akrawchyk,CONTRIBUTOR,0,2,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3141,"Interdependent instances of ""new Mocha()"" Object","Description
Only one new Mocha() instance can be created that will behave normally. The second mocha instance will not run any tests.
const Mocha = require('mocha')
const mocha1 = new Mocha()
const mocha2 = new Mocha() // will behave badly
Steps to Reproduce
Run try_mocha_run_twice.js in the same directory as test_simple.js in a console and view the output for the inconsistencies between the two different results of the function mocha_test.
try_mocha_run_twice.js
const Mocha = require('mocha')

function mocha_test() {
  return new Promise(resolve => {

    const mocha = new Mocha()
    mocha.addFile('test_simple.js')

    console.log('start --------------------------------')

    mocha.run(() => {
      console.log('end --------------------------------')
      resolve()
    })

  })
}


async function run_mult_tests(count=2) {
  for (; count > 0; --count)
    await mocha_test()
}

run_mult_tests(2)
test_simple.js
describe('pass fail', function() {
  it('should pass', function() {})
  it('should fail', function() {throw new Error('fail')})
})
Expected behavior:
$ node try_mocha_run_twice.js
start --------------------------------

  pass fail
    ✓ should pass
    1) should fail

  1 passing (9ms)
  1 failing

  1) pass fail
       should fail:
     Error: fail
      at Context.<anonymous> (try_test_mocha_run_twice.js:3:39)


end --------------------------------
start --------------------------------


  pass fail
    ✓ should pass
    1) should fail

  1 passing (9ms)
  1 failing

  1) pass fail
       should fail:
     Error: fail
      at Context.<anonymous> (try_test_mocha_run_twice.js:3:39)


end --------------------------------
Actual behavior:
$ node try_mocha_run_twice.js
start --------------------------------

  pass fail
    ✓ should pass
    1) should fail

  1 passing (9ms)
  1 failing

  1) pass fail
       should fail:
     Error: fail
      at Context.<anonymous> (try_test_mocha_run_twice.js:3:39)

end --------------------------------
start --------------------------------

  0 passing (0ms)

end --------------------------------
Reproduces how often: 100%
Versions
OS X El Capitan 10.11.6
mocha 4.0.1
node v8.5.0
shell: osx term
Additional Information

Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.",BebeSparkelSparkel,NONE,2017-12-09 22:14:57+00:00,True,2017-12-13 01:26:47+00:00,3.13,,2,1,2017-12-13 01:26:45+00:00,3.13,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3142,Add timeout option to xits using arrow functions,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

When using the arrow function syntax to override the default timeout. You specifiy it on the return value of the it function.
it(""should override the timeout"", () => { }).timeout(100);

But if we want to ignore the test by adding an x we get an exception, which is annoying.
Steps to Reproduce
// Throws
xit(""should override the timeout"", () => { }).timeout(100);


Expected behavior: The test should be ignored
Actual behavior: We get an exception


Mocha` exploded!
TypeError: Cannot read property 'timeout' of undefined


Reproduces how often: 100%
Versions
mocha 4.0.1",MattOakley,NONE,2017-12-11 14:24:22+00:00,True,2017-12-12 06:54:14+00:00,0.69,,3,5,2017-12-11 17:34:44+00:00,0.13,boneskull,MEMBER,2,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3146,ESnext-ify development scripts,"Since we no longer support anything below Node.js v4, it follows that we should be able to write our development scripts in whatever ES features Node.js v4 supports.  To see what we can use, check the Kangax tables.

In Node.js v4, let and const work as expected in strict mode only*. We should be OK to use it.

This does not include most source files and test files, as those would require transpilation that we aren't currently using (setting that up can be a separate effort if it makes sense).
Here's the list of what needs to be upgraded:

 bin/*
 index.js nothing to do
 scripts/*.js
 karma.conf.js

Furthermore, appropriate .eslintrc.yaml files should be added, or existing ones modified.
There are more sources and tests which will never touch a browser, but they aren't marked as such nor organized; we'll leave those.
As a reminder, the oldest environments Mocha supports are Node.js v4 and IE9.",boneskull,MEMBER,2017-12-12 23:40:45+00:00,True,2017-12-13 22:56:46+00:00,0.97,,2,1,2017-12-13 16:02:15+00:00,0.68,Bamieh,MEMBER,1,0,0,0,"['chore', 'developer-experience', 'refactor', 'semver-patch']",True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3148,"Drop support for IE9, IE10","These browsers are not maintained by Microsoft and we should drop support; they are causing maintenance headaches.

 Remove any buffer-related hacks in the build
 Remove these browsers from the build matrix",boneskull,MEMBER,2017-12-13 03:40:20+00:00,True,2018-01-03 16:48:03+00:00,21.55,,2,1,2017-12-13 09:48:39+00:00,0.26,Bamieh,MEMBER,1,0,0,0,['semver-major'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
3149,Drop Node.js 4.x support,"(Did I get your attention?)
Node.js v4.x will no longer be maintained as of April 2018.  When this happens, Mocha should follow suit and drop support.
Please note that old versions of Mocha will still work on unsupported platforms.",boneskull,MEMBER,2017-12-13 03:42:36+00:00,True,2018-08-10 22:20:51+00:00,240.78,,3,2,2017-12-13 09:51:39+00:00,0.26,Bamieh,MEMBER,2,0,0,0,"['future', 'semver-major']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
3155,investigate seemingly non-deterministic nyc output,"I don't believe the coverage data out of nyc.  I've also seen this sort of thing happen with my own two eyes.
It is likely a misconfiguration on our part, but I don't know where.  It may involve the way we are aggregating the results.
I would be indebted to @bcoe if he could take a look at our command-line usage and config file.  Is there something obviously amiss?
Hey, at least we aren't in sourcemap hell...",boneskull,MEMBER,2017-12-13 23:28:01+00:00,True,2018-12-08 01:10:43+00:00,359.07,,1,3,2017-12-13 23:31:34+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['chore', 'help wanted', 'qa']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3157,documentation build problems,"I am seeing two:

path-related problems in the package.json scripts
the script which updates the TOC always wants to append a newline to the end of index.md, which is annoying.",boneskull,MEMBER,2017-12-14 05:55:45+00:00,True,2017-12-14 05:59:08+00:00,0.0,,1,0,,,,,0,0,0,0,"['confirmed-bug', 'documentation', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3159,Mocha only runs one test,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Mocha doesn't run all tests, just one
Steps to Reproduce
See the attached screenshots. Neither mocha test/**/*.spec.js nor mocha --recursive work for me

Expected behavior: [What you expect to happen]
all tests in the directory should be executed
Actual behavior: [What actually happens]
Only one test is ran
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

mocha version 4.0.1
I'm getting this error on both OSX and Linux, regardless of globstar settings
Additional Information

I'm wondering if there is a bug. I'm getting this error on both OSX and Linux:",javahaxxor,NONE,2017-12-14 09:19:35+00:00,True,2018-03-18 06:11:24+00:00,93.87,,5,7,2017-12-14 19:38:33+00:00,0.43,boneskull,MEMBER,2,0,0,3,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3162,Sharing of context between nested describe blocks,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When function getFoo is bound to this at top-level beforeEach() and I set this.foo property inside a nested beforeEach() block, that getFoo function cannot access this property.
As demonstrated by the code below:
const {expect} = require(""chai"");

beforeEach(function() {
    this.getFoo = () => this.foo;
});

describe(""when this.foo set"", function() {
    beforeEach(function() {
        this.foo = true;
    });

    it(""getFoo() returns value of foo"", function() {
        expect(this.getFoo()).to.equal(true); // FAILS!
    });
});
When I remove the describe(), the tests will pass.
Is this the intended behavior of Mocha?
I'm trying to migrate my tests over from Jasmine, where the equivalent code works without any problems.
Versions

Mocha 4.0.1
Node 6.1.1
Mac OS 10.13.2
Shell: Bash
Installing and running through: Yarn
Additional tools: Chai",nene,NONE,2017-12-15 14:06:41+00:00,True,2017-12-15 22:04:39+00:00,0.33,,2,3,2017-12-15 22:04:39+00:00,0.33,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3165,progress reporter failing,"running make test-reporters is failing on master (and the CI), here is the failing test:
  1) Progress reporter
       on test end
         if line has changed
           should write expected progress of open and close options:

      Error: expected [ '\u001b[J', '  [', '', '․', ']' ] to sort of equal [ '\u001b[J', '  OpEn', '', 'iNcOmPlEtE', 'cLoSe' ]
      + expected - actual

       [
         ""\u001b[J""
      -  ""  [""
      +  ""  OpEn""
         """"
      -  ""․""
      -  ""]""
      +  ""iNcOmPlEtE""
      +  ""cLoSe""
       ]",Bamieh,MEMBER,2017-12-16 12:09:06+00:00,True,2017-12-21 19:57:16+00:00,5.33,,2,1,2017-12-21 19:57:16+00:00,5.33,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3166,ERROR: spawn notify-send,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Get this output every time I try to test:
An error occured. { Error: spawn notify-send ENOENT
    at exports._errnoException (util.js:1018:11)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)
    at onErrorNT (internal/child_process.js:367:16)
    at _combinedTickCallback (internal/process/next_tick.js:80:11)
    at process._tickDomainCallback (internal/process/next_tick.js:128:9)
  code: 'ENOENT',
  errno: 'ENOENT',
  syscall: 'spawn notify-send',
  path: 'notify-send',
  spawnargs: 
   [ '-i',
     '/home/cheyenne/.nvm/versions/node/v6.11.0/lib/node_modules/mocha/images/ok.png',
     '--hint=int:transient:1',
     'Passed',
     '',
     '92 tests passed in 622ms' ] }

Steps to Reproduce
Just running mocha --exit
Expected behavior:
Tests all pass, and using the --exit flag should not produce an error.
Reproduces how often:
100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version:


4.0.1
4.0.1


The output of node --version:
6.11.0
The version and architecture of your operating system:
Kubuntu 16.04 64
Your shell (bash, zsh, PowerShell, cmd, etc.):
zsh
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
Chai v3.5.0
The code transpiler being used:
none",dinophile,NONE,2017-12-18 15:36:36+00:00,True,2017-12-21 19:56:39+00:00,3.18,,2,1,2017-12-21 19:56:39+00:00,3.18,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3168,--grep and .only result in 0 tests running when using async describe with await,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

When you have a describe function that is async, and use an await statement within that function, tests run fine, except when using --grep or only.
Steps to Reproduce

Create this simple test suite to reproduce the issue:
/* eslint-disable no-unused-vars */
/* global describe, it, beforeEach, afterEach  */
require('should')

describe('one', async function () {
  await new Promise((resolve, reject) => resolve())
  
  it('should work', function () {
    return 'works'
  })
})

describe('two', function () {
  it('should also work', function () {
    return 'works too'
  })
})

This works: node_modules/mocha/bin/mocha (2 passing)
This does NOT work:  node_modules/mocha/bin/mocha --grep=""one"" (0 passing)
Adding .only also does NOT work.
Expected behavior: [What you expect to happen]
Expect it to run the function matching grep or .only
Actual behavior: [What actually happens]
0 tests are passing/failing/pending
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

Mocha 4.0.1
Node 9.2.1
OSX Sierra
Additional Information

I need to use await inside describe because the inner tests use a port that is found using an async library to discover unused ports.",tommedema,NONE,2017-12-20 12:23:39+00:00,True,2017-12-21 08:32:09+00:00,0.84,,1,2,2017-12-21 06:38:09+00:00,0.76,tommedema,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3169,Unable to use --exit,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

I'm unable to use the --exit parameter when provided in mocha.opts or in the CLI.
Steps to Reproduce
mocha.opts
--reporter spec
-timeout 2000
--delay
--exit
test/integration/
test/module

package.json npm script:
""test"": ""mocha""
$ npm test
Resulting output:
'--delay' expects a value

Usage: C:\Program Files\nodejs\node.exe _mocha [options]

Options:
   -v, --version   Print version and exit.
   -d, --debug     Run in debug mode.  [false]
   -p, --port      The port number to listen on.  [5000]

I've also attempted removing --exit from the opts file and providing directly in the CLI:
$ npm mocha --exit
Resulting output:
'--exit' expects a value

Usage: C:\Program Files\nodejs\node.exe _mocha [options]

Options:
   -v, --version   Print version and exit.
   -d, --debug     Run in debug mode.  [false]
   -p, --port      The port number to listen on.  [5000]

Removing this options from the CLI and the opts file causes mocha to behave as expected.
Expected behavior: Mocha to run
Actual behavior: Mocha doesn't run
Reproduces how often: 100%
Versions

$ mocha --version
'mocha' is not recognized as an internal or external command, operable program or batch file.

$ node node_modules/.bin/mocha --version
E:\git\ts_template\node_modules\.bin\mocha:2
basedir=$(dirname ""$(echo ""$0"" | sed -e 's,\\,/,g')"")
          ^^^^^^^

SyntaxError: missing ) after argument list
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:383:7)
    at startup (bootstrap_node.js:149:9)

However, running mocha within the context of an npm script:
E:\git\ts_template>npm test

> ts-template@6.3.0 test E:\git\ts_template
> mocha --version

4.0.1

E:\git\ts_template>node --version
v6.11.4

Additional Information",zelein,NONE,2017-12-20 21:45:31+00:00,True,2017-12-22 21:16:58+00:00,1.98,,2,3,2017-12-21 19:55:54+00:00,0.92,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3172,lint the markdown,We have enough markdown in here that it should be linted via markdownlint.,boneskull,MEMBER,2017-12-21 19:53:47+00:00,True,2018-01-03 22:58:25+00:00,13.13,,2,1,2017-12-21 20:54:08+00:00,0.04,Bamieh,MEMBER,1,0,0,0,"['documentation', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3174,Enable Let's Encrypt SSL on mochajs.org with Netlify,"https://www.netlify.com/docs/ssl/
@Munter 😄",xxczaki,CONTRIBUTOR,2017-12-22 17:30:15+00:00,True,2017-12-31 09:52:58+00:00,8.68,,3,3,2017-12-28 23:45:40+00:00,6.26,boneskull,MEMBER,2,0,0,0,"['chore', 'needs-feedback']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3178,--retries <number> doesn't work,"I use following, case failed but doesn't retry, it there something wrong? Or I use the wrong way.
mocha  --retries 2 casename.spec.js",luoxi001713,NONE,2017-12-26 11:24:45+00:00,True,2018-04-15 20:55:38+00:00,110.4,,3,3,2017-12-28 09:53:40+00:00,1.94,Bamieh,MEMBER,1,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3179,Warning: Could not find any test files matching pattern ,"Hi Mocha Team !
The problem :
This warning stops my tests on Circle CI V2.0 (Ubuntu 14.04, Nodejs 8.9.3) :
...
yarn test
...
$ eslint .
$ mocha ""./src/migrations/index.test.js"" --require babel-core/register
Warning: Could not find any test files matching pattern: ./src/migrations/index.test.js
No test files found
error Command failed with exit code 1.



I tried to fix it reading similar issues like #2895 but nothing works.
My package.json :
...
""test-migrations"": ""mocha \""./src/migrations/index.test.js\"" --require babel-core/register"",
""test"": ""yarn run lint && yarn run test-migrations && mocha \""./src/index.test.js\"" --require babel-core/register"",
...

I also tried to write the path differently like :
mocha src/migrations/index.test.js --require babel-core/registe but it doesn't work
Weird behavior :
There's not warning and everything works fine on

OSX
Ubuntu 16.04
Debian Jessie
Debian Stretch

How could i solve this problem ?
Thanks a lot !",Aarbel,NONE,2017-12-26 11:33:35+00:00,True,2017-12-29 20:59:46+00:00,3.39,,2,3,2017-12-28 01:16:17+00:00,1.57,Aarbel,NONE,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3180,"Data-driven testing breaks before, beforeEach, after, and afterEach","Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
It looks like mocha's before, beforeEach, after, and afterEach hooks do not play nicely with data-driven testing. Mocha offers hooks for executing code before a test or section of tests. Due to its structure as plain JavaScript functions taking callbacks, it also supports data-driven tests, where test cases can be generated dynamically based on expected inputs and outputs.
However, it looks like the two features don't work well together: if I attempt to combine them, I get an opaque error (see below)
Steps to Reproduce
Here is a minimal test case: I can run it directly via node_modules/.bin/mocha test/before_after_ddt_test.js:
describe('before/after with data-driven tests', () => {
  before(() => console.log('before worked'))
  beforeEach(() => console.log('beforeEach worked'))
  afterEach(() => console.log('afterEach worked'))
  after(() => console.log('after worked'))
  [ 'foo' ].forEach((item) => {
    it(`works for item ${item}`, () => {
      console.log('item is', item)
    })
  })
})
This works correctly if I ""unroll"" the forEach loop or drop all the hooks.
Expected behavior: [What you expect to happen]
Expect the following output:
  before/after with data-driven tests
before worked
beforeEach worked
item is foo
    ✓ works for item foo
afterEach worked
after worked


  1 passing (6ms)

Actual behavior: [What actually happens]
I get the following error:
maciek@mothra:~/code/herokudata$ node_modules/.bin/mocha test/before_after_ddt_test.js 
/home/maciek/code/herokudata/test/before_after_ddt_test.js:16
  [ 'foo' ].forEach((item) => {
  ^

TypeError: Cannot read property 'foo' of undefined
    at Suite.describe (/home/maciek/code/herokudata/test/before_after_ddt_test.js:16:3)
    at Object.create (/home/maciek/code/herokudata/node_modules/mocha/lib/interfaces/common.js:114:19)
    at context.describe.context.context (/home/maciek/code/herokudata/node_modules/mocha/lib/interfaces/bdd.js:44:27)
    at Object.<anonymous> (/home/maciek/code/herokudata/test/before_after_ddt_test.js:11:1)
    at Module._compile (module.js:635:30)
    at Object.Module._extensions..js (module.js:646:10)
    at Module.load (module.js:554:32)
    at tryModuleLoad (module.js:497:12)
    at Function.Module._load (module.js:489:3)
    at Module.require (module.js:579:17)
    at require (internal/module.js:11:18)
    at /home/maciek/code/herokudata/node_modules/mocha/lib/mocha.js:231:27
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (/home/maciek/code/herokudata/node_modules/mocha/lib/mocha.js:228:14)
    at Mocha.run (/home/maciek/code/herokudata/node_modules/mocha/lib/mocha.js:514:10)
    at Object.<anonymous> (/home/maciek/code/herokudata/node_modules/mocha/bin/_mocha:480:18)
    at Module._compile (module.js:635:30)
    at Object.Module._extensions..js (module.js:646:10)
    at Module.load (module.js:554:32)
    at tryModuleLoad (module.js:497:12)
    at Function.Module._load (module.js:489:3)
    at Function.Module.runMain (module.js:676:10)
    at startup (bootstrap_node.js:187:16)
    at bootstrap_node.js:608:3

Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
maciek@mothra:~/code/herokudata$ node_modules/.bin/mocha --version
3.5.3
maciek@mothra:~/code/herokudata$ mocha --version
2.4.5
Reproducible without a transpiler.",uhoh-itsmaciek,NONE,2017-12-26 18:30:31+00:00,True,2017-12-26 19:13:35+00:00,0.03,,2,6,2017-12-26 19:13:35+00:00,0.03,uhoh-itsmaciek,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3181,Add new --add-file CLI flag,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Currently there is a way for mocha to require a file globally via the CLI --require flag. This occurs before the mocha test suite is created and ran. This works and is great.
However there is no way to add a file to the mocha test suite via the CLI. There is a way programmatically via mocha.addFile() and you can simulate it via adding individual files when calling mocha mocha myAddFile1.js myAddFile2.js actualTestFile.js, but there is no official CLI way to always require files within the mocha test suite.
This is useful when setting up shared before and after handlers, or anything else that needs to act on the test suite.
I opened this ticket to explore the desirability of adding a --add-file CLI flag as an interface to the mocha.addFile function.
Additional Information
The desire for this addition came as a result of work I did when trying to integrate jest-runner-mocha into our tests suite.",hswolff,CONTRIBUTOR,2017-12-27 17:26:51+00:00,True,2018-01-16 20:44:04+00:00,20.14,,4,7,2017-12-28 10:06:15+00:00,0.69,Bamieh,MEMBER,2,1,0,1,"['feature', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3183,Mocha stack trace color conflicts with solarized light background,"[x ] Checked that your issue isn't already filed by cross referencing issues with the common mistake label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
text does not show up on solarized light
Steps to Reproduce
add solarized light theme to your terminal and run mocha.  the error stack trace is the same color as the background. solarized light is a very common theme, and it seems worth avoiding this collision
Reproduces how often: 100%
Versions
mocha version 4.0.1
node version 8.4.0
GalliumOS, xfce
just the regular terminal program
bash
babel-register
Really, ideally, you would be able to configure mocha with custom colors. I don't know why this feature wouldn't be included, but maybe it's more difficult than I realize.",zwhitchcox,NONE,2017-12-28 06:55:56+00:00,True,2017-12-29 04:42:35+00:00,0.91,,2,7,2017-12-28 07:09:31+00:00,0.01,zwhitchcox,NONE,1,0,0,1,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3184,Multiple `describe.skip` marks other describes as pending,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I ran into something weird while using describe.skip.  If I have nested describes, with at least 2 skipped describes inside one, all other describes will be tagged pending.
Steps to Reproduce
First file names 10.test.js:
var assert = require('assert');

describe(""Some tests"", function(){
  describe(""First describe"", function(){
    it(""should pass"", function(){
      assert.equal(1,1)
    })
  })

  describe.skip(""Some disabled test"");
  describe.skip(""Another disabled test"");
  describe.skip(""One more disabled test"");
})

Second file named 20.test.js
var assert = require('assert');

describe(""Some other tests"", function(){
  describe(""a new describe"", function(){
    it(""should still pass"", function(){
      assert.equal(1,1)
    })
  })
})

Results in:


  Some tests
    First describe
      ✓ should pass
    Some disabled test
      Another disabled test
        Some other tests
          a new describe
            - should still pass


  1 passing (5ms)
  1 pending

Note that it is possible to do this with only one file as well:
test.js:
var assert = require('assert');

describe(""Some tests"", function(){
  describe.skip(""Some disabled test"");
  describe.skip(""Another disabled test"");
  describe(""First describe"", function(){
    it(""should pass"", function(){
      assert.equal(1,1)
    })
  })
})


Results in:
    Some disabled test
      Another disabled test
        First describe
          - should pass


  0 passing (4ms)
  1 pending




Expected behavior: Only the skipped describes should be marked pending
Actual behavior: All describes after the first two skipped ones will be marked pending.
Reproduces how often: 100%
Versions

mocha version: 4.0.1
node version: 9.3.0
Arch linux
zsh",MCSH,NONE,2017-12-28 14:11:07+00:00,True,2018-03-21 11:36:10+00:00,82.89,,4,2,2017-12-29 19:17:23+00:00,1.21,alisafari1998,NONE,1,0,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3186,mocha.options.document,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have a cordova app I am testing with mocha. The UI styles make playing well with divs difficult, so pushing the mocha output to an iframe or other window makes things easier to see. I have a branch that replaces 8 instances of ""document"" with a getMochaDocument method, returning the option document value or the regular document, if not set. With your blessing, I will offer a pull request.
Usage:
<iframe id=""testiframe""></iframe>
</body>
</html>
<script>
    let framesrc = '<link href=""https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.css"" rel=""stylesheet"" />';
    framesrc += '<body><div id=""mocha""></div></body>';
    $('#testiframe').contents().find('html').html(framesrc);
	mocha.checkLeaks();
	mocha.globals(['jQuery']);
	mocha.options.document = document.getElementById(""testiframe"").contentDocument;
	mocha.run();
</script>",daarond,NONE,2018-01-01 19:43:38+00:00,True,2018-01-03 15:39:38+00:00,1.83,,2,2,2018-01-02 23:47:17+00:00,1.17,boneskull,MEMBER,1,0,0,1,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3188,Mocha screws with npm environment variables,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with:
node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When running a node script/app as part of a package.json script, for example ""npm run test"", npm will inject config variables into process.env.
For example:
  npm_config_cache_min: '10',
  npm_config_cafile: '',
  npm_config_cert: '',
  npm_config_cidr: '',
  npm_config_color: 'true',
  npm_config_commit_hooks: 'true',
  npm_config_depth: 'Infinity',
  npm_config_description: 'true',

When logging out these variables in a mocha test, the unset ('') variables in the example above are the string 'undefined'. This causes issues when spawning npm since 'undefined' is an invalid value for a lot of these keys.
  npm_config_cache_min: '10',
  npm_config_cafile: 'undefined',
  npm_config_cert: 'undefined',
  npm_config_cidr: 'undefined',
  npm_config_color: 'true',
  npm_config_commit_hooks: 'true',
  npm_config_depth: 'Infinity',
  npm_config_description: 'true',

Spawning a regular node process with the code ``console.log(process.env)``` does not have these undefined values and looks like the example.
Steps to Reproduce


Create index.js
console.log(process.env)


Create an empty node app with a mocha dependency.
2a. npm init
2b. npm i mocha


create 2 scripts in package.json:


""scripts"": {
  ""node"": ""node index.js"",
   ""mocha"": ""mocha index.js""
}


run npm run node and npm run mocha
compare the outputs of both commands.

Expected behavior: indentical output aside from any mocha specific variables which may be added.
Actual behavior: any npm_config_ values which were '' before are now 'undefined'
Reproduces how often: All the time
Versions

The output of mocha --version and node node_modules/.bin/mocha --version:  4.1.0
The output of node --version: 8.9.1
The version and architecture of your operating system: Windows 10 1607
Your shell (bash, zsh, PowerShell, cmd, etc.): cmd and git bash

Additional Information",alasdairhurst,NONE,2018-01-02 18:39:24+00:00,True,2018-01-07 19:42:42+00:00,5.04,,5,7,2018-01-02 23:43:58+00:00,0.21,boneskull,MEMBER,2,1,0,2,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3191,[RFC] Moving the `Mocha needs YOU!` disclaimer from the README.md file,"The first thing that a user sees when opening mochajs/mocha is a huge disclaimer of

Mocha needs YOU!
...

For new comers, this message might be a little intimidating and discouraging to use mocha as their testing tool.
Maybe we can move this section into the CONTRIBUTING.md file, and write a small message encouraging developers to contribute to mocha to keep this awesome project alive.
P.S. mocha's immediate needs needs to be updated as well!
What do you think?",Bamieh,MEMBER,2018-01-03 20:35:35+00:00,True,2018-03-06 01:11:39+00:00,61.19,,3,1,2018-01-20 06:15:32+00:00,16.4,outsideris,MEMBER,1,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3193,"Ability to show only changes and deletions in diffs, not additions","Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I use chai assertion library and chai-like library for the partial comparing of objects: I am interested in existence and compliance only of those properties that are listed in an expected object. Existence of additional properties in an actual object permissibly. Unfortunately, when diff is created it is not considered in any way and those properties, existence which for the test it is indifferent get to diff. It would be desirable to have a way to suppress their generation in a diff. Example:
Test:
'use strict';

let chai = require('chai');
let expect = chai.expect;
chai.use(require('chai-like'));

describe(""diff test"", function() {
  let AST = {
    type: 'grammar',
    rules: [
      { type: 'rule', name: 'rule1' },
      { type: 'rule', name: 'rule2' },
    ]
  };
  it(""chai-like"", function() {
    expect(AST).like({
      rules: [
        { name: 'rule' },
        { name: 'rule2' }
      ]
    });
  });
});
This is current actual output which is too large in some cases and contains unnecessary details
  1) diff test
       chai-like:

      AssertionError: expected { Object (type, rules) } to be like { Object (rules) }
      + expected - actual

       {
         ""rules"": [
           {
      -      ""name"": ""rule1""
      -      ""type"": ""rule""
      +      ""name"": ""rule""
           }
           {
             ""name"": ""rule2""
      -      ""type"": ""rule""
           }
         ]
      -  ""type"": ""grammar""
       }

      at Context.<anonymous> (test\test.js:24:17)
But I want that diff looked here so:
 {
   ""rules"": [
     {
-      ""name"": ""rule1""
+      ""name"": ""rule""
     }
   ]
 }
I think that there is no such opportunity now and that it appeared, it is necessary to add to an AssertionError object new property which could control such behavior of diff, and then support its in all assertion libraries.
If the idea is supported, I can make PRs for its implementation in all necessary libraries.",Mingun,NONE,2018-01-04 12:23:44+00:00,True,2018-01-07 19:41:57+00:00,3.3,,2,3,2018-01-07 19:41:57+00:00,3.3,boneskull,MEMBER,1,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3198,Mocha broken queue with uncaught exceptions,"Hey guys!
I don't know, may be you already know problem, that mocha uncaught exception processing may lead to broken queue for async tests. But just in case, this is the post with repeatable example and detailed explanation, why it happens: https://glacejs.github.io/glace-core/tutorial-mocha-uncaught.html",schipiga,NONE,2018-01-09 08:44:38+00:00,True,2018-01-17 01:23:43+00:00,7.69,,2,6,2018-01-17 01:23:43+00:00,7.69,boneskull,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3200,Proposed: Report file name where a test fails,"Is it possible to have mocha report the filename containing a failed test? Could I write a reporter that did this? Or would I have to build support for it, and then write such a reporter? Not at all familiar w/ the mocha codebase yet, but I'd be willing to take a dive in and try out contributing this if the Mocha community would welcome it.
After a test fails, I frequently find myself grepping the title of the test to determine the filename so I can then run the test in isolation.
Reporting the filename would save me a step.",twitchard,NONE,2018-01-11 14:52:52+00:00,False,,,,5,16,2018-01-11 16:15:22+00:00,0.06,Bamieh,MEMBER,3,1,0,1,"['feature', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3204,dependency upgrade schedule,"We should upgrade our dependencies on a schedule.  I'm not sure at what interval, but every x weeks/months we should upgrade everything.
This should mitigate problems where we must apply a critical or security fix, but it needs umpteen other dependencies upgraded and breaks stuff.  Things will break, but I'm hoping if we stick to a schedule, they won't break as badly and become headaches to address.
By ""dependencies"" I mean ""production and development"", but these could be on a different cadence, if it makes sense.
Thoughts?
cc @mochajs/core",boneskull,MEMBER,2018-01-16 20:40:40+00:00,False,,,,4,4,2018-01-20 06:21:34+00:00,3.4,outsideris,MEMBER,4,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3206,netlify should only deploy when repo is tagged,"@Munter when we merge changes into master which have documentation updates, those updates go live, even if the features they describe aren't yet in Mocha.
I'd like to have it deploy when:

a new Git tag or release happens
manually

(ideally both)
Is that doable?",boneskull,MEMBER,2018-01-17 05:36:40+00:00,True,2018-12-13 07:00:31+00:00,330.06,,3,8,2018-01-17 07:43:44+00:00,0.09,Munter,MEMBER,2,0,0,1,"['chore', 'documentation', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3207,.env,"Prerequisites


 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",timkinnane,NONE,2018-01-17 10:36:26+00:00,True,2018-01-19 05:48:00+00:00,1.8,,2,1,2018-01-19 05:53:58+00:00,1.8,timkinnane,NONE,0,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3208,"travis ""before script"" should only be run once","This script basically asserts define doesn't appear in the browser distfile (mocha.js).

This check probably needs to have its own line in the build matrix
It should be invoked via a script in package-scripts.js so developers can run it locally",boneskull,MEMBER,2018-01-18 01:05:54+00:00,True,2018-03-21 19:05:32+00:00,62.75,,4,6,2018-01-18 01:46:23+00:00,0.03,vkarpov15,MEMBER,4,0,0,0,"['chore', 'good-first-issue', 'help wanted', 'qa']",True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3209,run some tests concurrently where possible; improve package-scripts.js,"nps-utils makes this pretty easy.
I've cut a lot of time off of running tests locally using concurrent execution.   CI remains to be seen...",boneskull,MEMBER,2018-01-18 01:07:59+00:00,False,,,,2,3,2018-01-18 01:26:16+00:00,0.01,boneskull,MEMBER,2,0,0,0,"['chore', 'help wanted', 'nice-to-have']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3211,Unwrap an array of assertion errors,"Prerequisites

 Checked that your issue isn't already filed by cross referencing issues with the common mistake label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Some test frameworks collect errors and throw them all at once. One example of this is kapok-js. Mocha should detect an array of assertion errors, unwrap them, and report each one in turn. Jest supports this feature, so there is precedent set, which some test frameworks rely on.
Steps to Reproduce
Example test:
const AssertionError = require('assertion-error')
  
describe('thrown errors', () => {
  it('should unwrap an array of assetion errors', () => {
    const e1 = new AssertionError('fail')
    const e2 = new AssertionError('another fail')
    throw [e1, e2]
  })
})
Expected behavior: Each assertion error is reported in turn.
Actual behavior: Mocha issues the warning: ""the array [...] was thrown, throw an Error :)""
Versions
mocha --version = 5.0.0
node --version = 8.9.4",mojavelinux,NONE,2018-01-18 06:50:58+00:00,True,2018-01-22 05:37:39+00:00,3.95,,2,5,2018-01-18 06:52:36+00:00,0.0,mojavelinux,NONE,1,0,0,1,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3216,How to use test output in other test cases,"I have written AuthController.test.js where I am testing for authentication.
In this file, the login test will give me some auth key, and then I want to use that key in all other test files i.e. in all other test cases as .set('authKey', authKey)
So this login test must execute before all other test cases, and then the authKey returned from this login test can be used in all other test cases.
So how to do that.
Below is my code.
AuthController.test.js
var supertest = require('supertest');
var assert = require('assert');

describe('The AuthController', function () {
  
   var authKey;

    it('login', function (done) {
        var agent = supertest.agent(sails.hooks.http.app);
        agent
            .post('login')
            .set('Accept', 'application/json')
            .send({
                email:""vishal@myemail.com"",
                password:""password""
            })
            .expect(200)
            .end(function (err, result) {
                if (err) {
                    done(err);
                } else {
                    assert.equal(result.body.data.email,'vishal@myemail.com');
                    authKey = result.body.data.authKey;
                    done();
                }
            });
    });

In the above code, I will get the authKey as a response from login test.
So now, I want to use that authKey in the other test cases files.
for example in UserController.test.js file,
UserController.test.js
var supertest = require('supertest');
var assert = require('assert');

describe('The UserController', function () {
  
   var authKey;

    it('should create user', function (done) {
        var agent = supertest.agent(sails.hooks.http.app);
        agent
            .post('login')
            .set('Accept', 'application/json')
            .set('authKey', authKey)
            .send({
                email:""amar@myemail.com"",
                password:""password""
            })
            .expect(201)
            .end(function (err, result) {
                if (err) {
                    done(err);
                } else {
                    assert.equal(result.body.data.email,'amar@myemail.com');
                    done();
                }
            });
    });",vishalbiradar,NONE,2018-01-22 11:30:45+00:00,True,2018-01-28 05:49:06+00:00,5.76,,3,1,2018-01-26 16:15:58+00:00,4.2,Nostradamos,NONE,0,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3218,How to run a test case before all other test cases,"I want to execute a test before all other test cases from all the test files.
So is there any provision to do this.
Actually, the success or failure of all remaining test cases depends on the
first test case.
So I want to execute a test case before all remaining test cases and then I will use
the output from that first test case in remaining test cases.",vishalbiradar,NONE,2018-01-25 10:07:38+00:00,True,2018-01-28 05:46:02+00:00,2.82,,3,4,2018-01-26 16:13:40+00:00,1.25,Nostradamos,NONE,1,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3219,How to do a post call in before hook,"I want to do an HTTP post call inside before hook.
So, I can use the output from that post call in my all test cases.
So is there any provision to do so.
I may be having several test files containing several test cases.
But I want to execute an HTTP post call only once before all the test cases.",vishalbiradar,NONE,2018-01-25 10:13:23+00:00,True,2018-01-28 05:48:35+00:00,2.82,,2,1,2018-01-28 05:48:35+00:00,2.82,boneskull,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3220,Exit mocha immediately,"Is there any way to explicitly exit the process with an error message? I would like to have a checker for something that all my tests require and if the checker fails would like to exit immediately with an error message as stated.
Something like mocha.exit('Error message here').  I tried process.exit(1); but nothing happens.",basickarl,NONE,2018-01-26 17:22:41+00:00,True,2018-01-28 05:38:34+00:00,1.51,,2,1,2018-01-28 05:38:34+00:00,1.51,boneskull,MEMBER,1,0,0,0,"['faq', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3221,Went from testing and passing to suddenly does not run,"I stood Mocha/Chai up on its feet and running pretty well in a ""testing"" clone of my working repository. When I was satisfied with that, I committed that and pulled those updates into my working repository. I opened that solution and now suddenly nothing works, Mocha/Chai cannot be found, describe, it are undefined, at best, and nothing runs, tests are ignored.
I am running from Visual Studio 2015, using Chutzpah test runner to facilitate things.
As far as I know npm ran successfully to pull in all the requisite package references.",mwpowellhtx,NONE,2018-01-27 19:05:41+00:00,True,2018-01-28 05:40:34+00:00,0.44,,3,4,2018-01-27 19:10:47+00:00,0.0,mwpowellhtx,NONE,0,0,0,2,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3223,can wonky reporting and statistics be avoided?,"If an task created by a test would throw an exception (or rejection) and this test has already passed or failed, then Mocha's output gets wonky (using spec reporter, for example):

the test name may repeat multiple times, with different results for each
we can't just limit it, because suppression thereof means errors can't easily be cross-referenced by number
the total pass/fail/pending count will be larger than the total number of tests executed, because a test will have been reported to be in multiple states
multiple errors may be output for a single test


Here are two ideas to mitigate this:


Decouple any exception a test causes after it has completed from the test itself, for reporting purposes.  Such errors would simply not count towards statistics, but would display nevertheless.  The test, then, would not necessarily fail (unless it did originally), but the test run would fail.
This could be significantly disruptive to the reporting system.  Simply swapping a reporter out for another should not change the results!


Determine, by way of async hooks or otherwise, when a test is truly ""complete"".  Don't record the test result until there are no further tasks in the queue.
Difficult.  May slow down some tests significantly.  Would need to cancel the timeout when done() is called (or whatever); might want to record the delta between when the test finishes and when the test's tasks complete.  Consuming async hooks / zones / realms etc. could either be great (eliminate many edge and corner cases) or terrible (increased complexity and black magic).


There's no end to problems from these types of errors.  They shatter Mocha's assumptions about the current state of things; Mocha is trying to run tests serially, after all.  Test B should never seem to fail because of something Test A did; and even so, we should know that it was Test A's fault.

Here's a philosophical question:
Can Mocha rely on the user to tell Mocha when a test completes, and how it completed?",boneskull,MEMBER,2018-01-29 05:08:40+00:00,False,,,,3,4,2018-03-01 15:50:54+00:00,31.45,Nokel81,NONE,0,0,0,2,"['help wanted', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3226,Errors after test completion are swallowed,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Sometimes tests are written incorrectly and throw errors after they're complete.  This applies to all three of Mocha's test forms (sync, promise, callback).  If you write this sort of code in a normal Node program then the errors usually bubble up and kill the Node event loop, an error message is printed, and the process exits with a non-zero code.  However when run with Mocha these errors are completely swallowed and never appear anywhere, and the process exits with code 0.
Obviously these tests are written badly, but I would expect Mocha to at least exit with an error code if a developer makes this sort of mistake!  I can see how it may be difficult or impossible for Mocha to figure out which test caused the error, but it shouldn't just swallow the error completely.
Steps to Reproduce
describe('error after test complete', function() {

    it('sync', function() {
        setImmediate(() => {
            throw new Error('oops');
        });
    });

    it('promise', function() {
        setTimeout(() => {
            throw new Error('oops');
        }, 1000);
        return Promise.resolve();
    });

    it('callback', function(done) {
        setImmediate(() => {
            done();
            throw new Error('oops');
        });
    });
});
Expected behavior:
At minimum Mocha executable should fail with a non-zero error code and print out some sort of error message.  Ideally Mocha would also be able to associate the error with the test that caused it, but I realize that may not be possible.
Actual behavior:
Tests pass, Mocha exits with code zero.
  error after test complete
    ✓ sync
    ✓ promise
    ✓ callback


  3 passing (16ms)

Reproduces how often: 100%
Versions
Tested with Mocha 5.0

The output of mocha --version and node node_modules/.bin/mocha --version: 5.0.0
The output of node --version: v8.9.3
The version and architecture of your operating system: Ubuntu 16.04, x86 64
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): n/a
Any other third party Mocha related modules (with versions): n/a
The code transpiler being used: none",rpaterson,NONE,2018-01-29 20:15:43+00:00,True,2018-03-05 21:44:08+00:00,35.06,,3,3,2018-01-29 22:21:24+00:00,0.09,rpaterson,NONE,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3227,"with electron -- app.on('ready', createWindow) -- failure because app is undefined","Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
With Electron, testing with mocha fails at:
app.on('ready', createWindow)

And gives the error message (along with a traceback not necessary here):
TypeError: Cannot read property 'on' of undefined

If all app.on calls are commented out, essentially disabling Electron, Mocha works perfectly.
Steps to Reproduce

build an Electron app (a very simple one)
Run it to make sure that the Electron app works
Now run npm test (with ""test"" : ""mocha"" set in package.json)
Watch the test fail when 'app' is considered undefined, yet clearly isn't because Electron works.

Expected behavior:
I expected my tests to fail or succeed, not to receive an error on a piece of code I'm not testing, and which is already proven to work.
Actual behavior:
app is considered undefined by Mocha.
Reproduces how often:
100% of the time.
Versions

The output of mocha --version and node node_modules/.bin/mocha --version:
mocha --version : 5.0.0
'node node_modules/.bin/mocha --version' : (doens't work in Windows Powershell, possibly a separate bug)
The output of node --version: 8.9.4
The version and architecture of your operating system: Microsoft Windows 10 Pro, Version 10.0.16299 Build 16299, x64
Your shell (bash, zsh, PowerShell, cmd, etc.): Powershell
Your browser and version (if running browser tests): not running browser tests
Any other third party Mocha related modules (with versions):
The code transpiler being used:",NonCreature0714,NONE,2018-01-31 05:43:00+00:00,True,2018-02-01 19:40:33+00:00,1.58,,2,2,2018-02-01 14:47:37+00:00,1.38,Bamieh,MEMBER,1,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3228,SyntaxError: Unexpected token import,"(function (exports, require, module, __filename, __dirname) { import  ""mocha"";
^^^^^^
SyntaxError: Unexpected token import
at createScript (vm.js:80:10)
at Object.runInThisContext (vm.js:139:10)
at Module._compile (module.js:607:28)
at Object.Module._extensions..js (module.js:654:10)
at Module.load (module.js:556:32)
at tryModuleLoad (module.js:499:12)
at Function.Module._load (module.js:491:3)
at Module.require (module.js:587:17)
at require (internal/module.js:11:18)
at C:\Users\pendyar\Desktop\napi\Design\OpenAPI\napi-ec2\node_modules\mocha\lib\mocha.js:231:27
at Array.forEach ()
at Mocha.loadFiles (C:\Users\pendyar\Desktop\napi\Design\OpenAPI\napi-ec2\node_modules\mocha\lib\mocha.js:228:14)
at Mocha.run (C:\Users\pendyar\Desktop\napi\Design\OpenAPI\napi-ec2\node_modules\mocha\lib\mocha.js:536:10)
at Object. (C:\Users\pendyar\Desktop\napi\Design\OpenAPI\napi-ec2\node_modules\mocha\bin_mocha:573:18)
at Module._compile (module.js:643:30)
at Object.Module._extensions..js (module.js:654:10)
at Module.load (module.js:556:32)
at tryModuleLoad (module.js:499:12)
at Function.Module._load (module.js:491:3)
at Function.Module.runMain (module.js:684:10)
at startup (bootstrap_node.js:187:16)
at bootstrap_node.js:608:3",Revanth453,NONE,2018-01-31 19:09:15+00:00,True,2018-02-01 14:42:56+00:00,0.82,,4,4,2018-01-31 19:09:57+00:00,0.0,Revanth453,NONE,1,0,0,3,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3229,object diff gets stuck in infinite loop,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha's Object printer gets stuck in an infinite loop for some objects with circular references.
Steps to Reproduce
This gist is a git repo that can be checked out and ran to reproduce the issue:
https://gist.github.com/chriseppstein/1060367f3ffe3615a1aaf33b5dfd7fac
Expected behavior:  object diffs are produced and circular references are marked with [circular] in the output.
Actual behavior: Error report is never returned because an infinite loop occurs eventually crashing with an out of memory error.
Reproduces how often: Every time.
Versions

The output of mocha --version: not installed.

and node node_modules/.bin/mocha --version: 5.0.0


The output of node --version: v8.1.3
The version and architecture of your operating system: OSX 10.12.6
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): none.
The code transpiler being used: None.",chriseppstein,NONE,2018-02-01 20:38:27+00:00,True,2018-02-08 07:06:38+00:00,6.44,,2,1,2018-02-08 07:06:38+00:00,6.44,boneskull,MEMBER,1,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3231,Nyan Reporter has Weird Output in Travis CI,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha. (I have no control of this)

Description

The Nyan runner's output is a bit strange in Travis CI (see screenshot).
Steps to Reproduce

Expected behavior: Test runner outputs as it does in the console
Actual behavior: Lots of newlines output
Reproduces how often: 100%
Versions

""mocha"": ""^5.0.0""
node v8.9.4
Additional Information",roryhardy,NONE,2018-02-05 04:49:25+00:00,True,2018-02-06 05:44:22+00:00,1.04,,2,2,2018-02-05 09:10:25+00:00,0.18,outsideris,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3232,"how to add some attributes in the testsuite, like owner","I want to add owner attribute in testsuite, and display in xml report, how to do it?",luoxi001713,NONE,2018-02-06 07:47:08+00:00,True,2018-02-08 07:04:59+00:00,1.97,,2,1,2018-02-08 07:04:59+00:00,1.97,boneskull,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3235,Mocha 5.0.0 won't precompile using Babel,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I can't seem to get mocha to work with babel. I get an unexpected token import issue.
./node_modules/.bin/mocha --compilers js:babel-core/register test/actions.spec.js
/Users/bschmeisser/projects/cupcake-pgp/src/actions.js:1
(function (exports, require, module, __filename, __dirname) { import jetpack from 'fs-jetpack';
                                                              ^^^^^^

SyntaxError: Unexpected token import

Steps to Reproduce
git clone git@github.com:blainesch/cupcake-pgp.git
cd cupcake-pgp
npm install
./node_modules/.bin/mocha --compilers js:babel-core/register test/actions.spec.js

Expected behavior: Run my tests
Actual behavior: Didn't run my tests
Reproduces how often: 100%
Versions

Mocha: 5.0.0
Node v8.9.0
NPM 5.5.1
babel-core 6.24.1
babel-loader 7.1.2",blainesch,NONE,2018-02-07 20:47:07+00:00,True,2018-02-08 07:03:46+00:00,0.43,,2,3,2018-02-07 20:50:55+00:00,0.0,blainesch,NONE,1,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3237,Mocha fails on travis because of strict mode,"Hi,
I use mocha in most of my libs and got an error recently:
> mocha tests/*.js
/home/travis/build/infusion/BitSet.js/node_modules/mocha/bin/mocha:10
const spawn = require('child_process').spawn;
^^^^^
SyntaxError: Use of const in strict mode.
    at exports.runInThisContext (vm.js:73:16)
    at Module._compile (module.js:443:25)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:501:10)
    at startup (node.js:129:16)
    at node.js:814:3
npm ERR! Test failed.  See above for more details.
The command ""npm test"" exited with 1.
Done. Your build exited with 1.

Is this a bug or do I have to do something to fix that?
Thanks, Robert",infusion,NONE,2018-02-11 18:35:41+00:00,True,2018-02-11 18:54:07+00:00,0.01,,5,7,2018-02-11 18:51:21+00:00,0.01,ORESoftware,NONE,0,0,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3240,Test suite failing with citgm,"Seems to be something to do with the way you use node-gyp. Doesn't seem to matter which version of node or npm... but I haven't dug in too much yet
to repro
npm i -g citgm
citgm -v verbose mocha",MylesBorins,NONE,2018-02-12 07:29:26+00:00,True,2018-03-01 05:28:29+00:00,16.92,,4,4,2018-02-12 16:50:36+00:00,0.39,Bamieh,MEMBER,2,0,0,1,"['node.js', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3245,Switching from --compilers js:babel-core/register to --require babel-core/register throws SyntaxError,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
With this script in npm test: (before upgrading mocha)
cross-env NODE_ENV=test mocha --reporter=min --no-colors --compilers js:babel-core/register --require babel-polyfill --require ignore-styles --require ""test/helper.js"" ""tools/**/*.spec.js"" ""src/**/*.spec.js""

Everything works fine, the code is transpiled correctly and tested.
With this code in npm test: (after upgrading mocha to 5*)
cross-env NODE_ENV=test mocha --reporter=min --no-colors --require babel-core/register --require babel-polyfill --require ignore-styles --require ""test/helper.js"" ""tools/**/*.spec.js"" ""src/**/*.spec.js""

I get this error:
⚡ user@machine  /project/path   speed-build  npm test

> project@1.1.1 test /project/path
> cross-env NODE_ENV=test mocha --reporter=min --no-colors --require babel-core/register --require babel-polyfill --require ignore-styles --require ""test/helper.js"" ""tools/**/*.spec.js"" ""src/**/*.spec.js""

/project/path/node_modules/fetch-mock/src/lib/fetch-handler.js:57
FetchMock.generateResponse = async function (response, url, opts) {
                                  ^^^^^^^^

SyntaxError: Unexpected token function
   at createScript (vm.js:56:10)
   at Object.runInThisContext (vm.js:97:10)
   at Module._compile (module.js:542:28)
   at Module._extensions..js (module.js:579:10)
   at Object.require.extensions.(anonymous function) [as .js] (/project/path/node_modules/babel-register/lib/node.js:152:7)
   at Module.load (module.js:487:32)
   at tryModuleLoad (module.js:446:12)
   at Function.Module._load (module.js:438:3)
   at Module.require (module.js:497:17)
   at require (internal/module.js:20:19)
   at Object.<anonymous> (/project/path/node_modules/fetch-mock/src/lib/index.js:2:22)
   at Module._compile (module.js:570:32)
   at Module._extensions..js (module.js:579:10)
   at Object.require.extensions.(anonymous function) [as .js] (/project/path/node_modules/babel-register/lib/node.js:152:7)
   at Module.load (module.js:487:32)
   at tryModuleLoad (module.js:446:12)
   at Function.Module._load (module.js:438:3)
   at Module.require (module.js:497:17)
   at require (internal/module.js:20:19)
   at Object.<anonymous> (/project/path/node_modules/fetch-mock/src/server.js:7:19)
   at Module._compile (module.js:570:32)
   at Module._extensions..js (module.js:579:10)
   at Object.require.extensions.(anonymous function) [as .js] (/project/path/node_modules/babel-register/lib/node.js:152:7)
   at Module.load (module.js:487:32)
   at tryModuleLoad (module.js:446:12)
   at Function.Module._load (module.js:438:3)
   at Module.require (module.js:497:17)
   at require (internal/module.js:20:19)
   at Object.<anonymous> (/project/path/src/client/lib/__tests__/parseResponse.spec.js:2:1)
   at Module._compile (module.js:570:32)
   at loader (/project/path/node_modules/babel-register/lib/node.js:144:5)
   at Object.require.extensions.(anonymous function) [as .js] (/project/path/node_modules/babel-register/lib/node.js:154:7)
   at Module.load (module.js:487:32)
   at tryModuleLoad (module.js:446:12)
   at Function.Module._load (module.js:438:3)
   at Module.require (module.js:497:17)
   at require (internal/module.js:20:19)
   at /project/path/node_modules/mocha/lib/mocha.js:231:27
   at Array.forEach (native)
   at Mocha.loadFiles (/project/path/node_modules/mocha/lib/mocha.js:228:14)
   at Mocha.run (/project/path/node_modules/mocha/lib/mocha.js:536:10)
   at Object.<anonymous> (/project/path/node_modules/mocha/bin/_mocha:582:18)
   at Module._compile (module.js:570:32)
   at Object.Module._extensions..js (module.js:579:10)
   at Module.load (module.js:487:32)
   at tryModuleLoad (module.js:446:12)
   at Function.Module._load (module.js:438:3)
   at Module.runMain (module.js:604:10)
   at run (bootstrap_node.js:389:7)
   at startup (bootstrap_node.js:149:9)
   at bootstrap_node.js:504:3
npm ERR! Test failed.  See above for more details.

Steps to Reproduce
Upgrade mocha from 3* to 5*, update test scripts as mentioned above.
Expected behavior: [What you expect to happen]
Tests to run as before the upgrade
Actual behavior: [What actually happens]
SyntaxError is thrown
Reproduces how often: [What percentage of the time does it reproduce?]
Every time after upgrade to 5*
Versions
⚡ user@machine  /project/path   speed-build  node node_modules/.bin/mocha --version
5.0.1
⚡ user@machine  /project/path   speed-build  mocha --version
5.0.1
⚡ user@machine  /project/path   speed-build  node --version
v6.11.2


Ubuntu Bash on Windows 10",phun-ky,NONE,2018-02-19 10:07:51+00:00,True,2018-02-20 14:22:59+00:00,1.18,,2,4,2018-02-19 11:51:41+00:00,0.07,Bamieh,MEMBER,1,0,0,1,"['question', 'unconfirmed-bug']",False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3246,"Browser opens with 'data:,' on test fails","Whenever a test case fails, my browser window closes and a new browser opens with a blank page and 'data:,' in the URL section for the next test case, causing rest of the cases in the suite to fail. In the before hook, i want to check the state of the previous test case and if the previous test case is a failed one, i want to navigate to url where it failed and continue with the next test cases.
This is my code:
`
describe(""Login Page Test:"", function() {
before(function(client, done) {
client.url(inputs.utils.URL.input, function() {
done();
});
});
after(function(client, done) {
client.end(function() {
done();
});
});
beforeEach(function(client, done) {
done();
});
afterEach(function(client, done) {
done();
});
it(""Should redirect user to the dashboard page on logging in with valid credentials"", function(browser, done) {
login_utils(browser).login(
""inputs.login.TC_01.loginID"",
inputs.login.TC_01.password
);
login_utils(browser).confirmLogin();
});
it(""Should open the User Dropdown click the Logout Button and redirect to Login Page"", function(browser) {
dashboard_utils(browser).userDropDown();
dashboard_utils(browser).clickUserDropDownOption(selectors.logoutButton);
login_utils(browser).confirmLogout();
});
it(""Should stay on login page and should display an error message for invalid Username or email"", function(browser) {
login_utils(browser).login(
inputs.login.TC_02.loginID,
inputs.login.TC_02.password
);
login_utils(browser).confirmUnsuccessfullLogin();
});
it(""Should stay on login page and should display an error message for invalid password"", function(browser) {
login_utils(browser).login(
inputs.login.TC_03.loginID,
inputs.login.TC_03.password
);
login_utils(browser).confirmUnsuccessfullLogin();
});
it(""Should stay on login page and should display an error message for invalid Username and password"", function(browser) {
login_utils(browser).login(inputs.login.TC_04.loginID, inputs.login.TC_04.password);
login_utils(browser).confirmUnsuccessfullLogin();
});
it(""Should stay on login page and should display an error message for empty credentials"", function(browser) {
login_utils(browser).login(inputs.login.TC_05.loginID, (inputs.login.TC_05.password == ""null"") ? """":inputs.login.TC_05.password);
login_utils(browser).confirmEmptyCreds();
});
it(""Should stay on login page and should display an input error message for wrong email format"", function(browser) {
login_utils(browser).login(inputs.login.TC_06.loginID, inputs.login.TC_06.password);
login_utils(browser).confirmInputError();
});
});
`",Visakeswaran,NONE,2018-02-20 09:35:27+00:00,True,2018-03-01 05:28:49+00:00,8.83,,3,1,2018-02-20 15:52:16+00:00,0.26,Bamieh,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3247,How do you add a message in a test suite?,"Background:
I am running a customize third-party mocha reporter like this:
var customReporter = function (runner) {  // private method
        
        runner.on('pass', function (test) {
            console.log('The following test has passed: '+test.title);
            console.log(test);
            testsPassed++;
            totalTests++;
        });
        
        runner.on('fail', function (test) {
            console.log('the following test has failed: '+test.title);
            testsFailed++;
            totalTests++;
        });
        
        runner.on('pending', function (test) {
                console.log('pending');
                pending.push(test);
        });
Is it possible to include in a describe, it block a message, which will be displayed when the tests are failing? The message is in my case the error message I get from the API call I'm testing. I wonder how I can pass it inside my tests to be visible in my reporter. I am using Chai for assertions.
    it('Checking firsName is valid', function (done) {
        var key = keyJson[0];
        expect(json.profiles[key][""firstName""]).to.not.equal("" "");
        done();
         //how to include the json here? 
    });",patrickptm,NONE,2018-02-20 11:06:11+00:00,True,2018-10-24 08:44:51+00:00,245.9,,3,5,2018-02-26 11:47:51+00:00,6.03,patrickptm,NONE,1,0,0,1,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3248,"browser-stdout has an invalid license, which transitively makes mocha a problematic dependency","Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

Description
mocha depends on the browser-stdout package, which is problematic, as it does not have proper licensing. It only mentions ICS in the package.json, but that's not satisfactory even by the license itself - see kumavis/browser-stdout#3. The maintainer doesn't seem to be attentive to this problem - kumavis/browser-stdout#4 This transitively makes mocha a problematic dependency as well.
Steps to Reproduce

Inspect the mocha dependency tree for incorrectly licensed packages. Every package should have a license name, full license text, and a copyright notice with a copyright holder.
Expected behavior: [What you expect to happen]
The mocha package depends only on packages with correct licensing.
Actual behavior: [What actually happens]
The browser-stdout package is in the dependency tree as a direct 1st level dependency, and it is not properly licensed. Just license name, but no full license text, no copyright notice with a copyright holder.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
mocha@5.0.1",honzajavorek,CONTRIBUTOR,2018-02-21 16:11:44+00:00,True,2018-03-01 19:22:37+00:00,8.13,,3,4,2018-02-22 09:50:41+00:00,0.74,Bamieh,MEMBER,1,1,0,1,"['browser', 'chore', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3249,Mocha tests pass the first time when running on watch mode but get a timeout error after all subsequent runs.,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When I run mocha on watch mode, all tests will pass initially. When an unrelated test file is saved, thus causing mocha to run again, I will get the  Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves. on one of my tests that purposely returns an error.
Steps to Reproduce
This test will pass on the first run by mocha and on any run after the first it will continuously fail.
      const data = {//data}

      return chai.request(server)
        .post(`/api/v1/service-requests`)
        .send(data)
        .catch((err) => {
          expect(err).to.have.status(404);
          expect(err.response.body.message).to.equal('Time frame is not available');
        })
    })

I'm basically making a post request on an express backend. This specific test causes an error to be thrown and then the express error handler sends over the error in a JSON format.
Here is the route in express
router.post('/', function (req, res, next) {
 newServiceRequest(req.body)
    .then((serviceRequest) => {
      res.status(200).json({ serviceRequest });
    })
    .catch((error) => {
      error.status = 404;
      next(error);
    });
});

and here is the error handler that kicks in when next is called with the error:
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.json({
    message: err.message.split(',').join(', '),
    error: err
  });
});

Now I've tested that the error handling works fine when I test the endpoint manually in both dev and test environments. Mocha also sees that it's valid on the first run, but any other run afterwards throws the dreaded timeout error. Not sure where to go from here.
Expected behavior: Tests should pass on all subsequent passes that don't affect the test.
Actual behavior: The suite fails with one test not passing.
Reproduces how often: Every time mocha is used on watch mode.
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 3.5.3
The output of node --version: v8.7.0
The version and architecture of your operating system: macOS 10.13.2
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",cubadomingo,NONE,2018-02-23 00:06:48+00:00,True,2018-07-19 19:08:24+00:00,146.79,,2,2,2018-03-01 01:27:00+00:00,6.06,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3250,Option to display describe times,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
This is a new feature request. Adding the --describe-duration option. This would print out at the end of every describe the total duration it took (including all before and after hooks).
This is very useful if trying to benchmark mocha for purposes of running the parts of a test suite in parallel on different nodes.",Nokel81,NONE,2018-02-23 19:34:28+00:00,True,2018-03-01 05:25:17+00:00,5.41,,3,17,2018-02-24 01:24:07+00:00,0.24,ORESoftware,NONE,1,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3252,Mocha file 404 test js front end,"I'm trying to implement this tutorial by the way https://blog.codeship.com/mocha-js-chai-sinon-frontend-javascript-code-testing-tutorial/
https://github.com/mochajs/mocha/raw/master/mocha.js
but in file mocha.js i found a 404... Can someone help me and provide this file to put on front end...
I couldn't found the right one as equal to work on it.
Many thanks Carlos Vieira",ShintaroNippon,NONE,2018-02-26 17:15:27+00:00,True,2018-03-01 05:15:33+00:00,2.5,,3,5,2018-02-27 12:13:40+00:00,0.79,outsideris,MEMBER,2,0,0,1,['faq'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3254,Provide owner information for failing tests,"It would be neat to have an owner entity associated with each test. When the result of all the passing and failing test is printed to the console, if the owner entity could also be mentioned in the failure details it would be really useful.
For teams with a lot of engineers and a lot of tests having the feature would be very useful.
with every it() block the owner property (optional: to make this change non breaking) could be specified.",vreddi,NONE,2018-02-28 01:24:33+00:00,True,2018-03-01 05:27:00+00:00,1.17,,2,1,2018-03-01 05:27:00+00:00,1.17,boneskull,MEMBER,1,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3256,refactor statistics,"Stat gathering (fails, passes, errors, duration) is too closely coupled to the reporter.  The reporter shouldn't be the single source of truth for this information, yet it is.  Statistics should be queried by the reporters instead of just dumped into the base reporter.  The result may be as simple as an abstraction between the runner and reporter.
This makes it difficult to modify the stats we gather, or how we gather them.
related: #3223, #3250",boneskull,MEMBER,2018-03-01 05:25:01+00:00,True,2018-12-04 11:02:14+00:00,278.23,,3,3,2018-03-01 11:19:44+00:00,0.25,Nokel81,NONE,1,0,0,1,"['help wanted', 'refactor']",False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3259,Unicode characters don't render correctly in console.log,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: windows commandline displays A 🡒 B
Actual behavior: windows commandline displays A �� B
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
'mocha' is not recognized as an internal or external command,
operable program or batch file.
The output of node --version:
v8.4.0
The version and architecture of your operating system:
Windows 10 x64
Your shell (bash, zsh, PowerShell, cmd, etc.):
Windows commandline (cmd.exe)
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:
babel ^6.0.0

Additional Information",generateui,NONE,2018-03-01 15:46:18+00:00,True,2018-03-05 22:14:39+00:00,4.27,,3,3,2018-03-05 22:14:39+00:00,4.27,boneskull,MEMBER,1,0,0,2,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3260,better test harness for reporters,There's a lot of duplicated code in the reporter tests.  Let's extract that into helper modules/functions/etc.,boneskull,MEMBER,2018-03-01 19:25:06+00:00,True,2018-04-01 04:44:37+00:00,30.39,,3,2,2018-03-03 22:30:56+00:00,2.13,jMuzsik,CONTRIBUTOR,1,1,0,0,"['good-first-issue', 'help wanted', 'refactor']",False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3261,[feature] allow failing tests ,"I'd really like to make it easy for people to submit failing tests as pull requests to my projects and ava has a really good story around this.  I'd like to implement a similar feature in mocha.
This should give a pretty good idea of what I'm thinking:
https://github.com/mlrawlings/it-fails
I'm going to go ahead and start using it-fails, but...

it's hacky
overwrites a lot of the mocha internals
the built in reporters don't have knowledge of expected failures (though this is mostly fine)

If it were implemented in core, it could be much cleaner.
Let me know if a PR for this would be accepted and we can discuss the approach a bit more.  I could probably do a bit of cleanup on the stats (#3256) at the same time.",mlrawlings,NONE,2018-03-03 23:14:59+00:00,True,2018-03-05 22:05:55+00:00,1.95,,2,1,2018-03-05 22:05:55+00:00,1.95,boneskull,MEMBER,1,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3263,add FOSSA check to CI,"FOSSA license scanning is currently a manual process, which could be automated.  Looks straightforward to automate.",boneskull,MEMBER,2018-03-05 23:44:28+00:00,True,2018-03-18 06:07:16+00:00,12.27,,2,1,2018-03-18 06:07:16+00:00,12.27,boneskull,MEMBER,1,0,0,0,"['future', 'qa']",False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3265,"""utils.files is not a function"" (mocha: 5.0.2)","Description
Hey, i've just upgraded to the latest mocha version 5.0.2 and I now start to see a ""utils.files is not a function"" error when running in watch mode with passing a glob path. Seems this commit ec8901a removed the function which is still used in https://github.com/mochajs/mocha/blob/master/bin/_mocha#L532
Steps to Reproduce
NODE_ENV=test mocha './test/**/*.js'
Expected behavior:
it should execute my tests as before.
Actual behavior:
it crashes all the time
> NODE_ENV=test mocha './test/**/*.js' ""--watch""

/opt/MY-PACKAGE/node_modules/mocha/bin/_mocha:532
  const watchFiles = utils.files(cwd, [ 'js' ].concat(program.watchExtensions));
                           ^

TypeError: utils.files is not a function
    at Object.<anonymous> (/opt/MY-PACKAGE/node_modules/mocha/bin/_mocha:532:28)
    at Module._compile (module.js:643:30)
    at Object.Module._extensions..js (module.js:654:10)
    at Module.load (module.js:556:32)
    at tryModuleLoad (module.js:499:12)
    at Function.Module._load (module.js:491:3)
    at Function.Module.runMain (module.js:684:10)
    at startup (bootstrap_node.js:187:16)
    at bootstrap_node.js:608:3
Versions

5.0.2
shell: zsh
The code transpiler being used: babel",5c077yP,NONE,2018-03-06 11:00:20+00:00,True,2018-03-07 07:28:18+00:00,0.85,,7,8,2018-03-06 12:09:57+00:00,0.05,remolueoend,NONE,1,0,0,5,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3269,`--watch` flag causes crash starting with Mocha 5.0.2,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha 5.0.2 - 5.0.3 crashes when using --watch flag with the following error:

Version 5.0.1 works fine.
Steps to Reproduce
I created a minimal demo which reproduces: https://github.com/ip/mocha_bug_demo
Tried with both Yarn and NPM.
Expected behavior: It works
Actual behavior: It crashes
Reproduces how often: 100% of time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.0.2 - 5.0.3
The output of node --version: v8.9.4
The version and architecture of your operating system: macOS High Sierra 10.13.3 (17D47)
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh 5.3 (x86_64-apple-darwin17.0)
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:",ip,NONE,2018-03-07 16:55:42+00:00,True,2018-03-07 17:38:06+00:00,0.03,,2,1,2018-03-07 17:38:06+00:00,0.03,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3270,"""watch"" functionality needs tests","We have no integration tests around the ""watch"" functionality (see #3265).
Why?  Because it's a pain.  You'd have to run a test against some files, then modify a file from the test, then manually kill the child process and assert its output is as expected.  Normally we like to use the JSON reporter internally, but this test won't print a single JSON file to STDOUT like the others--it would return multiple files to STDOUT.  So we'll have to split up the output and make assertions on both.",boneskull,MEMBER,2018-03-07 17:42:49+00:00,True,2018-06-26 17:57:41+00:00,111.01,,2,4,2018-03-07 17:43:46+00:00,0.0,boneskull,MEMBER,2,0,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3271,failing Error: timeout of 2000ms exceeded,"I had this working a few months ago, I think something updated (maybe) and now it's not working,
my ""/todos"" route work, infact I can call done() after the if statement in the end callback and it'll update the database, but when I add a my mongodb query to verfiy it has been added, it doesn't update my database and it gives me
Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.

describe('POST /todos', () => {
  it('should create a new todo', (done) => {
    var text = 'Test todo text';

    request(app)
      .post('/todos')
      .send({text})
      .expect(200)
      .expect((res) => {
        expect(res.body.text).toBe(text);
      })

      .end((err, res) => {
        if (err) {
          return done(err);
        }
        
        Todo.find({text}).then((todos) => {
          expect(todos.length).toBe(1);
          expect(todos[0].text).toBe(text);
          done();
        }).catch((e) => done(e));
      })
  });
});",jeffWalt,NONE,2018-03-07 19:55:28+00:00,True,2018-03-08 05:26:57+00:00,0.4,,2,1,2018-03-08 05:26:57+00:00,0.4,boneskull,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3275,watch always watches .js,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

This is not an issue but feature request.
Watch mode always watches for "".js"" files even when I specify --watch-extensions to be ""ts,tsx"". Is it possible to change the behaviour to strictly watch only the specified extensions?",tomitrescak,NONE,2018-03-08 22:08:57+00:00,True,2018-03-22 22:51:58+00:00,14.03,,4,5,2018-03-08 22:14:16+00:00,0.0,tomitrescak,NONE,3,0,0,1,"['feature', 'help wanted', 'node.js']",False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3277,Publishing Passed Test Cases Information to report,"Description
Hi,
I am trying out Mocha for a project of mine, to test a REST API.
Is there any way by which I can capture the headers and payload and response information for a passed test case and publish it in my report.
I am using the JUnit reporter.
I searched for issues related to this but couldn't find any leads.
Any help in this regard would be appreciated.
Thanks!",YogeeshKapila,NONE,2018-03-09 22:47:40+00:00,True,2018-03-18 05:59:05+00:00,8.3,,4,2,2018-03-12 13:17:47+00:00,2.6,Bamieh,MEMBER,2,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3279,Mocha error while running Ethereum Smart Contracts tests.,"Hi all.
I'm opening this issue in order to try to fix some annoying problems I'm having while running ethereum smart contracts tests.
Here is my Inbox.test.js:
`{
const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
const web3 = new Web3(ganache.provider());
//const { interface, bytecode } = require('../compile');
let accounts;
let inbox;
beforeEach(async () => {
accounts = await web3.eth.getAccounts();
inbox = await new web3.eth.Contract(JSON.parse(interface))
.deploy({ data: bytecode, arguments:['Hi there!']})
.send({ from: accounts[0], gas:'1000000' })
});
describe('Inbox', ()=>{
it('deploys a contract', () => {
assert.ok(inbox.options.address);

});
})
}`
And here it is my package.json file:
{ ""name"": ""inbox"", ""version"": ""1.0.0"", ""description"": """", ""main"": ""index.js"", ""scripts"": { ""test"": ""mocha"" }, ""author"": """", ""license"": ""ISC"", ""dependencies"": { ""ganache-cli"": ""^6.1.0"", ""loadash"": ""^1.0.0"", ""mocha"": ""^4.0.1"", ""node-modules"": ""^1.0.1"", ""solc"": ""^0.4.19"", ""web3"": ""^1.0.0-beta.26"" } }
When I run:
npm run test //I get the following console output:
root@XXXXXX:/home/pathtoproject/inbox# npm run test
inbox@1.0.0 test /pathtoproject/inbox
mocha
/pathtoproject/inbox/test/Inbox.test.js:6
const { interface, bytecode } = require('../compile');
^
SyntaxError: Unexpected token {
at exports.runInThisContext (vm.js:53:16)
at Module._compile (module.js:374:25)
at Object.Module._extensions..js (module.js:417:10)
at Module.load (module.js:344:32)
at Function.Module._load (module.js:301:12)
at Module.require (module.js:354:17)
at require (internal/module.js:12:17)
at /usr/lib/nodejs/mocha/lib/mocha.js:172:27
at Array.forEach (native)
at Mocha.loadFiles (/usr/lib/nodejs/mocha/lib/mocha.js:169:14)
at Mocha.run (/usr/lib/nodejs/mocha/lib/mocha.js:356:31)
at Object. (/usr/lib/nodejs/mocha/bin/_mocha:366:16)
at Module._compile (module.js:410:26)
at Object.Module._extensions..js (module.js:417:10)
at Module.load (module.js:344:32)
at Function.Module._load (module.js:301:12)
at Function.Module.runMain (module.js:442:10)
at startup (node.js:136:18)
at node.js:966:3
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! inbox@1.0.0 test: mocha
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the inbox@1.0.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
npm ERR! A complete log of this run can be found in:
npm ERR! /root/.npm/_logs/2018-03-11T11_15_11_436Z-debug.log
Then if I try to delete the line that gives problems this happens at running npm run test:
inbox@1.0.0 test /pathtoproject/inbox
mocha
/home/pathtoproject/inbox/test/Inbox.test.js:8
let accounts;
^^^
SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outsidestrict mode
at exports.runInThisContext (vm.js:53:16)
at Module._compile (module.js:374:25)
at Object.Module._extensions..js (module.js:417:10)
at Module.load (module.js:344:32)
at Function.Module._load (module.js:301:12)
at Module.require (module.js:354:17)
at require (internal/module.js:12:17)
at /usr/lib/nodejs/mocha/lib/mocha.js:172:27
at Array.forEach (native)
at Mocha.loadFiles (/usr/lib/nodejs/mocha/lib/mocha.js:169:14)
at Mocha.run (/usr/lib/nodejs/mocha/lib/mocha.js:356:31)
at Object. (/usr/lib/nodejs/mocha/bin/_mocha:366:16)
at Module._compile (module.js:410:26)
at Object.Module._extensions..js (module.js:417:10)
at Module.load (module.js:344:32)
at Function.Module._load (module.js:301:12)
at Function.Module.runMain (module.js:442:10)
at startup (node.js:136:18)
at node.js:966:3
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! inbox@1.0.0 test: mocha
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the inbox@1.0.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
npm ERR! A complete log of this run can be found in:
npm ERR! /home/XxxxxX/.npm/_logs/2018-03-11T11_35_19_312Z-debug.log
Versioning and other stuff:
mocha --version --> 1.20.1
npm --version --> 5.6.0
node --version --> v.9.8.0
So anyone has any idea of what's happening? I've tried to reinstall node and npm, clear npm cache etc and nothing seems to work.
Thanks to all.",CPerezz,NONE,2018-03-11 20:43:00+00:00,True,2018-03-18 06:05:03+00:00,6.39,,7,10,2018-03-12 02:58:25+00:00,0.26,outsideris,MEMBER,3,0,0,2,"['integration', 'needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3280,"Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if retruning a promise, ensure it resolves.","describe('Github info', () => { 
	it.only('returns repo info from github', function(done) { 
		word.info(function(reply) { 
			console.log(reply);
			expect(reply.language).to.equal('JavaScript'); 
			expect(reply.watchers).to.equal(157); 
			console.log('RECEIVED'); 
			done(); 
		}); 
		console.log('HELLO'); 
	})
});
and this is my app.js code,
exports.info = function(callback) { 
	var https = require('https'); 
	var options = { 
		host: 'api.github.com', 
		path: '/repos/sayanee/build-podcast', 
		method: 'GET', headers: 
		{ 'User-Agent': 'sayanee' } 
	}; 
	var str = '';

https.request(options, function(response) { 
	response.on('data', function(data) { 
		str += data; 
	});
	 response.on('end', function() {
   callback(JSON.parse(str));
 })

 response.on('error', function(error) {
   console.log(error);
   callback();
 })    
})    .end();
};
formatted by boneskull",Pravee08,NONE,2018-03-12 08:45:47+00:00,True,2018-03-18 06:03:33+00:00,5.89,,3,2,2018-03-13 17:10:59+00:00,1.35,outsideris,MEMBER,2,0,0,0,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3283,adding top level before\after hooks from within describe callback ,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Is it possible to add a top level hook from within a describe callback?
Is there a way to modify the add_top_level_hook function below to achieve my desired behaviour?
Steps to Reproduce
function add_top_level_hook() {
  after('top level after', function() {
    console.log('top level after');
  });
};

describe('some suite', function() {

  add_top_level_hook();

  after('some suite after', function() {
    console.log('some suite after');
  });

  it('some test', function() {});
});

describe('some other suite', function() {

  after('some other suite after', function() {
    console.log('some other suite after');
  });

  it('some other test', function() {});
});
Desired behaviour: [What you expect to happen]
I would like the top level after to fire after hooks in some suite and some other suite
so that the output of running the code with mocha would be:
  some suite
    ✓ some test
some suite after

  some other suite
    ✓ some other test
some other suite after
top level after

Note that if we wrap the suites above with another describe, I would like the top level after to fire after the hooks of that parent suite as well.
Actual behavior: [What actually happens]
Currently I get the following output:
  some suite
    ✓ some test
top level after
some suite after

  some other suite
    ✓ some other test
some other suite after

Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
5.0.2
The output of node --version:
v8.9.4

Additional Information",adrian-gierakowski,NONE,2018-03-13 13:27:42+00:00,True,2018-03-14 12:57:47+00:00,0.98,,4,8,2018-03-13 14:42:01+00:00,0.05,patrickptm,NONE,1,0,0,3,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3284,Using Mocha Programmatically should support more than paths,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha's programmatic API currently only supports adding files via a path. The problem with this is that the developer might want to process the Javascript first. Although support for Streams would be the ideal, simply being able to evaluate strings via Mocha would be greatly appreciated.",Starmann,NONE,2018-03-16 14:32:33+00:00,False,,,,3,2,2018-03-18 06:04:29+00:00,1.65,boneskull,MEMBER,1,0,0,1,"['feature', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
3289,automate contributors list,"Ideally this would be done upon release, but otherwise triggered manually.
previously I had used git-authors to get the initial list--that's what .mailmap is for--but it required too much post-processing.",boneskull,MEMBER,2018-03-22 05:32:33+00:00,True,2018-04-04 05:28:40+00:00,13.0,,2,1,2018-04-02 12:59:27+00:00,11.31,tiantianloveyou,NONE,0,0,0,1,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3291,Mocha shows error in inner `before` function as error for outer `it`,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha shows error in inner before function as error for outer it, but this outer it passed successfully.
Steps to Reproduce
describe('Top-level describe', () => {

  it('Top-level it', () => { });

  describe('Nested describe', () => {
    before(() => {
      throw new Error();
    });

    it('Nested it', () => { });
  });
});

Expected behavior: Info about error in inner before statement for Nested describe
Actual behavior: Mocha shows this error:
  Top-level describe
    ✓ Top-level it
    Nested describe
      1) ""before all"" hook for ""Top-level it""

Reproduces how often: always
Versions


The output of mocha --version  - not installed
node node_modules/.bin/mocha --version: 5.0.5
The output of node --version: v8.10.0
The version and architecture of your operating system: Ubuntu 16.04 LTS 64 bit
Your shell (bash, zsh, PowerShell, cmd, etc.): bash",okachynskyy,NONE,2018-03-23 14:27:03+00:00,True,2019-01-28 18:55:51+00:00,311.19,,5,17,2018-03-23 17:19:22+00:00,0.12,boneskull,MEMBER,3,0,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3292,"investigate use of Travis-Ci jobs and stages, etc.","This is a beta feature on Travis-CI, but we could (potentially) leverage it to make it more obvious what's happening during each build in the matrix.
It may not be worth doing, either.  We don't have a bunch of packaging, deployment or artifact generation happening (though we have some).",boneskull,MEMBER,2018-03-23 17:12:02+00:00,True,2018-04-04 05:16:18+00:00,11.5,,3,2,2018-03-25 10:38:14+00:00,1.73,Bamieh,MEMBER,2,0,0,0,"['help wanted', 'nice-to-have', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3293,Passing data dynamically to Mocha,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Hey ya'll, I'm currently working on an automated grader that takes in a Github repo and then passes the content to the test files. I'm finding it difficult to programmatically send information to the file before using mocha.addFile(). What's the best approach for solving this?
I've looked at vm, but it doesn't allow variables to be passed into it. Only other solution I can think of is having to build a file and then destroy it after mocha tests are run, but that could also run into weird race conditions.
I was messing with the loadFiles method, but again, the vm doesn't allow me to pass in variables to it. So, I can't pass the dynamically generated object for the test file to use.
Steps to Reproduce

Create Mocha test file.
Have a file such as runMocha.js that will execute the Mocha test programmatically.
Have Mocha test file dynamically take data from object passed in before executing Mocha.run()

Expected behavior: [What you expect to happen]
I'd like the files to be able to take in data like function arguments.
Actual behavior: [What actually happens]
I guess the functionality doesn't exist?
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",OSP123,NONE,2018-03-24 18:35:05+00:00,True,2018-03-29 09:29:44+00:00,4.62,,3,10,2018-03-25 09:42:53+00:00,0.63,Bamieh,MEMBER,1,0,0,2,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3294,Wrong example,"this can't be used in arrow functions:
https://github.com/mochajs/mocha/blob/master/docs/index.md#arrow-functions",falsandtru,NONE,2018-03-26 20:53:37+00:00,True,2018-03-27 19:36:23+00:00,0.95,,3,3,2018-03-27 13:31:53+00:00,0.69,markowsiak,MEMBER,2,0,0,1,"['documentation', 'faq']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3296,Support per-test cleanup by calling `after` inside a test,"I have tests using sinon that have cleanup that must be called to avoid subsequent tests failing. Here's an example:
describe(""refactor"", () => {

	before(() => activate());

	it(""can extract simple code into a method"", async () => {
		const showInputBox = sinon.stub(vs.window, ""showInputBox"");
		showInputBox.resolves(""printHelloWorld"");

		await setTestContent(`
main() {
  print(""Hello, world!"");
}
		`);
		await (vs.commands.executeCommand(""_dart.performRefactor"", doc, rangeOf(""|print(\""Hello, world!\"");|""), ""EXTRACT_METHOD""));
		await ensureTestContent(`
main() {
  printHelloWorld();
}

void printHelloWorld() {
  print(""Hello, world!"");
}
		`);

		// TODO: This won't be restored if an error occurs
		showInputBox.restore();
	});
If the restore at the bottom doesn't get called, things break. This means when one test fails, it generally brings down the whole lot.
I can't put this cleanup in after or afterEach because it's specific to this test. I don't want to wrap another needless describe around each test. Wrapping in a try/finally adds yet another level of nesting and requires the variables be declared before the try (to be in scope for finally).
It would be nice if we could do per-test cleanup be calling after again inside a test. It could work a bit like defer:
describe(""refactor"", () => {

	before(() => activate());

	it(""can extract simple code into a method"", async () => {
		const showInputBox = sinon.stub(vs.window, ""showInputBox"");
		showInputBox.resolves(""printHelloWorld"");

		after(showInputBox.restore); // This will be called after this test, success or fail, and only once

		// SNIP
	});
Currently this seems to just execute at the end of the run (and if you call afterEach, it runs after every test from this one forwards).",DanTup,NONE,2018-03-28 12:05:14+00:00,True,2018-04-23 12:07:58+00:00,26.0,,4,9,2018-03-28 12:14:25+00:00,0.01,DanTup,NONE,2,0,0,2,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3297,Sponsors are incorrectly linked,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
On the README.md and the website the redirect links given for sponsors do not match the logo that is shown.
For example:
https://opencollective.com/mochajs/sponsor/0/avatar.jpg -> https://opencollective.com/mochajs/sponsor/0/website do not match.
This is clearly not an issue on mochas side but it shouldn't be used until it is fixed by opencollective
Steps to recreate
Click on 'yahoo' and it takes you to 'dont pay full'",gavinhenderson,NONE,2018-03-28 15:26:43+00:00,True,2018-04-04 16:56:18+00:00,7.06,,3,6,2018-03-29 18:10:12+00:00,1.11,outsideris,MEMBER,1,0,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3298,Programmatic Usage Freezes,"I'm currently using mocha as described here. However it seems that I can not execute the runner recursively. The program freezes instead of running the ""inner"" instance of Mocha.
Does the runner enforce a lock somehow?
Help is much appreciated! Thank you, L~",simlu,NONE,2018-03-30 04:05:46+00:00,True,2018-04-03 01:58:01+00:00,3.91,,2,3,2018-03-30 04:20:36+00:00,0.01,outsideris,MEMBER,1,0,0,1,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3300,browser unable to load latest node version,"i'm running my Mocha scripts via Browserify in browser but got the following error in browser's console:
""Uncaught Error: Sync-request requires node version 0.12 or later.  If you need to use it with an older version of node
you can npm install sync-request@2.2.0, which was the last version to support older versions of node.""
However installed nodejs's version on machine is  `v9.5.0'",abidrana7,NONE,2018-04-02 09:58:38+00:00,True,2018-08-14 17:40:01+00:00,134.32,,2,2,2018-04-02 17:28:25+00:00,0.31,outsideris,MEMBER,1,0,0,1,"['needs-mcve', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
3301,Warn if async function has a callback parameter,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha requires that if a callback parameter is passed to the function of a test or other hook. However, if the function is async then it isn't really expected to have a callback parameter and thus this is generally something that is wanted to be avoided. Since the outcome of this happening is a timeout error, which isn't very helpful, I propose that it should warn or at least the error of an async function that timeouts because of no done should be more descriptive.
Steps to Reproduce
code:
before(async function(done) {
    //no call to done()
});

Expected behavior: The before to finish after awaiting the function
Actual behavior: timout
Reproduces how often: everytime",Nokel81,NONE,2018-04-02 18:30:52+00:00,False,,,,2,0,,,,,0,0,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3303,"When using bail flag, before hook failures do not exit as failed ","Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When using the bail flag before hook failures do not exit the test as a failure.

Steps to Reproduce
sample test:
//index.js
const assert = require('assert');

describe('some test', () => {
    before(async () => {
        throw new Error('should die');
    });

    it('should not get here', () => {
        assert(false);
    });
});

command:
mocha --bail index.js

output:
  some test

  0 passing (6ms)

    1) ""before all"" hook

Although its hard to see here, the test is exiting with a 0 code.  You can see it better by running:
mocha --bail index.js && echo 'hello'

  some test

  0 passing (9ms)

    1) ""before all"" hook

hello

The echo 'hello' should never get hit but it does.
Similarly, running this without --bail works as expected, the process exits with a non-zero code:
mocha index.js && echo 'hello'

output:
  some test
    1) ""before all"" hook


  0 passing (7ms)
  1 failing

  1) some test
       ""before all"" hook:
     Error: should die
      at Context.<anonymous> (index.js:5:15)

Note: Regardless of before block structure this bug still occurs
const assert = require('assert');

describe('some test', function() {
    before(function() {
        throw new Error('should die');
    });

    it('should not get here', function() {
        assert(false);
    });
});
// still bad

Expected behavior: Test should fail if there is an error in before hook
Actual behavior: Test does not fail
Reproduces how often: 100%
Versions
mocha v5.0.5 global and local (tested version 4 through 5 and 5.0.5 seems to be the only affected version)
macOS
zsh
Additional Information

Related to: #3096",marcusmotill,NONE,2018-04-03 21:08:27+00:00,True,2018-04-27 23:20:32+00:00,24.09,,4,2,2018-04-17 20:26:37+00:00,13.97,yjhuoh,NONE,0,0,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3304,Error on version 5.0.2. Mocha swallows some tests even though those tests are passed,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
All of the tests in my project used to be passed. And when I update to the version 5.0.2, and run the tests again, one-third of them are missed (from 350 tests downto 230 tests).
I have read this problem in the release note 5.0.2, I found the problem might be caused by this issue.
#3226
Steps to Reproduce
I create new react app, and then do nothing but just install mocha version 5.0.2 and chai for theses below steps.
The code is copied from the issue mentioned in release note 5.0.2, but I move the 'callback' test to the top and add a passed test in the bottom.
describe('error after test complete', function() {
  it('callback', function(done) {
    setImmediate(() => {
        done();
        throw new Error('oops');
    });
  });

  it('sync', function() {
      setImmediate(() => {
          throw new Error('oops');
      });
  });

  it('promise', function() {
      setTimeout(() => {
          throw new Error('oops');
      }, 1000);
      return Promise.resolve();
  });

  it('passed test', function() {
    assert(true === true);
  });
});

Expected behavior: [What you expect to happen]
I expect all tests should run.
Actual behavior: [What actually happens]
Take a look, only the callback test is failed, the sync test is passed even though it is failed while it runs individually. And the promise and passed tests are not checked.
error after test complete
    √ callback
    1) callback

  1 passing (15ms)
  1 failing

  1) error after test complete
       callback:
     Uncaught Error: oops
      at Immediate.setImmediate [as _onImmediate] (test\test.js:19:15)



    √ sync
npm ERR! Test failed.  See above for more details.

Reproduces how often: [What percentage of the time does it reproduce?]
It happened 100% then.
The funny thing is that in my project, sometimes the number of tests is changed, when I only add an enter or a space or move the position of the tests.
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.0.2
The output of node --version: 8.9.4
The version and architecture of your operating system: Windows 10 Enterprise, version 1709, OS Build 16299.15
Your shell (bash, zsh, PowerShell, cmd, etc.): PowerShell
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):

""chai"": ""^4.1.2"",
""react"": ""^16.3.1"",
""react-dom"": ""^16.3.1"",
""react-scripts"": ""1.1.4""


The code transpiler being used:

Additional Information",nvhungkt,NONE,2018-04-04 03:45:58+00:00,True,2018-04-07 17:13:34+00:00,3.56,,4,3,2018-04-04 16:00:44+00:00,0.51,outsideris,MEMBER,2,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3306,Not compatible with Node 8,"Prerequisites

Node 8.5.0
Don't use transpiler like Babel

Description
I am building a frontend boilerplate project where the main frameworks are mocha and webpack using Node8. Webpack 4 is working fine with Node 8 without any intervention of transpiler tools like babel. However, Mocha does not.
Steps to Reproduce

Switch to Node 8

nvm install 8.5.0 && nvm use 8.5.0

Write a unit-test case compatible with Node 8 (includes import keyword) :

import Component from './App.component.js';

describe('App component', () => {
  it('is named App', () => {
    expect(Component.component).toEqual('app')
  })
})


Run unit-tests using mocha

mocha --watch $(find  src -name '*.spec.js')
Actual Seeing a message in the STDERR:
(function (exports, require, module, __filename, __dirname) { import Component from './App.component.js';
                                                              ^^^^^^

SyntaxError: Unexpected token import
    at new Script (vm.js:51:7)
    at createScript (vm.js:138:10)
    at Object.runInThisContext (vm.js:199:10)
    at Module._compile (module.js:624:28)
    at Object.Module._extensions..js (module.js:671:10)
    at Module.load (module.js:573:32)
    at tryModuleLoad (module.js:513:12)
    at Function.Module._load (module.js:505:3)
    at Module.require (module.js:604:17)
    at require (internal/module.js:11:18)

Versions

The output of mocha --version and node node_modules/.bin/mocha --version:  5.0.5
The output of node --version:  v8.5.0
The version and architecture of your operating system: Darwin MacBook-Pro.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used: No and we require to not use it, but rather leverage Node 8 features ( import, export, async, await and so on)

Additional Information
No additional info.",abdennour,NONE,2018-04-04 06:53:31+00:00,True,2018-04-07 17:13:05+00:00,3.43,,3,2,2018-04-04 15:07:35+00:00,0.34,outsideris,MEMBER,2,0,0,0,"['faq', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3307,mocha.opt chai,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",ryuran,NONE,2018-04-04 07:24:02+00:00,True,2018-04-04 07:24:11+00:00,0.0,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3309,Test fails and passes at the same time....,"Description
Given an async test, if an unhandled exception is produced and the done callback is invoked, the test passes and fails at the same time (it counts both as failed and as passed)
Steps to Reproduce
Given the following test code:
describe('strange thing', function() {
    it('fails and passes at the same time.... WTF!', function(done) {
        setTimeout(() => { throw new Error(); });
        setTimeout(done);
    });
});
Expected behavior:
It should notify the test as failed but not as passed.
Actual behavior:
The reporter says the following:
strange thing
    1) fails and passes at the same time.... WTF!
    ✓ fails and passes at the same time.... WTF!


  1 passing (7ms)
  1 failing

  1) strange thing
       fails and passes at the same time.... WTF!:
     Uncaught 
  Error
      at Timeout.setTimeout [as _onTimeout] (lib/test.spec.js:3:34)

Reproduces how often:
100%
Versions
Mocha: 5.0.1
Node: 8.9.4
Linux Mint x64. Kernel: 4.4.0-116-generic
zsh",alfonso-presa,NONE,2018-04-04 14:35:27+00:00,True,2018-04-07 17:11:34+00:00,3.11,,2,1,2018-04-07 17:11:34+00:00,3.11,boneskull,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3314,Live Coding Examples,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha should provide live coding examples on its website to show both successfully executing constructs, and those that fail.  This would reduce the number of frequency asked questions and add depth to the documentation.",markowsiak,MEMBER,2018-04-06 14:19:37+00:00,False,,,,1,0,,,,,0,0,0,0,"['documentation', 'faq']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3319,React propTypes validation is not invoked during component unit tests,"I have a React component (using TypeScript):
import ...
import PropTypes from ""prop-types"";

export class PageSizeComponent extends React.PureComponent<PageSizeProps, PageSizeState> {

    public static defaultProps: Partial<PageSizeProps> = {
        pageSizes: [10, 20, 50, 100],
        initialPageSize: 10
    };

    static propTypes = {
        pageSizes: (props: PageSizeProps, propName: string, componentName: string) => {
            if (!props.pageSizes.length) {
                return new Error(""At least one option for page size must be supplied."");
            }
        }
    };
    ...
}

export default PageSizeComponent;

And a unit test testing the propTypes of the component:
describe(""PageSize"", () => {
    let component: ShallowWrapper;
    let error: SinonStub;

    beforeEach(() => {
        error = stub(console, ""error"").callsFake((args) => console.log(""console.error"", ...Array.from(arguments)));
        component = shallow(<PageSize onChangePageSize={() => { }} pageSizes={[]} />);
    });

    afterEach(() => {
        error.restore();
        error = null;
        component = null;
    });

    it(""should write a console error if pageSizes is empty"", () => {
        expect(error.callCount).is.greaterThan(0);
    });
});

When I try to run the tests, I get an assertion error saying, that the error count is 0 (although the expect count is 1). However, when I run the application and supply an empty array to the PageSize component, I can see the following message in the console:
Warning: Failed prop type: At least one option for page size must be supplied.
    in PageSizeComponent (created by UsersComponent)
    ...

I tried adding a simple console.log just before the if statement in the propTypes validation of the component. When running in browser, I could see the message in the console. However, when running npm test, the message did not get outputted. I tried adding console messages to other places in the code and they did display in when running npm test. It seems the propTypes validation is not called at all.
I have also tried using a real component instead of the ShallowWrapper, but that did not help either.
Used package versions are following:

karma-mocha ^1.3.0
mocha ^5.0.1
react 16.2.0
sinon ^4.5.0
sinon-chai ^3.0.0",lubomir-sokolovsky-sde,NONE,2018-04-10 05:26:27+00:00,True,2018-04-12 16:47:33+00:00,2.47,,3,3,2018-04-11 00:41:02+00:00,0.8,outsideris,MEMBER,2,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3320,Native types exceptions can crash Mocha runner,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Native types exceptions in async callbacks raises an exception in Mocha runner, stopping the test-sequence.
Steps to Reproduce
throw a native type exception in an async test.
See associated merge request.
Expected behavior: exception should be caught and test should fail
Actual behavior: runner stops with following stack trace:
.../mocha/lib/runner.js:707
  err.uncaught = true;
               ^
TypeError: Cannot create property 'uncaught' on string 'error'
    at Runner.uncaught (.../mocha/lib/runner.js:707:16)
    at process.uncaught (.../mocha/lib/runner.js:820:10)
...

Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.0.5
The output of node --version: v8.6.0
The version and architecture of your operating system: macOs 10.13.3
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information
Not really sure that the proposed fix will work in all environments, there may be better ways to fix this.",fargies,CONTRIBUTOR,2018-04-12 09:20:52+00:00,True,2018-10-21 00:41:12+00:00,191.64,,3,4,2018-04-12 16:30:28+00:00,0.3,boneskull,MEMBER,1,1,0,2,['needs-feedback'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3322,reading a csv file stops the dynamic test,"Prerequisites
package file:
""scripts"": {
""test"": ""./node_modules/.bin/mocha --exit"",
""start"": ""node index.js""
},
""license"": ""ISC"",
""dependencies"": {
""body-parser"": ""^1.18.2"",
""chai"": ""^4.1.2"",
""chai-http"": ""^3.0.0"",
""cors"": ""^2.8.4"",
""csv-parser"": ""^1.12.1"",
""dotenv"": ""^4.0.0"",
""express"": ""^4.16.2"",
""fs"": ""0.0.1-security"",
""http"": ""0.0.0"",
""mocha"": ""^5.0.0"",
""path"": ""^0.12.7"",
""watson-developer-cloud"": ""^3.0.3""
Description
can't read a csv to create a dynamic test
Steps to Reproduce
describe('creating` a dynamic test from csv file', function(){
//    run();
    //setTimeout(function(data, err){
 //   for (var i = 0; i < 500; i++) { 
//    dataFromCSV.forEach(function(myTest) {
    //console.log(""FullUtterance:"", dataFromCSV)
    //console.log(""Intent:"", myTest.Intent)
       //myTest = results.data[i];'
    fs.createReadStream('./test/Input_DataFile01.csv')
      .pipe(csv())
      .on('data', function (data) {
      it('should return for input'  + ' and return value ' + 1 , function() {
              assert.equal(1, 1);

      // chai.request(app)
      // .post('/api/v1/message')
      // .send({input: ""test""})
      // .end(function (err, res) {
      //   res.status.should.equal(200);
        //done();
      
        });
    }) 
 //     });
//  }
//});
});

'
Expected behavior: I was going to read a csv file and create tests on the fly using that as an input.
Actual behavior: All tests but the one above shows up on the response.
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:

5


The output of node --version:
-8
The version and architecture of your operating system:
-iOS latest
Your shell (bash, zsh, PowerShell, cmd, etc.):
-terminal

Additional Information
I have tried papaparse and creating my custom. I can see the data with console.log, but it just dies at the it. I have tried to run and --delay, but I can't seem to get that working. If I remove the readcsv and just do the for loop 500 times, it appears to work, so it would appear to me it has to be the file. I haven't checked on the file size. I think I have about 100 test cases. I haven't shrunk that down yet. I'm just trying to setup a way for a non-developer to run test cases. The other thought I had was trying to convert it to a json and see if that makes a difference. Just haven't made it that far.",hsloan1a,NONE,2018-04-12 13:04:05+00:00,True,2018-04-12 16:45:48+00:00,0.15,,2,1,2018-04-12 15:47:09+00:00,0.11,hsloan1a,NONE,0,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3325,--watch doesnt work on mocha 5.1.0,"I got these scripts
{
    ""test"": ""mocha --require babel-core/register src/**/*.test.js"",
    ""test:watch"": ""yarn test --watch""
}

and they work perfect on mocha 5.0.5, but i just created a new project and installed mocha 5.1.0 and the npm run test:watch command doesn't work. I mean it doesnt give any error, it executes the tests and finish the process, if i have to run the tests again i have to run the command again and again.
Workaround: Going back to 5.0.5 for now.",CoericK,NONE,2018-04-13 17:14:27+00:00,True,2018-04-18 17:29:31+00:00,5.01,v5.1.1,4,4,2018-04-17 17:40:22+00:00,4.02,mwangaben,NONE,1,0,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3326,feature-request/question: bypass exclusive (only) tests on CI,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

It there an existing flag, or something planned in the roadmap to force all tests to run, regardless of the .only on some tests ?
Additional Information
sometime developers might forget the .only on a specific suite or single test, then after the push, the CI will pass, even the reviewer can miss it, if too much line of code to read, so all lights green until goprod. Regressions if happen, will be notice very late.
Have someone already dealt with that kind of issue ?",talanta,NONE,2018-04-13 18:00:34+00:00,True,2018-04-15 04:45:47+00:00,1.45,,2,1,2018-04-15 04:45:28+00:00,1.45,outsideris,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3327,`--file` documentation is confusing with regards to `--recursive`,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

(The rest aren't checked because this is a documentation bug.)

 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Documentation of --file is unclear, particularly it's interaction with --recursive.  The current documentation for --file says:

The file passed is not affected by any other flags (--recursive or --sort have no effect).

That makes it sound like you can use both, but --recursive won't impact --file.  However, that isn't the case: if I run with just --file someFile.js my file runs first, but if I add --recursive it doesn't get run until later (if at all).
It seems odd that running ""whatever's in a directory and its nested sub-directories"" would make it impossible to pick one file and run it before you start recursing, but I'm sure there's a good reason.  If you could perhaps make the existing documentation clearer by saying something like ""--file may not/will not work if you combine it with --recursive"", and maybe even add after some explanation of why Mocha works that way, eg. ""(and here's why that seemingly easy thing of running a file before a bunch of recursed files isn't something Mocha can do)"" I think it would greatly improve the documentation.
Steps to Reproduce
Documentation bug.
Expected behavior: I expect the documentation to accurately convey how the library's arguments work.
Actual behavior: Behavior (and the reason for that non-intuitive behavior) is not documented
Reproduces how often: Every time you read the --file documentation.
Versions
Latest (I'm going by the documentation on your website).
Additional Information",machineghost,NONE,2018-04-14 17:56:06+00:00,True,2018-10-26 20:42:35+00:00,195.12,,3,3,2018-10-23 14:06:26+00:00,191.84,plroebuck,MEMBER,1,0,0,1,"['documentation', 'invalid', 'needs-mcve', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False
3329,outdated browser example in docs,https://mochajs.org/#running-mocha-in-the-browser uses old dependencies,DanielRuf,CONTRIBUTOR,2018-04-15 19:18:11+00:00,True,2018-08-11 06:56:12+00:00,117.48,,2,0,,,,,0,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3331,Mocha base runner does not emit start event,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha base runner does not emit start event.
Steps to Reproduce
Consider this sample js file
var Mocha = require('mocha');

var mocha = new Mocha({
    reporter: 'base'
});

mocha.addFile(""./simple_test.js"");

var runner = mocha.run();
runner.on('start', () => {
    console.log(""start hook"");
});

runner.on('end', () => {
    console.log(""end hook"");
});
And simple_test.js is
describe(""simple suite 1"", function () {
    describe(""simple suite 2"", function () {
        before(function () {
            console.log(""before"");
        });

        beforeEach(function () {
            console.log(""before each"");
        });

        it(""simple test"", function () {
            console.log(""test"");
            var result = """";
            expect(result).toBe(""1"");
        });

        afterEach(function () {
            console.log(""after each"");
        });
        after(function () {
            console.log(""after"");
        });
    });
});
The output comes out to be
before
before each
test
after each
after
end hook",karanjitsingh,NONE,2018-04-17 04:26:27+00:00,True,2018-04-18 07:20:19+00:00,1.12,,2,1,2018-04-18 07:20:19+00:00,1.12,outsideris,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3336,--watch-extensions needs to default to 'js' ,"The change in c580294 to --watch-extensions (published accidentally in v5.1.0) fails to set a default value.
If --watch-extensions is not specified, it should default to .js; otherwise use whatever was specified.
PRs should target master as usual.",boneskull,MEMBER,2018-04-18 17:32:36+00:00,True,2018-04-23 16:36:39+00:00,4.96,v6.0.0,1,0,,,,,0,0,0,0,"['confirmed-bug', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3339,proposal --file-reporter [name] [output file],"Hi,
I would like to propose a new feature, while the current reporter is outputting to the console,
I would like another reporter or maybe set or reports to be outputting to file.
For each file reporter a output file name and the report to use must be specified.
Then an additional option of how the file should be open, in append mode or freshly create a new file.
What we would like to do, is have moch run our test and see the output to the screen, but at the same time have a back ground process interpret the output at the same time. This would allow us to have our functionality feel more integrated.
Ideally the file output would be interpret the test file output and in our case produce a list of tests that failed with a certain criteria. This list would then potentially in our case be used as regular expression used used as input into our next test run.
The motivation is that we have a dynamically configuration application, were if certain configuration is missing, then the operator doesn't have for what ever good reason and money, security, the ability to run those test in his environment. As a developer, we would like to run all the other tests for which their is configuration available, however, like to be pain less and little work.
We don't want to ahve to hoist and provide summaries of configuration dependancies for tests, that are already deep down in modules or even have to categorised the tests, extra. All of this would require man power attempting to keep config and test categorisation in sync, which is a tedious task and can be automated.
As of current the idea is to dump the output run to file and loose our cli display so that we can cache these tests that don't have permission or config to run. Then any future runs of test environment will be much faster, as we just skip the test instead of all the overhead of starting it up in the first place.
Mabye at a later stage, this could be improved that one can skip tests based on a file path and a relative call stack., which would also leaned itself to a much more efficient lookup algorithm speeding up the process at a later stage of the game.
Please let me know you thoughts, so I can potentially look at moving forward with and implementation.",wesleyolis,NONE,2018-04-20 09:56:07+00:00,False,,,,3,2,2018-04-20 12:42:55+00:00,0.12,plroebuck,MEMBER,1,0,0,1,"['feature', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3341,The growl code in _mocha is dead code (redux),"Description
Remove growl-related dead code. Issue #2132 removed the unused growl() function, but the images used by that function remained.",plroebuck,MEMBER,2018-04-21 13:22:49+00:00,True,2018-04-28 09:16:34+00:00,6.83,,3,4,2018-04-21 13:46:03+00:00,0.02,plroebuck,MEMBER,3,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3342,the Runnable test is bonkers,"in the Runnable suite (test/unit/runnable.spec.js) we are poisoning the global setTimeout, setInterval, etc., to assert that we don't call those functions (read the comments for further explanation of why this is necessary).
but, really, that problem is better solved with linting.  write a one-off eslint plugin/rule that ensures Mocha never calls these functions internally, once the test files begin loading.
In other words, this is allowed:
var setTimeout = global.setTimeout;
setTimeout(something);
// or
var setTimeout = require('timers').setTimeout;
setTimeout(something);
This is not allowed:
global.setTimeout(something);
// or
setTimeout(something);
// or
require('timers').setTimeout(something);",boneskull,MEMBER,2018-04-21 19:10:03+00:00,True,2018-12-18 22:54:27+00:00,241.16,,2,1,2018-10-23 14:10:01+00:00,184.79,plroebuck,MEMBER,1,0,0,0,"['needs-feedback', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3345,afterEach conditional error hook breaks stats and error reporting,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Trying to fail a test with this.test.error() causes the test to be reported twice, as failed and as success
Steps to Reproduce
Run the test at:
https://github.com/mochajs/mocha/wiki/HOW-TO:-Conditionally-fail-a-test-after-completion
Expected behavior:
  something
    ✓ should one
    1) should two

  1 passing (16ms)
  1 failing

Actual behavior:
  something
    ✓ should one
    ✓ should two
    1) should two

  2 passing (11ms)
  1 failing


Additional information
There seems to be a fix in this rejected pull request
#1944
Related to issue #1635",fgarcia,NONE,2018-04-22 07:40:25+00:00,True,2018-08-10 22:19:32+00:00,110.61,,2,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3347,Mocha does not run tests defined within a function,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I am trying to test my API with mocha & superagent, the thing is, I need to wait for the db to open, then export the app, because the tests require some initialization code that depends on the db.
So, in order to do that, I had to wrap my test code within an async function and call it, but it doesn't run the tests.
// test.js

describe('math', async () => {
  it('multiplies', () => {
    let result = 2 * 2;
    result.should.equal(4);
  });
});

const test = async () => {
  const should = require('chai').should();
  const request = require('supertest');
  const path = require('path')
  const app = await require(path.resolve('./server'));


  describe('math', async () => {
    it('adds', () => {
      let sum = 1 + 1;
      sum.should.equal(2);
    });
  });

  describe('users', async () => {
    it('creates a customer', async () => {
      let res = await request(app).get('/api/should-404/');
      res.status.should.equal(200);
    });
  });
};

test().catch(console.err);

// server.js

const run = async () => {
  const app = express()();
  const mongoose = require('mongoose');
  await mongoose.connect('mongodb://localhost:27017/speero_test');

  const db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));
  db.once('open', () => {console.log.bind(console, 'connection :')});

  // the line below depends on the db
  const initRolesPolicies = require(path.resolve('./initialize/initPolicies'))();

  app.listen(port, function () {
    console.log('Autotash is running ' + process.env.NODE_ENV.toUpperCase() + ' on port ' + port + ' !');
  });

  return app;
}

module.exports = run().catch(console.err);

Steps to Reproduce

Expected behavior: All tests to run, the multiplication, the addition, and the customer creation.
Actual behavior: Only the multiplication test (the one outside the test function) run, the ones inside are completely ignored even though I execute the function at the bottom.
I don't completely like wrapping the test suites inside a function, but I have to await for the app to be returned, I am open for any other approaches to accomplish this. I just need to wait for db to be ready before exporting the app object and running the tests.
Reproduces how often: [100%]
Versions

mocha v4.0.1
node v8.9.3
mongoose v5.0.14
Windows 10
Cmder",AbdelrahmanHafez,NONE,2018-04-23 09:00:49+00:00,True,2018-04-23 11:53:20+00:00,0.12,,2,5,2018-04-23 09:05:35+00:00,0.0,ORESoftware,NONE,0,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3349,drop google analytics for Matomo on mochajs.org,"I've been using Matomo for analytics on my personal blog, and am pretty impressed with it.

It doesn't own your data
It's open source
It's cheap if you don't want to self-host
We can make the analytics public
The analytics are comparable for our purposes

Currently, to see the mochajs.org analytics, you need a Google account, and I need to manually provide access within GA.
So, I think we should swap it out.  If we need to pay, it will come out of the OpenCollective funds.
I can set this up, but wanted to know what others think?
cc @mochajs/core",boneskull,MEMBER,2018-04-23 17:16:21+00:00,True,2019-01-30 20:25:12+00:00,282.13,,4,4,2018-04-24 09:04:21+00:00,0.66,Bamieh,MEMBER,4,0,0,0,"['chore', 'core-team', 'documentation']",True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3351,npm run mocha-test fails.,"Hello, I am trying to run mocha in my app, but every time it is failing.
I am trying npm run mocha-test command.
I am getting the following error in the command prompt:

When I tried to google with

Error: EPERM: operation not permitted, symlink

I found a solution in this issue in GitHub:
meteor reset
npm install
npm test
However, I received the following error then (on running npm test):

I checked manually in the library and found fibers.node
I also initiated a build in C:\Program Files\nodejs\node.exe C:\Users\Omistaja\Documents\GitHub\platform\node_modules\chimp\node_modules\fibers but that failed as well.
I am not sure what I am doing wrong.
Sorry for the long description.
Node version: v8.11.1
Meteor Version: 1.5.2
npm version: 5.6.0",Nazarah,NONE,2018-04-25 08:16:51+00:00,True,2018-04-27 23:31:02+00:00,2.63,,3,2,2018-04-26 15:55:53+00:00,1.32,outsideris,MEMBER,2,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3353,Exception swallowed ,"node v8.9.4.
mocha v5.1.1
describe('[Test', function () {
    it('Should display some exception', function (done) {
        throw new Error('my error');
    })
})

outputs:
 [Test]
    1) Should display some exception


  0 passing (8ms)
  1 failing

  1) [Test]
       Should display some exception:
     Uncaught Error: my error
      at Context.<anonymous> (partner.sync.total.test.js:3:15)",barocsi,NONE,2018-04-25 10:54:00+00:00,True,2018-04-27 23:28:39+00:00,2.52,,4,2,2018-04-25 18:17:31+00:00,0.31,plroebuck,MEMBER,2,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3354,Annotate when exceptions are caught but ignored ,"Description
There's an existing convention of naming intentionally ignored errors in try/catch as ignore. Modify codebase to follow it.",plroebuck,MEMBER,2018-04-25 18:25:42+00:00,True,2018-05-01 19:29:43+00:00,6.04,,2,0,,,,,0,0,0,0,['refactor'],False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3355,mocha 5.1.1 can't install,"node 8.11.1
npm 6.0
detail:
events.js:183░░░░░░⸩ ⠼ extract:concat-map: http fetch POST 404 https://registry.npm.taobao.org/-/npm/v1/security/audits/quick 364ms
throw er; // Unhandled 'error' event
^

Error: write after end
at writeAfterEnd (_stream_writable.js:236:12)
at PassThrough.Writable.write (_stream_writable.js:287:5)
at PassThrough.Writable.end (_stream_writable.js:563:10)
at ReadEntry.entry.on (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/pacote/lib/extract-stream.js:19:41)
at emitOne (events.js:121:20)
at ReadEntry.emit (events.js:211:7)
at ReadEntry.emit (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:296:25)
at ReadEntry.[maybeEmitEnd] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:249:12)
at ReadEntry.end (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:162:27)
at Unpack.[consumeBody] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:210:13)
at Unpack.[consumeChunkSub] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:391:40)
at Unpack.[consumeChunk] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:362:30)
at Unzip.(anonymous function).on.chunk (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:291:59)
at emitOne (events.js:116:13)
at Unzip.emit (events.js:211:7)
at Unzip.emit (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:296:25)
events.js:183░░░░░░⸩ ⠼ extract:concat-map: http fetch POST 404 https://registry.npm.taobao.org/-/npm/v1/security/audits/quick 364ms
throw er; // Unhandled 'error' event
^
Error: write after end
at writeAfterEnd (_stream_writable.js:236:12)
at PassThrough.Writable.write (_stream_writable.js:287:5)
at PassThrough.Writable.end (_stream_writable.js:563:10)
at ReadEntry.entry.on (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/pacote/lib/extract-stream.js:19:41)
at emitOne (events.js:121:20)
at ReadEntry.emit (events.js:211:7)
at ReadEntry.emit (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:296:25)
at ReadEntry.[maybeEmitEnd] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:249:12)
at ReadEntry.end (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:162:27)
at Unpack.[consumeBody] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:210:13)
at Unpack.[consumeChunkSub] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:391:40)
at Unpack.[consumeChunk] (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:362:30)
at Unzip.(anonymous function).on.chunk (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/lib/parse.js:291:59)
at emitOne (events.js:116:13)
at Unzip.emit (events.js:211:7)
at Unzip.emit (/Users/afu/.nvm/versions/node/v8.11.1/lib/node_modules/npm/node_modules/tar/node_modules/minipass/index.js:296:25)
npm ERR! cancel after 1 retries!
npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/afu/.npm/_logs/2018-04-26T08_05_45_410Z-debug.log",bbq191,NONE,2018-04-26 08:09:47+00:00,True,2018-04-27 03:55:39+00:00,0.82,,3,5,2018-04-26 16:50:57+00:00,0.36,outsideris,MEMBER,1,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3357,reporter cannot find dynamic tests,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When I try change reporter to doc or etc I receive  warning
Warning: Could not find any test files matching pattern: doc
var assert = require('chai').assert;

function add() {
    return Array.prototype.slice.call(arguments).reduce(function(prev, curr) {
        return prev + curr;
    }, 0);
}

describe('add()', function() {
    var tests = [
        {args: [1, 2],       expected: 3},
        {args: [1, 2, 3],    expected: 6},
        {args: [1, 2, 3, 4], expected: 10}
    ];

    tests.forEach(function(test) {
        it('correctly adds ' + test.args.length + ' args', function() {
            var res = add.apply(null, test.args);
            assert.equal(res, test.expected);
        });
    });
});

Steps to Reproduce

save code to test.js
mocha --delay -R doc test.js

Expected behavior:
It should process all dynamic added test
Actual behavior:
it returns Warning: Could not find any test files matching pattern: doc
Reproduces how often:
always
Versions


mocha 4.1.0:
node v9.8.0
MacOS 10.13.4
ITerm2",AShubin,NONE,2018-04-26 17:41:44+00:00,True,2018-04-27 11:37:59+00:00,0.75,,3,3,2018-04-27 04:07:06+00:00,0.43,outsideris,MEMBER,2,0,0,1,"['needs-feedback', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3358,this.retries setting is not working on beforeEach.,"Description
I'm setting retry time in function beforeEach with method this.retries(1), but it seems it's not working.
describe('Retry', () => {
beforeEach(function() {
    this.retries(1);
    console.log('before each, set retry to 1');
});

it('should retry 1 time', function() {
    console.log('tests');
    expect(false).to.be.true;
})

})
Expected behavior: The test should be retry 1 time because it's setting in beforeEach.
Actual behavior: The test is failed without any retry.
Reproduces how often: always
Versions
mocha: 4.1.0
node:  8.9.4
MacOS 10.13.3",dan-pan,NONE,2018-04-27 05:36:42+00:00,True,2018-04-27 23:27:21+00:00,0.74,,3,8,2018-04-27 08:39:47+00:00,0.13,plroebuck,MEMBER,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3360,Mocha 5 fails on async/await (babel-polyfill),"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I'm trying to configure Mocha with Babel but I cannot make it work.
There is my configurations:
package.json
...
  ""scripts"": {
    ""start"": ""nodemon ./src/bin/www.js --exec babel-node --presets env --plugins transform-class-properties"",
    ""build"": ""babel ./src -d ./serv --presets env --plugins transform-class-properties"",
    ""serve"": ""node ./serv/server.js"",
    ""test"": ""BABEL_ENV=test mocha --require babel-core/register ./test/test.js""
  },
  ""engines"": {
    ""node"": "">=8.10.0"",
    ""engineStrict"": true
  },
  ""babel"": {
    ""presets"": [
      ""env""
    ]
  },
  ""dependencies"": {
   ...
    ""express"": ""^4.16.3"",
   ...
  },
  ""devDependencies"": {
    ""assert"": ""^1.4.1"",
    ""babel-register"": ""^6.26.0"",
    ""mocha"": ""^5.1.1"",
    ""supertest"": ""^3.0.0"",
    ""babel-cli"": ""^6.26.0"",
    ""babel-plugin-transform-class-properties"": ""^6.24.1"",
    ""babel-preset-env"": ""^1.6.1"",
    ""babel-polyfill"": ""^6.26.0""
  }
...

.babel.rc
{
  ""presets"": [""env""],
  ""plugins"": [""transform-class-properties""]
}

my test.js:
'use strict';

require('../src/bin/www');

describe('API Server', () => {

    before((done) => {
       ...
       done();
    });

    describe('User EndPoint Testing', () => {
        // no tests yet
    });

});

What I get on npm test
/var/www/zilzal/src/afilewhereiserrorhappened.js:12
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request, response, next) {
                                               ^
ReferenceError: regeneratorRuntime is not defined

It fails on async () => { ... } construction....
I have no idea what I missed in ""test"": ""BABEL_ENV=test mocha --require babel-core/register ./test/test.js"". I googled a lot but no success...
Expected behavior: it will work :)
Actual behavior: it doesn't work
Versions

The output of mocha --version and node node_modules/.bin/mocha --version:
I have no Mocha in global. Local version is 5.1.1
The output of node --version: v8.9.3
The version and architecture of your operating system: DISTRIB_RELEASE=17.10 DISTRIB_CODENAME=artful DISTRIB_DESCRIPTION=""Ubuntu 17.10""",adamasantares,NONE,2018-04-28 07:37:25+00:00,True,2018-04-28 08:01:02+00:00,0.02,,1,1,2018-04-28 08:01:02+00:00,0.02,adamasantares,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3363,Throw error if unable to parse Mocha options file,"Description
The current code silently ignores any problems parsing the options file and continues on.

  
    
      mocha/bin/options.js
    
    
        Lines 32 to 47
      in
      99c2f8a
    
    
    
    

        
          
           try { 
        

        
          
             const opts = fs 
        

        
          
               .readFileSync(optsPath, 'utf8') 
        

        
          
               .replace(/\\\s/g, '%20') 
        

        
          
               .split(/\s/) 
        

        
          
               .filter(Boolean) 
        

        
          
               .map(value => value.replace(/%20/g, ' ')); 
        

        
          
            
        

        
          
             process.argv = process.argv 
        

        
          
               .slice(0, 2) 
        

        
          
               .concat(opts.concat(process.argv.slice(2))); 
        

        
          
           } catch (err) { 
        

        
          
             // ignore 
        

        
          
           } 
        

        
          
            
        

        
          
           process.env.LOADED_MOCHA_OPTS = true; 
        
    
  


Code should instead throw an error for any error encountered, except for a nonexistent default options file (i.e., user did not specify --opts and ""test/mocha.opts"" does not exist).
Downside?
People who have errors in their ""mocha.opts"" file will experience failures until corrected.",plroebuck,MEMBER,2018-04-29 17:44:55+00:00,True,2018-12-10 16:53:09+00:00,224.96,,2,1,2018-05-01 18:06:21+00:00,2.01,plroebuck,MEMBER,1,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3365,remove growl from browser build,"It could eventually be polyfilled with the web notifications API, but I'm not happy to add anything like that without automated tests.
For now, it produces issues with webpack, it seems, so we will ensure growl isn't referred to when bundled.",boneskull,MEMBER,2018-04-30 18:56:47+00:00,True,2018-04-30 19:55:33+00:00,0.04,,1,1,2018-04-30 19:55:33+00:00,0.04,boneskull,MEMBER,1,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3366,discuss: reconsider browserify,"While Browserify has served us well over the years, the ecosystem is approaching death.  While Browserify itself still sees maintenance, many transforms haven't been updated in years.
As the web ecosystem continues to evolve, the lack of a vibrant community will make Browserify an even less attractive technology.
An aside: Not bundling Mocha for the browser (and allowing users to do their own bundling) would be ideal, but that's not going to happen as long as packages such as karma-mocha depend on the bundle--and people seem to like running browser tests manually (see the popularity of mochawesome).
I'm interested in hearing opinions.  This is by no means urgent, as Browserify seems to work fine for now, but something I'd just like to toss around...",boneskull,MEMBER,2018-04-30 20:07:54+00:00,False,,,,1,0,,,,,0,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3367,Errors in before hooks exit with status 0 when --bail is used,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

When using the --bail flag, mocha will exit with a status of 0, instead of 1, when it encounters an error in before hooks. This potentially causes CI to pass when it should fail.
Steps to Reproduce

let describe = require('mocha').describe;
let before = require('mocha').before;

describe('before-all-working', function() {
  before(function() {
    console.log('before hook');
    throw new Error('before hook error');
  });

  it('test', function() {});
});
xps:../backend-issue-965$ ./node_modules/.bin/mocha 


  before-all-working
before hook
    1) ""before all"" hook


  0 passing (4ms)
  1 failing

  1) before-all-working
       ""before all"" hook:
     Error: before hook error
      at Context.<anonymous> (test:7:11)



xps:../backend-issue-965$ echo $?
1

xps:../backend-issue-965$ ./node_modules/.bin/mocha --bail


  before-all-working
before hook

  0 passing (3ms)

    1) ""before all"" hook

xps:../backend-issue-965$ echo $?
0


Expected behavior: mocha exits with status 1
Actual behavior: mocha exits with status 0
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: not globally installed / 5.1.1
The output of node --version: 8.11.1
The version and architecture of your operating system: Ubuntu 16.04.4 LTS x64
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): N/A
The code transpiler being used: N/A

Additional Information

None",lathonez,NONE,2018-05-01 08:09:20+00:00,True,2018-05-01 18:17:42+00:00,0.42,,2,1,2018-05-01 18:17:42+00:00,0.42,outsideris,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3368,Add pseudo-tests for timing of before()/after() hooks,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

Related issues/proposals:
#419
#700
cybertk/abao#203
Description
Breakdown of test timing should add setup/teardown pseudo-tests to help give better individual test timings. Timing of before() functions would be added to the ""setup"" pseudo-test, and after() functions to the ""teardown"" pseudo-test of each describe().
Timing of beforeEach()/afterEach() would remain with each it().
Reporters would display these as two additional tests named ""setup"" and ""teardown"", assuming they exceeded some threshold.
Rationale
When using Mocha tests to perform RESTful interface testing against a resource, timing of a database setup routine in a before() would be added to the first test -- making its performance look terrible. When running API tests, the timing of the routine can be almost as important as it passing.",plroebuck,MEMBER,2018-05-02 01:56:44+00:00,False,,,,3,2,2019-05-28 12:12:18+00:00,391.43,eight04,NONE,1,0,0,1,"['feature', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
3369,Remove bower installation in docs,"In docs/index.md, we should remove installing mocha via bower because mocha no longer supports bower; see the comments.",outsideris,MEMBER,2018-05-02 18:35:16+00:00,True,2018-08-07 17:00:36+00:00,96.93,,2,3,2018-08-07 15:09:39+00:00,96.86,fesebuv,NONE,1,0,0,1,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3370,Add support for comment lines in Mocha options file,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

Related proposals:
#2587
#2870
#2963
Description
Add support for Beginning-of-Line (BOL) comments to ""mocha.opts"". As the file has far more in common with shell scripts (as it contains various Mocha cmdline arguments) than JavaScript tests, the comment character would be the hash ('#') character. Inline comments will not be supported.
Rationale
No current support for comment lines exists for ""mocha.opts"". With other related upcoming proposals for processing this file, the ability to document this file becomes more important than ever. Believe the other proposals got bogged down trying to do too much, arguing over more advanced features rather than providing the basics. As Larry would say, ""Git 'Er Done"".",plroebuck,MEMBER,2018-05-03 02:21:58+00:00,True,2018-05-08 08:37:14+00:00,5.26,,2,0,,,,,0,0,0,0,"['good-first-issue', 'nice-to-have', 'usability']",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3371,Mocha in browser not running tests,"I have tests written in TypeScript and transcompiled to single .js file using Webpack:

Running mocha tests.js will work just fine.
Running tests using Karma (karma.conf.js uses mocha framework, loads tests.js, browser is PhantomJS) will work just fine.

However, running tests by opening (in browser from local disk) provided runner.html will NOT work (I can see Mocha's HTML created under <div id=""mocha""></div>, but no test results are shown):
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Tests</title>

    <link rel=""stylesheet"" href=""../../../node_modules/mocha/mocha.css"">
</head>
<body>

    <div id=""mocha""></div>

    <script src=""../../../node_modules/mocha/mocha.js""></script>
    <script src=""../../../node_modules/chai/chai.js""></script>

    <script>
        mocha.setup(""bdd"")
    </script>

    <script src=""./tests.js""></script>

    <script>
        mocha.run();
    </script>

</body>
</html>


Can anyone give me insight as to why?",vladeck,NONE,2018-05-03 13:01:39+00:00,True,2018-05-07 12:09:02+00:00,3.96,,3,5,2018-05-03 14:06:08+00:00,0.04,plroebuck,MEMBER,2,0,0,1,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3377,probot should lock old issues,"Inactive, closed issues should be automatically marked as ""locked""; we would prefer new issues are created instead.
Henry Zhu's blog has a post about this.
I'd like the following settings, but this is open to debate:
daysUntilLock: 60
lockComment: false
only: issues
lockLabel: stale
cc @mochajs/core",boneskull,MEMBER,2018-05-07 20:20:48+00:00,False,,,,5,11,2018-05-07 21:22:54+00:00,0.04,Munter,MEMBER,5,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3378,CI thoughts,"Brainstorming
Work done to use new Travis build steps was a big improvement.
Can we go further?
Thoughts concerning speeding up the CI process or improving coverage.
Speed up CI?

Drop Node-9.x support ASAP - brings nothing not already available in Node-10.
[Travis] Reorder tests from lowest version to latest (fail faster)

Perhaps less help with Node-4 going away, but dev probably using modern version of Node


[Travis] Run 'coverage' as final build step
[AppVeyor] Just run tests against latest Node on Windows

Since limited to 2 jobs max on free acct, this just crawls...



Improve coverage

[Travis] We test against Linux - but not macOS?

Again (like Windows above) just against latest Node",plroebuck,MEMBER,2018-05-08 10:07:01+00:00,False,,,,3,3,2018-05-11 17:10:26+00:00,3.29,plroebuck,MEMBER,2,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3382,Make use of Markdown cross links in documentation,"Description
Improve readability of raw Markdown documentation by using cross-links.
Requires creating a cross reference section, and converting inline links.
Benefits
Centralization of document URL management",plroebuck,MEMBER,2018-05-12 20:33:16+00:00,True,2019-02-16 17:16:31+00:00,279.86,v6.0.0,2,0,,,,,0,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3383,Failing tests no longer produce stack traces with clickable file links,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Consider the following test file. It is written in common js and uses no transpilers. With an earlier version of mocha that I used (2.2.5), failing tests produced a stack trace that had clickable links (at least for vscode) to the offending file when a unit test failed. After trying mocha 5.1.1 with this same example test file it no longer works:
const chai = require('chai');

const expect = chai.expect;

function foo() {
    return 'foo';
}

describe('failing test', () => {
    it('should return bar', () => {
        expect(foo()).to.equal('bar');
    });
});
 

Steps to Reproduce

Expected behavior: Mocha should be able to produce stack traces with clickable links inside a shell/terminal (using vscode with bash) to the line and file of a failing test

Actual behavior: The stack trace file ref is no longer clickable:

Reproduces how often: Always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.1.1
The output of node --version: 10.1.0
The version and architecture of your operating system: windows 10, 64 bit
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): N/A
The code transpiler being used: babel

Additional Information
This issue has also been replicated in my own current project that uses babel. In babel's case the link looks different; it seems to log it twice?

To get around the problem, I've resorted to using mocha-webpack, as that does provide clickable file links.",RonanQuigley,NONE,2018-05-13 13:15:13+00:00,True,2018-10-27 17:25:10+00:00,167.17,,5,15,2018-05-18 02:32:58+00:00,4.55,plroebuck,MEMBER,4,0,0,1,"['node.js', 'unconfirmed-bug', 'usability']",False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3384,How to fix require paths in tested code,"Please forgive me if this has been answered, I am a complete noob with JS testing, and I can't find the answer anywhere.
I use brunch to compile all my modules, and have a special function which allows me to use the module name without any path in the require statement.
This, of course, means that I can't test my code as none of the require paths work.
app/my.module.js
require('my.module');
This even works in brunch for nested modules:
app/nested/another.module.js
require('another.module');
Can anyone give any help on how I can allow mocha to resolve these paths?",,NONE,2018-05-13 17:58:38+00:00,True,2018-05-14 21:02:19+00:00,1.13,,1,2,2018-05-14 20:04:22+00:00,1.09,akrawchyk,CONTRIBUTOR,0,1,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3387,Jest,"Jest is emerging as an alternative to mocha in many applications that use React and it recently surpassed mocha in github stars. Although github stars is not the measuring stick, I believe that we should be addressing the elephant in the room.
At the time of writing this, there are over half a million react project tagged on github. I believe jest is gaining popularity in the react community due to the following:

Snapshot testing
Coverage built in
A bold statement about who is using Jest, encouraging new comers.
Out of the box configurations
Super powerful documentation

Snapshot testing
Jest popularized ""snapshot testing"" for react developers:

Capture snapshots of React trees or other serializable values to simplify testing and to analyze how state changes over time.

The community created many tools for snapshot testing for mocha. We can either adopt a project and put it under mocha, write our own, or just document how snapshot testing can be used with mocha on our website.
Easier Configurations
Introduce presets (like babel presets), this way a developer can use a ""react preset"" that includes coverage, snapshot testing, chai, etc. Or create their own preset for their OSS or their company. Also extendable rc/json configs come to mind, and more default configs.
Documentation
The github wiki is very unappealing for users, maybe we can use something like Docusaurus for awesome documentation, or just extend the current website. Also we can provide more examples on common scenarios and guides (usage with es6, babel, async examples, snapshot testing, etc)
Encouraging new comers
Mocha is very widely adopted, almost every other person that ever used javascript knows mocha, we can use this to encourage new comers to join by highlighting some of those facts about mocha. Usually developers work in teams or OSS, and wide community adoption is a very good reason to choose an OSS as it proves stability, maintainability and availability of examples and help.
Coverage
Mocha integrates beautifully with coverage tools such as nyc. As coverage is almost always needed in projects along side testing, we can highlight how to use mocha with nyc for example, it is as simple as
$ nyc mocha

Also presets can embrace setting up coverage tools.
Highlight mocha's power
I personally always favor mocha for this specific reason: ""you can never go wrong with mocha"". Mocha is very extensible, you can customize it to work exactly the way you need without hacking anything, everything from the reporter to how and when the tests run is configurable with code or flags or some other sort (I am even using it for e2e native testing and integration testing). I believe it would be nice to highlight those features in a modern way rather than a text list.
CC @mochajs/core",Bamieh,MEMBER,2018-05-20 14:08:56+00:00,True,2018-11-20 13:48:46+00:00,183.99,,4,11,2018-05-21 03:56:29+00:00,0.57,boneskull,MEMBER,3,0,0,1,"['chore', 'documentation', 'feature']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3389,Proposal: improve issue template.,"I feel our issue template pretty verbose.
Recently, GitHub improves issue template to users can report it categorized at an entry point. So, we can simplify our templates.
Babel already uses it like this. (code is here)
I think we need the options below.

Bug Report
Feature Request
Support Question

What do you think?",outsideris,MEMBER,2018-05-22 15:04:58+00:00,False,,,,3,2,2018-05-23 11:03:30+00:00,0.83,Bamieh,MEMBER,2,0,0,0,['nice-to-have'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3390,How to use root level hooks when I import my mocha project?,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have created a project using mocha 3.5.3 which has a library file having root level before and after hooks for my test data creation and teardown. When I execute my tests in this project, my library with root level hooks get executed properly along with tests.
Now I import this project in my other nodejs project to make use of my library and try to compile/execute that project, it is failing with
ReferenceError: before is not defined
Since in the new project, Iam not running with mocha context and root level hooks in my library are not considered as there is no implied describe.
Steps to Reproduce

create a nodejs project with mochajs.
create a library with root level before and after hooks. create some functions that can be used in other files/project.
import this package in another project.
try to compile/run/execute the project.

Expected behavior: Should be able to import and use mochajs project in another project.
Actual behavior: ReferenceError: before is not defined ic coming.
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:3.5.3
The output of node --version:v8.9.0
The version and architecture of your operating system:MAC OS
Your shell (bash, zsh, PowerShell, cmd, etc.):BASH
Your browser and version (if running browser tests):N/A
Any other third party Mocha related modules (with versions):
The code transpiler being used:babel

Additional Information",tatthipatla,NONE,2018-05-23 07:00:43+00:00,True,2018-06-06 20:13:53+00:00,14.55,,4,4,2018-05-23 11:01:22+00:00,0.17,Bamieh,MEMBER,3,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3391,"TypeError: test.describe is not a function when using nodejs, selenium and mocha","I am getting TypeError: test.describe is not a function when using 'test' with describe, it, before etc.
Using node, selenium and mocha to run tests.
Please find the code below:
Test that I am executing:
    var LoginObj = require('../pages/Login.js');
    var HomeObj = require('../pages/Home.js');
   var LoginData = require('../testdata/LoginData.json');
   var using = require('jasmine-data-provider');
   var basetest = require('../pages/BaseTest.js');
   var test = require('selenium-webdriver/testing')
   var driver = basetest.getDriver();

     test.describe('Checking  Login Functionality', function() {

        test.beforeEach(function(){
            driver.get('https://applicationurl.com');
           driver.manage().window().maximize();
         //driver.manage().timeouts().implicitlyWait(30000);

            });

       LoginData.forEach(function(data, username, password) {
       test.it('Login with: '+data.username+"" and ""+data.password, function() {

         //LoginObj.get();

          LoginObj.login(data.username, data.password, data.answer);

         assert.isTrue(HomeObj.isLogoutDisplays(),'Login successful, Passing 
         Test!')
         console.log('Login flag is: '+HomeObj.isLogoutDisplays()+', Failing 
      Test!');



               })

      });

           test.afterEach(function() {

               HomeObj.logout();


                  }) 

   });

Is that anything I am lacking somewhere? or it's an issue., I have installed mocha using npm install mocha --save and running my test using npm test.",rohinegi548,NONE,2018-05-23 08:55:06+00:00,True,2018-05-24 03:08:44+00:00,0.76,,5,5,2018-05-23 10:59:19+00:00,0.09,Bamieh,MEMBER,3,0,0,2,"['integration', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3392,Unable to set DYLD_LIBRARY_PATH on MacOS,"Description
Ability to set environment variables.
Mocha spawns a new child process and on MacOS environment variables such as DYLD_LIBRARY_PATH are not carry forward to mocha. This is not desirable because if the project has dependencies, it cannot be satisfied.
Steps to Reproduce

Set DYLD_LIBRARY_PATH on MacOS
Run Mocha on Mac.

Expected behavior: [What you expect to happen]
Expect the child process have the DYLD_LIBRARY_PATH variable set as well.
Actual behavior: [What actually happens]
DYLD_LIBRARY_PATH is not set
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
5.0.5",jjalan,NONE,2018-05-24 11:42:59+00:00,True,2018-05-26 12:46:11+00:00,2.04,,3,6,2018-05-24 15:33:43+00:00,0.16,Bamieh,MEMBER,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3393,Mocha 5.1.1 is not testing all files,"I upgraded mocha from ^2.2.5 to 5.1.1 in my Angular JS project. I have 11550 test cases in my application, all of which were successful before the upgrade. However, after upgrading Mocha, I'm getting irregular outputs while running grunt test such as


Firefox 60.0.0 (Windows 10.0.0): Executed 6132 of 11550 (skipped 86) SUCCESS (3 mins 13.945 secs / 16.863 secs) TOTAL: 6132 SUCCESS


Firefox 60.0.0 (Windows 10.0.0): Executed 868 of 11550 (skipped 9) SUCCESS (35.564 secs / 3.799 secs) TOTAL: 868 SUCCESS


Firefox 60.0.0 (Windows 10.0.0): Executed 951 of 11550 (3 FAILED) (skipped 9) (32.092 secs / 3.229 secs) TOTAL: 3 FAILED, 948 SUCCESS`




""before each"" hook Testing the homePageService functionality


""after each"" hook


currentSpec is null
module.$$cleanup@http://localhost:8100/base/bower_components/angular-mocks/angular-mocks.js?861c27a0d62d5f7beed79cd1b40b44f0560b2eb5:2992:9 module.$$afterEach@http://localhost:8100/base/bower_components/angular-mocks/angular-mocks.js?861c27a0d62d5f7beed79cd1b40b44f0560b2eb5:2987:7

""after each"" hook for ""To test submitZip method""

currentSpec is null
module.$$cleanup@http://localhost:8100/base/bower_components/angular-mocks/angular-mocks.js?861c27a0d62d5f7beed79cd1b40b44f0560b2eb5:2992:9 module.$$afterEach@http://localhost:8100/base/bower_components/angular-mocks/angular-mocks.js?861c27a0d62d5f7beed79cd1b40b44f0560b2eb5:2987:7
Do note that for the first two times I ran test, I wasn't getting any logs on the NPM console for failed tests, which of course was because the tests were passing, although after ignoring many TCs.
Angular CLI: 6.0.1
Node: 9.4.0
NPM: 5.6.0
OS: win32 x64",ssunny2,NONE,2018-05-25 06:57:45+00:00,True,2018-06-06 20:18:34+00:00,12.56,,5,5,2018-05-25 14:11:30+00:00,0.3,plroebuck,MEMBER,2,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3394,Recursive doesn't seem to work as expected,"I have an automation test framework built using appium. I am using mocha as the test framework. I am facing some problems when using the --recursive flag.
My Project structure is something like this.
e2e
     -Test folder1
          -Test case file1
          -Test case file2
     -Test folder2
          -Test case file1
          -Test case file2
     -Test folder3
          -Test case file1
          -Test case file2

When I do a npm run e2e -- --runType configuration --recursive e2e/Testfolder1, all the folders are picked up for test execution
When I do a npm run e2e/Testfolder1 -- --runType configuration I get an error saying that it cannot find the scripts.
@boneskull , any inputs?",gkvappium,NONE,2018-05-28 10:57:40+00:00,True,2018-05-29 19:45:15+00:00,1.37,,4,2,2018-05-28 20:12:01+00:00,0.38,Munter,MEMBER,2,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3396,Mocha stops before finishing all tests,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha isn't finishing all my tests!
This is the only file I currently have to run my tests: https://github.com/ArcticZeroo/carabiner/blob/master/test/test.js
As you can see, there are 7 ""high level"" categories described within ""Carabiner"". However, after the 5th (Client), mocha stops.
I thought that perhaps something may have gone wrong within the prior tests that would lock up mocha or something, or that perhaps mocha had a limit to the number of descriptions. So I tried to comment out other tests, including ""Client"", everything before ""Client"", etc and it's still stopping at Client.
And I have absolutely no idea why!
The version of mocha I have on my machine is 3.5, which I am aware is two major versions out of date. However, travis' version is 5.2.0 (latest I presume, since the command run is just npm i -g mocha) and it's running into the same issue.
Here is the travis build for it: https://travis-ci.org/ArcticZeroo/carabiner
Steps to Reproduce

Clone https://github.com/ArcticZeroo/carabiner
Run ""npm i""
Get a slack token from somewhere. Doesn't matter where, because if you are able to reproduce my issue, you'll never even hit the testing environment where the contents of the organization actually matters.
Set this token to the env variable SLACK_TOKEN (set SLACK_TOKEN=yourtoken)
Run ""npm test"" (which just runs ""mocha"")
See that all tests in Carabiner up to client pass, and then mocha seems to think it's finished

Expected behavior: Mocha tests all 7 high level ""descriptions"" inside Carabiner
Actual behavior: Mocha tests the first 5
Reproduces how often: 100%
Versions
I don't think version is relevant here. As I said, it occurs on 5.2 and 3.5, along with node 7 and 8, on Windows and whatever Travis uses (some type of linux?)
Additional
Here's a screenshot of the current output on my machine, and it does exit once this is done
http://frozor.io/up/xLkVtV0.png
Ignore the experimental warning, that is a super recent thing that I am pretty sure is not related.",ArcticZeroo,NONE,2018-05-28 20:22:59+00:00,True,2018-05-28 21:17:38+00:00,0.04,,1,2,2018-05-28 21:13:35+00:00,0.04,ArcticZeroo,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3397,Before block makes Mocha exit with error but no logs,"Description
When I launch
./node_modules/mocha/bin/mocha --require babel-core/register test/services/user.test.js
on nodejs locally, I get all tests executed and see if they fail or pass.
If I execute tests on nodejs which I pulled from docker image (same version as I use locally 8.9.1)
I get this error log:
$ ./node_modules/mocha/bin/mocha --require babel-core/register test/services/user.test.js --reporter spec


ERROR: Job failed: exit code 1
FATAL: exit code 1

If I remove before block, everything runs normally on my nodejs docker image.
Code:
import { describe, it, before } from 'mocha';
import chai, { assert } from 'chai';
import chaiAsPromised from 'chai-as-promised';

chai.use(chaiAsPromised);

describe('\'users\' service', () => {
  before((function () {
    a += 1;
    return a;
  }));
  it('a should be set to 1', () => {
    assert(a === 1);
  });
});

Versions
Nodejs 8.9.1
Npm 6.1.0
Mocha 5.2",mindaugasnakrosis,NONE,2018-05-29 13:38:56+00:00,True,2018-05-29 15:41:37+00:00,0.09,,1,1,2018-05-29 15:41:37+00:00,0.09,mindaugasnakrosis,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3398,after/afterEach blocks are not executed if both --bail and --exit args are passed,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha does not execute after and afterEach blocks if both --exit and --bail arguments are passed.
Steps to Reproduce
// test.spec.js

describe('test', () => {
  afterEach(() => {
    console.log('hello world');
  });

  it('should log ""hello world"" to the console', () => {
    throw new Error();
  });
});
Run
$ node_modules/.bin/mocha test.spec.js --exit --bail

Expected behavior:
text ""hello world"" should be logged to the console
Actual behavior:
the text is not logged to the console
Reproduces how often:
100%
Versions



The output of mocha --version and node node_modules/.bin/mocha --version:
mocha is not instaleld globally
5.2.0 locally


The output of node --version:
v9.11.1


The version and architecture of your operating system:
macOS High Sierra 10.13.4


Your shell (bash, zsh, PowerShell, cmd, etc.):
fish, version 2.4.0",rainder,NONE,2018-05-30 09:41:16+00:00,True,2018-12-19 17:51:35+00:00,203.34,,7,13,2018-06-26 17:55:22+00:00,27.34,outsideris,MEMBER,3,0,0,4,['usability'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3401,fix netlify,Netlify builds have been broken since 42005f3.  Fix.,boneskull,MEMBER,2018-05-31 19:36:20+00:00,True,2018-06-06 20:09:58+00:00,6.02,,3,10,2018-05-31 20:13:08+00:00,0.03,boneskull,MEMBER,2,1,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3403,Mocha Watch don't execute all Tests with two test directories,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Moche execute 40 tests on start. 3 Tests in first directory, 37 Tests in second.
After change always only 3 tests are rerun. No failing tests.

Steps to Reproduce

package.json:
""scripts"": {
""testAll"": ""mocha -w test/e2e//*.js webserver/test/unit//*.js""
}
npm run testAll
Expected behavior: [What you expect to happen]
Run all tests again on change detection
Actual behavior: [What actually happens]
just run tests of the first folder on change
Reproduces how often: [What percentage of the time does it reproduce?]
every time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
5.2.0
The output of node --version:
v9.4.0
The version and architecture of your operating system:
Windows 7 64",FL0RIANMEYER,NONE,2018-06-01 16:27:37+00:00,False,,,,2,1,2018-07-21 13:29:03+00:00,49.88,outsideris,MEMBER,1,0,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3404,Two running instances of Mocha in Watch mode hang on first change detection,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Two running instances of Mocha in Watch mode hang on first change detection. Startup execution work as expected in both instances. Both instances just print 0 passing without failure prints. No Global instance of Mocha installed. Both instances in independent node_module directories.

Steps to Reproduce
package.json:
""scripts"": {
    ""test:devTest:service"": ""mocha -w compiled/devTest/test/unit/**/*.js -r mock-css-modules"",
    ""test:devTest:system"": ""mocha -w ../compiled/test/e2e/**/*.js"",
}

shell:
npm run test:devTest:service
npm run test:devTest:system // in second terminal


Expected behavior: [What you expect to happen]
Execute both instances as expected
Actual behavior: [What actually happens]
Two running instances of Mocha in Watch mode hang on first change detection.
Both instances just print 0 passing without failure prints.
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
5.2.0
The output of node --version:
v9.4.0
The version and architecture of your operating system:
Windows 7 64",FL0RIANMEYER,NONE,2018-06-01 16:58:23+00:00,False,,,,3,3,2018-06-02 07:45:46+00:00,0.62,outsideris,MEMBER,2,0,0,1,"['needs-feedback', 'unconfirmed-bug', 'usability']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False
3409,"How to run one specific ""it"" case by command without using ""only"" function?","I know how to run one specific file from the wiki, but how to run one ""it"" case?",li-01,NONE,2018-06-07 07:16:38+00:00,True,2018-06-07 17:27:00+00:00,0.42,,3,4,2018-06-07 08:09:20+00:00,0.04,ematipico,CONTRIBUTOR,1,1,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3410,Feature request: Output filter to re-run failed tests,Would it be possible to output a auto generated filter that can be used to re-run only the failed tests?,moander,NONE,2018-06-07 11:27:56+00:00,True,2018-06-07 17:35:46+00:00,0.26,,2,3,2018-06-07 17:35:46+00:00,0.26,outsideris,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3414,"--bail and --retries events: multiple ""end"" occurs","Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I found out that when both --retries and --bail option are used ""end"" event is emitted 2+ times. While this works fine for reporters I'm not sure if this behaviour is okay. However, this is even trickier when there's no --exit option specified. What is the test supposed to do after the bailed ""end""?
Steps to Reproduce
CLI: mocha -R test/util/events-reporter.js --bail --retries 1 test/bail-and-retries/index.spec.js
// test/util/events-reporter.js
const Base = require('mocha').reporters.Base;

module.exports = class Reporter extends Base {
    constructor(runner) {
        super(runner);

        [
            'waiting',
            'start',
            'end',
            'suite',
            'suite end',
            'test',
            'test end',
            'pass',
            'fail',
            'pending',
            'hook',
            'hook end',
        ].forEach((evtName) => {
            runner.on(evtName, this.onRunnerEventFired.bind(this, evtName));
        });
    }

    onRunnerEventFired(evtName) {
        console.log(evtName);
    }
};

// test/bail-and-retries/index.spec.js
describe('suite', () => {
    it('case', () => {
        throw new Error('fail');
    });
});
Expected behavior: needs discussion. Probably depends on --exit: if it's specified the program should stop executing after the bailed ""end"" is emitted. If it's not: 🤷‍♂️
Actual behavior: bailed ""end"" is emitted, then all other events occur including second ""end""
Reproduces how often: 100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 8.11.2
The version and architecture of your operating system: OSX
Your shell (bash, zsh, PowerShell, cmd, etc.): bash",1999,CONTRIBUTOR,2018-06-11 10:45:46+00:00,True,2019-02-10 18:53:57+00:00,244.34,v6.0.0,6,12,2018-07-21 13:40:11+00:00,40.12,outsideris,MEMBER,5,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3415,Adding a custom UI breaks watch mode,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When adding a custom UI while watch mode is enabled, tests are not re-run after saving a file.
Steps to Reproduce
// ui.js
const Mocha = require('mocha')

module.exports = Mocha.interfaces['my-ui'] = function (suite) {
  suite.on('pre-require', function (context, file, mocha) {
    const common = require('mocha/lib/interfaces/common')([suite], context)

    context.run = mocha.options.delay && common.runWithSuite(suite)
  })
}
./node_modules/.bin/mocha --watch --require ui.js --ui my-ui 'test/**/*.spec.js'
I also tried with the following code with the same result:
// ui.js
const Mocha = require('mocha')

module.exports = Mocha.interfaces['my-ui'] = function (suite) {}
Expected behavior: I expect watch mode to still be working, since this UI basically changes nothing from the default UI.
Actual behavior: On the first run, tests are run. On file save, the suite is run with 0 tests: 0 passing (0ms)
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 8.11.1
The version and architecture of your operating system: macOS 10.13.4
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",rochdev,NONE,2018-06-12 19:58:42+00:00,True,2018-07-22 15:42:39+00:00,39.82,,2,1,2018-07-22 15:42:39+00:00,39.82,outsideris,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3416,Test failure with large string is very slow.,"I have a test that compares very large string.
The case, it succeed, there is no problem. It is fast enough.
However the case, it fails, the test stops for a while. (More than 1min.)
I made a small example. It takes more than 1min on my local.
I guess building error message part is slow.
But I'm not sure why it takes so long time.
Steps to Reproduce
Run this test.
""use strict"";

const expect = require(""chai"").expect;

// Make large string
// If loop count is 10000, the test never finish.
const largeString = (function() {
    let result = """";
    for (let i=0; i<3000; i++) {
        result += ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"";
    }
    return result;
})();

describe(""Very slow test"", () => {

    it(""compare large string"", () => {
        expect(""a"").to.equal(largeString);
    });
});

Versions
mocha --version = 5.2.0
node --version = v8.8.1",shunjikonishi,NONE,2018-06-14 02:29:28+00:00,True,2018-06-18 17:16:07+00:00,4.62,,3,1,2018-06-18 17:16:07+00:00,4.62,outsideris,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3419,Please Explain Mocha's Run Cycle in the Docs,"I think there should just be an explain of mocha's run cycle in the docs in a succinct and simple way so that users understand and expect things correctly. It's easier if users know when or how before() is called or how the test function or describe function is invoked. Just a simple explanation of what's going on so we can write tests understanding how they are going to be invoked.
For an example take a look at how VueJs explains itself. It makes it easier to understand and work with VueJs becoz we understand how it works or just a rough idea of what's going on. With Mocha users (esp. newbies to it) don't even know why, when or how things are being done without experimenting with it through trial and error. These are some of those experiments that cause confusions when writing tests. Writing tests shouldn't be the main goal of a project. I actually take more time trying to debug mocha issues than writing my projects' code, which is kinda bummer.",emahuni,NONE,2018-06-19 06:52:45+00:00,True,2018-09-22 04:21:44+00:00,94.9,,2,0,,,,,0,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3421,"BDD and TDD files can be mixed when using ""--ui tdd"" but not when using ""--ui bdd""","As far as I understand you are not supposed to mix testing style i.e. have some files using BDD and some using TDD.
I mean, then what would the point be to specify the style with the ui flag if it would work automatically anyway?
However, if you do use ""mocha --ui tdd"" then indeed it seems to work with bdd files too.
But when you try with the opposite (""mocha --ui bdd"") it does not work with tdd files, which does not make sense to me.
Example with two files (using mocha 5.2.0):
test/test_bdd.js
var assert = require('assert');
describe('Array', function() {
  describe('#indexOf()', function() {
    it('should return -1 when the value is not present', function() {
		assert.equal([1,2,3].indexOf(4), -1);
    });
  });
});

test/test_tdd.js
var assert = require('assert');
suite('Array', function() {
  suite('#indexOf()', function() {
    test('should return -1 when not present', function() {
      assert.equal(-1, [1,2,3].indexOf(4));
    });
  });
});

mocha --ui tdd
Result:
2 passing tests
mocha --ui bdd
Result:
ReferenceError: suite is not defined",TomasJohansson,NONE,2018-06-20 22:49:25+00:00,True,2018-12-18 18:34:20+00:00,180.82,,5,6,2018-07-22 19:04:23+00:00,31.84,outsideris,MEMBER,3,1,0,0,"['confirmed-bug', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3422,Error while run test,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: [ Test the code and print the status  ]
Actual behavior: [
$ npm run test

inbox@1.0.0 test D:\Blockchain\solidity\inbox
mocha

D:\Blockchain\solidity\inbox\node_modules\mocha\lib\interfaces\index.js:1
(function (exports, require, module, __filename, __dirname) {
SyntaxError: Invalid or unexpected token
at createScript (vm.js:80:10)
at Object.runInThisContext (vm.js:139:10)
at Module._compile (module.js:616:28)
at Object.Module._extensions..js (module.js:663:10)
at Module.load (module.js:565:32)
at tryModuleLoad (module.js:505:12)
at Function.Module._load (module.js:497:3)
at Module.require (module.js:596:17)
at require (internal/module.js:11:18)
at Object. (D:\Blockchain\solidity\inbox\node_modules\mocha\lib\mocha.js:35:22)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! inbox@1.0.0 test: mocha
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the inbox@1.0.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\Siva\AppData\Roaming\npm-cache_logs\2018-06-21T12_33_10_485Z-debug.log
]",sivahanuman,NONE,2018-06-21 14:32:07+00:00,True,2018-06-23 09:50:51+00:00,1.8,,2,1,2018-06-23 09:50:51+00:00,1.8,outsideris,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3424,Getting timeout exceeded error while using Mocha,"While testing with Mocha I am getting the following error on running server.test.js


""before each"" hook for ""should get all todos"":
Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.


server.test.js
const expect = require('expect');
const request =  require('supertest');

const {app} = require('./../server');
const {Todo} = require('./../todos');


const todos = [
{
    text: 'This is text 1'
},
{
    text: 'This is text 2'
}
];


beforeEach((done) => {

Todo.remove({}).then(() => {
    return Todo.insertMany(todos);
}).then(() => done());
});


describe('GET /todos', () => {
it('should get all todos', (done) => {

    request(app)
        .get('/todos')
        .expect(200)
        .expect(res => {
            expect(res.body.length).toBe(2);
        })
        .end(done);
});
});

But if I do some changes in beforeEach() method like:
updated server.test.js
const expect = require('expect');
const request =  require('supertest');

const {app} = require('./../server');
const {Todo} = require('./../todos');


const todos = [
{
    text: 'This is text 1'
},
{
    text: 'This is text 2'
}
];

beforeEach((done) => {

Todo.remove({}).then(() => {
    Todo.insertMany(todos);
    done();
})
});


describe('GET /todos', () => {
it('should get all todos', (done) => {

    request(app)
        .get('/todos')
        .expect(200)
        .expect(
            expect(res.body.length).toBe(2);
        })
        .end(done);
});
});

Then I am getting no errors. Basically, by chaining promises in beforeEach() method I am running into an error but without that everything is fine.
Could anyone explain why is it happening?
server.js
var express = require('express');
var body_parser = require('body-parser');

const {mongoose} = require('./mongoose.js');
const {Todo} = require('./todos');
const {Todo_1} = require('./todos');

var app = express();

app.use(body_parser.json());



//  using GET method
app.get('/todos', (req, res) => {
Todo.find().then((todos) => {
    res.send(todos);
}, (err) => {
    res.status(400).send(err);
});
});

module.exports = {app}

app.listen(3000, () => {
console.log('Server is up on the port 3000');

})

Mocha version 5.2.0",neer17,NONE,2018-06-24 11:40:49+00:00,True,2018-07-24 09:38:35+00:00,29.92,,2,1,2018-07-24 09:38:35+00:00,29.92,Bamieh,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3425,Typescript classes within separate it functions pollute / interfer with each other?,"I asked about this on SO first just to make sure I was not missing something.  I'm going to publish the entire test suite soon, so that it's easy to see what's happening.  Just reporting it in case this is a bug or not supposed to happen.",oleersoy,NONE,2018-06-24 17:19:39+00:00,True,2018-11-10 04:58:25+00:00,138.49,,2,4,2018-06-27 19:47:15+00:00,3.1,oleersoy,NONE,0,0,0,2,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3426,Summary and test number are randomly wrong,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce
Launching my tests i have those one which executes after the SUMMARY and tests count :
describe(""weekly piloting reducer"", () => {

  describe(""action GET_CEX_DATA"", () => {

    it(""should be null in state before calling GET_CEX_DATA"", () => {
      const results = assign({}, INITIAL_STATE);

      expect(results).to.have.ownProperty(""dataProvider"");
      expect(results.dataProvider).to.equal(null);
    });

    it(""should set indicatorProvider in state"", () => {

      const results = WPReducer(assign({}, INITIAL_STATE), createAction(types.GET_CEX_DATA, {
        response : CEXMockedData,
        accounts : AccountsMockedData
      }), {});
      const ip = new IndicatorProvider(CEXMockedData, AccountsMockedData);

      expect(results).to.have.ownProperty(""dataProvider"");

      // temporaly put aside aggregatesDatas here, while numbers are still randomly generated
      // expect(results.dataProvider).to.deep.equal(new IndicatorProvider(CEXMockedData));
      expect({...results.dataProvider, aggregatesDatas: null}).to.deep.equal({...ip, aggregatesDatas: null });

    });

    it(""should modify indicatorProvider in state"", () => {
      const changedDatas = { ...CEXMockedData };

      changedDatas.data[3].labelCode = ""TEST"";

      const results = WPReducer(assign({}, INITIAL_STATE, new IndicatorProvider(CEXMockedData, AccountsMockedData)),
        createAction(types.GET_CEX_DATA, {
          response : changedDatas,
          accounts : AccountsMockedData
        }), {});

      const ip = new IndicatorProvider(changedDatas, AccountsMockedData);

      expect(results).to.have.ownProperty(""dataProvider"");

      expect({ ...results.dataProvider, aggregatesDatas: null }).to.deep.equal({ ...ip, aggregatesDatas: null });
    });
  });
});


Here is an output example :
    method isIPad
      ✔ should return false when user agent is a mac os
      ✔ should return true when user agent is for ipad
      ✔ should return true when user agent is for ipad with os 3.1.2
      ✔ should return false when user agent is for iphone
      ✔ should return false when user agent is for android
      ✔ should return false when user agent is for ie 7
    method isIPhone
      ✔ should return false when user agent is a mac os
      ✔ should return false when user agent is for ipad
      ✔ should return false when user agent is for ipad with os 3.1.2
      ✔ should return true when user agent is for iphone
      ✔ should return false when user agent is for android
      ✔ should return false when user agent is for ie 7
    method version
      for not an android or ios
        ✔ should return null when user agent is not an android or ios
        ✔ should return null when user agent is a mac os
      for Mac OS
        ✔ should return version when user agent is for iphone
        ✔ should return version when user agent is for iphone with version lower than 2
      for Android OS
        ✔ should return version when user agent is an android galaxy s4
        ✔ should return version when user agent is an android galaxy tab 3
        ✔ should return version when user agent is an android nexus 5
        ✔ should return version when user agent is an android nexus 5
  <FavoriteSportItem />
    ✔ Should call onDelete on delete icon click

Finished in 0.399 secs / 0.125 secs @ 16:06:03 GMT+0200 (CEST)

SUMMARY:
✔ 270 tests completed
  Sport utils
    method sortSportsBySportIdOrThirdAndSportIds
      ✔ should sort sports by sport id if sports are uniq in sports list
      ✔ should sort sports by sport and third ids if sports are NOT uniq in sports list
  weekly piloting reducer
    action GET_CEX_DATA
      ✔ should be null in state before calling GET_CEX_DATA
      ✔ should set indicatorProvider in state
      ✔ should modify indicatorProvider in state
  preferences actions
    method putPreferences
      ✔ should put new favorites sports


Expected behavior: [What you expect to happen]
SUMMARY: number of tests ok.
Actual behavior: [What actually happens]
SUMMARY: random number of tests ok.
tests are still executing until the real end of tests.
Reproduces how often: [What percentage of the time does it reproduce?]
Every time.
Versions
Tested in 5.2.0 and 5.0.0


The output of node node_modules/.bin/mocha --version: 5.0.5
The output of node --version: v8.11.1
The version and architecture of your operating system: Fedora 28 x64
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): Phantom 2.1.1
Any other third party Mocha related modules (with versions): karma-mocha-reporter : 2.2.x, karma-mocha: 1.3.x

Thank you.",Ex4l,NONE,2018-06-25 15:36:55+00:00,True,2018-06-26 14:22:45+00:00,0.95,,2,1,2018-06-26 14:22:45+00:00,0.95,outsideris,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3427,"Async Await Style Test , Falsely Timeouts Or Always Passes.","Prerequisites


[ x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When Testing Async Code that returns a Promise my Mocha Test Cases are either consistently getting this Error Message:
Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
Or Always Passing even if an assertion error occurs. I have performed numerous searches and read many issues but could not find a solution. Here is what I have tried so far.
I would like to just use the async & await style for my test cases like the Sample Below:
Steps to Reproduce
//what I expect to work but it Errors out with Error: Timeout of 2000ms exceeded. 
//For async tests and hooks, ensure ""done()"" is called; if returning Promise, ensure it resolves.

const dba = require('idb-pconnector');
const expect = require('chai').expect;
describe('exec', function(){
    it('performs action of given SQL String', async function(){
        let dbConn = new dba.Connection();
        dbConn.debug(true);
        let dbStmt = dbConn.connect().getStatement(),
        sql = 'SELECT * FROM QIWS.QCUSTCDT WHERE CUSNUM = 938472';

        console.time('exec');
        let result =  await dbStmt.exec(sql);
        console.timeEnd('exec');

        console.log(`Exec results: ${JSON.stringify(result)}`);
        expect(result).to.be.an('array');
        expect(result.length).to.be.greaterThan(0);
    });
});
Expected behavior:
I expect that the test to pass because an array is returned and the length should be greater than one.
Actual behavior:
Output:
exec: 2019.550ms
Exec results: [{""CUSNUM"":""938472"",""LSTNAM"":""Henning "",""INIT"":""G K"",""STREET"":""4859 Elm Ave "",""CITY"":""Dallas"",""STATE"":""TX"",""ZIPCOD"":""75217"",""CDTLMT"":""5000"",""CHGCOD"":""3"",""BALDUE"":""37.00"",""CDTDUE"":"".00""}]

0 passing (2s)
1 failing

1) exec
    performs action of given SQL String:
    Error: Timeout of 2000ms exceeded. For async tests and hook
The Strange part is that the result from the query is printed as soon as Mocha times out.
I have tried to increase the timeout time using this.timeout() with large numbers but it will not make a difference.
I'm sure that the test case does not actually take that long because I have tested it outside of Mocha and consistently am between 30-60 ms.
Here is the same code ran outside of Mocha:
const dba = require('idb-pconnector');
const expect = require('chai').expect;

async function exec() {
    let sql = 'SELECT * FROM QIWS.QCUSTCDT WHERE CUSNUM = 938472',
        dbConn = new dba.Connection();

    dbConn.debug(true);
    let dbStmt = dbConn.connect().getStatement();

    console.time('exec');
    let result = await dbStmt.exec(sql);
    console.timeEnd('exec');

    expect(result).to.be.an('array');
    expect(result.length).to.be.greaterThan(0);
    console.log(`Exec results: ${JSON.stringify(result)}`);
}

exec();
Output:
exec: 45.877ms
Exec results: [{""CUSNUM"":""938472"",""LSTNAM"":""Henning "",""INIT"":""G K"",""STREET"":""4859 Elm Ave "",""CITY"":""Dallas"",""STATE"":""TX"",""ZIPCOD"":""75217"",""CDTLMT"":""5000"",""CHGCOD"":""3"",""BALDUE"":""37.00"",""CDTDUE"":"".00""}]
You can clearly see that to perform the query time taken is way less than 2000ms.
I have tried other solutions like calling done() after the last assertion:
//Also times out
//Calling done() after last assertion
const dba = require('idb-pconnector');
const expect = require('chai').expect;

describe('exec', function(){
    it('performs action of given SQL String', async function(done){
        let dbConn = new dba.Connection();
        dbConn.debug(true);
        let dbStmt = dbConn.connect().getStatement(),
        sql = 'SELECT * FROM QIWS.QCUSTCDT WHERE CUSNUM = 938472';

        console.time('exec');
        let result =  await dbStmt.exec(sql);
        console.timeEnd('exec');

        console.log(`Exec results: ${JSON.stringify(result)}`);
        expect(result).to.be.an('array');
        expect(result.length).to.be.greaterThan(0);
        done();
    });
});
Same error from before is Outputted:
exec: 2017.694ms
Exec results: [{""CUSNUM"":""938472"",""LSTNAM"":""Henning "",""INIT"":""G K"",""STREET"":""4859 Elm Ave "",""CITY"":""Dallas"",""STATE"":""TX"",""ZIPCOD"":""75217"",""CDTLMT"":""5000"",""CHGCOD"":""3"",""BALDUE"":""37.00"",""CDTDUE"":"".00""}]

0 passing (2s)
1 failing

1) exec
    performs action of given SQL String:
    Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
Also tried to return a promise in this manner:
describe.('exec', () => {
  it('performs action of given SQL String', async () => {
    let dbConn = new dba.Connection();
    dbConn.debug(true);
    let dbStmt = dbConn.connect().getStatement(),
      sql = 'SELECT * FROM QIWS.QCUSTCDT WHERE CUSNUM = 938472';

    return dbStmt.exec(sql)
      .then(result => expect(result).to.be.an('array'));
  });
});
Also Produces a Timeout Error , Output:
exec: 2038.035ms
Exec results: [{""CUSNUM"":""938472"",""LSTNAM"":""Henning "",""INIT"":""G K"",""STREET"":""4859 Elm Ave "",""CITY"":""Dallas"",""STATE"":""TX"",""ZIPCOD"":""75217"",""CDTLMT"":""5000"",""CHGCOD"":""3"",""BALDUE"":""37.00"",""CDTDUE"":"".00""}]


0 passing (2s)
1 failing

1) exec
    performs action of given SQL String:
    Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves. 
Finally, After trying many options I found that wrapping the test code within a promise itself caused the timeout error to go away.
BUT this could be a false positive because when deliberately causing an assertion error the test still passes ,even though node prints the assertion error to the console.
//Wrapping the test code in a new Promise() gets rid of the Timeout Error BUT...
//Produces False Positive because Passes even when Unhandled Promise Rejections
const dba = require('idb-pconnector');
const expect = require('chai').expect;

describe('exec', function(){
    it('performs action of given SQL String', async function(done) {
    new Promise(async (resolve, reject) => {
        let dbConn = new dba.Connection();
        dbConn.debug(true);
        let dbStmt = dbConn.connect().getStatement(),
        sql = 'SELECT * FROM QIWS.QCUSTCDT WHERE CUSNUM = 938472';

        console.time('exec');
        let result =  await dbStmt.exec(sql);
        console.timeEnd('exec');

        console.log(`Type of result = ${typeof result}`);
        console.log(`Exec results: ${JSON.stringify(result)}`);
        expect(result).to.be.an('array');
        //Produce a Promise Rejection
        expect(result.length).to.be.greaterThan(100);
    });
    done();
    });
});
The output :
exec
constructed, dbconn={}
ExecAsync().
    ✓ performs action of given SQL String

1 passing (31ms)

Exec results: [{""CUSNUM"":""938472"",""LSTNAM"":""Henning "",""INIT"":""G K"",""STREET"":""4859 Elm Ave "",""CITY"":""Dallas"",""STATE"":""TX"",""ZIPCOD"":""75217"",""CDTLMT"":""5000"",""CHGCOD"":""3"",""BALDUE"":""37.00"",""CDTDUE"":"".00""}]
(node:443133) UnhandledPromiseRejectionWarning: AssertionError: expected 1 to be above 100
    at Promise
    at <anonymous>
(node:443133) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:443133) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Expected behavior:
I would have expected Mocha to reject the Test because of the Promise rejection , but it always will pass.
It may be that I'm missing something trivial if so point to what is correct way get Async Tests to work using the Async & Await Method.
Here is the the implementation of the exec() function being tested:
async exec(sqlString) {
let stmt = this.stmt;
    return new Promise((resolve, reject) => {
    stmt.exec(sqlString, function (result, error){
        if (error) {
        reject(error);
        } else {
        resolve(result);
        }
    });
    });
}
Reproduces how often:
100% of the time I have tried to run the test.
Versions

Im running:
bash 
node version 8.11.3
mocha version 5.2.0",abmusse,NONE,2018-06-25 22:21:17+00:00,True,2018-07-23 19:30:38+00:00,27.88,,4,5,2018-07-12 15:19:54+00:00,16.71,mrispoli24,NONE,2,0,0,2,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3429,initialise --inspector part the way through a test suite,"Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Debugging during tests can be very useful, since tests are a natural context from which to ""test"" code. The tests build the runtime context you need to explore .
Mocha runs perfectly well inside node with the V8 --inspector running, however, tests can take a very long time to execute when an inspector is connected to the inspection port
Its very easy to get node to shift into debugging mode dynamically during code execution
So I have created a ""mocha test"" that can be inserted part the way through the test suite, which pushes the node process into --inspector mode, and waits for the user to connect an inspector instance (e.g. chrome dev-tools inspector)
Steps to Reproduce
Run loads of tests with the inspector debugging
Expected behavior: wait a long time to arrive at the test you want to debug
Actual behavior: you have to wait a long time to arrive at the test you want to debug
Reproduces how often: always
Additional Information
is there like a ""mocha tests utilities"" library I could add this to? Or should I create my own importable npm module? Or it could conceivable be added to this repo, though it seems abit of an edge case for that",christopherreay,NONE,2018-06-29 17:13:14+00:00,False,,,,2,10,2018-10-27 17:50:55+00:00,120.03,stale,NONE,1,0,0,2,"['feature', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
3430,How to develop a plugin / extension to mocha,"Hi all,
For about a year now, we have been using a library we wrote called metamocha to run our tests. It allows us to add metadata to our tests in mocha, and then apply filters to filter out certain test cases.
We'd ideally like to be able to switch from using our own wrapper around mocha to instead use a plugin API to integrate metamocha into mocha. I could not find any documentation for writing plugins / extensions to mocha. Is there a way to do this?
Thanks,
Dan",daprahamian,NONE,2018-07-02 21:08:22+00:00,True,2018-09-04 08:29:08+00:00,63.47,,2,2,2018-07-07 15:24:58+00:00,4.76,Bamieh,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3431,Mocha is not waiting for the Promise to resolve.,"post(url,data,callback){
return this.service.post(url,data).then((response) => callback(response.status,response.data));
}
the above code is in another file, service is an axios object. here axios is returning a promise.
describe(""dummy Service"",function() {
it(""it dummy"",async function() {
this.timeout(4000);
return service.post('/dummy',{""abcd"":""zyxw""},function(statusCode,data){
expect(statusCode).to.equal(400);
expect(data.status).to.equal(""SUCCESS"");
});
});
});
Here axios is returning a promise and i am returning that promise. But the mocha is not picking this up, i will get test passed and when the promise resolves, i get assertion error.(because the status code is 200). Help will be appreciated, Thanks.",rkchilaka,NONE,2018-07-04 12:21:08+00:00,True,2018-07-07 11:18:06+00:00,2.96,,3,1,2018-07-04 22:00:05+00:00,0.4,Munter,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3433,Empty default value in cli options,"--globals <names>                       allow the given comma-delimited global [names] (default: )

If default value is an empty list([]), it shows as (default: ). It is confusing to users. No default or (default: []) is better.",outsideris,MEMBER,2018-07-16 03:04:20+00:00,True,2018-10-27 05:56:14+00:00,103.12,,2,3,2018-09-03 14:34:34+00:00,49.48,outsideris,MEMBER,2,0,0,0,['usability'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3434,Add asynchronous code the before action,"Hi. 👋🏼
How do you add asynchronous code the before action and have it not fail?
It seems this be discussed ad nauseam on Stack Overflow with various answers.
But the official way to handle this is missing (AFAIK) on the Mocha documentation.
 before((done) => {
    /*get the token and cookie returned from index*/
    chai
      .request(server)
      .get('/')
      .then((res) => {
        const $ = cheerio.load(res);
        csrfToken = $('meta[name=""csrf-token""]').attr('content');
        csrfCookie = getCSRFCookieFromRes(res);
      })
      .catch((err) => {
        //do something else
      })
  });

Results in a...
Server ""before all"" hook:
     Uncaught TypeError: Cannot read property 'apply' of undefined
      at Immediate.<anonymous> (node_modules/express/lib/router/index.js:635:14)

Using Mocha 3.2.0
Thanks!",stoplion,NONE,2018-07-18 21:54:51+00:00,True,2018-10-02 08:10:06+00:00,75.43,,3,6,2018-07-19 14:56:47+00:00,0.71,outsideris,MEMBER,2,0,0,1,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3435,Supertest promise causing timeout on first run?,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Returning a (supertest) promise times out on first test run, then succeeds on second run when using --watch.
Steps to Reproduce
With the following test file:
const request = require('supertest');
const express = require('express');
const app = express();

app.use((req, res) => {
  res.json({ hello: 'world' });
});

it('should return body', () => {
  return request(app)
    .get('/')
    .expect(200)
    .expect({ hello: 'world' });
});
Expected behavior:
Running it with mocha express.test.js should cause the test to pass.
Actual behavior:
Running it with mocha express.test.js causes a timeout:
Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves. (/private/tmp/koa-supertest-mocha/express.test.js)

Running it with --watch causes it to fail the first time, then succeed when the file is saved.
Reproduces how often:
100% of the time.
Versions
""devDependencies"": {
  ""express"": ""^4.16.3"",
  ""mocha"": ""^5.2.0"",
  ""supertest"": ""^3.1.0""
}

Node version: 10.7.0
OS: macOS 10.13.5
Additional Information
I suspected it could possibly be a regression in one of the other modules, but running the exact same file with jest@23.4.1 causes it to pass, which makes me think it must be runner related?
It's possible I'm doing something stupid, but I can't see it. It's weird that it runs fine under jest.",domharrington,NONE,2018-07-21 20:00:50+00:00,True,2018-07-22 18:28:10+00:00,0.94,,2,1,2018-07-22 18:28:10+00:00,0.94,outsideris,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3436,debug switch broken for node 8 and above,"Description
This issue was already opened once under #2925 , the issue was closed under the assumption that this issue had been fixed in 3.4.2. For some reason that is not the case, please have a look again into that issue.
I think you need to check the installed node version and supply different switches on node 8 and above.
Steps to Reproduce
Install Node 8
node --version
v8.11.3

Intall latest mocha
 npm install mocha@5.2.0

Run some mocha test with the -d option
./node_modules/.bin/mocha -d src/tests/mytests.js
(node:1006) [DEP0062] DeprecationWarning: `node --debug` and `node --debug-brk` are invalid. Please use `node --inspect` or `node --inspect-brk` instead.

Expected behavior: run tests while getting node debug output
Actual behavior: node returns 1 with the error DEP0062 node --debug and node --debug-brk are invalid
Reproduces how often: 100% of the time
Versions
node: v8.11.3
mocha: 5.2.0",jorgeelmundoso,NONE,2018-07-21 21:31:05+00:00,True,2018-07-21 21:50:45+00:00,0.01,,1,1,2018-07-21 21:50:45+00:00,0.01,jorgeelmundoso,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3439,afterEach runs before test completes,"import sinonChai from 'sinon-chai';

/* eslint-disable no-undef */
chai.use(sinonChai);
/* eslint-enable no-undef */

describe.only('temp', () => {
    beforeEach(() => {
        console.log('beforeEach');
    })

    afterEach(() => {
        console.log('afterEach');
    })

    it('temp test', (done) => {
        setTimeout(() => {
            console.log('setTimeout');
            done();
        }, 1000);
    })
})

In this case what I assume is that setTimeout needs to print before afterEach as my test hasn't completed until I call done() , but reverse is happening. Any idea ?",rohitsainimonotype,NONE,2018-07-24 17:23:28+00:00,True,2018-07-30 13:53:16+00:00,5.85,,3,7,2018-07-25 09:42:04+00:00,0.68,Bamieh,MEMBER,1,0,0,2,"['needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3442,Add JS API option equivalent too `--exit`,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

(Unchecked items are N/A)
I'd like to upgrade from Mocha 3.x to the latest, but need to work around the Mocha won't force exit behavior change in 4.0. We are launching programmatically (new Mocha({/* options */})), but I don't see an equivalent for the --exit flag. Is there one? If so, please document it (assuming I'm looking in the right place it isn't there). If not, please consider adding it (I think it would make sense to have feature parity between CLI arguments and programmatic arguments).
(accidentally filed as nodejs/node#22005 -- doh)",jacobq,NONE,2018-07-27 17:39:19+00:00,True,2018-07-28 07:39:20+00:00,0.58,,2,1,2018-07-28 07:39:20+00:00,0.58,outsideris,MEMBER,1,0,0,0,"['question', 'wontfix']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3443,"Use --inspect in place of --debug, for Node version 8.11.x upwards","Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
(node:48) [DEP0062] DeprecationWarning: `node --debug` and `node --debug-brk` are invalid. Please use `node --inspect` or `node --inspect-brk` instead.

I run into a problem where mocha failed to run on node:8.11.2 in debug mode.
From Node 8.11.x upwards, node --debug is officially replaced with node --inspect.
I know that add --inspect flag to all mocha call works, but I don't think this is proper, because other mocha front-ends like grunt or gulp extension does not support flag injections and they should not do this.
Reopening #3436.
Versions
$ node --version
v8.11.2",sunsagong,NONE,2018-07-29 08:05:25+00:00,True,2018-09-15 14:39:55+00:00,48.27,,6,9,2018-07-29 17:05:08+00:00,0.37,outsideris,MEMBER,3,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3444,Mocha event emitter bug (?) in order of events ,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
It seems that mocha event emitter has a bug. Though I'm not sure. I'm writing a tool which is running mocha programmatically. test end/suite end doesn't make sense to me.
Steps to Reproduce
consider the following use case:
Here is a code example in order to discuss/reproduce:
describe('Top', function (){
    it('Layer 1', function() {
    })
    it('Layer 1 - should fail', function() {
    })
    describe('Layer 2 - Top', function () {
        it('Layer 2', function() {
        })
        it('Layer 2 - should fail', function() {
        })
        describe('Layer 3 - Top', function () {
            it('Layer 3', function() {
            })
            it('Layer 3 - should fail', function() {
            })
        })
    })
})
In my code i do
const mocha = new Mocha({reporter: myRepoter}) 
// my reporter registers 'test end' and 'suite end' and many others
mocha.run()
Expected behavior: [What you expect to happen]
In my opinion the sequence of events should
test end(Layer 3) -> test end(Layer 3)-> suite end(Layer 3) -> test end(Layer 2) ->
test end(Layer 2) -> suite end(Layer 2) -> test end(Layer 1) -> test end(Layer 1) -> 
suite end(Layer 1)

Actual behavior: [What actually happens]
The sequence of events I'm getting looks like this
test end(Layer 3) -> test end(Layer 3) -> test end(Layer 2) -> test end(Layer 2) -> 
test end(Layer 1) -> test end(Layer 1) -> suite end(Layer 3) -> suite end(Layer 2) -> 
suite end(Layer 1)

Reproduces how often: 100 %
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0, no global mocha
The output of node --version:10.6.0
The version and architecture of your operating system: macOS 10.13.4 High Sierra
Your shell (bash, zsh, PowerShell, cmd, etc.): N/A
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): nope
The code transpiler being used:  ""ts-node"": ""^7.0.0"", ""typescript"": ""^2.9.2""",qballer,NONE,2018-07-31 14:18:25+00:00,True,2018-07-31 14:45:39+00:00,0.02,,1,1,2018-07-31 14:45:35+00:00,0.02,qballer,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3445,Silence Logs in debug mode of Karma browser,"Description
In the Karma debug console there are lines of useless output. This is traced to the module. I`d like to know how to fix this.

Steps to Reproduce
Once Karma is running, open debug console in browser and logs appear (see image)

It seems to be this piece in moch.js. If comment out the logs, things work as expected. (line 6959 for me)
BrowserStdout.prototype._write = function(chunks, encoding, cb) {
  var output = chunks.toString ? chunks.toString() : chunks
  if (this.label === false) {
    console.log(output)
  } else {
    console.log(this.label+':', output)
  }
  process.nextTick(cb)
}

How would I deal with fixing this permanently so I don`t see these logs? I'm not sure how to do this, or if it is possible, or if this is an issue on my end how I can solve it.",chrisdel101,NONE,2018-08-01 14:26:19+00:00,True,2018-09-19 21:02:23+00:00,49.28,,4,4,2018-08-04 07:20:04+00:00,2.7,outsideris,MEMBER,2,0,0,1,['needs-mcve'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
3446,Mock a function before the test file is run,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
This is more of a question about testing strategy using Mocha. I need to mock a global function (localStorage), but I need that mock to happen before the file is run, because localStorage is being called from within an imported module.
But I don't know where I can put the mock, because anywhere I put it, it doesn't work because the imported module has already run and failed for an undefined variable.
Example:
// module-a.js

export const state = {
  version: localStorage.getItem('version')
}
// module-a.test.js
import { state } from './module-a.js'

describe('my test', () => {
  it('should set version = localStorage version', () => {
    global.localStorage = {
      getItem: () => '1'
    }
    expect(state.version).to.equal('1')
  })
})
Error: localStorage is not defined",jim-moody,NONE,2018-08-01 16:52:12+00:00,True,2018-08-01 17:34:47+00:00,0.03,,2,2,2018-08-01 17:34:47+00:00,0.03,outsideris,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3448,Don't use eval,"In environments, where eval is not allowed (i.e. CSP without unsafe-eval), this line below likely fails:

  
    
      mocha/docs/example/chai.js
    
    
         Line 2215
      in
      f24607e
    
    
    
    

        
          
           var test = new Assertion(eval(val + operator + val2), msg); 
        
    
  


So you may say, adjust your CSP, but this is no solution. Of course, I want to run my tests and confirm that the tested code e.g. does not use eval and works correctly without eval.",rugk,NONE,2018-08-04 13:40:59+00:00,True,2018-08-04 16:37:01+00:00,0.12,,2,1,2018-08-04 16:37:01+00:00,0.12,Munter,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3449,"getting ""before all"" hook error","Hi,
I did not change anything but, a test that was working before is all of a sudden giving me the following error in stack trace:
""before all"" hook
Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
I tried everything that I could find online but nothing worked.
Thank you for your help!",fmegclark,NONE,2018-08-07 09:15:12+00:00,True,2018-08-08 17:15:35+00:00,1.33,,3,5,2018-08-07 15:07:11+00:00,0.24,fesebuv,NONE,0,0,0,2,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3450,Links for Code of Conduct in MAINTAINERS.md lead to CHANGELOG.md,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Reading Mocha Maintainer's Handbook the links to the code of conduct point to Mocha's changelog and not the actual code of conduct.
Steps to Reproduce

Head to https://github.com/mochajs/mocha/blob/master/MAINTAINERS.md
click any of the 2 links to the code of conduct

Expected behavior: Show code of conduct (https://github.com/mochajs/mocha/blob/master/.github/CODE_OF_CONDUCT.md)
Actual behavior: Changelog (https://github.com/mochajs/mocha/blob/master/CHANGELOG.md) is shown
Reproduces how often: 100%
Versions
MAINTAINERS.md on master since commit f060a74e 2017-10-16
Additional Information",mollstam,CONTRIBUTOR,2018-08-07 17:12:55+00:00,True,2018-08-07 18:08:22+00:00,0.04,,2,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3453,before or beforeAll?,"before：test pass but eslint error.
beforeAll: test error but eslint pass.

package version:
{
  ""eslint-config-react-app"": ""^2.1.0"",
  ""mocha"": ""^5.2.0""
}",FengShangWuQi,NONE,2018-08-08 09:24:12+00:00,True,2018-08-16 01:31:25+00:00,7.67,,3,7,2018-08-09 13:06:43+00:00,1.15,outsideris,MEMBER,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3454,Charts tool to be used with Mocha,"Are there any chart tools that can be used with Mocha to display Mocha test results delay?
I would like to create a dashboad that will display mocha test results (run for example every 5 minutes) in the form of a timeline:

x coodinate would be the time
y coordinate would be the response time

I've tried to find such a tool via common search engines but couldn't find interesting answers.
The goal is to monitor a website responsiveness with scenario developed with Mocha.
Can you suggest some tools?",noopole,NONE,2018-08-08 16:40:50+00:00,True,2018-09-04 08:28:01+00:00,26.66,,4,5,2018-08-09 06:45:04+00:00,0.59,Munter,MEMBER,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3456,how to use stackTraceFilter() ?,"Is there an example on how to use the stackTraceFilter function?
I just can't find out, how to configure it.
I wrote a question on stackoverflow for it: https://stackoverflow.com/questions/51853184/mocha-how-to-use-utils-function-stacktracefilter
i try to use the mocha utils stackTraceFilter() function
but i cannot find an example usage case where someone explains how to use it in ones test. I found the official tests here: link
But how can i implement it in my tests, which somehow look like that:
import { expect } from 'chai'
import 'mocha'

import { main, main2 } from './'

describe.only('index.ts', async () => {

    it('should start a job', async () => {
        // const R_RUN_MAIN = await main()

        await main2()
        // TEST
        expect(1).to.equal(1) // fails

    })

})

In the tests i can see the line
expect(filter(stack.join('\n')), 'to be', stack.slice(0, 3).join('\n'));

But how do i get the Stack for my test?
expect(1).to.equal(1) // fails

or in general, how do i get the stack and initialize the filter function for the whole file when, for example, code from an imported file is already failing and creating a long stack trace?",divramod,NONE,2018-08-15 06:55:44+00:00,True,2018-10-02 08:10:07+00:00,48.05,,4,6,2018-08-15 11:50:20+00:00,0.2,outsideris,MEMBER,2,0,0,1,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3457,"Mocha.run() callback called twice upon error with bail=true, after() hooks called second time","Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The Mocha.prototype.run() callback is called twice upon error with bail set to true. Also, any remaining after hooks are only called second time. Hopefully the examples below are self explanatory.
This behavior gives issues when the Mocha.prototype.run() callback expects cleanup code to have run, and the callback may only be run once.
Steps to Reproduce
package.json:
{
  ""dependencies"": {
    ""mocha"": ""^5.2.0""
  }
}

mocha.js
const Mocha = require('mocha')

const mocha = new Mocha({ bail: true })
mocha.addFile(`test.js`)

mocha.run(failures => {
    console.log('done')
})

test.js
describe('test', function() {
    it('fails', function() {
        throw new Error()
    })
    after(function() {
        console.log('after')
    })
})

Expected behavior:
node mocha.js
  test
    1) fails
after
  0 passing (4ms)
  1 failing
  1) test
       fails:
  Error
      at Context.<anonymous> (test.js:3:15)
done

Actual behavior:
node mocha.js
  test
    1) fails
  0 passing (4ms)
  1 failing
  1) test
       fails:
  Error
      at Context.<anonymous> (test.js:3:15)
done
after
done

Reproduces how often: Every time.
Versions
mocha 5.2.0
node-8.9.1
npm-6.0.1
Additional information
Monkey patching Runner.prototype.emit to log calls gets this output:
event: start
event: suite
event: suite
  test
event: test
event: fail
    1) fails
event: end

  0 passing (3ms)
  1 failing
  1) test
       fails:
  Error
      at Context.<anonymous> (test.js:3:15)

done
event: test end
event: hook
after
event: hook end
event: suite end
event: suite end
event: end
done",mntnoe,NONE,2018-08-15 09:51:11+00:00,True,2018-12-19 17:51:36+00:00,126.33,,3,4,2018-11-02 19:51:06+00:00,79.42,juergba,MEMBER,1,0,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3459,Unexpected token while using mocha + @babel/register,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Unable to run test files containing ECMAScript 6 modules using mocha + @babel/register.
❯ yarn test
yarn run v1.7.0
warning package.json: No license field
$ mocha --require @babel/register
/Users/<username>/mocha-reproduce/test/reproduce.js:1
(function (exports, require, module, __filename, __dirname) { import { expect } from ""chai"";
                                                                     ^

SyntaxError: Unexpected token {
    at new Script (vm.js:74:7)
    at createScript (vm.js:246:10)
    at Object.runInThisContext (vm.js:298:10)
    at Module._compile (internal/modules/cjs/loader.js:657:28)
    at Module._compile (/Users/<username>/mocha-reproduce/node_modules/pirates/lib/index.js:83:24)
    at Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Object.newLoader [as .js] (/Users/<username>/mocha-reproduce/node_modules/pirates/lib/index.js:88:7)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Module.require (internal/modules/cjs/loader.js:637:17)
    at require (internal/modules/cjs/helpers.js:20:18)
    at /Users/<username>/mocha-reproduce/node_modules/mocha/lib/mocha.js:250:27
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (/Users/<username>/mocha-reproduce/node_modules/mocha/lib/mocha.js:247:14)
    at Mocha.run (/Users/<username>/mocha-reproduce/node_modules/mocha/lib/mocha.js:576:10)
    at Object.<anonymous> (/Users/<username>/mocha-reproduce/node_modules/mocha/bin/_mocha:637:18)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
    at startup (internal/bootstrap/node.js:236:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:560:3)
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.

Steps to Reproduce
https://github.com/ganapativs/mocha-babel-register-bug-reproduce
Expected behavior: Should run test files containing ECMAScript 6 modules using mocha + @babel/register.
Actual behavior: Unable to run test files containing ECMAScript 6 modules using mocha + @babel/register.
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: command not found and  5.2.0
The output of node --version: v10.6.0
The version and architecture of your operating system: OSX 10.14 Beta
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh
Your browser and version (if running browser tests): nope
Any other third party Mocha related modules (with versions): nope
The code transpiler being used: babel

Additional info
I'm not really sure if its babel issue or mocha issue!",ganapativs,NONE,2018-08-15 16:53:03+00:00,True,2018-08-15 17:17:53+00:00,0.02,,1,1,2018-08-15 17:17:53+00:00,0.02,ganapativs,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3460,Mocha killed,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
After deleting node_modules and re-installing mocha breaks and is killed every time it's run.
Steps to Reproduce
When I use the command node_modules/mocha/bin/mocha I get the output
[1]    22568 killed     node_modules/mocha/bin/mocha
or 
killed: 9

Expected behavior: Start mocha command and start test
Actual behavior: mocha is killed and ends the test
Reproduces how often: 100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 5.0.5 but also updated to 5.2.0
The output of node --version: 8.11.0
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh
Your browser and version (if running browser tests): chrome 65 (latest)
Any other third party Mocha related modules (with versions):
The code transpiler being used: babel

Additional Information
The issue was removed when downgraded to mocha 4.0.1",toien44,NONE,2018-08-16 18:54:05+00:00,True,2018-09-16 12:47:53+00:00,30.75,,4,7,2018-08-23 23:49:30+00:00,7.21,plroebuck,MEMBER,2,0,0,1,"['needs-feedback', 'needs-mcve']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
3462,Advice to a sibling repository: how do you manage this repo?,"Prerequisites


[X ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ X] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ X] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ ]X Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Hey,
Looking for a friendly advice: our repo here just grew a little bit and we look for tools/tips about how to manage many PRs, permissions, and sub-repos. Do you use any other tool that GitHub for management? what type of GH account do you use (considering that developer account has limited permissions settings and team account has significant costs)?
Thanks!
Best,
Yoni",i0natan,NONE,2018-08-19 15:23:32+00:00,True,2018-09-04 08:25:27+00:00,15.71,,3,2,2018-08-26 09:07:00+00:00,6.74,Bamieh,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3463,Use of JSON export encourages Webstorm/IntelliJ to suggest it when the JSON (js) class is used.,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Export of 'JSON' in reporter/index.js causes Webstorm/IntelliJ to constantly suggest this as an import with an annoying popup. JSON comes with Javascript, so I think it's inappropriate to export this. I verified with JetBrains support that this export is what's causing this issue, and I think the IntelliJ is doing the right thing by suggesting this.

Steps to Reproduce
Simply install Mocha and use something like JSON.stringify in your code. Use IntelliJ/WebStorm and click on the JSON (the popup is suggested all the time even when you don't click on it and it's pretty annoying as it's over code you may want to look at).
Versions
Mocha 5.2.0
Additional Information
This should be very easy to fix, by renaming the json reporter module (not the reporter itself). However, I'm not sure if this will break the API or means of importing the JSON reporter.",francisu,NONE,2018-08-19 22:39:06+00:00,True,2018-08-20 16:17:30+00:00,0.74,,2,3,2018-08-19 22:39:37+00:00,0.0,francisu,NONE,1,0,0,1,"['reporter', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3468,"can Mocha.run() by add code, not by addFile before?","Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing [issues with the faq label](https://github.com/mochajs/mocha/issues?

Description

I hope that mocha could run the code for testing immediately, not by addFill before.
because our web can help users edit online code， it only save the code for testing.
now the only way the users could run testing code online is that we build testing files from the code, and addFile , run file with Mocha.
so, is there a  immediate way to run the code for testing with Mocha? thx",peng2018,NONE,2018-08-24 09:02:40+00:00,True,2018-08-28 03:07:40+00:00,3.75,,3,2,2018-08-24 11:28:17+00:00,0.1,plroebuck,MEMBER,1,0,0,1,"['invalid', 'needs-feedback', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3469,test process.on('uncaughtException') method,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
inside a it() test, my process.on('uncaughtException') not working, this is my code:
errorHelper.js
module.exports.logErrorInSentry = (err, type) => {
    let message = "" Initial error ("" + type + "") is: "" + err + "". "";
//... log to sentry ...
    console.error(message);
};
module.exports.handleUncaughtExceptionWithSentry = () => {
    process.on('error', (err) => {
        this.logErrorInSentry(err, 'error');
    });
    process.on('uncaughtException', (err) => {
        this.logErrorInSentry(err, 'uncaughtException');
    });
    process.on('unhandledRejection', (err) => {
        this.logErrorInSentry(err, 'unhandledRejection');
    });
    process.on('warning', (err) => {
        this.logErrorInSentry(err, 'warning');
    });
}


mocha Test
    describe('#handleUncaughtExceptionWithSentry', function () {
        it('should call logErrorInSentry functions', sinonTest(function () {
            const stubLogErrorInSentry = this.stub(ErrorHelper, 'logErrorInSentry');
            ErrorHelper.logErrorInSentry
            ErrorHelper.handleUncaughtExceptionWithSentry();
            console.log(nonExistantVar);
            expect(stubLogErrorInSentry.calledOnce).to.be.true;
        }));

add .run() make call to process.on works but it breaks stub",negstek,NONE,2018-08-24 15:01:07+00:00,True,2019-02-07 06:57:39+00:00,166.66,,3,5,2018-08-24 20:48:46+00:00,0.24,plroebuck,MEMBER,1,0,0,2,"['needs-mcve', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
3470,"Documentation missing ""describe"" and ""it"" imports","I'm currently reading the ""Get started"" documentation here:
https://mochajs.org/#getting-started
And here is the first example:
var assert = require('assert');
describe('Array', function() {
  describe('#indexOf()', function() {
    it('should return -1 when the value is not present', function() {
      assert.equal([1,2,3].indexOf(4), -1);
    });
  });
});

This code won't compile because describe and it are never imported. I can't even find where thery are supposed to be imported from. Is it from the mocha package itself?
Anyway, the documentation needs to be updated in this regards. Newcomers can't use mocha by relying solely on the official documentation.",ericmorand,NONE,2018-08-26 07:52:55+00:00,True,2018-08-26 08:57:57+00:00,0.05,,2,3,2018-08-26 08:57:57+00:00,0.05,Bamieh,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3472,utils.canonicalize runs out of memory,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
We are using sequelize. Each instance a bunch of ""private"" data.
Because of the many associations that we have, this sequelize internal  structure is very wide and deep.
Running utils.canonicalize on these instances hangs the machine eventually running out of memory.
Steps to Reproduce
To see the hang takes an example that is too big to create easily.
In lieu of that, in this simple/small example canonicalize takes ~275ms visiting  221,980 nodes in the tree with a max depth of 26.
In real usage I have had node crash after a long time and the terminal taking upwards of 20GB of memory.
const Promise = require('bluebird');
const Sequelize = require('sequelize');
const { canonicalize } = require('mocha/lib/utils');

const sequelize = new Sequelize(process.env.POSTGRES_CONNECT_URI, {
  dialect: 'postgres',
  logging: false,
  pool: { max: 10, min: 0, idle: 10000 },
});

const options = {
  schema: 'public',
  timestamps: false,
  underscored: true,
  paranoid: false,
};

const Parent = sequelize.define(
  'Parent',
  {
    id: {
      type: Sequelize.UUID,
      primaryKey: true,
      defaultValue: Sequelize.UUIDV4,
    },
    title: {
      type: Sequelize.STRING,
      allowNull: false,
    },
  },
  {
    ...options,
    tableName: 'parents'
  }
);

const Thing = sequelize.define(
  'Thing',
  {
    value: {
      type: Sequelize.STRING,
    },
    parent_id: {
      type: Sequelize.UUID,
      references: {
        model: 'parents',
        key: 'id',
      },
    },
  },
  {
    ...options,
    tableName: 'things'
  }
);

Thing.belongsTo(Parent, {  as: 'Parent',  foreignKey: 'parent_id' });
Parent.hasMany(Thing, { as: 'things', foreignKey: 'parent_id' });

Promise.resolve()
  .then(() => Parent.sync({ force: true }))
  .then(() => Thing.sync({ force: true }))
  .then(() => Parent.create({ title: 'stuff' }))
  .then(parent => Thing.create({ value: 'hi!', parent_id: parent.id }))
  .then(() => Thing.findOne({ include: { model: Parent, as: 'Parent' }}))
  .then(thing => {
    const start = Date.now();
    const canonicalized = canonicalize(thing)
    console.log(`Took: ${Date.now() - start}`);
  })
  .catch(err => console.log(`-E- ${err.stack || err}`))
  .finally(process.exit);

Expected behavior: [What you expect to happen]
To canonicalize the instance quickly, ideally ignoring all ""private"" properties.
Actual behavior: [What actually happens]
Machine hangs, node eventually runs out of memory and dumps.
On simple models that do complete ""private"" properties are logged in the error reporting making it hard to see what is failing.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
5.2.0 (was on 3.2.0, but upgraded before submitting issue).

The output of mocha --version and node node_modules/.bin/mocha --version:
5.2.0 for both
The output of node --version:
v8.11.3
The version and architecture of your operating system:
macOS 10.13.6 (also hangs on CircleCI/ubuntu)
Your shell (bash, zsh, PowerShell, cmd, etc.):
bash(dash on circle)
Your browser and version (if running browser tests):
N/A
Any other third party Mocha related modules (with versions):
""chai"": ""^4.0.2"",
""chai-shallow-deep-equal"": ""^1.4.6"",
The code transpiler being used:
N/A

Additional Information
Maybe something like:
    case 'object':
      if (typeof value.toCanonicalized === 'function') {
        canonicalizedObj = value.toCanonicalized(value);
      } else {
        canonicalizedObj = canonicalizedObj || {};
        withStack(value, function() {
          Object.keys(value)
            .sort()
            .forEach(function(key) {
              canonicalizedObj[key] = exports.canonicalize(value[key], stack);
            });
        });
      }
      break;",marneborn,NONE,2018-09-01 00:02:03+00:00,True,2018-10-07 14:30:44+00:00,36.6,,5,7,2018-09-02 09:02:35+00:00,1.38,Bamieh,MEMBER,3,0,0,2,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3473,Can't Install Mocha: Hostname/IP does not match certificate's altnames,"expected:
install mocha with npm i mocha
got this from the terminal after running the install
npm ERR! code ERR_TLS_CERT_ALTNAME_INVALID
npm ERR! errno ERR_TLS_CERT_ALTNAME_INVALID
npm ERR! request to https://registry.npmjs.org/mocha failed, reason: Hostname/IP does not match certificate's altnames: Host: registry.npmjs.org. is not in the cert's altnames: DNS:a.sni.fastly.net, DNS:a.sni.global-ssl.fastly.net

windows 10, 64bit
NPM v6.4.1
Node v10.8.0",yuens1002,NONE,2018-09-01 11:44:48+00:00,True,2018-09-03 10:35:26+00:00,1.95,,4,2,2018-09-02 07:59:29+00:00,0.84,outsideris,MEMBER,2,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3474,Can not transpile Coffescript when running mocha command,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I try to run Mocha with a CoffeeScript compiler and I get Unexpected token import.
Below is my command which I'm trying to run:
node_modules/mocha/bin/mocha --require coffeescript/register app/server/lib/server_tests/*.test.coffee --reporter mochawesome 
Here is the error stack trace
import should from 'should';
^^^^^^

SyntaxError: Unexpected token import
    at new Script (vm.js:51:7)
    at createScript (vm.js:136:10)
    at Object.runInThisContext (vm.js:197:10)
    at Module._compile (module.js:613:28)
    at Object.loadFile (/Users/timofte/Documents/work/projects/sonar/node_modules/coffeescript/lib/coffeescript/register.js:18:19)
    at Module.load (/Users/timofte/Documents/work/projects/sonar/node_modules/coffeescript/lib/coffeescript/register.js:53:36)
    at tryModuleLoad (module.js:501:12)
    at Function.Module._load (module.js:493:3)
    at Module.require (module.js:593:17)
    at require (internal/module.js:11:18)
    at /Users/timofte/Documents/work/projects/sonar/node_modules/mocha/lib/mocha.js:250:27
    at Array.forEach (<anonymous>:null:null)
    at Mocha.loadFiles (/Users/timofte/Documents/work/projects/sonar/node_modules/mocha/lib/mocha.js:247:14)
    at Mocha.run (/Users/timofte/Documents/work/projects/sonar/node_modules/mocha/lib/mocha.js:576:10)
    at Object.<anonymous> (/Users/timofte/Documents/work/projects/sonar/node_modules/mocha/bin/_mocha:637:18)
    at Module._compile (module.js:649:30)
    at Object.Module._extensions..js (module.js:660:10)
    at Module.load (module.js:561:32)
    at tryModuleLoad (module.js:501:12)
    at Function.Module._load (module.js:493:3)
    at Function.Module.runMain (module.js:690:10)
    at startup (bootstrap_node.js:194:16)
    at bootstrap_node.js:666:3


It works if I change that line to should = require 'should'
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version:v9.8.0
The version and architecture of your operating system: MacOS 10.13
Your shell (bash, zsh, PowerShell, cmd, etc.): Terminal
Your browser and version (if running browser tests): Google Chrome Version 68.0.3440.106
Any other third party Mocha related modules (with versions):     mochawesome - v3.0.3
The code transpiler being used: coffeescript - v2.3.1",elisei-timofte,NONE,2018-09-06 06:43:13+00:00,True,2018-10-02 08:10:05+00:00,26.06,,3,9,2018-09-06 12:35:42+00:00,0.24,plroebuck,MEMBER,2,0,0,1,"['needs-feedback', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3475,What happened to --no-exit option?,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
It seems that the --no-exit command line argument went missing at some point. I see it is still documented at https://mochajs.org/#--exit----no-exit but doesn't exist in the current version of mocha: 5.2.0.
Steps to Reproduce
$ npx mocha@5.2.0 --no-exit
npx: installed 24 in 4.714s

  error: unknown option `--no-exit'

Expected behavior: Mocha runs tests with the no exit (default) behavior.
Actual behavior: Error that there is no --no-exit option.
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v8.12.0
The version and architecture of your operating system: Win 10 64 bit
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): N/A
The code transpiler being used: N/A",dougwilson,CONTRIBUTOR,2018-09-14 01:22:34+00:00,True,2018-12-10 16:53:10+00:00,87.65,,5,17,2018-09-14 07:59:52+00:00,0.28,plroebuck,MEMBER,3,1,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3476,mocha will not exit after all test executed in async mode.,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",seelikes,NONE,2018-09-14 12:05:57+00:00,True,2018-09-16 03:01:26+00:00,1.62,,2,3,2018-09-14 12:08:59+00:00,0.0,seelikes,NONE,1,0,0,1,"['invalid', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3478,bcrypt.compare not executing when testing with mocha and chai-http ,"Hangs up  when bcrypt-compare start execution in test and eventually fails the test.
But tested code is correct and runs well on server without hanging up.",sysstas,NONE,2018-09-18 11:45:24+00:00,True,2018-09-18 13:23:13+00:00,0.07,,2,1,2018-09-18 13:23:13+00:00,0.07,Bamieh,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3479,bcrypt.compare not executing when testing with mocha and chai-http,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
bcrypt.compare not executing when testing with mocha and chai-http
Steps to Reproduce

Expected behavior: run test and complete test
Actual behavior: test fails because of error
Reproduces how often: everytime
Versions


mocha version 5.2.0 - global and local
node v8.11.4
windows 10 x64
cmd

""devDependencies"": {
""@types/chai-as-promised"": ""^7.1.0"",
""chai"": ""^4.1.2"",
""chai-as-promised"": ""^7.1.1"",
""chai-http"": ""^4.2.0"",
""eslint"": ""^5.5.0"",
""eslint-config-standard"": ""^12.0.0"",
""eslint-plugin-import"": ""^2.14.0"",
""eslint-plugin-node"": ""^7.0.1"",
""eslint-plugin-promise"": ""^4.0.1"",
""eslint-plugin-standard"": ""^4.0.0"",
""express-unit"": ""^2.1.1"",
""mocha"": ""^5.2.0"",
""mock-express-request"": ""^0.2.2"",
""mock-express-response"": ""^0.2.2"",
""nyc"": ""^13.0.1"",
""proxyquire"": ""^2.1.0"",
""sinon"": ""^6.2.0"",
""supertest"": ""^3.3.0"",
""ws"": ""3.3.2""
}
Additional Information
I posted question on stackoverflow. You can find code there.
https://stackoverflow.com/questions/52385375/bcrypt-compare-not-executing-in-chai-mocha-tests-but-executing-in-code
ERROR { Error: socket hang up
at createHangUpError (_http_client.js:331:15)
at Socket.socketOnEnd (_http_client.js:423:23)
at emitNone (events.js:111:20)
at Socket.emit (events.js:208:7)
at endReadableNT (_stream_readable.js:1064:12)
at _combinedTickCallback (internal/process/next_tick.js:138:11)
at process._tickCallback (internal/process/next_tick.js:180:9) code: 'ECONNRESET', response: undefined }
undefined
ERROR { Error: socket hang up
at createHangUpError (_http_client.js:331:15)
at Socket.socketOnEnd (_http_client.js:423:23)
at emitNone (events.js:111:20)
at Socket.emit (events.js:208:7)
at endReadableNT (_stream_readable.js:1064:12)
at _combinedTickCallback (internal/process/next_tick.js:138:11)
at process._tickCallback (internal/process/next_tick.js:180:9) code: 'ECONNRESET', response: undefined }",sysstas,NONE,2018-09-18 13:56:34+00:00,True,2018-09-19 13:37:28+00:00,0.99,,2,2,2018-09-18 14:25:35+00:00,0.02,plroebuck,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3480,Proposal: Make reporter options standard,"Description

Make reporterOptions a standard object within Mocha.options.
Reparent the following Mocha.options as reporterOptions properties:

useColors
useInlineDiffs
hideDiff


Update all reporter constructors to accept second argument options.
Update Mocha.run() to pass options.reporterOptions to reporter constructor. Currently passes options, but most Mocha option properties are not applicable/unused by reporter.

Update XUnit reporter constructor to expect options.reporterOptions


Migrate Base reporter settings portion of Mocha.run() to Base reporter constructor (or somewhere more related).",plroebuck,MEMBER,2018-09-18 19:14:09+00:00,False,,,,4,9,2018-10-05 01:46:28+00:00,16.27,plroebuck,MEMBER,1,1,0,1,['reporter'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3481,JSON Serializable runner <-> reporter communication,"I would like to bring some new life into a very old discussion, regarding the format of the communication between the runner and the reporters. I'll start by outlining my use case, then a brief coverage of the old discussion, and finally a proposed way forward.
Use case
I've recently been working on two large project which aims to normalize platforms by providing a common API (fanny-pack, wext). When working on those, I've had the need to test things in many different environments. While doing this I still want to have the ease of use, and the nice reporters, from mocha.
Currently, I'm trying to automate running tests inside a WebExtension. I have a script that will package mocha and some glue with a user-specified test file, build an extension out of it, and then use webdriver to test the extension in an actual browser.
While this currently works, I don't have a good way to get the mocha test output from inside of the extension, to the terminal that triggered the script.
The closest I can get is to use the tap reporter inside the extension, and then send that out to the script which can use tap-mocha-reporter to print the output.
The problem with this approach is that the TAP protocol have a lot less info than is needed, and the test output has incorrect timings and are missing other information. This results in a sub-par user experience.
Old discussions
This was discussed before in #492, and it seems that the maintainers had a positive attitude towards it. The problems with using TAP have also been brought up, and they are the same that I face today.
There even was a PR working towards this goal, that unfortunately never got merged: #685
Proposed road forward
I would like for there to be an easy way of splitting up the runner and the reporter into different processes. This would probably mean something like 1) working with the internals to make sure that the events passed to the runners are JSON-serializable, 2) making it easy to run the reporters standalone and just pass it a stream of events and 3) providing a way to get the raw events from mocha instead of using a reporter.
I think that we should be able to make these changes without breaking backward compatibility.
I'm very open to discussions around this, and I'm also happy to put in the work if we find a good way forward for this.
Thanks for reading ❤️",LinusU,CONTRIBUTOR,2018-09-19 21:09:22+00:00,False,,,,5,6,2018-09-20 12:50:13+00:00,0.65,Bamieh,MEMBER,2,1,0,2,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3482,npm package 1.18.2 seems to be incorrectly installing a newer version,"Prerequisites


[ x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
mocha npm 1.18.2 package actually downloads actually a different package version
Steps to Reproduce
Expected behavior: [What you expect to happen]
It seems that downloading the 1.18.2 mocha npm package for mocha is actually downloading the wrong package version
See the attached .zip - this was the original we were pulling from npm. Some time in the last few months the package changed for the same version. When doing a recursive diff, you can see the files are significantly different throughout the package.
package.zip
Versions
1.18.2",brentpicasso,NONE,2018-09-20 01:25:29+00:00,True,2018-09-20 06:24:45+00:00,0.21,,1,1,2018-09-20 06:24:45+00:00,0.21,brentpicasso,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3483,Travis job spawn errors in tests,"Description
Two Growl-related spawn errors occur in Travis jobs example, but they don't cause jobs to fail.
Affected tests

test.node.jsapi

after timeouts suite


test.node.unit

after stackTraceFilter() suite



Sample job output
An error occured. { Error: spawn notify-send ENOENT
    at Process.ChildProcess._handle.onexit (internal/child_process.js:232:19)
    at onErrorNT (internal/child_process.js:407:16)
    at process._tickCallback (internal/process/next_tick.js:63:19)
  errno: 'ENOENT',
  code: 'ENOENT',
  syscall: 'spawn notify-send',
  path: 'notify-send',
  spawnargs:
   [ '-i',
     '/home/travis/build/mochajs/mocha/assets/growl/ok.png',
     '--hint=int:transient:1',
     'Passed',
     '280 tests passed in 1497ms' ] }
Solution
These can be squelched on Ubuntu by installing libnotify-bin in "".travis.yml"".
addons:
  apt:
    packages:
    - libnotify-bin",plroebuck,MEMBER,2018-09-22 03:25:02+00:00,True,2018-10-24 18:50:29+00:00,32.64,,2,6,2018-09-28 16:51:06+00:00,6.56,outsideris,MEMBER,2,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3484,SyntaxError: Unexpected token import,"I spent so much time making it work, and it doesn't.
package.json
""scripts"": {
    ""test"": ""node_modules/mocha/bin/mocha --require @babel/register""
},
""devDependencies"": {
    ""@babel/cli"": ""^7.1.0"",
    ""@babel/core"": ""^7.0.1"",
    ""@babel/plugin-proposal-class-properties"": ""^7.0.0"",
    ""@babel/plugin-proposal-object-rest-spread"": ""^7.0.0"",
    ""@babel/preset-env"": ""^7.1.0"",
    ""@babel/preset-react"": ""^7.0.0"",
    ""@babel/register"": ""^7.0.0""
    ""mocha"": ""^5.2.0""
}

.babelrc
{
  ""presets"": [
    ""@babel/preset-env"",
    ""@babel/react""
  ],
  ""plugins"": [
    ""@babel/plugin-proposal-class-properties"",
    ""@babel/plugin-proposal-object-rest-spread""
  ]
}

npm test <path to file> says: SyntaxError: Unexpected token import",Gentlee,NONE,2018-09-22 11:48:18+00:00,True,2018-09-23 10:27:02+00:00,0.94,,5,14,2018-09-22 14:02:05+00:00,0.09,Gentlee,NONE,2,0,0,3,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3485,Enhanced control of test context,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When I install and use 'mocha-ctx', I get enhanced control of context! It seems like it keeps doing this every time I use it with mocha.
Steps to Reproduce
npm i mocha-ctx
require('mocha-ctx')
describe('mocha-ctx', () => {
  before(() => {
    context({
      cool: 'stuff!',
      fn: () => 'I see cool ' + context().cool
    })
  })
  it('can do this', function() {
    this.someProp = 10
    assert(this === context())
  })
  it('can now provide context (i.e. ""this"") to lambdas', () => {
    assert(context().someProp === 10)
  })
  describe('layer 1', () => {
    it('can do other stuff too', () => {
      // this will NOT create a 'cool' property on layer 1 context
      // but will actually set 'cool' property at top context (or wherever
      // 'cool' was defined in context hierarchy)
      context().cool = 'way'
      assert(context().fn() === 'I see cool way')
      context().timeout(-42)
      context().skip()
    })
  })
})
Expected behavior: [What you expect to happen]
That someone, somewhere will jump up and down in joy.
Actual behavior: [What actually happens]
That they will smile too!, and that mocha will want these features as part of mocha.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
1.0.0-a.0
Additional Information
Additional 'bugs'

Backwards compatible (explicit opt in).
Access test context inside lambda functions without passing as parameter.
Every test gets its own context, sharing parent context, hiding private context.
Explicitly declared contextual properties and functions, so lower contexts can set higher shared properties.
Contextualized 'global' || 'window', with stronger access and use detection on top of leak detection.

More details at https://github.com/papercuptech/mocha-context",papercuptech,NONE,2018-09-24 00:16:49+00:00,True,2018-09-28 15:20:09+00:00,4.63,,5,11,2018-09-24 05:42:53+00:00,0.23,plroebuck,MEMBER,3,0,0,2,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3489,Programmatical Require API,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

How do I use the --require flag programmatically? The faq mentions nothing about this.

Versions


The output of mocha --version and node node_modules/.bin/mocha --version: v5.2.0
The output of node --version: v10.10.10
The version and architecture of your operating system: openSUSE Leap 15
Your shell (bash, zsh, PowerShell, cmd, etc.): bash",def0x099,NONE,2018-10-06 11:09:14+00:00,True,2018-10-11 09:26:28+00:00,4.93,,3,2,2018-10-06 11:14:06+00:00,0.0,def0x099,NONE,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3490,Mocha does not catch crash in native extension,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Hi,
I am running tests with electron-mocha which runs mocha behind the scenes AFAIK.
That's the output from CI:
> electron-mocha
dyld: lazy symbol binding failed: Symbol not found: __ZN2v816FunctionTemplate3NewEPNS_7IsolateEPFvRKNS_20FunctionCallbackInfoINS_5ValueEEEENS_5LocalIS4_EENSA_INS_9SignatureEEEiNS_19ConstructorBehaviorENS_14SideEffectTypeE
  Referenced from: /Users/travis/build/pronebird/NSEventMonitor/node_modules/robotjs/build/Release/robotjs.node
  Expected in: flat namespace
dyld: Symbol not found: __ZN2v816FunctionTemplate3NewEPNS_7IsolateEPFvRKNS_20FunctionCallbackInfoINS_5ValueEEEENS_5LocalIS4_EENSA_INS_9SignatureEEEiNS_19ConstructorBehaviorENS_14SideEffectTypeE
  Referenced from: /Users/travis/build/pronebird/NSEventMonitor/node_modules/robotjs/build/Release/robotjs.node
  Expected in: flat namespace
The command ""npm run test"" exited with 0.
Skipping a deployment with the releases provider because this is not a tagged commit

So kinda ""no pasa nada"" even though the node process got wrecked. Is there any way to catch those kinds of errors in Node.js?
Steps to Reproduce

Expected behavior: [What you expect to happen]
Return non-zero exit code
Actual behavior: [What actually happens]
Presumably mocha exits with zero code
Reproduces how often: [What percentage of the time does it reproduce?]
Always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: n/a | 5.2.0
The output of node --version: v10.2.1
The version and architecture of your operating system: macOS on Travis CI
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",pronebird,NONE,2018-10-10 11:29:21+00:00,True,2018-10-11 09:44:57+00:00,0.93,,3,2,2018-10-10 19:41:33+00:00,0.34,plroebuck,MEMBER,1,0,0,1,"['integration', 'invalid', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3514,autoscroll mocha html reporter,"We use saucelabs which records browser tests in different browsers. The recordings aren't meaningful as it only shows the first few tests, if something goes kaboom in an off-scroll area, it's not easy to know.
Would be nice to set an option to mocha so it automatically scrolls html #mocha (like a cli console) when there is new output.",nojvek,NONE,2018-10-12 00:04:04+00:00,False,,,,3,0,,,,,0,0,0,0,"['feature', 'nice-to-have', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3516,[Proposal] Request to add support for CI/CD pipelines for Test reporting,"Issue:
Currently Azure DevOps and Circle CI/CD systems provide rich test experience.
In order to get this experience/track test reporting, users has to explicitly generate test reports (currently supported format JUnit) by 3rd party plugins and publish test results.
Most of the popular open source projects aren't using 3rd party reporting plugins.
To keep local development experience and CI/CD build experience similar, scripts to build/test are written to print test results to console (std_out).
To get richer test experience in CI/CD pipeline, customers has to modify their scripts and often need to add 3rd party plugins.
This is a steep learning and test reporting is one of the important data that should be easily available for open source github projects.
Proposal for solution(s):
Generate test results file based on environment variables:
In this approach, test runners will generate test results file along with regular console output if an environment variable is set.
CI/CD pipelines can set this variable to desired test output location where they can automatically publish test results by consuming test results file generated by test runners (mocha).
This simple flag will make sure test runners are not going through any change in behavior in terms of execution or context they are running and users don't require go through any modification to their source/scripts.
Happy to listen to community feedback. Feel free to share other ideas if proposed solution is not feasible one.",nigurr,NONE,2018-10-15 05:52:58+00:00,True,2018-11-02 18:04:36+00:00,18.51,,3,9,2018-10-17 04:19:02+00:00,1.93,nigurr,NONE,1,0,0,2,"['feature', 'reporter', 'usability', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
3519,Mocha ignores timeout on Promise test functions,"Prerequisites

[ X] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ X] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Mocha does not respect specifying a timeout for tests that return promises.
I want to set a max timeout by invoking mochaTest.timeout(1000) but it is ignored.
Steps to Reproduce
describe( ""reproduce promise timeout ignores"", function () {

	it( ""should timeout"", function () {
		this.timeout( 1000 );
		return new Promise( function ( resolve, reject ) {
			setTimeout( function () {
				resolve();
			}, 3000 );
		} );
	} );

	const test = it( ""should timeout2"", function () {
		return new Promise( function ( resolve, reject ) {
			setTimeout( function () {
				resolve();
			}, 3000 );
		} );
	} );
	test.timeout( 1000 );

} );
Expected behavior: [What you expect to happen]
expect the tests to fail after 1000ms due to timeout.  I can understand why the first ""should timeout"" test might not work with my desired timeout (setting the timeout inside the async method) but the second ""should timeout2"" should work as desired.
Actual behavior: [What actually happens]
tests pass after aprox 3000ms
  reproduce promise timeout ignores
    √ should timeout (3006ms)
    √ should timeout2 (3001ms)

  2 passing (6s)
Reproduces how often: [What percentage of the time does it reproduce?]
all the time
Versions
mocha --version
5.2.0

node_modules/.bin/mocha --version
5.2.0

node --version
v8.11.4

os:
win10 x64 v1803 b17134.345

shell:
cmd and/or powershell

browser ver:
N/A

mocha modules:
N/A

transpiled via:
N/A

Additional Information
my full commandline for running the tests:
'C:\Users\jason\AppData\Roaming\npm\mocha.cmd' '--watch' '--colors' '--trace-warnings' '--inspect-brk=45370' './dist/**/mocha.test.js'",jasonswearingen,NONE,2018-10-16 23:35:57+00:00,True,2018-11-01 17:53:01+00:00,15.76,,3,17,2018-10-18 03:04:10+00:00,1.14,jasonswearingen,NONE,2,0,0,1,"['async', 'documentation', 'invalid']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3520,adding timestamp in multiple describe prints sametime ,"file auth.js
var now = new Date();
describe('AUTH test set: ' + now.toUTCString(), () => {
//has test cases which will run for atleast 2 mins
}
file info.js
var now = new Date();
describe('INFO test set: ' + now.toUTCString(), () => {
//has test cases which will run for atleast 2 mins
}
I run the code using the below command,
mocha test/auth.spec.js test/info.spec.js
when I see the console I am seeing the results as below
AUTH test set: Wed, 17 Oct 2018 07:13:10 GMT
INFO test set: Wed, 17 Oct 2018 07:13:10 GMT
Why are the time stamps are same in AUTH test set and INFO test set?",alnvny,NONE,2018-10-17 07:41:40+00:00,True,2018-10-20 12:09:29+00:00,3.19,,3,4,2018-10-18 09:18:43+00:00,1.07,outsideris,MEMBER,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3521,Inconsistent event output in browser with json-stream reporter,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
There is inconsistent output in browser with json-stream reporter. The start/pass/fail events are printed to stdout as JSON messages but the end event has string 'stdout' prepended to it. I believe that such inconsistency is not necessary.
The inconsistency comes from this line: 
  
    
      mocha/lib/reporters/json-stream.js
    
    
         Line 50
      in
      01171b1
    
    
    
    

        
          
           process.stdout.write(JSON.stringify(['end', self.stats])); 
        
    
  


The end event uses process.stdout.write instead of console.log to print its output. browser-entry module uses the package browser-stdout which optionally prepends a label to console messages. In this case it prepends 'stdout:'.
Steps to Reproduce


Configure Mocha to use json-stream reported in the browser.
Run a trivial test case in browser.
Inspect console output using the page debugger.

Expected behavior: [What you expect to happen]
Events are printed to console as JSON messages.
Actual behavior: [What actually happens]
All events except the end event is printed as JSON messages.
Reproduces how often: [What percentage of the time does it reproduce?]
All the time.
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:

mocha --version
bash: mocha: command not found

node node_modules/.bin/mocha --version
5.2.0


The output of node --version:

node --version
v10.5.0


The version and architecture of your operating system: Debian Stretch amd64
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): Puppeteer 1.9.0, Chromium 594312, Chrome 67.0.3396.99
Any other third party Mocha related modules (with versions): none
The code transpiler being used: none",rla,NONE,2018-10-17 08:25:58+00:00,True,2018-10-20 20:45:44+00:00,3.51,,3,5,2018-10-17 08:32:59+00:00,0.0,rla,NONE,2,0,0,1,"['browser', 'confirmed-bug', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3523,Use the global variable outer of `it` block,"When i run this code i get always the value of undefined for the global.currentValue in the description of it
Is there any solution to solve this probleme and that i can use a global variable outer of it block ?
describe('Test run', () => {
   before(function(){
      global.currentValue = 'first'
   });
   it(global.currentValue + 'test spec', function(done){
      // do the test
   });
   after(function(){
   });
})

Versions


The output of mocha --version and node node_modules/.bin/mocha --version: v5.2.0
The output of node --version: v10.6.0
The version and architecture of your operating system: Debian
Your browser and version (if running browser tests): Chromium v71",hadrich-hatem,NONE,2018-10-18 11:53:18+00:00,True,2018-10-18 14:27:22+00:00,0.11,,3,1,2018-10-18 14:27:22+00:00,0.11,Munter,MEMBER,1,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3524,Fix Base reporter test failure due to timeout,"Description
Quite often see existing test fail after push due to timeout (especially on Appveyor),
which causes CI build to fail.
  1) Base reporter
       should interpret Chai custom error messages:
     Error: Timeout of 500ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves. (C:\projects\mocha\test\reporters\base.spec.js)
      at Test.Runnable._timeoutError (lib\runnable.js:440:10)
      at done (lib\runnable.js:317:18)
      at callFn (lib\runnable.js:395:7)
      at Test.Runnable.run (lib\runnable.js:364:7)
      at Runner.runTest (lib\runner.js:455:10)
      at C:\projects\mocha\lib\runner.js:573:12
      at next (lib\runner.js:369:14)
      at C:\projects\mocha\lib\runner.js:379:7
      at next (lib\runner.js:303:14)
      at C:\projects\mocha\lib\runner.js:342:7
      at done (lib\runnable.js:319:5)
      at callFn (lib\runnable.js:395:7)
      at Hook.Runnable.run (lib\runnable.js:364:7)
      at next (lib\runner.js:317:10)
      at Immediate.<anonymous> (lib\runner.js:347:5)
Steps to Reproduce
Expected behavior:
Expect untouched code to pass all existing tests.
Actual behavior:
Sometimes fails for Base reporter attempting to interpret Chai custom error messages due to timeout.
Reproduces how often:
Random failures.
Additional Information
May need to increase timeout for this test so it passes predictably.",plroebuck,MEMBER,2018-10-19 13:42:08+00:00,True,2018-10-24 20:34:28+00:00,5.29,,1,0,,,,,0,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3526,JSONStream ctor misnamed,"Description
JSONStream constructor is misnamed, possibly due to cut'n'paste creation.",plroebuck,MEMBER,2018-10-20 01:22:33+00:00,True,2018-10-30 16:59:22+00:00,10.65,,2,2,2018-10-21 00:33:47+00:00,0.97,outsideris,MEMBER,2,0,0,0,"['reporter', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3530,Mocha does not recognise third party reporters installed from a local directory,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When developing a third party reporter, mocha does not recognise the reporter package if it is installed usingnpm install with a local package directory.
The npm install command runs successfully. The package appears under the node_modules directory. However, when the test script is run, mocha throws an error saying ""reporter not found"".
This does NOT happen when the package is published and installed through the normal npm system. The third party reporter installs and runs as expected.
Steps to Reproduce

Create a third party reporter as an npm package.
Attempt to install it in a second tester package with the following command: npm install ../path-to/my-third-party-reporter

Expected behavior: The reporter runs as normal, my tests are run and output is produced.
Actual behavior:
With the following test script in package.json:
""scripts"": {
    ""test"": ""mocha ./**.test.js --reporter my-third-party-reporter --exit""
  },

mocha throws:
""my-third-party-reporter"" reporter not found
/Users/aidan/web/my-third-party-reporter-tester/node_modules/mocha/lib/mocha.js:193
      throw new Error('invalid reporter ""' + reporter + '""');
      ^

Error: invalid reporter ""my-third-party-reporter""
    at Mocha.reporter (/Users/aidan/web/my-third-party-reporter-tester/node_modules/mocha/lib/mocha.js:193:13)
    at Object.<anonymous> (/Users/aidan/web/my-third-party-reporter-tester/node_modules/mocha/bin/_mocha:368:7)
    at Module._compile (module.js:652:30)
    at Object.Module._extensions..js (module.js:663:10)
    at Module.load (module.js:565:32)
    at tryModuleLoad (module.js:505:12)
    at Function.Module._load (module.js:497:3)
    at Function.Module.runMain (module.js:693:10)
    at startup (bootstrap_node.js:188:16)
    at bootstrap_node.js:609:3

Reproduces how often: 100%
Versions
Mocha version: 5.2.0 (not installed globally)
Node version: v8.11.1
OS: MacOs High Sierra v10.13.6
Shell: iTerm2 build 3.2.4beta2",aido179,NONE,2018-10-23 12:36:53+00:00,True,2018-12-04 21:15:19+00:00,42.36,,3,13,2018-10-23 13:37:26+00:00,0.04,plroebuck,MEMBER,1,0,0,1,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3531,Error format is different depending on message content,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The presence of colon (:) symbol in Error reported by assertion engine along with showDiff set to true and fields expected and actual present alters the format of error in default reporter.
Steps to Reproduce
Sample test (sample.js):
class TestError extends Error {
	constructor(message) {
		super(message + ': expected something else');
		this.showDiff = true;
		this.actual = null;
		this.expected = null;
	}
}

it('Should print message without a colon', () => { 
	throw new TestError('message without a colon'); 
});

it('Should print message with a colon(:)', () => {
	throw new TestError('message with a colon(:)');
});
Run mocha sample.js
Expected behavior: [What you expect to happen]
Error messages follow the same format. Whichever it is, but I like stripped more because it allows to get rid of content if it's too long.
Actual behavior: [What actually happens]


  1) Should print message without a colon
  2) Should print message with a colon(:)

  0 passing (8ms)
  2 failing

  1) Should print message without a colon:

      message without a colon
      + expected - actual


      at Context.it (sample.js:11:8)

  2) Should print message with a colon(:):

      Error: message with a colon(:): expected something else
      + expected - actual


      at Context.it (sample.js:15:8)




Note that message that did not have colon was stripped off expected: something else part and Error class name, while the message with a colon was printed as if it was straight out of toString method.
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:  5.2.0 local, no global
The output of node --version: v10.12.0

Additional Information
If showDiff is false or either actual or expected fields are missing, both errors are printed similarly.
Very unintuitive and took a while to figure out. I encountered this while testing http requests and trying to print urls in errors.
Easy to reproduce with chai as well. Assertions could look like this:
expect(1).to.equal(2);
expect(1, 'message without a colon').to.equal(2);
expect(1, 'message with a colon(:)').to.equal(2);",l1bbcsg,NONE,2018-10-24 14:06:17+00:00,False,,,,4,4,2018-10-25 00:13:20+00:00,0.42,outsideris,MEMBER,3,0,0,1,"['reporter', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3537,Philosophical Reporter Questions,"Full Disclosure: Yes, I know the terminal codes will interfere with certain file formats.

An upcoming change to the xunit reporter intentionally turns use of color off. If a user issues the command below, were his expections met?

$ FORCE_COLOR=1 mocha --reporter xunit

Should a reporter be able to completely disregard a user setting? If so, should it warn?

If the command line had been that below, I could see not bothering since file output was specified.
$ FORCE_COLOR=1 mocha --reporter xunit --reporter-options output=xunit.xml
While not currently implemented, I could also see reporter that outputs to both file and console.
For instance, the above could also echo any failed tests to console (via reporter option, of course)",plroebuck,MEMBER,2018-10-28 05:56:51+00:00,False,,,,3,3,2018-10-28 11:42:59+00:00,0.24,mlucool,CONTRIBUTOR,2,1,0,0,"['discussion', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
3540,isMochaInternal to filter stack is too simple,"Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I have a test which involves the stack of an error. The exception message contains the stack trace which means it also contains node_modules/mocha.js
Due to this the first line is removed from the stack in error reporting. The bug is in ""utils.js"" line 631, function isMochaInternal line 611 respectively.
Steps to Reproduce
throw an exception with node_modules/mocha.js in the exception message
Expected behavior: [What you expect to happen]
The line is shown in error reporting even if node_modules/mocha.js or one of the other internal keywords are found within the line.
Actual behavior: [What actually happens]
The line is filtered out
Reproduces how often: [What percentage of the time does it reproduce?]
always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:

mocha is not installed globally
node_modules/.bin/mocha --version: 5.2.0



The output of node --version: v8.12.0",robstoll,NONE,2018-10-30 18:17:21+00:00,False,,,,2,8,2018-10-30 18:24:22+00:00,0.0,plroebuck,MEMBER,1,0,0,1,"['unconfirmed-bug', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3541,Cannot understand if supported and how to use with babel 7,"Prerequisites

[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Very confusing if it is possible to use mocha with babel 7
Steps to Reproduce
$ BABEL_DISABLE_CACHE=1 mocha --require @babel/register --require @babel/core --require @babel/polyfill --require setup-testing.js --check-leaks --timeout 5000 --recursive \""./src/**/*.spec.js\""
Where setup-testing.js is
/* eslint-disable */
(function() {
'use strict';
require('jsdom');
require('jsdom-global')();
})();

Expected behavior:
Tests should run and I should see console.* messages
Actual behavior:
Sometimes tests run and I can see output, sometimes they don't, and no output visible
Reproduces how often: [What percentage of the time does it reproduce?]
10 % of the time I can see console.debug messages
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 5.20
The output of node --version: v8.11.3
The version and architecture of your operating system: Windows 10 - using msys2
Your shell (bash, zsh, PowerShell, cmd, etc.): bash 4.4.23
The code transpiler being used: babel 7

Additional Information
There are a lot of tutorial online, but they don't apply to babel 7, it is very unclear what the support status is for mocha 5.20 and babel 7",iongion,NONE,2018-10-31 10:47:48+00:00,True,2018-10-31 15:52:14+00:00,0.21,,2,20,2018-10-31 10:48:32+00:00,0.0,iongion,NONE,1,0,0,1,"['needs-mcve', 'node.js', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
3545,Feature: ability for fork each test in a separate process and join the results.,"Right now my mocha is locking up due to some setTimeout or other open resource in the code...
and I can't find out why.
I was using mocha-parallel-tests which forks for each test.  But it's buggy and is skipping tests.
It would be KILLER if mocha could fork on each test, then collect the results so that timeouts and other issues didn't lock up my tests.
I realize that I should test for them,  but right now that's not my priority. I don't want my test harness to lock up.",burtonator,NONE,2018-11-02 04:25:49+00:00,True,2018-11-02 11:14:18+00:00,0.28,,3,2,2018-11-02 10:49:31+00:00,0.27,plroebuck,MEMBER,1,0,0,1,"['nice-to-have', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3548,jekyll needs upgrade,see CVE-2018-17567,boneskull,MEMBER,2018-11-02 23:26:17+00:00,True,2018-11-04 22:49:53+00:00,1.97,,1,0,,,,,0,0,0,0,['security'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3551,TravisCI windows,"Recently, Tavis CI supported Windows. See Windows is Available (Early Release).
Is it helpful if we move from AppVeyor to Travis CI?",outsideris,MEMBER,2018-11-04 10:27:54+00:00,True,2018-11-05 03:54:09+00:00,0.73,,2,2,2018-11-05 02:17:24+00:00,0.66,plroebuck,MEMBER,2,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3553,"Mocha fails on Node v10: ""console.log is not a function""","Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
On Octobre 30th NodeJS updated their LTS version to be 10.13, and my Travis CI tests started failing (for node version lts/*).
I've been able to reproduce the failure on my development machine using nvm to try with different versions of node.
The test suite is working up to version 10.0 (9.11.2 works fine)
One of my first steps was to upgrade to the latest mocha version available on NPM.
Here is the output of the test suite when using Node >= 10:
$ npm run test

> bbsite@0.0.0 test /Work/BookBrainz/bookbrainz-site
> npm run lint-errors && cross-env SSR=true NODE_ENV=test mocha


> bbsite@0.0.0 lint-errors /Work/BookBrainz/bookbrainz-site
> eslint --quiet .

Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration.
/Work/BookBrainz/bookbrainz-site/node_modules/mocha/lib/reporters/spec.js:80
    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
            ^

TypeError: console.log is not a function
    at Runner.<anonymous> (/Work/BookBrainz/bookbrainz-site/node_modules/mocha/lib/reporters/spec.js:80:13)
    at Runner.emit (events.js:187:15)
    at Runner.fail (/Work/BookBrainz/bookbrainz-site/node_modules/mocha/lib/runner.js:251:8)
    at Runner.uncaught (/Work/BookBrainz/bookbrainz-site/node_modules/mocha/lib/runner.js:735:12)
    at process.uncaught (/Work/BookBrainz/bookbrainz-site/node_modules/mocha/lib/runner.js:839:10)
    at process.emit (events.js:182:13)
    at process._fatalException (internal/bootstrap/node.js:435:27)

npm ERR! code ELIFECYCLE
npm ERR! errno 7
npm ERR! bbsite@0.0.0 test: `npm run lint-errors && cross-env SSR=true NODE_ENV=test mocha`
npm ERR! Exit status 7
npm ERR!
npm ERR! Failed at the bbsite@0.0.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /.npm/_logs/2018-11-05T17_54_27_925Z-debug.log

My mocha.opts file:
--recursive
--require babel-register
--timeout 20000
--exit

I found the NPM log didn't provide much more information, but here it is in case I missed something:
0 info it worked if it ends with ok
1 verbose cli [ '/.nvm/versions/node/v10.0.0/bin/node',
1 verbose cli   '/.nvm/versions/node/v10.0.0/bin/npm',
1 verbose cli   'run',
1 verbose cli   'test' ]
2 info using npm@5.6.0
3 info using node@v10.0.0
4 verbose run-script [ 'pretest', 'test', 'posttest' ]
5 info lifecycle bbsite@0.0.0~pretest: bbsite@0.0.0
6 info lifecycle bbsite@0.0.0~test: bbsite@0.0.0
7 verbose lifecycle bbsite@0.0.0~test: unsafe-perm in lifecycle true
8 verbose lifecycle bbsite@0.0.0~test: PATH: /.nvm/versions/node/v10.0.0/lib/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/Work/BookBrainz/bookbrainz-site/node_modules/.bin:/.nvm/versions/node/v10.0.0/bin:/usr/local/bin:/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:/opt/X11/bin:/Applications/Wireshark.app/Contents/MacOS
9 verbose lifecycle bbsite@0.0.0~test: CWD: /Work/BookBrainz/bookbrainz-site
10 silly lifecycle bbsite@0.0.0~test: Args: [ '-c',
10 silly lifecycle   'npm run lint-errors && cross-env SSR=true NODE_ENV=test mocha' ]
11 silly lifecycle bbsite@0.0.0~test: Returned: code: 7  signal: null
12 info lifecycle bbsite@0.0.0~test: Failed to exec test script
13 verbose stack Error: bbsite@0.0.0 test: `npm run lint-errors && cross-env SSR=true NODE_ENV=test mocha`
13 verbose stack Exit status 7
13 verbose stack     at EventEmitter.<anonymous> (/.nvm/versions/node/v10.0.0/lib/node_modules/npm/node_modules/npm-lifecycle/index.js:285:16)
13 verbose stack     at EventEmitter.emit (events.js:182:13)
13 verbose stack     at ChildProcess.<anonymous> (/.nvm/versions/node/v10.0.0/lib/node_modules/npm/node_modules/npm-lifecycle/lib/spawn.js:55:14)
13 verbose stack     at ChildProcess.emit (events.js:182:13)
13 verbose stack     at maybeClose (internal/child_process.js:947:16)
13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:236:5)
14 verbose pkgid bbsite@0.0.0
15 verbose cwd /Work/BookBrainz/bookbrainz-site
16 verbose Darwin 17.7.0
17 verbose argv ""/.nvm/versions/node/v10.0.0/bin/node"" ""/.nvm/versions/node/v10.0.0/bin/npm"" ""run"" ""test""
18 verbose node v10.0.0
19 verbose npm  v5.6.0
20 error code ELIFECYCLE
21 error errno 7
22 error bbsite@0.0.0 test: `npm run lint-errors && cross-env SSR=true NODE_ENV=test mocha`
22 error Exit status 7
23 error Failed at the bbsite@0.0.0 test script.
23 error This is probably not a problem with npm. There is likely additional logging output above.
24 verbose exit [ 7, true ]

Steps to Reproduce
I'm sorry I don't have a minimal example, but the bookbrainz-site repository can be used in combination with NVM to reproduce the issue, at least on the travis CI server and on my computer (OSX 10.13.6)
Versions


mocha --version: no global version of mocha installed
node node_modules/.bin/mocha --version: 5.2.0
node --version: v10.0.0
The version and architecture of your operating system: Mac OSX 10.13.6
Your shell (bash, zsh, PowerShell, cmd, etc.): iTerm2
Any other third party Mocha related modules (with versions):
The code transpiler being used: babel-register",MonkeyDo,NONE,2018-11-05 18:23:38+00:00,True,2018-11-05 21:05:28+00:00,0.11,,4,6,2018-11-05 18:28:59+00:00,0.0,MonkeyDo,NONE,2,0,0,1,"['integration', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3554,Reporter tests affected by shallow cloning,"Description
While updating our reporter test code, it has been discovered that many tests are restoring aspects of the tested objects due to use of shallow cloning. Typically, the test code makes a copy of the affected object, mutates it temporarily, then restores it. Problem is that making a copy via assignment of an object does not work protect its properties, and those ""twiddled"" properties are still present in the original when restored. We need a ""deep clone"" method, and then to apply it to all reporter specs.
While not evaluated elsewhere (yet), it is almost certain this problem is far more widespread.
Versions
Mocha 5.2 (past & future)",plroebuck,MEMBER,2018-11-05 22:14:24+00:00,True,2019-04-22 21:52:47+00:00,167.98,,3,4,2018-11-06 00:36:02+00:00,0.1,boneskull,MEMBER,3,0,0,0,"['confirmed-bug', 'qa']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3555,Promise.finally(done) never fails tests,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce
describe('promise', ()=>{
	it('never fails with `done` in finally', (done)=>{
		Promise.resolve().then(assert.fail).catch(assert.fail).finally(done)
	})
	it('no matter what', (done)=>{
		Promise.reject().then(assert.fail).catch(assert.fail).finally(done)
	})
	it('but properly fails when returning', ()=>{
		return Promise.reject().then(assert.fail).catch(assert.fail)
	})
})
Output I get:
  promise
    ✓ never fails with `done` in finally
(node:83761) UnhandledPromiseRejectionWarning: AssertionError: AssertionError: assert.fail()
(node:83761) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:83761) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
    ✓ no matter what
(node:83761) UnhandledPromiseRejectionWarning: AssertionError: assert.fail()
(node:83761) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 5)
    1) but properly fails when returning


  2 passing (12ms)
  1 failing

  1) promise
       but properly fails when returning:
     AssertionError: AssertionError: assert.fail()

Expected behavior: All three tests should fail
Actual behavior: Only last test fails
Reproduces how often: Always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: , 5.2.0
The output of node --version: v11.1.0
The version and architecture of your operating system: macOS High Sierra 10.13.2
Your shell (bash, zsh, PowerShell, cmd, etc.): default macOS Terminal.app
Your browser and version (if running browser tests): no
Any other third party Mocha related modules (with versions): chai 4.2.0
The code transpiler being used: pure ES6

Additional Information

This issue seems related #1283 but it does not cover current problem",Teivaz,NONE,2018-11-07 01:51:37+00:00,True,2018-11-08 13:10:20+00:00,1.47,,3,2,2018-11-08 13:10:20+00:00,1.47,outsideris,MEMBER,1,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3557,use ms module instead of internal implementation,"It's good to reduce LOC and use purpose-built modules.
Prompted by comments on #3556.
Remove internal ms.js and use https://npm.im/ms instead.",boneskull,MEMBER,2018-11-07 19:15:27+00:00,True,2018-11-23 17:54:02+00:00,15.94,,3,3,2018-11-08 20:02:33+00:00,1.03,gizemkeser,CONTRIBUTOR,2,1,0,0,"['good-first-issue', 'help wanted', 'refactor']",False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3558,New release,"Hi,
It's been a few months now since the last release to npm: the master branch had many small changes since then. Could you update the published package?",demurgos,CONTRIBUTOR,2018-11-07 21:07:38+00:00,True,2018-11-07 23:29:51+00:00,0.1,,2,2,2018-11-07 23:29:51+00:00,0.1,plroebuck,MEMBER,1,1,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3559,Use standard exit codes,"Description
Mocha's exit code is the number of failed tests (up to 255).
This is nonstandard and should be more like Unix/POSIX programs.
process.exitCode should be one of:

0 for success
1 for failure (e.g., internal error, if any tests fail, no tests were run)
2 for failure due to invalid command line usage
126 if ""bin/_mocha"" not executable (handled by shell)
128+n where n is signal# (e.g., SIGINT=2, so rc=130)

where:

0 is EXIT_SUCCESS (POSIX)
1 is EXIT_FAILURE (POSIX)
rest are shell scripting maxims (e.g., sh, ksh, bash) (UNIX)

This should be explicitly added to the documentation.
Notes
Exit codes have a range from 0-255.
An exit value greater than 255 returns an exit code modulo 256.
The 126 exit code can only happen on UNIX and would be provided by the shell itself.
Mocha's current scheme leads to ambiguous error codes.
For example, there is no means to distinguish between 130 test failures and interrupt by <Ctrl>-C.
It was mentioned that this would certain CI systems relied on this exit code abuse.
I fail to see how this could affect them; a test failure from above would still return 1, just not a count.
Related
#2445
#2438 (same problem, but fix only addressed clamping #failures)",plroebuck,MEMBER,2018-11-08 00:12:10+00:00,False,,,,2,5,2018-11-08 19:23:27+00:00,0.8,boneskull,MEMBER,2,0,0,0,"['discussion', 'feature', 'integration', 'node.js', 'usability']",False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False
3560,i18n,"~~yargs’ y18n looks easy to use and we should probably start using it. ~~
UPDATE: use a different i18n library; see links below
it’d also be a great opportunity to encourage translation contributions!",boneskull,MEMBER,2018-11-08 19:20:51+00:00,False,,,,3,3,2018-11-09 13:27:52+00:00,0.75,plroebuck,MEMBER,2,0,0,0,"['help wanted', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3561,Feature: expose accurate test case location,"Feature description
I would like to have access to precise location in which a test case has been defined (that is, filename, line, and column).
Possible use cases

I would like to create a kind of editor integration where I can accumulate all executed test cases and then be able to have the user click on each test case to take them exactly to the place where that test has been defined
To show this location information in case of test failures. Sometimes I noticed that when an error occurs (especially one thrown from setImmediate() hooks) the stack trace contains absolutely no information as to which test exactly has failed and I have to resort to string lookup in the code (using the test's title)

To clarify further with an example, I need to know where it() or test() have been called:
describe('suite', () => {
  // need to get this file's full name and the following line's line and row numbers:
  // /Users/me/project/src/api.test.js:4:3
  it('works', () => true)
})
PoC
I have successfully extracted the precise location of the test case's definition (even with applied source mapping ⚠️) using this crude one-liner inserted at line 27 in this file:

  
    
      mocha/lib/test.js
    
    
        Lines 16 to 27
      in
      c6f61e6
    
    
    
    

        
          
           function Test(title, fn) { 
        

        
          
             if (!isString(title)) { 
        

        
          
               throw new Error( 
        

        
          
                 'Test `title` should be a ""string"" but ""' + 
        

        
          
                   typeof title + 
        

        
          
                   '"" was given instead.' 
        

        
          
               ); 
        

        
          
             } 
        

        
          
             Runnable.call(this, title, fn); 
        

        
          
             this.pending = !fn; 
        

        
          
             this.type = 'test'; 
        

        
          
           } 
        
    
  


// lib/test.js:27
this.location = new Error().stack.split('\n').slice(0, 3).pop().trim()
Logging this.location produces the following output:


Obviously this needs work, but as you can see even this one-liner got me pretty close to the end result.

Implementation of this feature as I would imagine and need it to actually use it for my goals would entail

gathering test case location information for all registered tests
exposing this information to reporters

Would you accept pull requests implementing this feature? Are there requirements as to how this must be implemented? Am I allowed to add dependencies (ie. for parsing the stack traces into usable format)?
Thank you for considering! 🙏",robertrossmann,CONTRIBUTOR,2018-11-09 18:32:48+00:00,False,,,,2,3,2018-11-10 01:07:25+00:00,0.27,plroebuck,MEMBER,1,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3562,"Use ""package.json"" to determine test directory","Description
Read ""package.json"" field directories.test if it exists. If it does, use its value instead of ""test"" as Mocha's default for test directory.
Inspired from discussion in #1275 where someone had named his test directory ""tests"" and then Mocha wouldn't find his ""mocha.opts"" file (without specifying it via --opts).",plroebuck,MEMBER,2018-11-09 23:17:32+00:00,False,,,,2,3,2018-11-26 15:38:31+00:00,16.68,juergba,MEMBER,2,0,0,0,"['good-first-issue', 'nice-to-have', 'usability']",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3564,soft-deprecate --reporter-options and replace with --reporter-option,"This assumes #3556 lands.  This issue came out of code review there.
Yargs has great support for ""array""-type options.  Generally, any option can be specified multiple times.  In addition, options can accept multiple, space-delimited values, e.g., --foo bar baz quux.
This issue has two parts:

Soft-deprecate (using utils.deprecate()) --reporter-options
Implement --reporter-option which can be repeated multiple times.

It'd be cool to be able to specify a minimum of one value and a maximum of two, e.g.:
--reporter-option someBooleanFlag --reporter-option someString stringValue

Not sure if Yargs can to that, but if it can't, then require a single value and split the result on =:
--reporter-option someBooleanFlag --reporter-option someString=stringValue",boneskull,MEMBER,2018-11-11 05:26:09+00:00,True,2019-01-31 01:25:26+00:00,80.83,,2,5,2018-11-27 06:46:54+00:00,16.06,plroebuck,MEMBER,2,0,0,0,['node.js'],False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3565,TypeError: <function> is not a function (Only interacting with Mongoose),"Prerequisites

[ x] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ x] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[ x] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I'm using mocha to test some CRUD functions for my Mongoose models. One is System, then two very similar models for an I[input]Sector and an O[utput]Sector. I can assure that all the models exist as do the functions I'm calling in the test.
What is failing is the following test (note that in a top-level test file I'm connecting to the database and I drop collections between each test):
describe('Delete', function() {
    before('setting constants', function() {
      this.fakeId = '5be16a873dde9a64dbedac38';
      this.systemId  = null;
      this.oSectorId = null;
      this.iSectorId = null;
    });

    beforeEach('creating test objects', function(done) {
      var that = this;
      var oSector = new OSector({
        name: 'Output Sector',
        system: that.fakeId,
        type: 'Water',
        key: 1
      });

      oSector.save(function(err, oSector) {
        that.oSectorId = oSector._id;
        var iSector = new ISector({
          name: 'Input Sector',
          system: that.fakeId,
          type: 'Temperature',
          key: 1
        });

        iSector.save(function(err, iSector) {
          that.iSectorId = iSector._id;
          var system = new System({
            name: 'TestSystem',
            passcode: 'test',
            inputPort: '/dev/ttyUSB0',
            inputSectors: [that.iSectorId],
            outputPort: '/dev/ttyUSB1',
            outputSectors: [that.oSectorId]
          });

          system.save(function(err, system) {
            that.systemId = system._id;
            done()
          });
        });
      });
    });

    // Remove system by ID -----------------------------------------------------
    describe('#removeSystemById', function() {
      context('Valid', function() {
        it('should pass and remove a system and its sectors', function(done) {
          var that = this;
          System.removeSystemById(that.systemId, function(err, ret) {
            assert.isNull(err, 'expected no error; returned error');
            assert.isNotNull(ret, 'expected system; returned none');
            assert.instanceOf(ret, System, 'object was not of type System');
            assert.equal(ret.name.toString(),
                         that.validName1.toString(),
                         'unexpected name');
            done();
          });
        });
      });
    });
  });

(Feel free to skip the next two blocks of code because they are mostly for context)
For more context, here is the function it is calling in the model:
module.exports.removeSystemById = function(id, callback) {
  System.findById(id, function(err, system) {
    if (err) {
      callback(err, null);

    } else if (system == null) {
      callback(null, null);

    } else {
      // Remove all of the children input sectors
      system.inputSectors.forEach(function(sector) {
        ISector.removeISectorById(sector, function(err) {
          if (err) {
            throw err;
          }
        });
      });

      // Remove all of the children output sectors
      system.outputSectors.forEach(function(sector) {
        OSector.removeOSectorById(sector, function(err) {
          if (err) {
            throw err;
          }
        });
      });

      system.remove(callback);
    }
  });
};

And for more context, here is the function defined in one of the sector models (they're pretty incredibly similar to each other):
module.exports.removeISectorById = function(id, callback) {
  ISector.findById(id, function(err, sector) {
    if (err) {
      callback(err, null);

    } else if (sector == null) {
      callback(null, null);

    } else {
      // Remove all of the child input events
      // and remove their reference from their input sector
      var query = {_id: sector._id};
      ISector.findOne(query).populate('iEvents').exec(function(err, sector) {
        if (err) {
          throw err;
        }

        sector.iEvents.forEach(function(iEvent) {
          IEvent.findOne(iEvent).populate('target').exec(function(err, iEvent) {
            var idx = iEvent.target.iEvents.indexOf(iEvent._id);
            if (idx > -1) {
              iEvent.target.iEvents.splice(idx, 1);
              iEvent.target.save(function(err, iEvent) {
                if (err) {
                  throw err;
                }
              });
            }
          });

          IEvent.removeIEventById(iEvent._id, function(err) {
            if (err) {
              throw err;
            }
          });
        });
        sector.remove(callback);
      });
    }
  });
};

As mentioned the actual implementation isn't incredibly important and may be difficult to understand without going through the rest of the code; however, I've already tested it at a higher level using the HTTP requests these functions are called from. What is strange though is that when I try to run this in Mocha, it throws this error:

Uncaught TypeError: ISector.removeISectorById is not a function
at /home/jeremy/projects/seedlink/models/system.js:134:17
at Array.forEach()
at /home/jeremy/projects/seedlink/models/system.js:133:27
at /home/jereny/projects/seedlink/node_modules/kareem/index.js:273:21
at /home/jereny/projects/seedlink/node_modules/kareem/index.js:131:16
at _combinedTickCallback (internal/process/next_tick.js:131:7)
at process._tickCallback (internal/process/next_tick.js:180:9)

Steps to Reproduce

Open a connection to MongoDB through mongoose in a before() hook
Run the single test as given above

(I'm honestly not sure how to simplify the case any more than that without starting a whole new project)
Expected behavior: [What you expect to happen]
Runs the function as referenced and throws errors only within the scope of the test.
Actual behavior: [What actually happens]
Throws an invalid type answer --not finding a function that was defined.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

Mocha version: 5.2.0 (local dev-dependency | no global)
Node version: v9.2.1
System: Linux 4.4.0-138-generic #164-Ubuntu SMP x86_64 x86_64 x86_64 GNU/Linux
Shell: zsh

I'm not even far enough into development to have integrated things like webpack, transpilers, gulp, etc. This is just using Mongoose (with Bluebird for the promise lib) and raw js.
Additional Information
If you could even give me some direction as to how to debug this, I can try looking into it myself.
Here's a link to my repo at the commit where I uploaded the issue-causing test
I'm hoping I'm just having a moment here and it's not a huge deal, so I'll be continuing to look through this. I'll close the issue if I find anything unrelated to Mocha. I chose to open the issue instead of going to StackOverflow because I noticed there were a couple other people that were experiencing similar issues, but always with 3rd-party apps in between. This strikes me as a simlar case using only Mocha, Mongoose, and Js.",MrCerealKiller,NONE,2018-11-11 11:13:12+00:00,True,2018-11-11 15:33:53+00:00,0.18,,2,1,2018-11-11 15:33:53+00:00,0.18,plroebuck,MEMBER,1,0,0,0,"['invalid', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3567,mocha config lacks tools to use localstorage in jsdom,"I can no longer check if session storage exists or not using mocha. The root cause is a jsdom update that now throws a security exception when accessing window.sessionStorage
since jsdom 11.12.0 (released in the past june) test runners need to explicitly set a url for jsdom in order to use localstorage or sessionstorage otherwise an exception is thrown:
SecurityError: localStorage is not available for opaque origins
Details on the jsdom release can be found here: jsdom/jsdom#2304
Jest has patched the same issue by adding a letting a field 'testURL' be defined in the config:
facebook/jest#6766
I am currently navigating around this issue by locking my jsdom package to 11.11.0 but this is not a viable long-term solution.
Please let me know if there is a fix for this in the pipeline, or if one already exists that I have overlooked.
Thanks!
PS - steps to reproduce:
it should be possible to make the following test pass with the latest jsdom installed:
mocha --exit --require ts-node/register --require jsdom-global/register ./app/test/*.ts
  @test public async sessionStorate() {
    try {
      if(window && window.localStorage) {
        //have access
        assert.ok(""does not break control flow"");
      } else {
        //dont have access
        assert.ok(""does not break control flow"");
      }
    } catch {
      assert.fail(""breaks control flow"");
    }
  }",KyleGalvin,NONE,2018-11-12 18:58:34+00:00,True,2018-11-15 00:45:09+00:00,2.24,,2,5,2018-11-14 12:35:56+00:00,1.73,plroebuck,MEMBER,1,0,0,1,"['integration', 'invalid', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3569,Test output order has changed: test result shown after `afterEach` hook output,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The output of the testfile cascade.fixture.js has changed compared to my local V5.2.0. The order of hook execution remains correct.
Output of master branch:
one
before one
    two
  before two
      three
    before three
  before each one
    before each two
    before each three
      TEST three
    after each three
    after each two
  after each one
        √ should three                            <<<<< different
    after three
  after two
after one

Output of my local Mocha installation V5.2.0:
one
before one
    two
  before two
      three
    before three
  before each one
    before each two
    before each three
      TEST three
        √ should three
    after each three
    after each two
  after each one
    after three
  after two
after one

Steps to Reproduce
Expected behavior: as shown in second output
Actual behavior: as shown in first output
Reproduces how often: always
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 10.5.0
The version and architecture of your operating system: Windows 10 Home, 1809
Your shell (bash, zsh, PowerShell, cmd, etc.): cmd of VSCode
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used: none

Additional Information",juergba,MEMBER,2018-11-14 07:34:05+00:00,True,2018-12-10 21:12:47+00:00,26.57,,2,4,2018-11-14 10:26:51+00:00,0.12,plroebuck,MEMBER,2,0,0,0,"['node.js', 'qa', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3570,Unable to terminate long running tests,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Unable to terminate tests manually, e.g via Ctrl+C when running tests in a terminal.
Steps to Reproduce

Create

it('should run 10 seconds', function (done) {
  setTimeout(done, 10000);
});

Run with mocha --timeout 1000000 test.js
Do not wait until the test finishes and press Ctrl+C to terminate it.


Expected behavior: The test is terminated.
Actual behavior: The test is still running.
Reproduces how often: Always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0 and 5.2.0
The output of node --version: v10.13.0
The version and architecture of your operating system: Linux 64-bit, 3.19.0-32-generic
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",segrey,CONTRIBUTOR,2018-11-14 13:03:55+00:00,False,,,,5,13,2018-11-14 13:41:41+00:00,0.03,plroebuck,MEMBER,3,2,0,0,"['confirmed-bug', 'node.js', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3571,"Timeout default is incorrect, 200ms instead of 2000ms","Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The timeout default value is set differently in the master branch and my local Mocha V5.2.0
describe('suite1', function () {
  console.log(this._timeout);
});

Output master branch: 200
Output my local Mocha: 2000
Many integration test are failing for that reason. These tests do pass correctly when using the flag --timeout=2000
Steps to Reproduce

Expected behavior: default timeout should be 2000ms
Actual behavior: default timeout is 200ms
Reproduces how often: always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: master branch
The output of node --version: V10.5.0
The version and architecture of your operating system: windows 10 Home 1809
Your shell (bash, zsh, PowerShell, cmd, etc.): cmd of VSCode
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information
master branch
git show --oneline -s
593e9b8 (HEAD -> master, origin/master, origin/HEAD) Add ability to query Mocha version programmatically (#3535)",juergba,MEMBER,2018-11-14 13:33:23+00:00,True,2018-11-20 18:56:27+00:00,6.22,,3,6,2018-11-14 13:46:00+00:00,0.01,plroebuck,MEMBER,3,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3572,async/await test times out,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
code:
const assert = require('assert');
describe('test', () => {
    it('test', async () => {
        await new Promise(resolve => setTimeout(() => {
            resolve();
        }, 2500 ));
        assert.equal(true, true)
    })
});
cmd:
node_modules/.bin/mocha test.js

output:
test
    1) test


  0 passing (2s)
  1 failing

  1) test
       test:
     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves. 

Note: #3427 mixes promises and async, and doesn't address this issue exactly (tho I don't see why mixing async and promises should be a problem since async function just returns a promise to begin with).
Versions


The output of mocha --version: no global mocha installe
node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v10.12.0
The version and architecture of your operating system: windows 7
Your shell (bash, zsh, PowerShell, cmd, etc.):  bash
Your browser and version (if running browser tests): X
Any other third party Mocha related modules (with versions): X
The code transpiler being used: X",dwelle,NONE,2018-11-15 10:17:04+00:00,True,2018-11-15 11:29:41+00:00,0.05,,1,1,2018-11-15 11:29:41+00:00,0.05,dwelle,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3574,Resolve conflict between envvar and cmdline arg for same resource,"Description
What happens when envvar and cmdline arg for same resource specify different values?
We need to add a couple tests regarding color:

Given both envvar FORCE_COLOR and --no-color, is color enabled?
Given both envvar FORCE_COLOR=1 and --no-color, is color enabled?
Given both envvar FORCE_COLOR=0 and --color, is color enabled?",plroebuck,MEMBER,2018-11-19 07:37:43+00:00,False,,,,1,0,,,,,0,0,0,0,"['good-first-issue', 'qa']",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3575, Build or build+test dependencies,"Hi
I'm wondering how many of the devdeps are strictly needed for building? How many are needed if we want to test it too? (no docs or linting needed)
We are trying in Guix to figure out how to package npm-libraries in a reproducible way.
See also: https://lists.gnu.org/archive/html/guix-devel/2018-11/msg00201.html
I'm using a guile-script to make a graph of this package and the devdependencies and all recursive dependencies of those. This amounts to a lot of packages with all the devdeps of mocha.
Cheers
swedebugia",swedebugia,NONE,2018-11-22 17:09:59+00:00,True,2018-11-25 23:23:25+00:00,3.26,,2,1,2018-11-25 23:22:35+00:00,3.26,plroebuck,MEMBER,1,0,0,0,"['documentation', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3581,Add the ability to list files to be tested,"Description
Output files to be tested (in load order) with the debug package using the namespace 'mocha:files' in ""bin/_mocha"" file.
var debug = require('debug')('mocha:files');    // immediately before L16
...
debug('files:', files);    // L575
Additional Information
Test as follows:

Using default ""test"" directory

$ DEBUG='mocha:files' mocha --recursive

Using extended glob (results should be same as case 1)

$ DEBUG='mocha:files' mocha 'test/**/*.js'

Using default ""test"" directory, excluding files in subdir ""setup""

$ DEBUG='mocha:files' mocha --exclude 'test/setup/**' --recursive

Using extended glob, excluding files in subdir ""setup"" (results should be same as case 3)

$ DEBUG='mocha:files' mocha --exclude 'test/setup/**' 'test/**/*.js'

Using default ""test"" directory, with prepended file ""test/setup/init.js""

$ DEBUG='mocha:files' mocha --file test/setup/init.js --exclude 'test/setup/**' --recursive

Using extended glob, with prepended file ""test/setup/init.js"" (results should be same as case 5)

$ DEBUG='mocha:files' mocha --file test/setup/init.js --exclude 'test/setup/**' 'test/**/*.js'",plroebuck,MEMBER,2018-11-26 15:56:41+00:00,False,,,,5,8,2019-02-25 11:19:24+00:00,90.81,kennycastro007,NONE,2,0,0,3,"['nice-to-have', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3583,evaluate eslint-plugin-jsdoc,"ESLint is end-of-lifeing JSDoc support, so it might be a good idea to look at eslint-plugin-jsdoc to help keep our docstrings in order, since we're now publishing API docs.
I'd like to see a few things here:

How many errors would we need to fix?  What's the time investment?
If it's burdensome but useful, should we use warnings (not ESLint errors) for now?
Does following the recommendations of the plugin result in API documentation that is, at minimum, no worse than what we already have?

If this turns out to be a straightforward no-brainer, then a PR to add + configure this plugin would be lovely.",boneskull,MEMBER,2018-11-28 04:26:24+00:00,True,2018-12-18 23:26:18+00:00,20.79,,1,1,2018-12-18 23:26:18+00:00,20.79,boneskull,MEMBER,1,0,0,0,"['chore', 'documentation', 'good-first-issue', 'help wanted']",True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3584,Mocha won't follow symbolic links when provided with a glob pattern,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
This is related to #1223 where util.lookupFiles does not follow symlinks and this still happens if provided with a glob pattern. The solution would be to add a  {follow: true} argument to the glob.sync call.
Steps to Reproduce
Create a symlink to a directory containing test files, call mocha with a glob to that directory.
Expected behavior: Tests in symlinked folders will be executed
Actual behavior: Tests are ignored
Reproduces how often: every time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: latest
The output of node --version:
The version and architecture of your operating system: X64 Linux
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): -
Any other third party Mocha related modules (with versions): -
The code transpiler being used: -

Additional Information
I'm happy to create a pull request, however i'm not familiar with the implications such a change might have.",mbeerta-factset,NONE,2018-11-28 11:50:02+00:00,False,,,,5,5,2018-11-28 23:58:35+00:00,0.51,plroebuck,MEMBER,3,0,0,2,"['feature', 'future', 'good-first-issue', 'node.js']",False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3585,[Feature Request] Convert to ES Modules,"With all major browsers now supporting ES modules and node support on its way, I think it would be a great time to migrate this popular lib and help the community move forward.
To be clear, the goal would be to be able to do:
In node:
import { 
  after, 
  afterEach, 
  before, 
  beforeEach, 
  context, 
  describe, 
  it 
} from 'mocha'
In browsers:
import { 
  after, 
  afterEach, 
  before, 
  beforeEach, 
  context, 
  describe, 
  it 
} from '/node_modules/mocha/mocha.js'",pdesjardins90,NONE,2018-11-29 01:14:18+00:00,True,2018-11-29 18:38:13+00:00,0.72,,3,13,2018-11-29 18:38:00+00:00,0.72,outsideris,MEMBER,2,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3586,How to make xunit reporter avoid encode test messages.,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The xunit reporter always encodes everything, but if there's some Chinese characters, the report file will
generate something like this:
<testsuite name=""Mocha Tests"" tests=""1"" failures=""1"" errors=""1"" skipped=""0"" timestamp=""Thu, 29 Nov 2018 03:23:34 GMT"" time=""0.035"">
<testcase classname=""&#x767E;&#x5EA6;"" name=""&#x9996;&#x9875;"" time=""0.003""><failure>expected &#x27;&#x6D4B;&#x8BD5;&#x27; to equal &#x27;&#x9519;&#x8BEF;&#x27;
AssertionError: expected &#x27;&#x6D4B;&#x8BD5;&#x27; to equal &#x27;&#x9519;&#x8BEF;&#x27;
    at Context.&#x3C;anonymous&#x3E; (C:/Users/ybbpg/Desktop/node-test/test/test.js:10:17)</failure></testcase>
</testsuite>
Totally unreadable, is there any way to avoid this?
Steps to Reproduce

Make test.js file:

import ""chai/register-should"";

describe(""中文测试"", function () {
  it(""测试"", () => {
    ""测试"".should.equal(""测试 Not Equal""); // Will get error
  });
});

run mocha using.

mocha --require babel-core/register --reporter=xunit --reporter-options output=report/jUnit.xml test.js


check  report/jUnit.xml.

Expected behavior: [What you expect to happen]
Don't encode classname, name, and body of testcase.
<testsuite name=""Mocha Tests"" tests=""1"" failures=""1"" errors=""1"" skipped=""0"" timestamp=""Thu, 29 Nov 2018 03:25:19 GMT"" time=""0.039"">
<testcase classname=""中文测试"" name=""测试"" time=""0.004""><failure>expected 测试  to equal 测试 Not Equal
AssertionError: expected 测试 to equal 测试 Not Equal 
    at Context.&#x3C;anonymous&#x3E; (C:/Users/ybbpg/Desktop/node-test/test/test.js:10:17)</failure></testcase>
</testsuite>
Actual behavior: [What actually happens]
Encode everything.
<testsuite name=""Mocha Tests"" tests=""1"" failures=""1"" errors=""1"" skipped=""0"" timestamp=""Thu, 29 Nov 2018 03:25:19 GMT"" time=""0.039"">
<testcase classname=""&#x4E2D;&#x6587;&#x6D4B;&#x8BD5;"" name=""&#x6D4B;&#x8BD5;"" time=""0.004""><failure>expected &#x27;&#x6D4B;&#x8BD5;&#x27; to equal &#x27;&#x6D4B;&#x8BD5; Not Equal&#x27;
AssertionError: expected &#x27;&#x6D4B;&#x8BD5;&#x27; to equal &#x27;&#x6D4B;&#x8BD5; Not Equal&#x27;
    at Context.&#x3C;anonymous&#x3E; (C:/Users/ybbpg/Desktop/node-test/test/test.js:10:17)</failure></testcase>
</testsuite>

Reproduces how often: 100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v10.12.0
The version and architecture of your operating system: win 10
Your shell (bash, zsh, PowerShell, cmd, etc.): PowerShell
Your browser and version (if running browser tests): chrome
Any other third party Mocha related modules (with versions): chai 4.2.0
The code transpiler being used: babel 6.26.0",ybbpgfjtey,NONE,2018-11-29 03:31:39+00:00,False,,,,2,0,,,,,0,0,0,0,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3592,hope can support optional test,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

hope can support optional test
when that optional test is fail, will only show notice, but not make current test suite count as fail
describe('main', function ()
{

	it('test1', function ()
	{
		// do something without fail
	})

	it.optional('test2', function ()
	{
		// do something maybe with fail, but will not make current main count as fail
	})

});
Expected behavior: [What you expect to happen]
  test\optional.test.ts
    main
      √ test1
      x test2 (optional)

  ... display test2 fail like normal fail message

  1 passing, 1 optional fail


but the optional.test.ts is still pass

Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",bluelovers,NONE,2018-11-29 21:19:59+00:00,True,2019-04-11 23:12:15+00:00,133.08,,5,12,2018-12-03 08:44:00+00:00,3.48,Bamieh,MEMBER,3,0,0,2,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3593,Using async/await within context blocks don't work as expected,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When using async/await inside of a context block, the code order execution does not line up with my expectations. Based on a similar issue: #2975, is it possible  to run the following code without the use of a before block? If it's not possible it would require me to wrap my for loop within my Sibling Context 1 in a it block for the code to function in the order I expect.
As a workaround, I've implemented the structure like so:
const Promise = require('bluebird');
const expect = require('chai').expect;

function waitingOnUsefulData() {
  return Promise.resolve([1,2,3,4,5]);
}

describe('The Master Describe block', () => {
  context('Sibling Context 1', async () => {

    //const data = await waitingOnUsefulData();

    let data;
    before(async () => {
      data = await waitingOnUsefulData();
    });

    it('a wrapper', () => {
      for(const element of data) {
        context(`Child context ${element}`, () => {
          before('setup', () => {
            console.log('setting up in the child context');
          });
          it('Example 1', () => {
            console.log('example 1');
            expect(true).to.be.true;
          });
          
          it('Example 2', () => {
            console.log('example 2');
            expect(true).to.be.true;
          });
  
          it('Example 3', () => {
            console.log('example 3');
            expect(true).to.be.true;
          });
        });
      }
    });
  });

  // context('Sibling Context 2', () => {
  //   it('Example a',() => {
  //     console.log('Example a');
  //     expect(true).to.be.true;
  //   });
  //   it('Example b', () => {
  //     console.log('Example b');
  //     expect(true).to.be.true;
  //   });
  // });
});

Note I understand that use of arrow functions is discouraged (https://mochajs.org/#arrow-functions) but my current team seems to prefer them over using function()
The following example in Steps to Reproduce appears to be a possible bug.
Steps to Reproduce

Make sure to have bluebird and chai packages installed.
Use the following code below:

const Promise = require('bluebird');
const expect = require('chai').expect;

function waitingOnUsefulData() {
  return Promise.resolve([1,2,3,4,5]);
}

describe('The Master Describe block', () => {
  context('Sibling Context 1', async () => {
    const data = await waitingOnUsefulData();

    for(const element of data) {
      context(`Child context ${element}`, () => {
        before('setup', () => {
          console.log('setting up in the child context');
        });
        it('Example 1', () => {
          console.log('example 1');
          expect(true).to.be.true;
        });
        
        it('Example 2', () => {
          console.log('example 2');
          expect(true).to.be.true;
        });

        it('Example 3', () => {
          console.log('example 3');
          expect(true).to.be.true;
        });
      });
    }
  });

  context('Sibling Context 2', () => {
    it('Example a',() => {
      console.log('Example a');
      expect(true).to.be.true;
    });
    it('Example b', () => {
      console.log('Example b');
      expect(true).to.be.true;
    });
  });
});


run the code mocha test_file.js
output: (Notice that Sibling Context 1 was not provided as an output when running the code)

  The Master Describe block
    Sibling Context 2
Example a
      ✓ Example a
Example b
      ✓ Example b

  Child context 1
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3

  Child context 2
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3

  Child context 3
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3

  Child context 4
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3

  Child context 5
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3


Comment out the following code

  context('Sibling Context 2', () => {
    it('Example a',() => {
      console.log('Example a');
      expect(true).to.be.true;
    });
    it('Example b', () => {
      console.log('Example b');
      expect(true).to.be.true;
    });
  });


Run the code again mocha testfile.js
output:
0 passing


Expected behavior:
The Master Describe block
    Sibling Context 1
Child context 1
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3
Child context 2
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3
Child context 3
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3
Child context 4
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3
Child context 5
setting up in the child context
example 1
    ✓ Example 1
example 2
    ✓ Example 2
example 3
    ✓ Example 3

Actual behavior:
When the following block of code is commented out as described in step 3, the following output is displayed. No Tests are ran
 0 passing (2ms)

Reproduces how often: 100% of the time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v10.11.0
The version and architecture of your operating system: macOS highSierra version 10.13.4
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): n/a
Any other third party Mocha related modules (with versions): n/a
The code transpiler being used:

Additional Information",hlimbo27,NONE,2018-11-29 22:15:19+00:00,True,2019-01-02 19:05:57+00:00,33.87,,3,2,2018-12-06 10:39:44+00:00,6.52,WORMSS,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3596,Correctly diagnose errors from required runner module,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When developing a third party reporter, mocha misdiagnoses an error coming from within the reporter as the reporter module not being found.
Steps to Reproduce
Minimal reproduction

Create a parent project that uses mocha.
Create a custom reporter, that doesn't require mocha anywhere.
Install that reporter in the parent project (in this case, as a local package using the file location).
When mocha requires the reporter, node throws an error. The require works correctly, but mocha erroneously console.warns that the reporter wasn't found.

Expected behavior:
Mocha says that the reporter package caused the error.
Actual behavior:
Mocha erroneously console.warns that the reporter wasn't found.
Reproduces how often: 100%
Versions
Mocha version: 5.2.0 (not installed globally)
Node version: v8.11.1
OS: MacOs High Sierra v10.13.6
Shell: iTerm2 build 3.2.4beta2
Additional Information
As discussed in #3530, initially thought the package was not being required correctly.",aido179,NONE,2018-12-04 22:03:08+00:00,False,,,,3,1,2018-12-15 17:47:59+00:00,10.82,plroebuck,MEMBER,1,0,0,0,"['reporter', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3598,mocha TDD --bail --exit does not call suiteTeardown() after failed test,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Using mocha TDD ( https://mochajs.org/#tdd ), and calling mocha with --bail and --exit. on a failed test, mocha stops and does not execute the suiteTeardown().
My assumption would have been that the suiteTeardown() is always called, even after a failed test.
Steps to Reproduce
suite('suite', () => { 
  suiteSetup(() => { 
    console.log('suiteSetup');
  });

  suiteTeardown(() => { 
    console.log('suiteTeardown');
  });

  test('mytest', done => {
    console.log('mytest');

    done(new Error('fail'));
  });

  test('mytest async', async() => {
    console.log('mytest async');

    throw new Error('fail');
  });
});

no options:
$ mocha --ui tdd test/units/

  suite
suiteSetup
mytest
    1) mytest
mytest async
    2) mytest async
suiteTeardown

  0 passing (11ms)
  2 failing

  1) suite
       mytest:
     Error: fail
      at Context.done (test/units/testTests.js:15:10)

  2) suite
       mytest async:
     Error: fail
      at Context.test (test/units/testTests.js:21:11)

only --bail:
$ mocha --bail --ui tdd test/units/

  suite
suiteSetup
mytest
    1) mytest

  0 passing (9ms)
  1 failing

  1) suite
       mytest:
     Error: fail
      at Context.done (test/units/testTests.js:15:10)

suiteTeardown

only --exit:
$ mocha --exit --ui tdd test/units/

  suite
suiteSetup
mytest
    1) mytest
mytest async
    2) mytest async
suiteTeardown


  0 passing (11ms)
  2 failing

  1) suite
       mytest:
     Error: fail
      at Context.done (test/units/testTests.js:15:10)

  2) suite
       mytest async:
     Error: fail
      at Context.test (test/units/testTests.js:21:11)

both, --bail and --exit:
$ mocha --bail --exit --ui tdd test/units/

  suite
suiteSetup
mytest
    1) mytest

  0 passing (9ms)
  1 failing

  1) suite
       mytest:
     Error: fail
      at Context.done (test/units/testTests.js:15:10)

Expected behavior: I expect that in ALL cases, the suiteTeardown() is executed.
Actual behavior: If I give both, --bail and --exit, the suiteTeardown() is not executed.
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v10.13.0
The version and architecture of your operating system: ubuntu 18.04
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): n/a
Any other third party Mocha related modules (with versions): n/a
The code transpiler being used: n/a

Additional Information
n/a",stheine,NONE,2018-12-05 15:07:31+00:00,True,2018-12-19 17:51:35+00:00,14.11,,2,2,2018-12-07 14:32:02+00:00,1.98,juergba,MEMBER,1,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3599,CLI path directory expansion should be case-insensitive,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The directory expansion of files should result in a case-insensitively sorted list.

Steps to Reproduce

Run mocha test/ in a project with test/a-tests.js and test/B-tests.js.
Expected behavior:  ""a"" suite  runs before ""B"" suite
Actual behavior: ""B"" suite runs before ""a"" suite
Reproduces how often: always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 10.14.1
The version and architecture of your operating system: macOS 10.14.1
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",stevenvachon,NONE,2018-12-06 17:49:10+00:00,True,2019-01-05 18:55:08+00:00,30.05,,3,11,2018-12-14 05:05:51+00:00,7.47,plroebuck,MEMBER,2,0,0,1,"['discussion', 'usability', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
3600,"feature: make ""slow"" (by default) a function of ""timeout""","I get sick of adjusting slow when adjusting timeout to avoid the warnings.
Unless slow is set by the user, what if we made it a function of the timeout value?
The current default values are 75ms for slow and 200ms for timeout.  The function could be, then:
slow = timeout => 0.375 * timeout
(If there's a different function that makes more sense, that'd be cool too)
I propose:

If a user provides --slow, that's the value we use.
If a user provides --timeout but no --slow, we use the above function to determine the value of slow
The equation is computed per-Runnable.  Meaning if we see a this.timeout(2000) (but importantly, no this.slow(x)) in a Runnable, then we adjust the slow value using the function.
If the user provides this.slow(x) in a Runnable, we use that value, otherwise we revert to whatever's used in the parent context.  If it's set explicitly via this.slow(x) in some parent context, use that; if it's set via --slow do the same.  If it's not set anywhere, use the function.

An alternative:

If slow is less than 1, it's no longer in milliseconds; it's considered a percentage of the value of timeout.  We could get away with shipping that in a minor

Thoughts?  @mochajs/core",boneskull,MEMBER,2018-12-07 18:43:09+00:00,False,,,,1,1,2018-12-07 18:43:59+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['discussion', 'feature', 'semver-major']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False
3601,increase unit test coverage,"counting our integration tests, our coverage is hovering around 90% at time of writing.
...but if we're just looking at unit test coverage, it's only about 50%. 😬
Two parts to this:


 Set up Mocha to compute unit test coverage in isolation
Create a script (package-scripts.js) and/or configure nyc (.nycrc) to easily compute unit test coverage
Don't include stuff that we can't unit test reasonably within the count.  If it isn't require'd by anything, that's a hint.  If the coverage doesn't stand at about 50%, then too much is getting counted.
This may necessitate two separate setups for browser and Node.js.  Just figure out Node.js for this issue; see #2532 if you want to figure out how to compute browser coverage


 Write moar tests (in test/unit/)",boneskull,MEMBER,2018-12-08 01:23:38+00:00,False,,,,1,0,,,,,0,0,0,0,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3603,Use markdown-magic to keep README HTML link versions up to date,"Description
Update script to maintain link package version automatically for embedded HTML examples of browser usage of Mocha in docs/index.md.
 <link href=""https://unpkg.com/mocha@5.2.0/mocha.css"" rel=""stylesheet"" />
 <script src=""https://unpkg.com/mocha@5.2.0/mocha.js""></script>
Additional Information
Use https://github.com/forresst/markdown-magic-package-json to achieve this.
Substitute ""package.json"" version for ""5.2.0"" above.",plroebuck,MEMBER,2018-12-08 20:09:54+00:00,False,,,,2,1,2019-01-09 20:50:57+00:00,32.03,waseemahmad31,NONE,0,0,0,1,"['documentation', 'nice-to-have', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3604,reporters should be immune to interference with STDOUT,"Potentially related: #2943
If a reporter uses console.log(), it should retain the function like we do with timers.
This will theoretically allow users to stub out console.log() in their own tests without affecting reporter output.
Since console.log() expects this to be console, it likely needs to take a form of:
const log = console.log.bind(console);
process.stdout.write() may need to be consumed in a similar manner.
To reproduce the problem:
// yuck.spec.js
it('should do, but it do not', function() {
  // user wants to hide output generated by console.log calls in fn 'foo'
  console.log = function() {};
  foo();
});
Another approach would be to instantiate our own Console object (docs) which would bypass the global console entirely.  We could consider subclassing Console in order to provide a nice abstraction for reporters consuming process.stdout directly (or other streams).
A workaround (for the user) would be to use something like proxyquire, rewiremock, etc. in lieu of replacing the method outright, like one would with Sinon.",boneskull,MEMBER,2018-12-10 05:30:40+00:00,False,,,,3,8,2018-12-10 05:31:10+00:00,0.0,boneskull,MEMBER,3,0,0,0,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3605,How to log mochaOpts in the test?,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
How do I print mochaOpts.retries in the test? Currently, tests are triggered from a 3rd party service and I'm not sure whether the tests are retried or not. So I wanna add a console log to figure out the how the tests are configured. Can someone help me here?
Steps to Reproduce

Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 10.11.0
The version and architecture of your operating system: Mac
Your shell (bash, zsh, PowerShell, cmd, etc.): zsh
Your browser and version (if running browser tests): Chrome 69
Any other third party Mocha related modules (with versions):
The code transpiler being used:",shridharkalagi,NONE,2018-12-10 07:19:30+00:00,True,2019-06-18 15:31:06+00:00,190.34,,3,5,2018-12-11 16:34:20+00:00,1.39,craigtaub,MEMBER,1,0,0,2,"['needs-feedback', 'needs-mcve', 'question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
3606,Use @mocha/contributors,"I've extracted scripts/update-contributors.js into a more general-purpose @mocha/contributors.

 Remove scripts/update-contributors.js
 Add @mocha/contributors
 Update package-scripts.js
 (optional) Run this as a preversion or prepublishOnly",boneskull,MEMBER,2018-12-11 17:04:30+00:00,True,2018-12-12 00:29:22+00:00,0.31,,1,0,,,,,0,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3610,mochajs official site not accessible,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce
Try to access https://mochajs.org/

Expected behavior: Should navigate to the stie
Actual behavior: gets a'page not found'
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",Jayasankar-m,CONTRIBUTOR,2018-12-12 18:13:46+00:00,True,2018-12-12 21:09:01+00:00,0.12,,3,2,2018-12-12 18:34:24+00:00,0.01,guimap,NONE,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3612,Improve default resolution of mocha.opts,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

Description
Mocha looks for mocha.opts in test/mocha.opts. Ref: #1275 (comment)
Many projects keep tests next to the code they're testing, which means there's no test/ directory and  so unless that test/ folder is created especially for this config file, there's no place that mocha.opts will be read by default.
#1277 provides an alternative here. You can put mocha.opts wherever you want, e.g. alongside package.json, and specify --opts mocha.opts. However the package.json I'm working with has 11 different mocha invocations. I can add --opts mocha.opts to each one, though it's inconvenient and makes these invocations more difficult to read.
It would be a usability improvement to default to searching for mocha.opts alongside the package.json in addition to looking in test/mocha.opts.
Steps to Reproduce

Set options in mocha.opts alongside package.json e.g. --reporter mocha-env-reporter
Run mocha

Expected behavior: The reporter is loaded.
Actual behavior: The reporter is not loaded.
Reproduces how often: Always.
Additional Information
If both files exist, probably it makes sense to print a warning and use test/mocha.opts, for compatibility with the old behavior.",paulmelnikow,NONE,2018-12-13 17:24:42+00:00,True,2018-12-13 20:54:57+00:00,0.15,,2,3,2018-12-13 19:20:37+00:00,0.08,craigtaub,MEMBER,1,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3615,TO DELETE,--- DELETE ---,BertholetDamien,NONE,2018-12-14 03:54:35+00:00,True,2018-12-14 03:55:14+00:00,0.0,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3618,done is not defined(),"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",DawidKowalczyk,NONE,2018-12-14 12:57:09+00:00,True,2018-12-18 08:20:15+00:00,3.81,,4,15,2018-12-14 13:05:28+00:00,0.01,DawidKowalczyk,NONE,1,0,0,2,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3621,Configure xunit output filename through env,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

Description
I want to run the xunit reporter while in CI, and the spec reporter in dev. I'm using mocha-env-reporter to accomplish this. In CI I set the mocha_reporter environment variable in production and it switches the reporter.
However I also need to set the filename for each test suite. With mocha-junit-reporter I can do this with the MOCHA_FILE environment variable, however with the built-in xunit reporter I have to do it on the command line. This is inconvenient because it requires duplicating a bunch of parameters on the mocha command line into the CI config.
It would be helpful to be able to configure the output file for the xunit reporter through the environment, in the same way I can with mocha-junit-reporter.",paulmelnikow,NONE,2018-12-16 19:39:16+00:00,False,,,,2,1,2018-12-16 19:56:01+00:00,0.01,paulmelnikow,NONE,0,0,0,1,"['feature', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3622,Promise rejection with await not throwing UnhandledPromiseRejectionWarning,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
const someFn = async () => {
  throw new Error(`I'm an error!`)
}

describe('someFn', () => {
  it('should result in UnhandledPromiseRejection', async () => {
    await someFn()
  })
})
In the above code, if try/catch is not used in the test I would expect an UnhandledPromiseRejection to be logged in the console, but instead, the error is. Trying to understand why. Maybe this is a duplicate of #2640 ? Couldn't quite tell.
Expected behavior: expect an UnhandledPromiseRejection to be logged in the console
Actual behavior: error is logged, without UnhandledPromiseRejection
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 4.1.0
The output of node --version: 10.0.0
The version and architecture of your operating system: OS X 10.10.5
The code transpiler being used: none",coreyc,NONE,2018-12-17 00:27:58+00:00,True,2019-01-02 18:53:38+00:00,16.77,,2,1,2019-01-02 18:53:38+00:00,16.77,boneskull,MEMBER,1,0,0,0,"['faq', 'invalid']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3624,CONTRIBUTORS.md needs updates,There's some out-of-date information in here around goals and PR process.  Just creating an issue for the forthcoming PR.,boneskull,MEMBER,2018-12-18 18:29:36+00:00,False,,,,1,0,,,,,0,0,0,0,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3626,avoid running tests in CI for documentation changes,"If you're knowledgable about Travis CI and/or GitHub integrations, this might be a good issue for you.  It's helpful even if you just tell me it's not possible!
What I'd like to do is this:
When changes are only documentation updates, only run the Markdown linter on Travis CI.  That means no tests, no code coverage, and for the love of Pete, no AppVeyor.
The command to run these checks would be npm start lint.markdown.
If AppVeyor must be asked to run a build, it should abort immediately with a result of success.
Code coverage won't be computed if the tests don't run on Travis CI.",boneskull,MEMBER,2018-12-18 18:40:52+00:00,False,,,,4,3,2019-01-05 12:41:52+00:00,17.75,tharun208,NONE,2,0,0,1,"['good-first-issue', 'help wanted', 'qa']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3627,"give props to non-OpenCollective sponsors, services","We should add the following logos to our site and README.md, with links.  If anyone (@ArtemGovorov, @segrey?) wants to provide a tracking URL, that's cool too.

WallabyJS for providing a WallabyJS license
SauceLabs for providing upgraded service
JetBrains for providing WebStorm licenses

(Future: add Discourse for donation of hosted instance, if we ever get it off the ground.)


In a separate section, we could add logos for these services we consume:

Travis CI
AppVeyor
Coveralls
Netlify
anything else?  Probot maybe?",boneskull,MEMBER,2018-12-18 19:59:09+00:00,False,,,,1,0,,,,,0,0,0,0,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3629,custom jsdoc tag for environment-specific code,"I identified a use case for a custom JSDoc tag in our source.
Let's tag code that exists for the sole purpose of supporting a particular environment.  Then, if/when we drop support for that environment, we can easily find what can be culled.  Maybe @env?
Example, from lib/utils.js:
/**
 * `process.emitWarning` or a polyfill
 * @env IE11
 */
var doDeprecationWarning = process.emitWarning
  ? function(msg) {
      // Node.js v6+
      process.emitWarning(msg, 'DeprecationWarning');
    }
  : function(msg) {
      // Everything else
      process.nextTick(function() {
        console.warn(msg);
      });
    };
cc @craigtaub @plroebuck for feedback?",boneskull,MEMBER,2018-12-19 17:48:15+00:00,False,,,,3,3,2018-12-19 18:05:21+00:00,0.01,craigtaub,MEMBER,3,0,0,0,"['discussion', 'documentation']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
3630,xdescribe executes the code,"Prerequisites


[ x] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code. (doesn't apply here)
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself (doesn't apply here)
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha. (doesn't apply here)

Description
The code that runs inside an xdescribe block is executed, although it's not supposed to.
Steps to Reproduce
xdescribe('hey', () => {
    console.log(""YOOO"")
});

Expected behavior:
No console output
Actual behavior:
""YOOO"" in the console output
Reproduces how often:
Always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
5.2.0
The output of node --version:
v8.11.2
The version and architecture of your operating system:
Windows 7
Your shell (bash, zsh, PowerShell, cmd, etc.):
VSCode terminal",uluhonolulu,NONE,2018-12-20 15:54:46+00:00,True,2019-01-02 18:32:12+00:00,13.11,,3,4,2018-12-20 22:01:42+00:00,0.25,craigtaub,MEMBER,2,0,0,1,"['faq', 'invalid']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3634,Remove teamcity reporter reference,"Description
The 'teamcity' reporter moved to its own repository more than five years ago (Mocha-1.14.0).
It's time to remove the notice from ""lib/mocha.js"".
Additional Information
See #954.",plroebuck,MEMBER,2018-12-22 17:58:41+00:00,True,2019-01-03 22:45:07+00:00,12.2,,2,1,2019-01-03 22:45:03+00:00,12.2,boneskull,MEMBER,1,0,0,0,"['good-first-issue', 'help wanted', 'reporter', 'semver-patch']",False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3636,some fixtures need renaming,commit a113b85 introduced some test fixtures but they don't have the .fixture.js extension.,boneskull,MEMBER,2018-12-28 00:01:04+00:00,True,2018-12-28 23:29:39+00:00,0.98,,1,1,2018-12-28 00:01:13+00:00,0.0,boneskull,MEMBER,1,0,0,0,['qa'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3639,"growl should use userland ""which"" package","We should consume userland modules for nontrivial operations to avoid maintenance burden.  continuation of my comments from #3542, which introduced a hand-rolled which implementation.",boneskull,MEMBER,2018-12-28 22:34:39+00:00,True,2019-01-01 18:44:32+00:00,3.84,,1,0,,,,,0,0,0,0,['chore'],True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3641,Remove MOCHA_COLORS environment variable,"Description
This environment variable was introduced in Sep 2013 by #965.
Later, we updated to use supports-color module for color support in Feb 2015 by #1545.
This module later gained its own pseudo-standard environment variable FORCE_COLOR which provides the same function in Jan 2017.
As MOCHA_COLORS provides redundant functionality, it should be removed.
Additional Information
lib/reporters/base.js
exports.useColors =
  !process.browser &&
  (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);
would become
exports.useColors = !process.browser && supportsColor.stdout;",plroebuck,MEMBER,2018-12-28 23:10:04+00:00,True,2019-01-19 15:57:15+00:00,21.7,,3,3,2019-01-02 18:29:14+00:00,4.8,boneskull,MEMBER,3,0,0,0,"['good-first-issue', 'refactor', 'usability']",False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3643,can't run browser tests on windows,"Not surprised, given we don't do this in CI.  What needs to happen is NODE_PATH=. in the package-scripts.js should be changed to cross-env NODE_PATH=..",boneskull,MEMBER,2019-01-01 19:35:58+00:00,True,2019-01-17 17:26:27+00:00,15.91,,2,2,2019-01-02 19:15:22+00:00,0.99,juergba,MEMBER,2,0,0,0,"['developer-experience', 'qa']",False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3644,deploy docs of major releases to their own subdomains,"Currently, only the mochajs.org branch will be published whenever it's updated.  That's fine for ensuring our site doesn't reflect master, but what we should really do is have multiple sites--e.g., one for v5.x and another for v6.x.
Netlify can do this automatically based on branch name; it creates a slug of the branch name and uses that for the subdomain.  We can then whitelist the branches to deploy.  So, I propose maintaining these branches (which map to <branch>.mochajs.org):

latest: Whatever release npm latest tag points to (currently v5.2.0).  No subdomain; this is the ""official"" site
master: This will always reflect master
next: Whatever the npm next tag points to (currently v6.0.0-0)
v5 and v6: Pointing to two new npm tags with these respective names.  Next major would be v7.  We'd need to keep these branches pointing to the latest git tags for each major.  This does not imply we will maintain old versions of Mocha; just that the reference material will still exist.

This will require some documentation and/or automation around publishing.
This can be setup in Netlify's UI, and I'll do it if I can get it to update our branches.  but if anyone in @mochajs/core would like to help, go right ahead.  if you don't have access to our Netlify site and want it, please let me know and I'll add you.",boneskull,MEMBER,2019-01-01 21:10:26+00:00,False,,,,3,4,2019-01-04 03:32:27+00:00,2.27,outsideris,MEMBER,2,0,0,0,"['chore', 'core-team', 'documentation']",True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3646,too much noise if no files found,"To reproduce, run mocha (verbatim) in a directory with no test/ subdir:
Warning: cannot find any files matching pattern ""test/"": 'test/'
✖ No test files found

We should remove the warning and use the error.  Print the dir it's looking for, but only once.  😄
I think @craigtaub might be good to address this since he changed some errors recently, but please unassign/re-label if you don't want to do it.",boneskull,MEMBER,2019-01-02 18:50:41+00:00,True,2019-01-04 08:11:51+00:00,1.56,,2,1,2019-01-02 19:39:27+00:00,0.03,craigtaub,MEMBER,1,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3647,Error thrown yet the test fails,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When I'm expecting an error to be thrown, mocha highlights in red the relevant it block but without any details (when the assertion inside should pass.
When I'm changing the expect assertion to expect no thrown errors, it shows up on the console (as I would expect from NodeJS) like it was supposed to throw an error (which is expected).
Steps to Reproduce

Test code:
const Server = require('serverbuilder');
const smallApp = (req, res) => {};

it('should alert', () => {
  let port = 5e3;
  expect(() => { new Server(smallApp, port) }, 'EADDRINUSE').to.throw(`Port ${port} is already in use`);
});
Use mocha test --exit as the NPM test script and run npm test
Expected behavior: [What you expect to happen]
1) should alert should pass (ie. be in grey on the CLI).
Actual behavior: [What actually happens]
1) should alert fails since it's in red.
Reproduces how often: [What percentage of the time does it reproduce?]
Everytime even with the following test code:
const Server = require('serverbuilder');
const smallApp = (req, res) => {};

it('should alert', () => {
  let port = 5e3;
  try {
    expect(() => { new Server(smallApp, port) }, 'EADDRINUSE').to.throw(`Port ${port} is already in use`);
  } catch (err) {
    console.log('alert err:', err);
  }
});
Which leads to this on the output:
should alert:
     Uncaught Error: Port 5000 is already in use
      at Server.<anonymous> (index.js:340:17)
      at emitErrorNT (net.js:1317:8)
      at process.internalTickCallback (internal/process/next_tick.js:72:19)
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v11.1.0
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.): Linux tuxer 4.18.16.a-1-hardened #1 SMP PREEMPT Sat Oct 20 17:34:54 CEST 2018 x86_64 GNU/Linux (bash 4.4.23)
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): N/A
The code transpiler being used: N/A

Additional Information",Berkmann18,NONE,2019-01-03 14:05:43+00:00,True,2019-01-03 22:12:07+00:00,0.34,,2,8,2019-01-03 22:12:07+00:00,0.34,boneskull,MEMBER,1,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3656,Ensure all errors have a code,"We now have codes for Errors generated by mocha (see #3125) but there are still some missing (e.g. https://github.com/mochajs/mocha/blob/master/lib/interfaces/common.js#L130).
Make sure the others have factory functions with appropriate code, arguments and documentation.",craigtaub,MEMBER,2019-01-05 00:07:36+00:00,False,,,,1,0,,,,,0,0,0,0,"['help wanted', 'semver-minor', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3659,Mocha not running test,"Prerequisites


[✔️] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[✔️] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[✔️] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[✔️] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Running npm test appears to not run any mocha tests.
Steps to Reproduce
$ npm install --global mocha
$ npm test
0 passing (3ms)

Expected behavior: [What you expect to happen]
To show 1 passing
Actual behavior: [What actually happens]
Shows 0 passing
Reproduces how often: [What percentage of the time does it reproduce?]
100% of time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v11.0.0
The version and architecture of your operating system: OSX 10.14 (18A391)
Your shell (bash, zsh, PowerShell, cmd, etc.): terminal?
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): N/A
The code transpiler being used: N/A

Additional Information
package.json snippet
{
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""mocha""
  },
  ""devDependencies"": {
    ""chai"": ""^4.2.0"",
    ""mocha"": ""^5.2.0"",
    ""should"": ""^13.2.3""
  }
}

test/test.js snippet
/* eslint-disable no-undef */

var chai = require('chai')
var expect = chai.expect

describe('...', function() {
  describe('...', function() {
    expect(...).to.be.true
  })
})",bugs181,NONE,2019-01-06 08:50:21+00:00,True,2019-01-06 11:43:40+00:00,0.12,,2,2,2019-01-06 10:08:26+00:00,0.05,juergba,MEMBER,1,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3661,consolidate modules used for markdown processing,"See #3652 which may affect what happens here.
Currently we're using markdown-magic, markdownlint, and remark to handle linting and pre-processing various markdown files (including those used on mochajs.org).
I'm pretty sure everything here can be replaced by remark and its plugin ecosystem.
If so, let's see if we can do that.  If the code ends up being less maintainable or otherwise more burdensome, forget it.
This does not have anything to do with the markdown reporter.",boneskull,MEMBER,2019-01-07 17:23:43+00:00,False,,,,1,0,,,,,0,0,0,0,"['documentation', 'help wanted', 'refactor']",False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3662,Mocha Server,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
This is not actually an issue, but a question how I can use mocha as ""Mocha Server"".
I want to create some kind of ""Mocha Server"",  meaning some kind of express application where you can send you're tests to which are executed with mocha.
To achieve this, I should be able to create multiple mocha instances (one for each incoming request (test to execute).(run as a seperate process)
So a requirement would be that the scope should not be shared between the tests. (which is not possible at the moment with mocha)
Do you have an idea how to create this?
BR, Rob",robdaems,NONE,2019-01-08 07:19:26+00:00,True,2019-01-08 14:26:43+00:00,0.3,,1,1,2019-01-08 14:26:41+00:00,0.3,robdaems,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3663,update mochajs.org to use @mocha/docdash@^2,"@mocha/docdash should pull down changes from docdash, since there are some new features in there we could use.",boneskull,MEMBER,2019-01-08 18:37:03+00:00,True,2019-02-22 05:52:07+00:00,44.47,,2,3,2019-01-10 18:37:39+00:00,2.0,outsideris,MEMBER,2,0,0,0,"['chore', 'documentation', 'good-first-issue', 'help wanted']",True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3664,syntax highlighting on API site should use light color scheme,"It can be difficult (if not impossible) for colorblind people to read code on a dark background.
Use a color scheme with a light background.  Feel free to adapt the scheme from mochajs.org.
static/styles/prettify.css is the file that needs modification.
You'll need to fork @mocha/docdash and send a PR there--not to this repo!",boneskull,MEMBER,2019-01-08 18:43:46+00:00,False,,,,4,3,2019-01-26 03:56:17+00:00,17.38,amanriquez,NONE,1,0,0,2,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3667,mochajs.org needs a csp,From this comment by @plroebuck w/ comments by @Munter.,boneskull,MEMBER,2019-01-09 23:36:54+00:00,False,,,,1,0,,,,,0,0,0,0,"['documentation', 'help wanted', 'security']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3670,Mocha doesn't support --experimental-worker,"Prerequisites


[ x] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
I would like to test code that relies on the worker_threadsmodule, however Mocha does not support passing this flag.  I figured out how to pass the flag by editing my local node_modules/.bin/mocha file, but I'm not sure what else (documentation) would need be updated, so I'm holding off on a PR.

Steps to Reproduce
Use the worker_threads module in a test such as:
const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');

Results in
internal/modules/cjs/loader.js:605
    throw err;
    ^

Error: Cannot find module 'worker_threads'

Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 5.2.0
The version and architecture of your operating system: Ubuntu 18.10
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",esromneb,NONE,2019-01-13 08:06:16+00:00,True,2019-06-01 09:04:55+00:00,139.04,,4,2,2019-01-17 17:27:06+00:00,4.39,boneskull,MEMBER,1,0,0,1,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3672,consider more fancy CLI output,"yargonaut looks cool, and it might be nice to use its color capabilities.

(I wouldn't want to use the silly ASCII fonts)
@mochajs/core anyone opposed to more fancy output?  @plroebuck?",boneskull,MEMBER,2019-01-15 17:40:11+00:00,False,,,,3,4,2019-01-15 17:43:00+00:00,0.0,Munter,MEMBER,3,0,0,0,"['discussion', 'help wanted', 'nice-to-have']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
3675,Mocha failing when error message too big,"Description
Mocha never ends with big error messages
Steps to Reproduce
const {expect} = require('chai')
 it('Test failing', function () {
      const longArray = _.times(10000, function (i) {
        return {a : i}
      })
      const shortArray = []
      expect(longArray).deep.equal(shortArray)
})

Then execute yarn mocha test --exit, the test will execute it will be marked as failure, but the summary will never appear and the process will not exit.
If on contrary one writes:
const {expect} = require('chai')
 it('Test failing', function () {
      const longArray = _.times(10000, function (i) {
        return {a : i}
      })
      const shortArray = []
      try {
        expect(longArray).deep.equal(shortArray)
     } catch (e) {
        console.error(e)
        throw new Error('Small error')
     }
})

The test fails and it displays an error in the summary. Error is logged without any problem.
Expected behavior: [What you expect to happen]
Mocha should be able to exit the process even if the error is overly long. Maybe the message could be reduced?
Actual behavior: [What actually happens]
The process hangs forever
Reproduces how often: [What percentage of the time does it reproduce?]
Always
Versions
Mocha 5.1.1


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
v8.11.2
The version and architecture of your operating system:
Ubuntu
Your shell (bash, zsh, PowerShell, cmd, etc.):
bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:",furstenheim,NONE,2019-01-17 09:01:11+00:00,False,,,,6,14,2019-01-18 09:48:41+00:00,1.03,boneskull,MEMBER,4,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3676,"createInvalidArgument function, other renames","In #3666 we're tossing an error because --compilers can no longer be used.  But we're using createInvalidArgumentValueError, which doesn't seem to be appropriate based on that function's documentation.
It looks like what we want is a createInvalidArgumentError, where the argument itself is disallowed (I'm going to create a PR for this imminently).
Somewhat related--this probably wants to be a separate PR--I'm thinking in these function names, ""argument"" should be replaced with ""option"", because what we're really dealing with are options.  They can be command-line arguments, but command-line arguments are just a means to configure options.  The same error should be thrown whether --compilers was used on the command-line, or .mocharc.json has a compilers option.
cc @vkarpov15",boneskull,MEMBER,2019-01-17 21:54:40+00:00,True,2019-02-20 18:29:30+00:00,33.86,,1,2,2019-02-20 18:29:30+00:00,33.86,boneskull,MEMBER,1,0,0,0,"['node.js', 'refactor']",False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3678,extract GH-237-related ESLint rules into standalone module,"It might be useful for somebody to reuse our complicated-ass ESLint rules around use of global timers.
These rules, for example, disallow:
setTimeout();
global.setTimeout();
but they allow:
const setTimeout = global.setTimeout;
setTimeout();
These are repeated for the other global timers and the global Date object.  Use of Node.js' timers module should also be disallowed similarly to direct access via global (can't recall if it is).
ANYWAY, the point of this is, because we know that Mocha's code will load before any user code, tests, or 3rd-party modules, we can save a reference to those globals.  The user is free to do whatever untoward thing they wish to these globals, and Mocha will not be impacted (think Sinon fake timers).
We should be careful to note that this is not intended to avoid malicious code, and shouldn't be used in modules that cannot guarantee the order in which code is loaded.  Whether that has broad applicability beyond test runners, I have no idea.
Since it's a rule, I think all we need is an ESLint shareable config--not a plugin.",boneskull,MEMBER,2019-01-18 21:44:27+00:00,False,,,,1,0,,,,,0,0,0,0,"['core-team', 'nice-to-have']",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3679,try eslint-plugin-ie11,"eslint-plugin-ie11 should help us cover those few things that ESLint doesn't do out-of-the-box.
If proven useful, it should be used in all code which isn't specifically found in the whitelist of files supporting ES6.",boneskull,MEMBER,2019-01-18 23:06:15+00:00,False,,,,2,1,2019-02-26 01:03:25+00:00,38.08,szb512,NONE,0,0,0,1,"['good-first-issue', 'help wanted', 'qa']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3681,`--inspect` flag doesn't work,"When I tried to debug mocha with --inspect option, ReferenceError: describe is not defined error occurred.
It seems it is not run under mocha context.
$ ./node_modules/.bin/mocha --version
6.0.0-1

$ ./node_modules/.bin/mocha --inspect ex.test.js
Debugger listening on ws://127.0.0.1:9229/aca2ad85-76ab-42ac-99bc-6acb84bd1bc2
For help, see: https://nodejs.org/en/docs/inspector
/Users/outsider/temp/mocha-next/6/ex.test.js:1
(function (exports, require, module, __filename, __dirname) { describe('Suite', () => {
                                                              ^

ReferenceError: describe is not defined
    at Object.<anonymous> (/Users/outsider/temp/mocha-next/6/ex.test.js:1:63)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3)
With mocha@5.2.0, it is fine.
$ ./node_modules/.bin/mocha --version
5.2.0

$ ./node_modules/.bin/mocha --inspect ex.test.js
Debugger listening on ws://127.0.0.1:9229/4b56feea-1711-43bd-82a3-5a587171122f
For help, see: https://nodejs.org/en/docs/inspector


  Suite
    ✓ test


  1 passing (5ms)",outsideris,MEMBER,2019-01-19 16:48:46+00:00,True,2019-02-08 19:01:26+00:00,20.09,v6.0.0,3,9,2019-01-23 18:47:24+00:00,4.08,outsideris,MEMBER,3,0,0,0,"['confirmed-bug', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3682,programmatic mocha.run synchronous reporters,"i need to generate separate reports for each test file, however when i use mocha programmatically, the reporters don't generate assets (e.g. html, doc). they just seem to send everything to stdout. so then i tried running mocha.run() once for each file, and tried capturing stdout to create the file, but i canno get it to run synchronously.
any suggestions on how i could generate multiple reports?",brewster1134,NONE,2019-01-20 17:27:29+00:00,True,2019-01-21 16:06:08+00:00,0.94,,2,2,2019-01-21 16:05:31+00:00,0.94,plroebuck,MEMBER,1,0,0,1,"['question', 'reporter']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3683,"Boolean option ""--delay"" does not work in all cases","Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The output is different depending on the order of --delay and --timeout options.
node mocha --delay --timeout 5000 .\fixtures\options\delay.fixture.js
The output is correct:
 delayed execution
    √ should have no effect if attempted twice in the same suite
  1 passing (12ms)

node mocha --timeout 5000 --delay .\fixtures\options\delay.fixture.js
There is no output at all.
Steps to Reproduce
Use this test file.
Expected behavior: result should not depend on order of option flags
Actual behavior: result is different
Reproduces how often: always
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: v6.0.0-1
The output of node --version: v10.5.0
The version and architecture of your operating system: Windows 10 Home
Your shell (bash, zsh, PowerShell, cmd, etc.): VS Code cmd
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information
Mocha seems to be rather quiet when trying to use misspelled or non-existent option flags. There are no errors or warnings.",juergba,MEMBER,2019-01-23 09:04:19+00:00,True,2019-01-25 19:20:00+00:00,2.43,,3,10,2019-01-24 10:10:08+00:00,1.05,juergba,MEMBER,3,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3685,inspect exit handlers,"we need to audit over we're exiting processes and the interaction between mocha and _mocha.

I'm not sure everything is working as intended.
The tests around --exit / --no-exit only operate on _mocha.
We abort some of these tests by sending the child a SIGINT, but...
The exit code of the child should be 130.  It's 0?  Once a node process has decided to exit, it's tough to debug and may not be pausable at all.
SIGINT may not be the best way to do cancel the child process in these tests, but ideally we should ensure our signal-handling is correct in general
The exit codes need to be the same using either executable.
process.exit() is used incorrectly in a few places
Sending SIGKILL immediately after SIGHUP is in mocha is probably very wrong.
I think tink uses some sort of hacked-together process replacement, which might be a good solution instead of keeping mocha hanging around as a dumb parent process (process replacement is not supported on Windows)

""Proper exit codes"" conforming to POSIX standards are another issue.  Please don't discuss it here.",boneskull,MEMBER,2019-01-23 23:15:17+00:00,False,,,,1,0,,,,,0,0,0,0,"['help wanted', 'node.js']",False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3687,"Cmdline argument processing faulty with ""bin/mocha""","Description
Mocha's cmdline argument processing is not working as it should. Defaults are being applied prior to determining if the user-provided cmdline arguments were valid.
Steps to Reproduce
Checked with various non-boolean cmdline options that should require arguments, such as:

--timeout
--slow
--require
--global
--ui

Expected behavior: [What you expect to happen]
When using an argument-requiring cmdline option and none provided, an error should occur.
Usage (a la --help), followed by error message, should be output to stderr.
This works correctly when using ""bin/_mocha"" directly...
$ DEBUG=""*"" bin/_mocha --ui >/dev/null
  mocha:cli:cli entered main with raw args [ '--ui' ] +0ms
  mocha:cli:config found config at /var/tmp/mocha/.mocharc.yml +0ms
  mocha:cli:options no config found in /var/tmp/mocha/package.json +0ms
  mocha:cli:options No mocha.opts found at ./test/mocha.opts +1ms
  mocha:cli:cli YError: Not enough arguments following: ui
[SNIP stacktrace]
[SNIP usage and error]
Actual behavior: [What actually happens]
This fails when using ""bin/mocha""...
$ cd </path/to/mocha/repo/clone>  # :NOTE: Don't care about tests themselves...
$ bin/mocha --ui


  0 passing (1ms)
$ DEBUG=""*"" bin/mocha --ui
  mocha:cli:config found config at /var/tmp/mocha/.mocharc.yml +0ms
  mocha:cli:options no config found in /var/tmp/mocha/package.json +0ms
  mocha:cli:options No mocha.opts found at ./test/mocha.opts +0ms
  mocha:cli loaded opts { _: [],
  config: false,
  package: false,
  opts: false,
  require: [ 'test/setup' ],
  r: [ 'test/setup' ],
  ui: 'bdd',
  u: 'bdd',
  global: [ 'okGlobalA', 'okGlobalB', 'okGlobalC', 'callback*' ],
  globals: [ 'okGlobalA', 'okGlobalB', 'okGlobalC', 'callback*' ],
  timeout: 200,
  t: 200,
  timeouts: 200,
  diff: true,
  extension: [ 'js' ],
  'watch-extensions': [ 'js' ],
  reporter: 'spec',
  R: 'spec',
  slow: 75,
  s: 75 } +0ms
  mocha:cli exec /usr/local/bin/node w/ args: [ '/var/tmp/mocha/bin/_mocha',
  '--no-config',
  '--no-package',
  '--no-opts',
  '--require',
  'test/setup',
  '--ui',
  'bdd',
  '--global',
  'okGlobalA',
  '--global',
  'okGlobalB',
  '--global',
  'okGlobalC',
  '--global',
  'callback*',
  '--timeout',
  '200',
  '--diff',
  '--extension',
  'js',
  '--reporter',
  'spec',
  '--slow',
  '75' ] +5ms
  mocha:cli:cli entered main with raw args [ '--no-config',
  '--no-package',
  '--no-opts',
  '--require',
  'test/setup',
  '--ui',
  'bdd',
  '--global',
  'okGlobalA',
  '--global',
  'okGlobalB',
  '--global',
  'okGlobalC',
  '--global',
  'callback*',
  '--timeout',
  '200',
  '--diff',
  '--extension',
  'js',
  '--reporter',
  'spec',
  '--slow',
  '75' ] +0ms
  mocha:cli:run:helpers resolved test/setup to /var/tmp/mocha/test/setup +0ms
  mocha:cli:run:helpers loaded require ""test/setup"" +198ms
  mocha:cli:run post-yargs config { _: [],
  diff: true,
  config: false,
  package: false,
  opts: false,
  require: [ 'test/setup' ],
  r: [ 'test/setup' ],
  ui: 'bdd',
  u: 'bdd',
  global: [ 'okGlobalA', 'okGlobalB', 'okGlobalC', 'callback*' ],
  globals: [ 'okGlobalA', 'okGlobalB', 'okGlobalC', 'callback*' ],
  timeout: 200,
  t: 200,
  timeouts: 200,
  extension: [ 'js' ],
  'watch-extensions': [ 'js' ],
  watchExtensions: [ 'js' ],
  reporter: 'spec',
  R: 'spec',
  slow: 75,
  s: 75,
  spec: [ 'test/' ],
  '$0': 'mocha' } +0ms
  mocha:suite bail undefined +0ms
  mocha:suite slow 75 +0ms
  mocha:suite timeout 200 +0ms
  mocha:cli:run:helpers files (in order):  [ '/var/tmp/mocha/test/assertions.js',
  '/var/tmp/mocha/test/setup.js' ] +4ms
  mocha:cli:run running tests with files [ '/var/tmp/mocha/test/assertions.js',
  '/var/tmp/mocha/test/setup.js' ] +3ms
  mocha:runner grep /.*/ +0ms
  mocha:runner globals [""DTRACE_NET_SERVER_CONNECTION"",""DTRACE_NET_STREAM_END"",""DTRACE_HTTP_SERVER_REQUEST"",""DTRACE_HTTP_SERVER_RESPONSE"",""DTRACE_HTTP_CLIENT_REQUEST"",""DTRACE_HTTP_CLIENT_RESPONSE"",""global"",""process"",""Buffer"",""clearImmediate"",""clearInterval"",""clearTimeout"",""setImmediate"",""setInterval"",""setTimeout"",""__core-js_shared__"",""expect"",""before"",""after"",""beforeEach"",""afterEach"",""run"",""context"",""describe"",""xcontext"",""xdescribe"",""specify"",""it"",""xspecify"",""xit"",""XMLHttpRequest"",""Date""] +0ms
  mocha:runner globals [""okGlobalA"",""okGlobalB"",""okGlobalC"",""callback*"",""okGlobalA"",""okGlobalB"",""okGlobalC"",""callback*""] +1ms
  mocha:runner start +0ms
  mocha:runner run suite  +0ms
  mocha:runner finished running +0ms


  0 passing (0ms)

  mocha:runner end +2ms
Versions

The output of mocha --version: 6.0.0-1
The output of node --version: v10.15.0
The version and architecture of your operating system: macOS 10.13.6
Your shell (bash, zsh, PowerShell, cmd, etc.): bash",plroebuck,MEMBER,2019-01-24 18:58:28+00:00,True,2019-01-25 19:20:33+00:00,1.02,v6.0.0,1,0,,,,,0,0,0,0,"['confirmed-bug', 'node.js', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3688,consider supporting node-report if present,"node-report was recently pulled in to Node.js core.
it might be cool to consume this if it exists to provide extra information in case of an unexpected failure.
maybe that looks like formatted output before process end, or just creation of a report file.  there may be tools already that ingest this data and output it in a pretty, human-readable format (I think the version in node core is JSON).
node-report the userland module is also a thing, but it's a native module, so we shouldn't bother with it.  even if it's an optional dependency, users will complain about compilation errors and warnings upon installation.
any implementation should take steps to avoid use of this module in the browser.",boneskull,MEMBER,2019-01-24 19:27:12+00:00,False,,,,1,0,,,,,0,0,0,0,"['feature', 'nice-to-have', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3689,refactor: encapsulation issues,"There are many places throughout the codebase (mostly in the main classes) where we modify data via assignment in some object (e.g., a Suite) directly from some other class.  this includes properties which are ostensibly ""private"" (e.g. Suite#_onlyTests).
This breaks encapsulation/information-hiding. Refactor these instances by creating methods within the classes having these properties, and call those methods from whatever code is currently doing direct assignment.
Example:

  
    
      mocha/lib/interfaces/common.js
    
    
        Lines 169 to 180
      in
      b5d8513
    
    
    
    

        
          
               test: { 
        

        
          
                 /** 
        

        
          
                  * Exclusive test-case. 
        

        
          
                  * 
        

        
          
                  * @param {Object} mocha 
        

        
          
                  * @param {Function} test 
        

        
          
                  * @returns {*} 
        

        
          
                  */ 
        

        
          
                 only: function(mocha, test) { 
        

        
          
                   test.parent._onlyTests = test.parent._onlyTests.concat(test); 
        

        
          
                   return test; 
        

        
          
                 }, 
        
    
  


Instead, Suite could expose an instance method (e.g., appendOnlyTest) which appends the test to its _onlyTests array.  The consuming code would call test.parent.appendOnlyTest(test).  Going a step further, the Test class could expose an instance method (e.g. markOnly()) which would make the call.
These changes can be incremental; we don't have to do it all at once.  Any new methods will need unit tests.",boneskull,MEMBER,2019-01-24 20:17:46+00:00,False,,,,3,3,2019-01-24 20:32:06+00:00,0.01,plroebuck,MEMBER,2,0,0,1,"['good-first-issue', 'help wanted', 'refactor']",False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3690,bin/mocha: don't spawn child process unnecessarily,"This may or may not be a good idea:
If the user has not passed Node.js-specific or V8-specific arguments, import main from lib/cli/cli.js and execute it.
If the user has passed Node.js-specific or V8-specific arguments, use current behavior.
Advantages:

faster startup time

Disadvantages:

increased potential for inconsistent behavior
would require us to be much more careful about which executable we're using in integration tests
would possibly require the same integration tests execute against both executables

This isn't related to process replacement, but that's something else to consider if the hacks aren't too bad.",boneskull,MEMBER,2019-01-24 21:59:30+00:00,True,2019-06-10 06:03:23+00:00,136.34,,2,2,2019-05-24 22:14:34+00:00,120.01,stale,NONE,1,0,0,1,"['node.js', 'refactor']",False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3693,After() JSON,"Prerequisites
5.2.0
Description
I'm having problem in after (), when it contains two tests with the same JSON, eg:
| -fixtures
| --products
| --- charmander.json
| -test
| --products.spec.js
| --quotes.spec.js
If no products and quotes contains the same product as example, called charmander.json, does not run the project and reports as error the test 'quotes.spec.js'.
It is worth remembering that before is to create these products before the test and after to delete those products after completing the test.
Sometimes it reports the following error too:
""1)"" after all ""hook""",wilsonbrito,NONE,2019-01-25 10:36:04+00:00,True,2019-02-12 23:27:41+00:00,18.54,,4,1,2019-01-26 08:54:43+00:00,0.93,outsideris,MEMBER,1,0,0,0,"['needs-feedback', 'stale']",False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3696,"Impossibility to change the description in ""it (string, fn)"" and ""describe (string, fn)"" during the execution of tests","Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Found a bug in the functions it () and describe () in which there is a description with variables does not change if variables change.
I use Mocha to describe the end-points Rest API and the format of test descriptions I have follows a pattern:
/METHOD URL?PAR_1=&PAR_2= ...
Example:
/GET http://test.com/getAll?user_id=1234&resource=123
Each test and block it() uses different parameter values. Each test run is accompanied by the receipt of unique parameters in the before (root before hook) block. This is done so that the state and the launch of tests are independent of the previous ones.
The set of parameters as it was said above was obtained from root before hook and written to globals in the environment array.
Code Example:
describe('[TEST]', function() {
	it('/GET http://test.com/getAll?user_id='+global.environment.user_id+'&resource='+global.environment.resource, function(done) {
		// ... 
		done();
	})
})

Steps to Reproduce
Expected behavior: I expect changes of values from global variables in the description of it() & describe(). The behavior of other variables (not global) may be the same as now.
Actual behavior: At the time of the tests I get the following spec line / GET http://test.com/getAll?user_id=undefined&resource=undefined. Variables in the description it(), describe() not updated
Reproduces how often: is always
Versions

mocha --version: 5.2.0
node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: v9.11.2",iamnikas,NONE,2019-01-28 09:26:36+00:00,True,2019-01-29 20:30:30+00:00,1.46,,4,14,2019-01-28 14:56:52+00:00,0.23,iamnikas,NONE,2,0,0,1,"['async', 'invalid']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3697,--debug doesn't invoke --inspect correctly,"at least, in theory, because of this typo:

  
    
      mocha/bin/mocha
    
    
        Lines 42 to 46
      in
      1e30501
    
    
    
    

        
          
           // allow --debug to invoke --inspect on Node.js v8 or newer  nodeOpts.inspect = childOpts.debug; 
        

        
          
           if (childOpts.debug) { 
        

        
          
             childOpts.timeout = false; 
        

        
          
             delete childOpts.debug; 
        

        
          
             debug('--debug -> --inspect');",boneskull,MEMBER,2019-01-28 19:00:10+00:00,True,2019-01-29 21:54:29+00:00,1.12,,1,0,,,,,0,0,0,0,"['confirmed-bug', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3701,soft-deprecate noHighlighting,"noHighlighting is a browser-only option can supply which disables syntax highlighting.
It should probably be replaced with a reporter option (though open to debate!), since it's unique to the html reporter.  This should be a boolean option which defaults to true.
If a user supplies {noHighlighting: true} to mocha.setup() or calls mocha.noHighlighting() in the browser, we should print a deprecation message along the lines of ""noHighlighting is deprecated; provide {reporterOption: {highlight: false}} to mocha.setup().
This is what needs to be done:

The former case can be caught in the browser setup method; see deprecation notices in the Mocha constructor for examples.
The latter case can be addressed by calling utils.deprecate(...) within Mocha#noHighlighting.
The html reporter's constructor should accept a reporterOptions object, which may be undefined, and may have a boolean highlight property.  If the property is anything other than explicitly false, default to true
The reporter's constructor should execute Mocha.utils.highlightTags('code') when the end event is emitted by the runner property; use the check for document found here and the value of highlight prop passed in reporterOptions.
Remove those checks from the callback in browser-entry.js.
Please add unit tests which assert the new behavior in test/unit/mocha.spec.js.
Update documentation (docs/index.md) about the deprecation and new behavior.",boneskull,MEMBER,2019-01-29 23:09:49+00:00,False,,,,1,1,2019-01-29 23:16:34+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['browser', 'good-first-issue', 'help wanted', 'usability']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3702,two-column lists in the docs should not be the default style for lists!,"This should not be the default list style:

Change the stylesheet to display a ""normal"" list unless we apply a specific class for two-column display.  I think it's OK to use in some places, but not for all lists.
unless there's a way to specify the class in our markdown compiler (not sure), just use html for the ones we keep.  features and table of contents are good to keep... not sure about the rest.
For implementors:
To see changes locally, run npm start docs and open up docs/_dist/index.html with your browser. You can also do npm start docs.watch to rebuild as you work (you'll still have to reload).",boneskull,MEMBER,2019-01-29 23:25:01+00:00,False,,,,2,2,2019-02-03 17:58:03+00:00,4.77,crossaaron,NONE,1,0,0,1,"['documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3705,add Matomo badge to site,"Matomo now sponsors Mocha by providing its services to our project for free.  Here's a badge we can add to our site:

Link to https://matomo.org unless we hear otherwise.",boneskull,MEMBER,2019-01-30 20:26:33+00:00,False,,,,5,5,2019-02-04 03:44:43+00:00,4.3,sunkakar,NONE,1,0,0,2,"['documentation', 'good-first-issue', 'website']",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
3706,--reporter-option should allow comma-separated values,"Add coerce: list to the option in lib/cli/run.js. maybe add an integration test.
Reference: #3564",boneskull,MEMBER,2019-01-31 01:26:38+00:00,True,2019-02-13 01:51:08+00:00,13.02,v6.0.0,1,1,2019-01-31 01:26:51+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['confirmed-bug', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3708,Unneeded processing in _spawnMochaWithListeners?,"Description
_spawnMochaWithListeners function within file ""test/integration/helpers.js"".
Code in question is here, but relevant portion copied below.
  mocha.on('close', function(code) {
    fn(null, {
      output: output.split('\n').join('\n'),    // <=== why?
      code: code
    });
});
Need to determine if there's any reason for the .split('\n').join('\n') portion.
If so, document why; otherwise, remove the unnecessary post-processing of output.
Additional Information
See PR #1675.",plroebuck,MEMBER,2019-02-02 12:26:29+00:00,True,2019-02-16 18:48:04+00:00,14.26,,1,0,,,,,0,0,0,0,"['good-first-issue', 'qa']",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3709,bbgv\\\\\\bvxc=,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]
Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",firdausious,NONE,2019-02-03 12:11:24+00:00,True,2019-02-04 11:49:31+00:00,0.98,,4,3,2019-02-03 17:09:34+00:00,0.21,craigtaub,MEMBER,2,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3713,keep auto-generated content in docs out of VCS,"Our documentation has automatically generated sections.  The content in these sections is part of the doc build and should not be in VCS.
<!-- AUTO-GENERATED-CONTENT:START (toc:maxdepth=2&bullets=-) -->
(stuff)
<!-- AUTO-GENERATED-CONTENT:END -->
Should not be modified when running npm start docs.
Instead, the build should be run against a transient copy of the file.  That means:

Copy docs/index.md to a temp location
Run the preprocess script against the temp copy
Ensure Eleventy generates documentation from the temp copy
Remove the temp copy

Take care not to deploy the temp copy itself; Eleventy should deploy HTML only, and no markdown.
(This also applies to tutorials found in the API docs, which are in incoming pull request #3655; don't worry about these for now.)",boneskull,MEMBER,2019-02-04 18:48:11+00:00,False,,,,1,0,,,,,0,0,0,0,"['documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3714,duplicated header anchor links on mouseover,"Go to https://next.mochajs.org
Mouseover a heading


Remove the #; keep the other one.
cc @Munter",boneskull,MEMBER,2019-02-04 19:01:41+00:00,True,2019-03-28 11:55:50+00:00,51.7,,5,6,2019-02-04 19:35:34+00:00,0.02,cjdeleon62,NONE,3,1,0,1,"['confirmed-bug', 'documentation', 'good-first-issue', 'help wanted']",False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3716,smart quotes and smart hyphens in docs,"It’d be cool if we could get “smart quotes”—and hyphens—in our documentation.
that’s probably going to be a markdown processor or eleventy plugin. ideally this would apply to API docs as well but that can be a separate issue since the tools are different (there’s another issue about consolidating the markdown tools somewhere)",boneskull,MEMBER,2019-02-04 20:39:16+00:00,False,,,,1,0,,,,,0,0,0,0,"['documentation', 'help wanted', 'nice-to-have']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3717,Documentation for usage with Karma/Angular 4+,"I assume that since older versions of mocha worked with older versions of Angular, that this is still possible, but all of the references I can find online for this are varied and not helpful. I think it would be helpful for this project if there was an official documentation for how to set up mocha for Karma and Angular.",kbirger,NONE,2019-02-04 21:21:49+00:00,False,,,,4,7,2019-02-04 23:46:49+00:00,0.1,boneskull,MEMBER,1,0,0,3,"['browser', 'documentation', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3718,Project-local custom reporter launching binary mocha,"Prerequisites


[ X] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When launch mocha programatically using the _mocha binary file and try to set up a local custom reporter mocha doesn't accept it and try to look for it in a default reporters or in a installed module

Steps to Reproduce
Use the binary mocha
command = `${process.cwd()}/node_modules/.bin/_mocha`;
consoleParameters.push('--reporter', '../../../customReporter.js');
const runTestProcess = child.fork(command, consoleParameters);

------------------Transpiled customReporter.js-----------------------

""use strict"";
Object.defineProperty(exports, ""__esModule"", { value: true });
const mocha_1 = require(""mocha"");
class CustomReporter {
    constructor(runner) {
        mocha_1.reporters.Base.call(this, runner);
        let passes = 0;
        let failures = 0;
        //tslint:disable
        console.log('Custom Reporter !!!!!');
        runner.on('pass', function (test) {
            passes++;
            console.log('pass: %s', test.fullTitle());
        });
        runner.on('fail', function (test, err) {
            failures++;
            console.log('fail: %s -- error: %s', test.fullTitle(), err.message);
        });
        runner.on('end', function () {
            console.log('end: %d/%d', passes, passes + failures);
        });
    }
}
exports.CustomReporter = CustomReporter;


Expected behavior: [What you expect to happen]
Able to listen runner events
Actual behavior: [What actually happens]
/../../../../node_modules/mocha/lib/mocha.js:520
  var reporter = new this._reporter(runner, options);
                 ^

TypeError: this._reporter is not a constructor
    at Mocha.run (/../../../../node_modules/mocha/lib/mocha.js:520:18)
    at Object.<anonymous> (/../../../../node_modules/mocha/bin/_mocha:480:18)
    at Module._compile (module.js:652:30)
    at Object.Module._extensions..js (module.js:663:10)
    at Module.load (module.js:565:32)
    at tryModuleLoad (module.js:505:12)
    at Function.Module._load (module.js:497:3)
    at Function.Module.runMain (module.js:693:10)
    at startup (bootstrap_node.js:188:16)
    at bootstrap_node.js:609:3

Reproduces how often: [What percentage of the time does it reproduce?]
always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.):
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",victorhugojt,NONE,2019-02-06 19:43:01+00:00,True,2019-02-12 01:50:50+00:00,5.26,,3,2,2019-02-07 18:02:35+00:00,0.93,plroebuck,MEMBER,2,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3720,Mocha TypeError fn is not a function,"Description
Mocha won't run, leaving me a TypeError message that 'fn' is not a ""function"".
What do I have to do to solve this?
Thanks in advance!
See attached image.

Steps to Reproduce

Expected behavior: [What you expect to happen]
Mocha should run the script.
Actual behavior: [What actually happens]
Initiates searching for the driver and finding Chrome but then crashes.
Script won't run at all
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 5.2.0
The output of node --version: 10.15.0
The version and architecture of your operating system:

OS: Windows 10 version 1803 OS-Version 17134.523
Architecture: ??????


Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): Google Chrome 72.0.3626.96
Any other third party Mocha related modules (with versions):

Selenium WebDriver ??????
Selenium WebDriver Testing ??????


The code transpiler being used: None
Editor: Visual Studio Code

Additional Information",Ch84,NONE,2019-02-08 15:51:51+00:00,True,2019-02-11 08:03:40+00:00,2.67,,3,16,2019-02-08 16:36:07+00:00,0.03,plroebuck,MEMBER,2,0,0,1,"['integration', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3721,investigate sortier for additional formatting,"https://github.com/snowcoders/sortier
@plroebuck",boneskull,MEMBER,2019-02-08 21:23:53+00:00,False,,,,1,0,,,,,0,0,0,0,"['chore', 'developer-experience', 'qa']",True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3724,Add possibility to set babel 7 config file path,"I am trying to use mocha with Babel7 and I came across the following problem. Babel 7 can be configured via babel.config.js however, there seems to be no way to pass babel config file path to mocha. I asked a question at stackoverflow but got no answer.
If it is possible to do, then, please, say how. If not, then, please, add such possibility.",PavelKastornyy,NONE,2019-02-13 14:21:52+00:00,True,2019-02-14 19:21:53+00:00,1.21,,2,9,2019-02-13 15:08:45+00:00,0.03,plroebuck,MEMBER,1,0,0,1,"['integration', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3727,Config file schema,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Is there a schema or declaration for mocha's new config file, so that we get tooling?  Could be a JSON schema, TypeScript declarations, or both.
It can be declared in one form and compiled to the other via quicktype.
https://www.npmjs.com/package/quicktype
https://app.quicktype.io/?share=x6K1P6RGhC3tAxYP9tgm
Expected behavior: [What you expect to happen]
Here's a usage example, if such declarations existed.
.mocharc.json
{
    ""$schema"": ""https://mochajs.org/schemas/rc.json"",
    // tooltips with descriptions and defaults available here
}
.mocharc.js
module.exports = /**@type Mocha.Rc */({
    // tooltips with descriptions and defaults available here
});
Versions
mocha@next
Additional Information",cspotcode,CONTRIBUTOR,2019-02-13 21:06:34+00:00,False,,,,2,0,,,,,0,0,0,0,"['chore', 'feature', 'nice-to-have']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3729,"Diff is not generated for assert.deepEqual(obj, undefined, message) with non-empty message","Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description

Steps to Reproduce

'use strict';
const assert = require('assert');

suite('suite', function()
{
	test('Diff OK', function()
	{
		assert.deepStrictEqual({foo: ""bar""}, {a:1}, 'msg');
	});

	test('Diff OK', function()
	{
		assert.deepStrictEqual({foo: ""bar""}, undefined);
	});

	test('Diff OK', function()
	{
		assert.deepStrictEqual(undefined, {foo: ""bar""});
	});

	test('No Diff', function()
	{
		assert.deepStrictEqual({foo: ""bar""}, undefined, 'msg');
	});

	test('No Diff', function()
	{
		assert.deepStrictEqual(undefined, {foo: ""bar""}, 'msg');
	});
});
Expected behavior: Expect diff generated for all cases
Actual behavior: Diff not generated if message is non-empty
  suite
    1) Diff OK
    2) Diff OK
    3) Diff OK
    4) No Diff
    5) No Diff


  0 passing (21ms)
  5 failing

  1) suite
       Diff OK:

      AssertionError [ERR_ASSERTION]: msg
      + expected - actual

       {
      -  ""foo"": ""bar""
      +  ""a"": 1
       }

      at Context.<anonymous> (test-eq.js:8:10)

  2) suite
       Diff OK:
     AssertionError [ERR_ASSERTION]: Input A expected to strictly deep-equal inp
ut B:
+ expected - actual

- {
-   foo: 'bar'
- }
+ undefined
      at Context.<anonymous> (test-eq.js:13:10)

  3) suite
       Diff OK:
     AssertionError [ERR_ASSERTION]: Input A expected to strictly deep-equal inp
ut B:
+ expected - actual

- undefined
+ {
+   foo: 'bar'
+ }
      at Context.<anonymous> (test-eq.js:18:10)

  4) suite
       No Diff:
     AssertionError [ERR_ASSERTION]: msg
      at Context.<anonymous> (test-eq.js:23:10)

  5) suite
       No Diff:
     AssertionError [ERR_ASSERTION]: msg
      at Context.<anonymous> (test-eq.js:28:10)

Reproduces how often: always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.0-1
The output of node --version: v10.15.1
The version and architecture of your operating system: Win7 x64
Your shell (bash, zsh, PowerShell, cmd, etc.): cmd
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information",Antonius-S,NONE,2019-02-14 15:45:44+00:00,True,2019-03-01 09:36:04+00:00,14.74,,4,7,2019-02-15 18:37:24+00:00,1.12,craigtaub,MEMBER,2,0,0,1,"['node.js', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3732,document use of Mocha logo somewhere,Mocha logo what license is falling under ? >>> Thank you,AgaAgnieszkaBorcz,NONE,2019-02-15 15:29:26+00:00,False,,,,4,9,2019-02-15 15:57:19+00:00,0.02,plroebuck,MEMBER,2,0,0,2,['documentation'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3736,make sponsors logo more readable when logo is white in homepage,"In homepage, some sponsors's logo is white. So, people can't realize who is support us.
We should make them to people see the logo well like background color or shadow.",outsideris,MEMBER,2019-02-16 09:05:43+00:00,False,,,,4,8,2019-02-25 05:56:26+00:00,8.87,boneskull,MEMBER,2,0,0,1,"['documentation', 'website']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
3740,this.skip() - bug summary,"Description
1. this.skip() in beforeEach hooks
Incorrect hook pattern.
All beforeEach hooks are executed, but afterEach hooks are skipped completely, see #2546
2. async this.skip() in beforeEach hooks
results in a ""Uncaught async skip; aborting execution"", see test
before hooks seem to work async though, and as per user documentation it should work.
=> fixed: #3745
3. this.skip() in it tests
does not work correctly, since beforeEach hooks are executed, but afterEach hooks do not run.
4. this.skip() in afterEach hooks
Incorrect, since already passed/failed tests are set to pending retrospectively. No tests are skipped at all.
5. this.skip() in after hooks
Incorrect, since already passed/failed tests are set to pending retrospectively. No tests are skipped at all.
=> soft deprecation: #3719
Versions
current master",juergba,MEMBER,2019-02-18 10:21:08+00:00,False,,,,2,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3742,running mocha shows yargs deprecation with latest yargs dependency,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
My project uses the latest yargs@13.1.0, which reports a deprecation warning when its parser is configured in the package.json. see yargs/yargs#1262.
because mocha configures it's own yargs in its package.json, running the tests will show the deprecation warning.
Steps to Reproduce
example project: https://github.com/tripodsan/mochayargstest
test.js
const yargs = require('yargs');
function runCli() {
  new yargs()
    .help().parse(['--help']);
}
describe('Test Yargs', () => {
  it('shows help', () => {
    runCli();
  })
});

run npm test

$ npm test

> mochayargs@1.0.0 test /Users/nobody/tmp/mochayargs
> mocha test.js

  Test Yargs
Configuring yargs through package.json is deprecated and will be removed in the next major release, please use the JS API instead.
Options:
  --version  Show version number                                       [boolean]
  --help     Show help                                                 [boolean]


run w/o mocha

$ node index.js
Options:
  --version  Show version number                                       [boolean]
  --help     Show help                                                 [boolean]

Expected behavior:
no deprecation warning is shown from yargs.
Actual behavior:
deprecation warning is shown then running tests.
Reproduces how often: [What percentage of the time does it reproduce?]
always.
Versions
    ""mocha"": ""^6.0.0"",
    ""yargs"": ""^13.2.1""

Additional Information
I think that mocha should use the new https://github.com/yargs/yargs/blob/master/docs/api.md#parserconfigurationobj instead of configuring the parser through the package.json",tripodsan,NONE,2019-02-19 02:15:42+00:00,True,2019-03-07 00:50:57+00:00,15.94,,5,6,2019-02-20 19:37:24+00:00,1.72,plroebuck,MEMBER,2,0,0,2,['usability'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3743,Very slow startup time,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
mocha's CLI startup time is very slow.  findup-sync appears to be a culprit, coupled with the fact that mocha loads findup-sync twice since it spawns a child-process.
node -e ""require('findup-sync')"" is taking at least half a second on my Windows box.  Windows suffers from higher per-file FS overhead, but I think this is still way too slow, considering that findup is barely doing anything.
findup-sync indirectly loads fast-glob, micromatch, and nanomatch, which internally do some sort of initialization of compilers and parsers for their glob pattern handling.  I think these compilers are meant to be super-fast, but ironically all the extra complexity means they initialize pretty slowly.  mrmlnc/fast-glob#92
Would you accept a PR that replaces mocha's usage of findup with a faster while() loop?
Are there specific globbing behaviors you want to preserve?  I see that findup-sync is used for .mochrc discovery and package-file discovery.  The former definitely doesn't need glob support; I'm unsure about the latter.
Steps to Reproduce
I've been adding console.time() and console.timeEnd() statements to mocha's code to track down which require() calls are the slowest.
Versions
mocha v6.0.0-1
node v11.3.0
Additional Information",cspotcode,CONTRIBUTOR,2019-02-19 09:52:35+00:00,True,2019-03-14 08:03:26+00:00,22.92,,3,4,2019-02-21 19:26:57+00:00,2.4,boneskull,MEMBER,2,1,0,0,"['help wanted', 'usability']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3744,CoffeeScript tests after v6.0.0 and suite return value check,"Prerequisites

[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[x ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Issue #3243 shipped with v6.0.0 throw a deprecation warning or an error if --throw-deprecation is enabled with all CoffeeScript tests since the language support implicit returns.
Steps to Reproduce
The following minimalist test case:
describe 'My Suite', () ->
  it 'run a test', () ->
    console.log 'yes'
Throw the error ""DeprecationWarning: Suites ignore return values. Suite ""My Suite"" in /package/test/my/test.coffee returned a value; this may be a bug in your test code""
A temporary workaround include returning undefined:
describe 'system.authconfig', () ->
  it 'fuck around', () ->
    console.log 'yes'
  undefined
Versions

The output of npx mocha --version : 6.0.0
The code transpiler being used: CoffeeScript
Other information not relevant

Additional Information
I understand the motivation behind #3243. One way to please everyone is to detect if the return value found in the suite is not the same as the one returned by it.",wdavidw,NONE,2019-02-19 13:44:43+00:00,True,2019-02-21 18:46:30+00:00,2.21,,4,22,2019-02-19 15:51:40+00:00,0.09,plroebuck,MEMBER,2,0,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3746,Third party UI no longer works from version 6,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Hello,
With mocha 6, a bug appeared when using 3rd parties UI as described here : https://github.com/mochajs/mocha/wiki/Third-party-UIs.
The issue is that the file is required twice :

first here in validatePlugin (https://github.com/mochajs/mocha/blob/master/lib/cli/run.js#L279)
https://github.com/mochajs/mocha/blob/master/lib/cli/run-helpers.js#L314

opts[key] = require(path.resolve(process.cwd(), opts[key]));

and then here (https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L268) :

    try {
      this._ui = require(name);
    } catch (err) {
      throw createInvalidInterfaceError(
        'invalid interface ' + sQuote(name),
        name
      );
    }
name here is no longer a string, but the object required in 1st step, so it fails.
There may be the same issue with 3rd parties reporters.
Steps to Reproduce
Just run
mocha -u mocha/lib/interfaces/bdd.js test.js
/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/node_modules/yargs/yargs.js:1148
      else throw err
           ^

Error: invalid interface 'function bddInterface(suite) {
  var suites = [suite];

 [...]
}'
    at createInvalidInterfaceError (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/lib/errors.js:48:13)
    at Mocha.ui (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/lib/mocha.js:275:13)
    at new Mocha (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/lib/mocha.js:111:6)
    at Object.exports.handler.argv [as handler] (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/lib/cli/run.js:292:17)
    at Object.runCommand (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/node_modules/yargs/lib/command.js:238:44)
    at Object.parseArgs [as _parseArgs] (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/node_modules/yargs/yargs.js:1072:28)
    at Object.parse (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/node_modules/yargs/yargs.js:566:25)
    at Object.exports.main (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/lib/cli/cli.js:62:6)
    at Object.<anonymous> (/home/vagrant/.nvm/versions/node/v6.14.2/lib/node_modules/mocha/bin/_mocha:10:23)
    at Module._compile (module.js:577:32)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
    at Module.runMain (module.js:611:10)
    at run (bootstrap_node.js:394:7)
    at startup (bootstrap_node.js:160:9)
    at bootstrap_node.js:507:3


Expected behavior: No error, use UI defined as argument
Actual behavior: Error: invalid interface
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
6.0.0
The output of node --version:
v6.14.2
The version and architecture of your operating system:
Linux stretch 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux
Your shell (bash, zsh, PowerShell, cmd, etc.):
zsh
Your browser and version (if running browser tests):
N/A
Any other third party Mocha related modules (with versions):
N/A
The code transpiler being used:
N/A

Additional Information

I can submit a pull request, but any help is welcomed to know what is the best to do ? (Removing one of the  require ? No longer overriding opts[key] ?)",yodeyer,NONE,2019-02-19 17:12:31+00:00,True,2019-02-21 03:46:55+00:00,1.44,,4,12,2019-02-19 23:00:56+00:00,0.24,craigtaub,MEMBER,3,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3747,Standard xunit reporter throws an error even when all tests pass,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
The programttically use of the standard xunit reporter ends in an error
Steps to Reproduce
var Mocha = require(""mocha"");
let mocha = new Mocha({
    ui: ""tdd"",
    reporter:""xunit""
    reporterOptions: {
        output: ""c:\\any\\directory\\file.xml"",
        suiteName: ""anyName"",
    }
});

mocha.addFile(""File.test.js"");
mocha.run():

Expected behavior: [What you expect to happen]
no throw at the end, if all tests pass
Actual behavior: [What actually happens]
C:\__GIT\VSCX\node_modules\mocha\lib\reporters\xunit.js:126
      fn(failures);
    at WriteStream.<anonymous> (C:\__GIT\Repo\node_modules\mocha\lib\reporters\xunit.js:126:7)
    at Object.onceWrapper (events.js:277:13)
    at WriteStream.emit (events.js:189:13)
    at finishMaybe (_stream_writable.js:641:14)
    at stream._final (_stream_writable.js:619:5)
    at WriteStream._final (internal/fs/streams.js:263:3)
    at callFinal (_stream_writable.js:612:10)
    at process._tickCallback (internal/process/next_tick.js:63:19)

Using reporter ""spec"":

Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version:5.2.0 and node node_modules/.bin/mocha --version:5.2.0 (Yeah I have both)
The output of node --version:v10.15.1
The version and architecture of your operating system:
Your shell (bash, zsh, PowerShell, cmd, etc.): cmd
Your browser and version (if running browser tests): NodeJS
Any other third party Mocha related modules (with versions):---
The code transpiler being used:

Additional Information",peni4142,NONE,2019-02-19 17:54:08+00:00,True,2019-02-19 20:10:14+00:00,0.09,,2,1,2019-02-19 20:09:05+00:00,0.09,plroebuck,MEMBER,1,0,0,0,"['invalid', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3748,mocha --watch doesn't work with v6.0.0,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself (only tested in my machine, in the same project).
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha. (N/A - no global version installed)

Description

mocha --watch doesn't detect the tests. Output: 0 passing (10 ms). It did in the 5.2.0 version.
Steps to Reproduce
Update to 6.0.0, write a test or use the ones you already have and try to execute the watcher. mocha will work, mocha --watch wont.

Expected behavior: [What you expect to happen]

mocha --watch detect the tests,
and executes every time a test or a src file change.

Actual behavior: [What actually happens]

mocha --watch doesn't detect any test.

Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.0
The output of node --version: 11.9.0
The version and architecture of your operating system: Ubuntu 18.04.1 LTS, 4.15.0-45-generic x86_64
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests): N/A
Any other third party Mocha related modules (with versions): chai@4.2.0
The code transpiler being used:

Additional Information",cruzelante098,NONE,2019-02-19 19:32:41+00:00,True,2019-02-21 05:23:22+00:00,1.41,,4,12,2019-02-19 20:03:12+00:00,0.02,ghinks,NONE,2,0,0,2,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3750,test.js in root no longer works with v6.0.0,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
v6.0.0 seems not work for small projects without test/ folder and with test.js in root instead/
Steps to Reproduce

project: https://github.com/markdown-it/uc.micro
greenkeeper PR and Travis-CI log: markdown-it/uc.micro#11

Expected behavior: [What you expect to happen]
Everything should work as before
Actual behavior: [What actually happens]
$ npm test
> uc.micro@1.0.6 test /home/travis/build/markdown-it/uc.micro
> mocha
Error: No test files found: ""test/""
npm ERR! Test failed.  See above for more details.
The command ""npm test"" exited with 1.

Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.0
The output of node --version: v10.11.0
The version and architecture of your operating system: Ubuntu 18.04
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Your browser and version (if running browser tests):
Any other third party Mocha related modules (with versions):
The code transpiler being used:

Additional Information
I could not find any info that such feature was deprecated. Let me know if i missed something.",puzrin,NONE,2019-02-20 03:35:38+00:00,True,2019-02-20 23:20:53+00:00,0.82,,3,7,2019-02-20 11:45:43+00:00,0.34,plroebuck,MEMBER,2,0,0,1,"['confirmed-bug', 'documentation', 'node.js', 'question', 'usability']",False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3753,config: default support of .jsonc extension,"By default, Mocha only searches for .mocharc.json.
However, Mocha supports ""JSON with comments"".  In VSCode anyway, these files can have a jsonc extension.  Mocha should also look for .mocharc.jsonc.
(Note that Mocha does not support JSON5 and currently has no plans to do so. Future support for this may make sense, but AFAIK JSON5 is not widely used; it would also require a different parsing strategy.)
To do:

Make changes in lib/cli/config.js
Update/add test in test/integration/config.spec.js",boneskull,MEMBER,2019-02-20 18:27:46+00:00,True,2019-02-27 17:51:54+00:00,6.98,,1,0,,,,,0,0,0,0,"['feature', 'good-first-issue', 'help wanted', 'node.js']",False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3757,weird message when a non-Error object is thrown,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
Error: the string ""Configuration not loaded"" was thrown, throw an Error :)

Thjs ""Configuration not loaded"" message is coming from my code. I'm guessing mocha is saying the code should be throwing an Error object, but the message it's providing is weird and confusing. And I have no idea why there's a smiley face at the end?
Expected behavior: [What you expect to happen]
Seems like a better message would be something like:
Error: the string ""Configuration not loaded"" was thrown. It is recommended that Error objects are used for exceptions instead of strings.

Although I'm not sure mocha even needs to be policing this. I think Error: the string ""Configuration not loaded"" was thrown. is sufficient.
Actual behavior: [What actually happens]
The message provided by mocha is weird, confusing, and overly cutesy.
Reproduces how often: [What percentage of the time does it reproduce?]
Every time.
Additional Information
Here's the line of code:

  
    
      mocha/lib/runner.js
    
    
         Line 1002
      in
      118c9ae
    
    
    
    

        
          
           'the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)'",fr0,NONE,2019-02-21 00:37:24+00:00,True,2019-02-26 18:03:56+00:00,5.73,,3,1,2019-02-21 01:58:55+00:00,0.06,plroebuck,MEMBER,1,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3761,cli option `--require trace-something` causes `bad option`-error,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend avoiding the use of globally installed Mocha.

Description
When executing mocha with the option --require trace-something, the error bad-option --trace-something is output. In my case. it is trace-and-clarify-if-possible, but it is reproducible with other package names.
This happens in mocha@6.0.0 and mocha@6.0.1, but not in mocha@6.0.0-1, and only if the required package-name starts with ""trace-""
Steps to Reproduce
# Setup dependency with empty index.js-file
mkdir trace-dependency
cd trace-dependency/
npm init -y
touch index.js
cd ..

# Setup project and add dependency
mkdir test-project
cd test-project
npm init -y
npm install ../trace-dependency
mkdir test
touch test/dash-spec.js

Then install mocha and run the tests:
npm install mocha@6.0.0
npx mocha --require trace-dependency
# Error ""bad option --trace-dependency""

npm install mocha@6.0.1
npx mocha --require trace-dependency
# Error ""bad option --trace-dependency""

npm install mocha@6.0.0-1
npx mocha --require trace-dependency
# No error, ""0 passing""

Expected behavior: [What you expect to happen]
I would have expected the same result for each mocha-version, i.e. the output ""0 passing"".
Actual behavior: [What actually happens]

mocha@6.0.0 and mocha@6.0.1 have the output ""bad option --trace-dependency""
mocha@6.0.0-1 has the expected output

Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.0, 6.0.1
The output of node --version: v10.15.1
The version and architecture of your operating system: Xubuntu 18.04
Your shell (bash, zsh, PowerShell, cmd, etc.): bash
Any other third party Mocha related modules (with versions): none
The code transpiler being used: none

Additional Information",nknapp,NONE,2019-02-21 22:51:03+00:00,True,2019-02-25 17:17:13+00:00,3.77,v6.0.2,4,4,2019-02-22 10:16:14+00:00,0.48,Janpot,NONE,2,0,0,2,"['confirmed-bug', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3763,CLI processing of 'mocha.opts' dropping positional arguments,"Description
'mocha.opts' processing seems to handle option arguments correctly, but positional arguments
are not present.
Steps to Reproduce
See this gist.
Note right before error occurs that it's using ""test/"" instead of ""dist/**/*.spec.js"".
Expected behavior: [What you expect to happen]
Expect the code to work like it did in Mocha-5.2.0.
Actual behavior: [What actually happens]
Error: No test files found
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

The output of mocha --version: 6.0.0
The output of node --version: v10.15.1
Your operating system

name and version: Ubuntu 18.04.2 (bionic)
architecture (32 or 64-bit):


Your shell (e.g., bash, zsh, PowerShell, cmd): bash

Additional Information
None",plroebuck,MEMBER,2019-02-22 18:59:12+00:00,True,2019-02-25 17:20:45+00:00,2.93,v6.0.2,3,2,2019-02-23 05:36:44+00:00,0.44,halkeye,CONTRIBUTOR,1,1,0,0,"['confirmed-bug', 'node.js', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
3769,fix test flake in Node.js v6/v8,"see this build failure: https://travis-ci.org/mochajs/mocha/jobs/497987351#L1728
not sure what's happening here... would welcome help to address it",boneskull,MEMBER,2019-02-25 05:48:08+00:00,False,,,,2,3,2019-02-26 01:08:35+00:00,0.81,szb512,NONE,1,0,0,1,"['help wanted', 'qa']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3770,Synchronous tests don't run when running test suite with --delay flag ,"Description:
Synchronous test won't kick off when running a test suite with --delay flag. However, tests that have async setup and attached run() callback work just fine
Steps to reproduce:

write a test that requires some async setup... make sure to attach run() callback:

Promise.all(someAsyncFunction).then(runTests(); run())


in the same test folder, write a simple test that doesn't require any setup...hence doesn't require --delay/run():

 describe('foobar', () => {
    it('test positive', () => {
      expect(2).to.equal(2);
    })

    it('test negative', () => {
      expect(2).to.equal(3);
    })

  });


run tests using ""all"" wildcard - mocha --delay **/*test.js (OR run only sync test - mocha --delay **/sync.test.js)

Expected behavior:
Both tests run. Sync test without run() callback should still run
Actual behavior:
Test without run() callback doesn't run unless you wrap it in an async function:
setTimeout(
describe('foobar', () => {
    it('test positive', () => {
      expect(2).to.equal(2);
    })

    it('test negative', () => {
      expect(2).to.equal(3);
    })

  });
,100)

Reproduces how often:
Can reproduce consistently. 10 out of 10
Versions
v5.2-v6
System:

MacOS 10.13.6 (64bit)
no code transpilers
node - 10.11.0
npm - 6.8.0",antonyshau,NONE,2019-02-25 06:13:16+00:00,True,2019-02-25 17:29:34+00:00,0.47,,3,3,2019-02-25 10:11:45+00:00,0.17,juergba,MEMBER,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3771,Only one test file gets executed when running command with 'all' wildcard and --delay flag,"Description:
Only one test file gets executed when running tests with ""all"" wildcard and --delay flag.
Steps to reproduce:

create 2+ test files with test code that requires some async setup. For example:

Promise.all(asyncSetUp).then(runTests(); run())


make sure to pass run() callback into both tests so that --delay functionality works as expected
place test files in the same test folder
run tests using the following command: mocha --delay **/*.test.js

Expected behavior:
Both test files get executed
Actual behavior: [What actually happens]
Only one of 2 files will run
Reproduces how often:
100%
Versions:
v5.2-6
System:

MacOS 10.13.6 (64bit)
no code transpilers
node - 10.11.0
npm - 6.8.0",antonyshau,NONE,2019-02-25 06:57:04+00:00,True,2019-02-25 17:26:31+00:00,0.44,,2,2,2019-02-25 10:02:57+00:00,0.13,juergba,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3772,Mocha reports 'No test files found' since mocha 6 (with ts-node),"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Since the upgrade to mocha 6 my tests no longer work. I ensures that it wasn't any other package update that caused this issue by keeping all my dependencies identical except mocha 5 / 6.
The configuration I use in `mocha.opts' is as follows:
--recursive
--require ts-node/register
--exit
test/**/*.ts

The error I get from running ./node_modules/.bin/mocha is  'No test files found
I realize that this issue might not be caused by mocha, but it seemed like a good first place to ask. Could something have changed that would cause something like ts-node to fail?",evert,NONE,2019-02-25 16:51:03+00:00,True,2019-02-25 17:05:19+00:00,0.01,,2,2,2019-02-25 17:04:37+00:00,0.01,plroebuck,MEMBER,1,0,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3773,format markdown with prettier,"I thought for sure this was happening already automatically, but apparently not.
Anyway, make it happen automatically using lint-staged",boneskull,MEMBER,2019-02-25 17:32:20+00:00,True,2019-02-26 03:58:23+00:00,0.43,,1,0,,,,,0,0,0,0,"['chore', 'developer-experience']",True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3775,mocha --inspect-brk --inspect seems to not be supported now,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
$ ./node_modules/.bin/mocha --inspect-brk --inspect --opts mocha.opts
Expected behavior: Should work as expected with debug mode on (used to work in mocha 5.x.x)
Actual behavior:  but now get error:
$ mocha --inspect-brk --inspect --opts mocha.opts 
/usr/local/bin/node: bad option: --inspect-brk --inspect
Workaround
The following seems to work. Not sure if there is a fundamental difference with the above command.
$ node --inspect-brk --inspect ./node_modules/.bin/mocha --opts mocha.opts
Versions

The output of node node_modules/.bin/mocha --version: 6.0.2
The output of node --version: v10.15.0
Your operating system

name and version: macOS-10.14.2
architecture: 64-bit",jeremychone,NONE,2019-02-25 23:14:06+00:00,True,2019-03-04 18:02:00+00:00,6.78,,5,11,2019-02-26 00:28:46+00:00,0.05,plroebuck,MEMBER,4,0,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3777,"--interfaces and --reporters should be --list-interfaces and --list-reporters, respectively","--reporters would be nice to alias to --reporter if/when we support multiple reporters; so let's use --list-reporters instead
--interfaces should be --list-interfaces for consistency 😄

I probably would not call this change semver-major, even if it might be per our usual interpretation.  @mochajs/core thoughts?",boneskull,MEMBER,2019-02-26 04:12:00+00:00,False,,,,4,5,2019-02-26 09:19:49+00:00,0.21,craigtaub,MEMBER,3,0,0,1,"['semver-major', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
3778,meta: Mocha's place in the merged Node.js/JS Foundation,"(The foundation is subsequently referred to as $FOUNDATION.)
The following is from @jorydotcom, posted here with permission (with slight formatting tweaks by me).
Mocha is currently in the JSF's ""incubator"" stage, which is somewhat analogous to the proposed ""growth"" stage, as explained below.

We're getting to the point in our merge conversation wherein I need to develop a picture for which projects will be coming in from the JSF at what stage. The approach I'm advocating for is to have each project lead decide for themselves what stage is the best fit.
In a nutshell, the stages are:

Emeritus - for projects that are functionally 'done' and expect no more contributions (though they will continue to receive basic services)
At Large - for projects that are happy where they are in terms of activity and resource support from the foundation (I think most JSF projects will probably elect this)
Growth - for projects that have identified growth goals, and want active foundation support to reach them
Impact - for projects that have achieved enterprise adoption, community contributions and open governance, and have developed a self-sustaining LTS cycle

Below the line is an excerpt that explains the stages a bit more (for your convenience) or you can view the staging document directly on github. If you don't think this is clear, you have feedback on the wording, etc - please do let me know here or on the repo.
Regardless of the stage you choose, Mocha will be able to participate in the CPC, and potentially elect someone to serve as CPC director. Also, you can move from one stage to another - this is not a permanent selection. For example, maybe you are At Large this year, but next year you have some new features you want to implement so you move to Growth stage. Or your Emeritus project is getting a resurgence of interest from a new group of maintainers, so it makes sense for it to move to At Large. It's the circle of Open Source Life.
I wanted to get this information to you so that you can share it with your community & discuss. When you're ready, please let me know which stage you'd like to opt-in to. Of course if you need help figuring that out I am here to support you, and we will definitely cover this at the all-project meeting on Monday, 2/18. I would like to get your selection in by end of next week if that's possible.
Best,
Jory

At Large Projects (formerly 'Sandbox')
Definition
At Large projects are projects which the CPC believes are, or have the potential to be, important to the ecosystem of Top-Level Projects or the JS ecosystem as a whole. They may be early-stage projects just getting started, or they may be long-established projects with minimal resource needs. The At Large stage provides a beneficial, neutral home for these projects in order to foster collaborative development and provide a path to deeper alignment with other $FOUNDATION projects via the graduation process.
Examples

New projects that are designed to extend one or more $FOUNDATION projects with functionality or interoperability libraries.
Independent projects that fit the $FOUNDATION mission and provide potential for a novel approach to existing functional areas (or are an attempt to meet an unfulfilled need).
Projects commissioned or sanctioned by the $FOUNDATION.
Any project that realistically intends to join the $FOUNDATION Incubation or Top Level Stages in the future and wishes to lay the foundations for that transition.

Expectations
End users should evaluate At Large projects with care, as this stage does not set requirements for community size, governance, or production readiness. At Large projects will receive minimal marketing support from the $FOUNDATION. Projects will be reviewed on an annual basis; they may also request a status review by submitting a report to the CPC.
Acceptance Criteria
To be considered for the At Large Stage, the project must meet the following requirements:

2 CPC sponsors to champion the project & provide mentorship as needed
A presentation to at the meeting of the CPC
Adherence to the $FOUNDATION IP Policy
Upon acceptance, At Large projects must list their status prominently on website/readme

Growth Stage (formerly 'Incubating')
Definition
The Growth Stage is for projects that are interested in reaching the Impact Stage, and have identified a growth plan for doing so. Growth Stage projects will receive mentorship from the CPC and are expected to actively develop their community of contributors, governance, project documentation, and other variables identified in the growth plan that factor in to broad success and adoption.
In order to support their active development, projects in the Growth stage have a higher level of access to marketing and other resources, which will be agreed upon and reviewed on a yearly basis. A project's progress toward its growth plan goals will be reviewed on a yearly basis, and the CPC may ask the project to move to the At Large stage if progress on the plan drops off or stalls.
Examples

Projects that are on their way or very likely to become Impact Projects.
Projects that have developed new growth targets or other community metrics for success.
Projects that are looking to create a lifecycle plan (maintainership succession, contributor programs, version planning, etc.)
Projects that need more active support from the Foundation in the form of marketing or CPC mentorship in order to reach their goals.

Expectations
Projects in the Growth Stage are generally expected to move out of the Growth stage within two years. Depending on their growth plans, projects may cycle through At Large, Growth, or Impact stage as needed.
Acceptance Criteria
To be considered for Growth Stage, the project must meet the At Large requirements as well as the following:

Development of a growth plan, to be done in conjunction with their project mentor(s) at the CPC.
Document that it is being used successfully in production by at least two independent end users which, in the CPC’s judgement, are of adequate quality and scope.
Demonstrate a substantial ongoing flow of commits and merged contributions.
Demonstrate that the current level of community participation is sufficient to meet the goals outlined in the growth plan.
Since these metrics can vary significantly depending on the type, scope and size of a project, the CPC has final judgement over the level of activity that is adequate to meet these criteria.
Receive a two-thirds supermajority vote of the CPC to move to Growth Stage.

Impact Stage (formerly 'Top-Level')
Definition
The Impact Stage is for projects that have reached their growth goals and are now on a sustaining cycle of development, maintainence, and long-term support. Impact Stage projects are used commonly in enterprise production environments and have large, well-established project communities.
Examples

Projects that have publicly documented release cycles and plans for LTS.
Projects that have themselves become platforms for other projects.
Projects that are able to attract a healthy number of committers on the basis of its production usefulness (not simply 'developer popularity').
Projects that have several, high-profile or well known end-user implementations.

Expectations
Impact Stage projects are expected to participate actively in CPC proceedings, and as such have a binding vote on CPC matters requiring a formal vote, such as the election of a CPC Director. They receive ongoing financial and marketing support from the Foundation, and are expected to cross promote the foundation along with their activities.
Acceptance Criteria
To graduate from At Large or Growth status, or for a new project to join as an Impact project, a project must meet the Growth stage criteria plus:

Have a defined governing body of at least 5 or more members (owners and core maintainers), of which no more than 1/3 is affiliated with the same employer. In the case there are 5 governing members, 2 may be from the same employer.
Have a documented and publicly accessible description of the project's governance, decision-making, and release processes.
Have a healthy number of committers from at least two organizations. A committer is defined as someone with the commit bit; i.e., someone who can accept contributions to some or all of the project.
Adopt the $FOUNDATION Code of Conduct.
Explicitly define a project governance and committer process. This is preferably laid out in a GOVERNANCE.md file and references a CONTRIBUTING.md and OWNERS.md file showing the current and emeritus committers.
Have a public list of project adopters for at least the primary repo (e.g., ADOPTERS.md or logos on the project website).
Other metrics as defined by the applying Project during the application process in cooperation with the CPC.
Receive a supermajority vote from the CPC to move to Impact stage. Projects can move directly from At Large to Impact, if they can demonstrate sufficient maturity and have met all requirements.

Emeritus Stage
Definition
Emeritus projects are projects which the maintainers feel have reached or are nearing end-of-life. Emeritus projects have contributed to the ecosystem, but are not necessarily recommended for modern development as there may be more actively maintained choices. The $FOUNDATION appreciates the contributions of these projects and their communities, and the role they have played in moving the ecosystem forward.
Examples

Projects that are ""complete"" by the maintainers' standards.
Projects that do not plan to release major versions in the future.

Expectations
Projects in this stage are not in active development. Their maintainers may infrequently monitor their repositories, and may only push updates to address security issues, if at all. Emeritus projects should clearly state their status and what any user or contributor should expect in terms of response or support. If there is an alternative project the maintainers recommend, it should be listed as well. The foundation will continue to hold the IP and any trademarks and domains, but the project does not draw on foundation resources.",boneskull,MEMBER,2019-02-26 19:46:01+00:00,True,2019-03-05 19:37:00+00:00,6.99,,5,18,2019-02-26 20:07:52+00:00,0.02,boneskull,MEMBER,3,1,0,1,"['core-team', 'discussion']",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
3780,How to pass parameter/variable to mocha.run() instance?,"Hello
How are we expected to pass a parameter to the Mocha instance we are starting programatically, without using environment variables?
In my case I have a long number of environments specified by a number (30, 31, 32, etc.) and I would like to pass a number to my Mocha test, so that I can read that environments specific config file.
Any best pratices or ways of accomplishing this?
Thanks!",simonsen78,NONE,2019-02-27 13:30:30+00:00,True,2019-02-27 17:56:20+00:00,0.18,,4,11,2019-02-27 15:50:11+00:00,0.1,craigtaub,MEMBER,3,0,0,1,"['faq', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False
3781,support granular configuration,"Mocha v6 now has configuration file support.
Originally, I had hoped this system could work more like ESLint's, where e.g., .mocharc.json files could exist in multiple directories and affect only the test files at, and ""below"", this directory level.
Given that we can't get this behavior for free (there's overhead and complexity involved), do people think it's useful?  Do people use this in ESLint?
A counter-example is Mocha's own .eslintrc.yml, which uses the overrides property to change ESLint's behavior on a per-file or per-directory basis.  This is another way of expressing the same thing as multiple ESLint config files, except using only a single config.
At minimum, greater control over which test files use which config settings would be a positive.  Mocha's own tests could leverage such a feature.  Maybe all we need to do is support something like overrides for now...?",boneskull,MEMBER,2019-02-27 17:48:15+00:00,False,,,,2,1,2019-02-27 22:20:28+00:00,0.19,plroebuck,MEMBER,1,0,0,0,"['discussion', 'feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False
3782,ReferenceError: interface is not defined,"I'm trying to run the example from documentation but the only difference is that when I run it inside my existing project I get the error: ReferenceError: interface is not defined.
ReferenceError: interface is not defined
    at Suite.describe (I:\Development Projects\felix\test\test.js:5:3)
    at Object.create (I:\Development Projects\felix\node_modules\mocha\lib\interfaces\common.js:140:19)
    at context.describe.context.context (I:\Development Projects\felix\node_modules\mocha\lib\interfaces\bdd.js:42:27)
    at Suite.describe (I:\Development Projects\felix\test\test.js:4:2)
    at Object.create (I:\Development Projects\felix\node_modules\mocha\lib\interfaces\common.js:140:19)
    at context.describe.context.context (I:\Development Projects\felix\node_modules\mocha\lib\interfaces\bdd.js:42:27)
    at Object.<anonymous> (I:\Development Projects\felix\test\test.js:3:1)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Module.require (internal/modules/cjs/loader.js:637:17)
    at require (internal/modules/cjs/helpers.js:20:18)
    at I:\Development Projects\felix\node_modules\mocha\lib\mocha.js:327:36
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (I:\Development Projects\felix\node_modules\mocha\lib\mocha.js:324:14)
    at Mocha.run (I:\Development Projects\felix\node_modules\mocha\lib\mocha.js:801:10)
    at Object.exports.singleRun (I:\Development Projects\felix\node_modules\mocha\lib\cli\run-helpers.js:207:16)
    at exports.runMocha (I:\Development Projects\felix\node_modules\mocha\lib\cli\run-helpers.js:300:13)
    at Object.exports.handler.argv [as handler] (I:\Development Projects\felix\node_modules\mocha\lib\cli\run.js:296:3)
    at Object.runCommand (I:\Development Projects\felix\node_modules\mocha\node_modules\yargs\lib\command.js:238:44)
    at Object.parseArgs [as _parseArgs] (I:\Development Projects\felix\node_modules\mocha\node_modules\yargs\yargs.js:1072:28)
    at Object.parse (I:\Development Projects\felix\node_modules\mocha\node_modules\yargs\yargs.js:566:25)
    at Object.exports.main (I:\Development Projects\felix\node_modules\mocha\lib\cli\cli.js:62:6)
    at Object.<anonymous> (I:\Development Projects\felix\node_modules\mocha\bin\_mocha:10:23)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
    at startup (internal/bootstrap/node.js:236:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:560:3)
npm ERR! Test failed.  See above for more details.

This dosen't happen in new project initialized from scratch--but I need to test my existing project, not a new one.  I'm at a loss as to why this is happening.
package.json:
{
  ""name"": ""backend"",
  ""version"": ""0.0.0"",
  ""private"": true,
  ""scripts"": {
    ""start"": ""node ./bin/www"",
    ""test"": ""mocha ./test/test.js""
  },
  ""dependencies"": {
    ""assert"": ""^1.4.1"",
    ""axios"": ""^0.18.0"",
    ""bluebird"": ""^3.5.1"",
    ""chai"": ""^4.2.0"",
    ""connect-mongo"": ""^2.0.1"",
    ""cookie-parser"": ""^1.4.3"",
    ""cors"": ""^2.8.4"",
    ""crypto"": ""^1.0.1"",
    ""csrf"": ""^3.0.6"",
    ""debug"": ""~2.6.9"",
    ""dotenv"": ""^6.2.0"",
    ""express"": ""~4.16.0"",
    ""express-session"": ""^1.15.6"",
    ""http-errors"": ""~1.6.2"",
    ""jade"": ""~1.11.0"",
    ""jsonwebtoken"": ""^8.3.0"",
    ""moment"": ""^2.23.0"",
    ""moment-range"": ""^4.0.1"",
    ""moment-recur"": ""^1.0.7"",
    ""moment-timezone"": ""^0.5.23"",
    ""mongoose"": ""^5.2.12"",
    ""mongoose-currency"": ""^0.2.0"",
    ""mongoose-unique-validator"": ""^2.0.2"",
    ""morgan"": ""~1.9.0"",
    ""node-quickbooks"": ""^2.0.25"",
    ""nodemailer"": ""^4.7.0"",
    ""passport"": ""^0.4.0"",
    ""passport-jwt"": ""^4.0.0"",
    ""passport-local"": ""^1.0.0"",
    ""passport-local-mongoose"": ""^5.0.1"",
    ""pdfkit"": ""^0.9.0"",
    ""request"": ""^2.88.0"",
    ""session-file-store"": ""^1.2.0"",
    ""square-connect"": ""^2.20181212.0""
  },
  ""devDependencies"": {
    ""mocha"": ""^6.0.2""
  }
}

/test/test.js
var assert = require('assert');

describe('Array', () => {
	describe('#indexOf()', () => {
		interface('should return -1 when the value is not present', () => {
			assert.equal(-1, [1,2,3].indexOf(4));
		});
	});
});",DoctorFishy,NONE,2019-02-28 12:11:10+00:00,True,2019-02-28 12:23:10+00:00,0.01,,2,2,2019-02-28 12:18:39+00:00,0.01,plroebuck,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3783,Website HTML tweaks,"Description
""docs/_includes/default.html""

Fix <title> (solution courtesy of @XhmikosR)

    <title>{{ title }}</title>

Remove the shortcut relationship. While allowed, it's meaningless. See here also.

<link rel=""icon"" href=""favicon.ico"" />

Mocha logo

Change the alt attribute to ""Mocha logo""
Add an id attribute.
Migrate width and height attributes to stylesheet



<img
  id=""mocha-logo""
  src=""/images/mocha-logo.svg""
  alt=""Mocha logo"" />
""docs/css/style.css""
#mocha-logo {
  width: 192px;
  height: 192px;
}

Convert the <span> tag to a <div>. Inline tags may not contain block tags.

<span>
  <a href=""https://mochajs.org"">mochajs.org</a> is licensed under a
  <a rel=""license"" href=""http://creativecommons.org/licenses/by/4.0/""
          >Creative Commons Attribution 4.0 International License</a>.
   <p>
     <em>Last updated: {{ 'now' | date: '%a %b %d %H:%M:%S %Y' }}</em>
  </p>
</span

Add ""rel=home"" protocol for Mocha URL. Append slash (""/"") to end of URL.

  <a rel=""home"" href=""https://mochajs.org/"">mochajs.org</a> is licensed under a

Use ""https"" protocol for CC license <a> ""href"" URL

  <a rel=""license"" href=""https://creativecommons.org/licenses/by/4.0/""
          >Creative Commons Attribution 4.0 International License</a>.

Convert the<p>/<em> tags with the following <dl> embedding <time>

  <dl class=""dl-inline last-modified"">
    <dt>Last updated</dt>
    <dd>
      <time
        itemprop=""lastModified""
        datetime=""{{ 'now' | date: '%Y-%m-%dT%H:%M:%SZ' }}"">
              {{ 'now' | date: '%a %b %d %H:%M:%S %Y' }}
      </time>
    </dd>
  </dl>
""docs/css/style.css""
.last-modified {
  font-style: italic;
}
.dl-inline dt, .dl-inline dd {
  display: inline;
  margin: 0;
}
.dl-inline dt:after {
  content: ': ';
}
.dl-inline dd + dt:before {
  content: '';
  display: block;
}

Annotate all links to outside URLs with these relations:

external - Indicate link is not part our website
noopener - Security



<a href=""https://apex.sh/ping/"" rel=""external noopener"" target=""_blank"">
Discussion

Determine if we should also annotate with relation.

nofollow - Indicate not an endorsement. See here also.


Should we add favicon-like icons for mobile browsers?",plroebuck,MEMBER,2019-02-28 13:43:15+00:00,True,2019-03-06 00:35:24+00:00,5.45,,3,3,2019-02-28 14:44:55+00:00,0.04,rscotchmer,NONE,0,1,0,1,"['good-first-issue', 'semver-patch', 'website']",False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
3785,add matomo headers to doc layouts,"It will need to go in the 11ty layout and the API layout.
I don't want to have to update @mocha/docdash to make the latter happen; hopefully it allows you to add a random header via configuration.",boneskull,MEMBER,2019-03-01 20:17:35+00:00,False,,,,2,0,,,,,0,0,0,0,"['chore', 'documentation', 'website']",True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
3786,Mocha 6.0.2 release breaks vscode debugger,"Description
vscode's Mocha test debug target broke with the latest changes to bin/_mocha
Steps to Reproduce
try debugging a test file with the following configuration in vscode:
    {
      ""type"": ""node"",
      ""request"": ""launch"",
      ""name"": ""Debug Current Test"",
      ""program"": ""${workspaceFolder}/node_modules/mocha/bin/_mocha"",
      ""args"": [
        ""-u"",
        ""tdd"",
        ""--timeout"",
        ""999999"",
        ""--colors"",
        ""${file}""
      ],
      ""internalConsoleOptions"": ""openOnSessionStart""
    }

and you'll get errors like describe() is not defined or before() is not defined. Seems like mocha is not in the global scope when launched like this anymore. This works in pre 6.0.2 releases (e.g. 5.2).
Versions

mocha: 6.0.2
node: 11.10.0
OS: Ubuntu 18.04 64 bit
shell: ZSH",sepehr-laal,NONE,2019-03-01 20:18:32+00:00,True,2019-03-02 07:09:53+00:00,0.45,,2,3,2019-03-01 21:10:46+00:00,0.04,juergba,MEMBER,1,0,0,1,"['integration', 'invalid', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3787,Cannot pass multiple node flags,"With a simple mocharc.json:
{
  ""max-old-space-size"": 4096,
  ""v8-allow-natives-syntax"": true
  ...
}

I get the error
Error: illegal value for flag --max-old-space-size=4096 --allow-natives-syntax of type size_t",aginzberg,CONTRIBUTOR,2019-03-01 20:22:03+00:00,True,2019-03-04 16:50:45+00:00,2.85,,3,3,2019-03-02 12:05:34+00:00,0.66,craigtaub,MEMBER,2,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3791,bad option with mocha v6.x,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Since mocha v6.0.0, I've been getting:
C:\Program Files\nodejs\node.exe: bad option: --throw-deprecation --trace-deprecation --trace-warnings --use_strict

Steps to Reproduce
git clone https://github.com/MaxCDN/bootstrapcdn.git -b develop-xmr-update-mocha
npm i
npm test

Expected behavior: [What you expect to happen]
No error to be thrown
Reproduces how often:
100%
Versions

Node.js v10.15.2
npm 6.4.1
mocha 6.0.2
OS is irrelevant

Additional Information
test/mocha.opts:
--check-leaks
--globals __core-js_shared__
--reporter dot
--throw-deprecation
--timeout 10000
--trace-deprecation
--trace-warnings
--use_strict

https://github.com/MaxCDN/bootstrapcdn/tree/develop-xmr-update-mocha

Isn't this supposed to still work? Going back to v5.2.0 it works as expected without any errors.
Thanks!",XhmikosR,CONTRIBUTOR,2019-03-02 13:30:28+00:00,True,2019-03-02 14:56:45+00:00,0.06,,2,2,2019-03-02 14:48:45+00:00,0.05,juergba,MEMBER,1,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3792,Security update for Mocha v3.5.3,"Mocha v3.5.3 is recognized as insecure by npm audit.
I've turned out that updating debug dependence from 2.6.8 to 2.6.9 removes some vulnerabilities.
The appropriate patch is here: https://github.com/nickkolok/mocha/tree/v3.5.3-security-fixes
If growl 1.9.3 will be uploaded to NPM, then we can try to update it, too (see tj/node-growl#81). You cannot use 1.10.* instead.
All the other found vulnerabilities are in dev dependencies.
I know that there is no official LTS support, but I believe that simple publishing a fixed package as 3.5.4 is a good first step to it. Everything is ready, just test (one more time!) and publish.",nickkolok,NONE,2019-03-02 17:21:40+00:00,True,2019-03-05 20:39:37+00:00,3.14,,2,1,2019-03-05 20:39:37+00:00,3.14,boneskull,MEMBER,1,0,0,0,['wontfix'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3797,assetgraph-builder: specify supported browsers,"Currently there are many CSS prefixes missing. Since this tool is used, its browsers option should be used. Not sure if it supports .browserslistrc or not, I guess this would be preferable.
I have added them manually but this is a good chance to revisit which browsers are supported and make any other changes too like dropping html5shiv, and switch to link rel=icon.",XhmikosR,CONTRIBUTOR,2019-03-02 23:18:54+00:00,True,2019-03-06 00:53:19+00:00,3.07,,1,0,,,,,0,0,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3800,docs: configure svgo,Currently it's using the defaults which may or may not be optimal. This should be configured to a well know config. I can supply the config as long as I figure out how that assets-builder package works.,XhmikosR,CONTRIBUTOR,2019-03-02 23:36:14+00:00,True,2019-03-06 00:53:11+00:00,3.05,,1,0,,,,,0,0,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3808,Extension option does not clear the default .js,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
According to Mocha's own docs one should be able to specify which extensions mocha will automatically load and that by specifying an extension the default of *.js should be cleared. This does not happen in version 6 (and I have never seen it happen earlier either).
Steps to Reproduce
git clone fatso83/test-driven-learning
cd javascript/mocha-recursive-extensions-test
npm i
npm run test-bar

Expected behavior:
Only this output should be shown, by Mocha loading only the file with the .bar extension
mocha --extension bar

  normal.bar
    ✓ should do nothing but register the test

Actual behavior:
It loads the normal.bar - in addition to all the files ending in .js.
mocha --extension bar

This is not a test: no-test.js


  normal.bar
    ✓ should do nothing but register the test

  normal.bar.js
    ✓ should do nothing but register the test

  normal.js
    ✓ should do nothing but register the test

Reproduces how often:
Always
Versions
6.0.2",fatso83,CONTRIBUTOR,2019-03-04 08:27:52+00:00,True,2019-05-05 06:40:01+00:00,61.93,,4,3,2019-03-05 23:00:43+00:00,1.61,craigtaub,MEMBER,2,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3810,Update doc examples,"Description
""docs/example/tests.html""

Convert URLs to use current package releases

Tradeoff: minification vs. freshness



 <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/mocha/4.0.1/mocha.min.css"">
 <script src=""https://cdnjs.cloudflare.com/ajax/libs/chai/4.1.2/chai.min.js""></script>
 <script src=""https://cdnjs.cloudflare.com/ajax/libs/mocha/4.0.1/mocha.min.js""></script>
to
 <link rel=""stylesheet"" href=""https://unpkg.com/mocha/mocha.css"">
 <script src=""https://unpkg.com/chai/chai.js""></script>
 <script src=""https://unpkg.com/mocha/mocha.js""></script>
""docs/example/chai.js""

Determine why this is here
Remove from source control if no reason exists",plroebuck,MEMBER,2019-03-05 18:10:53+00:00,True,2019-03-14 12:14:53+00:00,8.75,,1,0,,,,,0,0,0,0,"['browser', 'good-first-issue', 'nice-to-have']",False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3813,Regression caused by the deprecation of `enableTimeouts`,"Description
There is a regression caused by the deprecation of enableTimeouts
As you cas see here: https://github.com/mochajs/mocha/pull/3556/files#diff-aa849a970cef551664c12f04a4209f6fR121
enableTimeouts was marked as deprecated and the use of timeout: false should replace it.
But in the same time, we removed:
if (typeof options.timeout !== 'undefined' && options.timeout !== null) {
    this.timeout(options.timeout);
The bug is present with grunt-mocha-test. As you can see, grunt-mocha-test parse all options as undefined:
{ grep: undefined,
  reporter: 'spec',
  bail: false,
  ui: undefined,
  timeout: undefined,
  invert: undefined,
  ignoreLeaks: undefined,
  growl: undefined,
  globals: undefined,
  require: undefined,
  colors: undefined,
  slow: undefined 
}
The bug is not present with grunt-simple-mocha
Should we kept it while enableTimeouts is marked as deprecated ?
Steps to Reproduce
npm install grunt grunt-mocha-test
in Gruntfile.js
module.exports = function(grunt) {

  grunt.loadNpmTasks('grunt-mocha-test');

  grunt.initConfig({
    mochaTest: {
      test: {
        src: ['test/**/*.js']
      }
    }
  });

  grunt.registerTask('default', 'mochaTest');

};
Then launch test
grunt mochaTest
Expected behavior
Mocha v6 should work with options like {timeout: undefined} because there is only a deprecation warning in v6 for enableTimeouts option.
Actual behavior:
TypeError: Cannot read property 'toString' of undefined
at Suite.timeout (/home/fwadmin-server/smc/node_modules/mocha/lib/suite.js:124:10)
at Mocha.timeout (/home/fwadmin-server/smc/node_modules/mocha/lib/mocha.js:625:14)
at new Mocha (/home/fwadmin-server/smc/node_modules/mocha/lib/mocha.js:124:8)
at new MochaWrapper (/home/fwadmin-server/smc/node_modules/grunt-mocha-test/tasks/lib/MochaWrapper.js:30:15)
Reproduces how often:
Always
Versions
6.0.2",romainPrignon,NONE,2019-03-06 13:33:51+00:00,True,2019-03-07 17:12:29+00:00,1.15,,2,3,2019-03-07 01:17:47+00:00,0.49,boneskull,MEMBER,1,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3817,--timeout 0 with unref'd timers causes process exit,"Background context - SSCCE to follow. Bear with me, this behaviour is somewhat bizarre, so explaining it is complicated....
When using WebStorm as an IDE, it can run the mocha tests in ""run"" mode or ""debug"" mode. If the tests are constructed in a particular way (specifically - using promises) In ""run"" mode, everything works fine. In debug mode, all the tests are ignored.... in WebStorm, it looks like:

It took me a lot of trial-and-error to identify the ""root cause"", but it boils down to the --timeout 0 that webstorm adds when doing the node --inspect-brk part of debugging. The timeout 0 is added to allow breakpoints to pause the code without causing the tests to time out.
The problem can be explained with the following test case:
'use strict';


function slowThing() {
  return new Promise(resolve => setTimeout(resolve, 10).unref());
}

describe('This has lots of 10ms tests', function() {
  it('10ms', () => slowThing());
});

Note, all the test does, is wait 10ms, and then succeed.
There are 2 key features in the above....

it returns a promise in the it(...) test.
it does an unref() on the setTimeout()

If you run the above normally, it succeeds  node  ./node_modules/mocha/bin/_mocha --ui bdd tests/sscce.spec.js:
  This has lots of 10ms tests
    ✓ 10ms

  1 passing (34ms)

If you add --timeout 0 it completes successfully, but does not actually run the test:  node  ./node_modules/mocha/bin/_mocha --timeout 0 --ui bdd tests/sscce.spec.js && echo pass gives:
  This has lots of 10ms tests
pass

The same is true (it also fails) if you run in debug mode (--inspect).
BUT, if you add a second --timeout 0 it will then work correctly: node  ./node_modules/mocha/bin/_mocha --timeout 0 --timeout 0 --ui bdd tests/sscce.spec.js && echo pass
  This has lots of 10ms tests
    ✓ 10ms

  1 passing (18ms)
pass

My guess is that the code that waits for Promise-based tests to complete is not actively waiting on the promise, so the node system discovers there are no events to prevent system exit, so it exits...
But, for the life of me, I don't understand why adding multiple --timeout 0 flags makes it work.....
Oh, and, if you use WebStorm, you end up having to add 2 --timeout 0 flags in your configuration, so that when you run the tests it has 2 timeouts, and when you debug, it has 3.
Edited to add versions:
rolf@rolf-vb:~/bmix/debugsscce$ node --version
v8.15.1
rolf@rolf-vb:~/bmix/debugsscce$ npm list mocha
debugsscce@1.0.0 /home/rolf/bmix/debugsscce
└── mocha@6.0.2",rolfl,NONE,2019-03-07 19:36:45+00:00,False,,,,4,23,2019-03-07 20:22:41+00:00,0.03,plroebuck,MEMBER,3,0,0,1,"['async', 'confirmed-bug', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3818,Custom Location is not working as expected for --config,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description

Steps to Reproduce

Expected behavior: [What you expect to happen]
config file should load from the given custom location
Actual behavior: [What actually happens]
Getting issue as below

mocha --no-opts --config node_modules/ace-api-testlib/lib/.mocharc.js --reporter mocha-allure-reporter ""

/Users/ajadeja/git_test/ace-ilp-lib/node_modules/mocha/lib/cli/config.js:63
throw new Error(failed to parse ${filepath}: ${err});
^
Error: failed to parse node_modules/ace-api-testlib/lib/.mocharc.js: Error: Cannot find module 'node_modules/ace-api-testlib/lib/.mocharc.js'
at exports.loadConfig.filepath (/Users/ajadeja/git_test/ace-ilp-lib/node_modules/mocha/lib/cli/config.js:63:11)
at loadRc (/Users/ajadeja/git_test/ace-ilp-lib/node_modules/mocha/lib/cli/options.js:229:21)
at loadOptions (/Users/ajadeja/git_test/ace-ilp-lib/node_modules/mocha/lib/cli/options.js:299:20)
at Object. (/Users/ajadeja/git_test/ace-ilp-lib/node_modules/mocha/bin/mocha:29:14)
at Module._compile (module.js:652:30)
at Object.Module._extensions..js (module.js:663:10)
at Module.load (module.js:565:32)
at tryModuleLoad (module.js:505:12)
at Function.Module._load (module.js:497:3)
at Function.Module.runMain (module.js:693:10)
npm ERR! code ELIFECYCLE

Reproduces how often: [What percentage of the time does it reproduce?]
Versions



The output of mocha --version and node node_modules/.bin/mocha --version:
% mocha --version
6.0.2


The output of node --version:
% node --version
v8.11.1


Your operating system

name and version: macOSHighSierra 10.13.6
architecture (32 or 64-bit):



Your shell (e.g., bash, zsh, PowerShell, cmd): bash


Your browser and version (if running browser tests):


Any third-party Mocha-related modules (and their versions):


Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):


Additional Information",AartiJ,NONE,2019-03-08 19:31:59+00:00,True,2019-03-11 15:04:48+00:00,2.81,,3,38,2019-03-08 19:33:50+00:00,0.0,AartiJ,NONE,2,0,0,1,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3819,meta: LTS strategy,"To support ""LTS""--or long-running releases--we will need to make some development workflow changes.
In terms of a branching strategy, I'm thinking the most reasonable approach would be trunk-based development, which I had experimented with before without knowing what it was called.  Node.js uses something very similar to this.
In a nutshell:

all development work is done targeting master (except in the case that the bug cannot be reproduced in master; it then must happen on release branches)
each LTS release (e.g., each major or even-numbered majors) branches from master
bug fixes, features, etc. are cherry-picked from master into the release branch
releases are tagged from the release branches, not master
""feature"" branches exist how we've been doing them--no change here. these are any short-lived branches to be rebased onto master and merged via a PR. note that this includes bug fixes, ""chores""--pretty much anything.
in the case that work must be done against a release branch, a PR should target that branch, and cherry-picked from release into master, if it makes sense.
at no point is a release branch ever merged back into master.

In addition to whatever we're going to get from users reporting bugs against multiple release lines, this is the overhead we're looking at for LTS releases.  There are some tools available which we can either use outright or adapt for our uses (from the Node.js project), but we may need a purpose-built solution.  For example, it'd maybe make sense to automatically attempt cherry-picking of new changesets in master into the active release branches.
(AFAIK, cherry-picking is used because otherwise each changeset in master would create an extra merge commit when pulled into an active release branch.)
A noted headache is cross-referencing changesets with their original PRs (due to the loss of context created when a changeset is cherry-picked instead of merged).  It becomes critical to link to the PR number somewhere in the commit message.  Of course, you can't add the PR to the commit message when you create a changeset, so the commit message must be amended at time-of-merge.  Node.js also has tooling (and a convention) around this.

Another unconventional way to tackle this is to literally snapshot the codebase for each release line and stuff it in some subdirectory.  I'm pretty sure I didn't just dream this up.  Anyway, I don't think the tooling's there to support this sort of thing, though at its core, it sounds similar to a monorepo.  The major challenge would be to coordinate patch application across multiple directories, assuming something like Lerna could manage the rest of it.  While the above branching solution is non-trivial, I still don't see a clear advantage; both will require tooling.
cc @mochajs/core",boneskull,MEMBER,2019-03-08 21:35:06+00:00,False,,,,5,12,2019-03-08 21:37:06+00:00,0.0,boneskull,MEMBER,5,0,0,0,"['core-team', 'discussion']",False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
3822,--config does not resolve paths relative to CWD,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
.js config loading with --config does not handle relative paths correctly, because it calls require() with a relative path.
Here's the problem: https://github.com/mochajs/mocha/blob/master/lib/cli/config.js#L38
Steps to Reproduce
cd to an empty directory.  touch foo.js
mocha --config foo.js

Expected behavior: [What you expect to happen]
mocha loads config from foo.js
Actual behavior: [What actually happens]
/c/Users/cspotcode/Documents/Personal-dev/@mochajs/mocha/lib/cli/config.js:64
    throw new Error(`failed to parse ${filepath}: ${err}`);
    ^

Error: failed to parse foobar.js: Error: Cannot find module 'foo.js'

Reproduces how often: [What percentage of the time does it reproduce?]
All the time
Versions
Mocha 6.0.2
WSL WLinux bash
Additional Information
Issue #3818",cspotcode,CONTRIBUTOR,2019-03-11 00:05:17+00:00,True,2019-04-07 11:42:22+00:00,27.48,,5,12,2019-03-11 09:35:34+00:00,0.4,juergba,MEMBER,3,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3826,--reporter-option(s) flags in .opts files are ignored when running with _mocha,"EDIT 2019-03-14: I had originally misdiagnosed the issue, and thought it was related to .opt files. The actual issue is with the binary used.
EDIT 2019-03-15: The actual issue is with both .opt files and the mocha binary.
Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
When I upgrade to the latest version of mocha, my settings --reporter-option and --reporter-options flags are not being respected by the built-in xunit reporter, or by custom reporters. After some debugging, it looks like the --reporter-option flag is ignored when

I set it in an options file, AND
I use the _mocha command to run tests.

The --reporter-option flag works when I pass it to mocha or _mocha directly, and options files work with mocha. It's only when I use options files and the _mocha command together that the flag is ignored.
The --reporter-options flag has identical behavior in all cases.
Steps to Reproduce

Create a project with at least one test
Add a .mocha.jenkins file with the following content:

--reporter xunit
--reporter-option output=spec/reports/unit-test-report.xml


Run

npx _mocha --opts .mocha.jenkins
Expected behavior:
Results are saved in ""spec/reports/unit-test-report.xml""
Actual behavior:
Results are printed on the console.
Reproduces how often:
Always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.2
The output of node --version: v8.12.0
Your operating system

name and version: macOS-10.13.3 (High Sierra)
architecture (32 or 64-bit): 64-bit


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Any third-party Mocha-related modules (and their versions):

Also reproducible with mocha-jenkins-reporter-0.4.1


Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):

Typescript-3.3 if relevant



Additional Information",SupernaviX,NONE,2019-03-11 18:35:26+00:00,True,2019-04-29 15:47:28+00:00,48.88,,3,10,2019-03-13 15:09:18+00:00,1.86,juergba,MEMBER,2,0,0,1,"['confirmed-bug', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3828,mocha prints a test summary with partial results in the middle of a test run and prints nothing at the end (after upgrading to 5.0 or 6.0),"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Hello,
I'm working on a React app with ~2000-ish tests.
We've been using mocha since the beginning of the project - it has been working great for us until recently we tried to bring it to the latest version.
Previously we are on 4.x - no issues.
I tried to upgrade to 5.x and 6.0.2 with the same set of configurations.
{
extensions: ['js', 'jsx'],
colors: true,
diff: true,
globals: '*'
}

We are using babel-7 with some pretty common packages:
    ""@babel/cli"": ""^7.0.0"",
    ""@babel/core"": ""^7.2.2"",
    ""@babel/polyfill"": ""^7.0.0"",
    ""@babel/preset-env"": ""^7.3.1"",
    ""@babel/preset-react"": ""^7.0.0"",
    ""@babel/register"": ""^7.0.0"",

test command (that have not been changed since 4.0)
$ mocha --require @babel/register --require ./test/mocha/test-helpers.js ""./src/js/**/*.spec.{js,jsx}""

Issue:
Now (6.0.2) mocha reports summaries in the middle of running all tests
e.g. when it is still running the test suites it reports a spec fail mid-way (and continued to run all the other tests without reporting a second summary.

(this happens with or without spec failures in the first ""set"" of reports - if there are no failed tests, it is only going to report 1047 passing in the middle of all specs, and nothing at the end)
It seems it runs all .spec.js tests first, then proceeds to run all the .spec.jsx test files.
With same configuration, reverting mocha version back to 4.x without changing any other packages, it runs all 2000 specs and prints one summary at the very end.
When I change the glob pattern to run js or jsx files only, it runs specs correctly and prints one summary at the end.
I'm not sure what else I should check - let me know if you need more information.
Steps to Reproduce
same configuration, just run mocha with the same glob pattern.
Expected behavior: [What you expect to happen]
Mocha runs all test suites and prints 1 summary at the end.
Actual behavior: [What actually happens]
Mocha prints 1 summary in the middle of a test run, and prints nothing at the end.
Reproduces how often: [What percentage of the time does it reproduce?]
works perfectly when using 4.x, this behavior occurs 100% of the time with mocha 5.x and 6.x
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
both 6.0.2


The output of node --version:
10.15.1 (also tested in 8.15, same results)


Your operating system

name and version: macOS 10.14.3
architecture (32 or 64-bit): 64



Your shell (e.g., bash, zsh, PowerShell, cmd): zsh 5.3 (also tested in bash 3.2)


Your browser and version (if running browser tests): N/A


Any third-party Mocha-related modules (and their versions): none


Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):
Babel 7


    ""@babel/cli"": ""^7.0.0"",
    ""@babel/core"": ""^7.2.2"",
    ""@babel/polyfill"": ""^7.0.0"",
    ""@babel/preset-env"": ""^7.3.1"",
    ""@babel/preset-react"": ""^7.0.0"",
    ""@babel/register"": ""^7.0.0"",

Additional Information
None at this moment.",pallymore,NONE,2019-03-11 20:13:14+00:00,True,2019-03-23 16:18:41+00:00,11.84,,2,6,2019-03-12 08:57:18+00:00,0.53,plroebuck,MEMBER,1,0,0,1,"['async', 'integration', 'node.js', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3832,race condition on deprecation warnings in browser,"when we use process.nextTick in a browser, of course it's not really process.nextTick.  it's from process which is doing something really odd that I don't understand with queues.  but I digress.
our process.emitWarning polyfill uses process.nextTick, which is only used in the browser, since all supported Node.js versions have process.emitWarning.
When printing deprecation messages, it's possible for Mocha to stop running when executed in a headless browser (via something like puppeteer) before the deprecation message gets printed, due to use of the process.nextTick polyfill.
I've found just using setTimeout here instead seems to avoid this problem.
We currently do not encounter it in our builds because we don't run any integration tests in a browser.
A fix for this will be part of a forthcoming PR; just wanted to note it.",boneskull,MEMBER,2019-03-12 21:37:10+00:00,False,,,,1,1,2019-03-12 22:09:44+00:00,0.02,boneskull,MEMBER,1,0,0,0,"['browser', 'confirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3836,There is no a way to check/require that the Promise should be rejected and content should be equal to the necessary data.,"Hello,
There is a need to implement cases when is expected that the promise should be rejected and contain 'my_message' message?
function(args).catch((err) => {
expect(err.message).to.equal('expected');
})
it's not what I want, as I also need to require that the promise should be rejected.
Best regards,
Martin Ayvazyan.",martin-ayvazyan13,NONE,2019-03-14 13:52:28+00:00,True,2019-03-14 23:05:34+00:00,0.38,,2,2,2019-03-14 22:55:18+00:00,0.38,plroebuck,MEMBER,1,0,0,0,"['async', 'integration', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3837,Cannot read property 'url' of undefined,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
When running mocha in a CI environment (Jenkins), I get the following error:
.../node_modules/mocha/lib/cli/cli.js:58
  GitHub: ${ansi.blue(repository.url)}
                                 ^

TypeError: Cannot read property 'url' of undefined

while locally this works. I believe that for some reason I am not using the cli correctly, so that the epilogue is printed. Unfortunately in the CI environment, the repository key does not exist in mocha's package.json. Thus, trying to read its url will result in reading 'url' of undefined. I think a simple step would be to add a check for the existence of repository before printing this and maybe not print it, if not available? ¯_(ツ)_/¯

Steps to Reproduce
As I am not sure why the repository is not there on Jenkins, I can't say more than run any mocha -h on Jenkins.
Expected behavior: Optimally same results as locally
Actual behavior: Fails on writing epilogue
Reproduces how often: everytime
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.2
The output of node --version: v10.14.0
The output of npm --version: ??????
Your operating system

name and version: SUSE Linux Enterprise Server 12 SP3
architecture (32 or 64-bit): x86-64


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Your browser and version (if running browser tests): NA
Any third-party Mocha-related modules (and their versions):

@types/mocha-??.??.??
chai-??.??.??
sinon-chai-??.??.??
types-??.??.??


Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):

tsc 3.3.3333



Additional information
The command I am running is:
$ npx nyc mocha -r ts-node/register --file ""test/test-util/bootstrap.ts"" -c --watch-extensions ""ts"" ""test/**/*.spec.ts""",marikaner,NONE,2019-03-15 11:10:31+00:00,True,2019-03-22 10:56:28+00:00,6.99,,3,8,2019-03-15 12:43:37+00:00,0.06,plroebuck,MEMBER,2,0,0,1,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3838,"Fix/Remove NPM Mocha  ""next"" tag",https://www.npmjs.com/package/mocha?activeTab=versions,plroebuck,MEMBER,2019-03-15 20:40:44+00:00,True,2019-04-02 21:32:12+00:00,18.04,v6.1.0,4,5,2019-03-22 11:00:32+00:00,6.6,plroebuck,MEMBER,2,0,0,1,"['confirmed-bug', 'core-team']",False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3839,EPROTO error when trying to connect to a localhost WSS ,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Connection to a localhost WSS results in this error:
Error: write EPROTO 1748:error:1408F10B:SSL routines:ssl3_get_record:wrong version number:c:\ws\deps\openssl\openssl\ssl\record\ssl3_record.c:332: 
at WriteWrap.onWriteComplete [as oncomplete] (internal/stream_base_commons.js:67:16)

Same code works fine in raw Node.js
Mocha Version: 5.2.0",Vayvala,NONE,2019-03-16 19:34:44+00:00,True,2019-03-17 10:18:58+00:00,0.61,,3,2,2019-03-17 06:36:41+00:00,0.46,juergba,MEMBER,2,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3840,--forbid-only doesn't recognize `it.only` when `before` crashes,"Not sure if it's a feature or a bug, but --forbid-only crashes only in case of approaching describe.only but not it.only.
It caught me by a surprise.
Is it supposed to work that way? I assume it should crash same way it crashes for describe.only",medikoo,NONE,2019-03-19 16:17:02+00:00,False,,,,5,10,2019-03-19 22:14:21+00:00,0.25,boneskull,MEMBER,3,0,0,2,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3842,JS-Yaml Denial of Service in v3.12,"Just got a vulnerability message from npm on one of my repos using Mocha. Looks like the dep js-yaml needs to be updated from 3.12 to >=3.13

Link: https://npmjs.com/advisories/788",dannypaz,NONE,2019-03-21 21:48:18+00:00,True,2019-03-23 15:22:39+00:00,1.73,v6.1.0,6,4,2019-03-22 02:15:51+00:00,0.19,elf-mouse,NONE,0,0,0,4,"['confirmed-bug', 'node.js', 'security', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3844,Does Mocha encourage `this` for shared behaviors?,"Clarify whether Mocha encourage this context assignment
This 7 year old wiki encourages using this to store testing context in beforeEach(), tests, and afterEach() as an alternative to global variables.

The ""context"" (this) is the same object within the ""before each"", ""after each"" hooks, and the test-case itself, allowing you to utilize this instead of closures to store data.

Can a maintainer clarify if this usage is encouraged?",morgannewman,NONE,2019-03-23 00:17:09+00:00,False,,,,3,2,2019-03-29 03:27:12+00:00,6.13,morgannewman,NONE,1,0,0,1,['discussion'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
3846,Assertion error while matching two errors,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
When an error is thrown and is asserted to be equal to a similar but manually crafted error, the results are as follows
      AssertionError: expected [Error: false] to equal [Error: false]
      + expected - actual

Steps to Reproduce
Function to be checked
const checkIfPortIsAvailable = (port) => {
  return new Promise((resolve, reject) => {
    portscanner.checkPortStatus(port, function (error, status) {
      if (error) {
        throw new Error(error)
      } else {
        if (status === 'open') {
          logger.warn(`Port ${port} is not available (${colors.red('NOT OK')})`)
          reject(new Error(false))
          return
        }
        logger.info(`Port ${port} is available (${colors.green('OK')})`)
        resolve(true)
      }
    })
  })
}

Test Written
describe('open a server before running the test', () => {
      const testServer = net.createServer()
      before(() => {
        testServer.listen(3000)
      })

      it('should reject when port 3000 is open', () => {
        return checkIfPortIsAvailable(3000).then((result) => {
          expect(result).to.not.equal(true)
        }, (err) => {
          expect(err).to.equal(new Error(false))
        })
      })

      after(() => {
        testServer.close()
      })
    })

Versions

The output of mocha --version and node node_modules/.bin/mocha --version: - and 6.0.1
The output of node --version: v10.15.1
Your operating system

name and version: macOS Mojave v10.14.1
architecture (32 or 64-bit): 64-bit


Your shell (e.g., bash, zsh, PowerShell, cmd): zsh
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):",agrawalarpit14,NONE,2019-03-24 10:53:01+00:00,True,2019-03-26 11:29:51+00:00,2.03,,3,2,2019-03-25 08:15:24+00:00,0.89,juergba,MEMBER,2,0,0,0,['invalid'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3847,this.test.fullTitle() changes when using --watch,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Adding --watch means this.test.fullTitle() prepends a space (' ') on consecutive runs.
Steps to Reproduce
git clone https://gist.github.com/fatso83/d6ef639119bc497cbc8db2e2a950e441 name-issue
cd name-issue/
npm i
npm test
sleep 2;
touch demo.test.js 

Will result in
1..1
ok 1 Outer TEST
# tests 1
# pass 1
# fail 0

  1..1
not ok 1  Outer TEST
  'Outer TEST' == ' Outer TEST'
  AssertionError [ERR_ASSERTION]: 'Outer TEST' == ' Outer TEST'
      at Context.<anonymous> (demo.test.js:7:16)
# tests 1
# pass 0
# fail 1


The actual test looks like this:
describe(""Outer"", function() {
    it(""TEST"", (function() {
        assert.equal('Outer TEST',this.test.fullTitle());
    }));
});
Expected behavior: [What you expect to happen]
No errors - the full title should stay the same
Actual behavior: [What actually happens]
A space gets prepended
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
6.0.2
$ mocha --version
6.0.2

$ node --version
v11.11.0

$ lsb_release  -a
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.2 LTS
Release:	18.04
Codename:	bionic",fatso83,CONTRIBUTOR,2019-03-25 18:34:48+00:00,True,2019-03-31 16:34:46+00:00,5.92,,2,1,2019-03-25 19:08:49+00:00,0.02,fatso83,CONTRIBUTOR,0,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3849,Programatic API cannot access retry test objects,"Currently the programatic API can only access the first attempt of each test if there are multiple retries because the Runner.runTests method clones the test array inside the suite and mutates the cloned array for retries.

  
    
      mocha/lib/runner.js
    
    
         Line 544
      in
      586bf78
    
    
    
    

        
          
           var tests = suite.tests.slice(); 
        
    
  



  
    
      mocha/lib/runner.js
    
    
         Line 659
      in
      586bf78
    
    
    
    

        
          
           tests.unshift(clonedTest); 
        
    
  


It would be great if I could access the final attempt by default and even better if I could access all attempts somehow.",akiroz,NONE,2019-03-27 03:01:56+00:00,False,,,,2,2,2019-03-29 10:19:07+00:00,2.3,plroebuck,MEMBER,1,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3851,-w does not re-run after a run did not find any tests,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Starting mocha with -w watch argument does not make mocha re-run on file save when no tests were executed in the previous run.
Steps to Reproduce

Create a file test-test.js with contents describe('hello');
Run mocha -w test-test.js
Edit file and see mocha not re-running the test suite

Expected behavior: mocha -w re-runs the test suite when file is edited again
Actual behavior: mocha -w process hangs on the stats from the last run, failing to re-run after file has been edited
Reproduces how often: 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.2 and 6.0.2
The output of node --version: v11.10.1
Your operating system

name and version: Arch Linux 5.0.3-arch1-1-ARCH
architecture (32 or 64-bit): 64-bit


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):",stigok,NONE,2019-03-28 19:29:20+00:00,False,,,,3,7,2019-03-29 08:18:24+00:00,0.53,plroebuck,MEMBER,2,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3852,"My mocha is not work normal suddently, and why is about 'websocket'???","I use to work fine with mocha in ubuntu 18.10, but somehow it output some strange error about 'websocket', so I tried reinstall mocha, or reinstall the whole nodejs, still got this: (PS: I evern try to npm install -g websock)
Error: Cannot find module 'websocket'
at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)
at Function.Module._load (internal/modules/cjs/loader.js:507:25)
at Module.require (internal/modules/cjs/loader.js:637:17)
at require (internal/modules/cjs/helpers.js:22:18)
at Object. (/home/xiongzhend/Documents/dapps/LimitLess/node_modules/web3-providers-ws/src/index.js:38:10)
at Module._compile (internal/modules/cjs/loader.js:689:30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
at Module.load (internal/modules/cjs/loader.js:599:32)
at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
at Function.Module._load (internal/modules/cjs/loader.js:530:3)
at Module.require (internal/modules/cjs/loader.js:637:17)
at require (internal/modules/cjs/helpers.js:22:18)
at Object. (/home/xiongzhend/Documents/dapps/LimitLess/node_modules/web3-core-requestmanager/src/index.js:53:24)
at Module._compile (internal/modules/cjs/loader.js:689:30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
at Module.load (internal/modules/cjs/loader.js:599:32)
at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
at Function.Module._load (internal/modules/cjs/loader.js:530:3)
at Module.require (internal/modules/cjs/loader.js:637:17)
at require (internal/modules/cjs/helpers.js:22:18)
at Object. (/home/xiongzhend/Documents/dapps/LimitLess/node_modules/web3-core/src/index.js:26:22)
at Module._compile (internal/modules/cjs/loader.js:689:30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
at Module.load (internal/modules/cjs/loader.js:599:32)
at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
at Function.Module._load (internal/modules/cjs/loader.js:530:3)
at Module.require (internal/modules/cjs/loader.js:637:17)
at require (internal/modules/cjs/helpers.js:22:18)
at Object. (/home/xiongzhend/Documents/dapps/LimitLess/node_modules/web3/src/index.js:32:12)
at Module._compile (internal/modules/cjs/loader.js:689:30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
at Module.load (internal/modules/cjs/loader.js:599:32)
at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
at Function.Module._load (internal/modules/cjs/loader.js:530:3)
at Module.require (internal/modules/cjs/loader.js:637:17)
at require (internal/modules/cjs/helpers.js:22:18)
at Object. (/home/xiongzhend/Documents/dapps/LimitLess/test/LimitLess.test.js:3:14)
at Module._compile (internal/modules/cjs/loader.js:689:30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
at Module.load (internal/modules/cjs/loader.js:599:32)
at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
at Function.Module._load (internal/modules/cjs/loader.js:530:3)
at Module.require (internal/modules/cjs/loader.js:637:17)
at require (internal/modules/cjs/helpers.js:22:18)
at /home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/mocha.js:327:36
at Array.forEach ()
at Mocha.loadFiles (/home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/mocha.js:324:14)
at Mocha.run (/home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/mocha.js:801:10)
at Object.exports.singleRun (/home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/cli/run-helpers.js:207:16)
at exports.runMocha (/home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/cli/run-helpers.js:300:13)
at Object.exports.handler.argv [as handler] (/home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/cli/run.js:296:3)
at Object.runCommand (/home/xiongzhend/.npm-global/lib/node_modules/mocha/node_modules/yargs/lib/command.js:238:44)
at Object.parseArgs [as _parseArgs] (/home/xiongzhend/.npm-global/lib/node_modules/mocha/node_modules/yargs/yargs.js:1072:28)
at Object.parse (/home/xiongzhend/.npm-global/lib/node_modules/mocha/node_modules/yargs/yargs.js:566:25)
at Object.exports.main (/home/xiongzhend/.npm-global/lib/node_modules/mocha/lib/cli/cli.js:62:6)
at Object. (/home/xiongzhend/.npm-global/lib/node_modules/mocha/bin/_mocha:10:23)
at Module._compile (internal/modules/cjs/loader.js:689:30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
at Module.load (internal/modules/cjs/loader.js:599:32)
at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
at Function.Module._load (internal/modules/cjs/loader.js:530:3)
at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
at startup (internal/bootstrap/node.js:283:19)
at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3)",xiongzhend,NONE,2019-03-29 16:17:27+00:00,True,2019-03-30 09:04:21+00:00,0.7,,2,2,2019-03-29 16:18:05+00:00,0.0,xiongzhend,NONE,1,0,0,1,"['integration', 'invalid', 'question']",False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3853,cli bad option: --inspect --max-old-space-size=4096,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Executing of mocha --inspect --max-old-space-size=4096 results in the cli responding with a bad option error.
Steps to Reproduce
See description.
Expected behavior: [What you expect to happen]
Should not result in bad option.
Actual behavior: [What actually happens]

Results in bad option.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.2
The output of node --version: v10.15.3
Your operating system

name and version: Ubuntu 18.04 LTS
architecture (32 or 64-bit): 64bit


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): none",stoically,NONE,2019-03-30 21:45:40+00:00,True,2019-03-31 14:38:39+00:00,0.7,,2,3,2019-03-31 14:35:11+00:00,0.7,plroebuck,MEMBER,1,0,0,1,"['confirmed-bug', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3854,address npm audit fixes,Greetings folks! The js-yaml issue addressed here is causing us a bit of grief with our vulnerability checks in the Google npm modules.  Thank you so much for the quick fix.  Would it be possible to cut a patch release with the change so npm audit stops poking us?  Thank you!,JustinBeckwith,NONE,2019-03-31 18:10:30+00:00,True,2019-04-03 19:26:48+00:00,3.05,,6,7,2019-03-31 18:10:47+00:00,0.0,JustinBeckwith,NONE,1,1,0,4,['security'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3855,Broken links in docs,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Broken links in the documentation: In the ""Base Reporter"" ""Events"" table, the links to Test, Suite, and Hook are broken.
https://mochajs.org/api/tutorial-custom-reporter.html
Steps to Reproduce
Expected behavior: [What you expect to happen]
Actual behavior: [What actually happens]

Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
Your operating system

name and version:
architecture (32 or 64-bit):


Your shell (e.g., bash, zsh, PowerShell, cmd):
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):

Additional Information",cspotcode,CONTRIBUTOR,2019-04-01 20:31:19+00:00,True,2019-04-21 11:30:06+00:00,19.62,,2,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3857,Medium severity vulnerability via js-yaml@3.12.0,"Description
$ snyk test --dev
Medium severity vulnerability found in js-yaml
Description: Denial of Service (DoS)
Info: https://snyk.io/vuln/SNYK-JS-JSYAML-173999
Introduced through: electron-mocha@7.0.0
From: electron-mocha@7.0.0 > mocha@6.0.2 > js-yaml@3.12.0
Pulling in js-yaml version 3.13.0 or higher will address this.
See also: https://www.npmjs.com/advisories/788",mceachen,NONE,2019-04-03 21:26:53+00:00,True,2019-04-04 06:00:56+00:00,0.36,,2,1,2019-04-04 06:00:56+00:00,0.36,juergba,MEMBER,1,0,0,0,"['node.js', 'security']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3858,DoS vulnerability in global dependency,"The version 6.0.2 is dependent on js-yaml version 3.12.0, which has a DoS vulnerability  issue as stated here:
https://nodesecurity.io/advisories/788
Updating to version 3.13.0 should solve the problem.",TasiPeter,NONE,2019-04-04 07:11:35+00:00,True,2019-04-04 07:16:21+00:00,0.0,,2,1,2019-04-04 07:16:20+00:00,0.0,juergba,MEMBER,1,0,0,0,"['node.js', 'security']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3860,"Mocha, Babel, and Windows symlinks","Prerequisites


[x ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[ x] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[x ] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[x ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Mocha is not running Babel beforehand when the project is behind a symlink on windows.
I have a small SSD and a larger HDD so to make my life easier I have a hard symlink to D:/projects in C:/Users/MyUser home directory, so can access via ~/projects.
When running mocha --require @babel/register I'm getting the Unexpected identifier import problem. I even re-installed windows thinking it might be an environment problem before figuring out that this was the problem
Steps to Reproduce

Create a simple mocha es6 project in realfoldercontainer/myproject, to be run via npm test with mocha -r @babel/register in package.json
Create a hard symlink with mklink /j linkname realfoldercontainer
Navigate to linkname/myproject
Run npm test
Expected behavior: [What you expect to happen]
npm test

> mochatest@1.0.0 test D:\projects\mochatest
> mocha -r @babel/register

  index test
    sayHello function
      √ should say Hello guys!


  1 passing (44ms)

Actual behavior: [What actually happens]
npm test

> mochatest@1.0.0 test D:\testlink\mochatest
> mocha -r @babel/register

D:\projects\mochatest\test\index.test.js:3
import sayHello from ""../src/index""
       ^^^^^^^^

SyntaxError: Unexpected identifier
    at Module._compile (internal/modules/cjs/loader.js:749:23)
    at Module._compile (D:\projects\mochatest\node_modules\pirates\lib\index.js:99:24)
    at Module._extensions..js (internal/modules/cjs/loader.js:816:10)
    at Object.newLoader [as .js] (D:\projects\mochatest\node_modules\pirates\lib\index.js:104:7)
    at Module.load (internal/modules/cjs/loader.js:672:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:612:12)
    at Function.Module._load (internal/modules/cjs/loader.js:604:3)
    at Module.require (internal/modules/cjs/loader.js:711:19)
    at require (internal/modules/cjs/helpers.js:14:16)
    at D:\projects\mochatest\node_modules\mocha\lib\mocha.js:327:36
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (D:\projects\mochatest\node_modules\mocha\lib\mocha.js:324:14)
    at Mocha.run (D:\projects\mochatest\node_modules\mocha\lib\mocha.js:801:10)
    at Object.exports.singleRun (D:\projects\mochatest\node_modules\mocha\lib\cli\run-helpers.js:207:16)
    at exports.runMocha (D:\projects\mochatest\node_modules\mocha\lib\cli\run-helpers.js:300:13)
    at Object.exports.handler.argv [as handler] (D:\projects\mochatest\node_modules\mocha\lib\cli\run.js:296:3)
    at Object.runCommand (D:\projects\mochatest\node_modules\yargs\lib\command.js:238:44)
    at Object.parseArgs [as _parseArgs] (D:\projects\mochatest\node_modules\yargs\yargs.js:1089:24)
    at Object.parse (D:\projects\mochatest\node_modules\yargs\yargs.js:566:25)
    at Object.exports.main (D:\projects\mochatest\node_modules\mocha\lib\cli\cli.js:62:6)
    at Object.<anonymous> (D:\projects\mochatest\node_modules\mocha\bin\_mocha:10:23)
    at Module._compile (internal/modules/cjs/loader.js:805:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:816:10)
    at Module.load (internal/modules/cjs/loader.js:672:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:612:12)
    at Function.Module._load (internal/modules/cjs/loader.js:604:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:868:12)
    at internal/main/run_main_module.js:21:11
npm ERR! Test failed.  See above for more details.


Reproduces how often: [What percentage of the time does it reproduce?]
Every time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
Your operating system

name and version:
architecture (32 or 64-bit):


Your shell (e.g., bash, zsh, PowerShell, cmd):
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):

node v11.13.0
""@babel/cli"": ""^7.4.3"",
""@babel/core"": ""^7.4.3"",
""@babel/node"": ""^7.2.2"",
""@babel/preset-env"": ""^7.4.3"",
""@babel/register"": ""^7.4.0"",
""chai"": ""^4.2.0"",
""jest"": ""^24.7.1"",
""mocha"": ""^6.0.2""

Additional Information
I can now corretctly run the tests by going directly to the folder, but it took a long time to figure this out, including a ssystem rebuild to try and fix the problem.
I'm unsure as to whether this is a babel or mocha issue, so will be posting in both github issues pages.",ricick,NONE,2019-04-05 01:26:57+00:00,False,,,,4,9,2019-04-05 05:57:48+00:00,0.19,juergba,MEMBER,3,0,0,1,"['integration', 'needs-feedback', 'stale', 'unconfirmed-bug']",False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3861,Mocha excepting process.argv always contain strings,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Running mocha by require it with overriden process.argv will fail if args is not strings. It is hacky way but it allow to use multiple different runners by the same wrapper script, and it worked for mocha2 and mocha4. In mocha 6.0.2 this ends with error.

Steps to Reproduce
const fs = require('fs');
const mocha_file = fs.realpathSync('./node_modules/mocha/bin/_mocha')
process.argv = [process.argv[0], mocha_file, '-t', 20000]
require(mocha_file)


Expected behavior: consume option of number type also
Actual behavior:

current master line
/home/anthony/node_modules/mocha/lib/cli/options.js:87
      const pair = arg.split('=');
                        ^

TypeError: arg.split is not a function
    at nodeArgs.reduce (/home/anthony/node_modules/mocha/lib/cli/options.js:87:25)
    at Array.reduce (<anonymous>)
    at parse (/home/anthony/node_modules/mocha/lib/cli/options.js:85:67)
    at loadOptions (/home/anthony/node_modules/mocha/lib/cli/options.js:288:14)
    at Object.exports.main (/home/anthony/node_modules/mocha/lib/cli/cli.js:62:18)
    at Object.<anonymous> (/home/anthony/node_modules/mocha/bin/_mocha:10:23)
    at Module._compile (internal/modules/cjs/loader.js:701:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)
    at Module.load (internal/modules/cjs/loader.js:600:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)
    at Function.Module._load (internal/modules/cjs/loader.js:531:3)
    at Module.require (internal/modules/cjs/loader.js:637:17)
    at require (internal/modules/cjs/helpers.js:22:18)
    at Object.<anonymous> (/home/anthony/test_mocha.js:5:1)
    at Module._compile (internal/modules/cjs/loader.js:701:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)
    at Module.load (internal/modules/cjs/loader.js:600:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)
    at Function.Module._load (internal/modules/cjs/loader.js:531:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:754:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)

But fixing it in-place (arg.toString().split('=')) will not work because of yargs-parser similar issue.
Reproduces how often: always
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.0.2
The output of node --version: v.10.15.3

Additional Information",SirAnthony,NONE,2019-04-05 10:13:55+00:00,True,2019-04-06 10:58:42+00:00,1.03,,2,2,2019-04-05 19:39:08+00:00,0.39,plroebuck,MEMBER,1,0,0,0,"['invalid', 'node.js', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3866,Error after updating to 6.1.0,"$ yarn test
yarn run v1.3.2
(node:6135) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
warning package.json: License should be a valid SPDX license expression
$ NODE_ICU_DATA='node_modules/full-icu' nyc mocha test/test
: No such file or directory

full log: https://travis-ci.com/njzjz/chemicaltools-js/jobs/190964352
But it worked fine before.
Sent from PPHub For GitHub",njzjz,NONE,2019-04-07 16:08:54+00:00,True,2019-04-08 00:09:00+00:00,0.33,,10,24,2019-04-07 16:10:40+00:00,0.0,njzjz,NONE,2,2,0,6,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3867,bin/mocha and bin/_mocha have no exe permission in 6.1.x,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description

It seems the the files bin/mocha and bin/_mocha have no exe permissions in 6.1.0 and 6.1.1. If I do an npm install --no-bin-links and try ./node_modules/mocha/bin/_mocha (or mocha) I get Permission denied in linux.
At least in 6.0.2 these files had rwx permissions.
Steps to Reproduce

Linux environment needed
npm install --no-bin-links
./node_modules/mocha/bin/_mocha or
./node_modules/mocha/bin/mocha
Expected behavior: [What you expect to happen]
file is executable and actually node ./node_modules/mocha/bin/_mocha get's executed.
Actual behavior: [What actually happens]

File is not executable and therefore Permission denied happens.
Reproduces how often: [What percentage of the time does it reproduce?] 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.1
The output of node --version: 10.15.3
Your operating system

name and version: Linux Ubuntu 18.04
architecture (32 or 64-bit): 64


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Your browser and version (if running browser tests): -
Any third-party Mocha-related modules (and their versions): -
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): -

Additional Information",Flarna,NONE,2019-04-08 10:30:34+00:00,True,2019-04-08 20:56:02+00:00,0.43,,5,11,2019-04-08 18:32:42+00:00,0.33,boneskull,MEMBER,2,1,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3868,Mocha 6 fails with pnpm: Cannot find module 'semver',"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
mocha 6 fails to run under pnpm
Steps to Reproduce

pnpm install mocha
pnpx mocha --version or npx mocha --version

Expected behavior:
6.1.2 is displayed in the console
Actual behavior:
Cannot find module 'semver' is displayed in the console
Reproduces how often:
100%
Versions
6.1.2


The output of mocha --version and node node_modules/.bin/mocha --version:
Cannot find module 'semver'
The output of node --version:
v8.15.1
Your operating system

name and version: Ubuntu 14, Windows 10
architecture (32 or 64-bit): 64, 64


Your shell (e.g., bash, zsh, PowerShell, cmd): bash, Powershell, git bash
Your browser and version (if running browser tests):  N/A
Any third-party Mocha-related modules (and their versions):  N/A
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):  N/A

Additional Information
A mocha dependency, node-environment-flags, requires semver, but does not list it as a dependency in package.json.  See issue: boneskull/node-environment-flags#2 and pull request:  boneskull/node-environment-flags#4.",gilly3,NONE,2019-04-11 22:23:16+00:00,True,2019-04-11 23:58:11+00:00,0.07,,2,1,2019-04-11 22:29:35+00:00,0.0,gilly3,NONE,0,0,0,1,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3870,wanted: a thing that automatically publishes a GH release after npm publish,"What is this? I don't know.  GitHub action?  Probot thing?  npm script?
Requirements:

After a successful npm publish:
If a draft GitHub release has been saved which matches the new published version (careful to note the v prefix) and has a non-empty description text, publish it.
If no matching GitHub release has been created (in other words, no ""draft"" release exists), do nothing OR create and publish a new release (adhering to the current GitHub tag & release naming convention) with the description text being the top section of CHANGELOG.md.

I imagine there's something out there already that'll get us at least partway there.  Maybe @gr2m or someone else at Hoodie knows of a tool?",boneskull,MEMBER,2019-04-12 17:46:35+00:00,False,,,,2,2,2019-04-12 18:01:30+00:00,0.01,gr2m,NONE,1,0,0,1,"['chore', 'feature', 'help wanted']",True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3871,rename `exclude` to `ignore` and alias `exclude` to `ignore`,"as per #2036, ""ignore"" functionality is available via the exclude option of a .mocharc.* config file.  Since ignore is more of an obvious (and  precedented) option name, let's prefer ignore as the canonical name and alias exclude to it.",boneskull,MEMBER,2019-04-12 18:32:45+00:00,True,2019-05-02 10:01:59+00:00,19.65,,1,1,2019-04-12 18:36:20+00:00,0.0,boneskull,MEMBER,1,0,0,0,"['feature', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3873,return cleanup function from before & beforeEach,"Is your feature request related to a problem or a nice-to-have?? Please describe.
I see a common imperative pattern when doing test setup and teardown.
describe('test with setup', () => {
  let server
  beforeEach(() => {
    server = new Server()
  })
  afterEach(() => {
    server.close()
  })
})
The frustration is initializing a variable in a before scope that needs to be accessed by a after hook. Variables declared in the describe block should be for use in test cases, and adding uninitialized setup/teardown variables in the scope is confusing and stateful.
Describe the solution you'd like
react hooks has a great pattern that addresses a similar problem they had with componentWillMount and componentWillUnmount. I propose adding similar functionality to the before and beforeEach blocks to mocha.
describe('test with setup', () => {
  beforeEach(() => {
    const server = new Server()
    return () => server.close()
  })
})
This should work fine with blocks that return promises as well:
describe('test with async setup', () => {
  before(() => {
    return createSomeFilesAsync()
      .then(() => () => deleteSomeFilesAsync()) // this line is the teardown
})
In short, the proposal is to allow before and beforeEach to return a function, which will be executed at the same time as after and afterEach, respectively. In the case of a returned promise, just resolve the promise and if it resolves to a function, it is a cleanup step.
Describe alternatives you've considered
the alternative is the first example I gave.
I would be interested in working on a pr for this if others find it interesting (and if I can receive some guidance from a contributor)",andykais,NONE,2019-04-12 18:51:14+00:00,False,,,,3,2,2019-04-19 10:28:14+00:00,6.65,Bamieh,MEMBER,1,0,0,1,"['discussion', 'feature', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False
3875,"""stats"" field is missing in JSON reporter in mocha@6","Hi, I'm working on mocha-parallel-tests project which is aiming to run mocha files in parallel. I'm trying to support mocha@6 right now and faced an issue with JSON reporter: it looks like it doesn't have a ""stats"" field in mocha@6 whereas in mocha@5 the field was there. It wasn't mentioned as a breaking change so I'm wondering if it's a bug or just a missing breaking change thing.
Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
[] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
JSON reporter of mocha@6 is missing the ""stats"" field
Steps to Reproduce
Run any test with mocha -R json. In mocha@5 stdout has a ""stats"" field, in mocha@6 it doesn't.
Expected behavior: JSON reporter in mocha@6 should have a ""stats"" field or it should be mentioned in the breaking changes of mocha@6 release.
Actual behavior: stdout of JSON reporter doesn't have a ""stats"" field.
Reproduces how often: always",1999,CONTRIBUTOR,2019-04-14 12:12:07+00:00,True,2019-04-14 21:25:24+00:00,0.38,,2,2,2019-04-14 12:19:49+00:00,0.01,plroebuck,MEMBER,1,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3876,js-yaml needs to be updated (and should have a range version),"Description
js-yaml has a new security vulnerability: https://www.npmjs.com/advisories/813
For some reason, a specific version (3.13.0) is being specified in package.json. Why isn't this a range?
Steps to Reproduce
Install the latest version of mocha, then run yarn audit.
Expected behavior:
No vulnerabilities found.
Actual behavior:
┌───────────────┬──────────────────────────────────────────────────────────────┐
│ high          │ Code Injection                                               │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Package       │ js-yaml                                                      │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Patched in    │ >=3.13.1                                                     │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Dependency of │ mocha                                                        │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Path          │ mocha > js-yaml                                              │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ More info     │ https://www.npmjs.com/advisories/813                         │
└───────────────┴──────────────────────────────────────────────────────────────┘

Versions
mocha 6.1.3",kaiyoma,NONE,2019-04-15 22:31:28+00:00,True,2019-04-17 14:02:38+00:00,1.65,,9,7,2019-04-16 05:16:36+00:00,0.28,soatok,NONE,1,0,0,6,"['security', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
3880,Vulnerability Advisory flaggs 1 high vulnerability in js-yaml for mocha@6.1.3,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
According to the NPM vulnerability advisory there is a severe/ High vulnerability in the dependency js-yaml.
https://www.npmjs.com/advisories/813
Steps to Reproduce
Simply npm install the latest version of mocha@6.1.3
Expected behavior: [What you expect to happen]
No vulnerabilities.
Actual behavior: [What actually happens]
npm audit --parseable | awk -F $'\t' '{print $1,$2,$4,$5,$6}' will give
review js-yaml >=3.13.1 Code Injection https://npmjs.com/advisories/813
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions
$ node_modules/mocha/bin/mocha --version # 6.1.3
$ node --version # v10.15.3


The output of mocha --version and node node_modules/.bin/mocha --version:
The output of node --version:
Your operating system

name and version:
architecture (32 or 64-bit):


Your shell (e.g., bash, zsh, PowerShell, cmd):
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):

Additional Information",dewwwald,NONE,2019-04-17 16:21:35+00:00,True,2019-04-18 18:23:00+00:00,1.08,,9,17,2019-04-17 19:21:25+00:00,0.12,sam-github,NONE,2,0,0,7,"['duplicate', 'security']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True
3882,Is the loadOptions and handleFiles api public?,"Congrats on the release of version 6. The code cleaned up nicely and the new config files are a big bonus ☕️. I also love the extended api documentation.
We want to support the loading of config files as well in the Stryker mocha runner. My question is: can we rely on the require('mocha/lib/cli/options').loadOptions to load options? Or is it subject to change without a major release? It is documented here: https://mochajs.org/api/module-lib_cli_options.html#.loadOptions, so I would assume that changes to this would be major.
EDIT:
Just as important for us is the handleFiles method. That one cannot be found in the api docs (yet). Could we make that api public as well?",nicojs,NONE,2019-04-18 09:48:19+00:00,False,,,,3,6,2019-04-19 06:36:34+00:00,0.87,nicojs,NONE,1,0,0,1,"['discussion', 'usability']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
3883,Drop Node.js 6.x support,Node.js v6 will be the end of life on April 30th.,outsideris,MEMBER,2019-04-19 10:32:50+00:00,True,2019-04-19 10:58:50+00:00,0.02,,1,1,2019-04-19 10:58:50+00:00,0.02,outsideris,MEMBER,1,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3884,Drop Node.js 6.x support,"Node.js v6 will be the end of life on April 30th.
There isn't an issue to drop supporting Node.js v6 for me. Do you know any problem?",outsideris,MEMBER,2019-04-19 10:32:50+00:00,False,,,,4,3,2019-04-19 14:23:24+00:00,0.16,juergba,MEMBER,2,0,0,1,"['node.js', 'semver-major']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
3893,Mocha exits with 0 exit code with failing tests,"Prerequisites

[X ] Checked that your issue hasn't already been filed by cross-referencing issues with the faq label Applicable issue #2713 is closed
[X ] Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
[ X] 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
[X ] Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally. not installed globally

Description
Mocha exits with exit code 0 despite having failing tests
Visually confirmable by truncated output. Does not print all test lines before printing Done in x. Last test line printed varies run to run.
Steps to Reproduce
Working to determine outside of our test suite. Running sub-suites alone seems to work fine, but running the entire suite does not. Possibly a timing or issue with high test counts?

Expected behavior:
Mocha reports a non-zero [success] exit code
Actual behavior:
Mocha reports a 0 exit code and does not complete console output.
Test Output
$ yarn mocha './mochaWhy/*.test.js'
yarn run v1.9.4
$ C:\projectDir\node_modules\.bin\mocha ./mochaWhy/*.test.js
  1ListBuilder
    1) fails a test before compliance check
    2) creates the links
    3) fails a test after compliance check
    dataBuilder - Empty
      √ It does not create uneccessary data
    Compliance
      √ Files with bare bones data are compliant (1196ms)
      √ Files with simple data are compliant (46ms)
      √ Files with bare bones data are compliant (152ms)
      √ Files with simple data are compliant (95ms)
  orders
    retrieveFile
      4) handles arrays
      √ handles an empty array of uuids
      5) throws validation error
    retrieveById
      6) Finds info, and pulls the associated info
      7) Handles b
      √ Handles a
    save
      √ handles empty arrays gracefully
      8) calls  entity validation
      9) doesn't call db-update upon validation failure
    Dispatch Sequence 
      10) Queues b
      11) Handles z
      12) Doesn't allow x
      13) Doesn't allow y
      14) Doesn't create g
      15) Throws an error if w
      16) Throws an error if t
      17) Allows partial success when p
    structureData
      It makes sure 8
        √ Handles no 
        √ Zero-Index input IDs
        √ One-Index input IDs
        √ Null Ids
        √ Skipped Id
        √ Mixed Values

  Interactor
    parseAndSaveJson
      - handles a
      - handles b
      - handles c
      - handles d
      - not archived if origin is API
      - Can determine set 

  dataInteractor
    unzipConvert //not the last test in the suite, but is the last printed. 
Done in 4.45s.//[this should be failing count & error details]

$ echo $?
0

Reproduces how often:
Currently, every time I run the full suite. This has been a recurring problem for us, sometimes upgrading node has helped, but have not found a solution this time, most likely was a bandaid for the problem.
Versions
Mocha: 3.5.3 and 6.1.4
Node versions 8.10, 8.11, 8.12, 8.16, 10.0, 10.16 (In the past upgrading node 8.9 to node 8.10 seemed to fix, but no longer is a solution)
Gitlab runner: docker:latest node:8
Ubuntu 16.4 64bit
Windows 10 64bit - Git bash MINGW64 & Windows powershell
##Related Issues
#2713
#188
#187
#2438 (comment) in discussion, not main post",nwesterman,NONE,2019-04-26 16:39:20+00:00,False,,,,3,16,2019-04-26 20:37:46+00:00,0.17,nwesterman,NONE,2,0,0,1,"['needs-feedback', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
3895,Node 12 process.removeListener is not a function,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Running unit tests with ""mocha"": ""6.1.4"", on my repository along with Node v12.0.0 results in error process.removeListener is not a function
This error does not occur with Node v10.15.1
Steps to Reproduce
I suspect the error will occur any time you run unit tests with mocha along with Node 12, but here's a way:


Clone my repository:
git clone https://github.com/whyboris/karma-helpful-reporter.git


Install Node v12.0.0 (I'm using nvm to switch back between versions easily)


Then npm run test and see the error.
Note that the error does not occur on Node v10.


Expected behavior: [What you expect to happen]
No error with Node 12
Actual behavior: [What actually happens]
    process.removeListener('uncaughtException', uncaught);
            ^

TypeError: process.removeListener is not a function

Reproduces how often: [What percentage of the time does it reproduce?]
Every time
Versions
""mocha"": ""6.1.4"",
Node v12.0.0

The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.4
The output of node --version: v12.0.0
Your operating system

name and version: Mac OS 10.14.6
architecture (32 or 64-bit): 64bit


Your shell (e.g., bash, zsh, PowerShell, cmd): zsh
Your browser and version (if running browser tests): n/a
Any third-party Mocha-related modules (and their versions): n/a (?)
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): TypeScript (?)

Additional Information
Full log:
  1) ""after each"" hook
/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:917
    process.removeListener('uncaughtException', uncaught);
            ^

TypeError: process.removeListener is not a function
    at Runner.<anonymous> (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:917:13)
    at Runner.emit (events.js:196:13)
    at /Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:903:12
    at done (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:761:7)
    at next (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:728:16)
    at done (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:761:7)
    at next (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:732:14)
    at done (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:761:7)
    at next (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:732:14)
    at done (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:761:7)
    at next (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:732:14)
    at done (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:761:7)
    at next (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:732:14)
    at Runner.hookErr (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:575:7)
    at Runner.uncaught (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:857:19)
    at process.uncaught (/Users/byakubchik/Desktop/temp/karma-helpful-reporter/node_modules/mocha/lib/runner.js:887:10)
    at process.emit (events.js:196:13)
    at process._fatalException (internal/process/execution.js:146:25)

Node documentation for removeListener:
https://nodejs.org/api/events.html#events_event_removelistener
[edit] - documentation should be here, thank you @plroebuck :
https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener",whyboris,NONE,2019-04-29 14:28:43+00:00,False,,,,2,2,2019-04-29 16:46:04+00:00,0.1,plroebuck,MEMBER,1,0,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3896,"Node v12 failing unit test with node flag ""--preserve-symlinks""","Description
Our unit tests fail with:
1) node-flags
       isNodeFlag()
         special cases
           should return true for flags starting with ""preserve-symlinks"":
     UnexpectedError: 
expected true to be false

It's the only failing test while running npm test on Windows.
According to Node's docu this flag should still exist. It is also included within process.allowedNodeEnvirnmentFlags.
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: current master
The output of node --version: v12.1.0
Your operating system

name and version: Windows 10
architecture (32 or 64-bit): 64


Your shell (e.g., bash, zsh, PowerShell, cmd): VSCode command
Your browser and version (if running browser tests):
Any third-party Mocha-related modules (and their versions):
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version):",juergba,MEMBER,2019-04-30 16:28:22+00:00,True,2019-05-08 17:29:32+00:00,8.04,,1,0,,,,,0,0,0,0,"['confirmed-bug', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3897,Can't view test output in file and console output together using mocha and mochawesome,"I'm using latest node, mocha to run UI tests and mochaawesome for reporting. I would like to get output of mocha test command in console output and text file both.
Test works fine but user can't see console output promptly if output is redirected and if i don't redirect then report text file is not created. mochawesome report doesn't create text file, default behavior is html file. I need both kind of output, any alternative using mochawesome report or any other solution to have this facility?
config:
npm install mocha mochaawesome

report.txt:
mocha create-event.js -f Smoke > report.txt



console output:
mocha create-event.js -f Smoke",jiteshsojitra,NONE,2019-04-30 17:31:33+00:00,True,2019-05-05 20:47:21+00:00,5.14,,2,2,2019-04-30 20:27:45+00:00,0.12,plroebuck,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3898,--exit returns non-zero exit code and CI tool returns failure,"As we all know, we can use --exit in mocha command to exit the tests. We are using this especially for leaving opened application to save the time (instead of opening and closing desktop app using Spectron).
But the problem with --exit in CI returns exit code as non-zero so tool keeps complaining that automation failed. Is there any solution for this with --exit? Is there any way to return 0 always on Windows powershell with mocha command as an alternative?",jiteshsojitra,NONE,2019-04-30 19:00:06+00:00,True,2019-05-05 20:52:54+00:00,5.08,,2,5,2019-04-30 20:20:11+00:00,0.06,plroebuck,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3899,Regression: Mocha ignores files after `--` (end of CLI options),"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
During the Mocha@6 rewrite of the CLI, a regression occurred: Mocha now ignores the test files supplied after --. Support for -- is required to allow consumers to safely generate the command line arguments and avoid conflicts between test files and CLI options.

Steps to Reproduce
In a directory with test.spec.js, run:
mocha -- test.spec.js

Expected behavior: Mocha executes the tests in test.spec.js.
Actual behavior: Mocha immediately returns with the following error:
Error: No test files found: ""test""

Reproduces how often: All the time
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.4
The output of node --version: 12.1.0
Your operating system

name and version: Linux 5.0.9
architecture (32 or 64-bit): 64-bit


Your shell (e.g., bash, zsh, PowerShell, cmd): Bash
Your browser and version (if running browser tests): N/A
Any third-party Mocha-related modules (and their versions): N/A
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): N/A

Additional Information
In Mocha@5, the command mocha -- test.spec.js works. It fails since the rewrite from #3556.",demurgos,CONTRIBUTOR,2019-04-30 22:47:12+00:00,False,,,,2,1,2019-05-02 21:41:41+00:00,1.95,plroebuck,MEMBER,1,0,0,0,"['confirmed-bug', 'needs-upstream-fix', 'node.js']",False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3902,Support multiple reporters in browser,"Is your feature request related to a problem or a nice-to-have??
This is a 'nice-to-have'
I think it's awesome that mocha supports running in the browser!
I would like mocha be able to support multiple reporters for the browser - mainly for using 'json-stream' with 'html'. Currently you can only specify one reporter.
Describe the solution you'd like
My first thought would be to have mocha.setup() be able to accept an array reporters instead of just a single string
For example:
    mocha.setup({
        ui: 'bdd',
        reporter: ['html', 'json-stream']
    });
Another solution would be to have json-stream as an additional option:
    mocha.setup({
        ui: 'bdd',
        reporter: 'html',
        jsonStream: true,
    });
As a side note I have a one-line hack working in 'mocha.js' so I know it's definitely possible",letsgotomars,NONE,2019-05-06 03:33:36+00:00,False,,,,4,2,2019-06-12 16:44:01+00:00,37.55,janiukjf,NONE,0,0,0,2,"['browser', 'feature', 'nice-to-have', 'reporter']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3904,retry does not work with uncaught exceptions,"mocha 6.1.4
chai 4.2
const {expect} = require('chai');

it('test retry works ', function(done) {
        this.retries(2);
        this.timeout(1000);
        console.log('attempt');
        expect(1).to.be.eql(2);
        done();
    })

Retry work as expect, retry twice.
----------------------split ------------------
it('test retry does work ', function(done) {
        this.retries(2);
        this.timeout(1000);
        console.log('attempt');
       setTimeout(() => {
            expect(1).to.be.eql(2);
            done();
        });
    })

Retry does not work, only run once
Related with #2137
About mocha options, both allowUncaught and --allow-uncaught are set when testing",ClarkMiaguo,NONE,2019-05-09 04:10:27+00:00,True,2019-05-10 08:38:13+00:00,1.19,,2,3,2019-05-09 07:04:04+00:00,0.12,ClarkMiaguo,NONE,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3907,Is it possible to parallel run the test cases ?,"There are multiple the separate  JS files, if the sequential execution will take more time, it will save a lot of time to be able to run in parallel.
So I advise that the mocha will be more perfect if it supports to parallel run the test case.",RyanLiuF,NONE,2019-05-10 01:48:48+00:00,True,2019-05-12 14:13:33+00:00,2.52,,3,3,2019-05-11 14:10:42+00:00,1.52,martinoppitz,NONE,1,0,0,2,"['feature', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3908,Push required module options not possible,"For example we use @babel/register.
In this module is default: ignore node_modules
Is there any way to do this?",martinoppitz,NONE,2019-05-10 16:50:14+00:00,True,2019-06-17 19:39:33+00:00,38.12,,3,5,2019-05-10 16:52:34+00:00,0.0,martinoppitz,NONE,2,0,0,1,"['question', 'stale']",False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3909,"Timeout 2000 ms exceeded. for async tests and hooks ensure ""done()"" should be called","describe('POST /startConvo', function(done) { 
         
        beforeEach((done) => {
			this.controller = Botmock({
				debug: false,
			});

			function botExtender(bot, botkit, config) {
				bot.customReply = function (message, text) {
					bot.reply(message, text);
				};
			}

			this.bot = this.controller.spawn({type: 'cellNo', botExtender: botExtender});
        }); 
        
        it('start new conversation', async function(done) {

            controller.setupWebserver(5000, (err, webserver) => {


                webserver.post('/startConvo', (req, res) => {
                    
                    const patientDetails = req.body;
                    const number = patientDetails.number;
                    bot.startConversation({
                      user: number,
                      channel: number,
                      text: number
                    }, async (cerr, convo) => {
                      convo.vars.appoinmentDetails = patientDetails;
                      convo.vars.practiceId = patientDetails.practiceId;
                      convo.vars.token = patientDetails.apiToken;
                     

                      convo.setTimeout(2000);
                      convo.onTimeout((convo) => {
                       
                        convo.stop();
                        convo.next();
                      });


                      convo.next();
                    });
                   
                    
                  this.timeout(1000)
                    done();

                })",agarkathe,NONE,2019-05-11 14:05:43+00:00,True,2019-05-22 05:52:38+00:00,10.66,,3,2,2019-05-12 07:13:10+00:00,0.71,juergba,MEMBER,2,0,0,0,"['async', 'invalid']",False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3910,"Soft deprecate ""mocha.opts""","Since v6.0.0 ""mocha.opts"" is considered ""legacy"".

soft deprecate
provide migration script to configuration file format",juergba,MEMBER,2019-05-13 06:12:39+00:00,False,,,,1,1,2019-06-03 07:59:23+00:00,21.07,juergba,MEMBER,1,0,0,0,"['feature', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3911,"Soft deprecate comments within ""mocharc.json""","JSON: Create a .mocharc.json (or .mocharc.jsonc) in your project's root directory. Comments — while not valid JSON — are allowed in this file, and will be ignored by Mocha.

Soft deprecate comments within JSON configuration files. JSON file format does not support comments.
Additionally support for config files with .jsonc extension has already been added to v6.",juergba,MEMBER,2019-05-13 06:22:16+00:00,False,,,,1,0,,,,,0,0,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3912,Improve file watching,"Is your feature request related to a problem or a nice-to-have?? Please describe.
When using the --watch option Mocha reruns tests when files change. This is quite helpful but the current implementation suffers from a couple of problems. I’d be more than glad to implement the required changes.
Current problems

New files are not picked up (#2176)
What files to watch can only be controlled by the extensions configuration. In particular that makes the following uses impossible:

Only watch files in a certain directory (#2702)
Watch files without extensions
Exclude certain files and directories from watching (#2554)


It always uses the slow fs.watchFile even when fs.watch is available.
It is impossible to watch files in node_modules and .git

Describe the solution you'd like

Use chokidar to get reliable and fast file watching.
Add a watchFiles (name subject to bikeshedding) configuration option that accepts a list of file paths, directories, and globs to watch.
Rerun tests when a file matching watchFiles is added
Add watchIgnore (name subject to bikeshedding) that accept a list of globs to exclude from watching. Defaults to ['node_modules', '.git/**']
Keep backwards compatibility if none of the new options are specified

Describe alternatives you've considered
Using nodemon would address all the problems. Since this creates a new process on file changes this approach is to slow, especially when using Babel or TypeScript for on-the-fly compilation. There also has been talk (#1780) of deprecating the --watch options and use separate tools to accomplish reruns. However people are relying on watch (#1780 (comment)).",geigerzaehler,CONTRIBUTOR,2019-05-13 19:12:59+00:00,False,,,,2,6,2019-05-14 06:41:24+00:00,0.48,juergba,MEMBER,1,1,0,0,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3913,"new Mocha(options) only honors options.globals, ignores options.global","Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
When create a Mocha instance programmatically, options.globals is honored, but options.global is ignored. This is contrary to the docs:

Updated in v6.0.0; the option is --global and --globals is now an alias.

Steps to Reproduce

Expected behavior: options.global or options.globals should be honored
Actual behavior: only options.globals is honored

Reduced test case here: https://github.com/pascalpp/mocha-globals-repro
Reproduces how often: [What percentage of the time does it reproduce?] 100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.4
The output of node --version: v10.15.1
Your operating system

name and version: Mac OS X Mojave
architecture (32 or 64-bit): 64-bit


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Your browser and version (if running browser tests): n/a
Any third-party Mocha-related modules (and their versions): none
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): none

Additional Information

See test case: https://github.com/pascalpp/mocha-globals-repro",pascalpp,CONTRIBUTOR,2019-05-13 21:42:39+00:00,True,2019-06-06 05:36:27+00:00,23.33,,2,0,,,,,0,0,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3916,Does the extending configuration feature work?,"Opening this as a question as I'm not yet sure whether it's a bug or a user error 😄
The docs on extending configuration state:

Configurations can inherit from other modules using the extends keyword

However, I've been unable to get this to work and I haven't been able to find any Mocha-specific examples leveraging extends. I've tried using extends both with a relative path to a json file, as well as with a module as referenced in the yargs docs linked from the Mocha docs, and I also tried the various Mocha config file formats (js, yaml, json, etc.) to define the Mocha config with the extends keyword, all to no avail.
I created a really simple repo here that reproduces this behavior:
ui should be set to tdd via the extends reference in the .mocharc.yml file, but running an npm test results in a reference error ReferenceError: suite is not defined leading me to believe that extends is not working since the ui is still set to the default bdd
Any help would be greatly appreciated!",calebcartwright,NONE,2019-05-14 23:41:45+00:00,False,,,,3,5,2019-05-16 16:18:01+00:00,1.69,juergba,MEMBER,1,0,0,1,"['confirmed-bug', 'help wanted']",False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3917,Crashes that happen after test completion are reported with success exit code,"Description
Sort of follow up to #3226 which was fixed but it seems not fully.
Steps to Reproduce


Install locall mocha v6.1.4


Createtest.js test file:


describe('test', () => {
  it('test', () => {
    setTimeout(() => {
      throw new Error('Unexpected crash');
    }, 10);
  });
});

Run npx mocha test.js

Output is valid:
$ npx mocha test.js

  test
    ✓ test


  1 passing (5ms)

/Users/medikoo/npm-packages/serverless/test.js:6
      throw new Error('Unexpected crash');
      ^

Error: Unexpected crash
    at Timeout._onTimeout (/Users/medikoo/npm-packages/serverless/test.js:6:13)
    at listOnTimeout (internal/timers.js:531:17)
    at processTimers (internal/timers.js:475:7)
But exit code is not:
$ echo $?
0
This makes such crashes not detected as fails in CI
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: v6.1.4
The output of node --version: v12.2.0
Your operating system:

name and version: macOS-10.14.4
architecture (32 or 64-bit): 64-bit",medikoo,NONE,2019-05-16 19:25:19+00:00,False,,,,2,7,2019-05-20 21:33:18+00:00,4.09,plroebuck,MEMBER,1,0,0,1,['async'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3920,Tests teardown is unnecessary delayed (creates unexpected states),"When running tests in Node.js, to avoid long stack traces, each next test run scheduled with setImmediate
In Node.js setImmediate is slower than process.nextTick (obviously) and setTimeout (not that obvious).
This creates undesired race conditions when in some specific scenarios e.g. forgotten return promise is not exposed with failure (which otherwise may happen)
Test case exposing unexpected state:
describe('test', () => {
  let foo;

  before(() => (foo = 'in test'));
  after(() => (foo = 'out of test'));

  it('test', () => {
    setTimeout(() => {
      if (foo === 'in test') throw new Error('Unexpected state');
    });
  });
});

macOS: 10.14.4
Node.js: v12.2.0
Mocha: v6.1.4",medikoo,NONE,2019-05-17 11:39:53+00:00,True,2019-05-22 07:04:25+00:00,4.81,,2,4,2019-05-22 06:27:52+00:00,4.78,plroebuck,MEMBER,1,0,0,1,"['async', 'unconfirmed-bug', 'wontfix']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3921,Stacktraces don't filter mocha when minified,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
When running tests in the browser, the stackTraceFilter removes lines containing mocha.js as designed. This fails when using a minified version (from cdnjs) of mocha, as mocha.min.js is not tested for.
Steps to Reproduce
Swap
<script src=""https://cdnjs.cloudflare.com/ajax/libs/mocha/6.1.4/mocha.js""></script>
to
<script src=""https://cdnjs.cloudflare.com/ajax/libs/mocha/6.1.4/mocha.min.js""></script>
in the default html template, and view the stacktrace for a failing test.
Expected behavior: mocha is remove from the stack
Actual behavior: mocha exists (loudly) in the stack

Reproduces how often: 100%
Versions


6.1.4

Additional Information

I have a fix prepared. It can be corrected with a one line addition to isMochaInternal with || ~line.indexOf(slash + 'mocha.min.js'). PR should be forth coming.
Pen - Existing Behavior and Pen - Post Fix",brian-lagerman,CONTRIBUTOR,2019-05-17 13:18:02+00:00,True,2019-06-03 13:50:06+00:00,17.02,,2,0,,,,,0,0,0,0,"['browser', 'integration']",False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3923,Can we get a mention in the docs somewhere for @testdeck/mocha?,"Question
We have created a wrapper for existing test frameworks, including also mocha.
Please see https://github.com/testdeck/testdeck and also https://github.com/testdeck/testdeck-mocha-seed for a working minimal setup.
Perhaps you can give us a little boost by mentioning the project in your official documentation?
TIA!",silkentrance,NONE,2019-05-17 19:46:50+00:00,True,2019-05-19 11:48:53+00:00,1.67,,2,2,2019-05-19 11:34:22+00:00,1.66,juergba,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3924,Pass object to error,,Chris-Eckersley,NONE,2019-05-18 15:07:53+00:00,True,2019-05-18 17:52:51+00:00,0.11,,2,1,2019-05-18 17:52:51+00:00,0.11,craigtaub,MEMBER,1,0,0,0,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3925,Pass meta,,Chris-Eckersley,NONE,2019-05-18 15:09:03+00:00,True,2019-05-22 08:07:43+00:00,3.71,,4,3,2019-05-18 15:14:00+00:00,0.0,Chris-Eckersley,NONE,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3926,Testing interpreter written in JavaScript,"My question is this, can I use mocha to test something like this:
test.js
const fs = require('fs');

fs.readFile('test.test', (err, data) => {
  // this is just example in my real code I'm testing interpreter library
  // that have access to JavaScript so it can call describe and it functions
  eval(data.toString()); 
});
where my test.test have this code:
test.test
console.log('1');

var assert = require('assert');

describe('xxx', function() {
   console.log('2');
   it('xxx', function() {
      console.log('3');
      assert.equal([1, 2, 3].indexOf(4), -1);
   });
});
When I run
mocha test.js
I've got
1
2

no 3 and 0 test passing (it is not executed)
One additional thing is that in my library lips.exec I use instead of eval return a promise. Can I use mocha with something like this?",jcubic,NONE,2019-05-20 07:25:54+00:00,True,2019-05-20 21:19:03+00:00,0.58,,2,4,2019-05-20 21:19:03+00:00,0.58,plroebuck,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3928,Adding data to the Error object,"Hello all- awesome code base to read!
Is there a way I can append to the error object from within an it block?
Thank you!",Chris-Eckersley,NONE,2019-05-20 17:14:28+00:00,True,2019-05-20 19:16:24+00:00,0.08,,3,6,2019-05-20 17:40:17+00:00,0.02,Chris-Eckersley,NONE,2,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3932,Why does describe.skip still execute code in the suite?,"In a test file I have code similar to this:
describe.skip( ""skip this"", () => {
	throw new Error( ""was executed anyway"" );
} );
I expected that describe.skip skips executing the entire suite, but it only skips executing tests declared in it. Is that by-design? I feel like the documentation is unclear about this.",oliversalzburg,NONE,2019-05-24 12:34:52+00:00,False,,,,3,7,2019-05-25 06:27:21+00:00,0.74,juergba,MEMBER,2,0,0,1,"['documentation', 'question']",False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3933,Mocha constructor creates duplicate entries in mocha.globals,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description


When creating a mocha instance with options.globals, duplicate globals are created in mocha.options.globals.
When adding globals on an existing mocha instance, more duplicates are created.

Steps to Reproduce

const Mocha = require('./lib/mocha')

// create a mocha instance with options.globals
const mocha = new Mocha({ globals: ['foo', 'bar'] })

// duplicate entries are created
console.log(mocha.options.globals)
// [ 'foo', 'bar', 'foo', 'bar' ]

// call mocha.globals with the same global entries
mocha.globals(['foo', 'bar'])

// more duplicate entries are created
console.log(mocha.options.globals)
// [ 'foo', 'bar', 'foo', 'bar', 'foo', 'bar' ]

Expected behavior: [What you expect to happen]
mocha.options.globals should only contain unique entries.
Actual behavior: [What actually happens]

mocha.options.globals contains duplicate entries.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.4
The output of node --version: 10.15.3
Your operating system

name and version: Mac OS X Mojave
architecture (32 or 64-bit): 64bit


Your shell (e.g., bash, zsh, PowerShell, cmd): bash
Your browser and version (if running browser tests): n/a
Any third-party Mocha-related modules (and their versions): n/a
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): n/a

Additional Information

c.f. discussion on #3914",pascalpp,CONTRIBUTOR,2019-05-28 16:22:34+00:00,True,2019-05-29 00:46:40+00:00,0.35,,1,1,2019-05-29 00:46:40+00:00,0.35,pascalpp,CONTRIBUTOR,0,1,0,0,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3935,Specify setup/teardown for each test individually,"Is your feature request related to a problem or a nice-to-have?? Please describe.
Currently, we can:

Define a setup/teardown for a describe block by using before/after.
Define a setup/teardown for all it blocks by using beforeEach/afterEach.

There is no way to define a setup/teardown for one it block.
As a workaround, I'm putting the setup code inside the it block. Downside:

The setup code is mixed with the calculation.
The setup time is also counted in the timing.

Describe the solution you'd like
Some proposals:

Make it accept more arguments to define setup/teardown:
it(
  ""my test"",
  () => {
    // setup
  },
  () => {
    // test
  },
  () => {
    // teardown
  }
);
// look better with an option object
it({
  name: ""my test"",
  setup() {
    // ...
  },
  test() {
    // ...
  },
  teardown() {
    // ...
  }
});

Add new block (or reuse before, after) inside it:
it(""my test"", () => {
  itBefore(() => {
    // ...
  });
  // test
  itAfter(() => {
    // ...
  });
});

Allows the test to emit an event to indicate the current phase:
it(""my test"", function () {
  this.section(""setup"");
  // ...
  
  this.section(""test"");
  // ...
  
  this.section(""teardown"");
  // ...
});


Describe alternatives you've considered
Additional context
This should be handy for dynamically-generated tests since they often have to read some data from the disk before running the actual test.",eight04,NONE,2019-05-29 03:56:14+00:00,False,,,,3,4,2019-06-02 10:38:32+00:00,4.28,plroebuck,MEMBER,2,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3936,Crash or issue warnings on invalid config parameters,"By mistake I've setup a configuration in package.json as:
  ""mocha"": {
    ""-R"": ""tests/mocha-reporter""
  }
Mocha didn't say the word, and ignored an invalid option (it should be R instead of -R).
It'll be great if Mocha produces some feedback on such errors, so they do not come unnoticed.
Node.js v12.3.1
Mocha: v6.1.4",medikoo,NONE,2019-05-29 10:51:55+00:00,False,,,,3,14,2019-05-31 20:04:19+00:00,2.38,Alhadis,CONTRIBUTOR,1,1,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3938,Uncaught exceptions are silenced if happen in timeframe of skipped test,"Possibly related to #3740
Steps to Reproduce
describe('test', () => {
  it('test1', () => {
    setTimeout(() => {
      throw new Error('Uncaught');
    }, 3);
  });
  it('test2', function () {
    this.skip();
  });
  it('test3', function () {
    this.skip();
  });
  it('test4', function () {
    this.skip();
  });
});
Expected behavior:
Tests should fail unconditionally
Actual behavior:
In most cases suite passes (there is a race condition,due to which occasionally error gets exposed)
Versions
mocha:  6.1.4
Node.js: 12.3.1
macOS: 10.14.5",medikoo,NONE,2019-06-04 13:48:40+00:00,False,,,,3,9,2019-06-05 08:15:11+00:00,0.77,plroebuck,MEMBER,2,0,0,1,"['async', 'unconfirmed-bug']",False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False
3941,No test files found even though one specified with --file,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
If mocha doesn't find any test files, it returns a No test files found error. This appears to happen even if --file is specified.
Steps to Reproduce
mocha --file foo.js --exclude '**/*.js'
Per the docs, ""Files specified using --file are not affected"" by --exclude, so this should work.
Expected behavior: foo.js is loaded
Actual behavior: No test files found error

Reproduces how often: 100%
Versions

The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.4
The output of node --version: v8.15.1
Your operating system

name and version: macOS
architecture (32 or 64-bit): 64bit


Your shell (e.g., bash, zsh, PowerShell, cmd): zsh
Your browser and version (if running browser tests): n/a
Any third-party Mocha-related modules (and their versions): none
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): none

Additional Information
Use case for this is to run only a given set of files and override any ""default"" files loaded via positional arguments. For example, mocha --file test/foo.js --exclude '**/*.js' 'test/**/*.js'
would only run test/foo.js.",gabegorelick,CONTRIBUTOR,2019-06-05 19:38:34+00:00,True,2019-06-27 08:11:24+00:00,21.52,,2,2,2019-06-05 21:25:25+00:00,0.07,gabegorelick,CONTRIBUTOR,1,1,0,0,['confirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3943,migrate to codecov from coveralls?,"I like the output codecov.io gives in its integration.
Example:

The graphical stuff is kind of useless, but it provides good contextual information otherwise.
@mochajs/core anyone have an opinion on this?",boneskull,MEMBER,2019-06-05 22:26:35+00:00,False,,,,2,1,2019-06-06 17:42:01+00:00,0.8,craigtaub,MEMBER,1,0,0,0,"['chore', 'good-first-issue']",True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3946,[feature] introduce subtests,"Is your feature request related to a problem or a nice-to-have?? Please describe.
I often run into the decision between writing short tests with a lot of boilerplate and larger tests where its hard to describe which part specifically failed.
Consider the following scenario:
descibe('some tests', () => {
  it('test1', () => {
    const someObject1 = fromSomeCall()
    expect(someObject1).to.matchSnapshot()
  })
  it 'test2', () => {
    const someObject2 = fromSomeOtherCall()
    expect(someObject2).to.matchSnapshot()
  })
})
this is good because I can test these two calls individually, if one fails I know exactly what went wrong based on the test names. However, if I want to test that these two objects are in fact equal, then I can rewrite the test like so:
descibe('some tests', () => {
  it('test1', () => {
    const someObject1 = fromSomeCall()
    expect(someObject1).to.matchSnapshot()
    const someObject2 = fromSomeOtherCall()
    expect(someObject2).to.deep.equal(someObject1)
  })
})
however, now if this test fails it is harder to tell exactly what went wrong.
Describe the solution you'd like
I would like to see the idea of subtests in pytest or node-tap. In mocha, we like the idea of completely independent tests, this is great because we can run one test and iterate quickly. However, I still think there is value to be added in adding more metadata to individual tests. What I am proposing is creating sub sections in a test that cannot be ran separately, the whole test still needs to be ran, but now we have more information on where a test failed.
Here is the syntax I imagine:
descibe('some tests', () => {
  it('test1', () => {
    const someObject1 = subtest('test fromSomeCall result', () => {
      const someObject1 = fromSomeCall()
      expect(someObject1).to.matchSnapshot()
      return someObject1
    })
    subtest('test fromSomeOtherCall result matches fromSomeCall', () => {
      const someObject2 = fromSomeOtherCall()
      expect(someObject2).to.deep.equal(someObject1)
    })
  })
})
Describe alternatives you've considered
currently I just use plenty of comments in my tests, but that information isnt immediately useful when reading test failures on CI and doesnt necessarily section out tests well. The other other alternative I already described, which is simply breaking up tests further, but this means its harder to combine testing different but related pieces of code without writing more overlapping tests.",andykais,NONE,2019-06-06 18:09:45+00:00,False,,,,1,1,2019-06-06 18:27:57+00:00,0.01,andykais,NONE,0,0,0,1,['feature'],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
3949,fix: mocha grep RegExp instance,"On creating an instance of RegExp if the given value is string the regex-like extraction is not correct:
Mocha.prototype.grep = function(re) {
  if (utils.isString(re)) {
    // extract args if it's regex-like, i.e: [string, pattern, flag]
    var arg = re.match(/^\/(.*)\/(g|i|)$|.*/);
    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);
  } else {
    this.options.grep = re;
  }
  return this;
};
Base on /^\/(.*)\/(g|i|)$|.*/ if re is regex-like the pattern will be stored in arg[1] and flags will be stored in arg[2] otherwise the whole string is stored in arg[0]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp:
new RegExp(pattern[, flags])
Regex should be called like this if re is regex-like:
new RegExp(arg[1], arg[2])
Or like this if re is a normal string:
new RegExp(arg[0])",mrastiak,NONE,2019-06-10 14:07:25+00:00,True,2019-07-02 08:20:29+00:00,21.76,,1,0,,,,,0,0,0,0,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3951,regression bug: command line reporter-options parameter doesn't override mocha.opts,"Prerequisites

 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Mocha doesn't override reporter-options value defined in mocha.opts with the one defined on command line.
Steps to Reproduce

Define a mocha.ops file with reporter-options:

--recursive
--reporter=xunit
--reporter-options output=./test-reports/junit.xml


Call mocha using a different value for reporter-option

node node_modules/mocha/bin/mocha --reporter-options output=./test-reports/unit.xml


Verify that mocha has created ./test-reports/junit.xml and not  ./test-reports/unit.xml

Expected behavior: [What you expect to happen]
Mocha should use the reporter-options specified on the command-line instead of the one defined in mocha.opts.
Actual behavior: [What actually happens]
Mocha use the reporter-options defined in mocha.opts instead of the one specified on the command-line.
Reproduces how often: [What percentage of the time does it reproduce?]
100%
Versions

mocha:  6.0.0-6.1.4  (works fine with version 5.2.0)  -- mocha is not installed globally
node: 8.14.1 / 10.15.3 / 12.4.0
Your operating system

name and version: windows 10 1903 / debian stretch
architecture (32 or 64-bit): 64bit


Your shell (e.g., bash, zsh, PowerShell, cmd): PowerShell / bash",stalb,NONE,2019-06-11 23:02:20+00:00,False,,,,2,3,2019-06-12 11:32:05+00:00,0.52,juergba,MEMBER,1,0,0,1,"['confirmed-bug', 'node.js', 'semver-patch']",False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3954,Mocha exits after await method call,"I have a file with test cases of an async function and a normal function. Issue is if i inovke the async function with an ""await"" call,  mocha exits without executing rest of my test cases.
The async method being test ( part of my AWS lambda code).
async function createIncident(request) {
  AWS.config.setPromisesDependency(require(""bluebird""));
  let ddbClient = new AWS.DynamoDB.DocumentClient({
    endpoint: process.env.DB_ENDPOINT,
    region: ""us-east-1"",
  });

  let appid = request.headers[""appid""];
  
  if (!appid) {
    console.log(`Invalid Appid : ${appid}. Request rejected.`)
    let statsParams = service.createStatsParams(uuid, appid, 503, ""AppId not valid"", ""-"");
    await ddbClient.put(statsParams).promise();
    return makeResponse(uuid, 401, ""AppId not valid"");
}

My mochajs test file
let services = require(""../../src/services.js"");
let mainFile = require(""../../src/main.js"");

describe(""createIncident"", function () {
  this.enableTimeouts(false)
  let request = {};
  let insertSpy = sinon.spy();
  let mockStatsParms = mockStatsParams();
  beforeEach(() => {
    AWS.mock('DynamoDB.DocumentClient', 'put', insertSpy);
    sinon.stub(services,""createStatsParams"").callsFake(mockStatsParams);
  })

  it(""should return error for missing appid"", async function() {
    request.headers = {};
    try{
    let response = await mainFile.createIncident(request);
    let body = JSON.parse(response.body);
    expect(insertSpy.calledOnce).to.be.true;
    expect(insertSpy.calledWith(mockStatsParms)).to.be.true;
    expect(response.statusCode).to.equal(401);
    }
    catch(e){
      console.log(e);
    }
  });
})

describe(""makeSuccessResponse"", function() {
  let mockResponseObj  = {};
  beforeEach(function() {
    mockResponseObj  = createMockResponseObj();
  })

  it(""Should return the successful response"", function() {
    expect(mainFile.makeSuccessResponse).to.be.a('function');
    let response = mainFile.makeSuccessResponse( );
     let body = JSON.parse(response.body);
    expect(response.statusCode).to.equal(201);
  });
});

Mocha exits after the completing the await method call in the first test case. The assertions  below that is not executed, nor the second test case is executed.
If i remove the await call, i get a promise back, but now all assertions and remaining test cases are run.
Running mocha version 6.1.4
In nodejs, with version 12.4.0
Expectation
Mocha should wait for the completion of the await call, then execute the rest of the test suite.",shabin5785,NONE,2019-06-21 04:25:33+00:00,True,2019-06-21 05:19:11+00:00,0.04,,1,1,2019-06-21 05:19:11+00:00,0.04,shabin5785,NONE,0,0,0,1,[],False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3958,Mocha 4 security issue,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label

Description
There's a security issue with diff 3.3.1 that Mocha 4 is using: https://github.com/microsoft/vscode-extension-vscode/network/alert/yarn.lock/diff/open
This affects vscode package which is depended by almost all VS Code extensions.
I suggest simply updating diff to 3.5.0 and make a release 4.1.1.
Do you still ship security fixes to 4.x? If so I can prepare a PR.
If not I'd likely have to fork, but I would avoid forking if possible. Thanks!",octref,NONE,2019-06-24 17:30:32+00:00,True,2019-06-25 14:06:32+00:00,0.86,,2,2,2019-06-25 12:00:27+00:00,0.77,juergba,MEMBER,1,0,0,1,['question'],False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3959,async await execution crash no error reported,"Prerequisites


 Checked that your issue hasn't already been filed by cross-referencing issues with the faq label
 Checked next-gen ES issues and syntax problems by using the same environment and/or transpiler configuration without Mocha to ensure it isn't just a feature that actually isn't supported in the environment in question or a bug in your code.
 'Smoke tested' the code to be tested by running it outside the real test suite to get a better sense of whether the problem is in the code under test, your usage of Mocha, or Mocha itself
 Ensured that there is no discrepancy between the locally and globally installed versions of Mocha. You can find them with: node node_modules/.bin/mocha --version(Local) and mocha --version(Global). We recommend that you not install Mocha globally.

Description
Looks like the promise never return an execution stop.
let id;
let title;
before(async function (done) {
	const book = new Book({ title: 'Book for Testing' });
	const bookSaved = await book
		.save()
		.catch(err => console.log(err));

	console.log(bookSaved);
	id = bookSaved._id;
	title = bookSaved.title;
	done();
});

console.log(bookSaved) is never called. After the timeout I get
Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves. (C:\Users\adrian\Code\portfolio-next-koa\routes\api\test\libraryRoute.spec.js)

Steps to Reproduce
running mocha

Expected behavior: Create a document in MongoDb for testing
Actual behavior:

Reproduces how often: [What percentage of the time does it reproduce?]
Versions


The output of mocha --version and node node_modules/.bin/mocha --version: 6.1.4
The output of node --version: v10.16.0
Your operating system

name and version: Windows 8.1
architecture (32 or 64-bit): 64 bits


Your shell (e.g., bash, zsh, PowerShell, cmd): cmd
Your browser and version (if running browser tests): Only server test
Any third-party Mocha-related modules (and their versions): No
Any code transpiler (e.g., TypeScript, CoffeeScript, Babel) being used (and its version): No

Additional Information",adrianwix,NONE,2019-06-25 11:25:39+00:00,True,2019-06-25 11:43:46+00:00,0.01,,1,1,2019-06-25 11:43:46+00:00,0.01,adrianwix,NONE,0,0,0,1,['unconfirmed-bug'],False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
