[{"repo_name": "jasmine/jasmine", "issue_id": 1, "url": "https://github.com/jasmine/jasmine/issues/1", "title": "geminstaller doesn't work", "contents": "geminstaller still points to github for gems.  I'm not sure if all these gems are on gemcutter.  I can't find jsdoc-helper.  I admittedly stopped there.  Can we get this working?  I'm going to try to build all these gems by hand, but some people on the team are not going to be keen on doing that.", "createdAt": "2009-12-17T04:02:52Z", "updatedAt": "2010-01-24T15:16:06Z", "closedAt": "2009-12-24T05:31:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adkron", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "adkron", "company": "Binary Noggin"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-12-23T15:51:18Z", "contents": "Amos:\nThanks for your notes! Some of these gems are only on github, which may be the problem -- ragaskar-jsdoc_helper is definitely NOT on gemcutter (and we should probably go back to using the main branch of that gem anyways).\nI'm curious about how you are using jasmine; the geminstaller in root is going to dump a bunch of gems into your project that are really only useful for jasmine development. The geminstaller in examples/ruby/ will install just the gems you need to run the server and the ci tasks.\nIf you just care about running tests you might also look at jasmine-ruby, at http://github.com/ragaskar/jasmine-ruby (version 0.2 of the gem is in on gemcutter)... It wraps up all the contrib stuff into a nice little package. However, it's super early in development, documentation is still sparse and I have to warn you that there is one major directory change coming (hopefully I'll get to it this week) -- the jasmine_helper.rb file will move from helpers/ to a support/ directory ....", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-12-24T05:30:51Z", "contents": "geminstaller should work without having to use github gems with the latest HEAD.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2009-12-24T05:31:07Z", "contents": "closing, i guess?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adkron", "authorAssociation": "NONE", "createdAt": "2010-01-24T15:16:06Z", "contents": "I ended up pulling the js out of jasmine and I'm using that as a unit testing framework for some jquery plugins in my current project.  Don't know i you can close.  I will try again soon and let our know what happens.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 2, "url": "https://github.com/jasmine/jasmine/issues/2", "title": "documentation of 'not' in matchers", "contents": "Documentation incorrect:\nExpectation Matchers\nJasmine has several built-in matchers.  Here are a few:\n...\nwrong\nEvery matcher's criteria can be inverted by prepending .not:\nexpect(x).not.toEqual(y); compares objects or primitives x and y and passes if they are not equivalent\nright?\nEvery matcher's criteria can be inverted by inserting Not in the matcher function name after to:\nexpect(x).toNotEqual(y); compares objects or primitives x and y and passes if they are not equivalent", "createdAt": "2010-03-06T19:29:02Z", "updatedAt": "2010-03-15T20:28:33Z", "closedAt": "2010-03-15T20:28:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mc2", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mc2", "company": null}, {"login": "xian", "company": "@google"}], "comments_count": 1, "comments_data": [{"authorLogin": "xian", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-03-15T20:28:33Z", "contents": "Jasmine edge actually has the expect(x).not.toEqual(y) syntax; the old syntax is still supported.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 3, "url": "https://github.com/jasmine/jasmine/issues/3", "title": "Wrong script reference in example_runner.html  in 0.10.3-release", "contents": "There is a minor error in\nexamples/html/example_runner.html\n<script type=\"text/javascript\" src=\"../../lib/jasmine-0.10.1.js\"></script>\nShould be\n<script type=\"text/javascript\" src=\"../../lib/jasmine-0.10.3.js\"></script>", "createdAt": "2010-04-11T18:32:29Z", "updatedAt": "2010-07-09T21:56:29Z", "closedAt": "2010-07-09T21:56:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rslijp", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rslijp", "company": "SoftCause"}, {"login": "jfirebaugh", "company": "@figma "}, {"login": "xian", "company": "@google"}], "comments_count": 2, "comments_data": [{"authorLogin": "jfirebaugh", "authorAssociation": "NONE", "createdAt": "2010-04-12T18:58:35Z", "contents": "Yeah, 'rake build' should probably update that automatically.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xian", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-07-09T21:56:28Z", "contents": "Fixed in 0.11.x.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 4, "url": "https://github.com/jasmine/jasmine/issues/4", "title": "describe(<non-string>, ...) causes cryptic errors", "contents": "describe(String, function() {\n  ...\n});\n\nThe first argument to describe should be converted to a string in a useful way, a la rspec. In particular it would be useful to pass constructor functions and have them read as a type name.", "createdAt": "2010-05-07T00:10:18Z", "updatedAt": "2011-06-19T03:32:37Z", "closedAt": "2011-06-19T03:32:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jfirebaugh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jfirebaugh", "company": "@figma "}, {"login": "pivotal-legacy", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-08-07T17:39:25Z", "contents": "We're concerned about cross-environment support for this feature.  But we'll consider it. You're not the only one who's asked.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jfirebaugh", "authorAssociation": "NONE", "createdAt": "2010-08-07T18:00:42Z", "contents": "If nothing else it could help improve your tagline! :)\ndescribe(jasmine, function () {\n  it(\"makes testing JavaScript fun\", function () {\n    expect(\"your code\").toBeGreaterThan(\"ever before\");\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-08-07T19:02:36Z", "contents": "Discussion is here: http://groups.google.com/group/jasmine-js-dev/browse_thread/thread/217b9f5939358316", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:32:37Z", "contents": "We've gotten another pull request for this. So I'm closing this one and we'll track it with the new pull request: #98", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 5, "url": "https://github.com/jasmine/jasmine/issues/5", "title": "Backtrace for errors", "contents": "Hi,\nwhen an exception is thrown (and not caught), jasmine caught it and marks the spec as failed. It's the expected behaviour, but the backtrace is lost and it can be difficult to fix the spec.", "createdAt": "2010-05-10T14:08:32Z", "updatedAt": "2011-06-19T03:33:27Z", "closedAt": "2011-06-19T03:33:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nono", "authorAssociation": "NONE", "participants_count": 13, "participants_data": [{"login": "nono", "company": "Cozy Cloud"}, {"login": "eahanson", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "cowboyd", "company": "The Frontside @thefrontside "}, {"login": "elight", "company": "Heroku"}, {"login": "trungpham", "company": null}, {"login": "danielribeiro", "company": null}, {"login": "d2kagw", "company": "Lexer"}, {"login": "rhunter", "company": null}, {"login": "Stanley", "company": null}, {"login": "gerad", "company": "Suyderhoud, LLC"}, {"login": "huned", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 14, "comments_data": [{"authorLogin": "eahanson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-05-10T14:24:47Z", "contents": "Stacktraces are available in Firefox, I think. What browser are you using?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nono", "authorAssociation": "NONE", "createdAt": "2010-05-10T14:38:12Z", "contents": "Not a browser ;-)\nI'm using node.js with jasmine-node.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nono", "authorAssociation": "NONE", "createdAt": "2010-05-19T09:46:25Z", "contents": "To be more clear: there is a backtrace, but only lines in jasmine, not on my own code. I've temporary hacked this but adding these lines to jasmine.util.formatException:\nif (e.stack) {\n    message += \"\\n\" + e.stack + \"\\n\";\n}\n\nI'm not sure if Error.stack is portable or if there is a better way to do that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-06-05T14:34:50Z", "contents": "this seems like a reasonable solution. i'm going to do a node.js pass soon (i hope!) and will try to include this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboyd", "authorAssociation": "NONE", "createdAt": "2010-06-05T15:28:13Z", "contents": "+1 I'm running into this with the ruby racer (also v8)\nThe basic problem is that it throws away the original error, which has the original stack. At the very least, it should store a reference to actual error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elight", "authorAssociation": "NONE", "createdAt": "2010-09-06T16:13:35Z", "contents": "Ah so stacktraces do not work correctly in Chrome?  I'm seeing http://gist.github.com/567174", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trungpham", "authorAssociation": "NONE", "createdAt": "2010-09-24T02:51:39Z", "contents": "yeah, how the heck do i trace back to the exact line?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielribeiro", "authorAssociation": "NONE", "createdAt": "2010-10-07T03:43:04Z", "contents": "This is such a big issue. Along with builtin node.js support on latest version (for headless testing) it would make jasmine a much nicer framework. Regarding @nono's suggestion, I prefered changing removing the catch block on jasmine.Block.prototype.execute. This way, when testing on a browser like Chrome, it gives the correct line (and with a click you can go there and set a breakpoint). Node also reports better (only a line, but works on other types of exception, not only Error)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "d2kagw", "authorAssociation": "NONE", "createdAt": "2010-11-13T20:10:40Z", "contents": "+1 for having issues on Chrome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rhunter", "authorAssociation": "NONE", "createdAt": "2010-12-27T16:27:12Z", "contents": "I've submitted a pull request which keeps the errors around nicely: #39\n... from the pull request ...\nI've been using Jasmine with Node and CoffeeScript, and I've really wanted to see where my errors are.\nWith this change, any error raised by a Spec is kept and attached to the ExpectationResult. This changes the output dramatically. Compare the following two stack traces:\nWith this change:\n  TypeError: number is not a function\n    at Number.CALL_NON_FUNCTION (native)\n    at Simulation.begin (lib/queuing-simulation.coffee:22:25)\n    at [object Object].<anonymous> (spec/simulation_integration_spec.coffee:18:22)\n    at [object Object].execute (vendor/jasmine/jasmine.js:972:15)\n    at [object Object].next_ (vendor/jasmine/jasmine.js:1743:31)\n    at [object Object].start (vendor/jasmine/jasmine.js:1696:8)\n    at [object Object].execute (vendor/jasmine/jasmine.js:2023:14)\n    at [object Object].next_ (vendor/jasmine/jasmine.js:1743:31)\n    at [object Object].start (vendor/jasmine/jasmine.js:1696:8)\n    at [object Object].execute (vendor/jasmine/jasmine.js:2168:14)\n\nBefore this change\n  Error: TypeError: number is not a function\n    at new <anonymous> (vendor/jasmine/jasmine.js:94:36)\n    at [object Object].fail (vendor/jasmine/jasmine.js:1963:27)\n    at [object Object].execute (vendor/jasmine/jasmine.js:970:15)\n    at [object Object].next_ (vendor/jasmine/jasmine.js:1739:31)\n    at [object Object].start (vendor/jasmine/jasmine.js:1692:8)\n    at [object Object].execute (vendor/jasmine/jasmine.js:2018:14)\n    at [object Object].next_ (vendor/jasmine/jasmine.js:1739:31)\n    at [object Object].start (vendor/jasmine/jasmine.js:1692:8)\n    at [object Object].execute (vendor/jasmine/jasmine.js:2163:14)\n    at [object Object].next_ (vendor/jasmine/jasmine.js:1739:31)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Stanley", "authorAssociation": "NONE", "createdAt": "2011-01-20T18:43:46Z", "contents": "Thanks rhunter!\n+1 for pulling.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gerad", "authorAssociation": "NONE", "createdAt": "2011-02-02T00:22:32Z", "contents": "+1 any reason this isn't merged in?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "huned", "authorAssociation": "NONE", "createdAt": "2011-02-04T22:36:40Z", "contents": "+1 we like useful stack traces :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:33:27Z", "contents": "Closing. Stack traces are now better in master and will be part of 1.1.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 6, "url": "https://github.com/jasmine/jasmine/issues/6", "title": "Rhino?", "contents": "One of your stated reasons for writing jasmine was that 'some frameworks require a browser'... can jasmine be run just w/ rhino?\nthanks", "createdAt": "2010-05-10T18:00:54Z", "updatedAt": "2010-10-04T00:34:44Z", "closedAt": "2010-08-08T00:42:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jaredly", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jaredly", "company": "Khan Academy"}, {"login": "pivotal-legacy", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-08-07T17:42:24Z", "contents": "Jasmine can be run with Rhino. Check out this post to the mailing list:\nhttp://groups.google.com/group/jasmine-js/browse_thread/thread/51cf22bb1e38c7f4", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-08-07T17:42:39Z", "contents": "(closing)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 7, "url": "https://github.com/jasmine/jasmine/issues/7", "title": "jasmine assumes existence of global window object", "contents": "I understand that one of the design goals of jasmine is to be host agnostic. However, evaluating it in a bare javascript interpreter yields the following error:\nReferenceError: window is not defined: jasmine-0.10.3.js:49\nYou may want to detect if window exists before remapping its functions.\ncheers,\nCharles", "createdAt": "2010-06-02T12:38:54Z", "updatedAt": "2010-06-22T23:25:44Z", "closedAt": "2010-06-22T23:25:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cowboyd", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cowboyd", "company": "The Frontside @thefrontside "}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "pivotal-legacy", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-06-02T12:45:21Z", "contents": "Charles:\nThanks for your note! This is a known issue with jasmine; it has started cropping up more and more as people have been using it with node.js. I haven't had an opportunity to fix it yet, but it's on the list. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-06-22T23:25:44Z", "contents": "This is now fixed on master! Thanks Charles!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 8, "url": "https://github.com/jasmine/jasmine/issues/8", "title": "spec counting and reporting is inconsistent.", "contents": "describe(\"The Runner\", function() {\nit(\"does not count a spec in the totalCount if there are no expectations (even though it does run)\", function() {\n})\nit(\"does not have a count of skippped specs (it reports it as a pass)\")\nit(\"does not treat an it() statement without a body as a skip/pending (but reports a pass result)\")\nxit(\"does not report a result at all for skipped specs\")\n})\n. . .\n0 examples, 0 failures.\nThis should read\n.---\n4 examples, 0 failures, 3 pending.\nI think a more consistent approach is to always report a result result for a spec whether it has expectations or not, and whether it was skipped or not. It's up to the view to decide how/if it wants to render it.\nAlso, I think that it() without a body should call xit() and behave just like", "createdAt": "2010-06-04T10:02:31Z", "updatedAt": "2013-07-17T22:59:23Z", "closedAt": "2011-01-26T20:41:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cowboyd", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "cowboyd", "company": "The Frontside @thefrontside "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "mourner", "company": "Mapbox"}, {"login": "geekdave", "company": "@dnanexus"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-08-07T17:44:55Z", "contents": "Looks like you got cut off there.\nProper pending specs are on the roadmap. But are specs with no expectations pending? xit specs should be counted as skipped today, we're just not reporting them properly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cowboyd", "authorAssociation": "NONE", "createdAt": "2010-08-08T03:36:41Z", "contents": "That's how rspec does it, and I tend to agree with it. Usually, when developing, as I think of cases, I'll just jot down the spec for them without actually implementing it. It's nice when they show up in the report so that I know about how much work I have left.\nPerhaps there is a third state like \"unimplemented?\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-26T20:41:20Z", "contents": "Understood. I think pending will fix this. It's a feature request that's in our backlog, so I'm going to close this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mourner", "authorAssociation": "NONE", "createdAt": "2011-07-12T09:00:54Z", "contents": "@infews waiting for pending specs in Jasmine for ages :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geekdave", "authorAssociation": "NONE", "createdAt": "2013-07-17T22:45:59Z", "contents": "Bump! Any chance this is coming in 2.0? :)\nThis feature is very useful in QUnit, since it allows a QA team and a dev team to agree on a common interface of test expectations at the start of a development cycle.\nSince unimplemented tests fail with a specific \"Not Implemented\" error, this allows build scripts to flag these tests as warnings--but not errors--allowing checkins to proceed. Developers can then \"chip away\" at these tests as they implement code.\nThis feature also helps to make code coverage reports more meaningful. To improve code coverage, developers will sometimes \"cheat\" by adding just enough test code to make their production code run even though they haven't covered all needed cases. Then since the code coverage tool is happy, it's hard to figure out where the test gaps are. Having a feature like this allows dev teams to require a complete and meaningful \"test skeleton\" to be checked in first, showing all the test cases that eventually should be implemented (even if the developer doesn't have time to implement them all in one big bang).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-17T22:54:48Z", "contents": "Pending is on master as we speak. Give it a try.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geekdave", "authorAssociation": "NONE", "createdAt": "2013-07-17T22:59:23Z", "contents": "Thanks, @infews!  Did not know what to call this feature, so it was hard to search for it. :)\nFor anyone who winds up in this thread the same way I did, check out issue #395 for more info on pending specs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 9, "url": "https://github.com/jasmine/jasmine/issues/9", "title": "Rails 3 support?", "contents": "Does jasmine currently support rails 3?  When I try and run 'rails generate jasmine' I get the error of:\nCould not find generator jasmine.\nAny help is greatly appreciated.", "createdAt": "2010-06-15T20:18:49Z", "updatedAt": "2011-01-26T20:41:54Z", "closedAt": "2011-01-26T20:41:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jstreb", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jstreb", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "bbhoss", "company": "Cityblock"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-06-16T13:34:45Z", "contents": "I believe the way generators work has changed in Rails 3, so the jasmine script/generate will not work. I don't see any reason why jasmine itself wouldn't work correctly with rails 3, as long as the directory structure with regards to tasks is the same (Jasmine has minimal integrations with Rails itself). You should be able to install it using \"jasmine init\" instead of script/generate jasmine ....\nI haven't done any Jasmine testing with Rails 3, however, and probably won't for a bit. If you find you need changes, feel free to let us know/submit a patch.\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bbhoss", "authorAssociation": "NONE", "createdAt": "2010-12-16T05:23:35Z", "contents": "Where are the generators actually located.  I have patched this before and it is simple, but they are eluding me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-26T19:18:43Z", "contents": "If you pull from master and build the gem locally (new build coming to Rubygems soon) the generators should be visible - Rails 2 & Rails 3", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-26T20:41:54Z", "contents": "Closing this as it's implemented.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 10, "url": "https://github.com/jasmine/jasmine/issues/10", "title": "WaitsForBlock sometimes doesn't", "contents": "My tests are hanging when I use waitsFor.\nHere's a failing test you can add to WaitsForBlockSpec.js, under describe(\"if latchFunction returns false\":\nit('spec should fail with the passed message', function () {\n  spyOn(spec, 'fail');\n  var block = new jasmine.WaitsForBlock(env, 100, function() {return false}, message, spec);\n  block.execute(onComplete);\n  waits(150)\n  expect(spec.fail).toHaveBeenCalled();\n  var failMessage = spec.fail.mostRecentCall.args[0].message;\n  expect(failMessage).toMatch(message);\n  expect(onComplete).wasNotCalled();\n});", "createdAt": "2010-07-09T02:15:08Z", "updatedAt": "2010-07-13T03:52:08Z", "closedAt": "2010-07-13T03:52:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rhunter", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rhunter", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-07-09T03:04:57Z", "contents": "Can you send an example from your own suite that doesn't work?  This code isn't setup properly to test Jasmine's internals.\nthx,\n--dwf", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rhunter", "authorAssociation": "NONE", "createdAt": "2010-07-13T03:52:07Z", "contents": "Actually, it looks like a script error was causing all scripts to stop being evaluated.\nThanks anyways - sorry for the waste of time.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 11, "url": "https://github.com/jasmine/jasmine/issues/11", "title": "toString fails in IE8 sometimes", "contents": "We have an edge case where on a failing spec there is no \"toString\" method on a property.\nIn order to test it feel free to pull http://github.com/mootools/mootools-core - init all submodules and open the Specs folder in IE from a local server.\nReplacing the line http://github.com/pivotal/jasmine/blob/master/lib/jasmine.js#L847 with the code below fixes the issue:\n  mismatchValues.push(\"'\" + property + \"' was '\" + (b[property] ? jasmine.util.htmlEscape(b[property].toString ? b[property].toString() : '' + b[property]) : b[property]) + \"' in expected, but was '\" + (a[property] ? jasmine.util.htmlEscape(a[property].toString ? a[property].toString() : '' + a[property]) : a[property]) + \"' in actual.\");", "createdAt": "2010-08-30T11:13:16Z", "updatedAt": "2011-01-26T20:45:29Z", "closedAt": "2011-01-26T20:45:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cpojer", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cpojer", "company": "Facebook"}, {"login": "fabiomcosta", "company": "@godaddy "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "fabiomcosta", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-08-31T22:18:56Z", "contents": "yes, and i've sent a commit and pull request with no response.\nhttp://github.com/fabiomcosta/jasmine/commit/5908b1e121fe406e6c60c18f450e4deb98dab104\nHost objects on IE doesnt extends from the Object Native Class, so they don't have the toString method and they fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-26T20:45:29Z", "contents": "Marking as a bug. And it's prioritized in Jasmine's backlog: https://www.pivotaltracker.com/story/show/9242211", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 12, "url": "https://github.com/jasmine/jasmine/issues/12", "title": "jasmine-gem: don't load json/pure", "contents": "I've added Jasmine gem to my app recently; I'm also using Resque. The problem is, Resque requires plain json, and Jasmine requires json_pure. So I've got two JSONs now in my project, which causes several warning messages and some failing tests...\nSecond problem is that even if I remove Resque, json_pure is still loaded twice, because ActiveSupport loads it once as require 'json' and then Jasmine loads it again as require 'json/pure'.\nThe solution to the second problem is to change require 'json/pure' to require 'json' in Jasmine. The json_pure gem will still be loaded because it will be in the Gemfile, but it won't be loaded twice.\nA better, long term solution would be to switch to the multi_json gem in code and in gemspec (http://github.com/intridea/multi_json). If both Jasmine and Resque used that, I could choose any json backend I want and it would work with both.", "createdAt": "2010-09-01T12:05:40Z", "updatedAt": "2010-09-01T14:29:29Z", "closedAt": "2010-09-01T21:15:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mackuba", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mackuba", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "mackuba", "authorAssociation": "NONE", "createdAt": "2010-09-01T12:49:43Z", "contents": "See pull request at http://github.com/pivotal/jasmine-gem/pull/1.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-09-01T14:15:44Z", "contents": "We just moved from json to json_pure as a short term fix to allow JRuby projects to use Jasmine.  There's an upcoming JSON gem fix that will allow everyone to go back to requiring json and the right thing will happen.  When that fix is released, we'll rev Jasmine accordingly.\nSorry for the glitch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mackuba", "authorAssociation": "NONE", "createdAt": "2010-09-01T14:29:29Z", "contents": "I see. I still think you should try to use multi_json, because then I could use json and JRuby guys could use json_pure...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 13, "url": "https://github.com/jasmine/jasmine/issues/13", "title": "jasmine gem doesn't work with rspec 2", "contents": "Error: \"no such file to load -- spec\"", "createdAt": "2010-09-06T12:34:45Z", "updatedAt": "2010-09-30T16:48:02Z", "closedAt": "2010-09-30T16:48:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mackuba", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mackuba", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "pivotal-legacy", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-09-07T00:02:01Z", "contents": "We are aware of this.  If you're on a Rails 3 project, then please look at the Rails 3 branch (it's still a work in progress).\nIf you're not on a Rails 3 project, do you need RSpec 2?  If so, we'd love to understand why as we try & solve this problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-09-30T16:48:02Z", "contents": "Here's a blog post that talks how to use Jasmine in Rails 3:\nhttp://pivotallabs.com/users/dwfrank/blog/articles/1427-jasmine-in-rails-3", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 15, "url": "https://github.com/jasmine/jasmine/issues/15", "title": "Bug on toContains", "contents": "You should be able to expect an array-like object (like the return on getElementsByTagName) to contain something. I monkey-patched jasmine to make it work, but its clearly a bug. See here:\nhttp://github.com/fabiomcosta/slick/blob/master/SlickSpec/assets/JSSpecHelpers.js#L39-72\nGood job so far! We're using on most of mootool's  projects.", "createdAt": "2010-09-14T00:34:20Z", "updatedAt": "2013-05-26T19:10:09Z", "closedAt": "2013-05-26T19:09:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fabiomcosta", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "fabiomcosta", "company": "@godaddy "}, {"login": "xian", "company": "@google"}, {"login": "lytc", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "xian", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-09-14T01:03:41Z", "contents": "Sounds good to me...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lytc", "authorAssociation": "NONE", "createdAt": "2012-09-21T09:34:38Z", "contents": "Jasmine should not depends on browser env (NodeList, HTMLCollection object), so if you would like to expect an array-like object to contain something, you should convert array-like object to array\nLike this: expect(Array.prototype.slice.call(document.getElementsByTagName('div'))).toContain(something)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T19:10:09Z", "contents": "Closing due to age", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 16, "url": "https://github.com/jasmine/jasmine/issues/16", "title": "jasmine-gem: Flexible path to jasmine.yml", "contents": "jasmine-gem\nIt would be great if jasmine.yml could be loaded using a Dir glob string (\"**/jasmine.yml\") from the project root or from an environment variable (as mentioned by Rajan in the google group) so that any folder structure is supported.", "createdAt": "2010-09-14T18:25:58Z", "updatedAt": "2010-10-13T21:06:47Z", "closedAt": "2010-10-13T21:06:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 0, "participants_data": [], "comments_count": 1, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-10-13T21:06:47Z", "contents": "Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 17, "url": "https://github.com/jasmine/jasmine/issues/17", "title": "this pointer is reset to window", "contents": "var TestObject = {\nmethodA: function() {},\n\nmethodB: function() {  this.methodA();  }\n};\n....\ndescribe('....', function() {\nvar A = TestObject.A,B = TestObject.B;\n\nit('....', function() {\n    B();\n});\n\n});\nwill throw error in 'methodB: function() {  this.methodA();  }', because \"this\" is pointed to window!\nlooking forward to fix it quickly! thx!", "createdAt": "2010-09-25T06:23:01Z", "updatedAt": "2010-09-26T01:24:01Z", "closedAt": "2010-09-26T08:21:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lifesinger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lifesinger", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-09-25T21:07:58Z", "contents": "I may have my weekend brain on, but that looks correct to me.  What do you expect?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lifesinger", "authorAssociation": "NONE", "createdAt": "2010-09-26T01:21:01Z", "contents": "Hi, infews:\nI have created a test page:\nhttp://lifesinger.github.com/lab/2010/jasmine-issue17-test.html\nJasmine reports error:\nTypeError: Object [object DOMWindow] has no method 'methodA'\nIf I change line25 to:\nexpect(TestObject.methodB()).toBe('a');\nAll will be ok.\nBut in my actual test code, I want to define methodB = TestObject.methodB to save some typing.\nI expect jasmine don't change \"this\" to window, it's annoying:(\nWaiting for you answer^o^", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lifesinger", "authorAssociation": "NONE", "createdAt": "2010-09-26T01:24:01Z", "contents": "sorry for close it by accident.\nhow to reopen this issue?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 19, "url": "https://github.com/jasmine/jasmine/issues/19", "title": "this pointer is wrong", "contents": "Reopen for the accident closed #issue17\nI have created a test page:\nhttp://lifesinger.github.com/lab/2010/jasmine-issue17-test.html\nJasmine reports error:\nTypeError: Object [object DOMWindow] has no method 'methodA'\nIf I change line25 to:\nexpect(TestObject.methodB()).toBe('a');\nAll will be ok.\nBut in my actual test code, I want to define methodB = TestObject.methodB to save some typing.\nI expect jasmine don't change \"this\" to window, it's annoying:(\nWaiting for you answer ^o^", "createdAt": "2010-09-30T01:18:35Z", "updatedAt": "2010-10-02T02:29:33Z", "closedAt": "2010-10-01T07:16:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lifesinger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lifesinger", "company": null}, {"login": "pivotal-legacy", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-10-01T00:16:42Z", "contents": "When you invoke methodB(), this is set to window by the JS interpreter.\nTo see this in action, try typing some of your code into a JS console of a browser that doesn't have Jasmine installed like this:\nvar TestObject = { methodA: function() {return 'a'}, methodB: function() {return this.methodA();} };\nvar b = TestObject.methodB;\nb();\n\n...you will get the same error.\nAll top-level objects (an functions) are properties of the global object in JS (window in a browser). So when you invoke a top-level function, this is set to window.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lifesinger", "authorAssociation": "NONE", "createdAt": "2010-10-02T02:29:33Z", "contents": "very thanks for your detail explaination!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 20, "url": "https://github.com/jasmine/jasmine/issues/20", "title": "Strange error output", "contents": "Test:\nit(\"should report a strange error\", function(){\nspyOn(TestMe, 'saySomething');\nTestMe.saySomething('a string', {goodbye: 'world'});\nexpect(TestMe.saySomething).toHaveBeenCalledWith('a string', {hello: 'world'});\n});\nSupporting class (using jQuery):\n(function($) {\nTestMe = {};\nTestMe.saySomething = function(aString, aHash) {\nalert(aString);\n};\n}(jQuery));\nWhen I run the test I get the following output:\nExpected spy to have been called with [ 'a string', { hello : 'world' } ] but was called with [ [ 'a string', { goodbye : 'world' } ] ]\nI would expect the failure and it is easy to see why this test fails when you have a short string of failure text...what I wouldn't expect was the \"[[\" \"]]\" around the stuff that the method was actually called with.\nIf you have a big error message then you get caught up on the [[ ]] and lose sight that you are calling the method with the wrong arguments.\nIs there a reason that when you mess up a toHaveBeenCalledWith() expectation you get the [[ ]] instead of [ ]?", "createdAt": "2010-10-01T21:02:58Z", "updatedAt": "2011-06-19T03:36:40Z", "closedAt": "2011-06-19T03:36:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mikegehard", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mikegehard", "company": "Pivotal"}, {"login": "pivotal-legacy", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2010-10-01T21:32:05Z", "contents": "It's a known bug in how spy errors are reported. Known bug and now there's a story in Pivotal Tracker for it: http://www.pivotaltracker.com/story/show/5465812", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 21, "url": "https://github.com/jasmine/jasmine/issues/21", "title": "Builtin support node.js", "contents": "The project you mention on the docs site is very outdated. I published a fork with a simple example, but it would be nice to have it out of the box, and supported on the latest version.", "createdAt": "2010-10-04T00:36:04Z", "updatedAt": "2011-01-28T05:55:51Z", "closedAt": "2011-01-28T05:55:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danielribeiro", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "danielribeiro", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-28T05:55:48Z", "contents": "Thanks for this. Feel free to publish a link in the Wiki", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 22, "url": "https://github.com/jasmine/jasmine/issues/22", "title": "combine jasmine-gem into this repository", "contents": "When I first started checking out Jasmine, I grabbed the repo, and was delayed a bit when I noticed that I didn't have the gem included.  How about combining the two, just carefully leaving files that don't belong in the gem out of the gemspec? This repo already includes things that aren't part of the core, like the javascript documentation.\nIf part of it is that you plan to have support for other server-side languages in the future, I think having ruby at the root would still be the way to go. That way, if a python implementation got added, a rake task for running the python tasks (including tests) could be added. That way, someone who wanted to maintain consistency among the alternate implementations could easily run tests on both, and someone who's just into python could cd to that directory and build the egg. (Using this scheme, a python implementation of the server-side component could be in a separate repo using submodules, or not. Pythonistas would have to check out jasmine with the submodules to get the javascript code and documentation, and the Python build files would include references to code in the outer repo. For example, if the gem were in python/, it would copy ../src/*.js into its build directory. It would also tell users to get the outer gem if it didn't find it in the parent directory.)\nFinally, something that could be done right away to make things easier: add a homepage on github to jasmine-gem (currently it's empty), so people browsing to it can go straight to the page about jasmine, without scrolling down:\nhttp://github.com/pivotal/jasmine-gem", "createdAt": "2010-10-05T20:29:07Z", "updatedAt": "2011-01-26T19:43:06Z", "closedAt": "2011-01-26T19:43:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benatkin", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "benatkin", "company": "@resourcesco @apicomponents @diodejs "}, {"login": "jfirebaugh", "company": "@figma "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "rudylattae", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "jfirebaugh", "authorAssociation": "NONE", "createdAt": "2010-10-05T22:03:51Z", "contents": "+1\nSplitting the repos sounds like a noble idea in theory, but in practice it simply complicates things for people who want to use or contribute.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benatkin", "authorAssociation": "NONE", "createdAt": "2010-10-05T23:49:19Z", "contents": "jfirebaugh, I agree, I think it sounds like a noble idea too, and I'm certain that it was done with noble intent. I just don't think it's practical!\nI looked at the issue list and saw the request for built-in Node.js support, so maybe that's what could be done with my idea about adding a submodule! Also I noticed this has a submodule for pages, which I think is a fantastic idea!\nhttp://github.com/pivotal/jasmine/issues#issue/21", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-10-06T06:22:17Z", "contents": "We've fielded discussions recently that there should be more gems, not fewer.  So we've thought a lot about this in the past couple of weeks.\nThe plan is for there to always be a standalone Jasmine repo, zero Ruby (or other) dependencies.  If you want to poke around in Jasmine's source, that's the place.\nThe gem is for using Jasmine for development on Ruby (including Rails) projects or for projects where Ruby is welcome and/or not a hinderance.\nWe, the core team, will keep these two Repos up-to-date. And we'll promote other environments (Node, JSTestDriver, etc.) as they become available - and keep them informed as new releases come up.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rudylattae", "authorAssociation": "NONE", "createdAt": "2010-10-29T05:08:33Z", "contents": "-1\nI think it is reasonable to keep the two code bases separate.\nAs a predominantly Python developer myself, I don't really want to have to mentally filter out non JS stuff like ruby gems when I pull the source. I just want to deal with Jasmine as a Javascript BDD framework and leave it at that. Any integration with other languages, frameworks or external systems, should be isolated to specialized projects, just like it is currently.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benatkin", "authorAssociation": "NONE", "createdAt": "2010-10-29T05:37:01Z", "contents": "rudylattae, good point. After thinking about it, I agree. My perspective on the matter has changed over the last few weeks, as I've done a couple of JS-only projects.\nI think the README should make it clearer what's in the jasmine repo and what's in other repos. Also an explanation as to why Rakefile, .gitmodules, pages, and cruise_config.rb belong in this JavaScript project would be helpful. I may fork/work on it soon. The reasons for these files are:\nRakefile - builds the project, and the documentation\nGemfile - gets the gems needed for Rakefile to do its magic\n.gitmodules & pages - puts pages in the right place for Rakefile to generate api docs\ncruise_control.rb - continuous integration (not sure how it works though)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-26T19:43:06Z", "contents": "I've now moved the main docs to the Github Wiki. Feel free to start a page that makes sense to you and we'll help clarify as needed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 24, "url": "https://github.com/jasmine/jasmine/issues/24", "title": "right: 100% on #jasmine_content hiding doesn't work for common layout choices", "contents": "Particularly, but not exclusively in IE7 with 100% width with floats.  Just using right: 200% seems to take care of some of that.", "createdAt": "2010-10-15T18:28:56Z", "updatedAt": "2011-01-27T02:45:41Z", "closedAt": "2011-01-27T04:40:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "knzconnor", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "knzconnor", "company": "Cloud City Development"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-26T20:40:06Z", "contents": "testing visibility in Jasmine is quite unpredictable. Have you tried using a CSS class instead? That's much more testable and cross-browser safe.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "knzconnor", "authorAssociation": "NONE", "createdAt": "2011-01-27T02:45:41Z", "contents": "That's unrelated. The issue is that how Jasmine itself chooses to obscure the content that is rendered during the tests doesn't work with a lot of layouts. Just changing the right 100% to right 200% for that, works a trick.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 27, "url": "https://github.com/jasmine/jasmine/issues/27", "title": "support multiple config file", "contents": "we should be able to support different config file when initializing\nJasmine::Config.new\nperhaps something like\nrake jasmine CONFIG=different_config_file_rather_than_jasmine.yml\nThis will be very useful to test a subset of js files without having to load all the javascript files all the time.", "createdAt": "2010-11-02T22:13:21Z", "updatedAt": "2011-06-19T03:34:59Z", "closedAt": "2011-06-19T03:34:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "trungpham", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "trungpham", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:34:35Z", "contents": "Closing as this is an issue w/ the Jasmine Ruby Gem (http://github.com/pivotal/jasmine-gem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:34:59Z", "contents": "(ps: there is more discussion on how to do this on the mailing list and we have plans to make this easier with Jasmine 2.0)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 28, "url": "https://github.com/jasmine/jasmine/issues/28", "title": "rake jasmine:ci not exiting with proper exit code", "contents": "it is exiting with 0 code on failures also. which is making the CI server function incorrectly.", "createdAt": "2010-11-10T06:03:07Z", "updatedAt": "2010-11-15T22:08:03Z", "closedAt": "2010-11-10T14:42:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "arusarka", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "arusarka", "company": "ThoughtWorks"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sarahmei", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-10T06:42:40Z", "contents": "What's your configuration? I don't think we're seeing this...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "arusarka", "authorAssociation": "NONE", "createdAt": "2010-11-10T11:24:53Z", "contents": "the standard jasmine.yml :\nspec_files:\n\n../../vendor/gems/jasmine/jasmine-jquery.js\n*/[sS]pec.js\n\nWe had to vendorize jasmine though according to the blog http://pivotallabs.com/users/dwfrank/blog/articles/1427-jasmine-in-rails-3\nin spec/javascripts/jsamine_runner.rb we have changed a line to\nENV[\"JASMINE_BROWSER\"] = \"firefox\"\nis there some other information you are looking for?\nrunning rake jasmine:ci in bash.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sarahmei", "authorAssociation": "NONE", "createdAt": "2010-11-15T22:08:02Z", "contents": "Seeing this too - rails 3/rspec 2. I run rake jasmine:ci, a spec fails, I get:\nFinished in 0.05873 seconds\n4 examples, 1 failure\nBut I do echo $? and it's 0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 30, "url": "https://github.com/jasmine/jasmine/issues/30", "title": "Request: JsApiReporter: Add execution time elapsed", "contents": "The TrivialReporter displays the total execution time following the test run, but so far as I can discern, this info isn't available from the JsApiReporter. It'd be great to have this for users of the jasmine-maven-plugin, who are now seeing Jasmine test reports gathered by their CI environments; this information would enable them to track execution time of Jasmine specs over time.", "createdAt": "2010-11-18T21:56:14Z", "updatedAt": "2013-06-09T19:30:46Z", "closedAt": "2013-05-26T19:11:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "searls", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "searls", "company": "@testdouble"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T05:31:21Z", "contents": "This will be fixed in 2.0 - see Tracker story", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 31, "url": "https://github.com/jasmine/jasmine/issues/31", "title": "Private repo URL for submodule \"pages\"", "contents": "Is there a reason the \"pages\" subproject uses a private repo URL?  Makes it a pain to build pages when using jasmine as a submodule.", "createdAt": "2010-11-20T02:07:31Z", "updatedAt": "2011-01-28T17:55:51Z", "closedAt": "2011-01-28T13:51:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kflorence", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kflorence", "company": "Solar Mosaic, Inc."}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-20T15:42:34Z", "contents": "The ghpages submodule is really a link back to the ghpages branch.  The submodule link is just for convenience. If you need to make edits you can make them on the branch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kflorence", "authorAssociation": "NONE", "createdAt": "2010-11-20T19:17:10Z", "contents": "I understand that.  It's just that the submodule URL in .gitmodules is for the private repo.  This isn't really a problem for using jasmine as a submodule in your project since you don't need to git submodule init/update the pages submodule (which will give you an error if you try).  But if you're using this submodule in a gh-pages branch in your own repo, github will not be able to build your page because (I assume) it is trying to recursively pull in all submodules, and it errors on the pages submodule.  I understand that it's more convenient to include a private submodule URL for people with access to the repo (so they can push/pull without going into the gh-pages branch), but it's inconvenient for others.  You can always make the primary URL public, and add another remote reference with the private URL.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-28T05:51:36Z", "contents": "We've moved the pages over to the Github wiki. it should be easier for the community to add useful docs.  And it should remove the need for the community to mess with the gh-pages branch at all.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kflorence", "authorAssociation": "NONE", "createdAt": "2011-01-28T17:55:51Z", "contents": "Awesome, thanks :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 32, "url": "https://github.com/jasmine/jasmine/issues/32", "title": "Ability to spy on functions multiple times.", "contents": "Right now, Jasmine does not allow me to set up multiple spies on the same function.  For instance, given some constructor:\nNavNet.Controller.LoginController = function LoginController (navNet) {\n   this.loginService = navNet.getService(\"loginService\");    \n   this.storageService = navNet.getService(\"storageService\");\n};\n\nMy spy setup would looks something like this:\n...\n\nbeforeEach(function() {\n        framework = new NavNet();\n        loginService = new NavNet.Services.LoginService();\n        storageService = new NavNet.Services.StorageService();\n\n        spyOn(framework, \"getService\").andReturn(loginService);\n        spyOn(framework, \"getService\").andReturn(storageService);\n\n        sut = new NavNet.Controllers.LoginController(framework);\n    });\n\n...\n\nMaybe not the best example, as I actually inject the services I need, but it illustrates a point: the second spy on \"getService\" will fail as Jasmine will complain that \"getService\" is already being spied on. Fair enough. It would be nice if I was able to set up spies on multiple function calls, differentiated by parameters.  Maybe something like:\nspyOn(framework, \"getService\").with(\"loginService\").andReturn(loginService);\n\nUnless, of course, there is a way I am unaware of that will accomplish this >8)", "createdAt": "2010-11-23T01:41:26Z", "updatedAt": "2014-09-11T20:19:29Z", "closedAt": "2010-11-23T21:16:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Ireney", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "Ireney", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "AlexCppns", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-23T01:48:39Z", "contents": "You can do this by using .andCallFake, then switching on arguments and returning what you want.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-11-23T13:16:39Z", "contents": "yep, you can use andCallFake here, although maybe we could add some extra helpers to help you set up fakes.\n    framework = new NavNet();\n    loginService = new NavNet.Services.LoginService();\n    storageService = new NavNet.Services.StorageService();\n\n    spyOn(framework, \"getService\").andCallFake(function(service) {\n      if (service = \"loginService\") return loginService;\n      if (service = \"storageService\") return storageService;\n      return null;\n    })", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Ireney", "authorAssociation": "NONE", "createdAt": "2010-11-23T18:44:38Z", "contents": "Ah ... good call ... thanks guys, I had just been learning to take advantage of .andCallFake for a number of my tests, but I have not thought of it in this scenario.\nThe helper method would certainly be nice, and/or more samples and scenarios for newbs such us me, if you have time >8)\nThanks again, I have been enjoying learning Jasmine ... great job!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AlexCppns", "authorAssociation": "NONE", "createdAt": "2014-09-11T20:11:07Z", "contents": "@ragaskar I don't understand your example... how do I call andReturn twice with different values?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T20:18:07Z", "contents": "If you call the andReturn (or any of the others) function again on the existing spy, it will change the execution plan for the spy for all future calls.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "AlexCppns", "authorAssociation": "NONE", "createdAt": "2014-09-11T20:19:29Z", "contents": "@slackersoft Thanks, I just figured it out :).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 33, "url": "https://github.com/jasmine/jasmine/issues/33", "title": "Test window jumps when I hit \"command\"", "contents": "I'm running Jasmine 1.0.1.1 in Chrome 8.0.552.215 on OSX.\nEvery time I hit the \"command\" key when the Jasmine tab has focus (e.g. in order to command-tab out of the window) the view pops out of the browser to the top-left of my screen, then returns.", "createdAt": "2010-12-03T22:48:18Z", "updatedAt": "2011-06-19T04:02:00Z", "closedAt": "2011-06-19T03:36:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamesarosen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jamesarosen", "company": "Fastly"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:36:01Z", "contents": "Did you ever isolate this? It feels like a Chrome bug. The Jasmine runner HTML doesn't install any event handlers, so it's likely an interaction problem with your code and the runner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesarosen", "authorAssociation": "NONE", "createdAt": "2011-06-19T04:02:00Z", "contents": "Almost certainly a Chrome bug. I haven't seen it in months.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 35, "url": "https://github.com/jasmine/jasmine/issues/35", "title": "toHaveBeenCalledWith fails with multiple arguments", "contents": "First attempt:\nspyOn(Foo, 'bar');\nFoo.bar('baz', 'qux');\nexpect(Foo.bar).toHaveBeenCalledWith('baz', 'qux');\n\nExpected spy to have been called with [ [ 'baz', 'qux' ] ] but was called with [ 'baz', 'qux' ].\nSecond attempt:\nspyOn(Foo, 'bar');\nFoo.bar('baz', 'qux');\nexpect(Foo.bar).toHaveBeenCalledWith(['baz', 'qux']);\n\nExpected spy to have been called with [ [ 'baz', 'qux' ] ] but was called with [ [ 'baz', 'qux' ] ].\nI believe the problem is that Jasmine is using a simple == or === comparison, rather than comparing the elements of arguments individually.", "createdAt": "2010-12-14T23:48:12Z", "updatedAt": "2015-11-09T05:00:44Z", "closedAt": "2010-12-14T23:56:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamesarosen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jamesarosen", "company": "Fastly"}, {"login": "poliu2s", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "jamesarosen", "authorAssociation": "NONE", "createdAt": "2010-12-14T23:50:35Z", "contents": "This is 1.0.1 revision 1286311016.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesarosen", "authorAssociation": "NONE", "createdAt": "2010-12-14T23:56:39Z", "contents": "Whoops - the problem was a formatting issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "poliu2s", "authorAssociation": "NONE", "createdAt": "2015-11-09T04:18:08Z", "contents": "@jamesarosen What was the formatting issue? I seem to be having the same problem", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "poliu2s", "authorAssociation": "NONE", "createdAt": "2015-11-09T05:00:44Z", "contents": "Actually, I found out that you can use the obj.method.calls.allArgs() for this to work", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 36, "url": "https://github.com/jasmine/jasmine/issues/36", "title": "Blank page after running tests.", "contents": "Visiting the test page for a running Jasmine server displays test results briefly (for about half a second), then the entire page goes blank.", "createdAt": "2010-12-15T01:20:24Z", "updatedAt": "2010-12-15T16:03:18Z", "closedAt": "2010-12-15T12:34:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "chessworld", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-12-15T04:34:34Z", "contents": "Do you have any failures? Which browser are you using? Can you post a link to a screenshot?\nThe default behavior is to hide all the spec names for passing specs. You can check the \"passed\" box at the top to see them all. The design is to hide the green, which you often don't care about but show the red which you need to fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2010-12-15T16:03:18Z", "contents": "I'd also recommend that if the page is \"blanking\" entirely, stick an \"alert('pause')\" in a before for each suite. What I've seen in the past is badly stubbed tests can either monkey with the location.href or do other things to the current window DOM which will affect the runner result display. This will let you know if something in one of your tests is blanking the screen. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 37, "url": "https://github.com/jasmine/jasmine/issues/37", "title": "Add instance mocks", "contents": "I'd like to be able to mock out an object created via new. Perhaps something like\nmockClass('Image');\nvar i = new Image();\ni.src = '/some_url';\nexpect(Image.lastInstance().src).toEqual(\"/some_url\");\n\nor maybe\nmockClass(Vehicle, 'Car');\nvar c = new Vehicle.Car();\nc.start();\nexpect(Vehicle.Car.anyInstance().start).toHaveBeenCalled();\n\nI might also imagine being able to access the original definition of the \"class\" (function) via StubbedFunction.originalDefinition.", "createdAt": "2010-12-15T21:06:05Z", "updatedAt": "2011-01-28T05:42:12Z", "closedAt": "2011-01-28T05:42:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamesarosen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jamesarosen", "company": "Fastly"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-28T05:42:12Z", "contents": "Your latter example can be done with jasmine.createSpyObj - you can create an Object with a bunch of spies as functional properties. We do this a lot in our testing.\nYour \"instance\" interface looks interesting. Why not test-drive the concept and see if you can get some traction?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 40, "url": "https://github.com/jasmine/jasmine/issues/40", "title": "global spyOn does not accept / honor ignoreMethodDoesntExist", "contents": "jasmine.Spec.prototype.spyOn accepts three parameters: obj, methodName, ignoreMethodDoesntExist\nglobal spyOn function only accepts two parameters: obj, methodName\nSo if one wishes to spy on a non-existent method, one may not use the global spyOn method but must instead grab and directly call jasmine.getEnv().currentSpec.spyOn", "createdAt": "2010-12-28T17:41:23Z", "updatedAt": "2011-01-28T05:59:47Z", "closedAt": "2011-01-28T05:59:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bloveridge", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bloveridge", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-28T05:59:03Z", "contents": "Do you have a patch with specs that does what you suggest?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-28T05:59:47Z", "contents": "Aha! There's your patch. We'll review. Closing as a duplicate.  Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 45, "url": "https://github.com/jasmine/jasmine/issues/45", "title": "toHaveBeenCalledWith does not succeed on correct response (or error is incorrect)", "contents": "Test:\necho.events.trigger(\"NAME_REPLY\", {command: \"NAME_REPLY\", args: [\"wr:1\",\n  {\"1\":{\"user_id\":\"1\",\"mode\":{\"v\":1},\"attendee_id\":\"67\"},\n   \"2\":{\"user_id\":\"29\",\"mode\":{\"v\":1},\"attendee_id\":\"1\"}}\n  ]});\n\nexpect(aRoom.listUI.add).toHaveBeenCalledWith([\"1\"], [\"29\"]);\n\nOutput:\nFailed: A Room Controller loads users and their states on NAME_REPLY.\nExpected spy to have been called with [ [ '1' ], [ '29' ] ] but was called with [ [ '1' ], [ '29' ] ]\nin http://127.0.0.1:53446/jasmine/jasmine.js:94", "createdAt": "2011-01-19T16:58:18Z", "updatedAt": "2013-10-02T00:41:12Z", "closedAt": "2013-10-02T00:41:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "participants_count": 7, "participants_data": [{"login": "plukevdh", "company": "ARxChange"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "ahamid", "company": "Incandescent Software"}, {"login": "MarkBennett", "company": "Burmis Studio Inc."}, {"login": "mildavw", "company": "DMiller Studios"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 12, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-19T17:07:54Z", "contents": "I think there's a bug/feature where this particular error message wraps the expected arguments with an array (because you might have multiple toHaveBeenCalledWith calls, and I think we show all of them? -- it's been awhile).\nWhat happens if you use\nexpect(aRoom.listUI.add).toHaveBeenCalledWith([[\"1\"], [\"29\"]]);\n(note extra wrapping array).\nYes we should probably make this error message a little more clear.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-19T17:18:51Z", "contents": "Expected spy to have been called with [ [ [ '1' ], [ '29' ] ] ] but was called with [ [ '1' ], [ '29' ] ]\n\nI'm guessing it has something to do with the fact that\n[] == []\n// False\nI haven't dug into the Jasmine code to investigate though. Thanks for the quick response.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-19T17:20:22Z", "contents": "Also, yes if you run toHaveBeenCalledWith, it returns the results of all the times it has been called. My guess is this is where it has the issue, that the hasBeenCalledWith only expects args from a single call?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-19T17:24:09Z", "contents": "Actually was pointed to this as being the probable cause: http://bonsaiden.github.com/JavaScript-Garden/#arguments, specifically the part that says \"This arguments variable is not an Array.\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ahamid", "authorAssociation": "NONE", "createdAt": "2011-08-15T20:44:37Z", "contents": "any news on this? does this feature just not work?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ahamid", "authorAssociation": "NONE", "createdAt": "2011-08-15T20:51:39Z", "contents": "nevermind, it appears toHaveBeenCalledWith may no longer test against an array of calls; in any case my tests are passing now", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarkBennett", "authorAssociation": "NONE", "createdAt": "2011-09-06T16:43:52Z", "contents": "I'm having a similair issue, where I'm passing an array of id's to a function. Unfortunately, the expression:\n[1,2,3] === [1,2,3]\n\nis false in JavaScript. This does work using:\nthis.env.equals_([1,2,3],[1,2,3])\n\nPerhaps toHaveBeenCalledWith()  should use the same equality comparison as toEqual()? That would seem more consistent to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarkBennett", "authorAssociation": "NONE", "createdAt": "2011-09-06T16:45:27Z", "contents": "Forget what I just said. It's using this.env.contains_() which in turn uses this.env.equals_(). I'll need to trace through the code in the debugger a little more.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mildavw", "authorAssociation": "NONE", "createdAt": "2011-10-31T06:52:14Z", "contents": "Mark, you're wrong that you were wrong! (Which makes you right?)\nIf toHaveBeenCalledWith() uses this.env.equals_ instead of contains_ my tests for this issue pass.\nthis.env.contains() does not use this.env.equals_ on the actual and expected values but rather on expected and each element of actual.\nMaking the first line of this.env.contains_\nif (this.equals_(haystack,needle)) return true;\n\nalso fixes it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarkBennett", "authorAssociation": "NONE", "createdAt": "2011-10-31T13:43:50Z", "contents": "@mildavw ah, that makes sense. So is this desired behaviour or not? It certainly doesn't seem like it to me and it's hard to explain to new Jasmine users.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mildavw", "authorAssociation": "NONE", "createdAt": "2011-10-31T16:05:05Z", "contents": "I think that toHaveBeenCalledWith should pass both ways: when the actual equals the expected or when the actual contains the expected. My second suggestion accomplishes this, but it may break something else that uses contains_.\nPerhaps a new function containsOrEquals_ would be in order if contains_ is broken by adding that line.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T00:41:12Z", "contents": "toHaveBeenCalledWith error messages should be better now, fixed with #193", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODA=", "title": "1.2", "description": "A bug-fix and minor-feature release.", "createdAt": "2011-06-19T03:25:39Z", "dueOn": null, "number": 1, "closed": false}}, {"repo_name": "jasmine/jasmine", "issue_id": 47, "url": "https://github.com/jasmine/jasmine/issues/47", "title": "jasmine init \"sinatra app\"", "contents": "hugo@hugo-desktop:~/bakedchat$ jasmine init\n/usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in gem_original_require': no such file to load -- padrino-core/cli/rake (LoadError) from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:inrequire'\nfrom /home/hugo/bakedchat/Rakefile:4\nfrom /home/hugo/.rvm/gems/ree-1.8.7-2010.02@chat/gems/jasmine-1.0.1.1/lib/jasmine/command_line_tool.rb:48:in load' from /home/hugo/.rvm/gems/ree-1.8.7-2010.02@chat/gems/jasmine-1.0.1.1/lib/jasmine/command_line_tool.rb:48:inprocess'\nfrom /home/hugo/.rvm/gems/ree-1.8.7-2010.02@chat/gems/jasmine-1.0.1.1/bin/jasmine:6\nfrom /home/hugo/.rvm/gems/ree-1.8.7-2010.02@chat/bin/jasmine:19:in `load'\nfrom /home/hugo/.rvm/gems/ree-1.8.7-2010.02@chat/bin/jasmine:19", "createdAt": "2011-01-29T04:39:59Z", "updatedAt": "2011-01-29T07:03:19Z", "closedAt": "2011-01-29T07:03:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hugoerg56", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hugoerg56", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-29T07:03:19Z", "contents": "Closed. This was user error.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 48, "url": "https://github.com/jasmine/jasmine/issues/48", "title": "afterEach is called twice before an async test is run", "contents": "An example can be found in the JustKidding project. I will try to reduce the issue to a smaller test case, but for now,\n\nclone git://github.com/jamesarosen/JustKidding.git\ncheck out e5f894168eed8c010ddf286d5d712123a1c6f6d9\nrun just the group \"when there are more elements...\"\n\nConsole output has to \"afterEach\" statements first, then a \"beforeEach\" statement, then an \"it\" statement.", "createdAt": "2011-01-30T17:00:07Z", "updatedAt": "2011-06-19T03:26:43Z", "closedAt": "2011-06-19T03:26:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamesarosen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jamesarosen", "company": "Fastly"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-30T17:13:55Z", "contents": "Let's try this: https://gist.github.com/803024", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesarosen", "authorAssociation": "NONE", "createdAt": "2011-01-30T17:19:30Z", "contents": "Great idea, but the only difference I see in output is that the \"it\" console log statement is never reached. There are still two \"afterEach\" statements and they're both before the \"beforeEach.\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesarosen", "authorAssociation": "NONE", "createdAt": "2011-01-30T17:41:45Z", "contents": "I have fixed my tests now, so this isn't such a pressing issue for me. Still, the runner-wide afterEach blocks seem to be firing during setup, which is odd. Not problematic any longer, just odd.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 49, "url": "https://github.com/jasmine/jasmine/issues/49", "title": "Code Coverage", "contents": "It would be immensely helpful if Jasmine had a way to generate code coverage reports. Is anything like this planned for the future?", "createdAt": "2011-01-31T11:02:25Z", "updatedAt": "2013-04-22T08:39:19Z", "closedAt": "2011-01-31T17:02:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pigulla", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "pigulla", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "vaustymenko", "company": null}, {"login": "kav", "company": "@Liffft "}, {"login": "searls", "company": "@testdouble"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-01-31T17:02:26Z", "contents": "No plans at the moment. We have so much we want to do with tests that coverage is really out of scope.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vaustymenko", "authorAssociation": "NONE", "createdAt": "2011-07-15T17:35:26Z", "contents": "Jasmine is a great JS test framework but it yields to not-so-great ones like jsTestDriver, Expresso because it is missing code coverage, which is a must have for any large project. Are there any plans to work on CC?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kav", "authorAssociation": "NONE", "createdAt": "2011-07-16T01:30:38Z", "contents": "Just wanted to add a plus one here in the event anyone is considering building such a feature on top of jasmine. Love jas but I'm definitely missing coverage reports.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "searls", "authorAssociation": "NONE", "createdAt": "2011-07-16T21:02:21Z", "contents": "I've used JSCoverage in conjunction with Jasmine. It was a royal pain to get working, but I  wouldn't recommend adding it to Jasmine if it'll distract from anything more worthwhile. Coverage is of only moderate utility at best and easily abused/over-emphasized\nIf someone out there wants to write a generic coverage tool that's decoupled from the test library, but more portable than JSCoverage, more power to you!", "reactions_count": 1, "reactions_data": ["CONFUSED"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 50, "url": "https://github.com/jasmine/jasmine/issues/50", "title": "Generated rake-Tasks should ignore missing Jasmine", "contents": "Hi there,\nthe generated rake task loading the Rake tasks from Jasmine should not throw an exception if it is unable to load jasmine.\nIn production environments you often have a \"test\"-group in your Gemfile, with gems not installed. Though you still want to use rake for Cronjobs and stuff.\nYou should generate the File like this:\nbegin\nrequire 'jasmine'\nload 'jasmine/tasks/jasmine.rake'\nrescue LoadError\nputs \"jasmine not found\"\nend\nBest, Tobias", "createdAt": "2011-02-01T11:54:37Z", "updatedAt": "2011-06-25T19:20:52Z", "closedAt": "2011-06-25T19:20:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tobsch", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "tobsch", "company": "OMR"}, {"login": "lbadura", "company": "Zendesk Sell"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "lbadura", "authorAssociation": "NONE", "createdAt": "2011-03-03T14:17:26Z", "contents": "I have just stumbled into the same issue. I guess another way out would be loading jasmine only in the test environment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:40:20Z", "contents": "Assigning to Rajan as it's a Jasmine Gem issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-25T19:20:51Z", "contents": "This should be fixed in HEAD. Our rails generators are duplicated and the original fix only made it into the rails 3 environment. They should now be synced. Let me know if you have further trouble. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODA=", "title": "1.2", "description": "A bug-fix and minor-feature release.", "createdAt": "2011-06-19T03:25:39Z", "dueOn": null, "number": 1, "closed": false}}, {"repo_name": "jasmine/jasmine", "issue_id": 51, "url": "https://github.com/jasmine/jasmine/issues/51", "title": "Jasmine does not clear scheduledFunctions between mock clock invocations", "contents": "Hi guys,\nWe noticed yesterday that between invocation of jasmine.Clock.useMock(), Jasmine does not reset the list of scheduledFunctions.  This was the cause of some test pollution for us, where things scheduled in previous tests were still running in later tests.\nTo see the bug, in useMock(), output the list of scheduledFunctions.  You'll see that functions scheduled in previous tests are still pending execution.\nWe worked around this by adding to our SpecHelper.js:\nafterEach(function () {\n// Jasmine's mock clock does not remove scheduled functions between specs,\n// which allows for test pollution.\njasmine.Clock.defaultFakeTimer.reset();\n});\n...although the real fix is probably to ensure FakeTimer.reset gets called at each useMock.\nThanks!\nRob", "createdAt": "2011-02-04T16:57:39Z", "updatedAt": "2013-02-28T07:08:14Z", "closedAt": "2011-02-04T21:13:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rslifka", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rslifka", "company": "@sharethrough"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ngan", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-02-04T21:13:40Z", "contents": "Yup. That's a bug and it's already in the backlog. Thanks for the note & the workaround.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ngan", "authorAssociation": "NONE", "createdAt": "2013-02-28T06:57:34Z", "contents": "This bug appears to not have been resolved yet...I'm on version 1.3.1.\nIsn't a fix to this just adding a call to reset() in uninstallMock()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ngan", "authorAssociation": "NONE", "createdAt": "2013-02-28T07:08:14Z", "contents": "Hm...apparently this bug is fixed on master...\nJust curious, is master slated for 2.0? Or are there plans for 1.3.2 anytime soon? Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 52, "url": "https://github.com/jasmine/jasmine/issues/52", "title": "json test fails under 1.9.2", "contents": "Running tests under  rvm 1.8.7@jasmine-gem and rvm 1.9.2@jasmine-gem, with a fresh bundle install under each. All tests pass under 1.8.7, but the json_pure test fails under 1.9.2:\nFailures:\n\nJasmine bug fixes require 'json_pure' should not happen until SeleniumDriver is initialized, which is late enough that it won't conflict with Rails\nFailure/Error: json_is_defined.chomp.should == \"nil\"\nexpected: \"nil\",\ngot: \"\" (using ==)\n./spec/bug_fixes_spec.rb:19:in `block (3 levels) in <top (required)>'", "createdAt": "2011-02-06T04:07:31Z", "updatedAt": "2011-06-24T02:37:56Z", "closedAt": "2011-06-19T16:31:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "claco", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "claco", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:41:10Z", "contents": "We moved this code in the Gem specifically for this issue. Odd that it's still a problem. Sending to Rajan to rake a look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "claco", "authorAssociation": "NONE", "createdAt": "2011-06-19T14:18:13Z", "contents": "Ha ha. I forgotten about this since I've been off of 1.9.2 for a while. I'll try reproducing this again just to make sure it's still valid.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T16:31:08Z", "contents": "Should've been fixed by 1.0.2. We have a build at http://cibuilder.pivotallabs.com:8080 that builds jasmine in various environments; we should mostly be green across the major rubies (some, like jruby, require installing the very latest release). You may still find ruby version issues that aren't covered by the tests, if you do, definitely open an issue.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "claco", "authorAssociation": "NONE", "createdAt": "2011-06-24T02:37:56Z", "contents": "Confirmed fixed. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 53, "url": "https://github.com/jasmine/jasmine/issues/53", "title": "Reporter resultsForSpecs reports specs as passed even when skipped", "contents": "Via the rspec runner in the gem project, it appears that when you run a specific subset set of specs via the ?spec= query string param, even though the page lists \"1 spec run, 0 failed\", the resultsForSpec/s returns all other specs marked as passed, even though they were not run at all.", "createdAt": "2011-02-06T21:39:06Z", "updatedAt": "2013-03-06T05:38:07Z", "closedAt": "2013-03-06T05:38:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "claco", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "claco", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:45:27Z", "contents": "Do you have a sample project that demonstrates this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "claco", "authorAssociation": "NONE", "createdAt": "2011-06-19T14:20:48Z", "contents": "Unfortunately, no. I go so deep in the code with issues that I decided at the time that the current runner wasn't meant for what I was trying to do [have vim run just the jasmine test at cursor position in the jasmine.vim plugin].\nI'll take a crack at this again tonight with current source and see what I can come up with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "claco", "authorAssociation": "NONE", "createdAt": "2011-06-19T14:30:20Z", "contents": "See this these threads for some relevance:\nSolution: Running only a single spec/suite\nhttp://groups.google.com/group/jasmine-js/browse_thread/thread/315ea591e2d1a851/2e031000481dd568?lnk=gst&q=runner#2e031000481dd568\nSeleniumClient.run?\nhttp://groups.google.com/group/jasmine-js/browse_thread/thread/2a0a0cf7cad23d36/7de7286abb2f00dd?lnk=gst&q=claco#7de7286abb2f00dd", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "claco", "authorAssociation": "NONE", "createdAt": "2011-06-22T18:51:17Z", "contents": "See also these two pull requests:\njasmine/jasmine-gem#14\njasmine/jasmine-gem#15", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T05:38:07Z", "contents": "Closing. This behavior is different on master/2.0. Spec Filtering means those tests are never run and so results will not appear. The interface from the gem has changed as well so that you will never have the results of skipped specs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODA=", "title": "1.2", "description": "A bug-fix and minor-feature release.", "createdAt": "2011-06-19T03:25:39Z", "dueOn": null, "number": 1, "closed": false}}, {"repo_name": "jasmine/jasmine", "issue_id": 58, "url": "https://github.com/jasmine/jasmine/issues/58", "title": "\"jasmine init\" deleted my code", "contents": "I had an /app with some javascript code I was starting to cover with jasmine specs.\nWhen I wrote \"jasmine init\" in the project folder, it had deleted /app content.\nIs this supposed to do so?", "createdAt": "2011-02-19T17:43:01Z", "updatedAt": "2011-02-19T17:47:48Z", "closedAt": "2011-02-20T01:46:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rodrigues", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "rodrigues", "company": "@younited "}], "comments_count": 1, "comments_data": [{"authorLogin": "rodrigues", "authorAssociation": "NONE", "createdAt": "2011-02-19T17:46:50Z", "contents": "And it had deleted the .git folder also...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 59, "url": "https://github.com/jasmine/jasmine/issues/59", "title": "\"jasmine init\" deleted my code", "contents": "I had an /app with some javascript code I was starting to cover with jasmine specs.\nWhen I wrote \"jasmine init\" in the project folder, it had deleted /app content. And it had deleted the .git folder also...\nIs this supposed to do so?", "createdAt": "2011-02-19T17:49:23Z", "updatedAt": "2011-02-19T17:51:45Z", "closedAt": "2011-02-19T17:51:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rodrigues", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "rodrigues", "company": "@younited "}], "comments_count": 1, "comments_data": [{"authorLogin": "rodrigues", "authorAssociation": "NONE", "createdAt": "2011-02-19T17:51:45Z", "contents": "I was crazy :P I was at the wrong folder, sorry...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 60, "url": "https://github.com/jasmine/jasmine/issues/60", "title": "expect({ f: function(){} }).toEqual({ f: function(){} }) fails and it shouldn't", "contents": "Granted, I'm not certain if the function bodies should have to be identical (I could see test cases wanting it to go either way), but in this case they are and that definitely seems incorrect.", "createdAt": "2011-02-20T23:28:24Z", "updatedAt": "2011-02-21T06:22:41Z", "closedAt": "2011-02-21T13:52:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paxunix", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "paxunix", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-02-21T05:52:11Z", "contents": "These are separate functions and are thus not equal (even though if they're expressed string-wise, they are equal). I think it would be a little weird to consider string-equivalent functions equal, so we'll probably not see any changes around this.\nIn these cases, I like the jasmine.Any usage to basically say \"I have a function here but don't care what it is\". If I want to test want the function does, I'll test its behavior directly.\nHope this is enough of an explanation to satisfy your issue, if not, feel free to reopen.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paxunix", "authorAssociation": "NONE", "createdAt": "2011-02-21T06:22:41Z", "contents": "Ahh, it wasn't clear to me from the API docs that I could use jasmine.any() in that context.  Thank you :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 61, "url": "https://github.com/jasmine/jasmine/issues/61", "title": "declarationError is lost; instead I get the error \"jasmine.Suite() required\"", "contents": "If I have my own js error inside my describe, it is lost and instead I get the error \"jasmine.Suite() required\"\nMy simple test:\ndescribe('my own js error', function() {\n    var foo = nonExistent.obj;\n    it('should throw my error', function() {\n    });\n});\n\nin jasmine, it is in this block:\njasmine.Env.prototype.describe = function(description, specDefinitions) {\n    var suite = new jasmine.Suite(this, description, specDefinitions, this.currentSuite);\n\n    var parentSuite = this.currentSuite;\n    if (parentSuite) {\n        parentSuite.add(suite);\n    } else {\n        this.currentRunner_.add(suite);\n    }\n\n    this.currentSuite = suite;\n\n    var declarationError = null;\n    try {\n        specDefinitions.call(suite);\n    } catch(e) {\n        declarationError = e;\n    }\n\n    this.currentSuite = parentSuite;\n\n    if (declarationError) {\n        this.it(\"encountered a declaration exception\", function() {\n            throw declarationError;\n        });\n    }\n    return suite;\n};\n\n==> I get into the if (declarationError) block at the end of this implementation, but within there, this.it('encountered...') tries to create a new spec, which has no currentSuite, which causes the error in my subject line.", "createdAt": "2011-02-23T18:41:29Z", "updatedAt": "2016-12-19T16:36:08Z", "closedAt": "2013-05-26T19:35:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "btmurrell", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "btmurrell", "company": null}, {"login": "db48x", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sirbarrence", "company": null}, {"login": "angufix", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "db48x", "authorAssociation": "NONE", "createdAt": "2011-05-17T18:47:25Z", "contents": "I've fixed this on my branch, see https://github.com/db48x/jasmine/tree/exceptions-in-descriptions", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:49:06Z", "contents": "Can you create a pull request so we can look at the diffs? thx!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "db48x", "authorAssociation": "NONE", "createdAt": "2011-07-03T23:47:58Z", "contents": "infews: #96", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sirbarrence", "authorAssociation": "NONE", "createdAt": "2013-05-20T22:03:31Z", "contents": "This still seems to be a problem. The pull request seems to fix it. Any reason this has not been accepted?\nIf your top level spec describe function unexpectedly throws, the exception is effectively ignored, and you only see a mysterious empty page.... It can take a while to track down the real problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T19:35:06Z", "contents": "Duplicate of #96. Also, there is a Tracker story in the backlog for this..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "angufix", "authorAssociation": "NONE", "createdAt": "2016-12-19T16:14:46Z", "contents": "still having the same problem in jasmine-core.js\nusing protractor 4.0.10 and jasmine-core 2.4.1 (included in protractor by default)\njasmine-core.js:\n...\n    function addSpecsToSuite(suite, specDefinitions) {\n      var parentSuite = currentDeclarationSuite;\n      parentSuite.addChild(suite);\n      currentDeclarationSuite = suite;\n\n      var declarationError = null;\n      try {\n        specDefinitions.call(suite);\n      } catch (e) {\n        declarationError = e;\n      }\n\n      if (declarationError) {\n        self.it('encountered a declaration exception', function() {\n          throw declarationError;\n        });\n      }\n\n      currentDeclarationSuite = parentSuite;\n    }\n...\nmy test:\ndescribe\n(\n  'ErrorSuite',\n  function () {\n    throw new ReferenceError();\n  }\n);\noutput:\n*\n\nPending:\n\n1) ErrorSuite encountered a declaration exception\n  No reason given", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "angufix", "authorAssociation": "NONE", "createdAt": "2016-12-19T16:36:08Z", "contents": "throwing declarationError without the self.it wrapper gives the desired error stack in console", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 65, "url": "https://github.com/jasmine/jasmine/issues/65", "title": "Conditionals for describe or it", "contents": "I'd like to see conditionals for skipping tests to be attached to the it or describe functions. The reason would be to enable testing on parameters that can't be set by JavaScript (such as navigator.locale), but requires environmental changes (outside the scope of JavaScript). One such example would be to test L10n or i18n issues.\nThis could be solved with letting it or describe have a builder method (such as when). Here is one example that tests with turkish 'i':\nfunction itIsTurkishLocale() {\n    return navigator.language == 'tu';\n}\n\nit('should pass the Turkish test', function() {\n    var result = myObj.doIt(upperCaseDottedEye);\n    expect(result).toEqual(lowerCaseDottedEye);\n}).when(itIsTurkishLocale);\n\nThe function when should be able to take on either a conditional (true/false) or a function that can return a conditional. If the conditional is true, the test should run. If it is false, it should skip.", "createdAt": "2011-02-28T13:29:10Z", "updatedAt": "2011-03-02T12:23:27Z", "closedAt": "2011-02-28T22:25:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "spoike", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "spoike", "company": "@tretton37"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-02-28T14:25:50Z", "contents": "Can you stub navigator.language so that your test always runs with the expected locale? I know this is just an example, but I think that would be my first instinct here.\nIf you must you can always wrap 'it' blocks with a conditional directly in the body of the suite -- describe functions are processed as POJS.\nIE\ndescribe(\"some locale tests\", function() {\nif (itIsTurkishLocale()) {\ndescribe(\"myTurkish Locale tests\", function() {\n...\n});\n}\n});\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spoike", "authorAssociation": "NONE", "createdAt": "2011-02-28T15:18:24Z", "contents": "@ragaskar: No. Apparently I can't do this.\nThe window.navigator.language cannot be stubbed or set with another value. This is not allowed in some browsers (such as Chrome, which will silently ignore your attempts).\nAnd even if you manage to do this:\nwindow.navigator = {language: 'tu'};\nconsole.log(window.navigator.language);\n\nThe console will log the new language string, but String.toLocalLowerCase() won't use the new window.navigator object to determine locale.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-02-28T15:28:13Z", "contents": "I guess I would recommend a couple things in this case then:\n\n\nStub at the itIsTurkishLocale point and reference this function in any of your code instead of navigator.language. Clearly, this doesn't help you with native language functions such as toLocalLowerCase, but you can stub at that point as well if necessary.\n\n\nWrap your describe with a conditional that looks at navigator language, which should have the same behavior as you describe.\n\n\nI think it's unlikely we would add additional methods to jasmine for conditional testing.\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spoike", "authorAssociation": "NONE", "createdAt": "2011-02-28T15:40:51Z", "contents": "I guess I could instead put a spy on toLocalLowerCase (or toLocalUpperCase), to make sure my code calls that instead of toLowerCase (or toUpperCase) just to proof my code to i18n.\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spoike", "authorAssociation": "NONE", "createdAt": "2011-03-01T10:22:49Z", "contents": "Hmm... apparently setting a spy on string methods won't work. Examples below:\nit('should spy on String.toLowerCase', function() {\n    spyOn(String, 'toLowerCase');\n    \"Kitten\".toLowerCase();\n    expect(String.toLowerCase).toHaveBeenCalled();\n});\n// throws \"toLowerCase() method does not exist\"\n\nit('should spy on myString.toLowerCase', function() {\n    var myString = \"Kitten\";\n    spyOn(myString, 'toLowerCase');\n    myString.toLowerCase();\n    expect(myString.toLowerCase).toHaveBeenCalled();\n});\n// throws \"Error: Expected a spy, but got function\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-03-02T12:23:27Z", "contents": "You need to get onto the actual method, which in this case is on the prototype.\nTry spyOn(String.prototype, \"toLowerCase\") -- try the below example in console with Jasmine loaded:\n\nspyOn(String.prototype, \"toLowerCase\").andReturn(\"somefake\");\nfunction () { spyObj.wasCalled = true; spyObj.callCount++; var args = jasmine.util.argsToArray(arguments); spyObj.mostRecentCall.object = this; spyObj.mostRecentCall.args = args; spyObj.argsForCall.push(args); spyObj.calls.push({object: this, args: args}); return spyObj.plan.apply(this, arguments); }\n\"test\".toLowerCase();\n\"somefake\"\n\nSpying on the prototype is a nice trick you can use when you can't get to the actual instance you want to spy on, but be careful, it will affect all instances after you set it, so it may even affect jasmine reporting in some cases (and if you find these cases, report them -- maybe we can set up a workaround.)\nSorry for the delay -- I keep thinking these are messages to the jasmine-js mailing list at Google, and only figure out they're github issues when I get the bounce notice. ;)\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 77, "url": "https://github.com/jasmine/jasmine/issues/77", "title": "Stackoverflow  error", "contents": "Hi\nI am getting Exceeded stack depth error while executing the maven targets (test).  I dont have any clue what is happening.  Could you please point in the right direction.\ncom.gargoylesoftware.htmlunit.javascript.StrictErrorReporter runtimeError\nSEVERE: runtimeError: message=[Exceeded maximum stack depth] sourceName=[script\nin file:/C:/oasisNew/target/jasmine/SpecRunner.html from (173, 33) to (2594, 11)\n] line=[2565] lineSource=[null] lineOffset=[0]\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] : java.lang.RuntimeException: com.gargoylesoftware.htmlunit.ScriptExcepti\non: Exceeded maximum stack depth (script in file:/C:/oasisNew/target/jasmine/Spe\ncRunner.html from (173, 33) to (2594, 11)#2565)\nThere was a problem executing Jasmine specs\ncom.gargoylesoftware.htmlunit.ScriptException: Exceeded maximum stack depth (scr\nipt in file:/C:/oasisNew/target/jasmine/SpecRunner.html from (173, 33) to (2594,\nRegards", "createdAt": "2011-03-18T18:52:55Z", "updatedAt": "2013-03-06T05:49:57Z", "closedAt": "2013-03-06T05:49:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "noris", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "noris", "company": null}, {"login": "jonnywyatt", "company": "Lake Digital Ltd"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "jonnywyatt", "authorAssociation": "NONE", "createdAt": "2011-04-20T15:30:32Z", "contents": "You seem to be using the jasmine maven plugin? I got something similar, it stopped happening when I excluded the jasmine.js library itself from being included.\nIn other words, in your POM, either point  to a folder that doesn't include a copy of jasmine.js, or use  to exclude the folder containing it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:54:01Z", "contents": "Noris, are you past this error? Can I close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T05:49:57Z", "contents": "Closing. Please re-open if this is still an issue with core - and not with the Jasmine Maven plugin", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 79, "url": "https://github.com/jasmine/jasmine/issues/79", "title": "specify a message when a custom matcher fails", "contents": "I have a immutable Value Object class:\u00b4\nvar Tile = function(x, y) {\n    this.x = function() { return x }\n    this.y = function() { return y }\n}\n\nand a matcher for it:\nfunction toEqualToTile(expected) {\n    return (this.actual.x() == expected.x()) && (this.actual.y() == expected.y())\n}\n\nIf the custom matcher fails, I get this message:\nExpected { x : Function, y : Function } to equal to tile { x : Function, y : Function }.\nwhich is not very informative. Could you add a possibility to specify my own message on failure?", "createdAt": "2011-03-24T11:00:02Z", "updatedAt": "2012-03-02T15:17:10Z", "closedAt": "2011-03-24T11:31:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgryszko", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mgryszko", "company": "Lastminute.com"}, {"login": "bostanio", "company": null}, {"login": "james-baker", "company": "@tableau"}, {"login": "brahn", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "bostanio", "authorAssociation": "NONE", "createdAt": "2011-03-24T11:12:36Z", "contents": "This already exists. In you're matcher you can set this.message and then it get reported if the test fails.\nAs an aside it seems to me you should put as much of the 'equals' logic in the Tile class and not in the matcher.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgryszko", "authorAssociation": "NONE", "createdAt": "2011-03-24T11:31:52Z", "contents": "Just to clarify your comment:this.message must be a function, e.g:\nthis.message = function() { this.actual + \" vs \" + expected }\n\nI don't agree with the location of 'equals' logic. I don't need it in the production code and it's only test specific.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "james-baker", "authorAssociation": "NONE", "createdAt": "2011-06-17T21:11:44Z", "contents": "This doesn't appear to have any documentation in the Wiki?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brahn", "authorAssociation": "NONE", "createdAt": "2012-03-02T15:17:10Z", "contents": "I was looking for this too, so I just added a link in the wiki to this discussion.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 80, "url": "https://github.com/jasmine/jasmine/issues/80", "title": "Misleading error message for string expectation", "contents": "The test below is reporting a misleading failure:\n\"Expected spy to have been called with [ 'bar' ] but was called with [ [ 'baz' ] ]\"\nThis implies that we called someFunction(['baz']) when actually we called someFunction('baz');\nTEST:\nit('should properly compare strings', function(){\n  var test = { foo: function(){} };\n  spyOn(test, 'foo');\n\n  test.foo('baz');\n  expect(test.foo).toHaveBeenCalledWith('bar'); \n});\n\nSTACK TRACE:\nError(\"Expected spy to have been called with [ 'bar' ] but was called with [ [ 'baz' ] ]\")@:0 ([object Object])@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:94 (\"bar\")@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1143 ()@http://localhost:8888/__spec__/javascripts/views/creatives/markup/_facebook_like_spec.js:49 ((function () {if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {completedSynchronously = true;return;}if (self.blocks[self.index].abort) {self.abort = true;}self.offset = 0;self.index++;var now = (new Date).getTime();if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {self.env.lastUpdate = now;self.env.setTimeout(function () {self.next_();}, 0);} else {if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {goAgain = true;} else {self.next_();}}}))@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:968 ()@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1739 ((function () {spec.finish(onComplete);}))@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1692 ((function () {if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {completedSynchronously = true;return;}if (self.blocks[self.index].abort) {self.abort = true;}self.offset = 0;self.index++;var now = (new Date).getTime();if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {self.env.lastUpdate = now;self.env.setTimeout(function () {self.next_();}, 0);} else {if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {goAgain = true;} else {self.next_();}}}))@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:2018 ()@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1739 ((function () {self.finish(onComplete);}))@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1692 ((function () {if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {completedSynchronously = true;return;}if (self.blocks[self.index].abort) {self.abort = true;}self.offset = 0;self.index++;var now = (new Date).getTime();if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {self.env.lastUpdate = now;self.env.setTimeout(function () {self.next_();}, 0);} else {if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {goAgain = true;} else {self.next_();}}}))@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:2163 ()@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1739 ()@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1735 ((function () {if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {completedSynchronously = true;return;}if (self.blocks[self.index].abort) {self.abort = true;}self.offset = 0;self.index++;var now = (new Date).getTime();if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {self.env.lastUpdate = now;self.env.setTimeout(function () {self.next_();}, 0);} else {if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {goAgain = true;} else {self.next_();}}}))@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:2120 ()@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:2164 ()@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1749 (49)@http://localhost:8888/__JASMINE_ROOT__/lib/jasmine.js:1729", "createdAt": "2011-03-24T18:47:06Z", "updatedAt": "2011-06-19T03:56:21Z", "closedAt": "2011-06-19T03:56:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "webdev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "webdev", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:56:21Z", "contents": "Right. It's a failing spy reporting problem. The Matcher returns the parameters for all calls in an array of arrays. We have a couple of different ideas on how to fix this and it's in Tracker: https://www.pivotaltracker.com/story/show/5465812.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 84, "url": "https://github.com/jasmine/jasmine/issues/84", "title": "Incorrect Rails dependency", "contents": "Should require 'railties' as dependency instead of 'rails', as the latter pulls in ActiveRecord, ActiveResource, and ActionMailer, none of which I need or want.", "createdAt": "2011-04-12T00:30:44Z", "updatedAt": "2011-04-15T23:25:05Z", "closedAt": "2011-04-15T12:09:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CodeMonkeySteve", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "CodeMonkeySteve", "company": "Record360"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-04-15T01:05:37Z", "contents": "We'll make this change in the next push to master.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-04-15T12:09:59Z", "contents": "Fixed on HEAD. Let me know if you continue to have problems. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-04-15T12:10:00Z", "contents": "Fixed on HEAD. Let me know if you continue to have problems. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "CodeMonkeySteve", "authorAssociation": "NONE", "createdAt": "2011-04-15T23:25:05Z", "contents": "Awesome, thanks for the quick response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 85, "url": "https://github.com/jasmine/jasmine/issues/85", "title": "CruiseControl build is broken but passing", "contents": "This build, for example, is broken, but passing.\nhttp://cibuilder.pivotallabs.com:3333/builds/Jasmine/dfea6d1c716a7d7f3465a19219e0d0cfadc3bd55.1\nAll the builds listed seem to have broken, but still act like they are passing.  Build is returning the wrong error code, perhaps?", "createdAt": "2011-04-15T09:52:55Z", "updatedAt": "2011-04-15T12:09:31Z", "closedAt": "2011-04-15T12:09:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paulbellamy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "paulbellamy", "company": "@giantlambda "}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-04-15T12:09:31Z", "contents": "We're using the http://cibuilder.pivotallabs.com:8080 hudson install to track jasmine-gem development. I'm not sure any of those builds are valid any more (there's a bunch of terribly old builds). I'll make a note to check on/remove the jasmine builds -- I suspect they are incorrectly configured.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 86, "url": "https://github.com/jasmine/jasmine/issues/86", "title": "CoffeeScript and Rails integration (possibly with Barista)", "contents": "Hi, I was wondering if there's any way to integrate Jasmine with CoffeeScript (and, possibly with Barista, Rails CoffeeScript support gem) and write tests in CoffeeScript rather than javascript without too much of a headache? Would appreciate if you point me to the right direction.", "createdAt": "2011-04-17T11:05:30Z", "updatedAt": "2011-04-17T14:11:55Z", "closedAt": "2011-04-17T14:11:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "snitko", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "snitko", "company": null}, {"login": "netzpirat", "company": "FlinkFinger GmbH"}], "comments_count": 4, "comments_data": [{"authorLogin": "netzpirat", "authorAssociation": "NONE", "createdAt": "2011-04-17T12:28:27Z", "contents": "I write my Jasmine tests in CoffeeScript and use Guard CoffeeScript to generate the JS and Guard LiveReload to reload the test page in the Browser.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "snitko", "authorAssociation": "NONE", "createdAt": "2011-04-17T12:50:46Z", "contents": "Question: Jasmine specs are placed in spec/javascripts dir. Is this where I point Guard CoffeeScript to output js spec files then?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "netzpirat", "authorAssociation": "NONE", "createdAt": "2011-04-17T12:56:15Z", "contents": "Yes, exactly. My Guardfile looks like this:\nguard 'coffeescript', :input => 'spec/coffeescripts', :output => 'spec/javascripts'\n\nguard 'livereload' do\n  watch(%r{spec/javascripts/.+\\.js})\nend", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "snitko", "authorAssociation": "NONE", "createdAt": "2011-04-17T14:11:55Z", "contents": "Aha, that's what I thought. Thanks a lot for pointing me to the Guard CoffeeScript gem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 87, "url": "https://github.com/jasmine/jasmine/issues/87", "title": "waitsFor argument order ", "contents": "An obviously minor issue, but for consistency with it and describe, and for more fluent reading, shouldn't the argument order of waitsFor be:\nwaitsFor('async operation to finish', function () {\n  // code\n}, 1000);", "createdAt": "2011-04-18T04:43:20Z", "updatedAt": "2011-06-19T03:59:15Z", "closedAt": "2011-06-19T03:59:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dvtng", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dvtng", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:59:15Z", "contents": "Known issue. I thought we had a Tracker story for it. I know we have a pull request for this.\nHere's the Tracker story for you to follow: https://www.pivotaltracker.com/story/show/14739213\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 88, "url": "https://github.com/jasmine/jasmine/issues/88", "title": "Spy.andCallThrough should be default behaviour", "contents": "I don't see the point in having to explicitly state that a spy should call the wrapped method. I stepped into this trap by assuming it was the default behaviour - which it is not. In my opinion, having a spy on a method should not change the program flow by default, but just cache arguments etc. as it already does.", "createdAt": "2011-04-20T19:37:04Z", "updatedAt": "2013-03-06T05:51:35Z", "closedAt": "2013-03-06T05:51:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "maenu", "authorAssociation": "NONE", "participants_count": 17, "participants_data": [{"login": "maenu", "company": null}, {"login": "fabiomcosta", "company": "@godaddy "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "gfredericks", "company": null}, {"login": "mcmire", "company": "@tuftandneedle "}, {"login": "searls", "company": "@testdouble"}, {"login": "mikegehard", "company": "Pivotal"}, {"login": "magnusstahre", "company": null}, {"login": "rdammkoehler", "company": "NOrad Ltd."}, {"login": "chrisjpowers", "company": "Sprout Social"}, {"login": "bbasata", "company": null}, {"login": "dnwiebe", "company": null}, {"login": "crebma", "company": "Test Double"}, {"login": "davemo", "company": "@testdouble "}, {"login": "krsmes", "company": null}, {"login": "darylkulak", "company": null}, {"login": "zealoushacker", "company": "Zealoushacker, Inc."}], "comments_count": 19, "comments_data": [{"authorLogin": "fabiomcosta", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-04-25T19:48:17Z", "contents": "+1 for this. If i dont want it to be called ill want it it to be explicit. A andDontCall method can be added for the cases when you dont want the spied function to be called. The oposite, like it is today, does not looks natural.\nOf course it will break BC and a 2.0 version should be release after this change, IMHO.", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T04:01:45Z", "contents": "Marking as 2.0.\nInteresting. Can you start this discussion on the Jasmine email list? I'd be curious on a broader vote on this topic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gfredericks", "authorAssociation": "NONE", "createdAt": "2011-08-19T21:12:24Z", "contents": "I think this change would certainly be more compatible with what somebody would naturally assume based on the name \"spy\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mcmire", "authorAssociation": "NONE", "createdAt": "2011-09-19T00:18:09Z", "contents": "To play devil's advocate, none of the major Ruby mocking frameworks (rspec, rr, mocha) do this by default. It would be surprising coming from a Ruby world, I think. I'm not sure about any other languages, but my guess is that Java et al. don't do this either.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "searls", "authorAssociation": "NONE", "createdAt": "2011-09-19T12:21:58Z", "contents": "-1.\nA spy is a test double (as in, stand-in), like any other (stub, mock, fake). The name does not (intend to) convey that they're any more real than any other test double. [aside: I think rr and mockito in particular have muddied this issue, by using names like spies and proxies for what are essentially partial mocks.]\nI believe strongly that the current behavior is the correct one. Since I use Jasmine exclusively for isolated unit testing, I explicitly spy to isolate the subject code from depended-on-components.\nUnless I'm writing a functional characterization test around some legacy code, I  don't want the subject to call through the real depended-on function, and for a number of reasons--not the least of which is that I don't want to perform whatever amount of setup is needed to sate the internal behavior of each depended-on function in order to exercise the subject code, as it makes the spec less readable and provides no value. In a BDD rhythm, most unit tests should be driven by a full-stack test (a la Cucumber) anyway, so the value of calling through to the real method is suspect.\nAs for Ruby's test double frameworks, I've written in the past why they aren't fantastic at facilitating isolated unit testing and when I speak on Jasmine, its superior test double facility is something I frequently point out as an advantage over popular Ruby test double libraries.\n@mcmire - in Java, the most popular test double library is Mockito, and it argues strongly against calling through to the actual component. Mockito mocks behaves more or less like Jasmine spies (and the author has acknowledged the naming mismatch of Mockito spies, which are essentially partial mocks.)", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "mikegehard", "authorAssociation": "NONE", "createdAt": "2011-09-19T12:42:27Z", "contents": "-1\nI'm with @searls on this one.  Most other mocking frameworks do not call through by default so personally I wouldn't expect this behavior.\nIt is a bummer that this isn't clear via the name \"spy\" but I would rather see a breaking change (or deprecation) around renaming spy than changing the default behavior to call through.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "magnusstahre", "authorAssociation": "NONE", "createdAt": "2011-09-19T12:50:48Z", "contents": "-1\nThis goes against the principle of testing units in isolation, and as such the user should suffer the syntactic vinegar.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdammkoehler", "authorAssociation": "NONE", "createdAt": "2011-09-19T13:23:27Z", "contents": "-1\nI'm with @searls on this, if its behavior at all it should at least be explicit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisjpowers", "authorAssociation": "NONE", "createdAt": "2011-09-19T13:39:45Z", "contents": "-1\nI agree with @searls' argument, let's keep it as an explicit feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bbasata", "authorAssociation": "NONE", "createdAt": "2011-09-19T13:45:36Z", "contents": "-1\nI agree with the reasoning offered by @searls and @magnusstahre. I think of a spy as a flight recorder. I'll use a spy to help describe and verify the interactions between the subject of the spec & its collaborators. To do that, I just need the flight recorder to remember that the collaborator was called. The existing behavior of Jasmine spies helps encourage spec'ing the subject of the spec in isolation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dnwiebe", "authorAssociation": "NONE", "createdAt": "2011-09-19T14:06:38Z", "contents": "-1\n@searls and @magnusstahre have it right.\nSpying should only be important for isolation tests.  For integration tests, the important thing should not be what is passed to the external routine, but what the result of calling the external routine is.\nAsserting on call parameters in an integration test is a dangerous practice, because it can make you think you've proved something you haven't.\nIn an isolation test, calling through is counterproductive.  Do you know why professional pilots with thousands of hours of experience still train in simulators rather than real airplanes?  Because the simulators allow them to confront conditions that would be prohibitively dangerous, expensive, or difficult to produce in a real airplane.  Same with isolation tests.  You want reality only in the layer between the tests and the mocks, and you want to squeeze that layer as thin as you can get it.  Everywhere else, you want enough complete control to be able to easily introduce unlikely, hard-to-reproduce conditions...so that in production, when those unlikely conditions actually occur, your code will still be operating in tested problem space and its behavior will be as expected.\nI think the ability to call through at all is suspect; making it the default would produce a flood of badly-conceived, low-value, maintenance-heavy tests from Agile beginners who haven't found their sea legs yet.  Make it easy to do the right thing and harder to do the wrong thing, not the other way around.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "crebma", "authorAssociation": "NONE", "createdAt": "2011-09-19T14:11:37Z", "contents": "-1\nSeems like booty", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davemo", "authorAssociation": "NONE", "createdAt": "2011-09-19T14:17:46Z", "contents": "-1\nIf only for the fact that the number of times I would have to modify my tests to explicitly avoid .andCallThrough would increase exponentially. The current behaviour is doing it right, as has been mentioned by many other commenters.\nAs a potential compromise I'd be willing to listen to suggestions for name changes to the spy function so that the intent of a \"spy\" is perhaps revealed better.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "krsmes", "authorAssociation": "NONE", "createdAt": "2011-09-20T01:53:07Z", "contents": "+/- 0\n+1 in that the word spy somewhat (see -1 below) implies something different than what it does (the 'ol p6spy jdbc driver still makes call to the database)\n-1 good testing in isolation requires test doubles which is what spies are doing for jasmine today and breaking that would be bad.  The terminology mixup of test-doubles (dummy/spy/stub/mock/fake) in the world of testing frameworks is such a mess that it doesn't really matter what you call it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maenu", "authorAssociation": "NONE", "createdAt": "2011-09-20T09:35:37Z", "contents": "Seems like I do not have the same understanding of what a Spy is as the majority. My initial perception was that a Spy was - in the first place - some sort of a middle-man that can be used to silently intercept the flow of a program without actually affecting it, and the ability to mock behaviour was rather a useful side-effect. I derived this from the name Spy: A spy tells a third party what is going on without letting the others know. A spy that is just a stub, that doesn't do anything until he's told to really do it, would be busted quite fast (or is James Bond).\nI would then suggest to rename the Spy to something that implicates the mocking intention a bit better (Fake, Dummy).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mcmire", "authorAssociation": "NONE", "createdAt": "2011-09-20T15:57:01Z", "contents": "From what I've seen in the Ruby world, it works like this:\nStub can does-a Proxy\nMock does-a Stub\nSpy is-a-kind-of Mock\nA stub lets you replace a method with another implementation. You can also have a proxy, where you don't completely replace the method with the implementation, but you intercept the method's return value and you can do whatever you want with that before it gets returned from the method. I suppose you could also call stubs called fakes or dummies.\nA mock stubs a method but then lets you assert that the method was called (optionally with arguments).\nA spy is just another \"flavor\" of mock -- that is, you still stub a method and you still can assert the method was called. The only thing that differs between mocks and spies is that with a mock you assert the stubbed method was called before you've called the method you are testing. With a spy, you make the assertion AFTER.\nA \"test double\" wraps up all of these concepts (stub, mock, spies, etc.).\nThat is what I understand the difference to be (mostly taken from Ruby's rr library)... whether or not any of this is actually true, I'm not sure. But I think Jasmine uses these definitions too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "darylkulak", "authorAssociation": "NONE", "createdAt": "2011-09-26T17:14:45Z", "contents": "-1 for me", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zealoushacker", "authorAssociation": "NONE", "createdAt": "2011-09-28T18:16:29Z", "contents": "+/- 0\n-1 The wiki page on Spies (https://github.com/pivotal/jasmine/wiki/Spies) clearly states the functionality:\n\nJasmine integrates 'spies' that permit many spying, mocking, and faking behaviors.\nA 'spy' replaces the function it is spying on.\n\n+1 Agree with @krsmes about questionable naming of the Klass.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T05:51:35Z", "contents": "As part of the clean-up around 2.0, I'm closing this. No change planned.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN"], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODI=", "title": "2.0", "description": "Possibly Backwards incompatible changes", "createdAt": "2011-06-19T04:00:24Z", "dueOn": null, "number": 2, "closed": true}}, {"repo_name": "jasmine/jasmine", "issue_id": 89, "url": "https://github.com/jasmine/jasmine/issues/89", "title": "Add the function properties to the spy object", "contents": "Jasmine should add the properties from the function being spied to the spy object.\nExample:\n// my code\n\nobj = {};\nobj.method = function(){\n  console.log('im gonna be spied');\n};\nobj.method.property = true;\n\n// inside an it\n\nspyOn(obj, 'method');\nexpect(obj.method.property).not.toBeUndefined();\nCurrently this property is being undefined, but it should be true, as i set.\nI've made the fix, but its not on my fork.\nWill work on creating the fix and specs for this.", "createdAt": "2011-04-20T22:34:33Z", "updatedAt": "2011-06-19T04:02:44Z", "closedAt": "2011-06-19T04:02:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fabiomcosta", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "fabiomcosta", "company": "@godaddy "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T04:02:43Z", "contents": "Marked as 1.2. The story in Tracker is here: https://www.pivotaltracker.com/story/show/14177231\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODA=", "title": "1.2", "description": "A bug-fix and minor-feature release.", "createdAt": "2011-06-19T03:25:39Z", "dueOn": null, "number": 1, "closed": false}}, {"repo_name": "jasmine/jasmine", "issue_id": 91, "url": "https://github.com/jasmine/jasmine/issues/91", "title": "Documentation bug", "contents": "There is a typo in example in the documentation on spy\nhttp://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Spy.html\nandCallFake(fakeFunc)\nCalls an alternate implementation when a spy is called.\nvar baz = function() {\n// do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );\nThe example uses '.andCall' it should be '.andCallFake' instead", "createdAt": "2011-04-27T16:47:43Z", "updatedAt": "2011-06-19T04:04:14Z", "closedAt": "2011-06-19T04:04:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "georges", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "georges", "company": "Ternary Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T04:04:14Z", "contents": "Wrote a Tracker story: https://www.pivotaltracker.com/story/show/14739245\nShould get fixed in 1.2. Closing on Github.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODA=", "title": "1.2", "description": "A bug-fix and minor-feature release.", "createdAt": "2011-06-19T03:25:39Z", "dueOn": null, "number": 1, "closed": false}}, {"repo_name": "jasmine/jasmine", "issue_id": 92, "url": "https://github.com/jasmine/jasmine/issues/92", "title": "Allow disabling of error catching (useful for bad stacktrace browsers)", "contents": "It would be nice to be able to conditionally turn off error catching while trying to debug errors - for instance when trying to figure out an error in anything other than FireFox. ;)\nhttps://github.com/pivotal/jasmine/blob/master/lib/jasmine.js#L979", "createdAt": "2011-04-27T19:27:47Z", "updatedAt": "2012-07-30T05:37:40Z", "closedAt": "2011-06-19T15:29:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "knzconnor", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "knzconnor", "company": "Cloud City Development"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "geddski", "company": "Domo"}, {"login": "shawndrost", "company": null}, {"login": "kaelzhang", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-02T05:10:17Z", "contents": "Is the stack trace commit an improvement for this case?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "knzconnor", "authorAssociation": "NONE", "createdAt": "2011-06-02T06:48:34Z", "contents": "Perhaps.  The main concern was what to do with the obnoxiously hard to track down errors that have no useful stack track.  In those cases its nice to do debugging in any of the browsers (even IE's) error consoles and that sometimes works best if you can turn errors on.\nSwallowing errors entirely with no recourse works great for 95% of the use, admittedly, but sometimes you do have to bust out a debugger.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T04:04:56Z", "contents": "Tim, did you have some code for this? Or is it just a feature request?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "knzconnor", "authorAssociation": "NONE", "createdAt": "2011-06-19T04:21:51Z", "contents": "It was a feature request, hence the \"it would be nice\" language. It came up due to a problem running the test in IE on a client project.  I no longer remember exactly what the code that triggered the bug was.  It would been nice to be able to bubble the error, so it'd get caught by the debugger on it's own, rather than breakpointing it, is all.\nNo big deal if that's a pain.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "knzconnor", "authorAssociation": "NONE", "createdAt": "2011-06-19T04:23:02Z", "contents": "Oh, my inclusion of a line number was just a pointer to where the rescue happens, I had no implementation of any disableErrorCatching option, or anything.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T15:29:07Z", "contents": "OK. Closing for now. The better stack trace should help a bunch in these situations. If not, we'll revisit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2011-08-20T00:40:35Z", "contents": "I'd really like this feature. I've been evangelizing Jasmine but today a friend of mine tried it out and had the same issue where the browser error was hidden by Jasmine. He had to run his code in a seperate sandbox to see the issue. QUnit has a nice little checkbox for disabling the error catching. Could you add the same to Jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shawndrost", "authorAssociation": "NONE", "createdAt": "2012-04-16T22:54:32Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kaelzhang", "authorAssociation": "NONE", "createdAt": "2012-07-30T05:37:40Z", "contents": "+1\nThis feature is really helpful for me. To solve the issue which has been captured by jasmine, I had to write a simple piece of code to imitate the Jasmine APIs. In some old browsers, stack trace can't help indead.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 94, "url": "https://github.com/jasmine/jasmine/issues/94", "title": "spyOn(obj, \"method\").withArgs(\"a\", \"b\").andReturn(\"c\")", "contents": "RSpec stubs let you specify return values for specific invocations.  It would be nice if spyOn could do the same thing.  The current workaround is to use andCallFake with a big conditional:\nspyOn(obj, \"method\").andCallFake(function(a, b) {\n  if (a == \"a\" && b == \"b\") {\n    return \"c\";\n  } else {\n    throw \"Unexpected arguments for method()\"\n  }\n}\n\nwhich is a lot of boilerplate once you use it a few times.", "createdAt": "2011-05-15T16:45:16Z", "updatedAt": "2017-11-10T18:07:37Z", "closedAt": "2011-06-19T04:06:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Peeja", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "Peeja", "company": "CircleCI"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "DyegoCosta", "company": null}, {"login": "gotofritz", "company": null}, {"login": "johnjcorcoran", "company": "7digital"}, {"login": "sarod", "company": "Semarchy"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "draconteus", "company": "@emartech "}, {"login": "devkeydet", "company": "Microsoft"}], "comments_count": 9, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-05-15T17:49:58Z", "contents": "Interesting thought. It leads to code like this:\nspyOn(obj, 'method').withArgs('a','b').andReturn('c');\nobj.withArgs('m','n').andReturn('d');\n\nCan we do better?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T04:06:56Z", "contents": "Closing.\nWe're about to have a good discussion about this on the mailing list.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DyegoCosta", "authorAssociation": "NONE", "createdAt": "2013-03-06T14:46:05Z", "contents": "Is there any way to do that now a days?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gotofritz", "authorAssociation": "NONE", "createdAt": "2014-01-29T14:42:12Z", "contents": "So, what was the outcome of the good discussion?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjcorcoran", "authorAssociation": "NONE", "createdAt": "2015-03-23T11:58:28Z", "contents": "This seems like a fairly fundamental part of a testing framework, so I'm surprised that it's not explictly supported. Is there a better suggested alternative than using andCallFake and conditionals? Doing that seems sloppy and error-prone.\nNot checking the arguments used in function calls seems even worse, as breaking code changes can be made without any tests failing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sarod", "authorAssociation": "NONE", "createdAt": "2015-12-10T09:03:25Z", "contents": "@infews this feature would be very useful. Could you give us a bit more insight on why this was closed.\nI can't find anything on the jasmine mailing list except a similar request from 2014 that is still without response. Are you talking about another mailing list?\nWhat was the conclusion of the \"good discussion\"? Did you conclude it was useless or not doable?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-01-06T23:29:05Z", "contents": "The current plan to support this kind of functionality is to see how far we can get if we allow users to specify custom SpyStrategies. We haven't gotten the time to implement this feature yet, but would be happy to review a pull request to implement custom SpyStrategies.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "draconteus", "authorAssociation": "NONE", "createdAt": "2017-10-11T13:22:20Z", "contents": "Is there any progress about this? Does anybody working on it to make real?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "devkeydet", "authorAssociation": "NONE", "createdAt": "2017-11-10T18:07:37Z", "contents": "I would like to know too.  Currently, I use sinon stubs for this:\nsinon.stub(obj, \"functionName\").withArgs(\"matchingValue\").returns(\"somevalue\");\nThis is really the only thing I use sinon for instead of Jasmine spies.  So it would be great to eliminate the need for sinon.", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 95, "url": "https://github.com/jasmine/jasmine/issues/95", "title": "createSpyObj should not require a list of spys", "contents": "Sometimes I need to create a test double which doesn't have any stubs or mocks.  I'd like to use the same interface for those.  It would be nice if jasmine.createSpyObj(\"Article\") would not raise an error, and simply give me a unique test double.\nSince the object isn't spying on anything, it might also be a good idea to change the name to jasmine.double() to match RSpec.", "createdAt": "2011-05-15T17:02:53Z", "updatedAt": "2011-05-15T20:40:04Z", "closedAt": "2011-05-15T17:35:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Peeja", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Peeja", "company": "CircleCI"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-05-15T17:35:38Z", "contents": "If you're not making function properties that need Spy functionality then why not just make a JavaScript object?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Peeja", "authorAssociation": "NONE", "createdAt": "2011-05-15T20:40:04Z", "contents": "Because I still want to give it a name.  And because I want it to match my other test doubles.  I've tried just saying\narticle = {}\n\nand even\narticle = {name: \"Article\"}\n\nand next to a bunch of jasmine.createSpyObj() calls it's confusing to read.  They're fundamentally the same thing, one just has 0 stubs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 97, "url": "https://github.com/jasmine/jasmine/issues/97", "title": "Jasmine website bugs", "contents": "hi\non the http://pivotal.github.com/jasmine/ page, there is a link to\nNode.js, but it has a 'e' on http:// so the link obviously doesn't\nwork because there is no such thing as httpe://\nhttpe://nodejs.org\nit should be http://\nalso the \"fork me on github\" doesn't work", "createdAt": "2011-05-28T03:47:31Z", "updatedAt": "2011-06-19T03:21:14Z", "closedAt": "2011-06-19T03:21:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "diegoviola", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "diegoviola", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-19T03:21:14Z", "contents": "Just fixed the Node bug in the repo. Will look at the \"Fork Me\" link. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 99, "url": "https://github.com/jasmine/jasmine/issues/99", "title": "Online API docs' _global_ section link broken", "contents": "API docs => click global (http://pivotal.github.com/jasmine/jsdoc/symbols/_global_.html) => \"Page does not exist!\"", "createdAt": "2011-06-15T12:31:12Z", "updatedAt": "2013-03-28T20:24:41Z", "closedAt": "2013-03-27T06:11:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ekantola", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "ekantola", "company": "Futurice"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "pivotale20", "company": "Pivotal Labs"}, {"login": "mullr", "company": null}, {"login": "kyusu", "company": null}, {"login": "machineghost", "company": null}, {"login": "paulhodge", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-06-20T06:00:08Z", "contents": "This is likely an issue w/ how github pages are hosted and how the URLs are generated by jsdoc.\nWe're probably going to change doc systems soonish. Hopefully this is a quick fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pivotale20", "authorAssociation": "NONE", "createdAt": "2012-01-17T20:14:08Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mullr", "authorAssociation": "NONE", "createdAt": "2012-02-20T13:36:11Z", "contents": "+2!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kyusu", "authorAssociation": "NONE", "createdAt": "2012-03-23T14:06:48Z", "contents": "+3", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "machineghost", "authorAssociation": "NONE", "createdAt": "2013-02-05T22:18:48Z", "contents": "+4\nP.S. Just in case you weren't aware, if you search for \"jasmine api\" this issue page is linked in the first result.  In other words, anyone who asks Google \"where's the Jasmine API\" is being sent to this page which basically said \"we'll fix it\" ... two years ago.  It's not exactly the best way to welcome new users Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T05:59:24Z", "contents": "Thanks @machineghost . We missed ripping the old jsdocs out of the repo and the github pages when we pushed the Introduction page last year. I've put this Tracker story in to kill them super dead.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulhodge", "authorAssociation": "NONE", "createdAt": "2013-03-28T20:24:41Z", "contents": "I'm in the same boat.. trying to find API level documentation and google is turning up empty handed. Are there any API docs in existence? There's a stale link to jsdocs on the wiki (https://github.com/pivotal/jasmine/wiki) that can be fixed/removed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": {"id": "MDk6TWlsZXN0b25lMTY2ODA=", "title": "1.2", "description": "A bug-fix and minor-feature release.", "createdAt": "2011-06-19T03:25:39Z", "dueOn": null, "number": 1, "closed": false}}, {"repo_name": "jasmine/jasmine", "issue_id": 103, "url": "https://github.com/jasmine/jasmine/issues/103", "title": "Missed test results when using \"wait\" and \"runs\"", "contents": "I am using jasmine 1.0.2 combined with jsTestDriver.\nI have a test case which looks a bit like:\ndescribe('My unit test', function() {\n    beforeEach(function() {\n        // Initialize environment\n    });\n\n    describe('Tests', function() {\n\n        it('can do test 1', function() {\n            doSomething();\n            wait(100);\n            runs(function() {\n                expect(myTest).toBeTruthy();\n            });\n        });\n\n        it('can do test 2', function() {\n            doSomething();\n            wait(100);\n            runs(function() {\n                expect(myTest).toBeTruthy();\n            });\n        });\n   });\n});\nWhat happens now are 2 problems. As soon as 'can do test 1' has called 'runs()', then the test ends, the beforeEach() is called for 'can do test 2'. However, the expect for 'can do test 1' has not been executed yet, and actually fails because the beforeEach reinitializes the environment. So apparently using an expect() call in 'runs()' will not work correctly.\nThe second problem, makes things even worse. Namely, the expect() call in 'can do test 1' fails (because of the enviroment which has changed). But this is only reported in the Browser console (as Uncaught AssertError), but not in the test results which are reported from jsTestDriver, so when you have a lot of tests it is quite easy to fail to see the unit tests were actually failing because of problem 1.", "createdAt": "2011-06-23T07:58:40Z", "updatedAt": "2013-03-06T06:02:04Z", "closedAt": "2013-03-06T06:02:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2011-07-19T08:23:32Z", "contents": "Well apparently using runs() without wait() will also cause a problem.\nAs soon as I do:\nruns(function() {\n  expect(true).toBeFalsy()\n}\n\njsTestDriver will report success, while the Browser console indicates that the expect() statement has failed. In my unit test system I have managed to workaround the waits() bug, but I really need runs() to work as advertised.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-23T20:26:20Z", "contents": "I've added a story to check this out (https://www.pivotaltracker.com/story/show/16163513). We'll check this out soon -- sorry for the late reply.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:02:04Z", "contents": "Closing this. Version 2.0 removes the runs/waits syntax and we have much better tests on master for run order of specs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 105, "url": "https://github.com/jasmine/jasmine/issues/105", "title": "Node.js compatibility", "contents": "Please make Jasmine Node.js compatible.\nI know there are some 3rd party libraries for this, but it would be better if it was built into the official release.\nThanks.", "createdAt": "2011-07-07T06:58:25Z", "updatedAt": "2011-09-08T23:07:58Z", "closedAt": "2011-07-08T02:25:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "timoxley", "company": "unit.io"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "geddski", "company": "Domo"}], "comments_count": 3, "comments_data": [{"authorLogin": "timoxley", "authorAssociation": "NONE", "createdAt": "2011-07-08T00:04:31Z", "contents": "+1 the third party libraries leave a lot to be desired.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-08T02:25:17Z", "contents": "We're heading in that direction - thanks for the Feedback.\n1.1 adds a Console Reporter. We're moving to having a proper NPM over the next couple of releases. Checkout the backlog on Pivotal Tracker for our current priorities: https://www.pivotaltracker.com/projects/10606", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2011-09-08T23:07:58Z", "contents": "So the backlog says this is scheduled for Sept. 19th, is that correct?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 106, "url": "https://github.com/jasmine/jasmine/issues/106", "title": "toHaveBeenCalledWith feature", "contents": "Hey guys,\nI want to add a feature to allow a more javascript like behaviour on asserting the arguments on spy calls but I can't seem to settle on the name of this new expectation.\nvar foo = { bar: function (a, b, c) {} };\n\nspyOn(foo, \"bar\");\n\nfoo.bar(1, 2, 3);\n\nexpect(foo.bar).toHaveBeenCalledWith(1, 2 ,3);  //will pass\nexpect(foo.bar).toHaveBeenCalledWith(1);        //will fail (would love if this passed)\n\nIt would be awesome if we could do something like:\nexpect(foo.bar).toHaveBeenCalledWithExactly(1);  // will fail\nexpect(foo.bar).toHaveBeenCalledWith(1);         // will pass\n\nBut that breaks the current functionality and would cause general chaos in existing tests.  So that leaves us the requirement of needing a new expectation name.  While I code this feature I was hoping some people would help me out with naming it.  Here are some ideas I have had quickly:\nexpect(foo.bar).toHaveBeenCalledLike(1);\nexpect(foo.bar).toHaveBeenCalled(1);     //allow arguments on toHaveBeenCalled?\nexpect(foo.bar).toHaveBeenCalledWithAtLeast(1, 2);", "createdAt": "2011-07-14T18:44:18Z", "updatedAt": "2011-07-23T20:11:06Z", "closedAt": "2011-07-23T20:11:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gtanner", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gtanner", "company": "bitHound"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-23T20:11:06Z", "contents": "I think this behavior is a little surprising for it to be core functionality -- I don't often want my tests to be fuzzy, and when I do, there's the option of using jasmine.any(). That said, I think you could easily add this to your suites using addMatchers, and I encourage you to share your matchers on github so other folks can add them as well.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 107, "url": "https://github.com/jasmine/jasmine/issues/107", "title": "Code Coverage", "contents": "Jasmine is a great JS test framework but it yields to not-so-great ones like jsTestDriver, Expresso because it is missing code coverage, which is a must have for any large project. Are there any plans to work on CC?\nP.S. Iasked the same question in a post which (as I noticed later) was closed", "createdAt": "2011-07-15T17:37:40Z", "updatedAt": "2013-03-06T06:11:46Z", "closedAt": "2013-03-06T06:11:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vaustymenko", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "vaustymenko", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "maraujop", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-23T20:08:09Z", "contents": "I like the idea of code coverage, but I think internally we've decided it's not a core responsibility of the framework and should instead be provided by a plugin. We are moving towards better hooks for plugins to leverage on the Jasmine gem (http://github.com/pivotal/jasmine-gem) soon. I'm very open to adding functionality to Jasmine and the Jasmine gem that would support the development of such a plugin. Does this help cover your issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maraujop", "authorAssociation": "NONE", "createdAt": "2012-07-06T15:04:47Z", "contents": "what's the status of this currently?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:11:46Z", "contents": "There have been a couple of attempts to add code coverage. It won't be part of Jasmine core but some sort of add-on. So the idea is still open but there has not been a solution we've seen that's not monkey patched Jasmine all to hell.\nClosing as this is a feature request and not an issue per se.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 108, "url": "https://github.com/jasmine/jasmine/issues/108", "title": "Jasmine and rails 3.1 asset pipeline", "contents": "Jasmine 1.1.0rc3 still use the public/javascripts and not assets/javascripts", "createdAt": "2011-07-16T16:54:49Z", "updatedAt": "2011-07-23T20:04:47Z", "closedAt": "2011-07-16T17:00:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nguyenchiencong", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nguyenchiencong", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-16T19:36:28Z", "contents": "The way to override the default locations for your project files is to make your own Jasmine::Config class. Here's a good example of how to do this with the Asset Pipeline: http://pivotallabs.com/users/jdean/blog/articles/1778-writing-and-running-jasmine-specs-with-rails-3-1-and-coffeescript", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nguyenchiencong", "authorAssociation": "NONE", "createdAt": "2011-07-16T19:39:47Z", "contents": "I found another way: change the jasmine.yml file and then add the guard and guard coffeescript gem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-23T20:04:47Z", "contents": "Yeah, I believe you should simply be able to change the default source path in jasmine.yml to point directly to the assets directory. The only funny problem here is that jquery, jquery-ui, and jquery-ujs won't get included by default. I've added a story (https://www.pivotaltracker.com/story/show/16163229) to make Jasmine understand where to get default Rails 3.1 files, and I think we have a couple pulls related to the asset pipeline in the queue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 109, "url": "https://github.com/jasmine/jasmine/issues/109", "title": "empty ul in the README", "contents": "There's an empty ul in the README under What's Here?. I found it distracting.", "createdAt": "2011-07-18T04:06:57Z", "updatedAt": "2013-03-06T06:02:57Z", "closedAt": "2013-03-06T06:02:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benatkin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "benatkin", "company": "@resourcesco @apicomponents @diodejs "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:02:57Z", "contents": "Closing. Edit long since fixed, I'm guessing. Thanks for the catch.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 110, "url": "https://github.com/jasmine/jasmine/issues/110", "title": "Jasmine ruby gem uses deprecated Gem.available?", "contents": "I just did a \"jamine init\" with Ruby 1.8.7, Gem 1.8.5 and Jamine Gem 1.0.2.1 with this result:\n$ jasmine init\nNOTE: Gem.available? is deprecated, use Specification::find_by_name. It will be removed on or after 2011-11-01.\nGem.available? called from /Users/ssc/.rvm/gems/ruby-1.8.7-p352/gems/jasmine-1.0.2.1/lib/jasmine/base.rb:64.\nJasmine has been installed with example specs.\n...\nJust as an info for you...\nKeep up the great work!\nKind Regards\nStefan", "createdAt": "2011-07-20T12:57:32Z", "updatedAt": "2011-07-20T13:11:38Z", "closedAt": "2011-07-20T13:11:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefanscheidt", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "stefanscheidt", "company": "REWE Digital GmbH"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-20T13:11:38Z", "contents": "This should be fixed in the latest RC - see the commit here: jasmine/jasmine-gem@1b20a6f\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 113, "url": "https://github.com/jasmine/jasmine/issues/113", "title": "Feature: init() and destroy()", "contents": "I need a way to init() things inside a describe for all the tests. Then when all the tests are run inside describe run destroy().\nThat would be very useful. YUITest has this kind of setup:\ninit()\ndestroy()\nsetUp() is equivalent to Jasmine's beforeEach()\ntearDown is equivalent to Jasmine's afterEach()", "createdAt": "2011-07-26T10:02:41Z", "updatedAt": "2012-01-30T21:24:36Z", "closedAt": "2012-01-30T21:24:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "arian", "company": "Symbaloo"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "arian", "authorAssociation": "NONE", "createdAt": "2011-07-26T10:59:12Z", "contents": "I guess this is what you want: #56", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-07-26T18:11:28Z", "contents": "Are you looking for beforeAll/afterAll, or do you just want to call your own setup/teardown functions in beforeEach/afterEach?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2011-07-26T20:09:52Z", "contents": "I'm looking for beforeAll and afterAll.\nI think that pull request should be merged in", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-01-30T21:24:36Z", "contents": "Closing, looks like we're not doing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 114, "url": "https://github.com/jasmine/jasmine/issues/114", "title": "Type matching array/object bug", "contents": "Hi there, I love Jasmine it makes testing wonderful!\nI've found a bug with Jasmine's type matching. Arrays match as objects, for example the following expectation passes:\nexpect({}).toEqual([]);\n\nAfter digging into the source code I would like to propose an addition at line 932 of jasmine/lib/jasmine-core/jasmine.js:\nif ((jasmine.isArray_(a) && !jasmine.isArray_(b)) || (!jasmine.isArray_(a) && jasmine.isArray_(b))) {\n  return false;\n}", "createdAt": "2011-07-26T23:02:36Z", "updatedAt": "2013-05-27T19:04:53Z", "closedAt": "2013-05-26T19:57:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "peterjwest", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "peterjwest", "company": "@diffblue"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T19:57:28Z", "contents": "Closing. The branch matchers_redo shows the \"new\" equals function, borrowed from Underscore, that handles this case. I've also added a spec that covers it so we don't regress.\nThanks for finding this and helping make Jasmine awesome.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 115, "url": "https://github.com/jasmine/jasmine/issues/115", "title": "Jasmine cannot handle scripts with a canvas", "contents": "I am trying to use jasmine to test events bound to an html5 canvas.\nMy scripts are visible here https://gist.github.com/1114683\npresentation.js breaks at line 44 with the error that canvas is undefined.  When I run the application outside jasmine I get no issues.\nI also have a better explanation of the problem at stack overflow here\nhttp://stackoverflow.com/questions/6878887/js-breaks-with-jasmine\nSo, I have been looking into this and what I can tell is beforeEach runs after other scripts and the dom is loaded.  This causes errors with things like $.get()", "createdAt": "2011-07-29T20:55:12Z", "updatedAt": "2013-03-06T06:05:00Z", "closedAt": "2013-03-06T06:05:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "austinbv", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "austinbv", "company": "@braintree"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:05:00Z", "contents": "Closing as part of 2.0 cleanup. This looks like a load order problem which is now more robust than when this is written.\nPlease re-open if this is still a problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 116, "url": "https://github.com/jasmine/jasmine/issues/116", "title": "jasmine-gem raise conflicts", "contents": "yanoo@kelemen ~ $ jasmine init\n/usr/local/lib/site_ruby/1.9.1/rubygems/specification.rb:1615:in `raise_if_conflicts': Unable to activate actionpack-3.0.9, because rack-1.3.2 conflicts with rack (~> 1.2.1) (Gem::LoadError)\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/specification.rb:738:in `activate'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/specification.rb:764:in `block in activate_dependencies'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/specification.rb:758:in `each'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/specification.rb:758:in `activate_dependencies'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/specification.rb:742:in `activate'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems.rb:209:in `rescue in try_activate'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems.rb:206:in `try_activate'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/custom_require.rb:58:in `rescue in require'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/custom_require.rb:35:in `require'\n    from /usr/lib/ruby/gems/1.9.1/gems/jasmine-1.1.0.rc3/lib/jasmine/railtie.rb:1:in `<top (required)>'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'\n    from /usr/lib/ruby/gems/1.9.1/gems/jasmine-1.1.0.rc3/lib/jasmine.rb:12:in `<top (required)>'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/custom_require.rb:55:in `require'\n    from /usr/local/lib/site_ruby/1.9.1/rubygems/custom_require.rb:55:in `require'\n    from /usr/lib/ruby/gems/1.9.1/gems/jasmine-1.1.0.rc3/bin/jasmine:4:in `<top (required)>'\n    from /usr/bin/jasmine:19:in `load'\n\nDebian, ruby1.9.2, rubygems 1.8.6", "createdAt": "2011-08-03T11:45:16Z", "updatedAt": "2011-08-03T11:52:16Z", "closedAt": "2011-08-03T11:52:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jandudulski", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jandudulski", "company": "Monterail.com"}], "comments_count": 1, "comments_data": [{"authorLogin": "jandudulski", "authorAssociation": "NONE", "createdAt": "2011-08-03T11:52:16Z", "contents": "wrong repo", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 118, "url": "https://github.com/jasmine/jasmine/issues/118", "title": "Bug when no tests run", "contents": "When no tests run (i,.e. total === 0) then the status bar is still GREEN. should be RED to indicate no tests have passed, because none exist.\nWhen running a test plan in IE the first time, some obscure syntax error prevented any tests from running, but the status bar fooled me into thinking everything was ok.\nIdeally one would be able to express how many tests are expected and have the test plan verify that number.", "createdAt": "2011-08-09T10:56:03Z", "updatedAt": "2013-07-21T17:41:10Z", "closedAt": "2013-07-21T17:41:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bcowgill", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "bcowgill", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "peterjwest", "company": "@diffblue"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-10T17:31:16Z", "contents": "This is a tricky problem -- we can certainly make the bar red if 0 tests run, but if you have two suites, and one fails to run because of a syntax error, we literally don't know about those specs, so we can't tell you they've failed. This is a known problem, but we haven't hit upon a fix yet. I think the one promising idea is to check for any thrown exceptions and treating those as fails in the runner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "peterjwest", "authorAssociation": "NONE", "createdAt": "2011-08-12T22:47:08Z", "contents": "What about requiring a final test for each suite which passes if it runs?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcowgill", "authorAssociation": "NONE", "createdAt": "2011-09-07T12:19:38Z", "contents": "For the moment I'm adding a final suite to verify the correct number of tests run.\ndescribe(\"END\", function () {\nit(\"should have correct number of describe() blocks\", function () {\nexpect(jasmine.currentEnv_.nextSuiteId_).toEqual(Test.totalSuites);\n});\nit(\"should have correct number of it() blocks\", function () {\nexpect(jasmine.currentEnv_.nextSpecId_).toEqual(Test.totalSpecs);\n});\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-21T17:41:10Z", "contents": "Closing. There is more clarity now on master when no tests are run.  Not as much as requested here, but we're cleaning up old issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 119, "url": "https://github.com/jasmine/jasmine/issues/119", "title": "Allow toThrow to take an exception class", "contents": "and pass if the thrown exception is an instance of that class.\nMany other Testing frameworks do it like this, and I find it very usefull if I want to specify the type of the exception thrown, but don't care about it's message etc.", "createdAt": "2011-08-17T05:56:44Z", "updatedAt": "2011-08-17T06:12:47Z", "closedAt": "2011-08-17T06:12:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dwt", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "dwt", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2011-08-17T06:12:47Z", "contents": "see #120", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 121, "url": "https://github.com/jasmine/jasmine/issues/121", "title": "Is it feasible for tests to run in a blank context?", "contents": "I'm rather tired of having to declare variables at particular scope levels, as such:\ndescribe 'foo', ->\n  # bar has to be declared here even though we can't assign anything to it yet\n  bar = null\n  beforeEach ->\n    runs ->\n      # async stuff...\n      bar = $('td tr table p body').text()\n  it 'should you betcha', ->\n    expect(bar).toEqual(\"TANGO!\")\nI believe the RSpecky way to do it would be using member variables, i.e. @foo. This technically works in jasmine, but the context that the tests run in is the jasmine spec object itself, which has a number of properties that could accidentally be overridden (in fact my team started out using jasmine this way and did end up overriding something accidentally).\nSo I'm wondering if it's feasible to instead run the tests in the context of a blank object ({}), so that arbitrary variables could be defined and used without worrying about scoping. I assume the only reason this couldn't be done is that some methods are expected (needed?) to be on the context, e.g. addMatchers.\nIf this kind of change would be accepted, I'd be happy to try to code it myself. Just looking for comments.", "createdAt": "2011-08-19T21:31:44Z", "updatedAt": "2011-08-19T22:12:06Z", "closedAt": "2011-08-19T22:12:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gfredericks", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gfredericks", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-19T22:12:06Z", "contents": "The scoping works because Jasmine is JavaScript. And it's the preferred way to share variables across specs because Jasmine doesn't have to do anything special to support it. As I've gotten better at JavaScript I've come to like scoping even more.\nThis suggestion is coming up more frequently recently due to a few reasons. The increase in interest in CoffeScript, Jasmine being in the PeepCode on CoffeScript, etc. But even RSpec is moving towards the let() syntax instead of member variables.\nIn the future we'll be moving towards hiding Jasmine's guts away from \"this\" in order to avoid unexpected collisions that are hard to track down. But it's a larger refactor and thus easily deferrable until we can be comprehensive about it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 122, "url": "https://github.com/jasmine/jasmine/issues/122", "title": "global functions reference 404ing", "contents": "on the API reference, global functions are linked to be at http://pivotal.github.com/jasmine/jsdoc/symbols/_global_.html but that currently 404s", "createdAt": "2011-08-21T20:42:19Z", "updatedAt": "2011-08-22T01:58:30Z", "closedAt": "2011-08-22T01:32:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wyattdanger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wyattdanger", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-08-22T01:32:21Z", "contents": "known issue with trying to host JSDocs on Github pages. It's in our backlog to be fixed. Meanwhile, you can clone the repo and look at the jsdocs locally.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wyattdanger", "authorAssociation": "NONE", "createdAt": "2011-08-22T01:58:30Z", "contents": "Thanks", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 124, "url": "https://github.com/jasmine/jasmine/issues/124", "title": "`rake jasmine` doesn't work with 1.9", "contents": "I just added Jasmine to a Rails engine and tried to run rake jasmine, but I got the following error:\n\"rake aborted! no such file to load -- spec/javascripts/support/jasmine_config.rb\"\nHowever, I did have that file. I'm using Ruby 1.9.2.\nTo solve this, my coworker figured out that we could add the following to the Rakefile, just above require 'jasmine':\n# Push the current dir onto the load path\n$:.unshift('.')\nThis is because Ruby 1.9 does not automatically include the directory of the current file in the load path.\nSee http://stackoverflow.com/questions/2900370/why-does-ruby-1-9-2-remove-from-load-path-and-whats-the-alternative", "createdAt": "2011-08-25T18:04:20Z", "updatedAt": "2011-08-25T19:42:30Z", "closedAt": "2011-08-25T19:42:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nathanl", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "nathanl", "company": "@DockYard "}], "comments_count": 1, "comments_data": [{"authorLogin": "nathanl", "authorAssociation": "NONE", "createdAt": "2011-08-25T19:42:30Z", "contents": "My bad - old version of Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 125, "url": "https://github.com/jasmine/jasmine/issues/125", "title": "Jasmine server calls String#each - not available in Ruby 1.9", "contents": "Jasmine server blows up when running my tests in Ruby 1.9 because it is calling String#each. In 1.9, that should be String#each_line.", "createdAt": "2011-08-25T18:56:30Z", "updatedAt": "2011-08-25T19:42:17Z", "closedAt": "2011-08-25T19:42:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nathanl", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "nathanl", "company": "@DockYard "}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 126, "url": "https://github.com/jasmine/jasmine/issues/126", "title": "jasmine_tags extension", "contents": "Hello,\njust wanted to let you know that I wrote a little extension which lets you annotate jasmine spec with tags. You can then choose to run only specs with certain tags or exclude (for example slow) specs from run.\nIf you are interested, take a look at tf/jasmine_tags.\nBest,\nTim", "createdAt": "2011-08-25T20:41:39Z", "updatedAt": "2015-11-17T01:03:43Z", "closedAt": "2011-09-10T00:35:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tf", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tf", "company": "Codevise Solutions"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "danielsiwiec", "company": "Slalom"}], "comments_count": 3, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-09-10T00:35:30Z", "contents": "Super cool! This is something we might consider bringing into Jasmine, and a great example of how people can modify Jasmine to do what they want without having to get their changes into the master branch (where we tend to be pretty conservative about accepting changes as we want to make sure we stay as compatible with as many JS interpreters as possible).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danielsiwiec", "authorAssociation": "NONE", "createdAt": "2015-11-17T00:44:50Z", "contents": "@ragaskar Hi, is there still any desire to bring this kind of functionality into jasmine? Would love to see cucumber style tags. I'd be happy to work on a PR if there's agreement on it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-11-17T01:03:43Z", "contents": "@slackersoft is probably the person to ask about this; I haven't been doing much maintenance of Jasmine lately.\nFWIW, we've been trying to keep the core simple as it makes it easier to maintain, and in service of this have done a lot of work to allow people to extend jasmine without having to get changes/new features in core. I expect if this is possible to achieve without modifying core, we'd be unlikely to pull it in.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 127, "url": "https://github.com/jasmine/jasmine/issues/127", "title": "TAP output for Jasmine?", "contents": "I've just started learning about BDD -- I'm a JavaScript programmer working with node.js and browsers, so Jasmine is a natural point of focus for me to learn about and experiment with this style of development and testing.  Previously, I've mainly focused on \"classic\" unit testing, with the help of various tools.\nI'm also aware of a recent surge of interest within the node.js community in TAP-compliant unit testing and harnesses, for use in \"machine-to-machine\" continuous integration systems:\nhttp://testanything.org/wiki/index.php/Main_Page\nhttps://github.com/isaacs/node-tap\nI'm curious whether the BDD/jasmine folks feel that TAP and BDD can go together (e.g. could jasmine be modified or wrapped to serve as a TAP producer/consumer?); or whether perhaps they're incompatible approaches.\nThanks for your feedback, and I've enjoyed my experience with jasmine so far.", "createdAt": "2011-09-01T18:36:27Z", "updatedAt": "2011-09-10T00:33:01Z", "closedAt": "2011-09-10T00:33:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "michaelsbradleyjr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "michaelsbradleyjr", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-09-10T00:33:01Z", "contents": "Jasmine doesn't yet have TAP support, although it sounds like it could be a cool feature -- one that could be added by a third-party if desired (this could be you!). See discussion here for more info: https://groups.google.com/forum/#!searchin/jasmine-js/jasmine$20TAP/jasmine-js/KIMzlz9MRbg/mvV-mVktqAIJ", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 128, "url": "https://github.com/jasmine/jasmine/issues/128", "title": "support for .with() modifier for spies", "contents": "RSpec supports a mocking syntax that allows the developer to define expected parameters, in Jasmine I would expect this to be written as:\nspyOn(foo, 'bar').with('bat').andReturn('baz');\nspyOn(foo, 'bar').with('baz').andReturn('bat');\nThis allows me to avoid writing a andCallFake() with a switch statement in it for functions that call helper functions multiple times with different parameters.\nIt would be an failure if foo.bar() was never called with the expected argument\nIf there was not a spyOn without a with modifier it would be an failure to call the function with any other argument than those specified\nThis avoids needing to use .toHaveBeenCalledWith() in many circumstances.", "createdAt": "2011-09-07T18:57:52Z", "updatedAt": "2013-05-29T17:06:46Z", "closedAt": "2013-05-29T17:06:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "davidwkeith", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "davidwkeith", "company": "@TARAAI"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "searls", "company": "@testdouble"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-09-10T00:28:20Z", "contents": "I think we will be introducing this sort of syntax in the next minor release of Jasmine -- I'd like to see this common case usage of andCallFake be handled easily by jasmine with essentially this syntax -- stay tuned!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "searls", "authorAssociation": "NONE", "createdAt": "2011-09-19T13:13:42Z", "contents": "+100. I've written andCallFake hacks instead of just writing my own with() implementation way too many times.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T17:06:40Z", "contents": "I've added this story to our backlog.\nThere will be some Spies work that gets into 2.0. This is on the list for consideration.\nThanks for the suggestion!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 129, "url": "https://github.com/jasmine/jasmine/issues/129", "title": "Support for .toHaveBeenCalled().exactly(x).times() assertions on spies", "contents": "A syntax like:\nexpect(MySpy.foo).toHaveBeenCalled()exactly(5).times();\nexpect(MySpy.foo).toHaveBeenCalledWith('bar').exactly(3).times();\nexpect(MySpy.foo).toHaveBeenCalledWith('bat').exactly(2).times();\n// Helpers\nexpect(MySpy.foo).toHaveBeenCalled().once();\nexpect(MySpy.foo).toHaveBeenCalled().twice();\nwould only pass if MySpy.foo was called the specified number of times.", "createdAt": "2011-09-07T19:02:37Z", "updatedAt": "2017-09-27T12:30:51Z", "closedAt": "2013-10-02T21:20:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "davidwkeith", "authorAssociation": "NONE", "participants_count": 11, "participants_data": [{"login": "davidwkeith", "company": "@TARAAI"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "ggarnier", "company": "Jusbrasil"}, {"login": "breakphreak", "company": null}, {"login": "felipecsl", "company": "@stripe"}, {"login": "rodvlopes", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Deepakdubey90", "company": "VSS"}, {"login": "dionyziz", "company": "University of Athens"}, {"login": "Gerg", "company": null}, {"login": "BrightShadow", "company": null}], "comments_count": 14, "comments_data": [{"authorLogin": "davidwkeith", "authorAssociation": "NONE", "createdAt": "2011-09-07T19:03:38Z", "contents": "FYI .times() is a no op function only there to make the test read better.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-09-10T00:26:15Z", "contents": "Cool, we are hoping to get more elegant spy syntax into the next release so we'll take this under consideration.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ggarnier", "authorAssociation": "NONE", "createdAt": "2011-10-18T17:04:46Z", "contents": "Isn't this what spy.callCount is all about (https://github.com/pivotal/jasmine/wiki/Spies)?\nexpect(MySpy.foo.callCount).toBe(2);\nBut I agree that a syntax with exactly(n).times() would be much better.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "breakphreak", "authorAssociation": "NONE", "createdAt": "2012-06-20T14:14:52Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "felipecsl", "authorAssociation": "NONE", "createdAt": "2012-08-15T22:34:44Z", "contents": "+1.. I'm also looking for something like toHaveNotBeenCalled", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "felipecsl", "authorAssociation": "NONE", "createdAt": "2012-08-15T22:38:11Z", "contents": "Nevermind.. just found out about .not.toHaveBeenCalled", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "rodvlopes", "authorAssociation": "NONE", "createdAt": "2013-07-08T21:50:35Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T21:20:07Z", "contents": "We're looking at doing a refactor of how spy matchers work for 2.1. We'll keep something like this in mind.\nSee the tracker story here to follow along: https://www.pivotaltracker.com/story/show/58118326", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Deepakdubey90", "authorAssociation": "NONE", "createdAt": "2015-09-29T07:07:29Z", "contents": "Hi guys,\nHow to test function inside a controller like:\ncontroller :{\nvar fun = function(val){\nvar aa = \"text\"\n}\n}\nI'm not able to access above function in my unit test case fun (jasmine karma) like scope functions in controller.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-29T19:00:24Z", "contents": "@Deepakdubey90 You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dionyziz", "authorAssociation": "NONE", "createdAt": "2016-07-30T21:18:19Z", "contents": "@slackersoft The link provided to privotaltracker points to a 403. What's the status of this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-02T02:49:19Z", "contents": "@dionyziz http://jasmine.github.io/2.4/introduction.html#section-21", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "dionyziz", "authorAssociation": "NONE", "createdAt": "2016-08-02T09:06:45Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BrightShadow", "authorAssociation": "NONE", "createdAt": "2017-09-27T12:30:51Z", "contents": "currently we have something like this:\nexpect(foo.setBar).toHaveBeenCalledTimes(2);\nwe can also use less convenient method:\nexpect(foo.setBar.calls.count()).toBe(1);\nThe calls object is of type Calls and have a little bit more than just count() :-)\ninterface Calls {\n        /** By chaining the spy with calls.any(), will return false if the spy has not been called at all, and then true once at least one call happens. **/\n        any(): boolean;\n        /** By chaining the spy with calls.count(), will return the number of times the spy was called **/\n        count(): number;\n        /** By chaining the spy with calls.argsFor(), will return the arguments passed to call number index **/\n        argsFor(index: number): any[];\n        /** By chaining the spy with calls.allArgs(), will return the arguments to all calls **/\n        allArgs(): any[];\n        /** By chaining the spy with calls.all(), will return the context (the this) and arguments passed all calls **/\n        all(): CallInfo[];\n        /** By chaining the spy with calls.mostRecent(), will return the context (the this) and arguments for the most recent call **/\n        mostRecent(): CallInfo;\n        /** By chaining the spy with calls.first(), will return the context (the this) and arguments for the first call **/\n        first(): CallInfo;\n        /** By chaining the spy with calls.reset(), will clears all tracking for a spy **/\n        reset(): void;\n    }", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 130, "url": "https://github.com/jasmine/jasmine/issues/130", "title": "Can't run standalone jasmine in Node", "contents": "Not using the 3rd party jasmine-node project, how do I run jasmine in node? Here's what I have:\n//use same jasmine file in browser or node\nvar jasmine = jasmine || require('./lib/jasmine-1.1.0.rc1/jasmine').jasmine;\n//TrivialReporter works in the browser, is undefined in node.\njasmine.getEnv().addReporter(new jasmine.TrivialReporter());\njasmine.getEnv().execute();\nWhat am I missing?", "createdAt": "2011-09-08T23:34:37Z", "updatedAt": "2013-12-28T04:35:19Z", "closedAt": "2011-09-10T00:31:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "geddski", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "geddski", "company": "Domo"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "hbrls", "company": "@lattebank"}, {"login": "mainiak", "company": null}, {"login": "gfranko", "company": "Yahoo"}], "comments_count": 7, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-09-10T00:31:05Z", "contents": "jasmine doesn't yet support node; for folks with this same issue, please refer to https://groups.google.com/forum/#!topic/jasmine-js/OldFu4I1mrM/overview ... We hope to add node support soon to jasmine-core (or via another package if necessary).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2011-09-10T00:52:31Z", "contents": "ok cool, looking forward to the official node support. In the meantime the jasmine homepage probably shouldn't say\n\"Jasmine can be run anywhere you can execute JavaScript: a static web page, your continuous integration environment, or server-side environments like Node.js .\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hbrls", "authorAssociation": "NONE", "createdAt": "2013-12-26T09:31:30Z", "contents": "Is version 2.0 supporting node now?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mainiak", "authorAssociation": "NONE", "createdAt": "2013-12-26T10:17:39Z", "contents": "npm install jasmine-node", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hbrls", "authorAssociation": "NONE", "createdAt": "2013-12-27T02:17:07Z", "contents": "@mainiak I thought that was not official?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mainiak", "authorAssociation": "NONE", "createdAt": "2013-12-27T02:19:39Z", "contents": "It isn't but still only working one though :-/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gfranko", "authorAssociation": "NONE", "createdAt": "2013-12-28T04:33:45Z", "contents": "Can't wait for Node support.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 131, "url": "https://github.com/jasmine/jasmine/issues/131", "title": "1.1.0 not working with bundle exec rake jasmine, 1.0.2.0 fine", "contents": "We're using Jasmine to test the javascript in a non-Ruby application, and RVM with a Gemfile to ensure the team members' environments are consistent. Using ruby-1.9.2-p290 with bundler 1.0.18 and only rake and jasmine in the Gemfile, I get the following error when trying to run the Jasmine tests:\nmallan@reav008411m:~/work/cloud-stats(master)$ bundle exec rake jasmine\nJasmine is not available. In order to run jasmine, you must: (sudo) gem install jasmine\n\nDowngrading to jasmine-1.0.2.0 fixes the issue.\nAdding --trace to the bundle exec command doesn't add any useful information and I'm not sure how to investigate this further. Please let me know if there's anything you'd like me to do to help troubleshoot the issue.\nConsole session:\nmallan@reav008411m:~/work/cloud-stats(master)$ cat .rvmrc \nrvm --create use 1.9.2@cloud-stats > /dev/null\nmallan@reav008411m:~/work/cloud-stats(master)$ which ruby\n/Users/mallan/.rvm/rubies/ruby-1.9.2-p290/bin/ruby\nmallan@reav008411m:~/work/cloud-stats(master)$ cat Gemfile\nsource \"http://rubygems.org\"\n\ngem \"rake\"\ngem \"jasmine\"\nmallan@reav008411m:~/work/cloud-stats(master)$ rm Gemfile.lock \nmallan@reav008411m:~/work/cloud-stats(master)$ bundle install\nFetching source index for http://rubygems.org/\nUsing rake (0.9.2) \nUsing ffi (1.0.9) \nUsing childprocess (0.2.2) \nUsing diff-lcs (1.1.3) \nUsing jasmine-core (1.1.0) \nUsing rack (1.3.2) \nUsing rspec-core (2.6.4) \nUsing rspec-expectations (2.6.0) \nUsing rspec-mocks (2.6.0) \nUsing rspec (2.6.0) \nUsing json_pure (1.6.0) \nUsing rubyzip (0.9.4) \nUsing selenium-webdriver (2.5.0) \nUsing jasmine (1.1.0) \nUsing bundler (1.0.18) \nYour bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.\nmallan@reav008411m:~/work/cloud-stats(master)$ bundle exec rake jasmine\nJasmine is not available. In order to run jasmine, you must: (sudo) gem install jasmine\nmallan@reav008411m:~/work/cloud-stats(master)$ rm Gemfile.lock \nmallan@reav008411m:~/work/cloud-stats(master)$ cat Gemfile\nsource \"http://rubygems.org\"\n\ngem \"rake\"\ngem \"jasmine\", \"1.0.2.0\" # problem with jasmine-1.1.0\nmallan@reav008411m:~/work/cloud-stats(master)$ bundle install\nFetching source index for http://rubygems.org/\nUsing rake (0.9.2) \nUsing ffi (1.0.9) \nUsing childprocess (0.2.2) \nUsing diff-lcs (1.1.3) \nUsing json_pure (1.6.0) \nUsing rack (1.3.2) \nUsing rspec-core (2.6.4) \nUsing rspec-expectations (2.6.0) \nUsing rspec-mocks (2.6.0) \nUsing rspec (2.6.0) \nUsing rubyzip (0.9.4) \nUsing selenium-webdriver (2.5.0) \nUsing jasmine (1.0.2.0) \nUsing bundler (1.0.18) \nYour bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.\nmallan@reav008411m:~/work/cloud-stats(master)$ bundle exec rake jasmine\nNOTE: Gem.available? is deprecated, use Specification::find_by_name. It will be removed on or after 2011-11-01.\nGem.available? called from /Users/mallan/.rvm/gems/ruby-1.9.2-p290@cloud-stats/gems/jasmine-1.0.2.0/lib/jasmine.rb:8.\nNOTE: Gem.available? is deprecated, use Specification::find_by_name. It will be removed on or after 2011-11-01.\nGem.available? called from /Users/mallan/.rvm/gems/ruby-1.9.2-p290@cloud-stats/gems/jasmine-1.0.2.0/lib/jasmine/base.rb:64.\nyour tests are here:\n  http://localhost:8888/\n[2011-09-13 16:05:31] INFO  WEBrick 1.3.1\n[2011-09-13 16:05:31] INFO  ruby 1.9.2 (2011-07-09) [x86_64-darwin10.8.0]\n[2011-09-13 16:05:31] INFO  WEBrick::HTTPServer#start: pid=46847 port=8888", "createdAt": "2011-09-13T06:43:38Z", "updatedAt": "2013-05-26T20:00:47Z", "closedAt": "2013-05-26T20:00:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "growlybear", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "growlybear", "company": "Reece"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:27:55Z", "contents": "Have you tried pointing to master?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T20:00:41Z", "contents": "Closing due to inactivity and distance from master.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 132, "url": "https://github.com/jasmine/jasmine/issues/132", "title": "Alternative asynchronous matching with \"eventually\" ", "contents": "Hello,\nas a proof of concept, I have implemented a jasmine extension which introduces an eventually property on the matchers object, allowing for asynchronous specs with less function nesting:\nit('allows to match asynchronously with implicit polling', function() {\n  var spy = jasmine.createSpy();\n\n  setTimeout(function() {\n    spy();\n  }, 100);\n\n  expect(spy).eventually.toHaveBeenCalled();\n});\nSee jasmine_eventually.\nCheers\nTim", "createdAt": "2011-09-21T10:27:52Z", "updatedAt": "2013-05-26T20:03:44Z", "closedAt": "2013-05-26T20:03:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tf", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tf", "company": "Codevise Solutions"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T20:03:40Z", "contents": "This will not be compatible with the new async syntax coming in 2.0.\nIf this is still useful, please take a look at the matchers_redo branch (or master if that branch is merged and gone)\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 133, "url": "https://github.com/jasmine/jasmine/issues/133", "title": "jasmine.ExpectationResult should not keep a reference to \"expected\" and \"actual\"", "contents": "When you have a test suite that contains thousands expectations, and for each test case you create an environment that includes many complex data structures, keeping references to these internals in practice disables all garbage collection.\nWe are currently using a patched jasmine script in order to make it practical to execute our test suite. There is simply not enough memory  to complete our tests when it keeps thousands of redundant data structures in memory.", "createdAt": "2011-09-25T19:04:05Z", "updatedAt": "2013-05-26T20:09:29Z", "closedAt": "2013-05-26T20:09:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ropez", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ropez", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ropez", "authorAssociation": "NONE", "createdAt": "2011-09-25T19:10:15Z", "contents": "My own research indicates that these references are not used for anything in particular within jasmine itself, but are used intensively in the test suites for jasmine itself. In addition, there might be custom reporters in the field that use them, but not that I have seen.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T20:09:25Z", "contents": "Our 2.0 work has cleaned up memory and stack usage a lot. But we do still keep these references around for reporters to use.\nThat said, with the new reporter API after specDone is called the result objects could be cleaned up.\nBut I hesitate to do this until after 2.0 is done and we have enough usage of the new reporter APIs and we see if this is the memory bottleneck.\nI'm going to close this issue. We can re-open or create a new one issue on 2.0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 134, "url": "https://github.com/jasmine/jasmine/issues/134", "title": "Standalone Jasmine 1.1.0 only contains lib/ folder ", "contents": "Well... title says it all...\nhttp://pivotal.github.com/jasmine/downloads/jasmine-standalone-1.1.0.zip\nThe User guide says open \"SpecRunner.html\". So I guess, that makes 1.1.0 not working out of the box.\nAs a solution you can:\n\ndownload any previous release,\nunpack it,\nunpack 1.1.0,\ncopy lib from 1.1.0 into previous release (merge lib/ folder)\nadjust paths in SpecRunner.html", "createdAt": "2011-09-26T18:10:59Z", "updatedAt": "2013-10-04T19:36:02Z", "closedAt": "2013-10-04T19:36:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TEHEK", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "TEHEK", "company": "Coding for food :)"}, {"login": "mcaprari", "company": null}, {"login": "victorbstan", "company": "Specific Idea"}, {"login": "mrchess", "company": null}, {"login": "bionicbrian", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "mcaprari", "authorAssociation": "NONE", "createdAt": "2011-11-04T21:26:45Z", "contents": "Same problem here... It would be great to have a working \"gettin started\" document.\nThanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "victorbstan", "authorAssociation": "NONE", "createdAt": "2011-11-22T19:53:33Z", "contents": "Yes, it's a bug, the jasmine 1.1.0 folder is actually in the RC... yes, both of them are there. I don't know why this hasn't been noticed/fixed still. Makes me feel like this project is abandoned.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TEHEK", "authorAssociation": "NONE", "createdAt": "2011-11-22T22:15:06Z", "contents": "Nope.. last activity just 4 days ago... It's probably just too many pull requests and we just go unnoticed with this packaging stuff. Anyway, hope people will google \"jasmine 1.1.0 problem\" or \"jasmine 1.1 not working\" and land here :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mrchess", "authorAssociation": "NONE", "createdAt": "2012-03-05T17:38:39Z", "contents": "Still not fixed :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bionicbrian", "authorAssociation": "NONE", "createdAt": "2012-03-13T17:08:51Z", "contents": "Upvote. I would love to see this fixed. Seems like a simple oversight in the packaging, but the fix is a long time coming?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T20:20:22Z", "contents": "I've referenced this story for when this gets cleaned up.\nBasically we're moving away from the now deprecated GH Downloads and moving the old distributions into the repo.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-04T19:36:02Z", "contents": "Please try upgrading to 1.3.1 as we're not supporting 1.1 anymore. It should be fairly straightforward, but please let us know.\nDistributions can now be found in the repo here", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 139, "url": "https://github.com/jasmine/jasmine/issues/139", "title": "waitsFor() should work if you pass it a spy (and optional timeout)", "contents": "In that case it should simply wait for that spy to be called within the timeout.\nI find myself doing this quite a bit in tests for async code:\nvar onSuccess = jasmine.createSpy();\ndoMyThing(onSuccess);\nwaitsFor(function() {return onSuccess.wasCalled; }, \"waiting on spy\", 2000);\nIt seems like I should be able to just write:\nwaitsFor(onSuccess, 2000);\nBonus points for making its return work like a matcher:\nwaitsFor(onSuccess, 2000).toHaveBeenCalledWith(42);", "createdAt": "2011-10-03T05:57:25Z", "updatedAt": "2013-05-26T20:26:04Z", "closedAt": "2013-05-26T20:26:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paxunix", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "paxunix", "company": null}, {"login": "balefrost", "company": null}, {"login": "rbuels", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "balefrost", "authorAssociation": "NONE", "createdAt": "2012-05-19T00:31:13Z", "contents": "Agreed. This would be pretty much perfect for my cases as well.\nI wonder how this would interact with spyOn. Could you do something like:\nspyOn(someObject, 'spiedFunction');\n\nsomeObject.spiedFunction(42);\n\nwaitsFor(someObject.spiedFunction).toHaveBeenCalledWith(42);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rbuels", "authorAssociation": "NONE", "createdAt": "2012-07-09T19:03:58Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T20:25:59Z", "contents": "Closing. waitsFor/runs is removed from master and 2.0 in favor of the less verbose done-callback style as Mocha uses.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 140, "url": "https://github.com/jasmine/jasmine/issues/140", "title": "Problem in rspec2? method", "contents": "Hi I just upgrade to jasmine 1.1.0 and the jasmine:ci rake take is blowing up:\nrake aborted!\nCould not find rspec (>= 2.0) amongst [rake-0.9.2, Saikuro-1.1.0, .... yajl-ruby-1.0.0]\n/usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/dependency.rb:247:in to_specs' /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/dependency.rb:256:into_spec'\n/usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:434:in find_by_name' /usr/local/rvm/gems/ruby-1.9.2-p290@trunk_gems/gems/jasmine-1.1.0/lib/jasmine/base.rb:43:inrspec2?'\nRuby 1.9.2-p290\nRubygems 1.8.10", "createdAt": "2011-10-03T19:15:04Z", "updatedAt": "2011-10-03T19:17:18Z", "closedAt": "2011-10-03T19:17:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aselder", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "aselder", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "aselder", "authorAssociation": "NONE", "createdAt": "2011-10-03T19:17:18Z", "contents": "Duplicated in the jasmine-gem repo.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 141, "url": "https://github.com/jasmine/jasmine/issues/141", "title": "spyOn doesn't see functions being called", "contents": "Created this gist that shows it failing:\nhttps://gist.github.com/1260389\nYou can see that it's calling the function and the output is being displayed, but toHaveBeenCalled() is failing to correctly detect it.\nI originally misfiled here:  mhevery/jasmine-node#80  against jasmine-node. He suggested jsdom or jasmine, but it doesn't look like jsdom since the code seems to be working with its console.log() call. Somehow Jasmine is just missing the call to hello(). Forgot to mention before which versions of stuff I'm using:  jasmine-node@1.0.8 which appears to bundle jasmine@1.0.1. Also pulled down jasmine@1.1.0 from here:\nhttp://pivotal.github.com/jasmine/download.html\nand swapped it into place with jasmine-node@1.0.8 and still seeing the same issue.", "createdAt": "2011-10-03T22:27:18Z", "updatedAt": "2011-10-18T03:36:43Z", "closedAt": "2011-10-18T03:36:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mich-cook", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mich-cook", "company": null}, {"login": "shwoodard", "company": "Google, Inc."}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "shwoodard", "authorAssociation": "NONE", "createdAt": "2011-10-07T20:40:18Z", "contents": "+1\nhttps://gist.github.com/ca93ba31c18e8f8869a5\nI'm counting on rails.js to intercept the form submission and trigger ajax:beforeSend, which it does; alert('boom') is hit.\nBug?  Am I missing something?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-18T03:36:43Z", "contents": "I believe you're binding to the original hello function before you spy on it, so the original function fires rather than the spy.\nLook at this jsfiddle to get an idea of what's happening: http://jsfiddle.net/ragaskar/H5Uht/1/\nImagine that the spy is the \"new hello\" function.\nAs a workaround, I'd structure your javascript so it doesn't rely on document ready to fire binding behavior. Separate your Javascript into classes that provide behavior, and \"glue\" that binds behavior to the DOM (there's pretty ways of doing this with unobtrusive javascript, but I feel 'glue' code is OK in views if you don't have a UJS pattern you like). In your test, you would simply call \"initListeners\" directly, and after you've spied on \"hello\". Whatever binds the module to the DOM occurs elsewhere and is not loaded by Jasmine.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 143, "url": "https://github.com/jasmine/jasmine/issues/143", "title": "Jasmine requires Rails?", "contents": "I just installed Jasmine into an empty gemset,\ntried to run 'jasmine init', and got an error stating:\n\"Could not find rails (>= 3.0)\".\nIs this a known issue?", "createdAt": "2011-10-12T00:11:33Z", "updatedAt": "2011-10-17T20:50:31Z", "closedAt": "2011-10-17T20:50:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nfiniteset", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nfiniteset", "company": "Autodesk"}, {"login": "dennmart", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "nfiniteset", "authorAssociation": "NONE", "createdAt": "2011-10-12T14:39:28Z", "contents": "I forgot to mention installing Rails into the same gemset enables Jasmine to work correctly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dennmart", "authorAssociation": "NONE", "createdAt": "2011-10-13T18:24:11Z", "contents": "This is an existing issue in the Jasmine gem project. A pull request has been submitted, but hasn't been merged yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-17T20:50:30Z", "contents": "I believe Jasmine 1.1.1 fixes this. Let me know if you are still experiencing issues.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 144, "url": "https://github.com/jasmine/jasmine/issues/144", "title": "How am I supposed to debug my code if all exceptions and errors are caught by Jasmine??", "contents": "It's impossible to find bugs in my code when Jasmine catches all exceptions and errors and leaves me with nothing but a static stack trace. Can this be disabled somehow??", "createdAt": "2011-10-13T00:30:20Z", "updatedAt": "2013-05-27T00:10:29Z", "closedAt": "2013-05-26T20:29:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "timmolendijk", "authorAssociation": "NONE", "participants_count": 8, "participants_data": [{"login": "timmolendijk", "company": "Journa, Nouncy, Smart.pr"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "MarkBennett", "company": "Burmis Studio Inc."}, {"login": "agmcleod", "company": null}, {"login": "tomdale", "company": "@linkedin"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "Integralist", "company": null}, {"login": "eventualbuddha", "company": "@square "}], "comments_count": 11, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-17T20:46:07Z", "contents": "It's not currently configurable, no. I believe the original intent was that any code that raises an exception should also fail out your tests. If you know what's throwing and want to get an interactive stack, I imagine you might be able to get an error in the console by throwing a debugger right before the line that's throwing and running just that line.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmolendijk", "authorAssociation": "NONE", "createdAt": "2011-10-24T16:36:13Z", "contents": "Alright, thanks for the tip.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarkBennett", "authorAssociation": "NONE", "createdAt": "2011-10-31T13:42:26Z", "contents": "You can use the WebKit dev tools to break on all thrown exceptions. This isn't what you want but if you click the break on exceptions button again it will break on all exceptions, including those that are being caught. You might actually be surprised at the number of places raising exceptions!\nCheck out @paulirish's 5 minute Chrome Developer Tools video which is where I learned this:\nhttp://www.youtube.com/watch?v=nOEw9iiopwI", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmolendijk", "authorAssociation": "NONE", "createdAt": "2011-10-31T17:08:04Z", "contents": "Ooh, that's nice! Thanks @MarkBennett", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmolendijk", "authorAssociation": "NONE", "createdAt": "2011-11-07T18:01:32Z", "contents": "Ok I'm running into this issue again big time. None of the suggestions given in this thread are of any help:\n\nIt only occurs in IE8, so @MarkBennett's WebKit tip doesn't apply;\nI have not the slightest idea of where in my code the exception originates, because Jasmine does not give me anything but a plain text error message without any reference (Error: Unexpected call to method or property access.), so @ragaskar's advice doesn't bring me anything either.\n\nGrrrrr\u2026 how are the guys at Pivotal dealing with this issue? I assume they are using Jasmine internally?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "agmcleod", "authorAssociation": "NONE", "createdAt": "2011-11-30T15:10:23Z", "contents": "I've been using the 1.2.rc1 branch, which seems to do a better job at showing the stack trace, at least in most instances.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tomdale", "authorAssociation": "NONE", "createdAt": "2012-01-27T05:04:44Z", "contents": "This issue is a pretty big blocker for me and I think it means we'll be switching to QUnit for the project I'm on. Tracking down errors is a pretty frustrating, multi-step process. In QUnit, we just check the \"No try/catch\" checkbox and the debugger jumps straight to the line where the exception was thrown. Really hard to beat.\nIf I submitted a pull request to fix this, what are the odds it would be accepted?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:23:21Z", "contents": "I'd say fairly high for acceptance. It would need to be an option/preference at the environment level (not just in-browser) so Node folks can use it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Integralist", "authorAssociation": "NONE", "createdAt": "2012-02-11T08:23:31Z", "contents": "@tomdale please do a pull request! Pretty pls with sugar on top. This issue bugs the hell out of me", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eventualbuddha", "authorAssociation": "NONE", "createdAt": "2012-09-21T17:38:44Z", "contents": "Looks like this was fixed in this commit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T20:29:01Z", "contents": "Yes. This was fixed a while ago with a flag in the HTML runner.\nClosing. Thanks for contributing to the discussion.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 145, "url": "https://github.com/jasmine/jasmine/issues/145", "title": "UI (jasmine-html.js?) issues/annoyences", "contents": "There are some issues in the UI that bug the heck out of me:\n\nChecking 'passed' or 'skipped' does not persist -- whenever you rerun some tests you are back to unchecked.\nClicking on a block of tests (on its underlined heading to be precise) is supposed to result in rerunning just those tests, yet any failing tests outside of this block will still run (resulting in weird summary statements such as \"1 spec, 3 failures in ...s\")! So you still get all the errors from the various failing tests at the same time, making it needlessly hard to debug.\nAnd then we have my main problem (confusion?) with Jasmine; why oh why does it catch and hide all exceptions and errors for me, leaving me with nothing but a static stack trace?!? That's taking debugging back to 1995! See also here.\n\nI'm running 1.1.0 (final).", "createdAt": "2011-10-13T00:47:07Z", "updatedAt": "2013-05-27T00:10:46Z", "closedAt": "2013-05-27T00:10:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "timmolendijk", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "timmolendijk", "company": "Journa, Nouncy, Smart.pr"}, {"login": "KrofDrakula", "company": "@resourceguru"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "KrofDrakula", "authorAssociation": "NONE", "createdAt": "2011-10-21T10:21:20Z", "contents": "+1 on these issues, especially the non-persistent 'passed' and 'skipped' options.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timmolendijk", "authorAssociation": "NONE", "createdAt": "2011-10-27T18:19:00Z", "contents": "Regarding my second point; it looks like what is happening is that not only failing test are still executed, but just all tests are always executed, regardless of selection or not.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:26:33Z", "contents": "the \"other\" specs should be skipped, not actually run. But since Jasmine doesn't stop a spec on failure, it is possible to have more failures than there are specs. Which might be why you're seeing odd counts.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:10:29Z", "contents": "Closing.\nThe behavior around skipped and pending specs on master - and what's targeted for 2.0 is much more obvious behavior than before.\nIf you see this type of bevhavior on master, please open a new issue. Thanks for the feedback. This issue helped a lot with spec execution behavior for 2.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 147, "url": "https://github.com/jasmine/jasmine/issues/147", "title": "Jasmine 1.1.1 breaks Rails (3.1.1)", "contents": "Since Jasmine 1.1.1, Rails 3.1.1 (WebBrick, Rake, Cucumber, etc) fails with:\nrake aborted!\nuninitialized constant Jasmine\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/jasmine-1.1.1/lib/jasmine.rb:4:in `<top (required)>'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler/runtime.rb:68:in `require'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler/runtime.rb:68:in `block (2 levels) in require'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler/runtime.rb:66:in `each'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler/runtime.rb:66:in `block in require'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler/runtime.rb:55:in `each'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler/runtime.rb:55:in `require'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@rails311/gems/bundler-1.0.21/lib/bundler.rb:122:in `require'\n/Users/pascal/Projecten/RoR/bizplay/config/application.rb:7:in `<top (required)>'\n/Users/pascal/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'\n/Users/pascal/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'\n/Users/pascal/Projecten/RoR/bizplay/Rakefile:4:in `<top (required)>'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/rake_module.rb:25:in `load'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/rake_module.rb:25:in `load_rakefile'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:495:in `raw_load_rakefile'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:78:in `block in load_rakefile'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:77:in `load_rakefile'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:61:in `block in run'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:59:in `run'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/bin/rake:32:in `<top (required)>'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/bin/rake:19:in `load'\n/Users/pascal/.rvm/gems/ruby-1.9.2-p290@global/bin/rake:19:in `<main>'\n\nReverting to Jasmine 1.1.0 solves the problem.", "createdAt": "2011-10-18T08:11:07Z", "updatedAt": "2013-05-27T00:12:03Z", "closedAt": "2013-05-27T00:12:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "plindelauf", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "plindelauf", "company": null}, {"login": "lightscalar", "company": "Miner Street Solutions"}, {"login": "eagerwombat", "company": null}, {"login": "NickClark", "company": null}, {"login": "jtescher", "company": "Out There Labs"}, {"login": "jeffw-wherethebitsroam", "company": null}, {"login": "dannytatom", "company": null}, {"login": "charly", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 11, "comments_data": [{"authorLogin": "lightscalar", "authorAssociation": "NONE", "createdAt": "2011-10-18T14:37:10Z", "contents": "I am seeing the same behavior, same error messages. Reverting to 1.1.0 does indeed solve the problem on my end too. This error is also produced in Rails 3.1.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eagerwombat", "authorAssociation": "NONE", "createdAt": "2011-10-19T00:55:56Z", "contents": "I have the same error after updating to rails 3.0.10", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NickClark", "authorAssociation": "NONE", "createdAt": "2011-10-19T18:20:47Z", "contents": "I am seeing this as well. First time trying jasmine. It happens when trying to initialize a new rails app", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jtescher", "authorAssociation": "NONE", "createdAt": "2011-10-19T20:20:01Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeffw-wherethebitsroam", "authorAssociation": "NONE", "createdAt": "2011-10-20T01:33:19Z", "contents": "I'm seeing this also.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dannytatom", "authorAssociation": "NONE", "createdAt": "2011-10-20T21:34:01Z", "contents": "Here as well. :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "charly", "authorAssociation": "NONE", "createdAt": "2011-10-21T10:02:35Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plindelauf", "authorAssociation": "NONE", "createdAt": "2011-10-31T10:38:45Z", "contents": "The 1.1.2 gem now works (I see now that I should have reported this issue in the jasmine-gem project; sorry).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plindelauf", "authorAssociation": "NONE", "createdAt": "2011-10-31T14:23:28Z", "contents": "Oops... nope. I still get a bunch of errors when pushing to Heroku. Other errors, though. Will analyse closer shortly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:24:41Z", "contents": "Have you tried pointing at master for the jasmine-gem? We've did a bunch of work to make the gem work well against Rails 3.0, 3.1 and the asset pipeline.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:11:59Z", "contents": "Closing. We believe this has been fixed in later versions of Jasmine and the Jasmine gem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 150, "url": "https://github.com/jasmine/jasmine/issues/150", "title": "Coverage tools", "contents": "Just mentioning this here too, but it'd be awesome to have coverage tools that integrate with jasmine/evergreen. Main ticket is at abepetrillo/evergreen#32", "createdAt": "2011-10-24T18:42:28Z", "updatedAt": "2013-05-27T00:20:24Z", "closedAt": "2013-05-27T00:20:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "plukevdh", "company": "ARxChange"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:20:18Z", "contents": "We put Feature Requests into our Tracker backlog. You can follow this story here\nIt's a common request. We'll be looking at this soon after the 2.0 release to at least have somewhere to send people.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 151, "url": "https://github.com/jasmine/jasmine/issues/151", "title": "Getting Sprockets::CircularDependencyError in 1.2.0.rc1", "contents": "I seem to be getting these errors a lot in my compiled JavaScript files from CoffeeScript\nthrow Error(\"Sprockets::CircularDependencyError: .../foobar.js.coffee has already been required\")\nand every time I get them, I have to shutdown jasmine and restart. I haven't really pinpointed the source of this error but it seems to happen whenever there are errors when compiling from CoffeeScript to JavaScript such as bad syntax, etc.", "createdAt": "2011-10-25T09:01:27Z", "updatedAt": "2011-12-10T04:25:43Z", "closedAt": "2011-12-10T04:25:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "axsuul", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "axsuul", "company": null}, {"login": "ruprict", "company": "@Skookum "}], "comments_count": 2, "comments_data": [{"authorLogin": "ruprict", "authorAssociation": "NONE", "createdAt": "2011-11-16T17:29:57Z", "contents": "I also ran into this issue.  Looks like it could be this issue Which (that issue claims) is fixed in the 2.2 branch of sprockets.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "axsuul", "authorAssociation": "NONE", "createdAt": "2011-12-10T04:25:43Z", "contents": "@ruprict Cool thanks for the heads up. I'll close this issue then.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 153, "url": "https://github.com/jasmine/jasmine/issues/153", "title": "Implement aroundEach", "contents": "It'd be nice to have an aroundEach function, particularly for situations where something needs to be set up and unwound, and you'd like those two things to sit right next to each other in the code.\nHere's the example I just wanted to write:\naroundEach(function(spec){\n  Timecop.travel(new Date(2011, 10, 28, 11, 45));\n  spec.run();\n  Timecop. returnToPresent();\n});\n\nNot something I'd use everyday, but it can be handy once in a while. (Referenced lib is Timecop.js)", "createdAt": "2011-10-28T12:46:30Z", "updatedAt": "2013-11-18T12:59:24Z", "closedAt": "2013-05-27T00:21:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "searls", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "searls", "company": "@testdouble"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "TMaYaD", "company": "LoonyBin"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 8, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-10-28T16:07:15Z", "contents": "I like the syntax, but this ability seems like it could be accomplished using a describe block and before/after blocks (although you'd have to use \"this\" or a closure to preserve variables). At the moment, I'm leaning towards keeping the public interface sparse, so I think I'd want to see an example of something that beforeEach/afterEach isn't capable of doing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "searls", "authorAssociation": "NONE", "createdAt": "2011-10-28T16:09:11Z", "contents": "I doubt there's anything this could do that a beforeEach + an afterEach couldn't do. It would merely tidy up specs in certain cases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:16:00Z", "contents": "Can we close this one Mr. Searls?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "searls", "authorAssociation": "NONE", "createdAt": "2012-02-11T13:36:07Z", "contents": "After you, Mr. Frank.\nOn Feb 11, 2012, at 2:16, \"Davis W. Frank\"\nreply@reply.github.com\nwrote:\n\nCan we close this one Mr. Searls?\n\nReply to this email directly or view it on GitHub:\n#153 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TMaYaD", "authorAssociation": "NONE", "createdAt": "2013-10-13T14:05:19Z", "contents": "Testing callbacks would require this. aroundEach, and aroundAll too.\nUsing d3.json to demonstrate the async nature. but could be my own too.\ndescribe('d3.json', function() {\n  var some_global = undefined;\n  aroundEach(function(spec) {\n    d3.json('test.json', function(json) {\n      some_global = json;\n      spec.run();\n      //alternatively\n      //spec.run(json)\n    });\n  });\n  it(\"should get right json\", function() {  // function(json) {\n    expect(some_global).toEqual({ 'a': 1 });\n  });\n});\nwithout around, I can't make sure the json is loaded without changing d3.json to be synchronous which might be undesirable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T05:36:07Z", "contents": "I think what you have there can be accomplished with an async beforeEach in Jasmine 2.0 (and an afterEach if you had something that needed to run after the spec). Modifying your example:\ndescribe('d3.json', function() {\n  var some_global = undefined;\n  beforeEach(function(done) {\n    d3.json('test.json', function(json) {\n      some_global = json;\n      done(); // calling done allows the beforeEach to complete and then proceeds with running the spec\n    });\n  });\n  it(\"should get right json\", function() { \n    expect(some_global).toEqual({ 'a': 1 });\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TMaYaD", "authorAssociation": "NONE", "createdAt": "2013-11-18T11:26:20Z", "contents": "But d3.json is asynchronous call. So system wont wait for done to be called. the beforeEach would execute and move on to running the spec. done would be called again after the d3.json finishes loading the data.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TMaYaD", "authorAssociation": "NONE", "createdAt": "2013-11-18T12:59:24Z", "contents": "Never mind. I see that you have implemented arity check in v2", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 154, "url": "https://github.com/jasmine/jasmine/issues/154", "title": "Combine matchers", "contents": "It would be great if it was possible to combine together matchers using boolean \"and\" and \"or\". For example, sometimes the object I'm testing is ok if it's in either of two states, and it would be great to be able to say:\nexpect(num).toEqual(NaN).or.toEqual(null)\n\nThere's some subtlety here surrounding not, for example I'd imagine that in:\nexpect(num).not.toEqual(NaN).or.toEqual(null)\n\nnot would bind more tightly than or.\nSorry I haven't contributed any code to achieve this! If I get time I might have a go\nThanks!", "createdAt": "2011-11-01T11:40:36Z", "updatedAt": "2011-11-03T14:53:58Z", "closedAt": "2011-11-03T14:53:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iainbeeston", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "iainbeeston", "company": "@wearebluespot "}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-11-03T14:53:58Z", "contents": "I'm not convinced that we'd want to add syntax to allow you to write fuzzier specs -- and I have to admit I'm a bit surprised that with the same inputs you might possibly get two different outputs -- maybe stub whatever is causing the randomness here?\nIn either case, the good news is that you can write your own matcher to do exactly this! It would look something like the following: https://gist.github.com/1336695 (warning: untested, un-linted, early-morning code).\nTry adding that to your spec_helper and seeing if it works.\nThanks for using Jasmine!\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 155, "url": "https://github.com/jasmine/jasmine/issues/155", "title": "'jasmine' npm package name now available", "contents": "Hey all,\nNot too sure if this was noticed or intentional, but I noticed that jasmine is now open on npm as a potential package name. (http://search.npmjs.org/). I noticed an (old) pull request with a package.json in it, but it seems all that is really needed (now) is a \"main\": \"lib/jasmine-core/jasmine.js\" line to get npm install jasmine working.\nAs an aside, I was initially thinking of creating another CLI package (something like node-jshint) and calling it a different name when I came across the fact that jasmine was available, but I thought I would post here first instead of possibly taking it.\nCheers,", "createdAt": "2011-11-10T22:25:08Z", "updatedAt": "2013-05-27T00:22:22Z", "closedAt": "2013-05-27T00:22:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brentlintner", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "brentlintner", "company": "@grafiteinc"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:22:18Z", "contents": "Thanks for the notice.\nWe're now using grunt for some build and test tasks. There will be an official jasmine npm soon, but likely after 2.0.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 160, "url": "https://github.com/jasmine/jasmine/issues/160", "title": "Allow spies to be overriden", "contents": "Right now if you spy on a method more than once, Jasmine will complain. I would like it so that Jasmine did not do this. The use case is that I would like set up a default spy in my beforeEach block (as most tests in the test group depend on this) and then override this spy for individual tests where behavior differs from the default. Like so:\ndescribe '#method', ->\n  beforeEach ->\n    spyOn(http, 'request').andCallFake (fn) -> fn()\n\n  it 'should do something on success', ->\n    # some test here\n    foo.method()\n\n  it 'should do something else assuming success', ->\n    # some test here\n    foo.method()\n\n  it 'should do yet another thing assuming success', ->\n    # some test here\n    foo.method()\n\n  it 'should do a different thing on error', ->\n    error = new Error('oh noes')\n    spyOn(http, 'request').andCallFake (fn) -> fn(error)\n    fn = jasmine.createSpy()\n    foo.method(fn)\n    expect(fn).toHaveBeenCalledWith(error)\nThis is obviously a contrived example; a better example would be if the method is more complicated and I am setting up more things in my beforeEach (and have more tests). You can see how this might be useful.\nWDYT?", "createdAt": "2011-11-18T19:23:49Z", "updatedAt": "2011-12-05T23:54:10Z", "closedAt": "2011-12-05T23:14:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mcmire", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mcmire", "company": "@tuftandneedle "}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "mcmire", "authorAssociation": "NONE", "createdAt": "2011-11-18T21:24:02Z", "contents": "Also I realize this is a dupe of #32 but I feel this feature should exist. Why would you want to prevent a spy from being defined twice -- is it just for a sanity check?\nAnother example is\ndescribe '#method', ->\n  beforeEach, ->\n    spyOn(some, 'method')\n\n  it 'should do whatever', ->\n    # a test that calls some.method but requires that it not\n    # actually be called -- maybe it makes a request\n\n  it 'should do something else', ->\n    spyOn(some, 'method').andCallThrough()\n    # call some.method multiple times.........\n    expect(some.method.callCount).toBe(3)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-12-05T23:14:34Z", "contents": "You can get this behavior by doing the following:\ndescribe '#method', ->\n beforeEach ->\n   spyOn(http, 'request').andCallFake (fn) -> fn()\n\n it 'should do a different thing on error', ->\n   error = new Error('oh noes')\n   http.request.andCallFake (fn) -> fn(error)\n   fn = jasmine.createSpy()\n   foo.method(fn)\n   expect(fn).toHaveBeenCalledWith(error)\n\nIE, you can change the spies behavior by calling these methods on the spy itself instead of creating yet another spy instance.\nAs you are able to change the spy's behavior through this syntax, I don't see any value in adding nested Spies (which may add further complexity to Jasmine).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mcmire", "authorAssociation": "NONE", "createdAt": "2011-12-05T23:54:10Z", "contents": "Ah. Okay, that didn't occur to me before but it makes sense now that I look\u00a0at it. Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 161, "url": "https://github.com/jasmine/jasmine/issues/161", "title": "Quick start documentation out of date", "contents": "From https://github.com/pivotal/jasmine/wiki/User-Guide\n\n\nGet the latest standalone release from the downloads page.\nOpen SpecRunner.html in your favorite browser.\n\n\nBut I can't find any SpecRunner.html file in the jasmine-standalone-1.1.0.zip package.", "createdAt": "2011-11-21T21:03:14Z", "updatedAt": "2012-02-14T21:30:21Z", "closedAt": "2012-02-14T21:30:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdingwall", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rdingwall", "company": "Monzo"}, {"login": "jedahan", "company": " - wandering -"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "jedahan", "authorAssociation": "NONE", "createdAt": "2011-11-22T16:09:34Z", "contents": "From https://groups.google.com/forum/#!topic/jasmine-js/KXWQ_dA_bcI it will be fixed in the next release. For now copy the old directories.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-14T21:30:21Z", "contents": "jedahan is correct this should be fixed in 1.2", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 162, "url": "https://github.com/jasmine/jasmine/issues/162", "title": "Support remote assets", "contents": "I am getting my css from a cdn, and would like to also use the same in jasmine, but this results in:\n<link rel=\"stylesheet\" href=\"/http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css\" type=\"text/css\" media=\"screen\"/>\n\nso something like asset =~ /^https?:/\" ? asset : \"/\" + asset would be nice", "createdAt": "2011-11-25T19:01:43Z", "updatedAt": "2013-05-27T00:23:56Z", "closedAt": "2013-05-27T00:23:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "grosser", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "grosser", "company": "Zendesk.com"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:13:40Z", "contents": "It seems like a bad idea to depend on external resources for a test run. Why not download a version locally and increase the speed of your tests?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "grosser", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T16:12:54Z", "contents": "Yes, it has its downsides, but having the same page like in production makes\nthe setup simpler, no if/else for the asset includes.\n(even if its a bad idea it would still be nice if it worked instead of forcing me to rewrite)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-24T21:40:58Z", "contents": "Pivotal Tracker story: https://www.pivotaltracker.com/story/show/25485581", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:23:52Z", "contents": "Closing. There is a Tracker story - see above. This should be a feature of the Jasmine gem, not Jasmine core.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "feature request", "gem"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 164, "url": "https://github.com/jasmine/jasmine/issues/164", "title": "Spies should collect return values", "contents": "We have http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Spy.html#argsForCall so we can check how a method was called.\nI'd like to check that the method was not only called, but that it returned the expected result.", "createdAt": "2011-11-29T08:33:02Z", "updatedAt": "2013-12-15T20:21:16Z", "closedAt": "2011-11-29T21:58:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ExtAnimal", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "ExtAnimal", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "dwt", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "pimterry", "company": "@httptoolkit"}], "comments_count": 12, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2011-11-29T21:58:04Z", "contents": "Spies don't actually call through to the methods they're spying on unless you explicitly tell them to (with andCallThrough()).\nI can't see a good use case for this -- either use andCallThrough and write an integration test (which uses the expected result), or spyOn your method and also write a unit test for it.\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2013-11-12T16:02:08Z", "contents": "Can this please be reopened? It would be much more convenient if I can just tell it to 'andCallThrough()' and then still have the ability to spy on the return value without having to record the original method first, then replace it with 'andCallFake()' which then calls the recorded original instead.\nI've already wished for this countless times and would be willing to write the code - but only if you accept it.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T16:49:30Z", "contents": "I think having a use case that explains how you're wanting to use this feature would help. We don't appreciate the need.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T16:52:49Z", "contents": "The use case is to help you more easily create 'realistic' stub values in your tests? In my mind, this isn't really a jasmine responsibility and it would add considerable complexity/behavior to jasmine that we'd then have to maintain.\nIt feels like you could solve this 'recording responses' problem with some kind of spec helper; for example (warning, untested -- even for syntax -- inelegant theoretical code ahead):\nvar ResponseRecorder = function(object, method, responseFixture) {\n  var originalMethod = object.method,\n  recordedResponses = responseFixture || {};\n  spyOn(object, method);\n  return {\n    record: function() {\n      object.method.andCallFake(function() {\n        var response = originalMethod.apply(null, arguments);\n        recordedResponses[JSON.stringify(arguments)] = response;\n        return response;\n      });\n    },\n    dumpFixture: function() {\n     return JSON.stringify(recordedResponses);\n    },\n    playback: function() {\n      object.method.andCallFake(function() {\n        if (var response = recordedResponses[JSON.stringify(arguments)]) {\n          return response;\n        } else {\n          throw new Error(\"Could not find response for \" + arguments);\n        }\n      });\n    }\n  }\n}\n\n//usage:\nvar recorder = new ResponseRecorder(myObject, 'myMethod');\nrecorder.record();\n//exercise thing that calls myObject, myMethod\nvar fixture = recorder.dumpFixture();\n//in your case, you'd probably copy-paste fixture into some static file.\n//now we stub the playback with our recorded responses.\nrecorder = new ResponseRecorder(myObject, 'myMethod', JSON.parse(fixture));\nrecorder.playback();", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2013-11-12T21:23:37Z", "contents": "Well, lets try to focus then. I find that I mostly would like it if getting access to the return value of some method would make it much easier to test some object.\nFor example: Today I was testing a typeahead widget (a library I don't control) and wanted to attach some code to it to show a spinner while it was fetching data from the net. Now the easiest way to test this was to get access to the jQuery XHR object generated for each request so I could manually reject() or resolve() it to test the stability of my attachment.\nTo do that I had to patch some method quite deep in it's guts to record it's return value and get access to it after a new search was triggered.\nThis resulted in something like this:\n\n        describe(\"searching visualization\", function() {\n\n            beforeEach(function () {\n                this.searchView = this.view.namedSubview('user-search-type-ahead-view')\n                var transport = this.searchView.dataset().transport\n                this.mostRecentXHR = null;\n                var that = this;\n                var originalSendRequest = transport._sendRequest\n                spyOn(transport, '_sendRequest').andCallFake(function() {\n                    var jqXHR = originalSendRequest.apply(this, arguments);\n                    that.mostRecentXHR = jqXHR;\n                    return jqXHR;\n                })\n            })\n\n            it(\"should call a callback when a fetch starts or stops\", function() {\n                spyOn(this.searchView, 'didStartSearch')\n                spyOn(this.searchView, 'didStopSearch')\n                this.changeSearchTerm('fnord')\n                expect(this.searchView.didStartSearch).not.toHaveBeenCalled()\n                jasmine.Clock.tick(300) // actually send the request\n                expect(this.searchView.didStartSearch).toHaveBeenCalled()\n                expect(this.searchView.didStopSearch).not.toHaveBeenCalled()\n                this.mostRecentXHR.reject([])\n                expect(this.searchView.didStopSearch).toHaveBeenCalled()\n            });\n// ....\n\nThe key here is the patch spyOn(transport, '_sendRequest'). which I'm doing purely to get access to it's return value - and it's one off code that doesn't cope well with multiple requests generated for example by multiple datasets which ask different urls.\nThats the sort of situation where it would be much easier if that was just baked in to spyOn().andCallThrough() when I could just check the calls afterwards and get the return values out there.\nI hope that makes it easier for you guys to understand the kind of use cases I would like to use something like this.\nAs an aside: The arguments are already recorded - but not the returned values, while recording them would be easy in the code - I don't quite get what the argument against it should be? Code complexity doesn't seem to be it as it looks like it's about 3-5 lines of code (well plus the tests) to add this feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T21:45:12Z", "contents": "Many of us would solve the problem you posted by mocking at the xhr layer (using jasmine-ajax, for example) instead of stubbing an internal to get access to the xhr.\nI really can't imagine a ton of cases where this would be useful. The complexity here is not necessarily in the LoC necessary to implement your feature, but in the behavior. I almost certainly wouldn't want to add some kind of spy interface that sometimes returns values and sometimes not. IE, it's only sensible to ask a spy what return values it has if you're using the andCallThrough strategy. What does it return otherwise? Empty hash? Null? Raise error? What happens if you were using one strategy and then switch to another?\nI could maybe imagine andCallThrough taking a function that then gets called back with the return arguments (this at least has more precedent). To be honest, andCallThrough is vestigial from the way we used to think spies/mocks should be used so I'm reluctant to add behavior to it. If you're calling through to a function you probably shouldn't care about what arguments you've passed, as long as the end behavior is the expected one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2013-11-13T08:40:31Z", "contents": "Well, I don't particular care how it is implemented, I'm just caring about that it is implemented.\nIf implemented as a generic thing the spy does, I would expect that the recorded return value is always the value that is actually returned. I.e. if you specify nothing, the spy does return undefined and that should be recorded. If you specify andReturn(something) then something should be recorded. And if you specify andCalThrough() then the real return value should be recorded.\nIf implemented as a callback to andCallThrough() that strikes me as a more special cased implementation that is not as simple to understand - but I'm just as fine with that.\nWhen observing my own unit testing, I would also assert that I'm pretty firmly in the 'test behavior, not interaction' camp of unit testing. Never the less, for certain use cases I like to have the power to easily switch to the 'test interaction' style of unit tests.\nOf course the example above can be implemented differently, and of course a good ajax mocking framework would probably have made it possible to write this test even nicer. But that means having another framework and it doesn't solve the general problem of sensing values that are only available as return values in a method call chain. (Or where that is the easiest way to get at them).\nThat being said, the reason I've come here is because yesterday was about the seventh time in the last year that I wish I've had this feature and I decided that it's about time to do something about it. Sure I don't need it every day, but every time I do I curse because I have to write 10 extra lines of code  - which means I'm probably using it less than it would be useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-13T14:52:33Z", "contents": "That's fair. We'll ask the core team what they think. We're trying to be extremely careful about what we add to Jasmine, because it initially started life with a bunch of extraneous behavior that later had to be ripped out (ajax mocking, for example, was included. so was fixture handling!). This means we tend to be pretty reluctant to add features that don't solve everyday problems for a wide range of users -- we'd rather add functionality that helps you solve your particular problem in an easy way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2013-11-14T09:19:50Z", "contents": "I would welcome an update to this bug report with the results of your internal discussion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2013-11-20T12:37:27Z", "contents": "To be true, I would greatly prefer if you and the 'core-team' could discuss this in an open way on the bug tracker so the community (in this case me) can weight in on your opinions.\nOther than that, did you have any results yet?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-20T14:24:43Z", "contents": "We haven't talked about it yet. Feature planning for the next version of Jasmine won't start happening until 2.0 comes out.\nWe're trying to get better about updating github tickets, but there's often long gaps between when tickets are opened and when we can address them. Thank you for your understanding.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pimterry", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-15T20:21:16Z", "contents": "As linked above, I've now independently put in a pull request to fix this, as I've hit up against it a few times too, and obviously I'm also in favour. The implementation linked is pretty simple, and I don't think there's any significant conceptual complexity at all; whatever is returned from the spy call is immediately stored as call.returnValue, regardless of the spy strategy in use.\nI'd agree there's few cases where you can't implement this yourself, but it would result in considerably more succinct tests semi-often for me personally, and I do currently have multiple stub implementations where I'm managing tracking return values by hand, because it's something that jasmine won't do for me. Also, I'd note that Sinon.JS does provide a returnValues property, which already does exactly what we're suggesting here.\nIn terms of use cases, I've found this as an issue a few times in various cases, but particularly when trying to test mocked constructors and factory methods, where interactions with the return value are really the thing I'm aiming to assert on in my test.\nAs a recent example, I wanted to test that the callbacks the factory provided were only ever used once in the SUT. Without this, you have to manually build a factory stub and then track the return values in each case by hand, and the assertion testing them then has a much less clear relationship with the factory itself. With this change however, it becomes:\nvar factory = jasmine.createSpy('factory').and.callFake(function () {\n  return jasmine.createSpy('callback');\n});\nvar sut = new SystemUnderTest(factory);\n\nsut.performOperation();\n\n_.each(factory.calls.all(), function (call) {\n    expect(call.returnValue.calls.count()).toEqual(1);\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 167, "url": "https://github.com/jasmine/jasmine/issues/167", "title": "Creating a matcher for equals-method", "contents": "I don't know if you do this, but I build my ValueObjects with an equals-method. So I can define my own conditions to the equality of two objects. These are to be compared by\n\nobj1.equals(obj2)\n\nAs the standard matcher from jasmine doesn't check for this method, I wrote my own matcher:\ntoBeEqualTo: function(expected) {\n    return this.acutal.equals(expected);\n}\n\nTypeError: Cannot call method 'equals' of undefined\n\nReally? I was quite sure about the rest of the code, so I reversed it:\ntoBeEqualTo: function(expected) {\n    return expected.equals(this.acutal);\n}\n\nError: Expected { method :  Function, equals : Function, ... } to be equal to  { method :  Function, equals : Function, ... } at ... bla\n\nHuh? So now I'm confused. Are these objects undefined or equal but not equal?\nAlso, my objects have a toString/toJSON method, I like those to be used if I see them printed out.", "createdAt": "2011-12-29T17:47:05Z", "updatedAt": "2013-05-27T00:30:22Z", "closedAt": "2013-05-27T00:30:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Phoscur", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Phoscur", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-14T21:22:16Z", "contents": "How are you calling your toBeEqualTo method? It sounds like there's some things not getting defined here.\nYou do realize you have a typo for actual? This may be what is causing your problem, if this code is directly copy-pasted from your implementation. We set this.actual, not this.acutal.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:30:18Z", "contents": "Also note that Jasmine allows for custom equality testers. This is very poorly (read: NOT) documented for 1.x. But for 2.0 we're making it more explicit.\nLook at the matchers_redo branch to see how you can add your own equality tester to the equals work. This will then get used everywhere that equality is tested (e.g., toContain, toHaveBeenCalledWith).\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 171, "url": "https://github.com/jasmine/jasmine/issues/171", "title": "Add support for running specs in a random order", "contents": "Randomizing the test order can help reveal inter-spec dependencies (like stepping on globals without cleaning up).", "createdAt": "2012-01-04T23:54:37Z", "updatedAt": "2014-04-29T07:35:59Z", "closedAt": "2013-05-27T00:36:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamesarosen", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "jamesarosen", "company": "Fastly"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "pschyska", "company": "Freelancer"}, {"login": "CodeOfficer", "company": "CodeOfficer.com"}, {"login": "SebTardif", "company": null}, {"login": "paulRbr", "company": null}, {"login": "yaroslav-ulanovych", "company": null}], "comments_count": 12, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:11:44Z", "contents": "Do you have an implementation suggestion? Or is this just a feature request?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesarosen", "authorAssociation": "NONE", "createdAt": "2012-02-12T18:06:35Z", "contents": "It was meant as a discussion-opener. I'm happy to work on it if you're interested in accepting such a patch. I'd also appreciate any hints you might have on where to start.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pschyska", "authorAssociation": "NONE", "createdAt": "2012-10-21T19:57:36Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "CodeOfficer", "authorAssociation": "NONE", "createdAt": "2012-12-11T20:16:52Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SebTardif", "authorAssociation": "NONE", "createdAt": "2012-12-11T21:48:41Z", "contents": "+1  Also a outside runner like Maven could execute each single test one by one in an automated way. Like this we would get immediately all the inter-spec dependencies error instead of waiting for randomness to find them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulRbr", "authorAssociation": "NONE", "createdAt": "2013-04-26T09:03:01Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaroslav-ulanovych", "authorAssociation": "NONE", "createdAt": "2013-04-26T14:28:13Z", "contents": "Just don't drop serial execution away accidentally, cause I rely on it writing tests in given-when-then style.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "paulRbr", "authorAssociation": "NONE", "createdAt": "2013-04-26T15:42:24Z", "contents": "What do you mean by serial execution? The point of this request is to have a random order of spec execution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaroslav-ulanovych", "authorAssociation": "NONE", "createdAt": "2013-04-27T08:25:23Z", "contents": "The way tests are run right now.\nit('test1', function(){});\nit('test2', function(){});\n\nThe order is test1, then test2. Don't drop it;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulRbr", "authorAssociation": "NONE", "createdAt": "2013-04-27T08:28:00Z", "contents": "Im not sure I want this. The point is to have each spec runnable\nindependently.\nEm 27/04/2013 10:25, \"Yaroslav Ulanovych\" notifications@github.com\nescreveu:\n\nThe way tests are run right now.\nit('test1', function(){});\nit('test2', function(){});\nThe order is test1, then test2. Don't drop it;\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/171#issuecomment-17112587\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaroslav-ulanovych", "authorAssociation": "NONE", "createdAt": "2013-04-27T08:30:56Z", "contents": "Just make it configurable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:36:23Z", "contents": "We have a policy of closing Feature Requests after we log them into our public backlog at Pivotal Tracker.\nHere is the story so you can follow progress.\nWe'll look at this again after 2.0 ships.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 173, "url": "https://github.com/jasmine/jasmine/issues/173", "title": "Make adding new matchers easy", "contents": "Hello, right now the proposed way for adding new matchers is this:\nbeforeEach(function() {\n  this.addMatchers({\n    toBeLessThan: function(expected) {\n      return this.actual < expected;\n    }\n  });\n});\nIt's not very convenient, because usually You define special matchers in a standalone helper file (not in spec file) and reuse it among many spec files.\nBut right now it's not easy to define matchers without the beforeEach block, for example code below wouldn't work:\njasmine.Matchers.prototype.toBeLessThan = function(expected) {\n  return this.actual < expected;\n};\nYou has also to do some extra magic, like this:\njasmine.Matchers.prototype.toBeLessThan = function(expected) {\n  return this.actual < expected;\n};\njasmine.Matchers.prototype.toBeLessThan = jasmine.Matchers.matcherFn_(\n  'toBeLessThan', \n  jasmine.Matchers.prototype.toBeLessThan\n);\nSo, maybe it's worth to somehow simplify this, add some helper method for example?, like jasmine.Mathcers.addMatchers that will do all this behind the scene?\nThanks.", "createdAt": "2012-01-07T17:40:21Z", "updatedAt": "2013-05-27T00:41:52Z", "closedAt": "2013-05-27T00:41:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexeypetrushin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alexeypetrushin", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-14T21:15:51Z", "contents": "This seems reasonable to me. We'll take a look at adding such a feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-24T21:38:28Z", "contents": "Tracker story: https://www.pivotaltracker.com/story/show/25484807", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:41:47Z", "contents": "We've moved in this direction a bit. If you look at the matchers_redo branch you will see improvement.\nThere is now a top-level function on the environment to addCustomMatchers(). It takes an object that has matcher functions as prroperties. The underlying implementation has changed a lot since 1.0, so look at matchers.js to see how this is done.\nCustom matchers still are applied and removed per spec, so you need to add them in a beforeEach block.\nWe will be documenting the functionality a lot better for 2.0.\nThanks for the feedback.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 174, "url": "https://github.com/jasmine/jasmine/issues/174", "title": "Valid unit tests always fail when run through phantomjs on Ubuntu or Debian", "contents": "Please see the following discussion:\nhttps://github.com/elemoine/jasmine/commit/760a61a65f34921f1a1e9742cef75704ab53355b#commitcomment-847068\nMore info\nhttp://groups.google.com/group/jasmine-js/browse_thread/thread/4712b34f2099f05e\nThere is a suggested fix with jasmine.js to make it work.\nAny ideas on if this is a jasmine bug that can be fixed?", "createdAt": "2012-01-08T07:44:21Z", "updatedAt": "2014-07-23T16:37:39Z", "closedAt": "2013-05-27T00:45:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "there4", "company": null}, {"login": "jcoglan", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "philpill", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "qris", "company": "Qwirx"}], "comments_count": 10, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-01-08T22:13:26Z", "contents": ".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jcoglan", "authorAssociation": "NONE", "createdAt": "2012-02-08T16:38:25Z", "contents": "I've been digging into this and found the following rather bizarre problem that Jasmine has while installing its matchers. Apply this diff:\ndiff --git a/lib/jasmine-core/jasmine.js b/lib/jasmine-core/jasmine.js\nindex 2e562a8..ee2891d 100644\n--- a/lib/jasmine-core/jasmine.js\n+++ b/lib/jasmine-core/jasmine.js\n@@ -1155,6 +1155,15 @@ jasmine.Matchers.prototype.report = function(result, failing_message, details) {\n\n jasmine.Matchers.wrapInto_ = function(prototype, matchersClass) {\n   for (var methodName in prototype) {\n+    if (methodName === 'toEqual') {\n+      console.log(prototype['toEqual'].toString());\n+      console.log(prototype.toEqual.toString());\n+      console.log(prototype[methodName].toString());\n+      console.log(methodName);\n+      console.log(methodName === 'toEqual');\n+      console.log(methodName == 'toEqual');\n+      console.log(typeof methodName);\n+    }\n     if (methodName == 'report') continue;\n     var orig = prototype[methodName];\n     matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig);\n\nHere's what should be output when you run this (running in a browser, or using the Ruby Harmony gem):\nfunction (expected) {\n    return this.env.equals_(this.actual, expected);\n}\nfunction (expected) {\n    return this.env.equals_(this.actual, expected);\n}\nfunction (expected) {\n    return this.env.equals_(this.actual, expected);\n}\ntoEqual\ntrue\ntrue\nstring\n\nHere's what is output by PhantomJS on Ubuntu:\nfunction (expected) {\n  return this.env.equals_(this.actual, expected);\n}\nfunction (expected) {\n  return this.env.equals_(this.actual, expected);\n}\nfunction (expected) {\n  return this.actual !== expected;\n}\ntoEqual\ntrue\ntrue\nstring\n\nSo prototype.toEqual and prototype[methodName] give different values even though methodName === 'toEqual'. I'm not sure why this is -- I run the JS.Class project, whose test framework works fine on Phantom and uses this for in idiom all over the place to set up prototypes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jcoglan", "authorAssociation": "NONE", "createdAt": "2012-02-08T17:00:20Z", "contents": "Additionally, this line inserted on line 730 fixes the problem but only for toEqual:\nthis.matchersClass.prototype.toEqual = jasmine.Matchers.prototype.toEqual;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-02-08T17:02:52Z", "contents": "Thanks jcoglan, hoping they can publish an update to make jasmine compatible with phantom soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-14T21:12:53Z", "contents": "This sounds more like an issue with PhantomJS than Jasmine. On first glance it looks like something is getting weirdly clobbered on the prototype.\nCan we figure out why PhantomJS is doing this? If Jasmine is truly doing something illegal, we'll change it, but it sounds more like there's a Phantom issue here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jcoglan", "authorAssociation": "NONE", "createdAt": "2012-02-14T22:29:33Z", "contents": "It certainly looks like a PhantomJS issue, and I've reported this thread on their issue tracker. The weird thing is why does this instance of a very common idiom break, but most everything else runs?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-02-14T22:33:27Z", "contents": "also why is it not broken for phantomjs on the mac?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "philpill", "authorAssociation": "NONE", "createdAt": "2012-04-01T21:28:02Z", "contents": "PhantomJS 1.5 was recently released - any chance the issue might've been fixed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:45:44Z", "contents": "We've changed the matchers implementation a lot for 2.0. See the matchers_redo branch.\nThere was some crazy indirect, less-performant wrapping going on. This is far more straightforward now.\nI've added to an existing story in our backlog to add PhantomJS to the upcoming cross-browser CI build. We should be able to find this during development and at least code around it.\nWe do have several PhantomJS builds on projects at Pivotal Labs and we've not seen this. Not that it means anything.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "qris", "authorAssociation": "NONE", "createdAt": "2014-07-23T16:37:38Z", "contents": "Try PhantomJS 2.0, which fixed a bunch of weird javascript problems for me: things that worked fine in the browser but failed in PhantomJS for no apparent reason.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 175, "url": "https://github.com/jasmine/jasmine/issues/175", "title": "Can you use multiple expect() calls within one test?", "contents": "It's not clear from the documentation at all. I've used multiple expect()'s within some it() ' s in my tests and it works fine, but for the sake of clarity it would help to add something like \"each test can contain several expect() calls\" as no example I can see within the documentation demonstrates this.", "createdAt": "2012-01-11T01:04:06Z", "updatedAt": "2012-02-11T06:57:00Z", "closedAt": "2012-02-11T06:57:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wheresrhys", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "wheresrhys", "company": "Squirrel Commando"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-01-11T01:19:09Z", "contents": "You absolutely can. I think for most of us who are used to rspec this isn't a surprise (although it's important to note we diverge from rspec in that we don't halt on the first expectation failure).\nPoint taken, however -- we can try to make this a little more explicit for folks who are unaccustomed to rspec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wheresrhys", "authorAssociation": "NONE", "createdAt": "2012-01-11T01:27:49Z", "contents": "ta", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 176, "url": "https://github.com/jasmine/jasmine/issues/176", "title": "Add an onComplete event to the test runner", "contents": "At the moment I'm testing a plugin against multiple versions of jQuery usnig iFrames. As the tests make extensive use of waits() I need the tests in one iframe to complete before starting the next set of tests in a new iframe (the timings get thrown way out when I run all the iframes at once)\nIn order to achieve this it'd be useful to add an onComplete event that is triggered at the ned of  .reportRunnerResults()", "createdAt": "2012-01-11T13:02:40Z", "updatedAt": "2013-05-27T00:50:00Z", "closedAt": "2013-05-27T00:50:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wheresrhys", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "wheresrhys", "company": "Squirrel Commando"}, {"login": "vaeroon", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "mrrena", "company": null}, {"login": "karlwestin", "company": null}], "comments_count": 10, "comments_data": [{"authorLogin": "vaeroon", "authorAssociation": "NONE", "createdAt": "2012-01-30T09:53:41Z", "contents": "Not sure, this might help:\njasmine.Runner.prototype.finishCallback = function() {\n            // invoke your callback here\n            jasmine.getEnv().reporter.reportRunnerResults(this);\n        };", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:10:31Z", "contents": "I'm confused. Why doesn't reportRunnerResults work for what you need?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wheresrhys", "authorAssociation": "NONE", "createdAt": "2012-02-11T19:51:47Z", "contents": "@vaeroon Good suggestion (thanks :) ), but it'd be good to include something in the documentation, or allow users to create an onComplete function taht gets caleld from in there if it exists\n@infews Because my test (because I'm using waits() a lot) contains some asynchronous processes reportRunnerResults runs asynchronously, and execute() returns before the tests have actually completed. I need some way - a custom event would be he obvious method - to listen for the test suite's completion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-14T21:06:51Z", "contents": "It seems like a bug if reportRunnerResults comes back before all tests have completed. Can you give us a failing spec for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wheresrhys", "authorAssociation": "NONE", "createdAt": "2012-02-14T22:09:08Z", "contents": "I wouldn't describe it as a bug as such, more a specific use case for which being able to supply a callback/react to an event would be useful. As test suites can contain asynchronous parts and reportRunnerResults is called after the tests have finished any code run by the user after execute() (in my case opening a new iframe and starting a new test suite with a different version of jQuery) will run before teh asynchronous test, and therefore reportRunnerResults, have run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mrrena", "authorAssociation": "NONE", "createdAt": "2012-04-09T20:07:05Z", "contents": "We've just started using an implementation of Jasmine / Sinon at work, and I already found and co-opted jasmine.Runner.prototype.finishCallback.\nIt's not a jasmine problem--if anything, it's a JavaScript problem based on its asynchronous nature--but in our case, a tested block of code contains an ajax call, and the ajax call doesn't always make it back by the time Jasmine's finishCallback completes and our custom \"final cleanup\" code runs. This timing collision is creating some serious pandemonium.\nI really wish there was some clever way that I could figure out to make Jasmine call back after all other calls in the tested code itself have completed and/or figure out a way to roll my own callback for the same: very frustrating!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mrrena", "authorAssociation": "NONE", "createdAt": "2012-04-09T21:16:03Z", "contents": "To follow-up, I say it's not a Jasmine issue above (and technically it's still not, because \"finishCallback\" is not a public method), but I do wonder why \"finishCallback\" is being triggered before the \"waitsFor\" block completes.\nFirst, a custom method we're using:\n$redirect = function(url) {\n    if (sinon.spoof) {\n        return sinon.dom.url = url;\n    }\n    else {\n        window.location = url;\n    }\n};\n\n\"$redirect\" is just a testing wrapper for \"window.location = url\"--if the global testing variable \"sinon.spoof\" is set to \"true,\" it returns the URL, otherwise it redirects.\nSo before all tests are started, we set \"sinon.spoof\" to \"true\" so that \"$redirect\" will not redirect. (We use MooTools, so that's what the code samples will be in.)\nThe spec in question tests the \"delegateClick\" method of \"myList.\" When an element with the id \"newIndividual_btn\" passes through this method, it fires off an ajax request. When the ajax request successfully completes, $redirect is triggered. Below is a simplified, cut-away view of the class/method we're testing:\nvar myList = new Class({\n\n    delegateClick: function(evt) {\n\n        var self = this;\n        var target = $(evt.target);\n\n        //New Individual\n        if (target.id == 'newIndividual_btn') {\n\n            var submitObj = {\n                 'type': 'individual'\n            };\n\n            var myRequest = new ReqJSON({\n                'url': '/gateway?file=contacts.views&method=newContact',\n                'onSuccess': function(responseJSON) {\n                    $redirect('information?id=' + responseJSON.id);\n                }\n            }).send(JSON.encode(submitObj));\n        }\n     }\n});\n\nAnd here's the skeleton of the spec in question:\n    it (\"calls valid URL\", function() {\n        var spy = spyOn(myList, 'delegateClick');\n        // custom method below that fires a click event on the target element\n        var listener = spy.listen('click', $('newIndividual_btn'));\n        waitsFor(function() {\n            return sinon.dom.url;\n        });  \n        runs(function() {\n            expect(sinon.dom.url).toContain('information?id=');\n        });  \n    });\n\nThere's lots of custom stuff at play here, but the basic mechanism holds true for Jasmine in general: we trigger a condition in preparation for \"waitsFor,\" but Jasmine's \"finishCallback\" fires before \"waitsFor\" completes, and, accordingly, our test runner gets redirected to the new page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mrrena", "authorAssociation": "NONE", "createdAt": "2012-04-10T22:28:09Z", "contents": "One last follow-up: we did some more testing, and Jasmine's \"finishCallback\" was NOT the culprit: sorry for the false alarm.\nLogging the calls clearly shows that \"finishCallback\"--without fail--executes only after the \"wait\" and \"waitsFor\" have cleared (my kudos to the team on a job outstanding).\nOur problem turned out to be that we had two of these specs in our runner, one of which only tested to see if the spy was called with a given listener. As this spy happened to contain a redirect, and since we weren't testing the redirect, nothing had instructed Jasmine that there was a process outstanding and it every so often, it would fire after the \"finishCallback\" had executed. Had we had a \"waitsFor\" in there, I'm pretty sure it would have consistently worked without fail.\nIn short, JASMINE WORKS LIKE A DREAM. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "karlwestin", "authorAssociation": "NONE", "createdAt": "2012-05-10T12:43:29Z", "contents": "Thanks everyone involved in this thread!\n@infews \u2013 could you give a short example on how to use reportRunnerResults for some kind of similar effect to a finish callback?\nCheers guys!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:49:50Z", "contents": "Another idea - and one that should help most folks.\nFor 2.0, we've introduced the idea of \"boot files\" for Jasmine gem projects. In fact, Jasmine core now uses the Jasmine gem for devleopment. So you can see the dev_boot.js file we use.\nPrior to 2.0, the startup code, including anything that needed to run around the Jasmine enviroment execution, was run in the onloadhandler. And you had no way to get to it.\nNow the boot.js file, which you can hack and customize to your heart's content is there for you to insert your project-specific reporters, etc.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 178, "url": "https://github.com/jasmine/jasmine/issues/178", "title": "API Suggestion: Use an explicit callback argument for completion of async specs", "contents": "Reading through the mocha.js docs: http://visionmedia.github.com/mocha/\nOne awesome feature stands out.  Spec blocks can accept an argument, which is a function that can be called to signify the end of an async spec.\ndescribe('User', function(){\n  describe('#save()', function(){\n    it('should save without error', function(done){\n      var user = new User('Luna');\n      user.save(function(err){\n        if (err) throw err;\n        done();\n      });\n    })\n  })\n})\n\nTo do the same in Jasmine, it might look like this:\ndescribe('User', function(){\n  describe('#save()', function(){\n    it('should save without error', function(){\n      var user, error;\n\n      runs(function() {\n        user = new User('Luna');\n        user.save(function(err){\n          error = err;\n        });\n      });\n\n      waits(100);\n\n      runs(function {\n        expect(error).toBeFalsy();\n      });\n\n    })\n  })\n})\n\nI suppose you could setup a spy, and waitsFor() that spy to be called form the callback as well.  But the point is this: you have to set all that up.  Using the provided callback instead, cleans up the test greatly.\nI assume this works by checking the specFunction.length and if that is one, then we assume it's an async spec and refuse to move on until that callback is called (or spec times out of course).  And if it's zero the spec runs synchronously, or can use waits/runs queues as normal.\nI've had to train a few people on Jasmine and the waits() and runs() dance is always a sticking point of conceptual understanding.  But an explicit, \"done with everything in this spec\" callback is a far easier API to grasp, and requires far less setup in the spec itself. In my opinion it's easier to learn, write, read and maintain.", "createdAt": "2012-01-16T23:03:13Z", "updatedAt": "2013-05-15T04:57:17Z", "closedAt": "2013-05-06T14:43:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Squeegy", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "Squeegy", "company": "Beautiful PIxel LLC"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "timbertson", "company": null}, {"login": "masklinn", "company": null}, {"login": "jchris", "company": "Document Coin"}, {"login": "waltercacau", "company": "Google"}, {"login": "gimmi", "company": null}, {"login": "hakubo", "company": "Wikia"}, {"login": "Bartvds", "company": null}], "comments_count": 14, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T07:06:50Z", "contents": "Good idea. I've marked it as \"v2\" as that's where we're putting syntax changes/updates for now. Thx!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timbertson", "authorAssociation": "NONE", "createdAt": "2012-02-16T01:40:50Z", "contents": "+1, would love to see this (I was just about to request the same thing).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "masklinn", "authorAssociation": "NONE", "createdAt": "2012-02-28T15:19:28Z", "contents": "This also makes promise-based code much simpler to write: the developer can just register the specified deferred into the promise e.g.\nit('should save without error', function(done){\n    var user = new User('Luna');\n    user.save().then(done, done);\n});\n\n(nb: that does not work in Mocha if save returns data on success, as its done only expects failure)\nthe code would be even nicer if it provided a \"failure\" callback as well, which would use whatever arguments were passed to it as the test failure report:\nit('should save without error', function(done, failed) {\n    var user = new User('Luna');\n    user.save().then(done, failed);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Squeegy", "authorAssociation": "NONE", "createdAt": "2012-03-05T18:51:04Z", "contents": "@masklinn In my opinion a spec should fail in only 2 cases, when an expectation is not met, or an uncaught exception is raised.  This third and far less common failure method seems inconsistent.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jchris", "authorAssociation": "NONE", "createdAt": "2012-03-06T15:22:58Z", "contents": "I'd like this feature as well. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "masklinn", "authorAssociation": "NONE", "createdAt": "2012-03-06T15:38:57Z", "contents": "This third and far less common failure method seems inconsistent.\n\nIt's not a third failure method. There's an expectation that the promise is resolved (succeeds), if the promise is rejected (fails) then it's a failure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "waltercacau", "authorAssociation": "NONE", "createdAt": "2012-03-13T19:10:29Z", "contents": "+1, would love to see this also", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gimmi", "authorAssociation": "NONE", "createdAt": "2013-05-05T16:32:05Z", "contents": "mocha support this, jasmine-node already support it too, Derick Bailey published an extension to support it, so please add this feature to the core", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hakubo", "authorAssociation": "NONE", "createdAt": "2013-05-06T09:04:50Z", "contents": "+1 to that\nI use https://github.com/derickbailey/jasmine.async in my projects\nBu this would be so much nicer to have in core", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-06T14:43:21Z", "contents": "This is implemented on master as part of 2.0. This version is not quite ready for prime time, but you can see the direction we are heading.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gimmi", "authorAssociation": "NONE", "createdAt": "2013-05-07T10:36:46Z", "contents": "Seems that work on 2.0 branch is not very active, any ETA?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-08T00:32:27Z", "contents": "There is work going on in a couple of branches. But yes, it moves in fits-and-starts.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Bartvds", "authorAssociation": "NONE", "createdAt": "2013-05-14T22:18:26Z", "contents": "I'm not sure of the status here; but a FYI on a nice alternative:\nThe taskrunner grunt assumes synchronous execution of a task function unless you call var done = this.async(); from inside the function body so it enables async mode for that execution and returns a closure you need to call to continue.\nThis could be more flexible then passing in the done as argument like in the above proposal, because you can pass arguments to the this.async(), like a message and a timeout delay, You could also call it multiple times and have the runner wait for all the calls to be cleared.\nit('haswebservice', function(){\n    var done = this.async(5000, 'calling webservice');\n    request.send(function(err, res){\n        expect(res.ok).toBe(true);\n        done();\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gimmi", "authorAssociation": "NONE", "createdAt": "2013-05-15T04:57:17Z", "contents": "Like it! This can also be supported in addition to the callback version", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 180, "url": "https://github.com/jasmine/jasmine/issues/180", "title": "setTimeout, setInterval, clearTimeout, clearInterval functions does not work with JavaScriptCore framework in iPhone", "contents": "I have integrated Jasmine with iPhone project. I am running Jasmine using JavaScriptCore framework for iPhone. But JavaScriptCore is unable to interpret setTimeout and all that  function.\nI have statically defined those as below\nthis.setTimeout    = function() {};\nthis.clearTimeout  = function() {};\nthis.setInterval   = function() {};\nthis.clearInterval = function() {};\nI found that these functions are not part of JavaScriptCore. What could be solution to this...?? Is there any other alternative to these function??", "createdAt": "2012-01-23T05:23:57Z", "updatedAt": "2013-05-27T00:54:24Z", "closedAt": "2013-05-27T00:54:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shahdhiren", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "shahdhiren", "company": null}, {"login": "filipposarzana", "company": "@ProntoPro "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "filipposarzana", "authorAssociation": "NONE", "createdAt": "2012-01-27T10:06:30Z", "contents": "usually you can do this way:\ntimeoutID = window.setTimeout(function(){}, 1000);\nwindow.clearTimeout(timeoutID);\ntimeintervalID = window.setInterval(function(){}, 1000);\nwindow.clearInterval(timeintervalID);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shahdhiren", "authorAssociation": "NONE", "createdAt": "2012-01-27T10:47:05Z", "contents": "Thanks filipposarzana for your reply. But window is not defined in JavaScriptCore. so unable to get window object and hence the functions of it.. can you guide me some alternate way with JavaScriptCore..\nthanks again...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T06:54:07Z", "contents": "Is the suggested fix that Jasmine not assume these functions are present? I believe we have to depend on setTimeout working in some situations.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T00:54:17Z", "contents": "Closing. At the moment supporing JavaScriptCore is not a priority.\nHowever, we are now more careful about finding the global where the timing functions live. So this may be fixed on master", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 182, "url": "https://github.com/jasmine/jasmine/issues/182", "title": "Tests on extended ascii charsets fail with jasmin-maven-plugin", "contents": "Hello,\nThe following test :\ndescribe('Test fonction htmlEncode',function()\n{\nit('Test encode characters',function()\n{\ninput = '\u00dc\u00c4';\nexpected = '\u00dc\u00c4';\ninput = input.replace(/\u00dc/g,'\u00dc');\nresult = input.replace(/\u00c4/g,'\u00c4');\nexpect(result).toBe(expected);\n    result = '\u00dc'.replace(/\u00dc/g,'&Uuml;');\n    expect(result).toBe('&Uuml;');\n\n    result = '\u00c4'.replace(/\u00c4/g,'&Auml;');\n    expect(result).toBe('&Auml;');\n\n    input = '\u00dc\u00c4';\n    input = input.replace(/\u00dc/g,'&Uuml;');\n    expect(input).toBe('&Uuml;\u00c4');\n\n    input = input.replace(/\u00c4/g,'&Auml;');\n    expect(input).toBe(expected);\n\n    input = '\u00dcabcdef';\n    input = input.replace(/\u00dc/g,'&Uuml;');\n    expect(input).toBe('&Uuml;abcdef');\n});\n\n});\nfails while executing from Eclipse with the jasmin-maven-plugin :\n1.) Test fonction htmlEncode it Test encode characters <<< FAILURE!\n\nExpected '\u00dc\u00dc' to be '\u00dc\u00c4'.\nPassed.\nPassed.\nExpected '\u00dc\u00dc' to be '\u00dc?'.\nExpected '\u00dc\u00dc' to be '\u00dc\u00c4'.\nPassed.\n\nExecuted from a browser in SpecRunner.html, it returns no error.\nIs there a way to configure the encoding ?", "createdAt": "2012-01-23T14:12:19Z", "updatedAt": "2012-01-24T11:28:35Z", "closedAt": "2012-01-24T11:27:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Hilberty", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Hilberty", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Hilberty", "authorAssociation": "NONE", "createdAt": "2012-01-24T11:28:35Z", "contents": "Found...\nAdd an entry for Source Code Encoding in the properties section of pom.xml.\nproperties\n...\nproject.build.sourceEncoding>ISO-8859-1/project.build.sourceEncoding\n/properties", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 183, "url": "https://github.com/jasmine/jasmine/issues/183", "title": "lib/jasmine-core /example/SpecRunner.html still uses TrivialReporter", "contents": "\u2026even though it's declared deprecated. looks like HTMLReporter is the way now to run tests in the browser.\nIs TrivialReporter used on purpose in SpecRunner.html, or is that something overlooked?", "createdAt": "2012-01-24T10:29:20Z", "updatedAt": "2012-04-01T17:53:14Z", "closedAt": "2012-04-01T17:53:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ikr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ikr", "company": "XIAG AG"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T06:51:43Z", "contents": "I'll take a look. It's probably a just a mistake.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-24T21:25:48Z", "contents": "Now in Tracker: https://www.pivotaltracker.com/story/show/25484287", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-01T17:53:14Z", "contents": "Fixed on HEAD of master. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 184, "url": "https://github.com/jasmine/jasmine/issues/184", "title": "Jasmine Clock mocking and JQuery effect 'complete' function does not go along well", "contents": "I have found a problem testing JQuery animations. The problem is that during jasmine.Clock.useMock() mode JQuery does not call complete function after effect execution.\nI am not sure whether it is jasmine ot jquery problem. The complete ticket is here:\nhttp://stackoverflow.com/questions/9141800/jasmine-clock-mocking-and-jquery-effect-complete-function-does-not-go-along-we", "createdAt": "2012-02-05T08:07:24Z", "updatedAt": "2014-08-28T19:19:30Z", "closedAt": "2012-02-11T06:49:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vkovalskiy", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "vkovalskiy", "company": "Medesk"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "dguzzo", "company": null}, {"login": "EvHaus", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-11T06:49:00Z", "contents": "This is a known issue. jQuery animations depend on setTimeout and the jasmine mock clock stubs that function. You need to turn off jQuery animations ($.fx.off()) in a global beforeEach.\nI think this is a good pattern - you don't want animations messing with your tests. If you need to test with animations on I suggest you add incremental browser-based testing to your stack.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "vkovalskiy", "authorAssociation": "NONE", "createdAt": "2012-02-19T10:06:37Z", "contents": "I have tried to turn off animations in a beforeEach of a particular describe block but no result (complete remains uncalled).\nWhat did you mean exactly saing global beforeEach? Where the statement should be placed to resolve jQuery problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dguzzo", "authorAssociation": "NONE", "createdAt": "2012-06-06T05:33:57Z", "contents": "You need to turn off jQuery animations ($.fx.off()) in a global beforeEach.\n\nAh, this worked for me! It was not clear to me initially why an effect/animation such as fadeOut() would not act as expected in conjunction with\njasmine.Clock.tick(someMilliSeconds);\ndoing the below to turn off animations in my specific describe() function worked:\n    beforeEach(function(){\n      loadFixtures('prototype');\n      jasmine.Clock.useMock();\n      jQuery.fx.off = true;\n    });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EvHaus", "authorAssociation": "NONE", "createdAt": "2014-08-25T17:23:44Z", "contents": "Just an FYI for those finding this issue, jQuery 2.0 does not have an fx.off() method. You need use this instead:\n$.fx.off = true;", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 185, "url": "https://github.com/jasmine/jasmine/issues/185", "title": "Jasmine raise_if_conflicts with ruby 1.9.3", "contents": "/Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:1625:in raise_if_conflicts': Unable to activate actionpack-3.1.0, because rack-1.4.1 conflicts with rack (~> 1.3.2) (Gem::LoadError) from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:740:inactivate'\nfrom /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:774:in block in activate_dependencies' from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:760:ineach'\nfrom /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:760:in activate_dependencies' from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/specification.rb:744:inactivate'\nfrom /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems.rb:209:in rescue in try_activate' from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems.rb:206:intry_activate'\nfrom /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:58:in rescue in require' from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:35:inrequire'\nfrom /Users/cyrusinnovation/.rvm/gems/ruby-1.9.3-p0@timeofftracker/gems/jasmine-1.1.2/lib/jasmine/railtie.rb:1:in <top (required)>' from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:55:inrequire'\nfrom /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:55:in require' from /Users/cyrusinnovation/.rvm/gems/ruby-1.9.3-p0@timeofftracker/gems/jasmine-1.1.2/lib/jasmine.rb:13:in<top (required)>'\nfrom /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:55:in require' from /Users/cyrusinnovation/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:55:inrequire'\nfrom /Users/cyrusinnovation/.rvm/gems/ruby-1.9.3-p0@timeofftracker/gems/jasmine-1.1.2/bin/jasmine:4:in <top (required)>' from /Users/cyrusinnovation/.rvm/gems/ruby-1.9.3-p0@timeofftracker/bin/jasmine:19:inload'\nfrom /Users/cyrusinnovation/.rvm/gems/ruby-1.9.3-p0@timeofftracker/bin/jasmine:19:in `'\nGemfile:\ngem 'guard'\ngem 'guard-coffeescript'\ngem 'jasmine'\ngem 'bundler'", "createdAt": "2012-02-10T19:33:36Z", "updatedAt": "2012-02-27T14:40:10Z", "closedAt": "2012-02-27T14:40:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pnikonowicz", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "pnikonowicz", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "codeZeilen", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-14T20:42:02Z", "contents": "Thanks, we'll take a look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "codeZeilen", "authorAssociation": "NONE", "createdAt": "2012-02-19T20:48:02Z", "contents": "I am really not sure if this belongs here, but I had the same error with ruby-1.9.2 and solved it by using: \"bundle exec jasmine init\" instead of \"jasmine init\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-24T21:24:26Z", "contents": "Paul - can you verify if bundle exec fixes this problem? If so, feel free to close this issue. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pnikonowicz", "authorAssociation": "NONE", "createdAt": "2012-02-27T14:40:09Z", "contents": "It appears so. Sorry for the inconvenience.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 187, "url": "https://github.com/jasmine/jasmine/issues/187", "title": "PrettyPrinter emits very long string", "contents": "I'm using Jasmine to test the existence of a Backbone Model instance, expecting it to be falsy.\nexpect(model).toBeFalsy();\n\nIn one case model was truthy, and Jasmine wanted to present a nicely formatted string of the model, causing the page to hang because the object graph was too big and the string concatenation is inefficient  (this.string += value)\nI think it would be better to\n\nstop formatting after the string has ~100 chars\nuse an array to collect the values and yield the string via this.values.join(\"\")", "createdAt": "2012-02-21T15:05:17Z", "updatedAt": "2012-05-15T09:23:09Z", "closedAt": "2012-05-15T09:23:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "OttoAllmendinger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "OttoAllmendinger", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-14T21:13:02Z", "contents": "I think we're going to take this pull -- would that be a reasonable fix to this problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "OttoAllmendinger", "authorAssociation": "NONE", "createdAt": "2012-05-15T09:23:08Z", "contents": "looks pretty good to me", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 188, "url": "https://github.com/jasmine/jasmine/issues/188", "title": "add evergreen and coffeescript tmbundle to \"Related Projects\"", "contents": "Please add the evergreen project (https://github.com/jnicklas/evergreen) to the Jasmine extensions list. It seems it's the best way to integrate Jasmine with Rails app at the moment, and I was completely unaware that it existed until yesterday, because it's not listed there.\nAnd while we're at it, please add the Jasmine coffeescript Textmate bundle too (https://github.com/groupme/jasmine-coffeescript-tmbundle).", "createdAt": "2012-02-22T09:51:19Z", "updatedAt": "2012-03-03T19:22:16Z", "closedAt": "2012-02-24T21:23:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mackuba", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mackuba", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-02-24T21:23:16Z", "contents": "Access to the wiki was locked. It's now back open. Feel free to add both links!\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mackuba", "authorAssociation": "NONE", "createdAt": "2012-02-26T15:37:54Z", "contents": "Thanks, added.\nI was thinking it would be good to arrange the list in some kind of sections, like Backbone has on this page: https://github.com/documentcloud/backbone/wiki/Extensions%2C-Plugins%2C-Resources - what do you think? Is it ok if I do that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-01T21:53:58Z", "contents": "Feel free to add some organization.\nAs far as integrating Jasmine with Rails apps, have you tried the jasmine gem? http://github.com/pivotal/jasmine-gem", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mackuba", "authorAssociation": "NONE", "createdAt": "2012-03-03T19:22:16Z", "contents": "Done: https://github.com/pivotal/jasmine/wiki/Related-projects\nI've also added jasmine-stealth which was missing there.\nAs for jasmine-gem - yes, I've tried it in some previous project, but evergreen just seems to have more features (e.g. coffeescript support, running headless tests via anything that Capybara supports (e.g. QtWebkit) and not just Selenium, etc.)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 191, "url": "https://github.com/jasmine/jasmine/issues/191", "title": "sync. for more than one suits", "contents": "i am new in jasmine world... this is lovely js  for testing purpose......\ni suffer from one problem ....\ni have more than 1 suit & at run time it will not run sync. because of that it will break up my code...\nso i just want to know that , this bug is from my side or it is something else.\npls give me some hint.....", "createdAt": "2012-02-28T11:11:57Z", "updatedAt": "2013-05-27T01:17:52Z", "closedAt": "2013-05-27T01:17:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "suyogs", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "suyogs", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T01:17:49Z", "contents": "Please jump on the mailing list: jasmine-js@googlegroups.com\nIf you provide some examples, I'll be we'll be able to help you.\nClosing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 192, "url": "https://github.com/jasmine/jasmine/issues/192", "title": "s", "contents": "", "createdAt": "2012-02-28T12:35:56Z", "updatedAt": "2012-02-29T05:59:58Z", "closedAt": "2012-02-29T05:59:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joeljunstrom", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joeljunstrom", "company": "Oktavilla"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 199, "url": "https://github.com/jasmine/jasmine/issues/199", "title": "Problem with toContain and regular expressions", "contents": "With an array of regular expression, it seems that toContain is always true.\nThis test case fails:\nit(\"is crazy\", function()\n{\n    var array = [];\n    var p1 = /1/i;\n    var p2 = /2/i;\n    array.push(p1);\n    array.push(p2);\n    array.splice(0,1);\n    expect(array).toContain(p2);\n    expect(array).not.toContain(p1);\n    expect(array.length).toBe(1);\n});\n\nThe error message says Error: Expected [ /2/i ] not to contain /1/i.. If .not is removed, the test case pass.", "createdAt": "2012-03-06T21:24:41Z", "updatedAt": "2012-10-30T19:57:38Z", "closedAt": "2012-10-30T19:57:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alightgoesout", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alightgoesout", "company": "Legrand"}, {"login": "yopefonic", "company": "OWNR, Yopefonic Inc"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "yopefonic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-06-03T20:50:22Z", "contents": "I took a little closer look into the case and it seems that the regex is the main issue here, matching objects and other variables seems to be fine. Also note that the regex issue extends to other matchers like toEqual.\nwhat happens is that the content of the array is identified as an object and is compared in that way. problem is the structure of a RegExp object is different from what the jasmine.Env.compareObjects_ expects and fails to do a compare that is reliable.\nI propose adding a check to jasmine.Env.equals_ to do if (a instanceof RegExp && b instanceof RegExp). there should be no other side effects as this would only apply for both a and b being a RegExp and comparing an object with the RegExp does give back a reliable false.\nI'm still not a 100% sure how to compare the regexp properly but it is likely that I will turn it into a string like it is done in data comparison. Working on it!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yopefonic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-27T03:24:48Z", "contents": "@alightgoesout pull request has been accepted and is merged into master. Issue can be closed", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-30T19:57:38Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 200, "url": "https://github.com/jasmine/jasmine/issues/200", "title": "How about async events testing?", "contents": "Hi guys!\nI'm newbie in using Jasmine and I have some trouble with async tests.\nFor example I have a constructor, which has link to some HTML element. And when I click on this element I want to execute some method of this constructor.\nfunction MyConstrustor(element) {\n    this.element = element;\n    this.element.addEventListener('mousedown', this, false);\n    this.element.addEventListener('mousemove', this, false);\n    this.element.addEventListener('mouseup', this, false);\n}\nMyConstructor.prototype.handleEvent = function (event) {\n    switch (event.type) {\n        case 'mousedown':\n            this.mouseDown(event);\n            break;\n        case 'mousemove':\n            this.mouseMove(event);\n            break;\n        case 'mouseup':\n            this.mouseUp(event);\n            break;\n    }\n};\nMyConstructor.prototype.mouseDown = function (event) {\n    //some code goes here...\n};\nMyConstructor.prototype.mouseMove = function (event) {\n    //...and here\n};\nMyConstructor.prototype.mouseUp = function (event) {\n    //..and here\n};\nSo, I want to spy some method in my object.\n\nI create an element\nI create an event\nI create an object which should be instance of MyConstructor\nI spyOn(myObject, 'someMethod')\nI dispatch created event to element in my object\n\nBut, when I execute myObject.element.dispatchEvent(event) I have async code. Can anyone help me with this test? Thanks.", "createdAt": "2012-03-09T22:25:23Z", "updatedAt": "2013-05-27T15:27:37Z", "closedAt": "2013-05-27T15:27:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Alexey-Raspopov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Alexey-Raspopov", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "cwebbdesign", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-11T22:33:38Z", "contents": "Can you please post your spec file? It's hard to see what your problem is without context.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cwebbdesign", "authorAssociation": "NONE", "createdAt": "2013-04-14T18:20:31Z", "contents": "Hi @Alexey-Raspopov\nWere you ever able to solve your problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T15:27:33Z", "contents": "Closing due to lack of activity.\nThis type of help is usually best served on the mailing list: jasmine-js@googlegroups.com", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 204, "url": "https://github.com/jasmine/jasmine/issues/204", "title": "Compatibility with jQuery Mobile", "contents": "I'm just in the middle of implementing some Jasmine tests for a jQuery mobile application I'm working on, I've run into an error that I managed to track down to adding the jQuery mobile library, the error is as follows:\nJasmine.js:1769 TypeError: Cannot read property 'abort' of undefined.\nAs soon as I remove the jQM dependency, the error goes away.\nThis is my code:\n<!DOCTYPE html><html><head>    <title>HTML5/Common/Tests</title>    <!-- LOAD STYLES FIRST -->    <link type=\"text/css\" rel=\"stylesheet\" href=\"libs/jasmine.css\" media=\"screen\">    <link type=\"text/css\" rel=\"stylesheet\" href=\"../../Common/libs/jquery.mobile-1.0.1.css\" />    <!-- LOAD JASMINE LIBRARIES -->    <script type=\"text/javascript\" src=\"libs/jasmine.js\"></script>    <script type=\"text/javascript\" src=\"libs/jasmine-html.js\"></script>    <!-- LOAD DEPENDENCIES -->    <script type=\"text/javascript\" src=\"../../Common/libs/jquery-1.7.1.min.js\"></script>    <script type=\"text/javascript\" src=\"../../Common/libs/jquery.mobile-1.0.1.min.js\"></script>    <!-- LOAD CODE TO TEST -->    <script type=\"text/javascript\" src=\"../../Common/libs/myLib.js\"></script>    <!-- LOAD ACTUAL TESTS -->    <script type=\"text/javascript\">       describe(\"Suite 1\", function() {            it(\"Should be that 1 equals 0\", function() {                  expect(1).toEqual(0);            });       });    </script></head><body>    <script type=\"text/javascript\">     jasmine.getEnv().addReporter(new jasmine.TrivialReporter());     jasmine.getEnv().execute();    </script></body></html>\nI'd prefer to use Jasmine for this application instead of qUnit as I think its more flexible and easier to implement in CI and explain to the BA's and PM's.. however after tinkering with this problem for a couple of hours and some futile searches on google I still havent been able to solve it so I'm starting to consider moving on.\nHere is the stack-overflow URL in case there is a workaround come up from the discussion or whoever solves it wants to claim brownie points there:\nhttp://stackoverflow.com/questions/9784504/jasmine-throwing-up-an-error-with-jquery-mobile\nThanks and Regards.", "createdAt": "2012-03-20T10:26:01Z", "updatedAt": "2013-10-02T22:30:29Z", "closedAt": "2013-10-02T22:30:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sdesalas", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "sdesalas", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-03-20T17:06:44Z", "contents": "Can you paste in the context around line 1769 of the jasmine.js that you're using? It doesn't appear to be HEAD. If I had to guess I'd say it's this line:\nif (self.blocks[self.index].abort) {\nself.abort = true;\n}\nwhich suggests some of your blocks might be empty?\nI also notice you're jasmine.getEnv().execute()-ing without waiting for the DOM page ready to fire. Try wrapping your execute in $(function() { }) to wait until the page ready fires and see if that helps (refer to the example for more info).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sdesalas", "authorAssociation": "NONE", "createdAt": "2012-03-21T12:11:32Z", "contents": "Hi ragaskar,\nThanks for your prompt response and your help. Yep thats correct the line causing the error is in 'jasmine.Queue.prototype.next_' code below:\nif (self.blocks[self.index].abort) {\nself.abort = true;\n}\nI looked at the execution scope and 'self' was of type jasmine.Queue, 'self.blocks' was an Array[1] and 'self.index' was 1 too, thus causing the error.\nI tried wrapping the .execute() inside a $(document).ready(function() { ... }); to await for all scripts to load and execute and it still fires off the same error.\nFor my first test there was only a single test inside a test block as follows so I'm unsure what is causing it:\ndescribe(\"Suite 1\", function() {\nit(\"Should be that 1 equals 0\", function() {\nexpect(1).toEqual(0);\n});\n});\nMy only guess is that this is somehow related to the extensive DOM manipulation carried out inside jQueryMobile, which basically walks through the HTML page and recreates the DOM and applies styling according to special formatting rules based on data-role=\"X\" attributes. Im not sure wether this is helpful but you can read more on:\nhttp://jquerymobile.com/demos/1.1.0-rc.1/docs/about/getting-started.html\nTry right-click and 'Inspect Element' on one of the formatted lists there and you'll see what I mean.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T15:51:09Z", "contents": "We've changed how the queuing of functions works pretty drastically on master.\nCan you take a look and see if the problem persists?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T22:30:29Z", "contents": "Closing for now. Please let us know/reopen this if this is still an issue for you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 206, "url": "https://github.com/jasmine/jasmine/issues/206", "title": "Packaging for custom matchers?", "contents": "Has there been any discussion on how to package custom matchers? Right now it seems like we're just supposed to call this.addMatchers within a beforeEach block.", "createdAt": "2012-03-24T23:46:40Z", "updatedAt": "2013-05-27T01:27:05Z", "closedAt": "2013-05-27T01:27:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rehanift", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rehanift", "company": "Oracle"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-02T18:43:02Z", "contents": "That's the idea for now. Is there anything in particular you would like to see?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T01:26:57Z", "contents": "We strongly believe that custom matchers should only live per spec.\nClosing due to inactivity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 211, "url": "https://github.com/jasmine/jasmine/issues/211", "title": "waitsFor timeout error throws inscrutable TypeError", "contents": "There appears to be a bug in Jasmine v1.1.0, where if a waitsFor block times out, jasmine.WaitsForBlock#execute() calls the following:\nthis.spec.fail({\n  name: 'timeout',\n  message: message\n});\n(See WaitsForBlock.js line 40)\nUnfortunately, jasmine.Spec#fail() requires that its argument is a proper error -- specifically, an object with a stack property. (See Spec.js line 124).\nThis results in the following error if you call a waitsFor that times out: Uncaught TypeError: Cannot read property 'stack' of undefined.", "createdAt": "2012-04-03T16:43:10Z", "updatedAt": "2013-05-27T15:54:31Z", "closedAt": "2013-05-27T15:54:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nickstenning", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nickstenning", "company": "@Microsoft "}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-02T18:11:35Z", "contents": "Story here: https://www.pivotaltracker.com/story/show/28967269\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T15:54:25Z", "contents": "Closing. We have a Tracker story for this issue. And async is now different.\nThanks for helping us find issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 212, "url": "https://github.com/jasmine/jasmine/issues/212", "title": "When calling a function that wraps a describe, this.views is undefined", "contents": "I'm trying to wrap a describe in a function to DRY up my tests.  However, when I do this I get \"this.views is undefined\" on line 205 of jasmine-html.js.  Adding a check for \"typeof this.views !== 'undefined'\" before this fixes the issue but I'm not confident this is the best place to address the bug.", "createdAt": "2012-04-06T20:22:12Z", "updatedAt": "2013-05-27T15:56:29Z", "closedAt": "2013-05-27T15:56:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bmayen", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "bmayen", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-06T22:19:49Z", "contents": "The scope with which your 'shared example' will be called depends on its location; without seeing exactly what code you have that is causing a problem I can only wonder if you actually need that scope present. What happens when you\nmyDryFunction.call(this);\ninside your describe block? Is the problem fixed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bmayen", "authorAssociation": "NONE", "createdAt": "2012-04-06T23:58:15Z", "contents": "Thank you.  That does work, but HTMLReporter piles all of the results from every call to it at the bottom of the report instead of within the test it was called from.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T15:56:21Z", "contents": "Thanks for the find. We think that the work we're doing on master cleans up this type of problem - leaking between the reporter and test execution.\nIf there's still an issue, please open a new issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 213, "url": "https://github.com/jasmine/jasmine/issues/213", "title": "roadmap for spying on jQuery deferred/when/done", "contents": "With the later versions of jQuery, there has been a significant implementation and api change when it comes to ajax and other tasks that need to be asynchronous. Spying on these and keeping a track of the various deferred and promises objects (and numerous \"when\" invocation params) is a major pain.\nIs there something planned in the roadmap for addressing this?", "createdAt": "2012-04-09T08:44:13Z", "updatedAt": "2012-04-09T23:23:24Z", "closedAt": "2012-04-09T23:23:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vaeroon", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vaeroon", "company": null}, {"login": "rdy", "company": "Sony"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2012-04-09T15:00:55Z", "contents": "Have you looked at the mock ajax helper which stubs out jQuery's internal ajax? https://github.com/pivotal/jasmine-ajax\nIf you use this mock you don't need to do anything special in your code to handle promises. It essentially lets you control the response of the ajax request so you can simulate 200s, 404s, 500s or even timeouts.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-09T23:23:24Z", "contents": "It's unlikely Jasmine will ever explicitly add code with the sole intent of simplifying testing for jQuery-specific features. This sort of functionality should be handled by add-ins (such as jasmine-ajax, like rdy suggested) so we can keep Jasmine as framework agnostic as possible.\nIf jasmine-ajax doesn't seem to meet your needs, feel free to re-open and discuss more specifically what features you need in Jasmine to deal with deferred/when/done.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 215, "url": "https://github.com/jasmine/jasmine/issues/215", "title": "Startup reports \"Address already in use - bind(2)\" on Ubuntu", "contents": "When using Jasmine on Ubuntu within a new Rails app, a warning arises indicating the Address is already in use.  This occurs no matter which port is specified, though does not appear to affect functionality.\nrake jasmine\nyour tests are here:\nhttp://localhost:8888/\n[2012-04-10 19:35:13] INFO  WEBrick 1.3.1\n[2012-04-10 19:35:13] INFO  ruby 1.9.2 (2011-07-09) [i686-linux]\n[2012-04-10 19:35:13] WARN  TCPServer Error: Address already in use - bind(2)\n[2012-04-10 19:35:13] INFO  WEBrick::HTTPServer#start: pid=2850 port=8888\nrake jasmine JASMINE_PORT=12345\nyour tests are here:\nhttp://localhost:12345/\n[2012-04-10 19:54:22] INFO  WEBrick 1.3.1\n[2012-04-10 19:54:22] INFO  ruby 1.9.2 (2011-07-09) [i686-linux]\n[2012-04-10 19:54:22] WARN  TCPServer Error: Address already in use - bind(2)\n[2012-04-10 19:54:22] INFO  WEBrick::HTTPServer#start: pid=3459 port=12345", "createdAt": "2012-04-10T23:58:33Z", "updatedAt": "2013-07-21T17:38:44Z", "closedAt": "2013-07-21T17:38:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "darksheik", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "darksheik", "company": "@SeatScouts "}, {"login": "mark-rushakoff", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "febeling", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "mark-rushakoff", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-11T03:41:12Z", "contents": "I'm pretty sure this is a WEBrick issue, not a Jasmine issue.  I've seen this happen (also in Ubuntu) in a separate project of mine that is just launching a raw WEBrick server.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "darksheik", "authorAssociation": "NONE", "createdAt": "2012-04-11T11:20:11Z", "contents": "Possibly... thought it was Jasmine-specific just because I don't see it when I run Rails or Sinatra.  I've been able to duplicate it on another Ubuntu box.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:06:39Z", "contents": "Is this still an issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "febeling", "authorAssociation": "NONE", "createdAt": "2013-06-20T16:33:17Z", "contents": "I have this just now in 1.3.2", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-20T16:56:01Z", "contents": "Which versions of Rails, Rack and Ruby are you using?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "febeling", "authorAssociation": "NONE", "createdAt": "2013-06-20T17:12:12Z", "contents": "Rails 3.2.13\nrack 1.4.5\nruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-linux]\non Centos 6.4\nOn Thu, Jun 20, 2013 at 6:56 PM, Davis W. Frank notifications@github.comwrote:\n\nWhich versions of Rails, Rack and Ruby are you using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/215#issuecomment-19766443\n.\n\n\nFlorian Ebeling\nflorian.ebeling@gmail.com\nhttp://florianebeling.com/about", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-21T17:38:44Z", "contents": "Can you please try this on master of the Jasmine gem and then report an issue against the gem at http://GitHub.com/pivotal/jasmine-gem/issues ?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 216, "url": "https://github.com/jasmine/jasmine/issues/216", "title": "Bogus SyntaxError centered around the JavaScript eval() method.", "contents": "I say it is a bogus syntax error because when I run my test using the 'clean jasmine bdd' maven command, my test pass when I open up the browser. However, when I run my test using the 'clean test' maven command, my test fails with the following error message below. So I wonder why it work using bdd via the web browser and not from the command line. Please confirm bug. Thank you.\nHere is the code I am testing...\nTester.js file:\nfunction Tester(){\nthis.getInstance = function(classRef){\n// get the functions as a string\nvar classAsString = classRef.toString();\n    // To expose the private functions, we create\n    // a new function that goes trough the functions string\n    // we could have done all string parsing in this class and\n    // only associate the functions directly with string\n    // manipulation here and not inside the new class,\n    // but then we would have to expose the functions as string\n    // in the code, which could lead to problems in the eval since\n    // string might have semicolons, line breaks etc.\n    var funcString = \"\";\n    funcString += \"new (\";\n    funcString += classAsString.substring(0, classAsString.length - 3);\n    funcString += \";\\n\\tthis._privates = {};\\n\";\n    funcString += \"\\tthis._initPrivates = function(f){\\n\";\n        funcString += \"\\t\\tvar fs = f.toString();\\n\";\n        funcString += \"\\t\\tvar pf = fs.match(/function\\\\s*?(\\\\w.*?)\\\\(/g);\\n\";\n        funcString += \"\\t\\tthis._privates = {};\\n\";\n        funcString += \"\\t\\tfor (var i = 0, ii = pf.length; i < ii; i++){\\n\";\n        funcString += \"\\t\\t\\tvar fn = pf[i].replace(/function\\\\s+/, '').replace('(', '');\\n\";\n        funcString += \"\\t\\t\\tif('\"+classRef.name+\"' != fn){\\n\";\n        funcString += \"\\t\\t\\t\\tthis._privates[fn] = eval(fn);\\n\";\n        funcString += \"\\t\\t\\t}\\n\";\n        funcString += \"\\t\\t}\\n\";\n\n        funcString += \"\\t\\tpf = fs.match(/var\\\\s*\\\\w.*?\\\\s+/g);\\n\";\n        funcString += \"\\t\\tfor(var i = 0, ii = pf.length; i < ii; i++){\\n\";\n        funcString += \"\\t\\t\\tvar fn = pf[i].replace(/var\\\\s*/, '').replace(' ', '');\\n\";\n        funcString += \"\\t\\t\\t\\tthis._privates[fn] = eval(fn);\\n\";\n        funcString += \"\\t\\t}\\n\";\n\n    funcString += \"\\t};\\n\";\n    funcString += \"})();\";\n\n    var instance = eval(funcString);\n    instance._initPrivates(classAsString);\n\n    // delete the initiation functions\n    delete instance._initPrivates;\n\n    return instance;\n};\n\n}\nfunction TestClass(){\nthis.getName = function(){\nreturn \"TestClass\";\n};\nthis.getName2 = function(){\n    return \"TestClass\";\n};\n\nvar getType = function(){\n    return \"JavaScript\";\n};\n\nfunction doTest(){\n    return \"doing test\";\n};\n\n}\nTesterSpec.js file:\ndescribe(\"Tester\", function(){\nit('should be able to call private methods', function () {\nvar tester = (new Tester()).getInstance(TestClass);\nexpect(tester).toBeDefined();\nexpect(tester._privates).toBeDefined();\nexpect(tester._privates[\"doTest\"]).toBeDefined();\nexpect(tester._privates.doTest()).toEqual(\"doing test\");\nexpect(tester._privates[\"getType\"]).toBeDefined();\nexpect(tester._privates.getType()).toEqual(\"JavaScript\");\n});\n});\nAnd finally, here is the error message:\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3.594s\n[INFO] Finished at: Tue Apr 10 22:52:09 CDT 2012\n[INFO] Final Memory: 14M/81M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal com.github.searls:jasmine-maven-plugin:1.1.0:test (default) on project my-calendar-gui: The jasmine-maven-plugin encountered an exception:\n[ERROR] java.lang.RuntimeException: org.openqa.selenium.WebDriverException: com.gargoylesoftware.htmlunit.ScriptException: SyntaxError: syntax error (file:/Users/pouncilt/git/projects/my-calendar-gui/target/jasmine/spec/Tester.js#38(eval)#31)\n[ERROR] Build info: version: '2.11.0', revision: '14435', time: '2011-10-28 18:01:56'\n[ERROR] System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.6.8', java.version: '1.6.0_31'\n[ERROR] Driver info: driver.version: HtmlUnitDriver\n[ERROR] at com.github.searls.jasmine.runner.SpecRunnerExecutor.execute(SpecRunnerExecutor.java:40)\n[ERROR] at com.github.searls.jasmine.TestMojo.executeSpecs(TestMojo.java:57)\n[ERROR] at com.github.searls.jasmine.TestMojo.run(TestMojo.java:35)\n[ERROR] at com.github.searls.jasmine.AbstractJasmineMojo.execute(AbstractJasmineMojo.java:233)\n[ERROR] at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:107)\n[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n[ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n[ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n[ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n[ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n[ERROR] at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)\n[ERROR] at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\n[ERROR] at org.apache.maven.cli.MavenCli.execute(MavenCli.java:534)\n[ERROR] at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)\n[ERROR] at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)\n[ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[ERROR] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[ERROR] at java.lang.reflect.Method.invoke(Method.java:597)\n[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\n[ERROR] Caused by: org.openqa.selenium.WebDriverException: com.gargoylesoftware.htmlunit.ScriptException: SyntaxError: syntax error (file:/Users/pouncilt/git/projects/my-calendar-gui/target/jasmine/spec/Tester.js#38(eval)#31)\n[ERROR] Build info: version: '2.11.0', revision: '14435', time: '2011-10-28 18:01:56'\n[ERROR] System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.6.8', java.version: '1.6.0_31'", "createdAt": "2012-04-11T04:07:22Z", "updatedAt": "2013-05-27T16:19:28Z", "closedAt": "2013-05-27T16:19:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pouncilt", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "pouncilt", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "searls", "company": "@testdouble"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:08:02Z", "contents": "Is this still an issue with master? @searls do you can comment on this? We don't test with Maven.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "searls", "authorAssociation": "NONE", "createdAt": "2013-05-27T16:14:19Z", "contents": "I suggest you close this, Mr. @dwfrank. @klieber has cut several bug releases of the Maven project since this was opened.\nOP, I'd ask you to reopen in he maven project's repo if this is still an issue\nOn May 27, 2013, at 12:08, \"Davis W. Frank\" notifications@github.com wrote:\n\nIs this still an issue with master? @searls do you can comment on this? We don't test with Maven.\n\ufffd\nReply to this email directly or view it on GitHub.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 219, "url": "https://github.com/jasmine/jasmine/issues/219", "title": "ConsoleReporter not showing stack trace on failed result", "contents": "When running a spec like this:\nit(\"should show an error\", function() {\n    expect(0).toEqual(1);\n});\nUsing ConsoleReporter, Jasmine (standalone, using phantomjs) reports the spec as failed, even shows the description, but it doesn't show the nice stack trace with trace message I've seen in jasmine-node.\nThis function in ConsoleReporter seems points to a stack property to save it in the failed results:\nfunction eachSpecFailure(suiteResults, callback) {\n    for (var i = 0; i < suiteResults.length; i++) {\n      var suiteResult = suiteResults[i];\n      for (var j = 0; j < suiteResult.failedSpecResults.length; j++) {\n        var failedSpecResult = suiteResult.failedSpecResults[j];\n        var stackTraces = [];\n        // THIS LINE,\n        for (var k = 0; k < failedSpecResult.items_.length; k++) stackTraces.push(failedSpecResult.items_[k].trace.stack);\n        callback(suiteResult.description, failedSpecResult.description, stackTraces);\n      }\n    }\n  }\nBut if I stringify that whole object, I only see this { ..., trace: { message: \"Expected 0 to be 1\" } }\nIt seems that line in the function above, should be storing the message too so it can print it out later. Also, why is there no stack? Should there be?", "createdAt": "2012-04-13T18:47:20Z", "updatedAt": "2013-05-27T01:28:58Z", "closedAt": "2013-05-27T01:28:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "renier", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "renier", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T01:28:53Z", "contents": "We've made a lot of progress on stack traces and exceptions since this was requested.\nThe ConsoleReporter now reports stack traces in Node.js nicely.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 222, "url": "https://github.com/jasmine/jasmine/issues/222", "title": "toContain causes a stack overflow with circular references", "contents": "In some situations when calling toContain on a set of items that contain circular references, Jasmine ends up going into an infinite loop and causing a stack overflow.\nFairly minimal test case:\nvar a = {}, b = {}, c = {};\nc.ref = a; a.ref = b; b.first = a; b.ref = c;\nexpect([a]).toContain(b);\nThis is a fairly simple circular reference between a/b/c, but with an added property on b which also references back to a.\nWhen executing the above it fails with \"RangeError: Maximum call stack size exceeded\"", "createdAt": "2012-04-18T12:06:50Z", "updatedAt": "2013-05-27T16:11:17Z", "closedAt": "2013-05-27T16:11:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "csmith", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "csmith", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-20T18:08:43Z", "contents": "I believe our equality matcher marks these circular refs and skips them but it sounds like we're not using this strategy for toContain. Marked as a bug; story here: https://www.pivotaltracker.com/story/show/28375561", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:11:12Z", "contents": "Closing. We have a Tracker story for this and it's been prioritized for 2.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 223, "url": "https://github.com/jasmine/jasmine/issues/223", "title": "Implement a Subject Test spec in Jasmine", "contents": "To encourage people to write only one expectation per it block, how about having something similar to RSpecs Subject Keyword, ie :-\ndescribe(\"Demo\",function(){\n  It(\"Should have expected attributes\", function(){\n     myDemo = new demo();\n     expect(myDemo.name).toExist();\n     expect(myDemo.gender).toExist();\n     expect(myDemo.age).toExist();\n  });\n});\n\ncould become with subject\ndescribe(\"Demo\", function(){\n  beforeEach(function(){\n    var myDemo = new Demo;\n  });\n  subject(myDemo, function(){\n    expect(myDemo.name).toExist();\n    expect(myDemo.gender).toExist();\n    expect(myDemo.age).toExist();\n  });\n});", "createdAt": "2012-04-21T09:55:55Z", "updatedAt": "2012-04-21T22:10:53Z", "closedAt": "2012-04-21T22:10:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "miker169", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "miker169", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-04-21T22:10:53Z", "contents": "Thanks for the feedback. There have been a few suggestions of something like this. But we've yet to see an implementation that feels like the rest of Jasmine.  We do have a story or two in the Jasmine backlog re: \"subject\" and \"let\". But they're lower priority for now. Know that we're watching the feedback, but I'm closing this issue for now.\nFWIW, I tend to write the following, which relies on JavaScript scoping for a similar effect.\ndescribe(\"Demo\",function(){\n  var myDemo;\n\n  beforeEach(function() {\n    myDemo = new Demo();\n  });\n\n  it(\"it should have expected attributes\", function(){\n    expect(myDemo.name).toExist();\n    expect(myDemo.gender).toExist();\n    expect(myDemo.age).toExist();\n  });\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 224, "url": "https://github.com/jasmine/jasmine/issues/224", "title": "Feature request: support test includes", "contents": "It would be good to be able to include other tests within tests, something like\n@include myNestedJasmineTest.js\nthat way it would be possible to test nested depneded classes with jasmine.", "createdAt": "2012-04-23T06:59:02Z", "updatedAt": "2012-05-02T16:51:50Z", "closedAt": "2012-05-02T16:51:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AAverin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "AAverin", "company": "@WeltN24 "}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-04-24T03:27:43Z", "contents": "Can you provide an example of this? Both an example of your test without it\nand, potentially, with it? I'm having a hard time picturing where this\nwould be useful.\n--dwf\nOn Sun, Apr 22, 2012 at 11:59 PM, AAverin <\nreply@reply.github.com\n\nwrote:\nIt would be good to be able to include other tests within tests, something\nlike\n@include myNestedJasmineTest.js\nthat way it would be possible to test nested depneded classes with jasmine.\n\nReply to this email directly or view it on GitHub:\n#224\n\n\nthx,\n--dwf", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AAverin", "authorAssociation": "NONE", "createdAt": "2012-04-24T04:04:15Z", "contents": "@include may help reusing tests and test class hierarchys.\nfor example, if I have following hierarchy:\nMyView -> ParentView -> BaseView -> RootView\nand MyView is relatevely simple beacause it resuses lots of methods from parents,\nthen a test for MyView mostly consists of testing parents methods.\nBeing able to include other test should help in this case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-02T16:51:50Z", "contents": "It sounds like you want shared examples; thoughbot has a nice way of achieving this using standard JS syntax: http://robots.thoughtbot.com/post/9611103221/jasmine-and-shared-examples .. Hope this meets your use case.\nWe definitely wouldn't add any non-JS syntax that would require us to get into the parsing game, so @include as syntax is out.\nClosing because I think shared examples should meet your requirements.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 226, "url": "https://github.com/jasmine/jasmine/issues/226", "title": "beforeEach and afterEach not called in nested suites", "contents": "When you have nested suites, the beforeEach and afterEach functions are not called in the child suites.\ne.g.\ndescribe 'Foo', ->\n  beforeEach ->\n    @foo = new Foo()\n\n  describe 'when bar is called', ->\n    beforeEach -> @foo.bar()\n\n    it 'should have something', ->\n      expect(@foo.something).toBeDefined()\n\nWhen that executes, @foo is undefined in the nested suite because the beforeEach of the parent is not executed.", "createdAt": "2012-05-11T16:02:21Z", "updatedAt": "2012-05-16T15:54:27Z", "closedAt": "2012-05-16T15:54:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jaysoo", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jaysoo", "company": "Pressly"}], "comments_count": 1, "comments_data": [{"authorLogin": "jaysoo", "authorAssociation": "NONE", "createdAt": "2012-05-16T15:54:27Z", "contents": "Nevermind, seems to be working...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 227, "url": "https://github.com/jasmine/jasmine/issues/227", "title": "toThrow ignores error type", "contents": "toThrow only checks an error's message. The following tests all pass:\ndescribe 'Jasmine', ->\n  it 'fails to ensure that errors are of the specified type', ->\n    message = \"Cannot read property 'x' of null\"\n    expect(-> null.x).toThrow message\n    expect(-> null.x).toThrow new TypeError message\n    expect(-> null.x).toThrow new URIError message # ?!\nWhile it is possible to check the error's type manually\u2026\nerror = try null.x catch error then error\n(error instanceof TypeError).should_be true\nerror.name.should_be 'TypeError'\nerror.message.should_be \"Cannot read property 'x' of null\"\n\u2026 couldn't Jasmine do this for me? There may be a good reason for comparing error messages only, but I can't think of one.", "createdAt": "2012-05-13T22:50:49Z", "updatedAt": "2013-06-03T17:36:56Z", "closedAt": "2013-05-27T16:13:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "davidchambers", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "davidchambers", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "dqminh", "company": "@cloudflare "}, {"login": "slevithan", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-14T19:39:14Z", "contents": "Agreed. Story here: #227", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davidchambers", "authorAssociation": "NONE", "createdAt": "2012-05-14T20:57:52Z", "contents": "I think you included the wrong link, @ragaskar.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dqminh", "authorAssociation": "NONE", "createdAt": "2012-05-29T16:55:38Z", "contents": "i think the correct link for the story is https://www.pivotaltracker.com/story/show/29578073", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slevithan", "authorAssociation": "NONE", "createdAt": "2012-07-16T22:26:09Z", "contents": "+1. I just came here to report the same thing.\nI'm in the process of converting a large collection of tests from QUnit to Jasmine. In QUnit, I can use, e.g., throws(function(){throw new TypeError();}, TypeError, 'throws TypeError'). Jasmine doesn't seem to offer a good/convenient way to preserve the information about error types.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:13:01Z", "contents": "Closing. We have a Tracker story for this and it is prioritized for 2.0.\nThanks for the find.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-03T17:36:56Z", "contents": "This story is completed and the fix is on master. Thanks for the find.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 228, "url": "https://github.com/jasmine/jasmine/issues/228", "title": "toHaveBeenCalledWith works not with multiple calls", "contents": "expect($.fn.get).toHaveBeenCalledWith(0,0);\nExpected spy get to have been called with [ 0, 0 ] but was called with [ [ 0 ], [ 0 ] ]\nexpect($.fn.get).toHaveBeenCalledWith([0],[0]);\nExpected spy get to have been called with [ [ 0 ], [ 0 ] ] but was called with [ [ 0 ], [ 0 ] ]\nexpect($.fn.get).toHaveBeenCalledWith([ [0],[0] ]);\nExpected spy get to have been called with [ [ [ 0 ], [ 0 ] ] ] but was called with [ [ 0 ], [ 0 ] ]\nHow do I work this?  Am I missing something?\n$(selector).get(0); is called twice in the function I'm testing.  I know I can check the args directly with argsForCall but I think toHaveBeenCalledWith reads better and is  more appropriate.", "createdAt": "2012-05-16T16:12:21Z", "updatedAt": "2018-10-01T19:45:40Z", "closedAt": "2012-05-16T17:00:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Sequoia", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "Sequoia", "company": "@EventMobi"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "poliu2s", "company": null}, {"login": "AndrewEastwood", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "dabalyan", "company": null}, {"login": "deresegetachew", "company": "Freelancer"}], "comments_count": 8, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-16T17:00:42Z", "contents": "The toHaveBeenCalledWith matcher supports arguments from a single call only because there's no clear way to distinguish between calls in the matcher arguments. It's unlikely we will add support for matching across multiple calls. I'd suggest writing a custom matcher with a prescribed argument convention of your choice, which under the hood calls argsForCall or calls.args.\nThanks for using jasmine!", "reactions_count": 20, "reactions_data": ["CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED", "CONFUSED"]}, {"authorLogin": "poliu2s", "authorAssociation": "NONE", "createdAt": "2015-11-09T05:01:43Z", "contents": "I was fustrated that this wasn't working and I found out that you can use the obj.method.calls.allArgs() for this to work", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "AndrewEastwood", "authorAssociation": "NONE", "createdAt": "2016-09-30T07:38:50Z", "contents": "so how to test function that is being invoked for example ten times sequentially but with different arguments?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AndrewEastwood", "authorAssociation": "NONE", "createdAt": "2016-09-30T07:43:22Z", "contents": "foo(1);foo(2);....foo(10);\nI suppose that we should have smth like this toHaveBeenCalledWith([1], [2], ...[10])\nbut it does not work. And why @ragaskar you said that it's unclear? It's pretty much clear when jasmine will start collecting args in the order how they were invoked.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-30T17:02:42Z", "contents": "If you want to check the arguments for multiple calls to your spy, you should use toHaveBeenCalledWith multiple times. Jasmine doesn't currently have a way to verify order of calls, and toHaveBeenCalledWith will probably never be modified to verify multiple spy invocations in the same matcher call.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "dabalyan", "authorAssociation": "NONE", "createdAt": "2017-01-05T09:25:36Z", "contents": "I might be just too late, but why not use\nSolution:\nexpect($.fn.get.calls.allArgs()).toEqual([[], [1, 3], ['yo', 'ho']])\nfor three consecutive calls like\n$.fn.get();\n\n$.fn.get(1, 3);\n\n$.fn.get('yo', 'ho');\nI assume it was not an option 4 years ago. Hope it helps :)", "reactions_count": 136, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "LAUGH"]}, {"authorLogin": "deresegetachew", "authorAssociation": "NONE", "createdAt": "2018-09-23T06:30:44Z", "contents": "how about using spy.args\ni used something like this expect(this.spy.args).to.be.eql([[1],[2],[3],[1],[4]]);\nwhere the nested array values are the arguments passed to the function", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-01T19:45:40Z", "contents": "@deresegetachew spy.calls.allArgs() is part of the public interface of a spy in Jasmine, whereas spy.args is part of the internal implementation of a spy, and not intended for external use.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 229, "url": "https://github.com/jasmine/jasmine/issues/229", "title": "AMD, define problem in nodejs", "contents": "Using jasmine in nodejs and requirejs as module loader, I had problem because of exports not defined. the problem is that the test is typeof window !== \"undefined\". In nodejs this, test is always true. But when using requirejs adapter exports is neither defined so jasmine cannot be used.\nI would suggest to use a header like this :\n(function () {\n\"use strict\"; //strict mode is better for strong error reporting\n\nvar \njasmine      = {},\n\n// get the global object in strict mode\nFn          = Function,\nglobal      = (new Fn(\"return this\")).call(null),\n\n// feature sniffing\nhasAMD      = typeof define !== \"undefined\",\nhasCommonJS = typeof exports !== \"undefined\",\n\n//generic export function\nexport_     = function export_(name, value) {\n    // export as jasmine property\n    if (value !== jasmine) {\n      jasmine[name] = value;\n    }\n\n    if (hasCommonJS) {\n      // commonjs export\n      exports[name] = value;\n    } else {\n      // export as global\n      global[name] = value;\n    }\n    return value;\n};\n\njasmine.export_ = export_;\n\nexport_(\"jasmine\", jasmine);//generic export\nand footer :\n// asynchronous definition of 'jasmine' module\nif  (hasAMD) {\n  define(\"jasmine\", [], function () { return jasmine; });\n}\n\n}());//end block", "createdAt": "2012-05-21T08:31:11Z", "updatedAt": "2013-03-06T07:11:37Z", "closedAt": "2013-03-06T07:11:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jpolo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jpolo", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T07:11:37Z", "contents": "Our goal is to have proper node support in 2.0. I'm going to close this as it's a feature request and there's already a Tracker story for it in our backlog.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 230, "url": "https://github.com/jasmine/jasmine/issues/230", "title": "Asset caching", "contents": "It seems that sometimes chrome is overly aggressive with caching static resources like script files. It would be nice is jasmine added a unique per run identifier similar to what rails does in production.\ne.g.\n<script src=\"/assets/foo-somethingunique1234.js\" type=\"text/javascript\"></script>", "createdAt": "2012-05-22T14:18:50Z", "updatedAt": "2013-10-02T21:21:59Z", "closedAt": "2013-10-02T21:06:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pivotal-medici", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "pivotal-medici", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "rupurt", "company": "Fremantle Capital"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-23T00:57:18Z", "contents": "We did a file hash for cache-busting awhile ago but it ended up being pretty expensive. Are you on the latest 1.2.0? This has some newer header tags that should help. If that doesn't seem to be better, we can consider adding timestamped get params, but I'd like to avoid filename remapping if possible.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pivotal-medici", "authorAssociation": "NONE", "createdAt": "2012-05-23T13:13:08Z", "contents": "Yeah we're on the latest 1.2.0. We're getting some really aggressive caching. It doesn't seem to be consistent. We have found that restarting the jasmine server clears the cached assets.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:23:36Z", "contents": "Is this still an issue? Have you tried jasmine-gem HEAD of master? Between the tags that @ragaskar mentions and some architecture changes in the gem, we're not seeing caching thse days.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rupurt", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-28T14:24:32Z", "contents": "We have been on 1.3.2 and still see it from time to time. I'll switch to master now and see if it makes any difference.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T21:06:40Z", "contents": "This should be better in 2.0. Please take a look and let us know if this is still an issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rupurt", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-02T21:12:23Z", "contents": "Do you know which commits might help?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-02T21:21:59Z", "contents": "If you're using asset pipeline we should now include the fingerprint/md5 hash for asset pipeline assets. If you're not, there's no change, although we did introduce some caching directives awhile ago. If there's a demonstrable problem I'd prefer to fix those caching directives vs. adding hashing to files if possible. At one point jasmine did the latter and it was fairly slow/complex.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 231, "url": "https://github.com/jasmine/jasmine/issues/231", "title": "Destructor", "contents": "I'm trying to do some quick in-browser window testing by pulling in jasmine.js with all the test 'js' files using\n$.getScript( {path-to-wireup} )\nProblem is that if I execute that again while the current env is executing,  i'll get maximum call-stack exception.\nIs there a way to either:\n\nClean up current jasmine env so that a new one can be set w/ out any problems.\nor\nStop current testing env, clean out all previous specs so that new ones can be registered w/ out dupicates and testing restarted.\n\nMy Wireup file looks like this.\nfiles =[\njasmine,\nconsole-reporter,\ntest-file1,\ntest-file2\n]\nfunction ready() {\n\nget-script from 'files' one-by-one until all have been imported.\nreturn $.deferred that resolves when all files have been imported.\n}\n\n$.when( ready() ).done( function() {\n\ninit jasmine env\nset reporter\nexecute\n})", "createdAt": "2012-05-24T00:59:46Z", "updatedAt": "2012-07-07T17:54:01Z", "closedAt": "2012-07-07T17:54:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yevgeniy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "yevgeniy", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-07T17:54:01Z", "contents": "Can you please forward this to the mailing list at jasmine-js@googlegroups.com ? GH Issues are for bugs with the project and aren't followed by as many people to help folks resolve usage problems. Closing.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 232, "url": "https://github.com/jasmine/jasmine/issues/232", "title": "Typos: Project site's main page (introduction.js)", "contents": "The following sections of the Jasmine project's web page have the typos bolded below:\n\nMocking the JavaScript Clock\n\nThe Jasmine Mock Clock is available for a test suites that__z__ need ...\n\n\nThe Runner and Reporter\n\nJasmine is built in JavaScript [and] must be included into a JS ...\nThis file is written in JavaS__s__cript and is compiled into HTML via ...", "createdAt": "2012-05-26T08:15:13Z", "updatedAt": "2012-05-28T14:23:52Z", "closedAt": "2012-05-27T16:43:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iskitz", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "iskitz", "company": "@ionify @ionified @devcolor "}, {"login": "madtrick", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "madtrick", "authorAssociation": "NONE", "createdAt": "2012-05-26T09:20:38Z", "contents": "There also a broken link it the paragraph where you talk about the matchers. The link to custom matchers  (http://pivotal.github.com/jasmine/custom_matchers) is broken", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-05-27T16:43:17Z", "contents": "Typos & links fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "iskitz", "authorAssociation": "NONE", "createdAt": "2012-05-28T14:23:52Z", "contents": "Nice work Davis.\nI missed another when filing the original issue. See:\n\nMocking the JavaScript Clock\n\nThe Jasmine Mock Clock is available for a test suites that need ...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 233, "url": "https://github.com/jasmine/jasmine/issues/233", "title": "Spying constructor and calling \"class level\" functions", "contents": "Hi,\nGiven this code\nclass A\n  constructor : ->\n    #do something\n\nA.something = ->\n  new A()\nand this test\nspyOn(window, \"A\").andCallThrough()\nA.something()\nexpect(window.A).toHaveBeenCalled()\nI get this error:\nTypeError: Object function () { spyObj.wasCalled = true; spyObj.callCount++; var args = jasmine.util.argsToArray(arguments); spyObj.mostRecentCall.object = this; spyObj.mostRecentCall.args = args; spyObj.argsForCall.push(args); spyObj.calls.push({object: this, args: args}); return spyObj.plan.apply(this, arguments); }\n has no method 'something'\nSo the question is: Can I spy on the constructor while at the same time call \"class level\" functions?", "createdAt": "2012-05-29T16:07:41Z", "updatedAt": "2012-07-07T17:56:56Z", "closedAt": "2012-07-07T17:56:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "madtrick", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "madtrick", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-07T17:56:56Z", "contents": "Spying on the constructor is a bit of an anti-pattern at the moment given how Spies are implemented. We've got a story in our backlog to fix this - at least to make the behavior more useful.\nIn the short term, we recommend spying on a ctor only to ensure that it's called. But when you want to test actual behavior, use the real ctor.\nIf you want to discuss this further, there's a few thread about this on the Jasmine mailing list.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 235, "url": "https://github.com/jasmine/jasmine/issues/235", "title": "runs inside describe issues with IE9", "contents": "Since Jasmine doesn't support beforeAll and afterAll, I was using something like this:\nbeforeAll()\nit('example 1', ...)\nit('example n', ...)\nruns(afterAll)\nAlthough not documented anywhere, this has worked fine for me in all browsers until I figured out today that it doesn't in IE9.\nI don't want to add a \"it('afterAll', afterAll)\" to the output. Maybe \"it\" could support a single argument and don't show up in the report in that case?", "createdAt": "2012-06-06T13:35:11Z", "updatedAt": "2013-05-27T16:25:04Z", "closedAt": "2013-05-27T16:25:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rosenfeld", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rosenfeld", "company": "e-Core"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "rosenfeld", "authorAssociation": "NONE", "createdAt": "2012-06-06T13:38:43Z", "contents": "Actually, in that case I had a few more examples after the runs (this is an integration test and they are dependent on each other and the order of the examples is important):\nbeforeAll()\nit('example 1', ...)\nit('example n', ...)\nruns(resetState)\nit('example n+1', ...)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rosenfeld", "authorAssociation": "NONE", "createdAt": "2012-06-06T13:41:05Z", "contents": "And I don't call the resetState inside \"example n+1\" because the \"beforeAll-runs\" part is located in a separate file in my examples tree organization so that I could skip those tests if I wanted for some browsers, for example and for better maintainance.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:24:59Z", "contents": "Closing as we've moved away from the runs/waitsFor syntax for 2.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 236, "url": "https://github.com/jasmine/jasmine/issues/236", "title": "Spy Restore()", "contents": "This idea comes from sinon.js where you can setup a spy then later on restore it back to the original method in the case you no longer need or want the spy.\nThis works well when having a spy setup that is used in most cases but in the rare case it isn't, it's more useful to set one up then for the special case remove it.\nNote: this does not clean up after itself for removeAllSpies but doesn't have any bad side effects.\njasmine.Spy.prototype.restore = function() {\n  this.baseObj[this.methodName] = this.originalValue;\n};\ndescribe('Spies', function() {\n  it('should restore spied function', function() {\n    var originalFunctionWasCalled = false;\n    var TestCase = {\n      someFunction: function() {\n        originalFunctionWasCalled = true;\n        return 'return value from original function';\n      };\n    };\n    this.spyOn(TestClass, 'someFunction');\n\n    TestClass.someFunction.restore();\n    expect(TestClass.someFunction()).toEqual('return value from original function');\n    expect(originalFunctionWasCalled).toEqual(true);\n  });\n});", "createdAt": "2012-06-06T18:38:26Z", "updatedAt": "2017-04-17T20:50:02Z", "closedAt": "2015-02-27T22:41:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vizjerai", "authorAssociation": "NONE", "participants_count": 26, "participants_data": [{"login": "vizjerai", "company": "@Bendyworks"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "bradvogel", "company": "Mixmax"}, {"login": "shamansir", "company": "@JetBrains GmbH"}, {"login": "amiuhle", "company": "zeroseven"}, {"login": "ukilon-okta", "company": "Okta"}, {"login": "remybach", "company": null}, {"login": "giggio", "company": "Lambda3"}, {"login": "kevinpauli", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "trkoch", "company": null}, {"login": "lc-nyovchev", "company": "Relay42"}, {"login": "tarsisazevedo", "company": "@jusbrasil "}, {"login": "newtriks", "company": "Newtriks LTD"}, {"login": "kilaulena", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "emadridm", "company": null}, {"login": "guy-mograbi-at-gigaspaces", "company": "GigaSpaces"}, {"login": "phuong3030", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "dts", "company": "The Human Effort"}, {"login": "tiriana", "company": "@egnyte"}, {"login": "bodawei", "company": null}, {"login": "That-David-Guy", "company": "MakeAwesomeStuff"}, {"login": "brandonros", "company": null}, {"login": "hakunin", "company": null}], "comments_count": 44, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-06-06T18:44:53Z", "contents": "Given that you can already:\nmy.spy.andCallThrough();\nis there any need for this function? It's true we'd have some problems in the case where spying on a method that has properties (such as a constructor), but we already have this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vizjerai", "authorAssociation": "NONE", "createdAt": "2012-06-06T18:53:57Z", "contents": "I didn't think about using andCallThrough() and was more concerned about removing the spy all together. And as you suggest it works even though in the background jasmine is still keeping track of the number of times it is called with arguments.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bradvogel", "authorAssociation": "NONE", "createdAt": "2012-10-15T19:30:59Z", "contents": "I think this is still valuable. In some cases we want to fully remove to spy and restore the constructor. Method andCallThrough() is insufficient for this.", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-24T17:20:00Z", "contents": "That's a reasonable point. Probably deserves reconsideration. Reopening.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2013-01-08T14:30:29Z", "contents": "I also vote for this, I am spying on several internal JS methods (like document.createElement) for one tests and I want to ensure that I've totally removed these spies to use the the actual createElement in another test case and create a spy again in very other test case.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "amiuhle", "authorAssociation": "NONE", "createdAt": "2013-04-03T08:19:58Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ukilon-okta", "authorAssociation": "NONE", "createdAt": "2013-04-22T22:43:56Z", "contents": "+1,\nThis is useful for the cases you spy on prototype functions and want it to be fully restored in case another module is using the same function in another spec in the same suite.\nRight not what we do is something like:\nbeforeEach(function () {\n  this._originalMethod = obj.prototype.method;\n  spyOn(obj.prototype, 'method');\n});\n\nafterEach(function () {\n  obj.prototype.method = this._originalMethod;\n});\nhaving a restore method would be cleaner:\nbeforeEach(function () {\n  spyOn(obj.prototype, 'method');\n});\n\nafterEach(function () {\n  obj.prototype.method.restore();\n});", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "remybach", "authorAssociation": "NONE", "createdAt": "2013-05-02T07:35:36Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "giggio", "authorAssociation": "NONE", "createdAt": "2013-05-02T14:59:05Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinpauli", "authorAssociation": "NONE", "createdAt": "2013-05-23T22:42:37Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T17:18:59Z", "contents": "I've added this story to our backlog. This is likely going to make it into 2.0.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "trkoch", "authorAssociation": "NONE", "createdAt": "2013-07-17T09:50:15Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lc-nyovchev", "authorAssociation": "NONE", "createdAt": "2013-08-06T11:00:56Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-06T16:04:05Z", "contents": "663a58d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tarsisazevedo", "authorAssociation": "NONE", "createdAt": "2013-10-10T20:26:43Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "newtriks", "authorAssociation": "NONE", "createdAt": "2013-10-29T12:46:57Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kilaulena", "authorAssociation": "NONE", "createdAt": "2013-11-19T15:10:44Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-21T05:22:53Z", "contents": "To clarify, Jasmine 1.3.1 and Jasmine 2.0 restore the original function after that spec has completed.\nThus from the above example:\nbeforeEach(function () {\n  this._originalMethod = obj.prototype.method;\n  spyOn(obj.prototype, 'method');\n});\n\nafterEach(function () {\n  obj.prototype.method = this._originalMethod;\n});\nis not actually necessary -- the afterEach and saving off _originalMethod can be removed. After using spyOn with some object (even the object referenced by a prototype), Jasmine will restore the original method when the spec completes.\nAdditionally, in 2.0 we now preserve properties from the original function and move them over to the spy. This preservation + andCallThrough should hopefully make spies less obtrusive.\nThere might still be some use cases that need the spy completely gone in the middle of a spec, but just wanted to point out that cleanup is taken care of.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "emadridm", "authorAssociation": "NONE", "createdAt": "2014-08-01T03:25:20Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guy-mograbi-at-gigaspaces", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-30T10:42:26Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "phuong3030", "authorAssociation": "NONE", "createdAt": "2014-12-30T15:14:17Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T20:07:35Z", "contents": "I'm seeing lots of +1's but I'm not entirely sure what is being asked for given @sheelc's comment that the spies get removed after each spec.\nWhat in particular is being asked for at this point?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guy-mograbi-at-gigaspaces", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-12T21:35:37Z", "contents": "Does sheelc's comment also apply to jasmine_node?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T21:40:30Z", "contents": "Jasmine has restored the spy's original value after the spec for a while now, so whatever version of jasmine has been bundled into jasmine-node should do this already.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dts", "authorAssociation": "NONE", "createdAt": "2015-01-15T21:23:10Z", "contents": "+1, I would like this in case I want to re-spy a method during the same run.  I.e. the first time I want the function to do thing X, and later in that run I want it to do Y.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-17T02:04:27Z", "contents": "@dts you can already do this by specifying a new plan. e.g. (warning untested code)\nit('spies a lot', function() {\n  var spy = jasmine.createSpy('spy).and.return('foo');\n  expect(spy()).toEqual('foo');\n\n  spy.and.callFake(function() {\n    return 'bar';\n  });\n  expect(spy()).toEqual('bar');\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guy-mograbi-at-gigaspaces", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-19T21:18:35Z", "contents": "well, I guess I can simply use sinon if I really want this feature. sinon supports frontend..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dts", "authorAssociation": "NONE", "createdAt": "2015-01-19T21:19:45Z", "contents": "@slackersoft - Yup - you're totally right!  Consider my +1 rescinded!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-19T23:31:47Z", "contents": "@guy-mograbi-at-gigaspaces (or anyone else) we're still not totally sure what is being asked for here. The issues I've seen are (I think):\n\nRemoving spies after a spec completes. Jasmine has done this for you for a long time and this shouldn't be needed.\nChanging what the spy does after initial setup. See my comment earlier about how to accomplish this.\nWanting to call the original method. This seems like and.callThrough() would solve this.\n\nIf there's another issue I've missed or if callThrough() isn't a good enough solution for calling the original method, let me know. Otherwise, it doesn't sound like there is an issue here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-27T22:41:18Z", "contents": "Since I haven't seen anyone say I missed anything in my previous comment, it sounds like all of the cases where people were wanting to restore a spy are handled by jasmine currently. I'm going to close this issue.\nIf there is another case I missed, please open an issue about that particular case.\nThanks for using jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "tiriana", "authorAssociation": "NONE", "createdAt": "2015-04-20T10:10:42Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-20T19:47:21Z", "contents": "@tiriana as has been discussed in this issue, we don't believe it should ever be necessary for a user to manually restore a spy. If you have an actual suggestion of where this is needed, please create a new issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tiriana", "authorAssociation": "NONE", "createdAt": "2015-04-21T20:03:02Z", "contents": "@slackersoft  I didn's see, sorry for too-fast '+1'. So jasmine already clears/restores spy after each spec? didn't know, but if so - that's cool, and enough for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bodawei", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-25T23:28:49Z", "contents": "I'd like to +1 this too.  It is for, I admit, a pretty obscure case.\nI've got a routine which replaces $.ajax at times.  At other times, it will undo itself and return the original $.ajax to be there.  I also have tests which spy on $.ajax.  In some very unusual cases, my tests then fail because the routine that undoes itself says \"hey, that $.ajax isn't mine.  I can't undo myself\".\n(I can change it so that it looks at spy.originalValue and notices that THAT is its own, so it knows it can restore $.ajax to what it was before... except that it can't, because when the test finishes, jasmine helpfully restores $.ajax to the one that tried to be removed.)\nPut more tersely:\n$.ajax // normal one is in place\ntest start\nreplace $.ajax  with custom.ajax\nspyOn($ \"ajax\");\nreplace custom.ajax with $.ajax\ntest end  // jasmine replaces $.ajax with custom.ajax\nI guess, more generally, the point is: if for some reason one cares about the exact instance, and there is no way to tell jasmine 'I changed this behind your back', sad things happen\n(my workaround is to replace spy.originalValue with the value that I have already set $.ajax with.  ugly? yes.  I'm open to other ideas)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-05T14:08:22Z", "contents": "@bodawei it sounds to me like you probably want to be managing your testing around $.ajax in some other way so you don't have both a spy and a fake implementation in the same test. Have you looked at something like jasmine-ajax for your case? Jasmine-ajax actually stubs out the XHR request by replacing the XMLHttpRequest constructor and provides a full fake implementation of XHR requests. If you then still needed to spyOn jQuery's ajax function to test for some params that (for example) would cause jQuery to make a jsonp request instead of normal XHR, you wouldn't be mucking with the same function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bodawei", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-15T01:13:12Z", "contents": "Thanks for the suggestion, @slackersoft. Alas, that really isn't an option.  We've got a mock server ( https://github.com/delphix/dxData/tree/master/dxCoreData/mockServer ) which sits in the background behind all our tests, and automagically services all server interactions.  It kinda does the same thing as jasmine-ajax but more automatically. Since it is so omnipresent in our tests, turning it on and off in some fashion to get around the jasmine situation is much too cumbersome (since spying on $.ajax is a distinct minority of our test cases).\nI can see an alternative would be to have the global beforeEach install a spy at $.ajax which does a andCallFake() which then calls the \"real\" mock server $.ajax handler.  That seems, however, like a lot of work to do thousands of times in a test run when (again, the cases where we need to spy on $.ajax and it is a problem is a tiny, tiny minority of the cases).  So, as it is I've ended up modifying the spy's data structures behind its back in these cases so it replaces the right routine.  Ugly, but it seems the best tradeoff given options at the moment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-21T20:44:11Z", "contents": "You might also be able to:\nspyOn($, 'ajax').and.callThrough();\n... in a global beforeEach to call through to your mock server and then just change the execution plan for the spy with $.ajax.and.returnValue() (or whichever) for the particular tests that don't use the mock server.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bodawei", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-28T05:46:50Z", "contents": "I agree, that is another possibility.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guy-mograbi-at-gigaspaces", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-28T06:13:13Z", "contents": "How can I check haveBeenCalled multiple times in a single test?\nwouldn't the second time remember the first time?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bodawei", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-28T13:53:27Z", "contents": "@guy-mograbi-at-gigaspaces, I for things like that, I use the call count  (.e.g mySpy.calls.count()) to see if the number of counts has changed between calls.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "That-David-Guy", "authorAssociation": "NONE", "createdAt": "2016-08-11T01:05:36Z", "contents": "A restore() method would be useful in my use case. reset() and callThrough() don't need to do what I need.\nUse Case:\n\nI have a class which calls a whole bunch of methods in the constructor\nI want unit tests for each of those methods\nIn a beforeEach() I want to mock (using spyOn) each of the methods then create an instance of the class\nIn each test I want to .reset() the particular method I'm testing then test that method.\n\nThe only way I can see to do this now is by mocking every method but the one I want and create the instance in every single test. However that means I'm testing that the constructor calls the method AND the method itself, which I don't want.\nUnless there is a better way to architect this type of code?\n.reset() doesn't work because it seems to only reset the number of calls\n.and.callThrough() doesn't work because I can't put two spys on the one method\nDestroying the spec after each method doesn't work because it is too late by then", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "brandonros", "authorAssociation": "NONE", "createdAt": "2017-02-28T14:26:45Z", "contents": "Why doesn't this exist yet?\nUse case 1: in a more \"global\" beforeEach, you set up a spy. Then, in a very specific test, you need to override that spy with another spy. Overriding with andCallThrough does not help.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "hakunin", "authorAssociation": "NONE", "createdAt": "2017-04-17T12:58:02Z", "contents": "@brandonros exactly same case here\n\nI have a top level spy that most cases can use\nwant to throw away and re-define the spy for one test group\n\nPushing the definition down to them would mean adding 3 repetitive lines per group.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-17T20:50:02Z", "contents": "If you simply need to change the behavior of the spy when called, you should be able to use another .and. on the existing spy, without needing to remove the spy and recreate it.\n@brandonros can you go into more depth about why existingSpy.and.callThrough() doesn't help?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 238, "url": "https://github.com/jasmine/jasmine/issues/238", "title": "The link to BDD is broken", "contents": "The link to BDD in the Grouping Related Specs with describe section is broken.", "createdAt": "2012-06-07T12:04:56Z", "updatedAt": "2012-07-07T17:50:40Z", "closedAt": "2012-07-07T17:50:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tundal45", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tundal45", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-07T17:50:40Z", "contents": "Thanks for the find. I've fixed this in the source code of this page.\nThanks for using Jasmine", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 239, "url": "https://github.com/jasmine/jasmine/issues/239", "title": "Homepage typo, #included_Matchers", "contents": "http://pivotal.github.com/jasmine/#section-Included_Matchers\nJasmine as a rich set\nJasmine Has a rich set", "createdAt": "2012-06-11T10:45:09Z", "updatedAt": "2012-07-07T17:48:42Z", "closedAt": "2012-07-07T17:48:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gnoireaux", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gnoireaux", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-07T17:48:41Z", "contents": "Thanks for the find. This has been fixed in the source code of the page. Closing.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 240, "url": "https://github.com/jasmine/jasmine/issues/240", "title": "Diff-ing objects that fail to match", "contents": "Currently, if one object is expected toEqual to another, but actually doesn't, jasmine simply dumps the JSON for both, telling they're different. Instead, would be nice to pretty-print and diff them, showing which properties aren't equal.", "createdAt": "2012-06-13T10:11:44Z", "updatedAt": "2017-01-17T11:18:42Z", "closedAt": "2013-05-27T16:28:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ikr", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "ikr", "company": "XIAG AG"}, {"login": "eventualbuddha", "company": "@square "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "nicbou", "company": "Software developer"}], "comments_count": 3, "comments_data": [{"authorLogin": "eventualbuddha", "authorAssociation": "NONE", "createdAt": "2012-09-21T17:36:12Z", "contents": "Doesn't it do this when it builds up the mismatched keys and values?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:28:18Z", "contents": "I've added this to our Tracker backlog. Please follow this story\nWe close feature requests once they're in the backlog.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nicbou", "authorAssociation": "NONE", "createdAt": "2017-01-17T11:18:42Z", "contents": "Working link: https://www.pivotaltracker.com/n/projects/10606/stories/1283792", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 243, "url": "https://github.com/jasmine/jasmine/issues/243", "title": "Compare string parameter with toHaveBeenCalledWith(regexp)", "contents": "Hi!\nI couldn't find a way to check a string that was passed to a function with toHaveBeenCalledWith, using a regexp.\nIn particular, I'm  passing URL with timestamp, and I'd like to validate it with something like\nIn code I have:\nGET('/post?' + (new Date()).getTime())\n\nIn test want to do something like:\nexpect(GET).toHaveBeenCalledWith(/\\/post?\\d+/)\n\nIs there any way to do this or, at least, check a string argument with regexp?", "createdAt": "2012-06-18T08:27:42Z", "updatedAt": "2013-10-03T18:50:23Z", "closedAt": "2013-10-02T21:44:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brabadu", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "brabadu", "company": "Prom.ua"}, {"login": "zealoushacker", "company": "Zealoushacker, Inc."}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "zealoushacker", "authorAssociation": "NONE", "createdAt": "2013-02-12T20:04:55Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zealoushacker", "authorAssociation": "NONE", "createdAt": "2013-02-12T20:23:22Z", "contents": "I am not sure whether @pivotal will see this issue, but in the meantime, you may use Spy#mostRecentCall.args in combination with the Matchers#toMatch regexp matcher to accomplish this.\nI have created a stackoverflow question about this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:37:00Z", "contents": "Would something like this be OK:\nexpect(GET).toHaveBeenCalledWith(jasmine.regExp(/foobar/)); ?\nUsing something like jasmine.any here makes things simpler at implementation time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T21:44:26Z", "contents": "We've made a tracker story for this. You can follow along here: https://www.pivotaltracker.com/story/show/58120558", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zealoushacker", "authorAssociation": "NONE", "createdAt": "2013-10-03T18:50:23Z", "contents": "Thanks for the heads up @slackersoft. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 244, "url": "https://github.com/jasmine/jasmine/issues/244", "title": "Match dom elements from full list with related dom element in failing list", "contents": "The full list of specs and the list of failures don't have any ties to one another. I've built a scrapper using PhantomJS and would like to build command line output that is tiered like the full list of specs, but still also show the error messages from the failures list. Maybe if the matching elements had some data- attribute that could just be a sequential number so there was some way to tie them together.", "createdAt": "2012-06-21T04:13:48Z", "updatedAt": "2013-05-27T16:39:37Z", "closedAt": "2013-05-27T16:39:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joeytrapp", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joeytrapp", "company": "Apple Inc."}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:39:33Z", "contents": "It sounds like you're suggesting writing a new reporter.\nThe jasmine gem, which can work with PhantomJS, has this functionality. We're trying to make it more modular and obvious how to build new test output for 2.0.\nCan you take a look at HEAD of the jasmine-gem and see if it makes sense for your case?\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 245, "url": "https://github.com/jasmine/jasmine/issues/245", "title": "Jasmine.Clock doesn't work when passing strings to setTimeout", "contents": "When passing a String to setTimeout Jasmine.Clock fails, cause it doesn't check if the passed argument is an function or an string:\ndummy_method = function(callback) {\n  fire_callback = function() {\n    callback();\n  }\n  setTimeout(\"fire_callback()\", 1000);\n}\n\ndescribe \"jQuery.fn.countdown\", ->\n  beforeEach () ->\n    jasmine.Clock.useMock()\n  it 'should fireup the callback', ->\n    countdown_callback = jasmine.createSpy('countdown_callback');\n\n    dummy_method(countdown_callback)\n    jasmine.Clock.tick(1001)\n    expect(countdown_callback).toHaveBeenCalled()\n\nThis test failed. I am aware that passing a string instead of a function is bad style but its valid and so the test should pass.", "createdAt": "2012-06-23T15:07:56Z", "updatedAt": "2013-05-27T16:41:03Z", "closedAt": "2013-05-27T16:41:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "eskimoblood", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "eskimoblood", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:40:59Z", "contents": "Please see this story in our backlog. We agree that eval'd strings should be usable since the normal interface supports them.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 247, "url": "https://github.com/jasmine/jasmine/issues/247", "title": "Jasmine goes into infinite loop if loaded twice", "contents": "If loaded more than once, jasmine.Clock.real will no longer contain the real methods, and any call to say setTimeout will call itself and goes into an infinite loop.\nThis happens in Safari, and maybe IE as well.\n(We are using js-test-driver + code coverage, which leads to Jasmine getting loaded twice, we have no control over it...)", "createdAt": "2012-07-05T17:14:09Z", "updatedAt": "2013-05-27T16:42:58Z", "closedAt": "2012-10-30T19:58:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "coli", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "coli", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "coli", "authorAssociation": "NONE", "createdAt": "2012-07-05T20:52:50Z", "contents": "The code I have which fixes this is at https://github.com/pivotal/jasmine/pull/249/files , it prabably doesn't handle commonJS correctly as it assumes window to be present", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-26T23:29:43Z", "contents": "What's the use case for loading Jasmine twice?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "coli", "authorAssociation": "NONE", "createdAt": "2012-10-27T02:59:46Z", "contents": "It turns out to be a bug of js-test-runner", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-30T19:58:39Z", "contents": "Ok, closing then. It should probably be fixed on that side.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 248, "url": "https://github.com/jasmine/jasmine/issues/248", "title": "WinJS support", "contents": "Are you planning to add support to WinJS library to test Windows8 JavaScript applications?\nThank you.", "createdAt": "2012-07-05T19:49:53Z", "updatedAt": "2012-07-07T17:47:57Z", "closedAt": "2012-07-07T17:47:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vgaltes", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vgaltes", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-07T17:47:56Z", "contents": "Have you tried it? Jasmine is very light when it comes to dependencies. I would like to see some blogging about how this works, or if it doesn't, some feedback on how to make it work.  Let us know!\nThanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 250, "url": "https://github.com/jasmine/jasmine/issues/250", "title": "Jasmine:ci rake target broken with rspec 2.11.0", "contents": "A new version of rspec was released yesterday and it seems to be breaking this rake target. The backtrace is as follows:\n$ bundle exec rake jasmine:ci\n/home/justin/.rvm/rubies/ruby-1.9.3-p194/bin/ruby -S rspec /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/jasmine-1.2.0/lib/jasmine/runner.rb --colour --format progress\n[2012-07-08 22:30:01] INFO  WEBrick 1.3.1\n[2012-07-08 22:30:01] INFO  ruby 1.9.3 (2012-04-20) [x86_64-linux]\n[2012-07-08 22:30:01] WARN  TCPServer Error: Address already in use - bind(2)\n[2012-07-08 22:30:01] INFO  WEBrick::HTTPServer#start: pid=7143 port=36189\nWaiting for jasmine server on 36189...\njasmine server started.\nWaiting for suite to finish in browser ...\n/home/justin/.rvm/gems/ruby-1.9.3-p194/gems/jasmine-1.2.0/lib/jasmine/spec_builder.rb:93:in `declare_suite': undefined method `describe' for #    <Jasmine::SpecBuilder:0x00000002f05e68> (NoMethodError)\nfrom /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/jasmine-1.2.0/lib/jasmine/spec_builder.rb:87:in `block in declare_suites'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/jasmine-1.2.0/lib/jasmine/spec_builder.rb:86:in `each'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/jasmine-1.2.0/lib/jasmine/spec_builder.rb:86:in `declare_suites'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/jasmine-1.2.0/lib/jasmine/runner.rb:32:in `<top (required)>'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/configuration.rb:780:in `load'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/configuration.rb:780:in `block in load_spec_files'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/configuration.rb:780:in `map'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/configuration.rb:780:in `load_spec_files'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/command_line.rb:22:in `run'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/runner.rb:69:in `run'\n from /home/justin/.rvm/gems/ruby-1.9.3-p194/gems/rspec-core-2.11.0/lib/rspec/core/runner.rb:8:in `block in autorun'\n\nIf I lock the rspec version to 2.10.0 the error does not occur, so I believe this may be a new bug. This was generated from a fresh project using 'bundle exec jasmine init', running Ruby 1.9.3-194. I'm by no means proficient with Ruby yet so if I'm missing any details please let me know.\nEdit: I also tried running against the HEAD revision of jasmine, same problem.\nEdit2: I just noticed this should really be on the 'jasmine-gem' project - I don't want to make duplicate issues and I can't see how I can delete and move it, so I'll leave myself to the mercy of the admins!", "createdAt": "2012-07-08T12:57:26Z", "updatedAt": "2012-08-14T20:31:56Z", "closedAt": "2012-08-14T20:31:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "justinberry", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "justinberry", "company": null}, {"login": "ryanpagel", "company": "University of Oklahoma"}, {"login": "darend", "company": "@sagansystems "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ryanpagel", "authorAssociation": "NONE", "createdAt": "2012-07-18T14:13:33Z", "contents": "I'm noticing this same issue and downgrading rspec to 2.10.0 solved the problem.  However that's not an acceptable long term solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "darend", "authorAssociation": "NONE", "createdAt": "2012-07-23T18:54:29Z", "contents": "We are also seeing this is issue, and have downgraded rspec as an interim solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-14T20:31:56Z", "contents": "This is an issue with the Jasmine Gem (http://github.com/pivotal/jasmine-gem) not core. But please try pointing your Gemfile at head of the Jasmine gem. I believe this is fixed, but not yet released.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 252, "url": "https://github.com/jasmine/jasmine/issues/252", "title": "Uncaught exception in beforeEach allows test block to run", "contents": "We would expect that if an exception is thrown in a beforeEach block then any dependent test blocks should not run. Currently it captures the exception in both the beforeEach and the it block and outputs them to the runner.\ne.g.\ndescribe(\"Before each exceptions\", function() {\n   beforeEach(function() {\n      console.log(\"In the before each\");\n      throw 'Before each exception';\n   });\n\n   it('should not run', function() {\n      console.log(\"You should never see me\");\n      throw 'This exception should not be logged in the jasmine runner';\n   });\n});", "createdAt": "2012-07-11T18:16:30Z", "updatedAt": "2012-07-11T19:26:40Z", "closedAt": "2012-07-11T19:10:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pivotal-medici", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pivotal-medici", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-11T19:10:45Z", "contents": "Rightly or wrongly, this is expected jasmine behavior -- any failure or exception is caught, noted and then logged as part of the test (you'll notice you can also get multiple fails for each test). The next release of jasmine-core will allow you to select whether jasmine behaves this way; soon, the jasmine gem will provide hooks so you can set it from your jasmine.yml.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pivotal-medici", "authorAssociation": "NONE", "createdAt": "2012-07-11T19:26:40Z", "contents": "It would be nice if the runner indicated if the exception came from the beforeEach or the it", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 255, "url": "https://github.com/jasmine/jasmine/issues/255", "title": "update jsdoc for jasmine.Spy.html", "contents": "The documentation for jasmine.Spy.html for the andCallFake() method contains examples using andCall(), which can't be resolved.  andCallFake() appears to work.  I can't locate the document in the repo to update, if you can point me to it I can pull.", "createdAt": "2012-07-16T18:35:45Z", "updatedAt": "2013-05-27T16:45:28Z", "closedAt": "2013-05-27T16:45:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mdineen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mdineen", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:45:22Z", "contents": "We're dropping jsdoc support, mostly because we're refactoring the heck out of the source.\nWe will be documenting the testing interface much more completely than we have in the past (see http://pivotal.github.com/jasmine) which should cover most of the use case for jsdoc.\nThat said, we know that annotated source can be a wonderful thing. We will revisit as 2.0 settles down and ships.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 256, "url": "https://github.com/jasmine/jasmine/issues/256", "title": "waits() missing in documentation on http://pivotal.github.com/jasmine/", "contents": "Hi,\nI think waits() is missing in the documentation on http://pivotal.github.com/jasmine/. Maybe you can add it (add a test ;)).\nKind regards\nMarc", "createdAt": "2012-07-17T13:45:14Z", "updatedAt": "2012-07-17T14:24:56Z", "closedAt": "2012-07-17T14:24:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mdix", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mdix", "company": "In \u2665 with @echonovum "}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-07-17T14:24:55Z", "contents": "waits is deprecated, a superset of functionality is provided by waitsFor. I suppose we could document it if only to say it's deprecated.\nWe'd prefer most people avoid waits/waitsFor altogether and use the MockClock when they need to test timed asynchronous behavior.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 259, "url": "https://github.com/jasmine/jasmine/issues/259", "title": "toEqual returns wrong results for RegExps", "contents": "This should not pass, but does:\nexpect(/a/gi).toEqual(/a/);\n\nThis should not pass, but does:\nexpect(/a/).toEqual(/b/);\n\nThis should pass, but does not:\nvar regexp = /a/;\nregexp.x = true;\nexpect(regexp).toEqual(/a/);\nThe reason it should pass is that, IMO, toEqual for regexes should compare only source, global, ignoreCase, multiline, and sticky properties, since those are the only properties that are generally relevant for regex objects. For comparison, that's how QUnit's deepEqual works for regex objects. Also, copying a regex using new RegExp(regexp) does not preserve other properties.\nAccepting pull request #234 should fix all of these cases, but I figured my first two examples here, at least, needed their own issue. Even if #234 isn't accepted, expect(/a/).toEqual(/b/) obviously should not pass. This is causing a significant number of my tests to break.", "createdAt": "2012-07-21T22:03:45Z", "updatedAt": "2013-05-26T19:27:10Z", "closedAt": "2013-05-26T19:27:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "slevithan", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "slevithan", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "dwt", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-12T16:40:41Z", "contents": "Thanks for finding this problem. I've made a Tracker story for this issue. You can follow along here: https://www.pivotaltracker.com/story/show/34261329 . Another issue (https://www.pivotaltracker.com/story/show/34261329) has suggested a change of technique for equality, so we'll make sure that this is fixed as well.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwt", "authorAssociation": "NONE", "createdAt": "2012-11-09T09:49:49Z", "contents": "+1 is this merged already? Iave also stumbled about this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-11-09T15:11:00Z", "contents": "I'm pretty sure we've merged one of the regex comparison fixes to HEAD, but we haven' t yet cut a new gem. We should be doing that shortly....", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-26T19:27:02Z", "contents": "This is fixed on a branch - matchers_redo. We've moved to a new equals function based on what Underscore does. It's much better overall and handles RegExps (and Dates, etc.) much better than Jasmine's 1.x equals_ function.\nExpect this to be on Jasmine master in a couple of days and will definitely be in the next 2.0 pre-release.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 261, "url": "https://github.com/jasmine/jasmine/issues/261", "title": "Accidental delete on wiki", "contents": "Oops.\nI accidentally deleted the 'Asyncronous specs' wiki page due to an itchy trigger finger and not really paying attention to what I was doing.\nI readded the text, but have no idea of what the Markup was so I hope you can revert that change since I can't.\nSORRY!!!!!", "createdAt": "2012-07-25T18:36:54Z", "updatedAt": "2012-08-12T16:32:03Z", "closedAt": "2012-08-12T16:32:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamespwright", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jamespwright", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-12T16:32:03Z", "contents": "This looks OK now. Closing. And don't worry about it. The Wikis are their own repo and are easily fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 262, "url": "https://github.com/jasmine/jasmine/issues/262", "title": "jquery 1.7.1 and 1.7.2 breaks jasmine tests", "contents": "We are using jquery_ujs (https://github.com/rails/jquery-ujs) for handling our ajax requests, when we've upgraded jquery from 1.6.4 to 1.7.1 it broke our tests. Specifically with regards to the binding of live events on jquery_ujs library.\ne.g. $('a[data-confirm], a[data-method], a[data-remote]').live('click.rails', function() {\n//handle ajax request\n});\nSince live method is deprecated in 1.7.1 we've upgraded the jquery_ujs library to it's latest which is now using delegate method for binding of events which calls our ajax requests.\ne.g. $(document).delegate('a[data-remote]', 'click.rails', function(e) {\n//handle ajax request\n});\nI've found out this issue when I reverted our upgrade from 1.7.2 to 1.6.4, sames goes with 1.7.1. Does anyone knows how to fix this issue or has it already been fixed or is there a patch for this? I'm pretty sure the sequence of my js files are correct. I just don't know why all my event bindings got unbind when running the tests.\nThanks", "createdAt": "2012-07-27T03:28:32Z", "updatedAt": "2012-08-10T20:09:15Z", "closedAt": "2012-08-10T20:09:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "marcagas", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "marcagas", "company": "Friendster"}, {"login": "austinbv", "company": "@braintree"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-07-27T04:20:23Z", "contents": "Can you send us a spec that worked before that fails now? We're using\n1.7.2 on a project and I don't think we've seen this problem.\n--dwf\nOn Thu, Jul 26, 2012 at 8:28 PM, Marc Lambert Agas\nreply@reply.github.com\nwrote:\n\nWe are using jquery_ujs (https://github.com/rails/jquery-ujs) for handling our ajax requests, when we've upgraded jquery from 1.6.4 to 1.7.1 it broke our tests. Specifically with regards to the binding of live events on jquery_ujs library.\ne.g. $('a[data-confirm], a[data-method], a[data-remote]').live('click.rails', function() {\n//handle ajax request\n});\nSince live method is deprecated in 1.7.1 we've upgraded the jquery_ujs library to it's latest which is now using delegate method for binding of events which calls our ajax requests.\ne.g. $(document).delegate('a[data-remote]', 'click.rails', function(e) {\n//handle ajax request\n});\nI've found out this issue when I reverted our upgrade from 1.7.2 to 1.6.4, sames goes with 1.7.1. Does anyone knows how to fix this issue or has it already been fixed or is there a patch for this? I'm pretty sure the sequence of my js files are correct. I just don't know why all my event bindings got unbind.\nThanks\n\nReply to this email directly or view it on GitHub:\n#262\n\n\nthx,\n--dwf", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "austinbv", "authorAssociation": "NONE", "createdAt": "2012-07-27T04:30:17Z", "contents": "I am not sure if this is the issue but quoting http://api.jquery.com/live/\n\nAs of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marcagas", "authorAssociation": "NONE", "createdAt": "2012-07-27T06:49:27Z", "contents": "describe('ajax', function() {\nbeforeEach(function(){\n$('#jasmine_content').append(\"hello\");\nspyOn($, 'ajax');\n});\nit(\"should insert some data so that Amazon ELB does not break our app\", function(){\n$(\"#mylink\").attr('data-method', 'get');\n$(\"#mylink\").click();\nexpect($.ajax.mostRecentCall.args[0].data).toBeNull();\n});\n}):\n$.ajax.mostRecentCall.args is undefined now. When I put some code in my click handler at jquery_ujs it doesn't alert or logged anything. When I use the previous version jquery 1.6.4 it still works. Note, we're no longer using live at the latest jquery_ujs, it's using delegate method which works like on() too.\nThanks for your replies.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-10T20:09:15Z", "contents": "I think we'd need to see the code to offer more help, but I don't think this is a Jasmine issue -- it sounds like it's the upgrade is responsible for the test breakage. Closing, but feel free to discuss further (and post the implementation) on the jasmine-js mailing list (https://groups.google.com/forum/?fromgroups#!forum/jasmine-js)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 263, "url": "https://github.com/jasmine/jasmine/issues/263", "title": "Incorrect handling of empty pages/suites", "contents": "A page with a test-suite with no test specs throws exception and does not produce HTML report:\nUncaught TypeError: Cannot call method 'suiteComplete' of undefined jasmine-html.js:91\nSample code:\ndescribe('Empty test suite', function () {\n});\nEmpty test page with no suites at all fails too:\nUncaught Error: NOT_FOUND_ERR: DOM Exception 8 jasmine-html.js:285\nI am using Jasmine 1.2.0 with HTML reporter and runner as described in documentation.", "createdAt": "2012-07-29T08:25:15Z", "updatedAt": "2013-10-02T22:35:32Z", "closedAt": "2013-10-02T22:35:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bajtos", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "bajtos", "company": "IBM Czech Republic"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "tay", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-12T16:28:20Z", "contents": "This is a known issue. You can follow it's progress here: https://www.pivotaltracker.com/story/show/12784235\nThere are really two things here. First is that the reporter blows up when there are no tests. Second, which is what you really want, is that the reporter doesn't tell you when there are no tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tay", "authorAssociation": "NONE", "createdAt": "2013-04-08T23:11:28Z", "contents": "I just got this error with an empty spec suite. There doesn't seem to be any updates on the Tracker story, what's the current status? What would it take to fix this problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T16:48:54Z", "contents": "@fionatay - I think the HtmlReporter, if it gets a jasmineDone call when there have been no other calls in between, should put something in the DOM that says \"No tests defined\" in a very obvious way. Do you want to take a crack at this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T22:35:24Z", "contents": "On master, a page with an empty test-suite no longer throws an exception. We'll keep #297 open while that issue is being addressed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 265, "url": "https://github.com/jasmine/jasmine/issues/265", "title": "More Clarity in Tests", "contents": "I am using multiple expect() in an it() block.\nBut the problem is if I have similar expect's, then when an expect fails, it doesn't tell me which expect() failed actually. That information would be quite helpful.\nIt does gives the JS line number, but I am using CoffeeScript to generate my Specs, so line numbers mis-match.\nAny idea on this ? Maybe there are better ways ? Would like to know more!", "createdAt": "2012-08-09T06:36:14Z", "updatedAt": "2013-05-27T16:49:47Z", "closedAt": "2013-05-27T16:49:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gitbase", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gitbase", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-08-11T17:32:30Z", "contents": "What do you meant that you're not seeing which test is failing?\n--dwf\nOn Wed, Aug 8, 2012 at 11:36 PM, gitbase notifications@github.com wrote:\n\nI am using multiple expect() in an it() block.\nBut the problem is, when a test fails, it doesn't tell me which expect()failed actually. That information would be quite helpful.\nIt does gives the JS line number, but I am using CoffeeScript to generate\nmy Specs.\nAny idea on this ? Maybe there are better ways ? Would like to know more!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/265.\n\n\nthx,\n--dwf", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-03T00:31:48Z", "contents": "Can we move this to the mail list? There are lots of people using Jasmine to test their CoffeeScript. Perhaps someone on the list can help?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 266, "url": "https://github.com/jasmine/jasmine/issues/266", "title": "Object comparison is broken for wrapped native and frozen objects", "contents": "The jasmine.Env.prototype.compareObjects_ function temporarily adds __Jasmine_been_here_before__ to both objects being compared.  This fails silently for ES5 frozen objects, causing the method to recurse infinitely for cyclic objects, and fails by throwing an NS_ERROR_XPC_CANT_MODIFY_PROP_ON_WN for all WrappedNative objects in XULRunner applications (such as Firefox/Thunderbird extensions).  Please consider replacing the implementation with one that does not modify the objects under comparison (e.g. a stack-based cycle detection algorithm such as the Underscore.js equals implementation).", "createdAt": "2012-08-09T19:30:26Z", "updatedAt": "2013-05-29T19:40:28Z", "closedAt": "2013-05-29T19:40:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kevinoid", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "kevinoid", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ide", "company": "@expo"}], "comments_count": 15, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-12T16:19:36Z", "contents": "Thanks for finding this and letting us know about this case.  I've logged this bug in Tracker: https://www.pivotaltracker.com/story/show/34261165\nThanks for using Jamsine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ide", "authorAssociation": "NONE", "createdAt": "2012-10-23T22:30:39Z", "contents": "I have a patch that use ES6 WeakMaps to keep track of the visited objects. Is this something you'd be interested in? (I plan to use node --harmony but a simple polyfill should suffice since I don't rely on weak references.) cc @gmoeck", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-23T22:45:58Z", "contents": "At this time we don't want to depend on ES6 or a polyfill that's forward compatible. After looking at the code around matchers the Underscore.js approach feels like the right approach. But the equality matcher is entangled in some other problems so we've not made progress yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:05:43Z", "contents": "Take a look at the matchers_redo branch. We've moved to using Underscore's equality and it's improved our cases like this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinoid", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-28T04:01:52Z", "contents": "Thanks for working on it!  Unfortunately, the problem appears to be unchanged.  Using lib/jasmine-core/jasmine.js from matchers_redo (commit a34de5c) the error is thrown at jasmine.js:738.  If I run grunt buildDistribution to create a new lib/jasmine-core/jasmine.js the error is thrown at jasmine.js:1252.  In either case, it is when __Jasmine_been_here_before__ is assigned to the object under comparison.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-28T04:44:18Z", "contents": "Very strange. Can you write a spec that shows the failure, using j$.matchersUtil.equal(...) ? I want to get that into matchersUtilSpec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinoid", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-28T05:01:51Z", "contents": "The way that I am provoking the failure is by comparing against a browser native object, so the test would have to be run in an XULRunner application.  I could possibly simulate it by comparing an object with a setter property named __Jasmine_been_here_before__ which throws when a value is assigned, although that may be a bit contrived for what you are looking for.  What do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T16:12:25Z", "contents": "The problem is not the comparison - it's in the pretty-printing of the error. We've changed how equality is checked, but the output of the error (serializing objects) is further down the backlog.\nLook at matchersUtilSpec.js and see if  you can get a test like that to pass or fail as you expect.\nI think this issue has transmogrified into a new one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinoid", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T18:39:36Z", "contents": "I can certainly file another issue, if you think that's warranted.  From my point of view, I just want expect(x).toEqual(y) to work when x and/or y is frozen and/or a WrappedNative object.  Whether it's the equality comparison or the printing that's causing the error isn't really my area.\nUnfortunately, I can't get the spec runner to work (by running rake jasmine - 292 of 296 specs fail, most with \"j$ is not defined\").  I'm probably doing something wrong, but I don't have the time to investigate right now.  Here's an example of code that will fail:\ndescribe(\"Immutable objects\", function() {\n  it(\"should be equal\", function() {\n    var obj1, obj2;\n\n    obj1 = {};\n    Object.defineProperty(obj1, \"__Jasmine_been_here_before__\", {\n      set: function() { throw new Error(\"Can't modify this object\"); }\n    });\n    obj2 = {};\n    Object.defineProperty(obj2, \"__Jasmine_been_here_before__\", {\n      set: function() { throw new Error(\"Can't modify this object\"); }\n    });\n\n    expect(obj1).toEqual(obj2);\n  });\n});\n\nBased on that, here's my guess at a spec:\nit(\"compares objects which are immutable\", function() {\n  var actual = {},\n    expected = {};\n\n  // Throw on modify to emulate WrappedNative objects in XULRunner\n  // Note:  frozen objects can also throw on modify in ES5 strict mode\n  Object.defineProperty(actual, \"__Jasmine_been_here_before__\", {\n    set: function() { throw new Error(\"Can't modify this object\"); }\n  });\n  Object.defineProperty(expected, \"__Jasmine_been_here_before__\", {\n    set: function() { throw new Error(\"Can't modify this object\"); }\n  });\n\n  Object.freeze(actual);\n  Object.freeze(expected);\n\n  expect(j$.matchersUtil.equals(actual, expected)).toBe(true);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T19:12:16Z", "contents": "Fantastic. That last spec is what I was misunderstanding.\nBut I do think that there are two problems - one that frozen objects fail the equality test and an other that says our PrettyPrinter fails for frozen objects - but since the reporter uses the Pretty Printer, you see a failure on toEqual().\nThe former should be fixed on master - I'll verify by adding a spec today. The latter is a bigger effort and we're pondering how to move away from the Pretty Printer right now.\nThanks for the patience and the spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T19:12:40Z", "contents": "I've added this story to track a new Pretty Printer.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinoid", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T19:16:56Z", "contents": "Great!  Thanks for working on it!  No hurry on fixing the Pretty Printer, I can work around it pretty well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T19:33:54Z", "contents": "Here's the commit: 8303c79\nAnd it's passing. Notice I didn't add the \"Jasmine has been here before\" as I wanted to keep the PrettyPrinter out of this first fix.\nCan we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinoid", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T19:37:21Z", "contents": "Sure.  Do you want me to create another issue for the Pretty Printer, or do you just want to track it in Pivotal Tracker?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T19:40:28Z", "contents": "It's in Tracker. :) Thanks for helping explain the issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "has Tracker story", "waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 267, "url": "https://github.com/jasmine/jasmine/issues/267", "title": "Jasmine does not reset spy after each test suite", "contents": "I have the following spec.\ndescribe(\"SN.ExitHistory\", function() {\n\nvar exitHistory;\n\nbeforeEach(function() {\n\nSN.Utils = jasmine.createSpy(\"utils\").andCallFake(function() {\nfunction readSNCookie(cookieName, key) {\nreturn \"google.com\";\n}\n\nfunction isUndefinedOrNull(param) {\nreturn (param == null) || (param === \"null\");\n}\n\nfunction createSNCookie(snCookieName, key, value, lifeTime) {\n\n}\n\nvar me = {\nreadSNCookie : readSNCookie,\nisUndefinedOrNull : isUndefinedOrNull,\ncreateSNCookie : createSNCookie\n};\nreturn me;\n\n})();\nexitHistory = SN.ExitHistory();\n\n});\n\nit(\"return last exit link\", function() {\nexpect(exitHistory.getLastExitLink()).toEqual(\"google.com\");\n});\n\n});\n\nexitHistory.getLastExitLink internally uses SN.Utils.\nAfter the test is done Jasmine does not remove the spy object utils. In next test suite also I can see the same utils present. Is there any way to reset the spy object after each test is done?\nInstead of creating spy, if I create a new object for utils, behavior is same. Then what is the difference between a spy and actual object in this scenario.\nCorrect me if I am wrong.", "createdAt": "2012-08-10T09:02:07Z", "updatedAt": "2012-08-14T20:35:55Z", "closedAt": "2012-08-14T20:35:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sourabhchaki", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sourabhchaki", "company": "Innovation Lab, 247-inc"}, {"login": "lukeasrodgers", "company": "Nomos R&D"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "lukeasrodgers", "authorAssociation": "NONE", "createdAt": "2012-08-10T14:05:25Z", "contents": "I can't speak to the spy teardown, which should be happening, but in this exact case it looks like there is no reason to use a jasmine spy, though I'm not clear on exactly what you're trying to test. Perhaps you would just want to do something like this: spyOn(SN.Utils, 'readSNCookie').andReturn('google.com');.\nStubbing the other methods seems unnecessary, unless that code isn't loaded for this test suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-14T20:35:55Z", "contents": "This issue is that you're creating a spy as its own variable. These are NOT torn down between tests. But they should fall out of scope depending on how they are declared.\nIf you create an object and then spy on a function property of that object, we do tear down the spy.\nBut I agree with Luke, that you should probably test what you're doing differently.\nClosing for now as this is a tutorial issue, not a Jasmine core issue.\nThanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 268, "url": "https://github.com/jasmine/jasmine/issues/268", "title": "Usage of reserved word, `for`", "contents": "You are currently using the reserved word, for, on this line. This attribute should be quoted to allow it to work in older browsers that are less lenient. Here is how I have adapted the line to get it to work.\nself.createDom('label', { className: 'label', 'for': 'no_try_catch' }, 'No try/catch'),", "createdAt": "2012-08-14T22:42:33Z", "updatedAt": "2012-08-16T15:04:24Z", "closedAt": "2012-08-15T21:28:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Olical", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "Olical", "company": "@we-shop"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "Olical", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-15T19:46:06Z", "contents": "I have added the required fix and submitted it is a pull request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Olical", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-15T21:28:44Z", "contents": "My pull request has been merged in. I have just run it through IE6, 7 and 8 and everything is working perfectly now. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-08-16T15:04:24Z", "contents": "Thank you!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 271, "url": "https://github.com/jasmine/jasmine/issues/271", "title": "Jasmine runs again and again", "contents": "Hi guys,\nI'm using Jasmine in a RoR application through the jasminerice gem. I've implemented 32 examples without problems. Now,  when I describe a new example and I go to the page http://localhost:3000/jasmine it runs again and again showing the error about the spec don't implemented.\nCan anybody help me?, please", "createdAt": "2012-08-15T20:17:05Z", "updatedAt": "2012-08-16T14:36:23Z", "closedAt": "2012-08-16T14:36:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "emadridm", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "emadridm", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-08-16T03:59:26Z", "contents": "I can't speak to how jasminerice works, but if you try the latest and\ngreatest jasmine gem it has better Asset Pipeline support. I know this is\none of the reasons people were trying jasminerice.\n--dwf\nOn Wed, Aug 15, 2012 at 1:17 PM, Enrique Madrid notifications@github.comwrote:\n\nHi guys,\nI'm using Jasmine in a RoR application through the jasminerice gem. I've\nimplemented 32 examples without problems. Now, when I describe a new\nexample and I go to the page http://localhost:3000/jasmine it runs again\nand again showing the error about the spec don't implemented.\nCan anybody help me?, please\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/271.\n\n\nthx,\n--dwf", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emadridm", "authorAssociation": "NONE", "createdAt": "2012-08-16T14:36:23Z", "contents": "The problem is the event submit() that I am using in the example. The CoffeeScript is:\nit \"My example\", ->\n  loadFixtures \"signup\"\n  ...\n  $(\"form\").submit()\n  expect(...)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 273, "url": "https://github.com/jasmine/jasmine/issues/273", "title": "toThrow assertion is too limited, system exception are not equals between browsers", "contents": "The following method is too limited http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Matchers.html#toThrow\nFor example we have mismatch like:\n[Cannot read property 'address1' of undefined] , but it threw [Cannot read property \"address1\" from undefined]\nWe need an assert like: toThrowContainsInMessage('undefined', 'address1')", "createdAt": "2012-08-24T15:12:12Z", "updatedAt": "2012-09-03T00:33:26Z", "closedAt": "2012-09-03T00:33:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SebTardif", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "SebTardif", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-03T00:33:26Z", "contents": "Sounds like an interesting custom matcher. Have you tried writing it to see if it gives you the clarity you need? If it works for you, we'd love to see a pull request and we can explore further.\nThanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 274, "url": "https://github.com/jasmine/jasmine/issues/274", "title": "Include skipped specs in report?", "contents": "I would like for specs and suites which are skipped (either with xit() or perhaps some other way) to be present in the results object to make it possible to display them. I believe Rspec does this. I'd like to be able to use pending tests as a sort of todo list.", "createdAt": "2012-08-24T16:02:43Z", "updatedAt": "2015-05-06T19:06:46Z", "closedAt": "2013-03-27T06:08:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gregsabo", "authorAssociation": "NONE", "participants_count": 8, "participants_data": [{"login": "gregsabo", "company": "@Asana "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "simoami", "company": null}, {"login": "cyril-sf", "company": null}, {"login": "sublimino", "company": "@controlplaneio "}, {"login": "Darep", "company": "@UpCloudLtd"}, {"login": "bcherny", "company": "@Facebook"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 16, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-06T06:08:09Z", "contents": "Great idea for a feature request. I've added this story to Tracker: https://www.pivotaltracker.com/story/show/35576615\nI'm not sure when we're going to get to this one, but you can follow it's progress at Tracker.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "simoami", "authorAssociation": "NONE", "createdAt": "2012-10-04T16:58:47Z", "contents": "Hello,\nAny updates on this?\nAnother area where this is needed is when exporting Jasmine results as JUnit XML reports.\n<testsuite time=\"0.0010\" tests=\"3\" skipped=\"0\" failures=\"0\" errors=\"0\" name=\"moving around two divs\">\n    <testcase time=\"0.0050\" name=\"initially sees that div1 is above div2\" classname=\"elementMoverSpec.js\"/>\n</testsuite>", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cyril-sf", "authorAssociation": "NONE", "createdAt": "2012-12-24T18:50:18Z", "contents": "I'm interested in that too, I'm working on a PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cyril-sf", "authorAssociation": "NONE", "createdAt": "2012-12-26T01:45:37Z", "contents": "I have some work in progress to display disabled ( See 2a96a06).\n@infews, what would you need/want to accept a PR for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-26T04:49:18Z", "contents": "Actually, we've cleaned this up a bit in the 2_0 (and 2_0_dwf) branch(es) we got started this month. So I think, @cyril-sf , your pull request isn't going to be needed. Our work is pretty similar. Pending will follow right after this (so @gregsabo , I think you'll be covered.) Glad to hear that folks want disabled to be displayed as well - this is good feedback.\nI've also been wondering about disabled (via an 'x'), pending (no function body) an skipped (not in the filter) being separate states. What do you guys think about that?\nAs for @simoami - at the moment we see a JSUnit XML report as coming from the Jasmine Gem, not Jasmine core. When we get to this as part of 2.0, any new status would come with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cyril-sf", "authorAssociation": "NONE", "createdAt": "2012-12-26T05:14:50Z", "contents": "I chose to display disabled test using the orange color.\nDisabled specs are interesting for me, especially when I discovered some in one of my work project. I guess no one remembered that those specs were there and not doing anything.\nI'm not familiar with the use of pending nor skipped tests, so I can't really say what I'd like for that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregsabo", "authorAssociation": "NONE", "createdAt": "2012-12-27T01:49:01Z", "contents": "I definitely think that \"disabled\" and \"skipped\" should be marked/displayed differently. The workflow I'd like to have is:\n\nstub out multiple specs and mark them as disabled\nas I run the specs I see how many pass and fail, with a separate count of specs not yet implemented\nI can watch the number go down as I get closer to completing the feature\n\nThis is how the screencasts at destroyallsoftware.com demonstrate an rspec workflow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sublimino", "authorAssociation": "NONE", "createdAt": "2013-01-18T11:40:29Z", "contents": "+1 for approach described by @gregsabo", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Darep", "authorAssociation": "NONE", "createdAt": "2013-02-09T11:04:23Z", "contents": "Hear, hear! +1 for @gregsabo from me too \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:33:28Z", "contents": "Can you guys look at master? We've mixed things up a bit.\nDisabled is now ONLY for specs that are filtered out (via the spec= query param) and calls to it() inside an xdescribe. You can make a pending spec by:\n\ncalling xit\ncalling it without a function body\ncalling pending() from within a spec's function body\n\nPending specs show up as yellow splats and yellow descriptions.\nIs this enough to declare this solved?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-27T06:08:58Z", "contents": "Closing due to inactivity. As mentioned above, 2.0/master now has different concepts for Disabled/Filtered and pending. Pending specs show up in the report in Console and HTML reporters.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Darep", "authorAssociation": "NONE", "createdAt": "2013-04-02T12:57:35Z", "contents": "Sorry it took me so long to check this. I just tested this functionality and it's perfect! Couldn't be happier. I especially like the fact that calling it() without a function body makes the test yellow in the HTML reporter. Perfect for my workflow.\nThank you a million! \u2764\ufe0f And again, sorry for being so slow. \"Too busy with other parts of life\" is such an abused excuse... :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcherny", "authorAssociation": "NONE", "createdAt": "2015-05-01T23:13:13Z", "contents": "Is it possible to hide skip tests from console output?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-04T23:49:14Z", "contents": "Skipped specs (xit and xdescribe) should not be displayed in console output from jasmine, but a pending spec will be.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcherny", "authorAssociation": "NONE", "createdAt": "2015-05-05T00:17:48Z", "contents": "skipped specs (non-fit and non-fdescribe) are displayed with jasmine 2.3.0 / karma 0.12.31.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-06T19:06:46Z", "contents": "Jasmine reports all specs that it attempts to run to all of the reporters that are registered. xit, xdescribe, non-fit and non-fdescribe are all reported with a status of disabled. It sounds like karma's reporter may be treating disabled the same way as pending which would cause the behavior you're seeing.\nThe only change for this is 2.3.0 is that now specs will always report with a disabled status, instead of only specs that were specifically xit instead of a child of xdescribe, etc.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 275, "url": "https://github.com/jasmine/jasmine/issues/275", "title": "Infinitive loop", "contents": "I'm working with phantomjs and with certain conditions (don't know yet how to reproduce it), jasmine gets into a infinitive loop.\nRangeError: Maximum call stack size exceeded.\nhttp://localhost/jasmine.js:1685\nhttp://localhost/jasmine.js:1685\nhttp://localhost/jasmine.js:1685\nhttp://localhost/jasmine.js:1685", "createdAt": "2012-08-28T08:34:09Z", "updatedAt": "2012-12-07T22:48:40Z", "closedAt": "2012-12-07T17:04:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "plusgut", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "plusgut", "company": "@SC-Networks "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "timblack1", "company": "Always Reformed Web Development"}, {"login": "Honroy", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-02T23:26:55Z", "contents": "Are you sumbitting a form under test? Form submits force a reload and get you into a loop. Try spying on your form submit and see if that stabilizes your suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plusgut", "authorAssociation": "NONE", "createdAt": "2012-09-03T07:04:56Z", "contents": "Nope, i'm just checking if true is false, so no real action happens", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-06T06:01:36Z", "contents": "Can you post a simple example that demonstrates the problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timblack1", "authorAssociation": "NONE", "createdAt": "2012-11-20T04:16:38Z", "contents": "I'm getting a similar error.  Did you find a solution?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Honroy", "authorAssociation": "NONE", "createdAt": "2012-12-07T16:00:50Z", "contents": "I had the same problem using phantomjs and jasmine. Following the thread at johnbintz/jasmine-headless-webkit#84, I thought I might be having an issue with onPageLoaded in jasmineRunner.js getting called more than once and therefore firing window.onload more than once. So I put in a null check on _cachedWindowLoad:\nvar _cachedWindowLoad;\n    if (!_cachedWindowLoad) {\n        _cachedWindowLoad = window.onload;\n\n        if (_cachedWindowLoad) {\n            _cachedWindowLoad();\n        }\n    }\n\nI have not seen that error since I made this change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-07T17:04:43Z", "contents": "OK, sounds like a jasmine-headless-webkit problem. Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timblack1", "authorAssociation": "NONE", "createdAt": "2012-12-07T22:48:40Z", "contents": "What fixed it for me was that I discovered I had been loading Jasmine twice in the same page by accident.  So once I made it so Jasmine loaded only once, the error went away.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 276, "url": "https://github.com/jasmine/jasmine/issues/276", "title": "Standalone release: wrong order of the comments in SpecRunner.html", "contents": "Comments (and following includes) should be vice versa.\n  \n  <script type=\"text/javascript\" src=\"spec/SpecHelper.js\"></script>\n  <script type=\"text/javascript\" src=\"spec/PlayerSpec.js\"></script>\n  \n  <script type=\"text/javascript\" src=\"src/Player.js\"></script>\n  <script type=\"text/javascript\" src=\"src/Song.js\"></script>", "createdAt": "2012-08-30T11:24:28Z", "updatedAt": "2013-03-06T06:59:37Z", "closedAt": "2013-03-06T06:59:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "steffenlohaus", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "steffenlohaus", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:59:37Z", "contents": "This is fixed on master.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 277, "url": "https://github.com/jasmine/jasmine/issues/277", "title": "Weird failures in linux", "contents": "Hi when running my test suite in linux I get weird errors like this:\n  Failed: questions.js can add options to select should be able to add options.\n    Expected 3 to equal 3.\n    in :\n\n  Failed: questions.js can add options to select should be able to remove existing options.\n    Expected 2 to equal 2.\n\nWhen I run this on my computer instead of the CI server tests pass.", "createdAt": "2012-09-01T21:52:04Z", "updatedAt": "2013-03-06T17:26:27Z", "closedAt": "2013-03-06T17:26:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "EnriqueVidal", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "EnriqueVidal", "company": "CloverInteractive"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-01T22:09:52Z", "contents": "Can you point us to your suite?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-06T06:58:07Z", "contents": "Is this issue closable? Did you ever find the root cause?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EnriqueVidal", "authorAssociation": "NONE", "createdAt": "2013-03-06T17:26:27Z", "contents": "yeah it is, I forgot to close it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 278, "url": "https://github.com/jasmine/jasmine/issues/278", "title": "Renaming the \"it\" function", "contents": "Hi,\nIn my code base, there is a global \"it\" object that is used throughout the JavaScript. Is it possible to rename Jasmine's \"it\" function to something else so I can test my code before making big refactoring changes, and where would I do that?\nAny help would be most appreciated. Thanks!\nTariq", "createdAt": "2012-09-04T16:36:53Z", "updatedAt": "2012-09-06T06:00:08Z", "closedAt": "2012-09-06T06:00:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tariqislam", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tariqislam", "company": "Intuit"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-09-06T06:00:08Z", "contents": "I don't have a good answer for this. At the moment Jasmine does pollute the global namespace in the name of having very readable tests.\nIf you take this issue over to the Jasmine mailing list and share some code snippets then perhaps some of the rest of the community can make suggestions?\nClosing for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 279, "url": "https://github.com/jasmine/jasmine/issues/279", "title": "Allow spies to be easily-extended, w/o modifying Jasmine code, like Matchers do", "contents": "It is a feature request.\nI think it would be very nice if we'd have an ability to extend spies functionality without modifying basic Jasmine code, in the similar way we do with matchers using addMatcher.\nI see users want a lot of rare or commonly used features from spies (like checking if one spy was called before another or even check the order of the spies calls (which for sure may be uncomfortly achieved with a sequences of call-next-then-reset)).\nCurrently, createSpy returns a function that is extended with some properties, this function (spyObj) is inside of a closure, so it is not accessible at all, and to substitute it we need to create somewhat like a proxy object to the actual spy.", "createdAt": "2012-09-10T12:45:14Z", "updatedAt": "2012-10-06T00:15:22Z", "closedAt": "2012-10-06T00:15:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shamansir", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "shamansir", "company": "@JetBrains GmbH"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2012-09-10T13:06:05Z", "contents": "As an example of confusion, I've wanted to add .performedAt timestamp to the calls (as one of the ways to check the order)\nvar originalCreateSpy = jasmine.createSpy,\n    improvedCreateSpy = function(name) {\n        var actualSpy = originalCreateSpy(name);\n        var improvedSpyObj = function() {\n            var result = actualSpy.apply(this, arguments);\n            actualSpy.mostRecentCall.performedAt = new Date();\n            return result;\n        };\n        // if I'll assign something to improvedSpyObj from here, it will not be passed to the actualSpy\n        // jasmine.util.extend(improvedSpyObj, actualSpy) \u2014 will not help\n        // creating new Spy with new jasmine.Spy() and returning it will also not help,\n        // since calls from the function will be passed to actualSpy\n        return improvedSpyObj;\n    };\n\njasmine.createSpy = improvedCreateSpy;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-06T00:15:22Z", "contents": "Sounds like a good idea! Tracker story here: https://www.pivotaltracker.com/story/show/37288941\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 282, "url": "https://github.com/jasmine/jasmine/issues/282", "title": "CSS error exposed by htmlunit", "contents": "in jasmine.css, line 12:\n#HTMLReporter .symbolSummary { overflow: hidden; *zoom: 1; margin: 14px 0; }\n\nnotice the \"*zoom\", which should just be \"zoom\".\nhtmlunit reports the warning as well:\nAug 17, 2012 1:12:32 AM com.gargoylesoftware.htmlunit.DefaultCssErrorHandler error\nWARNING: CSS error: [12:52] Error in style rule. Invalid token \"*\". Was expecting one of: , \"}\", \";\", .\nAug 17, 2012 1:12:32 AM com.gargoylesoftware.htmlunit.DefaultCssErrorHandler warning\nWARNING: CSS warning: [12:52] Ignoring the following declarations in this rule.", "createdAt": "2012-10-01T16:13:15Z", "updatedAt": "2013-02-10T19:54:04Z", "closedAt": "2012-10-06T00:10:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "simoami", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "simoami", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "joshuacc", "company": "Hobsons"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-06T00:10:22Z", "contents": "This is an IE hack. It's ugly, but sorry for the warnings. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "simoami", "authorAssociation": "NONE", "createdAt": "2013-02-10T05:53:58Z", "contents": "@ragaskar\nSorry to persist on the subject. But since the \"ie star hack\" causes warning in other engines, why not use one of the following methods:\n\nIE's specific conditional comments: <!--[if lte IE 7]>\nAdd CSS classes to the body tag to denote the current IE version. With this approach, your CSS class definitions are cleaner:\n\n#HTMLReporter .symbolSummary { overflow: hidden; margin: 14px 0; }\n.isIE6 #HTMLReporter .symbolSummary, .isIE7 #HTMLReporter .symbolSummary,  { zoom: 1; }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2013-02-10T13:56:37Z", "contents": "I'd recommend using the approach from HTML5 Boilerplate. It uses conditional comments to set a class on the html element, which you can then use in your IE specific css.\n<!--[if lt IE 7]>      <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\"> <![endif]-->\n<!--[if IE 7]>         <html class=\"no-js lt-ie9 lt-ie8\"> <![endif]-->\n<!--[if IE 8]>         <html class=\"no-js lt-ie9\"> <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\"> <!--<![endif]-->", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "simoami", "authorAssociation": "NONE", "createdAt": "2013-02-10T19:54:04Z", "contents": "Thanks for the example. It's inline with my second approach. Can anyone reopen the issue and look at the proposed solution?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 284, "url": "https://github.com/jasmine/jasmine/issues/284", "title": "Unit tests are failing in IE8", "contents": "", "createdAt": "2012-10-03T13:10:08Z", "updatedAt": "2012-10-03T16:18:11Z", "closedAt": "2012-10-03T15:53:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "abersager", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "abersager", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "abersager", "authorAssociation": "NONE", "createdAt": "2012-10-03T15:54:20Z", "contents": "Apologies, issue opened by accident.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-03T16:18:11Z", "contents": "No worries, thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 285, "url": "https://github.com/jasmine/jasmine/issues/285", "title": "Ability to differentiate between errors and failures", "contents": "Can Jasmine differentiate between them? A Failure is simply a failing test expectation whereas an Error is an execution that ends up running a \"catch\" block unexpectedly.\nOne instance where this is needed is when exporting Jasmine results as JUnit XML reports.\n<testsuite time=\"0.0010\" tests=\"3\" skipped=\"0\" failures=\"0\" errors=\"0\" name=\"moving around two divs\">\n    <testcase time=\"0.0050\" name=\"initially sees that div1 is above div2\" classname=\"elementMoverSpec.js\"/>\n</testsuite>", "createdAt": "2012-10-04T16:49:16Z", "updatedAt": "2012-10-06T00:07:57Z", "closedAt": "2012-10-06T00:07:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "simoami", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "simoami", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-06T00:07:57Z", "contents": "At the moment we don't support this. But we should. I've added this story to the Tracker backlog: https://www.pivotaltracker.com/story/show/37288643\nIf you look at the backlog we're looking at providing a JUnit formatter by default in 2.0.\nClosing this for now. Please follow the progress at Tracker. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 286, "url": "https://github.com/jasmine/jasmine/issues/286", "title": "The report bar displays nested describe blocks in the wrong order", "contents": "nested describe blocks are added last to the quick report display bar:", "createdAt": "2012-10-11T09:17:27Z", "updatedAt": "2013-10-02T23:14:18Z", "closedAt": "2013-10-02T23:14:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tenedor", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tenedor", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:12:40Z", "contents": "Have you looked at master at all? For 2.0 we should be more rigorous about when items get added in the new HtmlReporter.\nThat said, we don't have a spec for this particular behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T23:14:18Z", "contents": "We've made a story in tracker for this here: https://www.pivotaltracker.com/story/show/58125418\nWe'll look at it again after 2.0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 287, "url": "https://github.com/jasmine/jasmine/issues/287", "title": "Hard to copy the title of a failing spec", "contents": "It is currently styled in a way so that the entire red backdrop of it's title is clickeable.\nWhile this is fine it actually makes it really hard to select the title to copy it and search for it in you $EDITOR.\nThis is my workflow when I find a broken test:\n\nClick on it in jasmine to execute just it\nSelect its title\nhit command-e (to get it into the search clipboard)\nswitch to $EDITOR\nhit command-shift-f and enter to search it in the entire project\n\nVoilla now I'm at the test and can start fixing it.\nBUT: since the entire area is clickeable now, I can't start a selection anywhere over the link. Thus I have to start slightly below it, which means the ending newline and dot is also included in the copied text.\nThen I have to remove that cruft after switching to my editors find in project feature.\nAnd this is the problem.\nMy suggestion:\n\nRemove the trailing dot - it serves no purpose\nChange the markup / css so that only the text itself is clickeable and the area to the right of it can be used to start a selection.", "createdAt": "2012-10-11T12:29:36Z", "updatedAt": "2013-05-27T17:27:07Z", "closedAt": "2013-05-27T17:27:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dwt", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dwt", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:26:57Z", "contents": "Closing this in favor of #295.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 289, "url": "https://github.com/jasmine/jasmine/issues/289", "title": "jasmine.Clock.tick( 0 ) should not greedily call callbacks that get added while processing the call", "contents": "jasmine.Clock.tick(0) calls all callbacks that have previously been registered using setTimeout(). So far so good, but it also calls any callbacks which are added by the inital set of callbacks. This is not so good since it now is impossible to test that multiple callbacks are delayed in the JavaScript event loop instead of calling each other immediately.\nI have code that must not call the callbacks immediately (since calling the callback immediately breaks a guarantee of the code; effectively the callback must not change any variables in the same event cycle). Therefore, the code uses setTimeout(callback1, 0) in order to defer the execution of the callback. The callback may use similar code with similar guarantees. Therefore, it also uses setTimeout(callback2, 0). Unluckily, Jasmine behaves differently for the first callback and for the second.\nThe problem is that in file mock-timeout.js in function jasmine.FakeTimer.prototype.runFunctionsWithinRange\nthe (next to) last line reads\njasmine.FakeTimer.prototype.runFunctionsWithinRange = function(oldMillis, nowMillies) {\n    // ...\n\n        this.runFunctionsWithinRange(oldMillis, nowMillis);\n    }\n}\nThis line runs any newly added functions. In my opinion, this is simply wrong. At least, there should be an option (e.g. to jasmine.Clock.tick()) to disable this behavior.\nThis spec triggers the problem:\ndescribe( \"Jasmine should\", function() {\n    var callback1, callback2;\n\n    beforeEach( function() {\n        jasmine.Clock.useMock();\n\n        callback1 = jasmine.createSpy( \"callback1\" ).andCallFake( function() {\n            setTimeout( callback2, 0 );\n        });\n\n        callback2 = jasmine.createSpy( \"callback2\" );\n    });\n\n    it( \"not call a scheduled function without calling Clock.tick() again\", function() {\n        setTimeout( callback1, 0 );\n        expect( callback1 ).not.toHaveBeenCalled();\n        expect( callback2 ).not.toHaveBeenCalled();\n        jasmine.Clock.tick( 0 );\n        expect( callback1 ).toHaveBeenCalled();\n        expect( callback2 ).not.toHaveBeenCalled();\n        jasmine.Clock.tick( 0 );\n        expect( callback1 ).toHaveBeenCalled();\n        expect( callback2 ).toHaveBeenCalled();\n   });\n});", "createdAt": "2012-10-21T20:39:26Z", "updatedAt": "2012-10-22T19:34:21Z", "closedAt": "2012-10-22T19:34:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thaustein", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "thaustein", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-10-22T19:34:20Z", "contents": "I think this is expected behavior because it mirrors how setTimeout would behave in this scenario. The example you provide isn't enough to convince me that we need to add behavior to tick. Do you have a more involved example?\nIf you care about call order callback1 and callback2 can be real functions that make assertions.\ndescribe( \"Jasmine should\", function() {\nvar callback1, callback2;\nbeforeEach( function() {\n    jasmine.Clock.useMock();\n\n    callback1 = jasmine.createSpy( \"callback1\" ).andCallFake( function() {\n        setTimeout( callback2, 0 );\n    });\n\n    callback2 = function() {\n      expect(callback1).toHaveBeenCalled();\n    }\n});\n\nit( \"not call a scheduled function without calling Clock.tick() again\", function() {\n    setTimeout( callback1, 0 );\n    expect( callback1 ).not.toHaveBeenCalled();\n    expect( callback2 ).not.toHaveBeenCalled();\n    jasmine.Clock.tick( 0 );\n    expect( callback1 ).toHaveBeenCalled();\n });\n\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 293, "url": "https://github.com/jasmine/jasmine/issues/293", "title": "waitsFor does not support an optional timeout value of 0", "contents": "The code that checks for the presence of an optional timeout uses a simple falsey guard operator. Consequently 0 fails and the default value is used instead.\nI believe the code could read something like\nif (value === null) : default : value;\n(pseudo-code)\nThanks,", "createdAt": "2012-11-05T15:15:46Z", "updatedAt": "2013-05-27T17:20:10Z", "closedAt": "2013-05-27T17:20:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "oatkiller", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "oatkiller", "company": "nope"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:20:06Z", "contents": "We've deprecated waits/runs for async in favor of a done callback - Mocha-style. Please take a look at master and see if this solves your problem.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 294, "url": "https://github.com/jasmine/jasmine/issues/294", "title": "An error occurs if all `if`s are `xif`s.", "contents": "The error is like this:\nUncaught TypeError: Cannot call method 'suiteComplete' of undefined\nBest,\nRobert", "createdAt": "2012-11-05T15:16:53Z", "updatedAt": "2013-05-27T17:21:56Z", "closedAt": "2013-05-27T17:21:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "oatkiller", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "oatkiller", "company": "nope"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:21:52Z", "contents": "There are a couple of stories and issues around \"empty\" suites and how we handle them.\nSee this story: https://www.pivotaltracker.com/story/show/12784235\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 296, "url": "https://github.com/jasmine/jasmine/issues/296", "title": "Whitespace should be preserved in test output", "contents": "Several times now, I have been mislead by the test output because multiple consecutive whitespace characters are displayed as single spaces by the browser, and they even copy to the clipboard that way. For example, ...\nExpected [ '1 2', '11 22', '111, 222' ] to equal [ '1 2', '11 22', '111, 222' ].\n\nPerhaps, output should be wrapped in \"pre\" tags or something?", "createdAt": "2012-11-13T17:19:03Z", "updatedAt": "2013-03-04T06:27:57Z", "closedAt": "2013-03-04T06:27:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stevecj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "stevecj", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 297, "url": "https://github.com/jasmine/jasmine/issues/297", "title": "Testrunner should not show 'success' if no specs have been executed", "contents": "This fools me annoyingly often when I filter down to one specific spec and then happen to change it's name to make it more descriptive.\nAnd then suddenly my testsuite running in the background tells me that its green - o happiness.\nJust to discover a millisecond later that I've fallen victim to this trap again. :-(\nBut more generall: executing no specs should not be seen as a success. It only verifies that the spec runnier is loaded correctly - not that the specs are found / configured, not that they compile/ interpret cleanly, not that your filter matches anything....\nI think the sensible thing to do would be to show a first time message (yeah your testuite loads, thats great, now go add tests and this link descirbes how to do that).\nEven better would be to not show this as green, but as kind of a failure in itself (here's hope you do that, but....)", "createdAt": "2012-11-15T09:42:38Z", "updatedAt": "2013-10-02T22:52:53Z", "closedAt": "2013-10-02T22:52:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dwt", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "dwt", "company": null}, {"login": "wyuenho", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "wyuenho", "authorAssociation": "NONE", "createdAt": "2013-03-24T11:03:56Z", "contents": "+1 for this", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T18:47:16Z", "contents": "I've added this issue to this other Tracker story in our backlog.\nNo specs being executed in a filter of any kind - no filter, focused specs, etc. - should be reported the same.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T22:52:53Z", "contents": "We'll be looking at this after 2.0 is released. This does seem quite useful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 299, "url": "https://github.com/jasmine/jasmine/issues/299", "title": "Can't spyOn sessionStorage or localStorage methods in Firefox", "contents": "It's not possible to spyOn sessionStorage or localStorage methods in Firefox.  This works correctly in Chrome.\nI have tried several methods.\nExamples:\n\nspyOn(window.sessionStorage, 'setItem');\nwindow.sessionStorage.setItem('test', 'test2');\nexpect(window.sessionStorage.setItem).toHaveBeenCalledWith('test', 'test2');\n\nThis passes on Chrome but in Firefox the error is 'window.sessionStorage.setItem is not a function'.  On closer expection the typeof window.sessionStorage.setItem is 'string' after spying.\n\nwindow.sessionStorage.setItem = jasmine.createSpy();\nwindow.sessionStorage.setItem('test', 'test2');\nexpect(window.sessionStorage.setItem).toHaveBeenCalledWith('test', 'test2');\n\nThis passes on Chrome but again Firefox has the same error.\n\nwindow.sessionStorage = {\nsetItem: jasmine.createSpy()\n}\nwindow.sessionStorage.setItem('test', 'test2');\nexpect(window.sessionStorage.setItem).toHaveBeenCalledWith('test', 'test2');\n\nThis fails in all browsers, as expected.\nDoes anyone have any information/help on a fix for this?", "createdAt": "2012-11-22T12:05:00Z", "updatedAt": "2018-10-05T08:56:02Z", "closedAt": "2012-11-22T20:59:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tomcooksey", "authorAssociation": "NONE", "participants_count": 15, "participants_data": [{"login": "tomcooksey", "company": null}, {"login": "keithamus", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "hereandnow", "company": null}, {"login": "mbielski", "company": null}, {"login": "mikkosuonio", "company": "Solita"}, {"login": "RobAWilkinson", "company": "@oddballio  "}, {"login": "irvingreid", "company": "@PagerDuty"}, {"login": "bzbarsky", "company": "@mozilla"}, {"login": "asiniy", "company": null}, {"login": "usmanarif", "company": "SRM Techsol Private Limited"}, {"login": "urahonky", "company": null}, {"login": "dneuge", "company": null}, {"login": "teogeos", "company": null}, {"login": "sasos90", "company": null}], "comments_count": 23, "comments_data": [{"authorLogin": "keithamus", "authorAssociation": "NONE", "createdAt": "2012-11-22T12:24:42Z", "contents": "The problem seems to be weird behaviour with sessionStorage.setItem in Firefox:\nsessionStorage\n-> [object Storage]\nsessionStorage.setItem\n-> function setItem() {\n    [native code]\n}\nsessionStorage.setItem = function () {}\n-> (function () {})\nsessionStorage.setItem\n-> \"function () {}\"\n--\nsessionStorage.setItem()\nTypeError: sessionStorage.setItem is not a function", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keithamus", "authorAssociation": "NONE", "createdAt": "2012-11-22T12:36:40Z", "contents": "The fix seems to be this:\nObject.defineProperty(sessionStorage, \"setItem\", { writable: true });\n-> [object Storage]\nsessionStorage.setItem = function () {}\n-> (function () {})\nsessionStorage.setItem()\n-> undefined\nTherefore, before you call spyOn(window.sessionStorage, 'setItem'); you need to call Object.defineProperty(sessionStorage, \"setItem\", { writable: true });.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tomcooksey", "authorAssociation": "NONE", "createdAt": "2012-11-22T12:38:07Z", "contents": "Yea I have observed this behavior from digging further after raising this ticket.  Not sure what the fix could be as it appears to be a browser limitation.  Perhaps throw an error when trying to spy on these items in this browser?  Very frustrating as we are using sessionStorage quite heavily now and means we can't have unit tests for it.\nI don't particularly want to move to browser sniffing within the specs.  I think the best idea will be to pull the calls out into our own wrappers so that we can observe the individual calls being made throughout the code and just accept that these wrappers won't have unit test coverage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tomcooksey", "authorAssociation": "NONE", "createdAt": "2012-11-22T12:39:47Z", "contents": "Ah my reply came before yours, I will give that fix a go.  Be nice if that could work itself into the jasmine codebase though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tomcooksey", "authorAssociation": "NONE", "createdAt": "2012-11-22T12:46:23Z", "contents": "This doesn't fix the problem:\n\nObject.defineProperty(window.sessionStorage, \"setItem\", { writable: true });\n  describe(\"Test Test\", function() {\n    it(\"will pass\", function() {\n      spyOn(window.sessionStorage, 'setItem');\n\n      window.sessionStorage.setItem('test', 'test1');\n\n      expect(window.sessionStorage.setItem).toHaveBeenCalledWith('test', 'test1');\n    })\n\n\n  });\n\n\nThis error is 'setItem() method does not exist'", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keithamus", "authorAssociation": "NONE", "createdAt": "2012-11-22T12:51:15Z", "contents": "Try\nObject.defineProperty(window.sessionStorage, \"setItem\", { writable: true, configurable: true });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tomcooksey", "authorAssociation": "NONE", "createdAt": "2012-11-22T13:26:06Z", "contents": "Same error in both Chrome & Firefox.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-11-22T20:59:07Z", "contents": "Given that this is a browser limitation and not Jasmine core I'd like to move this discussion out of Jasmine issues and into the mailing list: jasmine-js@googlegroups.com\nPerhaps a wrapper - much like Jasmine-Ajax - that is an add-on is more appropriate? Let's talk about it over there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hereandnow", "authorAssociation": "NONE", "createdAt": "2013-02-22T14:53:49Z", "contents": "this is how it is done:\nvar mock = (function() {\n  var store = {};\n  return {\n    getItem: function(key) {\n      return store[key];\n    },\n    setItem: function(key, value) {\n      store[key] = value.toString();\n    },\n    clear: function() {\n      store = {};\n    }\n  };\n})();\nObject.defineProperty(window, 'sessionStorage', { value: mock });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mbielski", "authorAssociation": "NONE", "createdAt": "2013-03-06T21:44:46Z", "contents": "That method seems to work for IE and Chrome, but FF19 is blowing chunks on the last line. Any suggestions?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hereandnow", "authorAssociation": "NONE", "createdAt": "2013-03-07T00:12:56Z", "contents": "no, iam sorry. i surrended with a try catch, but that doesnt solve your problem...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mbielski", "authorAssociation": "NONE", "createdAt": "2013-03-08T18:19:34Z", "contents": "Solution:\nObject.defineProperty(window, 'sessionStorage', { value: mock,configurable:true,enumerable:true,writable:true });\nFound the answer here: http://webreflection.blogspot.com/2011/10/do-you-really-know-objectdefineproperty.html", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mikkosuonio", "authorAssociation": "NONE", "createdAt": "2013-09-09T07:44:56Z", "contents": "Unfortunately this solution does not work on PhantomJS, since it defines the sessionStorage property as nonconfigurable, and this cannot be changed afterwards.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RobAWilkinson", "authorAssociation": "NONE", "createdAt": "2015-02-12T07:39:09Z", "contents": "This issue is ongoing with Firefox 37 dev edition", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "irvingreid", "authorAssociation": "NONE", "createdAt": "2015-03-10T18:59:05Z", "contents": "Filed https://bugzilla.mozilla.org/show_bug.cgi?id=1141698 to see if we can get Firefox to add support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bzbarsky", "authorAssociation": "NONE", "createdAt": "2015-03-10T19:15:43Z", "contents": "I just marked that bug as invalid, because the Firefox behavior here is the one required by the spec for localStorage and sessionStorage, due to the named setter on them.  Yes, named setters are insane.\nThe right fix is to modify the functions on Storage.prototype, which is where they live, instead of modifying them on the instance objects...", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "bzbarsky", "authorAssociation": "NONE", "createdAt": "2015-03-10T19:19:06Z", "contents": "The other possible fix is to try to get the spec for localStorage and sessionStorage changed in some way, I guess.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asiniy", "authorAssociation": "NONE", "createdAt": "2015-09-22T07:40:32Z", "contents": "@mbielski thanks a lot!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "usmanarif", "authorAssociation": "NONE", "createdAt": "2015-12-22T10:36:21Z", "contents": "I am getting the same error while writing the test case for React in Jest. Error is as follows:\nsessionStorage is not defined\nOn adding the command provided by @mbielski I am getting the error for\nmock is not defined\nIs there any genuine solution available for the mentioned errors?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "urahonky", "authorAssociation": "NONE", "createdAt": "2016-02-23T20:14:15Z", "contents": "@usmanarif you have to include the mock variable posted by @hereandnow, here is the code:\n    var mock = (function() {\n        var store = {};\n        return {\n            getItem: function(key) {\n                return store[key];\n            },\n            setItem: function(key, value) {\n                store[key] = value.toString();\n            },\n            clear: function() {\n                store = {};\n            }\n        };\n    })();\n    Object.defineProperty(window, 'localStorage', { value: mock,configurable:true,enumerable:true,writable:true });\n\nI hope this helps someone else in the future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dneuge", "authorAssociation": "NONE", "createdAt": "2016-03-24T16:15:05Z", "contents": "What a bad issue... Funny I didn't encounter this when I last worked on our mobile website under test but now it's a problem for all browsers except Chrome and Mobile Safari. However, while Mobile Safari appears to allow the spy to work on localStorage, it does not allow running defineProperty, so we had to catch that. I'm not sure this snippet will work everywhere as I'm not that deep into JS internals and can't test extensively right now but at least it works for us... So I thought I'd share. :)\nOne thing to note: I had to restore the reference to the original object before continuing with any other tests, so you may have to remember to call unmockLocalStorage at the end of each test that called mockLocalStorage.\n/**\n * Spying on localStorage methods is not possible without replacing it by a\n * mock object on Firefox. It's important to mock only just before calling\n * spyOn(localStorage, ...) and to restore the original object by calling\n * unmockLocalStorage before continueing with other tests.\n * \n * This only works if localStorage is configurable - no way to mock it if it\n * isn't... (but maybe mocks are not required anyway)\n * \n * Important: Keep all copies of this code snippet in sync across test files!\n * \n * See: https://github.com/jasmine/jasmine/issues/299\n */\n(function(){\n    var originalLocalStorage = window.localStorage;\n    var supportsModification = Object.getOwnPropertyDescriptor(window, 'localStorage').configurable;\n\n    function mockLocalStorage() {\n        if (!supportsModification) {\n            return;\n        }\n\n        var mock = (function() {\n            var store = {};\n            return {\n                'getItem': function(key) {\n                    return store[key];\n                },\n                'setItem': function(key, value) {\n                    store[key] = value.toString();\n                },\n                'clear': function() {\n                    store = {};\n                }\n            };\n        })();\n\n        Object.defineProperty(window, 'localStorage', {\n            'value': mock,\n            'configurable': true,\n            'enumerable': true,\n            'writable': true\n        });\n    }\n    window.mockLocalStorage = mockLocalStorage;\n\n    function unmockLocalStorage() {\n        if (!supportsModification) {\n            return;\n        }\n\n        Object.defineProperty(window, 'localStorage', {\n            'value': originalLocalStorage,\n            'configurable': true,\n            'enumerable': true,\n            'writable': true\n        });\n    }\n    window.unmockLocalStorage = unmockLocalStorage;\n})();", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "teogeos", "authorAssociation": "NONE", "createdAt": "2017-07-03T09:40:53Z", "contents": "Don't overlook the answer provided by @bzbarsky.\nInstead of spyOn(localStorage, 'whatever') just spyOn(Storage.prototype, 'whatever')\nIt worked for me. It's simple, clean, and you don't risk leaking mocks from a spec to another.", "reactions_count": 18, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP"]}, {"authorLogin": "sasos90", "authorAssociation": "NONE", "createdAt": "2018-10-05T08:56:02Z", "contents": "@teogeos  and @bzbarsky thank you guys.\nSo my example is:\nspyOn(Storage.prototype, 'getItem').and.callFake(mockLocalStorage.getItem)\nWe might overwrite the whole localStorage right?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 300, "url": "https://github.com/jasmine/jasmine/issues/300", "title": "Release notes are out of date", "contents": "https://github.com/pivotal/jasmine/wiki/Release-Notes", "createdAt": "2012-11-22T12:50:53Z", "updatedAt": "2013-05-27T18:56:57Z", "closedAt": "2013-05-27T18:56:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "blalor", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "blalor", "company": "@hashicorp "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T18:56:50Z", "contents": "Agreed. For 2.0 we are going to move to release notes being in the repo, organized by release. Putting them in the wiki \"hides\" them from normal development.\nI've added this story to do so for our upcoming 2.0 pre-release.\nClosing as this is now in our backlog.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 302, "url": "https://github.com/jasmine/jasmine/issues/302", "title": "getLocation error when redirecting trivialReporter output", "contents": "Hi,\nI just played around with redirecting the trivial Reporter output into a separate div to allow the regular webpage to render in the background and I ran into a problem because getLocation was not defined.\nI think the error is due to the getLocation function in the trivial reporter where it should be\njasmine.TrivialReporter.prototype.getLocation = function() {\nreturn document.location;\n};\ninstead of the current\njasmine.TrivialReporter.prototype.getLocation = function() {\nreturn this.document.location;\n};\nwhich of course also works fine as long as this.document == document.\nBest\nTim", "createdAt": "2012-11-26T11:56:27Z", "updatedAt": "2013-03-04T05:43:39Z", "closedAt": "2013-03-04T05:43:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TimHarder", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "TimHarder", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-04T05:43:39Z", "contents": "Interesting find. We've deleted the TrivialReporter. It was meant mostly as a \"how to\" and it often got in the way. Master has a new HtmlReporter that handles the query string much better. I don't think you'll run into the same problem. And I think the JsApiReporter might be more useful for what you're trying to do.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 303, "url": "https://github.com/jasmine/jasmine/issues/303", "title": "1.3.0 Nothing in IE7/8", "contents": "Updated jasmine from 1.2 to 1.3. So. Tests wan't run. In 1.2.0 all OK.\nSee line 157:57. for - our hero.", "createdAt": "2012-11-29T00:57:12Z", "updatedAt": "2012-12-03T18:06:21Z", "closedAt": "2012-12-03T18:06:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "akaspin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "akaspin", "company": "Remerge"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "akaspin", "authorAssociation": "NONE", "createdAt": "2012-12-03T00:43:22Z", "contents": "Err. Anybody here?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2012-12-03T00:46:30Z", "contents": "Are you using the Jasmine gem, or the standalone version? Is there anything\ninteresting I the JS console.\n--dwf\nOn Dec 2, 2012, at 4:43 PM, Alexander Dorofeev notifications@github.com\nwrote:\nErr. Anybody here?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com//issues/303#issuecomment-10938218.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "akaspin", "authorAssociation": "NONE", "createdAt": "2012-12-03T00:57:25Z", "contents": "Standalone. In IE7\nSCRIPT1028: Expected identifier, string or number \njasmine-html.js, line 157 character 57", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-03T18:06:21Z", "contents": "Fix is merged, we're pushing a 1.3.1 of jasmine/jasmine-core. Please let us know if you continue to have trouble.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 304, "url": "https://github.com/jasmine/jasmine/issues/304", "title": "Chinese Support Issue on Jasmine / PhantomJS", "contents": "I have wrote a simple test in Jasmine:\n--test--\ndescribe(\"Hello world\", function() {\nit(\"\u4e2d\u6587\u6d4b\u8bd5\", function() {\nexpect(helloWorld()).toEqual(\"\u5927\u5bb6\u597d!\");\n});\n});\n-- code --\nfunction helloWorld() {\nreturn \"\u5927\u5bb6\u597d!\";\n}\nI run it usig testacular, but this test passed in FireFox but failed in PhantomJS\nC:\\node.js>testacular start\nerror (reporter): Reporter \"coverage\" does not exist!\nPhantomJS 1.7 (Windows): Executed 0 of 1 DISCONNECTED (0.062 secs / 0 secs)\nPhantomJS 1.7 (Windows): Executed 0 of 1 DISCONNECTED (0.062 secs / 0 secs)\nFirefox 7.0 (Windows): Executed 1 of 1 SUCCESS (0.109 secs / 0.011 secs)\nHowever, it I changed the it session to English only like this\ndescribe(\"Hello world\", function() {\nit(\"HelloWorldTest\", function() {\nexpect(helloWorld()).toEqual(\"\u5927\u5bb6\u597d!\");\n});\n});\nall test will pass\nC:\\node.js>testacular start\nerror (reporter): Reporter \"coverage\" does not exist!\nPhantomJS 1.7 (Windows): Executed 1 of 1 SUCCESS (0.031 secs / 0.002 secs)\nFirefox 7.0 (Windows): Executed 1 of 1 SUCCESS (0.11 secs / 0.008 secs)\nTOTAL: 2 SUCCESS\nI am not sure this is a Jasmine issue or a PhantomJS issue", "createdAt": "2012-12-02T03:03:16Z", "updatedAt": "2013-03-04T06:22:47Z", "closedAt": "2013-03-04T06:22:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adwu73", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "adwu73", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-04T06:22:47Z", "contents": "Is this maybe because the runner.html HTML doesn't claim to be UTF-8 and so PhantomJS (based on how it's built) doesn't default to unicode? We've fixed this. Please check master and file a new issue if it's still a problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 306, "url": "https://github.com/jasmine/jasmine/issues/306", "title": "introduction.js typo", "contents": "On http://pivotal.github.com/jasmine/#section-Grouping_Related_Specs_with_describe\nReplace the word \"contatenated\" with \"concatenated\".\nIs there a way to edit this file from within the repo?\nI couldn't find where it's located.", "createdAt": "2012-12-03T22:24:44Z", "updatedAt": "2013-03-26T21:01:37Z", "closedAt": "2013-03-26T21:01:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Ore4444", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Ore4444", "company": "@ironSource"}, {"login": "dguzzo", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "dguzzo", "authorAssociation": "NONE", "createdAt": "2013-03-26T20:27:01Z", "contents": "\ud83d\udc4d\nyep, i noticed this too. seems a bit much to fork/fix/pull-request; someone should Just Fix It.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 308, "url": "https://github.com/jasmine/jasmine/issues/308", "title": "jasmine 1.3.1 crashes - uninitialized constant Jasmine::Config", "contents": "On a recent project, I upgraded to jasmine 1.3.1 and rake started failing with uninitialized constant Jasmine::Config.  Downgrading to jasmine 1.3.0 fixes things.  But since you just released, I thought it might be worth mentioning.\n#Gemfile (trimmed)\ngem 'rails', '3.2.8'\n...\ngroup :development, :test do\n  gem 'rspec'\n  gem 'rspec-rails'\n  gem 'jasmine'                                                                     \n  gem 'jasmine-rails'\n  gem 'jasmine-headless-webkit'\n  ... \nend\n\nHere's the versions from the Gemfile.lock\n jasmine (1.3.1)                                                                 \n   jasmine-core (~> 1.3.1)\n   rack (~> 1.0)\n   rspec (>= 1.3.1)\n   selenium-webdriver (>= 0.1.3)\n   jasmine-core (1.3.1)\n\nAnd the failure\n$ be rake --trace\n** Invoke default (first_time)\n** Invoke spec (first_time)\n** Invoke db:test:prepare (first_time)\n** Invoke db:abort_if_pending_migrations (first_time)\n**  Invoke environment (first_time)\n** Execute environment\nrake aborted!\nuninitialized constant Jasmine::Config\n/Users/jon/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/jasmine-rails-0.2.2/config/initializers/sprockets.rb:6:in `<top (required)>'\n/Users/jon/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/railties-3.2.8/lib/rails/engine.rb:588:in `block (2 levels) in <class:Engine>'\n/Users/jon/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/railties-\n...\n\nThis is running under ruby-1.9.3-p327.", "createdAt": "2012-12-05T00:02:55Z", "updatedAt": "2012-12-05T00:53:57Z", "closedAt": "2012-12-05T00:12:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bunnymatic", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bunnymatic", "company": "rcode5"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "bunnymatic", "authorAssociation": "NONE", "createdAt": "2012-12-05T00:12:12Z", "contents": "Tried this again on a separate project and it seems to be related to the combo of jasmine & jasmine-rails gems.\nThis bug is probably filed in the wrong project.  I'll close it and re submit to jasmine-rails.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-05T00:12:33Z", "contents": "Yep, just what we were about to suggest. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bunnymatic", "authorAssociation": "NONE", "createdAt": "2012-12-05T00:53:57Z", "contents": "as it turns out, someone beat me to the punch.   and it looks like there\nmay already be a fix pull-request.\nlove the open source community!\nsearls/jasmine-rails#20\ncheers\njon\nOn Tue, Dec 4, 2012 at 4:12 PM, Rajan Agaskar notifications@github.comwrote:\n\nYep, just what we were about to suggest. Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/308#issuecomment-11021938.\n\n\nVisit http://bunnymatic.com", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 310, "url": "https://github.com/jasmine/jasmine/issues/310", "title": "Global leak detection support", "contents": "Would be nice if Jasmine has something like this builtin:\nhttp://tobyho.com/2011/10/14/checking-for-global-leaks-in-unit-tests/", "createdAt": "2012-12-13T17:33:55Z", "updatedAt": "2012-12-14T07:20:45Z", "closedAt": "2012-12-13T21:47:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wyuenho", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "wyuenho", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-13T21:47:00Z", "contents": "I really want to keep Jasmine's responsibilities at a minimum, so it is unlikely we will add built-in global leak support. That said, we'd be more than happy to respond to feature requests for hooks that would permit a separately maintained plugin to provide leak support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wyuenho", "authorAssociation": "NONE", "createdAt": "2012-12-14T04:54:25Z", "contents": "Wait, a test framework that has spies and mocks built-in and 3 reporters has minimum responsibility?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-14T05:30:51Z", "contents": "More accurately it's that we don't have a strong or unifying opinion on a lot of potential features. We'd rather make it easy for the community to pick what they want to add to Jasmine. Our job is to make it easy to provide a given feature set and the hooks/ability to add what you want on top of that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wyuenho", "authorAssociation": "NONE", "createdAt": "2012-12-14T06:23:13Z", "contents": "Every JS testing framework out there has global leak detection support built-in. How do you not have a \"unifying opinion\" on this? This begs the question, how do you guys test for global leaks on IE? I will be more convinced with this argument if you guys had documented all the extension points clearly. I only see addMatchers documented, everything else is just listed as a method name with no comment in a rather useless JSDoc. There are 3 beforeEach methods. Suppose I want all my suites to be able to detect and report global leaks, do I override jasmine.Suite#beforeEach or is there a better way to keep things DRY?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2012-12-14T07:20:45Z", "contents": "We agree about all of the problems with the current codebase. We've started on 2.0 now - you can see the 2_0 branch if you want to see progress. The foundation of the coming release is going to be a well-factored, clearly unit-tested codebase. This makes it far easier to add features and take pull requests. JsDoc will be going away in the short term.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 311, "url": "https://github.com/jasmine/jasmine/issues/311", "title": "With Squire.js Tests Run Always Positive No Matter What. ", "contents": "I'm using Require.js to use AMD in my project. I use it in my project and in my Jasmine tests with no problems.\nI'm using Squire.js to mock my DAO classes in my Services. When I expect the test to fail in a simple as a true to be false the test should fail but it does not fail. Even expect 2 to be 3 runs positive and green but only inside the require space like so:\ndefine(\n[\n\"Squire\",\n\"DAO/MockUserDAO\"\n],\nfunction(Squire,MockUserDAO){\ndescribe(\"UserService\",function(){\n        it(\"should return an array of  4 users on getAll()\",function(){\n\n            var squire = new Squire();\n\n            squire.mock([\"DAO/UserDAO\"],MockUserDAO)\n                .require([\"services/UserService\"], function(UserService){\n                            var userCount = UserService.getAll().length;\n                            expect(2).toBe(1);  // DOES NOT FAIL!\n                        }); \n\n        });\n\n        it(\"should return true\",function(){\n            expect(true).toBe(false);  // FAILS as expected.\n        });\n\n\n    }); \n\n}\n\n);", "createdAt": "2012-12-20T02:12:39Z", "updatedAt": "2012-12-20T12:37:19Z", "closedAt": "2012-12-20T12:37:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Millad", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Millad", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Millad", "authorAssociation": "NONE", "createdAt": "2012-12-20T12:37:19Z", "contents": "It worked when using the library jasmine.async", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 314, "url": "https://github.com/jasmine/jasmine/issues/314", "title": "The error message is the wrong way around", "contents": "If you have the below test, the error result from Jasmine comes back as Expected undefined to be 'fred'. but it should actually be Expected 'fred' to be undefined.\nfunction returnSecondArg(firstArg, secondArg) {\n   return secondArg;\n }\n\nexpect(returnSecondArg(\"only give first arg\")).toBe(\"fred\");", "createdAt": "2013-01-08T12:13:13Z", "updatedAt": "2013-01-08T15:24:51Z", "closedAt": "2013-01-08T15:24:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jchannon", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jchannon", "company": null}, {"login": "joshuacc", "company": "Hobsons"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2013-01-08T14:11:22Z", "contents": "@jchannon Why do you think that? The expression you are passing to expect evaluates to undefined. It's precisely the same as writing expect(undefined).toBe(\"fred\").", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jchannon", "authorAssociation": "NONE", "createdAt": "2013-01-08T14:15:38Z", "contents": "I understand that you are doing expect(undefined).toBe(\"fred\") but the error message should say Expected 'fred' to be undefined. in terms of english grammar.\nWhat you could do is say Expected: undefined Received: 'fred'\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2013-01-08T14:25:38Z", "contents": "Ah. I understand what you are saying now. However, the English grammar is correct. We don't expect anything of fred. We only expect something to be true of the actual value. In this case, the actual value happens to be undefined.\nNote that I'm not speaking about Jasmine's syntax, but about the normal English meaning of the term \"expect\".\nAt any rate, I'll resign from this conversation now. :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jchannon", "authorAssociation": "NONE", "createdAt": "2013-01-08T14:42:36Z", "contents": "Yes we expected undefined but we didnt expect undefined to be fred.\nI'm English, you're American, who speaks English better?  \ud83d\ude04", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-08T15:24:50Z", "contents": "This is 'auto-english-ified' by the matcher itself, which is why the phrasing is \"to be\". I don't anticipate this changing any time soon. \"Expected: undefined, Received: 'Fred'\" reads better, but doesn't indicate what matcher you used.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 315, "url": "https://github.com/jasmine/jasmine/issues/315", "title": "Compiled Assets not compiling unless body=false", "contents": "So my company's test suite, when we upgraded from Jasmine 1.2.0 to the current 1.3.1, various javascript files were not being compiled into the asset pipeline, and the .erb files were being loaded, instead of the compiled js files, and we saw that certain files were not being loaded from the //= loads.\nWe fixed the issue by adding body=false in the jasmine.yml file, ie, assets/application.js?body=false.\nI'm not sure if this behavior is correct or not, but I wanted to point it out, since in the previous version this behavior was not occurring.", "createdAt": "2013-01-09T20:38:58Z", "updatedAt": "2013-10-02T21:05:13Z", "closedAt": "2013-10-02T21:05:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wchenvr", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "wchenvr", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-09T21:39:42Z", "contents": "Thanks for the report. I have a feeling this is related to this other issue: jasmine/jasmine-gem#125 ... I'll try to look into it this weekend.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-01-19T23:39:32Z", "contents": "Please see if jasmine-gem HEAD fixes this for you, as the asset mapping behavior has been reverted.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T18:49:59Z", "contents": "Is this still an issue? Can we close?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T21:05:05Z", "contents": "This should be fixed in 2.0. Please take a look and let us know if this is still an issue", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 320, "url": "https://github.com/jasmine/jasmine/issues/320", "title": "HtmlReporter: getting error in RequireJS environment: Cannot read property 'suites' of undefined", "contents": "Using Jasmine with RequireJS, I am occasionally seeing the following error:\n\nI am unsure whether RequireJS is the cause here, but I suspect it is.\nI found that modifying this line in the current source from:\nthis.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom);\nto:\nthis.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom, this.views);\nsolved the issue. Is there a reason why this.views is not currently being passed in on specComplete?", "createdAt": "2013-01-23T12:51:25Z", "updatedAt": "2013-10-10T15:26:59Z", "closedAt": "2013-01-23T13:20:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fiznool", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "fiznool", "company": null}, {"login": "krwinter", "company": null}, {"login": "phtrivier", "company": null}, {"login": "mnoble01", "company": "@salsify "}, {"login": "Nu11Terminator", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "fiznool", "authorAssociation": "NONE", "createdAt": "2013-01-23T13:20:27Z", "contents": "Ah, my bad. Looks like the problem was elsewhere. Should look at my own code before blaming the library!\nIf anybody else has this issue, ensure your AMD specs begin with define, not require - you need to define the specs so that the specrunner can require them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "krwinter", "authorAssociation": "NONE", "createdAt": "2013-01-29T14:08:16Z", "contents": "I am getting the exact same error message, however it only occurs when I use the RequireJS text plugin.  As soon as code I am testing uses the RequireJS Text plugin, Jasmine blows up with the same error as above.  Then I comment out the text!template.html require and it all works fine again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "phtrivier", "authorAssociation": "NONE", "createdAt": "2013-01-29T14:35:42Z", "contents": "@krwinter does the browser try and fetch the text plugin from the proper location ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "krwinter", "authorAssociation": "NONE", "createdAt": "2013-01-30T11:15:07Z", "contents": "Browser gets the text plugin fine, and does actually load the template.html file fine.  On digging a bit more, looks like  I have some kind of race condition going on.  I can get around it by wrapping jasmine.getEnv().execute() in a setTimeout.  Not nice, but works for now.  I suspect Jasmine is fine, but more likely I need to set up my test runner better.  I load jasmine with a <script> tag, then configure and run Jasmine from code right in the html page.  Much better would be to require jasmine.js somehow then configure and run tests only after I am sure EVERYTHING has loaded.  Probably something like described here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mnoble01", "authorAssociation": "NONE", "createdAt": "2013-02-06T18:19:30Z", "contents": "@krwinter I was having a similar problem. Using the domReady plugin as described here works well. (See runner.htm at that link -- it uses RequireJS to load the specs before execution.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Nu11Terminator", "authorAssociation": "NONE", "createdAt": "2013-10-10T15:26:59Z", "contents": "I ran into the same problem, and for me it was my own stupidity.  Inside the describe(), I made an ajax call, and then on the callback, called it(), it(), it(), but by the time the ajax request fired the callback, the describe block had already been exited, so the \"it\"s had no parent.\nThe answer in my case was to avoid any asyncronous operations while defining the spec, so I moved the ajax call outside the describe() block and it worked perfectly.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 322, "url": "https://github.com/jasmine/jasmine/issues/322", "title": "extra properties in arrays are compared but not displayed", "contents": "Arrays are compared as objects and thus extra properties in the array are compared. But the error output doesn't display these extra properties.\nYou can verify this as follows:\nvar a = [1,2,3];\na.extra = 4;\nexpect(a).toEqual(a.slice(0));\n\nThis outputs:\nError: Expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ].\n\nIn my case, I had a test like expect(a).toEqual([1,2,3]); which was failing, but it took me a while to figure out that the extra properties were the problem because they weren't in the output. Now I have it working like this expect(a.slice()).toEqual([1,2,3]);.\nI think that if both values are arrays, they should be compared as arrays only. But if that's not acceptable, at least the output should be changed to include the extra properties.", "createdAt": "2013-01-24T20:55:24Z", "updatedAt": "2013-05-27T20:57:20Z", "closedAt": "2013-05-27T19:36:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mbest", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mbest", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T19:35:39Z", "contents": "We're drastically improving the equality function, borrowing heavily from Underscore. The Array compare ignores extra properties. So that suggests we close this issue.\nHowever, this does bring up an interesting question. It sounds like the error reporting is the problem.\nI'm adding a story to the backlog to both make the new equality compare properties AFTER length and items match. And that the report should explain the lack of equivalence.\nThanks for this find. It's a lack of backwards-compatibility that I didn't realized we were introducing in our 2.0 work.\nClosing", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mbest", "authorAssociation": "NONE", "createdAt": "2013-05-27T20:57:20Z", "contents": "Sounds good. Thanks for looking into this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 325, "url": "https://github.com/jasmine/jasmine/issues/325", "title": "favicon not found", "contents": "Does the framework zip file supposed to have a favicon included? It is linked on SpecRunner.html but not present in the package.\nHere's the tag:", "createdAt": "2013-01-30T18:24:50Z", "updatedAt": "2013-03-04T05:17:12Z", "closedAt": "2013-03-04T05:17:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lquixada", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lquixada", "company": "New York Times"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-04T05:17:12Z", "contents": "This was a bug in our build process. It should be fixed on master.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 326, "url": "https://github.com/jasmine/jasmine/issues/326", "title": "Force Jasmine run to fail if any uncaught errors occur", "contents": "I think the test run should fail if any uncaught errors occur on the page.\nWe had a nasty situation where a compilation error in a Jasmine spec file caused the test run to pass as if nothing had gone wrong. The syntax error prevented the examples from being registered and it was as if the spec hadn't even existed. I can see how one syntax error could cause a whole spec to fall into decay if it isn't regularly touched.\nI tried to hack in a fix as suggested at https://gist.github.com/mattyod/3911612 but the problem with this is getting that spec to load first before any of the others are evaluated. The hacky workaround is the name this file beginning with 'aaa' or something so it loads first.\nHere's the Gist:  https://gist.github.com/brentsnook/4721960", "createdAt": "2013-02-06T11:15:13Z", "updatedAt": "2018-02-07T03:05:06Z", "closedAt": "2014-06-23T03:09:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brentsnook", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "brentsnook", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "lukeasrodgers", "company": "Nomos R&D"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "jchesterpivotal", "company": "Pivotal Software, Inc."}, {"login": "sgravrock", "company": null}, {"login": "berlin-ab", "company": "Pivotal"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ardalis", "company": "DevIQ"}], "comments_count": 11, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-02-06T15:05:44Z", "contents": "Interesting. This is probably a good solution for web runners.\nFWIW, you can just throw this in spec_helpers, that will load it prior to specs being run. spec files are also uniq'd before being loaded, so you can do something like the following in jasmine.yml:\nspec_files: \n  - load_this_first.js\n  - **/*spec.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lukeasrodgers", "authorAssociation": "NONE", "createdAt": "2013-02-06T15:20:01Z", "contents": "If this were to be implemented, I think it should be as a command-line config option. When introducing jasmine into an environment where the code has not been written to allow for easy testing, your test suite could be full of errors that you just don't care about (yet, anyway). Also this change would probably require some people to rewrite specs, if not the actual code under test, to handle error throwing/catching differently.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brentsnook", "authorAssociation": "NONE", "createdAt": "2013-02-06T22:46:17Z", "contents": "@ragaskar Thanks - much better than naming the spec aaa\n@lukeasrodgers That'd be great as long as it was easily configurable from the Jasmine gem too. Something like a \"strict\" option", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:09:47Z", "contents": "We have a story in the icebox for catching syntax errors. We want to add this at some point as many have asked for it.\nClosing for now as it's a feature request and it's in Tracker.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jchesterpivotal", "authorAssociation": "NONE", "createdAt": "2017-07-25T13:53:56Z", "contents": "As a note, we have encountered this as well. Is there any sense of when it might be addressed? The Tracker icebox entry seems to have been untouched since 2015.\nThis can leave folk like myself with a false sense of security, because everything \"passes\". It's only when you see different numbers of tests run in different browsers or headless browsers that it becomes obvious that something is amiss.\nTo me BDD and TDD are about improving assurance and trust in the code, to allow more fearless refactoring and improvement. That I will never be able to truly know, starting with baseline Jasmine, that all the tests and specs I provided were actually run, is upsetting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T18:18:51Z", "contents": "I understand why this feature is desirable. I hack it into boot.js pretty much every time I start a project that uses Jasmine standalone. It hasn't been implemented in Jasmine yet because it's a breaking change and it's likely to be a little tricky to get right for all users. There are plenty of systems that trigger the global error event during successful initialization, and we don't want to break their test suites on a point release. We also need to think carefully about situations where the code under test depends on libraries that raise errors during initialization. So while I'd also like to see this feature, it's going to take some careful work and I think it has to wait for a major version bump.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "berlin-ab", "authorAssociation": "NONE", "createdAt": "2017-10-23T14:25:57Z", "contents": "Bumping this feature request. We just introduced this workaround to our project. It would be nice if it were a configurable option at least.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-28T01:18:46Z", "contents": "This functionality should be coming in 3.0. Check out the 3.0-features branch.\nNo, I don't have an ETA for release right now :)", "reactions_count": 1, "reactions_data": ["HOORAY"]}, {"authorLogin": "ardalis", "authorAssociation": "NONE", "createdAt": "2018-02-06T14:56:53Z", "contents": "A couple of months later, any ETA for 3.0 now? :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-06T23:49:03Z", "contents": "Jasmine 3.0 was released today. Please check out the release notes and use the 2.99 release to check for changed functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ardalis", "authorAssociation": "NONE", "createdAt": "2018-02-07T03:05:06Z", "contents": "Sweet! Nice timing!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 327, "url": "https://github.com/jasmine/jasmine/issues/327", "title": "Browser / Jenkins CI / TestSwarm / Code coverage support", "contents": "We wrote all our tests using Mocha to find out it's not supported in IE6/7 (which is still a majority of users on some of our products, sadly)...\nI'm looking around the interwebs trying to figure out the best testing framework for our company.\nSupporting all browsers is CRUCIAL.  Ideally, we'd like to run our tests on CI and have the following things met:\n\n Supporting browsers as old as IE6.\n Can run on Jenkins CI\n Has code coverage\n Can run on TestSwarm\n\nSo, I'm sorry to bloat your issues!  I can close this shortly -- I just couldn't find anything regarding the above questions. \ud83d\ude22", "createdAt": "2013-02-08T05:56:11Z", "updatedAt": "2013-10-02T22:58:24Z", "closedAt": "2013-10-02T22:58:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "j", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "j", "company": "@DapperToast"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-02-08T15:18:32Z", "contents": "1.3.1 should support IE6 (we dropped our IE test suite awhile ago because it was difficult to maintain, and we lost a bit of insight into whether or not IE6 would run without errors). I think we dropped IE6 support in the upcoming 2.0 branch as IE6 has been EOLed.\nWe've been able to run on Jenkins for years now, so you shouldn't have a problem. You can set up an xvfb yourself, or have someone else set it up. For IE6 suites you often need to point selenium at a different (VM) host, but it should be possible to set up with some custom configuration voodoo.\nNo built in code coverage, but I think there's forks that have added this. We are unlikely to build in code coverage to jasmine itself, but the changes we are making/have made a designed to make it easy for people to add this.\nThis is the first I've heard of TestSwarm, so not sure what our compatibility will be like. In theory, jasmine-core should be able to run anywhere javascript can run, it just depends on what your tests look like. The jasmine-gem (the ruby bindings that help you load your tests) is slightly less flexible.\n\nJasmine isn't going to meet all your needs out of the box (you'll need to invest some time into configuration), but I think it might work for you. Good luck.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T19:40:59Z", "contents": "Can we close this, @j?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 328, "url": "https://github.com/jasmine/jasmine/issues/328", "title": "Throw an error if user tries to register spec after execution", "contents": "// registering tests\ndescribe('x', function() {...});\n\nvar jasmineEnv = jasmine.getEnv();\n\njasmineEnv.addReporter(new SomeReporter());\njasmineEnv.execute();\n\n\n// this should throw an exception,\n// as it won't get executed\ndescribe('y', function() {...});\nThis can easily happen with async loading (eg. using require.js) and it's tricky to debug. I don't see any use case for registering specs after execution, as the there is a single global instance of jasmine env.\nIf there's interest in this feature, I'm happy to send a PR.", "createdAt": "2013-02-11T18:34:22Z", "updatedAt": "2013-07-04T06:17:00Z", "closedAt": "2013-05-27T19:11:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vojtajina", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vojtajina", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-04T05:15:48Z", "contents": "I agree conceptually. But how complex is the fix? And have you looked at Master in the last couple of weeks?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T19:11:00Z", "contents": "Have you looked at Testr.js: https://github.com/mattfysh/testr.js\nPeople have had a lot of success with CommonJS projects and suites using it.\nI don't see us adding support directly for this case in Jasmine core until JS decides how modules should work.\nClosing", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vojtajina", "authorAssociation": "NONE", "createdAt": "2013-07-04T06:17:00Z", "contents": "@infews This has nothing to with Testr.js.\nJasmine has a context (Environment) and defining a suite/spec means adding it into that context.\nIf I execute the environment and then try to register a suite/spec with this already executed environment, it is a user error, that will be silently ignored. Throwing an exception would make it easier to find that mistake.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 330, "url": "https://github.com/jasmine/jasmine/issues/330", "title": "gh-pages `jasmine` symlink can cause build fail", "contents": "If you recursively clone submodules, and jasmine is one of your submodules, then a build step that attempts to copy files into a dist can choke on the jasmine symlink in this branch. The pages submodule gets cloned and seems to contain the problem.", "createdAt": "2013-02-26T01:16:35Z", "updatedAt": "2013-05-27T18:37:33Z", "closedAt": "2013-05-27T18:37:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "necolas", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "necolas", "company": "Facebook"}, {"login": "tbrd", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "tbrd", "authorAssociation": "NONE", "createdAt": "2013-03-18T15:49:41Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-18T16:22:34Z", "contents": "When this Tracker story is finished, the symlink will be gone.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T18:37:29Z", "contents": "Closing as the story is delivered", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 334, "url": "https://github.com/jasmine/jasmine/issues/334", "title": "RangeError: Maximum call stack size exceeded when adding bootstrap.js", "contents": "I am using jasmine to run a bunch of unit tests against our angularJS app. There are a lot of supporting scripts and the issue seems to occur when the amount of script jasmine is looking at gets too high.\nMy steps for believing this:\n\nWe have 65 tests which run normally when bootstrap.js is not in our specrunner.htm.\nI added <script type=\"text/javascript\" src=\"/scripts/bootstrap.min.js\"></script> near the top of specrunner.htm.\nRefresh the page and all 65 tests are failing with this message: \"RangeError: Maximum call stack size exceeded\"\nFurther investigation by removing jquery and refreshing shows 14 tests failing, which are the tests that are trying to use jquery\n\nThis may not be a correct assessment though, because adding a few other heavy scripts to the page, such as microsoftAjax.js, doesn't seem to cause any issue. Maybe there is an issue with bootstrap?\nspecrunner.htm head section is below:\n\n<script type=\"text/javascript\" src=\"/scripts/shared/jasmine/lib/jasmine-1.3.1/jasmine.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/shared/jasmine/lib/jasmine-1.3.1/jasmine-html.js\"></script>\n\n<script type=\"text/javascript\" src=\"/scripts/jquery-1.8.2.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/bootstrap.min.js\"></script>\n\n<script type=\"text/javascript\" src=\"/scripts/angular.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/angular-resource.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/angular-mocks.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/angular-ui.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/angular-ui-ieshiv.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/jquery.cookie.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/shared/jquery.formatcurrency-1.4.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/jquery.maskedinput.js\"></script>\n\n<script type=\"text/javascript\" src=\"/scripts/filters.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/directives.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/services.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/app.js\"></script>\n<script type=\"text/javascript\" src=\"/scripts/controllers.js\"></script>\n\n\n<script type=\"text/javascript\" src=\"../../tests/filters.spec.js\"></script>\n<script type=\"text/javascript\" src=\"../../tests/controllers.spec.js\"></script>\n<script type=\"text/javascript\" src=\"../../tests/functional.spec.js\"></script>\n<script type=\"text/javascript\" src=\"../../tests/services.spec.js\"></script>\n<script type=\"text/javascript\" src=\"../../tests/directives.spec.js\"></script>\n\n<script type=\"text/javascript\">\n    (function () {\n        var jasmineEnv = jasmine.getEnv();\n        jasmineEnv.updateInterval = 1000;\n\n        var htmlReporter = new jasmine.HtmlReporter();\n\n        jasmineEnv.addReporter(htmlReporter);\n\n        jasmineEnv.specFilter = function (spec) {\n            return htmlReporter.specFilter(spec);\n        };\n\n        var currentWindowOnload = window.onload;\n\n        window.onload = function () {\n            if (currentWindowOnload) {\n                currentWindowOnload();\n            }\n            execJasmine();\n        };\n\n        function execJasmine() {\n            jasmineEnv.execute();\n        }\n\n    })();\n\n  </script>", "createdAt": "2013-02-27T21:54:55Z", "updatedAt": "2013-03-15T13:24:20Z", "closedAt": "2013-02-28T15:53:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wgwine", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "wgwine", "company": "Xenial"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "lpaulger", "company": "YOCO LLC"}], "comments_count": 6, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-02-27T22:57:05Z", "contents": "Do you get a stack? My offhand guess is that bootstrap is somehow causing an infinite loop by copying a ref to jQuery incorrectly.\nOffhand I can't think of anything jasmine-specific that would cause this prob, what happens when jasmine isn't loaded and you call a jquery func with bootstrap and your other src files?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wgwine", "authorAssociation": "NONE", "createdAt": "2013-02-28T15:53:45Z", "contents": "This ended up being an issue with angular-mocks.js\nThere is a line of code in the angular.mock.clearDataCache function, at line 1589 in my version, that looks like this:\nhandle && angular.element(handle.elem).unbind();\nCommenting this line out resolves all of the problems. It looks like it was trying to either unbind too many things, or there was some sort of infinite loop while trying to unbind something. Warning to anyone trying this, there may be adverse effects, so use a separate js file for testing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lpaulger", "authorAssociation": "NONE", "createdAt": "2013-03-14T16:59:40Z", "contents": "I am seeing the same issue with RangeError, but what you suggested didn't solve my issue. I'm guessing it has something to do with loading jquery as a dependency..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wgwine", "authorAssociation": "NONE", "createdAt": "2013-03-14T17:17:47Z", "contents": "When I was trying to debug this I was basically just stepping into and out of the different libraries trying to get as close as I could to the error and looking at the stack. At some point, I noticed a huge list of calls to unbind(). Do you get something similar?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lpaulger", "authorAssociation": "NONE", "createdAt": "2013-03-15T11:37:18Z", "contents": "ah, your solution actually worked for me too; I didn't realize that the angular gem for rails includes this file; so it was overriding my changes... either way I applied your fix and it works now. Is there any way to verify if this is being addressed my the angular team?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wgwine", "authorAssociation": "NONE", "createdAt": "2013-03-15T13:24:20Z", "contents": "I just posted it to their issue tracker.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 335, "url": "https://github.com/jasmine/jasmine/issues/335", "title": "Typo in jasmine.util.inherit's documentation", "contents": "commit 3f911075bd86aa138aa46a00e7a960e9be5db769\nAuthor: Johannes Laire <johannes@laire.fi>\nDate:   Fri Mar 1 12:17:57 2013 +0200\n\n    Grammar nazi\n\ndiff --git a/src/core/util.js b/src/core/util.js\nindex fa9dd21..cedc71b 100644\n--- a/src/core/util.js\n+++ b/src/core/util.js\n@@ -4,7 +4,7 @@\n jasmine.util = {};\n\n /**\n- * Declare that a child class inherit it's prototype from the parent class.\n+ * Declare that a child class inherit its prototype from the parent class.\n  *\n  * @private\n  * @param {Function} childClass", "createdAt": "2013-03-01T10:22:51Z", "updatedAt": "2013-03-04T05:12:07Z", "closedAt": "2013-03-04T05:12:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jlaire", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jlaire", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-04T05:12:07Z", "contents": "Thanks for the find. We're moving away from the jsDoc comments. So I've just cleared these comments from util.js.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 337, "url": "https://github.com/jasmine/jasmine/issues/337", "title": "toHaveBeenCalled fails when method is called from inside", "contents": "I have the following class:\nvar MyClass = function() {\n    var method1 = function() {\n        console.log('method1 called!');\n    };\n\n    var method2 = function() {\n        method1();\n    };\n\n    return {\n        method1 : function() {\n            method1();\n        },\n        method2 : function() {\n            method2();\n        }\n    };\n}();\nAnd in my test, i will call \"method2\" and i want to know if \"method1\" is called.\nSo i do:\ndescribe('test myclass methods', function() {\n    it('method2 should call method1', function() {\n        spyOn(MyClass, 'method1').andCallThrough();\n        MyClass.method2();\n        expect(MyClass.method1).toHaveBeenCalled();\n    });\n});\nThe spec will fail with the following message:\n\"Expected spy method1 to have been called\"\nBut if i change my implementation of \"method2\" to:\nvar method2 = function() {\n    MyClass.method1()\n};\nThe spec will pass!\nIt is a bug? If yes, where should i look to fix?\nI tested this possible issue at tryjasmine.com\n][`s,", "createdAt": "2013-03-08T14:08:30Z", "updatedAt": "2017-10-10T21:03:52Z", "closedAt": "2013-03-09T07:07:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "renatodex", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "renatodex", "company": "Everlane"}, {"login": "leoasis", "company": "Twitter"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "francoj22", "company": "https://play.google.com/store/apps/details?id=com.codecanyon.streamradio.v2&hl=en"}], "comments_count": 3, "comments_data": [{"authorLogin": "leoasis", "authorAssociation": "NONE", "createdAt": "2013-03-09T01:12:03Z", "contents": "That's because indeed method2 is not calling the method1 attached to MyClass, it calls the method1 declared with var on top.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-09T07:07:35Z", "contents": "Closing - this is a scope issue, not one with Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "francoj22", "authorAssociation": "NONE", "createdAt": "2017-10-10T21:00:30Z", "contents": "var MyClass = function() {\n    function method1() {\n        console.log('method1 called!');\n    };\n\n    function method2() {\n        this.method1();\n    };\n\n    return {\n        method1 : method1,\n        method2 : method2\n    };\n}();\n\nthis should solve the problem", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 338, "url": "https://github.com/jasmine/jasmine/issues/338", "title": "Docs link pointing to 404", "contents": "See http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Spy.html\nUnder jasmine.Spy, find the \"see:\" and click on spyOn. Watch the octo404.", "createdAt": "2013-03-11T10:25:35Z", "updatedAt": "2013-03-27T06:11:31Z", "closedAt": "2013-03-27T06:11:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pvdz", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "pvdz", "company": "@facebook"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 339, "url": "https://github.com/jasmine/jasmine/issues/339", "title": "Spy discard original arguments count", "contents": "I have some methods that make use of reflection to determine method arguments and decide what to do with them based on the arguments count, i.e.:\nfunction fn(a, b, c, d) {}\nif (fn.length) {\n  ...\n}\nThe matter is that I also need to spy on this method, and when I do so, the Spy overrides and remove all arguments from the original method.\nIs that possible to spy on some method but still preserve its original arguments count (fn.length)? Shouldn't it be able?", "createdAt": "2013-03-12T03:43:41Z", "updatedAt": "2013-05-27T19:45:02Z", "closedAt": "2013-05-27T19:45:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "caiotoon", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "caiotoon", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T19:44:58Z", "contents": "See this Tracker story in our backlog. There have been lots of requests in this area.\nAs part of 2.0 we do plan to refactor/re-write Spies a little bit and this feature is high on the list.\nClosing as it's an already-tracked Feature Request.\nThanks for the feedback.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 341, "url": "https://github.com/jasmine/jasmine/issues/341", "title": "New jasmine-html.js documentation please?", "contents": "I'm trying to use the jasmine-html.js here https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/jasmine-html.js but I am getting errors.\n\nSeems like new jasmine.HtmlReporter() now needs to be passed an object for options, which was not the case in 1.3.\nIf I pass an empty object, it complains later that createElement is undefined https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/jasmine-html.js#L204\nI'm not sure what it expects for createElement, so I wrote a function that wraps document.createElement:\n\nhtmlReporter = new jasmine.HtmlReporter({\n   createElement: function(type){\n      return document.createElement(type);\n   }\n})\nNow it loads but it's saying describe is undefined when my spec runs.\nI am surprised that for a project this large, the documentation is so thin for the current release.  I would greatly appreciate any tips on getting this to work.", "createdAt": "2013-03-15T03:53:32Z", "updatedAt": "2013-03-17T19:44:07Z", "closedAt": "2013-03-17T19:44:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "ohaibbq", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "ohaibbq", "authorAssociation": "NONE", "createdAt": "2013-03-17T19:12:35Z", "contents": "Hey blair, master is currently on 2.0.0-alpha, to use the standalone runner from it you'll have to compile the SpecRunner.html file with grunt buildStandaloneDist which will create an archive file in dist/ that contains the SpecRunner and its dependencies.\nIf you want to use the currently released version grab the 1.3.1-standalone archive from the Downloads page\nRE: Instantiating HtmlReporter. In jasmine 2.0 boot.js was introduced, its responsible for setting up the environment of the runner.\nHope this helps!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2013-03-17T19:44:07Z", "contents": "Thanks ill test it out and let you know if I run into any issues!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 343, "url": "https://github.com/jasmine/jasmine/issues/343", "title": "Allow toThrow() matcher to match a regular expression", "contents": "It would be very useful to be able to match the error message of the Error to a regular expression. Ex:\nexpect( function() {\n    throw new Error( \"Invalid: xyz\" );\n} ).toThrow( /Invalid/ );\nProbably a fairly simply change. Would just run RegExp.test() on the Error's message.", "createdAt": "2013-03-16T17:26:36Z", "updatedAt": "2013-12-03T04:42:49Z", "closedAt": "2013-05-27T17:37:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gregjacobs", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "gregjacobs", "company": "Goldman Sachs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ohaibbq", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "jsplaine", "company": "PerkinElmer"}], "comments_count": 8, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-16T19:35:10Z", "contents": "Seems like a good idea. Want to take a crack at it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregjacobs", "authorAssociation": "NONE", "createdAt": "2013-03-16T20:27:27Z", "contents": "Sure, I'll take a look-see.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregjacobs", "authorAssociation": "NONE", "createdAt": "2013-03-16T20:47:58Z", "contents": "Hmm, just checked out, but unit tests fail?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ohaibbq", "authorAssociation": "NONE", "createdAt": "2013-03-19T01:37:42Z", "contents": "hey greg, I just checked out locally and can't reproduce that. Any more info?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-07T02:49:33Z", "contents": "I was able to see 2 spec failures on master with grunt execSpecsInNode. The version of lib/jasmine-core/jasmine.js is out of date with the spec files (rake core_spec is unaffected since it seems to run against the non-concatenated js files in src/). A grunt buildDistribution gets everything all consistent and passing.\nPerhaps these were the unit test failures that Greg saw? Either way, it seems like the checked in version of jasmine.js needs to be updated?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:37:51Z", "contents": "closing as this shouldn't be a problem on source. But yes, its not in the built jasmine yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jsplaine", "authorAssociation": "NONE", "createdAt": "2013-12-02T23:06:57Z", "contents": "1 put it in the build?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-03T04:42:49Z", "contents": "This feature is in the built distribution and part of the latest rc (v2.0.0.rc5) under 'toThrowError'.\nPassing a regex to 'toThrowError' checks that the thrown error message matches the regex. Passing a regex to 'toThrow' will check that what was thrown is an equivalent regex.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 344, "url": "https://github.com/jasmine/jasmine/issues/344", "title": "Using Matchers inside Custom Matchers", "contents": "Is it seriously this difficult to use matchers inside of custom matchers?\nJasmine doesn't explode when I do this -- it just seems to forget that there was an outer matcher that it was doing, as there is no mention of that matcher when it delivers the FAILED message.  Is that ok?  Is it ok to use matchers inside of matchers?  The docs don't say anything about this one way or the other.\nIt might be nice if a test author could get more control over this, by catching exceptions thrown by matchers.  Perhaps a test author wants to try something else if one matcher failed.", "createdAt": "2013-03-18T21:58:17Z", "updatedAt": "2013-05-26T15:05:28Z", "closedAt": "2013-05-26T15:05:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nickretallack", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "nickretallack", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2013-05-26T15:05:27Z", "contents": "We've added this feature request in our Tracker backlog. With some of the refactoring/re-writing for 2.0 this should be fairly easy. Closing - please follow the progress at Tracker.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 346, "url": "https://github.com/jasmine/jasmine/issues/346", "title": "Reference full path not working in specs", "contents": "I cannot set full path to *.js file in .\nI can set the path of the folder containing only current project.", "createdAt": "2013-03-27T07:25:13Z", "updatedAt": "2013-03-28T17:38:45Z", "closedAt": "2013-03-28T17:38:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "v-avdeev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "v-avdeev", "company": "@cinarra "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 8, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-27T16:23:55Z", "contents": "Can you send us more information about your project? This is not enough for me to be able to help you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "v-avdeev", "authorAssociation": "NONE", "createdAt": "2013-03-28T09:03:56Z", "contents": "Ok. For example please see this file: https://github.com/alterm4nn/ChronoZoom/blob/master/Test/chronozoom20.test/Tests.BL/Scripts/Specs/TimeScaleSpec.js\nAt the beginning of the page i have:\n...\n/// \n...\nI need every time copy \"timescale.js\" file from main project. (from https://github.com/alterm4nn/ChronoZoom/tree/master/Source/Chronozoom.UI/Scripts).\nI try to set relative path (for example: ../../../../Source/Chronozoom.UI/Scripts/timescale.js), but parent folder always: /Test/chronozoom20.test/Tests.BL/.\nI want to be able to set the full path or relative path to different location. It is possible?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-28T16:34:05Z", "contents": "What is that syntax for ?\nThat's not something that Jasmine core or the Jasmine gem understands.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "v-avdeev", "authorAssociation": "NONE", "createdAt": "2013-03-28T16:37:40Z", "contents": "Which file syntax you are talking about?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-28T16:45:43Z", "contents": "Sorry - the //  lines. No part of Jasmine reads those.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-28T16:46:32Z", "contents": "DAMMIT, GITHUB!\nThe  < reference  path= \"asdfasdfasdfasd\" lines", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "v-avdeev", "authorAssociation": "NONE", "createdAt": "2013-03-28T16:55:04Z", "contents": "oh.. I am sorry, but i found this solution in forums.. And it work fine for me.\nSome of my specs not work without , and I really thought that it is Jasmine feature..\nOk, how can i test *.js file located on different location?\nFor example: spec path - C:\\Projects\\ChronoZoom\\Test\\Test.BL\\Scripts\\Specs\\spec.js\nAnd *.js file for test locate at - C:\\feature.js\nIt is possible?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-03-28T17:38:45Z", "contents": "Since this is not an issue with Jasmine, let's move the discussion to jasmine-js@googlegroups.com. There are more people (using Windows) there who can help you with your project configuration.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 348, "url": "https://github.com/jasmine/jasmine/issues/348", "title": "Why in Jasmine, we cannot put the expect in an outside function?", "contents": "http://stackoverflow.com/questions/15893168/why-in-jasmine-we-cannot-put-the-expect-in-an-outside-function\nIf using Jasmine 1.3.1, I use\ndescribe(\"TryTry\", function() {\n\n    var i;\n\n    function checkForSituation(a) {\n        // say, if this is made into a function because \n        //   there are a lot of processing\n\n        console.log(\"THERE\", a); \n        expect(foo(3, a)).toEqual( 3 + a );\n    }\n\n    for (i = 0; i < 5; i++) {\n        console.log(\"HERE\", i); \n\n        it(\"should add for \" + i, function() {\n\n            checkForSituation(i);\n\n        });\n\n    }\n\n});\n\nand foo is just:\nfunction foo(a, b) {\n    return a + b;\n}\n\nI would expect it to check for 0 to 4, and print out\nHERE 0\nTHERE 0\nHERE 1\nTHERE 1\n  ...\n\nbut instead, it just print in Chrome's console as: HERE 0, HERE 1, ... and then THERE 5 five times.  Does somebody know why an expect cannot be put in an outside function like that and what to do in Jasmine if I need to put many steps into a function?\nAs a side note, sometimes in JavaScript, I feel like a whole new language is developed and what you can usually do won't work -- and wonder what can be done to prevent this type of things from happening, something without knowing that it would happen.\nIf you'd like to try it out, it is on https://github.com/jianlin/jasmine-looping-an-it-calling-function-that-does-expect", "createdAt": "2013-04-09T04:26:31Z", "updatedAt": "2013-07-25T05:15:02Z", "closedAt": "2013-07-25T05:15:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jianlin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jianlin", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-15T04:11:18Z", "contents": "Hi @jianlin\nContinuing the response you received on Stack Overflow, the reason you are seeing THERE 5 5 times is indeed a closure issue. To have THERE be called with 0-4, one way is to create a closure for the function that you are passing to Jasmine, by modifying the for loop as follows:\nfor (i = 0; i < 5; i++) {\n  console.log(\"HERE\", i); \n\n  it(\"should add for \" + i, (function(i) {\n\n    return function() { checkForSituations(i); };\n\n  })(i));\n\n}\nAs you noted, there wouldn't be a need for a closure if Jasmine executed the function passed immediately. One compelling, albeit simple, reason for the deferred execution is so that Jasmine knows how many specs there are before executing them. This allows for progress formatters that how far you are from having your suite complete.\nThe other side effect of the deferred execution that you noted is that all the \"HERE\"s are grouped together followed by \"THERE\"s. In most cases when writing specs programmatically, it should only matter that the expectations happen with the right arguments (\"THERE\" has 0-4). If interleaving \"HERE\"s and \"THERE\"s is important to your specs, one solution is to put the \"it\" on the outside with the for loop on the inside.\nThis pattern of execution for testing frameworks is not unique to Jasmine, either. Here is approximately the same test in Ruby with RSpec:\ndescribe \"TryTry\" do\n  def checkForSituations(a)\n    puts \"THERE\", a\n    foo(3, a).should == (3 + a)\n  end\n\n  for i in 1..5\n    puts \"HERE\", a\n    it \"should add for #{i}\" do\n      checkForSituations(a)\n    end\n  end\nend\nRunning this outputs the same block of \"HERE\"s and then \"THERE\"s as Jasmine (as well as the closure issue of THERE 5 5 times). In this case, switching the for loop to a Ruby each gets a closure.\nHopefully this explanation clears some things up!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jianlin", "authorAssociation": "NONE", "createdAt": "2013-04-15T06:24:43Z", "contents": "So pretty much, it is because all those functions are added to a list, and then all executed later on, so that's why they all see the same, final i, which is 5.\nI also might consider this form, so that it looks less complicated:\n    for (i = 0; i < 5; i++) {\n\n        (function(i) {\n            console.log(\"HERE\", i); \n\n            it(\"should add for \" + i, function() {\n                checkForSituations(i); \n            });\n        }(i));\n\n    }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-15T06:32:02Z", "contents": "Yep, that's pretty much it. Sure, that seems like another way to create the necessary closure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:28:42Z", "contents": "Can we close this? It's not a Jasmine issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-25T05:15:02Z", "contents": "I'll close this and @jianlin if you have any further questions, please don't hesitate to ask on the mailing list.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 352, "url": "https://github.com/jasmine/jasmine/issues/352", "title": "Install - phpstorm + windows 7", "contents": "Hi!\nI'm trying to install jasmine, and run it from phpstorm on windows 7, but no success yet. :S\nI found a jasmine js test driver adapter, but I think it works on linux only (I found only .sh files in that). Is there any way to run jasmine tests from the IDE, and not from browser?", "createdAt": "2013-04-22T23:28:35Z", "updatedAt": "2013-04-23T05:27:58Z", "closedAt": "2013-04-23T05:27:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "inf3rno", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "inf3rno", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-04-22T23:34:08Z", "contents": "I'm not sure.\nYou should try the jasmine mailing list: jasmine-js@googlegroups.com. There are some Windows folks on that list who may be able to help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2013-04-23T05:27:58Z", "contents": "Thx, it was a misunderstanding, I don't need the bash files to use jasmine in this IDE. It is working now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 354, "url": "https://github.com/jasmine/jasmine/issues/354", "title": "Add new spy matcher that checks this it's been called with, together with arguments", "contents": "like\nexpect(spy).toHaveBeenCalledOn(expectedThis).with(expectedArguments);\n\ntoHaveBeenCalledWith should have been supported this.", "createdAt": "2013-04-26T14:35:50Z", "updatedAt": "2013-05-30T09:47:11Z", "closedAt": "2013-05-30T09:47:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yaroslav-ulanovych", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "yaroslav-ulanovych", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T17:20:40Z", "contents": "I don't think I follow your suggestion.\nCan you give a full spec example of how you would use this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yaroslav-ulanovych", "authorAssociation": "NONE", "createdAt": "2013-05-30T09:47:11Z", "contents": "Nevermind then, I have a workaround.\nit('each over an object with a context', function () {\n    var obj = {a: 1, b: 2};\n    var spy = jasmine.createSpy();\n    each(obj, spy, this);\n    expect(spy.calls[0].object).toBe(this);\n    expect(spy.calls[1].object).toBe(this);\n    expect(spy.calls[0].args).toEqual(['a', 1]);\n    expect(spy.calls[1].args).toEqual(['b', 2]);\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 355, "url": "https://github.com/jasmine/jasmine/issues/355", "title": "Spy on classes", "contents": "I think the current spyOn function and the current createSpyObj function is not the best way to mock objects. I usually use classes and instantiate them....\nThis example code works with jasmine-node:\njasmine.createStub = function (cls, methods, args) {\n    if (!(cls instanceof Function))\n        throw new TypeError(\"Invalid class param.\");\n\n    var mockClass = function () {\n        this.constructor.apply(this, args || []);\n    };\n\n    mockClass.prototype = Object.create(cls.prototype);\n    mockClass.prototype.constructor = cls;\n\n    var wrap = function (method) {\n        if (!mockClass.prototype[method] instanceof Function)\n            throw new TypeError(\"Cannot mock \" + method + \" it's not a function.\");\n        jasmine.getEnv().currentSpec.spyOn(mockClass.prototype, method);\n    };\n\n    if (methods) {\n        if (!(methods instanceof Array))\n            methods = [methods];\n        if (methods.length == 1 && methods[0] == \"*\")\n            for (var property in mockClass.prototype) {\n                if (mockClass.prototype[property] instanceof Function)\n                    wrap(property);\n            }\n        else\n            for (var i = 0; i < methods.length; ++i) {\n                var method = methods[i];\n                wrap(method);\n            }\n    }\n\n    return new mockClass();\n};\n\nJasmine-node did not have the spyOn method in it's interface somehow... I found that getEnv().currentSpec.spyOn works too...\nExample usage:\nvar MyClass = function () {\n    console.log(\"construct\");\n};\nMyClass.prototype.method= function () {\n    console.log(\"mock method\");\n};\n\nvar mock1 = jasmine.createStub(MyClass, [\"method\"]);\n// console: construct\nmock.method.andCallThrough();\nmock.method(); \n// console: mock method\nexpect(mock.method).toHaveBeenCalled();\n\nvar mock2 = jasmine.createStub(MyClass, [\"constructor\",\"method\"]);\nexpect(mock2.constructor).toHaveBeenCalled();\nexpect(mock2.method).not.toHaveBeenCalled();\n\nvar mock3 = jasmine.createStub(MyClass, [*]);\nexpect(mock3.constructor).toHaveBeenCalled();\nexpect(mock3.method).not.toHaveBeenCalled();\n\n\nvar mock4 = jasmine.createStub(MyClass, [*]);\nexpect(mock4.constructor).toHaveBeenCalled();\nmock4.method.andCallThrough();\nmock4.method();\n//console: mock method\nexpect(mock4.method).toHaveBeenCalled();\n\nIf this code is good enough for you, please add to the lib... If you already have a better way to create stubs, please tell me, because I did not find anything in your documentation...", "createdAt": "2013-04-27T06:58:14Z", "updatedAt": "2013-05-29T20:08:36Z", "closedAt": "2013-05-29T20:08:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "inf3rno", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "inf3rno", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T17:33:00Z", "contents": "That is the intent of spyOn - to turn an existing function into a test double (essentially).\nIf spyOn were in the jasmine-node interface, would this issue be solved? We don't own jasmine-node so we can't push for that. Though we are working on an official jasmine npm.\nIf that doesn't solve your problem, then I'll make a Tracker story for it. There are some improvments to spies coming, but not everything will make the 2.0 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2013-05-27T21:08:11Z", "contents": "No, you misunderstood that, the problem is not with the spyOn, I just used a workaround  for jasmine node, but that works well...\nMy problem is, that currently it is hard to test object oriented javascript - especially constructor functions - with jasmine, and there is a lot of redundant code in the tests because of that. I guess you already know that redundant code is error prone... I made an extra function to help testing oo code:\nhttps://github.com/inf3rno/bb-validation/blob/master/test/jasmine-stub.js\nIt's interface is simple:\n        var mockObject = jasmine.createStub(Class, configObject)\n\nIn the configObject the key is the method name, and the values can be:\n\nundefined: keeps the original method,\ntrue: spyOn + andCallThrough,\nfalse: spyOn,\ncallback: spyOn + andCallFake\narray: it works just for the constructor, you can set the arguments with that\n\nJust a small example:\n        var mockTest = jasmine.createStub(AsyncNextTest, {\n            run: true,\n            stop: true\n        });\n\n        var mockSeries = jasmine.createStub(Series, {\n            constructor: [\n                {\n                    schema: {\n                        a: mockTest \n                    }\n                }\n            ],\n            stop: true\n        });\n\ninstead of\n        var mockTest = new AsyncNextTest();\n        jasmine.spyOn(mockTest , \"run\");\n        jasmine.spyOn(mockTest , \"stop\");\n        mockTest.run.andCallThrough();\n        mockTest.stop.andCallThrough();\n\n        var mockSeries = new Series({\n                    schema: {\n                        a: mockTest \n                    }\n        });\n        jasmine.spyOn(mockSeries , \"stop\");\n        mockSeries.stop.andCallThrough();\n\nI think with the createStub function it is much cleaner, and you will never forget to call the andCallThrough or andCallFake functions on the spies. So I suggest to add this function or something similar to jasmine! What's your opinion?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-29T18:11:12Z", "contents": "Aha. We've not decided on a solution yet, but there have been multiple requests for better doubling syntax. We've capture those in this Tracker story. Is that sufficient to close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2013-05-29T20:08:35Z", "contents": "Yes, it is. Can you please add this to that tracker story?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 359, "url": "https://github.com/jasmine/jasmine/issues/359", "title": "Jasmine tests auto-restart if an exception is thrown", "contents": "One of my specs purposefully has bad code in a try/catch statement. However, anytime any spec in Jasmine has Javascript errors, Jasmine seems to reload the page at the end of the tests.\nIs there a way to disable this \"feature\"?", "createdAt": "2013-05-01T16:27:41Z", "updatedAt": "2013-05-27T19:05:32Z", "closedAt": "2013-05-27T19:05:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "EvHaus", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "EvHaus", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "EvHaus", "authorAssociation": "NONE", "createdAt": "2013-05-15T00:46:17Z", "contents": "Nevermind. This is not caused by Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 360, "url": "https://github.com/jasmine/jasmine/issues/360", "title": "Spying on javascript internals", "contents": "I have a regression that I would like to test for, where Array.forEach() is assumed to exist (IE8 doesn't support it).\nI have this spyOn(Array.prototype, 'forEach')... but unfortunately it's being called elsewhere in the execution cycle, possibly in some dependencies.  Is there any way to restrict the context in which the spy operates? I saw there was a jasmine-stealth library that adds some helpers but I am unsure of the best way to go about this.", "createdAt": "2013-05-06T17:26:47Z", "updatedAt": "2013-05-06T17:44:27Z", "closedAt": "2013-05-06T17:44:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "c0bra", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "c0bra", "company": "@SeniorVu"}], "comments_count": 1, "comments_data": [{"authorLogin": "c0bra", "authorAssociation": "NONE", "createdAt": "2013-05-06T17:44:27Z", "contents": "I ended up restricting at which point I created the spy and was able to get it to work.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 361, "url": "https://github.com/jasmine/jasmine/issues/361", "title": "jasmine.Clock.useMock doesn't mock Date", "contents": "It would be useful if jasmine.Clock.useMock mocked Date such that jasmine.Clock.tick incremented the times returned by Date after jasmine.Clock.useMock is called.  This would make it compatible with _.throttle, the implementation of which changed in jashkenas/underscore#820.", "createdAt": "2013-05-09T23:15:14Z", "updatedAt": "2016-05-07T16:39:59Z", "closedAt": "2014-02-27T19:58:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cwarden", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "cwarden", "company": "@octoberswimmer "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "markfink", "company": null}, {"login": "jalopez", "company": "@cabify"}, {"login": "bobbyrenwick", "company": "@plexivet "}, {"login": "DeadMG", "company": null}, {"login": "guncha", "company": "@Pathgather "}], "comments_count": 9, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-10T00:40:56Z", "contents": "Sounds like this should be an option to useMock. The implementation of the clock has changed on HEAD for 2.0. Do you want to take a crack at implementing this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "markfink", "authorAssociation": "NONE", "createdAt": "2013-05-23T18:47:21Z", "contents": "I just ran into this problem, too. Most of my code uses setTimeout but some relies on Date.now and testing those in real time is painful since it takes forever...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jalopez", "authorAssociation": "NONE", "createdAt": "2013-10-11T16:13:26Z", "contents": "I am developing a solution to this right now, I will open a pull request as soon as I finish it", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-11T16:52:33Z", "contents": "As you're implementing this, can we keep the pieces somewhat separate?\nThe timeout functions are about making something that's asynchronous, synchronous. While mocking Date is a about faking out time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jalopez", "authorAssociation": "NONE", "createdAt": "2013-10-18T09:24:39Z", "contents": "Sure, I will try to make it as a separate component.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bobbyrenwick", "authorAssociation": "NONE", "createdAt": "2015-04-27T22:48:16Z", "contents": "I'm not sure how useful this comment is for anyone else but today I lost time to jasmine.clock().mockDate() not working for any function that the result of using _.debounce or _.throttle.\nThis is because both underscore and lodash get a reference to Date.now (if available) at parse time, so the mocked Date is never used.\nI have worked around this by using this in my tests:\nvar _ = require(\"underscore\");\n_.now = function() {\n    return new Date().getTime();\n};", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DeadMG", "authorAssociation": "NONE", "createdAt": "2015-09-07T10:56:27Z", "contents": "I think that may be a new version of Underscore- the version we have does not do that. That sounds to me like it's an Underscore problem rather than a Jasmine problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guncha", "authorAssociation": "NONE", "createdAt": "2016-05-06T19:55:30Z", "contents": "To use jasmine.clock() with debounce or throttle (with lodash at least), you have to create a new lodash instance that using the mocked timing functions, i.e.:\njasmine.clock().install().mockDate()\nlodash.runInContext(window).throttle // <- this function will use mocked setTimeout \nThen you have to pass it to the code you're trying to test.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "DeadMG", "authorAssociation": "NONE", "createdAt": "2016-05-07T08:57:01Z", "contents": "That'll be super useful for Lodash users, as opposed to everybody else here who is discussing Underscore.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 362, "url": "https://github.com/jasmine/jasmine/issues/362", "title": "Closure compilation error", "contents": "When I try to precompile assets with the closure compiler, I get the following error.\n/Users/me/.rvm/rubies/ruby-1.9.3-p392/bin/ruby /Users/me/.rvm/gems/ruby-1.9.3-p392@global/bin/rake assets:precompile:all RAILS_ENV=staging RAILS_GROUPS=assets\n/var/folders/zh/gs7k8cj16jb1tdhxjw7snrf00001_h/T/closure_compiler20130509-81279-zi7txr:86: ERROR - Invalid flags to RegExp constructor: STRING y 86 [source_file: /var/folders/zh/gs7k8cj16jb1tdhxjw7snrf00001_h/T/closure_compiler20130509-81279-zi7txr]\n      var sticky_regexp = new RegExp(\"[abc]\", \"y\");\n                                              ^\n\n1 error(s), 0 warning(s)\nWe are using closure like so\nconfig.assets.js_compressor = :closure\nWith these versions in our Gemfile.lock\njasmine-core (1.3.1)\nclosure-compiler (= 1.1.6)", "createdAt": "2013-05-10T03:28:37Z", "updatedAt": "2013-10-02T18:50:09Z", "closedAt": "2013-10-02T18:50:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jesseshieh", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jesseshieh", "company": null}, {"login": "lukeasrodgers", "company": "Nomos R&D"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "lukeasrodgers", "authorAssociation": "NONE", "createdAt": "2013-05-10T13:44:19Z", "contents": "This is likely because the 'y' flag is non-standard, so Closure Compiler considers it an error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-10T14:41:18Z", "contents": "Is that line in the Jasmine code base? And if it is, why are you putting Jasmine in your assets? Jasmine should be outside them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T18:50:09Z", "contents": "It doesn't look like this code is coming from jasmine, at least not in 2.0. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 364, "url": "https://github.com/jasmine/jasmine/issues/364", "title": "The markup in SpecRunner.html does not get torn down / redone between each test run", "contents": "I'm not sure if I've missed something but couldn't see it in documentation / an example anywhere but when I use SpecRunner.html the markup I provide does not seem to be 'refreshed' between each test.\nShould I be putting my markup in the page in a div with a special id, or injecting it with some other mechanism?  Currently I've had to include a long string of markup and just insert that before each test - not ideal as html is not as easy to work with when in a js file!\n(I also tried using jasmine-jquery to use fixtures, but there is a cross site issue in Chrome when running locally and I cannot expect other users to start Chrome up in a special way to overcome this each time)\nDid I miss something or is this not a feature jasmine supports?", "createdAt": "2013-05-13T11:20:28Z", "updatedAt": "2013-05-15T16:23:25Z", "closedAt": "2013-05-15T16:23:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "geek-caroline", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "geek-caroline", "company": null}, {"login": "joelmccracken", "company": "@showclix "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "joelmccracken", "authorAssociation": "NONE", "createdAt": "2013-05-14T17:22:21Z", "contents": "Jasmine does not support it itself. I have personally used the plugin:\nhttps://github.com/velesin/jasmine-jquery\nto achieve this, to great effect.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geek-caroline", "authorAssociation": "NONE", "createdAt": "2013-05-15T08:23:42Z", "contents": "Yup, you'll note though I mention above that I also tried using this plugin but cannot in all browsers due to it causing a cross site scripting issue in chrome - I know there are ways around this [1], but cannot expect other users to start chrome in certain ways to run generic tests.\nI was hoping jasmine could support this requirement.  I am surprised it does not already - having the markup change as a result of tests means that they are not independent of each other.\nIn the meantime I'm having to remove and re-insert the base markup from a long js string each time - this is not an ideal solution either.\n[1] http://blog.sdbarker.com/jasmine-chrome-and-access-control-allow-origin/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joelmccracken", "authorAssociation": "NONE", "createdAt": "2013-05-15T15:25:07Z", "contents": "Oh, sorry, I missed that =( I always run jasmine from a server someplace, not locally.\nThis would be a great feature for jasmine to have, but in the absence of this, you can probably roll your own. I actually use jasmine-jquery like this (which I keep in my spec_helpers.coffee):\njasmine.getFixtures().findContainer = ->\n  $(document.body).find(\"##{@containerId}\")\n\njasmine.getFixtures().getContainer = ->\n  cont = @findContainer()\n  if cont.length == 0\n    @createContainer_(\"\")\n    cont = @findContainer()\n  cont\n\nwindow.f = (html=\"\")->\n  cont = jasmine.getFixtures().getContainer();\n  if html.length > 0\n    cont.html(html)\n  cont\nIf you aren't familiar with coffeescript, [here is a link to what it compiles to](http://coffeescript.org/#try:jasmine.getFixtures(\\).findContainer%20%3D%20-%3E%0A%20%20%24(document.body\\).find(%22%23%23%7B%40containerId%7D%22\\)%0A%0Ajasmine.getFixtures(\\).getContainer%20%3D%20-%3E%0A%20%20cont%20%3D%20%40findContainer(\\)%0A%20%20if%20cont.length%20%3D%3D%200%0A%20%20%20%20%40createContainer_(%22%22\\)%0A%20%20%20%20cont%20%3D%20%40findContainer(\\)%0A%20%20cont%0A%0Awindow.f%20%3D%20(html%3D%22%22\\)-%3E%0A%20%20cont%20%3D%20jasmine.getFixtures(\\).getContainer(\\)%3B%0A%20%20if%20html.length%20%3E%200%0A%20%20%20%20cont.html(html\\)%0A%20%20cont)\nAnyway, this lets you create elements quickly with f(\"<div>....</div>\"); and the fixture dom element is returned by f(). This element gets replaced between tests.\nNot ideal, but it works fine for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-15T16:23:25Z", "contents": "Jasmine does not clear out #jasmine_content between runs so that the contents are there for you to inspect on a failing spec. It's recommended that you delete the content at the beginning of any test to prevent test pollution.  Any of the solutions above can be helpful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 365, "url": "https://github.com/jasmine/jasmine/issues/365", "title": "Have HtmlRunner support more ways to filter tests (e.g. by regular expression)", "contents": "Hello! I currently do this with the following code:\nclass_mixer = ttm.require('lib/class_mixer')\n\nclass RegexpSpecFilter\n  initialize: (@regexp)->\n  forSpec: (spec)->\n    spec.getFullName().toLowerCase().match @regexp\n\nclass_mixer RegexpSpecFilter\n\noverride_spec_filter_with = RegexpSpecFilter.build(/calc/)\n\nif override_spec_filter_with\n  env = jasmine.getEnv()\n  env.specFilter = (spec)->\n    override_spec_filter_with.forSpec spec\nIt would be very nice if something like this was supported natively by jasmine, though. Thoughts?", "createdAt": "2013-05-14T17:26:26Z", "updatedAt": "2014-06-23T04:10:35Z", "closedAt": "2014-06-23T04:10:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joelmccracken", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joelmccracken", "company": "@showclix "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "joelmccracken", "authorAssociation": "NONE", "createdAt": "2013-06-24T17:22:44Z", "contents": "ping? this need has gotten more pressing. If I write/hack this, would the PR be accepted?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-24T19:06:54Z", "contents": "I'm not fully following. What are you trying to accomplish beyond what the HtmlReporter does today? Can you provide some more context?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joelmccracken", "authorAssociation": "NONE", "createdAt": "2013-06-24T19:17:48Z", "contents": "Sure. I'd like to be able to run specs that match a regular expression, not\njust match the beginning of a string. so, if i added WIP to the ends of\nspec names that I am currently working with, I could run these with a /wip/\nregular expression.\nDoes that make sense?\nOn Mon, Jun 24, 2013 at 3:07 PM, Davis W. Frank notifications@github.comwrote:\n\nI'm not fully following. What are you trying to accomplish beyond what the\nHtmlReporter does today? Can you provide some more context?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/365#issuecomment-19928376\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joelmccracken", "authorAssociation": "NONE", "createdAt": "2013-06-28T18:21:24Z", "contents": "Allow me to flesh out the proposed feature.\nToday, html reporters support running 1) all tests, 2) individual tests by test name, and 3) a subset of tests that match the beginning of the test name string. I would like the ability to add 4) matching tests based on a regular expression.\nMy imagined interface for this would be a text box at the top of the html runner in which the user can enter a regular expression. Optionally, we could have modifications to the regular expression dynamically show/hide the tests it would apply to.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:10:24Z", "contents": "This looks to be a fine Reporter concern. But it's not on our roadmap at the moment.\nTry making your own version of the HtmlReporter with this functionality. If you find it useful, we're happy to review a pull request that implements it.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 366, "url": "https://github.com/jasmine/jasmine/issues/366", "title": "Move maximumSpecCallbackDepth as a constant on top", "contents": "I found it very unfortunate that this \"constant\" is tucked into the middle of the code in version 2.0-alpha, and I was looking for two days why I can't run more than 25 specs in a single run.\nCould you move it up to the other \"constants\" on top?\nThank you.", "createdAt": "2013-05-15T07:32:18Z", "updatedAt": "2016-10-14T16:38:48Z", "closedAt": "2016-10-14T16:38:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mtomov", "authorAssociation": "NONE", "participants_count": 8, "participants_data": [{"login": "mtomov", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "wejrowski", "company": "Infusionsoft"}, {"login": "NameFILIP", "company": "Uber"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "FuzzySockets", "company": null}, {"login": "vileppanen", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-31T21:23:59Z", "contents": "The maximumSpecsCallbackDepth is supposed to be for Jasmine internals for how many specs we can run recursively before blowing up the stack (we get a little bit of a performance improvement by letting the stack build up). After this number, we clear the stack and continue executing the specs. We didn't think that users would have to tweak this number, unlike jasmine.DEFAULT_TIMEOUT_INTERVAL for example.\nWere you seeing some evidence of the maximum call stack size being exceeded? We have changed this number to be smaller since your issue so maybe the problem has been alleviated?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-13T06:34:36Z", "contents": "Closing due to inactivity and the hope that the current maximum callback depth is sufficient.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wejrowski", "authorAssociation": "NONE", "createdAt": "2015-06-16T22:36:40Z", "contents": "I'm running into an issue with this where we are only getting 10-20 specs running. I get a report back with  9 passed, 1 pending, 17 total", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NameFILIP", "authorAssociation": "NONE", "createdAt": "2015-10-09T08:21:15Z", "contents": "I've also spent a couple of days chasing an issue with maximumSpecCallbackDepth. It either should be configurable or at least, when the currentSpecCallbackDepth  is getting reset to 0 (\n  \n    \n      jasmine/lib/jasmine-core/jasmine.js\n    \n    \n         Line 657\n      in\n      141fd91\n    \n    \n    \n    \n\n        \n          \n           currentSpecCallbackDepth = 0; \n        \n    \n  \n\n) the user should be notified about this (for example: \"Please increase the maximumSpecCallbackDepth or split your test on smaller chunks). Otherwise, somebody else will spend more days on debugging this issue.\nP.S. Please reopen this issue or I will have to create a new one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NameFILIP", "authorAssociation": "NONE", "createdAt": "2015-10-09T08:59:39Z", "contents": "@slackersoft, you seem active in this repo.. could you please reopen this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-23T22:07:29Z", "contents": "Tweaking the maximumSpecCallbackDepth should just be an optimization for your suite. It really only exists so jasmine can try to call your specs in a tail-call fashion for some time before using setTimeout to break the stack so we don't get a stack overflow. This means that for any suite with more than 20 specs, you should see the currentSpecCallbackDepth reset at least once as we use setTimeout to get a fresh stack.\nIf you're actually seeing stack overflow errors while running your jasmine suite, you would actually want to lower your maximumSpecCallbackDepth so the stack gets reset more often.\n@wejrowski or @NameFILIP can you provide a sample suite that exhibits the behavior you're seeing so we can look into what is happening?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FuzzySockets", "authorAssociation": "NONE", "createdAt": "2015-10-24T04:19:15Z", "contents": "Please reference my comment in #945. This is causing my tests to do a full page reload (using karma) once the maximumSpecCallback depth is reached. The spec causing an issue is laid out as follows:\n-fdescribe\n---beforeEach\n---beforeEach\n---describe\n------beforeEach\n------afterEach\n-------describe\n----------it\n-------describe\n----------it\n-------describe\n----------it\n----------it\n----------it\n----------it\n----------it\n----------it\n-------describe\n----------it\n----------it\n-------describe\n----------it\n----------it\nIf I delete one of the it blocks, the suite will run fine.  Notice, the number of its, describes, fdescribe = 19.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vileppanen", "authorAssociation": "NONE", "createdAt": "2016-09-15T10:03:54Z", "contents": "I think I'm dealing with the same issue here. But in my case, the full page reload seems to come out of my angular application run block, where I redirect to login page, if certain cookie does not yet exist.\nI'm running the tests with karma 1.3.0, jasmine-core 2.4.1\nAt first I had an Angular (v.1.5.3) app that was bootstrapped automatically (ng-app directive in the html). Tests ran fine and everything was right. But then a business requirement had me refactor the application so, that it was bootstrapped manually --> unit tests started failing due to full page reload errors.\nI managed to drill down the issue and verify that if I have 19 describe blocks in a test suite, everything runs fine. If I have 20 describe blocks, I get full page reload error.\nI did some console logging, and it seems that the applications run block gets called when the 20th describe block kicks in (this  probably relates to the stack reset). And this run block now executes the cookie/login check with all the redirects and stuff (hence the full page reload). But why the same run block is not called when I have 19 describe blocks, and how can I mock the run block Login service? And furthermore, why all the sudden these errors start appearing with manually bootstrapped application, and not in the automatically bootstrapped version?\nAnd to confuse even more: I have the main angular application in separate module, and services I try to unit test are in completely different module. I don't even load the main application module in the unit tests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 367, "url": "https://github.com/jasmine/jasmine/issues/367", "title": "expect( [] ).toEqual( {} ) passes: it should fail", "contents": "The reverse also passes, but should fail:  expect( {} ).toEqual( [] )\nUsing jasmine 1.3.1.", "createdAt": "2013-05-16T01:03:26Z", "updatedAt": "2013-05-27T19:04:59Z", "closedAt": "2013-05-27T19:04:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mattmoss", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mattmoss", "company": "Object Computing, Inc."}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T19:04:53Z", "contents": "This is a duplicated of #114.\nThis has been fixed on the matchers_redo branch, where we've moved to an equality function that has Underscore's isEqual as a base. Additionally, we've added a test to the suite that verifies that this case (both directions) should not be equal. So we shouldn't regress.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 368, "url": "https://github.com/jasmine/jasmine/issues/368", "title": "[Feature Request] UI to select which specs to run", "contents": "I'd like to have the ability to select which specs to run once I load Jasmine in the browser. Our application has tons of tests setup and we don't always want to run everything. Sometimes we're only interested in testing a specific component.\nAlthough we could easily build this UI on our end, I believe this is something that should be built into Jasmine's UI. A simple select field that allows you to select which \"spec\" files to execute based on the list of available items. As well as an \"All\" option.\nThanks.", "createdAt": "2013-05-22T02:40:52Z", "updatedAt": "2013-05-23T03:39:43Z", "closedAt": "2013-05-23T03:39:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "EvHaus", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "EvHaus", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-22T03:46:30Z", "contents": "The HTML Reporter supports this feature somewhat today via spec filtering. Click on any spec name in a report to see it in action. The query param is \"spec\" and it will use the value of the param as a regular expression for spec name.\nIs this what you're looking for?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EvHaus", "authorAssociation": "NONE", "createdAt": "2013-05-23T01:50:02Z", "contents": "It's not quite what I'm looking for as it still requires you to first run all your specs, and then select the spec you wish to re-run. I want to select right from the get-go the specific spec I want to execute before anything happens.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-23T03:39:43Z", "contents": "I think I understand the use case, but I don't see a good way to solve it without relying on a script of some sort. That gets outside of Jasmine Core, and even the Jasmine Gem's responsibilities. Said another way, if we could agree on an implementation that did put this in Jasmine Core or the Jasmine Gem this would be lower priority than some of our other up-to-2.0 stories.\nThat said, if you can come up with an implementation as a straw man, we'd love to look at it. Closing for now - but feel free to re-open as a pull request with a solution. Or come over to jasmine-js@googlegroups.com and talk solutions with the rest of the community.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 371, "url": "https://github.com/jasmine/jasmine/issues/371", "title": "toThrow does not catch falsy exceptions", "contents": "it(\"should detect falsy exceptions as thrown\", function() {\n        expect(function() { throw undefined}).toThrow();\n        expect(function() { throw ''}).toThrow();\n    });\nCurrently yields:\nExpected function to throw an exception.", "createdAt": "2013-05-27T11:46:30Z", "updatedAt": "2013-05-30T03:19:03Z", "closedAt": "2013-05-27T17:34:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rbu", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rbu", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T15:19:29Z", "contents": "We track these in our Tracker backlog.\nI created this story for this bug.\nThanks for the find!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 372, "url": "https://github.com/jasmine/jasmine/issues/372", "title": "Spy.andThrow should throw default error", "contents": "it(\"should throw a default error if no message is provided\", function() {\n        var spy = jasmine.createSpy().andThrow()\n        var exception;\n        try {\n            spy() \n        } catch (e) {\n            exception = e\n        }\n        expect(exception).not.toBe(undefined);\n        expect(exception).toBeInstanceOf(Error);\n    });\nInstead of throwing undefined by default, Jasmine could throw new Error()", "createdAt": "2013-05-27T11:50:52Z", "updatedAt": "2013-09-06T06:20:23Z", "closedAt": "2013-05-27T15:26:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rbu", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rbu", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-27T15:26:10Z", "contents": "Closing this as a feature request. Good idea!\nI've created a story in our backlog so that you can follow along. Spy features are going to get revised slightly for 2.0 and we'll probably get this in.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 373, "url": "https://github.com/jasmine/jasmine/issues/373", "title": "Jasmine runs into infinite loop trying to stringify complex objects", "contents": "I'm running into an infinite loop in a Jasmine test that crashes the browser. The crash happens when I run a comparison and it fails; Jasmine's StringPrettyPrinter gets trapped in a circular reference.\nI have a na\u00efve fix (linked below) that simply bails out of the pretty printer if the stringified object becomes really long (>1000000 characters). I've found it hard to reproduce the problem in a simpler environment than the code I'm working on, but I can reliably crash the test runner with that code, and I can to send it to you privately.", "createdAt": "2013-05-31T15:53:23Z", "updatedAt": "2014-08-25T20:27:45Z", "closedAt": "2013-05-31T22:13:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "futuraprime", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "futuraprime", "company": "The Economist"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "reergymerej", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-31T22:13:02Z", "contents": "Closing. Max depth constant fixes this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "reergymerej", "authorAssociation": "NONE", "createdAt": "2014-08-25T11:55:39Z", "contents": "Googled my way here after seeing the same thing testing ExtJS 4 components.  In jasmine.js, j$.MAX_PRETTY_PRINT_DEPTH = 40;, but mine is still crashing.  This is probably not a problem with the depth of objects, but the circular references that can crop up in Ext components.\nupdate:\nStringPrettyPrinter.prototype.emitObject = function(obj) {\n    // prevent infinite loops caused by Ext objects\n    if (obj instanceof Ext.Base) {\n      this.append('Ext Object');\n      return;\n    }\n    ...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T20:27:45Z", "contents": "@reergymerej what version of jasmine are you using? jasmine 2.0 should be detecting circular references as well as just super deep objects.\nIn addition, if you define a jasmineToString() function for the objects you're concerned with jasmine will invoke that method to print the object instead of trying to recurse it itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 375, "url": "https://github.com/jasmine/jasmine/issues/375", "title": "toEqual is failing tests that should pass", "contents": "Consider the following test:\ndescribe('toEqual', function () {\n  it('should coerce strings into a number when appropriate', function () {\n    expect('30').toEqual(30);\n    expect(30).toEqual('30');\n  });\n});\nIf we run:\nconsole.log('30' == 30);\nconsole.log(30 == '30');\nThey both return true. Since dynamic typing is considered one of the features of the Javascript language, I would expect the toEqual() function to respect this behavior. If the observed behavior is intentional, can someone explain the reasoning?", "createdAt": "2013-05-31T18:25:54Z", "updatedAt": "2013-05-31T22:06:20Z", "closedAt": "2013-05-31T18:34:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "snapfractalpop", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "snapfractalpop", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2013-05-31T18:34:01Z", "contents": "The observed behavior is intentional.\nDynamic typing and the implicit casting that you see with the == operator are often surprising to JS developers. There is a good discussion in JavaScript: The Good Parts about this oddity. It's a good read and can do a better job than I can explaining the issues.\nWe use the === operator in our equality code to avoid the surprise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "snapfractalpop", "authorAssociation": "NONE", "createdAt": "2013-05-31T18:55:05Z", "contents": "I have read that, actually. What threw me was that in the jasmine documentation it says that the toBe() function uses ===. I had assumed (erroneously) that this meant that the toEqual() function does not. For a solution, I can either change my implementation to be more well defined, or I can do the coercion within the test code:\ndescribe('toEqual', function () {\n  it('should force us to coerce strings into a number when necessary', function () {\n    expect('30').not.toEqual(30);\n    expect(30).not.toEqual('30');\n    expect('30' == 30).toBeTruthy();\n    expect(30 == '30').toBeTruthy();\n  });\n});\nThank you for the quick response.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-05-31T22:06:20Z", "contents": "For reference:\ntoBe always uses === and is meant for when you want to use that.\ntoEqual uses:\n\ncustom equality testers (provide your own)\na bunch of common sense tests for known types (borrowed from Underscore.js)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 376, "url": "https://github.com/jasmine/jasmine/issues/376", "title": "Spy calls - keep the timetoo", "contents": "I encountered a problem, I needed to test the specific order in which some callbacks are called (each of them had spies), the simplest way was to modify the jasmine library to store the time in ms when each call was made and compare the values.\nspyObj.calls.push({object: this, args: args});\n\nto\nspyObj.calls.push({object: this, args: args, time: new Date().getTime()});\nMaybe this will help others or can be added to the library (or an alternative).\nThanks and keep up the good job.", "createdAt": "2013-06-02T15:23:14Z", "updatedAt": "2013-10-02T21:28:20Z", "closedAt": "2013-10-02T21:28:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bgadrian", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bgadrian", "company": "https://twitter.com/B3aT"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T21:28:20Z", "contents": "This sounds very similar to this pull request\nClosing as a dupe.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 380, "url": "https://github.com/jasmine/jasmine/issues/380", "title": "Wrong message string at ObjectContaining matcher", "contents": "Line 1567: jasmine.Matchers.ObjectContaining.prototype.jasmineMatches method.\nmismatchValues variable contains wrong message \"actual\" and \"expected\" must be swapped.\nWrong message looks like ''c' was '1' in expected, but was '[object Object]' in actual.' but it should be ''c' was '1' in actual, but was '[object Object]' in expected.'", "createdAt": "2013-06-07T09:03:45Z", "updatedAt": "2013-07-28T06:39:23Z", "closedAt": "2013-07-28T06:39:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "albertandrejev", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "albertandrejev", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-27T17:35:11Z", "contents": "Is this superceded by #394 - which we merged in? If so can you please close?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 382, "url": "https://github.com/jasmine/jasmine/issues/382", "title": "JS some native objects equality acting strangely", "contents": "Is this intended behavior?\nexpect(new Date(1,2,3)).toEqual({}); // ok\nexpect(new Number(3)).toEqual({}); // ok\nexpect(new Boolean(true)).toEqual({}); // ok\nexpect(/regexp/).toEqual({}); // ok", "createdAt": "2013-06-07T14:27:06Z", "updatedAt": "2013-06-07T16:05:05Z", "closedAt": "2013-06-07T16:02:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "katsgeorgeek", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "katsgeorgeek", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-07T15:04:20Z", "contents": "In which version are you finding this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "katsgeorgeek", "authorAssociation": "NONE", "createdAt": "2013-06-07T15:48:18Z", "contents": "Jasmine 1.3.1 revision 1354556913", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-07T16:02:31Z", "contents": "This is now fixed on master. Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "katsgeorgeek", "authorAssociation": "NONE", "createdAt": "2013-06-07T16:05:05Z", "contents": "Thanks", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 385, "url": "https://github.com/jasmine/jasmine/issues/385", "title": "andReturn() value not clearing after .reset()", "contents": "In some of my classes, I use a cookieManger class that wraps basic interactions with document.cookies.  For testing, I have a simple spy created like so:\ncookieManager = jasmine.createSpyObj 'cookieManager', ['get','set']\n\nIn one of my tests, I set cookieManager.get.andReturn(\"foo\")\nThen in my afterEach, I call .reset() on both methods (get & set), but in the subsequent tests, the .andReturn() value is still returning \"foo\" instead of null or undefined\nThe reason I am trying to use .reset() instead of \"newing\" up a new one is because the mock object is injected by RequireJS into both the spec and the unit-under-test, and I need the modify the injected mock so I can control logic flow within my test object.", "createdAt": "2013-06-11T22:54:12Z", "updatedAt": "2013-06-11T23:20:45Z", "closedAt": "2013-06-11T23:12:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jbarker4682", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jbarker4682", "company": "Cornerstone Consulting LLC"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-11T23:01:16Z", "contents": "reset only resets the tracking, not the \"plan\" of the spy. Perhaps this should change for 2.0, but what you're seeing is expected behavior with 1.x.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jbarker4682", "authorAssociation": "NONE", "createdAt": "2013-06-11T23:04:21Z", "contents": "ok... thanks for the tip... I would suggest that either .reset() is changed to all settings back to their initial values, or some other method is added to do it instead (ex: a resetAll() method)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-11T23:12:00Z", "contents": "An argument can be made to that turning stubbing off and on during one test is a smell, but you can already change the strategy of a spy mid-test. So we'll probably add this as part of 2.0. I've added this Tracker story so you can track this feature.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jbarker4682", "authorAssociation": "NONE", "createdAt": "2013-06-11T23:20:45Z", "contents": "I'm assuming I can kludge this by setting .andReturn(undefined) in my afterEach, but is there any way to unset .andCallThrough() on a spy once its been applied?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 386, "url": "https://github.com/jasmine/jasmine/issues/386", "title": "new \"words\" to test events", "contents": "I was thinking about my tests and I suddenly realized that most of the time I was using the words \"when\", \"it\", \"does\".\nAnd I think that it could be great to reflect the when and does words as methods. They could help writing tests for events or settings.\nI suppose (really just a supposition) that it might be possible to write the does (inspired from spy, maybe?) and I might even try to code that, but some help would be very welcome. I don't even know if it is a good idea.\nAnyway, I really like jasmine. Thanks for that.", "createdAt": "2013-06-12T19:37:22Z", "updatedAt": "2013-10-07T05:42:04Z", "closedAt": "2013-10-03T22:49:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zeropaper", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "zeropaper", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-03T22:49:07Z", "contents": "That's an interesting idea, if you want your tests to read differently. We're not sure it's right for jasmine-core. If you wanted to do this in your own project you should be able to alias the functions in your spec helper.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-04T22:09:57Z", "contents": "@zeropaper - With 2.0, the idea is that a project could/should be able to alias the interface methods as needed in the boot.js file, which we see as per project.  Try it out and see if you like it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zeropaper", "authorAssociation": "NONE", "createdAt": "2013-10-07T05:42:04Z", "contents": "Thanks, I will try to give it a try in the next days.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 387, "url": "https://github.com/jasmine/jasmine/issues/387", "title": ".andReturn(...) strips properties starting with '$' from the object to be returned", "contents": "When I try to return an object that has a property whose name starts with a dollar sign, the property gets removed from my return object:\nspyOn(myObj, 'myFunction').andReturn({\n    $a: \"this will disappear\",\n    b: \"this will stay\"\n});\nvar result = myObj.myFunction();\nconsole.log(result);\n\n// --> {\"b\": \"this will stay\"}\n\nIs there any way to preserve the return object unchanged?", "createdAt": "2013-06-14T20:05:44Z", "updatedAt": "2013-06-14T20:23:55Z", "closedAt": "2013-06-14T20:23:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ecowden", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ecowden", "company": "@wwt"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-06-14T20:19:31Z", "contents": "What environment are you seeing this in? We just return that reference from a closure. So this behavior is a bit surprising.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ecowden", "authorAssociation": "NONE", "createdAt": "2013-06-14T20:23:55Z", "contents": "This is wrong, and entirely an artifact of some bizarre interactions in surrounding code.\nI sincerely apologize for taking your time.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 389, "url": "https://github.com/jasmine/jasmine/issues/389", "title": "test", "contents": "ste", "createdAt": "2013-06-20T10:37:35Z", "updatedAt": "2013-07-21T14:27:00Z", "closedAt": "2013-07-21T14:27:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gaecom", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gaecom", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 395, "url": "https://github.com/jasmine/jasmine/issues/395", "title": "Show 'pending' examples", "contents": "In my experience it is helpful be able to create pending examples as soon as I think of them, without actually have to think about how exactly I'm going to implement them.\nInspired by RSpec, I think it would be a good idea to mark examples as pending instead of passing when the it function has not been provided a callback. This way, a developer is not fooled by passing specs to think that she is testing behavior that hasn't actually been implemented.", "createdAt": "2013-06-26T08:24:53Z", "updatedAt": "2013-12-19T08:48:56Z", "closedAt": "2013-07-05T18:11:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "KaptajnKold", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "KaptajnKold", "company": "@bruun-rasmussen "}, {"login": "jdmarshall", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "jdmarshall", "authorAssociation": "NONE", "createdAt": "2013-07-05T18:07:57Z", "contents": "Seems like a good idea to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-05T18:11:41Z", "contents": "This feature has been implemented on master:\n\nxit specs are pending (and not executed)\nit specs without an implementation function are pending\nit specs can be made pending by calling pending with a string message\npending specs are marked as such in the Reporters\n\nThanks for the votes and thanks for using Jasmine\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 396, "url": "https://github.com/jasmine/jasmine/issues/396", "title": "Explain the current development process", "contents": "I am trying to update a couple of pull requests that don't merge cleanly with Master. I'm having some issues understanding how to update them and guessing the original authors had the same issue.\nIt appears that some of the generated files have been committed.  The contributor's guide doesn't illuminate this situation so I'm hoping that some light can be shed on this, and some indication of what the short- and medium-term plans are regarding code organization.\nSo far I've figured out that about half of lib is generated code. But several files, including boot.js, don't exist outside of lib.", "createdAt": "2013-07-01T06:32:42Z", "updatedAt": "2013-07-21T15:28:35Z", "closedAt": "2013-07-21T15:27:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdmarshall", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jdmarshall", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-21T15:28:35Z", "contents": "I've updated the Contributor file. If you nee more, please ask questions at the mailing list. Thanks for pointing this out.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 399, "url": "https://github.com/jasmine/jasmine/issues/399", "title": "Recent changes cause Jasmine to hang when using the 'raise exception' button", "contents": "Commit 34b8bf5 removes the following line:\n    env = new j$.Env({now: fakeNow}),\n\nCausing the 'env' call on line 214 to fail and the entire test run hang.", "createdAt": "2013-07-05T04:32:05Z", "updatedAt": "2013-07-11T04:00:26Z", "closedAt": "2013-07-11T04:00:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdmarshall", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jdmarshall", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-05T06:57:23Z", "contents": "Great catch, thanks! That line definitely needs to be there, just without passing in fakeNow.\nEven without checking the \"raise exceptions\" button, Jasmine should fail the test when an exception is thrown, so I'm wondering if this might indicate that something else is wrong as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdmarshall", "authorAssociation": "NONE", "createdAt": "2013-07-05T07:18:00Z", "contents": "I had the same thought, but figured I'd leave it to more knowledgeable\npeople to draw that conclusion.  It does seem like some test should fail on\nthat.\nOn Thu, Jul 4, 2013 at 11:57 PM, Sheel Choksi notifications@github.comwrote:\n\nGreat catch, thanks! That line definitely needs to be there, just without\npassing in fakeNow.\nEven without checking the \"raise exceptions\" button, Jasmine should fail\nthe test when an exception is thrown, so I'm wondering if this might\nindicate that something else is wrong as well.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/399#issuecomment-20503687\n.\n\n\n\nJason", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-06T00:45:09Z", "contents": "We've been working inside-out on lot of the 2.0 re-write stuff. We've been picking a feature/code area, getting down-and-dirty with a bunch of careful test re-writes and adding coverage. That's led to lots of careful refactoring to many more smaller, mostly simpler objects with proper unit tests with dependencies injected.\nIronically, it means that some integration tests just aren't there. Or haven't been written (or written well) just yet.\nSaid another way, we've pulled up a bunch of concepts into the Env object and expect to push more of them down into their own objects - but I expect we'll save a lot of that for a 2.1 release.\nSorry we missed this and thanks again for the find.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-08T05:08:12Z", "contents": "Interestingly, this did highlight a real failure: an exception during the synchronous part of an async spec would prevent the spec from running the functions that came after it (cleanup) and the onComplete handlers associated with it. More detail in #401.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdmarshall", "authorAssociation": "NONE", "createdAt": "2013-07-08T23:40:19Z", "contents": "Ah, good deal.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 402, "url": "https://github.com/jasmine/jasmine/issues/402", "title": "Spies should save the return value of method calls when using andCallThrough()", "contents": "This would be cool:\n# Foo! Bar!\nfoo =\n    bar: (string) -> foo.baz(string) + '-bar'\n    baz: (string) -> string.toUpperCase()\n\n# Spy!\nbazSpy = spyOn(foo, 'baz').andCallThrough()\n\n# Bar something!\nbarredHello = foo.bar('hello')\n\n# Expect!\nexpect(baredHello).toBe('HELLO-bar')\nexpect(bazSpy.returnValueForCall[0]).toBe('HELLO')\n\n\u2026the addition to the framework being the spy.returnValueForCall array.", "createdAt": "2013-07-10T18:50:25Z", "updatedAt": "2013-07-21T14:33:24Z", "closedAt": "2013-07-21T14:33:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "steveluscher", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "steveluscher", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "steveluscher", "authorAssociation": "NONE", "createdAt": "2013-07-10T18:50:56Z", "contents": "I'd be happy to do this, if you thought it was worth doing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-10T19:11:42Z", "contents": "Spies are a bit volatile at the moment. You can checkout out the spy_split branch to see where we're heading. But this is an interesting addition for our call tracker.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "steveluscher", "authorAssociation": "NONE", "createdAt": "2013-07-10T21:02:21Z", "contents": "Interesting. I will stay tuned then. Let me know if I can help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-21T14:33:19Z", "contents": "I've added this to the Icebox: https://www.pivotaltracker.com/story/show/53761105\nI think once we RC 2.0, spies will be stable enough for you to take a crack as this with a PR.\nClosing as feature request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 403, "url": "https://github.com/jasmine/jasmine/issues/403", "title": "Update documentation to remove reference to runs, waitsFor / add documentation for using done()", "contents": "I've spoken to @infews in the mailing list a couple of days ago about the need to update the docs to illustrate how to use done for async tests, as well as remove the docs on runs and waitsFor.\nI've just been using Jasmine for a week and in no way I'm an expert, although I'd very happy to submit new docs once I get to grasp the method's usage. Any help / instruction would be greatly appreciated.", "createdAt": "2013-07-17T18:16:19Z", "updatedAt": "2013-10-03T22:38:06Z", "closedAt": "2013-10-03T22:38:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "josemotanet", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "josemotanet", "company": "BOLD International, GoodGuide"}, {"login": "mvolkmann", "company": "Object Computing, Inc."}, {"login": "jboyens", "company": "Backend Engineer @shyftapp "}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "mvolkmann", "authorAssociation": "NONE", "createdAt": "2013-09-15T01:25:26Z", "contents": "Yes, this really needs to be done! I'm new to Jasmine and spent over an hour trying to understand runs and waitsFor. I understand them now. But then I ran across this issue and learned that I had wasted my time looking into those functions.\nOne thing the new documentation should address is whether a test will fail if done isn't called within a certain amount of time. Is there something in place to terminate tests that take too long and count them as failures?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jboyens", "authorAssociation": "MEMBER", "createdAt": "2013-09-15T04:23:28Z", "contents": "If you fail to call done(), the test WILL fail and it will use jasmine.DEFAULT_TIMEOUT_INTERVAL as the timeout length. It should also be changeable on a per-spec basis in case you have just a few slow tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mvolkmann", "authorAssociation": "NONE", "createdAt": "2013-09-15T12:40:40Z", "contents": "Thanks jboyens! Can anyone explain how the timeout can be adjusted for a specific spec? I looked through the source and didn't see it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-15T17:05:10Z", "contents": "Sorry @mvolkmann, that none of this is in the documentation yet. In fact the DEFAULT_TIMEOUT_INTERVAL functionality was just put into place recently. You should be able to do something like the following:\ndescribe(\"slow async specs\", function() {\n   var originalJasmineTimeout;\n   beforeEach(function() {\n      originalJasmineTimeout = jasmine.DEAULT_TIMEOUT_INTERVAL;\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = 30;\n   });\n\n   it(\"runs slowly\", function(done) {\n      someAsyncFnThatIsSlowButTakesACallback(done);\n   });\n\n   afterEach(function() {\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = originalJasmineTimeout;\n   });\n});\nIt's a little clunky but similar to jasmine.MAX_PRETTY_PRINT_DEPTH, the hope is that in general, users just need to set this default once, and more rarely on a per spec basis. If this isn't the case, we can talk about having it restore its default in between every spec run.\nYou can also do some syntactic sugar in your boot.js file by adding some code like the following:\njasmineInterface.it.slow = function(desc, func) {\n  var wrappedFn = function(done) { // if you're using 'slow', then you're dealing with an async spec, otherwise there would be no need to call '.slow'\n      var originalJasmineTimeout = jasmine.DEAULT_TIMEOUT_INTERVAL;\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = 30;\n      func.call(this, done);\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = originalJasmineTimeout;\n  };\n\n  return jasemineInterface.it(desc, wrappedFn);\n}\nand then in your spec files you could do it.slow('spec about slow async function, waits 30 seconds before failing', function(done) {...});\nHopefully that was helpful. We plan on writing more details about how to use the boot.js file to customize your Jasmine but a brief preview seemed in order.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-15T17:32:05Z", "contents": "I'm now remembering that DEFAULT_TIMEOUT_INTERVAL is in millis. So in the previous example, the 30 should have been 30000 to represent 30 seconds.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-03T22:38:06Z", "contents": "This is available in the docs for 2.0, currently found here", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 405, "url": "https://github.com/jasmine/jasmine/issues/405", "title": "RM crash when running jasmine rake task when binding_of_caller is installed", "contents": "I have binding_of_caller gem installed on my development bundle, and when running rake, I get a segmentation fault.\nPrevious versions of jasmine would get this error on rake jasmine:ci but no longer in 1.3.1.\nHas anyone seen this?\n== Background\nOSX 10.8\nRuby 1.9.3 p385 (ruby 1.9.3p385 (2013-02-06 revision 39114) [x86_64-darwin12.2.1])\n== Stack Trace\n/Users/dlikhten/.rvm/rubies/ruby-1.9.3-p385/bin/ruby -S rspec /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/jasmine-1.3.2/lib/jasmine/run_specs.rb --colour --format progress -r /Users/dlikhten/repos/doorsteps/config/environment\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/better_errors-0.3.2/lib/better_errors/core_ext/exception.rb:9: [BUG] Segmentation fault\nruby 1.9.3p385 (2013-02-06 revision 39114) [x86_64-darwin12.2.1]\n\n-- Control frame information -----------------------------------------------\nc:0038 p:---- s:0122 b:0122 l:000121 d:000121 CFUNC  :callers\nc:0037 p:0064 s:0119 b:0119 l:0011d0 d:000210 LAMBDA /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/better_errors-0.3.2/lib/better_errors/core_ext/exception.rb:9\nc:0036 p:---- s:0116 b:0116 l:000115 d:000115 FINISH\nc:0035 p:---- s:0114 b:0114 l:000113 d:000113 CFUNC  :new\nc:0034 p:---- s:0112 b:0112 l:000111 d:000111 CFUNC  :require\nc:0033 p:0010 s:0108 b:0108 l:0000e8 d:001f08 BLOCK  /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:251\nc:0032 p:0071 s:0106 b:0106 l:0002c8 d:0002c8 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:236\nc:0031 p:0019 s:0101 b:0101 l:0000e8 d:0000e8 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:251\nc:0030 p:0032 s:0096 b:0096 l:000588 d:000588 TOP    /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/ruby-prof-0.12.2/lib/ruby-prof.rb:6\nc:0029 p:---- s:0094 b:0094 l:000093 d:000093 FINISH\nc:0028 p:---- s:0092 b:0092 l:000091 d:000091 CFUNC  :require\nc:0027 p:0026 s:0088 b:0088 l:0006d0 d:0007d0 BLOCK  /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:72\nc:0026 p:---- s:0085 b:0085 l:000084 d:000084 FINISH\nc:0025 p:---- s:0083 b:0083 l:000082 d:000082 CFUNC  :each\nc:0024 p:0091 s:0080 b:0080 l:0006d0 d:000760 BLOCK  /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:70\nc:0023 p:---- s:0073 b:0073 l:000072 d:000072 FINISH\nc:0022 p:---- s:0071 b:0071 l:000070 d:000070 CFUNC  :each\nc:0021 p:0046 s:0068 b:0068 l:0006d0 d:0006d0 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:59\nc:0020 p:0021 s:0064 b:0064 l:000ae0 d:000ae0 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler.rb:132\nc:0019 p:0137 s:0060 b:0060 l:000c28 d:000c28 TOP    /Users/dlikhten/repos/doorsteps/config/application.rb:13\nc:0018 p:---- s:0058 b:0058 l:000057 d:000057 FINISH\nc:0017 p:---- s:0056 b:0056 l:000055 d:000055 CFUNC  :require\nc:0016 p:0026 s:0052 b:0052 l:000d68 d:000d68 TOP    /Users/dlikhten/repos/doorsteps/config/environment.rb:2\nc:0015 p:---- s:0050 b:0050 l:000049 d:000049 FINISH\nc:0014 p:---- s:0048 b:0048 l:000047 d:000047 CFUNC  :require\nc:0013 p:0012 s:0044 b:0044 l:000eb0 d:000f20 BLOCK  /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:460\nc:0012 p:---- s:0041 b:0041 l:000040 d:000040 FINISH\nc:0011 p:---- s:0039 b:0039 l:000038 d:000038 CFUNC  :map\nc:0010 p:0012 s:0036 b:0036 l:000eb0 d:000eb0 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:460\nc:0009 p:0071 s:0032 b:0032 l:001158 d:0011c0 BLOCK  /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration_options.rb:27\nc:0008 p:---- s:0029 b:0029 l:000028 d:000028 FINISH\nc:0007 p:---- s:0027 b:0027 l:000026 d:000026 CFUNC  :each\nc:0006 p:0075 s:0024 b:0024 l:001158 d:001158 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration_options.rb:26\nc:0005 p:0062 s:0019 b:0019 l:0013f8 d:0013f8 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/command_line.rb:21\nc:0004 p:0137 s:0014 b:0014 l:001558 d:001558 METHOD /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/runner.rb:80\nc:0003 p:0054 s:0007 b:0007 l:001568 d:000006 BLOCK  /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/runner.rb:17\nc:0002 p:---- s:0004 b:0004 l:000003 d:000003 FINISH\nc:0001 p:0000 s:0002 b:0002 l:0005a8 d:0005a8 TOP   \n\n-- Ruby level backtrace information ----------------------------------------\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/runner.rb:17:in `block in autorun'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/runner.rb:80:in `run'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/command_line.rb:21:in `run'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration_options.rb:26:in `configure'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration_options.rb:26:in `each'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration_options.rb:27:in `block in configure'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:460:in `requires='\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:460:in `map'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:460:in `block in requires='\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:460:in `require'\n/Users/dlikhten/repos/doorsteps/config/environment.rb:2:in `<top (required)>'\n/Users/dlikhten/repos/doorsteps/config/environment.rb:2:in `require'\n/Users/dlikhten/repos/doorsteps/config/application.rb:13:in `<top (required)>'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler.rb:132:in `require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:59:in `require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:59:in `each'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:70:in `block in require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:70:in `each'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:72:in `block (2 levels) in require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@global/gems/bundler-1.3.5/lib/bundler/runtime.rb:72:in `require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/ruby-prof-0.12.2/lib/ruby-prof.rb:6:in `<top (required)>'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:251:in `require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:236:in `load_dependency'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:251:in `block in require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:251:in `require'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:251:in `new'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/better_errors-0.3.2/lib/better_errors/core_ext/exception.rb:9:in `block in <class:Exception>'\n/Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/gems/better_errors-0.3.2/lib/better_errors/core_ext/exception.rb:9:in `callers'\n\n-- C level backtrace information -------------------------------------------\n\n   See Crash Report log file under ~/Library/Logs/CrashReporter or\n   /Library/Logs/CrashReporter, for the more detail of.\n\n-- Other runtime information -----------------------------------------------\n\n* Loaded script: /Users/dlikhten/.rvm/gems/ruby-1.9.3-p385@doorsteps/bin/rspec\n\n* Loaded features:\n\nTruncated due to github limitation", "createdAt": "2013-07-22T21:54:29Z", "updatedAt": "2013-10-02T19:19:53Z", "closedAt": "2013-10-02T19:19:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dlikhten", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dlikhten", "company": "@CapsuleHealth "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T19:19:53Z", "contents": "It sounds like this probably has to do more with binding_of_caller than jasmine. Although if it was a jasmine problem it would be in jasmine-gem. The backtrace looks like it might have to do with rspec which we no longer use to run your jasmine specs.\nClosing this, but let us know if this comes up again.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 406, "url": "https://github.com/jasmine/jasmine/issues/406", "title": "toContain should work with DOMTokenList", "contents": "Many of our specs verify expectations of CSS class names being present or absent on DOM elements. It would be nice to be able to just say expect(element.classList).toContain('myExpectedClassName'), but that doesn't work with the current toContains implementation that checks for Array types.\nOur workaround is expect(element.className.split(' ')).toContain(...), which is OK, but somewhat clumsier than it ought to be.", "createdAt": "2013-07-24T22:44:28Z", "updatedAt": "2015-03-07T00:44:05Z", "closedAt": "2013-10-02T21:08:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vin", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-25T05:11:42Z", "contents": "Hmm this is an interesting idea, considering DOMTokenList has a contains method on it. The toContains/objectContaining methods are written to be pretty DOM independent though, so I'm not sure if it's desirable to have this behavior in jasmine-core.\nWhile further discussion happens, I want to mention that adding a custom 'toHaveClass' matcher might be a good option for additional readability. Or if you happen to be using jQuery, jasmine-jquery might also be worthwhile (has 'toHaveClass' and other similar, useful matchers).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T21:08:42Z", "contents": "We've made a story for this in tracker. You can follow it here: https://www.pivotaltracker.com/story/show/58117428", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-07T00:44:05Z", "contents": "This should work now as of da6813e", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 409, "url": "https://github.com/jasmine/jasmine/issues/409", "title": "toThrow fails in FF 23 (modifying native Exception)", "contents": "expect(func).toThrow() fails in Firefox 23 (func throws as expected) with this error:\nNS_ERROR_XPC_CANT_MODIFY_PROP_ON_WN: Cannot modify properties of a WrappedNative\nThe offending line is https://github.com/pivotal/jasmine/blob/master/src/core/PrettyPrinter.js#L33.\nMoreover, the call stack reveals that https://github.com/pivotal/jasmine/blob/master/src/core/matchers/toThrow.js#L28 is being executed - the message itself is puzzling, as the matcher actually expects the function to throw.", "createdAt": "2013-07-30T09:52:43Z", "updatedAt": "2013-08-03T19:04:26Z", "closedAt": "2013-08-03T19:01:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ondras", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ondras", "company": "Seznam.cz, a.s."}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-31T05:05:15Z", "contents": "I tried the following spec on Firefox 23.0b10, which didn't reproduce the error:\nit(\"blows up in firefox\", function() {\n  expect(function() { throw new Error(\"ahh!\"); }).toThrow();\n});\nIs there a different example which produces the error?\nThe message does look a bit misleading on first inspection. Since Jasmine only shows this message when an assertion fails, the message is disregarded when the function throws and the spec reads expect(func).toThrow() (although as you've pointed out, still evaluated). The message on line 28 is for when the function throws, but the spec reads expect(func).not.toThrow(). Similarly, if a matcher returns false, then the message is ignored if the spec has a not in it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ondras", "authorAssociation": "NONE", "createdAt": "2013-07-31T06:31:15Z", "contents": "Thanks a lot for explanation and clarification. Your example does not exhibit the problem; to see it, replace\nthrow new Error(\"ahh!\");\nwith\nnew CustomEvent();\n(the CustomEvent needs an argument; if not specified, it throws an exception.)\nIf the line 28 corresponds to the \"not\" matcher, how comes it gets evaluated in my scenario? Also, the code itself is not explaining very well why \"arguments.length==1\" implies the \"not\" case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-31T15:01:21Z", "contents": "Okay great, I'll try something like that instead of throwing a new Error.\nThe matchers themselves are not aware if there is a not in the assertion, which is making the code a little confusing. They currently only receive \"expected\" and \"actual\". Thus, the message inside the compare function (line 28 in this case) is always evaluated because the matcher doesn't know if it's needed. It's just preemptively assigning a message for the 'not' case. You can see the same thing on Line 35 of that same file in which the correct object was thrown (and the matcher passes), but the message is for the 'not' case yet again.\nThe argument length checking is unrelated to the \"not\" case. An assertion like expect(func).toThrow('a') results in the compare function being called with func for actual and 'a' for expected. The arguments.length==1 is checking for assertions like expect(func).toThrow() where there is no expected.\nDoes that help clear things up?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ondras", "authorAssociation": "NONE", "createdAt": "2013-07-31T18:45:57Z", "contents": "I see! I admit that I had to look through the code multiple times to actually grasp the idea behind the puzzling logic. So the negation basically just inverts the value of result.pass, while the matcher itself is in control of the (potentially used) error message. Strange, but comprehensible.\nThis issue boils down to \"marking\" a caught exception (in the pretty printer), which Firefox is sometimes pointy about. Is it really necessary to add that \"Jasmine_been_here_before\" property in pretty printer's code? I am not sure about its purpose, but infinite recursion (for instance) can be also prevented by caching a list of already visited objects...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-07-31T19:15:32Z", "contents": "We plan to refactor the pretty printer for 2.1 and this hack will likely go away. But we may need a shorter term work around if FF hates this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-03T19:04:26Z", "contents": "Added in the shorter term fix to close this issue up. It turns out this was broken in Firefox 22 as well. I didn't want to search through all Firefox versions to figure out which ones this applies to, so instead the spec you suggested is on for all Firefox versions.\nThanks for the find @ondras!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 411, "url": "https://github.com/jasmine/jasmine/issues/411", "title": "Dynamically created tests based on Async result ..", "contents": "http://jsfiddle.net/3wfkr/2/\nI'm trying to get an async setup to generate some nested specs , the specs run and work, but an error is also generated  ...\nTypeError: 'undefined' is not an object (evaluating 'this.views.suites')\n(the reason I'm actually trying to do it is ..\nI want to call an API retrieve a list of resources and then generate tests for each one at runtime ..)", "createdAt": "2013-08-05T14:06:53Z", "updatedAt": "2013-08-06T09:18:25Z", "closedAt": "2013-08-05T16:13:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vurt007", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vurt007", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "vurt007", "authorAssociation": "NONE", "createdAt": "2013-08-05T14:11:31Z", "contents": "console out :  ( I'm using  https://github.com/vurt007/ghost-bridge around the Chutzpah runner to get this running in ncrunch )\nstarted\ntestSuiteStarted name='test-gen-test.js'\ntestStarted name='Jasmine spec gen Tests something async:completes the first stage'\ntestStdOut name='Jasmine spec gen Tests something async:completes the first stage' out='Passed'\ntestFinished name='Jasmine spec gen Tests something async:completes the first stage' duration='124'\ntestStarted name='Jasmine spec gen Tests A complex call to a dynamic API:It got some Guidance'\ntestStdOut name='Jasmine spec gen Tests A complex call to a dynamic API:It got some Guidance' out='Passed'\ntestFinished name='Jasmine spec gen Tests A complex call to a dynamic API:It got some Guidance' duration='0'\ntestStarted name='Jasmine spec gen Tests A complex call to a dynamic API:with nested async tests'\ntestStdOut name='Jasmine spec gen Tests A complex call to a dynamic API:with nested async tests' out='Passed'\ntestFinished name='Jasmine spec gen Tests A complex call to a dynamic API:with nested async tests' duration='694'\ntestStarted name='dynamically adding nested contexts based on an async result:this one should pass'\ntestStdOut name='dynamically adding nested contexts based on an async result:this one should pass' out='Passed'\ntestFinished name='dynamically adding nested contexts based on an async result:this one should pass' duration='0'\nC:\\Users\\zaphod\\AppData\\Local\\NCrunch\\7200\\12\\src\\AIMS.Specs\\specs\\test-gen-test.js\nChutzpah.Exceptions.ChutzpahTimeoutException: Timeout occured when running C:\\Users\\zaphod\\AppData\\Local\\NCrunch\\7200\\12\\src\\AIMS.Specs\\specs\\test-gen-test.js\nat Chutzpah.TestRunner.HandleTestProcessExitCode(Int32 exitCode, String inputTestFile)\nat Chutzpah.TestRunner.InvokeTestRunner(String headlessBrowserPath, TestOptions options, TestContext testContext, TestRunnerMode testRunnerMode, ITestMethodRunnerCallback callback)\nat Chutzpah.TestRunner.<>c__DisplayClass2.b__1(PathInfo testFile)\ntestSuiteFinished name='test-gen-test.js'\nChild test failed", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vurt007", "authorAssociation": "NONE", "createdAt": "2013-08-05T14:33:59Z", "contents": "bit more looking into it and I think the error is because it's always timing out (eg the jasmine spec is just never completing execution .. ) .. running the spec here  http://tryjasmine.com/? and it never completes ..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-05T16:13:55Z", "contents": "First, you're running with a very old version of Jasmine. Version 1.3 is the current released version and there is a release candidate of 2.0 available. The async syntax has changed for 2.0 - runs() and waitsFor() are gone.\nSecond, runs() and waitsFor() calls must be inside it() calls. You've got all of those its inside a runs - that will never work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vurt007", "authorAssociation": "NONE", "createdAt": "2013-08-06T09:18:25Z", "contents": "jasmine.version_= {\n\"major\": 1,\n\"minor\": 3,\n\"build\": 1,\n\"revision\": 1354556913\n};\nnot really an old version if it's the current released version is it ?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 412, "url": "https://github.com/jasmine/jasmine/issues/412", "title": "Dynamically created tests based on Async result ..", "contents": "http://jsfiddle.net/3wfkr/3/\nusing jasmine 2.0.0 rc2\nI'm trying to get an async setup to generate some nested specs , the specs run and work, but an error is also generated ...\nTime's out .. no response ..\nConsole output shows the first nested test is actually executing ...\ntestSuiteStarted name='test-gen-test.js'\ntestStarted name='Jasmine spec gen Tests A complex call to a dynamic API:It got some Guidance'\ntestStdOut name='Jasmine spec gen Tests A complex call to a dynamic API:It got some Guidance' out='Passed'\ntestFinished name='Jasmine spec gen Tests A complex call to a dynamic API:It got some Guidance' duration='74'\ntestStarted name='Jasmine spec gen Tests A complex call to a dynamic API:with nested async tests'\ntestStdOut name='Jasmine spec gen Tests A complex call to a dynamic API:with nested async tests' out='Passed'\ntestFinished name='Jasmine spec gen Tests A complex call to a dynamic API:with nested async tests' duration='661'\ntestStarted name='Jasmine spec gen Tests something async:completes the first stage'\ntestStdOut name='Jasmine spec gen Tests something async:completes the first stage' out='Passed'\ntestFinished name='Jasmine spec gen Tests something async:completes the first stage' duration='0'\ntestStarted name='dynamically adding nested contexts based on an async result:this one should pass'\ntestStdOut name='dynamically adding nested contexts based on an async result:this one should pass' out='Passed'\ntestFinished name='dynamically adding nested contexts based on an async result:this one should pass' duration='0'\nAppData\\Local\\NCrunch\\7200\\10\\src\\AIMS.Specs\\specs\\test-gen-test.js\nChutzpah.Exceptions.ChutzpahTimeoutException: Timeout occured when running AppData\\Local\\NCrunch\\7200\\10\\src\\AIMS.Specs\\specs\\test-gen-test.js\nat Chutzpah.TestRunner.HandleTestProcessExitCode(Int32 exitCode, String inputTestFile)\nat Chutzpah.TestRunner.InvokeTestRunner(String headlessBrowserPath, TestOptions options, TestContext testContext, TestRunnerMode testRunnerMode, ITestMethodRunnerCallback callback)\nat Chutzpah.TestRunner.<>c__DisplayClass2.b__1(PathInfo testFile)\ntestSuiteFinished name='test-gen-test.js'\nChild test failed", "createdAt": "2013-08-06T10:41:52Z", "updatedAt": "2014-03-21T01:04:52Z", "closedAt": "2013-08-06T19:07:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vurt007", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vurt007", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-06T19:07:48Z", "contents": "Aha. I see what you're trying to do.\nJasmine doesn't support adding describe and it calls dynamically at runtime like this. So that will always fail.\nAnd as I discuss in the other issue, the runs/waits syntax is not supported in Jasmine 2.x.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 414, "url": "https://github.com/jasmine/jasmine/issues/414", "title": "Bail on first failure", "contents": "Put together an extension to add bail after first failure behavior after someone else had the same request, and I didn't hear of existing work from the community.\nI'd love to see this behavior (jasmine.Env.prototype.bailFast()) added to jasmine core before I suggest a flag for jasmine-node.\nI'm happy to put together a PR if folks think this would be useful and agree it belongs in jasmine core.", "createdAt": "2013-08-15T23:24:14Z", "updatedAt": "2018-02-09T04:37:01Z", "closedAt": "2018-02-07T18:04:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hurrymaplelad", "authorAssociation": "NONE", "participants_count": 54, "participants_data": [{"login": "hurrymaplelad", "company": null}, {"login": "blueshirts", "company": null}, {"login": "gurdiga", "company": null}, {"login": "elgalu", "company": "Zalando"}, {"login": "geshan", "company": "THE ICONIC @theiconic "}, {"login": "dgem", "company": "Kanzi Limited"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "domio", "company": null}, {"login": "avukonke", "company": "The Internet"}, {"login": "ymkjp", "company": "@atlassian"}, {"login": "erkangur", "company": null}, {"login": "dwelle", "company": null}, {"login": "kriscs", "company": null}, {"login": "dnoliver", "company": "Intel Corporation"}, {"login": "mtyeh411", "company": null}, {"login": "StephanBijzitter", "company": "Skelware"}, {"login": "mikeverbeck", "company": null}, {"login": "andreibondarev", "company": "Source Labs LLC"}, {"login": "bernabas", "company": "@fastly "}, {"login": "americos", "company": "Capital One"}, {"login": "mgwidmann", "company": null}, {"login": "kimx", "company": null}, {"login": "pavelKozlov", "company": "Frontmen"}, {"login": "pmowrer", "company": null}, {"login": "kestelle", "company": null}, {"login": "NelsonScott", "company": null}, {"login": "amanzyuk", "company": null}, {"login": "kcampion", "company": null}, {"login": "killercentury", "company": "@suncorp"}, {"login": "drewprice", "company": "@flatiron-labs "}, {"login": "gabrielhpugliese", "company": null}, {"login": "Byron", "company": "ThoughtWorks"}, {"login": "SteffiPeTaffy", "company": null}, {"login": "runk", "company": null}, {"login": "zxxc", "company": null}, {"login": "brandenbyers", "company": "Genesys and @c-keys "}, {"login": "baaae", "company": null}, {"login": "howdyjessie", "company": "@honeyscience "}, {"login": "Codier", "company": "Rubrik Inc."}, {"login": "JanPietrzyk", "company": "shopware AG"}, {"login": "velo", "company": null}, {"login": "exbuddha", "company": null}, {"login": "basvdijk", "company": "USTO"}, {"login": "F1LT3R", "company": "Houghton Mifflin Harcourt"}, {"login": "aCarpenter", "company": "Oscar"}, {"login": "marktyers", "company": "Coventry University"}, {"login": "rcbop", "company": "Grid Dynamics"}, {"login": "voltrevo", "company": null}, {"login": "Izhaki", "company": null}, {"login": "skyshore2001", "company": null}, {"login": "zhong-edward", "company": null}, {"login": "al-the-x", "company": "@groveco"}, {"login": "bennyn", "company": "@wireapp"}, {"login": "dfederm", "company": "@Microsoft "}], "comments_count": 68, "comments_data": [{"authorLogin": "hurrymaplelad", "authorAssociation": "NONE", "createdAt": "2013-08-20T02:10:56Z", "contents": "Folks are looking for this in jasmine-headless-webkit too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "blueshirts", "authorAssociation": "NONE", "createdAt": "2013-10-23T17:54:32Z", "contents": "By bail do you mean after the first assertion failure and then continue with the next test?  If so this would be great.  Actually kind of expect that to be the default though most node testing frameworks don't seem to work that way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hurrymaplelad", "authorAssociation": "NONE", "createdAt": "2013-10-23T18:19:35Z", "contents": "I mean bail like mocha bails, skipping the rest of the tests in the suite after the first test failure.  This is most useful on a continuous integration / deployment server where we can free up the pipeline as soon as we know a build will be rejected.\nCurrently the first failing test finishes, even after the the first failed assertion, but it doesn't need to.  Sounds like a cool follow on optimization.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gurdiga", "authorAssociation": "NONE", "createdAt": "2014-04-30T09:58:14Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elgalu", "authorAssociation": "NONE", "createdAt": "2014-06-11T04:56:31Z", "contents": "Yeah! a.k.a --fail-fast\nThis feature will be appreciated in protractor too\n+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geshan", "authorAssociation": "NONE", "createdAt": "2014-09-07T09:54:58Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dgem", "authorAssociation": "NONE", "createdAt": "2014-09-24T09:50:20Z", "contents": "+1 and quite surprised that the test case doesn't fail on the first failed expect, didn't expect that!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elgalu", "authorAssociation": "NONE", "createdAt": "2014-09-24T17:19:14Z", "contents": "Same feeling than @dgem, doesn't follow the principle of least surprise", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T19:40:08Z", "contents": "This issue is actually to stop the entire suite after the first spec fails. I think what @dgem is talking about is more like #577. These two cases are similar but not actually related, it would be totally possible to use one without the other, or both in tandem.\nAs far as not surprising the user, jasmine tries to provide you as much information as it can about what might be going wrong, so it continues to run your spec and just collects expectation failures.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "blueshirts", "authorAssociation": "NONE", "createdAt": "2014-09-24T20:07:46Z", "contents": "Sure, though providing this information is both a pro and a con.  Having the test continue after a failed assertion ends up making the developer place a large amount of guard conditions in their test cases in order to keep them from crashing.\nFor instance, if an object isn't available and an assertion fails why would I want to test the properties of an undefined object.\nIn my opinion continuing after failed assertions makes writing test cases tedious and the test cases themselves brittle.  That said, it's just my opinion.  This issue is over a year old and I've already moved on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dgem", "authorAssociation": "NONE", "createdAt": "2014-09-26T09:27:15Z", "contents": "As @blueshirts said : For instance, if an object isn't available and an assertion fails why would I want to test the properties of an undefined object.\nThis was exactly what I was doing, checking that the result of an async call was set before testing the callback data.\nWhether the whole test run fails (aka Bail-Fast) or just that test fails is debatable and perhaps could be set as a runtime property (eg. in support/config.js in the case of node) and let the individual choose & you could close two issues ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T22:44:46Z", "contents": "I think terminating the suite once a single spec has failed is something that would be good for jasmine to support. I'd be happy to review a pull request for that if anyone has time.\nDiscussion on stopping a single spec once an expectation has failed should move over to #577 as that is a different issue than what is being discussed here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T22:46:48Z", "contents": "Tracker story here: https://www.pivotaltracker.com/story/show/85966014", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "domio", "authorAssociation": "NONE", "createdAt": "2015-02-10T14:11:37Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "avukonke", "authorAssociation": "NONE", "createdAt": "2015-03-16T13:21:05Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ymkjp", "authorAssociation": "NONE", "createdAt": "2015-03-20T04:21:56Z", "contents": "+1 for --fail-fast option", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erkangur", "authorAssociation": "NONE", "createdAt": "2015-03-30T08:25:31Z", "contents": "+1, --fail-fast", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwelle", "authorAssociation": "NONE", "createdAt": "2015-04-08T12:40:34Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kriscs", "authorAssociation": "NONE", "createdAt": "2015-05-21T11:46:30Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dnoliver", "authorAssociation": "NONE", "createdAt": "2015-06-04T20:53:27Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mtyeh411", "authorAssociation": "NONE", "createdAt": "2015-06-13T13:27:05Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "StephanBijzitter", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-02T17:05:14Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikeverbeck", "authorAssociation": "NONE", "createdAt": "2015-07-02T19:15:04Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "andreibondarev", "authorAssociation": "NONE", "createdAt": "2015-07-02T19:15:06Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bernabas", "authorAssociation": "NONE", "createdAt": "2015-07-02T19:15:45Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "americos", "authorAssociation": "NONE", "createdAt": "2015-07-02T19:42:24Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgwidmann", "authorAssociation": "NONE", "createdAt": "2015-07-02T19:43:19Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kimx", "authorAssociation": "NONE", "createdAt": "2015-07-07T03:19:12Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pavelKozlov", "authorAssociation": "NONE", "createdAt": "2015-07-07T10:17:45Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pmowrer", "authorAssociation": "NONE", "createdAt": "2015-07-11T17:56:34Z", "contents": "For the time being, we created this workaround to alleviate the pain: https://github.com/Updater/jasmine-fail-fast", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "StephanBijzitter", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-12T21:14:56Z", "contents": "@pmowrer Would this work with https://github.com/gruntjs/grunt-contrib-jasmine ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pmowrer", "authorAssociation": "NONE", "createdAt": "2015-07-13T14:58:10Z", "contents": "@StephanBijzitter Sure, it shouldn't matter what Jasmine wrapper you use. I added some usage examples to the README. Hopefully that helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kestelle", "authorAssociation": "NONE", "createdAt": "2015-07-16T12:43:51Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NelsonScott", "authorAssociation": "NONE", "createdAt": "2015-07-31T17:05:33Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amanzyuk", "authorAssociation": "NONE", "createdAt": "2015-08-07T08:21:25Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kcampion", "authorAssociation": "NONE", "createdAt": "2015-08-07T14:51:02Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "killercentury", "authorAssociation": "NONE", "createdAt": "2015-08-14T01:03:08Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewprice", "authorAssociation": "NONE", "createdAt": "2015-09-08T18:29:28Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gabrielhpugliese", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-11T16:16:27Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Byron", "authorAssociation": "NONE", "createdAt": "2015-09-15T14:41:49Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SteffiPeTaffy", "authorAssociation": "NONE", "createdAt": "2015-09-15T14:47:30Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "runk", "authorAssociation": "NONE", "createdAt": "2015-09-17T01:13:45Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zxxc", "authorAssociation": "NONE", "createdAt": "2015-09-18T11:35:36Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brandenbyers", "authorAssociation": "NONE", "createdAt": "2015-09-30T17:25:44Z", "contents": "Thanks @pmowrer for the workaround solution. Works great with Protractor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "baaae", "authorAssociation": "NONE", "createdAt": "2015-10-12T13:07:52Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "howdyjessie", "authorAssociation": "NONE", "createdAt": "2015-10-26T17:52:05Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Codier", "authorAssociation": "NONE", "createdAt": "2015-12-08T01:05:49Z", "contents": "+1000,000,000", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JanPietrzyk", "authorAssociation": "NONE", "createdAt": "2016-01-06T09:34:59Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "velo", "authorAssociation": "NONE", "createdAt": "2016-01-08T03:59:02Z", "contents": "++", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Codier", "authorAssociation": "NONE", "createdAt": "2016-01-09T06:58:29Z", "contents": "+1", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "exbuddha", "authorAssociation": "NONE", "createdAt": "2016-01-13T21:07:17Z", "contents": "+1", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "basvdijk", "authorAssociation": "NONE", "createdAt": "2016-01-14T15:59:04Z", "contents": "+1", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "F1LT3R", "authorAssociation": "NONE", "createdAt": "2016-01-15T16:00:00Z", "contents": "+1", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "exbuddha", "authorAssociation": "NONE", "createdAt": "2016-01-17T12:40:14Z", "contents": "I'm kind of new to this whole Jasmine/Protractor thing, which by the way, I think is one of the most elegant test frameworks I've seen, but maybe another way to think about this feature is to extend the expect() function grammar to allow writing chains like this:\nexpect(condition).verb(something).or.stop();\nexpect(element(by.id('my-element')).isPresent()).toBe(true).or.stop();", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "aCarpenter", "authorAssociation": "NONE", "createdAt": "2016-01-18T04:49:56Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pmowrer", "authorAssociation": "NONE", "createdAt": "2016-01-18T05:34:15Z", "contents": "So much +1 spam invading my emails. Try https://github.com/Updater/jasmine-fail-fast. Self promotion, but honestly solves the problem, at least for the Protractor use case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "exbuddha", "authorAssociation": "NONE", "createdAt": "2016-01-18T17:45:52Z", "contents": "Sorry!\n-1\nAnd, thank you for the link.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "F1LT3R", "authorAssociation": "NONE", "createdAt": "2016-01-18T23:23:06Z", "contents": "Found myself doing the same thing @pmowrer :)\nhttps://github.com/F1LT3R/protractor-jasmine2-fail-whale\nDesigned for Jasmine2, but I suspect it may work with earlier versions too.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "HOORAY"]}, {"authorLogin": "marktyers", "authorAssociation": "NONE", "createdAt": "2016-02-24T12:02:02Z", "contents": "Yes please", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rcbop", "authorAssociation": "NONE", "createdAt": "2016-05-17T15:20:52Z", "contents": "+1", "reactions_count": 6, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP", "THUMBS_DOWN"]}, {"authorLogin": "voltrevo", "authorAssociation": "NONE", "createdAt": "2016-09-12T04:09:24Z", "contents": "+1", "reactions_count": 5, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Izhaki", "authorAssociation": "NONE", "createdAt": "2016-09-14T21:52:53Z", "contents": "+1", "reactions_count": 4, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "skyshore2001", "authorAssociation": "NONE", "createdAt": "2017-03-02T02:30:52Z", "contents": "I use jasmine 2.5.2 to test my back-end web APIs via ajax sync call in each \"it\" block.\nI'm looking for such logic:\n\n\nDeveloper is able to mark some case as \"critical case\". And the first case in a suite can be auto marked as \"critical case\". If such case fails, the other cases (\"it\" blocks) are skipped to execute and marked as \"pending\".\n\n\nIf the first suite fails, stop the tests.\n\n\nFirst I write code in such callbacks as reporter.suiteStarted/specStarted to implement such logic, but unfortunately I find it does not really skip a case if fail()/pending() is called in beforeEach function, the ajax call in \"it\" block still execute. (see #577)\nNow I'm considering a flexible mechanism that the core lib expose some more interfaces that allows developers to program the logic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zhong-edward", "authorAssociation": "NONE", "createdAt": "2017-06-16T18:58:59Z", "contents": "As I know hiddenElement.click() can stop case if the element does not present.\nbut if a file flag not exist, how can stop case flow? code like this:\nfs.stat(filepath, function(err, stat) {\nif(err ) {\n//break case and continue next spec.\n}\n});\n//other case step", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "al-the-x", "authorAssociation": "NONE", "createdAt": "2017-11-06T15:02:44Z", "contents": "Any progress on this? I see no PR linked...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bennyn", "authorAssociation": "NONE", "createdAt": "2018-02-07T10:22:47Z", "contents": "I came here because this issue is referenced in the Jasmine Core 3.0 Release Notes. Unfortunately, I don't know what has been changed because I see a lot of +1 comments here but no demo code.\nDoes anyone have an example of how \"proper fail fast with error reporting\" looks like?", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T18:04:32Z", "contents": "@bennyn it really depends on how you're running your Jasmine suite.\nIf you're using Jasmine's provided HTML runner, there is an option in menu at the top right to Stop on spec failure.\nIf you're using the Jasmine ruby gem or python wheel, there is an option stop_on_spec_failure in the jasmine.yml file.\nIf you're using the Jasmine npm package, you can either pass --fail-fast on the command line or by setting the stopOnSpecFailure option in your jasmine.json file.\nIf you're using Karma, Protractor or something else, you'll have to talk to those teams about supporting the new option in Jasmine 3.0.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dfederm", "authorAssociation": "NONE", "createdAt": "2018-02-09T02:49:43Z", "contents": "Fixing karma-jasmine-html-reporter seems fairly straightforward: taras42/karma-jasmine-html-reporter#32", "reactions_count": 0, "reactions_data": []}], "reactions_count": 28, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request", "has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 415, "url": "https://github.com/jasmine/jasmine/issues/415", "title": "Improve readability of printed javascript objects by formatting output", "contents": "Currently, reading an error message that includes a javascript object is fairly difficult.\nFor example, reading an error from expect(myFunction).toHaveBeenCalledWith(largeObject) is hard to do as the object printed are all on one or two lines, instead of many.\nThe current output of javascript objects makes them hard to read, hard to compare, and thus, leads to more time spent figuring out what went wrong in a test rather than fixing it.\nSo, as a developer, I expect the printed output of javascript objects to look pretty and to be easy to read.", "createdAt": "2013-08-16T18:33:07Z", "updatedAt": "2014-09-02T10:57:31Z", "closedAt": "2014-06-23T04:17:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lalunamel", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "lalunamel", "company": "@doubleencore "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "drewnoakes", "company": "@Microsoft"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:16:59Z", "contents": "We've talked about this a lot on the Jasmine team as it's something that bothers everyone.\nWe avoided the PrettyPrinter for the 2.0 milestone, but looked at it again recently. The biggest problem is cycle detection - how do we know we've done dumping an object?  I remain surprised that JSON.stringify doesn't handle cycles. That would've been super handy.\nAt the moment this feature is in the future. We'll probably have to add something pluggable so that different environments can provide their own formatting callback.\nClosing. But we're thinking about it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewnoakes", "authorAssociation": "NONE", "createdAt": "2014-09-02T10:48:03Z", "contents": "+1\nI want replace this:\nexpect(events.length).toEqual(2);\n\nexpect(events[0].item).toEqual(\"A\");\nexpect(events[0].newIndex).toEqual(0);\nexpect(events[0].type).toEqual(biggus.CollectionChangeType.Insert);\n\nexpect(events[1].item).toEqual(\"D\");\nexpect(events[1].oldIndex).toEqual(2);\nexpect(events[1].type).toEqual(biggus.CollectionChangeType.Remove);\n\n...with this...\nexpect(events).toEqual([\n    biggus.CollectionChange.insert(\"A\", \"A\", 0),\n    biggus.CollectionChange.remove(\"D\", \"D\", 2)\n]);\n\nHowever the output in the case of errors is too hard to read.\n\nExpected [ { type : 0, item : 'A', itemId : 'A', newIndex : 0, oldIndex : -1 }, { type : 2, item : 'D', itemId : 'D', newIndex : -1, oldIndex : 3 } ] to equal [ { type : 0, item : 'A', itemId : 'A', newIndex : 0, oldIndex : -1 }, { type : 2, item : 'D', itemId : 'D', newIndex : -1, oldIndex : 2 } ].\n\nIs there a good workaround for now?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewnoakes", "authorAssociation": "NONE", "createdAt": "2014-09-02T10:57:31Z", "contents": "(Note I asked a question on Stack Overflow about this)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 416, "url": "https://github.com/jasmine/jasmine/issues/416", "title": "expect({}).toBe({}) Fails.", "contents": "For some reason empty objects/arrays aren't expected to be empty objects or arrays.", "createdAt": "2013-08-20T23:22:11Z", "updatedAt": "2018-09-13T00:18:39Z", "closedAt": "2013-08-21T02:26:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "winrid", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "winrid", "company": "Reputation.com"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "harshjulka", "company": null}, {"login": "priiduneemre", "company": "Helmes AS"}], "comments_count": 8, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-21T02:26:47Z", "contents": "This is the expected behavior. toBe is an identity comparison, IE, is it the same object. You are comparing two different objects/arrays. You want an equality comparison, which you can get by using toEqual.\nThat said, I tend to prefer toBe over toEqual for my tests, especially when comparing object instances.", "reactions_count": 11, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "winrid", "authorAssociation": "NONE", "createdAt": "2013-08-21T03:07:03Z", "contents": "What if it's the same empty object?\nOn Tue, Aug 20, 2013 at 7:27 PM, Rajan Agaskar notifications@github.comwrote:\n\nThis is the expected behavior. toBe is an identity comparison, IE, is it\nthe same object. You are comparing two different objects/arrays. You want\nan equality comparison, which you can get by using toEqual.\nThat said, I tend to prefer toBe over toEqual for my tests, especially\nwhen comparing object instances.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/416#issuecomment-22991744\n.\n\n\n~Devon", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-21T03:22:35Z", "contents": "With the same empty object, both toBe and toEqual will pass. Thus, all of the following specs pass (on current master):\nit(\"demonstrates empty object behavior\", function() {\n  var x = {}; \n  expect(x).toBe(x);\n  expect(x).toEqual(x);\n  expect(x).toEqual({});\n});", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "winrid", "authorAssociation": "NONE", "createdAt": "2013-08-21T03:24:03Z", "contents": "Ahh, okay.\nI'll have to see how you're doing that identity comparison, that's neat.\nThanks.\nOn Tue, Aug 20, 2013 at 8:22 PM, Sheel Choksi notifications@github.comwrote:\n\nWith the same empty object, both toBe and toEqual will pass. Thus, all of\nthe following specs pass (on current master):\nit(\"demonstrates empty object behavior\", function() {\nvar x = {};\nexpect(x).toBe(x);\nexpect(x).toEqual(x);\nexpect(x).toEqual({});});\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/416#issuecomment-22993170\n.\n\n\n~Devon", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-21T04:00:15Z", "contents": "The 'identity' comparison comes from Javascript's equality, in which the comparison of two objects uses memory references. Jasmine itself doesn't do anything special for this behavior. Jasmine's toEqual is the more complicated one, which has lots of special customization to make specs like expect({}).toEqual({}) pass.\nHere's one of many resources diving further into Javascript's equality mechanism: Comparison Operators\nHopefully that helps!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "harshjulka", "authorAssociation": "NONE", "createdAt": "2016-02-26T13:13:53Z", "contents": "@sheelc\nit(\"demonstrates empty object behavior\", function() {\nvar x = {};\nexpect(x).toBe(x);\nexpect(x).toEqual(x);\nexpect(x).toEqual({});\n});\n.toBe() is not working for me\nhowever .toEqual() works in above case", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-26T17:31:38Z", "contents": "Hi @harshjulka\nCan you be more specific about which assertion is failing? I would expect expect(x).toBe(x) to pass, but would not expect expect(x).toBe({}) to pass.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "priiduneemre", "authorAssociation": "NONE", "createdAt": "2016-09-15T13:23:01Z", "contents": "I'd say that in most cases, it would make more sense to use expect(x).toEqual({}) anyway.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 417, "url": "https://github.com/jasmine/jasmine/issues/417", "title": "Jasmine 2.0.0 RC2 (head) on IE8", "contents": "Morning!\nWe're testing running our jasmine tests on the latest Jasmine against IE8, and it seems to be broken.\nAttaching a screenshot.\nObject doesn't support this property or method  jasmine-html.js, line 229 character 7\n>> getContainer().querySelector\nundefined\n\n\nIan Zabel & Swaroop Murthy", "createdAt": "2013-08-21T14:39:36Z", "updatedAt": "2013-08-22T18:35:21Z", "closedAt": "2013-08-22T18:35:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iwz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "iwz", "company": "thoughtbot"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-21T15:00:55Z", "contents": "Arg. That's an IE Standards Mode problem. Can you try putting IE into that mode and see if it fixes? And then a pull request would be awesome.\nThanks for the find!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 418, "url": "https://github.com/jasmine/jasmine/issues/418", "title": "RangeError: Maximum call stack size exceeded", "contents": "I am trying to use Karma to setup my Jasmine tests, and I get the following error when running \"karma run\"\nRangeError: Maximum call stack size exceeded. at C:/Users/myName/angular/node_modules/karma-jasmine/lib/jasmine.js:1811\nChrome 29.0.1547 (Windows 7): Executed 0 of 1 ERROR (0.244 secs / 0 secs)\nPhantomJS 1.9.1 (Windows 7): Executed 0 of 1 ERROR (0.237 secs / 0 secs)\ngrunt Package.json:\nHere is my Package.json:\n{\n\"name\": \"App\",\n\"description\": \"App engine\",\n\"version\": \"0.1.0\",\n\"readme\": \"Read Me...\",\n\"readmeFilename\": \"README.md\",\n\"repository\": {\n\"type\": \"svn\",\n\"url\": \"http://v8.googlecode.com/svn/trunk/\"\n},\n\"devDependencies\": {\n\"grunt\": \"~0.4.1\",\n\"grunt-contrib-copy\": \"~0.4.1\",\n\"grunt-contrib-concat\": \"~0.3.0\",\n\"grunt-contrib-coffee\": \"~0.7.0\",\n\"grunt-contrib-uglify\": \"~0.2.0\",\n\"grunt-contrib-compass\": \"~0.3.0\",\n\"grunt-contrib-jshint\": \"~0.6.0\",\n\"grunt-contrib-cssmin\": \"~0.6.0\",\n\"grunt-contrib-connect\": \"~0.3.0\",\n\"grunt-contrib-clean\": \"~0.4.1\",\n\"grunt-contrib-htmlmin\": \"~0.1.3\",\n\"grunt-contrib-imagemin\": \"~0.1.4\",\n\"grunt-contrib-watch\": \"~0.5.1\",\n\"grunt-usemin\": \"~0.1.11\",\n\"grunt-rev\": \"~0.1.0\",\n\"grunt-karma\": \"~0.6.2\",\n\"grunt-open\": \"~0.2.0\",\n\"grunt-concurrent\": \"~0.3.0\",\n\"matchdep\": \"~0.1.2\",\n\"connect-livereload\": \"~0.2.0\",\n\"grunt-google-cdn\": \"~0.2.0\",\n\"grunt-ngmin\": \"~0.0.2\",\n\"karma-phantomjs-launcher\": \"~0.1.0\",\n\"karma-jasmine\": \"~0.1.3\",\n\"karma\": \"~0.10.2\"\n}\n}\nSystem Info:\nNodeJS: v0.10.17\nKarma: v0.10.2\nPhantomjs: version: 1.9.1-8\nI have already loaded:\nAngular 1.0.7\njQuery 2.0.3\nbootstrap 3\njasmine\nAny idea what's missing or what I am doing wrong?", "createdAt": "2013-08-27T19:11:57Z", "updatedAt": "2015-12-02T04:26:43Z", "closedAt": "2013-08-27T20:07:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aminjam", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "aminjam", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "brettcannon", "company": "Microsoft"}, {"login": "SimenB", "company": "@folio-as"}, {"login": "bnjasim", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-27T20:07:42Z", "contents": "This is probably better asked over on the https://github.com/karma-runner/karma-jasmine project. Quick glance at line 1811 shows that its blowing up when it's trying to call the installed jasmine Clock, my initial instinct would be to ask you to upgrade to the latest jasmine (which has a couple of clock enhancements), but that would have to be done by the karma-jasmine project. Feel free to reopen if you can provide a little more jasmine specific context.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettcannon", "authorAssociation": "NONE", "createdAt": "2013-09-02T15:35:19Z", "contents": "Just to potentially help aminjam, my problem was I was accidentally including my copy of Jasmine in what Karma loaded. Since karma-jasmine includes its own copy of Jasmine it was unnecessary and I think causing too much to be loaded, blowing the stack out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aminjam", "authorAssociation": "NONE", "createdAt": "2013-09-02T17:04:56Z", "contents": "Thank you. Yeah, that was it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SimenB", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-30T17:23:06Z", "contents": "@brettcannon @aminjam\nHi, I realize this is ages ago, but I'm having the same problem. I'm using RequireJS and Jasmine 1.3. I need a reference to jasmine in the requirejs-config, but I'm not able to. If I exclude either mine or karma's jasmine, it can't be found. If I leave them in, I get the error reported here.\nDo you guys by any chance have any idea how I can get it to run?\nEDIT: I figured it out. When I defined a path to jasmine to add as dependency for jasmine-jquery, it was executed a second time.\nI haven't found a good way to set jasmine-jquery fixture path yet, have to edit the actual jasmine-jquery.js file, which is bad...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bnjasim", "authorAssociation": "NONE", "createdAt": "2015-12-02T04:26:43Z", "contents": "@brettcannon Your comment was very helpful. Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 419, "url": "https://github.com/jasmine/jasmine/issues/419", "title": "Async test specs can have an undefined \"this\" context in Jasmine 2.0", "contents": "My production and test JavaScript code runs in a \"use strict\" environment. When Jasmine calls our async test functions, it invokes them directly without using Function.call, so the async function context is undefined.\nThis makes it impossible to attach state to this. in beforeEach and use it in it.\nThe problem is in Spec.js's timeoutable function, which calls the it function callback directly:\n        fn(callDone); //TODO: do we care about more than 1 arg?\n\nInstead, this should be:\n        fn.call(this, callDone); //TODO: do we care about more than 1 arg?\n\nI'll submit a pull request with a fix and a new test.", "createdAt": "2013-08-28T05:25:02Z", "updatedAt": "2013-08-29T05:13:13Z", "closedAt": "2013-08-29T05:13:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Eric-Wright", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Eric-Wright", "company": "@Facebook"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-29T05:13:12Z", "contents": "Thanks for finding this. The problem is actually a bit subtler than what you've observed and attempted to fix in #420.\nWe've written this story in our backlog and will fix this for 2.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 421, "url": "https://github.com/jasmine/jasmine/issues/421", "title": "innerHTML error on The Runner and Reporter section", "contents": "Using angular-seed-app I couldn't run tests on the this tutorial, not even the first one,\nthe Runner and Reporter section of the doc there is:\ndocument.querySelector('.version').innerHTML = jasmineEnv.versionString();\nbrowser console throws an error\nUncaught TypeError: Cannot set property 'innerHTML' of null\nafter looking around I found other examples dont have that line. I used the example in tuts+ http://net.tutsplus.com/tutorials/javascript-ajax/testing-your-javascript-with-jasmine/\nOn that tutorial there is SpecRunner.html it has that block of code without document.querySelector('.version').innerHTML = jasmineEnv.versionString();\nand everything works as expected.", "createdAt": "2013-08-28T14:31:15Z", "updatedAt": "2014-01-18T06:03:33Z", "closedAt": "2014-01-18T06:03:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dlodeprojuicer", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dlodeprojuicer", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-29T05:24:17Z", "contents": "It sounds like in that app that something is running before the HTMLReporter has had a chance to build it's DOM. Can you isolate this further and maybe submit a pull request?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-01-18T06:03:33Z", "contents": "Closing this, since it seems like it's an issue with something else messing with jasmines setup and it's been a while.\nIf you can isolate something that jasmine is doing, we'd love to take a look at a pull request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 422, "url": "https://github.com/jasmine/jasmine/issues/422", "title": "Async tests shouldn't have a hardcoded 10-second timeout in Jasmine 2.0", "contents": "In Jasmine 1.x, the timeout for waits() and waitsFor() was configurable, either by passing a timeout arg to each invocation, or by changing jasmine.DEFAULT_TIMEOUT_INTERVAL globally.\nIn Jasmine 2.0, there is still a DEFAULT_TIMEOUT_INTERVAL, but it only affects  synchronous tests. Async tests have a hard-coded 10-second timeout in Spec.js:\nvar timeout = Function.prototype.apply.apply(self.timer.setTimeout, [j$.getGlobal(), [function() {\n  onException(new Error('timeout'));\n  done();\n}, 10000]]);\n\nAsync tests should respect the DEFAULT_TIMEOUT_INTERVAL like they did in Jasmine 1.x.", "createdAt": "2013-08-28T16:45:49Z", "updatedAt": "2013-08-28T17:36:27Z", "closedAt": "2013-08-28T17:36:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Eric-Wright", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Eric-Wright", "company": "@Facebook"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-28T17:36:14Z", "contents": "Agree that this should be configurable (and possibly re-use the DEFAULT_TIMEOUT_INTERVAL if we still support it in 2.x), story here: https://www.pivotaltracker.com/story/show/55996798", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 423, "url": "https://github.com/jasmine/jasmine/issues/423", "title": "Async test \"done\" callbacks should take an optional error in Jasmine 2.0", "contents": "I really like that Jasmine 2.0 has adopted a Mocha-like done() callback for completing async tests - they're much easier to write now. Mocha's done() callback also accepts an optional error parameter; if omitted, the test succeeds, otherwise the test fails by throwing the error. I propose that Jasmine adds the same support to make it easier to write async tests.\nAn example of how to use this feature:\nit(\"should save without error\", function(done) {\n  var user = new User('Eric');\n  user.save()\n    .done(function() { done(); }\n    .fail(function() { done(\"save error\"); });\n});\n\nWithout this support, async test failures are a little more cumbersome to write. In this example, I have to force a test failure in my callback function before calling done():\nit(\"should save without error\", function(done) {\n  var user = new User('Eric');\n  user.save()\n    .done(function() { done(); }\n    .fail(function() {\n      expect(\"save error\").toBe(undefined); // something to cause the test to fail\n      done();\n     });\n});\n\nI modified Spec.js to support this in my local copy of Jasmine. I can submit a pull request you're interested.", "createdAt": "2013-08-28T18:15:43Z", "updatedAt": "2014-09-27T01:23:34Z", "closedAt": "2013-08-29T05:22:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Eric-Wright", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Eric-Wright", "company": "@Facebook"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-28T18:31:22Z", "contents": "In this use case, where's the expectation to show the failure?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Eric-Wright", "authorAssociation": "NONE", "createdAt": "2013-08-28T21:13:24Z", "contents": "If I understand your question, in my implementation, I put the expectation inside of callDone in Spec.js:\n        var callDone = function(err) {\n          Function.prototype.apply.apply(self.timer.clearTimeout, [j$.getGlobal(), [timeout]]);\n            // BEGIN: new code for handling optional err param\n            if (err) {\n              expect(function() {\n                throw err;\n              }).not.toThrow();\n            }\n            // END: new code\n            done();\n        };\n\nWith this implementation, the example above would show \"Expected function not to throw, but it threw 'save error'.\" in the test report.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-28T22:01:32Z", "contents": "We're not fans of that idea. Expectations should be very explicitly inside your it - that's in the spirit of keeping your tests as better explicit documentation of how the code works.\nFrom a Jasmine implementation perspective, having Spec know about expect violates some of our abstraction rules in the 2.0 codebase.\nWe want to encourage specs of the more wordy example. And yet, what are you really trying to test in that example?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Eric-Wright", "authorAssociation": "NONE", "createdAt": "2013-08-29T03:13:21Z", "contents": "I see. Purely from an implementation perspective, to fix the abstraction rule violation, I could replace the expect call with an onException call, just like the timeout code does:\n        var timeout = Function.prototype.apply.apply(self.timer.setTimeout, [j$.getGlobal(), [function() {\n          onException(new Error('timeout'));\n          done();\n        }, 10000]]);\n\n        var callDone = function(err) {\n          Function.prototype.apply.apply(self.timer.clearTimeout, [j$.getGlobal(), [timeout]]);\n          if (err) {\n            onException(new Error(err));\n          }\n          done();\n        };\n\nBut from what I understand you saying, that's not the Jasmine way since the expectation isn't written out explicitly in test code.\nWhat we're trying to test is that our async code follows expected paths. We use jQuery promises heavily, so in each instance, we expect that .done() was called and .fail() was not (or vice-versa if we're doing negative case testing). Here's one way I could write out those expectations:\nit(\"should save without error\", function(done) {\n  var successCallback = jasmine.createSpy('successCallback');\n  var failCallback = jasmine.createSpy('failCallback');\n  var user = new User('Eric');\n  user.save()\n    .done(successCallback)\n    .fail(failCallback)\n    .always(function() { \n      expect(successCallback).toHaveBeenCalled();\n      expect(failCallback).not.toHaveBeenCalled();\n      // ... and other expect() calls as needed to check object state\n      done();\n    });\n});\n\nFor a few tests, this is OK. But we have over 60 async tests like this currently, and writing more every day. So, we're looking for ways to make our async test code easy to read and write, and the first example I posted is one approach.\nDo you have any recommendations on how we should approach this problem? Thanks for your consideration.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-08-29T05:22:44Z", "contents": "I don't know enough about your code or the particular promise implementation. But it seems that you're executing a lot of code in order to test the callback paths.\nI'd consider maybe only testing the success callback in a valid case and the failing case in the invalid save. Pairing those two tests together will make the suite easier to read and still give you sufficient coverage.\nI'm also a fan of not over DRYing specs. Yes, it may seem tedious. But remember that you're typing for the future you to understand the test suite, not just the you that is tired of typing today.\nSaid from a different take, @ragaskar is always reminding me that a painful test suite is trying to tell you something - usually that your objects are factored wrong.\nLet's take this over to the Jasmine mailing list and have more people contribute tips.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 424, "url": "https://github.com/jasmine/jasmine/issues/424", "title": "Comparing complex Object to toEqual(jasmine.any(Array)) cause Browser to hang", "contents": "I have a really complex javascript object - containing two Backbone views, to be specific - and when I compare that object using toEqual(jasmine.any(Array)) it causes the browser to hang hard.\nTested on Firefox 22 and Chrome 27.", "createdAt": "2013-08-30T20:30:17Z", "updatedAt": "2016-09-29T00:35:56Z", "closedAt": "2016-09-29T00:35:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thomb", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "thomb", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "wolframkriesing", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "eschwartz", "company": "Optum Technology"}, {"login": "jesperronn", "company": "Nine A/S"}, {"login": "Gerg", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-01T18:41:10Z", "contents": "Can you please post more information? Which version of Jasmine are you using? How are you using it? And can you post more of your suite?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wolframkriesing", "authorAssociation": "NONE", "createdAt": "2013-12-19T21:17:57Z", "contents": "I can confirm this issue, the problem is deep structures get slow when being JSON.parse()d ... little to say that the output is useless because it is unreadable due to it's size.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-04-18T17:14:32Z", "contents": "We've done a couple of things that should help with this issue.\n\nMatcher failure messages can now be a function (76ca5ef) so a successful test won't need to pretty print the large objects.\nThe pretty printer now supports a maximum array length (33e4f5e) after which it will print an ellipsis so test failures that do need to print, should be more performant.\n\nPlease take a look at master and let us know if this is still an issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:21:01Z", "contents": "Bump. This is similar to #606.\nJasmine can't anticipate how big your objects are. Is there another way to test what you're trying to do that might be more useful to you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eschwartz", "authorAssociation": "NONE", "createdAt": "2014-09-02T20:26:35Z", "contents": "I'm having this problem in Jasmine v1.3.1. Attempting to pretty-print large objects causes the browser to hang (I can't tell you how frusterating this was to debug).\nWouldn't it be possible to not pretty-print nested javascript objects?\nvar simpleObject;\n_.each(complexObject, function(val, key) {\n  if (_.isObject(val)) {\n    simpleObject[key] = '[Object]';\n  }\n  else {\n    simpleObject[key] = jasmine.pp(val);\n  }\n});\n\nreturn JSON.stringify(simpleObject);\nNot great example code, maybe, but it seems like such a thing should be possible.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-10T20:25:18Z", "contents": "In jasmine 2.0, you should be able to set the jasmine.MAX_PRETTY_PRINT_DEPTH to get something like this behavior.\nUnfortunately, we're no longer supporting 1.3 due to focus on 2.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eschwartz", "authorAssociation": "NONE", "createdAt": "2014-09-10T21:24:42Z", "contents": "I'd just like to say that I am very disappointed that the jasmine team has decided to completely and suddenly drop support for v1.3, including in the case of hard-to-debug and browser-crashing bugs (see also here and here).\nThis has the potential to incur major costs on my project -- as I'm sure is the case for others -- as the process of upgrading to v2.x is not at all trivial.\nFor me, this is a good reason to avoid using Pivotal products in the future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jesperronn", "authorAssociation": "NONE", "createdAt": "2015-10-30T09:17:15Z", "contents": "\ud83d\udc4d for Pivotal's focus on recent releases only. Getting stuff to work in backwards compatible ways can be a real time-consumer. Nice to focus on progress in new releases instead of old releases. Thanks project collaborators", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["1.3.x"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 425, "url": "https://github.com/jasmine/jasmine/issues/425", "title": "Add 'jasmine.objectContaining' to the documentation", "contents": "This method is undocumented and it's pretty useful.\nI would have written the documentation and submitted a pull request, but I didn't see the documentation as a part of the repo.", "createdAt": "2013-09-05T14:20:48Z", "updatedAt": "2013-10-03T22:35:31Z", "closedAt": "2013-10-03T22:35:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gustly", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "gustly", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-05T15:17:40Z", "contents": "Thanks for the feedback. We are working on both making the docs easier to find/use/update and adding this function to the docs. This will happen as part of 2.0 final.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-03T22:35:31Z", "contents": "This is definitely in the docs for 2.0, the current version is available here\nIf you have any suggestions for improving the docs for this, that would be appreciated.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 427, "url": "https://github.com/jasmine/jasmine/issues/427", "title": "Remove the trailing dot at the end of the failing spec", "contents": "When a test is failing, the reporter adds a trailing dot to the test title. This dot is not added to the passing tests report so the programmer tends to add it manually at the end of the test title. So, when failing, two dots are displayed.", "createdAt": "2013-09-08T19:31:47Z", "updatedAt": "2013-10-01T23:31:15Z", "closedAt": "2013-10-01T23:31:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "delapuente", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "delapuente", "company": "@IBMResearch "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-01T22:56:56Z", "contents": "Looks like this breaks the spec filtering link as well. Story here: https://www.pivotaltracker.com/story/show/58043244", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 429, "url": "https://github.com/jasmine/jasmine/issues/429", "title": "jasmine-core gem doesn't install with RubyGems 2.1.x", "contents": "I'm not sure if this is a RubyGems or Jasmine issue, but RubyGems 2.1.0 and higher will not install or unpack jasmine-core.  The install \"succeeds\", but the jasmine-core-1.3.1 directory is empty.  This is happening to me on OSX and Ubuntu 12.10.  Ruby is installed using rvm.\nSimple repro steps:\ncd /tmp\nwget http://rubygems.org/downloads/jasmine-core-1.3.1.gem\ngem update --system\ngem unpack jasmine-core-1.3.1.gem\nls jasmine-core-1.3.1\n# Directory will be empty.  It should contain a lib directory.", "createdAt": "2013-09-12T18:39:45Z", "updatedAt": "2013-09-15T17:48:34Z", "closedAt": "2013-09-15T17:48:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "blt04", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "blt04", "company": "Rapid7"}, {"login": "drbrain", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "drbrain", "authorAssociation": "NONE", "createdAt": "2013-09-12T22:24:38Z", "contents": "This is a rubygems bug, I closed rubygems/rubygems#645 in favor of rubygems/rubygems#644 (as it came first).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-15T17:48:34Z", "contents": "Just tried this with @drbrain's fix in rubygems 2.1.3 and it works properly again. I'll close this issue out and thanks for bringing it to our attention!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 430, "url": "https://github.com/jasmine/jasmine/issues/430", "title": "How to use ConsoleReporter with 1.3.1 Jasmine version from a zip download?", "contents": "Firstly. Jasmine is great :) Tests make more sense for everyone when written in specification way. However I run into a small issue. It's not stopping me from work, yet it's pretty irritating :)\nI downloaded my version of Jasmine from here: https://github.com/pivotal/jasmine/downloads\nThere is no ConsoleReporter bundled with this one. So I decided to download it directly from github. Normally I wouldn't work this way, but I'm still pretty new t Jasmine and wanted to play around a little bit.\nUnfortunately I can't get it work with my version of Jasmine. After inspecting the code I tried this one in my Runner:\nvar reporter = new getJasmineRequireObj().ConsoleReporter({ print : console.log });.\nThere are no error and no output in the console :(\nIf it doesn't make sense I will just clone repository and I will use master branch.\nThanks!", "createdAt": "2013-09-13T07:42:13Z", "updatedAt": "2016-06-14T13:43:57Z", "closedAt": "2013-09-13T21:14:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "op1ekun", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "op1ekun", "company": "JPMorgan"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "Revlin", "company": "Uni:Sol"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "mustafa0x", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-13T21:14:00Z", "contents": "The point of the ConsoleReporter is for use with node.js. This isn't yet awesome.\nHowever, if you look at Jasmine's own node suite you'll see how it can/should be used. That's the 1.3.x version for comparison.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "op1ekun", "authorAssociation": "NONE", "createdAt": "2013-09-13T23:06:27Z", "contents": "Thanks a lot :)\nHowever I would like to share my findings with others in case some runs into the same issue.\nI have started to use: https://github.com/larrymyers/jasmine-reporters/blob/master/src/jasmine.console_reporter.js\nThis is what I expected from console reporter :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Revlin", "authorAssociation": "NONE", "createdAt": "2014-07-09T19:45:46Z", "contents": "I have no idea why the contribs think ConsoleReporter would not be useful in the client-side environment, but all you need to do is include the console.js script from 'lib/jasmine-2.0.0':\n    <script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine.js\"></script>\n    <script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine-html.js\"></script>\n    <script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/boot.js\"></script>\n    <script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/console.js\"></script>\n\n... and then when you are configuring the jasmine test harness:\n        var ConsoleReporter = jasmineRequire.ConsoleReporter();\n        var options = {\n           timer: new jasmine.Timer, \n           print: function () {\n              console.log.apply(console,arguments)\n        }};\n        consoleReporter = new ConsoleReporter(options); // initialize ConsoleReporter\n        jasmine.getEnv().addReporter(consoleReporter); //add reporter to execution environment\n\nThe reason I prefer output to the console is that I'm using jasmine to test UI frameworks, plugins, widgets, etc. and most of the time jasmine's default HTML output is hidden by some floating dialogue thingy (the thingy that I'm testing). Also you can supply a custom function to the print property of the options config object if you need to.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-10T05:30:54Z", "contents": "Yes @Revlin, we included console.js in the standalone distribution of 2.0.0 for use cases similar to the one you've described. Another use case is captured in this gist. By including the ConsoleReporter with some configuration, it's easy to use phantomjs to get streaming results from the standalone runner for CI or seeing spec results in a terminal (similar to jasmine-gem).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mustafa0x", "authorAssociation": "NONE", "createdAt": "2014-07-21T16:09:07Z", "contents": "@Revlin Thanks, that was that helpful. Any idea how to get the output also show the suite and spec titles? This is what I currently get:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Revlin", "authorAssociation": "NONE", "createdAt": "2016-06-14T13:43:57Z", "contents": "@mustafa0x In that case I would go with what op1ekun recommended and use Larry Myers' jasmine-reporter:\n<script type=\"text/javascript\" src=\"jasmine-reporters/src/tap_reporter.js\"></script>\n\n... with the TapReporter module:\n    var tapReporter = new jasmineReporters.TapReporter({});\n    jasmine.getEnv().addReporter(tapReporter);", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 431, "url": "https://github.com/jasmine/jasmine/issues/431", "title": "What about version 2.0?", "contents": "Hey dear Pivotal Team.\nI really love jasmine, and asking myself, what's up with the 2.0 branch? The last commit is 7 Months old. Will it ever be see the light of day, or what is the plan there?\nKeep up the good work,\nGeorg", "createdAt": "2013-09-13T18:02:30Z", "updatedAt": "2013-09-13T21:49:42Z", "closedAt": "2013-09-13T18:16:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Calamari", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Calamari", "company": "Freelancer, Ruby, JS & Elixir"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-13T18:16:03Z", "contents": "The 2.0 branch was merged to master back in June? Master has been 2.0 for some time.\nCheck out the 2.0rc2 release and let us know what you think.\nWhich brings up a good question: what is the best way to announce releases? 2.0rc2 was mentioned on Twitter and to the mailing list. But still not that many folks are aware...\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Calamari", "authorAssociation": "NONE", "createdAt": "2013-09-13T21:49:42Z", "contents": "I think the best way would be, writing that on the website (http://pivotal.github.com/jasmine/). Because this is (at least my) first page where I look which version is actual. But also some documentation for the new 2.0 branch would be nice. At least I didn't found any, and always have to look into the code, to figure out the changes.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 433, "url": "https://github.com/jasmine/jasmine/issues/433", "title": "Test runner crashes when testing toHaveBeenCalledWith with complex parameters", "contents": "I am writing unit tests for a Sencha Touch app and I am increasingly coming across an issue that I can't resolve.  It would seem that when I am testing that a particular method was called with a particular parameter it works fine if the parameter is simple, but if it is quite complex then the test runner just completely crashes out and I have to restart the browser.\nExample code (you will need a Sencha App running for this particular example but I am guessing this will reproducible with any semi-complex object).\ncontroller.someView = Ext.create('Ext.container');\nspyOn(Ext.Viewport, 'add');\n\ncontroller.someMethodThatAddsSomeViewToViewport();\n\nexpect(Ext.Viewport.add).toHaveBeenCalledWith(controller.someView);\n\ncontroller = {\n    someMethodThatAddsSomeViewToViewport: function() {\n        Ext.Viewport.add(this.someView);\n    }\n}\n\n\nNow if I write this test before writing the code it completely crashes my browser.  If I go back and write the correct code to satisfy this test and re-run the spec runner is absolutely fine and registers the test as passed.\nThis is quite frustrating as I am trying to do test driven development.  I hope this is enough to go on - let me know if you need any more information.  I am not able to provide stack traces or other debugging information as it renders my browser unusable.  I am running the tests in Google Chrome on a Mac.\nTom", "createdAt": "2013-09-26T20:25:08Z", "updatedAt": "2013-09-26T22:51:46Z", "closedAt": "2013-09-26T22:51:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tomcooksey", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tomcooksey", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-26T22:51:46Z", "contents": "This really isn't enough to go on. I don't see a call to describe or it.\nYou'll probably have more success with this sort of issue on the jasmine mailing list: jasmine-js@googlegroups.com. There are plenty of Sencha users on the list - in fact, Sencha uses Jasmine to test Ext.js and Sencha.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 435, "url": "https://github.com/jasmine/jasmine/issues/435", "title": "jasmine forcing to use .live instead of .on", "contents": "Hi,\nI am running a test for dialog(fancybox) close. I am using a function\n$(\"#deleteAllDialog\").on(\"click\", \"#cancelDeleteAll\", function () {\n    dialog.close();\n});\n\nand got a error\nTesting View History Structure:: clicks the delete all button: failed\n  Expected '<div id=\"deleteAllDialog\" class=\"dialog\" style=\"display: block; \"><p class=\"dialog-heading\"> Are you sure you want to delete all items in your viewing history?</p><a class=\"button-standard\" id=\"confirmDeleteAll\" href=\"#\">CONFIRM</a><a class=\"button-standard\" id=\"cancelDeleteAll\" href=\"#\">CANCEL</a></div>' to be hidden. (6)\n\nand when i use .live than i didn't get any error.\n  $(\"#cancelDeleteAll\").live('click', function () {\n      dialog.close();\n  });\n\nHere is my Jasmine code\ndescribe(\"Testing View History Structure\", function () {\n    var server;\n\nbeforeEach(function() {\n    jasmine.getFixtures().set(\n     '<div id=\"deleteAllDialog\" class=\"dialog\">' +\n                '<p class=\"dialog-heading\"> Are you sure you want to delete all items in your viewing history?</p>' +\n                '<a class=\"button-standard\" id=\"confirmDeleteAll\" href=\"#\">CONFIRM</a>' +\n                '<a class=\"button-standard\" id=\"cancelDeleteAll\"  href=\"#\">CANCEL</a>' +\n            '</div>' \n);\n    server = sinon.fakeServer.create();\n    spyOnEvent($(\"#cancelDeleteAll\"), 'click');\n});\n\nit(\"clicks the delete all button\", function () {\n    expect($('#deleteAllDialog')).toBeHidden();\n    $(\"#deleteAll\").trigger('click');\n    expect('click').toHaveBeenTriggeredOn($(\"#deleteAll\"));\n    expect($('#deleteAllDialog')).toBeVisible();\n    expect($(\"#cancelDeleteAll\")).toHaveClass(\"button-standard\");\n    $(\"#cancelDeleteAll\").trigger('click');\n    $(\"#cancelDeleteAll\").click();\n    expect('click').toHaveBeenTriggeredOn($(\"#cancelDeleteAll\"));\n    expect($('#deleteAllDialog')).toBeHidden();\n});", "createdAt": "2013-09-27T09:48:24Z", "updatedAt": "2013-10-02T19:27:43Z", "closedAt": "2013-10-02T19:27:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kuldeeparora", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "kuldeeparora", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-27T15:34:10Z", "contents": "Hey there,\nSince your test code doesn't seem to call any initialize, or similar method\nin the setup, would it be fair to say that your source code does all of its\nevent binding as soon as the source file is loaded?\nIf so, I think what you're seeing is that when you call 'live', jQuery\nbinds the event to 'document' element which does exist on the page when\nthat file is loaded. On the other hand, when you are using 'on', the\n'#deleteAllDialog' element does not exist when the source file is loaded,\nas all source files are loaded before spec files are loaded/executed.\nBecause that element doesn't exist, events can't be bound to it. If you\nwanted to replicate \"live\" behavior with \"on\", you would need to do\nsomething like $(document).on(\"click\", \"#cancelDeleteAll\",...). A better\nsolution, however, might be to continue using \"on\" the way you have and\nrefactor to make the code more testable; for example, by giving the\nimplementation an initialize function that you can call in test after the\nfixture DOM is ready and then that function can do the event binding.\nDoes that help?\nOn Sep 27, 2013 2:48 AM, \"Kuldeep\" notifications@github.com wrote:\n\nHi,\nI am running a test for dialog(fancybox) close. I am using a function\n$(\"#deleteAllDialog\").on(\"click\", \"#cancelDeleteAll\", function () {\ndialog.close();\n});\nand got a error\nTesting View History Structure:: clicks the delete all button: failed\nExpected '\nAre you sure you want to delete all items in your viewing history?\nCONFIRM <#1415ed1f4d695475_>CANCEL <#1415ed1f4d695475_>\n' to be hidden. (6)\nand when i use .live than i didn't get any error.\n$(\"#cancelDeleteAll\").live('click', function () {\ndialog.close();\n});\nHere is my Jasmine code\ndescribe(\"Testing View History Structure\", function () {\nvar server;\nbeforeEach(function() {\njasmine.getFixtures().set(\n'' +\n' Are you sure you want to delete all items in your viewing history?' +\n'CONFIRM' +\n'CANCEL' +\n''\n);\nserver = sinon.fakeServer.create();\nspyOnEvent($(\"#cancelDeleteAll\"), 'click');\n});\nit(\"clicks the delete all button\", function () {\nexpect($('#deleteAllDialog')).toBeHidden();\n$(\"#deleteAll\").trigger('click');\nexpect('click').toHaveBeenTriggeredOn($(\"#deleteAll\"));\nexpect($('#deleteAllDialog')).toBeVisible();\nexpect($(\"#cancelDeleteAll\")).toHaveClass(\"button-standard\");\n$(\"#cancelDeleteAll\").trigger('click');\n$(\"#cancelDeleteAll\").click();\nexpect('click').toHaveBeenTriggeredOn($(\"#cancelDeleteAll\"));\nexpect($('#deleteAllDialog')).toBeHidden();\n});\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/435\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kuldeeparora", "authorAssociation": "NONE", "createdAt": "2013-10-02T14:40:57Z", "contents": "Hi,\nThanks for your update, Let me use $(document).on(\"click\", \"#cancelDeleteAll\",...).\nI will update you if it works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-02T19:27:43Z", "contents": "This isn't actually an issue with jasmine itself. You'll probably get a better discussion if you move this to the jasmine-js google group.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 436, "url": "https://github.com/jasmine/jasmine/issues/436", "title": "Jasmine causes exception in Firefox and Chrome", "contents": "We are using the 2.0.0 version of jasmine. Problem is still present in RC2.\nNS_ERROR_XPC_BAD_OP_ON_WN_PROTO: Illegal operation on WrappedNative prototype object\nThis is caused by trying to alias the global timing functions:\n    realTimingFunctions = {\n        setTimeout: global.setTimeout,\n        clearTimeout: global.clearTimeout,\n        setInterval: global.setInterval,\n        clearInterval: global.clearInterval\n    },\nWith ECMAScript 5, adding .bind(global) causes the errors to go away - ie,\n    realTimingFunctions = {\n        setTimeout: global.setTimeout.bind(global),\n        clearTimeout: global.clearTimeout.bind(global),\n        setInterval: global.setInterval.bind(global),\n        clearInterval: global.clearInterval.bind(global)\n    },", "createdAt": "2013-09-30T18:39:36Z", "updatedAt": "2014-02-18T16:29:09Z", "closedAt": "2013-09-30T22:09:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mrusinak", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "mrusinak", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ichord", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 9, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-30T22:00:24Z", "contents": "Which browser/versions reveal this error?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mrusinak", "authorAssociation": "NONE", "createdAt": "2013-09-30T22:05:25Z", "contents": "The current version of Firefox (24.0) as well as the last few 23.X - The current version of chrome does, but a fellow developer uses that so I can't find the exact version string for you. I have not tried using IE developer tools to check.\nError is seen with dev tools enabled - either stock Web Developer tools, or Firebug. Easiest way to reproduce was to open the page and then refresh it, then that exception is continually raised.\nEdit: Note that another coworker who had an older version of Firefox (16 I believe) did not see the error", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-09-30T22:09:15Z", "contents": "Fascinating. We're not seeing this exception during our CI builds.\nNo matter. I created a (Tracker story)[https://www.pivotaltracker.com/story/show/57954820] for this and we'll get it into the next RC of 2.0.\nThanks for the find!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-09-30T23:54:14Z", "contents": "We've tried to reproduce this on Firefox 24.0 (with firebug, with developer tools, and with nothing open), on both OSX and Windows and also on Linux without any developer tools. We haven't been able to get anything to throw this error.\nDo you have any more specific version of what you're running?\nDo you have a spec that causes this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mrusinak", "authorAssociation": "NONE", "createdAt": "2013-10-01T14:52:06Z", "contents": "I did some more testing this morning and I was mistaken in that it was present in RC2 - switching to RC2 from alpha and refreshing the page caused the last few exceptions to look like they had come after the refresh.\nSo I apologize, RC2 appears to be fixed.\nAll the same, here is a spec file that fails in alpha but works in RC2 to demonstrate the problem:\ndescribe('Timer Problem', function() {\n    it('via window.method', function() {\n        var t = window.setTimeout(function() { console.log(\"Hello world\") }, 1000);\n        window.clearTimeout(t);\n    });\n\n    it('via method', function() {\n        var t = setTimeout(function() { console.log(\"Hello world\") }, 1000);\n        clearTimeout(t);\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ichord", "authorAssociation": "NONE", "createdAt": "2014-02-17T15:58:32Z", "contents": "problem still exists in 2.0.0.\nTypeError: 'undefined' is not an object (evaluating 'global.setTimeout') in file:///Users/ichord/Projects/At.js/.grunt/grunt-contrib-jasmine/jasmine.js (line 883) (1)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-18T02:27:39Z", "contents": "@ichord I think you might be facing a different issue. I tried the example above in Jasmine 2.0.0 and in grunt-contrib-jasmine and was not able to reproduce. Additionally, basic specs around the clock also seem to work.\nDo you have an example to reproduce and help us figure out if there is a problem in Jasmine or perhaps grunt-contrib-jasmine? If so, it would be helpful if you could open a new issue to help us track and work with you to debug this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ichord", "authorAssociation": "NONE", "createdAt": "2014-02-18T09:17:10Z", "contents": "@sheelc oh.... I'm sorry. That's my fault. i calling jasmine.Clock().install() instead of jasmine.clock().install()", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-18T16:29:09Z", "contents": "Cool no worries. It's unfortunate that those two conflict and then fail in\nthat mysterious way. There's probably a rename justified around there.\nOn Feb 18, 2014 1:17 AM, \"Harold.Luo\" notifications@github.com wrote:\n\n@sheelc https://github.com/sheelc oh.... I'm sorry. That's my fault. i\ncalling jasmine.Clock().install() instead of jasmine.clock().install()\n\nReply to this email directly or view it on GitHubhttps://github.com//issues/436#issuecomment-35365439\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 441, "url": "https://github.com/jasmine/jasmine/issues/441", "title": "Expose object equality comparator", "contents": "When adding a custom matcher I often need to test objects for equality. It would be very helpful if the jasmine equality comparison function was publicly exposed on the expectation object (as this.equals or this.compare for example).\nAs an example, I might want to create 'toPromise' matcher testing whether a function returns specific data wrapped in a promise. I can do this:\nbeforeEach(function () {\n    this.addMatchers({\n        toPromise: function (expected) {\n            this.message = [...];\n            // call function, unwrap data and assign to this.actual\n            return this.toEqual(expected);\n        }\n    });\n});\n\nbut that outputs unwanted message from 'toEqual' matcher along with my own message. I'd like to be able to do this:\nbeforeEach(function () {\n    this.addMatchers({\n        toPromise: function (expected) {\n            this.message = [...];\n            // call function, unwrap data\n            return this.compare(unwrappedData, expected);\n        }\n    });\n});", "createdAt": "2013-10-07T08:49:35Z", "updatedAt": "2014-02-18T23:19:06Z", "closedAt": "2013-12-07T23:53:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hon2a", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "hon2a", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-07T14:51:32Z", "contents": "I believe you should be able to call jasmine.equals(unwrappedData, expected) to accomplish this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-07T15:02:34Z", "contents": "This has been changed a bit for 2.0. But yes, matchers should/will have access to utility functions to facilitate these sorts of situations.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2013-10-07T16:22:07Z", "contents": "@slackersoft I'm using Jasmine 1.3.1, as described at http://pivotal.github.io/jasmine/ , which doesn't have anything defined under jasmine.equals. Am I right in thinking that 2.x is still not stable? If I'm wrong, where can I find any sort of documentation / API reference for 2.x?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-07T23:53:53Z", "contents": "@hon2a Sorry it took so long to get back to you.\nIn Jasmine 1.3.1 you can access the equals through 'this.env.equals_'. I'm not sure if that was intentionally part of the public interface or not. 2.0 is much more explicit as can be seen in the docs here. The util that is injected into the spec factory contains 'equals' which combined with the second argument of customEqualityTesters is Jasmine's equality.\nI'll close this issue out because it's solved for 2.0. Eventually we want a more generic way that matchers can use other matchers, but we are still working on that. The story for that is here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2013-12-08T08:25:35Z", "contents": "Thanks for the info. A pity that karma-jasmine doesn't support Jasmine 2.0 yet.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 442, "url": "https://github.com/jasmine/jasmine/issues/442", "title": "1.3.1 standalone no longer available", "contents": "http://cloud.github.com/downloads/pivotal/jasmine\njasmine-standalone-1.3.1", "createdAt": "2013-10-07T13:19:11Z", "updatedAt": "2013-10-08T14:57:50Z", "closedAt": "2013-10-07T14:25:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "marcosjitisoft", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "marcosjitisoft", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rjmunro", "company": "Diffblue / St Aldate's Church"}, {"login": "joshuacc", "company": "Hobsons"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2013-10-07T14:23:49Z", "contents": "Since GitHub has deprecated the downloads page for repositories, we're moving towards having the standalone distributions in the /dist folder of the jasmine core repository.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marcosjitisoft", "authorAssociation": "NONE", "createdAt": "2013-10-07T14:25:21Z", "contents": "thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rjmunro", "authorAssociation": "NONE", "createdAt": "2013-10-08T10:00:31Z", "contents": "This sounds like a really bad idea. Every version ever released in history, even betas, even if you later delete them, will have to be downloaded by anyone doing a git clone in future. You should store the built releases somewhere else.\nGithub now has a new download feature called releases, where downloads and descriptions can be attached to tags of a project.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2013-10-08T14:54:28Z", "contents": "@rjmunro Github also has a prominent \"download as zip\" button. No clone necessary. Though releases does look like it would be a nicer way to see everything in one place.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-08T14:57:50Z", "contents": "If the standalone release were large, I'd be more worried. But we're talking about adding 30KB to the repo. We are in the midst of removing any and all blockers for making Jasmine easy to use and maintain.\nWe're looking to move to releases over time for this functionality. Thanks for the feedback.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 444, "url": "https://github.com/jasmine/jasmine/issues/444", "title": "Spies save call arguments by reference ", "contents": "When a spy is called with arguments, the spy's mostRecentCall.args and argsForCall properties are set as a direct reference to the arguments. This means that if the argument objects themselves are changed, our reference to them will change as well.\nConsider this example (http://jsfiddle.net/a5kp9/2/):\nvar spy = jasmine.createSpy();\nvar arg = ['a', 'b'];\n\nspy(arg);\n\narg.length = 0;\n\nexpect(spy.mosRecentCall.args[0][0]).toEqual('a');\nexpect(spy.mosRecentCall.args[0][1]).toEqual('b');\n// Fails. Actual value of spy.mostRecentCall.args[0] is now '[]'\nI would expect that the answer to \"What arguments was this spy called with?\" shouldn't change after the spy is called.\nI'm thinking it would make more sense to save a copy of the arguments, rather than a reference. Thoughts?", "createdAt": "2013-10-09T15:19:07Z", "updatedAt": "2018-03-22T00:39:40Z", "closedAt": "2016-09-27T19:28:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "eschwartz", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "eschwartz", "company": "Optum Technology"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "jasonkarns", "company": "Test Double"}, {"login": "brettwejrowski", "company": null}, {"login": "toby-sullivan-hs", "company": null}, {"login": "ahonaker", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "aaani", "company": null}, {"login": "mahhov", "company": null}], "comments_count": 12, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-09T16:03:21Z", "contents": "I'm inclined to agree with you that it's somewhat less 'correct'.\nThat said, from a practical standpoint most folks get more utility out of a reference being stored. For example, it makes it easier to assert that a spy has been called with, a particular instance whose state may have changed since the spy call.\nIt's been pretty rare that I've needed to make an exact assertion about the state of the object passed when the spy was called (because often I don't care -- that's the business of the object). I'd suggest if that is necessary you can write a spy w/ andCallFake that contains an assertion.\nClosing because I don't think we'll change the behavior here (I suspect it will have more downsides than upsides), but feel free to continue the discussion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jasonkarns", "authorAssociation": "NONE", "createdAt": "2014-01-29T03:28:28Z", "contents": "I also agree that the spies should be saving their arguments by copy.\nIt took far longer than I'd like to admit to realize that the code and test were, in fact, correct. Jasmine was reporting a false negative.\nmunge = (operator) ->\n  data = x: 1\n  data.y = operator(data)\n\ndescribe \"jasmine spies\", ->\n  Given -> @op = jasmine.createSpy('operator').andReturn(2)\n  When -> munge @op\n  Then -> expect(@op).toHaveBeenCalledWith(x:1)\nExpected spy operator to have been called with [ { x : 1 } ] but was called with [ [ { x : 1, y : 2 } ] ]\n\nI realize the issue has been closed, but I'm registering my 2 cents in favor of the OP.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brettwejrowski", "authorAssociation": "NONE", "createdAt": "2014-06-10T19:46:35Z", "contents": "I also agree with the @eschwartz on this one.  I am specifically testing a recursive method that modifies one of the arguments, so jasmine recorded the call arguments as the result of the method, rather than the actual calls that were made.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eschwartz", "authorAssociation": "NONE", "createdAt": "2014-06-12T14:18:02Z", "contents": "Note that all other matchers compare values, not references.\nvar fooBar_A = { foo: 'bar' };\nvar fooBar_B = { foo: 'bar' };\n\nexpect(fooBar_A).toEqual(fooBar_B);   /// passes, because the values are equal\nfooBar_A === fooBar_B  // false, because the references are not equal\nAnd, fact, toHaveBeenCalledWith checks the argument value, not a reference to the argument.\nspy(fooBar_A);\nexpect(spy).toHaveBeenCalledWith(fooBar_B);   // Passes, because the called-with values are equal\nBut consider if spy changes the value of the fooBar_A reference:\nspy = jasmine.andCallFake(function(inputObj) {\n  inputObj.faz = 'bar';\n});\n\nspy(fooBar_A);\nexpect(spy).toHaveBeenCalledWith(fooBar_B);  // Failed, even thought the called-with values are equal.\nSo why are we suddenly concerned that our references aren't equal? It seems to me that checking reference equality would be the off-case here. If I want to check references, I would use my spy as a mock:\nspy.andCallFake(function(inputObj) {\n  expect(inputObj === fooBar_A).toEqual(true);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "toby-sullivan-hs", "authorAssociation": "NONE", "createdAt": "2015-02-25T00:25:25Z", "contents": "This is old but having just fought with this same issue, I would certainly argue the current behaviour is incorrect (or, at least, not the expected behaviour). I want to compare what value a function was called with.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "ahonaker", "authorAssociation": "NONE", "createdAt": "2015-03-28T01:47:16Z", "contents": "Agree with previous posters.  I need to test that the function is being called correctly, not the results of downstream changes to referenced object(s).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-01T01:41:11Z", "contents": "As @ragaskar mentioned, this is a tradeoff between:\nit('allows the same object', function() {\n  var spy = jasmine.createSpy('spy');\n  var foo = { foo: 'bar' };\n  spy(foo);\n  foo.baz = 'quux';\n  expect(spy).toHaveBeenCalledWith(foo);\n});\nand\nit('does not allow the same object', function() {\n  var spy = jasmine.createSpy('spy');\n  var foo = { foo: 'bar' };\n  spy(foo);\n  foo.baz = 'quux';\n  expect(spy).toHaveBeenCalledWith({ foo: 'bar' });\n});\nCurrently the tradeoff has come down on the side of allowing the use of the same object even if it has changed since the spy was called, most likely because this is easier for jasmine to implement.\nSince we've heard some concern about this from the community, I'd be happy to review a pull request that changed this behavior so the params were duplicated and so matched an object that was the same as the param at the time of the call. Note that since this can be considered a breaking change to the interface, we will have to be careful about when we merge this and release it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-27T19:28:33Z", "contents": "I believe this should be fixed now that #1000 is merged and released. This is a per-spy setting\njasmine.createSpy().calls.saveArgumentsByValue()\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aaani", "authorAssociation": "NONE", "createdAt": "2016-10-28T23:11:27Z", "contents": "@slackersoft Any timeline on when this will be released? Also any updates about the docs for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aaani", "authorAssociation": "NONE", "createdAt": "2016-10-28T23:14:30Z", "contents": "Sorry my bad, It's present in 2.5.2 already.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mahhov", "authorAssociation": "NONE", "createdAt": "2018-03-18T05:56:55Z", "contents": "@slackersoft, this is shallow copy. is there a similar option for storing deep copy of value?\nit('', function () {\n    let spy = jasmine.createSpy('spy');\n    spy.calls.saveArgumentsByValue();\n\n    let a = {b: {c: 1}};\n    spy(a);\n    a.b.c = 3;\n\n    expect(spy).toHaveBeenCalledWith({b: {c: 1}});\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-22T00:39:40Z", "contents": "Deep copy can get expensive pretty quickly (and might have to deal with cycles in the object), so we don't have a plan to add that ability for spies at this time.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 445, "url": "https://github.com/jasmine/jasmine/issues/445", "title": "toBeDefined always passes?", "contents": "var bob;\ndescribe('toBeDefined test', function() {\n        it('should fail', function() {\n                expect(bob).toBeDefined;\n        });\n        it('should not fail', function() {\n                expect(bob).toBeUndefined;\n        });\n});\n\nBoth tests pass.  I've seen this both in the browser, with Jasmine 1.3.1 revision 1354556913, and with jasmine-node.  I can't help but suspect that I'm missing something really obvious since I'm new to Jasmine, but....", "createdAt": "2013-10-09T17:12:51Z", "updatedAt": "2013-10-09T17:31:35Z", "closedAt": "2013-10-09T17:29:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jbhelfrich", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jbhelfrich", "company": null}, {"login": "ohaibbq", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "ohaibbq", "authorAssociation": "NONE", "createdAt": "2013-10-09T17:26:57Z", "contents": "Hey, it looks like you're forgetting to invoke the matcher. Matchers are functions attached to the expectation. The correct syntax is \u2018expect(bob).toBeDefined();`", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jbhelfrich", "authorAssociation": "NONE", "createdAt": "2013-10-09T17:29:01Z", "contents": "Yep, really obvious mistake right there. Maybe these people telling me caffeine is no substitute for sleep are on to something....", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ohaibbq", "authorAssociation": "NONE", "createdAt": "2013-10-09T17:31:35Z", "contents": "..at least you're writing tests! ;]", "reactions_count": 1, "reactions_data": ["LAUGH"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 446, "url": "https://github.com/jasmine/jasmine/issues/446", "title": "andReturnPromise() ?", "contents": "My setup of tests becomes very bulky because of setup of promises and returning using AndReturn.\nandReturnPromise(resolve, reject) or something like that would be a nice addition that would slice my setup code.\nThanks", "createdAt": "2013-10-11T17:32:06Z", "updatedAt": "2013-11-10T06:22:17Z", "closedAt": "2013-11-10T06:22:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Dashue", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Dashue", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-10T06:22:17Z", "contents": "Thanks for the suggestion!\nI think the issue implementing something like this in Jasmine is that there's a lot of different promise pattern implementations and none of them are included in JavaScript. Although the proposal has a standardized 'then' function on the returned object/promise, a library is required to make 'andReturnPromise' work. Each library has slightly different implementations as well, like jQuery also have done/fail/always in addition to 'then' in order to more easily filter status. Users wouldn't be able to use this function if their code wanted to use the jQuery specific aspects.\nTo help slice setup code in your project, a helper function that you can call in the Jasmine andReturn might be the best way to go forward for now, until perhaps promises are part of the language!\nClosing this issue for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 447, "url": "https://github.com/jasmine/jasmine/issues/447", "title": "Feature Request: Add (official) mechanism for intercepting matcher results", "contents": "This is actually a request to preserve a (likely inadvertant) feature of 1.3.1.\nI've been using jasmine 1.3.1 for a few months now, and was exciting to see you are preparing to release jasmine 2.0. I wrote the following jasmine extension (for 1.3.1) to test the messages output by custom matchers, and wish to be able to adapt it for compatibility after jasmine 2's been released:\n(function (jasmine) {\n    beforeEach(function() {\n        expect.messageWhenExpecting = (function messageWhenExpecting(actual) {\n            expect(arguments.length).toEqual(1);\n            var expectation = expect(actual);\n            var wrapUserFacingMatcher = (function (isNot, matcherName) {\n                var wrappedMatcher = (function () {\n                    var matcherArgs = [].slice.call(arguments, 0);\n                    if (!isNot) {\n                        expectation = expectation.not;\n                    }\n                    expectation[matcherName].apply(expectation, matcherArgs);\n                    expectation = expect(actual);\n                    if (isNot) {\n                        expectation = expectation.not;\n                    }\n                    var result;\n                    var realAddMatcherResults = expectation.spec.addMatcherResult;\n                    expectation.spec.addMatcherResult = (function intercept(r) {\n                        result = r;\n                    });\n                    expectation[matcherName].apply(expectation, matcherArgs);\n                    expectation.spec.addMatcherResult = realAddMatcherResults;\n                    return (expect(result.toString()));\n                });\n                return wrappedMatcher;\n            });\n            var retVal = {not:{}};\n            var name;\n            for (name in expectation) {\n                if ((name != 'not') && ({}.toString.apply(expectation[name]) === '[object Function]')) {\n                    retVal[name] = wrapUserFacingMatcher(false, name);\n                    retVal.not[name] = wrapUserFacingMatcher(true, name);\n                }\n            }\n            return retVal;\n        });\n    });\n\n    describe(\"jasmine extension\", function() {\n        it(\"add expect.messageWhenExpecting() method\", function() {\n            expect.messageWhenExpecting(0).toEqual(1).toEqual('Expected 0 to equal 1.');\n            expect.messageWhenExpecting(0).not.toEqual(0).toEqual('Expected 0 not to equal 0.');\n        });\n    });\n})(jasmine);\nYou can see that this code relies on being able to intercept the result from matchers by replacing and restoring the expectation.spec.addMatcherResult() function. While this allows me to intercept the event it is in no way obvious or elegant and I am not advocating that support for this hack be maintained. I am asking that a supportable method to request that the next n calls to expect() have their matcherResults diverted to a user provided callback, or something similar to that.\nI have not looked at all at the 2.0.0.rc3 source yet, and this may very well have been addressed already, but I wanted to bring this to your attention before you stamp the official \"2.0.0\" stamp on the next release.\nThank you,\n-Loren", "createdAt": "2013-10-15T17:55:25Z", "updatedAt": "2014-08-26T20:16:25Z", "closedAt": "2014-08-26T20:16:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "loren-osborn", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "loren-osborn", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-01T20:17:02Z", "contents": "Custom matchers have been heavily reworked as part of the 2.0 release, and should be much easier to test in isolation now. Have a look at the custom matcher docs to see the new syntax in action.\nFor testing, the idea is that you can just call the compare function and check the result and this hack shouldn't be needed any more.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-02T16:33:42Z", "contents": "Given @slackersoft 's discussion, can we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "loren-osborn", "authorAssociation": "NONE", "createdAt": "2014-07-05T06:32:34Z", "contents": "I have some code that MAY be beneficial here. I was giving it a little polish before responding. Basically, I ported most of the project that used this a few weeks back, and and had some custom code (trying to determine how to make it the most \"fluent\") to make tests for custom marchers cleaner.\nI did run into an unrelated issue when porting to Jasmine 2.0 that I will put in a new ticket. I found no way for a test to query the name and number of describe() sections have been registered. I used this to confirm that no modules have failed to be included due to syntax errors.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:16:25Z", "contents": "Closing this for now. We can definitely take a look at a pull request, if you think you have something to make this a bit easier.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 448, "url": "https://github.com/jasmine/jasmine/issues/448", "title": "Save context of spy calls", "contents": "It would be helpful for the spies to save and expose context of their calls. I'd like to do the following:\nvar shortcut = _.bind(instance.method, instance);\nspyOn(instance, 'method');\nshortcut();\nexpect(instance.method.mostRecentCall.context).toBe(instance);\n\nto ensure that the shortcut calls the method in the appropriate context. There could also be a shortcut:\nexpect(instance.method).toHaveBeenCalledOn(instance);", "createdAt": "2013-10-16T10:51:09Z", "updatedAt": "2013-10-17T08:05:13Z", "closedAt": "2013-10-16T14:36:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hon2a", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "hon2a", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-16T14:36:52Z", "contents": "Already exists. You want spy.mostRecentCall().object (or in 2.0, something like spy.calls()[0].object).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2013-10-16T14:49:25Z", "contents": "Thanks. It'd be great to add it to the documentation. Or am I reading wrong docs @ http://pivotal.github.io/jasmine/ ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-17T04:12:24Z", "contents": "Check out http://jasmine.github.io/ - I've updated the syntax for 2.0. It's very different from 1.x, so the old doc is still missing a little bit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2013-10-17T08:05:13Z", "contents": "That's what I was looking for. Thanks a lot, man.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 449, "url": "https://github.com/jasmine/jasmine/issues/449", "title": "Broken link on the wiki page for \"A simple project\"", "contents": "Wiki page: https://github.com/pivotal/jasmine/wiki/A-simple-project\nBroken link: https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/example/SpecRunner.html", "createdAt": "2013-10-17T04:47:25Z", "updatedAt": "2013-10-17T05:07:14Z", "closedAt": "2013-10-17T05:07:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nickmccurdy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nickmccurdy", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-17T05:07:14Z", "contents": "Just updated the wiki by directing users to where they can download standalone distributions. These distributions contain SpecRunner.html.\nThanks for the find!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 451, "url": "https://github.com/jasmine/jasmine/issues/451", "title": "Change the order of nested tests displayed by the trivial reporter", "contents": "This is a small usability improvement, whose impact is greater for big test suites that experiment multiple failures.\nWhat i experience now is the following: on the trivial reporter, failures related to the more nested specs appear on top.\nSo for example in a suite like:\ndescribe(\n  A\n  describe(\n      B\n      describe(\n      C\n      D\n      E\n      F\n      )\n   )\n )\nIf all of them will fail, the failures will be sorted like so:\nC\nD\nE\nF\nB\nA\nNow, imagine the most nested define has many specs. The user may be led to fix those before, while probably an error on the topmost setup method is causing the whole suite to fail. Thus it would be much better to start from A. In order to avoid this cascade effect, i have to scroll and manually pick the topmost failing test in a nested define, it would be great if the order was simply the reverse of what is now.", "createdAt": "2013-10-18T08:54:03Z", "updatedAt": "2014-04-17T23:49:58Z", "closedAt": "2014-04-17T23:49:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danse", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "danse", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-04-17T23:49:58Z", "contents": "The trivial reporter is no more as of jasmine 2.0. The html reporter should display the specs in the order declared in the spec file.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 452, "url": "https://github.com/jasmine/jasmine/issues/452", "title": "Repoters don't mention ignored tests", "contents": "If I have a test suite with 100 tests and add one prefixed by x i.e. xit(...) the reporters still say \"executed 100 of 100 tests\". Shouldn't it be \"executed 100 of 101 tests\"?\nI think this would better communicate that there are in fact ignored tests in the suite.", "createdAt": "2013-10-22T07:37:37Z", "updatedAt": "2013-10-22T16:45:20Z", "closedAt": "2013-10-22T16:45:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TheLudd", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "TheLudd", "company": "@mediatool "}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-22T16:45:20Z", "contents": "Great, we've added a story here where you can follow up on progress for your feature request: https://www.pivotaltracker.com/story/show/59343840", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 453, "url": "https://github.com/jasmine/jasmine/issues/453", "title": "1.3.1 is missing from standalone downloads", "contents": "", "createdAt": "2013-10-22T15:16:48Z", "updatedAt": "2013-10-22T16:33:44Z", "closedAt": "2013-10-22T16:33:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tuupola", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tuupola", "company": "Taevas Ogilvy"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-22T16:33:44Z", "contents": "See #454 - this is a duplicate.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 454, "url": "https://github.com/jasmine/jasmine/issues/454", "title": "1.3.1 is missing from standalone downloads", "contents": "1.3.1 is missing from standalone downloads. This page is also linked from docs.", "createdAt": "2013-10-22T15:19:14Z", "updatedAt": "2013-10-22T16:33:44Z", "closedAt": "2013-10-22T16:17:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tuupola", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tuupola", "company": "Taevas Ogilvy"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-22T16:17:59Z", "contents": "This is a conscious decision since Github deprecated downloads. Please see the dist directory for 1.3.1", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 456, "url": "https://github.com/jasmine/jasmine/issues/456", "title": "Support matchers in waitsFor()", "contents": "I'm new to Jasmine so apologize if this has been discussed already, but I couldn't find an issue discussing it.\nI'd like to be able to use matchers/expectations directly in a waitsFor function.\nInstead of (or in addition to)\nwaitsFor(function() {\n  return someCondition === 1;\n}, \"waiting for someCondition === 1\")\n\nruns(function() {\n  expect(someCondition).toBe(1);\n});\n\nI'd like to be able to take advantage of my matchers and reduce duplication:\nwaitsFor(function() {\n  expect(someCondition).toBe(1);\n});\n\nNow instead of having to manually type my waitsFor message, the message would be the result of the failed expectation: 'Waited x seconds for 0 to be 1, but was 10'.\nOne really simple fix would be to allow matchers to return through:\nwaitsFor(function() {\n  return expect(someCondition).toBe(1);\n});\n\nYou wouldn't get the nice waitsFor message.  But despite toBe matcher returns true/false, for some reason expect().toBe() returns undefined.", "createdAt": "2013-10-28T20:08:10Z", "updatedAt": "2013-10-28T21:46:34Z", "closedAt": "2013-10-28T21:46:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "matthughes", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "matthughes", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-28T21:46:34Z", "contents": "We have deprecated runs/waitsFor in Jasmine 2.0. The syntax is now like Mocha - the it call can take an optional done function to signal that an async spec is complete.\nGiven this, we don't expect to update 1.x to support this functionality. Have you/can you try 2.0 and see if you can get desired behavior?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 457, "url": "https://github.com/jasmine/jasmine/issues/457", "title": "Documentation of available matchers is missing", "contents": "The wiki says \"Jasmine has several built-in matchers. Here are a few:\"\nWouldn't it be good to have a complete list?\nI would volunteer to write it if this seriously does not exist.", "createdAt": "2013-10-30T07:42:22Z", "updatedAt": "2013-10-30T14:03:31Z", "closedAt": "2013-10-30T14:03:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thulka", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "thulka", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-10-30T14:03:30Z", "contents": "The wiki pages are not currently maintained. I've added a notice at the top of the main wiki, and at some point we'll need to go through and remove all of the wiki info.\nPlease refer to http://jasmine.github.io for 2.0 docs, http://pivotal.github.io/jasmine for 1.3 docs.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 461, "url": "https://github.com/jasmine/jasmine/issues/461", "title": "a click on a pending spec should run it ", "contents": "I was surprised that clicking on a xit() spec from the html runner didn't run the pending test.\nThe current UI is confusing - it's hard to tell what happened when you click on a pending test from the html runner.  It could be made more clear that no were run...  But I think it would be less confusing and a handy feature to just run a pending test if it is selected explicitly.\nThe use I had in mind was creating some specs that were of the form 'create interactive debug environment'.  i.e. debugging versions of tests with extended timeouts, noisy logging, etc.   These tests would be normally disabled, but could be clicked or bookmarked to run as needed.\nWhat do y'all think?", "createdAt": "2013-11-05T00:33:53Z", "updatedAt": "2018-02-23T15:22:02Z", "closedAt": "2014-08-15T20:22:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mighdoll", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mighdoll", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "chris-orchard", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-24T19:53:47Z", "contents": "Unfortunately, this issue hasn't gotten a lot of community feedback, so I'm inclined to leave existing behavior as is. The current behavior allows all specs to behave the same way when clicked on (only focuses its run).\nDo you have any ideas on what we can do to make the current UI less confusing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-15T20:22:50Z", "contents": "I think we're going to leave this the way it is for now. Closing this issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chris-orchard", "authorAssociation": "NONE", "createdAt": "2018-02-23T15:20:20Z", "contents": "Although I don't agree with the reasoning of the original post (I believe this change would make the UI more confusing not less) I do feel it would be beneficial to have a way to re-test pending specs without having to physically take the marker off in the code.\nI feel a way to explicitly run a pending spec would be helpful so I've raised #1517 with more detail on why I think this would be useful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 463, "url": "https://github.com/jasmine/jasmine/issues/463", "title": "Feature request:  color blind friendly CSS ", "contents": "The color choices of red/green for pass/fail are not visible to red/green color blind users, such as myself.  Up to 8% of men of northern European ancestry are red/green color blind according to Wikipedia.\nBelow are the CSS rules I use to override the default.  \"Green\" traffic lights use a blue-green frequency to distinguish them from red traffic lights, and the same is true below.  In addition, the red is slightly brighter than the green, making the difference visible even to users with no color vision.  I tested this with Color Oracle ( http://colororacle.org/ ) where it appears (to me) that people with protanopea might still find the colors ambiguous, so I added \"font-weight: bold\" to \"failed.\"  This was tested on an IPS LED monitor with reasonable (to me) color calibration.\n#HTMLReporter .summary .specSummary.passed a {\n   color: #007069;\n}\n\n#HTMLReporter .summary .specSummary.failed a {\n    color: #ca3a11;\n    font-weight: bold;\n}", "createdAt": "2013-11-11T18:21:48Z", "updatedAt": "2014-01-30T21:37:53Z", "closedAt": "2013-11-12T23:57:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dleppik", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "dleppik", "company": "Vocal Laboratories, Inc."}, {"login": "tjarratt", "company": "Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "tjarratt", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T05:30:44Z", "contents": "\ud83d\udc4d this is a pretty good idea that would improve accessibility.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T17:26:41Z", "contents": "Above is an example of what these colors would look like applied to the current runner. I didn't add the bold rule as I wasn't able to find the exact DOM that you wanted to apply these colors to, but I think this captures the general intent. Still has that red/green feel, but if it's more accessible for color-blind folks, I think that's a win.\nStory added here: https://www.pivotaltracker.com/story/show/60613086, but happy to take a pull if you have time to put it together.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dleppik", "authorAssociation": "NONE", "createdAt": "2013-11-12T20:27:44Z", "contents": "I'm afraid I don't have time to do a pull, but the line I overrode was line 44 in jasmine.css (release 1.3.0):\n#HTMLReporter .summary .specSummary.passed a {\ncolor: #5E7D00;\n}\n#HTMLReporter .summary .specSummary.failed a {\ncolor: #B03911;\n}\nThanks.\n-Dave\n\nOn Nov 12, 2013, at 11:26 AM, Rajan Agaskar notifications@github.com wrote:\n\nAbove is an example of what these colors would look like applied to the current runner. I didn't add the bold rule as I wasn't able to find the exact DOM that you wanted to apply these colors to, but I think this captures the general intent. Still has that red/green feel, but if it's more accessible for color-blind folks, I think that's a win.\nStory added here: https://www.pivotaltracker.com/story/show/60613086, but happy to take a pull if you have time to put it together.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Leppik                                     http://www.leppik.net/david/\nDavid@Leppik.net\n\"As a computer shrinks, the gravitational force that its components exert on one another becomes stronger and eventually grows so intense that no material object can escape.\"\n-- Scientific American, Nov 2004, p. 56", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-12T23:57:39Z", "contents": "We've got the data in a Tracker story, so I'll close this for now. We'll prioritize it after our 2.0 release.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 464, "url": "https://github.com/jasmine/jasmine/issues/464", "title": "expect() should accept an optional failureMessage like junit ", "contents": "Hey guys,\nI see that many people have talked about having a way in jasmine to accept failure message on expect() api but to my knowledge jasmine doesn't have that feature yet.\nI came up with a backward-compatible solution. See this commit: aatishm@73dce81\n(It works in my projects and soon I would like to contribute to Jasmine)\nWhat do you guys think about it?\nThanks!", "createdAt": "2013-11-11T19:29:59Z", "updatedAt": "2013-12-19T17:36:41Z", "closedAt": "2013-12-19T17:36:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aatishm", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "aatishm", "company": null}, {"login": "just-boris", "company": null}, {"login": "wolframkriesing", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "just-boris", "authorAssociation": "NONE", "createdAt": "2013-11-20T11:11:44Z", "contents": "Like it! I want to see more meaningful message", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wolframkriesing", "authorAssociation": "NONE", "createdAt": "2013-12-19T09:19:30Z", "contents": "imho getting more meaningful messages should be achieved by more meaningful matchers, which, I think, does also lead to better tests. try https://github.com/uxebu/jasmine-matchers for it or read more reasoning about it here http://uxebu.com/blog/2013/01/08/make-tests-read-like-a-book/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-19T17:36:41Z", "contents": "I agree completely with Wolf here. Putting the knowledge of failure in your test names is much easier to do and helps you organize your suites better. Said the other way, having failure messages in your expectations makes the suite harder to read.\nThat said, feeling the pain of string duplication (between names and messages) is necessary to change the behavior in your own suite. So we've talked about this on and off. We'd be open to a pull request with something well-formatted.\n@aatishm - there are a few problems with that commit:\n\nIt's not against Jasmine 2.0. We're not going to take pulls against old versions\nThere are no tests. We don't take pull requests without tests or with tests that break the build.\n\nFeel free to take another cut at this and resubmit. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 467, "url": "https://github.com/jasmine/jasmine/issues/467", "title": "Support npm", "contents": "Please make 1.3 installable via npm.\nCurrently the only way of installing jasmine is either by source inclusion or by installing one of the many jasmine-* packages that include the source of jasmine.", "createdAt": "2013-11-14T08:45:46Z", "updatedAt": "2013-11-15T05:10:12Z", "closedAt": "2013-11-15T05:10:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cburgmer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cburgmer", "company": "ThoughtWorks"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-11-15T05:10:12Z", "contents": "We have lots of official Node support happening once 2.0 ships. This story is for the jasmine-core npm.\nClosing as this feature request is already on our roadmap.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 471, "url": "https://github.com/jasmine/jasmine/issues/471", "title": "Is Jasmine not compatible with this HTML5 call?", "contents": "I have this inside my file.js..\nwindow.addEventListener(\"message\", this.receiveMessage.bind(this), false);\nWhich Jasmine returns as..\nFailure/Error: TypeError: 'undefined' is not a function (evaluating 'this.receiveMessage.bind(this)') in http://127.0.0.1:53048/assets/models/file.js?body=1 (line 12)\n\nSo within Jasmine I did a log of this broken down, and the following work properly..\nwindow\nwindow.addEventListener\nwindow.addEventListener(\"message\", this.receiveMessage(), false);\nBut what breaks is when I .bind(this) to receiveMessage which is required so that I can still reference this from within the method..", "createdAt": "2013-12-04T14:34:50Z", "updatedAt": "2013-12-04T15:00:09Z", "closedAt": "2013-12-04T15:00:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gotoAndBliss", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gotoAndBliss", "company": "Seva Life"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-04T14:48:59Z", "contents": "I'm not sure I understand how this is an issue with Jasmine.\nCan you provide a failing test and a description of the behavior you expect as an example?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 472, "url": "https://github.com/jasmine/jasmine/issues/472", "title": "Unknown behavior while testing async events with Jasmine 2.0 rc5", "contents": "I am trying to write test cases for video tag events with jasmine, earlier i have tried the same with 1.3.1 which works fine but handling of async events was cumber-some,\nSo tried jasmine 2.0 rc5 with done() callbacks for async (which was simpler). When i execute my test case with Chrome Version 31.0.1650.57 m, some times the test case gives a weird behavior. It keeps executing recursively. Following is the spec:\ndescribe(\"Test Video\", function() {\nbeforeEach(function(done) {\nsetTimeout(function() {\ndone();\n}, 1);\n});\nit(\"check the loadstart event\", function(done) {\nvar vid = document.getElementById(\"vidEle\");\nvid.addEventListener('loadstart', function() {\ndone();\n});\nvid.src = \"video/Malang.mp4\";\n});\nit(\"check the progress event\", function(done) {\nvar vid = document.getElementById(\"vidEle\");\nvid.addEventListener('progress', function() {\ndone();\n});\nvid.src = \"video/Malang.mp4\";\n});\nit(\"check the canplay event\", function(done) {\nvar vid = document.getElementById(\"vidEle\");\nvid.addEventListener('loadstart', function() {\ndone();\n});\nvid.src = \"video/Malang.mp4\";\n});\nit(\"check the loadstart event\", function(done) {\nvar vid = document.getElementById(\"vidEle\");\nvid.addEventListener('loadstart', function() {\ndone();\n});\nvid.src = \"video/Malang.mp4\";\n});\n});\nIs there any thing i am doing wrong with the jasmine 2.0 (note that it is working jasmine 1.3.1 version)?\ni have attached a screen capture of the problem below:", "createdAt": "2013-12-04T18:31:38Z", "updatedAt": "2013-12-09T17:16:51Z", "closedAt": "2013-12-09T17:13:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "krsacme", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "krsacme", "company": "Red Hat"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-05T14:59:49Z", "contents": "Can you try master? We had a couple of commits around timeouts & exceptions, wonder if this will help your particular issue. Looks fine to me otherwise, although the nesting of async's in before/it is interesting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "krsacme", "authorAssociation": "NONE", "createdAt": "2013-12-09T15:44:17Z", "contents": "@ragaskar:\nI have tried the master and found the results to be same.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "krsacme", "authorAssociation": "NONE", "createdAt": "2013-12-09T17:13:36Z", "contents": "I have found the problem, actually in my test case, my intention was to add spec for each player event. But I haven't created video element and destroyed it for each spec. After changing the code to below, it is working fine.\ndescribe(\"Test Video\", function() {\n    beforeEach(function() {\n        document.getElementById('vidContainer').innerHTML = \"<video id='vidEle' autoplay controls height='50' width='50'></video>\";\n    });\n    afterEach(function() {\n        document.getElementById('vidContainer').innerHTML = \"\";\n    });\n    it(\"check the loadstart event\", function(done) {\n        var vid = document.getElementById(\"vidEle\");\n        vid.addEventListener('loadstart', function() {\n            done();\n        });\n        vid.src = \"video/Malang.mp4\";\n    });\n    it(\"check the progress event\", function(done) {\n        var vid = document.getElementById(\"vidEle\");\n        vid.addEventListener('progress', function() {\n            done();\n        });\n        vid.src = \"video/Malang.mp4\";\n    });\n    it(\"check the playing event\", function(done) {\n        var vid = document.getElementById(\"vidEle\");\n        vid.addEventListener('playing', function() {\n            done();\n        });\n        vid.src = \"video/Malang.mp4\";\n    }); \n});\nThanks for your support, i am closing this issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 475, "url": "https://github.com/jasmine/jasmine/issues/475", "title": "Throwing `undefined` causes jasmine to crash", "contents": "I ran into a situation today where a failed spec caused the jasmine library to throw an uncaught error.\nI'm testing out an object which uses a Validator helper class. The Validator is supposed to provide an Error object if the target object does not pass validation.\nI had a spec with something like this:\n// ...\nModel.prototype.set = function(attr, val) {\n  if (!this.validator_.isValid(attr, val)) {\n    throw this.validator_.getLastError();\n  }\n  // ...\n}\n// ...\n\nit('should fail validation', function() {\n  var object = new Model();\n  expect(function() {\n    object.set('aNumber', 'aString');\n  }).toThrow();\n});\nThe problem I ran into was that my objects Validator failed to provide a error object, thus my object attempted to throw undefined. However, the spec did not fail -- instead I got a Uncaught Error from jasmine:\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: { stack: e.stack }  // ERROR: e does not have a stack property\n  });\n  this.results_.addResult(expectationResult);\n};\nIt would have been preferable to get some sort of spec failure output from jasmine. You could either wrap the fail method in a try/catch, or check that e is defined before creating the ExpectationResult object.\nI realize this is a fringe case, but I thought I'd put it out there :)", "createdAt": "2013-12-12T18:52:06Z", "updatedAt": "2014-09-10T21:24:43Z", "closedAt": "2013-12-13T05:31:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "eschwartz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "eschwartz", "company": "Optum Technology"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-13T05:31:30Z", "contents": "Thanks for bringing this up!\nThis code does seem broken in Jasmine 1.3.1, but it is fixed in Jasmine 2.0.0.rc5. I'll close this issue out, but please feel free to reopen if there's further problems surrounding throwing undefined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eschwartz", "authorAssociation": "NONE", "createdAt": "2013-12-13T15:18:43Z", "contents": "Thanks, good to know!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 476, "url": "https://github.com/jasmine/jasmine/issues/476", "title": "Confusing documentation links", "contents": "Hi, for starters, you guys do great work - Jasmine is awesome and the changes in 2.0 look pretty reasonable to me.\nI just tried to set up a new project with Jasmine testing though, and a couple of things really confused me:\nOn http://jasmine.github.io/, the 1.3 text should link to http://pivotal.github.io/jasmine/  - pull request at jasmine/jasmine.github.io#3\nThe \"Standard Release\" download links on both of those documentation pages point to  https://github.com/pivotal/jasmine/downloads, but the up-to-date packages are actually at https://github.com/pivotal/jasmine/tree/master/dist - I think you should consolidate those into one, preferably the GH downloads page. (The dist/ folder tries to give you a preview of the file, and you have to know to click the \"raw\" link to actually download it, whereas the downloads page is much more straightforward.)\nLastly, searching for \"pivotal labs jasmine\", the top link (on duck duck go) is http://jasmine.pivotallabs.com/ - which is a copy of your home page. That should redirect somewhere useful, or at least give an error.\nSorry if this comes across as nit-picky - I really do love your project, I'm just trying to help it be easier for a new (or old) user to get up to speed :)", "createdAt": "2013-12-17T17:03:38Z", "updatedAt": "2014-03-17T01:37:51Z", "closedAt": "2014-03-17T01:37:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nfriedly", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nfriedly", "company": "@tanium"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-17T20:28:30Z", "contents": "Thanks for your help getting this ironed out. It's certainly important and not nit-picky!\nHere's the changes I've made so far to remedy these issues:\n\nMerged in jasmine/jasmine.github.io#3 to link back to 1.3 documentation\nRemoved all the downloads from the Github downloads page (since this page is deprecated); moved them all instead into the dist/ directory. Maybe to get around the \"raw\"/preview issue, we can adopt Github releases since that's what Github suggests to replace the downloads page\nUpdated both the jasmine.github.io and pivotal.github.io/jasmine standalone distribution links to point to the /dist directory\n\nI believe this solves most of the above issues except for the top result being jasmine.pivotallabs.com. I'm not really sure the context/history behind why that page exists. I defer to @infews to give us some context and hopefully a solution and then we can close this issue out!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nfriedly", "authorAssociation": "NONE", "createdAt": "2013-12-17T20:30:04Z", "contents": "Awesome, thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-17T01:37:51Z", "contents": "jasmine.pivotallabs.com no longer exists, so I'll close this out. Thanks for the feedback.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 477, "url": "https://github.com/jasmine/jasmine/issues/477", "title": "Problem with RequireJS", "contents": "I have a requireJS module currently unit tested with Mocha and Chai. But I am going to use Angular for my project so I tried to unit test with Jasmine 2.0. but having a hard time get it to work.\nI follow the post on http://kilon.org/blog/2012/08/testing-backbone-requirejs-applications-with-jasmine/ and included the code bellow in my SpecRunner.js but I keep getting this exception in function HtmlReporter(options) with options is undefined.\nrequire(['jasmine-boot'], function(jasmine){\nvar jasmineEnv = jasmine.getEnv();\njasmineEnv.updateInterval = 1000;\n\nvar htmlReporter = new jasmine.HtmlReporter(); // get options is undefined\n\njasmineEnv.addReporter(htmlReporter);\n\njasmineEnv.specFilter = function(spec) {\nreturn htmlReporter.specFilter(spec);\n};\n\nvar specs = [];\nspecs.push(\"common/validator.spec\");\n\nrequire(specs, function(){\n    jasmineEnv.execute();\n});\n\n})\nHere is the code need to test (common/validator.js)\ndefine(function(require) {\nvar v = {};\nvar validateEmail = function (email) {\nvar email_verifier = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/;\nreturn email_verifier.test(email);\n}\nv.validateEmail = validateEmail;\nreturn v;\n});\nHere is my simple spec (common/validator.spec.js)\nrequire(['common/Validator'], function(VLDT) {\ndescribe('Validator Module', function () {\ndescribe('validateEmail', function () {\nit('should be return true with abcd@gmail.com', function () {\nexpect(VLDT.validateEmail(\"abcd@gmail.com\")).toBe(true);\n});\n});\n});\n});\nBellow is partial of my RequireJS config:\n/**\n\nRequireJS configuration for unit testing\nExtend and override require.vars.js\n*/\n\n\"use strict\";\n// throw error if current config not exists\nif (!require) throw(\"require does not exists\");\n// set baseUrl for unit testing\n// require.baseUrl = \"../../web/test\";\n// set paths for unit testing\n// use libraries from local server instead of CDN\nrequire.paths = require.paths || {};\nrequire.paths['test'] = \"../test\";\nrequire.paths['jasmine'] = \"../libs/jasmine-2.0/jasmine\";\nrequire.paths['jasmine-html'] = \"../libs/jasmine-2.0/jasmine-html\";\nrequire.paths['jasmine-boot'] = \"../libs/jasmine-2.0/boot\";\n// set shim for unit testing\n// define dependencies for libraries\nrequire.shim = require.shim || {};\nrequire.shim['jasmine'] = {\nexports: 'jasmine'\n};\nrequire.shim['jasmine-html'] = {\ndeps: ['jasmine'],\nexports: 'jasmine'\n};\nrequire.shim['jasmine-boot'] = {\ndeps: ['jasmine', 'jasmine-html'],\nexports: 'jasmine'\n};\nPlease help!\nThanks", "createdAt": "2013-12-18T01:36:44Z", "updatedAt": "2014-03-05T17:53:56Z", "closedAt": "2013-12-18T02:35:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vinngn", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "vinngn", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "erikringsmuth", "company": "Amazon Web Services"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "gaelazzo", "company": "Tempo S.r.l."}], "comments_count": 10, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2013-12-18T02:35:00Z", "contents": "That blog post seems to work for Jasmine 1.3.1. I'm not sure if there's any blog posts on how to do this for 2.0 yet, given how new it is. I'll try to point you in the right direction in the meantime, however.\nIn Jasmine 1.3.1, constructing a new HtmlReporter did not require any arguments whereas in 2.0 it requires an option object with a couple of functions defined. Essentially, the SpecRunner.js from that blog post seems to have the same intent as boot.js in 2.0. I think you can forego the SpecRunner.js and instead customize your boot.js. I believe the main change in boot.js, would be to replace where it binds to window.onload and then starts executing specs. Instead you would use\n $(function(){ // or some other 'ready' function if you're not using jQuery, but the blog post was\n    require(specs, function(){\n      jasmineEnv.execute(); // or 'env' as it's called in our boot.js\n    });\n  });\n\nto wire up the spec execution. Here is documentation that explains all of what boot.js does side by side with the actual implementation. You'll see that how we now instantiate the HtmlReporter has changed.\nHopefully this gets you on your way. I'll close this issue as I don't yet think there's something broken in Jasmine 2.0 that's prohibiting RequireJS usage. If you do get it working/have other questions, it'd be great to hear about, since other Jasmine/RequireJS users may also find this useful. The Jasmine mailing list: jasmine-js@googlegroups.com would probably be a good place for this discussion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vinngn", "authorAssociation": "NONE", "createdAt": "2013-12-18T03:34:06Z", "contents": "Thank you Sheel for your quick response.  I will follow the direction and\nsee what I got.\nBest,\nVin\nOn Dec 17, 2013 6:35 PM, \"Sheel Choksi\" notifications@github.com wrote:\n\nThat blog post seems to work for Jasmine 1.3.1. I'm not sure if there's\nany blog posts on how to do this for 2.0 yet, given how new it is. I'll try\nto point you in the right direction in the meantime, however.\nIn Jasmine 1.3.1, constructing a new HtmlReporter did not require any\narguments whereas in 2.0 it requires an option object with a couple of\nfunctions defined. Essentially, the SpecRunner.js from that blog post\nseems to have the same intent as boot.js in 2.0. I think you can forego\nthe SpecRunner.js and instead customize your boot.js. I believe the main\nchange in boot.js, would be to replace where it binds to window.onloadand then starts executing specs. Instead you would use\n$(function(){ // or some other 'ready' function if you're not using jQuery, but the blog post was\nrequire(specs, function(){\njasmineEnv.execute(); // or 'env' as it's called in our boot.js\n});\n});\nto wire up the spec execution. Here is documentationhttp://jasmine.github.io/2.0/boot.htmlthat explains all of what\nboot.js does side by side with the actual implementation. You'll see that\nhow we now instantiate the HtmlReporter has changed.\nHopefully this gets you on your way. I'll close this issue as I don't yet\nthink there's something broken in Jasmine 2.0 that's prohibiting RequireJS\nusage. If you do get it working/have other questions, it'd be great to hear\nabout, since other Jasmine/RequireJS users may also find this useful. The\nJasmine mailing list: jasmine-js@googlegroups.com would probably be a\ngood place for this discussion.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/477#issuecomment-30811611\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erikringsmuth", "authorAssociation": "NONE", "createdAt": "2013-12-31T03:06:45Z", "contents": "I found a workaround for this until someone re-writes boot.js. Set up your specRunner.js like this. The trick is that you need to call window.onload() once you've loaded boot.js and all of your specs. Currently boot.js adds it's initializers to window.onload() but it has already been called by the time require.js loads it's Javascript.\n/*global require*/\n(function() {\n  'use strict';\n\n  // Configure RequireJS to shim Jasmine\n  require.config({\n    baseUrl: '..',\n    paths: {\n      'jasmine': 'tests/lib/jasmine-2.0.0/jasmine',\n      'jasmine-html': 'tests/lib/jasmine-2.0.0/jasmine-html',\n      'boot': 'tests/lib/jasmine-2.0.0/boot'\n    },\n    shim: {\n      'jasmine': {\n        exports: 'jasmine'\n      },\n      'jasmine-html': {\n        deps: ['jasmine'],\n        exports: 'jasmine'\n      },\n      'boot': {\n        deps: ['jasmine', 'jasmine-html'],\n        exports: 'jasmine'\n      }\n    }\n  });\n\n  // Define all of your specs here. These are RequireJS modules.\n  var specs = [\n    'tests/spec/routerSpec'\n  ];\n\n  // Load Jasmine - This will still create all of the normal Jasmine browser globals unless `boot.js` is re-written to use the\n  // AMD or UMD specs. `boot.js` will do a bunch of configuration and attach it's initializers to `window.onload()`. Because\n  // we are using RequireJS `window.onload()` has already been triggered so we have to manually call it again. This will\n  // initialize the HTML Reporter and execute the environment.\n  require(['boot'], function () {\n\n    // Load the specs\n    require(specs, function () {\n\n      // Initialize the HTML Reporter and execute the environment (setup by `boot.js`)\n      window.onload();\n    });\n  });\n})();", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T16:18:08Z", "contents": "Calling window.onload twice seems wrong.\nWe separated out initialization code into boot.js to make it simpler to have different boot's for different environments. Is it possible to re-write this as a common-js-boot.js that calls the code in onload only when ready? Having such a file available on a blog/gist/repo would be very helpful to the community.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erikringsmuth", "authorAssociation": "NONE", "createdAt": "2014-01-07T02:36:50Z", "contents": "Yep, calling window.onload again is bad. I spent an hour and re-wrote boot.js to be an AMD module. I have a repo here https://github.com/erikringsmuth/jasmine2-amd-specrunner.\nIt's still not pretty due to the way you have to set up all of the paths and shims but it works. This could be a starting point to work off of though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-10T04:54:48Z", "contents": "@erikringsmuth Thanks for making this repo!\nJust one note from quickly browsing the code, it seems that you've kept the Jasmine globals (it, describe, etc.) out of boot and local to each spec file (pull them off of env as they're needed). This might be slightly against user expectations in which their specs would fail without this extra code. But as you've said, it seems like a good starting point to work off of.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erikringsmuth", "authorAssociation": "NONE", "createdAt": "2014-01-10T23:38:49Z", "contents": "@sheelc I've got another idea that I put in the amd-interface branch https://github.com/erikringsmuth/jasmine2-amd-specrunner/tree/amd-interface. I split every function on the interface into it's own module. Using it looks like this:\ndefine([\n  \"amd/describe\",\n  \"amd/it\",\n  \"amd/expect\"\n], function(describe, it, expect) {\n  \"use strict\";\n\n  describe(\"each method on the interface\", function() {\n    it(\"should have it's own module\", function() {\n      expect(describe).toBeDefined();\n      expect(it).toBeDefined();\n      expect(expect).toBeDefined();\n    });\n  });\n});\nThis looks a little cleaner and it avoids globals.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-11T01:35:32Z", "contents": "We're not AMD \"people\" (which is why we are leaving this to the community).\nIs it convention that every spec file would have to declare all of these dependencies?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erikringsmuth", "authorAssociation": "NONE", "createdAt": "2014-01-11T07:40:41Z", "contents": "Yes, every file should list all of it's dependencies. One of the main ideas behind AMD is that you declare all of your dependencies and avoid the use of globals except for require and define. For specs this means you should either inject jasmine and call it like jasmine.describe or inject each function like describe, it, expect, etc. It adds some boilerplate to every module but it makes easy to tell what you're working with. Never using globals is a beautiful thing!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gaelazzo", "authorAssociation": "NONE", "createdAt": "2014-03-05T17:53:56Z", "contents": "I've found another way to get it work.\nI noticed that it'necessary that boot must be executed BEFORE every Spec file, but the onload function inside it must AFTER everything have been loaded.\nSo I modified the file boot.js as\ndefine(['jasmine', 'jasmine-html'], function () {\nreturn function () {\n>> here the code of the original boot.js\nwith the section window.onload=.. commented out\n                              return function () {\n                                        htmlReporter.initialize();\n                                        env.execute();\n                                }\n\n}\n\nand then I called it with\nrequire([ 'jasmine', 'jasmine-html', 'jasmine-boot'], function (x, y, boot) {\nvar start = boot();\nvar specs = [];\nspecs.push('datasetSpec');\nrequire(specs, function () {\nstart();\n});\n});\nin the main-test.js\nfor completeness, my requirejs.config is\nrequirejs.config({\napp_name: \"HScript foundation\",\n// Karma serves files from '/base'\nbaseUrl: '',\n\npaths: {\n    'sqlformatter': 'js/app/sqlformatter',\n    'dataset' : 'js/app/dataset',\n    'dataquery': 'js/app/dataquery',\n    'datasetSpec' : 'spec/datasetSpec',\n    'test': 'spec',\n    'app' : 'js/app',\n    'lodash': 'node_modules/lodash/lodash',\n    'jasmine': 'res/jasmine/lib/jasmine-2.0.0/jasmine',\n    'jasmine-html': 'res/jasmine/lib/jasmine-2.0.0/jasmine-html',\n    'jasmine-boot': 'res/jasmine/lib/jasmine-2.0.0/boot'\n},\n\nshim: {\n    'lodash': {\n        exports: '_'\n    },\n    jasmine: {\n        exports: 'jasmine'\n    },\n    'jasmine-html': {\n        deps: ['jasmine'],\n        exports: 'jasmine-html'\n    }\n},\n\nexclude: [\n    'my.conf.js',\n    'js/app/testApp.js'\n]\n// ask Require.js to load these files (all our tests)\n//deps: tests,\n\n// start test run, once Require.js is done\n// callback: window.__karma__.start\n\n});\nand the specrunner.html doesn't  include any of jasmine file and neither any spec file.\nHope this help, best regards", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 480, "url": "https://github.com/jasmine/jasmine/issues/480", "title": "Data Driven Testing", "contents": "Following the principles of DRY, it would be great if jasmine offered support for writing tests in a data-driven manner.\nThis is particularly useful for things like validation helpers, where you want to run a battery of different values against it, and assert that they're either valid or not.\nIt appears that this has already been blogged about, and even implemented it, but it would be nice to see this in the core.", "createdAt": "2013-12-21T12:15:04Z", "updatedAt": "2014-08-06T19:54:50Z", "closedAt": "2014-08-06T19:54:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "PeterJCLaw", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "PeterJCLaw", "company": "@thread "}, {"login": "dfkaye", "company": null}, {"login": "gburghardt", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "dfkaye", "authorAssociation": "NONE", "createdAt": "2014-01-14T18:06:52Z", "contents": "see my slightly different syntax for ddt in this project -- https://github.com/dfkaye/jasmine-where", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gburghardt", "authorAssociation": "NONE", "createdAt": "2014-02-06T18:35:57Z", "contents": "I also found this: Jasmine Data Provider. I kind of like the syntax.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gburghardt", "authorAssociation": "NONE", "createdAt": "2014-02-21T15:16:26Z", "contents": "I discovered the Jasmine Data Provider is not compatible with Jasmine 2.0. I've forked master and am working on this. It would support data driven tests like this:\nall(\"blank values are invalid\", [ \"\", \" \", \"\\t\", \" \\t\\n\", \"\\n\", null ], function(x) {\n    expect(isBlank(x)).toBe(true);\n});\nYou can specify multiple arguments:\nall(\"foo\", [ [1,2], [3,4] ], function(x, y) {\n    ...\n});\nAnd do asynchronous tests:\nall(\"foo\", [1, 2, 3], function(x, done) {\n    setTimeout(function() {\n        ...\n        done();\n    }, 500);\n});\nIt would get expanded into multliple it's:\nfoo (Variant #0 <1>)\nfoo (Variant #1 <2>)\nfoo (Variant #2 <3>)\n\nAnd of course you could mark them all pending:\nxall(\"foo\", [ ... ], function(x) {\n    ...\n});\nA pull request should be coming up in the next few days.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dfkaye", "authorAssociation": "NONE", "createdAt": "2014-02-21T17:37:04Z", "contents": "just fyi - I've deprecated jasmine-where in favor of this instead -- https://github.com/dfkaye/where.js -- so that it's more agnostic about which test runner you're using (mocha, jasmine, qunit, tape...).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gburghardt", "authorAssociation": "NONE", "createdAt": "2014-02-26T17:07:25Z", "contents": "My pull request was rejected. I've created this as a plugin for Jasmine instead if anyone is interested:\nJasmine Data Driven Tests", "reactions_count": 2, "reactions_data": ["CONFUSED", "CONFUSED"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-06T19:54:50Z", "contents": "Closing this, given that there is a plugin to provide this functionality. Also see the conversation in #527", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 483, "url": "https://github.com/jasmine/jasmine/issues/483", "title": "Feature Request: Allow tests to specify their own timeout as an optional third parameter", "contents": "Sometimes, it's useful for a particular spec to have a different timeout from the default. At the moment (in 2.0), all timeouts are tied to jasmine.DEFAULT_TIMEOUT_INTERVAL. Many adapters and other implementations allow specifying a per-spec timeout as a third interval:\nit('should fail if this takes longer than 50 ms', function() {\n  // your test\n}, 50);\nThis is something of a regression from 1.3, since that used to allow 'waitsFor' to specify a timeout per test.", "createdAt": "2013-12-26T22:31:47Z", "updatedAt": "2014-12-02T20:37:47Z", "closedAt": "2014-09-26T05:33:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 10, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "wardbell", "company": "IdeaBlade"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "pvoisin", "company": null}, {"login": "marcagas", "company": "Friendster"}, {"login": "kthblmfld", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "andyperlitch", "company": "Cisco"}, {"login": "jscissr", "company": null}], "comments_count": 19, "comments_data": [{"authorLogin": "wardbell", "authorAssociation": "NONE", "createdAt": "2014-01-07T06:47:45Z", "contents": "How do I vote this up?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-07T07:31:53Z", "contents": "Hmm interesting. It does seem to be some functionality lost from 1.3 with the move to 'done' callbacks. To be fully consistent if adding this feature, we would need the same extra argument for beforeEach and afterEach as well as it.\nIn the meantime, to help unblock angular/protractor#362, maybe setting and then restoring jasmine.DEFAULT_TIMEOUT_INTERVAL in a beforeEach/afterEach can work? Or if it's needed in several places, perhaps customizing boot.js to have it take up to three arguments would be acceptable?\nCustomizing boot.js would mean replacing the current it with something like the following:\nit: function(desc, func, timeout) {\n  if (timeout != void 0) {\n    var wrappedFn = function(done) { // passing a timeout means we're dealing with an async spec\n      var originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = timeout;\n      try {\n        func.call(this, done);\n      } finally {\n        jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;\n      }\n    }\n\n    return env.it(desc, wrappedFn);\n  }\n\n  return env.it(desc, func);\n},", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2014-01-10T22:01:48Z", "contents": "@sheelc Thanks for the response. I'll try the boot.js  jasmine.DEFAULT_TIMEOUT_INTERVAL patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wardbell", "authorAssociation": "NONE", "createdAt": "2014-01-11T18:59:43Z", "contents": "Yes, I was going to do something like this too. To be consistent, the signature should really be\nfunction(desc, func, timeoutText, timeoutMs) \n\nand follow same pattern for beforeEach and afterEach\nOf course we're all hoping for v.2.1 to incorporate this API.\nWe really DO care about this. Cheers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-11T23:12:33Z", "contents": "Ah right, the old waitsFor syntax used to take a timeout message as well. Thanks for pointing that out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pvoisin", "authorAssociation": "NONE", "createdAt": "2014-01-22T18:54:39Z", "contents": "Having lost that between jasmine 1.X and 2.0 is particularly problematic...\nAlso, fixing it manually in boot.js or runner itself won't let grunt-contrib-jasmine to work properly.\nLike @wardbell I would would that one up if any such feature was available!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marcagas", "authorAssociation": "NONE", "createdAt": "2014-02-19T01:51:17Z", "contents": "+1 for waitsFor method. Please reconsider it on your next release. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kthblmfld", "authorAssociation": "NONE", "createdAt": "2014-02-20T22:45:33Z", "contents": "+1 This would be most useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2014-06-11T23:54:22Z", "contents": "Hi @sheelc sorry for the delay, finally got around to trying this. Unfortunately, the workaround you've described doesn't work, because the timeouts are all set in Spec.prototype.execute, so if the spec tries to change the timeout from inside itself, it's too late.\nAlternatively, if we try to set jasmine.DEFAULT_TIMEOUT_INTERVAL when it('foo', bar, 200) is called, it's too early, and it changes the timeout for all specs.\nAnyone have any workaround methods?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2014-06-17T22:52:24Z", "contents": "I'd be happy to work on a PR to add this functionality. Any chance that would be accepted?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-18T02:56:12Z", "contents": "Ah sorry about that.\nI'll have to defer to @infews to see if this functionality should be added to Jasmine. Any thoughts, Davis?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:15:34Z", "contents": "I'd like to see this @juliemr. Take a crack at it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2014-06-25T01:45:09Z", "contents": "I think the cleanest way to do this is the following:\n\nInstead of passing around arrays of functions for beforeFns, afterFns etc, the QueueRunner and everything that works with it should pass around tasks, which are objects with fn and timeout properties. This also leaves open the possibility for adding other properties to the task later, like a description of what the timeout was waiting for. Sound like an OK design?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-25T03:51:30Z", "contents": "We have a branch where we're working on beforeAll/afterAll. @sheelc and @slackersoft can comment further, but it should be even simpler to add this functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-26T05:06:54Z", "contents": "The branch is located here: https://github.com/pivotal/jasmine/tree/before\nBasically as we started working on beforeAll/afterAll, we also found that the implementation needed what you are proposing (wrapping up the function as an object with 'fn' and 'timeout' properties). I think we made the timeout a function instead of a raw value...although off the top of my head I can't really remember why.\nAnyways, we just wanted to mention the branch since there might be a lot of code already changed to support this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-06-26T05:11:16Z", "contents": "I seem to remember the function being in case the jasmine.DEFAULT_TIMEOUT_INTERVAL during the run (say in a beforeEach for the spec), that we would get the correct value at the point at which we started executing the function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-26T05:18:25Z", "contents": "Ah right! Otherwise everyone would have the same DEFAULT_TIMEOUT_INTERVAL. Nice remembering.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "andyperlitch", "authorAssociation": "NONE", "createdAt": "2014-07-23T16:26:56Z", "contents": "+1!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jscissr", "authorAssociation": "NONE", "createdAt": "2014-12-02T20:37:47Z", "contents": "Shouldn't the timeout param also be added in src/core/requireInterface.js so that it can be actually used?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 484, "url": "https://github.com/jasmine/jasmine/issues/484", "title": "Accidentally created issue delete me", "contents": "", "createdAt": "2013-12-26T23:56:41Z", "updatedAt": "2013-12-26T23:59:17Z", "closedAt": "2013-12-26T23:59:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Tecuya", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Tecuya", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 485, "url": "https://github.com/jasmine/jasmine/issues/485", "title": "Skewed images on introduction page in IE", "contents": "The svg images on the documentation introduction page appear skewed on IE 11 (and possibly other versions of Internet Explorer):\n\nI ran into an issue similar to this and it ended up being due to a missing viewBox parameter in the svg - perhaps that's what's going on here. Alternatively, the size of the svg could simply be changed so it doesn't need to be scaled.", "createdAt": "2013-12-27T03:49:49Z", "updatedAt": "2014-01-05T23:54:21Z", "closedAt": "2014-01-05T23:54:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "theodorejb", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "theodorejb", "company": "Netgain"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-05T23:54:21Z", "contents": "Thanks for bringing this up. We were pretty not IE compatible at all. I added svg fallbacks for IE 8 and fixed the scaling issues in IE 9+. This browserstack run (not sure how long that link will work for) seems to indicate we're doing alright now -- I'll close this issue out.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 487, "url": "https://github.com/jasmine/jasmine/issues/487", "title": "Jasmine HTML reporter not honouring reporting dom element", "contents": "I found a problem with the jasmine.HtmlReporter class. When you pass a HTML document element it should be using that to append the results into. However it was assuming that document was always passed.\nI have changed this to check that the document element has a body or not to determine which element location it should append the report to.", "createdAt": "2013-12-30T04:01:09Z", "updatedAt": "2013-12-30T04:56:57Z", "closedAt": "2013-12-30T04:56:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "damienwhaley", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "damienwhaley", "company": "MYOB, Whalebone Studios"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 491, "url": "https://github.com/jasmine/jasmine/issues/491", "title": "Feature Request: Sourcemap support", "contents": "It would be nice if the original line number of the error is displayed when developing in coffeescript.\nFor example for this error:\nTypeError: entityCollection.get(...) is undefined in http://somehost:[someport]/somepath/SomeSpec.js (line 37)\nIt can be something like this (reading the sourcemap):\nTypeError: entityCollection.get(...) is undefined in http://somehost:[someport]/somepath/Spec.coffee (line 15) (and line 37 on /somepath/SomeSpec.js)\nI think this can be done reading the //@sourceMappingURL or the //#sourceMappingURL attribute of the compiled js and later the sourcemap itself (using the value of that attribute), then there is the sourcemap interpretation using https://github.com/mozilla/source-map", "createdAt": "2014-01-02T18:26:11Z", "updatedAt": "2018-10-24T22:43:56Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "nicosommi", "authorAssociation": "NONE", "participants_count": 25, "participants_data": [{"login": "nicosommi", "company": "@integracionesagiles "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "Yona-Appletree", "company": null}, {"login": "novocaine", "company": "@Memrise "}, {"login": "Zequez", "company": null}, {"login": "alexeagle", "company": "Angular (@Google)"}, {"login": "caseyhoward", "company": null}, {"login": "geddski", "company": "Domo"}, {"login": "cmdelatorre", "company": "Machinalis"}, {"login": "inf3rno", "company": null}, {"login": "guncha", "company": "@Pathgather "}, {"login": "DanielSchuech", "company": null}, {"login": "ArnaudRinquin", "company": "@eFounders @sliteteam "}, {"login": "andyl", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rdy", "company": "Sony"}, {"login": "andreisoare", "company": "Udemy"}, {"login": "daryllabar", "company": "Gap Integrity"}, {"login": "steven-solomon", "company": null}, {"login": "taavo", "company": null}, {"login": "johngrogg", "company": null}, {"login": "leonadler", "company": null}, {"login": "cancerberoSgx", "company": "home sweet home"}, {"login": "klemenoslaj", "company": null}, {"login": "DamienCassou", "company": "F\u00f6retagsplatsen"}], "comments_count": 38, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T22:02:59Z", "contents": "This code would belong in the reporters. The Jasmine team doesn't work in Coffee Script so we're not familiar with the pain points.\nWe'd be happy to look at a pull request that test-drove out this support for the HtmlReporter - and it should (naturally) support the spec and source files. Is this something you'd like to tackle?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nicosommi", "authorAssociation": "NONE", "createdAt": "2014-01-11T13:10:18Z", "contents": "Yes just give me some time and I'll try to create a PR. Looking at the code I think that I need to modify the core/ExceptionFormatter.js around line 19. Im going to create a new js file and add the mozilla source-map dependency.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Yona-Appletree", "authorAssociation": "NONE", "createdAt": "2014-03-05T21:05:54Z", "contents": "I have the same issue, but from TypeScript. It's a bit of a pain to reverse-engineer the actual line numbers, esp. since IntelliJ does not make it all that easy to load the generated JS files. @nicosommi I'm curious what the status of PR is, as I might be interested in continuing work on it if you don't have the time.", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nicosommi", "authorAssociation": "NONE", "createdAt": "2014-03-08T13:22:26Z", "contents": "@Yona-Appletree  yes, I've a simple (I mean really simple) example of an HTML loading a script, detecting the SourceMap, loading it and translating some line from the browser. There is still hard work to do: make it nicer and put it into the logic of jasmine. If you are interested I made a tar that you can download here http://ge.tt/6kj7GWP1/v/0?c It just proves that it can be done", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "novocaine", "authorAssociation": "NONE", "createdAt": "2014-07-19T04:14:49Z", "contents": "I feel this is probably out of scope of jasmine itself because it involves fetching and parsing sourcemaps.\nI have pushed a module which does that part to https://github.com/novocaine/sourcemapped-stacktrace. I would like to integrate that with a Jasmine reporter, but I need an asynchronous hook for the reporter to do its work (as would any solution to the problem).\nI have created a pull request for the hook in 6b7302f\nWould also appreciate thoughts on whether a reporter that integrated sourcemapped-stacktrace is useful enough to go into jasmine source (and would only work if the developer had loaded sourcemapped-stacktrace) or whether that reporter in itself should be another module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-22T20:29:28Z", "contents": "@novocaine you're bringing up an interesting idea.\nMaybe instead of a reporter concern (and your pull request #630), it's an ExceptionFormatter concern? That forces the question of how to expose this functionality so that projects could provide a map, or turn on something.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "novocaine", "authorAssociation": "NONE", "createdAt": "2014-08-01T10:46:25Z", "contents": "@infews, thanks for taking a look at this.\nWould you accept a patch to make the ExceptionFormatter something customizable through env, similar to how you can customise the reporter? Or is this possible already?\nI am imagining there could be a formatter you opt into if you want to use sourcemapped stacktraces. I don't feel strongly about whether such a formatter lives within jasmine or not, just that there should be a way to do this without hacking jasmine.\nAlso thinking that maybe sourcemapped-stacktrace could provide a sync interface to solve the problems with integrating async into the chain.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:23:15Z", "contents": "Ugh.\nAt the moment, the ExceptionFormatter is used in a factory that's defined in Env.js (see). We allow options to be passed into jasmine.getEnv() which is mostly used for testing.\nSo to make this happen, you'd have to be able to define the constructor of the formatter before the Env is created and pass it in during the boot.js process. You can't do that today without writing your own boot.js. Not awesome, but possible.\nDo you want to play around with a PR for Env.js that allows the exception formatter to be passed in? I think we could take that and allow your formatter to work with a custom boot.js. And we could start a doc for all the improvements that need to happen at boot time for a Jasmine 3...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Zequez", "authorAssociation": "NONE", "createdAt": "2014-12-02T00:25:14Z", "contents": "I think in-line sourcemaps would be more appropiate for this situation, as you wouldn't have to worry about fetching a different file for the sourcemap.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexeagle", "authorAssociation": "NONE", "createdAt": "2015-04-24T21:01:44Z", "contents": "+1 this would be useful for running unit tests written in Typescript", "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "caseyhoward", "authorAssociation": "NONE", "createdAt": "2015-06-12T16:44:12Z", "contents": "\ud83d\udc4d I compile all my tests beforehand using typescript. Source map support would be really nice. I hate digging through the generated file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2015-08-01T20:10:32Z", "contents": "+1 as someone using webpack, I have no idea where the actual errors are without source map support.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2015-08-01T20:25:19Z", "contents": "For anyone else needing this, I've found that adding ?catch=false to the URL at least lets the errors make it to the console so the browser can use source maps to show you where the errors are.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cmdelatorre", "authorAssociation": "NONE", "createdAt": "2015-10-28T14:50:13Z", "contents": "+1 to support tests in coffeescript\nIn the meanwhile, @novocaine , do you have some tips on how to integrate your module in my project without patching Jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "novocaine", "authorAssociation": "NONE", "createdAt": "2015-10-28T16:08:20Z", "contents": "sorry, you definitely have to patch Jasmine..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2015-11-02T20:42:20Z", "contents": "@geddski I tried out, but it does not work, because the error was rethrown by jasmine, so it points to the code of jasmine instead of my source code. (Btw. did anybody manage to use sourcemaps in firefox and chrome. I got proper support only in opera and msie.)\nIf somebody needs this feature, it works with karma + browserify + jasmine (tested with phantomjs). Here is a project template: https://github.com/inf3rno/javascript-project-template", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guncha", "authorAssociation": "NONE", "createdAt": "2015-12-10T20:12:02Z", "contents": "If anyone else is looking for a quick hack to get the source mapped stack traces working with Jasmine's HTML reporter while this is being figured out, here's a gist for you: https://gist.github.com/guncha/f45ceef6d483c384290a", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DanielSchuech", "authorAssociation": "NONE", "createdAt": "2016-01-21T09:14:58Z", "contents": "thx @guncha\nI am using it with karma jasmine html reporter and its working well! I haven't found another solution so I just can recommand that atm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guncha", "authorAssociation": "NONE", "createdAt": "2016-01-21T15:58:53Z", "contents": "I actually ended up using https://github.com/evanw/node-source-map-support which overwrites the native Error#stack to fetch the source maps and rewrite the stacktrace. It works with Jasmine as well as errors in the console. The only issue with testing is that is uses AJAX, so if you use jasmine-ajax, it will break in strange ways.", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "ArnaudRinquin", "authorAssociation": "NONE", "createdAt": "2016-02-03T22:34:55Z", "contents": "@guncha Thanks for the gist, I hacked it a little to make it work but that'll do for now. Do you know if there is a way to restore the stack traces before they get sent to karma/testem/initial loader?\nEDIT: nevermind, I figured a way to have them using node-source-map-support. It only works for Chrome but I guess that's good enough and much better than the previous solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2016-02-04T05:59:43Z", "contents": "This issue still makes using jasmine such a major pain when using something like webpack. Not knowing what line errors are coming from makes things impossible.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "andyl", "authorAssociation": "NONE", "createdAt": "2016-02-04T23:11:27Z", "contents": "Is there a different JavaScript test runner that handles sourcemaps??", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T21:55:00Z", "contents": "As @infews mentioned, we'd be happy to review a pull request that either:\n\nAllows injection of an ExceptionFormatter, allowing a custom one that can deal with sourcemaps\nAllows injection of some sort of filtering/rewriting function that the existing ExceptionReporter can use to accomplish this\n\nThis would also allow for a better solution to #801 and filtering lines out of the stacktrace of an error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2016-04-06T14:45:21Z", "contents": "We have added very preliminary support for this similar to the way that has been described for gulp-jasmine-browser, it is currently only supported in the browser stacktrace, I haven't yet re-worked the headless reporter to support this correctly. You can check that out here:\nhttps://github.com/jasmine/gulp-jasmine-browser\nMake sure you use the {sourcemappedStacktrace: true} as the option to the spec runner.\nFrom this early experimentation we would need to add some kind of asynchronous formatter since the loading of the source maps is not instantaneous.\nWould we be open to adopting the use of promises in Jasmine? This would make it a lot easier to handle these kinds of real asynchronous things. I've already made some other modifications for async style tests which I'd be happy to share.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "andreisoare", "authorAssociation": "NONE", "createdAt": "2016-06-30T00:55:03Z", "contents": "How about just implementing this for inline source maps? Surely a development setup can configure source maps to be inline and this way you don't need to make any async calls to grab the source maps.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "guncha", "authorAssociation": "NONE", "createdAt": "2016-06-30T15:00:10Z", "contents": "As far as I know there's no way to access the inlined source map except by doing an XHR request for the file and parsing it manually.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "daryllabar", "authorAssociation": "NONE", "createdAt": "2017-02-03T16:03:41Z", "contents": "Any update on this? It's been 6 months...", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "steven-solomon", "authorAssociation": "NONE", "createdAt": "2017-05-08T18:36:54Z", "contents": "This would be very beneficial.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "taavo", "authorAssociation": "NONE", "createdAt": "2017-05-11T21:18:11Z", "contents": "Mostly redundant with prior discussion, but since nobody's talked about this for a while:\n\nIf we don't want to introduce sourcemap concerns into the core codebase we can make the ExceptionFormatter injectable via Env. Extract it to a field on the options parameter, done. (Then presumably someone would write an ExceptionFormatter#stack that handles sourcemaps using one of many existing libraries.)\nThat, however, isn't that useful since any sourcemap processing you do will occur asynchronously. ExceptionFormatter#stack needs therefore to take a callback or return a promise.\nIf ExceptionFormatter#stack is asynchronous, either a whole lot of things calling it (and things that call those things) need to be asynchronous, or Spec#addExpectationResult and Suite#addExpectationResult add results to result.failedExpectations in a non-deterministic order when sourcemaps are enabled.\n\nAny thoughts or advice, @slackersoft?\n(ps. for people running into this thread: if you're using karma-jasmine with karma-webpack you should be able to get sourcemapped stacktraces out of the box. I imagine you can do the same thing with typescript as well.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johngrogg", "authorAssociation": "NONE", "createdAt": "2017-11-21T01:22:47Z", "contents": "I'd also like an update on this feature. We're wanting to switch our server-side node tests to use jasmine like our Angular apps, but since we use TypeScript server-side it makes it hard to quickly identify where in a spec file the error/assertion failure actually occurred.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2017-11-22T02:46:14Z", "contents": "It might be possible to make this work using Babel as part of your toolchain, I may do some investigation into this, for those relying on typescript you would probably need to be using that toolchain with the new babel7.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leonadler", "authorAssociation": "NONE", "createdAt": "2017-11-22T10:10:01Z", "contents": "@johngrogg for node, take a look at source-map-support", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2017-11-22T16:17:52Z", "contents": "@johngrogg I was able to get inline-source-maps working correctly with jasmine but I used a babel plugin to inject the source-maps for my tests.\nhttps://www.npmjs.com/package/babel-plugin-stack-trace-sourcemap\nIt works the same way as described by @leonadler under the hood. I have mine working with devTool: 'cheap-module-source-map' in webpack. Seems to be the best solution though it the source map support only works in chrome and node.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cancerberoSgx", "authorAssociation": "NONE", "createdAt": "2018-04-13T13:41:43Z", "contents": "found this one for typescript, seems to obe working just fine and easy to install: https://github.com/SeanSobey/JasmineTSConsoleReporter", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "klemenoslaj", "authorAssociation": "NONE", "createdAt": "2018-10-18T11:01:44Z", "contents": "I think that the easiest solution is the following:\n\ninstall source-map-support with npm or yarn.\nadd/modify test script in package.json\n\n\"test\": \"NODE_OPTIONS='-r source-map-support/register' jasmine ./src/**/*.spec.js\",", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DamienCassou", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-19T07:02:59Z", "contents": "@klemenoslaj said:\n\nI think that the easiest solution is the following:\n* install source-map-support with npm or yarn.\n\nthat doesn't work for me. I guess it's because Jasmine already does something with source-maps (#1598).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-19T23:20:35Z", "contents": "Jasmine itself definitely doesn't know anything about sourcemaps. If there is another library included that is patching the Error prototype to provide a sourcemapped stacktrace, then Jasmine will end up using that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cancerberoSgx", "authorAssociation": "NONE", "createdAt": "2018-10-24T22:43:55Z", "contents": "Just in case, for those using typescript, in node.js, what I do is execute typescript directly with (npm install) ts-node, basically just change all *.js with *.ts in your spec/support/jasine.json file and then run npx ts-node node_modules/jasmine/bin/jasmine.js . For actually debugging (like putting a breakpoint) it in node.js you will need to compile TS with sourcemap: true in tsconfig.json and that works fine though", "reactions_count": 0, "reactions_data": []}], "reactions_count": 26, "reactions_data": ["HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "HEART", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP"], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 492, "url": "https://github.com/jasmine/jasmine/issues/492", "title": "How to determine if a spec is running? (RE: Angular Mocks)", "contents": "Angular Mocks checks if a spec is running by using\n  // Line 1922\n  isSpecRunning = function() {\n      return currentSpec && (window.mocha || currentSpec.queue.running);\n  };\n\n  beforeEach(function() {\n    currentSpec = this;\n  });\n\nHowever in Jasmine 2.0.0 currentSpec.queue doesn;t exist nor does any \"running\" property. How do we determine if a spec is running so we can propose a pull request for NG mocks?", "createdAt": "2014-01-04T15:26:13Z", "updatedAt": "2014-01-07T03:08:04Z", "closedAt": "2014-01-07T03:08:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johnpapa", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "johnpapa", "company": "JohnPapa.net, LLC"}, {"login": "IgorMinar", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 5, "comments_data": [{"authorLogin": "johnpapa", "authorAssociation": "NONE", "createdAt": "2014-01-04T16:11:13Z", "contents": "Here is a cross ref to angular where I posted a similar issue: angular/angular.js#5632\nWhat I did in the meantime to get the tests to run is ...\n// line 1922-1924\n  isSpecRunning = function () {\n      return !!currentSpec; // && (window.mocha || currentSpec.queue.running);\n  };\n\nAnd then ...\n// line 1978\nreturn isSpecRunning() ? workFn() || workFn : workFn;\n\nIt's a hack so I'd love to hear some better options", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "IgorMinar", "authorAssociation": "NONE", "createdAt": "2014-01-05T04:47:31Z", "contents": "some background for why why need this api: angular/angular.js#5632 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-05T05:56:25Z", "contents": "With Jasmine 2.0.0, it shouldn't be necessary to do the currentSpec.queue.running check. Having a currentSpec from the beforeEach means that a spec is running (similar to the check, or lack thereof, being done for Mocha). I think isSpecRunning simplifies to what @johnpapa has of\nisSpecRunning = function () { \n  return !!currentSpec; \n};\nbecause the window.mocha || window.jasmine check seems to have been done on line 1917.\nAn alternate option, perhaps for users that don't want to add their own beforeEach/afterEach for spec tracking, is to use the Jasmine reporter interface. Adopted for the angular-mock use case, that would look something like the following:\nisSpecRunning = (function() { // assumes this function is still guarded by 'if(window.jasmine || window.mocha) {'\n  if (window.jasmine) {\n    var specRunning = false;\n    window.jasmine.getEnv().addReporter({\n      specStarted: function() { specRunning = true; },\n      specDone: function() { specRunning = false; }\n    });\n    return function() { return specRunning; };\n  } else {\n    return function() { return !!currentSpec; };\n  }\n})();\nAs a bit of an aside, but something I wanted to clarify since it isn't documented yet: the this being saved off from the beforeEach is not the actual spec object anymore. We had requests that users wanted to use the 'this' to store off their own variables and access them in the 'it' and/or 'afterEach'. So in Jasmine 2.0.0, 'this' is an empty object where users can store their test context without having to worry about conflicting with Jasmine internals. That's why there's no useful properties on the currentSpec. Briefly looking at angular-mock.js, it seems that Angular also stores off some of its own properties, such as $injector and $modules and this is a safe place to store those variables to be available in the afterEach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnpapa", "authorAssociation": "NONE", "createdAt": "2014-01-06T14:31:11Z", "contents": "For compat reasons, why not add back tis property? Either ng mocks or jasmine has to make a change, and I think it could go either way. But if other libraries are depending on those features, then they will also have this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-07T03:08:04Z", "contents": "I confirmed with @ragaskar and we don't think the currentSpec.queue.running should be necessary to check in 1.3.1 either. We're not sure why that check was necessary in angular-mocks.js and removing it should get the code working in both these versions of Jasmine (if cross-compatibility was an issue).\nThe other reason to not add this property back has to do with the second item I mentioned above: the 'this' argument in a beforeEach/it/afterEach is now an empty object for the user to store their own state on and not the actual spec anymore. Adding a queue property and a running state as part of that would conflate with the idea of giving users an empty object that they can then put their own state on.\nGiven that the check should be unnecessary and the 'this' is no longer an appropriate place to put these properties, we hope that other libraries that are depending on it can make the same fix: remove the extra check/use one of the two previously discussed ways of determining if a spec is running. Since the property was never part of the public API, we're hoping that this doesn't actually affect too many other libraries.\nThanks for looping us in on these Jasmine 2.0 compatibility issues with Angular. I'll close this issue for now since we think angular-mocks.js is the right place for this change, but please feel free to reopen if further discussion is needed!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 493, "url": "https://github.com/jasmine/jasmine/issues/493", "title": "Jasmine for ExtendScript", "contents": "I've tried to port Jasmine for ExtendScript using the standalone zip file. I have already fixed the errors on that environment which is basically the window object changed to $.global. However I can't get the output displayed on the console. The file console.js doesn't seem to be used. Was this the one responsible for printing the results?\nAlso, is there already an implementation for ExtendScript?", "createdAt": "2014-01-06T06:25:15Z", "updatedAt": "2015-04-15T17:53:18Z", "closedAt": "2014-01-07T16:28:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "madevelopers", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "madevelopers", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "pawelmhm", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "tmaslen", "company": "Springer Nature"}], "comments_count": 4, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T06:44:45Z", "contents": "Yes, the console.js is unused by default in the standalone runner, but is included in case users want the spec results to be printed with dots/x's/etc and failure messages to the console (which it sounds like you are looking for). One use case for why console.js might be useful is if a user wants this data sent to the browser's console and then wanted to use PhantomJS to grab all of the browser's console output and send it to the user's terminal (making for a quick command line runner for standalone Jasmine).\nThis is the code you would include in SpecRunner.html to wire up the console reporter:\n  <script type=\"text/javascript\" src=\"lib/jasmine-2.0.0/console.js\"></script>\n  <script type=\"text/javascript\">\n    var ConsoleReporter = jasmineRequire.ConsoleReporter();\n    var reporter = new ConsoleReporter({timer: new jasmine.Timer, print: function() { console.log.apply(console, arguments); }}); // optionally pass in showColors: true\n    jasmine.getEnv().addReporter(reporter);\n  </script>\nHopefully that's helpful in getting output printed to the console.\nI'm not aware of any implementations for ExtendScript, but perhaps some other people will chime in if there already is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pawelmhm", "authorAssociation": "NONE", "createdAt": "2014-01-07T12:33:35Z", "contents": "Hi,\n@sheelc My use case is slightly different (I'm building chrome extension), but I also need all output to console. I added the code you provided above to boot.js (removing html reporter), it works like a charm, thank you very much.\nI understand that console output is not the main functionality at the moment, but is there any way, I can get all jasmine output (not just dots/errors, but also passing suite descriptions etc) in console?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-07T16:28:02Z", "contents": "The intent is for the community to be able to write their own reporters, using the two provided objects as examples. The interface is fairly basic - you should be able to test-drive your own \"RichConsoleReporter\" for your needs. Let us know if you need any help - any gaps you find will be useful for others.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tmaslen", "authorAssociation": "NONE", "createdAt": "2015-04-15T17:53:18Z", "contents": "I made a port of Jasmine 2.2.0 for ExtendScript.  Help yourselves:\nhttps://github.com/tmaslen/jasminejsx\n/t", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 494, "url": "https://github.com/jasmine/jasmine/issues/494", "title": "version 2.0 document error", "contents": "Following is the description provided for spy and.throwError in the document.\nBy chaining the spy with and.callThrow, all calls to the spy will throw the specified value.\nIs and.callThrow a document error?", "createdAt": "2014-01-06T10:55:25Z", "updatedAt": "2014-01-06T15:55:27Z", "closedAt": "2014-01-06T15:52:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "smarigowda", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "smarigowda", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-06T15:52:51Z", "contents": "Yes, this was a documentation error. I just fixed it. We were considering and.callThrow for a while before deciding to go with and.ThrowError for 2.0 since it read better.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 495, "url": "https://github.com/jasmine/jasmine/issues/495", "title": "Feature Request: Collapsable Suites/Describes", "contents": "With 100's or 1000's of tests it is not fun to scroll through them all to find tests.\nWould be easy to have a collapsable set of list items for the specs, by suite.\nWould love to see this added.", "createdAt": "2014-01-08T07:12:24Z", "updatedAt": "2014-01-08T23:34:04Z", "closedAt": "2014-01-08T19:42:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johnpapa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "johnpapa", "company": "JohnPapa.net, LLC"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-08T19:42:45Z", "contents": "This feature would be in the HtmlReporter object.\nFeel free to test-drive these features into that object. Please follow the Contributor's guide and maintain compatibility with at least IE8 and we'll take a look at your pull request.\nThanks for the suggestion!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnpapa", "authorAssociation": "NONE", "createdAt": "2014-01-08T20:41:58Z", "contents": "So is this not anywhere on your roadmap?\nI get the \"please contribute\", I often do. But it would be nice to know what the roadmap looks like instead of just closing it", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-08T23:34:04Z", "contents": "@johnpapa our backlog is public at Pivotal Tracker. The backlog is a little light, but the Icebox does have all of our thinking (just not prioritized).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 496, "url": "https://github.com/jasmine/jasmine/issues/496", "title": "\"Negative zero\" value passed to expect doesn't match value in HTML report", "contents": "If you have a simple test like:\nexpect(-0).toEqual(0);\nWould expect to see something like this in the report:\nExpected -0 to equal 0.\nHowever, Jasmine 2.0 reports a confusing failure:\nExpected 0 to equal 0.\nJasmine 1.3 didn't fail on the above test case.", "createdAt": "2014-01-09T21:46:48Z", "updatedAt": "2014-06-26T04:57:35Z", "closedAt": "2014-02-09T22:15:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "callmevlad", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "callmevlad", "company": "Webflow.com"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "christianrondeau", "company": "@mediaclip "}, {"login": "nikku", "company": null}, {"login": "jonatr35", "company": "Spectrum Health"}], "comments_count": 9, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-10T05:06:51Z", "contents": "Ah interesting. To add some context, since JavaScript considers -0 and 0 to be equal ( 0 === -0 ) and in Jasmine 1.3,-0 was not treated as a special case as part of toEqual, the expectation didn't fail and users didn't see this strange message.\nIn Jasmine 2.0 we adopted Underscore.js's equality, in which _.isEqual(0, -0) returns false. They have a link to the harmony:egal proposal in which they cite that \"0 === -0, but they are not identical\". Considering that toEqual in Jasmine isn't necessarily checking 'identical' objects (expect({}).toEqual({}) will pass although those two empty object are not identical), I could see returning to Jasmine 1.3 behavior and not failing the expectation.\nThe other options is to print out a better failure message by doing the same 1/ x trick and determining if we get -Infinity or Infinity to print out a nicely formatted -0. @infews or @ragaskar do you have any thoughts/preferences?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-14T01:21:41Z", "contents": "What's the use case for -0 being considered equal to 0? If it's just academic, I'm inclined to go with whatever underscore has decided is good enough rather than adding additional custom handling.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-14T01:24:09Z", "contents": "Reading this again it sounds like the request is simply for a better error message. I guess in that case if we're already doing a 1/x trick to add a sign somewhere we can re-use that behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-14T03:08:06Z", "contents": "Well we can do that. The downside would be that expect(-0).toBe(0) would\npass and what we generally advertise as the more loose matcher, toEqual,\nwould fail with the same expectation. Normally everything that passes with\ntoBe passes with toEqual, so this seemed a little bit odd. I guess we could\njust advertise toEqual as underscore's equality instead, while toBe is\nJavaScript equality without type coercion?\nOn Jan 13, 2014 5:24 PM, \"Rajan Agaskar\" notifications@github.com wrote:\n\nReading this again it sounds like the request is simply for a better error\nmessage. I guess in that case if we're already doing a 1/x trick to add a\nsign somewhere we can re-use that behavior.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com//issues/496#issuecomment-32230707\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-09T22:12:18Z", "contents": "Ok, let's go with the pretty printing of '-0' for now so that we can stick to toEqual being underscore's notion of equality while toBe is pure JavaScript equality, forgetting the idea that the inputs passing toEqual are a superset of the inputs to toBe.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "christianrondeau", "authorAssociation": "NONE", "createdAt": "2014-03-05T18:36:58Z", "contents": "That means that deep object comparison, if it contains -0, will not match the other object even though JavaScript will still consider value equal.\nThis forces the developer to do something like this in the production code everywhere the result might be zero:\nif(x === 0) x = 0;\nWhich is silly. So, I'm voting for toEqual to consider 0 to be equal to -0, since even though I understand the reasoning, in practice it cannot cause issues in code unless someone would cast the number to a string.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nikku", "authorAssociation": "NONE", "createdAt": "2014-06-25T15:19:33Z", "contents": "+1 for @christianrondeau's comment.\nIn javascript code the difference between 0 and -0 never matters unless you perform some voodoo string casting magic (you probably shouldn't do that anyway).\nI have not heard of underscores equality notion up to now and I bet my five cents many web developers haven't (and don't care) either.\nThat is why I would rather not\n\nforget[...] the idea that the inputs passing toEqual are a superset of the inputs to toBe.\n\nand instead go for what developers expect.\nThat to me is that expect(-0).toBe(0) does not fail because -0 == 0 and -0 === 0 yields true in JavaScript, too.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jonatr35", "authorAssociation": "NONE", "createdAt": "2014-06-25T20:48:06Z", "contents": "I agree with both @christianrondeau and @nikku. I created the issue #579 for the same reason that in JavaScript I expect -0 == 0 and for -0 === 0. When writing my tests I should not have to be aware of the underling implementation of toEqual, I would expect it to work as I would in JavaScript. It is also very confusing when toBe will pass and is said to be the more strict comparison as mentioned by @sheelc before. That is my two cents at least.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-26T04:57:35Z", "contents": "Yes, I was referring to one notion of toBe as the 'stricter' matcher since aside from this case, if something passed toBe then it would pass toEqual. It was an easy way to explain to users less familiar with the differences/implementations of these two matchers as to one way they could think about it. One of the tradeoffs here is definitely that this notion is lost since -0 and 0 conflict.\nLooks like there's growing support for having them be toEqual though.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 498, "url": "https://github.com/jasmine/jasmine/issues/498", "title": "Add documentation about how to set up and install jasmine", "contents": "I've searched the docs and the README.md but haven't been able to quickly find how to set up Jasmine from scratch (without node js)\nThe current documentation only explains how to use it.", "createdAt": "2014-01-12T15:10:21Z", "updatedAt": "2014-01-31T02:58:56Z", "closedAt": "2014-01-19T22:16:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "PVince81", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "PVince81", "company": "ownCloud GmbH"}, {"login": "intel352", "company": "Salesforce @forcedotcom"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "PVince81", "authorAssociation": "NONE", "createdAt": "2014-01-12T15:12:16Z", "contents": "Ok, found a link to the standalone version here: http://jasmine.github.io/2.0/introduction.html\nWould be good to put that link directly in the README.md", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "intel352", "authorAssociation": "NONE", "createdAt": "2014-01-30T23:59:54Z", "contents": "@PVince81, I haven't seen how to set up Jasmine using NodeJS package for jasmine-core, did you happen to come across that in your search?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-31T00:09:20Z", "contents": "There is no documentation yet as we've just published it as a soft launch. There are all the files necessary, but no way to run your tests in node yet. That's coming later.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "intel352", "authorAssociation": "NONE", "createdAt": "2014-01-31T02:58:56Z", "contents": "@infews, any recommendation on how to get this working then? I'm hoping to adapt the npm package to a rhino-based system (uses commonjs), would rather not have to resort to the Jasmine 1.3.1 release + hacks...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 499, "url": "https://github.com/jasmine/jasmine/issues/499", "title": "Jasmine suppresses errors thrown in an Asynchronous context", "contents": "Here's an example:\ndescribe ( 'Jasmine suppresses errors in async context', function () {\n    it ( 'should throw this error to the console, and stop execution', function () {\n        var done = false;\n\n        runs ( function () {\n            setTimeout ( function () {\n                throw ( 'error' );\n                done = true;\n            }, 100 );\n        } );\n\n        waitsFor ( function () {\n            return done;\n        } );\n    } );\n} );\n\nThis adds the necessity to first test code outside of Jasmine, until all errors are solved, and then moving tests into Jasmine. It hampers the TDD process.", "createdAt": "2014-01-14T11:23:34Z", "updatedAt": "2014-01-14T19:52:39Z", "closedAt": "2014-01-14T19:52:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adriaan-pelzer", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "adriaan-pelzer", "company": null}, {"login": "matcarey", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "matcarey", "authorAssociation": "NONE", "createdAt": "2014-01-14T11:28:46Z", "contents": "This seems to be a side-effect of Jasmine overriding the setTimeout.  I've tested the same sample exception on about:blank and on a SpecRunner.html - I see the exception in about:blank and don't see it in the SpecRunner:\nsetTimeout(function() { throw 'abc'; }, 1)\nIt feels as though the Jasmine override of setTimeout is swallowing the exception.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adriaan-pelzer", "authorAssociation": "NONE", "createdAt": "2014-01-14T13:02:53Z", "contents": "That makes sense ..\nI have, however, seen it in asynchronous contexts other than setTimeout too. I just tried it with async, and it didn't work (ie it reported the error correctly!) - I'll play with it until I get it to fail again.\nObviously it's not consistent, as I thought it was.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-14T17:42:23Z", "contents": "Actually, Jasmine swallows all exceptions. This is part of the implementation.\nThere is an option to re-raise exceptions to handle this case. The HTML Reporter has UI to toggle this (small checkbox in top right). Or you can pass it as a query param to the page.\nI hope this helps you solve your problem! If so, I'll close this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adriaan-pelzer", "authorAssociation": "NONE", "createdAt": "2014-01-14T18:54:52Z", "contents": "That sounds handy, yes. Thanks!\nHow do I pass this option on the command line? In particular, jasmine-node.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-14T19:05:14Z", "contents": "We don't maintain jasmine-node - they've forked an older Jasmine. I'm not sure that this feature is supported.\nThat said, more official Node support is coming and then it will be easier to pass parameters along.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adriaan-pelzer", "authorAssociation": "NONE", "createdAt": "2014-01-14T19:43:07Z", "contents": "Thanks! Sounds promising ...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-14T19:52:39Z", "contents": "Given this, I'm going to close this issue. Thanks for the feedback.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 500, "url": "https://github.com/jasmine/jasmine/issues/500", "title": "Objects with null prototype cause exceptions when pretty-printing", "contents": "This test:\ndescribe(\"objects\", function() {\n  it(\"should print results for null protos\", function() {\n    var o = Object.create(null);\n    var o2 = Object.create(null);\n    expect(o).toBe(o2);\n  });\n});\n\nWill fail while reporting the test faillure with:\n1) objects should print results for null protos.\n  TypeError: Object [object Object] has no method 'hasOwnProperty'\n    at PrettyPrinter.iterateObject (<...>lib/jasmine/lib/jasmine-core/jasmine.js:1350:16)\n\nI think a fix would be to have https://github.com/pivotal/jasmine/blob/2670bb40a7d0135553a688f0102ee6e0d8500dc1/lib/jasmine-core/jasmine.js#L1393 use Object.prototype.hasOwnProperty.call rather than relying on the object itself having the field, but I'm not familiar enough with the internals to know what else that change could affect, so it's just a guess.", "createdAt": "2014-01-15T14:40:33Z", "updatedAt": "2016-10-11T21:59:11Z", "closedAt": "2014-01-18T05:57:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jpolitz", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jpolitz", "company": "UC San Diego"}, {"login": "meltuhamy", "company": "@Huddle "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "emorikawa", "company": "Nylas"}], "comments_count": 3, "comments_data": [{"authorLogin": "meltuhamy", "authorAssociation": "NONE", "createdAt": "2014-05-20T12:11:02Z", "contents": "Hello, just wondering if jasmine 1.3.x is still supported? This issue is still there in 1.3.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-20T16:36:40Z", "contents": "It's supported, but we aren't taking pull requests against 1.x versions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emorikawa", "authorAssociation": "NONE", "createdAt": "2016-10-11T21:56:23Z", "contents": "Yeah, fun story from the 1.3 branch: Node in this pull request: nodejs/node#6092 gave EventEmitter an object with a null prototype.\nThis means that if you attempt to prettyprint any object that contains a Node EventEmitter, it'll fail.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 501, "url": "https://github.com/jasmine/jasmine/issues/501", "title": "How to wait synchronously before to run an expectation", "contents": "I am trying to test the postMessage API as there is a slight delay before message are receive i can not run expectation right after sending a message.\nIn jasmine 1.3 i used to wait() a few milliseconds before running expectation and that worked fine. However with jasmine 2.0 wait() is deprecated and it now seems that everything inside a setTimeout do not get run unless done() is called, witch in my case doesn't cut it as i actually want to wait real time before running my expectation..\nNot sure if that all make sense, if it does I'd love some pointers on how I could go about this.\nThanks!", "createdAt": "2014-01-16T08:24:00Z", "updatedAt": "2014-04-17T03:19:18Z", "closedAt": "2014-01-19T03:57:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "m4nuC", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "m4nuC", "company": "@lumapps"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "ingoe", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-01-18T00:27:04Z", "contents": "setTimeout should only be replaced if the mock clock is installed. If you have it installed across your whole suite, you should be able to turn it off for the duration of your wait with something like this (warning, I haven't actually tested this):\nbeforeEach(function(done) {\n  jasmine.clock().uninstall();\n  otherWindow.postMessage(/* message */);\n  setTimeout(function() {\n    jasmine.clock().install();\n    done();\n  }), 500);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "m4nuC", "authorAssociation": "NONE", "createdAt": "2014-01-18T10:11:34Z", "contents": "Well that's weird i didn't initialise a mock clock anywhere, is this in a config somewhere ? anyways It now does work, thanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-18T22:43:38Z", "contents": "It shouldn't be installed by default. It's opt-in by the user, by calling jasmine.clock().install().\nSomething to watch out for is if another spec does jasmine.clock().install() but doesn't uninstall the clock through jasmine.clock().uninstall(). Jasmine 1.3 used to uninstall the clock for users automatically whereas 2.0 is more explicit -- unless the mock clock is desired for the whole suite, an install of the clock needs to be paired with an uninstall.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "m4nuC", "authorAssociation": "NONE", "createdAt": "2014-01-19T03:41:22Z", "contents": "Ok that's weird, I am definitely not calling jasmine.clock().install() in any of my specs ( I am using sinon to mock clocks ). Will use jasmine.clock().uninstall() before my postMessage tests for now. Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-19T03:57:18Z", "contents": "Ah interesting. My best guess as to what's happening is that maybe Sinon or another framework has replaced setTimeout with a fake one and when you call jasmine.clock().uninstall(), Jasmine is replacing the fake setTimeout with a real one that Jasmine has kept internally -- allowing your spec to pass.\nI'll close this issue then since it sounds like you have a workaround and it's not something that needs fixing in Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "m4nuC", "authorAssociation": "NONE", "createdAt": "2014-01-19T07:27:09Z", "contents": "Yea, i actually had a sinon clock initialised (Usually don't pay too much attention to closing them as the framework will complain if trying to mock an already mocked clock ). Would it make sense to check if setTimeout is the native implementation when calling jasmine.clock().install() if not maybe throwing some kind of error ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-19T22:05:11Z", "contents": "Cool, at least we have that solved.\nChecking if it's the native implementation doesn't seem unreasonable, but I don't know if it would have that much value for most users (most users only use one mock clock implementation, whether it be Jasmine's or another framework's like Sinon). Nor would this check have helped you debug this issue, since you weren't installing the Jasmine clock. I've added a story though and we can prioritize it if more users do indeed find it valuable.\nWe could also print a warning if the clock is uninstalled had it never been installed (which could have helped debug this a little faster), but I like how uninstall is a no op if the clock hasn't been installed. This behavior allows a user to have a global afterEach that uninstalls the clock regardless of whether a certain spec decided to use the clock.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ingoe", "authorAssociation": "NONE", "createdAt": "2014-04-16T13:11:37Z", "contents": "As this is a similar topic, can you please help me getting this test fixed?\n    describe('calling postMessage asynchronously', function () {\n        var ctx;\n        beforeEach(function () {\n            jasmine.clock().install();\n            ctx = {\n                msgHandler:function() {\n                }\n            };\n        });\n        afterEach(function () {\n            jasmine.clock().uninstall();\n        });\n        it('handles a postMessage asynchronously', function() {\n            window.addEventListener('message', ctx.msgHandler);\n            spyOn(ctx, 'msgHandler');\n            setTimeout(function() {\n                window.postMessage('another bam', '*');\n            }, 10);\n            jasmine.clock().tick(11);\n            expect(ctx.msgHandler).toHaveBeenCalled();\n        });\n    });\n\n\nThanks!!!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-17T03:19:18Z", "contents": "window.postMessage('another bam', '*'); is asynchronous and jasmine.clock().install() currently only handles setTimeout and setInterval. Thus in your example, the window.postMessage is being fired, but ctx.msgHandler is never called by the time the spec is over because it will be called later.\nYou can use the asynchronous done callback as follows to get to a passing spec:\n it('handles a postMessage asynchronously', function(done) {\n    window.addEventListener('message', function() {\n      ctx.msgHandler();\n      expect(ctx.msgHandler).toHaveBeenCalled(); // not really a useful expectation since it was called directly above\n      done();\n    });\n\n    spyOn(ctx, 'msgHandler');\n    setTimeout(function() {\n      window.postMessage('another bam', '*');\n    }, 10);\n    jasmine.clock().tick(11);\n });\nAs noted above, however, this helps illustrate that really this spec is testing window.postMessage and window.addEventListener because all you really need to know is if the callback got invoked (done was called). So really, the spec could be simplified to be:\n it('handles a postMessage asynchronously', function(done) {\n    window.addEventListener('message', done);\n    setTimeout(function() {\n      window.postMessage('another bam', '*');\n    }, 10);\n    jasmine.clock().tick(11);\n });", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 502, "url": "https://github.com/jasmine/jasmine/issues/502", "title": "Feature Request: Stub a variable (vs spyOn a function)", "contents": "Hi,\nI often find myself needing a feature where I can stub a variable (either a global variable, or an object's member variable) with a fake value or dummy implementation.  Note: I am not referring to spyOn-ing on a function call.\nexample:\nwindow.foo = 7;\n\nwindow.bar = Backbone.View.Extend({\n   initialize: function(){\n     // complex behavior with alot of setup required or side-effects kicked off\n     throw(\"side effects....\");\n   }\n});\n\nThen I have a \"baz\" module, which I want to test and isolate the tests to just \"baz\" functionality, so I'd like todo this:\njasmine.stub(window, \"foo\", 42);\njasmine.stub(window, \"bar\", fakeSimpleBackboneView);\n\nNote: I could just do window.foo = 42 in my \"baz\" test, but jasmine.stub would perform the cleanup after the test, just like spyOn does.\nIf you guys think this is a good idea, I will work on a pull request to jasmine.  If not, that's cool too and I will release a seperate module which people can pull into their projects.  I just want to ask upfront to avoid double work.  (I would predict higher usage if it's in jasmine core).  What are your guys thoughts?  @infews?\nThanks,\nTom", "createdAt": "2014-01-16T18:21:55Z", "updatedAt": "2016-03-01T14:42:10Z", "closedAt": "2014-01-16T19:50:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tommyh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tommyh", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sparkeplug", "company": "KPMG Global Services"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-16T19:29:58Z", "contents": "Let's start it out as an extension. If it gets some traction, we can talk about moving it into core.\nSuggestions:\n\nSupport 2.0 and later\nWork with \"installing\" in boot.js\nUnit test the way we do in Jasmine core\n\nOK if I close this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tommyh", "authorAssociation": "NONE", "createdAt": "2014-01-16T19:50:13Z", "contents": "Sounds good!\nPS I just open sourced my first jasmine extension a few days ago (for the React.js View library) - https://github.com/tommyh/jasmine-react!  I'm pretty excited about it.. :)\nHave a good one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sparkeplug", "authorAssociation": "NONE", "createdAt": "2016-03-01T14:42:09Z", "contents": "Hi @tommyh / @infews\nIs the stubbing of variable functionality in place.... ?\nIf not any idea how i can stub the variables for my tests in jasmine.........?", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 504, "url": "https://github.com/jasmine/jasmine/issues/504", "title": "toThrow does not except if ExceptionClass is undefined", "contents": "I created an Error-Class in my library:\nvar mylib = {};\nmylib.MyError = function () {\nthis.message=\"something went wrong\";\nthis.name = \"mylib::MyError\";\n};\nmylib.MyError.prototype = new Error();\nmylib.MyError.prototype.constructor = MyError;\n...\nThis is how Nicolas Zakas recommends to create your own Error class if you want to differentiate Errors  in a try-catch-block.\nI created a test spec expecting this:\nexpect(mylib.myfunc()).toThrow(mylib.myMissSpelledError);\nResulting in a toThrow()-Call with an expected-argument of value undefined.\nI would expect that toThrow() should now throw an Exception informing me, that the caught Error is not of the specified Error-Class. But it does not!\nI think this happens, because toThrow() compares the caughtException with jasmine.undefined before checking if the exception is of the right class.\njasmine.undefined is in my Environment (Chrome  32.0.1700.76 m) also of value undefined, so the test succedes although it should not!\nI am using jasmine 1.3.1 from\n\"http://cdnjs.cloudflare.com/ajax/libs/jasmine/1.3.1/jasmine.js\nA fix might be to define jasmine.undefined as\njasmine.undefined = {};\nBy that jasmine would have an unique value (the pointer of the object literal) and would be differentiable from javascripts undefined.", "createdAt": "2014-01-20T14:26:08Z", "updatedAt": "2014-02-24T19:04:46Z", "closedAt": "2014-02-24T19:04:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fonzerelly", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "fonzerelly", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-20T16:39:50Z", "contents": "Can you please try this with 2.0? We've updated and broken out the toThrow matcher and I think the new version will work in this case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-24T19:04:46Z", "contents": "This was indeed fixed in 2.0. Here's the spec.\nPlease reopen if there are still issues in 2.0.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 505, "url": "https://github.com/jasmine/jasmine/issues/505", "title": "Way to specify that async examples may NOT be run simultaneously?", "contents": "I am trying to write specs for an indexedDB adapter, and the setup deletes the database before each run. The problem I am having is that the test block each other, and time out. Any single test will run successfully if all the others are commented out.\nI need some way to specify that although these tests are asynchronous, each one must wait to start until the previous one has completed.\nThanks,\n-- Steve J.", "createdAt": "2014-01-22T22:19:52Z", "updatedAt": "2014-01-23T03:42:16Z", "closedAt": "2014-01-23T02:31:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stevecj", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "stevecj", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-22T22:24:20Z", "contents": "Can you point to your suite? I'm not sure I understand why this is not working.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-01-22T23:04:38Z", "contents": "Thanks for your help. I just pushed this up to GitHub and tagged this commit point.\nSee https://github.com/stevecj/headway/tree/jasmine-issue-505", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-22T23:48:45Z", "contents": "Haven't downloaded and played with the repo, but if I had to guess, it looks like you're returning results well before the actual async db call completes.\nIE, Jasmine won't (or shouldn't) enter the it block until your before completes, but your var results gets assigned immediately upon calling runHeadwayRequest ( run, done ) (the assignment of results isn't going to wait for the 'done' to be called, the way you've written it).\nYou might try having a suite-wide results that your runHeadWay request has access and can set explicitly vs. returning them. I can explain in more detail if that doesn't quite make sense to you.\nEDIT: having suite-wide results would probably be the fastest way to get your suite working, but if you're concerned about clarity, you might look into using a promise to carry the data back to the spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-01-23T01:18:37Z", "contents": "Thanks @ragaskar. I get what you are saying.\nActually, there are potentially 2 possible code paths depending on whether the failure happens when trying to call store.add( worksheet ); or fails by firing an error event to the request object. I forgot about that when trying to diagnose the timeout issue.\nIn any case, I would like to be able to write the example from the perspective of not knowing knowing whether the onError handler will be called synchronously or asynchronously. Is there any way to do that? I suppose, as a hack-around, I can wrap the results = runHeadwayRequest( run, done ); in a timeout call? I'll try that, and see if it works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-01-23T01:41:22Z", "contents": "That didn't seem to help. I also realized that I forgot to make the beforeEach call for describe( '.WorksheetRepo' ... asynchronous and calling done(); from the onSuccess and onError handlers for adapter.deleteDb, but fixing that didn't help either.\nI pushed up that change, and moved the tag.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-01-23T02:31:26Z", "contents": "OK -- I finally figured out the problem, and it was in no way jasmine's fault. It was my mistake.\nI never closed the indexedDB connection, so with a 2nd example, the database deletion was blocked. I am now closing the connection in an afterEach call, and all of my tests are passing. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-23T03:42:16Z", "contents": "Great! Glad you got it going, thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 507, "url": "https://github.com/jasmine/jasmine/issues/507", "title": "Unable to uncompress dist/zip files", "contents": "I tried to uncompress :\n\nhttps://github.com/pivotal/jasmine/blob/master/dist/jasmine-standalone-1.3.1.zip\nhttps://github.com/pivotal/jasmine/blob/master/dist/jasmine-standalone-2.0.0.zip\n\nBut was unable to decompress it. ( Unzip failed with errors )\nI even tried online archivers they also failed with errors.\nI guess there is some problem with the compression tool.", "createdAt": "2014-01-25T17:48:21Z", "updatedAt": "2014-01-25T18:08:14Z", "closedAt": "2014-01-25T18:08:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yugaljindle", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "yugaljindle", "company": "Facebook, Inc."}], "comments_count": 1, "comments_data": [{"authorLogin": "yugaljindle", "authorAssociation": "NONE", "createdAt": "2014-01-25T18:08:14Z", "contents": "My bad: ( Github confused me and wget )\nwget -c https://github.com/pivotal/jasmine/blob/master/dist/jasmine-standalone-1.3.1.zip\nshould have been:\nwget -c https://github.com/pivotal/jasmine/raw/master/dist/jasmine-standalone-1.3.1.zip\nClosing !", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 508, "url": "https://github.com/jasmine/jasmine/issues/508", "title": "Sealed object can't be compared", "contents": "Jasmine comparer and pretty printer is trying to extend sealed objects with property 'Jasmine_been_here_before'. This property is silently doesn't added to the object and Jasmine doesn't work properly.\nI am getting an error: TypeError: Object [object Object] has no method 'hasOwnProperty'\njasmine.Env.prototype.compareObjects_ = function(a, b, mismatchKeys, mismatchValues) {\n\n  if (a.__Jasmine_been_here_before__ === b && b.__Jasmine_been_here_before__ === a) {\n    return true;\n  }\n\n  a.__Jasmine_been_here_before__ = b;\n  b.__Jasmine_been_here_before__ = a;\n\n  var hasKey = function(obj, keyName) {\n    return obj !== null && obj[keyName] !== jasmine.undefined;\n  };\n\n...", "createdAt": "2014-01-27T12:44:14Z", "updatedAt": "2014-04-25T12:38:59Z", "closedAt": "2014-04-17T23:52:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gedbac", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "gedbac", "company": "Devbridge Group"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-27T16:25:51Z", "contents": "Comparison was fixed in 2.0 - we no longer modify objects. Please give this a try.\nThis remains an issue with the PrettyPrinter. We want to rewrite this object, or remove it, for many reasons.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-04-17T23:52:04Z", "contents": "PrettyPrinter should now be fixed too, as of c9e37a2.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gedbac", "authorAssociation": "NONE", "createdAt": "2014-04-25T12:38:59Z", "contents": "Thanks", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 509, "url": "https://github.com/jasmine/jasmine/issues/509", "title": "SpecRunner output is not color-deficiency-friendly", "contents": "I am red/green color deficient (like 8% of men) and I can't distinguish between passed and failed specs visually. It would be nice if the colors that represented failure and success were more different and not red and green.", "createdAt": "2014-01-29T23:06:27Z", "updatedAt": "2014-01-30T21:37:53Z", "closedAt": "2014-01-30T21:37:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "modelm", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "modelm", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-30T21:37:53Z", "contents": "We have an open issue here: https://www.pivotaltracker.com/story/show/60613086 that refs this issue: #463\nHappy to take a pull request that addresses this issue, should be pretty simple, I think.\nClosing this particular issue because it's in our backlog, but hope to merge a pull soon.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 510, "url": "https://github.com/jasmine/jasmine/issues/510", "title": "Filtering out specs in HTML report", "contents": "In Jasmine 1.3, clicking on a suite or a specific spec (e.g. TestRunner.html?spec=A spy) would only show that spec (or tree) in the HTML report, which was really handy. Jasmine 2.0 seems to write out the entire tree, with disabled specs having a different style, which can be quite verbose (especially with thousands of specs in the report).\nIs there a way to enable 1.3-like reports in 2.0? If not, would you guys be open to a pull request to restore 1.3-like behavior (or at least have the option to revert to that mode with a query parameter)?", "createdAt": "2014-01-30T22:17:20Z", "updatedAt": "2016-11-04T17:29:18Z", "closedAt": "2016-11-04T17:29:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "callmevlad", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "callmevlad", "company": "Webflow.com"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "evgeny-myasishchev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jasonmobley", "company": null}], "comments_count": 10, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-30T22:35:57Z", "contents": "We went back and forth on this one for 2.0 and decided on this behavior.\nGiven that we don't yet have an awesome way to let you know that specs aren't running due to syntax errors, we decided (after a bunch of feedback) that showing too much info helped a project know that the full suite was running.\nYou should be able to fix this with CSS in your project if you'd like to display: none your disabled specs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "callmevlad", "authorAssociation": "NONE", "createdAt": "2014-01-30T22:53:03Z", "contents": "Thanks @infews! Good to know the reasoning behind the change.\nI was able to partially fix this by targeting disabled specs with CSS (e.g. ... li.disabled { display: none; }), but this doesn't hide suites even if all their inner specs are disabled.\nIt would be awesome if the ul elements that represent disabled suites also had a disabled CSS class applied to them, but a cursory look through the code does indicate that it's not as straightforward as applying a specFilter-like filter since suites can be recursive.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-30T22:56:22Z", "contents": "Oh, right. That was part of the problem, too. We had made it that far and then started getting the \"where are my specs???\" feedback. It is a lot harder to determine if a Suite is disabled.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "callmevlad", "authorAssociation": "NONE", "createdAt": "2014-02-06T22:50:38Z", "contents": "In case someone is interested, there's a way to enable Jasmine 1.3-like output by filtering out inactive suites. In jasmine-html.js, add a function to recursively determine if a result node has any active specs:\nfunction hasActiveSpec(resultNode) {\n  if (resultNode.type == \"spec\" && resultNode.result.status != \"disabled\") {\n    return true;\n  }\n\n  if (resultNode.type == 'suite') {\n    for (var i = 0, j = resultNode.children.length; i < j; i++) {\n      if (hasActiveSpec(resultNode.children[i])) {\n        return true;\n      }\n    }\n  }\n}\nThen, in the summaryList function, just run that filter for suites:\n// ...\nvar resultNode = resultsTree.children[i];\nif (resultNode.type == \"suite\") {\n  // Don't display inactive suites\n  if (!hasActiveSpec(resultNode)) {\n    continue;\n  }\n\n  // var suiteListNode = ...\n  // ...\n}\n@infews - would you be open to a pull request for something like the above behind a query string flag? Not sure if it runs counter to some of the concerns you outlined earlier that necessitated showing the full suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-10T22:21:48Z", "contents": "If you can integrate this in a manner similar to the \"catch exceptions\" parameter that's already in the reporter, I'm happy to review a PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "evgeny-myasishchev", "authorAssociation": "NONE", "createdAt": "2014-09-02T21:33:43Z", "contents": "I'd love to see this feature.  So +1 on it if that counts :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-27T22:46:54Z", "contents": "If anyone is still interested in this. Here's what we'd be looking for in a pull request:\nHtmlReporter should be able to be configured to not show any disabled specs or suites. HtmlReporter should provide an option similar to \"catch exceptions\" that sets a query param.\nboot.js should be able to configure its HtmlReporter for this based on a query param.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jasonmobley", "authorAssociation": "NONE", "createdAt": "2015-08-19T15:44:52Z", "contents": "I don't think the checkbox option is necessary for the use case described here.\nThe complaint is that the HtmlReporter doesn't filter its output when you're only running a specific spec, i.e. when you've given ?spec=foo on the query string. It seems totally reasonable that the HtmlReporter would only show output for that spec, because that's exactly what you told Jasmine to do!\nIs there a way to detect that the spec list has been reduced due to ?spec=foo URL args, and filter output on that basis?", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "jasonmobley", "authorAssociation": "NONE", "createdAt": "2015-08-19T15:47:18Z", "contents": "FWIW, I agree with the choice to show disabled specs by default, e.g. those disabled/ignored via xdescribe. I don't think of giving ?spec=foo URL args as \"disable everything but this.\" I think of it as \"only run this,\" which means I expect only that output.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-02T02:15:17Z", "contents": "Internally, what happens when you load the page with ?spec=foo is that all of the other specs get marked as disabled for the current run. This way spec really only have 3 states: running, pending, and disabled. I think this means that making the change you propose would add another state and set of complexity to running the jasmine suite, unless I'm mistaken.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 511, "url": "https://github.com/jasmine/jasmine/issues/511", "title": "jasmine-core boot.js duplicated", "contents": "In the npm package of jasmine-core, it appears that boot.js is duplicated.\n\njasmine-core/\n\nboot.js\nboot/\n\nboot.js\n\n\n\n\n\nIs there a reason for the duplication, or is this just an oversight?", "createdAt": "2014-01-31T02:53:06Z", "updatedAt": "2014-08-26T20:15:00Z", "closedAt": "2014-08-26T20:15:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "intel352", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "intel352", "company": "Salesforce @forcedotcom"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "wyuenho", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-31T19:26:56Z", "contents": "Thanks - totally a bug in our package.json and npm packaging.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wyuenho", "authorAssociation": "NONE", "createdAt": "2014-02-04T01:31:47Z", "contents": "How might one use boot.js inside a node environment anyway? It's clearly not going to work and you'll get a reference error.\nhttps://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/boot.js#L40", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "intel352", "authorAssociation": "NONE", "createdAt": "2014-02-11T23:38:56Z", "contents": "@wyuenho, good point, it shouldn't even exist in that package unless it were to be altered to support node specifically.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-04-18T16:47:46Z", "contents": "We have fixed this on master, but are not yet ready to release a new jasmine-core npm yet. Please take a look and let us know.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:15:00Z", "contents": "We've released a new jasmine-core npm (https://www.npmjs.org/package/jasmine-core) that includes a boot file specifically for nodejs. The html boot.js is still included for people using the npm package to get jasmine, but who want to run their specs in the browser.\nClosing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 512, "url": "https://github.com/jasmine/jasmine/issues/512", "title": "Make bootstrap AMD/CommonJS compliant", "contents": "Currently Jasmine 2 cannot be used (or at least requires a lot of brute force) to test modular JavaScript, such as files authored as AMD modules to be used with a script loader such as RequireJS. Fundamentally I think the only limitation is this line: https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/boot.js#L187\nI think it would be extremely useful if the boostrap could export a simple interface for use with a script loader. For example:\nfunction kickoff() {\n  if (currentWindowOnload) {\n    currentWindowOnload();\n  }\n  htmlReporter.initialize();\n  env.execute();\n};\n\nif ( typeof define === 'function' && define.amd ){\n  define(function() {\n    return kickoff;\n  });\n}\nelse if ( typeof module !== 'undefined' && module.exports ) {\n    module.exports = kickoff;\n}\nelse {\n  window.onload = kickoff;\n}\nI'm quite probably way oversimplifying the issue (I don't have much knowledge of the Jasmine internals) but this would be really, really useful!", "createdAt": "2014-01-31T15:30:15Z", "updatedAt": "2014-02-19T21:14:19Z", "closedAt": "2014-02-03T17:32:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "i-like-robots", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "i-like-robots", "company": "FT"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-01-31T19:19:38Z", "contents": "We've taken the position that boot.js should be per-environment, for some value of environment. I would expect AMD/CommonJS/RequireJS should each have their own. With some duplication across multiple versions it would make it easier for us to break up boot.js - which is way too big and complex - along nice responsibility lines.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "i-like-robots", "authorAssociation": "NONE", "createdAt": "2014-02-03T10:31:23Z", "contents": "Is boot-amd.js in the works/on the timeline or is that an area you'd be looking for contributions?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-03T17:32:01Z", "contents": "We're not AMD people, so this should come from the community. I'm happy to review any PR and work with you on this. Let's take this to the jasmine mailing list - jasmine-js@googlegroups.com", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 513, "url": "https://github.com/jasmine/jasmine/issues/513", "title": "Example-specific context to make async code problems easier to diagnose", "contents": "I have run into a case where I have async code timing out, and it's hard to isolate the real problem because the same vars are shared across multiple test passes, and code that runs after timeout is having state interactions with test that started after the first one timed out.\nIt would be nice if each time an example runs, it has access to its own context object that will be shared between all the beforeEach, afterEach, and it calls, but not shared with any other example runs.\n(or perhaps there's already some way to accomplish something similar that I don't know about)\nThis would be kind of nice for synchronous examples too since the context would always start out as a an empty object with no risk of having anything left over from a previous run. For synchronous examples, this can be achieved simply by having a top-level beforeEach that assigns c = {}, but it would be nice to have the pattern be institutionalized in jasmine.\nUnfortunately, I can't see any way of delivering the example-run context to each method that needs it except by way of a parameter, but the arity of the function is already used to indicate an asynchronous step receiving a done function. Perhaps, there is some other way to accomplish this that I have not thought of though.", "createdAt": "2014-02-02T18:50:17Z", "updatedAt": "2014-02-03T02:56:53Z", "closedAt": "2014-02-02T19:14:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stevecj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "stevecj", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 5, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-02T19:06:10Z", "contents": "Hi @stevecj, this is included in Jasmine 2.0.0. The this in a beforeEach, afterEach, and it relating to one particular it all have the same this -- an empty object that is maintained for users to put their test specific data on. This is an alternative to the closure style we have documented. It is available for both async and synchronous examples.\nI think we just need to document it. I can try getting around to it later in the day but happy to take a documentation pull over at https://github.com/jasmine/jasmine.github.io", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-02-02T19:14:04Z", "contents": "Awesome! Thx.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-02-02T19:15:38Z", "contents": "I probably can't get around to doing a doc pull today, but if I'll try to keep tabs on this, and make a PR if you haven't beaten me to it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-02T19:28:14Z", "contents": "Cool sounds good!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-03T02:56:25Z", "contents": "Documented! \"http://jasmine.github.io/2.0/introduction.html#section-The_this_keyword\"\nThanks for bringing this up.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 514, "url": "https://github.com/jasmine/jasmine/issues/514", "title": "Need a main entry point for node", "contents": "As @substack has noted in this comment, the way to require Jasmine in node now is very weird and non-obvious. It's not even documented. Can we have a main entry point AKA a valid main entry inside package.json so library authors can have an easier time consuming Jasmine please?", "createdAt": "2014-02-04T01:35:56Z", "updatedAt": "2014-10-31T20:12:18Z", "closedAt": "2014-10-31T20:12:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wyuenho", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "wyuenho", "company": null}, {"login": "sindresorhus", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "amavisca", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "nmccready", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "sindresorhus", "authorAssociation": "NONE", "createdAt": "2014-02-11T18:43:30Z", "contents": "\ud83d\udc4d", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-04-18T16:46:54Z", "contents": "Please take a look at master and see if things are easier now. We're trying this with our pre-release official npm and we think we're doing the right thing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sindresorhus", "authorAssociation": "NONE", "createdAt": "2014-04-18T18:22:35Z", "contents": "Still no main entry point.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2014-04-18T20:41:18Z", "contents": "@sindresorhus The jasmine-npm is just an implementation on top of the jasmine-core (pivotal/jasmine repo) which now has a main entry point in the master branch.\nhttps://github.com/pivotal/jasmine/blob/master/package.json#L11 is the actual main entry point. It gives you jasmine.js and a boot method. (not pushed to npm yet)\nIs there something else you were looking for as a main entry point or did this solve things?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-18T20:50:05Z", "contents": "This is because jasmine-core is meant for Node projects that need to depend on Jasmine. If you want to run specs in Node, you want the Jasmine npm.\nWhat are you attempting to do and what do you think needs to change?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nmccready", "authorAssociation": "NONE", "createdAt": "2014-05-23T13:57:40Z", "contents": "So which thing should @sindresorhus be using https://github.com/pivotal/jasmine/blob/master/package.json#L11 or jasmine-npm for gulp-jasmine to support 2.0 ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nmccready", "authorAssociation": "NONE", "createdAt": "2014-05-23T14:46:27Z", "contents": "I think what @sindresorhus is asking is why is the node version jasmine.js not exported? Why should someone have to re-implement the whole loading process of Command, Config and Runner? Why not expose all of that which is already loaded in your binary?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nmccready", "authorAssociation": "NONE", "createdAt": "2014-05-23T18:24:12Z", "contents": "For example checkout this jasmine-npm-bootstrap file I wrote by not using the Runner directly.\nhttps://github.com/nmccready/gulp-jasmine/blob/jasmine-npm/jasmine-npm-bootstrap.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2014-05-29T04:37:54Z", "contents": "@nmccready Thanks for the feedback.\nI threw up a demo of something like this on the api branch of jasmine-npm. https://github.com/pivotal/jasmine-npm/tree/api.\nI was worried that this might just be a lot of code duplication with what the core exposes, but looking back I think there's quite a lot of overhead to do something like this from the core. It makes sense for task runners to be consuming something like this instead of the core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-22T20:35:19Z", "contents": "We just released the jasmine package to npm with what we hope is a much better interface for loading jasmine into an existing npm environment.\nPlease take a look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-31T20:12:17Z", "contents": "Now that the jasmine npm has been out there for a few months, and people are using it, I'm going to close this. If you have any issues with the jasmine npm, submit issues there.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 515, "url": "https://github.com/jasmine/jasmine/issues/515", "title": "resart jasmine test suite in from browser console in debug mode", "contents": "Hi,\nI need to restart my jasmine test suite from my debug console is it possible?\nI use the following  steps ot be in the console\nhttps://github.com/ekonijn/grunt-require-demo/blob/master/doc/debugging-jasmine.md#attaching-developer-tools-to-phantomjs\nThen I can see a jasmine and jasmine object etc ...\nI tried to execute the test suite with\njasmine.Suite.prototype.execute();\nwithout success, i think i should initialize something first but don't know why what !\nThx", "createdAt": "2014-02-04T23:07:14Z", "updatedAt": "2014-09-21T04:08:18Z", "closedAt": "2014-09-21T04:08:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mmslice", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mmslice", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-02-26T22:57:27Z", "contents": "Why do you need to restart a jasmine run after it has already completed? Theoretically, what you want it jasmine.getEnv().execute(), however, this won't necessarily re-initialize anything and it is really only designed to be run once. In a quick test in chrome locally, it spiked the CPU for that tab.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-21T04:08:16Z", "contents": "Closing this for lack of response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 516, "url": "https://github.com/jasmine/jasmine/issues/516", "title": "testing fadeOut() method", "contents": "Hi guys, I'm new to Jasmine 2.0 as we were been using 1.0 version and got stuck with that for a while. I wonder if there's a way to test fadeOut callbacks? I know that waitsFor() method is already deprecated on this new version. Is there a way to test the fadeOut() callback using Jasmine Clock?\nThanks,\nmarc", "createdAt": "2014-02-05T02:38:33Z", "updatedAt": "2014-02-12T02:05:30Z", "closedAt": "2014-02-12T02:05:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "marcagas", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "marcagas", "company": "Friendster"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-05T05:40:31Z", "contents": "Hi @marcagas, is this jQuery's fadeOut? If so, it takes a completion handler as the second argument, which you can pass the async completion handler for. Here's an example:\n// implementation\nfunction fadeOutElem(callback) {\n  $('.elem').fadeOut(300, callback);\n}\n\n// test\nit(\"fades out the element\", function(done) {\n  fadeOutElem(done);\n});\nIf the implementation can't find the '.elem' or for some other reason the callback isn't executed, the 'done' that is threaded through won't be called and you'll get a properly failing spec.\nIn case it's not possible to thread the callback through, or maybe you're not using something that gives a callback hook for fadeOut(), then you could do something like the following:\nit(\"fades out the element\", function(done) {\n  fadeOutElem();\n  setTimeout(300, function() {\n    expect($(\".elem\").css('display').toEqual('none');\n    done();\n  });\n});\nThere's also the stubbing approach (again assuming jQuery), where you should be able to do something like the following:\nit(\"fades out the element\", function() {\n  spyOn($.fn, 'fadeOut');\n  fadeOutElem();\n  expect($.fn.fadeOut).toHaveBeenCalled();\n});\nAs you mentioned you could probably do something with the Jasmine clock since jQuery might be using setTimeout to do the fading. So something like the following might work:\njasmine.clock().install(); // might even need to be before jQuery is loaded since it could be closing over setTimeout, etc.\nit(\"fades out the element\", function() {\n  fadeOutElem();\n  jasmine.clock().tick(300);\n  expect($(\".elem\").css('display').toEqual('none');\n});\nThe clock seems like a harder way to test this, but those are all the options I can think of!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marcagas", "authorAssociation": "NONE", "createdAt": "2014-02-05T05:53:33Z", "contents": "Thanks for your quick response @sheelc, really an effort. I've tried already the Jasmine clock implementation you've shown at the last part before posting this and it didn't work on my part. Let me try the other approaches you've mentioned. As my fadeout callback is doing quite some stuff which must really be tested properly.\nThanks!\nmarc", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 518, "url": "https://github.com/jasmine/jasmine/issues/518", "title": "track spy call number document outdate", "contents": "index page document  list\n  it(\"tracks its number of calls\", function() {\n    expect(foo.setBar.calls.length).toEqual(2);\n  });\n\nbut in  jasmine 2.0.0 ,the right case seem\n  it(\"tracks its number of calls\", function() {\n    expect(foo.setBar.calls.count()).toEqual(2);\n  });\n\nis the index document outdate?", "createdAt": "2014-02-10T10:04:56Z", "updatedAt": "2014-02-11T03:04:21Z", "closedAt": "2014-02-10T15:52:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lvscar", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lvscar", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-10T15:52:32Z", "contents": "I suspect you are using the 1.3 docs. (It should be noted near the top of the page: \"This guide is running against Jasmine version ___\")\nI just checked the 2.0 docs and they seem to be correct. You can find the updated docs here: http://jasmine.github.io/2.0/introduction.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lvscar", "authorAssociation": "NONE", "createdAt": "2014-02-11T03:04:21Z", "contents": "got , thx.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 519, "url": "https://github.com/jasmine/jasmine/issues/519", "title": "Document new custom matcher inferface.", "contents": "So the release document states that something has changed, and apparently my setup from 1.x does not work anymore. Could you please document what the new correct way is to add custom matchers?", "createdAt": "2014-02-11T22:54:22Z", "updatedAt": "2014-02-12T21:39:51Z", "closedAt": "2014-02-12T00:13:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cburgmer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cburgmer", "company": "ThoughtWorks"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-12T00:13:14Z", "contents": "Hi cburgmer:\nPlease try the docs here and reopen if you still have questions: http://jasmine.github.io/2.0/custom_matcher.html\nI understand why you didn't find them -- there's a very small \"JUMP TO...\" dropdown menu in the upper right hand link when you go to the 2.0 docs that takes you to more detailed documentation. I added a story to fix that problem here: https://www.pivotaltracker.com/story/show/65602508", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-02-12T21:39:51Z", "contents": "Thanks ragaskar, works well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 520, "url": "https://github.com/jasmine/jasmine/issues/520", "title": "performance issue with toHaveBeenCalledWith arguments check", "contents": "Hey,\nI noticed some strange slow behavior when using toHaveBeenCalledWith with Backbone events. It seems like the arguments check for the call is going down some slow path, it causes the browser to eat up a lot of memory and slows the tests down.\nWhen I perform the arguments check myself it doesn't seem to do this.\nHere is an example:\nit('should receive some event', function() {\n  var mySpy = jasmine.createSpy('mySpy');\n  var model = new Backbone.Model(), anotherModel = new Backbone.Model();\n  model.on('mySpy', mySpy);\n\n  model.trigger('mySpy', anotherModel);\n  //The following toHaveBeenCalledWith is crazy slow...\n  expect(mySpy).toHaveBeenCalledWith(anotherModel);\n});\n\nMy fix was to do the following:\nit('should receive some event', function() {\n  var mySpy = jasmine.createSpy('mySpy');\n  var model = new Backbone.Model(), anotherModel = new Backbone.Model();\n  model.on('mySpy', mySpy);\n\n  model.trigger('mySpy', anotherModel);\n  expect(mySpy).toHaveBeenCalledWith(jasmine.any(Backbone.Model));\n  expect(mySpy.calls.mostRecent().args[0]).toEqual(anotherModel);\n});\n\nI think the slow path is caused by jasmine.js:2165\nif (util.contains(actual.calls.allArgs(), expectedArgs)) {\n\nSomehow the contains check is recursing in a weird way for backbone models and callbacks at least to cause some serious performance issues. I can do more analysis of the actual cause but I wanted to report it right away. Has anyone else seen a problem like this?", "createdAt": "2014-02-16T17:46:10Z", "updatedAt": "2014-04-01T01:45:16Z", "closedAt": "2014-02-19T04:07:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdy", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "rdy", "company": "Sony"}, {"login": "jboyens", "company": "Backend Engineer @shyftapp "}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "matthargett", "company": "@Sony @PlayStation"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 12, "comments_data": [{"authorLogin": "jboyens", "authorAssociation": "MEMBER", "createdAt": "2014-02-16T18:50:13Z", "contents": "Thanks for the report Ryan. It looks like your fix is doing something different than what toHaveBeenCalledWith is doing.\ntoHaveBeenCalledWith will check ALL of the calls for anything that matches your provided arguments. You're checking only the most recent call. So I could definitely see a performance problem if your spy had been called a lot of times.\nI wonder if we could do something where we check the most recent args first, instead of call order, and then break out at the first instance where we find a match...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-02-16T19:03:32Z", "contents": "Yes, I thought the exact same thing, but I'm seeing the same thing even when there was only 1 call to the function, pretty strange right.\nIt looks like it is the comparison of the Backbone model as an argument, I haven't looked into it with a huge amount of detail. Anyways the gist of the problem is summarized by my first post. I'd be happy to create a more specific test case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-16T22:18:49Z", "contents": "A more specific test case would be super helpful. I tried reproducing with the two its above. Looping over the same spec 100 times, each spec took on average of about 1 milli (using either method). The memory usage of both trials was nearly the same. These trails are with Jasmine 2.0.0 using the standalone distribution in latest Chrome. Results seem about the same, but a little faster, in latest Firefox.\nMaybe this is something that degrades quickly with more full fledged Backbone models (that have attributes, etc.) which causes Jasmine equality to evaluate quite a bit?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-02-17T00:37:04Z", "contents": "Yes, I believe you are right @sheelc, once you put some significant attributes in the Backbone model the code which checks for object equality loops through all those attributes. I guess the easiest way to reproduce the problem is create a large number of attributes on the backbone model and try again. If I have a chance I will try to put together a test case. I'm fairly certain you will see this with anything that has lot of attributes on it, which really shouldn't effect the equality check.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-17T06:59:44Z", "contents": "Ah okay thanks for the clarification @rdy. I'll give that a shot. It'll be interesting to see if Jasmine's equality check performs much worse than Underscore's (since we use it as the basis of Jasmine equality in 2.0).\nIt seems expected that performance would get worse as the number of attributes increase (since we have to check all of them manually), but hopefully we haven't done anything that makes it much worse than Underscore's version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-02-17T07:03:42Z", "contents": "What is interesting is that the toEqual check uses the same strategy, but in my example and my tests with it so far, it does not exhibit the same behavior. Something about the args seems to be the problem.\nAnyways I thought I would bring it to your attention since it is a pretty common pattern to check args for spies. I'll try to put together my test case in a more portable test case that can illustrate the problem, but you might want to ask around and see if other people are experiencing slowdowns in jasmine 2 like I have been seeing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-17T07:07:57Z", "contents": "Ah right I forgot about that toEqual part; sounds like your initial thought of the toContain is more apt then.\nDefinitely! Thanks for mentioning it. Would be good to get this narrowed down.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-17T20:23:56Z", "contents": "Cool reproduced! I stuck a whole bunch of attributes onto the model and was able to get a 3x slowdown when using toHaveBeenCalledWith.\nThe slowdown is coming from building the result.message through the PrettyPrinter in the following line:\nresult.message = \"Expected spy \" + actual.and.identity() + \" not to have been called with \" + j$.pp(expectedArgs) + \" but it was.\";\nIf we make the building of the result.message lazy, and only construct on failure messages, then failures will still be slow but then at least a passing test (hopefully the majority of the time) will be fast.\nAlternatively if we make the PrettyPrinter faster somehow then we should actually see reasonable speeds. As a first pass, I swapped out the calls to j$.pp to instead be JSON.stringify and was able to get both ways (toHaveBeenCalledWith and toEqual) running at about the same speed. Unfortunately I don't think we can fully get rid of the PrettyPrinter in favor of JSON.stringify as it contains nice printing for special cases like -0, which recently came up.\nAny thoughts? Maybe just making the failure message lazy is a good start?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-02-18T06:22:22Z", "contents": "I think lazy would be a great start, its unfortunate that broken tests would be slower but that isn't as much of a dealbreaker as green tests being slower.\nI'm glad you were able to reproduce, it is probably an issue for any type of object with lots of keys.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-19T04:16:45Z", "contents": "Just pushed a fix to use with lazy messages in a whole bunch of matchers that are pretty printing. It fixed the spec running times in my reproduction of the issue so hopefully it works for you too!\nOne caveat is that I realized I wasn't able to reproduce the high memory usage but I'm hoping those problems were tied together.\nPlease do reopen if it doesn't fix the issue for you. Thanks again for bringing this up Ryan!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthargett", "authorAssociation": "NONE", "createdAt": "2014-03-31T19:36:16Z", "contents": "any word on when this will be in a release? we'd prefer not to fork the repo and add the pull request just for this. thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-01T01:45:16Z", "contents": "It's on master, so you should be able to specify in your Gemfile that you want to use master jasmine-core and run normally otherwise.\nUnless you're saying you'd fork the repo and push an alternate gem to rubygems.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 523, "url": "https://github.com/jasmine/jasmine/issues/523", "title": "Calling done after timeout continues test execution", "contents": "Calling done after timeout causes execution of tests to continue. Done should be invalidated when timeout causes the test to fail and any calls to done after that should  not do anything.\nExample:\nhttp://jsfiddle.net/6bPD8/1/\nvar asyncTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\ndescribe(\"Async tests\", function() {\nit(\"should be possible to call done after timeout without causing tests to continue\", function(done) {\n  _.delay(function () {\n      done();\n  }, asyncTimeout + 1000);\n\n});\n});\nRunning the test above executes the test twice:\n1 spec, 1 failure\nSpec List | Failures\nraise exceptions\n2 specs, 2 failures\nSpec List | Failures\nAsync tests should be possible to call done after timeout without causing tests to continue\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nat http://cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/jasmine.js:281:23\nAsync tests should be possible to call done after timeout without causing tests to continue\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nat http://cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/jasmine.js:281:23", "createdAt": "2014-02-18T09:35:54Z", "updatedAt": "2014-09-20T22:01:45Z", "closedAt": "2014-02-26T02:06:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kharrhei", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kharrhei", "company": "@telestecorp"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "kharrhei", "authorAssociation": "NONE", "createdAt": "2014-02-18T09:58:22Z", "contents": "Sorry, wrong version of my fiddle. Correct version is:\nhttp://jsfiddle.net/6bPD8/1/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-19T03:26:15Z", "contents": "Yes we should fix this for the next release. We have a story for it here which also encapsulates if the done callback was invoked several times, the same behavior you witnessed will ensue (and it shouldn't).\nThanks for bringing this up!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 524, "url": "https://github.com/jasmine/jasmine/issues/524", "title": "Green dots cutting off on the test suite display", "contents": ".html-reporter .symbol-summary li {\ndisplay: inline-block;\nheight: 8px;\nwidth: 14px;\nfont-size: 16px;\n}\nshould be\n.html-reporter .symbol-summary li {\ndisplay: inline-block;\nheight: 14px;\nwidth: 14px;\nfont-size: 16px;\n}\njasmine v2.0.0\nCan you please fix this?", "createdAt": "2014-02-20T07:42:06Z", "updatedAt": "2014-10-23T20:32:16Z", "closedAt": "2014-10-23T20:32:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "i-bajrai", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "i-bajrai", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "lieut-data", "company": null}, {"login": "robrobbins", "company": "Computable Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-20T16:14:26Z", "contents": "Which browser is this? Does it go away with a second row of specs? What does the \"new\" spacing look like with a lot of specs?\nI ask b/c I've not seen this before in our usage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "i-bajrai", "authorAssociation": "NONE", "createdAt": "2014-02-22T08:14:06Z", "contents": "Hi Davis,\nThis was in latest version of Chrome, I haven't see what happens with multiple rows of specs, I will test it and report my findings.\nThanks for your response.\nImran", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-24T22:35:28Z", "contents": "@i-bajrai, we tried reproducing with only one spec (like you have in the screenshot) in the latest Chrome and were not able to reproduce. We also tried changing browser zoom to no avail.\nAny other debugging information you can provide while you are investigating the multiple rows?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lieut-data", "authorAssociation": "NONE", "createdAt": "2014-04-10T17:17:42Z", "contents": "I saw this issue when my spec runner wasn't using <!DOCTYPE html>. YMMV.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "robrobbins", "authorAssociation": "NONE", "createdAt": "2014-04-15T22:33:57Z", "contents": "Just got this is latest Chrome:\n\nFor some reason, monkeying with the font-size on the #htmlReporter .symbolSummary li.passed style rule 'fixes' it -- even if you bypass the 14px 'override' and put it right back #chromefail?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:41:01Z", "contents": "So is this a cross-browser CSS bug? Or a Chrome bug? Is there a PR that can fix this in a cross-browser way? Or is this closable?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-23T20:32:16Z", "contents": "We have been unable to reproduce this ourselves, and it sounds like it might partially be a Chrome issue? You should also make sure there aren't any other stylesheets that have rules that break jasmine's styles.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 525, "url": "https://github.com/jasmine/jasmine/issues/525", "title": "add done() to describe() so that you can load data once and then test it.", "contents": "I was looking for a way to request data just once inside of a test suite, and then test the result against multiple it() blocks without having to request the data multiple times in a beforeEach(). It seems like this could be accomplished by adding the async done() function to describe().", "createdAt": "2014-02-21T05:25:13Z", "updatedAt": "2014-09-25T19:50:44Z", "closedAt": "2014-09-25T19:50:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mroberge", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mroberge", "company": "Towson University"}, {"login": "stevecj", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-02-23T03:46:42Z", "contents": "As a workaround, you could create a promise inside of the top-level describe, and in your beforeEach() code call done inside of a function passed to the then() handler of the promise. That way, the first example can't run until the promise has been resolved, and then all examples will be able to run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T20:28:13Z", "contents": "I think what you really want here is beforeAll and maybe afterAll\nSee some discussion of the feature here: #56\nAdditionally, we're currently working on beforeAll/afterAll you can see the branch here: https://github.com/pivotal/jasmine/tree/before", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:34:24Z", "contents": "@mroberge have you tried the branch? Does it solve your problem?\nIf so, can we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T19:50:42Z", "contents": "We've added an implementation of beforeAll and afterAll in this commit ba0982d, which we think the the correct solution to this issue. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 526, "url": "https://github.com/jasmine/jasmine/issues/526", "title": "How do I run before and after asynchronous specs in jasmine 2.0", "contents": "The new done() syntax, at first glance, appears to be far less flexible than the old syntax. Using done how do I implement something like:\nit('should allow multi stage asynchronisity', function () {\n    runs(function () {\n        //set up\n        var initialState\n        // call something asynchronous\n        expect(middleState).toEqual(initialState);\n    });\n\n    waits(200);\n\n    runs(function () {\n        expect(middleState).not.toEqual(initialState);\n       // call something else asynchronous\n        expect(finalState).toEqual(middleState);\n    });\n\n    waits(200);\n\n    runs(function () {\n       // call something else asynchronous\n        expect(finalState).not.toEqual(middleState);\n    });\n});", "createdAt": "2014-02-21T15:59:43Z", "updatedAt": "2014-06-23T03:22:43Z", "closedAt": "2014-06-23T03:22:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wheresrhys", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "wheresrhys", "company": "Squirrel Commando"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "jeremyhill-up", "company": "@unionpacific"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-21T19:33:27Z", "contents": "beforeEach and afterEach also take done callbacks. So you can do your setup in a before, then call done, then have your it do your expectations.\nSomething more like:\ndescribe('should allow multi stage asynchronisity', function () {\n    beforeEach(function (done) {\n        //set up\n        var initialState\n        // call something asynchronous\n        done();\n    });\n\n    it(function (done) {\n        expect(middleState).not.toEqual(initialState);\n       // call something else asynchronous\n        expect(finalState).toEqual(middleState);\n        done();\n    });\n});", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "wheresrhys", "authorAssociation": "NONE", "createdAt": "2014-02-22T00:04:36Z", "contents": "Hmmm... So does this limit me to 3 stages and only via the artificial step\nof a wrapping my spec with a before and after in a describe? If so this is\na worse API than 1.3\nOn Friday, February 21, 2014, Davis W. Frank notifications@github.com\nwrote:\n\nbeforeEach and afterEach also take done callbacks. So you can do your\nsetup in a before, then call done, then have your it do your expectations.\nSomething more like:\ndescribe('should allow multi stage asynchronisity', function () {\nbeforeEach(function (done) {\n//set up\nvar initialState\n// call something asynchronous\ndone();\n});\nit(function (done) {\n    expect(middleState).not.toEqual(initialState);\n   // call something else asynchronous\n    expect(finalState).toEqual(middleState);\n    done();\n});\n\n});\n\nReply to this email directly or view it on GitHubhttps://github.com//issues/526#issuecomment-35764811\n.\n\n\nSent with thumbs (mostly the right one, which is developing a bit of a\ncallous) from my Nokia 3210", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-02-22T04:20:07Z", "contents": "You can have multiple befores with done callbacks like so:\ndescribe('should allow multi stage asynchronisity', function () {\n    beforeEach(function (done) {\n        //set up\n        var initialState\n        // call something asynchronous\n        done();\n    });\n\n    beforeEach(function (done) {\n        // check some intermediate state\n        // call something asynchronous\n        done();\n    });\n\n    it(function (done) {\n        expect(middleState).not.toEqual(initialState);\n       // call something else asynchronous\n        expect(finalState).toEqual(middleState);\n        done();\n    });\n});\nThe befores will be called in the order they're defined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wheresrhys", "authorAssociation": "NONE", "createdAt": "2014-02-22T08:47:16Z", "contents": "Thanks @slackersoft. I'll use that approach. I Still thinks it's a poor API if you're forced to use beforeEachs that are only meant for a single spec. Perhaps the API should be changed so that if an it is passed multiple functions as arguments then they are called in order?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-24T19:01:00Z", "contents": "The hope is that the main done callback is only executed once all asynchronous calls have completed (allowing the user to handle as many async steps as are necessary in a single before or it)\nUsing callback functions, your test could look something like this:\nit(\"multi-stage async\", function(done) {\n    var initialState;\n\n    somethingAsynchronous(function() {\n        expect(middleState).not.toEqual(initialState);\n        somethingElseAsync(function() {\n            expect(finalState).not.toEqual(middleState);\n            done();\n        });\n\n        expect(finalState).toEqual(middleState);\n    });\n\n    expect(middleState).toEqual(initialState);\n});\nUsing promises (so that the expectations appear in order they are called), the same test could look like this:\nit(\"multi-stage async with promises\", function(done) {\n    var initialState;\n\n    var promise = somethingAsynchronous();\n    expect(middleState).toEqual(initialState);\n\n    promise.then(function() {\n        expect(middleState).not.toEqual(initialState);\n        var innerPromise = somethingElseAsync();\n        expect(finalState).toEqual(middleState);\n        return innerPromise;\n    }).then(function() {\n        expect(finalState).not.toEqual(middleState);\n        done();\n    });\n});\n(Also for #530 which is related to this issue, it is worth noting that expect can be called in a before if so desired.)\nDoes that help this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeremyhill-up", "authorAssociation": "NONE", "createdAt": "2014-03-12T13:27:14Z", "contents": "I don't like to be a complainer, but that's so much more boilerplate for so much less functionality.  One of the major draws of Jasmine was the simple syntax (describe, it, beforeEach, etc).  Now beforeEach is overloaded to mean significantly different things, the clean syntax of waits, runs is gone -- it just feels like an anti-pattern to me.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:22:37Z", "contents": "I think you're pointing out problems that many projects run into with testing asynchronous code asynchronously.\nWe moved to the done() syntax as the async-heavy community found it workable in Mocha. We're not averse to improving it over time. Thanks for the feedback and thanks for using Jasmine.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 528, "url": "https://github.com/jasmine/jasmine/issues/528", "title": "Equivalent of RSpec \"let\"", "contents": "In a project that I'm working on, I have defined a \"def\" method on the user context object (this) that works similarly to the \"let\" method in RSpec. This works fine, but it would be nice to have a standard way of doing this in Jasmine.\nI could just make a PR to add the functionality to Jasmine as a \"def\" method on the user context, but I'm not sure if that's the best API for such a thing. Any better suggestions for an API?\nFor the implementation in my project, see https://github.com/stevecj/headway/blob/master/spec/support/userContextExt.js .", "createdAt": "2014-02-22T21:26:55Z", "updatedAt": "2014-10-24T19:55:24Z", "closedAt": "2014-10-24T19:55:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stevecj", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "stevecj", "company": null}, {"login": "Benmidi", "company": "Benmidi"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Benmidi", "authorAssociation": "NONE", "createdAt": "2014-07-29T14:59:27Z", "contents": "\ud83d\udc4d\nWe wrote our own helper.\n(function() {\n  'use strict';\n  beforeEach(function() {\n    this.let_ = function let_(propName, initializerFn) {\n      var _lazy;\n\n      Object.defineProperty(this, propName, {\n        get: function() {\n          if (!_lazy) {\n            _lazy = initializerFn.call(this);\n          }\n\n          return _lazy;\n        },\n        set: function() {},\n        enumerable: true,\n        configurable: true\n      });\n    };\n  });\n})();\nexample:\nbeforeEach(function() {\n    this.modelAttrs = jasmine.getHtml2jsFixture('article_card_model.json');\n    this.viewAttrs = {};\n\n    this.let_('model', function() {\n      var model = jasmine.createSpyInstance(Card, this.modelAttrs);\n      model.contributors = new Contributors(this.modelAttrs.contributors);  // simulate fromApi\n      return model;\n    });\n\n    this.let_('view', function() {\n      var options = _.defaults(this.viewAttrs, { model: this.model }),\n          view = constructor(options);\n      spyOn(view, 'generateHtmlForSection');\n      return view;\n    });\n  });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-24T19:55:23Z", "contents": "Since this doesn't require any changes to jasmine itself for this to be implemented in a plugin, we think that makes the most sense. Allowing the community to maintain this functionality as a plugin allows jasmine itself to stay small and easy to understand while allowing people who miss features like this access to the as plugins.\nWe still need to work on a way to publicize plugins that already exist, probably at http://jasmine.github.io\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 529, "url": "https://github.com/jasmine/jasmine/issues/529", "title": "Fail with error & stack trace in asynchronous code", "contents": "When an error is thrown from asynchronous code, Jasmine currently has no way of knowing that it happened, skipping subsequent stages (e.g. \"it\" following error in \"beforeEach\") and reporting a trace.\nAs a workaround, I have written helper code to catch and record the error from a function execution so that it can be re-thrown from an \"afterEach\" block. This solution at least gives a failure and a stack trace, but still leaves a lot to be desired.\nFor my partial workaround, see the \"asyncStep\" and \"getCaptureAsyncError\" functions in https://github.com/stevecj/headway/blob/master/spec/support/userContextExt.js . To see how those are used, see https://github.com/stevecj/headway/blob/master/spec/indexedDbAdapterSpec.js .", "createdAt": "2014-02-22T21:39:09Z", "updatedAt": "2018-03-03T00:20:24Z", "closedAt": "2017-03-08T00:34:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stevecj", "authorAssociation": "NONE", "participants_count": 13, "participants_data": [{"login": "stevecj", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mik01aj", "company": "Google"}, {"login": "adrianolek", "company": null}, {"login": "mariogruizdiaz", "company": null}, {"login": "gustavomick", "company": null}, {"login": "attila123", "company": null}, {"login": "lathonez", "company": "@ellipticltd  "}, {"login": "sgravrock", "company": null}, {"login": "dpmott", "company": null}, {"login": "applecool", "company": "Esri"}], "comments_count": 36, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-24T19:24:45Z", "contents": "Handling asynchronous errors is something that we would like to look at in future releases in Jasmine.\nThanks for sharing your implementation. Unfortunately since Jasmine won't be able to wrap the asynchronous code in a try/catch we'll probably have to end up relying on window.onerror/process.on('uncaughtException'). We've added a story to the backlog to explore this issue here, but happy to look at pull requests as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-02-24T20:25:30Z", "contents": "Correction to above.  Since I moved files around, see https://github.com/stevecj/headway/blob/master/spec/indexedDbAdapter/coreSpec.js for example of how the helpers are used.\nThe way I'm applying the try/catch is to have the programmer pass a function to this.asyncStep(...) which then returns a wrapped function. The resulting wrapped function can then be supplied to whatever will make the asynchronous call.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-24T22:01:38Z", "contents": "Ah interesting. Seems like that would work for callback parts of the code in the spec but still not parts of implementation code that could throw? For example in the following code taken from coreSpec.js:\nbeforeEach( function ( done ) {\n  this.getSubject().asyncConnect( DB_NAME ).then(\n    this.asyncStep( function ( db ) {\n      db.close();\n      // Only care about calls on re-open, not previous open to create db.\n      this.getSchema().migrate.calls.reset();\n    })\n  ).then( done, done );\n});\nIf asyncConnect was implemented like the following:\nasyncConnect = function(dbName) {\n  var promise = new Promise();\n  setTimeout(1, function() { \n    dataBaseConnector.connect(dbName).then(function(db) {\n      promise.resolve(db); \n    });\n  });\n\n  return promise;\n};\nThis implementation is a bit contrived, but if dataBaseConnector.connect raises an exception, it doesn't seem like asyncStep would catch it. To make this case work without window.error would require wrapping implementation code with asyncStep-like functionality -- which seems not ideal.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-02-25T05:54:37Z", "contents": "I see what you're saying. In my case, I have taken responsibility (as the developer) for making sure that the code that is likely to throw exceptions can be wrapped, and the only thing I'm relying on the helper to do is to notice the exception and deal with it. The only thing that I've been unhappy about with my helper is that it can't halt the example run when an exception is detected.\nOf course, it would be nicer if this was magically handled without having to wrap anything, but I'm not sure if that's possible to do in such a way that we can know the error belongs to the current example and not to a previous example that kept running after timeout (happens a lot with mistakes using indexedDB that cause blocking) or to some setInterval handler that never got cleared.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-02-25T17:53:44Z", "contents": "@stevecj That's a great point. Simply getting an error doesn't mean that we should fail the current spec.\nSeems like at least currently, minus wrongly assuming the current spec, it would have to be the developers that deal with exceptions that happen in their async code. I'm not really sure how we can proceed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-02-26T06:32:03Z", "contents": "IMO, a good step forward would be something similar to the helper I wrote, but that can also halt the example in its currently in-progress step or output the full example name that it belongs to if already timed out.\nI just had this thought \u2014 maybe dumb, or maybe clever. What if the \"done\" argument could double as as an object with member functions such as the one I'm suggesting for wrapping async substeps (rather than adding a method to \"this\" as I have been doing)? Perhaps, there could also be a prescribed technique for adding other custom support methods to \"done\".\nIf this idea sounds good to you, I wouldn't mind attempting to work up a PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:23:59Z", "contents": "If this is still interesting to you, we'd be happy to look at a pull request. I need much more context in order to consider it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stevecj", "authorAssociation": "NONE", "createdAt": "2014-06-23T04:21:15Z", "contents": "No time in mys schedule at the moment, but definitely still interesting. I will try to make a PR sometime in the nearish future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-11T21:24:04Z", "contents": "We have this tracker story (https://www.pivotaltracker.com/story/show/66359332) as well", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-19T16:07:56Z", "contents": "I don't know if this is the same or different issue, but I discovered that when I do this somewhere:\nsetTimeout(function ()\u00a0{\n    throw 'kaboom';\n}, 1);\n\nthen what I get is:\nPhantomJS 1.9.8 (Mac OS X) ERROR\n  kaboom\n  at undefined\n\nFinished in 0.002 secs / 0.014 secs\n\nSUMMARY:\n\u2714 16 tests completed\n\nSo the reporter thinks that my tests pass... but it actually ran only 16 out of 52 tests I currently have. \ud83d\ude31", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-19T20:11:30Z", "contents": "The fact that the exception does not actually cause the suite to fail is the problem here. I'm not sure why it didn't run all of your tests, and am actually unable to reproduce that issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-20T14:33:25Z", "contents": "One more similar issue: when I do:\n    setTimeout(function()\u00a0{\n        expect(true).toBe(false);\n    }, 10);\n\n...it fails some random async spec later.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-24T15:18:41Z", "contents": "@mik01aj that actually doesn't surprise me. Once you get into setTimeout there isn't really any way to trace the failure back to any particular spec. So, if your spec doesn't have a done callback that it invokes at the end of the setTimeout function, jasmine will just associate the expectation with whichever spec is actually being executed when the timeout elapses and the function is invoked.\nThat is probably not something we're going to worry about, since it's failing the suite and you've basically set it up so jasmine can't figure out where the correct place to put the failure is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adrianolek", "authorAssociation": "NONE", "createdAt": "2015-09-12T22:33:36Z", "contents": "The issue is when a spec does have a done callback and the async code throws some exception before executing done().\nSomething like this:\ndescribe('suite', function () {\n  it('spec 1', function (done) {\n    // some async code that may eventually throw an exception\n    setTimeout(function () {\n      throw 'foo';\n      done();\n    });\n  });\n  it('spec 2', function () {\n    expect(true).toBeTruthy();\n  });\n});\nThe runner will crash while executing spec 1. The remaining specs (spec 2) won't run at all.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-28T17:29:53Z", "contents": "@adrianolek Simply throwing an error in the background shouldn't be causing the whole runner to crash. What I would expect to happen right now is, throw causes the done never to get called and the QueueRunner then times out the execution of that step and moves on.\nIf you are seeing the entire suite stop upon encountering an error in async code, that definitely sounds like a bug. What version of jasmine are you using? Can you reproduce this issue with a small suite of just the two specs?\nThanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adrianolek", "authorAssociation": "NONE", "createdAt": "2015-09-28T20:06:48Z", "contents": "@slackersoft here it is. I've just noticed jasmine/jasmine is the browser runner and I'm using jasmine/jasmine-npm. However the issue seems to be the same. I could add an issue in jasmine-npm if you prefer.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-29T16:49:40Z", "contents": "@adrianolek it sounds like the crash is particular to running the specs in node, since we don't yet have a global exception handler while running specs. We want to get this fixed soon, especially now that I more fully understand how it is affecting the npm runner, but I'm not sure when we'll get some time to look at how best to accomplish this.\nI would be happy to review a pull request that caught exceptions from async code in both a browser and nodejs context and got that failure to the current runnable to cause the failure. Also see the tracker story for more info.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mariogruizdiaz", "authorAssociation": "NONE", "createdAt": "2017-01-12T14:32:49Z", "contents": "Hello everyone!\nAny update on this issue?\nI am still having the issue of the test suite craches when an unhdled error arises inside an IT statement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gustavomick", "authorAssociation": "NONE", "createdAt": "2017-01-30T22:31:45Z", "contents": "+1\nhot fixing with a wrapper, any news about this? thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "attila123", "authorAssociation": "NONE", "createdAt": "2017-05-15T19:39:43Z", "contents": "@slackersoft thanks for this commit.\nIs there any special configuration to make this work?\nI updated jasmine-core to be 2.6.1 in my package.json + npm update-ed it, and I double checked that this change got into jasmine.js.\nStill the error which is thrown inside a callback function in a code in a beforeAll is not printed at all.\n  beforeAll(done => {\n    doSomething('blah', result => {\n      // inside the callback function\n      // business logic...\n      throw new Error('An error happens here');\n      // business logic...\n      // done would be called at the end\n      done();\n    });\n  });\n\nI use jasmine via protractor.\nWith a simple Promise based example I could make Jasmine to print the error with a stack trace:\n  beforeAll(done => {\n    new Promise((resolve, reject) => {\n      reject('emulate an error');\n    }).then(done).catch(err => { done.fail(err); } );\n  });\n\nWould it be the right pattern to follow, e.g. always do catch-ing and call done.fail in it like in the above example?\nIf I remove the catch-ing (remove '.catch(err => { done.fail(err); } )') from the code above, then I just get the following line:\n(node:5561) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): emulate an error\n\nand test execution stucks for quite some time as obviously done or done.fail does not get called.\nThe above pattern seems to work great also if an Error is thrown (error and stack trace are logged):\n  beforeAll(done => {\n    new Promise((resolve, reject) => {\n      throw new Error('error is thrown here');\n    }).then(done).catch(err => { done.fail(err); } );\n  });\n\nA bit more complex example, which also works nice (provided that the catch \"boilerplate\" is used at the end):\n  beforeAll(done => {\n    let asyncFunc1 = () => {\n      return new Promise((resolve, reject) => {\n        resolve('some long running task finishes successfully');\n      });\n    };\n\n    let asyncFunc2 = (arg) => {\n      return new Promise((resolve, reject) => {\n        console.log('arg', arg);\n        reject('The second one fails');\n      });\n    };\n\n    asyncFunc1().then(res => asyncFunc2(res)).then(done).catch(err => { done.fail(err); });\n  });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "attila123", "authorAssociation": "NONE", "createdAt": "2017-05-16T08:01:11Z", "contents": "I checked this  again with a colleague. It seems to depend on the Node.js version!!!\nIf I throw an Error from a plain old callback function inside beforeAll:\n\nit is correctly logged running with Node.js v6.9.5\nit is not logged at all with Node.js v6.10.3\n(currently I have these two versions of Node.js installed with nvm).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-16T20:56:51Z", "contents": "@attila123 Jasmine just uses the uncaughtException event on process to setup a handler, so if this context changed between the two versions, that could break it.\nAnother thing to check is that the Jasmine being run in the different versions is really 2.6.x and not accidentally 2.5 or something.\nWhen the error isn't logged, what other behavior are you seeing? Does your suite still pass? Does the spec timeout?, etc.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lathonez", "authorAssociation": "NONE", "createdAt": "2017-05-17T02:08:41Z", "contents": "I've been testing this today and was hoping someone could confirm the intended behaviour.\nThe following (as of 2.6.1) will fail my test suite:\nit('fails on an uncaught async error', () => {\n\n  // should fail somewhere because of this?\n  setTimeout(\n    (() => {\n      throw 'kaboom';\n    }),\n    1\n  );\n});\nBut the same thing in a Promise will not:\n  it('fails on an uncaught error thrown in a promise', () => {\n\n    let prom: Promise<{}> = new Promise((resolve, reject) => {\n      resolve();\n    });\n\n    prom.then(() => {\n      throw 'kaboom';\n    });\n  });\nIn the above test  - I get the following in my console but all the tests pass. Is this expected?\nzone.js:571 Error: Uncaught (in promise): kaboom\n    at ProxyZoneSpec.Array.concat.ProxyZoneSpec.onInvokeTask (http://localhost:9876/base/src/test.ts:164313:39) [ProxyZone]\n    at <anonymous> [<root>]\nconsoleError @ zone.js:571\n\nThanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "attila123", "authorAssociation": "NONE", "createdAt": "2017-05-17T09:12:22Z", "contents": "@slackersoft I double checked that I was on the latest jasmine-core 2.6.1. I checked this fix of yours appeared in node_modules/jasmine-core/lib/jasmine-core/jasmine.js.\nBecause there was an error thrown in the async callback function, my code never managed to call done(), and therefore it stuck in beforeAll for the 10 minutes (I think that is the default timeout). After that I think it timed out, but and I am not whether it-s failed or not, and don't have time to experience with that.\nWith nvm you can install multiple versions of Node.js easily, and you can change between them easily, e.g. 'nvm use v6.9.5' (changes version temporarily in current shell), or 'nvm alias default v6.10.3' (changes version permanently, so when you open a new terminal, node will be the at the desired version).\nHope this helps, and you can reproduce it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-05-17T16:54:45Z", "contents": "@lathonez: Both of your example tests tell Jasmine that they've passed (in this case by returning without failing) and then later trigger an exception. Jasmine tries to associate that kind of late asynchronous error with the spec that most likely caused it, but it's not an easy problem to solve. #1352 might help in your scenario by routing the errors somewhere useful, but it's also possible that the errors are occurring after Jasmine has reported success.\nIt doesn't surprise me that the promise test behaves differently than the setTimeout tests. Most promise implementations use a more complicated stack-clearing scheme than a simple setTimeout, and that can affect the timing of the error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lathonez", "authorAssociation": "NONE", "createdAt": "2017-05-17T21:44:13Z", "contents": "@sgravrock - thank you for getting back to me\n\nBoth of your example tests tell Jasmine that they've passed (in this case by returning without failing)\n\nWe had a test that was fully synchronous, but the implementation changed to be async and the dev didn't update the spec correctly to match. It took me a few weeks to realise the async part of the implementation was failing in Jasmine. The usecase is as per the example - if the code were synchronous the tests would have failed as the implementation threw an error.\n\nJasmine tries to associate that kind of late asynchronous error with the spec that most likely caused it, but it's not an easy problem to solve.\n\nI understand - I don't care whether or not the failure is associated with the correct spec - just failing the entire test suite on an uncaught error is good enough for me. This is the behaviour I observed on 2.6.1 with the setTimeout example. All the tests ran until the end and then the suite failed.\n\n#1352 might help in your scenario by routing the errors somewhere useful,\n\nThank you, will keep an eye on this\n\nbut it's also possible that the errors are occurring after Jasmine has reported success.\n\nNot possible in the sense that they are observed in the console long before the suite finishes running. But I guess perhaps before Jasmine has had them bubble up or something?\n\nIt doesn't surprise me that the promise test behaves differently than the setTimeout tests.\n\nAgreed. I was trying to understand whether the promise example I gave should have caused Jamine to fail as of 2.6.1. I'm still not certain whether it should have or not?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-18T00:25:31Z", "contents": "Not possible in the sense that they are observed in the console long before the suite finishes running. But I guess perhaps before Jasmine has had them bubble up or something?\n\nJasmine finishes running as soon as the last dot is printed, but the full report might take some time to generate in larger suites.\nI'm releasing 2.6.2 tonight, give that a shot with some of the other fixes, hopefully it will help. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lathonez", "authorAssociation": "NONE", "createdAt": "2017-05-19T23:25:27Z", "contents": "FYI I've tested on 2.6.2 and have the same behaviour re promises.\nThis is purely for information - I didn't come here expecting a fix for this, just thought it might fix it and wanted to help document behaviour.\nIf others have different results I would be keen to know.\n@slackersoft thanks for all your work, very happy with Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "attila123", "authorAssociation": "NONE", "createdAt": "2017-07-19T13:11:31Z", "contents": "Hi, I'd like to test a bit jasmine with newer (6.10, 6.11) Node.js. Does anyone know a sample project to add simple jasmine tests to? So that I could simply share some example tests based on that project.\n(My problem is that for testing our app we need to use Node.js 6.9.5 (which works correctly with jasmine) for most tests, e.g. unit tests, but we release the app on an image with 6.11.1 (which has the latest security fixes), and so only during the end-to-end tests our app runs on 6.11.1 (but still the protractor, jasmine runs on 6.9.5).)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-21T04:04:36Z", "contents": "@attila123 You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nAdditionally, your comment has nothing to do with the issue to which you are replying. If you have an issue to report, please create a new issue. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dpmott", "authorAssociation": "NONE", "createdAt": "2017-09-01T19:39:12Z", "contents": "This testing approach might provide a short-term or case-by-case alternative to changing the Jasmine framework:\nhttps://stackoverflow.com/questions/46006944/how-to-expect-an-asynchronously-thrown-exception-in-jasmine-angular2-typescr", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-02-28T01:02:22Z", "contents": "@slackersoft With the latest native async support in Jasmine, I can simply write an async test like follows:\nbeforeEach(async () => {\n  await browser.get(theUri);\n});\n\nwhich is pretty cool.\nBut, in this case, we are not handling any errors.. How, can I do error handling here so that I can log my error messages to the console which would help me in debugging? Could you give me any pointers?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-28T01:37:44Z", "contents": "If you use the async keyword or return a Promise, Jasmine should handle a rejected promise as a failing spec and report the error that way. Additionally, Jasmine should also be catching any globally unhandled errors and associating them to the currently executing spec as well. If you are not seeing this happen, please open a new issue with more details.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-02-28T10:35:37Z", "contents": "@slackersoft True, I am actually looking for a way to use console.error() in chrome which gives me the specific line and file name in the console when a particular test fails.\nBefore the native async support, I used to use my own custom done() function which takes in async function as an argument and processes it:\nfunction done(asyncFn: () => Promise<any>) {\n    return function (done) {\n        asyncFn().then(done)\n            .catch(e => {\n                console.error(e); // This line gives me the error in Chrome console with TS file line.\n                done.fail(e);\n            })\n            .catch(() => {\n                done();\n            });\n    }\n}\n\nNow, I removed this done() function, and simply use async in my test specs like follows:\nit('test async', async() => {\n   fixture.detectChanges();\n   await fixture.whenStable(); // Angular test bed framework.\n   expect(true).toBe(true);\n});\n\nThe same spec used to look like follows with my custom done():\nit('test async', done(async() => {\n       fixture.detectChanges();\n       await fixture.whenStable(); // Angular test bed framework.\n       expect(true).toBe(true);\n    }));", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-28T18:09:47Z", "contents": "@applecool if you would like to see more/different information reported when a rejected promise causes a spec to fail, please open a new issue with the additional information you'd like to see. A rejection that comes through with an Error object should already be reporting its message and stack so if you're not seeing this information, we would like to remedy this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-03-03T00:20:24Z", "contents": "@slackersoft I will open an issue. Thank you. I was wondering if you could just point me in a right direction here: I am trying to override the it() function and want to handle the errors in there if the argument passed to it is an async function. Here's what I have got so far, but I am unable to check programmatically if the function is async or not. It would be really helpful if you could suggest me some alternative:\n    const asyncFn = async () => {};\n    let originalIt = jasmine.getEnv().it;\n    jasmine.getEnv().it = function(...args): jasmine.Spec {\n        if(arguments[1].constructor === asyncFn.constructor) { \n              // This isn't working. It resolves to true for all the functions.\n                //  Attempt 1: Do error handling.. \n        }\n       if(arguments[1] instanceof Promise) {\n            // This isn't working either. It never resolves to true.\n           // Attempt 2: Do error handling\n       }\n        return originalIt.apply(this, arguments);\n    }\n\nI also wanted to know if I am on the correct path of overwriting the  it() function. I have never done monkey patching before but this is an attempt to do so and try to learn from it. Looking forward to your suggestions.\nThank you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request", "has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 530, "url": "https://github.com/jasmine/jasmine/issues/530", "title": "Feature request: Allow passing multiple functions into `it` for a better asynchronous testing API", "contents": "As raised here #526 the API for multi stage asynchronous test is a marked regression from 1.3. It forces the developer to misuse beforeEach in order to get asynchronous behaviour in a single spec. It also means various mid-point testable values need to be stored and then finally passed into expect only when the it call is finally reached.\nAn improvement would be to allow multiple callbacks to be passed in to it which would be called in a waterfall fashion e.g.\nit('does the job asynchronously', function (done) {\n   // setup code\n   expect(aValue).toBe('just fine');\n   done();\n}, function (done) {\n   //more test code\n   expect(anotherValue).toBe('dandy');\n   done();\n});\n\nas opposed to the current api\ndescribe('only here to bend the asynchronous testing API into shape', function () {\n    var aCachedValue;\n    beforeEach(function () {\n       // setup code\n       aCachedValue = aValue;\n       done();   \n    });\n    it('does the job asynchronously', function (done) {\n       //more test code\n       expect(aCachedValue).toBe('just fine');\n       expect(anotherValue).toBe('dandy');\n       done();\n    });\n});", "createdAt": "2014-02-24T10:50:33Z", "updatedAt": "2014-10-31T20:09:07Z", "closedAt": "2014-10-31T20:09:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wheresrhys", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "wheresrhys", "company": "Squirrel Commando"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-14T05:16:06Z", "contents": "I don't think having multiple async beforeEach functions is a misuse of beforeEach. In addition, you don't actually have to use beforeEach to accomplish this. You should be able to do something like:\nit('does the asynchronous job without requiring a beforeEach', function(done) {\n    aCachedValue = 'foo';\n\n    setTimeout(function() {\n        expect(aCachedValue).toEqual('foo');\n        done();\n    }, 300);\n});\nPossibly even with multiple setTimeout calls as long as you wait for everything to be done before calling the done callback. Using multiple beforeEach calls has been suggested, as often the things that happen before the async wait are setup, which is exactly what a beforeEach is for", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-31T20:09:04Z", "contents": "We haven't heard any other feedback from the community on this, and we are pretty comfortable with the provided alternative. In addition now that we've implemented #483 these functions also take a timeout param after the function, so only having a single function passed in keeps the interface clean.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 532, "url": "https://github.com/jasmine/jasmine/issues/532", "title": "toHaveBeenCalledWith fails for repeated use of Float32Array", "contents": "Spies keep a reference to Float32Array when called with them, but should keep a copy:\nvar spy = jasmine.createSpy('spy');\nvar data = new Float32Array(1);\ndata[0] = 1;\nspy(data);\ndata[0] = 2;\nspy(data);\nexpect(spy).toHaveBeenCalledWith([1]); // fails (false negative).\nexpect(spy).toHaveBeenCalledWith([2]); // passes.", "createdAt": "2014-02-27T16:12:39Z", "updatedAt": "2014-02-27T18:01:59Z", "closedAt": "2014-02-27T18:01:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alecmce", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alecmce", "company": "KPV LAB Edinburgh"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-02-27T18:01:58Z", "contents": "Spies in jasmine save all arguments by reference, this isn't specific to a particular type (like Float32Array), because we feel that most people expect to be able to assert that the call was made with a particular object. For a bit more discussion, see #281", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 533, "url": "https://github.com/jasmine/jasmine/issues/533", "title": "expect({}).toEqual([]) should fail but doesn't.", "contents": "I just ran the assertion expect({}).toEqual([]); and it passed. Unless there's some decision that I'm not aware of by the developers, I'd think this assertion should fail.", "createdAt": "2014-02-27T16:58:47Z", "updatedAt": "2014-02-27T17:50:38Z", "closedAt": "2014-02-27T17:50:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "opnsrce", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "opnsrce", "company": "Nordstrom"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-02-27T17:50:38Z", "contents": "This was an issue in jasmine 1.3 and previous. We've greatly refactored equality as part of 2.0, new equality is based off of underscored equality.\nClosing this as it's no longer an issue for 2.0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 534, "url": "https://github.com/jasmine/jasmine/issues/534", "title": "Crashes Firefox with unresponsive script", "contents": "There are cases where a running Jasmine test suite will eventually crash Firefox, with the \"unresponsive script\" dialog popping up. Stopping the script will in some instances stop the runner, but in some fewer instances crash Firefox.\nIt seems switching tabs with a running test suite will trigger that behaviour:\n\nSwitching back will suddenly show failing tests,\nAfter the test suite finishes even more failing tests will pop up,\nEventually the tab hangs.", "createdAt": "2014-02-27T18:59:36Z", "updatedAt": "2014-03-04T21:20:11Z", "closedAt": "2014-03-04T21:20:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cburgmer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cburgmer", "company": "ThoughtWorks"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 5, "comments_data": [{"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-02-27T19:00:20Z", "contents": "If it helps, here's the test runner I am seeing this on: https://github.com/cburgmer/rasterizeHTML.js/blob/master/test/SpecRunner.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-02T20:41:43Z", "contents": "I'm having trouble reproducing this. I was able to see green specs when using grunt jasmine but opening that SpecRunner.html Firefox I'm seeing 4 failures consistently (not sure if this is expected). When switching around tabs it doesn't seem to create more failing tests or hang the tab. This is with latest Firefox (27.0.1).\nI noticed that when I tried the go shell script in the repository, it wouldn't let me run the tests saying that:\nError: Platform version '27.0.1' is not compatible with\nminVersion >= 17.0.0\nmaxVersion <= 24.*\n\nMaybe a later version of Firefox will help? Or perhaps some other debug information?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-03-03T18:24:52Z", "contents": "Thanks for looking into it and even taking on the burden of making another project's test suite run :) I'd be interested what the 4 failing tests are, I can't reproduce this on a clean checkout on a Mac. Feel free to raise issues over at the project.\nDo ignore the \"platform\" complaint. This is SlimerJS at the end of the build doing an end to end test. You do need to run \"go\" at least once though to get in all the dependencies.\nSo, I can make tests randomly fail by setting of the test suite and switch to another tab (Firefox 27.0.1). The tests seem to fail as the browser will slow down ajax requests with an inactive tab, and the tests will start to timeout. In such a case I just need to wait 10/20 seconds after the run finishes, and then more failing tests appear. To the extend that I even get 2 or even 3 result headers in the DOM, the header you receive when the run finishes (I can find them using $('.alert .bar.failed')).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-04T05:11:21Z", "contents": "No problem! Yes, I needed to run the go command to at least get down to four failures. If I can figure out why these 4 specs are failing on my machine (also Mac with clean download on FF 27.0.1), then I'll open up an issue on your repo. I don't really have much context here to be honest but I'm probably missing some setup. It's 4 of the integration specs in which it's reporting that Expected HTMLNode to equal image HTMLNode, 1.\nAnyways, back to the main issue. With what you're saying that the ajax requests are slowing down, this is sounding like #523 in which the tests would time out, but that done callback is still ready to execute, which would explain the multiple header bars (Jasmine thinks it has finished the suite many times). This was fixed in 640f94a just a few days ago. Can you try with master and see that there's not several result headers?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-03-04T21:20:11Z", "contents": "Upgrading jasmine to trunk seems to fix the problem. Looks like the referenced issue is exactly the one  bugging me. Closing. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 535, "url": "https://github.com/jasmine/jasmine/issues/535", "title": "Need to reset Jasmine environment between specs?", "contents": "I just upgraded Jasmine\n\njasmine-core 1.3.1 -> 2.0.0\njasmine-jquery-rails 1.5.9 -> 2.0.2\njasmine-rails 0.5.6 -> 0.6.0\n\nI have several spec files. Each of them are structured the same way: require of jquery and jasmine-jquery files and a top beforeEach that load fixture, followed by my examples.\nAfter upgrade I noticed that when I run all specs (by accessing '/jasmine') I have many failures.\nBut if I run them individually (by accessing '/jasmine?spec=MySpec') all tests pass.\nI am forgetting some kind of 'reset' statement in my specs?\nThanks for your help", "createdAt": "2014-02-28T08:11:52Z", "updatedAt": "2014-09-21T04:08:40Z", "closedAt": "2014-09-21T04:08:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "randoum", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "randoum", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-02T20:17:44Z", "contents": "The only thing I can think of that was a breaking change in 2.0 and would cause this kind of test failure would be needing to jasmine.clock().uninstall() after specs that install the mock clock.\nDoes that happen to fix it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-21T04:08:40Z", "contents": "Closing this for lack of response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 536, "url": "https://github.com/jasmine/jasmine/issues/536", "title": "toHaveBeenCalledWith does no longer work with custom matcher", "contents": "In Jasmine 1.3 you could use your custom matcher with toHaveBeenCalledWith, which was especially useful to ensure that the actual argument was identical to the expected one, not just equal. E.g.:\n  var mySpy = jasmine.createSpy();\n  var foo = {};\n  var bar = {};\n  mySpy( foo );\n\n  expect( mySpy ).toHaveBeenCalledWith( foo );\n  expect( mySpy ).toHaveBeenCalledWith( bar );\n  expect( mySpy ).toHaveBeenCalledWith( same( foo ) );\n  expect( mySpy ).not.toHaveBeenCalledWith( same( bar ) );\n\nThis is no longer possible with Jasmine 2.0, only 'any' and 'objectContaining' are accepted.", "createdAt": "2014-03-01T11:29:31Z", "updatedAt": "2014-03-27T05:21:50Z", "closedAt": "2014-03-27T05:20:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tbuschto", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "tbuschto", "company": "EclipseSource"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "thcgit", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-03T18:33:51Z", "contents": "This is intended behavior. Things were muddied and poorly documented in 1.x in this area. We're now making it much more explicit and easier to maintain.\nIt looks like there are two parts to your question.\nFirst, toHaveBeenCalledWith() uses the equality functionality across parameters. So if you want to have custom equality, you need to add a custom equality tester. This is how any and objectContaining work in 2.0.\nHowever, what you appear to be wanting to do is check that the specific reference is used. This sounds like you want to write a custom matcher that would be named something like toHaveBeenReallyCalledWith() (or some better name) in order to accomplish what you want to do here.\nDoes this help? If so, I'd like to close this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tbuschto", "authorAssociation": "NONE", "createdAt": "2014-03-04T10:58:52Z", "contents": "Thank you for the timely response. I did not know about custom equality testers. I think with those I can re-create the pattern I need. Also, in the example the tester is added in \"beforeEach\". Would it suffice to add it only once at startup?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tbuschto", "authorAssociation": "NONE", "createdAt": "2014-03-12T10:13:31Z", "contents": "It seems like custom equality testers do not work with tohaveBeenCalled with, which once again would  prevent me for using it to test for identity?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "thcgit", "authorAssociation": "NONE", "createdAt": "2014-03-17T01:50:44Z", "contents": "I'm also having the same issue. I have added a custom equality tester but it's not being picked up by toHaveBeenCalledWith.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T05:21:50Z", "contents": "Just pushed a fix where custom equality testers weren't working with toHaveBeenCalledWith. Hopefully that works on master now, but please feel to reopen if it doesn't.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 537, "url": "https://github.com/jasmine/jasmine/issues/537", "title": "Request: Supply filename and line numbers for specs", "contents": "I've created a Visual Studio Test Adapter for Jasmine; but I've had to put a massive hack in it to discover tests and get filenames/line numbers.\nWhen \"discovering\" tests I previously used the filter so that none would run; but I couldn't provide VS with file/line number to allow the user to double-click to jump to a test.\nSo, I implemented a horrendous bodge, where when discovering tests, the it function is rigged to explode, and I can parse the stack trace.\nThis is nasty; it would be nicer if Jasmine provided file/line info for a spec in the information; and then I can go back to using the filter to simply disable execution when discovering.", "createdAt": "2014-03-02T17:52:09Z", "updatedAt": "2016-06-25T21:56:39Z", "closedAt": "2014-03-02T19:05:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DanTup", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "DanTup", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "isaacs", "company": "npm, Inc."}, {"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-03-02T19:03:56Z", "contents": "Unfortunately, javascript in general doesn't provide a way to get a filename and line number without throwing an error of some kind. In order for jasmine to supply this information, we would have to throw an error from within it and catch it, similar to what you're doing in your \"discovery\" phase.\nClosing, as I don't think we're going to do this any time soon. If you can find a cross-browser way to get this info that doesn't impact suite run time too much, we can take a look at a pull request though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DanTup", "authorAssociation": "NONE", "createdAt": "2014-03-02T19:05:58Z", "contents": "Thanks for the info - I thought this might be the case, but as a JS noob, I wanted to check. My superbodge all works (surprisingly), so it's not the end of the world. It's well commented as a massive hack, and it was possible without having to ship a bodged Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "isaacs", "authorAssociation": "NONE", "createdAt": "2014-03-02T21:12:14Z", "contents": "It is not correct that you MUST throw to get file and line information.  You only have to capture a stack trace.\nLook at how node-tap does this (which is not so great, actually) https://github.com/isaacs/node-tap/blob/master/lib/tap-assert.js#L416-L443\nor the much cleaner approach you can do nowadays in Node: https://github.com/joyent/node/blob/master/lib/console.js#L88-L96", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "agirorn", "authorAssociation": "NONE", "createdAt": "2016-06-25T21:56:39Z", "contents": "I have managed to get at the file and line number of a each running spec in jasmine-slow-reporter by overwriting the \u00ect function. Jasmine could offer more data via hooks or in the reporter api to simplify plugin creation.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 539, "url": "https://github.com/jasmine/jasmine/issues/539", "title": "regression: toThrowError() won't accept jasmine.any(String)", "contents": "Example fiddle here - http://jsbin.com/debipanu/1/edit\nIt fails the RegExp, typeof 'string' and error type checks, then throws error 'Expected is not an Error, string, or RegExp.'.\nhttps://github.com/pivotal/jasmine/blob/31d71ac22fd3e7e994e014229f83b96b81c9f8dd/src/core/matchers/toThrowError.js#L123\nI don't know how important this use-case is, as expecting toThrow() is just as meaningful and works fine.", "createdAt": "2014-03-04T15:50:36Z", "updatedAt": "2014-06-23T03:17:36Z", "closedAt": "2014-06-23T03:17:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "alextreppass", "company": "Canva"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:17:30Z", "contents": "This was a conscious choice in 2.0 - we broke this into two matchers. Closing as this is expected behavior.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 541, "url": "https://github.com/jasmine/jasmine/issues/541", "title": "How can I use jasmine?", "contents": "The documentation contains a lot about writing tests, but I can not find anything about setting it up.\nAm I missing something?", "createdAt": "2014-03-06T21:58:12Z", "updatedAt": "2014-03-10T10:21:51Z", "closedAt": "2014-03-06T22:30:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "EECOLOR", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "EECOLOR", "company": "Kaliber"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-06T22:30:01Z", "contents": "Setup depends heavily on the environment. Your best bet is to jump on jasmine-js@googlegroups.com and ask how to set up with your project.\nClosing for now, but if there is something concrete we can add to the docs we'd love to know how to help in this area.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EECOLOR", "authorAssociation": "NONE", "createdAt": "2014-03-06T22:50:24Z", "contents": "A simple example showing an html document that sets up jasmine to run a test would be nice. I could easily use that to adjust to my environment.\nAs for the documentation page. A few links pointing to parts in the documentation might be nice. Now I need to guess (for the links at the top) and scroll a lot to see what kind of information is available.\nI also noticed the documentation for custom reporters is missing in 2.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2014-03-07T08:10:22Z", "contents": "The documentation itself is a simple example of how jasmine can be used in\nan html page. Though I agree that it is not that obvious.\nOn Thu, Mar 6, 2014 at 11:50 PM, EECOLOR notifications@github.com wrote:\n\nA simple example showing an html document that sets up jasmine to run a\ntest would be nice. I could easily use that to adjust to my environment.\nAs for the documentation page. A few links pointing to parts in the\ndocumentation might be nice. Now I need to guess (for the links at the top)\nand scroll a lot to see what kind of information is available.\nI also noticed the documentation for custom reporters is missing in 2.0\n\nReply to this email directly or view it on GitHubhttps://github.com//issues/541#issuecomment-36947755\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-07T14:51:45Z", "contents": "Very few of our users want to run jasmine outside the context of another framework/env. There are all sorts of appropriate ways to get started depending on if you're using: Rails/Ruby, Python, Node, pure javascript libraries, etc etc. If you ask about a specific goal you're trying to achieve on the mailing list, I think you'll get some help. If you just want to play around with the library, rather than bothering to set up an HTML page that helps you run tests, I'd either check out http://tryjasmine.com/ (still on 1.x), or (slightly more involved) install the https://github.com/pivotal/jasmine-gem to get started.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-09T21:25:53Z", "contents": "Another way to try out Jasmine in an HTML page is through the standalone distribution. There's a section of it at the top of introduction.js about the standalone distribution and a link from the Github readme to this section for a 'quick start' in Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EECOLOR", "authorAssociation": "NONE", "createdAt": "2014-03-10T10:08:50Z", "contents": "It would have been nice if there was something like this on the documentation page:\n\nJasmine exports most of it's method on the global scope. This allows you to use them without any prefix. Jasmine itself is exported as jasmine.\n\nA simple usage would be like this:\nvar jasmineEnv = jasmine.getEnv();\njasmineEnv.addReporter(jasmineReporter);\n\n// Your tests here\n\nvar currentWindowOnload = window.onload;\nwindow.onload = function() {\n  if (currentWindowOnload) {\n    currentWindowOnload();\n  }\n\n  jasmineEnv.execute();\n};", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2014-03-10T10:21:51Z", "contents": "@EECOLOR As of jasmine 2.0 you don't really have to do the setup and execute yourself, because boot.js does this for you: http://jasmine.github.io/2.0/boot.html", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 542, "url": "https://github.com/jasmine/jasmine/issues/542", "title": "throwing string exceptions does not display correctly in the exception formatter", "contents": "If you have something in a spec like:\nthrow 'Expected selector ' + $jquery.selector + ' to match exactly 1 element, but matched ' + $jquery.length)'\n\njasmine reporter displays this as undefined: undefined\nThrowing this:\nthrow new Error('Expected selector ' + $jquery.selector + ' to match exactly 1 element, but matched ' + $jquery.length);\n\nDisplays the exception correctly. We should probably check to see if the exception is a string before calling 'message' on it.\nWe should probably fix this in jasmine:\ngetJasmineRequireObj().ExceptionFormatter = function() {\n  function ExceptionFormatter() {\n    this.message = function(error) {\n      var message = error.name +\n        ': ' +\n        error.message;\n\n      if (error.fileName || error.sourceURL) {\n        message += \" in \" + (error.fileName || error.sourceURL);\n      }\n\n      if (error.line || error.lineNumber) {\n        message += \" (line \" + (error.line || error.lineNumber) + \")\";\n      }\n\n      return message;\n    };\n\n    this.stack = function(error) {\n      return error ? error.stack : null;\n    };\n  }\n\n  return ExceptionFormatter;\n};\n\nWe should check to see if error is a string before dereferences name and message. I can send a pull request if you like.", "createdAt": "2014-03-07T18:22:55Z", "updatedAt": "2014-03-09T01:56:06Z", "closedAt": "2014-03-08T23:31:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rdy", "company": "Sony"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-08T07:07:43Z", "contents": "I think this is fixed by: 06a5535\nIs this still an issue on master?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-03-08T23:31:35Z", "contents": "Ah yes, I should have double checked on master, thx for pointing out the commit to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-09T01:56:06Z", "contents": "No worries! Glad we have it fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 543, "url": "https://github.com/jasmine/jasmine/issues/543", "title": "Add custom expectation modifiers", "contents": "Jasmine provides the .not expectation modifier that enables us to write pretty things like:\nexpect(myString).not.toBe('foo');\nI would like the ability to write functions similar to .not in the same way that I can write custom matchers. This would come in handy when I am writing tests on a complex object and I want to extract a piece of information from that object to test:\nexpect(myComplexObject).withSubtleCharacteristic('foo').toBe('bar')\nI imagine that writing such a modifier could look something like\nthis.addExpectationModifiers({\n  withSubtleCharacteristic = function(propertyName) {\n    return this.actual[transform(propertyName)];\n  }\n});\nObviously this is a contrived example, but imagine that the transform function performs some complex operation that I want to abstract behind the withSubtleCharacteristic modifier.", "createdAt": "2014-03-07T19:48:28Z", "updatedAt": "2014-10-23T19:56:29Z", "closedAt": "2014-10-23T19:56:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexdmiller", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alexdmiller", "company": "University of Washington"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-07T20:29:39Z", "contents": "This sounds interesting, but I'm not sure what an actual use case would look like. Also note that the .not for matchers doesn't modify the actual in anyway, it just inverts the passed attribute from the matcher, so something like this would have to do the same thing, and probably wouldn't be available as a function.\nIf you want to compare some attribute of the object you should probably say:\nexpect(myComplexObject.foo).toBe('bar');\n\nDo you have a more concrete use case in mind for this so we can think a bit more about what would work best?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-23T19:56:28Z", "contents": "We haven't seen any more interest from the community for this idea, so I'm closing it. If you come up with a more concrete use case we'd be glad to hear it and talk about what kind of a solution makes sense.\nFor now it seems like a custom matcher is maybe more what you're looking for anyways?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 544, "url": "https://github.com/jasmine/jasmine/issues/544", "title": "Spies wiki page out of date", "contents": "The wiki page on spies seems to be using the old pre-2.0 syntax. Needs an update.", "createdAt": "2014-03-10T20:08:40Z", "updatedAt": "2014-06-23T03:28:08Z", "closedAt": "2014-06-23T03:28:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "togakangaroo", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "togakangaroo", "company": "@surgeforward "}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2014-03-10T20:17:30Z", "contents": "Does it need to exist at all? Jasmine documentation seems to already cover\nall this.\nOp 10 mrt. 2014 21:08 schreef \"George Mauer\" notifications@github.com:\n\nThe wiki page on spies https://github.com/pivotal/jasmine/wiki/Spiesseems to be using the old pre-2.0 syntax. Needs an update.\n\nReply to this email directly or view it on GitHubhttps://github.com//issues/544\n.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "togakangaroo", "authorAssociation": "NONE", "createdAt": "2014-03-10T20:21:35Z", "contents": "Fair point, probably not.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:28:01Z", "contents": "The Wiki is deprecated in favor of jasmine.github.io.\nFeel free to delete the wiki pages like this that are confusing/dead/useless. Thanks for noticing!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 545, "url": "https://github.com/jasmine/jasmine/issues/545", "title": "Gramatical Error in Jasmine v2.0 Docs 'toBeGreaterThan' Example", "contents": "The string param in the 'it' function in the 'toBeGreaterThan' function should be\n\"The 'toBeGreaterThan' matcher is for mathematical comparisons\"\nnot\n\"The 'toBeGreaterThan' is for mathematical comparisons\"", "createdAt": "2014-03-10T20:45:01Z", "updatedAt": "2014-03-12T23:59:39Z", "closedAt": "2014-03-12T23:59:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "siegbenn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "siegbenn", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-12T23:59:39Z", "contents": "Good catch! It should be fixed now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 546, "url": "https://github.com/jasmine/jasmine/issues/546", "title": "Mock Clock TODO in documentation for the released version of Jasmine 2.0.", "contents": "In the 2.0 docs, there is a section on using the mock clock in single tests. However, it actually contains a TODO message and the code that should be on the right hand side appears with the rest of the text. A screenshot probably explains the issue better:\n\nLink to the section on the live docs", "createdAt": "2014-03-11T11:10:24Z", "updatedAt": "2014-03-12T23:55:41Z", "closedAt": "2014-03-12T23:55:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tonyfinn", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tonyfinn", "company": "@aol"}, {"login": "freethejazz", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "freethejazz", "authorAssociation": "NONE", "createdAt": "2014-03-11T20:39:35Z", "contents": "There is also a TODO in the next section on async support:\nTODO: How to set the timeout in boot.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-12T23:55:41Z", "contents": "Thanks for the heads up! It should be fixed now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 547, "url": "https://github.com/jasmine/jasmine/issues/547", "title": "Re-expose detailed spec result information to reporters", "contents": "Hi, I'm looking at moving a test suite to Jasmine 2.0.0 and have it running fine locally, however running it remotely on Saucelabs depends on programmatic access via a custom reporter, namely: jasmine-jsreporter.\nIn Jasmine 1.3.1, specs used to expose the following information to reporters:\n\ndurationSec\ntotalCount\npassedCount\nfailedCount\n\n@sclevine has done some work to port jasmine-jsreporter in jasmine-jsreporter/pull/7 but it seems the above information is no-longer available to reporters in Jasmine 2.0.0.\nWould it be possible to get the above back into Jasmine 2?", "createdAt": "2014-03-11T14:50:03Z", "updatedAt": "2014-06-23T03:31:35Z", "closedAt": "2014-06-23T03:31:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "alextreppass", "company": "Canva"}, {"login": "sclevine", "company": "@pivotal-cf @cloudfoundry"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "sclevine", "authorAssociation": "NONE", "createdAt": "2014-03-11T16:52:26Z", "contents": "More specifically, Jasmine 2 only seems to count failed expectations:\n  Spec.prototype.addExpectationResult = function(passed, data) {\n    if (passed) {\n      return;\n    }\n    this.result.failedExpectations.push(this.expectationResultFactory(data));\n  };\n\nIf it counted total number of expectations (or failed passed expectations) we would have enough information.\nDuration is actually exposed by Jasmine, and does work for me with jasmine-jsreporter/pull/7.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-11T17:38:20Z", "contents": "Duration not appearing for us may be due to how we're using grunt-saucelabs. Good to hear it should be working.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-11T17:41:44Z", "contents": "Take a look at the source for the HtmlReporter.\nWe made a decision to pull out the counts and duration from core and make them a Reporter concern. So Jasmine just tells the Reporters what the results were, anything else has to be built in a reporter. One could imagine different ways to refactor this, but we like the separation of this functionality out of core.\n@alextreppass I would expect the reporter for sauce to be able to do the same as the HtmlReporter to return this functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sclevine", "authorAssociation": "NONE", "createdAt": "2014-03-11T17:55:37Z", "contents": "The reporter interface doesn't seem to expose the total number of expectations (per spec) or the number of expectations that passed. For example, in the HtmlReporter only the failed expectations are considered:\nfor (var i = 0; i < result.failedExpectations.length; i++) {\n   var expectation = result.failedExpectations[i];\n   messages.appendChild(createDom('div', {className: 'result-message'}, expectation.message));\n   messages.appendChild(createDom('div', {className: 'stack-trace'}, expectation.stack));\n}\n\nAlso, I attempted to stay within the reporter interface for my Jasmine 2 port of jasmine-jsreporter, but (as far as I can tell) it loses information about the nesting of the test suite. So I ended up traversing jasmine.getEnv().topSuite().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-11T14:38:40Z", "contents": "I'm digging into this again, and have started to re-write the old JSReporter under the new event-driven style shown in jasmine 2's HTMLReporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-11T18:59:30Z", "contents": "Ok I've got pretty far, duration and things are working as expected, and I'm building the report as events come in: https://github.com/alextreppass/jasmine-jsreporter/blob/jasmine-2.0/jasmine-jsreporter.js\nAs @sclevine points out, the only thing we're missing is information on the spec object given to specDone() which details the total number of expectations.\nCan this be added? I don't really want to have to dig into jasmine getEnv() internals.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:31:29Z", "contents": "It's low priority for us to add expectation count back in. This - to my knowledge - is the only request we've seen for it.\nThat said, we'd be happy to look at a pull request that implements this functionality. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 549, "url": "https://github.com/jasmine/jasmine/issues/549", "title": "Calling `done` followed by more expect will report to the reporter multiple times", "contents": "consider the spec:\ndescribe('a block', function() {\n  it('uses done improperly', function(done) {\n    expect(1).toBe(1);\n    done();\n    expect(2).toBe(2);\n  });\n});\nIn this spec we have 2 expect statements and a done statement. The reporter is called with a specDone after done is called, and again after the it returns. This causes a problem for custom reporters, as suiteDone and specDone both get called multiple times. If the spec with the misplaced done is the last spec to be called, suddenly jasmineDone is called, then afterwords specDone, followed by suiteDone, then yet another jasmineDone.\nI would suggest that done() updates a variable in closure scope around the function that contains it and sets the status as done. This has the side effect of waiting until the spec itself is done, and then checking to verify that done has been called as well. I'm seeing a few obvious problems with this, but something could probably be done around that.\nPlease let me know if this is unclear or if you have any questions. This issue just bit me bigtime while writing a reporter for jasmine-node's upgrade to Jasmine2.0 (available on the Jasmine2.0 branch)", "createdAt": "2014-03-13T19:25:53Z", "updatedAt": "2014-09-20T22:01:45Z", "closedAt": "2014-08-26T19:48:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tebriel", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tebriel", "company": "Pindrop (http://www.pindropsecurity.com)"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T06:05:23Z", "contents": "I was able to reproduce in the 2.0 release, but it only calls specDone once on master. I'm not convinced that the expectation that happens after is harmless (I think we have some more work to do here), but at least you shouldn't be receiving an excess number of specDones.\nCan you try the latest and see if it works for you?\nFor reference, here's the reporter I used along with the spec you provided:\ndescribe(\"spec\", function() {\n  beforeEach(function() {\n    jasmine.getEnv().addReporter({specDone: function() { console.log('spec done'); }});\n  });\n\n  it('uses done improperly', function(done) {\n    expect(1).toBe(1);\n    done();\n    expect(2).toBe(2);\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tebriel", "authorAssociation": "NONE", "createdAt": "2014-03-28T21:04:26Z", "contents": "Sorry, I said specDone but I meant suiteDone. My mistake. specDone doesn't call more than 1x IIRC. Apologies for sending you down the wrong rabbit hole.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-29T17:19:07Z", "contents": "No problem. I was able to see duplicate callbacks for both specDone and suiteDone in Jasmine 2.0 and only one of each on master. Here is the updated script I tried:\ndescribe(\"spec\", function() {\n  beforeEach(function() {\n    jasmine.getEnv().addReporter({\n      specDone: function() { console.log('spec done'); },\n      suiteDone: function() { console.log('suite done'); }\n    });\n  });\n\n  it('uses done improperly', function(done) {\n    expect(1).toBe(1);\n    done();\n    expect(2).toBe(2);\n  });\n});\nAre you seeing different results on master? If so could you provide an alternate script that I can use to help reproduce?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tebriel", "authorAssociation": "NONE", "createdAt": "2014-03-29T17:32:35Z", "contents": "I haven't tried master, will do so today. Had been working with the official 2.0.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-29T17:40:26Z", "contents": "Sounds great, thanks! Hopefully we have this fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T19:48:31Z", "contents": "This should be fixed in the latest release now. Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 551, "url": "https://github.com/jasmine/jasmine/issues/551", "title": "Pip install jasmine failing", "contents": "Trying to install jasmine using [pip install jamsine] but it's failing, see output below:\nDownloading/unpacking jasmine-core>=2.0 (from jasmine)\nDownloading jasmine-core-2.0.1.tar.gz (41kB): 41kB downloaded\nRunning setup.py egg_info for package jasmine-core\nTraceback (most recent call last):\nFile \"\", line 16, in \nFile \"/Users/tomclement/Envs/jazz/build/jasmine-core/setup.py\", line 4, in \nwith open('package.json') as packageFile:\nIOError: [Errno 2] No such file or directory: 'package.json'\nComplete output from command python setup.py egg_info:\nTraceback (most recent call last):\nFile \"\", line 16, in \nFile \"/Users/tomclement/Envs/jazz/build/jasmine-core/setup.py\", line 4, in \nwith open('package.json') as packageFile:\n\nIOError: [Errno 2] No such file or directory: 'package.json'", "createdAt": "2014-03-14T10:12:29Z", "updatedAt": "2014-03-21T22:20:44Z", "closedAt": "2014-03-21T22:20:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tomclement", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tomclement", "company": "ThoughtWorks"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-14T15:08:08Z", "contents": "Hey @tomclement,\nSorry about that. I accidentally released jasmine-core 2.0.1 before it was ready. Try uninstalling jasmine-core and re-installing jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 552, "url": "https://github.com/jasmine/jasmine/issues/552", "title": "Jasmine Bootstrap Reporter", "contents": "Hi\nI would like to see support added for an official Jasmine reporter that would utilize Twitter Bootstrap.\nFor the moment, this is what I am using: https://github.com/agileapes/jasmine-bootstrap/\n(this is actually something I have written personally, but I'm not that familiar with Jasmine in the first place)\nI think the formatting looks a little better this way.", "createdAt": "2014-03-15T22:49:24Z", "updatedAt": "2014-03-17T04:47:48Z", "closedAt": "2014-03-17T04:47:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mmnaseri", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mmnaseri", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-17T04:47:48Z", "contents": "Do you have a screenshot anywhere - I'm curious to take a look.\nOne of the tenets of Jasmine is that we have zero runtime dependencies in the core project. We find that it keeps Jasmine simple and reduces the changes of conflicting with any users' projects.\nFor example, your project like Bootstrap. But if another project prefers Foundation....best case you've got two sets of dependencies, worse case they conflict.\nI think it's fine to have another HTML runner/reporter combination out there for Bootstrap people to use. Feel free to promote it and get on the mailing list to keep up-to-date on upcoming releases.\nClosing - but not because it's not a good idea. We just won't pull it into core.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 553, "url": "https://github.com/jasmine/jasmine/issues/553", "title": "jasmine 2.0 incompatible with code completion", "contents": "Using jasmine 2.0 as a javascript library in jetbrains products fails during code completion due to hidden function declarations for main entry points such as describe, it.", "createdAt": "2014-03-16T09:33:22Z", "updatedAt": "2014-10-23T20:32:56Z", "closedAt": "2014-10-23T20:32:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "robmurtha", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "robmurtha", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:34:08Z", "contents": "Is this still a problem? We're heavy RubyMine users at Pivotal Labs and I've not heard this complaint.\nWe don't want to change our implementation just to fix this. Is there an alternative way to let JetBrains index Jasmine's source?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:53:55Z", "contents": "Do you have an update on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-23T20:32:54Z", "contents": "We haven't heard any other feedback from the community on this. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 554, "url": "https://github.com/jasmine/jasmine/issues/554", "title": "addMatchers have stopped when using  karma-jasmine 2.2", "contents": "Please have a look at this issue that came up\nzcaudate-me/example.purnam.test#1\nI'm wondering if someone could advise on what broke and how to fix the problem.", "createdAt": "2014-03-17T22:00:51Z", "updatedAt": "2014-08-05T22:44:06Z", "closedAt": "2014-08-05T22:44:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zcaudate", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "zcaudate", "company": null}, {"login": "alextreppass", "company": "Canva"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-11T13:19:39Z", "contents": "You need to rewrite your matchers from Jasmine 1 to 2, and add them differently.\njasmine.addMatchers({ foo: function(utils) { ... } });\nSee example: https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/example/spec/SpecHelper.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:34:44Z", "contents": "Is this still an issue? If not, please close.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T22:44:06Z", "contents": "Sounds like this is an upgrading to 2.0 issue. See the docs for that here: http://jasmine.github.io/2.0/upgrading.html\nClosing this for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 555, "url": "https://github.com/jasmine/jasmine/issues/555", "title": "External CoffeeScript tests aren't run", "contents": "Jasmine v2.0 does not run tests in external <script type=\"text/coffeescript\"> files despite ostensibly seeing the describe calls in which they are contained.  If the CoffeeScript is inline in the <script> tag (i.e. there is no src attribute), Jasmine runs the tests properly.  However, as soon as they are moved into a separate file, Jasmine does not seem to notice them at all (\"0 specs, 0 failures\").\nHere's a short example, assuming you have coffee-script.js in the same directory.\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n  <title>Jasmine Spec Runner v2.0.0</title>\n\n  <link rel=\"shortcut icon\" type=\"image/png\" href=\"lib/jasmine-2.0.0/jasmine_favicon.png\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/jasmine-2.0.0/jasmine.css\">\n\n  <script type=\"text/javascript\" src=\"coffee-script.js\"></script>\n\n  <script type=\"text/javascript\" src=\"lib/jasmine-2.0.0/jasmine.js\"></script>\n  <script type=\"text/javascript\" src=\"lib/jasmine-2.0.0/jasmine-html.js\"></script>\n  <script type=\"text/javascript\" src=\"lib/jasmine-2.0.0/boot.js\"></script>\n\n  <!-- This works fine (both console.log()s are called): -->\n  <!--<script type=\"text/coffeescript\">\n    describe \"my spec\", ->\n    console.log \"In describe() call.  Looks like Jasmine sees the spec.\"\n    it \"works\", ->\n      console.log \"In it() call.  Looks like Jasmine is running the test.\"\n      expect(true).toBe(true)\n  </script>-->\n\n  <!-- This doesn't: -->\n  <script type=\"text/coffeescript\" src=\"some-file.coffee\"></script>\n</head>\n\n<body>\n</body>\n</html>\nThere are some CoffeeScript + Jasmine examples floating around, but they're all for v1.  v1 seemed to work fine with separate CoffeeScript files.", "createdAt": "2014-03-18T01:55:32Z", "updatedAt": "2014-03-21T01:04:52Z", "closedAt": "2014-03-20T23:36:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "SyntaxColoring", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-19T05:01:58Z", "contents": "How are you running  your Jasmine suite in-browser?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "createdAt": "2014-03-20T03:43:01Z", "contents": "I'm opening SpecRunner.html in Chrome 33 on Windows 7 (launched with --allow-file-access-from-files so that coffee-script.js can load CoffeeScript tags).  Everything is copied exactly from jasmine-standalone-2.0.0.zip, except with PlayerSpec.js replaced by a PlayerSpec.coffee and the changes in the HTML shown above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-20T03:45:51Z", "contents": "Take a look at boot.js. I'll bet that the onload handler we install is clobbering or preventing CoffeeScript to compile its files.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "createdAt": "2014-03-20T12:53:32Z", "contents": "The CoffeeScript files definitely are being compiled, since I can put console.log \"foo\" inside a describe() call and see that output when I refresh the page.  I suspect it might have something to do with the way coffee-script.js loads files (it fetches their contents asynchronously and evals the compiled JavaScript).  I'm just confused about why the code inside it() calls is the only thing that doesn't work.  I can nest as many describe() calls as I want, and the code inside them is evaluated.  Here's another example:\n# MyTestSuite.coffee\ndescribe \"foo\", ->\n    console.log \"This is printed.\"\n    it \"bar\", ->\n        console.log \"This is NOT printed.\"\n    describe \"baz\", ->\n        console.log \"This is printed.\"\n        it \"bang\", ->\n            console.log \"This is NOT printed.\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "createdAt": "2014-03-20T23:36:32Z", "contents": "We were both right.  coffee-script.js is asynchronously calling eval() as it compiles code.  As a result, the compiled CoffeeScript can't be ready in time to be included in boot.js's onload handler.\nIt's the same problem as described in issue #412.  You said there that \"Jasmine doesn't support adding describe and it calls dynamically at runtime like this.\"  Since that's what this issue is really asking for, I consider this issue closed.  However, I am going to open a separate feature req for dynamic describe and it calls, because I think that would be a useful thing to have.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-20T23:43:13Z", "contents": "I think the right thing to do here is write a \"coffeescript_boot.js\" for Jasmine that supports this case. Chaining, somehow, when the specs are loaded, etc., would be the simplest way to get this working.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "createdAt": "2014-03-21T00:39:07Z", "contents": "That's a good idea.  I can definitely put something like that together.  I'm going to submit the feature request anyway, though, so future discussions can at least be pointed there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 556, "url": "https://github.com/jasmine/jasmine/issues/556", "title": "Spy method is reset to original with setTimeout.", "contents": "Within the done call of an deferred object, the spied method reset to the original method, not the spied version.\nTest case here:\nhttp://jsfiddle.net/wzAyL/91/", "createdAt": "2014-03-19T19:02:32Z", "updatedAt": "2014-03-24T04:07:33Z", "closedAt": "2014-03-19T20:38:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "unional", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "unional", "company": "@timelywealth, Palo Alto Networks"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "unional", "authorAssociation": "NONE", "createdAt": "2014-03-19T20:40:58Z", "contents": "Please ignore. I found out the root cause, which is the test done() was called before the callback function is invoked.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-24T04:07:33Z", "contents": "Also - this fiddle is using Jasmine 1.2 and isn't using the 1.x async syntax. Which is why your done is getting called too early.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 557, "url": "https://github.com/jasmine/jasmine/issues/557", "title": "Simplify custom matchers", "contents": "I really like the new result based approach for custom matchers in 2.0 but the thunk/compare approach introduces unnecessary boilerplate.\nAny chance of a way to add simple matchers such as the one below?\njasmine.addMatchers({\n  myMatcher: function(actual, expected) {\n    var result = {};\n    result.pass = ...;\n    result.message = ...;\n    return result;\n  }\n});\n\nEven if it needs to be through a separate jasmine.addMatchersSimple() method it would be far better than the current approach.\njasmine.addMatchers({\n  myMatcher: function(utils, customEqualityTesters) {\n    return {\n      compare: function(actual, expected) {\n        var result = {};\n        result.pass = ...;\n        result.message = ...;\n        return result;\n      }\n    };\n  }\n});\n\nWhy not just make utils available through jasmine.utils in the first place?  Happy to put this together as a pull request if there's interest.", "createdAt": "2014-03-20T00:30:51Z", "updatedAt": "2014-06-23T03:35:38Z", "closedAt": "2014-06-23T03:35:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rymohr", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rymohr", "company": "Kumu"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 10, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-20T03:55:40Z", "contents": "To answer your last question, we made a conscious effort to minimize - or at least significantly reduce - both global pollution and what's on the jasmine reference in 2.0.\nI could see why it looks/feels like boilerplate, but it's actually for testability. The extra closure allows injection, under test, of fakes for the utils and customEqualityTesters for matchers that need them - the more complex matchers that projects tend to need to add.\nIn practice, we'd expect custom matchers to be complex enough to want the injection for proper testing.\nWe wouldn't take a change to the current interface for 2.x. But an additional entry point is a possibility if there's support in the community. I suggest posting a pull and bring this up on the mailing list.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rymohr", "authorAssociation": "NONE", "createdAt": "2014-03-20T06:43:51Z", "contents": "I must not fully understand what utils is for then.  Whenever I've needed more than a simple equality check I've always just written my own helper or brought in a library like underscore.\nCan you give a concrete example of when you'd need to inject fakes?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-21T21:13:05Z", "contents": "The simplest case is the toEqual spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rymohr", "authorAssociation": "NONE", "createdAt": "2014-03-27T18:36:30Z", "contents": "Thanks, had a look at the spec and the toEqual implementation.  Exposing util as jasmine.util and allowing toEqual to take customEqualityTesters as a third argument seems like a much more reasonable solution.\nI'll take it up with the mailing list once I have time to put together a pull request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T18:48:35Z", "contents": "Happy to look at any PR - fresh eyes are always good. Note that we're committed to dependency injection at the parameter level as a pattern for unit testing. It's the right way to go for maintenance of the code over the long term.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rymohr", "authorAssociation": "NONE", "createdAt": "2014-03-27T19:03:08Z", "contents": "Thanks. Can you shed some light on why the compare function is wrapped in a {compare: ...} object instead of being returned directly?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T21:08:56Z", "contents": "It was an attempt to make the require function easy to follow, plus a way to invoke the matcher with something generic (a name), and allowing for the dependency injection. It's not fantastic, but it works for this set of requirements.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-28T01:30:30Z", "contents": "The other main reason for the compare nesting (which is a nesting that we attempted to remove at one point), is to provide your own negative comparison matcher. This is documented here under 'Custom negative comparators'.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rymohr", "authorAssociation": "NONE", "createdAt": "2014-03-28T18:36:40Z", "contents": "Thanks @sheelc.  I figured there had to be something else that could be defined on that object but didn't see any negativeCompare examples when looking at the source.  Makes sense after seeing the docs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:35:32Z", "contents": "Closing. This looks like this is resolved. Please re-open if we've missed anything.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 558, "url": "https://github.com/jasmine/jasmine/issues/558", "title": "SpecRunner.html as referred to in the documentation, doesn't seem to exist", "contents": "Steps to reproduce:\n\ngit clone https://github.com/pivotal/jasmine.git huh\ncd huh\nconsult http://jasmine.github.io/2.0/introduction.html.  Seems like SpecRunner.html is where i can do configuration and things.\nLook for SpecRunner.html.  It's not there.\n\nHmm...\nfind . -name SpecRunn\\*\n./grunt/templates/SpecRunner.html.jst\n./spec/core/integration/SpecRunningSpec.js\n\nHmmm.  Am I sure I'm running the right version?\nSeems to be 2.0 per screen shot:\n\n\nEdit ./grunt/templates/SpecRunner.html.jst just to see if I can get something to change\nRestart server, changes not reflected \ud83d\ude26\nPost issue.\n\nI'm a bit embarrassed that I'm having this trouble.  Am I doing something Horribly Wrong \u2122 here?", "createdAt": "2014-03-20T18:16:44Z", "updatedAt": "2014-03-27T05:03:45Z", "closedAt": "2014-03-27T05:03:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sgharms", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sgharms", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "SyntaxColoring", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-20T18:59:48Z", "contents": "What are you trying to accomplish?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgharms", "authorAssociation": "NONE", "createdAt": "2014-03-20T19:03:34Z", "contents": "@infews I was just interested in stepping through the documentation getting to learn how Jasmine is constructed.  How could I remove the other (self-diagnosis) tests?  How would I go about adding directories, etc.\nUltimately I would like to do Unit and DOM manipulation (integration?) tests with Jasmine.  If you have advice on how to get closer to that goal I'd be appreciative.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-20T19:07:41Z", "contents": "What is your development environment? Jasmine, as a project, is less friendly to a \"clone and go\" approach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgharms", "authorAssociation": "NONE", "createdAt": "2014-03-20T19:18:57Z", "contents": "@infews Good tip, thanks.  Curiously maybe I was starting too simply (is there such a thing?).  I was starting off with a simple JS file which was included by an HTML file.  The JS file has a number of models which I'd like to unit test.  I also would like very much to test AJAX calls (presumably using Jasmine's spy capabilities) as well as test DOM manipulation.\nForgive any heresy here, but my only experience is with JS testing was writing QUnit for the  jQuery UI project.  Maybe I've got the wrong conceptual model and maybe the things that I think I should be able to do in Jasmine I can't do (or are harder?)  Ultimately I want to do unit testing, AJAX testing, stubbing (or \"doubling\") and testing DOM manipulation.  Is Jasmine not the right tool?  Or is there some reference besides http://jasmine.github.io/2.0/introduction.html which might help me customize Jasmine to meet these goals?\nThanks for your help and super fast replies, @infews", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "createdAt": "2014-03-20T22:43:06Z", "contents": "Try unzipping one of the standalone releases in the /dist subdirectory.  SpecRunner.html should be in there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgharms", "authorAssociation": "NONE", "createdAt": "2014-03-22T13:40:43Z", "contents": "@SyntaxColoring Thanks very much that set me aright.  The question is between jasmine and jasmine standalone.  I needed the latter.  \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 559, "url": "https://github.com/jasmine/jasmine/issues/559", "title": "Support adding describe() and it() calls at runtime", "contents": "This feature request is a follow-up to issues #555 and #412.\nIt would be nice to support adding describe and it calls after Jasmine is loaded.  This would permit asynchronously loading and running test suites.  (This is necessary, for example, to run CoffeeScript test suites through coffee-script.js.)\nI admit that this seems like a pain to implement, but it might be worth considering for future major releases.", "createdAt": "2014-03-21T01:04:52Z", "updatedAt": "2017-02-09T22:18:54Z", "closedAt": "2014-08-27T16:32:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SyntaxColoring", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "SyntaxColoring", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "finspin", "company": null}, {"login": "jwbeech", "company": "Left & Right"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-15T20:28:44Z", "contents": "Jasmine doesn't support adding describe and it calls at runtime, and I don't think that's really the right solution to this problem. We're working on making it easier to make your own boot.js without having to set up the entire jasmine interface yourself. This should make it easier to create a coffee-script-boot.js that would wait until all the coffee script files have been loaded and parsed and start the spec run then.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:32:51Z", "contents": "We've talked about this on the Jasmine core team. We agree that async loading needs to be supported - either directly or indirectly. But adding specs to the environment the way you suggest is not the only way to do that. It's likely much easier to just wait until all requires are complete before executing the Jasmine environment.\nI'm capturing this feature request to for us to figure this out. Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "finspin", "authorAssociation": "NONE", "createdAt": "2015-09-25T19:32:50Z", "contents": "The status of the feature request is not publicly available, has there been any progress on this?\nHere is a use case:\nThis fails with TypeError: Cannot read property 'forEach' of undefined\ndescribe('Async car test', function () {\n\n    var cars;\n\n    beforeAll(function (done) {\n        // getCars() is a promise which resolves to ['audi', 'bmw']\n        getCars().then(function (data) {\n            cars = data;\n            console.log(cars) // ['audi', 'bmw']\n            done();\n        });\n    });\n\n    cars.forEach(function (car) {\n        it('car ' + car, function () {\n            expect(car).toBe(car);\n        });\n    });\n});\n\nThis works fine\ndescribe('Car test', function () {\n\n    var cars = ['audi', 'bmw'];\n\n    cars.forEach(function (car) {\n        it('car ' + car, function () {\n            expect(car).toBe(car);\n        });\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T20:22:25Z", "contents": "Our preferred way to solve this problem is for a user to wait to actually execute the suite until all of the specs that should be run have been loaded.\nChanging jasmine so specs could be added after the suite started execution would be a large change to how jasmine works internally. You should be able to get the same kind of effect by writing a custom boot.js that waits for your specs to be defined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jwbeech", "authorAssociation": "NONE", "createdAt": "2017-01-13T11:13:40Z", "contents": "Hi @infews I see you added a feature request for this, I can't seem to access your link, is there any progress on this topic?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T22:18:54Z", "contents": "Adding specs after the suite has started execution is not something that we are looking to add to Jasmine.\nIf you have a static list that you can loop through synchronously to add specs, you can still do that, but if you want to add specs in a more asynchronous manner, you'll probably need to define a custom boot that waits until you have defined all of your specs before calling execute on the Jasmine Env", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 561, "url": "https://github.com/jasmine/jasmine/issues/561", "title": "How Return Object in createSpy() in Jasmine 2", "contents": "In Jasmine 1.x, I was able to do this:\nFB_mock = {\n  value1: \"val1\",\n  value2: \"val2\"\n}\nvar method = jasmine.createSpy().andReturn(FB_mock);\nHow can I do the same in Jasmine 2? It looks like andReturn() is gone. Thanks.", "createdAt": "2014-03-22T18:55:17Z", "updatedAt": "2014-03-22T22:05:12Z", "closedAt": "2014-03-22T22:05:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "demisx", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "demisx", "company": null}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}], "comments_count": 2, "comments_data": [{"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2014-03-22T19:07:36Z", "contents": "andReturn has now changed into and.returnValue. You can also find this in the jasmine docs under \"spies\" :)\nAlso these kinds of questions are better off asked on stackoverflow, or the mailing list.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "demisx", "authorAssociation": "NONE", "createdAt": "2014-03-22T22:05:12Z", "contents": "Sorry, somehow I've missed this in the docs. I guess I've been staring at the code too much for the past 48 hours. This was a dumb question, I admit. Thank you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 562, "url": "https://github.com/jasmine/jasmine/issues/562", "title": "Documentation for Spies doesn't mention how they are removed.", "contents": "I'm pretty sure the spies are automatically removed after the block they are in- either an it or a describe if they are setup in a beforeEach.  But the jasmine docs are silent on the issue- I want to make sure spies I setup in one test don't affect code in another, across both it and describe blocks.", "createdAt": "2014-03-23T18:11:57Z", "updatedAt": "2014-03-27T04:56:51Z", "closedAt": "2014-03-27T04:54:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jtfairbank", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jtfairbank", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-24T04:04:54Z", "contents": "Absolutely - spies are removed after each spec. But we'll get something added to the docs to make that clear.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jtfairbank", "authorAssociation": "NONE", "createdAt": "2014-03-24T10:08:18Z", "contents": "Cool thanks Davis.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T04:56:51Z", "contents": "Pulled in the fix from @jaapz so the docs now mention that spies are cleaned up.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 563, "url": "https://github.com/jasmine/jasmine/issues/563", "title": "Manually fail a test with fail() method", "contents": "Is there still a fail() function on the it object in 2.0?", "createdAt": "2014-03-24T14:03:38Z", "updatedAt": "2018-02-15T04:28:39Z", "closedAt": "2014-09-24T20:23:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dasois", "authorAssociation": "NONE", "participants_count": 29, "participants_data": [{"login": "dasois", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "Yogu", "company": "@AEB-labs "}, {"login": "timoweiss", "company": null}, {"login": "otomi", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "bilalq", "company": null}, {"login": "pkaminski", "company": null}, {"login": "Honn", "company": null}, {"login": "morioust", "company": null}, {"login": "mohamnag", "company": null}, {"login": "tomchiverton", "company": "@thefalken"}, {"login": "captainsano", "company": null}, {"login": "mikepugh", "company": null}, {"login": "geddski", "company": "Domo"}, {"login": "mmocny", "company": "Google"}, {"login": "webskin", "company": "Micka\u00ebl Gauvin"}, {"login": "JoaquinFernandez", "company": "TaxDown"}, {"login": "kylezeeuwen", "company": null}, {"login": "pkalkman", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mpm", "company": null}, {"login": "BenjaminVanRyseghem", "company": null}, {"login": "siminino", "company": null}, {"login": "casmith", "company": "Macquarie"}, {"login": "luchillo17", "company": "PSL"}, {"login": "jadekler", "company": "Google"}, {"login": "yavin5", "company": "Yavin 5"}, {"login": "t2gaurav", "company": null}], "comments_count": 49, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-24T16:41:53Z", "contents": "The fail method was on the spec, not the it function. And we removed it from 2.0 in order to simplify the interface and hide implementation.\nThere is a global pending function that will mark a spec as such for projects that like to scaffold out many tests and then implement them one at a time. But at the moment there is not an explicit interface to forcibly fail a spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dasois", "authorAssociation": "NONE", "createdAt": "2014-03-24T17:26:26Z", "contents": "Wouldn't it be good to have the ability to manually fail a test with a\nspecific message?\nI'm thinking of a try catch block where you want to fail the test manually\nif no error is thrown.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-24T17:36:14Z", "contents": "Maybe. That specific case can be handled with a .not.toThrow() matcher.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dasois", "authorAssociation": "NONE", "createdAt": "2014-03-24T17:58:42Z", "contents": "I don't see how to do that.\nIn my try block I want to execute a statement which should throw a\nparticular error. I want to handle this error with the catch block and test\nseveral properties of it.\nBut if the expression I'm testing in the try block is not even throwing a\nerror, the test must fail!", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-24T18:03:10Z", "contents": "Look at the Spies: .and.throwError section of the Introduction doc for how to do this with that matcher.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Yogu", "authorAssociation": "NONE", "createdAt": "2014-04-01T22:47:26Z", "contents": "A fail() function would be really nice to ensure that a callback is never called, e.g.\ndo(function() {\n  fail(\"do called first callback but should not\");\n}, function(arg) {\n  expect(arg).toEqual(true);\n});", "reactions_count": 27, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "timoweiss", "authorAssociation": "NONE", "createdAt": "2014-04-10T12:29:55Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "otomi", "authorAssociation": "NONE", "createdAt": "2014-04-29T16:28:11Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-08T20:17:09Z", "contents": "Added to backlog: https://www.pivotaltracker.com/story/show/70975468", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-05-23T22:50:33Z", "contents": "This also makes a lot of sense when working with promises. I will want the test to just fail if it goes into a then or catch block unexpectedly. Alternatively, it'd be nice if the done callback behaved like mocha and failed if the first argument was an Error object.\nRight now, I'm defining this in a script that's sourced before my tests:\nwindow.fail = function(msg) {\n  throw new Error(msg || 'Test failed');\n};", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART"]}, {"authorLogin": "dasois", "authorAssociation": "NONE", "createdAt": "2014-05-26T17:27:58Z", "contents": "I want to draw the analogy to JUnit here, because i just stumbled over it:\nIn JUnit 3.x\npublic void testGetElement() {\n  try {\n    (new ArrayList()).get(0);\n    fail(\"The test should have failed\");\n  } catch (NullPointerException e) {\n    assertTrue(\"Sanity check\", true);\n  }\n}\nIn JUnit 4.x:\n@Test(expected = IndexOutOfBoundsException.class)\npublic void testGetElement() {\n  (new ArrayList()).get(0);\n}\nThis is interesting, since it looks you can't do the sanity-check in JUnit 4.x anymore.\nThe JUnit 4.x syntax behaves like jasmine's .toThrow, I guess.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-05-26T19:51:22Z", "contents": "I don't think this issue should be closed. In JS, there are many times when an error is passed, but isn't thrown, since try/catch is synchronous.\nIf Jasmine had some way of expressing thedone(err) pattern that Mocha has, I'm sure most of us would be content with that. However, since that isn't there, I'd like to have a function that will fail the test if it is invoked. This comes in handy when trying to assert that things aren't going along the wrong path in a promise chain, for example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dasois", "authorAssociation": "NONE", "createdAt": "2014-05-27T08:09:58Z", "contents": "sorry, was accidentally closed, I'm just hitting the 'close&comment' button too often ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pkaminski", "authorAssociation": "NONE", "createdAt": "2014-05-31T06:36:43Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Honn", "authorAssociation": "NONE", "createdAt": "2014-06-05T13:12:19Z", "contents": "Yupp, just ran in to this with promises. I have a promise that should resolve, but in case it does not I wamt to call fail('Promise did not resolve etc...') or something similar to fail the test.\nDoing expect(true).toBe(false) just to make sure it fails feels dirty...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "morioust", "authorAssociation": "NONE", "createdAt": "2014-06-19T21:52:24Z", "contents": "+1, I'm running into the same use case with promises", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:37:08Z", "contents": "This issue has a story in our Tracker backlog.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-06-23T05:42:34Z", "contents": "It's great to hear that! It'd be nice if it was a function with a single optional argument of either a string or an Error object.\n\nIf no argument is given, it should fail with some generic message.\nIf a string is given, it should use the string as its failure message\nIf an Error is given, it should use the message property of the error object as its failure message\n\nDoes that sound reasonable?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Yogu", "authorAssociation": "NONE", "createdAt": "2014-06-23T06:16:02Z", "contents": "Sounds good. But I'd rather display the stack trace of the passed Error object, too (beside the stack trace of the fail() call, because can become handy).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mohamnag", "authorAssociation": "NONE", "createdAt": "2014-06-25T12:00:31Z", "contents": "+1 javascript is kind of a mixture language and it would be nice to have a explicit fail command.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tomchiverton", "authorAssociation": "NONE", "createdAt": "2014-08-06T14:36:03Z", "contents": "This. It's impossible to unit test APIs that use promises right now, because you can't fail the test from the error handler.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "captainsano", "authorAssociation": "NONE", "createdAt": "2014-09-03T11:41:36Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikepugh", "authorAssociation": "NONE", "createdAt": "2014-09-05T14:32:55Z", "contents": "@tomchiverton Sure you can.\n.catch(function (err) {\n    expect(err).toBeNull();\n});\nIt'd be nice to just be able to write fail(err); but this is what I'm using right now for promises and it's working fine. The benefit of this over something like expect(true).toBe(false); is that Jasmine will spit out the contents of the err object, saying it was expecting null - so you have the stack trace, etc in your output.\nThe above can also be re-factored into a common error handler and re-used in all of your unit tests which deal with promises.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2014-09-11T06:40:44Z", "contents": "+1, could really use this when testing promises.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmocny", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-14T15:00:55Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "webskin", "authorAssociation": "NONE", "createdAt": "2014-10-06T21:29:31Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JoaquinFernandez", "authorAssociation": "NONE", "createdAt": "2015-02-06T19:33:18Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kylezeeuwen", "authorAssociation": "NONE", "createdAt": "2015-02-26T21:42:47Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pkalkman", "authorAssociation": "NONE", "createdAt": "2015-04-20T12:06:17Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-20T19:49:03Z", "contents": "Given that we've implemented this already, I'm not sure what the +1s mean here? @JoaquinFernandez @kylezeeuwen @pkalkman", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pkalkman", "authorAssociation": "NONE", "createdAt": "2015-04-21T07:51:59Z", "contents": "Sorry my bad. I should have read the documentation beter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kylezeeuwen", "authorAssociation": "NONE", "createdAt": "2015-04-21T07:54:00Z", "contents": "Me too, I am stuck using jasmine 1.x via protractor and jasmine-node, but I\nthink there is a beta version of both that uses jasmine 2 I just haven't\nupgraded yet . thanks for all the code !\nOn Apr 21, 2015 17:52, \"Peter Kalkman\" notifications@github.com wrote:\n\nSorry my bad. I should have read the documentation beter.\n\u2014\nReply to this email directly or view it on GitHub\n#563 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-22T19:49:40Z", "contents": "I believe that the newer versions or protractor use jasmine 2.x now, and we have release a jasmine package on npm that supports 2.x as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mpm", "authorAssociation": "NONE", "createdAt": "2015-08-26T18:18:50Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BenjaminVanRyseghem", "authorAssociation": "NONE", "createdAt": "2016-06-01T17:48:38Z", "contents": "I know this thread it old, but now that there is a fail why not also having a pass?\nAs everyone else here, I am dealing with callback, and I would love to be able to write\nmy.function\n    .onSuccess(pass)\n    .onError(fail)\nor something similar, instead on using expect(true).toBeTruthy()\nOr am I missing something?", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "siminino", "authorAssociation": "NONE", "createdAt": "2016-06-08T22:23:56Z", "contents": "@BenjaminVanRyseghem  +1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "casmith", "authorAssociation": "NONE", "createdAt": "2016-07-24T08:50:09Z", "contents": "@BenjaminVanRyseghem Specs pass implicitly if they do not fail, so there's not really a need to call pass() . If you want to check that a callback was called, usually you would install a spy on it and verify it via the spy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BenjaminVanRyseghem", "authorAssociation": "NONE", "createdAt": "2016-07-24T09:33:42Z", "contents": "of course I could use a spy, but it's still a bit of boiler plate \ud83d\ude04", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "luchillo17", "authorAssociation": "NONE", "createdAt": "2017-06-16T17:18:38Z", "contents": "@BenjaminVanRyseghem also if you have an async test (which to be honest will happen more often than not) you'll just call done() whenever the test pass, that way you tell jasmine that the test has ended without trouble.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jadekler", "authorAssociation": "NONE", "createdAt": "2017-06-28T23:00:58Z", "contents": "+1 would love a .fail()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-28T23:39:49Z", "contents": "@jadekler as I mentioned 2 years ago in this thread, done.fail already exists in Jasmine. Not sure what your +1 means here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yavin5", "authorAssociation": "NONE", "createdAt": "2017-07-24T16:50:25Z", "contents": "I must be missing something, and I suspect others above are as well..\n@slackersoft : I'm using Jasmine 2.6.0.  I have tried invoking all of the fail() functions mentioned so far in this issue.. they're all undefined.  I read through the source and grepped through the source, and I am not seeing any definition of a fail function.  Should I be seeing one?  If so, where specifically should I be seeing it in version 2.6.0?\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T00:20:41Z", "contents": "@yavin5 how are you including/running Jasmine in your project? (Karma, gulp, ruby gem, python, something else). If the mechanism you're using utilizes the default Jasmine spec runner html, you should be able to see the version at the top of the page, like this:\n\nThe fail functions should be included in any jasmine-core version after 2.1.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yavin5", "authorAssociation": "NONE", "createdAt": "2017-07-26T08:28:19Z", "contents": "@slackersoft I'm including Jasmine by doing the following:\nIn package.json, added these as devDependencies:\n  \"devDependencies\": {\n    \"jasmine\": \"^2.6.0\",\n    \"jasmine-core\": \"^2.6.0\",\n    \"jasmine-node\": \"^1.14.5\"\n  }\n\nI initialized Jasmine's configuration file:\n$ ./node_modules/.bin/jasmine init\n\nThen, also in package.json, I added a \"test\" script:\n  \"scripts\": {\n    \"prestart\": \"npm install\",\n    \"start\": \"node ./index.js\",\n    \"pretest\": \"npm install\",\n    \"test\": \"./node_modules/jasmine-node/bin/jasmine-node .\"\n  },\n\nAnd then I run \"npm test\" on the command line (it also runs from my WebStorm IDE and the results are the same).\nIncidentally, I did try to use the \"jasmine\" command line script instead, at first, like this:\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/jasmine\",\n  },\n\nAnd that worked all except: my socket.io client code stopped working correctly when I ran my spec tests with this test runner!  A request sent from the client is not received by the server, silently.  I didn't have time to investigate that, so I next tried the jasmine-node test runner, which runs my tests fine.  I don't think fail() works in either case.\nI see now that node_modules/jasmine-core/lib/jasmine-core/jasmine.js does have a fail() function defined.. it would sure be nice if that was usable somehow.  Placing fail('something'); inside a test, at the top, just gives me:\nF\n\nFailures:\n\n  1) the test should fail properly\n   Message:\n     ReferenceError: fail is not defined\n   Stacktrace:\n     ReferenceError: fail is not defined\n    at .<anonymous> (/Users/yavin5/projects/mything/spec/server.spec.js:100:9)\n    at .<anonymous> (/Users/yavin5/projects/mything/node_modules/jasmine-node/lib/jasmine-node/async-callback.js:45:37)\n    at ontimeout (timers.js:365:14)\n    at tryOnTimeout (timers.js:237:5)\n    at Timer.listOnTimeout (timers.js:207:5)\n\nFinished in 0.046 seconds\n1 test, 1 assertion, 1 failure, 0 skipped", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "luchillo17", "authorAssociation": "NONE", "createdAt": "2017-07-26T12:45:08Z", "contents": "@yavin5 Mine works with just fail(), but just in case could you try the async way with done.fail()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yavin5", "authorAssociation": "NONE", "createdAt": "2017-07-26T19:28:14Z", "contents": "I did indeed try all of the ways of referencing it.. none of those work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-28T00:38:52Z", "contents": "If you're using jasmine-node, it only support Jasmine 1.3.x and not the 2.x feature set. You probably want your npm test script to use the jasmine command line tool to get whatever version of jasmine-core you have available.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "yavin5", "authorAssociation": "NONE", "createdAt": "2017-07-28T11:24:32Z", "contents": "Interesting.  Okay, yep, I re-tried the jasmine command line test runner tool, and fail('ugh') now works!  And, my other bug that was preventing me from using the jasmine test runner is apparently not happening now (I don't know which change made it stop happening -- I've been actively developing the code).\nONE SOLUTION: For everyone using the \"jasmine-node\" test runner instead of the \"jasmine\" one, fail() won't work because jasmine-node silently exposes an older API version of Jasmine.  :(\nThank you!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "t2gaurav", "authorAssociation": "NONE", "createdAt": "2018-02-15T04:28:39Z", "contents": "Use - expect(true).toEqual(false);", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 564, "url": "https://github.com/jasmine/jasmine/issues/564", "title": "\"describe\"s match name greedily", "contents": "Given this set of tests:\ndescribe(\"on\", function() {\n    // Several \"it\" tests\n});\n\ndescribe(\"once\", function() {\n    // Several \"it\" tests\n});\n\nIn the HTML test runner, if I click the \"on\" category to narrow my scope it will also run \"once\" tests. This is reproducible with any \"foo\" and \"foo*\" combination.\nI'm running Jasmine 2.0 with Jasmine-html loaded via RequireJS.", "createdAt": "2014-03-26T18:04:56Z", "updatedAt": "2014-08-28T19:53:43Z", "closedAt": "2014-08-28T19:53:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "montlebalm", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "montlebalm", "company": "Slack"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "harriha", "company": "Futurice"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 8, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T16:31:05Z", "contents": "Can you provide a pull request that models the behavior and the fix you expect? Is this a real world case that you've run into?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "montlebalm", "authorAssociation": "NONE", "createdAt": "2014-03-27T18:13:33Z", "contents": "I'll see what I can do about a pull request. I ran into this on one of my projects where I was testing a pub/sub system. The specific case is:\ndescribe('events', function() {\n    describe('on', function() {\n        // ...\n    });\n    describe('once', function() {\n        // ...\n    });\n});\n\nWhen I'm debugging failed calls I'll often click on the category to narrow which tests are being run. I noticed that both \"on\" and \"once\" were being executed when the \"on\" category was in focus. This specific case was the only time it came up for me, but I was able to easily reproduce it with other combinations.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "harriha", "authorAssociation": "NONE", "createdAt": "2014-03-31T19:14:29Z", "contents": "I've ran into this too, and find it fairly awkward. My current project has a quite massive set of specs for components divided into \"namespaces\", so if I try to run specs for only component foo, also specs for (possibly unrelated) component bar.foo gets run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-01T01:50:45Z", "contents": "IIRC this was intentional such that you could run 'focused suites' (since the describe string would be contained in all specs). I'm not sure if we've changed suite running so that this is no longer necessary. That said, it should probably only match from start of line.\nLooking at the code, it looks like there might be a workaround in which you could drop a \"^\" into your spec filter string and have it match from start.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "harriha", "authorAssociation": "NONE", "createdAt": "2014-04-01T19:54:12Z", "contents": "I personally see the use case for this current not-so-strict matching, but in some projects I would prefer the matching to be strict.\nBased on quick smoke-testing, seems that I can override the jasmine.HtmlSpecFilter (or modify env.specFilter) in boot.js and customize the behavior there. This seems to be a valid workaround at least in my case, not sure if you would consider finding some kind of official solution for adjusting this (env variable for strict/non-strict matching or something).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:42:29Z", "contents": "@montlebalm - is this closable, per the comments of @harriha ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "montlebalm", "authorAssociation": "NONE", "createdAt": "2014-08-27T16:53:38Z", "contents": "@infews this can be closed if the behavior is intentional. I can find a workaround for my projects or use different names with describe.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-28T19:53:43Z", "contents": "This is the desired behavior for right now, due to how the rest of filtering works.\nClosing, but if someone wants to take a crack at a pull request that would keep the current functionality, but allow some way to specify more exact matches, we'll definitely take a look at a pull request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 565, "url": "https://github.com/jasmine/jasmine/issues/565", "title": "Request:  Collapse groups of successful tests into a single passing symbol (jasmine-html)", "contents": "Currently, each passing test gets an Unicode character, \\u2022, in jasmine-html.js.  I'd like to request that one hundred passing tests be collapsed to a single character as well (say, a bulls-eye, or \\u2A00).\nIt doesn't have to be 100 - I just picked that number out of a hat.\nRationale:  I'm running 1000+ tests and adding more as I go.  The dots are taking up a lot of space...", "createdAt": "2014-03-27T04:51:49Z", "updatedAt": "2014-03-29T22:12:31Z", "closedAt": "2014-03-27T16:23:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ajvincent", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ajvincent", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T16:23:39Z", "contents": "This sounds like a great use of a custom reporter. The dots actually have alt names that correspond to the tests, so some folks actually like having all the dots because it's easier to find the failing ones.\nClosing this - but feel free to write your own reporter and publicize it here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ajvincent", "authorAssociation": "NONE", "createdAt": "2014-03-29T22:12:31Z", "contents": "As a patch from Mercurial:\ndiff --git a/libraries/jasmine/jasmine-html.js b/libraries/jasmine/jasmine-html.js\n--- a/libraries/jasmine/jasmine-html.js\n+++ b/libraries/jasmine/jasmine-html.js\n@@ -89,30 +89,52 @@ jasmineRequire.HtmlReporter = function(j\n       currentParent = currentParent.parent;\n     };\n\n     this.specStarted = function(result) {\n       currentParent.addChild(result, \"spec\");\n     };\n\n     var failures = [];\n+    var groupPass = false;\n+    var firstOf100 = null;\n     this.specDone = function(result) {\n       if (result.status != \"disabled\") {\n         specsExecuted++;\n       }\n\n-      symbols.appendChild(createDom(\"li\", {\n+      var marker = createDom(\"li\", {\n           className: result.status,\n           id: \"spec_\" + result.id,\n           title: result.fullName\n         }\n-      ));\n+      );\n+      if (specsExecuted % 100 == 1) {\n+        groupPass = true;\n+        firstOf100 = marker;\n+      }\n+      symbols.appendChild(marker);\n+\n+      if (specsExecuted % 100 == 0) {\n+        if (groupPass) {\n+          groupMarker = createDom(\"li\", {className: \"passGroup\"});\n+          var range = document.createRange();\n+          range.setStartBefore(firstOf100);\n+          range.setEndAfter(marker);\n+          range.deleteContents();\n+          symbols.appendChild(groupMarker);\n+        }\n+        else {\n+          symbols.appendChild(createDom(\"br\"));\n+        }\n+      }\n\n       if (result.status == \"failed\") {\n         failureCount++;\n+        groupPass = false;\n\n         var failure =\n           createDom(\"div\", {className: \"spec-detail failed\"},\n             createDom(\"div\", {className: \"description\"},\n               createDom(\"a\", {title: result.fullName, href: specHref(result)}, result.fullName)\n             ),\n             createDom(\"div\", {className: \"messages\"})\n           );\ndiff --git a/libraries/jasmine/jasmine.css b/libraries/jasmine/jasmine.css\n--- a/libraries/jasmine/jasmine.css\n+++ b/libraries/jasmine/jasmine.css\n@@ -9,16 +9,18 @@ body { background-color: #eeeeee; paddin\n .html-reporter #jasmine_content { position: fixed; right: 100%; }\n .html-reporter .version { color: #aaaaaa; }\n .html-reporter .banner { margin-top: 14px; }\n .html-reporter .duration { color: #aaaaaa; float: right; }\n .html-reporter .symbol-summary { overflow: hidden; *zoom: 1; margin: 14px 0; }\n .html-reporter .symbol-summary li { display: inline-block; height: 8px; width: 14px; font-size: 16px; }\n .html-reporter .symbol-summary li.passed { font-size: 14px; }\n .html-reporter .symbol-summary li.passed:before { color: #5e7d00; content: \"\\02022\"; }\n+.html-reporter .symbol-summary li.passGroup { font-size: 14px; }\n+.html-reporter .symbol-summary li.passGroup:before { color: #5e7d00; content: \"\\02600\"; }\n .html-reporter .symbol-summary li.failed { line-height: 9px; }\n .html-reporter .symbol-summary li.failed:before { color: #b03911; content: \"x\"; font-weight: bold; margin-left: -1px; }\n .html-reporter .symbol-summary li.disabled { font-size: 14px; }\n .html-reporter .symbol-summary li.disabled:before { color: #bababa; content: \"\\02022\"; }\n .html-reporter .symbol-summary li.pending { line-height: 17px; }\n .html-reporter .symbol-summary li.pending:before { color: #ba9d37; content: \"*\"; }\n .html-reporter .exceptions { color: #fff; float: right; margin-top: 5px; margin-right: 5px; }\n .html-reporter .bar { line-height: 28px; font-size: 14px; display: block; color: #eee; }", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 566, "url": "https://github.com/jasmine/jasmine/issues/566", "title": "Passing a spec by reference does not seem to work", "contents": "The following test works fine:\ndescribe(\"My Test Suite\", function(){\n    var a;\n    beforeEach(function(){\n        a = 'Apple';\n    });\n    describe(\"Sub test suite\", function(){\n        it(\"my async spec\", function(done) {\n            setTimeout(function(){\n                expect(a).toBe('Apple');\n                done();\n            }, 400);\n        });\n    });\n});\n\nBut when I pass the spec by reference the test fails. Refactoring above code as below does not work -\nfunction foo() {\n    it(\"my async spec\", function(done) {\n        setTimeout(function(){\n            expect(a).toBe('Apple');\n            done();\n        }, 400);\n    });\n}\n\ndescribe(\"My Test Suite\", function(){\n    var a;\n    beforeEach(function(){\n        a = 'Apple';\n    });\n    describe(\"Sub test suite\", foo);\n});\n\nHere is a jsfiddle with these two tests - http://jsfiddle.net/y1426i/ed34q/\nAny help with this is much appreciated. Thanks.", "createdAt": "2014-03-27T19:19:03Z", "updatedAt": "2014-03-28T03:53:39Z", "closedAt": "2014-03-28T03:51:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yusufnb", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "yusufnb", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-03-27T20:56:34Z", "contents": "In your example, \"a\" is not in the same scope as foo (IE, it will be undefined in foo, can't close into the fn).\nIf foo was a factory that returned a function and took a, it might work. EG:\nfunction foo(a) { \n  return function() { \n    it ....\n  }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yusufnb", "authorAssociation": "NONE", "createdAt": "2014-03-28T03:53:39Z", "contents": "I realized that scope was the issue. Thanks for the example.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 567, "url": "https://github.com/jasmine/jasmine/issues/567", "title": "Allow done() to take an optional error.", "contents": "It is a popular pattern to pass an error object to a done() callback in NodeJS.\nWe should support that in Jasmine 2.0, too so that users can properly unit test asynchronous code.\nExample\ndescribe('async with error', function() {\n\n  it('should fail on done(err)', function(done) {\n\n    setTimeout(function() {\n      done(new Error('async fail'));\n    }, 100);\n  });\n});\n\nshould fail with\nerror: 'async fail'\n\ninstead of succeeding which is the case as of v2.0.0.", "createdAt": "2014-04-02T16:02:53Z", "updatedAt": "2017-01-03T20:23:03Z", "closedAt": "2014-10-02T15:16:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nikku", "authorAssociation": "NONE", "participants_count": 15, "participants_data": [{"login": "nikku", "company": null}, {"login": "bilalq", "company": null}, {"login": "juliemr", "company": "Google"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "arqex", "company": null}, {"login": "zeropaper", "company": null}, {"login": "jeffersoncarpenter", "company": "TransUnion, LLC"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "analog-nico", "company": null}, {"login": "vincentlaucy", "company": "perapera.ai"}, {"login": "martinleopold", "company": "@StudioProcess "}, {"login": "straker", "company": "Deque Systems"}, {"login": "Gerg", "company": null}, {"login": "timaschew", "company": "@heremaps"}, {"login": "johnw42", "company": null}], "comments_count": 24, "comments_data": [{"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-05-23T22:56:48Z", "contents": "+1\nThis would make async testing much more DRY.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2014-06-12T00:02:24Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T05:09:30Z", "contents": "I would love to see a less-trivial example of where this is helpful. I'm not against the idea, I just don't have enough context to appreciate it yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-06-23T05:35:06Z", "contents": "A common idiom among node callbacks is that they have the signature of function(err, result). In the happy path, the callback will be invoked as callback(null, result) and as callback(err) in the unhappy path. This is more than just a community practice, since it can be seen in core modules such as fs, crypto, child_process, and many more. Nowadays, this pattern is being seen in client-side code as well, since it has become easier to consume CommonJS modules there using tools like Component or Browserify.\nBy having done take in an optional argument that results in a failure if present, many tests can be simplified.\nLet's use fs.readdir as an example.\nWith the current Jasmine build, a test may look like this:\ndescribe('fs.readdir function', function() {\n\n  it('can read current directory without error', function(done) {\n    fs.readdir('.', function(err, res) {\n      expect(err).toEqual(null)\n      done()\n    })\n  })\n\n})\nIf done could support an optional callback, it could be simplified to this:\ndescribe('fs.readdir function', function() {\n\n  it('can read current directory without error', function(done) {\n    fs.readdir('.', done)\n  })\n\n})\nThe Mocha docs also have a pretty good example of how it can be useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "arqex", "authorAssociation": "NONE", "createdAt": "2014-08-04T10:10:03Z", "contents": "+1\nI think this is a super useful feature when testing code that return promises.\nit('I expect my promise to be resolved'), function(done) {\n    myPromiseMethod()\n        .then(function(result){\n            // here I can use expect, and an error is raised if it fails\n            expect(result).toBe('whatever');\n            done();\n        })\n        .catch(function(err){\n            // Here I just want jasmine to fail\n            done(new Error('Promise fail: ' + err));\n        })\n    ;\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zeropaper", "authorAssociation": "NONE", "createdAt": "2014-08-05T09:36:14Z", "contents": "+1\nI switched to mocha because of that missing pattern", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jeffersoncarpenter", "authorAssociation": "NONE", "createdAt": "2014-08-11T23:30:01Z", "contents": "+1\nJasmine fails the test anyway if done is not called within a short timeout.  However that only tells you that done was never called, not what the error was.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:06:42Z", "contents": "This might break for apps using a promise library instead of just straight node callbacks. If you were to pass done to a promise that resolves to some value, a successful result will cause your spec to fail. I'm not sure what the right solution to this problem that let's both of these cases work out of the box.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-08-26T20:17:09Z", "contents": "If you're okay with doing something pretty different, done could be a function that has two other properties that are also functions.\nit('should work', function(done) {\n  somePromise()\n  .then(done.pass)\n  .catch(done.fail)\n});\nWith this sort of API, promises will be well supported without interfering with the traditional node callback pattern.\nThe naming of those properties should probably go through some discussion, but done.pass and done.fail are pretty readable to me.\nAlthough if you really want to support promises well, it would be awesome if we could just return a promise from an it block and have the test pass if it succeeds and fail if it doesn't.\nEdit:\nOh, and if the concern is around backwards compatibility, I would suggest including this change in the next minor version bump and acknowledge it as a breaking change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikku", "authorAssociation": "NONE", "createdAt": "2014-08-27T09:13:05Z", "contents": "+1 for returning promises from the it block. That would indeed be the correct way to deal with promises.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T15:56:36Z", "contents": "Interesting approach. Can you put together a pull request that accomplishes this? I think would we want/need a timeout on the done functions. Maybe.\nAlso note that in order to maintain backwards compatibility, done will still need to be a function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-08-27T16:36:32Z", "contents": "I believe done already times out after 5 seconds by default, right? And it sounds like it would be preferable to allow returning of promises/thenables from an it block instead of having the two sub-functions under done.\nWith the change I'm proposing, done would still be a function, but there would be a minor backwards-compatibility break with users passing done into a promise, as it would treat an argument to done as a reason for test failure. The semantic changes around promise handling also warrant a minor version bump at the least. Are you okay with this approach?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "analog-nico", "authorAssociation": "NONE", "createdAt": "2014-09-27T01:23:34Z", "contents": "+1 for done.pass and done.fail. Makes it more explicit than passing an error to done() or not.\nAfter seeing issue #423 being rejected I am also about to switch to mocha or whatever. Let me explain:\nBeing used to done taking an error I would have written:\nit('should create an iframe', function (done) {\n\n  var deferred = $.getScript('/base/dist/unittesting/integration/scripts/widget.js');\n\n  deferred\n    .done(function () {\n      expect($('.la-widget iframe').length).toBe(1);\n      done();\n    })\n    .fail(done);\n\n});\nFor Jasmine 2.0 the best solution I found was:\nit('should create an iframe', function (done) {\n\n  var deferred = $.getScript('/base/dist/unittesting/integration/scripts/widget.js');\n\n  deferred\n    .always(function () {\n      expect(deferred.state()).toBe('resolved'); // In case of rejection this fails the test.\n    })\n    .done(function () {\n      expect($('.la-widget iframe').length).toBe(1);\n    })\n    .always(done);\n\n});\nHowever, this still does not give me a proper error message! The following solution would output a proper error message but the code just looks stupid:\nit('should create an iframe', function (done) {\n\n  var deferred = $.getScript('/base/dist/unittesting/integration/scripts/widget.js');\n\n  deferred\n    .done(function () {\n      expect($('.la-widget iframe').length).toBe(1);\n    })\n    .fail(function (err) {\n      expect(err).toBe(undefined);\n    })\n    .always(done);\n\n});\nOf course with done.pass and done.fail I could switch back to the first solution and even be more explicit:\nit('should create an iframe', function (done) {\n\n  var deferred = $.getScript('/base/dist/unittesting/integration/scripts/widget.js');\n\n  deferred\n    .done(function () {\n      expect($('.la-widget iframe').length).toBe(1);\n      done.pass();\n    })\n    .fail(done.fail);\n\n});\nAnd of course +1 for returning Promises. With this I could write:\nit('should create an iframe', function () {\n\n  var deferred = $.getScript('/base/dist/unittesting/integration/scripts/widget.js');\n\n  deferred\n    .done(function () {\n      expect($('.la-widget iframe').length).toBe(1);\n    });\n\n  return deferred.promise();\n\n});\nI think we need both as we are not always dealing with Promises. Of course we could create one if we don't have one but then the code gets more cluttered than necessary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-27T04:20:05Z", "contents": "I don't think we can have done itself fail a spec just because it got called with some argument, as this would break the use case where someone wants to pass it to a promise that resolves to a value.\nWe've just implemented a fail function as mentioned in #563. Due to how jasmine currently handles some errors thrown in async specs, fail just reports a failed expectation, but it will accept an optional error message or actual Error object.\nI think the fail function should get you most, if not all, of what is desired with the use cases I'm seeing here. Is there something else we would gain from using a done.fail in addition to the existing done?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-09-27T05:45:41Z", "contents": "The introduction of fail here should be sufficient for most needs. I'm glad to see it takes in Error objects as well.\nWhen working with promises, using a combination of done and fail together should do wonders.\ndescribe('some spec', function() {\n\n  it('makes promises easy to work with', function(done) {\n    somePromise().then(function(result) {\n      expect(result).toBe(something)\n    }).then(done, fail)\n  })\n\n})\nNot accepting an error as the first argument makes it less suitable towards Node style callbacks, but that's not too big a deal.\nThe one improvement I'd still like to see is support for just allowing promises to be returned and pass the test if they fulfill and fail it if they reject. Still, that's a discussion for another issue. I'm okay with this issue being closed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "analog-nico", "authorAssociation": "NONE", "createdAt": "2014-09-27T16:23:02Z", "contents": "Great! Just done and done.fail is sufficient from my point of view.\nI extracted the \"just returning Promises\" feature to issue #681 as it is diverging from the original focus of this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vincentlaucy", "authorAssociation": "NONE", "createdAt": "2015-01-16T03:49:58Z", "contents": "I'm using this work around\nexpect(err.stack).toBeNull();", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "martinleopold", "authorAssociation": "NONE", "createdAt": "2015-04-02T00:27:57Z", "contents": "noob question: is there any difference in using (the global) fail and done.fail?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-02T01:22:49Z", "contents": "done.fail is only available in asynchronous specs where you already have done and will also cause the spec to finish and move to the next thing in the queue. The global fail will only add an explicit failing expectation and in an asynchronous spec the spec will still wait and timeout.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "straker", "authorAssociation": "NONE", "createdAt": "2015-07-14T07:17:53Z", "contents": "Could we get this feature of done.fail in the jasmine docs? I spent the last hour trying to google how to not have Jasmine timeout when an async assertion fails, and finally stumbled upon this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-14T22:47:11Z", "contents": "There is an issue for adding docs for done.fail in the docs repo here: jasmine/jasmine.github.io#26", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timaschew", "authorAssociation": "NONE", "createdAt": "2016-05-24T16:22:30Z", "contents": "Why not supporting done(err) as well?\nThis is the nodejs way, forcing users to use something different makes absolutely no sense!", "reactions_count": 13, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-19T16:45:02Z", "contents": "@timaschew please read the discussion above for the reasons why we don't want done itself to fail the spec when it receives an argument.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnw42", "authorAssociation": "NONE", "createdAt": "2016-11-29T16:57:02Z", "contents": "How about another variant that implements the node.js convention? It could be called something like done.node or done.expectNull.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 569, "url": "https://github.com/jasmine/jasmine/issues/569", "title": "Support running Jasmine in Nashorn", "contents": "I started working on JUnit to JavaScript testing support using Java 8 and Nashorn [1]. I quickly found that Jasmine is not plug-and-play in a stock Nashorn environment. In particular, the use of window and window.onload is problematic and requires a shim.\nI'll fork Jasmie itself and do the hacks but it would be nice if there was a way to support Nashorn OOTB without a browser emulator shim because the JS that I'll be testing will never see a browser (ever), so there's no point in making Jasmine think that's where it is.\n[1] - https://github.com/reactor/reactor-js", "createdAt": "2014-04-03T11:33:56Z", "updatedAt": "2014-11-26T21:16:12Z", "closedAt": "2014-08-28T20:31:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jbrisbin", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jbrisbin", "company": "@instana "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "hhelwich", "company": "ip.labs GmbH"}, {"login": "eshepelyuk", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-03T16:47:19Z", "contents": "The code of Jasmine does not depend on window - we have to in order to support node.js.\nTake a look at boot.js and node_boot.js. We expect that you should be able to write a Nashorn-specific boot file that accomplishes the same things for that environment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jbrisbin", "authorAssociation": "NONE", "createdAt": "2014-04-03T16:59:05Z", "contents": "Just to clarify a little what I'm having trouble with:\nI'm not using a node.js style module packaging. Therefore this code is blowing up:\n  if (typeof module !== 'undefined' && module.exports) {\n    return exports;\n  } else {\n    window.jasmineRequire = window.jasmineRequire || {};\n    return window.jasmineRequire;\n  }\nIMO there shouldn't be any assumptions about how Jasmine registers itself. It would be a bit easier to configure if it used something like:\n(function(scope) {\n  // ...register Jasmine\n})(this);\nWhich would evaluate in Nashorn to \"register things in global scope\" just like using window.\nI can, of course, create a nashorn_boot.js to get around some of this but it still leaves me with the problem of how to get my scripts to see what's being registered when not using module.exports or window.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hhelwich", "authorAssociation": "NONE", "createdAt": "2014-04-06T11:02:04Z", "contents": "I had the same issue and resolved it in a similar way.\nAfter this change, the file jasmine.js still works in the Browser but also in a non-browser environment (nashorn). Also the variable getJasmineRequireObj which seems to be private to the file does not leak in the global scope.\nI do not understand how the boot.js file can help, because the jasmin.js file is loaded first. Am i missing something? I used the 2.0.0 release from here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-06T22:11:24Z", "contents": "@jbrisbin is right. That first block is in jasmine.js and thus the fail happens before boot.\nIt's in the function getJasmineRequireObj which returns the object on which each Jasmine object is defined. This is the right default implementation of this function - it works for browsers and Node.js - the two environments we support in core.\nWe should probably do something like\nvar getJasmineRequireObj = getJasmineRequireObj || function getJasmineRequireObj() {\n  if (typeof module !== 'undefined' && module.exports) {\n    return exports; // node.js support\n  } else {\n    window.jasmineRequire = window.jasmineRequire || {};\n    return window.jasmineRequire; // browser support\n  }\n};\n\nThis would allow other environments to load a file before jasmine.js that defined this function. How does that sound?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hhelwich", "authorAssociation": "NONE", "createdAt": "2014-04-07T18:26:27Z", "contents": "Sounds good to me. Thank you!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:41:52Z", "contents": "Here's the story in our backlog.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eshepelyuk", "authorAssociation": "NONE", "createdAt": "2014-11-26T21:16:12Z", "contents": "Maybe it will be useful to take a look at my post about running Jasmine on Nashorn\nTesting JVM server-side JavaScript with Jasmine, Spock and Nashorn", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 570, "url": "https://github.com/jasmine/jasmine/issues/570", "title": "Spy documentation errors", "contents": "The 2.0 documentation describes several methods on the calls object of a spy. But as far as I can tell, the calls property just contains an array and the methods should be called on the spy object itself.", "createdAt": "2014-04-03T12:04:37Z", "updatedAt": "2014-05-09T15:57:59Z", "closedAt": "2014-05-09T15:57:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sjoerdvisscher", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sjoerdvisscher", "company": "Q42"}, {"login": "KasMA1990", "company": "Humio"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "KasMA1990", "authorAssociation": "NONE", "createdAt": "2014-05-08T08:12:10Z", "contents": "I just had the same problem. I was trying to call count() on calls (as per the documentation), but found out it's just the lenght property I should access.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-05-08T16:13:09Z", "contents": "This syntax changed as part of 2.0. In 1.3 checking the number of calls for a spy would be calls.length, but in 2.0, the calls attribute on a spy is no longer just a raw array but an actual CallTracker object with a count() method. Thus you should use calls.count() for 2.0.\nThe documentation actually runs the specs at the bottom of the page, and they are green in both 2.0 and edge.\nAre you sure you're using jasmine 2.0?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "KasMA1990", "authorAssociation": "NONE", "createdAt": "2014-05-09T06:12:05Z", "contents": "Sorry, I thought my project was using 2.0, but we aren't, so it's my mistake :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-05-09T15:57:59Z", "contents": "Sorry for the confusion. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 571, "url": "https://github.com/jasmine/jasmine/issues/571", "title": "Calling expect inside EXTJS Ajax.request callback fails intermittently", "contents": "I am trying to write asynchronous test cases as below, which fails intermittently by giving error -\nTypeError: Cannot call method 'expect' of null in expect method, where it get currentSpec as null.\nMy spec sample is as below, pls note that I have 10 service tests in same describe block:\ndescribe(\"Services:\", function() {\nit(\"Notifications\",function(done){\nExt.Ajax.request({\nurl : '.../notificationsService',\nmethod : 'GET',\ncallback : function (options, success, response) {\nexpect(success).toBeTruthy();\ndone();\n},\nscope : this\n});\n});\n// Similarly I have 10 services to test in same describe block...\n});\nWorkaround:\nI tried one change which made it work consistently is that to move 'currentSpce=null', in the method 'specResultsCallback' before the call to 'removeAllSpies', as below:\nfunction specResultCallback(result) {\nj$.Expectation.resetMatchers();\ncustomEqualityTesters = [];\ncurrentSpec = null;\nremoveAllSpies();\nreporter.specDone(result);\n}\nPlease let me know if this fix can be made in the core files so that it resolves permanently.\nThanks,\nSriram", "createdAt": "2014-04-03T16:22:02Z", "updatedAt": "2014-04-03T16:37:47Z", "closedAt": "2014-04-03T16:37:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sriram139", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sriram139", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-03T16:37:47Z", "contents": "This is not an issue in core. The intermittent behavior is likely due to the fact you are making an asynchronous call in your test.\nWhat you want to do is use AJAX mocking and make this call synchronous.\nQuestions about usage are best handled on the mailing list: jasmine-js@googlegroups.com. There are plenty of Ext.JS users on the list that can help you with patterns.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 572, "url": "https://github.com/jasmine/jasmine/issues/572", "title": "Asynchronous testing with Jasmine 2 using Coffeescript", "contents": "We've been trying to write some tests of async functions using Jasmine 2 but they are not working due to the way Coffeescript wraps its rendered Javascript within closures.\nI'm struggling to find a sensible solution for this. Does anyone have any working examples of how one might test async functions with Jasmine 2 using Coffeescript?\nThanks in advance\nD", "createdAt": "2014-04-03T23:51:12Z", "updatedAt": "2014-04-04T00:18:52Z", "closedAt": "2014-04-04T00:18:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "davesag", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "davesag", "company": "@industrieco "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "suranyami", "company": "Suranyami"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-03T23:59:01Z", "contents": "There are plenty of Jasmine 2 / CoffeeScript users over on the mailing list: jasmine-js@googlegroups.com. I suggest taking this to the list and discuss with some example specs that are not working.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "suranyami", "authorAssociation": "NONE", "createdAt": "2014-04-03T23:59:12Z", "contents": "For instance, this works in Javascript:\ndescribe(\"Asynchronous specs\", function() {\n  var value = 0;\n\n  function funcRunInBackground() {\n    value = 1;\n  };  \n\n  function wrapFuncRunInBackground(done) {\n    // setup for simmulating the async operation, a function run in the background\n    setTimeout(function() {\n        funcRunInBackground();\n        done();\n    }, 3000);       \n  }    \n\n  beforeEach(function(done) {\n      wrapFuncRunInBackground(done);    \n      console.log(\"wrap function returns immediately but value = 1 is set 3 seconds later. value is still \" + value);  \n  });                 \n\n\n  it(\"should support async execution of test preparation\", function() {\n    expect(value).toBeGreaterThan(0);\n  });\n});   \n\nBut the same in Coffeescript (via js2coffee) fails:\ndescribe \"Asynchronous specs\", ->\n  funcRunInBackground = ->\n    value = 1\n    return\n  wrapFuncRunInBackground = (done) ->\n\n    # setup for simmulating the async operation, a function run in the background\n    setTimeout (->\n      funcRunInBackground()\n      done()\n      return\n    ), 3000\n    return\n  value = 0\n  beforeEach (done) ->\n    wrapFuncRunInBackground done\n    console.log \"wrap function returns immediately but value = 1 is set 3 seconds later. value is still \" + value\n    return\n\n  it \"should support async execution of test preparation\", ->\n    expect(value).toBeGreaterThan 0\n    return\n\n  return", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "suranyami", "authorAssociation": "NONE", "createdAt": "2014-04-04T00:18:06Z", "contents": "Turns out this is a js2coffee problem with putting the var scopes in the wrong place.\nGist here: https://gist.github.com/suranyami/9965397", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davesag", "authorAssociation": "NONE", "createdAt": "2014-04-04T00:18:52Z", "contents": "Okay thanks @suranyami - good to know.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 576, "url": "https://github.com/jasmine/jasmine/issues/576", "title": "console info statements after jasmine.clock().tick won't show", "contents": "describe('a possible bug', function() {\n/* global console */\n'use strict';\nit('jasmine stops logging after a call to jasmine.clock().tick ', function (done) {\nvar foo = {\nbar: function() {\n        }\n    };\n\n    spyOn(foo, 'bar');\n\n    foo.bar();\n\n    jasmine.clock().install();\n\n    window.setTimeout(function() {\n        done();\n    }, 10);\n\n    console.info('before ticking the clock');\n\n    jasmine.clock().tick(11);\n\n    console.info('after ticking the clock');\n\n    expect(foo.bar).toHaveBeenCalled();\n\n    jasmine.clock().uninstall();\n});\n\n});", "createdAt": "2014-04-15T19:55:26Z", "updatedAt": "2014-04-15T20:31:39Z", "closedAt": "2014-04-15T20:31:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ingoe", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ingoe", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ingoe", "authorAssociation": "NONE", "createdAt": "2014-04-15T19:57:00Z", "contents": "describe('a possible bug', function() {\n/* global console */\n'use strict';\nit('jasmine stops logging after a call to jasmine.clock().tick ', function (done) {\nvar foo = {\nbar: function() {\n        }\n    };\n\n    spyOn(foo, 'bar');\n\n    foo.bar();\n\n    jasmine.clock().install();\n\n    window.setTimeout(function() {\n        done();\n    }, 10);\n\n    console.info('before ticking the clock');\n\n    jasmine.clock().tick(11);\n\n    console.info('after ticking the clock');\n\n    expect(foo.bar).toHaveBeenCalled();\n\n    jasmine.clock().uninstall();\n});\n\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-04-15T20:31:39Z", "contents": "This actually doesn't have anything to do with clock().tick(). By invoking done() from the function in setTimeout you are telling jasmine that everything that needs to happen in your spec has completed.\nWhen I run the spec as the only thing in my suite, I see both the messages from both calls to console.info, but the suite fails because it then calls expect after the spec, and the suite, have finished running.\nClosing, as this is an issue around calling done when the spec isn't actually done and not an issue in jasmine", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 577, "url": "https://github.com/jasmine/jasmine/issues/577", "title": "Stop testcase execution on failure in beforeEach", "contents": "I think it would be very useful to stop execution of a testcase if the beforeEach fails (i.e. throws an exception or similar).\nExample: precondition is used for login -> if the login does not succeed, it does not make any sense to run the actual test.\nI already tried to expect() something in the beforeEach (or in a function that it calls, to be more exact), and throwing an exception. The first did not work at all for my purposes (as other steps in the beforeEach were still executed), the 2nd at least registers as an error but the execution still continues.\nOr maybe something like an option to stop executing the testcase as soon as one expectation fails could work, but I didn't find any such option.", "createdAt": "2014-04-18T09:28:39Z", "updatedAt": "2018-01-15T18:32:53Z", "closedAt": "2017-06-19T20:49:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FrankyBoy", "authorAssociation": "NONE", "participants_count": 13, "participants_data": [{"login": "FrankyBoy", "company": "bwin.party digital entertainment plc"}, {"login": "otomi", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "just-boris", "company": null}, {"login": "donaldpipowitch", "company": "@Mercateo"}, {"login": "xealot", "company": null}, {"login": "myitcv", "company": "myitcv.io"}, {"login": "DmitryEfimenko", "company": null}, {"login": "LukeSkyw", "company": null}, {"login": "filmaj", "company": "@adobe"}, {"login": "skyshore2001", "company": null}, {"login": "monkpit", "company": null}], "comments_count": 20, "comments_data": [{"authorLogin": "otomi", "authorAssociation": "NONE", "createdAt": "2014-04-29T16:27:56Z", "contents": "Having a manual way of stopping a test case execution would be really handy. For example when creating tests for Selenium Webdriver and during the flow for example login fails thus I cannot perform rest of my steps I could fail the test with predefined message and skip the rest of the execution and jump to next one.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:46:33Z", "contents": "Is a manual fail method sufficient? If so, we have this in our backlog.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T19:56:44Z", "contents": "I don't think the manual fail method solves this by itself. It sounds to me like the desired behavior is that a single spec stops execution upon encountering its first expectation failure or exception and proceeds straight to the next spec. This would probably need to be some other kind of option to jasmine similar to whats requested in #414 but for a single spec instead of the whole suite.\nI'm not sure what we would want to do as far as afterEach calls in this mode as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-27T22:31:40Z", "contents": "I've created a set of stories in tracker that detail how we want to address this issue.\nStory for core: https://www.pivotaltracker.com/story/show/1165916\nStory to update npm: https://www.pivotaltracker.com/story/show/89323102\nStory to update gem: https://www.pivotaltracker.com/story/show/89323040\nStory to update py: https://www.pivotaltracker.com/story/show/89323226\nWe'd be happy to review pull requests for this functionality.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "just-boris", "authorAssociation": "NONE", "createdAt": "2015-11-10T16:51:00Z", "contents": "+1. Now this is weird behavior. If I have a failed setup in beforeEach, all my tests would be incorrect. Why do you execute this test cases anyway?", "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2016-03-04T09:58:50Z", "contents": "Sorry, do I understand  this correctly: if I call done.fail in beforeEach the remaining its are executed anyway?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xealot", "authorAssociation": "NONE", "createdAt": "2016-03-09T15:53:28Z", "contents": "Just ran into this, the behavior is a bit outside of expectation IMO. We have a beforeEach that calls done.fail because of a busted setup but continues to attempt to run all the tests within the describe.", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-17T08:44:14Z", "contents": "Adding to the voices here...\nfail(\"Some message\");\nexpect(false).toBe(true);\nDefinitely does not make sense to continue execution after the fail above, whether in a test or a beforeEach\nBut in the interests of making this a backwards compatible change (i.e. no surprises for people who may be relying on this behaviour), would a new function fail_hard(\"Some messages\") do the trick?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-17T15:35:40Z", "contents": "@myitcv this feature isn't just about when you call fail, but also when an expectation fails. We've done a little work to get closer to this desired functionality, but we're not quite there yet. We would still be happy to review a pull request that makes this happen.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-17T15:58:28Z", "contents": "@slackersoft - thanks for the response. Sounds like you've considered the case of calling fail too which is great.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DmitryEfimenko", "authorAssociation": "NONE", "createdAt": "2016-06-10T08:13:56Z", "contents": "+1. Any progress on this?\nBy the way, the same should go for beforeAll()", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "LukeSkyw", "authorAssociation": "NONE", "createdAt": "2016-11-04T09:48:51Z", "contents": "This is a real issue. Just spent half a day trying to understand why my tests were failing because angular was throwing an exception on an unknown module loaded in a beforeEach but nothing was shown in the logs. Had to instrument angular with console.log to find out.\nThis issue was fixed in mocha: mochajs/mocha#270", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-01T00:55:29Z", "contents": "@LukeSkyw I think you might be conflating something like #529 with this issue. If your exception makes it up to Jasmine, your spec will be marked as failed with that error. However, Jasmine continues with the rest of the execution queue of beforeEaches, its, and afterEaches; this is more what this issue is about.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "filmaj", "authorAssociation": "NONE", "createdAt": "2016-12-13T14:44:04Z", "contents": "+1, this would be handy", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "skyshore2001", "authorAssociation": "NONE", "createdAt": "2017-03-02T01:31:09Z", "contents": "@slackersoft\nI tried version 2.5.2 to test my back-end web APIs. When fail() / pending() is called in beforeEach, the \"it\" block still execute, although the result is marked failure / pending.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "skyshore2001", "authorAssociation": "NONE", "createdAt": "2017-03-02T02:16:12Z", "contents": "Actually my requirement is to skip the other cases/specs in the same suite if some critical case fails.\nThis issue may also match my requirement: #414\nI'm studying the code to see if there is some light-weight approach.\nAny suggestion is welcome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-16T17:20:42Z", "contents": "@skyshore2001 Jasmine definitely does not want to have specific specs/suite marked as \"critical\". We would be happy to review a pull request for #414 to stop suite execution at the end of the first failing spec.\nSkipping out in the middle of the spec run (this issue) is a bit more complicated, because depending on the type of error, Jasmine probably still needs to run any afterEach (or afterAll depending) to cleanup state for the next spec. This would then require the QueueRunner to know which of the functions it is given are setup and teardown and not just have a list of functions to call.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "monkpit", "authorAssociation": "NONE", "createdAt": "2018-01-12T19:04:12Z", "contents": "@slackersoft couldn't QueueRunner be made to process a queue of queues, and if it's executing the \"test spec\" queue and there is a failure, we bail on the \"test spec\" queue and move on to the afterEach/afterAll queue?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-13T01:36:28Z", "contents": "This feature was released in version 2.7 of Jasmine-Core. If you don't have it, please update your dependency.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "monkpit", "authorAssociation": "NONE", "createdAt": "2018-01-15T18:32:53Z", "contents": "For future googlers that might land on this issue - see stopSpecOnExpectationFailure:\nhttps://jasmine.github.io/2.8/node.html#section-13", "reactions_count": 3, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}], "reactions_count": 38, "reactions_datalabels": ["feature request", "has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 578, "url": "https://github.com/jasmine/jasmine/issues/578", "title": "Description String of failing test are incorrect.", "contents": "When running my test via karma runner, I get the following output for a failed test description:\nFirefox 28.0.0 (Ubuntu) [object Object] [object Object] [object Object]\n[object Object] [object Object] [object Object] [object Object] [object Object]\n[object Object] [object Object] [object Object] [object Object] [object Object]\n[object Object] [object Object] [object Object] [object Object] [object Object]\n[object Object] [object Object] [object Object] [object Object] [object Object]\n[object Object] [object Object] [object Object] [object Object] [object Object]\n[object Object] [object Object] [object Object] [object Object] [object Object]\n[object Object] [object Object] should wipe out empty names on close FAILED\n\nAccording to my hierarchy of describes in my jasmine test, the description of the test should be:\ndispPermListsCtrl close test should wipe out empty names on close FAILED\n\nI have so far noticed this on all other failing test as well.\nI am running Jasmine 2.0.0 on Karma Version 10.2, npm 1.4.3, node 0.10.26.\nHere is a spit out of the jasmine test of interest:\ndescribe(\"dispPermListsCtrl\", function() {\n  var scope;\n  var list = [];\n  var title = \"TEST TILE\";\n  var roleName = \"Role\";\n  beforeEach(module('adminPortal'));\n  beforeEach(inject(function($rootScope, $controller) {\n    scope = $rootScope.$new();\n\n    controller = $controller(\"dispPermListsCtrl\", {\n      $scope : scope,\n      $modalInstance : modalInstanceMock,\n      list : list,\n      title : title,\n      roleName : roleName\n    });\n  }));\n  describe(\"close test\", function() {\n    beforeEach(function() {\n      spyOn(modalInstanceMock, 'close');\n    });\n\n    it(\"should wipe out empty names on close\", function() {\n      scope.list.push({itemInfo :{}, create:false, read:false, update:false, delete:false});\n      scope.close();\n      expect(modalInstanceMock.close).toHaveBeenCalledWith([]);\n    });\n\n    it(\"should call modalInstance close\", function() {\n      scope.close();\n      expect(modalInstanceMock.close).toHaveBeenCalledWith(list);\n    });\n  });\n});", "createdAt": "2014-04-21T16:15:59Z", "updatedAt": "2014-08-18T20:03:45Z", "closedAt": "2014-08-18T20:03:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CorbynS", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "CorbynS", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:48:04Z", "contents": "Have you tried running this same suite without Karma? I wonder if this is a Karma adapter problem and not with Jasmine core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-18T20:03:45Z", "contents": "It looks like this is actually an issue with the karma runner and not with jasmine itself. Closing this for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 579, "url": "https://github.com/jasmine/jasmine/issues/579", "title": "-0 should equal 0", "contents": "I've written a unit test for a function were I expect my returned value to be rounded to 0 (example -0.4 should return 0). I've written my unit test as expect(result).toEqual(0) and it is failing.\nWhen attempting to debug I eventually found out that it was failing because it thought that -0 did not equal 0. It did however pass when using expect(result).toBe(0), however I should still be able to use expect(-0).toEqual(0).", "createdAt": "2014-04-21T18:50:46Z", "updatedAt": "2018-07-29T12:29:28Z", "closedAt": "2014-11-03T21:15:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jonatr35", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "jonatr35", "company": "Spectrum Health"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "KthProg", "company": "Hooks Media"}, {"login": "nirmoav", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-24T03:06:32Z", "contents": "There's more discussion about this issue here which can hopefully give some context as to why -0 does not toEqual 0. There's still some ongoing discussion if this is the correct decision.\nA quick summary though, toBe is JavaScript's === while toEqual is Underscore.js's notion of what equality means. The error message is better on master now where it does print out that one of the values is '-0' which can help users debug this more quickly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T05:02:00Z", "contents": "@jonatr35 - is this issue closeable? We think we've fixed this on master.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonatr35", "authorAssociation": "NONE", "createdAt": "2014-06-24T16:05:54Z", "contents": "I just cloned the master and created a spec to test that -0 should equal 0 but it is still failing. I am seeing the new message that says -0 should equal 0 however.\nWhen testing I am using the jasmine files in lib\\jasmine-core. Just want to make sure that is correct. Below is my spec file.\ndescribe(\"Verify that -0 equals 0\", function() {\n\n    describe(\"-0 should EQUAL 0\", function() {\n        it(\"should work hard coded\", function() {\n            expect(-0).toEqual(0);\n        })\n\n        it(\"should work with Math.ceil\", function() {\n            expect(Math.ceil(-0.001)).toEqual(0);\n        })\n    })\n\n    describe(\"-0 should BE 0\", function() {\n        it(\"should work hard coded\", function() {\n            expect(-0).toBe(0);\n        })\n\n        it(\"should work with Math.ceil\", function() {\n            expect(Math.ceil(-0.001)).toBe(0);\n        })\n    })\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-25T01:28:22Z", "contents": "Yes, you are demonstrating the current desired behavior on master. We now print '-0' specifically to indicate to the user why the spec is failing (whereas in the past it was simply showing '0'), but based on discussion in the other issue (#496) we're leaning towards mimicking the Underscore.js behavior, which means expect(0).toEqual(-0) is expected to fail.\nThere is still some ongoing discussion in #496 if this is the correct behavior, however.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-03T21:15:35Z", "contents": "We haven't heard any further feedback on this or #496 so I'm going to close this with displaying -0 as the desired behavior as @sheelc mentioned. If we hear more feedback in either issue we can reconsider.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "KthProg", "authorAssociation": "NONE", "createdAt": "2017-10-24T17:35:18Z", "contents": "Yeah they should really be equal please update this.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nirmoav", "authorAssociation": "NONE", "createdAt": "2018-07-29T12:28:36Z", "contents": "I too, thought this is clearly a bug. but it's surprisingly intentional.\nAs I started my PR for the bugfix, and started debugging the failing test:\nexpect(0).toEqual(-0)\nI stumbled upon the following lines of code(matcherUtil.js line 121 according to today) that is running when using the toEqual matcher:\n// Identical objects are equal. 0 === -0, but they aren't identical.\n// See the [Harmony egal proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\nif (a === b) {\n      result = a !== 0 || 1 / a == 1 / b;\n      if (!result) {\n        diffBuilder.record(a, b);\n      }\n      return result;\n    }\nNotice the comment!\nAnd as you can see, even though the browser/node evaluate a === b as true, it is falsy when comparing 1/0 === 1/-0 (infinity is not the same as negative infinity)\nso there you go.\nalso my 5cents - if you want to compare numbers, use the toBe matcher - it's doing only a reference comparison (using the \"===\" operator), which is MUCH MUCH shorter (and faster) than the quite big toEqual matcher, plus you'll get true on 0 === -0 :)\ncheers", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 581, "url": "https://github.com/jasmine/jasmine/issues/581", "title": "resolving promise returned from a factory in jasmine", "contents": "Hi,\nI have designed a factory that contains a method that makes an asynchronous using $http.\nI am trying to access promise values returned from factory in jasmine.\nI want the returned promise value to be resolve in jasmine.\nI need a simple example that would solve this issue\nPlease help me resolve the issue\nThe following is the piece of factory code\nvar app=angular.module('chartApp');\napp.controller('chartCtrl', [\n'$scope',\n'$http',\n'scatterplot',\n    function($scope, $http, scatterplot) {\n\n        $http({\n    method: 'GET',\n    url: 'RNASequenceDataServlet',\n         headers: { 'Content-Type': 'application/json' },\n\n  })\n  .success(function (data, status, headers, config) {\n\n\n        deferred.resolve(configu);\n\n}\nreturn (deferred.promise);\n});\n});\nPlease help me wrtitng a test case with proper syntax that will help me resolve this issue", "createdAt": "2014-04-28T10:40:35Z", "updatedAt": "2014-08-25T20:29:09Z", "closedAt": "2014-08-25T20:29:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jitendrasbhati", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jitendrasbhati", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:49:52Z", "contents": "Since this is a \"how to test\" type of question, have you tried the Jasmine Google Group - jasmine-js@googlegroups.com. More of the community gathers there to help people with testing patterns..", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 582, "url": "https://github.com/jasmine/jasmine/issues/582", "title": "accessing the applications data in jasmine", "contents": "Hi,\nI have designed a web application in which I first send a request to the server to load the data.After the data is returned I process the data and then display the results on the web page.I am using angularjs t o design this application.I am trying to test this application using jasmine.I want to cross verify the values returned from the server.Is there any way in which I can test the data returned from the server using jasmine.I am using $http request to make an asynchronous call to the server.Please help me with an example to solve this problem", "createdAt": "2014-04-29T02:47:10Z", "updatedAt": "2014-04-29T13:38:25Z", "closedAt": "2014-04-29T13:30:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jitendrasbhati", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jitendrasbhati", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "joshuacc", "company": "Hobsons"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-04-29T13:30:28Z", "contents": "Jasmine isn't a great tool to end-to-end test your server. If you absolutely wanted to, there's probably ways, but it is atypical, so I'm not aware of a good pattern here. I would recommend stubbing your $http responses and testing just your javascript behavior. This, too, is how angular recommends you do it: see https://docs.angularjs.org/api/ngMock/service/$httpBackend", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2014-04-29T13:38:25Z", "contents": "@jitendrasbhati FYI, the way that my team has approached the problem is to have a separate API test suite using jasmine-node to confirm that the API is returning the right data. This is kept independent of the Angular application test suite which uses mocking as @ragaskar suggests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 583, "url": "https://github.com/jasmine/jasmine/issues/583", "title": "Execute specs in random order", "contents": "Hi. Is it possible to force specs execute in random order, similar to RSpec? That would help to detect interdependencies between the specs early.\nThanks.", "createdAt": "2014-04-29T17:07:41Z", "updatedAt": "2015-09-29T13:36:42Z", "closedAt": "2014-08-27T16:53:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "demisx", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "demisx", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sdemjanenko", "company": "Meraki"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "myitcv", "company": "myitcv.io"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:53:08Z", "contents": "Not directly at the moment. But many have asked for this.\nWe have a feature coming that would enable all sorts of fun things regarding which specs are run and in which order. You can follow this story in our backlog.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "demisx", "authorAssociation": "NONE", "createdAt": "2014-08-27T17:20:23Z", "contents": "FYI, couldn't follow that story. The \"Follow story\" checkbox is disabled for my login.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sdemjanenko", "authorAssociation": "NONE", "createdAt": "2015-03-13T21:30:06Z", "contents": "Has any progress been made on this front?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T19:51:25Z", "contents": "The current way to run your specs in a random order is to call Env.execute and pass in a list of spec or suite ids in the order you want the specs to run. When we first started implementing beforeAll and afterAll we consciously broke this functionality until we could figure out how we wanted to handle arbitrary ordering with the Alls. We made sure not to release Jasmine in a state where passing an order to execute didn't work, but doing so made Alls behave like Eachs. This has been changed on master, and they should behave as expected going forward.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sdemjanenko", "authorAssociation": "NONE", "createdAt": "2015-03-18T19:54:25Z", "contents": "Couldn't modifying the TreeProcessor achieve this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-29T13:35:52Z", "contents": "Would be a big fan \ud83d\udc4d\nHas there been any progress on this front?\n@slackersoft - did you have any thoughts on @sdemjanenko's suggestion?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-29T13:36:42Z", "contents": "Just seen #927", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 584, "url": "https://github.com/jasmine/jasmine/issues/584", "title": "[ ] toEqual { } returns true", "contents": "I have  var foo = { categories: [ ] } and when I call expect(foo.categories).toEqual({ }); the spec pass. Why?", "createdAt": "2014-05-01T21:08:10Z", "updatedAt": "2014-05-05T11:47:58Z", "closedAt": "2014-05-05T11:47:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "passalini", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "passalini", "company": "Edools"}, {"login": "joshuacc", "company": "Hobsons"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2014-05-01T22:01:04Z", "contents": "I haven't looked at the code, but I suspect it is because both [] and {} are objects with no \"own\" properties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-02T05:44:04Z", "contents": "This was broken in Jasmine 1.3.1 and fixed in 2.0.0. Are you seeing the same problem in the later release?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "passalini", "authorAssociation": "NONE", "createdAt": "2014-05-05T11:47:58Z", "contents": "@sheelc thanks, now I'm using the 2.0.0 and it works fine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 586, "url": "https://github.com/jasmine/jasmine/issues/586", "title": "HtmlUnit and Jasmine 2.0", "contents": "I've tried upgrading some HtmlUnit tests from Jasmine 1.3.1 to 2.0 and found some issues. As it runs fine in the browser I've logged the issue here, but am just making you aware of it. Cheers.", "createdAt": "2014-05-04T02:38:43Z", "updatedAt": "2014-05-13T09:57:51Z", "closedAt": "2014-05-13T09:57:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tntim96", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tntim96", "company": null}, {"login": "alextreppass", "company": "Canva"}], "comments_count": 3, "comments_data": [{"authorLogin": "alextreppass", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-06T10:21:44Z", "contents": "It'll be up to HTMLUnit to change how they obtain the test results.\nSomething like the JSReporter would likely be a more robust approach than scraping the page for spans with the 'passed' class.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tntim96", "authorAssociation": "NONE", "createdAt": "2014-05-10T03:04:01Z", "contents": "Sure the test is crude, but it seems that there's something fundamentally wrong (probably not with Jasmine) with the test execution - using that reporter didn't help. I've added a debug repository at https://github.com/tntim96/htmlunit/tree/Jasmine2.0.0-debugging if you're interested in looking, but I'll add more comments on the HtmlUnit log.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tntim96", "authorAssociation": "NONE", "createdAt": "2014-05-13T09:57:51Z", "contents": "Closing as this is an issue with HtmlUnit.\n...but if you're interested, HtmlSpecFilter does new RegExp(filterString) with filterString possibly being undefined. This is perfectly legal(\"let P be the empty String if pattern is undefined\"), but making it explicit may be better and would fix the issue - up to you. I'll try to merge a separate fix into HtmlUnit.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 589, "url": "https://github.com/jasmine/jasmine/issues/589", "title": "Spies don't propagate down test suites", "contents": "Example here:\nhttp://plnkr.co/edit/UAJ6G8aupKO3ldlw5ONS?p=preview\nI presumed that the spy would be available at inner suites, but that doesn't seem to be the case.\nIs this intended?", "createdAt": "2014-05-09T18:09:26Z", "updatedAt": "2014-05-10T00:01:31Z", "closedAt": "2014-05-09T23:35:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chreekat", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chreekat", "company": "@snowdriftcoop, @databrary"}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-09T23:35:04Z", "contents": "You're doing a thing I wouldn't recommend and a thing I don't think is supported: firstly, defining a variable outside of a spec/before block. This means that variable could mutate across test runs -- it's not idempotent. I think best practice here if you want to access the var in multiple tests is to \"var\" it outside a test block, but define it in a before. That way you can have confidence in its value in each spec.\nSecondly, I'm not surprised that spyOn \"works\" (IE, doesn't blow up) outside a spec, but maybe it should, as I wouldn't expect it to behave correctly (the scope of a describe and it block are not shared).\nYou should be able to achieve what you want to do by having a simple 'var obj' declaration in the describe block and adding a beforeEach block that assigns and spies on it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chreekat", "authorAssociation": "NONE", "createdAt": "2014-05-10T00:01:31Z", "contents": "Cool, I don't disagree. I already added \"spyOn\"s directly in the tests that need them anyway, which is obviously cleaner.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 590, "url": "https://github.com/jasmine/jasmine/issues/590", "title": "IE6/7 support", "contents": "Hi, do you support internet explorer 6 and 7?\nI use jasmine 2.0.0 with https://github.com/gruntjs/grunt-contrib-jasmine. When I open SpecRunner.html in those IE, I get error \"Object doesn't support this property or method on line 129\". Line 129 refers to this code https://github.com/pivotal/jasmine/blob/00c8e372576438243a8f977b8bc7b81f04389dd6/lib/jasmine-core/boot.js#L150 in my setup.\nIf I replace calls of createElement() and createTextNode() in those lines to direct call (without apply, just normal function call), then IE shows another error in line 250 (i don't remember exact line, but near 250). There is no such line in boot.js, and IE don't says in which file ...\nSo, I just wondering, do you support IE6/7 and there is probably some issue in my setup, or you don't support it?", "createdAt": "2014-05-11T20:46:41Z", "updatedAt": "2014-11-05T08:24:06Z", "closedAt": "2014-05-11T20:58:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rpominov", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "rpominov", "company": null}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "chrisbod", "company": "N/A"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "AceMood", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-11T20:48:36Z", "contents": "Jasmine 2.0.0 and up only supports IE 8 and up. Jasmine 1.3.1 is still available if IE 6/7 support is required.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rpominov", "authorAssociation": "NONE", "createdAt": "2014-05-11T20:58:24Z", "contents": "Ok, thanks for so quick answer :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisbod", "authorAssociation": "NONE", "createdAt": "2014-07-08T11:12:12Z", "contents": "Just as an aside - the changes to support IE6/7/8 in compat mode are relatively small - there's a use of querySelector to get an element with a class name (which is the only ul in the document), the createTextNode method won't work but you could just append a <span>[text</span> instead. And finally (the worst part) the CSS... (there may be other problems but I've not had them crop up in my tests yet) - if anyone else would like this doing let me know and I'll fork and go for it", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-08T20:18:39Z", "contents": "The query selector isn't the only thing that breaks in older versions of IE. See the discussion in #560", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisbod", "authorAssociation": "NONE", "createdAt": "2014-07-08T20:24:11Z", "contents": "Thanks - mines only monkey patched to work in IE6/7/8 compats mode and I haven't run large enough test suites to see all the problems (and I've ignored the CSS because I'm only interested in the results!) Once I experience a significant number of problems I'll make a decision as to whether to fork and see how far I get :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AceMood", "authorAssociation": "NONE", "createdAt": "2014-11-05T08:24:06Z", "contents": "I do not care about the css compatible in html page. But the js error really stunned me.\nWe can not ensure the UL element is the only one in the page. @chrisbod\nand I try to find a total change log from 1.31 to 2.01 @sheelc, the obvious change is more\nplugins in docs page I think.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 591, "url": "https://github.com/jasmine/jasmine/issues/591", "title": "Provide a way to clear/reset reporters", "contents": "Building a jasmine runner that runs within a single page app, and without refreshing the page, the jasmine reporters never clean themselves out. Subsequent test runs compound the results of previous test runs. It'd be nice if reporters were either self-cleansing or provided a simple way to reset the reporters.", "createdAt": "2014-05-12T22:03:00Z", "updatedAt": "2014-06-07T06:00:23Z", "closedAt": "2014-06-07T06:00:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "plukevdh", "company": "ARxChange"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-23T16:25:46Z", "contents": "Reporters own their output, so it's not the responsibility of Core to do this work.\nIt feels like what you're reporting is a bug in the HtmlReporter. We'd love to see a pull request that clears out the reporter DOM on jasmine.started or something like that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plukevdh", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-23T19:04:40Z", "contents": "That's kinda what I meant I suppose. Good clarification though. I'll look into possibilities and submit something.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-07T06:00:23Z", "contents": "Closed through #594", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 592, "url": "https://github.com/jasmine/jasmine/issues/592", "title": "how to use toEqual to skip undefined?", "contents": "expect({key1:'value1', key2:undefined}).toEqual({key1:'value1'})", "createdAt": "2014-05-15T10:45:58Z", "updatedAt": "2018-10-31T02:44:15Z", "closedAt": "2014-05-17T01:33:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "atian25", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "atian25", "company": "@alibaba @eggjs  "}, {"login": "alex-okrushko", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "luchillo17", "company": "PSL"}], "comments_count": 4, "comments_data": [{"authorLogin": "atian25", "authorAssociation": "NONE", "createdAt": "2014-05-17T01:33:05Z", "contents": "soloved.\n  beforeEach((function () {\n    var customMatchers = {\n      toEqualObjectWithoutKey: function (utils, customEqualityTesters) {\n        return {\n          compare: function (actual, expected) {\n            actual = removeUndefined(actual);\n            expected = removeUndefined(expected);\n            var result = {};\n            result.pass = utils.equals(actual, expected, customEqualityTesters);\n            if (!result.pass) {\n              result.message = \"Expected \" + JSON.stringify(actual) + \" toEqualObjectWithoutKey \" + JSON.stringify(expected);\n            }\n            return result;\n          }\n        }\n      }\n    };\n    jasmine.addMatchers(customMatchers);\n  }));\n\n  /**\n   * remove key when value is undefined\n   * @param {Object} obj \n   * @returns {Object} \n   */\n  function removeUndefined(obj){\n    var result = angular.copy(obj);\n    traverse(result, function(key, value, isLeaf, parent, traversePath){\n      if(value == undefined){\n        delete parent[key];\n      }\n    });\n    return result;\n  }\n\n  /**\n   * traverse object\n   * @param {Object} obj \n   * @param {Function} callback as function(key, value, isLeaf, parent, traversePath)\n   * @param {Array} [traversePath] \n   */\n  function traverse(obj, callback, traversePath) {\n    for(var key in obj){\n      if(obj.hasOwnProperty(key)){\n        var item = obj[key];\n        var path = traversePath || [];\n        if (item instanceof Object && !(item instanceof Array)) {\n          callback.apply(this, [key, item, false, obj, path]);\n          var nextPath = angular.copy(path);\n          nextPath.push(key);\n          traverse(item, callback, nextPath);\n        }else{\n          callback.apply(this, [key, item, true, obj, path]);\n        }\n      }\n    }\n  }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alex-okrushko", "authorAssociation": "NONE", "createdAt": "2017-04-07T15:37:15Z", "contents": "That's not the solution - that's a workaround.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T00:21:22Z", "contents": "@alex-okrushko It doesn't make sense for Jasmine to think that {foo: undefined} is equal to {} which is what would have to happen to make this work, so this isn't something that Jasmine is looking to change.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "luchillo17", "authorAssociation": "NONE", "createdAt": "2018-10-31T02:44:15Z", "contents": "I'm having a jasmine test pass with an undefined property in karma, i think maybe the karma config this project has is replacing jasmine toEqual for a lax one that ignores undefined properties, has anyone faced this before?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 593, "url": "https://github.com/jasmine/jasmine/issues/593", "title": "Structured JsApiReporter with specs inside suites", "contents": "Currently the reporter gives a flat list of all specs and a flat list of all suites, but they're not linked in any way (other than an inherited title).\nWould you consider building a tree of suites and tests as they pass / fail. So a driver could use the reporter to build an accurate representation of the suites?", "createdAt": "2014-05-16T10:50:20Z", "updatedAt": "2014-12-17T08:40:46Z", "closedAt": "2014-12-16T21:27:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "linssen", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "linssen", "company": "Bromium"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:54:43Z", "contents": "We consciously moved away from this concept in 2.0 in order to reduce complexity in our implementation. We see the tree-building as a Reporter concern - see what the HtmlReporter does to give you the HTML page of results.\nIs there something specific that you are trying to accomplish?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "linssen", "authorAssociation": "NONE", "createdAt": "2014-06-23T07:36:27Z", "contents": "I'm parsing the API results with Python / Nose and using a generator to create separate tests which works perfectly.\nI'd like to be able to at least say, when a test fails, which suite it belongs to, otherwise it's a bit tricky to track down. I think perhaps a reference to the spec's parent would be great, otherwise the suites array isn't that useful as I can see.\nI'm more than happy to plug it in and send a PR so you can decide for yourself?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:39:09Z", "contents": "We consciously removed such references in 2.0. We found that having direct references back to the spec/suite a) used a lot of memory and b) exposed implementation of the guts of Jasmine.\nWhat information do you need/want in order to track down the suite? As I mentioned, the reporter is calling in a nested fashion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-16T21:27:27Z", "contents": "We haven't heard much other feedback on this from the community, so I'm going to close this.\nAs @infews mentioned, the reporter is being notified of suites and specs according to the hierarchy of your entire suite. So a specStart following a suiteStart and before a suiteDone is a child of the suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "linssen", "authorAssociation": "NONE", "createdAt": "2014-12-17T08:40:46Z", "contents": "Sounds fair. Apologies for the inactivity: it slipped off my radar.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 595, "url": "https://github.com/jasmine/jasmine/issues/595", "title": "Were are the sources for the documentation pages located?", "contents": "In the custom_matcher documentation 'actual' is misspelled as 'acutal'.\nI wanted to create a pull request for this minor improvement, but I was unable to find the documentation in the repository. So I have the following questions:\n\nWhere are the sources for the documentation pages located?", "createdAt": "2014-05-25T14:42:42Z", "updatedAt": "2014-06-01T22:54:04Z", "closedAt": "2014-06-01T22:54:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dvberkel", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dvberkel", "company": "@fifth-postulate "}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-05-25T19:19:25Z", "contents": "Nice catch. The docs repo is located here: https://github.com/jasmine/jasmine.github.io\nHopefully at some point we can get all the repos moved over to the Jasmine org so this is less confusing.\nThere's a README there on how to contribute to the docs repo, so please do open a PR there!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 596, "url": "https://github.com/jasmine/jasmine/issues/596", "title": "API reference missing?", "contents": "Hi guys,\nI have been using Jasmine for some time, but I still don't know everything about it. There are still some things that I need to check before writing my tests. While \"Introduction\" page is great for understanding all the basics it's not helping if you want to find something quickly (I know how to use Ctrl + F, but it is not the best solution). I would really appreciate API reference page so I can quickly find what I'm looking for instead of going through \"Introduction\" page or googling it.\nThanks!", "createdAt": "2014-05-26T10:45:07Z", "updatedAt": "2017-03-24T00:00:12Z", "closedAt": "2017-03-24T00:00:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "op1ekun", "authorAssociation": "NONE", "participants_count": 11, "participants_data": [{"login": "op1ekun", "company": "JPMorgan"}, {"login": "otomi", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "dwelle", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "TorstenRobitzki", "company": null}, {"login": "Digicrat", "company": null}, {"login": "maskedcoder", "company": "CTS of Illinois"}, {"login": "qx", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 12, "comments_data": [{"authorLogin": "otomi", "authorAssociation": "NONE", "createdAt": "2014-05-29T12:43:03Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:00:29Z", "contents": "We had API reference docs in the past. The consensus was that they were not that useful as most of Jasmine's external interface needed context to understand how it should be used. That and as the interface changed, we wanted to know if we were affecting projects.\nSo the benefits of the current docs are that there are examples of the entire interface and that the docs are runnable. Those pages are part of our CI build. These pages are not only higher value than our old docs, but they are dynamic enough to tell us when we've broken our community.\nWith three up-votes, there is something missing, but I'm not sure what is truly missing. Can you give us more examples of what you're looking for?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2014-06-23T10:16:08Z", "contents": "I think it's mostly that the documentation is now just a bit hard to search through.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "op1ekun", "authorAssociation": "NONE", "createdAt": "2014-06-23T10:32:49Z", "contents": "@jaapz INDEED!\nI'm looking for for a quick reference to ALL API methods etc. Right now I have to CTRL+F to find what I need.\nI'm thinking about something like:\nhttp://expressjs.com/4x/api.html#req.params\nI want to see what's available.\nThat's enough for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwelle", "authorAssociation": "NONE", "createdAt": "2014-08-25T11:22:47Z", "contents": "+1, as of now you have to skim trough code to find out the API signatures.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-03T21:21:46Z", "contents": "I think our main concern with API docs is how to keep them up-to-date, so they don't just rot. Do you have any ideas on how best to generate some kind of docs given how jasmine is set up?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TorstenRobitzki", "authorAssociation": "NONE", "createdAt": "2015-01-02T18:43:53Z", "contents": "\"Jasmine has a rich set of matchers included\". I was just searching the documentation for the right matcher for an empty array. As far as I get the current documentation there is no such function (toEqual([] would be the closest).\nI agree with op1ekun that a reference that simply states which functions are available would be very helpful.\nOne approach to keep API and documentation in synch could be to have examples for every API function and to have something that executes this examples.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Digicrat", "authorAssociation": "NONE", "createdAt": "2015-03-18T22:12:31Z", "contents": "I agree that the documentation for this project could be improved (coming from a user that's evaluating this framework for the first time).\nHave you considered using a library such as JSDuck or JSDoc?  These work similarly to JavaDoc or Doxygen in that you use special comment syntax that combines with smart code parsing to automatically generate API documentation.  Admittedly though the JS tools are not as well developed as those for other languages and may require some experimentation with explicit helper tags to get things detected the way you want.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "maskedcoder", "authorAssociation": "NONE", "createdAt": "2015-06-03T00:42:16Z", "contents": "+1\nIt's very tedious to search through or skim a bunch of code. The main thing missing is a list of available functions, as mentioned by others. Even if it only linked to current examples, it would be a huge improvement. The current documentation is almost useless if I want to quickly find a function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "qx", "authorAssociation": "NONE", "createdAt": "2016-05-16T08:40:59Z", "contents": "+1\nTerrible experience!\neg. toExist method is not list anywhere,except stackoverflow! pleas show us api doc!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "op1ekun", "authorAssociation": "NONE", "createdAt": "2016-05-16T08:56:54Z", "contents": "@qx It's sad really...\nI've switched to mocha recently mocha.\nMuch easier to get you head around: https://mochajs.org/#assertions", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-15T00:50:44Z", "contents": "@qx I agree that API-style reference documentation would be useful for Jasmine, especially for matchers. It is work noting, however, that toExist is not a core jasmine matcher: https://github.com/jasmine/jasmine/tree/master/src/core/matchers. You must be getting that matcher from another library.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["docs"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 597, "url": "https://github.com/jasmine/jasmine/issues/597", "title": "Jasmine's CSS affecting body tag", "contents": "in jasmine's CSS file there's some code which affects the body, this interferes with the style of the page your testing. Jasmines CSS should only effect Jasmines elements i think.", "createdAt": "2014-05-30T04:06:53Z", "updatedAt": "2014-06-03T06:07:10Z", "closedAt": "2014-06-03T06:07:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lee101", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "lee101", "company": "Weta Digital, @BitBanknz "}], "comments_count": 1, "comments_data": [{"authorLogin": "lee101", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-03T06:07:01Z", "contents": "#600", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 598, "url": "https://github.com/jasmine/jasmine/issues/598", "title": ".toEqual fails for objects with the same members but of different types", "contents": "it(\"should tell me what's the difference between these 2\", function () {\n  function A() { this.a = 10; }\n  function B() { this.a = 10; }\n  expect(new A()).toEqual(new B());\n});\n\nfails, but it does not say why - it only states: Expected { a : 10 } to equal { a : 10 }. which is instead true.", "createdAt": "2014-05-31T20:33:53Z", "updatedAt": "2019-03-04T09:51:22Z", "closedAt": "2014-12-16T20:57:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adrianton3", "authorAssociation": "NONE", "participants_count": 11, "participants_data": [{"login": "adrianton3", "company": "@Mojang "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "peterflynn", "company": "Adobe"}, {"login": "aaronabramov", "company": "Facebook"}, {"login": "glebec", "company": "@FullstackAcademy"}, {"login": "xfg", "company": null}, {"login": "dinvlad", "company": "@broadinstitute"}, {"login": "MattiLehtinen", "company": null}, {"login": "jonyeezs", "company": null}, {"login": "johachi", "company": null}], "comments_count": 17, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-02T17:00:39Z", "contents": "Which version of Jasmine are you running?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adrianton3", "authorAssociation": "NONE", "createdAt": "2014-06-03T06:23:28Z", "contents": "2.0.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-04T00:27:59Z", "contents": "Jasmines equality does take into account the constructor used to create the object, which seems like the right thing to do, but the pretty printer ignores the constructor when printing an object. Would having the pretty printer print object.constructor.name help? This would probably mean that your error reads more like:\nExpected A({ a : 10 }) to equal B({ a : 10 })", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adrianton3", "authorAssociation": "NONE", "createdAt": "2014-08-04T18:41:56Z", "contents": "It would help to at least tell that the constructors are different or to not look like it's contradicting itself.\nThe name can still lead to bizarre reports if you're using anonymous constructors (for whatever reason) or worse: if you're using different constructors but with the same name. Also, the name property is not yet standardized.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-22T20:33:19Z", "contents": "I made a story in our tracker to fix the failure message under this circumstance (https://www.pivotaltracker.com/story/show/81228592), but we'd be happy to review a pull request for this as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "peterflynn", "authorAssociation": "NONE", "createdAt": "2016-02-18T05:58:39Z", "contents": "Is there any way to compare the properties of an object and ignore differences in constructor function?  I.e. something like deepEqual() in Chai or _.isEqual() in Underscore/Lodash, which is how I assumed toEqual() would work from reading its docs...\nWhen using JS-style \"duck typing\" you often don't care about the specific constructor, just which properties the object has after it's created.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T19:10:10Z", "contents": "Jasmine does not have a built-in way to do a full deep equality that ignores constructors. This appears to be the same way that Underscore behaves (http://underscorejs.org/docs/underscore.html#section-124).\nYou could implement a custom equality tester that did this, but it would probably be fairly complicated. Alternatively, you could look at objectContaining which does ignore constructors, but will also allow properties.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aaronabramov", "authorAssociation": "NONE", "createdAt": "2016-03-16T18:26:33Z", "contents": "@slackersoft can adding an expect(obj).toDeepEqual(expected) matcher to Jasmine be considered at all?\nseems like a common use case for expect(someFunction()).toDeepEqual({a: b}) kind of things, where constructor of the returned object does not matter", "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T17:34:08Z", "contents": "I agree that it would be useful to have some way to deeply compare two objects that doesn't check their constructors (or maybe not any constructors). I'm not sure the best way to get that into Jasmine right now or what exactly to call it.\nBecause the existing toEqual does a deep compare, I think another matcher called toDeepEqual would be confusing. It would also probably be nice to be able to use some of the rest of the deep compare code that is already in effect there.\nI'm open to other ideas/names/PRs for something like this.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "glebec", "authorAssociation": "NONE", "createdAt": "2016-08-15T17:40:48Z", "contents": "toMostlyEqual? toResemble?\nOnly half-joking.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xfg", "authorAssociation": "NONE", "createdAt": "2017-02-25T21:18:15Z", "contents": "has this feature been created?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dinvlad", "authorAssociation": "NONE", "createdAt": "2017-08-18T21:03:59Z", "contents": "expect(Object.assign({}, objOfTypeA)).toEqual(\n  jasmine.objectContaining(Object.assign({}, objOfTypeB))\n);\nUgly, but it works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-22T00:09:05Z", "contents": "@dinvlad objectContaining doesn't look at constructors when comparing, so the Object.assign calls shouldn't do anything. I think the initial request was to do an exact property match which would look more like:\nexpect(Object.assign({}, objOfTypeA)).toEqual(Object.assign({}, objOfTypeB));\nWhich makes me think what we might want is something like a jasmine.objectWithProperties asymmetric matcher which explicitly ignores constructors.", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "dinvlad", "authorAssociation": "NONE", "createdAt": "2017-08-22T01:06:51Z", "contents": "@slackersoft I used objectContaining in TypeScript, which complains about comparing objects of incompatible types unless I do Object.assign (and simply casting as any doesn't work). Agreed that we need jasmine.objectWithProperties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MattiLehtinen", "authorAssociation": "NONE", "createdAt": "2017-10-29T18:40:33Z", "contents": "At least in TypeScript spread operator can be also used to instead of Object.assign for cleaner syntax:\nexpect({...objOfTypeA}).toEqual({...objOfTypeB});", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "jonyeezs", "authorAssociation": "NONE", "createdAt": "2018-02-01T13:23:03Z", "contents": "@MattiLehtinen @dinvlad I'm experiencing the exact same thing. Any idea why is it the case TS doesn't seem to take the instance as a POJO?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johachi", "authorAssociation": "NONE", "createdAt": "2019-03-04T09:51:22Z", "contents": "@slackersoft, @dinvlad\nThis worked perfectly, thank you!\nexpect(Object.assign({}, objOfTypeA)).toEqual(Object.assign({}, objOfTypeB));", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 599, "url": "https://github.com/jasmine/jasmine/issues/599", "title": "License of the logo", "contents": "Which license is the logo of this project applied to?\nI'd like to use it for the documentation of the Node module which supports Jasmine.", "createdAt": "2014-06-02T06:21:08Z", "updatedAt": "2014-06-02T17:56:12Z", "closedAt": "2014-06-02T16:37:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shinnn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "shinnn", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-02T16:37:56Z", "contents": "We want the logo only to be used for officially supported projects. Thanks for this point - I'll call it out on our docs.\nFWIW. We do have a couple of Jasmine NPMs that are in pre-pre-release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shinnn", "authorAssociation": "NONE", "createdAt": "2014-06-02T16:44:37Z", "contents": "I see.\nThanks for answering my question.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 601, "url": "https://github.com/jasmine/jasmine/issues/601", "title": "Feature request: Add ability to run just one test by prefixing it with a letter", "contents": "In a similar way to how music software has both a mute and a solo button for each track of a recording, it'd be nice if Jasmine had a 'solo' equivalent to each of its xit and xdescribe methods. So e.g. a single (or multiple) calls of zit() will mean all calls of it() are ignored and only zit() calls will run", "createdAt": "2014-06-03T09:47:33Z", "updatedAt": "2014-09-25T19:52:47Z", "closedAt": "2014-09-25T19:52:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wheresrhys", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "wheresrhys", "company": "Squirrel Commando"}, {"login": "driv", "company": null}, {"login": "schickling", "company": "@prisma "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "driv", "authorAssociation": "NONE", "createdAt": "2014-06-04T04:41:20Z", "contents": "Isn't this already working with iit() and ddescribe()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wheresrhys", "authorAssociation": "NONE", "createdAt": "2014-06-04T07:26:46Z", "contents": "If it is that's brilliant, but it needs documenting", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "schickling", "authorAssociation": "NONE", "createdAt": "2014-06-18T09:31:56Z", "contents": "@driv doesn't work for me in version 2. Worked in earlier versions though...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T19:52:47Z", "contents": "We've merged an implementation of fit and fdescribe in this commit ba0982d.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate", "feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 602, "url": "https://github.com/jasmine/jasmine/issues/602", "title": "Improve how matchers/API deal with a timeout aka don't blow up.", "contents": "When executing matchers after a timeout you get this nasty and misleading error:\n\"TypeError: Cannot read property 'expect' of null\n    at Env.expect (http://cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/jasmine.js:698:25)\n    at jasmineInterface.expect (http://cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/boot.js:61:18)\n    at StreamClient.<anonymous> (http://localhost:8080/js/StreamClientTest.js:220:36)\n    at ...\n\nI just spent a long time reorganizing an async-heavy test in dozens of various ways, because I thought that the flow of my test triggered a bug in Jasmine or that I misunderstood the API. After a while I realized that it was really a too conservative timeout - sigh...\nYes the UI is clear about the timeout, but while developing async tests I hit the timeout so often that I tend to ignore that and look in the console for a trace of what failed.\nMay I suggest that in this situation Jasmine ignores any matcher calls instead of blowing up?", "createdAt": "2014-06-04T04:28:49Z", "updatedAt": "2014-09-11T20:02:36Z", "closedAt": "2014-06-07T06:51:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jayv", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jayv", "company": "Apple"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-07T06:53:48Z", "contents": "Committed a fix so that there is now a much more specific error thrown when we don't have a currentSpec but an expect was used. Hopefully this will assist in debug, but we can't really have it be a no-operation since if someone puts an expect at the very top level of a file (outside of a describe or it), then having it as a no-op would leave the user with no debugging information.\nDoes this fix work for you? If not, please do reopen the issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 603, "url": "https://github.com/jasmine/jasmine/issues/603", "title": "Downloading the standalone distribution is pretty unintuitive", "contents": "I've only found two ways to do it:\n\ngit clone the jasmine repo, take the zip file out\nUse the 'Downloads' button to download the jasmine repo, unzip, take the zip file out.\n\nI'd honestly expect something less onerous, like ... Click and download.", "createdAt": "2014-06-05T21:11:20Z", "updatedAt": "2015-05-12T13:46:42Z", "closedAt": "2014-06-06T13:55:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Trevoke", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Trevoke", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "Protoneer", "company": "Protoneer"}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-05T22:41:57Z", "contents": "visit https://github.com/pivotal/jasmine/tree/master/dist, click on the distribution you want, click the RAW button top right\n\nThat is the easiest of the three and easiest to maintain since GitHub no longer hosts downloads.\nIs this better enough?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Trevoke", "authorAssociation": "NONE", "createdAt": "2014-06-06T13:55:34Z", "contents": "First, I apologize for my behavior yesterday. It wasn't as mature as it should have been.\nSecond, yes, that's much easier, though still unintuitive.\nThird, having attempted to offer a pull request for the documentation and realized there was logic I hadn't considered, I'd like to talk about the documentation instead. I'm going to close this issue and open one on the documentation repository. If that's the wrong move... Let me know and I'll fix it.\nThank you for your time and your patience.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Protoneer", "authorAssociation": "NONE", "createdAt": "2015-05-12T02:06:56Z", "contents": "@infews the link you provided to the distribution zip is not working anymore(404). Where else can I find it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Protoneer", "authorAssociation": "NONE", "createdAt": "2015-05-12T02:08:57Z", "contents": "Never mind I, found it... https://github.com/jasmine/jasmine/releases  (A big download button would make it more obvious though :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Trevoke", "authorAssociation": "NONE", "createdAt": "2015-05-12T13:46:42Z", "contents": "This was originally why I opened the issue: requiring knowledge of Github to download Jasmine is poor UX.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 604, "url": "https://github.com/jasmine/jasmine/issues/604", "title": "jasmine's equals doesn't interact well with angular.copy", "contents": "I could go either way on this issue because using custom equals is an easy workaround. However, I did notice that after an upgrade to jasmine 2.0\nexpect(a).toEqual(angular.copy(a))\nno longer passes.", "createdAt": "2014-06-05T23:34:04Z", "updatedAt": "2014-06-23T04:08:07Z", "closedAt": "2014-06-23T04:08:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bradyoo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bradyoo", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:07:59Z", "contents": "Yeah.  I'm not sure how angular.copy works and I'm pretty sure that we don't want to try to keep up with this type of issue with app frameworks. Having a custom equality matcher - even one that you promote and keep up-to-date with Angular -  seems a better route.\nI'm going to close. If you find a way that makes sense in Jasmine core, we're happy to look at a pull request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 605, "url": "https://github.com/jasmine/jasmine/issues/605", "title": "Reporter listens for `onRaiseExceptionsClick` on a non-jasmine element", "contents": "Hi, maybe this is somewhere duplicated, I've tried to search but found nothing relevant.\nI discovered an tricky issue - I composed a test, that contains jasmine boot and a custom container to which i append elements and then I write test's for their presence and functionlity.\nObsuce is, that jasmine-boot appends a click listener to the first input I paste to my $('#custom-test-container') element.\nhere is an output from chrome -> devel tools -> elements -> event listeners -> click\nhandler: function () { queryString.setParam(\"catch\", !env.catchingExceptions()); }\nisAttribute: true\nlineNumber: 126\nlistenerBody: \"function () { queryString.setParam(\"catch\", !env.catchingExceptions()); }\"\nnode: input.seq-loopsection-input\nsourceName: \"http://localhost:7357/testem/jasmine2-boot.js\"\ntype: \"click\"\nuseCapture: false\nI also need to mention, that I've been using it with testem, so I don't know if this could be caused by testem, but more important is the logic that appends the _onRaiseExceptionsClick_ handler to DOM.", "createdAt": "2014-06-06T08:10:16Z", "updatedAt": "2014-06-28T04:54:11Z", "closedAt": "2014-06-07T19:18:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vire", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vire", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-07T05:24:49Z", "contents": "The HTML reporter was finding all inputs within the '.html-reporter' class, which is probably why it bound the event handler on your first input. I just pushed a change to find the input through the 'raise-exceptions' id instead. Does this help?\nFor some added context, the hope here, however, is that any content that needs to be added to the DOM for testing, etc, can be done outside of the '.html-reporter' div and instead in a separate div so that there's significantly less likely chance of collision.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vire", "authorAssociation": "NONE", "createdAt": "2014-06-07T19:18:57Z", "contents": "@sheelc Hi, thx for the quick fix!problem solved, I'm closing the issue.\nMy issue was caused by the fact, that i was adding my test container in the test itself, so it was appended before the .html-reporter and it was the first input in DOM : )\nbut I've got it now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-07T19:48:21Z", "contents": "No problem! The original code should have only been finding the first input inside of .html-reporter and not the first input in DOM, so it's still a little unexplained why it was binding to your input if it was outside of .html-reporter", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 606, "url": "https://github.com/jasmine/jasmine/issues/606", "title": "toEqual behave differently with DOM elements in PhantomJS, Chrome and Firefox", "contents": "There is a simple spec to reproduce the bug.\ndescribe(\"Compare of DOM elements\", function() {\n    var d1 = document.createElement(\"div\");\n    d1.appendChild(document.createTextNode(1));\n    var d2 = document.createElement(\"div\");\n    d2.appendChild(document.createTextNode(2));\n\n    var d3 = document.createElement(\"div\");\n    var d4 = document.createElement(\"div\");\n\n    it(\"should pass in Chrome and PhantomJS, fail in Firefox\", function() {\n        expect(d1).not.toEqual(d2);\n        expect([d1, d2]).not.toEqual([d2, d1]);\n        expect([d1, d2]).toEqual([d1, d2]);\n    });\n    it(\"should pass in PhantomJS, fail in Chrome and Firefox\", function() {\n        expect(d3).not.toEqual(d4);\n        expect([d3, d4]).not.toEqual([d4, d3]);\n        expect([d3, d4]).toEqual([d3, d4]);\n    });\n});\n\nI've tested this in PhantomJS 1.9, Firefox 29, Chrome 35 under Windows 7 x64. I use Jasmine from grunt-contrib-jasmine 0.6.5", "createdAt": "2014-06-06T09:28:08Z", "updatedAt": "2014-12-16T19:26:58Z", "closedAt": "2014-12-16T19:26:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexeibs", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "alexeibs", "company": "Yandex"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:05:38Z", "contents": "I can't say I'm surprised. Equality of DOM nodes cross browser is a very hard problem to stay on top of.\nI'm not trying to provide a cop-out type of answer, but have you tried testing at a different level of granularity? That might result in less brittle tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexeibs", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T08:41:30Z", "contents": "Actually I dont need to find equality of DOM nodes. toEqual is convenient to compare arrays. I've written a simple helper that covers my needs:\nfunction expectObjects(a, b) {\n    expect(a.length).toEqual(b.length);\n    for (var i = 0, imax = a.length; i < imax; ++i)\n        expect(a[i]).toBe(b[i]);\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-18T20:11:46Z", "contents": "I just ran your example in chrome, firefox, and phantom and got passes in all three browsers with jasmine 2.0.1. It seems like maybe this is fixed now?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexeibs", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-19T07:49:40Z", "contents": "I've run my example again with jasmine 2.0.1 but I still see the same behaviour as in my first comment. Browsers: Chrome 36, Firefox 31, PhantomJS 1.9.7, all under Windows 7 x64. My package.json:\n{\n  \"name\": \"jsProjectStub\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"0.4.5\",\n    \"grunt-contrib-jshint\": \"0.10.0\",\n    \"grunt-contrib-csslint\": \"0.2.0\",\n    \"grunt-contrib-jasmine\": \"0.7.0\",\n    \"jshint-path-reporter\": \"0.1.3\"\n  }\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-22T19:54:07Z", "contents": "You're right, it still breaks. I just noticed I had jasmine-jquery in my test project, and that adds a custom equality tester to match dom nodes better by using jquerys is function.\nI'd be happy to look at a pull request that implemented something like that but didn't rely on jquery.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-16T19:26:58Z", "contents": "#657 has been merged, closing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 607, "url": "https://github.com/jasmine/jasmine/issues/607", "title": "not abel to match two string path", "contents": "Hi,\nI was not able to compare two string given below.\nvar expPath =\"C:\\Program Files (x86)\\Application Designer\\dev\";\nvar actualPath =\"C:\\Program Files (x86)\\Application Designer\\dev\";\nexpect(expPath).toMatch(actualPath)\nthe above test case if failing.\nRegards\nAshish.", "createdAt": "2014-06-06T11:55:35Z", "updatedAt": "2014-06-09T11:46:43Z", "closedAt": "2014-06-09T11:46:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "2007ay", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "2007ay", "company": "Isentia"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 2, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-07T05:10:09Z", "contents": "toMatch is intended to match with regular expressions. I think you might be looking for 'toEqual' in this case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "2007ay", "authorAssociation": "NONE", "createdAt": "2014-06-09T11:46:41Z", "contents": "HI sheelc,\nThanks for quick response and solution.\nRegards\nAshish.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 608, "url": "https://github.com/jasmine/jasmine/issues/608", "title": "`npm install jasmine-core` installs different contents for same version", "contents": "Installing jasmine-core through npm on a Mac OSX and Ubuntu 13.10 (on a virtual machine) yields different contents for version 2.0.0.\nThe Mac OSX version seems to have the more recent contents including line https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/jasmine.js#L1206 whereas the Ubuntu installation does not.\nAs a result the code I am looking at fails on Ubuntu but works on Mac OSX.\nI am trying to debug this issue further, but so far am stuck with npm repeatedly installing the same specific content, even after clearing the caches.", "createdAt": "2014-06-12T21:38:57Z", "updatedAt": "2014-09-03T20:58:43Z", "closedAt": "2014-09-03T20:58:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cburgmer", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "cburgmer", "company": "ThoughtWorks"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "briandipalma", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:01:53Z", "contents": "Thanks for finding this. We'll take a look and see what's going on. Very odd.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:03:27Z", "contents": "I've created a bug in our Tracker backlog.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "briandipalma", "authorAssociation": "NONE", "createdAt": "2014-07-05T07:36:26Z", "contents": "@cburgmer There doesn't seem to be an easy way to use jasmine from node anyway. I'm a bit shocked to find that installing it via npm doesn't create a bin entry in my node_modules so that I can't just do npm t when I add jasmine to the test scripts key.\nIs out of the box support for node really that weak? mocha seem to have done the right thing...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-07-14T19:53:22Z", "contents": "I am unsure now whether this is connected to jasmine. One goal of raising this ticket here was to find out whether there was a pre-release upload to npm.\nRight now I believe that npm might have used a locally cached version of an older git checkout installed over npm using the git URL. I sadly haven't sat down to further debug this behaviour, especially as I've nuked the cache on my OSX system believing that the Ubuntu installation was at fault (and so trying to maintain the version for debugging purposes there).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T20:12:18Z", "contents": "I'm not sure how we would go about trying to reproduce this. Are you still seeing the issue? If not, can we close this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-09-03T20:58:43Z", "contents": "This is probably much more an issue with npm.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 609, "url": "https://github.com/jasmine/jasmine/issues/609", "title": "How can I get the specified tests?", "contents": "Say I have two spec suites: OneSpec.js and TwoSpec.js, and in the html I added:\n<script type=\"text/javascript\" src=\"js/spec/OneSpec.js\"></script>\n<script type=\"text/javascript\" src=\"js/spec/TwoSpec.js\"></script>\nI know that jasmine.getEnv() can get all tests of OneSpec.js and TwoSpec.js.\nThe problem is sometimes I just want to get tests of OneSpec.js or TwoSpec.js.\nIs that possible?", "createdAt": "2014-06-13T09:18:49Z", "updatedAt": "2014-06-18T07:55:02Z", "closedAt": "2014-06-18T07:55:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AnnieCyl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "AnnieCyl", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-13T15:22:38Z", "contents": "What are you trying to accomplish? What does it mean to \"get all of the tests\" in a file?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnnieCyl", "authorAssociation": "NONE", "createdAt": "2014-06-16T01:53:01Z", "contents": "@infews\nI mean I have several specs linked in the index.html, like OneSpec.js, TwoSpec.js. I also linked jasmine.js, jasmine-html.js, boot.js, jasmine.css which I copied from jasmine-standalone-2.0.0.\nAs we know, once I open the index.html, it will run all these specs automatically.\nBut I don't want to run these specs once, and I don't want to separate these specs into different htmls.\nI hope I can accomplish this:\nWhen I press run OneSpec button in the index.html, I can do something like this:\n\nvar oneEnv = jasmine.getEnv('OneSpec'); \noneEnv.execute();\n\nand when  I press run TwoSpec button in the index.html, I can do something like this:\n\nvar twoEnv = jasmine.getEnv('twoSpec'); \ntwoEnv.execute();\n\nIs that possible? Or did I misunderstand about jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-16T05:10:06Z", "contents": "Jasmine doesn't work this way. The env is just a wrapper to trigger execution and it's for all files loaded into it. If you're testing in browser this means all spec files loaded on the page.\nYou can click on different specs or suites in the HTML runner to run subsets of the env. This is fairly close to what you're asking for. Does this make sense?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnnieCyl", "authorAssociation": "NONE", "createdAt": "2014-06-18T07:55:02Z", "contents": "Ok, I've done it as you suggested.Thanks for your help.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 610, "url": "https://github.com/jasmine/jasmine/issues/610", "title": "provide a way to test custom matchers when they don't pass", "contents": "On the http://jasmine.github.io/2.0/custom_matcher.html page there are 3 tests that show how to test custom matcher but they only show how to test it passes.\nIs there a way to test how it fails? I have some matchers that throw different messages when they fail and I'd like to test them.\nWhat I think I can do is to test the compare function alone and then only test the if the matcher passes as shown on http://jasmine.github.io/2.0/custom_matcher.html\nThis is not what I find the most accurate though.\nThere should be a way to test custom matchers provided or if there's one already - it should be shown how to test matcher message when it fails.", "createdAt": "2014-06-13T14:48:45Z", "updatedAt": "2014-06-13T16:45:12Z", "closedAt": "2014-06-13T15:26:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jrencz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jrencz", "company": "Wonga"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-13T15:26:44Z", "contents": "The structure of matchers is such that you can test the compare function in isolation. We also have specs that test that added matchers - objects with compare functions - act correctly. And integration specs that stitch it all together.\nThe tl;dr here is that unit testing a compare function is the right way to test if your matcher is passing/failing.\nSince this is less an issue with Jasmine and more with How-To, please take this discussion to the Jasmine mailing list (jasmine-js@googlegroups.com). The community may be able to help you further.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jrencz", "authorAssociation": "NONE", "createdAt": "2014-06-13T16:45:12Z", "contents": "thank you for your reply", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 611, "url": "https://github.com/jasmine/jasmine/issues/611", "title": "Get currently executed test name in beforeEach", "contents": "TLDR; Is there a way to get the currently executed test case (its description derived from describe / it) in a beforeEach block?\nWhat for?\nAssuming I have a test runner that performs some sort of visual job on the screen (e.g. drawing SVG elements).\nI provide each test case with a container to draw on and want the result to be inspectable by a user. In addition, I would like to add a caption to each of the tests, so that the user can easier keep track of which drawing result belongs to which test execution.", "createdAt": "2014-06-16T13:16:28Z", "updatedAt": "2019-04-10T11:24:07Z", "closedAt": "2014-06-18T05:44:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nikku", "authorAssociation": "NONE", "participants_count": 27, "participants_data": [{"login": "nikku", "company": null}, {"login": "stoeffel", "company": "@NoRedInk "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "EvHaus", "company": null}, {"login": "EvAlex", "company": "Qoollo"}, {"login": "juliemr", "company": "Google"}, {"login": "budnix", "company": "Handsoncode"}, {"login": "Kegsay", "company": null}, {"login": "robertjsaulnier", "company": null}, {"login": "ryneeverett", "company": null}, {"login": "benlesh", "company": "Google"}, {"login": "christian-bromann", "company": "Sauce Labs Inc."}, {"login": "lxblvs", "company": null}, {"login": "ggranum", "company": "Back in US and now looking"}, {"login": "gregjacobs", "company": "Goldman Sachs"}, {"login": "leyendecker", "company": "Philips Healthcare"}, {"login": "maddes", "company": "ITX"}, {"login": "msaladin", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "cmstead", "company": null}, {"login": "tobega", "company": null}, {"login": "Quramy", "company": null}, {"login": "monkpit", "company": null}, {"login": "Pyrolistical", "company": null}, {"login": "harrygreen", "company": null}, {"login": "Abhilash04", "company": null}, {"login": "Jezorko", "company": "AND Digital"}], "comments_count": 37, "comments_data": [{"authorLogin": "stoeffel", "authorAssociation": "NONE", "createdAt": "2014-06-17T16:43:16Z", "contents": "You can try this:\ndescribe('TestCase', function() {\n    var mySpec = it('should return the spec', function() {\n        console.log(mySpec);\n        expect(mySpec.getFullName()).toEqual('TestCase should return the spec');\n    });\n});", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nikku", "authorAssociation": "NONE", "createdAt": "2014-06-17T16:58:41Z", "contents": "Nice to see that there is a way to access the spec created by it().\nThat does not quite satisfy my use case thought.\nIn fact, I'd like to access my spec in a beforeEach block like this:\ndescribe('specs', function() {\n\n  beforeEach(function() {\n\n    // get current spec\n    // append <h1>{{ currentSpec.getFullName() }}</h1> before spec runs\n  });\n\n  it('should append elements to body', function() { /* */ });\n\n  it('should append some other elements to body', function() { /* */ });\n});\nAny ideas?", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "stoeffel", "authorAssociation": "NONE", "createdAt": "2014-06-17T17:08:12Z", "contents": "I don't think that there is a way to get the current spec in the beforeEach callback.\nSorry.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-17T17:19:26Z", "contents": "It would be good testing practice to inject a DOM selector into your drawing function. I could imagine a test helper that makes unique DOM ids and you can call that helper in each spec. You shouldn't need to get ahold of the spec to do this.\nAs for captioning, you could build a reporter - and add it in boot.js that finds the current spec DOM id an captions it after the fact with the spec name. Look at the HtmlReporter and see how it builds the spec name for the links in the runner.\nI think this helper/reporter combo could be a generally useful add-on. Good idea.\nps: there may be more suggestions on the mailing list: jasmine-js@googlegroups.com", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikku", "authorAssociation": "NONE", "createdAt": "2014-06-17T21:45:09Z", "contents": "Thanks for the suggestions @infews.\nAs it turns out a custom reporter can easily be abused as a test environment \ud83d\ude03.\nvar JsApiReporter = jasmine.JsApiReporter;\n\nfunction Env(options) {\n  JsApiReporter.call(this, options);\n\n  this.specStarted = function(result) {\n    this.currentSpec = result;\n\n    var label = document.createElement('div');\n    label.innerHTML = result.fullName;\n\n    document.body.appendChild(label);\n  };\n\n  this.specDone = function(result) {\n    this.currentSpec = null;\n  };\n}\nNeed to register it with jasmine, too:\nvar environment = new Env({\n  timer: new jasmine.Timer()\n});\njasmine.getEnv().addReporter(environment);\nThe reporter will be notified by Jasmine and print a caption before each executed test case.\nIn my tests I can now access the current environment via environment.currentSpec. I could also provide a HTML element to draw into from inside my tests.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-17T23:28:16Z", "contents": "It looks like you're using Jasmine 1.3? Is that right? With 2.0 the interface has changed a little, making currentSpec harder to get (on purpose). So caveat emptor.\nCan we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikku", "authorAssociation": "NONE", "createdAt": "2014-06-18T05:44:12Z", "contents": "The above example is running fine against Jasmine 2.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nikku", "authorAssociation": "NONE", "createdAt": "2014-06-18T09:37:07Z", "contents": "Just in case anyone is interested: I created the library jasmine-test-container-support that provides test containers + captioning for Jasmine 2.0.", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "EvHaus", "authorAssociation": "NONE", "createdAt": "2014-08-22T17:00:58Z", "contents": "I find I'm struggling without this feature as well. My use case for needing the spec name is a bit different than @nikku's. In my case, I have about 100 it() tests which all share the same 250 lines of code. So the beforeEach() statement makes total sense. However, I have 2 tests (in those 100) where I need an additional extra variable configured in my 250 lines of beforeEach code.\nSure. I can just have those 2 tests duplicate the 250 lines of code and not use the beforeEach(), but that's a lot of code duplication, and it also requires me to move them out into a separate describe() block -- putting those tests out of context.\nIt would be fantastic if each it() test could pass a configuration variable into its beforeEach() call somehow.\nAny suggestions?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EvAlex", "authorAssociation": "NONE", "createdAt": "2014-12-02T11:56:34Z", "contents": "\ud83d\udc4d such failure not to have this feature", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-02-06T23:02:18Z", "contents": "+1 It's useful for logging and debugging to be able to get hold of the current full name somehow - it would be great to see this feature come back.", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "budnix", "authorAssociation": "NONE", "createdAt": "2015-04-15T09:17:23Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Kegsay", "authorAssociation": "NONE", "createdAt": "2015-04-16T08:30:12Z", "contents": "+1 for @juliemr's use case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "robertjsaulnier", "authorAssociation": "NONE", "createdAt": "2015-04-29T19:26:20Z", "contents": "+1@juliemr's use case is reason enough to restore the feature", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ryneeverett", "authorAssociation": "NONE", "createdAt": "2015-04-30T02:26:13Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benlesh", "authorAssociation": "NONE", "createdAt": "2015-10-09T17:42:07Z", "contents": "+1 I wanted this just so I could see which of my 700 tests was the slow one... there's probably some other idiomatic way to do that, but it would have been nice to just add timings to beforeEach and afterEach and console.log out the slow ones...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "christian-bromann", "authorAssociation": "NONE", "createdAt": "2015-11-28T15:31:39Z", "contents": "I got my adapter working by doing this:\n        let beforeAllMock = jasmine.Suite.prototype.beforeAll\n        jasmine.Suite.prototype.beforeAll = function (...args) {\n            self.lastSpec = this.result\n            beforeAllMock.apply(this, args)\n        }\n        let executeMock = jasmine.Spec.prototype.execute\n        jasmine.Spec.prototype.execute = function (...args) {\n            self.lastTest = this.result\n            executeMock.apply(this, args)\n        }", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "lxblvs", "authorAssociation": "NONE", "createdAt": "2015-12-03T09:32:23Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ggranum", "authorAssociation": "NONE", "createdAt": "2016-02-10T13:34:38Z", "contents": "+1. A link to the justification for making 'spec' harder to get to would be nice. I can see wanting to prevent adding tests while executing tests and all that... but seriously: I just want the name of the test that's running. A stats object would be spiffy too. But making 'spec' harder to get without replacing it with something seems rather cruel.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "gregjacobs", "authorAssociation": "NONE", "createdAt": "2016-02-23T17:40:08Z", "contents": "Definitely a +1 on this.\nI have a situation where I have a test that passes in isolation but is failing when the entire suite is executed. I suspect this is an issue with ng-mock and want to add logging in a bunch of places based on the test name, but I'm currently unable to do this.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "leyendecker", "authorAssociation": "NONE", "createdAt": "2016-04-24T22:30:28Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maddes", "authorAssociation": "NONE", "createdAt": "2016-04-27T22:02:44Z", "contents": "+1\nIt would be also helpful to debug the awful 'some test made a full page refresh!'\u2026", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "msaladin", "authorAssociation": "NONE", "createdAt": "2016-10-06T06:51:47Z", "contents": "+1\nIn my Protractor tests, I want to create screenshots of the SUT to the file-system where it would be nice when the folder into which the screenshots are stored contain the current test name.", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Kegsay", "authorAssociation": "NONE", "createdAt": "2016-12-21T11:52:42Z", "contents": "So you can do this by abusing reporters as @nikku suggests, but it needn't be as complex as that. The simplest solution I could come up with was (tested on 2.5.2):\njasmine.getEnv().addReporter({\n    specStarted: function(result) {\n        console.log(result.fullName);\n    }\n});\nYou only need to add the reporter once and it will work for all test suites/cases in all files.", "reactions_count": 26, "reactions_data": ["LAUGH", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "LAUGH", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "LAUGH", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T19:23:27Z", "contents": "Most of the reasons I'm seeing in this thread for wanting to get the spec name are probably best solved with a custom reporter that can do timing, or a different style of report, or screenshots based on pass/fail etc.\nIn general, we don't think you should have beforeEach or other setup, that relies on which test is being run. Instead, you should reset back to exactly the same state between the tests with the same setup.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ggranum", "authorAssociation": "NONE", "createdAt": "2017-02-10T10:40:09Z", "contents": "@slackersoft : I still don't see the reason to be so concerned with hiding this information and I really would like to understand the point of doing so.\nRegardless. One of my use cases is simple. I want to use the name of the test in data that gets written out as part of the test, so that if something fails and the data isn't flushed correctly I know which test created what. Is it super hard to write the name of the test out twice? No. Does it feel really stupid? Yes, yes it does.\nI just want to use the name of the test within the body of the test. That may include using it in beforeEach to do some prep work for the subset of tests within the set. Obviously others agree. I doubt anyone considers knowing the currently running test name a big deal. I think you mostly have power users hitting this ticket, so, at a guess, not a huge number really want to do conditional branching based on test name. Sure, some do. Maybe for good reason. Probably for bad ones. But we can't save everybody from themselves.\nSure, fine, there are other priorities. But if this isn't happening because of some desire to babysit the people who will abuse the information... it isn't going to work. Those who would abuse it are just going to abuse something even more complex, making it even harder to understand when someone has to un-cruft their workaround.  Meanwhile, my goals are slightly more difficult to achieve. And that's really quite annoying.", "reactions_count": 16, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Kegsay", "authorAssociation": "NONE", "createdAt": "2017-02-10T11:40:49Z", "contents": "@slackersoft : We've actually ended up moving away from Jasmine to Mocha (and related libs) much to my dismay. We wanted --stop-on-failure to tell us which test failed, and the fact that we had to jump through these hoops to log the currently executing test rather than the unhelpful coloured . annoyed some of my team members enough to move over. I couldn't really give a coherent defensive argument for Jasmine here other than \"the devs say X\". We weren't being naughty and changing how beforeEach ran depending on the test, we just wanted some read-only information about the test.\nI love the \"batteries-included\" nature of Jasmine over the other test frameworks, but there's often so little to differentiate picking one framework over the other that the small niggles like this can make all the difference. Sadly for us, this was one annoyance too many.", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "cmstead", "authorAssociation": "NONE", "createdAt": "2017-05-10T00:24:20Z", "contents": "I'm also interested in getting the name of the current running test for this specific reason:\nI am using Approvals JS and trying to capture the test name so the approval can be written to a file.  This is not for every test, but only for tests which use this external library.  Moreover, no reporting should occur if the test passes normally, but if something fails I want to ensure approvals actually reports correctly and interacts with the correct file.  These requirements are actually not mine, but rather they are the requirement of the external dependency, which no longer works as designed and has ceased support for Jasmine and only supports Mocha. Currently this is actually causing my team a significant amount of pain since they are testing Angular code which recommends Jasmine, but they have to duplicate magic strings all over the place rather than naming the tests and relying on an API which provides the name to external libraries.\nFor now I am going to have to set up a reporter that monkey patches the Jasmine library, which is tremendously disappointing.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "tobega", "authorAssociation": "NONE", "createdAt": "2017-07-21T09:41:14Z", "contents": "Seriously annoying issue. How hard could it be to e.g. pass this info in the this object, for example?", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Quramy", "authorAssociation": "NONE", "createdAt": "2017-10-12T14:41:53Z", "contents": "I've created a patch library to do this. Check https://github.com/Quramy/jasmine-spec-name-patch out \ud83d\ude04\nrequire('jasmine-spec-name-patch');\n\ndescribe('My awesome function', function() {\n\n  beforeEach(function() {\n    console.log(this.fullName);  // -> My awesome function should returns ...\n  });\n\n  // or\n\n  beforeEach((done, { fullName }) => {\n    console.log(fullName);  // -> My awesome function should returns ...\n    done();\n  });\n\n  it('should returns...', function() { /* test code */ });\n\n  afterEach(function() {\n    console.log(this.fullName);  // -> My awesome function should returns ...\n  });\n\n  // or\n\n  afterEach((done, { fullName }) => {\n    console.log(fullName);  // -> My awesome function should returns ...\n    done();\n  });\n});", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP"]}, {"authorLogin": "monkpit", "authorAssociation": "NONE", "createdAt": "2017-12-14T21:50:53Z", "contents": "@Quramy It doesn't work for me :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "monkpit", "authorAssociation": "NONE", "createdAt": "2017-12-14T21:56:57Z", "contents": "My use case for this issue is -\n\nBrowser instance is created in beforeEach\nBrowser is used for testing in it\nI want a screenshot at the end of all tests (pass or fail) - afterEach uses the browser instance to take a screenshot before disposing of the browser with a close command.\n\nWhy can I not access the spec name in afterEach to pass to the screenshot function as a filename?\nI can't do this with a reporter without building all of my browser setup/teardown into the reporter, instead of the individual specs. If I do that, then I would have to pass the Browser instance between the reporter and the specs, which seems dirty since I can't pass context on this between the reporter and the specs.\nThe only workaround I have managed to use successfully is from @stoeffel, but it's clumsy:\ndescribe(\"contrived example\", function(){\n  beforeEach(function(){\n    browser.create();\n  });\n  let mySpec = it(\"tests a feature\", function(){\n    this.specName = mySpec.getFullName();\n    browser.goto(\"https://google.com\");\n    expect(browser.title).toContain(\"Google\");\n  });\n  afterEach(function(){\n    browser.screenshot(this.specName);\n    browser.close();\n  });\n});\nIt feels weird to need to do the let mySpec / this.specName = mySpec.getFullName(); thing for each spec.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Pyrolistical", "authorAssociation": "NONE", "createdAt": "2018-02-07T22:42:50Z", "contents": "I did this instead: enhance-it.js\nmodule.exports = (it) => {\n  if (it.__ENHANCED_WITH_FULLNAME__) {\n    return it;\n  }\n  const enhancedIt = (name, closure) => {\n    const spec = it(name, () => closure(spec.getFullName()));\n  };\n  enhancedIt.__ENHANCED_WITH_FULLNAME__ = true;\n  return enhancedIt;\n};\n\nusage: something.spec.js\nit = require('../enhance-it')(it);\n\ndescribe('foo', () => {\n  it('bar', (fullName) => {\n    expect(fullName).toBe('foo bar');\n  });\n});\n\nWorks in jest as well.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN"]}, {"authorLogin": "harrygreen", "authorAssociation": "NONE", "createdAt": "2018-08-21T16:27:07Z", "contents": "I needed the test name in my afterEach (not beforeEach, which is evidently harder). This basic pattern might help someone:\ndescribe(\"tests\", () => {\n  let currentTest;\n\n  afterEach(() => {\n    const {\n      result: { fullName }\n    } = currentTest;\n    console.log(fullName); // \"test 1\", then \"test 2\"\n  });\n\n  currentTest = it(\"test 1\", () => {\n    // ...\n  });\n\n  currentTest = it(\"test 2\", () => {\n    // ...\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Abhilash04", "authorAssociation": "NONE", "createdAt": "2019-01-23T07:11:29Z", "contents": "@monkpit\nWhen I accessed this.mySpec in beforeEach() block it is giving \"undefined\" for first it block.\nAny clue ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-30T01:39:15Z", "contents": "@Abhilash04 since 2.0, Jasmine supplies a fresh empty object to each spec. This object is setup as this for all beforeEach and afterEach as well as the it for that spec. In Jasmine 1.x the actual Spec object itself was setup as the this and this had a potential for user's to accidentally clobber Jasmine built-in functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Jezorko", "authorAssociation": "NONE", "createdAt": "2019-03-21T11:09:09Z", "contents": "Here's my (super hacky) solution: https://github.com/Jezorko/smack-my-jasmine-up", "reactions_count": 0, "reactions_data": []}], "reactions_count": 19, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 612, "url": "https://github.com/jasmine/jasmine/issues/612", "title": "Mocking the JavaScript Timeout Functions in IE 8 with Jasmine 2.0.0", "contents": "Hi\nI can't get the following test to work in IE 8.\ndescribe('Time mock in IE 8', function() {\n    beforeEach(function() {\n        jasmine.clock().install();\n    });\n\n    afterEach(function() {\n        jasmine.clock().uninstall();\n    });\n\n    it('calls test after timeout', function() {\n        var test = jasmine.createSpy('timeout');\n        setTimeout(test, 1000);\n        jasmine.clock().tick(1000);\n        expect(test).toHaveBeenCalled();\n    });\n});\n\nI checked what Sinon does and found this http://sinonjs.org/releases/sinon-ie-1.10.2.js\nSo I tested by adding this to my SpecHelper.js\nvar origSetTimeout = setTimeout;\nfunction setTimeout() {}\nsetTimeout = origSetTimeout;\n\nAfter that the spec runs correctly.", "createdAt": "2014-06-17T12:22:03Z", "updatedAt": "2014-07-25T09:10:10Z", "closedAt": "2014-07-25T07:36:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Wraul", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Wraul", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T04:00:41Z", "contents": "I wonder if this is a load order problem. We do test the clock in IE8 and it's passing. Can you share more of your environment?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Wraul", "authorAssociation": "NONE", "createdAt": "2014-06-24T10:27:42Z", "contents": "I'm experimenting with running my specs using SpecRunner.html and Karma.\nI have done some more testing based on your suggestion.\nAnd there appears to be two separate issues.\nSpecRunner.html\nThis is now working. I had included jQuery before Jasmine.\nAfter moving the include to after Jasmine the test works in IE 8.\nSo that was my fault. Sorry about that.\nKarma\nThis is still not working.\nIf setTimeout gets called before the first call to jasmine.clock().install() I get this problem in IE 8.\nExemplified like this\nsetTimeout(function() {}, 100);\n\ndescribe('Clock', function() {\n    beforeEach(function() {\n        jasmine.clock().install();\n    });\n\n    afterEach(function() {\n        jasmine.clock().uninstall();\n    });\n\n    it('works in IE 8', function() {\n        var test = jasmine.createSpy('timeout');\n        setTimeout(test, 1000);\n        jasmine.clock().tick(1000);\n        expect(test).toHaveBeenCalled();\n    });\n});\n\nWithout the first setTimeout call it works correctly.\nNot sure if this is a problem with Jasmine or Karma.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-23T20:34:46Z", "contents": "From what you've said and my own testing, it looks like this isn't a problem in jasmine proper, but rather something that karma is doing. It it's working properly without karma, but breaks when karma is introduced, I would suggest opening an issue there.\nCan we close this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Wraul", "authorAssociation": "NONE", "createdAt": "2014-07-25T07:36:45Z", "contents": "I agree. This is most likely an issue with Karma.\nI have opened a ticket with Karma here\nI'm closing this issue now.\nThank you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 613, "url": "https://github.com/jasmine/jasmine/issues/613", "title": "Asynchronous tests run twice in standalone", "contents": "When running the standalone version of jasmine tests (asynchronous) run twice. The log looks something like this:\nTestA starts\nTestA done asynchronously\nTestB starts\nTestB done asynchronously\nTestA starts\nTestA done asynchronously\nTestB starts\nTestB done asynchronously\nTestC starts\nTestC done asynchronously\n\nAs far as I can see the tests/jasmine are not loaded twice.\nIt might be important to note, that I'm running the jasmine standalone version inside a Cordova application on an iOS device. I initialize the tests like the following, since I need to wait for cordova to finish loading:\nvar loadScript = function(src) {\n  var el = document.createElement('script')\n  el.setAttribute('src', src);\n  el.async = false;\n  document.body.appendChild(el);\n};\n\nvar loadTests = function() {\n  [\n    'lib/jasmine-2.0.0/boot.js',\n    'spec/myTest.js',\n  ].forEach(loadScript);\n\n  // timeout and window.onload needed to start tests\n  setTimeout(function() {\n    window.onload();\n  }, 1000);\n};\n\ndocument.addEventListener('deviceready', loadTests, false);", "createdAt": "2014-06-18T10:54:48Z", "updatedAt": "2017-12-06T15:08:22Z", "closedAt": "2014-12-16T23:52:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "schickling", "authorAssociation": "NONE", "participants_count": 8, "participants_data": [{"login": "schickling", "company": "@prisma "}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "ohana54", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "shashankmehta", "company": "@razorpay "}, {"login": "teo-sk", "company": "BAIT s.r.o"}, {"login": "OscarGodson", "company": "Director of Engineering at Acorns and Partner at Yorkshire Interactive"}, {"login": "p0ma", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:58:30Z", "contents": "Are you able to duplicate this in a desktop browser?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "schickling", "authorAssociation": "NONE", "createdAt": "2014-06-23T07:08:40Z", "contents": "Unfortunately not yet.\nIt's about this setup: https://github.com/mobilion/cordova-ibeacon-plugin/tree/master/test/integration", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ohana54", "authorAssociation": "NONE", "createdAt": "2014-09-08T16:59:15Z", "contents": "I don't know if it's the same issue, but I'm encountering something similar with Chrome.\nI'm running the tests using Karma.\nI only have one test defined. When it is a regular test, it runs only once.\nIf I change it to an async test, it runs 3 times according to the log:\nChrome 37.0.2062 (Mac OS X 10.9.4): Executed 3 of 1 SUCCESS (0.004 secs / 0.001 secs)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-20T22:01:45Z", "contents": "How exactly are you changing it to async? As long as you only call done once in the spec it should only report once. In jasmine 2.0.0, calling the done callback multiple times #523 or doing more work after calling done #549 would erroneously report more than once. These issues were fixed in 2.0.1. Please make sure you're on the most recent version of jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-16T23:52:33Z", "contents": "We haven't heard anything else on this issue from the community, so I'm going to close this. Feel free to re-open or start a new issue if you're still seeing this on the most recent jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shashankmehta", "authorAssociation": "NONE", "createdAt": "2014-12-24T17:11:47Z", "contents": "In case someone faces this issue in Karma + Jasmine setup, check if you have karma-jasmine >0.3.0. Since 0.3.0, karma-jasmine has stopped bundling jasmine and hence you can update the versions easily. I'm now on karma-jasmine 0.3.3 and jasmine-core 2.1.3 and the issue has been fixed for me.\nKarma Jasmine docs\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "teo-sk", "authorAssociation": "NONE", "createdAt": "2015-02-24T18:55:29Z", "contents": "@shashankmehta oh my glob you just saved me after 3 hours of debugging :'D", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "OscarGodson", "authorAssociation": "NONE", "createdAt": "2016-02-11T23:17:16Z", "contents": "Happens for me right now. I have one test:\n  describe('#scrollToRow', function () {\n    var bgt;\n    beforeEach(function (done) {\n      console.log('==============BEFORE==============')\n      bgt = new BGT(defaultOpts);\n      bgt.addListener('rowsbuilt', function () { done(); });\n    });\n    afterEach(function () {\n      console.log('==============AFTER==============')\n      bgt.destroy();\n    });\n    it('scrolls to the row so the scrollTop is equal to the row height x index in the table', function (done) {\n      // Note for testing we just assume all rows are 10px (see Clusterize stub)\n      var els = bgt.getElements();\n      console.log('==============TEST==============')\n      expect(els.scrollArea.scrollTop).toEqual(0);\n\n      bgt.scrollToRow(2);\n      expect(els.scrollArea.scrollTop).toEqual(20);\n\n      bgt.updateRowDisplay(bgt.data.rows.reverse());\n      bgt.addListener('rowsbuilt', function () {\n        bgt.scrollToRow(2);\n        expect(els.scrollArea.scrollTop).toEqual(20);\n        done();\n      });\n    });\n  });\nThe output of that is\n\nThis makes it super hard to deal with because at least if it duplicated the before/afters I could clean up and the test should work, but these tests are failing because the scrollTops are altered from the previous tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "OscarGodson", "authorAssociation": "NONE", "createdAt": "2016-02-11T23:23:18Z", "contents": "Oh, and I upgraded Jasmine and Karma like suggested, reset the server, etc and still that happens", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T18:21:49Z", "contents": "@OscarGodson what version of Jasmine are you using? From what I can see in your test it looks like the rowsbuilt listener from the beforeEach is being called again during the spec which is causing the spec to execute again. This should have been fixed in #523 in version 2.0.1.\nYou could also try removing that handler after it is executed the first time and see if that fixes the issue.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "p0ma", "authorAssociation": "NONE", "createdAt": "2017-12-06T15:08:22Z", "contents": "If you are facing this problem in WebStorm: check if you closed your previous debug sessions (browser tabs) :)", "reactions_count": 1, "reactions_data": ["HOORAY"]}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 614, "url": "https://github.com/jasmine/jasmine/issues/614", "title": "How to test events?", "contents": "I know that jasmine-jquery offers spyOnEvent to spy on  jQuery events.\nBut I don't use jQuery, how can I test my events via jasmine?", "createdAt": "2014-06-19T08:00:16Z", "updatedAt": "2014-08-14T04:42:26Z", "closedAt": "2014-08-14T04:42:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AnnieCyl", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "AnnieCyl", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-23T03:52:28Z", "contents": "Since this is a \"how to test\" type of question, have you tried the Jasmine Google Group - jasmine-js@googlegroups.com. More of the community gathers there to help people with testing patterns..\nThat said, I'm a fan of unit-testing my event handlers without them being called via event firing. Then I use integration tests - usually not in Jasmine - to validate that registration happens and all of the glue code is working.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-14T04:42:26Z", "contents": "Closing, as this is a \"how to test\" and not an issue with jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 615, "url": "https://github.com/jasmine/jasmine/issues/615", "title": "Don't run tests, that don't have actual test body", "contents": "If I have a test it(), but there is no actual test body expect(), then seems pointless to show, that test is okay.\nMaybe exclude at runtime?", "createdAt": "2014-06-25T09:12:55Z", "updatedAt": "2014-06-26T15:36:46Z", "closedAt": "2014-06-26T15:36:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jeserkin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jeserkin", "company": "Works at Nortal \u276f Loves working with Java & Front-end \u276f Always interested in trying out new technologies"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}], "comments_count": 9, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-25T20:24:08Z", "contents": "We've gone back and for on this issue for 2.0 and decided that the current behavior is the correct behavior.\nThere are cases where passing tests don't need to have expectations. This is mostly the case where errors thrown by executed implementation code indicate failure - and not thrown is passing.\nSo no expectations doesn't mean failing. And it doesn't mean pending - we have plenty of ways to indicate a spec is pending.\nThus we've settled on \"no expectations can mean passing.\"\nHow is the current behavior affecting your project?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeserkin", "authorAssociation": "NONE", "createdAt": "2014-06-25T21:23:38Z", "contents": "Well for example I've thought throu what test will be needed, but haven't implemented yet. But after some time one can forget about what is done and what is not and when running test one might see, that everything is okay without knowing, that there is no actual test done.\nMaybe at least tests could add some prefix to test description at runtime saying, that everything is okay as they do now, but also saying something like\n  Module: ui\n    Controller: UiCtrl\n      [No body present] \u2713 controller must set properties into global scope", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-25T22:47:43Z", "contents": "It sounds like you're asking for pending specs. You can do this in Jasmine 2.0 by:\n\nDo not provide a function body:\n\nit(\"controller must set properties into global scope.\");\nor\n\nCall pending() inside a spec body:\n\nit(\"controller must set properties into global scope.\", function() {\n  pending();\n});\n\nHow does this sound? Can we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeserkin", "authorAssociation": "NONE", "createdAt": "2014-06-25T23:13:44Z", "contents": "Damn. I'm using 1.3. Forgot to mention. If you can, please wait. I will try to move to 2.0 tomorrow and test out your suggestion to be sure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeserkin", "authorAssociation": "NONE", "createdAt": "2014-06-26T06:21:54Z", "contents": "Seems I'm of no help. Project is using karma-jasmine runner. Runner for jasmine 2.0 is still very buggy, so I can't switch yet. Have to wait. I think issue can be closed for now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2014-06-26T11:43:40Z", "contents": "Off topic: karma-jasmine works perfectly fine and stable for me while using jasmine 2.0. You should use the 0.2.0 version, with karma 0.10.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeserkin", "authorAssociation": "NONE", "createdAt": "2014-06-26T11:46:50Z", "contents": "@jaapz I read the part about switching :) I have a matcher like\nbeforeEach(function() {\n    this.addMatchers({\n      toHaveClass: function(className) {\n        return this.actual.hasClass(className);\n      }\n    });\n  });\nand I'm getting an error, I think earlier reported in karma-jasmine project.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-26T15:36:14Z", "contents": "Please see: http://jasmine.github.io/2.0/custom_matcher.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-26T15:36:46Z", "contents": "Since this has become a different discussion, I'm going to close.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 617, "url": "https://github.com/jasmine/jasmine/issues/617", "title": "Events getting too widely attached?", "contents": "The problem is best illustrated through this Plunker. Clicking on the form field seems to reload the page. It's not an Angular issue, as it goes away entirely when I remove the Jasmine bootstrap file.\nI think it is related to this line in boot.js: onRaiseExceptionsClick: function() { queryString.setParam(\"catch\", !env.catchingExceptions()); }\nIf I remove that, I can click on the form field, but I still get event trouble with the button.", "createdAt": "2014-06-28T04:48:03Z", "updatedAt": "2014-12-16T23:51:05Z", "closedAt": "2014-12-16T23:51:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "selfinterest", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "selfinterest", "company": "PillPack"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-28T04:54:11Z", "contents": "Yes, I think this was addressed in the following issue: #605\nCan you try master and see if it's solved for you as well?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "selfinterest", "authorAssociation": "NONE", "createdAt": "2014-06-28T22:40:05Z", "contents": "Hey,\nI upgraded everything to master -- jasmine.js, jasmine-html.js, and the boot.js file -- and I'm no longer getting a page reload every time I click on the form field. However, the button click still isn't firing (or the change event for the text field, though I removed that to simplify things.)\nIf you remove boot.js to prevent Jasmine from working, all the events fire as normal.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-01T19:50:02Z", "contents": "I'm not seeing anything in your spec that is trying to click the button, so while I agree it's weird that the button doesn't work, using the button manually isn't a spec interaction. I'm not really sure what the use case for jasmine is then.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-16T23:51:05Z", "contents": "We haven't heard anything back on this issue in a while. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 618, "url": "https://github.com/jasmine/jasmine/issues/618", "title": "Can a spy tell me what the 'this' object was each time it was called.", "contents": "It would be really useful if a spy could keep track of the this object it had when it was called. I am currently writing tests for several functions for functions. compose, throttle etc. To check context I have to use my own implementation of a spy.", "createdAt": "2014-06-28T16:49:42Z", "updatedAt": "2014-06-30T16:54:36Z", "closedAt": "2014-06-30T16:54:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CrowdHailer", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "CrowdHailer", "company": "@chingventures "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-06-28T17:11:50Z", "contents": "Spies do keep track of what the this was for each call. If you get the mostRecent() call it has an object attribute.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-06-30T16:54:36Z", "contents": "Whoops - I totally thought this was in the docs. Thanks for the catch!\nI've created this story in Tracker to get the context property in the docs. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 619, "url": "https://github.com/jasmine/jasmine/issues/619", "title": "Can't find banner", "contents": "Some times I got this error:\n\nand I have added these in <head>:\n\nBut the banner is null.\nWhen I inspected my html, I found that there was no <div class=\"html-reporter\">...</div> in <body>. So find('.banner') returned null.\nHow it happened?", "createdAt": "2014-07-03T01:57:13Z", "updatedAt": "2014-07-03T05:45:01Z", "closedAt": "2014-07-03T05:40:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AnnieCyl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "AnnieCyl", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-03T04:44:27Z", "contents": "Is it possible that a spec of yours is deleting the 'html-reporter' div accidentally?\nI've tried making the SpecRunner have only the  tag you've shown here (with no specs), but it doesn't reproduce the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnnieCyl", "authorAssociation": "NONE", "createdAt": "2014-07-03T05:40:58Z", "contents": "@sheelc\nI got it!\nIt is because I overrided window.onload somewhere else, then the window.onload in the boot.js of jasmine which initialize htmlReporter didn't work. So there was no  html-reporter in <body>.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-03T05:45:01Z", "contents": "Ah interesting, cool!\nFor future reference, Jasmine's window.onload in boot does try to call through to an existing window.onload, but yes overriding window.onload after Jasmine has bound one is problematic.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 620, "url": "https://github.com/jasmine/jasmine/issues/620", "title": "Including installation instructions in documentation", "contents": "Including installation instructions in the documentation would be helpful to new users not familiar with how to set up Jasmine.\nStack question re this issue:\nhttp://stackoverflow.com/questions/23648821/installation-of-jasmine-for-automated-testing", "createdAt": "2014-07-07T15:03:39Z", "updatedAt": "2014-07-08T04:26:59Z", "closedAt": "2014-07-08T04:26:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bengrunfeld", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "bengrunfeld", "company": "JetPug"}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 1, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-08T04:26:59Z", "contents": "Closed via #621", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 622, "url": "https://github.com/jasmine/jasmine/issues/622", "title": "toHaveBeenCalled() doesn't take comment message", "contents": "expect(spy).toHaveBeenCalled('have been called!') \u2013 doesn't work\nexpect(spy.calls.any()).toBe(true, 'have been called!') \u2013 works", "createdAt": "2014-07-09T15:18:30Z", "updatedAt": "2014-08-20T19:57:21Z", "closedAt": "2014-08-20T19:57:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Yeti-or", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Yeti-or", "company": "Y"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-09T20:26:15Z", "contents": "The toHaveBeenCalled matcher is actually trying to keep the developer from getting false greens when testing for a spy to have been called with specific arguments. That's why the message says \"toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith\".\nThe toBe (and other) matcher(s) don't actually do anything with any extra parameters passed to it after the first one. You see the message only for the ones that don't provide their own custom failure messages and allow jasmine to construct one.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 623, "url": "https://github.com/jasmine/jasmine/issues/623", "title": "ReferenceError: Can't find variable: require", "contents": "I've been trying to get a basic jasmine project working that tests a JavaScript library I'm working on. The library will run in either the browser or in Node.js. Unfortunately, I've been unable to use Jasmine. I keep getting an error that says 'ReferenceError: Can't find variable : require'\nI have a stripped down project that demonstrates the problem. That code can be found here.\nI'm opening an issue as I only have it as soon as I reference my jasmine task.", "createdAt": "2014-07-11T11:16:06Z", "updatedAt": "2014-10-08T20:18:11Z", "closedAt": "2014-10-08T20:18:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paranoid-android", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "paranoid-android", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T20:30:00Z", "contents": "It sounds like this might actually be an issue with jasmine-node and not jasmine itself. Jasmine-node is not maintained by the jasmine team, so it might be best to take the issue over there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-08T20:18:08Z", "contents": "Closing this as we haven't seen a response in some time, and it sounds like the issue is with another library and not jasmine itself. Feel free to re-open or open a new issue if you're still having the problem and it looks like it the fault of jasmine.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 625, "url": "https://github.com/jasmine/jasmine/issues/625", "title": "How to test KnockoutJS sample with HTML data-bind on Jasmine", "contents": "How can we test KnockoutJS sample with HTML data-bind on Jasmine test spec.\nCan somebody throw some idea on this as it is very useful for me on my current project as we are using Jasmine test framework to test KnockoutTJS source code.\nPlease provide some example if you have any.", "createdAt": "2014-07-16T09:59:30Z", "updatedAt": "2014-07-16T13:37:18Z", "closedAt": "2014-07-16T13:37:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bcoreddy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bcoreddy", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-16T13:37:18Z", "contents": "Hi! Thanks for looking at Jasmine to work with KnockoutJS. I think you'll have better luck in getting a response if you ask your question over on the jasmine mailing list: http://groups.google.com/group/jasmine-js. I'm going to close this issue, since it's more of a question around usage, not really a problem with the Jasmine code.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 626, "url": "https://github.com/jasmine/jasmine/issues/626", "title": "Add expected assertion count", "contents": "Especially with async tests it's very useful to be able to check if assertion count at the end of the spec matches what was actually checked. This would also allow to catch mistakes like:\nexpect(some-long-expression);\n(which I've experienced yesterday).\nAn API could look like:\nit('a test', function () {\n  this.expect(2);\n  expect(true).toBe(true);\n  // error: two assertions expected\n});\nor like that:\nit('a test', function (2[, done]) {\n  expect(true).toBe(true);\n  // error: two assertions expected\n});", "createdAt": "2014-07-17T08:09:01Z", "updatedAt": "2017-09-12T16:38:59Z", "closedAt": "2014-08-27T16:50:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "juanmendes", "company": null}, {"login": "Ciantic", "company": null}, {"login": "FagnerMartinsBrack", "company": "The Internet"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jahtalab", "company": "@elastic "}, {"login": "UziTech", "company": "UziTech"}, {"login": "iwllyu", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-27T16:50:42Z", "contents": "Are you seeing false positives in your project?\nKnowing how many expectations are in a spec feels like a testing smell. The project would have to update the count and the expectations every time a given spec changed.\nThanks for the feature request. However, given that we've not heard about this request before, it would require more work in every single spec, and it would require more work of all users, I'm going to close this issue.\nIf you still feel strongly about this, let's have a discussion about this on the Jasmine list. We can reconsider if the community thinks the core team is off base.", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "juanmendes", "authorAssociation": "NONE", "createdAt": "2015-01-08T19:57:22Z", "contents": "I would love this feature, it exists in js-test-driver. It's really useful for asynchronous test cases to make sure all your callbacks are called.\nit('should check my variable after a timeout', function() {\n     var val = true;\n     setTimeout(function(){\n        expect(val).toBe(false);\n        done();\n     }, 0);\n});\nThe above test should fail but ends up passing because I forgot to define the done parameter. This bug just bit me on a project, so I googled for that feature\nIt's worth mentioning that in the example above, you'd get an error on your console because done is not defined. However, in my case, my callback was never being called because my widget under test was destroyed in afterEach() so no callbacks were ever callled so it was truly a false positive", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Ciantic", "authorAssociation": "NONE", "createdAt": "2016-03-25T23:03:53Z", "contents": "It need not to be asynchronous test to be difficult to refactor so that expect is at the end of the function.\nI'm testing react components, and I have expect inside the render, e.g.\n    it(\"should duplicate state to props of the component\", function () {\n        interface IProps {\n            prop1? : string;\n            prop2? : string;\n        }\n        class Component extends React.Component<IProps, void> {\n            static actions;\n            static defaultActions = {};\n            static defaultProps: IProps = {\n                prop1: \"1\",\n                prop2: \"2\"\n            }\n\n            render() {\n                expect(Object(this.props)).toEqual({\n                    prop1: \"connected 1\",\n                    prop2: \"connected 2\"\n                });\n\n                return (\n                    <div></div>\n                );\n            }\n        }\n\n        interface IState {\n            connectedComponent?: {\n                prop1?: string;\n                prop2?: string;\n            };\n        }\n        let simpleRedux = new SimpleRedux<IState>({\n            connectedComponent : {\n                prop1: \"connected 1\",\n                prop2: \"connected 2\"\n            }\n        });\n\n        let ComponentConnected = simpleRedux.connector(Component)(\n            s => (s.connectedComponent),\n            (p => {\n                throw Error(\"This must not be run\");\n            }) as any\n        );\n\n        const component: React.Component<{}, {}> = TestUtils.renderIntoDocument(\n            <Provider store={simpleRedux.store}>\n                <ComponentConnected />\n            </Provider>\n        );\n    });\nI can't neatly move it outside the render, the component given by React TestUtils is utter garbage.\nEdit I did refactor it finally to right format, but in async cases it is not always viable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FagnerMartinsBrack", "authorAssociation": "NONE", "createdAt": "2016-04-07T05:37:29Z", "contents": "@mgol @infews Can anybody confirm if there was any advancements in this matter? Is there any links to a list where we can see the discussion mentioned in the comment above? I ask this because this issue is the first result in Google when looking for \"jasmine expected assertion count\".\nThis is such a basic feature to prevent false positives when working with asynchronous functions or just a couple of mocks (to ensure tests refactor do not lose determinism in the future). QUnit has it and works like a charm, but unfortunately it doesn't have the same fluency as the jasmine style of writing tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Ciantic", "authorAssociation": "NONE", "createdAt": "2016-04-07T05:46:33Z", "contents": "@FagnerMartinsBrack I would not expect this to be fixed, same problem with Chai: chaijs/chai#94 and it have been there for years.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-26T23:54:22Z", "contents": "Jasmine will now tell reporters the number of expectations that were made in each spec. The HTMLReporter will report to your console any specs that don't make any expectations at all. We don't want to require all specs to have expectations, as there can be reasons you may want a spec like that.\nAt this point, I think this is probably how it will be for the foreseeable future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jahtalab", "authorAssociation": "NONE", "createdAt": "2017-06-23T08:48:44Z", "contents": "@slackersoft , I think there's no need for jasmine to require all specs to have expectations, simply by providing the number of expect calls the developer can choose to fail tests if there are no expectations.\nIs the number of expectations accessible during the test?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-07-31T14:21:45Z", "contents": "I created an plugin that will do this called jasmine-expect-count\nusage:\nit(\"should call expect 3 times\", function () {\n  jasmine.expectCount(3);\n\n  expect(1).toBe(1);\n\n  const p = new Promise(function (resolve) {\n    setTimeout(function () {\n      expect(2).toBe(2);\n      resolve();\n    }, 1);\n  });\n\n  expect(3).toBe(3);\n\n  // if returning p is forgotten only 2 expects will be called.\n  return p;\n});", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "iwllyu", "authorAssociation": "NONE", "createdAt": "2017-09-12T16:38:59Z", "contents": "jest has this implemented\nhttps://facebook.github.io/jest/docs/en/expect.html#expectassertionsnumber", "reactions_count": 14, "reactions_data": ["LAUGH", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "LAUGH"]}], "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 627, "url": "https://github.com/jasmine/jasmine/issues/627", "title": "expect(blah).toContain(x) gives poor error messages if blah is undefined or null", "contents": "Hi,\nI'm on 2.0.0 and it gives the following message:\nTypeError: haystack is undefined in http://localhost:8100/Tests/Jasmine/lib/jasmine-2.0.0/jasmine.js (line 1759).\nApplying this patch (in contains in the matchersUtil in jasmine.js):\n@@ -1756,6 +1756,11 @@\n         }\n         return false;\n       }\n+\n+      //note this is a patch!  library's normal behaviour is to throw an exception\n+      if(haystack === undefined || haystack === null)\n+          return false;\n+\n       return haystack.indexOf(needle) >= 0;\n     },\n\nproduces more sensible output:\nExpected undefined to contain '7'.\nI know I could probably submit this as a pull request but I dont really know how to use git.\nCheers", "createdAt": "2014-07-17T11:35:33Z", "updatedAt": "2014-07-18T20:19:33Z", "closedAt": "2014-07-18T20:19:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JonnyRa", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "JonnyRa", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 629, "url": "https://github.com/jasmine/jasmine/issues/629", "title": "Dynamically update spec description", "contents": "I'm using jasmine 2.0 to do integration tests with a REST API. I'd like to add some information that is created dynamically to the output report to aid debugging when tests fail. Is it possible to do something like this?\nFor example:\ndescribe('My Test', function () {\n    var model = new MyModel();\n    beforeEach(function (done) {\n        // Creates a new model in the service\n        model.save().done(done); \n    });\n    it('should have properties', function () {\n        // Update spec name to have dynamically created ID\n        this.name = this.name + ' (ID: ' + model.get('id') + ')'; \n        expect(model.get('prop')).toBe('val');\n    });\n});\n\n\nOutput (1234 as the model ID from the service)\nMy Test\n- should have properties (ID: 1234)", "createdAt": "2014-07-18T09:31:56Z", "updatedAt": "2014-09-03T20:05:06Z", "closedAt": "2014-09-03T20:05:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "robrichard", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "robrichard", "company": "@1stdibs "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "robrichard", "authorAssociation": "NONE", "createdAt": "2014-07-18T13:07:30Z", "contents": "It looks like this used to be possible with jasmine.currentEnv_.currentSpec.description. Is there a way to do the same in jasmine 2.0?\nhttp://blog.jphpsf.com/2012/08/30/drying-up-your-javascript-jasmine-tests", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T20:05:04Z", "contents": "This wasn't intentionally exposed in jasmine 1.3.x, and in the rework for jasmine 2.0, we've closed over a number of things that used to be public but really shouldn't have been. I don't think we have any plans to enable users to mutate spec or suite descriptions, as it could make it hard to then find the spec/suite in your code.\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 631, "url": "https://github.com/jasmine/jasmine/issues/631", "title": "grammar error in http://jasmine.github.io/2.0/introduction.html", "contents": "By default jasmine will wait for 5 seconds for an asynchronous spec to finish before causing at timeout failure. If specific specs should fail faster or need more time this can be adjusted by setting jasmine.DEFAULT_TIMEOUT_INTERVAL around them.\npossible meaning:\nBy default jasmine will wait for 5 seconds for an asynchronous spec to finish before causing a timeout failure. If specific specs should fail faster or need more time this can be adjusted by setting jasmine.DEFAULT_TIMEOUT_INTERVAL around them.", "createdAt": "2014-07-20T14:08:24Z", "updatedAt": "2014-07-23T20:12:21Z", "closedAt": "2014-07-23T20:12:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aishelm", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "aishelm", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 634, "url": "https://github.com/jasmine/jasmine/issues/634", "title": "Boot.js throws an error (no html function)", "contents": "I must be missing something.\nHere is the simplest jasmine thing possible\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\"  href=\"//cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/jasmine.css\" />\n</script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/jasmine.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/boot.js\"></script>\n  <meta charset=\"utf-8\">\n  <title>Jasmine bootjs error</title>\n</head>\n<body>\n\n</body>\n</html>\n\nYou get a script error since boot.js calls jasmineRequire.html(jasmine) but jasmineRequire has no such method!", "createdAt": "2014-07-21T14:43:37Z", "updatedAt": "2014-07-21T15:25:18Z", "closedAt": "2014-07-21T15:21:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "togakangaroo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "togakangaroo", "company": "@surgeforward "}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 5, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-21T14:55:20Z", "contents": "There is a jasmine-html.js that is also needed as a script tag after the\njasmine.js script tag.\nDoes that work?\nOn Jul 21, 2014 7:43 AM, \"George Mauer\" notifications@github.com wrote:\n\nI must be missing something.\nHere is the simplest jasmine thing possible\nhttp://jsbin.com/qowuge/1/edit?html,js,console,output\n\n\n\n  \n</script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/jasmine.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/jasmine/2.0.0/boot.js\"></script>\n  \n  <title>Jasmine bootjs error</title>\n\n\n\n\nYou get a script error since boot.js calls jasmineRequire.html(jasmine)\nbut jasmineRequire has no such method!\n\u2014\nReply to this email directly or view it on GitHub\n#634.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "togakangaroo", "authorAssociation": "NONE", "createdAt": "2014-07-21T14:58:47Z", "contents": "Ah, yes that works. Might I recommend modifying boot.js header docs so that the documentation page on it makes that clear. At the moment it says\n\"This file should be loaded after jasmine.js, but before any project source files or spec files are loaded.\"\nWhich leads to the impression that those two files are all that is needed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-21T15:04:51Z", "contents": "Cool and yes sure! I see how that can be misleading. Can we close the issue here and open one on the docs repo (github.com/jasmine/jasmine.github.io)?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "togakangaroo", "authorAssociation": "NONE", "createdAt": "2014-07-21T15:21:39Z", "contents": "I'll do that", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-21T15:25:18Z", "contents": "Awesome, thanks for suggestion!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 635, "url": "https://github.com/jasmine/jasmine/issues/635", "title": "Issue in jasmine-ajax installation", "contents": "npm WARN git config --get remote.origin.url returned wrong result (git://github.com/pivotal/jasmine-ajax)\nnpm ERR! git clone git://github.com/pivotal/jasmine-ajax Cloning into bare repository 'C:\\Users\\le\\AppData\\Roaming\\npm-cache_git-remotes\\git-github-com-pivotal-jasmine-ajax-8282d883'...\nnpm ERR! git clone git://github.com/pivotal/jasmine-ajax fatal: unable to connect to github.com:\nnpm ERR! git clone git://github.com/pivotal/jasmine-ajax github.com[0: 192.30.252.130]: errno=No error\nnpm ERR! Error: Command failed: Cloning into bare repository 'C:\\Users\\le\\AppData\\Roaming\\npm-cache_git-remotes\\git-github-com-pivotal-jasmine-ajax-8282d883'...\nnpm ERR! fatal: unable to connect to github.com:\nnpm ERR! github.com[0: 192.30.252.130]: errno=No error\nnpm ERR!\nnpm ERR!\nnpm ERR!     at ChildProcess.exithandler (child_process.js:647:15)\nnpm ERR!     at ChildProcess.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:755:16)\nnpm ERR!     at Process.ChildProcess._handle.onexit (child_process.js:822:5)\nnpm ERR! If you need help, you may report this entire log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     http://github.com/npm/npm/issues\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"d:\\Tools\\Nodejs\\node.exe\" \"d:\\Tools\\Nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"karma-jasmine-ajax\"\nnpm ERR! cwd d:\\workspace\\token_js\nnpm ERR! node -v v0.10.29\nnpm ERR! npm -v 1.4.14\nnpm ERR! code 128", "createdAt": "2014-07-22T06:45:49Z", "updatedAt": "2014-07-29T18:03:09Z", "closedAt": "2014-07-29T18:03:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "duleitony", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "duleitony", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-23T20:02:55Z", "contents": "It looks like this is a problem installing karma-jasmine-ajax and not jasmine (or even jasmine-ajax).\nBased on what's in the log, it looks like the root cause is npm not being able to connect to github.com.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-29T18:03:09Z", "contents": "See the discussion in jasmine/jasmine-ajax#73\nClosing since this is not core related.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 636, "url": "https://github.com/jasmine/jasmine/issues/636", "title": "Karma / Jasmine 1.x / 2.0 / ExtJS 4. Async Issues", "contents": "I've run across some issues when dealing with ExtJS 4.x using either Jasmine 1.3.1/1.5 or 2.0 version with Karma.  I've written some code and demo on GitHub which solves the problem in terms of being able to implement working tests, but I'm wondering if there isn't some bug fixes which could be done to actually deal with the issues moving forward. For one thing, according of the Sencha/ExtJS folks, there won't be any PromisesAPI for the near future with ExtJS 5.0, so the done() method won't work when testing Ext.Store/Ext.Model.  Anyways, you can look at my code on GitHub and let me know your thoughts and comments.  https://github.com/cgauthier/karma_jasmine_2_extjs4 for Jasmine 2.0 and https://github.com/cgauthier/karma_jasmine_1_extjs4 for Jasmine 1.x", "createdAt": "2014-07-22T16:44:43Z", "updatedAt": "2014-07-24T12:48:25Z", "closedAt": "2014-07-23T20:52:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cgauthier", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cgauthier", "company": "Killer Schnookums LLC"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-22T20:19:49Z", "contents": "There aren't any plans to bring back the old runs/waitsFor syntax into jasmine. Because javascript development seems to be moving more toward a promise/callback style for async functionality (see mocha), we followed this lead for 2.0.\nYour implementation of myWaitsFor looks like a nice adapter for environments like yours that don't work in this style. Given that, can we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cgauthier", "authorAssociation": "NONE", "createdAt": "2014-07-23T11:39:57Z", "contents": "It is pretty awesome for Jasmine 2.x to offer support for PromisesAPI type coding style.\nBut the reality is that it will be a while before code written that way becomes a defacto standard.  And in my honest opinion, Not all frameworks will support that style for quite a while to come, including ExtJS, where at the latest version 5.0, doesn't use PromisesAPI for dealing with proxies and ajax calls.\nNow, the whole point of a unit testing framework like Jasmine is that is supposed to help deal with complex JS frameworks such as Sencha ExtJS, which I recall is how Jasmine got some of its fame.  There are many large institutions out there using ExtJS.  And they have to deal with Async issues.\nI believe that the Jasmine tool would greatly benefit from offering proper async support.\nClearly the return on investment is great, because the effort to ensure proper async support is a small little footprint in your code base and in the time it would take to implement and document.\nAfter all, why use this tool and have to come up with hacks, when clearly, it could easily be integrated into the tool itself.\nYou can easily have runs/waitsFor and done() within the system available.\nEventually, in a few years, you may decide to phase it out, but for now, there is a real demand for a consistent approach to dealing with Async issues with frameworks such as ExtJS.\nSo, is this issue Closed?  That is up to you and the Jasmine team.  I won't close it, but if this falls on deaf ears, you certainly can.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-23T17:46:03Z", "contents": "@cgauthier Thanks for the feedback.\nThe Jasmine 2.0 syntax for async specs was informed heavily by the community. The 1.x syntax was complex to maintain and hard to use.\nWe moved to a callback-based syntax because of many requests, the experience playing with the Mocha syntax (which we are essentially compatible with) and ease of maintenance of the Jasmine code base.\nThat fact that you were able to write your own callback to use within a 2.0 project is a testament to the flexibility the done syntax.\nAs for bugs - are there issues with async support in 2.0 outside of this syntax request? Can you show us a simple example that demonstrates the bug? If so, let's keep this issue open.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cgauthier", "authorAssociation": "NONE", "createdAt": "2014-07-23T17:52:32Z", "contents": "Thank you for the follow-up:\nEverything is on GitHub in my repos\nFor Jasmine 2.0\nLook at the app-tests/example.js: https://github.com/cgauthier/karma_jasmine_2_extjs4\nI have to use a custom waitsFor() for testing an ExtJS store.\nYou can compare Jasmine 1.x and 2.0 tracks as they have the same unit tests goals, just different implementations\nFor Jasmine 1.x\nhttps://github.com/cgauthier/karma_jasmine_1_extjs4\nAgain, if you look at how the tests are written in both repos (located both in each of their respective app-tests/example.js file)\nIt could be that I'm doing something wrong.  And your assistance would be invaluable.  But even in Jasmine 1.x I still have to use my custom \"waitsFor\" method.\nAnyways, regardless of the outcome, thank you for taking the time to review this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-23T20:52:49Z", "contents": "Looking at this example.js for Jasmine 2, it looks what we would expect from an async perspective.\nIt sounds like this is working for you - that you're able to test with Ext.js in an asynchronous manner. So I'll close this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cgauthier", "authorAssociation": "NONE", "createdAt": "2014-07-24T12:48:25Z", "contents": "You didn't pay attention to the this in the example.js file for the Jasmine 2.0 demo.\nif(!store) {\n// asynchronous exections should be wrapped in a 'runs' function\n// this store has an autoLoad: true, thus will make an ajax call via its proxy.\nstore = UsersController.getStore(\"Users\");\n}\n    // custom function which compensates for scenarios where you can't pass the done function \n    //  into the success of an ajax call\n    // in the case of a store load.        \n    myWaitsFor(function() {\n        return !store.isLoading();\n    }, function() {\n        done();\n    }, 2000); \n\n  });\n\n  it(\"Expect 2 items in the store\", function() {\n     expect(store.getCount()).toEqual(2);\n  });\n\nNow, I can't use the done() method in her the store uses an autoload method and it's the proxy doing the ajax call.  this is the part you miss in all of this.  Look, if you guys don't care, just say so, but I feel like you aren't really looking at anything and I know you are busy and all, but my goal is a bit like your goal, that Jasmine gets to be an ever better product.  If you believe the job is done already, then so be it.  But at least, try and examine the example.   If you don't know ExtJS, just say so, I will provide more explanation.  The store has a proxy and the proxy loads the data and the proxy uses an Ajax call.  It's that simple..  And with autoload: true, you don't need to invoke the store's load method.  This is where the jasmine done() method fails for this type of test.\nAs for Jasmine 1.x demo.\nThe technique of runs()/waitsFor() works fine for the store\nBut for an Ajax calls, I had to write my own 'myWaitsFor' because for some reason I couldn't get waitsFor/runs to work correctly.\nAgain, maybe I'm doing this wrong who knows...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 637, "url": "https://github.com/jasmine/jasmine/issues/637", "title": "Nested objectContaining doesn't work", "contents": "Here is a minimal test case that is failing on karma 0.12.17, which is using karma-jasmine 0.2.2.\nit('can nest objectContaining', function() {\n    expect(\n        {\n            foo: {\n                bar: 'baz',\n                other: 1\n            }\n        }\n    )\n    .toEqual(\n        jasmine.objectContaining({\n            foo: jasmine.objectContaining({\n                bar: 'baz'\n            })\n        })\n    );\n});", "createdAt": "2014-07-25T17:54:57Z", "updatedAt": "2014-08-20T23:24:24Z", "closedAt": "2014-08-20T23:24:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lkogler", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lkogler", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-25T19:53:18Z", "contents": "It looks like this was fixed in the 2.0.1 release. When I run this spec against 2.0.0 it fails, but when upgrading to 2.0.1 it passes.\nCan you try upgrading to the latest version of jasmine-core?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 638, "url": "https://github.com/jasmine/jasmine/issues/638", "title": "Jasmine Swallows Error Message when throwing own Exception", "contents": "Doing something like this in the code that's going to be tested (or in an it):\nvar MyError = function (message) {\n  this.message = message\n}\nMyError.prototype = new Error('foo')\nvar myerror = new MyError('bar')\nconsole.log(myerror instanceof Error)\nconsole.log(myerror.message)\nthrow myerror\nJasmine will report this:\n\nYou see that jasmine seems to report the prototypes message. Not the one from myerror. Is this me misunderstanding prototypes or is this actually some kind of error in jasmine?", "createdAt": "2014-07-27T21:39:34Z", "updatedAt": "2014-07-28T10:38:06Z", "closedAt": "2014-07-28T10:38:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "despairblue", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "despairblue", "company": null}, {"login": "sheelc", "company": "Mayvenn"}], "comments_count": 3, "comments_data": [{"authorLogin": "despairblue", "authorAssociation": "NONE", "createdAt": "2014-07-27T21:55:27Z", "contents": "By the way, my actual problem is that peg.js constructs it's own SyntaxErrors like this:\nfunction peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\nAnd jasmine won't report these errors.\n\nThe actual error caught with try catch:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-28T01:37:00Z", "contents": "It looks like theres a bit of an inconsistency between the browser reporter and the console reporter. The browser reporter prints out both the message and stack, while the console reporter only prints the stack. I just pushed a commit to fix that.\nThe message shown in the browser is the message you have overridden ('bar') while the stack contains the offending 'foo', since the stack property hasn't been overridden. As this stack overflow post suggests, you could override the stack property as well to be something like (new Error()).stack to remove the misleading 'Error: foo' and only see 'Error' instead.\nDoes this help resolve the issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "despairblue", "authorAssociation": "NONE", "createdAt": "2014-07-28T10:38:06Z", "contents": "Yep, that helps. Now I'll can see why the spec failed. Thanks \ud83d\udc4d\nAnd overriding the stack property (or actually having one one in the first) place is something I'll suggest to the peg.js maintainer", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 639, "url": "https://github.com/jasmine/jasmine/issues/639", "title": "How to mock functions to send html objects", "contents": "Hi,\nI want to use jasmine is test d3. However, I need to mock the d3 functions, in order to do that I need to return HTML objects like a , so I could do stuff like attach SVGs to it.\nThanks.", "createdAt": "2014-07-29T06:38:15Z", "updatedAt": "2014-07-30T20:10:45Z", "closedAt": "2014-07-30T20:10:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AlaRuba", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "AlaRuba", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-07-30T20:10:45Z", "contents": "Hi! Thanks for looking at Jasmine. I think you'll have better luck in getting a response if you ask your question over on the jasmine mailing list: http://groups.google.com/group/jasmine-js. I'm going to close this issue, since it's more of a question around usage, not really a problem with the Jasmine code.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 640, "url": "https://github.com/jasmine/jasmine/issues/640", "title": "severe performance degradation with jasmine runner in phantomjs", "contents": "This is related to the issue we filed in the jasmine-gem: jasmine/jasmine-gem#225\nWhen upgrading to Rails 4.1, @ohrite and I bumped jasmine, and found that our tests took an increasingly long time to run, measured in minutes (before it was in seconds). This only seems to occur running under phantomjs, its fine in the browser.  After watching Activity Monitor, we determined that phantomjs leaks memory and starts thrashing after a few dozen examples.\nWe isolated the problem being introduced as part of this commit:\n5f34be4\nBefore this commit everything is fine. Hope this helps!", "createdAt": "2014-07-29T22:27:22Z", "updatedAt": "2014-11-25T02:40:14Z", "closedAt": "2014-11-22T23:03:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdy", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "rdy", "company": "Sony"}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "Gerg", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "neodude", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 12, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-30T13:45:59Z", "contents": "hmm, I guess as a workaround for now you can use the selenium runner. I wonder if we don't track passing expectations if things improve? In many suites, that's going to be a lot of data; perhaps we can report it vs. accumulate it to reduce the number of objects in memory that we have references to.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-07-30T15:03:04Z", "contents": "Locking the jasmine core gem to 2.0.0 fixes the problem as well. It looks\nlike keeping track of the passed expectations is the problem in phantom.\nI'm not sure why it's so slow. Our test suite contains about 600 tests.\nOn Jul 30, 2014, at 6:46 AM, Rajan Agaskar notifications@github.com wrote:\nhmm, I guess as a workaround for now you can use the selenium runner. I\nwonder if we don't track passing expectations if things improve? In many\nsuites, that's going to be a lot of data; perhaps we can report it vs.\naccumulate it to reduce the number of objects in memory that we have\nreferences to.\n\u2014\nReply to this email directly or view it on GitHub\n#640 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-07-30T15:56:27Z", "contents": "My guess is if you had loads of failed expectations you'd see a similar slowdown.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-16T06:18:59Z", "contents": "One point maybe worth mentioning is that after keeping track of passed expectations, the selenium_runner broke due to circular objects. That runner then had to be patched to just ignore the circular objects but phantomjs seemed to keep working without any changes.\nGiven that you are only seeing this slowdown with the phantom runner, I'm curious if it's related to a large number of circular objects. I haven't gotten around to testing this theory yet, but figured I'd mention it since it could be relevant?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-28T22:01:27Z", "contents": "@tjarratt and I tried to reproduce this, but we were not able to find a test suite that performed worse after 5f34be4, including one with many circular objects. @rdy, do you have a representative example suite that can help us debug this issue?\nThe test suite we used for most of our investigation was based on large_test_suite_spec.js in jasmine-gem with an additional it for circular objects. We found it ran 60,000 specs in just over 2 minutes on our workstation. This suite has a lot of specs, is deeply nested but doesn't a lot of complicated expectations, spec logic, or any custom matchers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-11-21T00:59:01Z", "contents": "I don't have access to the codebase that exhibited this problem but I believe some other folks are seeing the same issue. I'll see if I can get them to comment on this issue, and possibly provide a test case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-21T01:01:05Z", "contents": "@rdy where you guys loading TypeKit or GoogleFonts into the Jasmine runner HTML? There's a known  issue with Phantom and these font libraries that slow down all tests - Capybara as well. I wonder if it's the same problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2014-11-21T01:03:57Z", "contents": "Interesting, but I don't think those fonts were being loaded, I don't have access to that test codebase right now so I can't really confirm.\nWe worked around the issue by using an earlier commit than one I referenced at the top of this commit, its really interesting that it only happens in phantom.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "neodude", "authorAssociation": "NONE", "createdAt": "2014-11-21T01:15:57Z", "contents": "I'm running into this issue as well (independently from @rdy) - definitely not loading any webfonts in our jasmine runner. Just upgraded from 2.0.0 to 2.1.2, the CircleCI jasmine portion went from 30 seconds to 3 minutes. Same slowdown locally in PhantomJS, Chrome runs in 3 seconds. 889 specs. In terms of helpers we have jasmine-underscore and jasmine-jquery.\nWhat can I do to help you guys debug this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-21T01:22:31Z", "contents": "Can you give us a super simple project that demonstrates the slowdown? Looking above, we've failed at finding such a case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "neodude", "authorAssociation": "NONE", "createdAt": "2014-11-21T02:39:15Z", "contents": "Got a repo case! Take a look at https://github.com/neodude/jasmine-performance-test, the salient file is large_test_suite_spec.js.\nIt's latest Rails (4.1.8) and jasmine-core (2.1.2). I adapted large_test_suite_spec.js, but instead of a simple true === true assertion, I asserted that two jQuery elements are not equal. Used latest jQuery too (2.1.1).\nThis suite has 500 passing specs, runs in ~0.3s on Chrome, and 1m46s in rake jasmine:ci.\nMy first guess would be the complex - possibly circular? - jQuery objects used in the expectation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "neodude", "authorAssociation": "NONE", "createdAt": "2014-11-25T02:40:14Z", "contents": "Pegged jasmine-core to this ref, and it totally fixed the performance issue in phantomjs. Thanks @slackersoft!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 641, "url": "https://github.com/jasmine/jasmine/issues/641", "title": "Adding because descriptions to expect failures", "contents": "In the past and elsewhere there has been discussion of adding .because property to expect chain for clearer failure classification. The proposed syntax was:\nexpect(true).toEqual(false).because('yes it is')\n\nIs there a possibility that this feature could be introduced, a reason it has not been introduced and has the team ever estimated how much work the feature would be to implement? In select cases this could greatly improve the speed of resolving causes for breaks, especially if you're trying to find the cause of failures from a CI log etc.", "createdAt": "2014-07-30T07:49:38Z", "updatedAt": "2019-01-24T01:59:17Z", "closedAt": "2014-09-07T04:10:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aleksihakli", "authorAssociation": "NONE", "participants_count": 36, "participants_data": [{"login": "aleksihakli", "company": "Vincit"}, {"login": "rabbitjar", "company": null}, {"login": "fczbkk", "company": "@InlineManual "}, {"login": "PaulL1", "company": null}, {"login": "RobertChrist", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "philipbulley", "company": null}, {"login": "fpirsch", "company": null}, {"login": "avrelian", "company": null}, {"login": "NPC", "company": null}, {"login": "davidemannone", "company": "ML Associati"}, {"login": "michaelhogg", "company": null}, {"login": "ronanamsterdam", "company": "self(employed&&motivated)"}, {"login": "matthewjh", "company": null}, {"login": "guy-mograbi-at-gigaspaces", "company": "GigaSpaces"}, {"login": "pwojnowski", "company": "Defun"}, {"login": "chadjaros", "company": "@tempuslabs "}, {"login": "matanh-tzmedical", "company": null}, {"login": "pidupuis", "company": null}, {"login": "gyandeeps", "company": "Cerner"}, {"login": "donaldpipowitch", "company": "@Mercateo"}, {"login": "keithdtyler", "company": "@oculusvr @qanalysts"}, {"login": "aarongreenwald", "company": "@microsoft"}, {"login": "carlin-q-scott", "company": null}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "codeami", "company": null}, {"login": "MatthewHerbst", "company": "@govlist "}, {"login": "jfrioux", "company": "Mantor Organization"}, {"login": "johnhight", "company": "john hight"}, {"login": "ValentinHruzinski", "company": null}, {"login": "ErgoSoftUK", "company": "Ergonomic Software Solutions"}, {"login": "sneakyfildy", "company": "IPONWEB"}, {"login": "RobertDiPaolo", "company": "coralbay.tv"}, {"login": "resah", "company": null}, {"login": "Scharnvirk", "company": null}, {"login": "abdulrahman-khankan", "company": "Cambio Healthcare Systems"}], "comments_count": 57, "comments_data": [{"authorLogin": "rabbitjar", "authorAssociation": "NONE", "createdAt": "2014-07-30T08:30:53Z", "contents": "For some reasons I have multiple asserts within single spec (mostly comparing boolean values) and I'm feeling puzzled as something like this is missing.\n+1", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "fczbkk", "authorAssociation": "NONE", "createdAt": "2014-07-30T08:32:42Z", "contents": "Real life example, where this would be handy: I have a JS library, that tries to generate unique CSS selector for any element. I test for various cases. But the ultimate test is a loop, that goes through every element in very complex document.\nRight now, if the test does not pass, it just tells me that false should be true and I have to debug it by hand. It would be great if I could add meaningful debug data to the failing message. Like this:\nexpect(x.testSelector element, selector)\n  .toBe(true)\n  .because(\"Element '#{element.outerHTML}' returned selector '#{selector}'.\")", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "PaulL1", "authorAssociation": "NONE", "createdAt": "2014-07-30T09:51:21Z", "contents": "I also would have use for this.  I think it's perhaps possible to get this effect by pushing the \"it\" clause into the loop - so for example in @fczbkk's example above, it could be rewritten as:\nforEach(element in elements) {\n  it (\"Element '#{element.outerHTML}' returned selector '#{selector}'.\", function() {\n    expect(x.testSelector element, selector).toBe(true);\n  })\n}\n\nIn my case I was pushing the verification of the page into a helper function, and I as a matter of principle don't like putting the it clause into a sub-function, it makes it hard to read the tests, and gives difficulty with nesting describes v's its - you have to know the contents of the helper function to know whether you've got an embedded it.\nI would therefore similarly appreciate the .because syntax.\nIn the interim, another approach I have identified as a work-around is to use custom matchers, which works fine when I'm only testing truthy values (i.e. low risk of me getting bitten by some obscure behaviour that the standard matchers might have dealt with).\nSomewhere central I put a beforeEach:\nbeforeEach(function() {\n  var matchers = {\n    toEqualBecause: function( value, message ) {\n      this.message = function() {\n        return \"Expected '\" + this.actual + \"' to equal '\" + value + \"' because \" + message;  \n      };\n\n      return this.actual == value;  \n    }\n  };\n\n  this.addMatchers(matchers);\n});\n\nAnd then my individual expect statements become:\nexpect( myElement.isDisplayed() ).toEqualBecause( true, myMessage );\n\nThis gives me an output of:\nExpected 'false' to equal 'true' because input_status\n\nWhich adequately gives me the context I need.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RobertChrist", "authorAssociation": "NONE", "createdAt": "2014-08-20T14:29:40Z", "contents": "You rock Paul!  I know pivotal has not included this feature in the past on the assumption that it allows poor test code, but it seems to me that they either need to include a feature like TestCase from nunit, or add this 'because' feature.  They both address the same valid concern in different manners, but not having either is downright silly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PaulL1", "authorAssociation": "NONE", "createdAt": "2014-08-20T20:33:07Z", "contents": "Rather awesome of you to say so Robert!  I also wrote a blog post on this same topic, which may be of interest to people who come across this.  http://technpol.wordpress.com/2014/08/03/protractor-and-custom-failure-messages-from-jasmine-expect/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-26T19:57:17Z", "contents": "Could this be solved by writing a custom matcher that better describes the error? So you would have something like (beware, untested code):\nexpect(x.testElement).toHaveSelector(selector)\n\nor:\nexpect(myElement).toBeDisplayed()\n\nBoth of which jasmine could turn into a nice message, or you could have the custom matcher itself provide you with whatever message you want.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "philipbulley", "authorAssociation": "NONE", "createdAt": "2014-09-01T11:31:24Z", "contents": "\ud83d\udc4d\nFYI... Chai supports this as an assert param:\n\nIn all cases, the assert style allows you to include an optional message as the last parameter in the assert statement. These will be included in the error messages should your assertion not pass.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-07T04:10:46Z", "contents": "Many of jasmines built-in matchers will actually do something similar. It's not documented behavior, and so could change, so I wouldn't rely on it. How it works currently is:\n\nThe matcher expects to see n parameters passed to it and ignores any extras.\nYou pass n + 1 parameters.\nWhen the matcher fails, and doesn't provide a custom message\nJasmine creates a default failure message based on all of the parameters passed to the expectation.\n\nThis means that expect(1).toEqual(2, 'because of  stuff') ends up printing out:\nExpected 1 to equal 2, 'because of stuff'.\n\nPresumably though, real code would look something more like:\nexpect(myObj.someProp).toEqual(3, 'this means foo');\n\nIn this case, jasmine would encourage you to instead write a custom matcher so you would have something like:\nexpect(myObj).toBeFoo();\n\nor:\nexpect(myObj).toBeFoo(3);\n\nAnd then the custom matcher can specify any failure message you want.", "reactions_count": 15, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP"]}, {"authorLogin": "fpirsch", "authorAssociation": "NONE", "createdAt": "2014-10-01T14:50:56Z", "contents": "\ud83d\udc4d\nThx @slackersoft ! Unfortunately this is a hack, it doesn't work with all matchers, and the .because syntax would be so much cleaner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-22T20:13:36Z", "contents": "The second parameter is a hack, but the custom matcher is fully supported and is more what jasmine expects you to do in this case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "avrelian", "authorAssociation": "NONE", "createdAt": "2014-10-24T16:16:26Z", "contents": "You can use my library - jasmine-custom-message.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "fpirsch", "authorAssociation": "NONE", "createdAt": "2014-10-24T16:54:51Z", "contents": "Nice ! The since syntax is elegant.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RobertChrist", "authorAssociation": "NONE", "createdAt": "2014-10-24T17:13:20Z", "contents": "+1 to avrelian, nice", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NPC", "authorAssociation": "NONE", "createdAt": "2014-12-15T23:44:24Z", "contents": "Too bad this is closed, it would be nice to have this without any additional libraries (though I do appreciate all the useful suggestions made in this thread, community rocks!)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davidemannone", "authorAssociation": "NONE", "createdAt": "2015-01-17T19:53:18Z", "contents": "So I did it for my own for jasmine 2.0 and the related definitely-typed and I've posted it here: https://github.com/davidemannone/jasmine2.0-explained\nHere is how to use it: expect(SOMETHING).toEqual(WHAT-EXPECTED).byFailReport(\"YOUR-CUSTOM-REPORT!\");\nand this reports only in case of the match fails this: \"Expected SOMETHING to be WHAT-EXPECTED. >YOUR-CUSTOM-REPORT!<\nFor more details read the Readme.Me file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davidemannone", "authorAssociation": "NONE", "createdAt": "2015-01-23T06:57:34Z", "contents": "Thank you very much!\n\u201cBecause\u201d or other form is not important (I can change my function name\nimmediately), but I hope they will introduce something like that officially.\nFrom: Eldar [mailto:notifications@github.com]\nSent: venerd\u00ec 23 gennaio 2015 02:56\nTo: jasmine/jasmine\nCc: Davide Mannone\nSubject: Re: [jasmine] Adding because descriptions to expect failures (#641)\n+1 for the \"because\" !!!!!!!\n\u2014\nReply to this email directly or view it on GitHub\n#641 (comment)\n.https://github.com/notifications/beacon/AGxzllZpxEnfhsB8b6XCl1EeaNdYIG73ks5\nnkaGagaJpZM4CSSA0.gif", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "michaelhogg", "authorAssociation": "NONE", "createdAt": "2015-08-04T16:38:38Z", "contents": "+1 for the proposed .because() syntax.\n+1 to @avrelian for his nice library!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ronanamsterdam", "authorAssociation": "NONE", "createdAt": "2015-09-08T20:34:22Z", "contents": "+1 for because()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthewjh", "authorAssociation": "NONE", "createdAt": "2015-09-25T10:07:55Z", "contents": "+1\nWould be useful to make stuff like this:\n    expect(this.formElement.isPresent()).toBe(true);\n    expect(this.usernameInputElement.isPresent()).toBe(true);\n    expect(this.passwordInputElement.isPresent()).toBe(true);\n    expect(this.submitButtonElement.isPresent()).toBe(true);\n\nmore meaningful in the test/ci logs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-25T18:08:59Z", "contents": "@matthewjh I think what you want for that situation is just a toBePresent custom matcher. This will give you a default message of \"Expected  to be present\". You would also have the ability to specify a custom message if desired. See the docs here: http://jasmine.github.io/edge/custom_matcher.html", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "guy-mograbi-at-gigaspaces", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-25T20:14:08Z", "contents": "@slackersoft - how is your solution better than just having the feature implemented?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fpirsch", "authorAssociation": "NONE", "createdAt": "2015-09-26T09:32:45Z", "contents": "@guy-mograbi-at-gigaspaces \ud83d\udc4d\n@slackersoft Having this feature implemented would be much more versatile than having to code a custom matcher for every single use case.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "matthewjh", "authorAssociation": "NONE", "createdAt": "2015-09-27T19:17:37Z", "contents": "Indeed. Writing a custom matcher for the sole purpose of more descriptive messages doesn't seem like a brilliant idea, and, more to the point, every time you want a custom message, especially when a more general solution has been proposed.\nBeing able to write custom messages inline in tests will also improve readability of the tests.\njasmine-custom-message works well, but why can't we implement this in jasmine?", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-27T17:41:45Z", "contents": "In general jasmine prefers to have a small but extensible external interface. This allows jasmine's codebase to easier for us to maintain and add features that can only be added in core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pwojnowski", "authorAssociation": "NONE", "createdAt": "2015-11-26T14:51:15Z", "contents": "Hi. Is this feature going to be implemented?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chadjaros", "authorAssociation": "NONE", "createdAt": "2015-12-08T15:39:22Z", "contents": "+1 for .because()\nHow is this not a thing yet? srsly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matanh-tzmedical", "authorAssociation": "NONE", "createdAt": "2016-02-05T20:35:39Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pidupuis", "authorAssociation": "NONE", "createdAt": "2016-02-11T15:29:53Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gyandeeps", "authorAssociation": "NONE", "createdAt": "2016-02-18T16:31:05Z", "contents": "Actually felt the need for this feature as in my case I usually have 3-4 expect statements inside test case. So during failure its very difficult to tell which expect is failing.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2016-03-04T12:40:49Z", "contents": "It would be so nice to have .because(). The output of expect(myObj.someProp).toEqual(3, 'this means foo'); is suboptimal and I'd never have expected this to work... and it is not really documented, right?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "keithdtyler", "authorAssociation": "NONE", "createdAt": "2016-03-14T17:42:36Z", "contents": "I feel the resistance to this feature is based on a cultural difference between unit-testing developers, who are ideally dealing with low-level, simple in / simple out functions to test, and functional test engineers, who are commonly dealing with user-flow scenarios in which simple acts or operational sequences can result in complex outcomes that need to be evaluated in full.\nSay for example I write a UI test that looks  up an item and expects certain values of that item to be returned, as well as other conditionals. So when I do A, B, and then C, I expect to see D, E, and F. So I need three expects, for example:\nexpect(element(by.xpath(\"tr/td[1]\"))).toEqual('Bob');\nexpect(element(by.xpath(\"tr/td[2]\"))).toEqual('true');\nexpect(element(by.xpath(\"tr/td[3]\"))).toEqual('true');\n\nIf either of the latter two asserts fail, all I will see in the output is:\nFailed\n    Expected false to be true.\n\nBut this doesn't help me identify which of the assertions failed. I then need to run back to the code to examine which assertion failed. This is pretty inconvenient in a CI environment, where the person reviewing the CI report doesn't have ready access to the code, or which might not include the lines reflecting failed line in a summary view.\nBut if I could write my asserts like:\nexpect(element(by.xpath(\"tr/td[1]\"))).toEqual('Bob').because('Bob's name is Bob');\nexpect(element(by.xpath(\"tr/td[2]\"))).toEqual('true').because('Bob is a supervisor so the supervisor    column should say \"true\"');\nexpect(element(by.xpath(\"tr/td[3]\"))).toEqual('true').because('Bob is full time so the full-time column should say \"true\"');\n\nNow if the second assert fails, I will see something like:\nFailed\n    Expected false to be true (because: Bob is full time so the full-time column should say \"true\")\n\nand I can clearly and unambiguously see what the problem was without having to grab a shovel and go digging.", "reactions_count": 64, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "aarongreenwald", "authorAssociation": "NONE", "createdAt": "2016-05-10T10:55:07Z", "contents": "It feels heavy to create a custom matcher when all you really want is a custom message to make debugging easier. The purpose of tests is to make our workflow more smooth and more reliable, so the ability to quickly write expressive tests that output clear messages is very valuable.\nn-thing this request.", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "carlin-q-scott", "authorAssociation": "NONE", "createdAt": "2016-06-27T20:58:26Z", "contents": "Is this the only assertion library that doesn't provide custom failure messages? I've used many and this is the only one I've come across. It seems unreasonable to not implement such a useful feature that requires such a small amount of code.", "reactions_count": 14, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2016-08-16T15:08:18Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2016-08-17T12:38:22Z", "contents": "If I find myself in a situation where I have multiple asserts in one test where I really want to be clear as to what assert failed and why, I split my test up into multiple tests an wrap them in their own describe block with a beforeEach for their shared data.\nFor example, this:\ndescribe('returnWhateverIsGiven', function() {\n    it('should return whatever is given', function() {\n        let someobject = new SomeObject();\n        expect(someObject.returnWhateverIsGiven(true)).toBe(true);\n        expect(someObject.returnWhateverIsGiven(false)).toBe(false);\n    });\n});\nwould become\ndescribe('returnWhateverIsGiven', function() {\n    beforeEach(function() {\n        this.someobject = new SomeObject();\n    });\n    it('should return true when given true', function() {\n        expect(this.someObject.returnWhateverIsGiven(true)).toBe(true);\n    });\n    it('should return false when given false', function() {\n        expect(this.someObject.returnWhateverIsGiven(false)).toBe(false);\n    });\n});\nThis way it's clear when a specific assertion fails, because each assertion has their own test name.", "reactions_count": 17, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "chadjaros", "authorAssociation": "NONE", "createdAt": "2016-08-17T14:05:58Z", "contents": "@jaapz This is a workaround which requires writing more code (and more complex code) than would be otherwise required if this feature were implemented.\nFrankly I find it ridiculous that this discussion is still going on.", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "fpirsch", "authorAssociation": "NONE", "createdAt": "2016-08-17T14:48:13Z", "contents": "@jaapz more code, nested tests... This is exactly what new test frameworks like AVA try to avoid:\n\nIf you think you need nested tests or groups, you're probably better off splitting it up into multiple files (and get the benefit of parallelism) or simplifying your tests.\navajs/ava#222", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keithdtyler", "authorAssociation": "NONE", "createdAt": "2016-08-17T15:06:11Z", "contents": "@jaapz That's great for unit tests, not great for functional tests, especially UI flow tests. Especially when you're hoping for functional test results in a CI situation within a certain period of time (whether or not this is a good idea is not usually up to the test developer), you need to keep your tests short, not exhaustive. Thus, multiple asserts in a single flow test is precisely what the doctor ordered - and it's no good if the doctor can't identify the symptoms.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "PaulL1", "authorAssociation": "NONE", "createdAt": "2016-08-17T21:48:34Z", "contents": "I think one of the comments earlier was pretty clear that this actually works, it's just undocumented.  You can write\ndescribe('returnWhateverIsGiven', function() {\n    it('should return whatever is given', function() {\n        let someobject = new SomeObject();\n        expect(someObject.returnWhateverIsGiven(true)).toBe(true, 'should return true when given true');\n        expect(someObject.returnWhateverIsGiven(false)).toBe(false, 'should return false when given false');\n    });\n});\n\nAnd it just works because if it fails it prints out all the parameters given to the matcher, even though one of those parameters was superfluous.", "reactions_count": 27, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "HOORAY", "HEART", "THUMBS_UP", "HOORAY", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "HEART", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "keithdtyler", "authorAssociation": "NONE", "createdAt": "2016-08-17T21:57:00Z", "contents": "@PaulL1 Agreed, it works rather well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ronanamsterdam", "authorAssociation": "NONE", "createdAt": "2016-08-18T18:57:51Z", "contents": "@PaulL1 , @keithdtyler it works, it's undocumented, it can be deprecated at any given point. There should be official API support for this, coz obviously the demand is here.\nAlso confused why this discussion is still going. C'mon guys)", "reactions_count": 17, "reactions_data": ["HOORAY", "HOORAY", "HOORAY", "HOORAY", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "codeami", "authorAssociation": "NONE", "createdAt": "2016-08-20T11:33:45Z", "contents": "+1", "reactions_count": 2, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "MatthewHerbst", "authorAssociation": "NONE", "createdAt": "2017-05-09T21:07:44Z", "contents": "@slackersoft any chance this is still on the radar of the project? As far as I can tell the undocumented version above doesn't work (not that anyone should be relying on it, and also, I'm using Jest so that could impact it), and @avrelian's jasmine2-custom-message seems to be not maintained anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "avrelian", "authorAssociation": "NONE", "createdAt": "2017-05-09T21:54:58Z", "contents": "@MatthewHerbst (re jasmine2-custom-message) since it works there is no need of fixing", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jfrioux", "authorAssociation": "NONE", "createdAt": "2017-05-10T01:20:46Z", "contents": "I use:\nexpect(something).toBe(likeThis, \"because that's how it should be.\")\nAnd it fits my need and solve this problem for me.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "MatthewHerbst", "authorAssociation": "NONE", "createdAt": "2017-05-10T01:59:34Z", "contents": "@jfrioux unfortunately I'm not willing to commit my entire company's code base to an undocumented feature than could be removed at any time (and as noted above, doesn't seem to work for me anyways).", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "keithdtyler", "authorAssociation": "NONE", "createdAt": "2017-05-10T17:46:08Z", "contents": "@MatthewHerbst  I suspect not all expects work that way, especially any of the custom expects introduced by Jest.\nI don't at all disagree with the points about it being undocumented and potentially unsupported later. I would want to both support and encourage this undocumented feature to be made official and a part of all expects. I would even support enhancing the functionality to allow you to optionally include the expected and actual values as well -- perhaps even as part of a sprintf-style format.", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "johnhight", "authorAssociation": "NONE", "createdAt": "2017-06-28T02:01:43Z", "contents": "Having just stepped into this issue, I still see no solution to creating a custom failure message that works with Typescript. What am I missing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ValentinHruzinski", "authorAssociation": "NONE", "createdAt": "2017-09-04T09:30:37Z", "contents": "But it don't work with typescript 2.4.* (in my case 2.4.2). May be somebody deside this problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ErgoSoftUK", "authorAssociation": "NONE", "createdAt": "2017-11-29T10:46:29Z", "contents": ".toBe(expected, output) seems to work OK, however .toEqual(expected, output) does not.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-07T01:29:22Z", "contents": "Please see earlier in this thread for more discussion on this. Neither case is officially supported by Jasmine.", "reactions_count": 7, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "sneakyfildy", "authorAssociation": "NONE", "createdAt": "2018-07-04T10:25:26Z", "contents": "We need custom error messages. This is ridiculous that this \"jasmine\" thing do not support it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RobertDiPaolo", "authorAssociation": "NONE", "createdAt": "2018-07-20T14:57:04Z", "contents": "Wow, this is the first test framework I've used (and I've used many in many different languages) that doesn't have support for custom error messages for asserts / expectations. This is a basic requirement for any test framework and should be available out the box IMHO, it shouldn't require custom code or third party libraries, etc.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "resah", "authorAssociation": "NONE", "createdAt": "2018-07-30T15:15:05Z", "contents": "Please reconsider to add .because !\nWe are also running integration tests with protractor and jasmine, which run on complete scenarios. Itis painful to search for the actual cause when a scenario fails and we have to check all assertions.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Scharnvirk", "authorAssociation": "NONE", "createdAt": "2018-10-08T08:09:16Z", "contents": ".toBe(expected, output) seems to work OK, however .toEqual(expected, output) does not.\n\nThanks. I have the same issue, but I think I can live with toBe - series expects... I have digged a bit into jasmine's code but I can't really see any reason for which toEqual wouldn't work.\n\nPlease see earlier in this thread for more discussion on this. Neither case is officially supported by Jasmine.\n\nPlease reconsider supporting this feature. It is really mandatory for complex test cases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-10T20:01:40Z", "contents": "I do hear the need for some way to tell Jasmine some sort of description of the value being checked, but I don't think it will be as an additional argument to the matcher itself. I'm leaning more toward something like what is suggested here, but I think because might be the wrong word for it. I would prefer something that will work for all matchers without them having to build in support for it in customizing their failure messages further.", "reactions_count": 3, "reactions_data": ["HOORAY", "HOORAY", "HOORAY"]}, {"authorLogin": "abdulrahman-khankan", "authorAssociation": "NONE", "createdAt": "2019-01-24T01:59:17Z", "contents": "Since Jasmine 3.3, there's a way to do it through withContext\nExample: expect(someValue).withContext('expected someValue to be true...').toBe(true)\nSource: #1457 (comment)", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "HOORAY", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY"]}], "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 642, "url": "https://github.com/jasmine/jasmine/issues/642", "title": "Get variable value from spec in reporter", "contents": "I have created a jasmine reporter but unable to figure out how do I pass some variable values from spec to reporter.\nFor ex: show some data/form-fields in report.\nMyReporter.prototype.reportSpecResults =\n    function reportSpecResults(spec) {\n        //how to get some value here from spec?\n}\n\nI have tried to lookup the spec object, but it doesnt seem to contain the information I need. is there a way to accomplish this?", "createdAt": "2014-07-30T09:32:24Z", "updatedAt": "2014-08-05T22:41:39Z", "closedAt": "2014-08-05T22:41:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vikramsoni2", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vikramsoni2", "company": "Baxter International"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-05T20:20:10Z", "contents": "The spec object that gets passed to the reporter is jasmine's internal representation of what a spec is. It includes things like the full description, how many passing and failing expectations there were, whether the spec passed. It doesn't include anything else about what the spec actually did.\nIn jasmine 1.3, the this for your specs was the actual spec object so you could get some of this information in the reporter, but for 2.0 we have intentionally made the this object be a distinct value so tests don't clobber anything on the spec object itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vikramsoni2", "authorAssociation": "NONE", "createdAt": "2014-08-05T22:41:39Z", "contents": "Thanks for your response, I figured out myself that I could augment the spec object and add any properties to it inside the spec, and then I can access this properties in the argument object passed into reportSpecResults function. Thanks !", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 644, "url": "https://github.com/jasmine/jasmine/issues/644", "title": "grouping related specs with describe - merge multiple files", "contents": "Hi,\nI was hoping for multiple calls to the describe with the same string would make the tests appear under the same heading.\nFile2.js:\n    describe('Load', ...);\nFile2.js:\n    describe('Load', ...);\nThere will be two separate headings for 'Load'.\nThanks,", "createdAt": "2014-08-01T12:53:01Z", "updatedAt": "2014-08-18T20:35:04Z", "closedAt": "2014-08-18T20:35:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mbana", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mbana", "company": "BanaIO Ltd"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-18T20:35:04Z", "contents": "Jasmine doesn't really know that two describes with the same text are definitely related, so it doesn't try to do any merging and just leaves the groups as specified by calls to describe. If you really want to do something like this, you should be able to have a single file that contains the actual describe call that calls out to functions that have all the nesting in them you want:\nfunction section1() {\n    it('does stuff', function() {\n    });\n}\nfunction section2() {\n    it('does other things', function() {\n    });\n}\ndescribe('includes other stuff', function() {\n    section1();\n    section2();\n});\nClosing this, as I don't think we want to maintain the added complexity of merging describe calls.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 645, "url": "https://github.com/jasmine/jasmine/issues/645", "title": "JsHamcrest need support for better assertion", "contents": "Hi had this hope of seeing better assertion mechanism similar to Hamcrest assertion done for Java. It seems JsHamcrest does provide that.", "createdAt": "2014-08-02T22:26:40Z", "updatedAt": "2014-08-04T20:32:54Z", "closedAt": "2014-08-04T20:32:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "braghome", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "braghome", "company": "Carita Revolution"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-04T20:32:54Z", "contents": "Jasmine's matchers use a different syntax than Hamcrest, and should be just as extensible. There is no reason you can't use JsHamcrest within jasmine.\nYou can either write a jasmine matcher that will call the JsHamcrest matches function, or just raise an error when JsHamcrest returns false for matches to fail the spec.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 648, "url": "https://github.com/jasmine/jasmine/issues/648", "title": "Scope of test functions", "contents": "Hi everyone, first, I really love the new version of jasmine, its very easy and human with the enhacements,\nbut I have the problem with testing this escenario in my Spec:\nhttps://github.com/yosonjs/yosonjs/blob/master/test/spec/SpecCore.js#L30\nI put the \"x\" because i don't want error when travis-ci execute\nThe basic funcionality of the library depuring it works here if you put an browser the little demo:\nhttps://github.com/yosonjs/yosonjs/blob/master/examples/debug-area/welcome.html\nI think by the scope of the function but its a escenario very especial.\nNote: the steps of have the escenario you can follow here:\nhttps://github.com/yosonjs/yosonjs/blob/master/DEVELOPMENT.md", "createdAt": "2014-08-03T21:23:52Z", "updatedAt": "2014-08-04T22:50:51Z", "closedAt": "2014-08-04T22:50:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "andru255", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "andru255", "company": "@frontend-labs "}], "comments_count": 1, "comments_data": [{"authorLogin": "andru255", "authorAssociation": "NONE", "createdAt": "2014-08-04T21:41:54Z", "contents": "My apologies of this issue, now it works! I solved the spec, and here the solution:\nhttps://github.com/yosonjs/yosonjs/blob/master/test/spec/SpecCore.js#L28\nThe error was when I declare an module empty, and create a new module with the same name, but it solved :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 649, "url": "https://github.com/jasmine/jasmine/issues/649", "title": "Expectation on spy fails", "contents": "Can anyone tell why the expectation fails, but the call gets through.\nModule definition\n(function() {\n    'use strict';\n    var module = angular.module(\"my.fancyStuff\", []);\n\n    module.factory('service', function() {\n        var timeout;\n\n        var service = {\n            start: function (scope) {\n            }\n        };\n\n        return service;\n    });\n\n    module.controller('FancyStuffCtrl', function ($scope, $rootScope, service) {\n        $rootScope.$on('$stateChangeStart', _.partial(service.start, $scope));\n    });\n}());\n\nTest\ndescribe('module', function () {\n    \"use strict\";\n\n        var mock;\n\n    mock = {\n        start: function() {\n            console.log('reached start');\n        }\n    };\n\n    beforeEach(module('my.fancyStuff', function ($provide) {\n        $provide.factory('service', function () {\n            return mock;\n        });\n    }));\n\n    describe('FancyStuffCtrl', function () {\n        var rootScope, scope, ctrl;\n\n        beforeEach(inject(function ($controller, $injector) {\n            rootScope = $injector.get('$rootScope');\n            scope = rootScope.$new();\n            ctrl = $controller('FancyStuffCtrl', { $scope: scope });\n        }));\n\n        it('delegates events from $rootScope', function () {\n            spyOn(mock, 'start').and.callThrough();\n\n            rootScope.$broadcast('$stateChangeStart');\n\n            expect(mock.start).toHaveBeenCalled();\n        });\n    });\n});", "createdAt": "2014-08-08T09:35:49Z", "updatedAt": "2014-08-14T08:22:18Z", "closedAt": "2014-08-13T19:57:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "anho", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "anho", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-13T19:57:42Z", "contents": "It doesn't look like this is an issue in jasmine itself. The problem is that the _.partial call closes over the version of mock.start() that exists when the controller is instantiated, so when spyOn replaces the start property, it doesn't affect the $stateChangeStart handler. If I change the controller to manually close over the call instead of using _.partial it passes. Like so:\nmodule.controller('FancyStuffCtrl', function ($scope, $rootScope, service) {\n    $rootScope.$on('$stateChangeStart', function() {\n      service.start($scope);\n    });\n});\n\nAlso, since this is really more of how do I test question and not an issue with jasmine itself, the (jasmine-js)[jasmine-js@googlegroups.com] google group is probably the more appropriate place to ask questions like this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "anho", "authorAssociation": "NONE", "createdAt": "2014-08-14T08:22:18Z", "contents": "I came back to that issue yesterday and found a similar solution. That is, to instantiate the controller after creating the spies. This way _.partial gets the reference to the spy function not the one from the actual mock.\nNevertheless, thanks for the effort to look into my problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 652, "url": "https://github.com/jasmine/jasmine/issues/652", "title": "toHaveBeenCalledWith fails to match parameter object methods", "contents": "Actual code:\nscope.toggle({ getAttribute: function (attName) { return PRIMARY; } });\nUnit Test code:\nspyOn(scope, \"toggle\");\nexpect(scope.toggle).toHaveBeenCalledWith({ getAttribute: function (attName) { return PRIMARY; } });\nFails with the message:\n\"Expected spy toggle to have been called with [ { getAttribute: Function } ] but actual calls were [ { getAttribute: Function } ].\"", "createdAt": "2014-08-18T15:47:18Z", "updatedAt": "2016-11-10T02:42:09Z", "closedAt": "2014-08-20T21:35:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vs0562", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "vs0562", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "bennyn", "company": "@wireapp"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "dm123455", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-20T21:35:10Z", "contents": "This is failing because Function equality is hard and sometimes inconsistent between environments. Some envs like to just toString a Function, but that leads to other problems. Are you really testing that you called toggle with the same instance of the function, for example.\nJasmine is behaving as expected. I'm going to close this issue.\nWhat are you trying to test here? That toggle works? Is that your function? I suggest moving this question to the Jasmine mailing list for tips/tricks/suggestions on how to test what you're actually trying to do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bennyn", "authorAssociation": "NONE", "createdAt": "2015-04-02T17:04:43Z", "contents": "I know that this issue is a few \"days\" old but is there any way to use toHaveBeenCalledWith which ignores the method check of objects or uses at least the same approach to combine to methods of an object?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-02T19:51:32Z", "contents": "The toHaveBeenCalledWith matcher uses jasmine's equality functionality to determine if the parameters are a match. So you should be able to either setup a custom equality tester or use an asymmetric equality tester for the particular instance you're checking.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dm123455", "authorAssociation": "NONE", "createdAt": "2016-08-01T09:50:46Z", "contents": "We used to use Teaspoon 0.9.1 and 'toHaveBeenCalledWith' worked perfectly then, but after upgrading to teaspoon-jasmine 2.3.4, all our tests having 'toHaveBeenCalledWith' started failing with the same error as stated above.\nExample:\nExpected spy toggleButtonText to have been called with [ ({ context: HTMLNode, selector: '#view-providers' }), 'organization', false ] but actual calls were [ ({ context: HTMLNode, selector: '#view-providers' }), 'organization', false ]\nAny idea as how I can fix them?\n@infews  @slackersoft\nThanks in advance for the help!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-10T02:42:09Z", "contents": "Unfortunately, I don't have any insight into Teaspoon and what else might have changed in its versions.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 653, "url": "https://github.com/jasmine/jasmine/issues/653", "title": "Jasmine test for AJAX and function that does not return any value", "contents": "1.Could you please say how to check the variable value inside the function\neg. function(data)\n{\n//...\nvar max=report;\n//....\n}\nHere in the above function, I want to check the value of max using jasmine test cases.\n2.How to check the ajax request using jasmine test cases\nexample:  request = $.ajax({\ntype: \"POST\",\nurl: 'login/index',\ndata: JSON.stringify(data),\ncontentType: 'application/json; charset=utf-8',\ndataType: 'json',\nsuccess: function (data) {\n//functions\ntext();\nerror();\n}\n});", "createdAt": "2014-08-20T12:28:14Z", "updatedAt": "2014-08-20T20:19:45Z", "closedAt": "2014-08-20T20:19:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "RenugaP", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "RenugaP", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-20T20:19:45Z", "contents": "Thanks for you interest in jasmine. This sounds like more of a how to test question than an actual issue with jasmine itself. You'll probably have better luck on the jasmine-js mailing list", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 654, "url": "https://github.com/jasmine/jasmine/issues/654", "title": "input value does not get updated when keypress simulated", "contents": "I don't know if this is really jasmine's issue but here's what I found:\nvar input = $(\"input\", element);\n    expect(input.length).toBe(1);\n\n    var keyVal = 111;   // 'o'\n    input.trigger({\n        type: 'keypress', keyCode: keyVal, which: keyVal, charCode: keyVal\n    });\n    keyVal = 110;   // 'n'\n    input.trigger({\n        type: 'keypress', keyCode: keyVal, which: keyVal, charCode: keyVal\n    });\n    keyVal = 101;   // 'e'\n    input.trigger({\n        type: 'keypress', keyCode: keyVal, which: keyVal, charCode: keyVal\n    });\n\n    expect(input.val()).toBe(\"one\"); //  !!! FALSE\n\nBut if I run this in browser input's value gets updated!\nPS. I run this test with Chutzpah in VS2013 test runner.", "createdAt": "2014-08-20T15:13:47Z", "updatedAt": "2014-08-20T20:17:53Z", "closedAt": "2014-08-20T20:17:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alvipeo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alvipeo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-20T20:17:53Z", "contents": "I don't think this is an issue with jasmine. I'm surprised you're seeing this working in any browser unless there is javascript code listening for the keypress event and updating the value of the input. jQuery events only really call the event callbacks that are registered for that event, and don't necessarily perform the action.\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 655, "url": "https://github.com/jasmine/jasmine/issues/655", "title": "Interval handler can't clear it's own interval", "contents": "If the function called by an interval calls clearInterval for the same interval, it isn't cleared.\nHow to Reproduce\n\nInstall jasmine's clock\nStart an interval who's handler contains a clearInterval that clears the interval just created\nMake the clock tick until the interval is triggered\n\nExample:\njasmine.clock().install();\nvar intervalId = null;\nintervalId = setInterval(function() {\n  clearInterval(intervalId);\n  console.log('tick');\n}, 1000);\njasmine.clock().tick(5000);\njasimne.clock().uninstall();\nExpected Result\nThe interval is cleared (in the example above, only one \"tick\" is printed)\nActual Result\nThe interval keeps running (in the example above, \"tick\" is printed 5 times)\nCause\nIn jasmine.js file, line 1110, function runScheduledFunctions there's the following code:\n        var funcsToRun = scheduledFunctions[currentTime];\n        delete scheduledFunctions[currentTime];\n\n        for (var i = 0; i < funcsToRun.length; ++i) {\n          var funcToRun = funcsToRun[i];\n          funcToRun.funcToCall.apply(null, funcToRun.params || []);\n\n          if (funcToRun.recurring) {\n            reschedule(funcToRun);\n          }\n        }\nSo, the code executes the following tasks in the following order:\n\nDeletes the function from scheduledFunctions\nRuns the function\nRe-adds the function to scheduledFunctions\n\nSo, if \"clearInterval\" is called during the interval's handler invocation, it will run during step 2, when the function is not present on scheduledFunctions, and so, it will not be found by \"removeFunctionWithId\" (called by clearInterval), making the interval endure.", "createdAt": "2014-08-20T16:40:43Z", "updatedAt": "2014-09-02T20:20:33Z", "closedAt": "2014-09-02T20:20:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tgirardi", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "tgirardi", "company": "Turbomarket S.A."}, {"login": "darielnoel", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "tgirardi", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-20T17:05:37Z", "contents": "Would it be a valid solution to swap the order of steps 2 and 3 (described in \"Cause\")?\nI tried with that option and the bug disappeared, but i'm not sure if I would be creating new bugs by doing so or not.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "darielnoel", "authorAssociation": "NONE", "createdAt": "2014-08-25T14:53:35Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-25T20:23:46Z", "contents": "That sounds like it would probably work. Do you have time to put together a pull request we can take a look at?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tgirardi", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-25T21:35:55Z", "contents": "@slackersoft Yes, I'll try to do it today or tomorrow.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 656, "url": "https://github.com/jasmine/jasmine/issues/656", "title": "npm package jasmine-core breaks interface in patch level release", "contents": "Upgrading jasmine-core through npm from 2.0.0 to 2.0.1 removed node_modules/jasmine-core/lib/jasmine-core/boot.js, the only way to bootstrap jasmine.\nUnsure what the expected behaviour is for browser based testing in 2.0.1 now.\nMost importantly though, please don't break the entry point in a patch level release!\nExpected behaviour:\nKeep on shipping boot.js until at least a minor version change.", "createdAt": "2014-08-21T19:34:20Z", "updatedAt": "2014-08-23T05:34:45Z", "closedAt": "2014-08-21T19:56:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cburgmer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cburgmer", "company": "ThoughtWorks"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-21T19:56:53Z", "contents": "Thanks for finding this. It looks like we got a bit too aggressive when trying to trim down the size of the package we push to npm, and forgot that sometimes node projects have html too. I just pushed the fix, I'm going to talk to @infews about getting a 2.0.2 package out asap to fix this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2014-08-21T22:18:30Z", "contents": "Thanks!\nDo notice thought that npm doesn't mean node. A lot of browser based software nowadays goes on npm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-08-23T05:34:45Z", "contents": "Just releases 2.0.2 to npm, which should fix this as well as make it a bit easier to get all of the files needed to use jasmine in an html page.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 659, "url": "https://github.com/jasmine/jasmine/issues/659", "title": "Share a standard Reporter interface?", "contents": "We on the QUnit team have been discussing the possibility of working with other JS test frameworks (e.g. Mocha, Jasmine, Intern, etc.) to agree upon a standard Reporter interface so that we could hopefully share Reporter plugins between testing frameworks.\nThis would most likely come in the form of an EventEmitter interface with an agreed upon minimum viable set of standardly-named events and associated standard set of data/details provided to each.\nWould you guys be interested in discussing this further with us?\nCross-reference issues:\n\nqunitjs/qunit#531 (original discussion)\nmochajs/mocha#1326\ntheintern/intern#257\n\ncc: @jzaefferer @Krinkle @leobalter", "createdAt": "2014-08-29T13:53:01Z", "updatedAt": "2014-09-25T20:02:38Z", "closedAt": "2014-09-25T20:02:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JamesMGreene", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "JamesMGreene", "company": "GitHub"}, {"login": "boneskull", "company": "@IBM "}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "boneskull", "authorAssociation": "NONE", "createdAt": "2014-08-30T04:47:18Z", "contents": "(please say yes)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-08-30T12:24:34Z", "contents": "I'm not philosophically opposed, as long as we're talking about a base minimum API, so that Jasmine might be able to have a superset if necessary. I can imagine this taking a bit of time, particularly if there is data that we don't currently track and don't really have access to that becomes part of the standard. Seems like a win for most people though.\nThere are a few Jasmine guiding principles that could come into conflict (avoid external dependencies, avoid DOM/Browser binding where possible): essentially we'd want to see the format be implementable in plain javascript.\n@infews, @sheelc, @jboyens, @Gerg, @tjarratt: thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "NONE", "createdAt": "2014-09-02T11:40:44Z", "contents": "Anyone from \"Team Jasmine\" who wants to join in on this discussion, please let me know.  For now, I've added @ragaskar, @infews, @sheelc, @jboyens, @Gerg, @tjarratt.\nhttps://github.com/js-reporters/js-reporters", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "NONE", "createdAt": "2014-09-02T11:44:35Z", "contents": "Discussions: https://github.com/js-reporters/js-reporters/issues/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-03T19:32:21Z", "contents": "Can you add me over there as well? Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamesMGreene", "authorAssociation": "NONE", "createdAt": "2014-09-03T20:27:41Z", "contents": "Done @slackersoft.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-25T20:02:37Z", "contents": "Closing this issue in favor of keeping the discussion in the js-reporters group", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 660, "url": "https://github.com/jasmine/jasmine/issues/660", "title": "spyObj.andReturn() chaining should be allowed to return objects in order for multiple calls", "contents": "currently\nspyOn(anObject, 'aMethod').andReturn('aValue');\nspyOn(anObject, 'aMethod').andReturn('secondValue');\n\nwould always spy the aMethod function and second one overrides the first one returning only 'secondValue' when aMethod function is called.\nExpected\nAllow chaining so that the second spy does not override the first one, but instead, it defines the order of objects to be returned on subsequent calls of the same method.\ni.e. the first call to aMethod would return 'aValue' and second method would return 'secondValue'.\nAn aesthetically better looking code would resemble\nspyOn(anObject, 'aMethod').andReturn('aValue').andReturn('secondValue')....\n\nMocking libraries in other platforms provide this capability and is not a new concept.", "createdAt": "2014-09-01T01:35:18Z", "updatedAt": "2014-09-15T20:12:34Z", "closedAt": "2014-09-15T20:12:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zhengyangyin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "zhengyangyin", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mkhanal", "company": "@constant-consulting "}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-02T20:15:05Z", "contents": "Jasmine works this way to allow specs like:\nspyOn(anObject, 'aMethod').and.returnValue('aValue');\nsomethingThatCalls();\nanObject.aMethod.and.throwError('Oops');\nsomethingElseThatCalls();\nBy replacing the previous spy strategy when you set one, we're able to have the code be consistent across all strategies.\nThat said, I see the desire for something like this, but I think passing the return values as multiple parameters to and.returnValue would allow it to continue to behave similar to the other strategies. If you want to put together a pull request that does something like that, I'd be happy to review it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mkhanal", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-12T13:09:39Z", "contents": "I've been working on this change right now\nBefore going all the way wanted to discuss the strategy that fits the roadmap.\nIf all the spy expectations (like return, throw error, call fake) could be chained as proposed, it would still satisfy the current functionality for normal use. However, something like this would behave differently.\nspyOn(anObject, 'aMethod').and.returnValue('aValue');\n// no call has been made yet\nanObject.aMethod.and.throwError('Oops'); //gets added to end of the spy plan queue\nsomethingThatCalls(); // at this point, the return value plan gets executed and not the throw error because it is in a queue.\nsomethingElseThatCalls(); //here, throw error gets executed.\n\nDo you think such a strategy is in line with the jasmine's roadmap.\nIf not, it would be better to have a matcher that I currently use for this situation for multiple return; and.returnInOrder :\nspyOn(anObject, 'aMethod').and.returnInOrder( [ returnValue1, returnValue2,...] );\n\nIt would mean that we would have equivalent methods for each of the existing ones like and.throwErrorInOrder, and.callFakesInOrder; which I do not personally prefer. It would also mean that different types of expectations in sequence would not be possible.\nWhat is the strategy that fits jasmine's roadmap ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-12T19:59:12Z", "contents": "I don't think we want to change the semantics of specifying a spy strategy, so I think the proposal to always append the newly specified strategy to the end of a list is probably not how we want to proceed. It especially doesn't make sense for callFake as there you're providing an entire fake implementation and you should be able to do whatever you want in there.\nThe primary use case for this is, I think, returnValue, so I'd be in favor of either adding an additional strategy like your returnInOrder above, or making returnValue take a variable number of arguments, and having it use them in order if more than one is specified.\nIf you want to mix and match strategies, return a value sometimes throw an Error others, you should just use callFake", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mkhanal", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-13T02:52:31Z", "contents": "Pull request #669", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 661, "url": "https://github.com/jasmine/jasmine/issues/661", "title": "How to use jasmine.any() on literal object?", "contents": "jasmine.any() looks for constructors. What if there are none?\nI know there is objectContains, but for my test, I just to make sure something is passed, and that it's a literal object. I don't necessarily care what is in it.", "createdAt": "2014-09-04T19:41:05Z", "updatedAt": "2014-09-08T17:46:21Z", "closedAt": "2014-09-08T17:46:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alex-dow", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alex-dow", "company": null}, {"login": "joshuacc", "company": "Hobsons"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2014-09-04T19:51:52Z", "contents": "Couldn't you just use jasmine.any(Object) in that case?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alex-dow", "authorAssociation": "NONE", "createdAt": "2014-09-04T19:58:17Z", "contents": "evidently not unfortunately.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2014-09-04T20:50:59Z", "contents": "This works for me: expect({}).toEqual(jasmine.any(Object));", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-07T03:32:55Z", "contents": "Given @joshuacc last comment, @v0idnull what in particular isn't working for you with jasmine.any()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alex-dow", "authorAssociation": "NONE", "createdAt": "2014-09-08T17:46:20Z", "contents": "Ok, unfortunately in my rush to fix things up, I no longer have the code that caused the problem, and I just made a battery of tests trying to break jasmine.any(Object) and failed miserably at it ;)\nso I guess it was me doing something wrong in the first place, sorry for the interruption!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 662, "url": "https://github.com/jasmine/jasmine/issues/662", "title": "mock class support", "contents": "I wrote some simple code about how to mock classes with jasmine:\nvar mockClass = function (Subject) {\n    var Surrogate = function () {\n        Surrogate.prototype.constructor.apply(this, arguments);\n    };\n    Surrogate.prototype = Object.create(Subject.prototype);\n    Surrogate.prototype.constructor = Subject;\n    return Surrogate;\n};\n\nvar My = function (a) {\n    this.init(a);\n};\nMy.prototype = {\n    init: function (a) {\n        this.setA(a);\n    },\n    setA: function (a) {\n        this.a = a;\n    }\n};\n\nvar Mock = mockClass(My);\nspyOn(Mock.prototype, \"constructor\").andCallThrough();\nspyOn(Mock.prototype, \"init\");\n\nvar m = new Mock(1);\nexpect(m instanceof My).toBe(true); //classic prototypal inheritance grants this\nexpect(m.constructor).not.toBe(My); //since it is a spy\nexpect(Mock.prototype.init).toBe(m.init);\nexpect(My.prototype.init).not.toBe(m.init); //since it is a spy\nexpect(m.constructor).toHaveBeenCalledWith(1); //calls through\nexpect(m.init).toHaveBeenCalledWith(1); //does not call through\nexpect(m.a).toBeUndefined(); //so a is not defined\nm.setA(1);\nexpect(m.a).toBe(1);\n\nspyOn(Mock.prototype, \"setA\").andCallFake(function (a) {\n    this.a = a + 1;\n}); //calls fake\nm.setA(1);\nexpect(m.setA).toHaveBeenCalledWith(1); //spy was called with 1\nexpect(m.a).toBe(2); //but fake set the value to 2\n\nI hope this solution fits to the current fluent interface of jasmine, and you can add the mockClass() function to the lib. Regards ...", "createdAt": "2014-09-05T21:58:41Z", "updatedAt": "2014-10-22T19:56:31Z", "closedAt": "2014-10-22T19:56:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "inf3rno", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "inf3rno", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-07T03:46:33Z", "contents": "I'm not sure I understand what problem this kind of an interface would solve, or why or how someone would use something like this in real life. It looks to me like you're still spying on any of the functions that you need to check.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2014-09-08T00:42:32Z", "contents": "Ohh, sorry for the poor example. This is just another approach by dependency injection, you can use one or more instances of a mocked class instead of spying on the methods of real instances. Another usage is testing constructors and creational patterns. For example you give the mocked class instead of the real one to a factory or builder or DI container, and check the steps of instantiation process. This cannot be tested with simply spyOn, because you configure the factory with the class(constructor) and not the object, and you cannot override the prototype of the real class (because that would interfere with the other tests). So one possible solution is using prototypal inheritance to test these kind of things... Not a big enhancement... ;-)\nOhh maybe you have a better solution or a recommendation how to test constructors and factories. Can you give me some advice about that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-12T19:48:04Z", "contents": "If you're testing a factory that you pass some kind of constructor into, I would recommend passing in a full stub of a constructor instead of mocking over the top of a real thing.\nIf you want to test the constructor itself, you generally don't want to mock out (spyOn) the object you're testing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-22T19:56:30Z", "contents": "I don't think we're going to implement something like this without a more compelling use case. Closing, but please comment here more if you feel like there is something more you'd like to discuss about this approach.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 664, "url": "https://github.com/jasmine/jasmine/issues/664", "title": "Add aroundEach", "contents": "Would be nice to be able to wrap execution of steps with an async function, for example wait for promise to finish.\nSomething like:\naroundEach(function() {\n  sendAsyncRequest().then(function() {\n    executeStep();\n  });\n});\n\nor:\naroundEach(function(step) {\n  sendAsyncRequest().then(function() {\n    step.execute();\n  });\n});\n\nIt exists in ruby RSpec and very useful.", "createdAt": "2014-09-09T11:28:32Z", "updatedAt": "2014-11-05T21:11:48Z", "closedAt": "2014-11-05T21:11:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adamkleingit", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "adamkleingit", "company": "@500tech "}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-09T16:49:31Z", "contents": "You can pass a done callback to your beforeEach function to do asynchronous setup like so:\n  describe('async setup suite', function(){\n    var isSetup = false;\n    beforeEach(function(done){\n      setTimeout(function(){\n        isSetup = true;\n        done();\n      }, 1);\n    });\n    it('does not run until the before is done', function(){\n      expect(isSetup).toBeTruthy();\n    });\n  });\nDoes this work for you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-05T21:11:47Z", "contents": "Async beforeEach is the supported way to accomplish this. Let us know if this doesn't work for you.\nThanks for using jasmine. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 665, "url": "https://github.com/jasmine/jasmine/issues/665", "title": "Error: 'null' is not an object (evaluating 'currentSpec.expect')", "contents": "This issue has already been posted on karma-jasmine page, but it is a jasmine issue.\nAs my test suites grew large (over 1100 specs), I started getting the following error: 'null' is not an object (evaluating 'currentSpec.expect') during test execution (using grunt + karma + karma-jasmine and testing an app written using AngularJS). The error would stop the test execution somewhere around spec #700 and report no details. It would consistently trigger during the subsequent executions. It would only disappear after I removed or disabled a spec (any spec, not necessarilly the previously added one). It seems the problem is simply with the suite being too large.\n@Mironor created a fix candidate which fixed this problem for me. If you could include it in the next 2.x version of Jasmine or fix this total blocker in some other way, I'd be much obliged.", "createdAt": "2014-09-09T11:34:56Z", "updatedAt": "2016-03-15T16:17:08Z", "closedAt": "2014-10-03T13:11:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hon2a", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "hon2a", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}, {"login": "DavidAsish", "company": null}, {"login": "editedredx", "company": null}, {"login": "MWalid", "company": null}, {"login": "worldspawn", "company": null}], "comments_count": 18, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T20:02:36Z", "contents": "Jasmine runs tests against a suite with 40000 specs, so I don't think at 1100 you're seeing some kind of absolute limit that jasmine is encountering. It looks like this is related to #602 and that there is some expect somewhere that is being called when jasmine doesn't have a current spec.\nWhat version of jasmine itself are you using? The fix should be in the 2.0.1 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2014-09-11T20:13:08Z", "contents": "I'm using 2.0.0 - latest version included in karma-jasmine@2_0. If the expect is called outside currentSpec, then it should be some timeout issue. Thanks for the tip though, I'll check our asynchronous specs and any other possibly offending construct.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2014-09-12T15:18:07Z", "contents": "So far I'm unable to isolate the source - the issue disappears when I remove a single spec, regardless of which one it is. It even disappears when I add a spec, for example:\nit('foo', function () {\n   expect(true).toBe(true);\n});\nWhen the issue appears, it is consistent. Until I change my tests in some way (add a spec / remove a spec), it consistently appears on separate runs. It doesn't happen in Chrome, only in PhantomJS.\n\nAnd it becomes even weirder. Now I found a version of test code that triggers the issue (\"bad code\") but doesn't trigger it if the above spec is added (\"good code\"). When I apply the abovementioned fix (currentSpecCallbackDepth = 20 instead of currentSpecCallbackDepth = 0) and run bad code, it doesn't trigger the issue anymore, but now good code triggers it instead.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-15T20:22:12Z", "contents": "Setting currentSpecCallbackDepth to 20 initially, should just cause a clear stack (setTimeout(0)) after the first spec instead of waiting for 20 to run. Updating the maximumSpecCallbackDepth would allow you to run more specs before this happened. Neither of these should change the real problem, just the timing of when you might get it. It still sounds to me like you've got an expect() call outside of a spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2014-09-16T16:06:42Z", "contents": "I've done a thorough go over the sources and found some possible issues. Quick question: Is it allowed to have expect() calls inside an afterEach()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-16T16:29:37Z", "contents": "It should be fine to have expect() in an afterEach().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2014-09-16T16:34:05Z", "contents": "Ok, thanks. I've changed all the potentially problematic code (my bet would be on expect() in a callback bound to a promise not resolved in that spec). As I'm unable to reliably reproduce the issue, I'll just have to wait a bit to make sure the issue stops appearing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DavidAsish", "authorAssociation": "NONE", "createdAt": "2014-09-23T08:34:02Z", "contents": "I am able to reproduce this issue. I am struggling run Jasmine specs via phantom js. If it cannot be fixed, it will be huge set back. I am not using karma also. Plain Jasmine spec trying run using grunt via phantom JS", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2014-09-23T10:09:46Z", "contents": "After going through all 1400+ expect() calls and removing any that were not directly called from it() or afterEach(), the issue still appears. It looks like the only other thing still possibly calling expect() could be $httpBackend mock, so I removed its no longer used decoration (adding $rootScope.$digest() to flush()). As usual, the issue disappeared the moment I modified the code. If it appears again, however, there's no more adjustments I can think of, except finding a way to get useful debugging info out of that exception.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T20:32:14Z", "contents": "@DavidAsish what version of jasmine are you running? If you're running 2.0.0 there is a known issue with async specs and done callbacks that was fixed in 2.0.1. If you can upgrade and try it again, I think that should fix it. If not, we may have some other issue to debug.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DavidAsish", "authorAssociation": "NONE", "createdAt": "2014-09-24T07:16:33Z", "contents": "@slackersoft I tried Jasmine 2.0.1 and 2.0.3 versions. I am still getting this error. #677 I logged issue with Jasmine too. It works fine when I run specrunner with chrome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T19:47:35Z", "contents": "@DavidAsish Are you seeing the error for currentSpec.expect or currentSpec.$inject. These are different issues. Only the expect case has been fixed in jasmine, as the $inject is angular specific and the code for that is not actually in jasmine. If you're only seeing the error for $inject, let's keep that conversation over there #677.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DavidAsish", "authorAssociation": "NONE", "createdAt": "2014-09-25T09:59:14Z", "contents": "'undefined' is not a function (evaluating 'jasmineRequire.interface(jasmine, env)') at\n\ufffd[31m>> \ufffd[39m....\\D:\\SVN\\AngularJsFilterCards\\AngularJSWithFilterQuery\\Jasmine\\lib\\jasmine-2.0.3\\boot.js:35\n\ufffd[31m>> \ufffd[39m....\\D:\\SVN\\AngularJsFilterCards\\AngularJSWithFilterQuery\\Jasmine\\lib\\jasmine-2.0.3\\boot.js:120\nIs it related to your code? or with Jasmine", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hon2a", "authorAssociation": "NONE", "createdAt": "2014-10-03T13:11:21Z", "contents": "I finally got the issue again, found a way to get a stack trace and found the problem. Turns out that when I went through all 1400+ of my expect calls, I missed the one (!) causing the trouble. I had an expect inside a listener registered on AngularJS scope. I still don't understand why it resulted in the observed behavior. At any rate, it means I was wrong in pinning the issue on Jasmine. Sorry for the time taken and thanks for advice.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "editedredx", "authorAssociation": "NONE", "createdAt": "2015-02-03T10:23:49Z", "contents": "Anyone still having trouble:\nThe problem for me was that I had an expect after the async done call, it resulted in the same error.\nIt basically broke almost all tests after the broken one making it a hard debug.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MWalid", "authorAssociation": "NONE", "createdAt": "2015-11-20T12:27:14Z", "contents": "@editedredx  that was my issue too ...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "worldspawn", "authorAssociation": "NONE", "createdAt": "2016-03-07T00:02:26Z", "contents": "I got this error with some code that created a promise and rejected it (although rejecting it didn't seem to matter) and then returning it AFTER calling done(), the calling code would call .then on the result.\nI think the key is to do absolutely nothing after calling done()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T16:17:08Z", "contents": "When you call done() you are explicitly telling Jasmine that this step has completed and it is ok to move on to the next thing in the queue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 666, "url": "https://github.com/jasmine/jasmine/issues/666", "title": "Nested beforeEachs are only called the first time the suite is run", "contents": "The suite:\ndescribe('my suite', function() {\n    it('one', function(done) {\n        expect(true).toBe(true);\n        done();\n    });\n\n    describe('nested suite', function() {\n        var myval;\n        beforeEach(function(done) {\n            myval = 1;\n            done();\n        });\n\n        it('two', function(done) {\n            expect(myval).toBe(1);\n            myval = 0;\n            done();\n        });\n    });\n});\nThe code that runs the test:\nfunction runSpecs(){\n    var jasmineCont = document.getElementById('jasmine-cont');\n    var env = jasmine.getEnv();\n    var htmlReporter = new jasmine.HtmlReporter({\n        env: env,\n        getContainer: function() {\n            return jasmineCont;\n        },\n        createElement: function() {\n            return document.createElement.apply(document, arguments);\n        },\n        createTextNode: function() {\n            return document.createTextNode.apply(document, arguments);\n        },\n        timer: new jasmine.Timer()\n    });\n    env.clearReporters();\n    env.addReporter(htmlReporter);\n    jasmineCont.innerHTML = '';\n    htmlReporter.initialize();\n    env.execute([ jasmine.getEnv().topSuite().children[0].id ]);\n}\nThe first time runSpecs is called:\n\nAnd the second:\n\n\nThe diff for clearReporters (the function referenced in runSpecs):\ndiff --git a/jasmine/jasmine.js b/jasmine/jasmine.js\nindex 17652ea..fa3d4c9 100755\n--- a/static/js/jasmine/jasmine.js\n+++ b/static/js/jasmine/jasmine.js\n@@ -542,6 +542,10 @@ getJasmineRequireObj().Env = function(j$) {\n       reporter.addReporter(reporterToAdd);\n     };\n\n+    this.clearReporters = function() {\n+      reporter.clearReporters();\n+    };\n+\n     this.addMatchers = function(matchersToAdd) {\n       j$.Expectation.addMatchers(matchersToAdd);\n     };\n@@ -1681,6 +1685,10 @@ getJasmineRequireObj().ReportDispatcher = function() {\n       reporters.push(reporter);\n     };\n\n+    this.clearReporters = function() {\n+      reporters = [];\n+    };\n+\n     return this;\n\n     function dispatch(method, args) {", "createdAt": "2014-09-10T12:43:56Z", "updatedAt": "2014-10-23T19:45:38Z", "closedAt": "2014-10-23T19:45:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mustafa0x", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mustafa0x", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-10T20:40:18Z", "contents": "jasmine doesn't really support re-running a suite, which is why there isn't a clearReporters function currently. Given this, while I wouldn't expect it to break in this way, I'm not sure how much effort the jasmine team will want to invest to try to fix this. If you can put together a pull request, we can take a look at it though.\nAlso, I'm a little unclear if you're saying that by adding that function it fixes this issue for you or is only related in as much as you're using it to do multiple runs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mustafa0x", "authorAssociation": "NONE", "createdAt": "2014-10-23T09:02:05Z", "contents": "Also, I'm a little unclear if you're saying that by adding that function it fixes this issue for you or is only related in as much as you're using it to do multiple runs.\n\nThe latter \u2014\u00a0I just included that code as it is referenced in my test case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-23T19:45:37Z", "contents": "A jasmine Env does not really expect to be executed multiple times. So some cleanup may occur when the run has completed, or after any given spec has completed. We're actually investigating how much more aggressive we can be with removing references to things we're done with so I'm not sure that re-running a suite within the same Env is a use case jasmine is interested in.\nI'm going to close this, but if you find something that you can send in a pull request for that would fix this, we'll definitely take a look.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 667, "url": "https://github.com/jasmine/jasmine/issues/667", "title": "jasmine.Clock.tick() silently swallows errors", "contents": "I'm currently trying to write a test like this:\nit(\"allows errors in setTimeout() functions to be tested\", function() {\n    jasmine.Clock.useMock();\n\n    setTimeout(function() {\n        throw new Error(\"Error within a timeout.\");\n    }, 0);\n\n    expect(function() {\n        jasmine.Clock.tick(1);\n    }).toThrow(new Error(\"Error within a timeout.\"));\n});\n\nBut errors throw within setTimeout() call-backs can not be tested at present as jasmine.Clock.tick() silently swallows them.", "createdAt": "2014-09-11T12:58:04Z", "updatedAt": "2015-07-30T14:44:40Z", "closedAt": "2015-07-30T14:44:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dchambers", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dchambers", "company": "Babylon Health"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-11T19:44:03Z", "contents": "It looks like this has been fixed in jasmine 2.0. The following spec passes now. Is it possible to upgrade your project to jasmine 2.0?\ndescribe('setTimeout exceptions', function() {\n  beforeEach(function() {\n    jasmine.clock().install();\n  });\n\n  afterEach(function() {\n    jasmine.clock().uninstall();\n  });\n\n  it('should throw them', function() {\n    setTimeout(function() {\n      throw new Error('error within a timeout');\n    }, 0);\n\n    expect(function() {\n      jasmine.clock().tick(1);\n    }).toThrowError('error within a timeout');\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dchambers", "authorAssociation": "NONE", "createdAt": "2015-07-30T14:44:40Z", "contents": "@slackersoft, sorry, only just seen that you provided a work-around for this almost a year ago. This can definitely be closed \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["1.3.x", "waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 668, "url": "https://github.com/jasmine/jasmine/issues/668", "title": "Feature request: Format long JSON failures nicely", "contents": "When you're comparing a big JSON object to an expectation, the result is long, unwieldy, and hard to read. (See screenshot below.) Could Jasmine format/pretty-print these?\nThanks!", "createdAt": "2014-09-12T23:16:07Z", "updatedAt": "2015-03-27T15:16:09Z", "closedAt": "2015-03-27T15:16:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elanakoren", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "elanakoren", "company": "Patreon"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rohit", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-20T22:29:41Z", "contents": "As I noted in #675 doing a real nice pretty print is unfortunately non-trivial, as we need to have a solution that we can make look good not just in the browser but also on the command line. It's definitely something we've thought about but don't have a solution for at the moment.\nI'd be glad to review a pull request that made this better though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-21T12:02:48Z", "contents": "How about using an external library like https://github.com/benjamine/jsondiffpatch to get a diff. It supports providing diff's for both html and console and you can write your own formatters too. Alternatively how about providing an official custom matcher that utilizes jsondiffpatch to provide this feature?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-23T22:03:40Z", "contents": "One of jasmine's goals is not to have any external runtime dependencies, so we don't bloat your dependency graph just to get tests. This is something we've heard a lot of requests for, but we don't always have a lot of time to work on jasmine, so we'd be happy to review a pull request if someone has time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-27T15:16:09Z", "contents": "I'm going to close this as a duplicate of #675. Please take further discussion there.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 670, "url": "https://github.com/jasmine/jasmine/issues/670", "title": "Feature request: Harmony/Generators support", "contents": "I don't know where to post this feature request mhevery/jasmine-node#349 so I'll do again:\nAs I speak with nodejs developers the majority love --harmony features (generators, yields) and they often complain about slow adoption that new cool features. That includes me ;). Well, once you start with e.g. koajs you can not go back to the old tracks. The code simply becomes sexy and clean.\nMy proposal is to make jasmine the first framework that support generators. This would become a must-have framework for me and many others who love beautiful code.\nit('should support generators', function*() {\n   var d = yield do('here we go')\n   expect(d).toBe('awesome')\n})", "createdAt": "2014-09-14T15:14:28Z", "updatedAt": "2015-10-01T02:45:31Z", "closedAt": "2014-10-31T19:56:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "xpepermint", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "xpepermint", "company": "@0xcert"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "briandipalma", "company": null}, {"login": "sebastienbarre", "company": "@Kitware "}, {"login": "bloveridge", "company": null}], "comments_count": 15, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-15T20:05:51Z", "contents": "I'm not sure this issue is specific enough for us to act on. What particular places in jasmine would need to be changed because they don't currently allow use of these features?\nI'd be happy to look at a pull request for something like this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xpepermint", "authorAssociation": "NONE", "createdAt": "2014-09-17T00:30:42Z", "contents": "Thanks @slackersoft. Well... I guess this issue should be a place for discussion.\nSo first of all, jasmine (jasmine-node) should allow --harmony argument (e.g. jasmine-node --harmony ./spec). It would be even better if the node's --harmony features would be activate by default.\nThe next thing that is needed are javascript generators (function*(){} instead of function(){}). Maybe this could be automatically activated when --harmony is requested. Right now you have to do something like this (did not work btw ;) ):\nit('should support generators', function(next) {\n  co(function*() {\n   var d = yield do('here we go')\n   expect(d).toBe('awesome')\n   next()\n  })()\n})\nI would think of the describe, it, before, after as koa middlewares-style functions, something like this\nit('should support generators', function*(next) {\n   var d = yield do('here we go')\n   expect(d).toBe('awesome')\n   yield next\n})\nIt would be great to get some other proposals from the community.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-19T20:40:20Z", "contents": "In the situation where it (for example) allowed the second argument to be a generator, what exactly would you be generating. To me it looks like generators are intended more to allow you to dynamically create a list or iterator without knowing beforehand what all of the contents will be. How would this be useful to use as a spec?\nAlso, the jasmine team doesn't actually maintain jasmine-node, and thus don't really have any influence over what arguments it supports. We've been working on getting our own nodejs/npm support better and have release the jasmine npm package. If you would like to get support there, please check out the github repo.\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xpepermint", "authorAssociation": "NONE", "createdAt": "2014-09-20T06:32:00Z", "contents": "Please check koajs. You'll know what I try to explain here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-26T20:08:17Z", "contents": "If I'm reading everything correctly, I think what you want to do is pass the function returned by co as the async function for jasmine to execute. Something like this could probably work:\nit('should support generators', co(function*() {\n   var d = yield do('here we go')\n   expect(d).toBe('awesome')\n});\nOther than something like this, I'm still not entirely sure what would need to be done to jasmine that would change anything about this support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "briandipalma", "authorAssociation": "NONE", "createdAt": "2014-10-31T18:46:30Z", "contents": "Hi @xpepermint,  @slackersoft I might be wrong here but I think what is being looked for is support for Promise in async tests. Using a fork of jasmine with the linked Promise support included and jasmine-npm (I added support for custom loaders in jasmine-npm so jasmine-npm can load ES6 modules) you can write async tests like this.\nit('discovers all bladeset source files.', wrap(function* () {\n   //When.\n   const bladesetSourceFileNames = yield getBladesetSourceFileNames(testBladesetDirectoryName);\n   //Then.\n   assert.deepEqual(bladesetSourceFileNames, expectedBladesetSourceFileNames);\n}));\nNote no done needed, and there can be multiple yield async operations in the test and there is no need for nesting or callback nesting. I hope my guess is correct, as it stands async tests are much nicer to write in this style and they will be very easy to upgrade to ES7 async functions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-31T19:56:08Z", "contents": "@briandipalma I'm pretty sure that Promises and generators are totally different features.\n@xpepermint I think the workaround I provided before should work pretty well for you. We don't want to change jasmine to support a feature with such a simple workaround, especially since we also need to support all of the older browser.\nClosing, but if using the return value of co doesn't work, please let us know.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "briandipalma", "authorAssociation": "NONE", "createdAt": "2014-10-31T20:21:43Z", "contents": "@slackersoft Yes you're right, sorry I wasn't very clear in my comment. What I meant to try and say was that with Promise support in Jasmine you could easily write ES7 async functions style code. These functions combine generators and Promises to allow easy to read async code.\nSo in the code snippet above wrap returns a Promise that Jasmine waits for before continuing on it's test run and yield yields a Promise that pauses the generator function until it resolves. I think that is what @xpepermint is seeking to achive. So Jasmine only needs Promise support to allow this code style, not generator support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xpepermint", "authorAssociation": "NONE", "createdAt": "2014-11-01T21:57:46Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sebastienbarre", "authorAssociation": "NONE", "createdAt": "2015-05-17T02:46:15Z", "contents": "Has there been any development on this one? I'm having a tough time testing ES6 generators with Jasmine (and suspend), did someone find a sure way to make it work? Thank you", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "briandipalma", "authorAssociation": "NONE", "createdAt": "2015-05-18T17:39:27Z", "contents": "@sebastienbarre I used Mocha in the end.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sebastienbarre", "authorAssociation": "NONE", "createdAt": "2015-05-18T17:40:39Z", "contents": "@briandipalma thanks. Would you happen to have a gist or a file on Github I could look at, for inspiration?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "briandipalma", "authorAssociation": "NONE", "createdAt": "2015-05-18T17:44:15Z", "contents": "Maybe this will help?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sebastienbarre", "authorAssociation": "NONE", "createdAt": "2015-05-18T18:02:34Z", "contents": "@briandipalma Thanks! I think it will.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bloveridge", "authorAssociation": "NONE", "createdAt": "2015-10-01T02:45:11Z", "contents": "Sorry to revive an old topic, but I was looking for something similar and so just wrote it myself. https://github.com/gradecam/jasmine-co\nIt allows you to write specs like:\nit('should track books that are listed for sale', function*() {\n    var userId = 'abc123';\n    var book = yield bookService.getBooksForUser(userId)[0];\n    yield book.listForSale(3.99);\n    var forSale = yield bookService.getBooksListedForSaleByUser(userId);\n    expect(forSale[0].isbn).toEqual(book.isbn);\n});\nAs the name suggests, it uses co under the covers and allows you to write specs in a more functional / synchronous style.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 671, "url": "https://github.com/jasmine/jasmine/issues/671", "title": "Pending specs overview", "contents": "Currently, pending() ignores any argument.\nHowever, like in RSpec, I think it would be very useful to be able to do something like pending(\"doesnt work, issue #123\") and being able to see these message somewhere in the output.\nFor example, in a similar view as the failed specs.", "createdAt": "2014-09-16T09:20:51Z", "updatedAt": "2015-01-26T23:56:08Z", "closedAt": "2015-01-26T23:56:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lenntt", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "lenntt", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-16T20:30:25Z", "contents": "This seems reasonable. I added a tracker story for this feature: https://www.pivotaltracker.com/story/show/78954014\nWe would be happy to look at a pull request for this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 672, "url": "https://github.com/jasmine/jasmine/issues/672", "title": "Feature Request: status(...) inside unit tests", "contents": "Sometimes it can be helpful to output some of the test results. For example, I wrote a small test using canvas that compared the SVG rendered inside the Browser to its PNG fallback rendered by RSVG. In this example, I would like to output the % of deviation - currently, I do that on the console, but I would like it better to have it shown within the results.", "createdAt": "2014-09-16T12:59:25Z", "updatedAt": "2014-09-23T20:36:58Z", "closedAt": "2014-09-23T20:36:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "atk", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "atk", "company": "LogMeIn Inc."}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-16T20:12:31Z", "contents": "You should be able to do something like:\nexpect(deviationPercent).toBeLessThan(3)\n\nWhich will print it out if it fails.\nI'm not sure what a status() function would be for otherwise though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "atk", "authorAssociation": "NONE", "createdAt": "2014-09-22T12:59:44Z", "contents": "That's what I already do, but as a heads-up, I use console.log(size, deviationPercent), so I can look at the deviation myself. I'd like to fit it somewhere inside the output.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T20:36:56Z", "contents": "Jasmine generally doesn't want to add anything to the output if your specs are passing, because there's not really an obvious place to put it. If you want to output something all the time, you probably want to console.log yourself.\nClosing this, as I don't think we're going to implement it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 673, "url": "https://github.com/jasmine/jasmine/issues/673", "title": "Describes on pending", "contents": "Hi,\nIt would be useful being able to make a group of specs on pending.\ndescribe(\"some stuff\", function()\n{\n     pending(\"Not working until issue #123 is fixed\");\n     it_behaves_in_some_way();\n}\n\nCurrently, its not possible to put 'describes' on pending.\nIt gives me the output:\n\nsome stuff\n\nencountered a declaration exception", "createdAt": "2014-09-17T13:11:01Z", "updatedAt": "2014-09-17T20:18:22Z", "closedAt": "2014-09-17T20:18:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lenntt", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lenntt", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-17T20:18:18Z", "contents": "I think what you want to do is put the call to pending inside of a beforeEach in the describe. pending is not valid to be called outside of some kind of spec context.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 674, "url": "https://github.com/jasmine/jasmine/issues/674", "title": "jasmine 1.x support", "contents": "So I was wondering if anyone had any ideas on how to upgrade from 1.x to 2.x? We have over 500 tests and I was wondering if there was any adapter out there or some easy way to start writing new tests in 2.x and work on deprecating old tests over time?", "createdAt": "2014-09-17T15:55:21Z", "updatedAt": "2014-09-23T20:45:51Z", "closedAt": "2014-09-23T20:45:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joseph-jja", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joseph-jja", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-17T20:20:03Z", "contents": "Take a look at the upgrading docs.\nI don't know of any kind of adapter that would let you have a single suite with some specs in 2.0 and some in 1.3. You might be able to rig something up to have two suites and slowly move things over though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joseph-jja", "authorAssociation": "NONE", "createdAt": "2014-09-18T20:23:55Z", "contents": "Well I have looked at the upgrading document and not sure how to handle the runs() and waitsFor code :/\nAlso not sure how the spys would be handled.\nJust out of curiousity why the change in API's?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-18T20:35:56Z", "contents": "The changes to async specs are also documented in the upgrading doc. For a more full description of the changes see the 2.0 release notes", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T20:45:50Z", "contents": "If you have more questions about upgrading from 1.3 to 2.0, please ask them on the jasmine mailing list.\nClosing, as this isn't actually an issue with jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 675, "url": "https://github.com/jasmine/jasmine/issues/675", "title": "toEqual should list differences instead of pretty printing objects", "contents": "Consider this simple example (jsfiddle):\nvar actual = { x: 1, y: { z: 2 } };\nvar expected = { x: 1, y: { z: 3 }};\nexpect(actual).toEqual(expected);\nThis outputs:\nExpected { x : 1, y : { z : 2 } } to equal { x : 1, y : { z : 3 } }.\nIn other words it pretty prints both objects.\nNow imagine we are in real world where objects are quite complex and toEqual quickly becomes useless.\nI would expect output like:\nExpected no differences but found 1:\n1. Expected y.z = 2 to equal 3\n\ni.e. list all differences with paths.", "createdAt": "2014-09-18T16:29:06Z", "updatedAt": "2019-05-29T00:44:59Z", "closedAt": "2016-11-17T02:01:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mwisnicki", "authorAssociation": "NONE", "participants_count": 24, "participants_data": [{"login": "mwisnicki", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Edward-Lombe", "company": null}, {"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "antoineverger", "company": "LiquidLabs"}, {"login": "jchoca", "company": null}, {"login": "andymaster01", "company": null}, {"login": "mik01aj", "company": "Google"}, {"login": "startswithaj", "company": null}, {"login": "bcherny", "company": "@Facebook"}, {"login": "josketres", "company": "@eSailors "}, {"login": "gitnik", "company": "Talentry GmbH"}, {"login": "jsdir", "company": null}, {"login": "vamsivarikuti", "company": null}, {"login": "benchristel", "company": "Pivotal Labs"}, {"login": "brokentone", "company": "vogue.com"}, {"login": "donald-s", "company": null}, {"login": "giamir", "company": "@ThoughtWorks"}, {"login": "nicbou", "company": "Software developer"}, {"login": "nemoDreamer", "company": "nemoDreaming.com"}, {"login": "matthewadams", "company": "@SciSpike "}, {"login": "benjaminapetersen", "company": "Red Hat, Inc. @openshift"}, {"login": "ohjames", "company": "chilon.net"}, {"login": "cancerberoSgx", "company": "home sweet home"}], "comments_count": 46, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-18T20:43:10Z", "contents": "We have a story logged in tracker for this (https://www.pivotaltracker.com/story/show/1283792), but I don't think we actually want to remove the full print, for something like this. Probably just add some additional info for missing and extra elements.\nWe'd be happy to look at a pull request that solves this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mwisnicki", "authorAssociation": "NONE", "createdAt": "2014-09-18T21:44:34Z", "contents": "Showing nontrivial objects absolutely kills usefulness of ouput. At least limit it to single line or maybe don't show the object at all if it is longer than a line.\nI'd like to work on this since I need it, though I don't know if I can migrate my project to 2.0 and without that I'll probably have to resort to writing some helper function in my own code since old matchers seemed to only return booleans.\nBTW Is it possible to return something more sophisticated than string or is result.message = \"...\" the only way to override message ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-19T20:29:00Z", "contents": "Because this output can be output either on the command line in various different contexts or in an html page, result.message can either be a string or a function that returns a string.\nA fix for this probably also fixes #668", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Edward-Lombe", "authorAssociation": "NONE", "createdAt": "2014-11-05T22:24:45Z", "contents": "I wrote something similar to this, only it doesn't print the path of the keys through the object, only the values in which it encounters a difference. I was working with parsed JSON objects and having a failed test take up two or three terminal windows just wasn't helpful.\nAnyway here is a gist that you can drop into you /helpers/ folder which will do some of what you are saying. Some tests are included but they are far from comprehensive.\nEdit: I updated my gist slightly to add path support, although it isn't really tested.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "NONE", "createdAt": "2015-01-22T23:13:12Z", "contents": "This is what chai prints:\n      AssertionError: expected { Object (id, issued_at, ...) } to deeply equal { Object (id, issued_at, ...) }\n      + expected - actual\n\n               \"featuredCollectionsCount\": 0\n             }\n             \"avatar\": {\n               \"origin\": \"gravatar\"\n      +        \"url\": \"about:blankk\"\n      -        \"url\": \"about:blank\"\n             }\n             \"email\": \"foo.bar@example.com\"\n             \"fullname\": \"Foo Bar\"\n             \"id\": 42\n\n\nSo nice, I can immediately see what's wrong. It even has colors!\n\nIn large objects like that Jasmine output is basically useless, it's completely unreadable. I have to copy the output to a separate file, hunt for \"equal to\" and split the string by that, copy both parts to two files and compare using my own eyes.", "reactions_count": 15, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-11T21:22:01Z", "contents": "We'd be happy to review a pull request for this that can work both in the HtmlReporter and ConsoleReporter (probably the one in jasmine-npm since core's is now deprecated).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "NONE", "createdAt": "2015-04-20T15:00:47Z", "contents": "@slackersoft Mocha uses the diff package to display these readable diffs. Would you accept a PR that would use this package to display object differences in Jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-20T20:11:51Z", "contents": "We'd like to keep the core of jasmine with no dependencies. Aside from just not wanting to install a bunch of dependencies on your system just so you can test your javascript, this also means we can release a standalone version that doesn't need much setup, and the platform specific versions (ruby, python, npm) don't need to figure out how to get the same dependencies in each environment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "NONE", "createdAt": "2015-04-21T11:38:59Z", "contents": "@slackersoft\n\nAside from just not wanting to install a bunch of dependencies on your system just so you can test your javascript\n\nThe published diff package contains just 3 files: README.md, package.json & diff.js. This is not bloating anything. OTH, jasmine-core package contains a lot of files that are not necessary to run Jasmine, like GOALS.md, the images/ directory etc. so it shows it's not only about size.\n\nthis also means we can release a standalone version that doesn't need much setup\n\nDon't you already have a build process? You don't keep everything in one file after all.\nIf you don't want to include diff as an explicit npm dependency, another option would be do declare it as a dev dependency and treat it in the build process as every other source file that you're currently merging anyway.\nYet another option would be to copy diff.js inside the Jasmine repository; the drawback is that it's easy to diverge from the source then and miss its fixes etc. Also, it gives smaller credit to the original author.\nWhat do you think? I could try something from the proposals above if you agree. I don't know what's the status of the Ruby version but I don't know Ruby so I can only offer a PR for the JS version.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-07T22:49:17Z", "contents": "The concern from jasmine's perspective is around dependencies, not necessarily the size of the tarball that is downloaded for install. That said, the images folder is actually necessary for us to create a jasmine branded specRunner.html file in case a project using npm for package management wants to run browser based jasmine tests.\nThe dependency constraint hits us especially hard, considering the various different platforms that the jasmine javascript is released for (npm, ruby gem, python egg, standalone), which means that we can't just depend on a package to directly provide us other functionality.\nThis effectively leaves either the dev dependency route or inlining the diff.js file directly into jasmine iteself if we want to use the diff package. Inlining is obviously bad for updates, but both would actually require us to distribute the diff code and not just have it as a dependency, which isn't something I think we really want to do.\nOn top of all of this, the diff package wouldn't solve some of the more interesting cases like objectContaining or arrayContaining, so I think what we really want here is a more custom solution that supports the asymmetric matchers as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgol", "authorAssociation": "NONE", "createdAt": "2015-05-08T07:28:26Z", "contents": "Would it be ok to start from the code from the diff package & iterate from\nthere?\n\nMicha\u0142 Go\u0142\u0119biowski", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "antoineverger", "authorAssociation": "NONE", "createdAt": "2015-05-27T16:08:25Z", "contents": "Having that feature would be really great. Is there any progress on a PR ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jchoca", "authorAssociation": "NONE", "createdAt": "2015-05-27T16:38:10Z", "contents": "I think it would be a nice feature too.  What would a dependency free solution look like?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "andymaster01", "authorAssociation": "NONE", "createdAt": "2015-07-27T18:33:53Z", "contents": "If you're using karma to run your tests, you can use this one:\nhttps://www.npmjs.com/package/karma-jasmine-diff-reporter", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-08-03T10:30:36Z", "contents": "I managed to have a highlighted diff in Jasmine (running in Node) by installing jsondiffpatch and by adding this in beforeEach:\n        var jsondiffpatch = require('jsondiffpatch');\n        jasmine.addMatchers({\n            toEqualJSON: function(util, customEqualityTesters) {\n                return {\n                    compare: function(actual, expected) {\n                        var result = {};\n                        actual = JSON.parse(JSON.stringify(actual));\n                        expected = JSON.parse(JSON.stringify(expected));\n                        result.pass = util.equals(actual, expected, customEqualityTesters);\n                        result.name = 'JSON objects ' + (result.pass ? '' :  'don\\'t') + ' match';\n                        if (result.pass) {\n                            result.message = 'OMG Big Equal!';\n                        } else {\n                            result.message = '' + jsondiffpatch.formatters.console.format(jsondiffpatch.diff(expected, actual));\n                        }\n                        return result;\n                    },\n                };\n            }\n        });\n\nThe only thing I don't like about it is that, in case of an error, the diff gets displayed twice (once as message and once in stack).\nOf course having this behaviour built-in in Jasmine, as @mzgol suggests would be way better. +1 for the issue :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "startswithaj", "authorAssociation": "NONE", "createdAt": "2015-10-20T06:19:56Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcherny", "authorAssociation": "NONE", "createdAt": "2015-12-23T21:17:16Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "josketres", "authorAssociation": "NONE", "createdAt": "2015-12-31T10:29:40Z", "contents": "+1 this behaviour is very useful.\nI tried to use unexpected.js for this, but the combination: unexpected + jasmine + karma + PhantomJS is still not stable (I keep getting errors).\nIt would be nice if it's built-in in jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gitnik", "authorAssociation": "NONE", "createdAt": "2016-01-10T15:17:05Z", "contents": "+1 for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jsdir", "authorAssociation": "NONE", "createdAt": "2016-02-22T17:31:31Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vamsivarikuti", "authorAssociation": "NONE", "createdAt": "2016-06-27T10:11:55Z", "contents": "For reference: ExUnit handles like this. Showing the diff is very useful when comparing large JSON structures", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-20T19:11:01Z", "contents": "I've resumed work on this, at master...benchristel:eq-diffs", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "brokentone", "authorAssociation": "NONE", "createdAt": "2016-10-21T18:20:22Z", "contents": "We unfortunatly recently switched from Jasmine to Mocha (+Chai) for this functionality", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donald-s", "authorAssociation": "NONE", "createdAt": "2016-10-22T20:06:09Z", "contents": "@benchristel I see that you've put quite a bit of work into the diff functionality. Are you still planning to work on it? I'd be happy to pitch in or pick up where you left off.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-23T04:55:30Z", "contents": "@donald-s the bulk of the functionality should be there already--at this point the bottleneck is getting the PR reviewed and merged. Unfortunately it doesn't seem like the maintainers have had much time to dedicate to Jasmine recently (and of course it doesn't help that the PR is enormous!)\nIf you're daring and want to beta-test the diff functionality, I'm sure that would be helpful. Real usage might uncover some issues that I didn't think to write tests for.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donald-s", "authorAssociation": "NONE", "createdAt": "2016-11-21T01:41:21Z", "contents": "@benchristel I see. Looks like it was just merged. I'm eager to try it out. Thanks for your work on this!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "giamir", "authorAssociation": "NONE", "createdAt": "2016-11-29T21:55:44Z", "contents": "@slackersoft It would be nice to know when the work done by @benchristel will be released.\nThis story has a 3.0 label in your pivotal tracker; does it mean we will have to wait a Jasmine 3.0 release? If that's the case any chance to have a 3.0 prerelease published in npm?\nThanks!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nicbou", "authorAssociation": "NONE", "createdAt": "2017-01-18T11:31:59Z", "contents": "Any update on this? I too would like to know when we can get our hands on this feature.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2017-02-21T20:00:17Z", "contents": "@slackersoft what's the target release for this? I'm looking to migrate our test suites to mocha+chai, because our deep comparisons are just too hard to debug in Jasmine at the moment... \ud83d\ude22", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2017-02-21T20:05:17Z", "contents": "Btw, @slackersoft @mgol : Mocha solved the \"too many dependencies on initial setup\" problem by making this optional.\nIf you set mochaReporter: { showDiff: true } in Karma's conf, that's when you need to add the diff dependency to your package.json.\nYou'd really want to avoid re-inventing the wheel and copying something over into jasmine-core that's already been solved, no?\nNote: I missed @andymaster01's comment about karma-jasmine-diff-reporter, so I'll give that a spin now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthewadams", "authorAssociation": "NONE", "createdAt": "2017-04-12T19:36:38Z", "contents": "Is this still a no-go?  As of this note, the issue still has the ready for work label, but the issue is closed. What's the status?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-12T20:29:29Z", "contents": "@matthewadams there was a PR for this feature that was merged a while ago.\nHere's the merge commit: 54e7a82\nI'm not sure what the timeline for release is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthewadams", "authorAssociation": "NONE", "createdAt": "2017-04-12T20:55:49Z", "contents": "@slackersoft or @jasmine Can y'all give info on expected fix version that will contain 54e7a82 ?  That'd be just jim-dandy!  :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-12T20:56:58Z", "contents": "It will be in the next release. I don't know when that will be right now.", "reactions_count": 11, "reactions_data": ["HEART", "HOORAY", "CONFUSED", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "HOORAY", "HEART", "CONFUSED"]}, {"authorLogin": "benjaminapetersen", "authorAssociation": "NONE", "createdAt": "2017-09-15T01:57:19Z", "contents": "Check in on this! The issue is closed, but I don't believe it has been released?  Feeling the pain and looking for something like what @mgol referenced in the comment above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-09-15T16:54:36Z", "contents": "I see the code on the v2.8.0 tag, so I think it's out? What version do you have @benjaminapetersen ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benjaminapetersen", "authorAssociation": "NONE", "createdAt": "2017-09-15T18:18:22Z", "contents": "I'm on jasmine-core v 2.8.0.  I see this kind of output:\nExpected $[0] to have properties\n    candy: 'bars'\n@test/spec/services/membership/membershipSpec.js:284:7\n\n.... is this correct?  If so, I'm current.  However, I was expecting more like what was shown in the above comments this or this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-09-15T22:13:43Z", "contents": "@benjaminapetersen yep, you're up-to-date. There were a couple different proposals for formatting the output and I went (more or less) with the one in the OP.", "reactions_count": 1, "reactions_data": ["CONFUSED"]}, {"authorLogin": "benjaminapetersen", "authorAssociation": "NONE", "createdAt": "2017-09-16T00:05:06Z", "contents": "ok thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ohjames", "authorAssociation": "NONE", "createdAt": "2018-08-08T10:06:05Z", "contents": "Working with a team now that replaced jasmine with mocha because they couldn't stand jasmine's diff output or find a way to update it to be more like mocha's. I think mocha's \"pretty printed diff\" output is so much easier to parse.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cancerberoSgx", "authorAssociation": "NONE", "createdAt": "2019-05-10T06:41:57Z", "contents": "Is this working ? If so can somebody show me the way so I PR with a comment in the readme ?  I recently needed this for large strings comparison, I love jasmine because is agile and fast but because I have no descent diff for strings I'm switching to others.... or implementing my own diff which is not good... :\nimport { ansi } from 'cli-driver'\nimport { createPatch } from 'diff'\nimport { DisplayProcessor, SpecReporter } from 'jasmine-spec-reporter'\nimport { CustomReporterResult } from 'jasmine-spec-reporter/built/spec-reporter'\n\nclass CustomProcessor extends DisplayProcessor {\n  displayFailedSpec(spec: CustomReporterResult, log: string): string {\n    const colored: string[] = []\n      if (spec.failedExpectations && spec.failedExpectations.length) {\n        spec.failedExpectations.forEach(s => {\n          const p = createPatch(s.message, s.actual, s.expected)\n          const c = p\n          .split('\\n')\n          .map(l => (l.startsWith('-') ? ansi.format(l, ['red']) : l.startsWith('+') ? ansi.format(l, ['green']) : l))\n          .join('\\n')\n          colored.push(c)\n        })\n      }\n      return colored.join('\\n\\n\\n')\n    }\n  displaySpecErrorMessages(spec: CustomReporterResult, log: string): string {\n      return ''\n    }\n    displaySummaryErrorMessages(){return ''}\n}\n\njasmine.getEnv().clearReporters()\njasmine.getEnv().addReporter(new SpecReporter({\n  customProcessors: [CustomProcessor]\n}))\n\nj.execute()", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-14T00:51:37Z", "contents": "I am definitely still open to further refinements to the existing diff output. Currently it is primarily dealing with the differences of properties within an object, and not which words in a string are different.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ohjames", "authorAssociation": "NONE", "createdAt": "2019-05-14T02:24:44Z", "contents": "Can you not make it so the user can override it? Even the object diff output is far less readable than mocha's, and for many other cases replace \"far\" with \"far far far\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-15T01:07:04Z", "contents": "As I said, I'm definitely open to further Pull Requests to refine how diffs are displayed to the user. Jasmine currently displays the same thing on the command line as it does in the browser, which can complicate things a bit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cancerberoSgx", "authorAssociation": "NONE", "createdAt": "2019-05-17T05:28:14Z", "contents": "hey @slackersoft I want to give it a try and support it in node version, so I will start with jasmine/jasmine-npm. Do you know if it's possible or viable that, as long as I use compatible / lightweight libraries for the diff, to reuse that solution in other JavaScript mediums like the browser or headless browser or should I just focus on node.js jasmine-npm?, thanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-29T00:44:59Z", "contents": "I would like to keep jasmine-core with no runtime dependencies if at all possible. Jasmine is already tracking the differences, so you might be able to focus on the printing of those differences instead of detection.\nHope this helps.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 57, "reactions_datalabels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 676, "url": "https://github.com/jasmine/jasmine/issues/676", "title": "Publish to CDN", "contents": "Publishing to CDN or providing other means of using jasmine in jsfiddle would be very useful.", "createdAt": "2014-09-18T16:31:29Z", "updatedAt": "2015-01-14T18:30:05Z", "closedAt": "2015-01-14T18:30:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mwisnicki", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mwisnicki", "company": null}, {"login": "rohit", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-14T15:56:32Z", "contents": "I think Google folks select which libraries get hosted on GoogleCDN. Maybe there is a way to get in touch with them? An alternative I've found with a little searching is https://cdnjs.com. Already versions 2.0.0 and 1.3.1 are available there. They have started using some kind of automated git setup discussed here: cdnjs/cdnjs#3638 Also check the repo Readme for more information: https://github.com/cdnjs/cdnjs\nI guess if you really want this you can make the necessary requests/PR over at cdnjs and things should work. This issue can be closed? /cc @slackersoft", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T18:30:05Z", "contents": "Sent in a pull request for cdnjs to auto update jasmine to get new versions cdnjs/cdnjs#4205\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 677, "url": "https://github.com/jasmine/jasmine/issues/677", "title": " TypeError: 'null' is not an object (evaluating 'currentSpec.$injector') + Phantom JS and Jasmine on grunt", "contents": "[4mRunning \"jasmine:src\" (jasmine) task\ufffd[24m\nTesting jasmine specs via PhantomJS\nCards controllers\ncardsListController\n- should return 2 cards......\u00d7\nTypeError: 'null' is not an object (evaluating 'currentSpec.$injector') in file:///D:angular-mocks.js (line 2015) (1)\nTypeError: 'null' is not an object (evaluating 'currentSpec.$injector') in file:///D:angular-mocks.js (line 2015) (2)\nTypeError: 'null' is not an object (evaluating 'currentSpec.$modules') in file:///D:angular-mocks.js (line 2138) (3)\n1 spec in 0.002s.\n\ufffd[31m>> \ufffd[39m1 failures\n\ufffd[33mWarning: Task \"jasmine:src\" failed.\ufffd Use --force to continue.\ufffd[39m\n\ufffd[31mAborted due to warnings.\ufffd[39m", "createdAt": "2014-09-23T08:37:27Z", "updatedAt": "2016-05-24T08:20:12Z", "closedAt": "2014-12-16T23:58:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DavidAsish", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "DavidAsish", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "amejiarosario", "company": "@Cisco"}, {"login": "himdel", "company": null}, {"login": "josencv", "company": null}, {"login": "asim-qb", "company": "Qburst Technologies"}], "comments_count": 11, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T20:33:28Z", "contents": "What version of jasmine are you using? How are you running jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DavidAsish", "authorAssociation": "NONE", "createdAt": "2014-09-24T06:49:51Z", "contents": "I am using Jasmine 2.0.0. I am running Jasmine using grunt task. jasmine: {\nsrc: {\nsrc: [\n// 'AngularJSWithFilterQuery/Jasmine/SpecRunner.html',\n'AngularJSWithFilterQuery/Jasmine/lib//*.js',\n'AngularJSWithFilterQuery/scripts/vendor/angular.min.js',\n'AngularJSWithFilterQuery/Jasmine/angular-mock.js',\n'AngularJSWithFilterQuery/App//.js'\n],\noptions: {\nspecs: 'AngularJSWithFilterQuery/Jasmine/__/.js',\njunit: {\npath: 'BuildOutput/TestResults'\n},\nspecNameMatcher: 'spec'\n}\n},\nistanbul: {\nsrc: [\n'AngularJSWithFilterQuery/App//*.js',\n'!AngularJSWithFilterQuery/App//.min.js'\n],\noptions: {\nspecs: 'AngularJSWithFilterQuery/Jasmine/__/.js',\ntemplate: require('grunt-template-jasmine-istanbul'),\ntemplateOptions: {\ncoverage: 'output/coverage/coverage.json',\nreport: [\n{ type: 'html', options: { dir: 'BuildOutput/Coverage' } },\n{ type: 'cobertura', options: { dir: 'BuildOutput/Coverage/Cobertura' } },\n{ type: 'text-summary' }\n]\n}\n}\n}\n},\ngrunt.loadNpmTasks('grunt-contrib-jasmine');\nAbove is the gruntfile extract\ndescribe('Cards controllers', function () {\nbeforeEach(module('mainApp'));\nbeforeEach(module('cardsServices'));\ndescribe('cardsListController', function () {\n    var scope, ctrl, $httpBackend;\n\n    beforeEach(inject(function (_$httpBackend_, $rootScope, $controller) {\n        $httpBackend = _$httpBackend_;\n        $httpBackend.expectGET('data\\\\all.json').respond([\n                {\n                    expansions: [\n                        {\n                            cards: [\n                                {\n                                    nameEn: \"card01\"\n                                },\n                                {\n                                    nameEn: \"card02\"\n                                }\n                            ]\n                        }\n                    ]\n                }]);\n\n        scope = $rootScope.$new();\n        ctrl = $controller('cardsListController', { $scope: scope });\n    }));\n\n    it('should return 2 cards', function () {\n        expect(scope.cards).toBeUndefined();\n        $httpBackend.flush();\n        expect(scope.cards.length).toBe(2);\n\n    });\n});\n\n});\nAbove is the spec extract", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T19:48:33Z", "contents": "Unfortunately, I'm not sure how the angular-mocks library is injecting itself into jasmine. I would probably take this issue up with them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DavidAsish", "authorAssociation": "NONE", "createdAt": "2014-09-25T09:58:17Z", "contents": "'undefined' is not a function (evaluating 'jasmineRequire.interface(jasmine, env)') at\n\ufffd[31m>> \ufffd[39m..\\Jasmine\\lib\\jasmine-2.0.3\\boot.js:35\n\ufffd[31m>> \ufffd[39m..\\y\\Jasmine\\lib\\jasmine-2.0.3\\boot.js:120   As I am trying different version. I am getting this error now. Is it related to Jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-08T20:04:44Z", "contents": "jasmineRequire.interface was added as part of the 2.0.3 release to consolidate how jasmine constructs it's public interface. This should have been bundled up in the jasmine.js file for 2.0.3. If you're not seeing it, it sounds like you either don't have the 2.0.3 version of jasmine.js loaded at all, or you have multiple versions of jasmine, and the older one is being loaded later, and clobbering the newer one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-16T23:58:40Z", "contents": "We haven't heard of anyone else with this problem, so it seems like there is either an issue with how your project has jasmine/karma/etc. set up that is causing some of the mismatches, or an issue with the version of angular-mocks you are using and the version of jasmine.\nI'm going to close this, since it doesn't seem like an issue with jasmine itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amejiarosario", "authorAssociation": "NONE", "createdAt": "2015-12-24T17:10:09Z", "contents": "I have the same issue! It's weird I only see this error when I run the whole suite, if I run the single test by itself it show\n    TypeError: 'null' is not an object (evaluating 'currentSpec.$injector')\n        at /Users/admejiar/workspace/eos/client/bower_components/angular-mocks/angular-mocks.js:2267\n        at processQueue (/Users/admejiar/workspace/eos/client/bower_components/angular/angular.js:13292)\n        at /Users/admejiar/workspace/eos/client/bower_components/angular/angular.js:13308\n        at /Users/admejiar/workspace/eos/client/bower_components/angular/angular.js:14547\n        at /Users/admejiar/workspace/eos/client/bower_components/angular/angular.js:14363\n        at /Users/admejiar/workspace/eos/client/bower_components/angular/angular.js:14652\n        at done (/Users/admejiar/workspace/eos/client/bower_components/angular/angular.js:9734)\n        at handleResponse (/Users/admejiar/workspace/eos/client/bower_components/angular-mocks/angular-mocks.js:1216)\n        at /Users/admejiar/workspace/eos/client/bower_components/angular-mocks/angular-mocks.js:1572", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T23:21:18Z", "contents": "The internals of Jasmine were heavily rewritten for the 2.0 release and angular mocks designed for older versions may not work in the new version. Additionally, currentSpec.$injector is not provided by jasmine itself, but by angular-mocks, so I would take your issue up with them first.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "himdel", "authorAssociation": "NONE", "createdAt": "2016-02-25T20:55:11Z", "contents": "The bug is probably caused by PhatomJS not having Function#bind implemented. You may need to provide a shim..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "josencv", "authorAssociation": "NONE", "createdAt": "2016-03-17T21:42:34Z", "contents": "Had the same problem. Never found the root cause, but reinstalling local npm and bower components solved it for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asim-qb", "authorAssociation": "NONE", "createdAt": "2016-05-24T08:20:12Z", "contents": "TypeError: 'null' is not an object (evaluating 'currentSpec.$injector')\nat /home/user/Development/project/bower_components/angular-mocks/angular-mocks.js:2310\nPhantomJS 1.9.8 (Linux 0.0.0): Executed 956 of 1214 (4 FAILED) (4.798 secs / NaN secs)\n\n\nI too had the issue. Rerunning the test solved the issue though.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 678, "url": "https://github.com/jasmine/jasmine/issues/678", "title": "new Date() instanceof Date returns false if jasmine.clock() is installed", "contents": "", "createdAt": "2014-09-23T14:53:43Z", "updatedAt": "2014-09-25T19:59:50Z", "closedAt": "2014-09-25T19:59:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chernetsov", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "chernetsov", "company": "@grammarly "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-23T20:26:55Z", "contents": "What version of jasmine are you using? I just ran this spec and it's green in the current code.\ndescribe('with clock', function() {\n  beforeEach(function() {\n    jasmine.clock().install();\n  });\n\n  afterEach(function() {\n    jasmine.clock().uninstall();\n  });\n\n  it('can date', function() {\n    expect(new Date() instanceof Date).toBe(true);\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chernetsov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-23T20:54:17Z", "contents": "Here is the test that fails.\n  describe('with clock', function() {\n    beforeEach(function() {\n      jasmine.clock().install();\n      jasmine.clock().mockDate();\n    });\n\n    afterEach(function() {\n      jasmine.clock().uninstall();\n    });\n\n    it('can date', function() {\n      expect(new Date() instanceof Date).toBe(true);\n    });\n  });\n\nI use Jasmine version 2.0.1.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-09-24T05:23:31Z", "contents": "Ahh, sorry, I didn't realize you were also mocking out Date. It looks like this is actually happening, not because the object being returned isn't a Date, but because the Date constructor has been rewritten to no longer be the original Date.\nThis looks like a bug we need to fix, so the state jasmine leaves Date in correctly passes an instanceof check. In the meantime, if you want to do something like:\nexpect(Object.prototype.toString.apply(new Date())).toEqual('[object Date]');\nThat should pass, and work in your code under test as well. I'll try to take a look at this at some point soon, but I'd definitely be glad to look at a pull request if you or anyone wants to give it a shot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chernetsov", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-24T22:11:46Z", "contents": "Check out my pull request with the fix.\nTried to follow all the contributor's cookbook rules.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 680, "url": "https://github.com/jasmine/jasmine/issues/680", "title": "Configuring DEFAULT_TIMEOUT_INTERVAL declaratively?", "contents": "Idea: it\u2019d be nice if one could configure some things declaratively and temporarily (per describe()). Caveat: I\u2019m still getting up to speed on Jasmine, so I\u2019m not 100% sure how well this idea fits in, stylistically.\nCurrently:\n  describe(\"long asynchronous specs\", function() {\n    var originalTimeout;\n    beforeEach(function() {\n      originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;\n    });\n    ...\n    afterEach(function() {\n      jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;\n    });\n  });\nDeclarative configuration, via an additional parameter:\n  describe(\"long asynchronous specs\",\n    { DEFAULT_TIMEOUT_INTERVAL: 10000 },\n    function() {\n      ...\n    });\nA similar mechanism could be introduced for it().", "createdAt": "2014-09-26T07:44:07Z", "updatedAt": "2014-10-10T20:20:24Z", "closedAt": "2014-10-10T20:20:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rauschma", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rauschma", "company": "2ality"}, {"login": "sheelc", "company": "Mayvenn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "sheelc", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-09-26T15:37:39Z", "contents": "Minus slightly different syntax, this idea is the one in #483 which it looks like @slackersoft just got committed to master. Can we close this issue as a duplicate?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-10T20:20:24Z", "contents": "Closing this as a duplicate of #483", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 681, "url": "https://github.com/jasmine/jasmine/issues/681", "title": "Allow test to return Promise as an alternative to the done callback", "contents": "As proposed in issue #567 Jasmine should allow a test to return a Promise as an alternative to using the done callback for async testing.\nA test would not specify the done callback as its parameter and would return a Promise:\nit('should pass', function () {\n  return new Promise(function (resolve, reject) {\n    resolve('value');\n  });\n});\n\nit('should fail', function () {\n  return new Promise(function (resolve, reject) {\n    reject(new Error('reason'));\n  });\n});", "createdAt": "2014-09-27T16:19:23Z", "updatedAt": "2018-09-26T13:25:12Z", "closedAt": "2014-10-31T20:33:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "analog-nico", "authorAssociation": "NONE", "participants_count": 16, "participants_data": [{"login": "analog-nico", "company": null}, {"login": "bilalq", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mjackson", "company": "@ReactTraining "}, {"login": "OliverJAsh", "company": null}, {"login": "piuccio", "company": "@en-japan-air "}, {"login": "wmadden", "company": "Remerge"}, {"login": "joezimjs", "company": null}, {"login": "matthewjh", "company": null}, {"login": "ewinslow", "company": "Google"}, {"login": "dcleao", "company": "Hitachi Vantara"}, {"login": "connor4312", "company": "@Mixer & @Microsoft"}, {"login": "monkpit", "company": null}, {"login": "sgravrock", "company": null}, {"login": "ibrahimbensalah", "company": "Xania Software"}, {"login": "BenoitZugmeyer", "company": "@keymetrics "}], "comments_count": 24, "comments_data": [{"authorLogin": "bilalq", "authorAssociation": "NONE", "createdAt": "2014-09-27T20:04:25Z", "contents": "For most Promise implementations, a simple check like this should suffice to recognize if it returns a Promise:\nif (itReturnVal && typeof itReturnVal.then === 'function') {\n  // Implementation details here\n}\nOnce that's done, the test can be treated as an async one and we could just stick a .then(done, fail) on the returned promise (keeping the usual timeout for async tests).\nOne tricky area here is angular & angular-mocks. In tests, then subscribers on $q promises aren't triggered until a digest cycle happens. The change to introduce compatibility between the two should probably take place in angular-mocks, but it's worth thinking about.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-22T20:07:12Z", "contents": "Currently, jasmine doesn't care about the return value from it, beforeEach, afterEach, etc. and this would introduce too much complexity into the QueueRunner around async detection. You could always define your own function that wrapped this all up. Something like this might work:\nfunction successfulPromise(description, fn) {\n    it(description, function(done) {\n        fn().then(done, done.fail);\n    };\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-31T20:33:20Z", "contents": "We don't really want to support the branching code necessary to make this work. With done and done.fail using promises should be pretty straightforward in your specs, without changes to jasmine itself.\nThanks for using jasmine!\nClosing.", "reactions_count": 16, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "mjackson", "authorAssociation": "NONE", "createdAt": "2015-01-27T02:17:17Z", "contents": "It would be really, really awesome if this worked. :(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "OliverJAsh", "authorAssociation": "NONE", "createdAt": "2015-06-15T11:34:17Z", "contents": "IMO this is enough reason to use Mocha instead of Jasmine. \ud83d\udc4d to this change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "piuccio", "authorAssociation": "NONE", "createdAt": "2015-06-15T11:46:48Z", "contents": "@OliverJAsh agree", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wmadden", "authorAssociation": "NONE", "createdAt": "2015-08-30T15:53:57Z", "contents": "It'd really be great to see support for Promise return values in Jasmine. Using Promises would mean that Jasmine can internally take advantage of the advances entering the language in ES6, like the async function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-01T05:36:15Z", "contents": "Given that jasmine still supports IE8, we won't be able to actually use any of the other new features that aren't supported by the older browsers we still want to work with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wmadden", "authorAssociation": "NONE", "createdAt": "2015-09-01T16:41:47Z", "contents": "@slackersoft: you don't need any explicit dependency on a Promise implementation to add this behavior.\n@bilalq provided sample code that would work. In browsers with no implementation of Promises it'd simply not return a \"thenable\" and have no effect.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wmadden", "authorAssociation": "NONE", "createdAt": "2015-09-01T16:50:41Z", "contents": "Sorry, I think I misunderstood your last comment. You're right, you won't be able to take advantage of the new JS features in the output code, but you'd still be able to use them with a compiler like Babel.\nAt any rate the biggest advantage would be to the users of Jasmine, rather than the authors.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-09-14T16:43:18Z", "contents": "http://www.sitepoint.com/promises-in-javascript-unit-tests-the-definitive-guide/\nThis seems a lot nicer than using done and done.fail. The reasoning that I saw for not supporting this sounds like you are just too lazy to add it, though I guess some sort of plugin or library that can handle this and is compatible with Jasmine would work just fine as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-09-14T22:01:12Z", "contents": "Anyone who wants some better Promise compatibility:\nhttps://www.npmjs.com/package/jasmine-promise-matchers\nThis is something like the chai-as-promised as mentioned in the article that I linked in my previous comment. This still isn't quite as nice as being able to return a promise, but it's a step in the right direction.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthewjh", "authorAssociation": "NONE", "createdAt": "2015-10-13T20:01:04Z", "contents": "I needed this and wrote a small module to handle returning Promises from jasmine test fns. Resolution and errors are handled for you.\nhttps://www.npmjs.com/package/jasmine-promises\ndescribe('my fancy thing', function () {\n    beforeEach(function () {\n        return doSomePreparatoryTaskThatIsAsync();\n    });\n\n    it('should be extra fancy', function () {\n        return fancyAsync().then(function (thing) {\n            expect(thing).toBeFancy();\n        });\n    });\n});\nMight be useful for some of you guys.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-13T20:45:29Z", "contents": "DARN YOU @matthewjh!!! I was in the middle of creating the very same thing! Of course, mine is \"better\" ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ewinslow", "authorAssociation": "NONE", "createdAt": "2016-03-23T00:44:48Z", "contents": "I really think the position of the Jasmine team here should be reconsidered. Another reason to support Promise-returning functions: async/await:\nit('has some async behavior', async function() {\n  var result = await someAsyncTask();  \n  expect(result.value).toBe(expectedValue);\n});\nIt's just annoying boilerplate to make this work with done/done.fail:\nit('has some async behavior', async function(done) {\n  try {\n    var result = await someAsyncTask();  \n  } catch (e) {\n    done.fail();\n  }\n\n  expect(result.value).toBe(expectedValue);\n  done();\n});", "reactions_count": 1, "reactions_data": ["HOORAY"]}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2016-03-23T13:41:53Z", "contents": "I agree with @ewinslow\nA plugin is great, but I've never liked the idea of trying to make sure all our plugins are being kept up-to-date with the main library, especially when you may need multiple plugins. If the plugins were maintained by the team that maintained the main libray (e.g. Jasmine team made a Promise-compatible plugin and maintained it with Jasmine), then I'm ok with the plugin because updates are more likely to occur at the same time.\nIn any case, async/await is coming, and in fact already exists with tools like Babel, so this really should be something that Jasmine supports.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dcleao", "authorAssociation": "NONE", "createdAt": "2016-03-31T23:36:43Z", "contents": "I need this feature badly. Mocha moved on from done/done.fail. You should too.\nhttp://tobyho.com/2015/12/16/mocha-with-promises/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2016-04-01T12:35:36Z", "contents": "@dcleao You can get this feature using this plugin for now: https://www.npmjs.com/package/jasmine-promises.\nStill, it'd be nice to see this \"officially\" supported.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "connor4312", "authorAssociation": "NONE", "createdAt": "2016-09-26T20:29:50Z", "contents": "It would be great if we could get this feature in. Moreso than they were in 2014, Promises have become standard and ubiquitous. The ES7 proposals and inclusion in core browser APIs such as Fetch indicate that this trajectory is unlikely to change. Mocha has also had promise support for about two years.\n\nWith done and done.fail using promises should be pretty straightforward in your specs, without changes to jasmine itself.\n\nThis isn't really a great solution. It requires two repetitive LOC on every test, .then(done).catch(done.fail). If forgotten it's likely to lead to weird races, and it is likely to be forgotten since developers are not used to having to do this--almost every Node API which has asynchronous capabilities support promises nowadays. And of course it makes async/await much more ugly, as ewinslow said.\nThis would be a fairly small change in the codebase and may be implemented without any backwards-incompatible behaviour. It'd be a huge quality of life improvement for many developers, including myself! :) I'd be more than happy to submit a PR if there's interest.", "reactions_count": 18, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "monkpit", "authorAssociation": "NONE", "createdAt": "2018-03-05T20:48:32Z", "contents": "#1356 seems to have added this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-03-05T21:18:35Z", "contents": "@monkpit Yes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ibrahimbensalah", "authorAssociation": "NONE", "createdAt": "2018-09-26T11:02:42Z", "contents": "I would like to share my solution / hack which is in my opinion could very well be built-in, with no additional complexity to existing code. Evidence is given by this code:\nI am running jasmine from jspm command line:\n\nnpx jspm run spec/runner\n\nthen in my file spec/runner.ts I have first, the jasmine import and configuration for who ever is looking for a complete working example, followed by an override of the it function from the jasmine core, and finally the bootstrapping of the jasmine runner jasmine.execute().\nimport Jasmine = require(\"jasmine\")\njasmine.config({\n    \"spec_dir\": \"spec\",\n    \"spec_files\": [\n        \"**/*[sS]pec.js\"\n    ],\n    \"helpers\": [\n        \"helpers/**/*.js\"\n    ],\n    \"stopSpecOnExpectationFailure\": false,\n    \"random\": true\n});\nlet assertAsync = (assertion?: (done?: DoneFn) => void | { then: Function }) => {\n    return (done?: DoneFn) => {\n        let result = assertion(done);\n        if (result && typeof result.then === \"function\")\n            result.then(done, done.fail);\n        else\n            done();\n    }\n};\n\nglobal['it'] =\n(jasmineIt => (expectation: string, assertion?: (done: DoneFn) => void, timeout?: number) => jasmineIt(expectation,\n    assertAsync(assertion),\n    timeout))(it);\n\n// require statements will be resolved by jspm / systemjs. refer to jspm.io to find more info\nrequire(\"./specs/myAsyncSpec\");\n\njasmine.execute();\n\n\nAnd now in my specs i can write code supporting promises / async / await\ndescribe(\"manifest\", () => {\n    it(\"icons should exists\",\n        async () => {\n            await new Promise((resolve, reject) => {\n                resolve();\n            });\n        });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BenoitZugmeyer", "authorAssociation": "NONE", "createdAt": "2018-09-26T13:21:29Z", "contents": "@ibrahimbensalah Jasmine supports promises since v2.7.0 (more than a year ago).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ibrahimbensalah", "authorAssociation": "NONE", "createdAt": "2018-09-26T13:25:12Z", "contents": "I noticed, just after posting unfortunately. Happy to see this is actually supported despite first reaction from @slackersoft", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 683, "url": "https://github.com/jasmine/jasmine/issues/683", "title": "Restore behavior for spy", "contents": "I think it would be a good to restore a spy to its original value (not talking about reset).\nLets say I spy on an function but later on I want to remove my spy , just for clean up purpose.\nThis would help different parts of the test suites to create their own spies on certain global functions.\nIt has been done in sinonJs library. http://sinonjs.org/docs/#spies", "createdAt": "2014-10-06T18:00:19Z", "updatedAt": "2016-11-18T20:09:37Z", "closedAt": "2014-10-06T20:42:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gyandeeps", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "gyandeeps", "company": "Cerner"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "fluky", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-06T20:42:27Z", "contents": "Jasmine automatically restores spies after each spec is run. If you just want to call the original function in your test use and.callThrough", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluky", "authorAssociation": "NONE", "createdAt": "2016-09-26T20:30:03Z", "contents": "If Jasmine automatically restores spies after each spec is run, why do I get \"Error:  : setItem has already been spied upon\".  I think you must mean \"resets\" the spy after each.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T20:09:37Z", "contents": "Jasmine removes any spies that were created with spyOn at the end of the context where they were created. Hedging because a spy created in a beforeAll won't be removed until the end of that describe, but anywhere else it will be removed at the end of the last afterEach for the spec.\nIf you don't use spyOn to set up the first spy Jasmine won't know to remove it and a later spyOn call will fail because the external object already has a spy for the property specified.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 684, "url": "https://github.com/jasmine/jasmine/issues/684", "title": "Feature request : beforeAll and afterAll callback", "contents": "It could be nice to have a beforeAll/afterAll callback. Typical use case is login before running tests and logout after runned all tests.", "createdAt": "2014-10-06T19:20:35Z", "updatedAt": "2014-10-20T08:01:13Z", "closedAt": "2014-10-06T20:41:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cindoum", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cindoum", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "lenntt", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-06T20:41:38Z", "contents": "We already merged this into master (ba0982d). You can run from there if you want, we're working on getting an official release out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cindoum", "authorAssociation": "NONE", "createdAt": "2014-10-07T12:58:33Z", "contents": "Just found that out after posting my issue. Thank you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lenntt", "authorAssociation": "NONE", "createdAt": "2014-10-20T08:01:13Z", "contents": "Any idea when this will be packed into a new release?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 687, "url": "https://github.com/jasmine/jasmine/issues/687", "title": "Ajax - POST Body Expect is Incorrect", "contents": "I'm kinda new to this, but it looks like an issue to me.\nI'd like to test a POST over jQuery Ajax. Need to test and make sure the BODY is getting attached properly. The comparison failure message says the items are different. But they sure look the same, or at least there's no way to tell the difference. They look the same to me....\nAny thoughts?\nIs this not supported?\nIs it because of the \"JSON.stringify(body)\"? When you add the stringify to the output, the toBe still fails.\n\nExpected { some: 'body', another: 'something' } to be { some: 'body', another: 'something' }.\n\ndescribe(\"Tests\", function() {\n        beforeEach(function () {\n            jasmine.Ajax.install();\n        });\n        afterEach(function() {\n            jasmine.Ajax.uninstall();\n        });\n        it(\"Jasmine Test\", function() {\n            var body = { some: 'body', another: \"something\" };\n            var req = {\n                type: \"POST\",\n                url: \"/api\",\n                data: JSON.stringify(body),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                beforeSend: function (request) {\n                    request.setRequestHeader(\"X-Test-Header\", \"value\");\n                },\n                success: function(data) { },\n                error: function(jqXHR) {}\n            };\n            $.ajax(req);\n            //Fails\n            expect(jasmine.Ajax.requests.mostRecent().data()).toBe(body);\n            //Works\n            expect(jasmine.Ajax.requests.mostRecent().method).toBe(\"POST\");\n            expect(jasmine.Ajax.requests.mostRecent().url).toBe(\"/api\")\n            expect(jasmine.Ajax.requests.mostRecent().requestHeaders[\"X-Test-Header\"]).toBe(\"value\")\n        });\n    });\n\nExpected { some: 'body', another: 'something' } to be { some: 'body', another: 'something' }.\nError: Expected { some: 'body', another: 'something' } to be { some: 'body', another: 'something' }.\nat stack (http://localhost:8500/test/libs/jasmine/lib/jasmine-2.0.2/jasmine.js:1304:17)\nat buildExpectationResult (http://localhost:8500/test/libs/jasmine/lib/jasmine-2.0.2/jasmine.js:1281:14)\nat Spec.Env.expectationResultFactory (http://localhost:8500/test/libs/jasmine/lib/jasmine-2.0.2/jasmine.> js:473:18)\nat Spec.addExpectationResult (http://localhost:8500/test/libs/jasmine/lib/jasmine-2.0.2/jasmine.> js:271:34)\nat Expectation.addExpectationResult (http://localhost:8500/test/libs/jasmine/lib/jasmine-2.0.2/jasmine.> js:431:21)\nat Expectation.toBe (http://localhost:8500/test/libs/jasmine/lib/jasmine-2.0.2/jasmine.js:1220:12)", "createdAt": "2014-10-08T01:29:25Z", "updatedAt": "2014-10-08T16:01:01Z", "closedAt": "2014-10-08T16:00:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gregberns", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gregberns", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-08T04:36:05Z", "contents": "The toBe matcher does not do deep object comparison. I think what you want is toEqual for this.\nAlso, in the future, if you think something is an issue with jasmine-ajax please log it in the jasmine-ajax issues list.\nThanks for your interest in jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregberns", "authorAssociation": "NONE", "createdAt": "2014-10-08T16:00:59Z", "contents": "That was it. Will do in the future. Thanks for the library.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 688, "url": "https://github.com/jasmine/jasmine/issues/688", "title": "jasmine.log() missing in Jasmine 2.0", "contents": "I have a spec that catches all errors that are thrown, even syntax errors in the specs themselves. (From How to make a Jasmine BDD test suite fail on generic JavaScript syntax errors).\nThe following was working in Jasmine 1.3, but when I upgraded to 2.0 it seems that jasmine.log() and function to stop Jasmine from running further tests does not work anymore.\ndescribe('App code & tests', function() {\n    it('should contain no Javascript errors', function() {\n        var numErrors = (window.errors) ? window.errors.length : -1;\n        expect(numErrors).toBe(0);\n\n        if (window.errors && numErrors > 0) {\n            var loc = window.location;\n            jasmine.log('Encountered ' + numErrors + ' error(s):');\n\n            for (var i = 0; i < numErrors; i += 1) {\n                jasmine.log(window.errors[i].errorMessage, ' in file ',\n                window.errors[i].url.replace(loc.protocol+'//', '').replace(loc.host, ''), ' on line ',\n                window.errors[i].lineNumber);\n            }\n            jasmine.log('If you need more info, run mvn jasmine:bdd and check your browser console!');\n\n            // There is an error in the code - stop running tests!\n            jasmine.Queue.prototype.next_ = function () {\n                // to instead skip to the end\n                this.onComplete();\n            };\n        }\n    });\n});\n\nWas there a reason this was changed? And is there an alternative way to achieve the same thing?", "createdAt": "2014-10-09T17:16:47Z", "updatedAt": "2014-10-25T05:48:33Z", "closedAt": "2014-10-25T05:48:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "amylo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "amylo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-10T20:31:01Z", "contents": "There was some fairly heavy refactoring that went into making the 2.0 release so that the code is more maintainable and we are better able to fix issues and accept pull requests. As part of this, the way the queue of specs is handled doesn't work in the same way, and many things have been hidden from view. This is why the hack that you're using to stop the remaining specs from running no longer works. The solution to this problem is probably something like #414.\n@ragaskar might have a bit more context on why jasmine.log specifically got removed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-24T20:08:41Z", "contents": "I just talked to @ragaskar about jasmine.log and it sounds like we removed it because it was mostly just a wrapper around console.log and as such seems redundant.\nYou should be able to change all of your instances of jasmine.log to console.log and at least have this spec failing properly. We don't have any plans to let the queue of functions being run for a spec be modified though, so if you don't want the specs to run at all, you'll have to wait for some kind of fail fast option (#414) or implement that kind of thing yourself.\nCan we close this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amylo", "authorAssociation": "NONE", "createdAt": "2014-10-25T05:48:32Z", "contents": "Makes sense. Thank you for taking the time to find out.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 689, "url": "https://github.com/jasmine/jasmine/issues/689", "title": "No specs found on node 0.11.14", "contents": "Just tried Jasmine on Node 0.11.14 (unstable) and I get some errors. It also doesn't seem to find the specs.\n$ jasmine\nutil.print: Use console.log instead\nStartedutil.print: Use console.log instead\n\nutil.print: Use console.log instead\n\nutil.print: Use console.log instead\nNo specs foundutil.print: Use console.log instead\n\nutil.print: Use console.log instead\nFinished in 0.001 secondsutil.print: Use console.log instead\n\ndeprecations are an easy fix but the fact it doesn't find the specs is kind of a non-starter. Not that I was expecting it to be all hunky dory on an unstable node release. Just thought I'd mention.", "createdAt": "2014-10-13T21:49:39Z", "updatedAt": "2014-10-21T05:59:27Z", "closedAt": "2014-10-21T05:59:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "PhilT", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "PhilT", "company": "Electric Visions Ltd"}, {"login": "amavisca", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2014-10-21T04:01:19Z", "contents": "Which jasmine library are you trying to use? This is the core (which doesn't include a command line of any sort).\nThe official node module for running your Jasmine tests is: https://github.com/pivotal/jasmine-npm", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PhilT", "authorAssociation": "NONE", "createdAt": "2014-10-21T05:57:09Z", "contents": "Sorry, I guess I should have posted this there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PhilT", "authorAssociation": "NONE", "createdAt": "2014-10-21T05:59:26Z", "contents": "jasmine/jasmine-npm#8", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 690, "url": "https://github.com/jasmine/jasmine/issues/690", "title": "Significant increase in testing time on CI with upgrade to 2.0.3", "contents": "Hi, we have experienced an approximate doubling of testing on on our CI with the upgrade from jasmine-core 2.0.0 to 2.0.2. Locally, running rake jasmine:ci appears to take a very large amount of time.\nIs there anything we can do to remedy this? In the meantime, I've upgraded only jasmine, but set the version of jasmine-core to 2.0.0.", "createdAt": "2014-10-15T21:35:19Z", "updatedAt": "2014-12-11T21:08:30Z", "closedAt": "2014-11-22T23:03:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NavyAnt24", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "NavyAnt24", "company": "Riverbed"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-10-19T20:56:54Z", "contents": "This it likely the same issue from #640.\nWe have been unable to reproduce this issue, so it is difficult to debug. If your test suite is open source or if you can provide a representative example of a slow test suite, it would help us fix this issue.\nFor now, you can either stay on jasmine-core 2.0.0 or use jasmine selenium runner instead of phantom.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NavyAnt24", "authorAssociation": "NONE", "createdAt": "2014-12-11T21:07:56Z", "contents": "@Gerg @slackersoft Just updated to jasmine 2.1.0 and jasmine-core 2.1.3, and this issue is resolved. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 692, "url": "https://github.com/jasmine/jasmine/issues/692", "title": "Lack of rspec/let style support preventing upgrading to Jasmine 2.0", "contents": "I have failed to get jasmine-let or memo-is to work with Jasmine 2.0, and those are libraries I would depend on for helping structure test context easily and in a manner similar to what I have grown accustomed to doing with rspec.  jasmine-let work well with 1.3.1, so I will continue to use this as it is unlikely any improvements offered in 2.0 are more important than have a respec/let like facility; however, I am concerned that this will become a genuine problem in the long run.  Is there any plan to fix this (or is there a feature that I am just not aware of that allows for a similar pattern), or are you aware of any library that actually does work with Jasmine 2.0?", "createdAt": "2014-10-19T19:37:13Z", "updatedAt": "2014-10-23T20:18:13Z", "closedAt": "2014-10-23T20:18:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jthibeaux", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jthibeaux", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-23T20:18:11Z", "contents": "It sounds like you should talk to the authors of jasmine-let and memo-is and work with them on getting a version that is compatible with jasmine 2.0. This was never a jasmine core feature, so this seems like it is either a duplicate of #528 or an issue with an external library.\nThanks for using jasmine!\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 693, "url": "https://github.com/jasmine/jasmine/issues/693", "title": "Page Object Pattern - Assertions \"Bad\"", "contents": "The biggest issue I have with Assertions in Page Object Pattern is the time consumed to run the same assertions constantly but believe there are benefits to including Assertions in the Page Object model.  So I'm suggesting mock objects in place for:\nelement()\nelement.all()\nexpect()\nAnd a boolean switch of when to run the assertion and when to ignore the assertion.\nThis way assertions can still be put inside the page objects but be active for specific tests only.\n''''\nbase.prototype.element = function(locator) {\n    if(this.runAssert) {\n        return element(locator);\n    } else {\n        return mockLocator;\n    }\n}\n\nbase.prototype.element.all = function(locator) {\n    if(this.runAssert) {\n        return element.all(locator);\n    } else {\n        return mockLocatorList;\n    }\n}\n\nbase.prototype.expect = function (locator, opt_parentElementFinder) {\n    if(this.runAssert) {\n        return expect(locator, opt_parentElementFinder);\n    } else {\n        return mockMatcher;\n    }\n}\n\nvar mockLocatorList = {\n    get: function() {return mockLocator}\n}\n\nvar mockLocator = {\n     click: function(){return true;},\n     sendKeys: function(){return true;},\n     getTagName: function(){return true;},\n     getCssValue: function(){return true;},\n     getAttribute: function(){return true;},\n     getText: function(){return true;},\n     getSize: function(){return true;},\n     getLocation: function(){return true;},\n     isEnabled: function(){return true;},\n     isSelected: function(){return true;},\n     submit: function(){return true;},\n     clear: function(){return true;},\n     isDisplayed: function(){return true;},\n     getOuterHtml: function(){return true;},\n     getInnerHtml: function(){return true;},\n     getId: function(){return true;}\n}\n\nvar mockMatcher  = {\n    toEqual: function(){return true;},\n    toBe: function(){return true;},\n    toMatch: function(){return true;},\n    toBeDefined: function(){return true;},\n    toBeUndefined: function(){return true;},\n    toBeNull: function(){return true;},\n    toBeTruthy: function(){return true;},\n    toBeFalsy: function(){return true;},\n    toContain: function(){return true;},\n    toBeLessThan: function(){return true;},\n    toBeGreaterThan: function(){return true;},\n    toThrow: function(){return true;}\n};\n\n//Terrible example code that doesn't function for implementing above: \nit(\"should have a hyperlink\", function() {\n    //Some way to turn on/off the assertion...global var?\n    var textXpath = \".//*[@id=\"folderContentsTable\"]/tbody/tr/td/a/span\";\n\n    var allCells = element.all(by.xpath(textXpath));\n    expect(allCells.get(0).getText()).toBe('Jasmine');\n\n    var firstCell = element(by.xpath(textXpath));\n    coralExpect(firstCell.getText()).toBe('Jasmine');\n}\n\n''''\nI had noticed handling the \"expect()\" function alone as a mock had the same decrease in performance as not.  So the other functions were added.", "createdAt": "2014-10-21T13:47:58Z", "updatedAt": "2014-10-21T16:06:45Z", "closedAt": "2014-10-21T16:06:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "flavouski", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "flavouski", "company": null}, {"login": "joshuacc", "company": "Hobsons"}], "comments_count": 2, "comments_data": [{"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2014-10-21T15:04:42Z", "contents": "@flavouski I think you intended to file this issue with the Protractor project, not Jasmine. Jasmine doesn't have any concept of Page Objects.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "flavouski", "authorAssociation": "NONE", "createdAt": "2014-10-21T16:06:40Z", "contents": "@joshuacc Good call...  Split in the middle between Protractor (element(), element.all()) and Jasmine (expect()).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 694, "url": "https://github.com/jasmine/jasmine/issues/694", "title": "expects in Asynchronous Support still throws an console log", "contents": "If I use setTimeout and the done() function in an it block then i get a weird console log.\nUncaught Error: 'expect' was used when there was no current spec, this could be because an asynchronous test timed out.\nThe message tells me that u still know about this bug.", "createdAt": "2014-10-23T07:24:38Z", "updatedAt": "2019-05-08T20:30:26Z", "closedAt": "2015-01-20T00:10:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "akrillo89", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "akrillo89", "company": "mycompany"}, {"login": "lenntt", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "chillyprig", "company": null}, {"login": "lshengjian", "company": "SISE Game dept."}, {"login": "sunilkushwaha0101", "company": "Agile infoways"}, {"login": "Deepakanandrao", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "lenntt", "authorAssociation": "NONE", "createdAt": "2014-10-23T08:07:53Z", "contents": "is it possible that your 'done()' gets called before the 'expect' ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-03T21:24:09Z", "contents": "The console.log message you are seeing is jasmine telling you it thinks there might be a bug in your spec code because there is no spec to associate the expectation with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chillyprig", "authorAssociation": "NONE", "createdAt": "2014-11-12T11:04:17Z", "contents": "Let's say If I have this method:\n$scope.scrollTopRefresh = function () {\n        $ionicScrollDelegate.scrollTop(true);\n\n        $timeout(function () {\n            $scope.refreshTopics();\n        }, 1000);\n    }\n\nHow do I verify $scope.refreshTopics(); will be called?\nI tried to use setTimeout() and done() it seem doesn't work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-13T20:44:33Z", "contents": "The mock clock is probably the right thing for this problem. This has the added advantage of not actually waiting for the timeout to trigger which makes your suite faster.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-20T00:10:09Z", "contents": "This has morphed a bit into a \"how do I test X?\" discussion instead of an issue with jasmine itself. If you still have questions please ask at jasmine-js@googlegroups.com where the community can help answer.\nI'm going to close this, as jasmine throwing this error is expected if expect is called outside of an it etc.\nThanks for using jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lshengjian", "authorAssociation": "NONE", "createdAt": "2015-04-03T01:01:47Z", "contents": "describe('Message Test', function () {\nit('Message Test', function (done) {\nMessage.create({title:'msg1',text:\"text1\"}, function (err, data) {\nexpect(data.title).toBe('msg1');\nexpect(data.text).toBe('text1');\ndone();\n});\n});\n});", "reactions_count": 13, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP", "CONFUSED", "CONFUSED", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "sunilkushwaha0101", "authorAssociation": "NONE", "createdAt": "2017-06-02T10:12:29Z", "contents": "@lshengjian your solution worked for me :)", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Deepakanandrao", "authorAssociation": "NONE", "createdAt": "2019-05-08T20:30:25Z", "contents": "Worked for me inside subscribe() too. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 695, "url": "https://github.com/jasmine/jasmine/issues/695", "title": "Passing a value to done callback should throw an error", "contents": "I believe it's how mocha works and it would simplify a lot of things when it comes to async tests .\nFor instance :\ndescribe('GET /',function(){\n    it(\"is 200\",function(done){\n        this.agent\n            .get('/')\n            .expect(200,done);\n    });\n});\n\nshould throw an error if the callback is passed an error instead of doing\ndescribe('GET /',function(){\n    it(\"is 200\",function(done){\n        this.agent\n            .get('/')\n            .expect(200,function(err){\n                  expect(err).toBe(null);\n                  done();\n              });\n    });\n});", "createdAt": "2014-10-24T05:59:52Z", "updatedAt": "2014-10-24T20:25:43Z", "closedAt": "2014-10-24T20:25:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Mparaiso", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Mparaiso", "company": "mpmedia"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-24T20:25:40Z", "contents": "Thanks for using jasmine, this has been discussed in #567 but we feel this syntax would break users who may want to pass the done callback into their promise as the resolving function, so I don't think we're going to implement this.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 697, "url": "https://github.com/jasmine/jasmine/issues/697", "title": "Memory Leaks in Spies", "contents": "We've got a large project and are using spies and stubs to test behaviours, and we end up passing about a lot of bound callbacks.\nUnfortunately we have a very unloved test suite which seems to be riddled with memory leaks. In investigating this I've seen a lot of our bound callbacks being held by spies being kept in reporters \"actual\" due to their use in our asserts statements. There's also references all over the place in mostRecent/nthCall args arrays.\nDo these need to be kept once the suite has completed?", "createdAt": "2014-10-27T11:15:27Z", "updatedAt": "2016-09-28T00:38:54Z", "closedAt": "2016-09-28T00:38:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aslate", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "aslate", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-10-27T20:30:16Z", "contents": "What version of jasmine are you using? We've seen a couple of issues with 2.0.3 (#640 & #690) that seem to be specific to running with phantomjs.\nAfter a bit of digging this morning, it seems like we may have traded off CPU for memory a bit with some of the changes to failure messages in matchers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aslate", "authorAssociation": "NONE", "createdAt": "2014-10-28T11:47:17Z", "contents": "We're running 1.3.1 and it's quite a large project to just go ahead and upgrade to 2.0. I might be able to knocking up some sample tests for 2.x and see whether callbacks, spies and expectations still get captured in the same way.\nI should have mentioned that our specific issues are with PhantomJS runner (we hit something like 2 Gig) whereas Chrome runs high it's not as bad.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-27T06:09:00Z", "contents": "We've definitely seen phantomjs fall over much harder when a lot of memory gets used, so I'm not surprised you're seeing phantom slow way down and not chrome.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["1.3.x"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 701, "url": "https://github.com/jasmine/jasmine/issues/701", "title": "Ruby gem for version 2.0.4 ?", "contents": "I notice that there's tags for 2.0.3 and 2.0.4 releases.  However the latest version available on ruby gems is 2.0.2  https://rubygems.org/gems/jasmine-core\nI've been holding off merging in Jasmine 2.0 support for GuardJasmine guard/guard-jasmine#161 (comment) until a release is cut so I can properly support disabled suites.\nThanks!", "createdAt": "2014-11-10T01:49:59Z", "updatedAt": "2014-11-11T16:33:52Z", "closedAt": "2014-11-10T15:13:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nathanstitt", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nathanstitt", "company": "@argosity"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-10T05:37:06Z", "contents": "The 2.0.3 and 2.0.4 tags are npm packaging related only. The 2.0.2 gem has the same code as 2.0.4. We're working on getting 2.1.0 out now, which should get the versions back on track.\nSorry for the confusion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nathanstitt", "authorAssociation": "NONE", "createdAt": "2014-11-10T15:13:29Z", "contents": "Thanks & sorry for the confusion on my part.  I must be doing something incorrect in Guard Jasmine then and still pulling in the old code.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 702, "url": "https://github.com/jasmine/jasmine/issues/702", "title": "HTML report being able to show timestamps/duration ", "contents": "I'm writing high-level application tests with jasmine.\nOne of the problems is, that I get a lot of these kind of failures, also having a domino effect on other specs:\n\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n\nOf course, that is my very own problem.\nHowever, It would really help analyzing these errors (e.g. to check whether there is a real regression or the performance just went down) (and to see performance trends), if the timestamp/duration of the spec execution was being shown.\nI think showing it in a default view would only pollute the nice&clean output, but perhaps it would be useful to do one of these:\n\nShow it when the URL has a ?show_time=true parameter set.\nShow it in a hidden field (so see it with a custom css).\n\nI was wondering if more users would benefit from having a feature like this.", "createdAt": "2014-11-11T15:32:48Z", "updatedAt": "2014-11-12T09:44:05Z", "closedAt": "2014-11-12T09:44:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lenntt", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lenntt", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "lenntt", "authorAssociation": "NONE", "createdAt": "2014-11-11T16:52:18Z", "contents": "It would certainly help writing a proof of concept if the HtmlReporter could be subclassed with proper calls to its superclass.\nhttp://joshgertzen.com/object-oriented-super-class-method-calling-with-javascript/\nNot being a total javascript hero, I don't know how to do this. Any ideas?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-11T17:48:40Z", "contents": "This seems like a good opportunity to write a custom reporter. It should be relatively easy to recover the spec duration by looking at the difference between the specStarted and specDone calls.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lenntt", "authorAssociation": "NONE", "createdAt": "2014-11-12T09:44:05Z", "contents": "I was looking for a way to re-use the default html-reporter (I hoped I could do it by subclassing it). Problem I run into by decorating it, is that its sort of linear written and I don't have access to its variables. (e.g. accessing the results in jasmineDone, or the timer).\nCurrent 'hack', feedback is welcome.\nvar decorateHtmlReporter = function( reporter )\n{\n    var _originalSpecStarted = reporter.specStarted;\n    reporter.specStarted = function( result )\n    {\n        result.startTime = new Date().getTime();\n        _originalSpecStarted( result );\n    };\n\n    var _originalSpecDone = _reporter.specDone;\n       reporter.specDone = function( result )\n    {\n        result.doneTime = new Date().getTime();\n        console.log( result.fullName );\n        console.log( \"duration:\" + ( result.doneTime - result.startTime ) + \"ms\");\n        if( result.status === \"failed\" )\n            console.error( result.status );\n        _originalSpecDone( result );\n    };\n};\n\nI'll close this issue, since I realize I'm probably one of the very few having this feature request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 703, "url": "https://github.com/jasmine/jasmine/issues/703", "title": "Please clarify asynchronous function support vs. concurrent test execution", "contents": "There's some confusion whether or not tests run asynchronously or not:\nhttp://stackoverflow.com/questions/25652895/are-test-cases-in-jasmine-2-0-run-in-parallel\nIt's somewhat spelled out on this page https://github.com/pivotal/jasmine/blob/master/release_notes/20.md, but I think it should be more prominent:\n\nThe next function, whether it's a before, spec or after, will wait until this function is called or until a timeout is reached.\n\nPerhaps this can turn into a feature request for async execution.", "createdAt": "2014-11-12T16:35:56Z", "updatedAt": "2019-03-27T00:56:30Z", "closedAt": "2014-11-13T21:04:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "motherwaym", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "motherwaym", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "davejon1970", "company": null}, {"login": "matthewadams", "company": "@SciSpike "}, {"login": "brandonros", "company": null}, {"login": "CrowdHailer", "company": "@chingventures "}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-13T21:04:20Z", "contents": "Jasmine does not actually run your specs in parallel in any way. It is however possible to have specs whose asynchronous portion takes long enough that the built-in time limit elapses which will cause jasmine to start running the next spec, even though there may still be code running from earlier specs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davejon1970", "authorAssociation": "NONE", "createdAt": "2016-11-03T16:46:59Z", "contents": "We have tests that are still using 1.3.1 version of the test framework.  These tests actually add and remove data from a database in beforeEach and afterEach methods.  They are really integration tests not unit tests.  Anyway, there are intermittent failures related to expected data from the database in the tests.  Could this be caused by this built-in time limit elapsing? What is the time limit? Can this timeout happen to tests in the same file or only in tests in different files?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T22:22:58Z", "contents": "The Jasmine 2.x default async timeout is 5 seconds and is defined in jasmine.DEFAULT_TIMEOUT_INTERVAL, I believe it is the same in 1.3 as well. This timeout only affects specs that are run asynchronously (runs/waitsFor in 1.3, done callback in 2.x).\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "matthewadams", "authorAssociation": "NONE", "createdAt": "2017-06-20T18:12:51Z", "contents": "@slackersoft Perhaps my understanding is flawed here: I understood that if a spec takes longer than its configured timeout (either jasmine.DEFAULT_TIMEOUT_INTERVAL or the timeout interval given as the last argument to the spec (it('should ...', done => { ... }, 10000)), the asynchronous spec fails with - Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nWe have an ever increasing number of integration specs that each take up to several seconds to complete, and we'd like to run them in parallel. Simply decreasing the spec timeout causes them to fail with the above error message.\nYour comment above seems to indicate that you could run tests in parallel, but it doesn't appear to be supported based on our experimentation.\nPlease either explain how to run specs in parallel or confirm that tests cannot be run in parallel successfully.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-20T18:55:56Z", "contents": "Because of the single-threadedness of javascript, it isn't really possible to run your tests in parallel in a single browser window. My comment above a way in which a suite could have code from more than one spec interleaved because Jasmine doesn't have any way to stop other async code that might be running after a call to done or a timeout.\nIf you want to run specs in parallel, you'll need to split them across multiple top level suites, or implement a custom boot that has a segregate your specs/suites when calling env.execute().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brandonros", "authorAssociation": "NONE", "createdAt": "2017-08-03T17:54:22Z", "contents": "@slackersoft\n\nIf you want to run specs in parallel, you'll need to split them across multiple top level suites, or implement a custom boot that has a segregate your specs/suites when calling env.execute().\n\nCould you please expand?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "CrowdHailer", "authorAssociation": "NONE", "createdAt": "2019-03-21T10:21:26Z", "contents": "Has anyone been able to implement the custom boot as described?\nI have a test suite with several calls to the crypto API. because that work is done on another thread I would get a valuable speedup by running the tests in parallel.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-27T00:56:30Z", "contents": "I don't really have a working example of a custom boot that parallelizes the suite (especially in a browser), but I would expect it to have a consistent hashing function that could take the list of spec IDs and passing a subset of those in to the call to execute. The docs for most of this aren't very obvious, but I would be happy to see a pull request to help with this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 704, "url": "https://github.com/jasmine/jasmine/issues/704", "title": "beforeAll is not defined", "contents": "I'm using Protractor 1.4.0 that should include jasmine but doing this:\ndescribe('Create album', function() {\n  beforeAll(function () {\n    ...\n  });\n});\nGive me this error: ReferenceError: beforeAll is not defined but the jasmine doc refer it.", "createdAt": "2014-11-14T01:44:56Z", "updatedAt": "2015-03-09T15:08:52Z", "closedAt": "2014-11-14T01:49:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "enricorotundo", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "enricorotundo", "company": "HAL24K"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sandy-adi", "company": null}, {"login": "amavisca", "company": null}, {"login": "Pyo25", "company": "@Javry"}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-14T01:49:40Z", "contents": "beforeAll hasn't been released yet, which is why it's only in the edge docs. The 2.1 release will include beforeAll", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "enricorotundo", "authorAssociation": "NONE", "createdAt": "2014-11-14T01:56:08Z", "contents": "got it thx", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sandy-adi", "authorAssociation": "NONE", "createdAt": "2015-01-13T21:58:44Z", "contents": "@slackersoft I'm using protractor 1.6.1 which I see is dependent on jasmine 2.1.1, but when I run my tests using the protractor command I get the error ReferenceError: beforeAll is not defined", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T03:10:28Z", "contents": "@sandy-adi Are you actually specifying jasmine2 in your protractor config file? The default jasmine is 1.3.x in protractor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Pyo25", "authorAssociation": "NONE", "createdAt": "2015-03-03T13:43:57Z", "contents": "I'm in front of the same problem using karma and the module karma-jasmine.\nMy package.json specifies:\n\n\"jasmine-core\": \"^2.2.0\",\n\"karma\": \"~0.12.9\",\n\"karma-jasmine\": \"^0.2.2\",\n\nAnd the methods beforeAll and afterAllare undefined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T18:23:38Z", "contents": "From what I can tell from the karma-jasmine release notes, it looks like they started relying on the jasmine-core package around v0.3.0 (possibly also v.0.2.3). So you might need to update your karma-jasmine version to be able to use jasmine-core with beforeAll", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Pyo25", "authorAssociation": "NONE", "createdAt": "2015-03-04T13:32:06Z", "contents": "Upgrading to karma-jasmine v0.3.5 solved the problem !\nThank you @slackersoft", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sandy-adi", "authorAssociation": "NONE", "createdAt": "2015-03-09T15:08:52Z", "contents": "@amavisca sorry for the delayed response. I was out on a long vacation and just catching up on my messages. The problem was with the config file as you pointed out. Changed the conf value to jasmine 2 and it works now. Thank you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 705, "url": "https://github.com/jasmine/jasmine/issues/705", "title": "Proposal: `this` binding in `callFake`", "contents": "describe('this binding', function() {\n  var spy;\n  beforeEach(function() {\n    spy = {\n      override: function() { },\n      boundOverride: function() { }\n    };\n    this.something = 'foo';\n    spyOn(spy, 'override').and.callFake(function() {\n      this.something = 'bar';\n    });\n    spyOn(spy, 'boundOverride').and.callFake(function() {\n      this.something = 'baz';\n    }.bind(this));\n  });\n\n  it('should be defined', function() {\n    expect(this.something).toEqual('foo');\n    spy.boundOverride();\n    expect(this.something).toEqual('baz');\n    spy.override();\n    expect(this.something).toEqual('bar');\n  });\n});\nthis binding should be defined\n  Expected 'baz' to equal 'bar'.  Error: Expected 'baz' to equal 'bar'.\n      at stack (/home/me/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1304:17)\n\nUp for discussion. Probably it makes sense to bind this by default.\nWhy would you use this in callFake for something else?\nLatest jasmine 2.0 used.", "createdAt": "2014-11-14T13:23:35Z", "updatedAt": "2014-11-14T18:31:54Z", "closedAt": "2014-11-14T18:31:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pirj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pirj", "company": "@toptal"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-14T17:45:46Z", "contents": "The this reference when a spy is executed should be whatever the this of the real call was. So if you changed the last line in your spec to something like expect(spy.something).toEqual('bar'); it should pass. The current behavior for this is exactly what you want if you're using callThrough, and seems like what most people would expect to happen even in callFake so I don't think this will change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pirj", "authorAssociation": "NONE", "createdAt": "2014-11-14T18:31:52Z", "contents": "This makes perfect sense. Since I'm unable to provide a clean example where you don't want spy polluting is an unwanted side effect, closing. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 706, "url": "https://github.com/jasmine/jasmine/issues/706", "title": "Breaking Issue: `suiteDone` gets emitted for top suit", "contents": "The top level suite (suite0 per say) which emits a suiteDone event but never emits a suiteStart event.\nSo all the reporters who listen for these events throw error because they never received a suiteStart for suite0 but at the end they received suiteDone for suite0.\nBut I think that if this top level suite is for internal jasmine purpose then either it should emit both the events or neither.\nThis has happened in new version 2.1.0 at this revision: 9402d59#diff-f41e57b2889bae3046aa9f352699785cR182\ngrunt-contrib-jasmine is breaking too. gruntjs/grunt-contrib-jasmine#181", "createdAt": "2014-11-15T00:55:03Z", "updatedAt": "2014-11-15T02:37:34Z", "closedAt": "2014-11-15T02:37:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gyandeeps", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "gyandeeps", "company": "Cerner"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 707, "url": "https://github.com/jasmine/jasmine/issues/707", "title": "Pending specs are missed", "contents": "Spotted after update to 2.1, regression from 2.0. I suspect this is due to focused spec changes.\nBoth versions installed from npm.\ndescribe('Pending specs', function() {\n  it('can be the only spec inside a describe block');\n});\n\ndescribe('Pending specs', function() {\n  describe('when nested inside a second describe', function() {\n    it('can be the only spec in hierarchy');\n  });\n});\njasmine-npm 2.0.1, jasmine-core 2.0.4:\n$ jasmine\nStarted\n**\n\n2 specs, 0 failures, 2 pending specs\n\njasmine-npm 2.1.0, jasmine-core 2.1.1:\n$ jasmine\nStarted\n\nNo specs found\n\nProblem is that the it calls do not make it into the list of the specs if no non-pending specs is present inside describe block.", "createdAt": "2014-11-16T13:28:09Z", "updatedAt": "2014-11-17T18:38:30Z", "closedAt": "2014-11-16T22:44:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pirj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pirj", "company": "@toptal"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-16T18:50:04Z", "contents": "This is actually due to the beforeAll and afterAll changes in 2.1. Due to the fact that the purpose of beforeAll and afterAll is running expensive setup only once, we didn't want them to be executed if none of the specs in the suite were executable. It looks like a side-effect of that is that we're not running child suites and specs either.\nThe 2.1.1. release was just for jasmine-core, so that's why you don't see a 2.1.1 release of jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pirj", "authorAssociation": "NONE", "createdAt": "2014-11-16T19:20:43Z", "contents": "In fact i've checked with jasmine-core 2.1.1, at least npm reports that it's the version being installed with jasmine-npm 2.1.0. Edited original comment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-16T19:43:50Z", "contents": "And to be clear, the 2.1.1 release fixed a separate but similar sounding issue.\nAfter a bit of digging, it looks like our tests around pending tests just checked that the jasmine environment new the specs existed, but not that they had been run. I have a correctly failing spec right now, but no fix just yet. Hopefully, we should have a 2.1.2 out with a fix for this by sometime Monday.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pirj", "authorAssociation": "NONE", "createdAt": "2014-11-16T23:21:05Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 708, "url": "https://github.com/jasmine/jasmine/issues/708", "title": "Interfering timers", "contents": "jasmine-npm@2.1.0 jasmine-core@2.1.2\nThis one was really hard to track down.\ndescribe('Clashing timeouts', function() {\n  var spy;\n\n  beforeEach(function() {\n    spy = jasmine.createSpy();\n\n    jasmine.clock().install();\n\n    var interval = setInterval(spy, 10000);\n\n    var stopInterval = function() {\n      clearInterval(interval);\n    };\n\n    setTimeout(stopInterval, 20000);\n    // Replace with value that is not multiple to 10000 to pass:\n    // setTimeout(stopInterval, 20001);\n\n    setTimeout(stopInterval, 50001);\n  });\n\n  it('stops at first timeout', function() {\n    jasmine.clock().tick(200000);\n    expect(spy.calls.count()).toEqual(2);\n  });\n});\n\nWhat would you expect call count to be? One, two? Five!\nF\n\nClashing timeouts stops at first timeout\n  Expected 5 to equal 2.  Error: Expected 5 to equal 2.\n\nP.S. I call it \"There must be only one (at a time)\" ;)", "createdAt": "2014-11-17T18:30:53Z", "updatedAt": "2014-12-05T16:55:34Z", "closedAt": "2014-12-05T16:55:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pirj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pirj", "company": "@toptal"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-27T06:01:13Z", "contents": "Ok, I think I know why this is happening now[1], but I'm not totally sure on what the correct solution is. It basically hinges on whether the setInterval callback should be invoked during the tick in which it is being cleared. I'm leaning towards calling it, but that looks like it might be a bit trickier to implement than throwing it away without calling it for that tick.\nI'm open to opinions on whether the setInterval callback should be invoked during the tick in which it is being cleared.\n[1] What's happening is this:\n\nThe setInterval adds a recurring callback to the DelayedFunctionScheduler starting at X\nThe setTimeout adds a non-recurring callback which will clear the recurring callback at X * 2\nThe tick pulls everything off the queue for time X, runs each, and reschedules if necessary. This puts the next iteration of the recurring callback at the end of the queue for time X * 2\nThe tick then continues and pulls everything at X * 2 and runs through them in order.\nWhen the setTimeout callback is called the only record of the recurring callback it tries to clear is a local variable in the loop, since the functions to run for the tick are removed before being executed.\nThe recurring callback is invoked, and rescheduled because it was never removed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 709, "url": "https://github.com/jasmine/jasmine/issues/709", "title": "Done handling still isn't quite right", "contents": "I'm on version 2.0.2\nThink there were some pretty big changes to this from 2.0 and it's made it loads better but I'm getting the following problem:\nif you have a setup like this:\nbeforeEach(function(done){\n    console.log('start');\n    doSomethingThatWillCall(done);\n    doSomeOtherStuff();\n    console.log('end of beforeEach');\n});\n\nit('is a test', function(){\n    console.log('in test');\n});\n\nIf doSomethingThatWillCall calls done immediately (rather than in an asynchronous manner) then you end up dropping into the test before the subsequent call is done.  Eg you'd get the following in the console:\n'start'\n'in test'\n'end of beforeEach'\nIm not sure where the fix would go in the jasmine code but I'd suggest you could do something like this when the before each is run\nfunction functionThatSortsItOut(beforeEachFunction, existingDoneFunction) {\n    var endReached = false;\n    var triedToCallDoneEarly = false;\n\n    var patchedDone = function () {\n        triedToCallDoneEarly = true;\n\n        if(!endReached)\n            return;\n\n        existingDoneFunction();\n    };\n\n    beforeEachFunction(patchedDone);\n    endReached = true;\n\n    if(triedToCallDoneEarly)\n        existingDoneFunction();\n}\n\nIt sort of feels like that could be simpler but it's nearly home time and i'm tired!\nThat way it calls done only if the end of the function has already been hit - either when it gets run or later when done gets called asynchronously.\n\nAs a bit of an aside nice one with including beforeAll and afterAll... although I've not tried them out yet (I've patched in my own version of beforeAll already).  I really like this library - in particular nesting suites is a really great feature - lets you save repeating setup code and bits of test names + something that puts it ahead of similar frameworks in other languages.", "createdAt": "2014-11-18T17:17:59Z", "updatedAt": "2017-11-17T04:47:36Z", "closedAt": "2014-11-18T23:18:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JonnyRa", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "JonnyRa", "company": null}, {"login": "pirj", "company": "@toptal"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "allan-bonadio", "company": "Tactile Interactive"}], "comments_count": 12, "comments_data": [{"authorLogin": "pirj", "authorAssociation": "NONE", "createdAt": "2014-11-18T21:46:09Z", "contents": "Are you expecting done argument on beforeEach's callback? Apparently done is undefined, and  that makes beforeEach to silently fail.\nIt would help a lot if you could provide complete runnable snippet of a failing case.\nCheck below, is that something you are trying to achieve?\ndescribe('beforeEach should not silently fail', function(){\n  var spy;\n\n  beforeEach(function() {\n    spy = jasmine.createSpy();\n  });\n\n  beforeEach(function(undefinedSomething){\n    undefinedSomething();\n    spy();\n  });\n\n  it('expect something that is called after an error in beforeEach to have been called', function(){\n    expect(spy).toHaveBeenCalled();\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-18T23:18:31Z", "contents": "If your suite has already called the done callback for the beforeEach jasmine has no way of knowing what spec any code after that should be associated with. We had a story in our tracker to basically make this blow up, but no real idea how we'd accomplish that.\nClosing, since we're most likely not going to change this behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2014-11-24T19:58:40Z", "contents": "Hi apologies with the delay responding.\nthe following should show the bug (I'm away from a machine I can test this at the moment but should work).\nbeforeEach(function(done){\n    console.log('start');\n    done();\n    console.log('end of beforeEach');\n});\n\nit('is a test', function(){\n    console.log('in test');\n});\n\nSlackersoft - but you can detect that condition as I've outlined above - when the method returns it'll drop back into your code.  So just wrapping an existing routine with something like the above should work.\nI suppose I'm just looking at done as primarily being the thing that triggers the next bit of code which you only want to happen after both the end of the beforeEach/setup method has been reached and done has actually been called.  I know it's slightly more complicated than that because done is optional + there's also a timeout.\nMy solution is basically to change it so the test doesnt have direct access to the function that triggers the next bit of code but a proxy to it instead that doesnt trigger it until both conditions have been met.\nAny questions give me a shout.  If you still dont want to fix it then I can have a dig around and try and come up with a pull request or whatever to propose a fix... I don't know git or the library though so thought it'd be easier if I described a possible solution.\nCheers\nJonny", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2014-11-24T20:03:02Z", "contents": "So I saw that patch going in at the time the beforeEachs are called by the library - I got the impression that beforeEach effectively just adds a function to a list somewhere which then gets called later.  The above code would need to go in the place where the library actually runs the tests.\nSo beforeEachFunction would be the one passed into the beforeEach call\nand existingDoneFunction would be the unadulterated 'move next'/done function in its present form.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-24T21:20:34Z", "contents": "If I understand what you're suggesting correctly, it's basically to wait until the function that receives a done callback has returned before actually moving to the next thing in the queue. In this case the solution only covers the case in which you shouldn't even be running async in the first place because you're calling done inline in the function. As long as done is invoked in some kind of setTimeouty manner, the beforeEach, it, etc will have already returned even if something else happens after done is called. That's what makes it hard to determine that this is even happening.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2014-11-25T11:16:34Z", "contents": "Yeah, you're right it wouldn't deal with not calling all of an async method.  But your code doesn't make those calls so I don't see how you could deal with that.\nI dont think you need to either - people can deal with that themselves.  I suppose its more obviously async aswell so its more expected that everything is going to be all callbacky!  The nice thing about the way the javascript event loop works aswell is that anything is going to happen asyncronously then you can guarantee that it is going to happen after the rest of the current stack all returns.\nI think the little example test case is pretty compelling though - it seems odd that it works the way it does at the moment and I've tripped up on that at least a couple of times now.\nMy specific case is I have a couple of reset methods which may or may not need to do something that requires some asyncronous waiting.  Basically they clear out some lists which trigger some bits of the page to reload which needs waiting for.  The best place to do this is in a fake view class (so the call goes out to something else that determines at what point to call done) and its an easy mistake to make to think that you can just put some more bits of none-async code in after that call expecting them to be run before the next test.\nThink I've screwed up with that in both the beforeEach method and lower down the call stack before aswell!\nI've amended my code with a few comments to help explain what it's up to.  I work somewhere where we pretty much have a no comments policy and sometimes forget that thats not how the rest of the world works!\nfunction functionThatSortsItOut(beforeEachFunction, existingDoneFunction) {\n    var endReached = false;\n    var triedToCallDoneEarly = false;\n\n    var patchedDone = function () {\n        //this tells you if done has been called before the end of the beforeEach has been hit\n        triedToCallDoneEarly = true;\n\n        //if we haven't dropped off the end of the before each method then don't call done yet\n        //code further down will do that for us instead at the appropriate point\n        if(!endReached)\n            return;\n\n        //if the end has already been reached then call the done function to move to the next test\n        existingDoneFunction();\n    };\n\n    //kick off the before each method with our more cautious version of done\n    beforeEachFunction(patchedDone);\n    //we've definitely called all of the (none async) code in the beforeEach by this point\n    endReached = true;\n\n    //if the done function attempted to proceed too early then trigger the actual done function\n    //it turns out it didn't need an async wait after all\n    if(triedToCallDoneEarly)\n        existingDoneFunction();\n\n    //otherwise do nothing - we need to wait for an async call to done\n}\n\nCheers", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-26T18:40:08Z", "contents": "The done callback is intended specifically for async tests and is intended to be called once you're ready to move on to the next part of your spec/suite. If you invoke it before you're done running code in your beforeEach, as far as jasmine is concerned, that's wrong. Currently, jasmine doesn't try to do anything special in this case, but if it were to do anything it would probably try to throw an error or otherwise break if other code ran after the done callback is invoked.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2014-11-27T09:30:26Z", "contents": "So you don't want to change the current behaviour then?\nBit disappointed but fair enough.  I can see where you're coming from but it seems like the library should do its upmost to run all of the beforeEach code - this looks wonky to me:\nbeforeEach(function(done){\n    console.log('start');\n    done();\n    console.log('end of beforeEach');\n});\n\nit('is a test', function(){\n    console.log('in test');\n});\n\n'start'\n'in test'\n'end of beforeEach'\n\nIf you wanted to detect that and throw an error I don't think it'd just be as simple as replacing the\nif(triedToCallDoneEarly)\n    existingDoneFunction();\n\nwith\nif(triedToCallDoneEarly)\n    throw \"called done before end of before each\" \n\nAs that wouldn't tell you if there was extra code run after the done - all it would tell you is that it had been run synchronously which would forbid code which may or may not do something asynchronous (depending on application state) - you could still work around it by just changing the synchronous call into a timeout'ed call to done instead.  I think you'll probably agree that would be bad - you'd just be putting obstacles in the path of people writing tests which they'd have to write strange hacky code to work around.\nI'll see if I can figure out where to fix it in the library anyway and then suggest a proper patch/just patch my own version - suppose that's one of the nice things about js!  Obviously you're free to ignore that if you want!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2014-11-27T10:05:59Z", "contents": "Hi, just been explaining this to one of my colleagues and think it's worth pointing out that those final lines in the before each get run at the expected time if the done function is called asynchronously.\nIf done is called synchronously then they get run whenever stuff gets asynchronous again - so say for instance there is a beforeEach which doesnt need to reset anything (on the first call) so it calls done synchronously, then a test with no done method and another test the order of calls would look like this:\nfirst bit of before each (call 1)\nV\nsync done\nV\nfirst test\nV\nfirst bit of before each (call 2)\nasync call (will call done)\nsecond bit of before each (call 2)\nsecond bit of before each (from call 1)\nV\nsome waiting ...\nasync call to done\nV\nsecond test\nWhich is a bit of a nightmare!\nHope I've convinced you!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2015-01-13T09:55:14Z", "contents": "So the fix turned out to be extremely simple.\nI just pasted my function into jasmine.js and then modified attemptAsync like this:\n@@ -1671,7 +1671,7 @@\n       }\n\n       try {\n-        fn.call(self.userContext, next);\n+        functionThatSortsItOut(fn.bind(self.userContext), next);\n       } catch (e) {\n         handleException(e);\n     next();", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "allan-bonadio", "authorAssociation": "NONE", "createdAt": "2017-11-14T20:25:04Z", "contents": "I think the solution in the initial post is the way to go.  You could simplify it by making a function, that counts how many times it's been called, and on the second call, from whatever upper code, it calls done().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T04:47:36Z", "contents": "This situation should be much improved in recent versions of Jasmine (2.7 I think?). Basically what happens now is we force asyncness in the case that done is called in a synchronous manner in order to ensure the suite is in a known good state.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 710, "url": "https://github.com/jasmine/jasmine/issues/710", "title": "Jasmine clock() and native Promise", "contents": "Any idea or suggestion on how to deal with native Promises when mocking the clock?\n\nYou can make setTimeout or setInterval synchronous executing the registered functions only once the clock is ticked forward in time.\n\nTake a look at this example\ndescribe('Promise', function () {\n    var resolvedValue;\n\n    beforeEach(function () {\n        resolvedValue = null;\n        jasmine.clock().install();\n    });\n    afterEach(function () {\n        jasmine.clock().uninstall();\n    });\n\n    function getDataPromise () {\n        new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                resolve(12);\n            }, 100);\n        }).then(function (value) {\n            resolvedValue = value;\n        });\n    }\n\n    function getDataJQuery () {\n        var deferred = new $.Deferred();\n        setTimeout(function () {\n            deferred.resolve(12);\n        }, 100);\n        deferred.promise().then(function (value) {\n            resolvedValue = value;\n        });\n    }\n\n    it('native promise', function () {\n        // This is async, but I'd like to turn it into sync\n        getDataPromise();\n\n        jasmine.clock().tick(200);\n\n        expect(resolvedValue).toBe(12);\n    });\n\n    it('jquery promise', function () {\n        // This is async, but I'd like to turn it into sync\n        getDataJQuery();\n\n        jasmine.clock().tick(200);\n\n        expect(resolvedValue).toBe(12);\n    });\n});\nIn the test I create a promise and using the clock() I try to make it synchronous. The test on jQuery passes, the one using native Promise fails because internally the browser makes sure that the then callback is always asynchronous.\nThis test is overly simplified, but assume I don't have access to the promise object (it's deep down in my modules), how can I test this?\nOne solution would be to have some API that allows me to access to the native setTimeout, say this\n    it('native promise', function (done) {\n        getDataPromise();\n\n        jasmine.clock().tick(200);\n\n        // This access to the native setTimeout\n        jasmine.clock().setTimeout(function () {\n            expect(resolvedValue).toBe(12);\n\n            done();\n        }, 0);\n    });\nOr maybe\n    it('native promise', function (done) {\n        getDataPromise();\n\n        jasmine.clock().tick(200).then(function () {\n            expect(resolvedValue).toBe(12);\n\n            done();\n        });\n    });", "createdAt": "2014-11-20T11:57:57Z", "updatedAt": "2017-08-09T00:45:49Z", "closedAt": "2015-01-23T21:15:16Z", "state": "CLOSED", "closed": true, "locked": true, "activeLockReason": null, "authorLogin": "piuccio", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "piuccio", "company": "@en-japan-air "}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jonhartmann", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-20T18:59:01Z", "contents": "You have a couple potential options here.\n\nYou could save off the original setTimeout function before you mock the clock if you want to still have access to it.\n\ndescribe('Promise', function () {\n    var resolvedValue,\n      realTimeout;\n\n    beforeEach(function () {\n        resolvedValue = null;\n        realTimeout = window.setTimeout\n        jasmine.clock().install();\n    });\n\n   ...\n\n});\n\nYou could use a mock promise implementation (like this) to have fine control over promise resolution", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-23T21:15:16Z", "contents": "Closing this as we haven't seen any response to this issue. It also looks a bit like a \"how do I test?\" question and not an issue with jasmine itself. For further questions of this nature, please use the jasmine-js@googlegroups.com mailing list.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonhartmann", "authorAssociation": "NONE", "createdAt": "2017-08-08T15:17:29Z", "contents": "I'd like to add to that just saying this is a \"how to test\" problem is pretty lame - I've got Promises that resolve asynchronously based on time - its totally reasonable to think that Clock, the interface used to work with time-based async events,  would work in this scenario. I shouldn't have to jump through a lot of hoops to test something when your API seems to offer a simple solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T22:12:02Z", "contents": "The problem here is that Jasmine can't know how your promise library is going to go about completing its promises. Some always do it in a setTimeout others try to be clever and do other faster things first. This means there isn't something that Jasmine can have changed within itself to fix the issue but rather something you have solve within your own suite. To this end, it is more of \"How do I test Promises in Jasmine?\" question, and not a \"Jasmine does this thing that should change\". We try to keep Jasmine's issues list to the latter.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonhartmann", "authorAssociation": "NONE", "createdAt": "2017-08-09T00:06:31Z", "contents": "@slackersoft so, setting aside that Promises are ES6 now and not necessarily coming from a library, it still doesn't make sense that Jasmine wouldn't work in simple cases for this. For example, I came to this post today because I have a scenario where I have a method returning a promise that represents a timeout pole for a variable that rejects after a certain number of checks... right now I have to do setTimeout in my tests to test this feature, the fact that I can't trade done() and setTimeout() for clock which solves those same problems in other situations and executes faster is just frustrating. In this situation there are no libraries outside of Karma/Jasmine. If I'd written this code with timeouts and a callback the clock would have been working fine, right? But instead when I drop in clock the test just refuses to work.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 711, "url": "https://github.com/jasmine/jasmine/issues/711", "title": "Feature request: Add \"it.fails\" as opposite of \"it\"", "contents": "Reason:\nWe had some custom matchers, one of them comparing arrays for approximate equality. Before we updated to Jasmine 1.3, the following test would fail:\nit('fails', function() {\n  expect([1]).toBeCloseToArray([42]);\n}\n\nNow in Jasmine 1.3, our customer matchers could still be used, but never failed! The reason is that they must be registered differently since 1.3. Now, the following test passes (note that the checks succeed both with and without \"not\" !)\nit('should fail but does not', function() {\n  expect([1]).toBeCloseToArray([42]);\n  expect([1]).not.toBeCloseToArray([42]);\n  expect([1]).toBeCloseToArray([1]);\n  expect([1]).not.toBeCloseToArray([1]);\n}\n\nThis is very bad, since we continued using those matchers without noticing that they did not work. Of course we had tests for them, but they looked like this, and still passed:\nit('compares arrays', function() {\n  expect([]).toBeCloseToArray([], 1);\n  expect([1, 9]).not.toBeCloseToArray([1, 2]);\n  expect([1, 9]).not.toBeCloseToArray([1, 2], 1);\n  expect([1, 9]).toBeCloseToArray([1, 2], -3);\n}\n\nWe also had tests calling jasmine.Matchers.prototype.toBeCloseToArray directly and checking the result. Those also passed, of course, since the function itself was still correct.\nIf there was a function it.fails, we could add simple smoke tests like this:\nit.fails('on non-equal array items', function() {\n  expect([1]).toBeCloseToArray([42]);\n}\nit.fails('on arrays of different size', function() {\n  expect([]).toBeCloseToArray([42]);\n}\n\nThis would ensure that our custom matchers work and are correctly registered with Jasmine.\nI looked at the matcher specs of Jasmine's own matchers, but those specs suffer from the same problem, they just call the matcher function and check the return value. It is never tested that they are correctly registered with Jasmine and actually cause tests to fail.", "createdAt": "2014-11-21T18:39:31Z", "updatedAt": "2014-11-22T22:55:43Z", "closedAt": "2014-11-22T22:55:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "heidemn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "heidemn", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-21T21:21:38Z", "contents": "Jasmine 1.3 just used the return value of a matcher to determine whether the expectation failed or not. The logic to check for failure is just !returnValue or effectively !!returnValue if you used .not. Jasmine 2.0 expects a matcher to return an object with a pass attribute in the same way. If the return value in jasmine 1.3 or the pass attribute in jasmine 2.0 are undefined that will just be treated as falsy and the expectation will fail. Given all this, I'm not sure how you would be registering a matcher that was invokable but was always successful whether or not you used .not in your expectation.\nIn addition, if using .not doesn't cause the spec to fail, wouldn't the it.fails function have exactly the same problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "heidemn", "authorAssociation": "NONE", "createdAt": "2014-11-22T08:44:49Z", "contents": "With our old version of jasmine (don't have access to the code right now, so I can't tell the exact version number), it was enough to just add the matcher function to jasmine.Matchers.prototype. Then when using the matcher as expect([1]).toBeCloseToArray([42]), the matcher was called and an internal wrapper function of Jasmine checked the result and let the test fail.\nWith Jasmine 1.3, if I just add the matcher function to jasmine.Matchers.prototype (and do not call this.addMatchers(myCustomMatchers) ), I can still use it, but it is not wrapped in that function which checks the result. So when calling expect([1]).toBeCloseToArray([42]);, our matcher returns false, but \"noone cares\" about the return value.\nWith the it.fails function, I could detect this \"half-registered\" matcher, since it will never cause any test to fail. So I think adding that function would be a plus for testing Jasmine matchers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "heidemn", "authorAssociation": "NONE", "createdAt": "2014-11-22T08:49:11Z", "contents": "Matcher is correctly registered: Expectation fails, as expected. it.fails test passes.\nMatcher is incorrectly registered: Expectation does not fail. it.fails test fails.\nit.fails('on non-equal array items', function() {\n  expect([1]).toBeCloseToArray([42]);\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-22T22:55:43Z", "contents": "After spelunking through the git logs a bit, it looks like just adding directly to jasmine.Matchers.prototype was never really intended to be how custom matchers were registered. You should have always been using addMatchers to register them correctly.\nIn addition jasmine matchers have changed even more with 2.0 and won't even be callable without using addMatchers anymore, so the particular case you have should no longer happen. Because of all of this I don't think we're going to implement this feature.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 713, "url": "https://github.com/jasmine/jasmine/issues/713", "title": "Support multiple createSpyObj in one call", "contents": "I use a lot of constructor-style dependency injection and like to use spy objects in place of those dependencies in my tests. As a consequence, my suites tend to start with a lot of jasmine.createSpyObj calls (one for each injected dependency, plus one for any secondary object I need/want to spy on as a return value from one of those dependencies)\nIt would save me some typing and improve readability if I could reduce that to one call, something like (note the pluralization of createSpyObjs):\nvar deps = jasmine.createSpyObjs({\n    something: [ \"someMethod\", \"someOtherMethod\" ],\n    somethingElse: [ \"yetAnotherMethod\" ],\n    // and so on...\n});\n\n...and get back one object which contains all the mocks I need. (The keys above would be the names of the spy object, and the values would be the names of the spies in those mocks.)\nFor purposes of illustration, a trivial (and non-robust) implementation of this would look like:\nfunction createSpyObjs(interfaces) {\n    var result = {};\n    Object.keys(interfaces).forEach(function (k) {\n        result[k] = jasmine.createSpyObj(k, interfaces[k]);\n    });\n    return result;\n}\n\nIt's easy enough to add that as a helper function to achieve the above, but it would be nicer still if it came free in the box with Jasmine.\nAny chance of getting this built into a future version of Jasmine? I'd be happy to handle the implementation (along with appropriate input-checking and \"you're using it wrong\" warnings), if this is something that project maintainers feel is appropriate to include.", "createdAt": "2014-11-26T02:14:36Z", "updatedAt": "2015-01-20T00:13:12Z", "closedAt": "2015-01-20T00:13:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "VWoeltjen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "VWoeltjen", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-26T23:50:46Z", "contents": "Wouldn't this just be a difference between:\nvar deps = jasmine.createSpyObjs({\n    something: ['one', 'two'],\n    another: ['three', 'four']\n});\n\ncallTheThing(deps.something, deps.another);\nand:\nvar something = jasmine.createSpyObj('something', ['one', 'two']);\nvar another = jasmine.createSpyObj('another', ['three', 'four']);\n\ncallTheThing(something, another);\nI'm not sure I'm seeing enough difference there to warrant the ongoing maintenance for the feature. Additionally, we have a tracker story to make the first argument (name of spy object) optional, which we're looking at getting in for the next release. That should eliminate some of the duplication you're seeing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-20T00:13:12Z", "contents": "We haven't heard any other feedback from the community on this issue, and the next version of jasmine should include the ability to createSpyObj without naming the object, so my second example could just be:\nvar something = jasmine.createSpyObj(['one', 'two']);\nvar another = jasmine.createSpyObj(['three', 'four']);\n\ncallTheThing(something, another);\nClosing this. Thanks for using jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 714, "url": "https://github.com/jasmine/jasmine/issues/714", "title": "beforeAll/afterAll methods cause errors with Angular", "contents": "I've posted this issue on Angular, but to be honest I'm not sure if it's a problem with Jasmine or a problem on Angular's side. You can see the issue here angular/angular.js#10238\nWhen using beforeAll or afterAll methods, I encounter the following errors when testing with Angular.\nTypeError: 'null' is not an object (evaluating 'currentSpec.$modules')\n        at workFn (/Users/chesleybrown/Sites/bln-web/app/components/angular-mocks/angular-mocks.js:2323)\n        at /Users/chesleybrown/Sites/bln-web/node_modules/karma-jasmine/lib/boot.js:71\n        at /Users/chesleybrown/Sites/bln-web/node_modules/karma-jasmine/lib/adapter.js:174\n        at http://localhost:9876/karma.js:185\n        at http://localhost:9876/context.html:168\n    TypeError: 'null' is not an object (evaluating 'currentSpec.$modules')\n        at workFn (/Users/chesleybrown/Sites/bln-web/app/components/angular-mocks/angular-mocks.js:2323)\n        at /Users/chesleybrown/Sites/bln-web/node_modules/karma-jasmine/lib/boot.js:71\n        at /Users/chesleybrown/Sites/bln-web/node_modules/karma-jasmine/lib/adapter.js:174\n        at http://localhost:9876/karma.js:185\n        at http://localhost:9876/context.html:168\n    Expected { 0: HTMLNode, length: 1, prevObject: { 0: HTMLNode, length: 1 }, context: undefined, selector: '.loading-indicator' } to have class 'ng-hide'.\n    Error: Expected { 0: HTMLNode, length: 1, prevObject: { 0: HTMLNode, length: 1 }, context: undefined, selector: '.loading-indicator' } to have class 'ng-hide'.\n        at /Users/chesleybrown/Sites/bln-web/test/directives/about-product.directive.spec.js:40\n        at /Users/chesleybrown/Sites/bln-web/node_modules/karma-jasmine/lib/boot.js:71\n        at /Users/chesleybrown/Sites/bln-web/node_modules/karma-jasmine/lib/adapter.js:174\n        at http://localhost:9876/karma.js:185\n        at http://localhost:9876/context.html:168", "createdAt": "2014-11-27T02:29:39Z", "updatedAt": "2014-11-27T06:04:37Z", "closedAt": "2014-11-27T06:04:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chesleybrown", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chesleybrown", "company": "@InVisionApp "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-27T06:04:37Z", "contents": "Because a beforeAll runs outside any particular spec context, there probably isn't going to be a currentSpec object that they'll be able to reference.\nClosing. It looks like this is probably an issue with angular and/or angular-mocks and not jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 715, "url": "https://github.com/jasmine/jasmine/issues/715", "title": "jasmine.any() method for matching only simple objects", "contents": "I ran into the issue of jasmine.any(Object) returning true for all types of objects including, but not limited to, Arrays. This is of course natural since Javascript Arrays are also Objects, but what if I want to assert that an object is, in fact, a simple object and not an array.\nExample:\nvar foo = {a: 2};\nvar bar = ['a', 2];\nexpect(foo).toEqual(jasmine.any(Object)); // -> ok!\nexpect(bar).toEqual(jasmine.any(Object)); // -> also ok! I'd like it to fail here.\n\nI'm not proposing a change to the jasmine.any(Object) function, but is there a way to extend the behaviour of jasmine.any() to support checking that an object is a simple object and not, for example, an array?\nMore specifically, what I want to achieve is something like this\nvar data = {\n  name: 'Foo',\n  props: {},\n  props2: []\n};\nexpect(data).toEqual(jasmine.objectContaining({\n  name: jasmine.any(String),         // ok!\n  props: jasmine.any(Object),        // should be ok\n  props2: jasmine.any(Object)        // should fail here, since props2 is an array\n}));\n\nAny ideas how to achieve this without modifying the behaviour of jasmine.any(Object)?", "createdAt": "2014-11-27T09:10:50Z", "updatedAt": "2018-03-13T19:29:03Z", "closedAt": "2015-02-28T00:06:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bostrom", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "bostrom", "company": "@motleyagency "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "fpoljak", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-29T04:48:29Z", "contents": "We don't really have a way to accomplish this right now. We're looking at getting some better support for these asymmetric matchers in the next release, which should hopefully allow you to write your own to accomplish this without having to patch jasmine itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T19:20:26Z", "contents": "As of 2ab2295 we should have a nicer way to accomplish this. If you have an object that has an asymmetricMatch function, that function will be invoked by jasmine when testing equality and passed the object being compared. asymmetricMatch should return true or false. I'm working on getting some docs up for this functionality as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-28T00:06:36Z", "contents": "Docs for how to create your own asymmetric matcher are here: http://jasmine.github.io/2.2/introduction.html#section-Custom_asymmetric_equality_tester\nI'm not sure if this is something we need in core, as the use case seems pretty specific, so I'm going to close this issue given we've made it possible to provide your own matcher.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fpoljak", "authorAssociation": "NONE", "createdAt": "2018-03-13T19:28:43Z", "contents": "You can workaround this with something like this:\nexpect(data).toEqual(jasmine.objectContaining({\n  name: jasmine.any(String),\n  props: jasmine.any(Object),\n}));\nexpect(typeof(data.props2)).toEqual('Object');\nexpect(data.props2 instanceOf Array).toBeFalsy(); // should fail", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 716, "url": "https://github.com/jasmine/jasmine/issues/716", "title": "Jasmine__TopLevel__Suite in error message", "contents": "In new version of jasmine we take suite with description Jasmine__TopLevel__Suite\nWhat does mean Jasmine__TopLevel__Suite, why it was introduced and how we should remove it from error message?\nThanks!", "createdAt": "2014-11-27T19:30:18Z", "updatedAt": "2014-11-29T05:27:40Z", "closedAt": "2014-11-29T05:27:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "maksimr", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "maksimr", "company": "@JetBrains, @Yandex"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 717, "url": "https://github.com/jasmine/jasmine/issues/717", "title": "use object in function not defined", "contents": "when i define object in page(not defined in  my js file), my funtion call it, for example\u3002\nvar testObj = {a :1, b:2};//in my php view page\n//myjs\nfunction test() {\nreturn testObj.a;\n};\nwhen i write testCase:\ndescribe('test variable', function() {\nvar testObj = {};\nbeforeEach(function() {\ntestObj.a = 1;\n});\nexcept(test()).toEqual(1);\n});\nwhen i test it, \" Can't find variable\"\nbut base on functon context;\ntestObj  outer of  test() function.", "createdAt": "2014-11-28T08:09:58Z", "updatedAt": "2014-11-29T04:45:50Z", "closedAt": "2014-11-29T04:45:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "memoryza", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "memoryza", "company": "MTC"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-11-29T04:45:50Z", "contents": "The problem is the the testObj in your jasmine suite is defined within a describe and is thus only directly accessible to functions defined within that same scope. Your code works in your full page because the testObj there is defined globally and is thus accessible to everything.\nI'm going to close this as it seems more like a \"how to test\" question than an issue with jasmine itself. If you still have questions please ask on the jasmine-js@googlegroups.com mailing list.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 718, "url": "https://github.com/jasmine/jasmine/issues/718", "title": "Make the Wiki Collaborators-only", "contents": "I was searching for documentation on async tests, and the first result on Google was the wiki page for it on this repo.\nAs you can see, a witty Internet user has \"Defaced\" the page. This is fairly bad, naturally, because it's the first Google result. What I'd recommend to stop this from happening is to restrict editing to collaborators only. This can be done on the settings page.\nThoughts?", "createdAt": "2014-11-28T10:24:28Z", "updatedAt": "2014-11-30T09:48:39Z", "closedAt": "2014-11-29T03:25:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "basicallydan", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "basicallydan", "company": "@marvelapp"}, {"login": "christophetd", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "christophetd", "authorAssociation": "NONE", "createdAt": "2014-11-28T20:53:47Z", "contents": "Same here. It does not look very professional. :/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-11-29T03:25:42Z", "contents": "Thanks guys, restricted to those w/ push access only for the moment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "basicallydan", "authorAssociation": "NONE", "createdAt": "2014-11-30T09:48:39Z", "contents": "Cool, thanks for listening :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 719, "url": "https://github.com/jasmine/jasmine/issues/719", "title": "How about a bower configuration support for standalone?", "contents": "", "createdAt": "2014-11-30T14:28:09Z", "updatedAt": "2015-01-27T01:53:48Z", "closedAt": "2015-01-27T01:53:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lastboy", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "lastboy", "company": null}, {"login": "slopetown", "company": null}, {"login": "oriSomething", "company": null}, {"login": "samkelleher", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slopetown", "authorAssociation": "NONE", "createdAt": "2014-12-26T01:50:56Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "oriSomething", "authorAssociation": "NONE", "createdAt": "2015-01-20T07:09:35Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "samkelleher", "authorAssociation": "NONE", "createdAt": "2015-01-26T22:37:27Z", "contents": "+1 for bower package.\nAlthough I use the jasmine-core node package and it works fine in browser since it can also be labeled as a devDepenency rather than a package for front-end (which is what generally bower is used for).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 720, "url": "https://github.com/jasmine/jasmine/issues/720", "title": "Need Access to SpyStrategy plan", "contents": "I'm working on upgrading a jasmine helper called jasmine-stealth to support jasmine 2.x. One of the issues I'm having is accessing the SpyStrategy plan. Adding a function to expose plan would be helpful. Would you be interested in a pull request?", "createdAt": "2014-12-01T02:48:21Z", "updatedAt": "2018-03-30T00:18:01Z", "closedAt": "2018-03-30T00:18:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "longmatthewh", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "longmatthewh", "company": "Cengage Learning"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jgrund", "company": "@whamcloud"}, {"login": "johnsonw", "company": null}, {"login": "GabiGrin", "company": "Wix"}, {"login": "caseyhoward", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-01T21:22:20Z", "contents": "What do you need from the SpyStrategy? We do want to try to have some better way of allowing users to extend jasmine spies similar to how we allow adding custom equality testers. We've also seen a few requests to get something like what it looks like jasmine-stealth has into the jasmine core, but none against the 2.x codebase. If you want to put together a pull request for either of these, I'd be happy to review them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "longmatthewh", "authorAssociation": "NONE", "createdAt": "2014-12-02T18:07:13Z", "contents": "jasmine-stealth allows the user to define multiple behaviors/stubs on the same spy depending on how the spy is used. Keeping track of the original plan is needed in case none of the behaviors/stubs defined aren't matched. I realize plan is encapsulated in SpyStrategy and exposed via the exec function. However, exposing the plan without executing it is pretty much critical to updating jasmine-stealth. I'll create a pull request in the next few days for you to review.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-03T21:11:03Z", "contents": "I don't think we want to just expose the plan but rather have a nicer way to extend spies with this functionality or something.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jgrund", "authorAssociation": "NONE", "createdAt": "2015-01-14T20:31:56Z", "contents": "One nice thing you could do in Jasmine 1.x was to reference nested spies without having to save a variable reference to them.\n var spy = jasmine.createSpy('foo').andReturn(jasmine.createSpy('bar');\n\nspy.plan() // <-- bar spy\n\nWith 2.x the code becomes more verbose as you have to save off references to nested spies you'd like to inspect later.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnsonw", "authorAssociation": "NONE", "createdAt": "2015-01-14T22:55:55Z", "contents": "When I discovered how to use .plan() I was able to go back into some of my tests and clean up a lot of unnecessary code. In particular, I was able to remove unnecessary variables that acted as spy permutations. As Joe mentioned above, using .plan() returns whatever you indicate your spy should return. Here's an example:\nvar commandResult = {\n    result: $q.when()\n  };\nvar command = jasmine.createSpy('command')\n  .andReturn(commandResult);\n\n// command gets called in the code\n\ncommandResult.result.then(function () {\n    expect(...); // some expectation here\n});\n\nNow imagine if you have to mock 10 commands, each with a different result. You need to create 10 command result variables. This can clutter things up quickly. Using .plan(), however, eliminates the need to do this:\nvar command = jasmine.createSpy('command')\n  .andReturn({\n    result: $q.when()\n  });\n\n// command gets called in the code\n\ncommand.plan().result.then(function () {\n    expect(...); // some expectation here\n});\n\nI feel like this simplifies the code and describes what you are doing, \"I'm getting the result of the command spy\" instead of going back and having to determine which result variable to use for each command.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-26T22:30:06Z", "contents": "I think I'm seeing two different issues here:\n\nA desire to have the ability to provide a strategy to run based on the arguments that are passed, without having to callFake and write the if statement manually.\nA desire to get the result of invoking a particular spy.\n\nThe first has been proposed before, and I think we'd be interested in seeing something like this get into jasmine-core, so I'd be happy to review a pull request for that.\nThe second seems like it might actually be solved with #474 which allows you to say: command.calls.mostRecent().returnValue to get the result.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "longmatthewh", "authorAssociation": "NONE", "createdAt": "2015-03-26T22:57:52Z", "contents": "I ended up using sinon.js, but will work on a pull request in the near\nfuture.\nOn Mar 26, 2015 6:30 PM, \"Gregg Van Hove\" notifications@github.com wrote:\n\nI think I'm seeing two different issues here:\n\nA desire to have the ability to provide a strategy to run based on\nthe arguments that are passed, without having to callFake and write\nthe if statement manually.\nA desire to get the result of invoking a particular spy.\n\nThe first has been proposed before, and I think we'd be interested in\nseeing something like this get into jasmine-core, so I'd be happy to review\na pull request for that.\nThe second seems like it might actually be solved with #474\n#474 which allows you to say:\ncommand.calls.mostRecent().returnValue to get the result.\n\u2014\nReply to this email directly or view it on GitHub\n#720 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GabiGrin", "authorAssociation": "NONE", "createdAt": "2015-07-20T09:48:10Z", "contents": "Hey, I have the same request.\nI'm trying to extend the spy's functionality so I can return a resolved/rejected promise with some value. For example:\nspyOn(obj, 'someMethod').andReturnResolvedPromise('response from server')\nWith Jasmine 1 I just added to the Spy's prototype, but with 2+ the strategy is hidden.\nAny news on allowing to extend spy's strategies?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-03T18:15:03Z", "contents": "We're looking at support for both custom strategy types for a suite as well as the ability to specify a strategy based on the arguments passed upon invocation. I'd be happy to review pull requests for either of these features if anyone has time before we have a chance to get to them. You can always see our current backlog in tracker here: https://www.pivotaltracker.com/n/projects/10606.\nIn the meantime, you should also be able to call the exec function on the spyStrategy to call whatever the current plan is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jgrund", "authorAssociation": "NONE", "createdAt": "2015-12-19T13:06:32Z", "contents": "The second seems like it might actually be solved with #474 which allows you to say: command.calls.mostRecent().returnValue to get the result.\n\nThat appears to be different. returnValue is the value returned by the spy. What I am looking for is access to the actual nested spy so I can assert calls on it directly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "caseyhoward", "authorAssociation": "NONE", "createdAt": "2016-01-26T18:17:55Z", "contents": "Since this doesn't seems to be going anywhere, what I'm wondering is if there a better way to stub a function with arguments besides using and.callFake and manually checking arguments. Also, making expectations after the fact is also out of the question for me since IMHO you should only be doing that for functions with side effects.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-13T23:53:30Z", "contents": "Jasmine 3.0 includes both the ability to add a custom spy strategy for your suite and the ability to specify a spy strategy specific to a list of arguments to the spy. I think these two features solve the underlying problems for this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-30T00:18:01Z", "contents": "We haven't heard anything else on this issue and we believe the underlying use case should be solved in Jasmine 3.0, so I'm going to close this. Please open a new issue if there is a specific use case for spies that is still not solved in current releases of Jasmine.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 721, "url": "https://github.com/jasmine/jasmine/issues/721", "title": "use custom matchers in beforeAll", "contents": "Hi,\nThanks for making beforeAll and afterAll available, I was really looking forward to it.\nUnfortunately, because I would like to do some sanity checks in the beforeAll, the custom matchers, which I load in beforeEach, aren't loaded yet (because beforeAll is, if I'm correct, called earlier).\nexample:\nbeforeAll(function()\n{\n    setCertainThings();\n    expect(certainThings).toMeetMyCustomMatchersCondition();\n } );\n\nI wonder what would be a good solution here, as loading them in beforeAll as well, seems a bit hacky.\nWould it be an idea to have something like jasmine.register(matcher).\nIt would keep the beforeEach a bit cleaner anyways.", "createdAt": "2014-12-04T16:22:38Z", "updatedAt": "2014-12-17T01:52:35Z", "closedAt": "2014-12-17T01:52:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lenntt", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "lenntt", "company": null}, {"login": "Gerg", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-04T19:05:50Z", "contents": "If you want access to the custom matcher in your beforeAll, you are going to need to add it there. It doesn't seem odd to me to add custom matchers in a beforeAll.\nAre you able to move the expectation into the beforeEach?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lenntt", "authorAssociation": "NONE", "createdAt": "2014-12-05T12:56:41Z", "contents": "I am able to workaround it, yes. but I think it will be weird/confusing for people who try to use third-party tools, e.g. jasmine-jquery, that tend to do the loading for you.\nTherefore, I was just wondering why custom matchers need to be set in each context and not through a global jasmine environment?\nFeels a bit clumpsy to load all custom matchers in a beforeEach function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-05T17:25:42Z", "contents": "We made a conscious decision that makes everything more explicit. We add/remove matchers each spec, clear spies, and uninstall the clock each spec. This ensures that your spec is clean at the start - which is important for preventing pollution and it keeps Jasmine cleaner. Any special cases, say Matchers, felt wrong.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-05T17:42:53Z", "contents": "If you put a beforeEach/beforeAll call outside of any describe call, it will apply to all of your specs.  This is because Jasmine will apply it to the global suite that is a parent to all of the suites (describe calls) that you define.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-17T01:52:35Z", "contents": "Since this should be supported by adding your custom matcher in a beforeAll, I'm going to close this. If you find that not working, please re-open this or open a new issue and we'll take a look.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 722, "url": "https://github.com/jasmine/jasmine/issues/722", "title": "Test AngularJS $http promise without mock", "contents": "Hi,\nI'm creating the testing for an AngularJS / NodeJs application, the front-end application is fully implemented with AngularJS and the back-end is on NodeJS that exposes and API consumed by the AngularJS $http service.\nThe problem that I'm having is that I have an AngularJS service that calls the NodeJS API with $http (Async Promise) and when I run my Jasmine spec nothing happens, no http calls to the API. I searched and I found that we should mock the response with $httpBackend or Spy but in my case I really want the real call and not a mock since the AngularJS is just a Facade of http calls.\nIt's possible to call the API without mocking the responses and receive the real responses of the server?\nThanks\nBest Regards,\nF\u00e1bio Correia", "createdAt": "2014-12-04T19:16:35Z", "updatedAt": "2014-12-04T20:44:59Z", "closedAt": "2014-12-04T20:44:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fabiodcorreia", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fabiodcorreia", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-04T20:44:59Z", "contents": "Jasmine is built for unit testing in which you want to isolate as much as possible. It sounds like you might want something like protractor on top of jasmine if your goal is to run the full app when testing the angular side.\nSince this is more of a \"how do I test?\" question than an issue with jasmine itself, I'm going to close it. If you have more questions, please ask on the mailing list (jasmine-js@googlegroups.com)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 723, "url": "https://github.com/jasmine/jasmine/issues/723", "title": "If I match a stringified object to the original object it passes. Is this the expected behavior?", "contents": "Hello there, I just discovered a false positive on my test suite. I was matching a stringified object to the original object, and it was supposed to fail, but as you can see here, it's passing.\nvar foo = {\"bar\": \"hello\"};\n\ndescribe(\"foo\", function() {\n  // passes\n  it(\"string toMatch object\", function() {\n      expect(JSON.stringify(foo)).toMatch(foo);\n  });\n\n  // fails\n  it(\"object toMatch string\", function() {\n      expect(foo).toMatch(JSON.stringify(foo));\n  });\n});\nMy question is, is this the expected behavior?", "createdAt": "2014-12-04T23:40:03Z", "updatedAt": "2014-12-16T19:52:00Z", "closedAt": "2014-12-16T19:52:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Zequez", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Zequez", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-05T00:12:34Z", "contents": "toMatch is meant to be used with regular expressions. It looks like you should be using either toEqual or toBe instead. There is more information about matchers here.\nI don't think passing objects to toMatch is supported behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Zequez", "authorAssociation": "NONE", "createdAt": "2014-12-05T19:53:25Z", "contents": "Oh I didn't realize that toEqual would actually match different objects with the same structure. I'm sorry I brought this up. Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 724, "url": "https://github.com/jasmine/jasmine/issues/724", "title": "xdescribes appears to break test reporting", "contents": "This produces the expected output in the browser:\ndescribe(\"foo\", function() {\n  xdescribe(\"bar\", function() {\n    describe(\"baz\", function() {\n      it(\"does appear\", function() {\n        expect(true).toBeFalsy();\n      })\n    });\n  });\n});\nWhereas the following does not have the HTML report:\ndescribe(\"foo\", function() {\n  describe(\"bar\", function() {\n    xdescribe(\"baz\", function() {\n      it(\"does not appear\", function() {\n        expect(true).toBeFalsy();\n      })\n    });\n  });\n});", "createdAt": "2014-12-09T00:09:37Z", "updatedAt": "2014-12-09T20:40:59Z", "closedAt": "2014-12-09T20:40:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chendrix", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "chendrix", "company": "Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 725, "url": "https://github.com/jasmine/jasmine/issues/725", "title": "2.1.3 standalone missing?", "contents": "I was taking a look at the release page and noticed that the 2.1.3 standalone download is missing. Was that intentional or an oversight?", "createdAt": "2014-12-09T16:44:29Z", "updatedAt": "2014-12-09T23:00:34Z", "closedAt": "2014-12-09T20:37:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joshuacc", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "joshuacc", "company": "Hobsons"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-09T17:29:01Z", "contents": "You can get it here: https://github.com/jasmine/jasmine/tree/master/dist. It looks like we forgot to add it to the releases page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-09T20:37:54Z", "contents": "Sorry about that, I've uploaded the standalone to the github release now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2014-12-09T23:00:34Z", "contents": "Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 726, "url": "https://github.com/jasmine/jasmine/issues/726", "title": ".npmignore should contain at least .sass-cache and .idea", "contents": "Sorry, I'm in hurry so I don't provide a pull request. I've downloaded v2.1.3 via npm and it contains directories most users won't need, especially .sass-cache and .idea.\nBTW thanks for your work!", "createdAt": "2014-12-11T17:32:30Z", "updatedAt": "2014-12-11T20:49:59Z", "closedAt": "2014-12-11T20:49:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hgoebl", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "hgoebl", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 727, "url": "https://github.com/jasmine/jasmine/issues/727", "title": "Adding a window.onload handler hangs jasmine", "contents": "I've a source script which has an assignment statement to window.onload. Whenever I run the test using phantomjs, it just hangs without any output and browser does not exit. To narrow down the problem, I just downloaded fresh copy of jasmine-standalone-2.1.3.zip, unzipped and opened SpecRunner.html in my browser and it worked fine.\nI edited SpecRunner.html with the following:\n <script src=\"lib/jasmine-2.1.3/boot.js\"></script>\n\n  <script type=\"text/javascript\">\n    window.onload = function() { alert(\"onload\"); };\n  </script>\n  <!-- include source files here... -->\n  <script src=\"src/Player.js\"></script>\n  <script src=\"src/Song.js\"></script>\nAfter this if I open SpecRunner.html, it displays nothing. I'm getting the alert though. But jasmine seems to have crashed/hanged.\nI'm using Chrome on MAC OS X 10.10.\nCan you please help?", "createdAt": "2014-12-14T04:15:09Z", "updatedAt": "2017-05-19T14:36:51Z", "closedAt": "2014-12-17T03:23:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "venustus", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "venustus", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mattixpet", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-16T01:16:56Z", "contents": "Jasmine uses the window.onload to execute your jasmine suite, so if you overwrite onload after including boot.js without calling back to the previous handler, jasmine will never start.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "venustus", "authorAssociation": "NONE", "createdAt": "2014-12-17T03:23:29Z", "contents": "Thanks!\nI worked around it by backing up the original onload handler before the script and overwriting it after my script, since I do not need to test the onload handler itself.\nBut something like this could be worth mentioning in the docs.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mattixpet", "authorAssociation": "NONE", "createdAt": "2017-05-19T14:36:51Z", "contents": "if you are the one which overwrote window.onload, you can do instead window.addEventListener('load', function(){}, false) to not mess with jasmine.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 728, "url": "https://github.com/jasmine/jasmine/issues/728", "title": "Missing option on jasmine documentation related to running tests", "contents": "As far as I can see  in all documentations (all versions) you mention xit and xdescribe are for disabling  particular spec and suite. You forgot to mention that iit and ddescribe allow you to run only this spec or this suite.\nCan you please add it because when someone is learning jasmine he is not aware of that functionality and could lose a day to find it out.", "createdAt": "2014-12-17T15:45:16Z", "updatedAt": "2014-12-17T20:00:50Z", "closedAt": "2014-12-17T17:13:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ghristov", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ghristov", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-17T17:13:34Z", "contents": "The documentation for this feature, which is fdescribe and 'fit' by default, exists here: http://jasmine.github.io/2.1/focused_specs.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ghristov", "authorAssociation": "NONE", "createdAt": "2014-12-17T19:01:32Z", "contents": "Well since i'm using 1.3 and probably most of the people are using probably 2.0 and i'm not using fit or fdescribe but iit and ddescribe which is different syntax and probably for different versions. Why should i check 2.1 when i'm using 1.3 ? I don't think this should be closed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-17T20:00:50Z", "contents": "This feature was introduced in 2.1. If you are using focused specs on 1.3, you are using an unsupported fork. We won't document anything outside of supported core.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 729, "url": "https://github.com/jasmine/jasmine/issues/729", "title": "Comparing object with null prototype and objects derived from Object", "contents": "Should the following test pass? Currently it fails but IMHO I think it should pass. The reason is both the objects have the same keys. However objA is lacking a hasOwnProperty method which is why I think the test fails. However shouldn't that throw an exception?\nHow about two objects with null prototypes? The second test should pass right? It's complaining that the object doesn't have hasOwnProperty method which I expected for the first test also. I'm guessing using Object.hasOwnProperty.call(obj, property) should do the trick to make the second test work and pass. However should the first test pass or fail? I'm new to Javascript so I wasn't sure but I'd be happy to work on a PR if required. \ud83d\ude04\ndescribe(\"Prototypeless Object\", function() {\n    it(\"should equal regular obj with same keys\", function () {\n        var objA = Object.create(null);\n        var objB = {};\n\n        objA['name'] = 'Rohit';\n        objB['name'] = 'Rohit';\n        expect(objA).toEqual(objB);\n    });\n\n    it(\"should equal obj with null prototype\", function () {\n        var objA = Object.create(null);\n        var objB = Object.create(null);\n\n        objA.name = 'Rohit';\n        objB.name = 'Rohit';\n\n        expect(objA).toEqual(objB);\n    });\n});\nThe test fails with the following failure message:\nFailures:\n1) Prototypeless Object should equal obj with same keys\n  Message:\n    Expected { name: 'Rohit' } to equal { name: 'Rohit' }.\n  Stack:\n    Error: Expected { name: 'Rohit' } to equal { name: 'Rohit' }.\n        at Object.<anonymous> (/home/rohit/Code/prototypeless-obj/spec/obj.spec.js:9:22)\n\n2) Prototypeless Object should equal obj with null prototype\n  Message:\n    TypeError: Object object has no method 'hasOwnProperty'\n  Stack:\n    TypeError: Object object has no method 'hasOwnProperty'\n        at Object.<anonymous> (/home/rohit/Code/prototypeless-obj/spec/obj.spec.js:19:22)\n\nEDIT 1: Added the output of a test run.\nEDIT 2: Added one more test case for both objects with null prototype", "createdAt": "2014-12-18T05:07:47Z", "updatedAt": "2014-12-21T00:49:01Z", "closedAt": "2014-12-21T00:49:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rohit", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-18T21:40:50Z", "contents": "The toEqual matcher checks whether the constructors match for two given objects as well. There is a bug (#598) in the currently released version that should be fixed on master so that the error message indicates that the constructor function is different.\nClosing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-19T02:48:00Z", "contents": "Thank you for clarifying the first test. However I still have doubts about the second test. If their constructor is null then shouldn't only the two objects properties be considered for equality? I added the following test to Jasmine specs and it fails on master with the same error.\n    it(\"does something with null prototype objects\", function() {\n      var objA = Object.create(null),\n            objB = Object.create(null);\n\n        objA.name = 'Test';\n        objB.name = 'Test';\n\n        expect(j$.matchersUtil.equals(objA, objB)).toBe(true);\n    });\nIt fails with the following error message:\nFailures:\n1) matchersUtil equals does something with null prototype objects\n  Message:\n    TypeError: Object object has no method 'hasOwnProperty'\n  Stack:\n    TypeError: Object object has no method 'hasOwnProperty'\n        at has (/home/rohit/Projects/opensource/jasmine/src/core/matchers/matchersUtil.js:200:18)\n        at eq (/home/rohit/Projects/opensource/jasmine/src/core/matchers/matchersUtil.js:178:13)\n        at Object.equals (/home/rohit/Projects/opensource/jasmine/src/core/matchers/matchersUtil.js:8:14)\n        at Object.<anonymous> (/home/rohit/Projects/opensource/jasmine/spec/core/matchers/matchersUtilSpec.js:261:32)\n\nEven if the test should not pass shouldn't it actually run by using Object.hasOwnProperty? instead of throwing an error? Apologies if I'm asking something basic about JS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-19T17:18:48Z", "contents": "Hmm, yeah, that part sounds like a bug. We'll have to take a look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-19T17:19:53Z", "contents": "If you have an idea on how to fix this, I'd be happy to review a pull request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 732, "url": "https://github.com/jasmine/jasmine/issues/732", "title": "beforeAll/afterAll don't work with focused specs", "contents": "beforeAll and afterAll will run once per spec (like beforeEach and afterEach) when you use focused specs:\ndescribe('focused spec', function() {\n  var passed;\n\n  beforeAll(function() {\n    console.log('beforeAll')\n    passed = 0;\n  });\n\n  afterAll(function() {\n    console.log('afterAll')\n    expect(passed).toEqual(2);\n  });\n\n  iit('should pass1', function() {\n    ++passed;\n  });\n\n  iit('should pass3', function() {\n    ++passed;\n  });\n});\n\nThe output is:\nbeforeAll\nafterAll\nFbeforeAll\nafterAll\nF\n\nFailures: \n1) focused spec should pass1\n1.1) Expected 1 to equal 2.\n    Error: Expected 1 to equal 2.\n        at Object.<anonymous> (/workspace/minijasminenode/spec/focused_spec.js:11:20)\n\n2) focused spec should pass3\n2.1) Expected 1 to equal 2.\n    Error: Expected 1 to equal 2.\n        at Object.<anonymous> (/workspace/minijasminenode/spec/focused_spec.js:11:20)\n\n2 specs, 2 failures\nFinished in 0.007 seconds", "createdAt": "2014-12-23T19:59:33Z", "updatedAt": "2018-05-18T08:35:32Z", "closedAt": "2015-01-20T00:21:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hankduan", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "hankduan", "company": "Google"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "juliemr", "company": "Google"}, {"login": "dtabuenc", "company": null}, {"login": "PaddyMann", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2014-12-23T20:10:08Z", "contents": "This is known behavior for the current release, though I agree it is not intuitive. Is this causing you issues?", "reactions_count": 7, "reactions_data": ["THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "hankduan", "authorAssociation": "NONE", "createdAt": "2014-12-23T20:16:58Z", "contents": "I'm working on getting protractor to work with jasmine2.0 (angular/protractor#362), and noticed this when I was writing some tests for the integration I'm doing.\nIt's causing me issue in the sense that I feel like this issue will be brought up as people start using jasmine.\nAnother thing I noticed is that you can't put expects in afterAll/beforeAll unless you use a focused spec, unlike afterEach/beforeEach. Is this also a known behavior?\ni.e.\ndescribe('beforeEach/afterEach/it', function() {\n  afterAll(function() {\n    expect(1).toEqual(2);\n  });\n\n  it('should share same scope', function() {\n    ++this.x;\n  });\n});\n\nwill not fail, but if you replace the it with a iit, it will fail", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-23T21:58:33Z", "contents": "Are you using jasmine 2.1 or 2.0? beforeAll, afterAll, fit, and fdescribe are only officially in 2.1 and should support running expects just fine. I notice your example is using iit which is not the syntax that jasmine itself now supports.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hankduan", "authorAssociation": "NONE", "createdAt": "2014-12-23T22:10:31Z", "contents": "Sorry iit is something I added that just calls fit. I'm using 2.1.3.\nBasically running something like this:\ndescribe('beforeEach/afterEach/it', function() {\n  afterAll(function() {\n    console.log('here');\n    expect(1).toEqual(2);\n  });\n\n  // note this is a regular 'it'. If you use 'fit', the expect in 'afterAll' works normally.\n  it('should share same scope', function() {\n    expect(1).toEqual(1); //random code\n  });\n});\nWill execute the afterAll because the console.log prints. It also says there is 1 spec. However, the expect(1).toEqual(2) does not register as a failure.\nHere's my output:\n.here\n\n\n1 spec, 0 failures\nFinished in 0.005 seconds", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-23T22:16:32Z", "contents": "Failures in afterAlls are reported with the suite completion event and not with the spec itself. This means that whatever reporter you're using in lib/cli.js needs to also listen for the suiteDone event and report if there are any failedExpectations. (The jasmine npm does this for you).\nThis happens because by the time the afterAll is actually invoked, the specs in the suite have already reported their completion state. Sorry for the confusion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hankduan", "authorAssociation": "NONE", "createdAt": "2014-12-23T22:21:11Z", "contents": "Ah, thank you for the clarification. I'll fix up the reporter to also look at the suite completion event.\nMy original question still stands though. If you have multiple fit in a describe, the afterAll/beforeAll runs each time the fit runs. Is this something you guys will fix, or should I note that as working as intended?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-24T03:43:13Z", "contents": "That is the current behavior as designed, but I probably wouldn't rely on it explicitly. We agree it's not the most awesome thing, but the fit and fdescribe functionality is treated the same as if a list of spec ids were passed into Env.execute in which case we don't know the order and just fall back to the safest way to get green specs, instead of trying to figure out exactly the right times to run the beforeAll and afterAlls. This way if unordered ids are passed in, we can make sure that regardless of the order of the ids passed in, we can make sure the appropriate setup has been run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-20T00:21:39Z", "contents": "It sounds like this is resolved now, so I'm going to close this issue. Please re-open if you feel it hasn't been fully resolved.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-01-22T02:08:40Z", "contents": "FYI -this behavior is causing some confusion for Protractor users - see angular/protractor#1743.\nIt would be great if it could be addressed in a future version, or if there were a good place to point to for documentation on how fit or fdescribe will affect your test run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dtabuenc", "authorAssociation": "NONE", "createdAt": "2015-01-23T19:32:58Z", "contents": "Not only does it run once for each it, but it seems to run additional times as well. Please see here:\nhttp://jsfiddle.net/wzAyL/257/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-24T01:55:31Z", "contents": "I pushed a fix for the additional beforeAll runs.\nWe agree that the interaction between beforeAll/afterAll and fit/fdescribe is confusing. We would like to change this in a future release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2015-06-03T13:05:10Z", "contents": "Wondering why this was closed - is there a separate location we can track progress on this being fixed? (i.e. beforeAll / afterAll only being called once with a focused describe block)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-03T13:41:36Z", "contents": "As of Jasmine 2.3, beforeAll and afterAll should behave the same with focused suites as without. I.e. they should only run once, instead of before each spec.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 733, "url": "https://github.com/jasmine/jasmine/issues/733", "title": "Double-nested xdescribe breaks entire spec", "contents": "This spec doesn't work with default SpecRunner.html on 2.1.3:\ndescribe('1st', function() {\n    describe('2nd', function() {\n        xdescribe('3rd', function() {\n            it('works', function() {\n                expect(true).toBe(true);\n            });\n        });\n    });\n\n    it('works', function() {\n        expect(true).toBe(true);\n    });\n});\nWhen I change xdescribe to describe it works fine.", "createdAt": "2014-12-24T15:49:25Z", "updatedAt": "2015-01-13T06:19:26Z", "closedAt": "2015-01-13T06:19:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chge", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "chge", "company": "@qiwitech"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rohit", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2014-12-24T18:32:45Z", "contents": "It sounds like this is a duplicate of #724 which should be fixed on master now.\nCan you give master a try? if is still doesn't work, what exactly isn't working, what failure mode are you seeing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-13T05:32:22Z", "contents": "Just tried this on master and the output:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-13T06:19:26Z", "contents": "Sounds good. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 734, "url": "https://github.com/jasmine/jasmine/issues/734", "title": "Ability to pass stack trace into `fail`", "contents": "The current implementation allows an error to be passed into done.fail/this.fail, but it only reads the message from the error:\n    this.fail = function(error) {\n      var message = 'Failed';\n      if (error) {\n        message += ': ';\n        message += error.message || error;\n      }\n\n      currentRunnable().addExpectationResult(false, {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        message: message\n      });\n    };\nFor framework development and especially for asynchronous code, it would be very useful to allow us to pass in a custom stack trace. For example/one use case, if I have a spec like this:\nit('fail', function(done) {\n  done.fail('an error');\n});\nThe stack trace does not tell you which line in the spec file failed, making it hard to debug, and I would like to patch it by passing in a custom stack.", "createdAt": "2015-01-03T04:41:41Z", "updatedAt": "2015-01-12T19:52:19Z", "closedAt": "2015-01-12T19:52:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hankduan", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "hankduan", "company": "Google"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 735, "url": "https://github.com/jasmine/jasmine/issues/735", "title": "Possibly confusing failure message by toThrow and toThrowError matchers", "contents": "1) Hamming throws error when strands are not equal length\n  Message:\n    Expected function to throw Error: DNA strands must be of equal length., but it threw Error: DNA strands must be of equal length.\n\nThe above failure message is confusing because the two error strings look alike. The actually thrown error is missing a full stop: \"DNA strands must be of equal length\". This is while running jasmine via CLI in node.\nIMHO this should give a non confusing error message but I don't know what should be done. On the one hand the full stop could be removed from the error message but then the message is different in style from the others. I think the following output would be better:\n1) Hamming throws error when strands are not equal length\n  Message:\n    Expected function to throw\n      Error: DNA strands must be of equal length.\n    but it threw\n      Error: DNA strands must be of equal length\n\nBy splitting the message over multiple lines I think we can remove the full stop from the error message.\nAnother option, as suggested by @joshuacc, is to surround the error text with quotations.\n1) Hamming throws error when strands are not equal length\n  Message:\n    Expected function to throw \"Error: DNA strands must be of equal length.\", but it threw \"Error: DNA strands must be of equal length\"\n\nThis might be the simplest although splitting onto multiple lines does look nice IMHO. \ud83d\ude01\nEDIT ~5 mins: Added suggestion to surround by quotes", "createdAt": "2015-01-05T15:23:46Z", "updatedAt": "2015-04-09T22:33:28Z", "closedAt": "2015-04-09T22:33:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "rohit", "company": null}, {"login": "joshuacc", "company": "Hobsons"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2015-01-05T15:25:30Z", "contents": "Simply putting quotation marks around the error text would remove the ambiguity as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-13T09:24:01Z", "contents": "@slackersoft I'd be happy to make a PR for this if it's desirable to fix. If yes then any preference on how to fix?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T01:51:49Z", "contents": "Quoting the error message is probably the nicest solution for now. We haven't fully solved pretty printing messages for console (node) and html.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-15T15:30:54Z", "contents": "Hmm one problem is it's not necessary to throw a string you could throw a number for e.g. There is already some quoting in the specs of toThrow and toThrowError so I don't think wrapping everything thrown with quotes is a good idea.\nSeparating the expected and actual on different lines would be useful IMHO but if pretty printing is still being discussed/thought-about then I guess this issue should be closed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-02T23:18:57Z", "contents": "toThrow and toThrowError both use the jasmine PrettyPrinter to display the message being thrown, so strings should be being wrapped in quotes.\nI'd be interested to see an example spec where you were seeing this now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-09T22:33:24Z", "contents": "If you expect the function to throw an actual Error object you should probably use toThrowError which will properly quote the message when displaying a failure message. If you use toThrow, jasmine's pretty printer ends up falling back to calling toString() on the Error objects and that is what generates the message you see.\nGiven this, I'm going to close this issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 737, "url": "https://github.com/jasmine/jasmine/issues/737", "title": "SpyRegistry clearSpies() puts inherited methods onto target prototype", "contents": "One of the issues we're having migrating tests from JSTestDriver with sinon to with Jasmine is that we cannot run our tests in a randomised order.\nThis is rooted in the use of inheritance and the way in which Jasmine returns spied on function back to their original values (I don't want to get into a debate on composition over inheritance at this stage, I probably agree with you).\nWhat happens is when we have a function on the prototype that comes from a superclass n levels up (we're currently using a variant of resig's Class()), jasmine takes a copy of the original based on it as being a member of the subclass. https://github.com/jasmine/jasmine/blob/master/src/core/base.js#L60\nIn clearSpies() it returns the value back onto the subclass -\nhttps://github.com/jasmine/jasmine/blob/master/src/core/SpyRegistry.js#L43\nThis unfortunately hides the superclass behaviour which is breaking our other tests when not run in specific orders.\nThere are three possible solutions to this.\n\nCheck for hasOwnProperty when creating the spy and throw an exception when the property does not exist.\nreturn the function back to the superclass only\ndo nothing.\n\nI have potential solutions for 1 and 2 and wonder what the community thinks is the best approach before I put in a PR.\noption 3 suggests this is not really a problem - and I'd be interested in hearing arguments as to whyu this is the case. Genuinely,\nRich", "createdAt": "2015-01-11T15:04:20Z", "updatedAt": "2016-02-22T22:11:50Z", "closedAt": "2016-02-22T22:11:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "coderagebbc", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "coderagebbc", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ryanswood", "company": "Able Health"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T20:05:27Z", "contents": "I'm not totally sure I understand what exactly is happening. It sounds like you're getting a function from the parent prototype put into the child prototype, but that doesn't seem like it would cause an issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "coderagebbc", "authorAssociation": "NONE", "createdAt": "2015-01-13T07:42:02Z", "contents": "I'll put together some code within the next day or so, and screenshot some console, that might explain it better.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "coderagebbc", "authorAssociation": "NONE", "createdAt": "2015-01-13T07:45:19Z", "contents": "I guess I could go as far to say that is exactly the case, and that does cause spying problems for us whilst we are migrating our approach to test to jasmine (which is awesome btw). I'm also not sure that it should behave this we since it's isn't properly returning objects to their correct former state on teardown.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-27T15:13:07Z", "contents": "I think I better understand the issue now. We'd be happy to review a pull request that detected an original method that was from up the prototype chain and deleted the spy property from the object instead of putting the original method in its place upon cleanup.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ryanswood", "authorAssociation": "NONE", "createdAt": "2015-08-13T23:32:32Z", "contents": "This bit us too. We automatically assert that no global properties were added, which we implement by checking _(window).keys() before and after each example. In our case, we spy on window.print, which adds the print method directly to window causing our test to fail.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 738, "url": "https://github.com/jasmine/jasmine/issues/738", "title": "toMatch(\"url(./a.png)\") is no match", "contents": "hi.\ncss=\"url(./a.png)\"\nexpect(css).toMatch(\"url(./a.png)\")\n// > Expected 'url(./a.png)' to match 'url(./a.png)'.\nThis behavior is expected?\nreplaced\nexpect(css.indexOf(\"url(./a.png)\")).toBeTruthy() // passed", "createdAt": "2015-01-11T20:57:13Z", "updatedAt": "2015-01-12T17:59:40Z", "closedAt": "2015-01-12T17:59:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "59naga", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "59naga", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-12T06:41:09Z", "contents": "toMatch is intended for regular expression matching. As such, a string passed in will be passed to the RegExp constructor and any RegExp special characters in your string (e.g. (, ., )) will be treated differently.\nPossibly you want to use toContain for partial string match or toEqual for full string match.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "59naga", "authorAssociation": "NONE", "createdAt": "2015-01-12T07:33:45Z", "contents": "throw new myself ok, understood.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 739, "url": "https://github.com/jasmine/jasmine/issues/739", "title": "Please mention browser support in readme & website", "contents": "Thanks for Jasmine.\nCan you please add a note?", "createdAt": "2015-01-12T15:54:33Z", "updatedAt": "2015-01-12T19:12:34Z", "closedAt": "2015-01-12T19:08:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mightyiam", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "mightyiam", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-01-12T15:55:25Z", "contents": "It isn't clear what the official browser support is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-01-12T19:12:34Z", "contents": "Beautiful, @slackersoft. Big relief. Thank you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 740, "url": "https://github.com/jasmine/jasmine/issues/740", "title": "Does jasmine provide `expect`?", "contents": "sindresorhus/globals#13", "createdAt": "2015-01-12T16:57:50Z", "updatedAt": "2015-01-12T18:16:54Z", "closedAt": "2015-01-12T18:16:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mightyiam", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mightyiam", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-12T17:30:52Z", "contents": "I'm sorry - what is the question?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-01-12T18:16:54Z", "contents": "Whether jasmine provides a global expect. It does.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 741, "url": "https://github.com/jasmine/jasmine/issues/741", "title": "`they` method to have multiple test cases for a single test", "contents": "We have this in our code and it makes it really easy to setup dozens of test for a simple case. I can provide a PR, just wanted to start the discussion here to gather interest.\nBasically (our code is ES6, but it's simple enough to backport to ES5):\n/**\n * Internal helper for generating the proper function.\n */\nfunction _itMultipleTestsInternal(it) {\n    return function(description, cases, fn) {\n        if (typeof(description) == 'string') {\n            let prefix = description;\n            description = function(i, kase) {\n                return `${prefix} (${i}) - \"${JSON.stringify(kase)}\"`;\n            };\n        }\n\n        // Determine if `fn` should receive a done parameter.\n        let done = fn.length > 1;\n\n        cases.forEach((kase, i) => {\n            let tester = done ? (done) => fn(kase, done)\n                              : () => fn(kase);\n\n            it(description(i, kase), tester);\n        });\n    };\n}\n\n\n/**\n * Generates an `it()` test case for every cases passed in the array.\n * @example\n *     let cases = [99, 'hello', NaN];\n *     they('Test numbers', cases, (nb) => {\n *         expect(typeof(nb)).toBe('number');\n *     });\n *     // This is equivalent to:\n *     //     it('Test numbers (1)', function() { expect(typeof(99)).toBe('number'); });\n *     //     it('Test numbers (2)', function() { expect(typeof('hello')).toBe('number'); });\n *     //     it('Test numbers (3)', function() { expect(typeof(NaN)).toBe('number'); });\n *\n * @param description string|Function A prefix string or a function that will receive\n *     a Number (index of the case), and a case value, and return a string of the description\n *     of the test.\n * @param cases Array<Any> An array of values to pass to the function to test.\n * @param fn Function A function that will receive the value of the array for the test,\n *     and a potential `done` function. The `done` function is passed only if `fn` takes\n *     two arguments.\n */\nwindow['they'] = _itMultipleTestsInternal(window['it']);\n\n\n/**\n * Same as above, but using `fit()` instead of `it()`.\n */\nwindow['fthey'] = _itMultipleTestsInternal(window['fit']);\n\n\n/**\n * Same as above, but using `xit()` instead of `it()`.\n */\nwindow['xthey'] = _itMultipleTestsInternal(window['xit']);", "createdAt": "2015-01-12T23:14:03Z", "updatedAt": "2015-01-13T00:40:45Z", "closedAt": "2015-01-13T00:40:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hansl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hansl", "company": "@google "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-13T00:40:45Z", "contents": "We think functionality like this is better suited to an add-on than as an addition to core. (See #527 and #480). The original poster also made a plugin as well.\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 742, "url": "https://github.com/jasmine/jasmine/issues/742", "title": "Multi-line error messages are rendered in a weird order", "contents": "The following test:\nit('test title', function () {\n    jasmine.addMatchers({\n        toAAA: function () {\n            return {\n                compare: function () {\n                    return {\n                        pass: false,\n                        message: 'a\\nb\\nc\\nd',\n                    };\n                },\n            };\n        },\n    });\n    expect(true).toAAA();\n});\ngives the following output:\nChrome 39.0.2171 (Mac OS X 10.10.1)  test title FAILED\n    b\n    c\n    d\n    Error: a\n        at Object.<anonymous> (/PATH:column:row)\nChrome 39.0.2171 (Mac OS X 10.10.1): Executed 1 of 1 (1 FAILED) ERROR (0 secs / 0.038 secs)\n\ni.e. lines from the second to the last one are printed first, then Error: and the first line of the message. This reads weirdly, especially if the second line is a continuation to the first. I'd expect the following:\nChrome 39.0.2171 (Mac OS X 10.10.1)  test title FAILED\n    Error: a\n    b\n    c\n    d\n        at Object.<anonymous> (/PATH:column:row)\nChrome 39.0.2171 (Mac OS X 10.10.1): Executed 1 of 1 (1 FAILED) ERROR (0 secs / 0.038 secs)\n\nI couldn't find any documentation about this behavior at http://jasmine.github.io/2.1/custom_matcher.html\nOS X 10.10.1, native Terminal.app, Jasmine 2.1.3 fired via karma 0.12.31 and karma-jasmine 0.3.4, Node 0.10.35 and 0.11.14.", "createdAt": "2015-01-12T23:50:24Z", "updatedAt": "2015-03-02T21:47:48Z", "closedAt": "2015-03-02T21:47:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mgol", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mgol", "company": "Sumo Logic, jQuery, Angular"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-13T00:24:35Z", "contents": "I'm not seeing this same behavior with just bare jasmine-core. The HtmlReporter seems to be reporting roughly as expected:\n\nIt's possible this is a karma issue in some way that they are transposing the error message.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-02T21:47:48Z", "contents": "It looks like jasmine itself is reporting the error as you would expect, so it seems like this isn't an issue with jasmine, but rather how karma is reporting errors from jasmine.\nI'm going to close it, but let us know if you can isolate it something more jasmine specific.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 744, "url": "https://github.com/jasmine/jasmine/issues/744", "title": "Add marker to indicate that you expect the test fail", "contents": "From time to time we are developing our protractor/jasmine tests before implementing solution. We miss feature to be able to indicate that we expect the test fail. After desired solution will be implemented test really start failing because test start passing. All what implementer mast to do is remove indicator. Is implementing such thing is possible in jasmine?", "createdAt": "2015-01-14T10:05:18Z", "updatedAt": "2015-01-14T16:08:13Z", "closedAt": "2015-01-14T16:08:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jankoprowski", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jankoprowski", "company": null}, {"login": "rohit", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "rohit", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-14T15:55:54Z", "contents": "Ah I remember using something similar with Cucumber IIRC. Basically you mark a test as failing so when you run it and it fails the test runner says: n failing tests expected to fail. BUT if a failing test passes the runner complains about it saying a test expected to fail but passed.\nThere is already a mechanism for marking a spec as pending. Well you just use a different method xit/xdescribe instead of it/describe. Maybe introduce new methods like fit/fdescribe and make jasmine expect these specs to fail and if they pass then fail the test suite?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-14T16:08:13Z", "contents": "By just expecting the test to fail in any manner you possibly cover up issues where your test was never failing for the correct reason, so you won't be able to properly make it pass. Additionally, fit/fdescribe are already taken as function names in 2.1 for focused specs.\nI'm don't think this is something that we want in the jasmine core. You should be able to create an extension that added the functions and a reporter that treated them as desired.\nI'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 747, "url": "https://github.com/jasmine/jasmine/issues/747", "title": "Warn when two tests have the same name.", "contents": "Apparently if I use describe and accidentally describe the same string twice, one of the describe calls is overridden.\nJasmine should throw an error and tell me to fix my names. It is bad if you copy and paste one test as a template, and forget to change its name, and wonder why the previous test is failing, only to find out it was overridden.", "createdAt": "2015-01-16T02:16:53Z", "updatedAt": "2015-01-18T23:07:13Z", "closedAt": "2015-01-18T23:07:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jacksonrayhamilton", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jacksonrayhamilton", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-17T02:13:15Z", "contents": "I'm not sure what you mean by \"overridden\". Jasmine should keep both describes around for you, they'll just be named the same thing. Jasmine doesn't try to keep any kind of unique list of spec/suite descriptions, so you shouldn't see any specs not be run just because they have the same name as another.\nCan you give me an example of the suite and output you're seeing? Also, what version of jasmine are you running and how?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jacksonrayhamilton", "authorAssociation": "NONE", "createdAt": "2015-01-17T04:33:56Z", "contents": "My apologies; I've tested this and confirmed that two tests with the same name do run.\nI was running my tests using Karma with the karma-mocha-reporter plugin. It looks like the reporter was just not listing both of the tests. Interestingly, this happened in another reporter (karma-spec-reporter) too, so either it's a Karma bug or a common design error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-18T23:07:13Z", "contents": "Awesome, I'm going to close this then.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 748, "url": "https://github.com/jasmine/jasmine/issues/748", "title": "toThrow fails on PhantomJS but works good on Chrome and Firefox", "contents": "OS: Windows 8.1 x64\nBrowsers:\n\nChrome 39.0.2171 (Windows 8.1)\nFirefox 35.0.0 (Windows 8.1)\nPhantomJS 1.9.8 (Windows 8)\n\nStack:\n\nnode: 0.10.33 (x64)\nkarma: 0.12.31\nkarma-jasmine: 0.3.4\njasmine: 2.1.1\n\nThe error message:\n\nError: Expected function to throw { code: 500, name: 'generic error', message: 'error message' }, but it threw { code: 500, name: 'generic error', message: 'error message', line: 9, sourceId: 84165968, sourceURL: 'c:/***/ApiRequest.js', stack: '[object Object]\n\nExpected: SUCCESS\nSpec:\n      var expectedError = new API.Ws.Errors.ValidationError(\n        500,\n        \"generic error\",\n        \"error message\"\n      );\n      expect(function () {\n        ApiRequest.testForLogicalError(response)\n      }).toThrow(expectedError);\nSUS:\n// API.Ws.Errors.ApiLogicErrror.js\nvar API;\n(function (API) {\n    var Ws;\n    (function (Ws) {\n        var Errors;\n        (function (Errors) {\n            \"use strict\";\n            var ApiLogicError = (function () {\n                function ApiLogicError(code, name, message) {\n                    this.code = code;\n                    this.name = name;\n                    this.message = message;\n                }\n                return ApiLogicError;\n            })();\n            Errors.ApiLogicError = ApiLogicError;\n        })(Errors = Ws.Errors || (Ws.Errors = {}));\n    })(Ws = API.Ws || (API.Ws = {}));\n})(API || (API = {}));\n\n// API.Ws.Errors.ValidationErrror.js\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar API;\n(function (API) {\n    var Ws;\n    (function (Ws) {\n        var Errors;\n        (function (Errors) {\n            \"use strict\";\n            var ValidationError = (function (_super) {\n                __extends(ValidationError, _super);\n                function ValidationError(code, name, message, messages) {\n                    _super.call(this, code, name, message);\n                    this.messages = messages;\n                }\n                return ValidationError;\n            })(Errors.ApiLogicError);\n            Errors.ValidationError = ValidationError;\n        })(Errors = Ws.Errors || (Ws.Errors = {}));\n    })(Ws = API.Ws || (API.Ws = {}));\n})(API || (API = {}));", "createdAt": "2015-01-16T13:20:48Z", "updatedAt": "2015-04-10T19:02:59Z", "closedAt": "2015-04-10T19:02:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Maks3w", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Maks3w", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-17T02:21:24Z", "contents": "It looks like when the error is thrown in phantomjs it acquires some extra metadata about where it was thrown from. The toThrow matcher uses jasmine's deep compare functionality to check equality of the thing thrown vs the thing expected to be thrown, so this check fails in phantom.\nYou might be able to use something like jasmine.objectContaining to only compare the part of the object you care about to work around this issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-28T00:04:11Z", "contents": "This seems like it's an issue with how phantom is treating errors when they get thrown and not necessarily an issue with jasmine itself. I'm going to close it since objectContaining seems like it should be a good workaround.\nIf this doesn't work please let us know.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Maks3w", "authorAssociation": "NONE", "createdAt": "2015-02-28T16:55:42Z", "contents": "With objectContaining the result is worst. All browers fails\n      try {\n        ApiRequest.testForLogicalError(response);\n        fail('Expected exception not thrown')\n      } catch (e) {\n        expect(e).toEqual(jasmine.objectContaining(expectedError));\n      }\n\nExpected ValidationError({ code: 422, name: 'Unprocessable Entity', message: 'Failed Validation', messages: Object({ input_param: 'generic message', another_param: 'error message' }) }) to equal <jasmine.objectContaining(ValidationError({ code: 422, name: 'Unprocessable Entity', message: 'Failed Validation', messages: Object({ input_param: 'generic message', another_param: 'error message' }) }))>.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Maks3w", "authorAssociation": "NONE", "createdAt": "2015-03-02T07:44:30Z", "contents": "Finally I needed to create a plain object with the properties.\nexpect(<ValidationError>).toEqual(jasmine.objectContaining(<ValidationError>)); Fail.\nexpect(<ValidationError>).toEqual(jasmine.objectContaining(<ApiLogicError>)); works OK.\nexpect(<ValidationError>).toEqual(jasmine.objectContaining(<{foo:baz}>)); works OK.\nexpect(<ApiLogicError>).toEqual(jasmine.objectContaining(<ApiLogicError>)); works OK\nSeems to be a problem when an object extend from other (ValidationError extends from ApiLogicError)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T22:47:08Z", "contents": "objectContaining is designed to work with just a bare javascript object, and not the result of calling a constructor function. It's possible this is failing in a way similar to #769 and Object.defineProperty, in which case this might actually work as you expect on master with objectContaining.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-10T19:02:59Z", "contents": "Closing this, since it sounds like you've got it working with objectContaining and it seems like it's primarily an issue with what different browsers do when an Error is thrown.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 749, "url": "https://github.com/jasmine/jasmine/issues/749", "title": "Testing async features that can't receive a done() callback", "contents": "I have authored a very simple preCondition instruction for Jasmine 2.0's way of async testing.\nI found it necessary for some types of asynchronous features that will complete on their own and won't allow the user to pass a callback where done would be fired, like rendering Google Maps, images or anything else that can change both the DOM and the CSSOM.\nWhile it is utterly possible to re-implement waitsFor, I believe that Jasmine 2.0 direction is more towards stepping away from this idea and instead taking more advantage of done callbacks, like putting one it block as a pre-condition for another.\nI would love to receive some feedback from you guys to see if you agree with this approach. It is available here https://github.com/tiagorg/jasmine-precondition and also on NPM.\nAnd if you ever feel like this idea can evolve towards something getting incorporated into the official Jasmine library, I would love to chip in as well :)\nWith the preCondition it would be possible to do something like: (I can provide a Google Maps example as well)\ndescribe('the preCondition instruction', function () {\n\n  var counter1 = 0,\n      counter2 = 0,\n      interval;\n\n  beforeEach(function(done) {\n    interval = setInterval(function(){\n      counter1 += 100;\n    }, 100);\n\n    preCondition(function() {\n      return counter1 >= 500;\n    }, done, 100);\n  });\n\n  it('should only get executed when counter1 is 500', function (done) {\n    expect(counter1).toBe(500);\n\n    preCondition(function() {\n      counter2 += 200;\n      return counter2 === 1000;\n    }, done, 100);\n  });\n\n  it('should only get executed when counter2 is 1000', function () {\n    expect(counter2).toBe(1000);\n  });\n\n  afterEach(function(){\n    clearInterval(interval);\n  });\n});", "createdAt": "2015-01-17T23:05:32Z", "updatedAt": "2015-08-06T04:01:28Z", "closedAt": "2015-01-19T23:59:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "themindfuldev", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "themindfuldev", "company": "@pinterest"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "gregor", "company": "@wireapp"}, {"login": "mmzoo", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-19T23:59:09Z", "contents": "This looks like it could be a useful add-on for jasmine. Since it looks like you didn't have to make any changes to the core of jasmine, I think it makes sense for you to publish it and see how much traction it gets.\nThanks for contributing to the jasmine ecosystem.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "themindfuldev", "authorAssociation": "NONE", "createdAt": "2015-01-20T00:25:04Z", "contents": "Outstanding! Thanks Gregg! :)\nOn Jan 19, 2015 3:59 PM, \"Gregg Van Hove\" notifications@github.com wrote:\n\nThis looks like it could be a useful add-on for jasmine. Since it looks\nlike you didn't have to make any changes to the core of jasmine, I think it\nmakes sense for you to publish it and see how much traction it gets.\nThanks for contributing to the jasmine ecosystem.\nClosing.\n\u2014\nReply to this email directly or view it on GitHub\n#749 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregor", "authorAssociation": "NONE", "createdAt": "2015-01-21T14:39:25Z", "contents": "Looks very helpful to me.... \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmzoo", "authorAssociation": "NONE", "createdAt": "2015-08-05T11:31:10Z", "contents": "Pretty useful, thank you @TiagoRG\nI needed this to see if a partial is loaded via ajax (in my fixtures). I had no trigger other than waiting :)\nit 'loads the header', (done) ->\n  preCondition (-> $('#header_partial').length > 0), done", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "themindfuldev", "authorAssociation": "NONE", "createdAt": "2015-08-06T04:01:28Z", "contents": "Awesome! You're welcome @mmzoo !", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 750, "url": "https://github.com/jasmine/jasmine/issues/750", "title": "fail() should report the stack of a passed in error object", "contents": "When you call fail(error), a stack trace is generated where fail() is called, and this gets reported. Since in fail you're looking for an error.message, we should also look for an error.stack, and if present use that in the expectationResult.\n    this.fail = function(error) {\n      var message = 'Failed';\n      if (error) {\n        message += ': ';\n        message += error.message || error;\n      }\n\n      currentRunnable().addExpectationResult(false, {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        message: message\n      });\n    };\nBecomes\n    this.fail = function(error) {\n      var message = 'Failed';\n      if (error) {\n        message += ': ';\n        message += error.message || error;\n      }\n\n      currentRunnable().addExpectationResult(false, {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        message: message,\n        // pass the error object through if it has a stack\n        error: error.stack ? error : null\n      });\n    };\nThe reason for this change is that I want to report exceptions in promises chains:\ndescribe(\"async test\", function() {\n  it(\"returns data\",function(done) {\n    somethingThatReturnsAPromiseButCouldError().then(function(data) {\n      expect(data).toBeTruthy();\n      done();\n    },function(error) {\n      fail(error); // stack trace will be here, not inside somethingThatReturnsAPromiseButCouldError()\n      done();\n    });\n  });\n});", "createdAt": "2015-01-19T01:32:33Z", "updatedAt": "2015-01-19T16:46:12Z", "closedAt": "2015-01-19T16:46:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "william-tran", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "william-tran", "company": "@autonomic-ai"}], "comments_count": 1, "comments_data": [{"authorLogin": "william-tran", "authorAssociation": "NONE", "createdAt": "2015-01-19T16:46:12Z", "contents": "Ooops, sorry guys, I was looking at the released 2.1.3, looks like a duplicate of #734 and you've taken care of this in master. thanks! 3a93f84", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 751, "url": "https://github.com/jasmine/jasmine/issues/751", "title": "SpiderMonkey 24 compatibility", "contents": "I'm working on a Jasmine runner for the GJS interpreter (whose engine is SpiderMonkey 24) and when it loads the Jasmine core it complains about a few things:\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 481]: anonymous function does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 638]: anonymous function does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 742]: anonymous function does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 995]: function Clock does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 1109]: function DelayedFunctionScheduler does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 1387]: function buildExpectationResult does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 1474]: function FakeDate does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 1437]: function MockDate does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 1686]: anonymous function does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 1764]: function ReportDispatcher does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 2280]: function asymmetricMatch does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 2299]: function eq does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 2223]: anonymous function does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 2760]: function toThrowError does not always return a value\nGjs-Message: JS WARNING: [/Users/fliep/gtk/inst/share/jasmine-gjs/jasmine.js 72]: assignment to undeclared variable getJasmineRequireObj\n\nAt several places in Jasmine there's a return statement followed by more code, which is mainly what it's complaining about. The code following the return seems to be just functions, so it's harmless, but it would be nice to get rid of the complaints.\nThe final line is complaining about a variable that isn't declared with var in requireCore.js.\nIn addition, Jasmine's timers don't work as expected because jasmineGlobal doesn't get set properly in getJasmineRequireObj(). I think for SpiderMonkey the code should check for the existence of window just like it does for global in node.js.\nI'll prepare a pull request for both of these compatibility problems.", "createdAt": "2015-01-20T06:10:31Z", "updatedAt": "2015-02-03T03:32:50Z", "closedAt": "2015-02-03T03:32:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "ptomato", "company": "@endlessm"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-23T21:41:01Z", "contents": "The offending return statements are intended to be before some of the supporting functions to more easily delineate those supporting functions from the overall algorithm.\nFor the global object, I think we prefer to get it by passing in the implicit this to the function instead of looking for window specifically. If this isn't working in SpiderMonkey, I think I'd rather see a fallback to window if we couldn't find a global to always setting the global to window if window is defined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-24T02:36:06Z", "contents": "In that case, would you consider moving the supporting functions to come before the algorithm? I think what SpiderMonkey is complaining about is that there is code after an unconditional return.\nFor the global object, the problem is that this is set to the module object rather than the global object when you import the Jasmine module. So Jasmine thinks it gets a global object, but it's not the global object. (This is probably actually the fault of GJS's import machinery, rather than SpiderMonkey.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-24T02:58:59Z", "contents": "The style of private functions is a conscious choice and we want to keep it.\nWe're happy to take a pull request that helps  us truly get the global object in a case for SpiderMonkey.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-25T07:57:13Z", "contents": "Thanks for the feedback. I've split the pull request into two pull requests:\n\n#752 fixes two of the SpiderMonkey linting complaints - I believe that these two at least can be fixed without interfering with Jasmine's coding style. (I'll be patching jasmine.js in my Jasmine for GJS runner to silence the warnings anyway, but I'd prefer to diverge as little as possible from upstream Jasmine.)\nOn reflection I think the global object problem is specific to the GJS interpreter and not its SpiderMonkey engine. #757 sets the global object to window in a special case which I'm pretty sure is GJS-specific.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-30T21:03:53Z", "contents": "Given that these pull requests have been merged, can we close this issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-03T03:32:50Z", "contents": "Thanks! I think it's fixed for me.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 753, "url": "https://github.com/jasmine/jasmine/issues/753", "title": "Reporter should receive number of specs to be run", "contents": "Reporters' jasmineStarted() method is called with an object that looks like this:\n{\n     totalSpecsDefined: 200\n}\nHowever, this isn't an accurate number of specs to be run. For example, if there are focused specs, then there are far fewer run than are reported as defined.\nIt would be convenient for this object to report the number of specs that are expected to be run - so that a TAP reporter could output a test plan at the beginning of the suite, for example.\nAn alternative would be to call specStarted() and specDone() for each unfocused spec so the reporter would know the specs were there, but got skipped.", "createdAt": "2015-01-20T06:50:01Z", "updatedAt": "2015-03-05T06:09:16Z", "closedAt": "2015-03-05T06:09:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "ptomato", "company": "@endlessm"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-23T20:55:27Z", "contents": "totalSpecsDefined isn't meant to be a count of how many specs will be run. As its name implies, it is simply the count of specs (it, xit, fit calls) that were loaded.\nJasmine doesn't know exactly how many specs are going to be run because there is more than one way to make a spec not run. If an xdescribe or fdescribe is used, the specs under it rely on the suite object knowing whether its child specs should be run, so they aren't marked in any way.\nGiven this, I'm not totally sure that we want/need a count of expected specs to be run, but if you want to give it a try and submit a pull request, I'd be happy to review it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T22:54:23Z", "contents": "As of 715de7a on master, every defined spec will report start and complete to the reporter regardless of whether they will run. This is a fix for #774, but it sounds like it also fixes this issue as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-05T06:09:16Z", "contents": "Yes, that does indeed fix this issue. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 754, "url": "https://github.com/jasmine/jasmine/issues/754", "title": "Programmatically adding tests?", "contents": "Hi,\nJust run into a bit of an issue and can't see a way to implement it using jasmine at the moment... was wondering if you could help.\nI have a master detail kindof setup in an webapp I'm working on.  It consists of a list of Fields, when you select one you then see a list of options.  I'd like to write a check that for every field the list of options is sorted alphabetically.  I'd also not like to specify all the Fields for two reasons - there is quite a few of them; and that I would like this test to apply to future fields without having to do more work.\nSo I'd like to generate some tests from a list of these Fields dynamically.  I thought this would be easy in jasmine because it, describe etc are just functions... however the snag here seems to be that I need to load the list of fields asynchronously first.\nIn a describe I can't provide a done function to make it hang around for the list to come back and in a beforeEach/beforeAll calling it doesnt seem to work... it also wont be called at all unless I already have at least one it.\nIs there anyway I can achieve this at the moment?  I'd guess so but it feels like maybe not.", "createdAt": "2015-01-20T10:21:36Z", "updatedAt": "2015-01-21T09:17:05Z", "closedAt": "2015-01-20T17:31:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JonnyRa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JonnyRa", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2015-01-20T12:52:41Z", "contents": "My workaround is currently to use one test with loads of asserts in conjunction with an asyncronous runner class which I add steps to in a loop and which only calls done when all the steps are complete.\nI'm basically delineating the different tests in the output by doing this\nexpect(fieldName).toEqual('to be sorted');\n\nIts a bit horrible but could be worse - at least you get to see all of the failures and not just the first because of how you've implemented expect.\nIt feels like you should be able to do this but after having a look at the code it looks like suites aren't expecting to be modified during execution and I haven't poked around enough to see what would need to change to allow that.  It looked like maybe queueRunner.run might be the problem - its holding onto the list length as calculated at the start of the execution but I haven't verified that", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-20T17:31:28Z", "contents": "Jasmine doesn't support adding specs once the suite has started running. Usually, when I've needed to do this, I've been able to know the list of options ahead of time and just loop through them to make the it calls. e.g.\n// I just wrote this, it may not work right.\n['foo', 'bar'].forEach(function(val) {\n  it(\"should \" + val, function() {\n    expect(val).toEqual('foo');\n  });\n});\nIf your cases are coming from a server, you can either try making a synchronous ajax call so the suite won't finish loading until those specs get defined, or just duplicate the cases in your jasmine specs and do the loop inline.\nDynamically changing the suite once the run is started isn't really something we want jasmine to support. At the very least, it would screw up reporters, because we wouldn't know how many specs we were going to run. I'm going to close this.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JonnyRa", "authorAssociation": "NONE", "createdAt": "2015-01-21T09:17:04Z", "contents": "Fair enough.  Yeah I can see this might be a pretty big change + thinking about it I'm not sure I've ever used a testing library that could handle this.\nI'm reasonably happy with the solution I'm already using", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 755, "url": "https://github.com/jasmine/jasmine/issues/755", "title": "Ubuntu: `bundle` fails to complete; error while installing the ffi gem", "contents": "Maybe this should go in the CONTRIBUTING file:\nwhen running the bundle command on Ubuntu (version: 14.04.1 LTS) it crashes and fails to install the ffi gem because it 'failed to build native gem extension'.\nA little google action located this for another project and another Linux distro: wpscanteam/wpscan#92\nwhich for Ubuntu translates to this:\n# apt-get install gcc ruby ruby-dev libxml2 libxml2-dev  libxslt1-dev\n# gem install ffi\nwhich should now build the required ffi gem without throwing any more errors.\nThen rerun the bundle command as described in the CONTRIBUTING.md document.", "createdAt": "2015-01-20T23:19:44Z", "updatedAt": "2015-01-21T20:55:27Z", "closedAt": "2015-01-21T20:55:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "GerHobbelt", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "GerHobbelt", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 756, "url": "https://github.com/jasmine/jasmine/issues/756", "title": "Is it possible to use 'beforeEach(module('app'))' code on separated external file?", "contents": "For example:\nTesting AngularJS code with the Jasmine.\napp_helper.js\n   beforeEach(module('adminApp'));\n\napp_test_controller_spec.js.coffee\ndescribe 'TestController', ->\n    scope = $location = controller = undefined\n    beforeEach inject ($rootScope, $controller, _$location_) ->\n        $location = _$location_\n        scope = $rootScope.$new()\n        controller = $controller 'TestController', {\n            '$scope': scope\n        }\n\n    it 'should success', ->\n        expect(2).toEqual(3)\n\nCurrently this code not works.\nIs another way to use 'beforeEach(module('app'))' code on separated external file?", "createdAt": "2015-01-25T02:35:11Z", "updatedAt": "2015-01-26T19:21:38Z", "closedAt": "2015-01-26T19:21:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joowh85", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joowh85", "company": "Bshop Factory"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-26T19:21:38Z", "contents": "This looks like more of a \"how to test?\" question than an issue with jasmine itself. Please ask the group at jasmine-js@googlegroups.com.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 758, "url": "https://github.com/jasmine/jasmine/issues/758", "title": "beforeAll gets called multiple times", "contents": "Hi,\nI am using Jasmine2 with protractor.\nWhen I define a beforeAll like this:\nvar beforeAllFunction = function(done){\n    console.log('before');\n    done();\n};\n\nfdescribe('test', function () {\n\n    beforeAll(beforeAllFunction);\n\n    it(\"this\", function (done) {\n        console.log('test');\n        done();\n    });\n});\n\nI get a log like this\nbefore\nbefore\ntest\n\nmy tests rely on beforeAll getting called ONCE and not more. Right now I have a  workaround, but this seems strange.", "createdAt": "2015-01-27T11:23:28Z", "updatedAt": "2015-01-27T16:27:08Z", "closedAt": "2015-01-27T13:19:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "amavisca", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2015-01-27T13:17:55Z", "contents": "This was fixed a few days ago. Here's a relevant issue thread: #732\nAnd the commit:\nebbaab4\nIt's not in an npm release yet though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-01-27T16:27:08Z", "contents": "Note that this duplication is only happening because you are using fdescribe. If you un-focus the suite, it should work as expected.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 759, "url": "https://github.com/jasmine/jasmine/issues/759", "title": "Update to Jasmine Test Framework (JasmineTest) NuGet package", "contents": "Currently Nuget only shows JasmineTest version 2.0.0 whereas the Jasmine Github shows 2.1.3 released on December 4th 2014. Please update the NuGet version of JasmineTest to the latest version along with its TypeDefinitions (DefinitelyTyped/DefinitelyTyped#3522).\nThanks", "createdAt": "2015-01-27T21:14:39Z", "updatedAt": "2015-01-27T21:32:36Z", "closedAt": "2015-01-27T21:32:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "abulhasanlakhani", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "abulhasanlakhani", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-27T21:32:36Z", "contents": "The jasmine core team doesn't maintain a NuGet package for jasmine. You'll want to find out who has released that package and ask them to release a new version.\nClosing this. Thanks for using jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 760, "url": "https://github.com/jasmine/jasmine/issues/760", "title": "Run `afterAll` and `afterEach` even after spec failure", "contents": "I think the afterAll and afterEach should run even if the spec fails. Sometimes its needed to because we might be doing some clean up work inside after and afterEach functions.\nExample would be:\nLet say I am testing a module which copies a directory recursively into a different directory. Now after the test is over I want to delete the newly created a directory as a cleanup.\nIts like in the database world, when you test you manipulate the data inside the tables but when your test finishes you always rollback the changes regardless of failure or success.", "createdAt": "2015-01-27T22:25:54Z", "updatedAt": "2015-01-28T00:06:04Z", "closedAt": "2015-01-28T00:06:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gyandeeps", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gyandeeps", "company": "Cerner"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-27T23:49:41Z", "contents": "This should be the current functionality. What version of jasmine are you using? How are you running jasmine? Do you have an example spec/suite that demonstrates the problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gyandeeps", "authorAssociation": "NONE", "createdAt": "2015-01-28T00:06:04Z", "contents": "Not able to reproduce now. Will reopen the issue if see that happening again.\nSorry about that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 761, "url": "https://github.com/jasmine/jasmine/issues/761", "title": "toEqual comparison bug", "contents": "Expected\n[[{\n    id_voucher: 1,\n    affiliate_mode: 0,\n    exclusive_voucher: 1,\n    editors_pick: 1,\n    caption_1: [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined],\n    end_time: '2015-12-17 03:24:00',\n    image: '/images/n/notebooksbilliger-de-gutscheincode_logo_2.png',\n    cssClass: ['code', 'exclusive', 'editor_pick', 'custom-text'],\n    captionCssClass: ['small'],\n    specialCssClass: ['special', 'editor-pick'],\n    verifiedDiff: false,\n    isAffiliate: true,\n    isExclusive: true,\n    isEditor: true,\n    specialTextKey: false,\n    expireDiff: 322\n}, {\n    id_voucher: 1,\n    affiliate_mode: 0,\n    exclusive_voucher: 1,\n    editors_pick: 1,\n    caption_1: [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined],\n    end_time: '2015-12-17 03:24:00',\n    image: '/images/n/notebooksbilliger-de-gutscheincode_logo_2.png',\n    cssClass: ['code', 'exclusive', 'editor_pick', 'custom-text'],\n    captionCssClass: ['small'],\n    specialCssClass: ['special', 'editor-pick'],\n    verifiedDiff: false,\n    isAffiliate: true,\n    isExclusive: true,\n    isEditor: true,\n    specialTextKey: false,\n    expireDiff: 322\n}]]\nto\nequal\n[[{\n    id_voucher: 1,\n    affiliate_mode: 0,\n    exclusive_voucher: 1,\n    editors_pick: 1,\n    caption_1: [undefined, undefined, undefined, undefined, undefined, undefined, undefined],\n    end_time: '2015-12-17 03:24:00',\n    image: '/images/n/notebooksbilliger-de-gutscheincode_logo_2.png',\n    cssClass: ['code', 'exclusive', 'editor_pick', 'custom-text'],\n    captionCssClass: ['small'],\n    specialCssClass: ['special', 'editor-pick'],\n    verifiedDiff: false,\n    isAffiliate: true,\n    isExclusive: true,\n    isEditor: true,\n    specialTextKey: false,\n    expireDiff: 322\n}, {\n    id_voucher: 1,\n    affiliate_mode: 0,\n    exclusive_voucher: 1,\n    editors_pick: 1,\n    caption_1: [undefined, undefined, undefined, undefined, undefined, undefined, undefined],\n    end_time: '2015-12-17 03:24:00',\n    image: '/images/n/notebooksbilliger-de-gutscheincode_logo_2.png',\n    cssClass: ['code', 'exclusive', 'editor_pick', 'custom-text'],\n    captionCssClass: ['small'],\n    specialCssClass: ['special', 'editor-pick'],\n    verifiedDiff: false,\n    isAffiliate: true,\n    isExclusive: true,\n    isEditor: true,\n    specialTextKey: false,\n    expireDiff: 322\n}]]\nIts failing i wrote comparison algorithm which is solving problem:\nfunction compare(a, b) {\n    if (typeof a === 'string') {\n        return a === b;\n    } else if (typeof a === 'number') {\n        if (isNaN(a) || isNaN(b)) {\n            return isNaN(a) === isNaN(b);\n        }\n        return a === b;\n    } else if (typeof a === 'boolean') {\n        return a === b;\n    } else if (isDate(a) && isDate(b)) {\n        return a.getTime() === b.getTime();\n    } else if (isRegExp(a) && isRegExp(b)) {\n        return a.source === b.source;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n        // check references first\n        if (a === b) {\n            return true;\n        }\n        return a.every(function (item, index) {\n            try {\n                return compare(item, b[index]);\n            } catch (e) {\n                console.log('recursion problem', e);\n                return false;\n            }\n        });\n    } else if (typeof a === 'object' && typeof b === 'object') {\n        var equal = [];\n        // check references first\n        if (a === b) {\n            return true;\n        }\n        try {\n            for (var key in a) {\n                equal.push(compare(a[key], b[key]));\n            }\n        } catch (e) {\n            console.log('recursion problem', e);\n            equal.push(false);\n        }\n        return equal.every(function (item) {\n            return item === true;\n        });\n        /// compare undefined and nulls and nans\n    } else if (a === b) {\n        return true;\n    }\n\n    return false;\n\n\n\n\n    function isDate(value) {\n        return Object.prototype.toString.call(value) === '[object Date]';\n    }\n\n    function isRegExp(value) {\n        return Object.prototype.toString.call(value) === '[object RegExp]';\n    }\n}", "createdAt": "2015-01-29T10:59:20Z", "updatedAt": "2015-01-29T17:20:23Z", "closedAt": "2015-01-29T17:20:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-29T17:20:23Z", "contents": "It looks to me like your caption_1 arrays are of different length and thus should not be equal. It's only because all of your values are undefined that your change to comparison works.\nThis is not a change we want in jasmine because it breaks the concept of equality.\n[undefined] should not equal []\nThanks for using jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 762, "url": "https://github.com/jasmine/jasmine/issues/762", "title": "why this project named jasmine?", "contents": "why this project named jasmine?", "createdAt": "2015-01-31T12:54:37Z", "updatedAt": "2015-01-31T23:34:32Z", "closedAt": "2015-01-31T23:34:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kimmking", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kimmking", "company": "http://kimmking.github.io"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-01-31T23:34:32Z", "contents": "@infews did a bit of explanation in his blog post about the 2.0 release.\nIn general we like to keep github issues as actual issues with jasmine itself and not questions about the framework. In the future please take questions like this or about how to test something to the jasmine-js@googlegroups.com mailing list.\nThanks for using jasmine. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 765, "url": "https://github.com/jasmine/jasmine/issues/765", "title": "Jasmine 2.2 regression - Arrays from different frames are no longer equivalent", "contents": "With changes to the eq function in jasmine/src/core/matchers/matchersUtil.js since 2.1, arrays from different frames are no longer equivalent.", "createdAt": "2015-02-03T19:46:39Z", "updatedAt": "2015-02-04T17:39:27Z", "closedAt": "2015-02-04T17:39:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-03T19:49:00Z", "contents": "What do you mean by \"different frames\"? Can you give us a failing test?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-02-03T19:50:27Z", "contents": "Example:\nvar vm = require('vm');\n\nfunction arrayFromNewFrame() {\n  return vm.runInNewContext('[1, 2, 3, 4]');\n}\n\ndescribe('arrays', function() {\n  it('should match', function() {\n    expect(arrayFromNewFrame()).toEqual([1, 2, 3, 4]);\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-02-03T19:50:52Z", "contents": "The error message is:\nFailures:\n1) arrays should match\n  Message:\n    Expected [ 1, 2, 3, 4 ] to equal [ 1, 2, 3, 4 ].\n  Stack:\n    Error: Expected [ 1, 2, 3, 4 ] to equal [ 1, 2, 3, 4 ].\n        at Object.<anonymous> (/usr/local/google/home/ralphj/jasminetest/test.js:9:33)\n\n1 spec, 1 failure\nFinished in 0.02 seconds", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-03T19:56:03Z", "contents": "To take vm out of this for now:\ndescribe('arrays', function() {\n  it('should match', function() {\n    var a = [1,2,3,4];\n\n    a.foobar = \"custom property\";\n\n    expect(a).not.toEqual([1, 2, 3, 4]);\n  });\n});\nWe thinks this should be a green test.\nDoes vm add custom properties?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-02-03T21:12:25Z", "contents": "vm does not add custom properties - the problem is that the constructors do not match because they are from different contexts. This passes:\nvar vm = require('vm');\n\nfunction arrayFromNewFrame() {\n  return vm.runInNewContext('[1, 2, 3, 4]');\n}\n\ndescribe('arrays', function() {\n  it('should match', function() {\n    var b = arrayFromNewFrame();\n    var a = [1, 2, 3, 4];\n    expect(b.constructor).not.toEqual(a.constructor)\n    // expect(b).toEqual([1, 2, 3, 4]);\n  });\n});\nThe change which causes this regression was a84202a\nwhich means that now this check is returning false the two arrays.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-02-03T21:26:27Z", "contents": "Note that this works for objects, but not arrays:\nfunction objectFromNewFrame() {\n  var sandbox = {\n    o: null\n  };\n  vm.runInNewContext('o = {a: 1, b: 2}', sandbox);\n\n  return sandbox.o;\n}\n\ndescribe('objects', function() {\n  // PASSES\n  it('should match', function() {\n    expect(objectFromNewFrame()).toEqual({a: 1, b: 2});\n  });\n});\n\nfunction arrayFromNewFrame() {\n  var sandbox = {\n    o: null\n  };\n  vm.runInNewContext('o = [1, 2]', sandbox);\n\n  return sandbox.o;\n}\n\ndescribe('arrays', function() {\n  // FAILS\n  it('should match', function() {\n    expect(arrayFromNewFrame()).toEqual([1, 2]);\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-02-03T21:53:13Z", "contents": "Here is a potential way to fix, inspired by Underscore's toEqual method: #767", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 766, "url": "https://github.com/jasmine/jasmine/issues/766", "title": "Pretty Printer should be updated to reflect changes in Array comparison.", "contents": "While toEqual() has been updated to compare custom properties on arrays. Pretty printer is only looping from 0 to length, this is bound to cause confusion, as you can have unequal values display exactly the same.", "createdAt": "2015-02-03T21:03:16Z", "updatedAt": "2015-02-20T20:38:08Z", "closedAt": "2015-02-04T19:05:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamestalmage", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jamestalmage", "company": null}, {"login": "jwngr", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "danilanna", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "jwngr", "authorAssociation": "NONE", "createdAt": "2015-02-03T21:15:08Z", "contents": "Here is an example of this:\nit('repro', function() {\n  var a = [1,2,3];\n  var b = [1,2,3];\n  a.$id = 'foo';\n  expect(a).toEqual(b);\n});\n\nThe test passed in Jasmine 2.1.3 but now fails in Jasmine 2.2.0 with this confusing error message:\nrepro\n  Expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ].\n\nFrom the 2.2.0 changelog, it appears the change from passing to failing for this test was intentional. However, the error message should be improved to reduce confusion.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-03T22:43:56Z", "contents": "I agree that the message isn't clear. How would you expect array properties to be pretty printed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamestalmage", "authorAssociation": "NONE", "createdAt": "2015-02-03T23:12:50Z", "contents": "console.log() in Chrome Node prints it like this:\n[ 1, 2, 3, 4, '$id': 'foo' ]\n\nI think that is a good choice.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-04T18:03:27Z", "contents": "Sounds good. We've made a story for it here: https://www.pivotaltracker.com/story/show/87644044", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jwngr", "authorAssociation": "NONE", "createdAt": "2015-02-04T19:08:54Z", "contents": "Awesome, thanks for the super quick turnaround here!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danilanna", "authorAssociation": "NONE", "createdAt": "2015-02-20T20:38:08Z", "contents": "Cool!! Thanks for the help!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 769, "url": "https://github.com/jasmine/jasmine/issues/769", "title": "v2.2 jasmine.objectContaining doesn't work with Object.defineProperty", "contents": "I'm using TypeScript to create classes. The properties are added with Object.defineProperty. When I update from Jasmine 2.0 to 2.2 my test started failing. This same test passes in v2.0.\nHere's my test:\nvar myObject = (function () {\n            function myObject(id){\n                this.a = ['a','b','c'];\n                this.empty = [];\n                this._id = id;\n                this.update = function(differentT){\n                    // pretend this is a real function to spyOn\n\n                }\n            };\n            return myObject;\n         })();\n        Object.defineProperty(myObject.prototype, \"id\", {\n            get: function () {\n                return this._id;\n            },\n            enumerable: true,\n            configurable: true\n        });\ndescribe(\"Object containing and toHaveBeenCalledWith\", function() {\n\n    it('objectContains matcher with property', function(){\n        var t2 = new myObject(444);\n        spyOn(test, 'update');\n        test.update(t2);\n        expect(test.update).toHaveBeenCalledWith(jasmine.objectContaining({ id: 444 }));\n    });\n});\nIs there a workaround or can the equality be improved?\nObject.prototype.hasOwnProperty.call(other, property) is false in the expect above\nExtra Note: I had about 7 broken tests (of 900) after updating.\n\nexpect(myObject.array).toEqual([]) from Knockout observable arrays using the ES5 plugin. had to be changed to myObject.array.length).toBe(0)\nor comparing arrays values to splitting it to:\nexpect(acceptedTypes[0]).toBe(accepts[0]);\nexpect(acceptedTypes[1]).toBe(accepts[1]);\nexpect(acceptedTypes[2]).toBe(accepts[2]);\n\nI'm not sure how I feel about those changes breaking my tests.", "createdAt": "2015-02-04T22:57:16Z", "updatedAt": "2016-07-26T16:56:45Z", "closedAt": "2016-07-26T16:56:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "aligneddev", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-05T01:22:15Z", "contents": "It appears that this test is now failing because the property is defined on the object's prototype. Either way, they should probably still match, so we will work on a fix.\nFor the array equality expectations, do the arrays have properties defined on them? Jasmine 2.2 compares array properties when checking equality. There was an issue with printing array equality failure messages in 2.2, which should be fixed on master.\nIt might make sense for there to be a matcher that only compares indexed array values, though I'm not sure exactly what that would look like. Would you find this useful?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-05T17:53:00Z", "contents": "Here is more information and some tests to duplicate the array issues I'm seeing.\nThe Chrome debugger shows it as Array[0] with a lot of extra functions. model.saleList instanceof Array is true.\n.\nTS example:\nclass Model {\n  public saleList: Sale[];\n  constructor(saleList: Sale[] = []){\n   this.saleList = saleList;\n   ko.track(this, ['saleList']);\n  }\n}\n// output JS\nvar Slot = (function () {\n        function Slot(saleList) {\n            var _this = this;\n            if (saleList === void 0) { saleList = []; }\n            this.saleList = saleList;\n            ko.track(this, [\n                'saleList',\n            ]);\n....\nHeres some examples of the equality for arrays I ran into with Knockout. You'll need Jasmine 2.2, Knockout 3.2.0 and Knockout ES-5\nvar myObject = (function () {\n    function myObject(id, list){\n        this.a = ['a','b','c'];\n        this.empty = [];\n        this._id = id;\n        this.update = function(differentT){\n            // pretend this is a real function to spyOn\n\n        }\n        if(list === void 0) { list = [] };\n        this.list = list;\n        ko.track(this, ['list']);\n    };\n    return myObject;\n })();\nObject.defineProperty(myObject.prototype, \"id\", {\n    get: function () {\n        return this._id;\n    },\n    enumerable: true,\n    configurable: true\n});\ndescribe(\"Equals\", function() {\n    describe('toEqual and toBe', function() {\n         var test;\n         beforeEach(function(){         \n            var l = [1,2,3];\n            test = new myObject(133, l);\n         });\n         /*\n        it('passes if arrays are equal', function() {\n            var arr = [1, 2, 3];\n            expect(arr).toEqual([1, 2, 3]);\n        });\n\n        it('passes if arrays are equal 2', function() {\n            var arr = ['a', 'b', 'c'];\n            var exp = ['a', 'b', 'c'];\n            expect(arr).toEqual(exp);\n        });\n\n        it('passes if array from object is same', function() {\n            var exp = ['a', 'b', 'c'];\n            expect(test.a).toEqual(exp);\n        });\n\n        it('empty array not toEqual', function() {\n            expect(test.empty).toEqual([]);\n        });\n        it('empty array toBe', function() {\n            expect(test.empty).not.toBe([]);\n        });\n        it('[] toEqual', function() {\n            expect([]).toEqual([]);\n        });\n        it('[] not toBe', function() {\n            expect([]).not.toBe([]);\n        });\n\n        it('[] not toBe', function() {\n            expect([]).not.toBe([]);\n        });*/\n\n        it('objectContains matcher with property', function(){\n            var t2 = new myObject(444);\n            spyOn(test, 'update');\n            test.update(t2);\n            expect(test.update).toHaveBeenCalledWith(jasmine.objectContaining({ id: 444 }));\n        });\n\n        it('ES5 Knockout array should still be equal []', function(){\n            expect(test.list).toBe([1,2,3]);\n        });\n\n        it('ES5 Knockout array empty is [] fails', function(){\n            // this passed in v2.0\n            test = new myObject(133);\n            expect(test.list).toEqual([]);\n        });\n        it('ES5 Knockout array now with 2.2 we have test if initialized to []', function(){\n            test = new myObject(133);\n            expect(test.list.length).toBe(0);\n        });\n    });\n});\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-05T23:19:54Z", "contents": "I just pushed a fix for the prototype properties.\nThe array tests are failing because they have additional properties. For example\nit('ES5 Knockout array should still be equal []', function(){\n  expect(test.list).toBe([1,2,3]);\n});\nnow fails with the message Expected [ 1, 2, 3, pop: Function, push: Function, reverse: Function, shift: Function, sort: Function, splice: Function, unshift: Function ] to be [ 1, 2, 3 ].\nIt seem that some Jasmine users care about non-numerical array properties and other don't. I think it makes sense to cater to both groups, but I'm not sure exactly what the matchers would look like. Definitely open to suggestions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-06T14:57:31Z", "contents": "Thanks for the quick responses and code fix. I like the message that comes out now.\nhttp://stackoverflow.com/questions/15717844/jasmine-js-comparing-arrays has a custom matcher to compare the values inside of the array. I don't like the name, tried out toBeSameArrayValues (there's probably a better name). I think the toEqual and toBe would stay the same as you have it and to have a custom matcher in the core for array comparison.\nsomething like (modified from the SO answer):\ntoBeSameArrayValues: function(array) {\n          this.message = function() {\n            return \"Expected \" + JSON.stringify(this.actual) + \" to be array \" + JSON.stringify(array) + \".\";\n          };\n          var arraysAreSame = function(x, y) {\n            debugger;\n            var arraysAreSame = true;\n            if(!x){ return false; }\n            for(var i; i < x.length; i++)\n            {\n                if(x[i] !== y[i])\n                {\n                   arraysAreSame = false;\n                }\n            }\n             return arraysAreSame;\n          };\n          return arraysAreSame(this.actual, array);\n        }\n    });\nit('ES5 Knockout array now with 2.2 we have test if initialized to []', function(){\n    expect(test.list).toBeSameArrayValues([1,2,3]);\n});\nI wasn't able to get the matcher attached, this was the window, so I didn't test this a whole lot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-18T17:08:25Z", "contents": "Just checking in again... We're using the version with the change set and it's working well. I would like to see an array value matcher in there. Did you get a chance to look at it and have some ideas?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-28T00:32:29Z", "contents": "Glad to hear its working!\ntoBeSameArrayValues sounds ok, but I think I might prefer something like toMatchArray for the name.\nWe'd be happy to review a pull request that added a matcher that matched either all of the items in an array in any order or only in a specific order.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-09T20:47:40Z", "contents": "Since I figured out pull requests, I'll try and get toMatchArray added in at some point (hopefully by the end of June EDIT: June went by already :-)). I haven't looked at the #817 to see if that already takes care of this request though.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 771, "url": "https://github.com/jasmine/jasmine/issues/771", "title": "Spy on non\u2013property functions", "contents": "Is there a way to spy on a function which is not a property of an object? I'm thinking something like\nvar foo = function() {\n  // awesomize something\n}\nvar spy = spyOn(foo).and.callThrough()", "createdAt": "2015-02-05T17:45:15Z", "updatedAt": "2015-02-06T17:12:49Z", "closedAt": "2015-02-06T17:12:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mightyiam", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mightyiam", "company": null}, {"login": "gyandeeps", "company": "Cerner"}, {"login": "joshuacc", "company": "Hobsons"}], "comments_count": 10, "comments_data": [{"authorLogin": "gyandeeps", "authorAssociation": "NONE", "createdAt": "2015-02-05T19:32:35Z", "contents": "I also want to know the answer to this question.\nThere is a way to do this in sinonJs.\nhttp://sinonjs.org/docs/#spies", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2015-02-05T19:49:17Z", "contents": "@mightyiam @gyandeeps Are you looking for jasmine.createSpy?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-02-05T20:04:21Z", "contents": "@joshuacc Thank you. I don't think so because it has no implementation behind it.\nI'm looking to wrap my existing function. jasmine.createSpy can't seem to do that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2015-02-05T20:37:17Z", "contents": "@mightyiam Ah. I see. You can do this with and.callFake like so:\nvar spy = jasmine.createSpy().and.callFake(function () {\n  console.log(\"I'm being called!\");\n});\n\nspy();\n// => \"I'm being called!\"\nThe name seems to presume that you're providing a fake function, which might not always be true, but I think it gives the behavior you need.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gyandeeps", "authorAssociation": "NONE", "createdAt": "2015-02-05T21:13:23Z", "contents": "Lets say I am trying to test add function in this code:\nfunction add(a, b){\n    if(validParameters(a, b)){\n        return a + b;\n    }\n    else{\n        return null;\n    }\n}\n\nfunction validParameters(x, y){\n    //do something\n}\nSo when I am testing add function, I want to fake validParameters function and return different values to test my add function behavior.\nI think that's what @mightyiam wants to know.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshuacc", "authorAssociation": "NONE", "createdAt": "2015-02-05T21:26:54Z", "contents": "@gyandeeps Hmm. You can do that if validParameters is in the global scope.\nspyOn(window, \"validParameters\").and.callThrough()\nHowever, if validParameters is in a local scope, that is impossible. JS doesn't provide a way to access local scopes from the outside.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gyandeeps", "authorAssociation": "NONE", "createdAt": "2015-02-05T21:29:20Z", "contents": "hmm... I was also thinking about the same.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-02-06T09:55:20Z", "contents": "I would like to create a spy by providing an existing function and having a wrapper spy returned.\nSo I think that\nvar myFunc = function(myArg) {\n  myArg++\n}\nvar spiedOnMyFunc = jasmine.createSpy().and.callFake(myFunc)\nvar i = 0\nspiedOnMyFunc(i)\nexpect(spiedOnMyFunc).toHaveBeenCalled()\nexpect(i).toEqual(1)\nWill work, right?\nThank you, @joshuacc and @gyandeeps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gyandeeps", "authorAssociation": "NONE", "createdAt": "2015-02-06T16:31:11Z", "contents": "The value would be passed by value so expect(i).toEqual(1) would fail.\nhttp://jsfiddle.net/461zfss5/1/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mightyiam", "authorAssociation": "NONE", "createdAt": "2015-02-06T17:12:39Z", "contents": "Oh, excuse me.\nvar i = 0\nvar myFunc = function(myArg) {\n  i = myArg\n}\nvar spiedOnMyFunc = jasmine.createSpy().and.callFake(myFunc)\nspiedOnMyFunc(1)\nexpect(spiedOnMyFunc).toHaveBeenCalled()\nexpect(i).toEqual(1)\nUpdated the fiddle.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 773, "url": "https://github.com/jasmine/jasmine/issues/773", "title": "beforeAll and afterAll don't play well with fdescribe", "contents": "This test from the docs fails when run in a fdescribe block (jasmine 2.2.0):\ndescribe(\"A spec using beforeAll and afterAll\", function() {\n  var foo;\n\n  beforeAll(function() {\n    foo = 1;\n  });\n\n  afterAll(function() {\n    foo = 0;\n  });\n\n  it(\"sets the initial value of foo before specs run\", function() {\n    expect(foo).toEqual(1);\n    foo += 1;\n  });\n\n  it(\"does not reset foo between specs\", function() {\n    expect(foo).toEqual(2);\n  });\n});", "createdAt": "2015-02-09T09:09:10Z", "updatedAt": "2015-03-02T19:43:17Z", "closedAt": "2015-03-02T19:43:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mvcatsifma", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mvcatsifma", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-09T18:02:41Z", "contents": "This is the current functionality (see #732 (comment) for more discussion). We're investigating a better way to solve this so beforeAll and fdescribe behave as users expect.\nAlso see the tracker story.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 774, "url": "https://github.com/jasmine/jasmine/issues/774", "title": "Specs inside xdescribe are not reported at all", "contents": "See http://jasmine.github.io/2.2/introduction.html: xdescribe \"A spec\" contains a spec \"is just a function, so it can contain any code\". This nested spec is completely ignored in Jasmine results:\n\nnested \"it\" is counted in the total number of tests, but appears neither in executed nor in skipped tests, so the numbers don't sum up and cause confusion (\"Ran 80 of 81 specs - run all / 80 specs, 0 failures, 3 pending specs\" - so, are there 80 or 81 specs?)\nyou cannot find the \"it\" text nowhere in the report, only the text of \"xdescribe\" can be seen", "createdAt": "2015-02-09T13:35:14Z", "updatedAt": "2015-03-02T19:43:17Z", "closedAt": "2015-03-02T19:43:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Derbeth", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Derbeth", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-11T20:49:18Z", "contents": "I think it probably makes sense that its in an xdescribe should be reported the same as if they were all xits. We'd be happy to review a pull request that implemented this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 778, "url": "https://github.com/jasmine/jasmine/issues/778", "title": "fail() from reporter appears multiple time in results", "contents": "If I fail a suite from reporter like this:\njasmine.getEnv().addReporter({\n    suiteStarted: function(result){\n       fail(new Error('Suite failed'));\n    }\n});\nI get the error message multiple times, once for every spec as if it was a failed expectation contained in every spec.\n1) test1\n  Message:\n    Failed: test error\n  Stack:\n    ...\n  Message:\n    Failed: No element found using locator: ...\n  Stack:\n    ...\n2) test2\n  Message:\n    Failed: test error\n  Stack:\n    ...\n .....\n\nI would expect to see a single error message ?", "createdAt": "2015-02-12T12:31:06Z", "updatedAt": "2015-02-28T00:19:30Z", "closedAt": "2015-02-28T00:19:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "maximnaidenov", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "maximnaidenov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-12T20:41:36Z", "contents": "Why are you failing a suite (or a spec) from the reporter? The reporter shouldn't be modifying the suite it is reporting on, as then it isn't really a reporter anymore but some kind of plugin that messes with your suite.\nAs for what makes this happen... Because you're calling fail in suiteStarted you are not in the context of any individual spec, so any failing expectations are effectively being treated as if you were in a beforeAll for that suite and thus must get passed down to the specs, because code that occurs in the suite before any specs is assumed to be setup code, and if it fails, all of the specs in that suite should fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maximnaidenov", "authorAssociation": "NONE", "createdAt": "2015-02-13T06:57:12Z", "contents": "My purpose is to hide a lot of setup code that prepares our test environment. And if there is a problem in the setup there is no meaning in running any spec so I was hoping that failing the suite before any spec will avoid running them.\nActually throwing an error from the start of the suite (outside of beforeAll... blocks)  achieves exactly this effect - get a single error message and no specs run at all.\nDo you have an advice how to 'hide' some test setup code with the purpose to keep the specs clean and focused ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-28T00:19:30Z", "contents": "It sounds like some combination of #414 and #577 would solve your problem, specifically, stopping further execution of specs once a failure occurs. The error message would still be reported multiple times, because failing in a beforeAll does cause all of the specs that beforeAll encompasses to fail.\nI'm going to close this issue, since it seems to be a dupe of one or both of the other two. If you feel this is not the case, please re-open.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 779, "url": "https://github.com/jasmine/jasmine/issues/779", "title": "$injector not resolving required modules.", "contents": "Hi Team,\nI am writing Unit Test Case using Jasmine for angular, but its not resolving dependency for my module. Could you please let me know if i am doing any thing wrong here.\nhttps://gist.github.com/rahulsahay19/041ca130d187e2a6009e\nThanks,\nRahul", "createdAt": "2015-02-14T13:11:05Z", "updatedAt": "2015-02-14T15:13:30Z", "closedAt": "2015-02-14T15:13:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rahulsahay19", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rahulsahay19", "company": "Kongsberg KDI"}, {"login": "mallowigi", "company": "Dynamic Yield"}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "mallowigi", "authorAssociation": "NONE", "createdAt": "2015-02-14T13:26:01Z", "contents": "You're doing it wrong, but it's not related to Jasmine. Please ask your questions in stackoverflow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rahulsahay19", "authorAssociation": "NONE", "createdAt": "2015-02-14T13:50:28Z", "contents": "Thanks! Posted on Stack Overflow", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rahulsahay19", "authorAssociation": "NONE", "createdAt": "2015-02-14T14:13:22Z", "contents": "solved! my bad.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 780, "url": "https://github.com/jasmine/jasmine/issues/780", "title": "Error: Unexpected request: GET /api/movies", "contents": "Hi,\ni am getting the below error when i am running the following code.\nResult Message:\nError: Unexpected request: GET /api/movies\nCode is updated in the gist link. Just wanted to know whether i am doing anything wrong or something else needs to be configured.\nhttps://gist.github.com/rahulsahay19/041ca130d187e2a6009e\nThanks,\nRahul", "createdAt": "2015-02-14T15:16:43Z", "updatedAt": "2015-02-14T17:29:32Z", "closedAt": "2015-02-14T17:29:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rahulsahay19", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "rahulsahay19", "company": "Kongsberg KDI"}], "comments_count": 1, "comments_data": [{"authorLogin": "rahulsahay19", "authorAssociation": "NONE", "createdAt": "2015-02-14T17:29:32Z", "contents": "Thanks but i am closing this. Its, solved.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 781, "url": "https://github.com/jasmine/jasmine/issues/781", "title": "Calling expect() when no spec is running doesn't generate any visible errors", "contents": "The following code causes Jasmine to throw \"'expect' was used when there was no current spec, this could be because an asynchronous test timed out\". But the suite passes and the error doesn't appear to be logged anywhere:\ndescribe(\"Specs that try to expect things after they're done\", function() {\n    it(\"should cause something to go red\", function (done) {\n        done();\n        expect(true).toBe(false);\n    });\n});\n(Tested on 2.0.2 with the HTML reporter and 2.2.0 with both the HTML reporter and the stock node.js setup.)\nObviously that's a contrived example. But it corresponds to an async testing mistake that I\u2019ve run into a number of times: writing test code that expects something to be async even though all of the async pieces have been replaced with synchronous mocks. It would be a big help if that error caused the suite to fail, even if Jasmine couldn\u2019t pin the failure on the specific spec that caused it.", "createdAt": "2015-02-17T01:08:22Z", "updatedAt": "2016-10-15T00:45:33Z", "closedAt": "2016-10-15T00:45:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sgravrock", "authorAssociation": "MEMBER", "participants_count": 4, "participants_data": [{"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "marshmellow1328", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-17T06:13:52Z", "contents": "As of 2.1 with the changes that were made to support afterAll, I think this should only be possible for specs at or near the end of your suite, where the QueueRunner wouldn't clear stack before you called done and the full suite finished before you managed to call expect. That said, it probably makes sense  now to just tell the topSuite about the expectation failure and let that cause the suite to fail.\nI'd be happy to review a pull request that solves this problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2015-02-23T07:11:25Z", "contents": "2.2.0 correctly associates the failure with the spec that causes it, which gets us at least halfway to a solution. But the spec still appears to pass in most cases because the failure occurs after the reporters' specDone methods are called. I can fix that by modifying QueueRunner to not move onto the next spec until an async spec both returns and calls its done callback. However, that breaks the behavior described in #790 , so I think I'd better hold off on this issue until we figure out what to do about that one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-02T06:10:27Z", "contents": "When you have an async spec, jasmine assumes you know what you're doing and that when you call done you are in fact done with that portion of your spec (see our resposes in #709 & #743).\nHowever, I'd be happy to review a pull request that made sure to associate any expectation failures outside of any suite with the topSuite. This should make sure that the suite at least fails in this situation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marshmellow1328", "authorAssociation": "NONE", "createdAt": "2015-06-23T02:21:23Z", "contents": "Is this sitting waiting for someone to implement a solution?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-02T21:49:52Z", "contents": "@marshmellow1328 that is correct.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-15T00:45:33Z", "contents": "It sounds like this has become a duplicate of #529 in handling global errors for specs (async and otherwise). Closing in favor of the more general issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 782, "url": "https://github.com/jasmine/jasmine/issues/782", "title": "jasmine.clock().install() doesn't throw errors when called multiple times", "contents": "I believe it should, because when I have 2 tests like this:\nit('a', function (done) {\n    jasmine.clock.install(); \n    // ... some async code, calling done() when it's finished ...\n    jasmine.clock.tick(100); // this runs the async code\n    jasmine.clock.uninstall(); // and this doesn't get called (this is a bug in my test)\n}\n\nit('b', function () {\n    jasmine.clock.install(); \n    // ... init theThing - it will be ready in 2 ticks ...\n    jasmine.clock.tick(1);\n    expect(theThing.isReady).toBe(false); // normally this would be ok, nut now will fail because of unnecessary ticks (because of bug in the test a)\n    jasmine.clock.tick(1);\n    expect(theThing.isReady).toBe(true);\n    jasmine.clock.uninstall();\n}\n\nWhat happens here? The test a succeeds and b fails. But b fails only because a didn't clean up after itself! This introduces subtle dependencies between tests and makes tests using Jasmine clock a nightmare to debug in big projects.\nI know that I should call jasmine.clock.install() from beforeEach, and so on, i.e. I know this isn't a good test. But I would expect the testing framework to do some sanity checks like these for me. And I would expect the test framework to do its best to make each test case independent of each other.\nI'm using jasmine 2.2.0.", "createdAt": "2015-02-18T14:31:53Z", "updatedAt": "2015-04-29T18:15:06Z", "closedAt": "2015-03-27T17:15:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mik01aj", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mik01aj", "company": "Google"}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "longmatthewh", "company": "Cengage Learning"}], "comments_count": 12, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-18T16:20:23Z", "contents": "Your example isn't clear. Can you provide a full suite (describe, etc.) that shows the problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-02-18T16:46:53Z", "contents": "var Promise = require('es6-promise').Promise;\n\ndescribe('ModelStore', function () {\n    it('aaaa', function (done) {\n        jasmine.clock().install();\n        new Promise(function(fullfill, reject) {\n            fullfill();\n        }).then(function (thing) {\n            done();\n        });\n        jasmine.clock().tick(100);\n        jasmine.clock().uninstall();\n      });\n});\n\ndescribe('PromiseWrapper', function () {\n    var promise, fulfill;\n\n    beforeEach(function () {\n        jasmine.clock().install();\n        promise = new Promise(function (_fullfill)\u00a0{\n            fulfill = _fullfill; // saving the callback\n        });\n        expect(fulfill).toEqual(jasmine.any(Function));\n    });\n\n    afterEach(function () {\n        jasmine.clock().uninstall();\n    });\n\n    it('should use a predictable promise implementation', function () {\n        var promiseFulfilled = false;\n        promise.then(function() {\n            promiseFulfilled = true;\n        });\n        expect(promiseFulfilled).toBe(false);\n        fulfill();\n        expect(promiseFulfilled).toBe(false);\n        jasmine.clock().tick(1); // Waiting for the callbacks\n        expect(promiseFulfilled).toBe(true);\n    });\n});\n\nResult:\n  ModelStore\n    \u2714 aaaa\n  PromiseWrapper\n    \u2716 should use a predictable promise implementation\n\nRemove the done argument in the first test and the call to done() below and it will work fine.\nActually... I don't know why, but I couldn't create a demonstration of the bug without promises. Maybe it's a weird bug in es6-promise... I have no idea.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-28T00:27:56Z", "contents": "It sounds like this might be related to #792  which has been fixed, but not released. Can you try it again on master and see if the problem is fixed?\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-02T10:56:01Z", "contents": "Still the same behaviour.\nBtw, this might be related to #790.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-03T15:18:07Z", "contents": "Btw, the documentation says:\n\nA spy only exists in the describe or it block it is defined, and will be removed after each spec.\n\nI think it's a great idea. But why doesn't it work the same for clocks? This would be just great and doesn't seem hard to implement. After a spec using jasmine.clock().install() is finished, Jasmine could:\na) check if the clock was uninstalled and throw an error if it wasn't, OR\nb) uninstall the clock silently to prevent test pollution.\nWhat do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T22:07:22Z", "contents": "The clock actually used to automatically uninstall itself at the end of a spec it had been installed in. The functionality changed in 2.0, due to some of the refactoring that was done around how all the functions for a spec are run.\nIn 1.x it was possible to append an afterEach while the spec was running, but this functionality was removed in 2.0. This meant that external plugins that used to do this (like jasmine-ajax) had to be converted to need an explicit uninstall step in an afterEach. We decided it made sense for the clock to not have special behavior, that other plugins couldn't replicate, so this kind of behavior would be consistent.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-05T08:29:05Z", "contents": "I see. But how do the spies do it then?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-05T17:45:38Z", "contents": "Spies are cleaned up at the end of the scope they are declared in because when spying, you can set up arbitrary functionality for an external function. But with the clock, you put it into a specific (mocked) state until you uninstall it.\nWe'd be happy to review a pull request that made the clock throw an error if it was told to install on top of timing functions that weren't the real ones from the global object. This would also cause the clock to throw if installed over itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-16T14:56:08Z", "contents": "Btw... I got an idea for automatic un-binding: what if you would mock the timer using spyOn(window, 'setTimeout').and.callFake(...);? This would unbind the timer when the test is finished.\nSee also http://stackoverflow.com/a/9876915/115493.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "longmatthewh", "authorAssociation": "NONE", "createdAt": "2015-04-29T17:01:21Z", "contents": "I'm using grunt-contrib-jasmine, which recently pulled in jasmine-core 2.0.3, and it appears this change is now breaking my specs with the new exception. I'm using jasmine.clock().install() in the beforeEach() and  jasmine.clock().uninstall() in the afterEach(), and still getting the exception.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "longmatthewh", "authorAssociation": "NONE", "createdAt": "2015-04-29T17:15:37Z", "contents": "I found a spot where I was using install/uninstall in a spec (per documentation this allowed) and moved them to the beforeEach/afterEach and received the exception several more times.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "longmatthewh", "authorAssociation": "NONE", "createdAt": "2015-04-29T18:15:06Z", "contents": "Figured it out...not sure if what we were doing was bad. We were using jasmine.clock().install() and jasmine.clock().uninstall() appropriately. In the spec, we were also spying on window.clearInterval, which through off the new check that was added.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 783, "url": "https://github.com/jasmine/jasmine/issues/783", "title": "beforeAll is not using the clock correctly", "contents": "Hi, I'm using jasmine 2.2.0 and this test fails:\ndescribe('Jasmine Clock', function () {\n    beforeAll(function () {\n        jasmine.clock().install();\n    });\n\n    afterAll(function () {\n        jasmine.clock().uninstall();\n    });\n\n    it('fails', function (done) {\n        jasmine.clock().tick(5 * 1000);\n        expect(true).toBe(true);\n        done();\n    });\n});\nFails saying\n FAILED Before All fails\n Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n    at Object.<anonymous> (beforeall.spec.js:15)\n Skipped 0 tests\n\nHowever using beforeEach instead of All it works fine\ndescribe('Jasmine Clock', function () {\n    beforeEach(function () {\n        jasmine.clock().install();\n    });\n\n    afterEach(function () {\n        jasmine.clock().uninstall();\n    });\n\n    it('fails', function (done) {\n        jasmine.clock().tick(5 * 1000);\n        expect(true).toBe(true);\n        done();\n    });\n});\n SUCCESS Before All fails\n Skipped 0 tests\n\nShouldn't they have the same behaviour?", "createdAt": "2015-02-18T16:52:44Z", "updatedAt": "2015-02-25T02:59:32Z", "closedAt": "2015-02-25T02:59:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piuccio", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "piuccio", "company": "@en-japan-air "}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-25T00:48:20Z", "contents": "This issue appears to be caused by #792. I'll work on a fix.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 785, "url": "https://github.com/jasmine/jasmine/issues/785", "title": "BeforeAll does not run for nested describe blocks.", "contents": "I have several tests with shared setup\ndescribe( \"First\", function(){\n  var foo;\n  beforeAll(function (done){\n    foo = \"Shared Setup\";\n    done();\n  });\n  describe( \"Second\", function(){\n    it(\"Has been setup\", function(done) {\n      expect(foo).toBe(\"SharedSetup\");\n    });\n  });\n // More tests here\n});\nmy beforeAll callback seems to never get called.", "createdAt": "2015-02-20T02:45:26Z", "updatedAt": "2015-03-26T22:03:26Z", "closedAt": "2015-03-26T22:03:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ticviking", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ticviking", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-20T03:07:21Z", "contents": "What version of Jasmine are you running? The following worked for me:\ndescribe( \"First\", function(){\n  var foo;\n  beforeAll(function (done){\n    foo = \"Shared Setup\";\n    done();\n  });\n  describe( \"Second\", function(){\n    it(\"Has been setup\", function() {\n      expect(foo).toBe(\"Shared Setup\");\n    });\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ticviking", "authorAssociation": "NONE", "createdAt": "2015-02-20T21:03:43Z", "contents": "2.1.3, I though I was more up-to-date.\nShould this be fixed on 2.2.* or do I need to update to edge?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-25T01:00:08Z", "contents": "I tried my test on 2.1.3, and I was still unable to reproduce your problem. If you run my test from above, does it fail?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-26T22:03:26Z", "contents": "It looks like the example it that you showed doesn't actually call the done callback that it receives so it won't be able to complete successfully. We've tried the example @Gerg provided on a few different versions and it seems to be working fine.\nI'm going to close this, but if you have a chance to try the other example or if you have more details on what exactly is going wrong with your suite, please post again.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 786, "url": "https://github.com/jasmine/jasmine/issues/786", "title": "expect().toEqual() with arrays fails (sometimes)", "contents": "When i got a failed test with the message \"Expected [ 1, undefined ] to equal [ 1, undefined ].\" i almost started to doubt myself.\nThis is easy reproducable with the following code.\nvar t1 = [1];\nt1.length = 2;\nexpect(t1).toEqual([1, undefined]);\n(used jasmine 2.2.0)", "createdAt": "2015-02-20T12:29:22Z", "updatedAt": "2018-12-06T01:17:45Z", "closedAt": "2016-02-22T19:08:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Sventric", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "Sventric", "company": null}, {"login": "Gerg", "company": null}, {"login": "wim82", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "molehillrocker", "company": null}, {"login": "JamieCorkhill", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-20T13:24:16Z", "contents": "It looks like this is probably the pretty printer issue from #766.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Sventric", "authorAssociation": "NONE", "createdAt": "2015-02-20T14:33:53Z", "contents": "If that is the case what is the difference between arr1 and arr2?\nvar arr1 = [1];\narr1.length = 2;\n\nvar arr2 = [1, undefined];\nYes, arr1 was internally only 1 long, but what does an internally (and 'hidden'?) state have to do with equality.\nBoth objects are Arrays and both arrays have a length of 2 and both have a value on the first index and both have undefined on the second index.\nAfter playing around a little it maybe is a question what do we call equal. Same behavior or identical structure. For the previous sample the difference is 'easy' detectable with code below or via a for-in loop.\nvar arr1_is_fully_explicit = arr1.hasOwnProperty(1); // -> false\nvar arr2_is_fully_explicit = arr2.hasOwnProperty(1); // -> true", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-25T05:27:44Z", "contents": "It is currently failing because\nObject.keys(arr1); // -> [\"0\"]\nObject.keys(arr2); // -> [\"0\", \"1\"]\nIt appears that Underscore's toEqual (on which Jasmine's equality is based) does still say the two arrays are equal.\nAs you have identified, defining equality is a tricky problem. For now, if this behavior is important to you, I would recommend creating a custom equality tester.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wim82", "authorAssociation": "NONE", "createdAt": "2015-06-22T09:38:45Z", "contents": "i might have the same issue, where comparing arrays gives me a not equal, even though they are (or should be) the same.\nerror: - Expected [ 'a', 'b' ] to equal [ 'a', 'b' ]\n\nfor code:\n   element(by.className('search-summary')).all(by.className('keyword')).getText().then(function(summary) {\n        console.log(summary);\n        console.log(expectedSummary);\n\n        expect(summary).toEqual(expectedSummary);\n\nwhen doing a console.log i get the exact same result. Or console.log is hiding something i can't see.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-22T17:43:57Z", "contents": "@wim82 what version of jasmine are you using? The pretty printer should be printing out all properties for an array as of version 2.3.0 to match with the comparison logic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "molehillrocker", "authorAssociation": "NONE", "createdAt": "2016-01-11T10:19:15Z", "contents": "We are facing a similar issue with Jasmine 2.4.1. The test case to reproduce is:\nit('should prepend elements to array', function() {\n  var array = [];\n  array.length = 2;\n\n  var originalArray = ['yes', 'no', 'maybe'];\n  var expectedArray = [undefined, undefined, 'yes', 'no', 'maybe'];\n\n  expect(array.concat(originalArray)).toEqual(expectedArray);\n});\n\nThe error message is Expected [ undefined, undefined, 'yes', 'no', 'maybe' ] to equal [ undefined, undefined, 'yes', 'no', 'maybe' ].\nOur current workaround is to convert the arrays to a JSON string and compare those.\nit('should prepend elements to array', function() {\n  var array = [];\n  array.length = 2;\n\n  var originalArray = ['yes', 'no', 'maybe'];\n  var expectedArray = [undefined, undefined, 'yes', 'no', 'maybe'];\n\n  var actualJSON = JSON.stringify(array.concat(originalArray));\n  var expectedJSON = JSON.stringify(expectedArray);\n\n  expect(actualJSON).toEqual(expectedJSON);\n});", "reactions_count": 15, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "JamieCorkhill", "authorAssociation": "NONE", "createdAt": "2018-11-27T02:18:35Z", "contents": "I can confirm the same anomaly. In my case, I wasn't comparing to arrays, but rather two objects.\nI have an object, which I send to MongoDB. I then query the database for that same document, get it back, and confirm the response is the same as the object I originally sent.\nI receive the following in the console:\nExpected value to equal:\n{\"_id\": \"abc123\", \"author\": {\"firstName\": \"John\",\"lastName\": \"Doe\"}\nRecieved:\n{\"_id\": \"abc123\", \"author\": {\"firstName\": \"John\",\"lastName\": \"Doe\"}\n\nCompared values serialize to the same structure. \nPrinting internal object structure without calling `toJSON` instead.\n\nI can confirm that wrapping both objects in expect() an toEqual() in JSON.stringify() solves this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-06T00:56:00Z", "contents": "@JamieCorkhill what version of Jasmine are you using? That looks like a older error message from toEqual. Newer Jasmine versions should include more details about differences (constructor possibly) and breakdowns of which fields are missing or different.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamieCorkhill", "authorAssociation": "NONE", "createdAt": "2018-12-06T01:17:45Z", "contents": "@slackersoft I have just realized I have posted this to Jasmine and not Expect/Jest. I'm not using Jasmine, I'm using Expect, and it's 23.6.0. I apologize for the mixup.", "reactions_count": 1, "reactions_data": ["LAUGH"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 787, "url": "https://github.com/jasmine/jasmine/issues/787", "title": "jasmine.objectContaining no longer works with inherited properties", "contents": "I have many tests that have suddenly started failing in Jasmine 2.2.0. I have written a simple example case below.\nGiven:\nfunction SomeClass () {}\nsomeClass.prototype.someProp = 'foo'\nTest:\nvar someClass = new SomeClass();\nexpect(someClass.someProp).toEqual('foo'); // pass\nexpect(someClass).toEqual(jasmine.objectContaining({ someProp: 'foo' })); // fail\nI know why it is failing, since the source changed the comparison conditions from hasKey to the native hasOwnProperty.\nWas this change intentional? If so, is it documented anywhere?", "createdAt": "2015-02-20T20:58:17Z", "updatedAt": "2015-03-31T14:52:52Z", "closedAt": "2015-03-26T21:02:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Lalem001", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Lalem001", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-21T00:25:53Z", "contents": "I believe this was fixed by 69956bf.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-26T21:02:22Z", "contents": "We think this should be fixed in master now, so I'm going to close this. If you have a chance, please try this again on master. If it still doesn't work, we'd like to know, as this regression was not intentional.\nClosing for now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Lalem001", "authorAssociation": "NONE", "createdAt": "2015-03-31T14:52:52Z", "contents": "It was indeed fixed by 69956bf. Sorry for the delayed response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 790, "url": "https://github.com/jasmine/jasmine/issues/790", "title": "Using jasmine.clock() in async specs can cause test pollution", "contents": "If an async spec calls done() from a timer that\u2019s run by jasmine.clock(), then that spec\u2019s calls to jasmine.clock.tick() can affect the behavior of following specs. There\u2019s an example in Jasmine\u2019s own test suite. This spec looks like it shouldn\u2019t pass, and indeed it doesn\u2019t when run by itself:\n\n  \n    \n      jasmine/spec/core/integration/EnvSpec.js\n    \n    \n        Lines 968 to 1037\n      in\n      8c59875\n    \n    \n    \n    \n\n        \n          \n             it('explicitly fails an async spec', function(done) { \n        \n\n        \n          \n               var env = new j$.Env(), \n        \n\n        \n          \n               specDone = jasmine.createSpy('specDone'); \n        \n\n        \n          \n            \n        \n\n        \n          \n               env.addReporter({ \n        \n\n        \n          \n                 specDone: specDone, \n        \n\n        \n          \n                 specStarted: function() { \n        \n\n        \n          \n                   jasmine.clock().tick(1); \n        \n\n        \n          \n                 }, \n        \n\n        \n          \n                 jasmineDone: function() { \n        \n\n        \n          \n                   expect(specDone).toHaveBeenCalledWith(jasmine.objectContaining({ \n        \n\n        \n          \n                     description: 'has a default message', \n        \n\n        \n          \n                     failedExpectations: [jasmine.objectContaining({ \n        \n\n        \n          \n                       message: 'Failed' \n        \n\n        \n          \n                     })] \n        \n\n        \n          \n                   })); \n        \n\n        \n          \n                   expect(specDone).toHaveBeenCalledWith(jasmine.objectContaining({ \n        \n\n        \n          \n                     description: 'specifies a message', \n        \n\n        \n          \n                     failedExpectations: [jasmine.objectContaining({ \n        \n\n        \n          \n                       message: 'Failed: messy message' \n        \n\n        \n          \n                     })] \n        \n\n        \n          \n                   })); \n        \n\n        \n          \n                   expect(specDone).toHaveBeenCalledWith(jasmine.objectContaining({ \n        \n\n        \n          \n                     description: 'fails via the done callback', \n        \n\n        \n          \n                     failedExpectations: [jasmine.objectContaining({ \n        \n\n        \n          \n                       message: 'Failed: done failed' \n        \n\n        \n          \n                     })] \n        \n\n        \n          \n                   })); \n        \n\n        \n          \n                   expect(specDone).toHaveBeenCalledWith(jasmine.objectContaining({ \n        \n\n        \n          \n                     description: 'has a message from an Error', \n        \n\n        \n          \n                     failedExpectations: [jasmine.objectContaining({ \n        \n\n        \n          \n                       message: 'Failed: error message' \n        \n\n        \n          \n                     })] \n        \n\n        \n          \n                   })); \n        \n\n        \n          \n                   done(); \n        \n\n        \n          \n                 } \n        \n\n        \n          \n               }); \n        \n\n        \n          \n            \n        \n\n        \n          \n               env.describe('failing', function() { \n        \n\n        \n          \n                 env.it('has a default message', function(innerDone) { \n        \n\n        \n          \n                   setTimeout(function() { \n        \n\n        \n          \n                     env.fail(); \n        \n\n        \n          \n                     innerDone(); \n        \n\n        \n          \n                   }, 1); \n        \n\n        \n          \n                 }); \n        \n\n        \n          \n            \n        \n\n        \n          \n                 env.it('specifies a message', function(innerDone) { \n        \n\n        \n          \n                   setTimeout(function() { \n        \n\n        \n          \n                     env.fail('messy message'); \n        \n\n        \n          \n                     innerDone(); \n        \n\n        \n          \n                   }, 1); \n        \n\n        \n          \n                 }); \n        \n\n        \n          \n            \n        \n\n        \n          \n                 env.it('fails via the done callback', function(innerDone) { \n        \n\n        \n          \n                   setTimeout(function() { \n        \n\n        \n          \n                     innerDone.fail('done failed'); \n        \n\n        \n          \n                   }, 1); \n        \n\n        \n          \n                 }); \n        \n\n        \n          \n            \n        \n\n        \n          \n                 env.it('has a message from an Error', function(innerDone) { \n        \n\n        \n          \n                   setTimeout(function() { \n        \n\n        \n          \n                     env.fail(new Error('error message')); \n        \n\n        \n          \n                     innerDone(); \n        \n\n        \n          \n                   }, 1); \n        \n\n        \n          \n                 }); \n        \n\n        \n          \n               }); \n        \n\n        \n          \n            \n        \n\n        \n          \n               env.execute(); \n        \n\n        \n          \n             }); \n        \n\n        \n          \n           }); \n        \n    \n  \n\n\nIt should fail because each call to jasmine.clock().tick() happens before the setTimeout() call that registers the function that it\u2019s suppose to execute. When the entire suite is run, it passes because of this spec:\n\n  \n    \n      jasmine/spec/core/integration/EnvSpec.js\n    \n    \n        Lines 811 to 833\n      in\n      8c59875\n    \n    \n    \n    \n\n        \n          \n           it(\"should wait a specified interval before failing specs haven't called done yet\", function(done) { \n        \n\n        \n          \n             var env = new j$.Env(), \n        \n\n        \n          \n                 reporter = jasmine.createSpyObj('fakeReporter', [ \"specDone\", \"jasmineDone\" ]); \n        \n\n        \n          \n            \n        \n\n        \n          \n             reporter.specDone.and.callFake(function() { \n        \n\n        \n          \n               expect(reporter.specDone).toHaveBeenCalledWith(jasmine.objectContaining({status: 'failed'})); \n        \n\n        \n          \n             }); \n        \n\n        \n          \n            \n        \n\n        \n          \n             reporter.jasmineDone.and.callFake(function() { \n        \n\n        \n          \n               expect(reporter.jasmineDone.calls.count()).toEqual(1); \n        \n\n        \n          \n               done(); \n        \n\n        \n          \n             }); \n        \n\n        \n          \n            \n        \n\n        \n          \n             env.addReporter(reporter); \n        \n\n        \n          \n             j$.DEFAULT_TIMEOUT_INTERVAL = 8414; \n        \n\n        \n          \n            \n        \n\n        \n          \n             env.it(\"async spec that doesn't call done\", function(underTestCallback) { \n        \n\n        \n          \n               env.expect(true).toBeTruthy(); \n        \n\n        \n          \n               jasmine.clock().tick(8416); \n        \n\n        \n          \n             }); \n        \n\n        \n          \n            \n        \n\n        \n          \n             env.execute(); \n        \n\n        \n          \n           }); \n        \n    \n  \n\n\nI think this is what\u2019s happening: The call to jasmine.clock().tick() on line 829 indirectly leads to the call to done() on line 821, which in turn causes Jasmine to run the next spec while jasmine.clock().tick() is still executing. Any timers registered during an execution of jasmine.clock().tick() will be run before that execution finishes, if the specified interval is low enough. The result of all that is that the invocation of jasmine.clock().tick() in one spec ends up executing timers registered in another spec even though the mock clock was uninstalled and reinstalled in between.\nI can see a few possible ways to fix this:\n\nChange the behavior of the mock clock so that you have to call jasmine.clock().tick() again to run any timers that were registered during a tick. This would bring the mock clock\u2019s behavior more in line with real setTimeout().\nCreate a new DelayedFunctionScheduler instance each time the clock is installed.\nModify QueueRunner to do a real setTimeout at the end of each async spec.\n\nThe catch is that any solution is a breaking change. That\u2019s sort of the point \u2014 to break specs that shouldn\u2019t be passing but currently aren\u2019t. The first would, I think, be particularly nasty to inflict on users as part of a Jasmine upgrade, even though it might be the right thing to do if we were starting from scratch. The second and third should at least only break specs that ought to fail. Although it\u2019s a bit indirect, the third option would also have the happy side effect of preventing two specs from being on the call stack at the same time.\nThe other option is to do nothing to Jasmine itself, work around the problem in the specs, and update the documentation to warn about using the mock clock in async specs.\nThoughts?", "createdAt": "2015-02-23T07:01:03Z", "updatedAt": "2015-12-02T22:29:35Z", "closedAt": "2015-03-15T20:24:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sgravrock", "authorAssociation": "MEMBER", "participants_count": 3, "participants_data": [{"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ccorcos", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-01T22:32:29Z", "contents": "Jasmine actually used to do number 1, but we changed it so that a setTimeout(..., 0) would trigger during the current tick to be more in line with user expectations.\nWe reset the DelayedFunctionScheduler when the clock is uninstalled currently, which should be the same as number 2.\nQueueRunner should be properly using the real setTimeout as of 10f87b3, so number 3 should be fixed now.\nI think the bug here is that if a previous installation of the clock is still running a tick, doing another setTimeout or setInterval shouldn't be run as part of the currently running tick. A pull request for this should either make DelayedFunctionSchedule#reset do the right thing here or as you suggested, make a new one for each installation and throw it away upon uninstall.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ccorcos", "authorAssociation": "NONE", "createdAt": "2015-12-02T22:29:35Z", "contents": "I'm still having this issue...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 791, "url": "https://github.com/jasmine/jasmine/issues/791", "title": "Clarify whether custom matcher message can be DOM node", "contents": "In http://jasmine.github.io/2.1/custom_matcher.html#section-Failure_Messages there's no mention whether a custom matcher might return a DOM node inside message. This has always been possible in the past and is still today (https://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine-html.js#L290). For example imagediff builds on top of this feature.\nPlease clarify on whether this is still wanted. In this case I'll raise an issue with karma-jasmine to support non-string values inside message.\nPlease note that for CLI runners with a browser in the back the console output will not be able to render the DOM node.", "createdAt": "2015-02-23T19:57:50Z", "updatedAt": "2015-03-04T23:12:00Z", "closedAt": "2015-03-04T23:12:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cburgmer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cburgmer", "company": "ThoughtWorks"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-28T05:35:44Z", "contents": "Jasmine is definitely only expecting to see strings in the failure message as DOM nodes don't make any sense in a node context or when printing the output to a console. That said, I don't think we want to try to maintain the code to enforce that only strings are allowed either.\nI think this might be a situation where you just have to know what you and the matcher library you're using are doing to know which makes sense. I wouldn't fault karma for not handling DOM nodes if they're expecting to mostly print to a terminal where that wouldn't make sense.\nBasically, a custom matcher is assumed to be specific to the context of the project it is being run in, and thus can be whatever the project thinks is acceptable given how the specs are being run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cburgmer", "authorAssociation": "NONE", "createdAt": "2015-02-28T12:16:10Z", "contents": "Thanks for the answer.\nI understand that adding the complexity of supporting DOM nodes might not be in jasmine's interest. However the current code of the HTML reporter does explicitly support DOM nodes and I would hope we could at least keep this that way as a lot of people might have made their assumptions based on that.\nI agree that the customer matcher could handle the complexity of whether the reporter does or does not support anything apart from strings inside messages.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-04T23:12:00Z", "contents": "It sounds like you've got your answer, so I'm going to close this issue for now.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 792, "url": "https://github.com/jasmine/jasmine/issues/792", "title": "QueueRunner does not use attrs.timer", "contents": "In this line https://github.com/jasmine/jasmine/blob/master/src/core/QueueRunner.js#L20 is a typo. It should be this.timer = attrs.timer || {setTimeout: setTimeout, clearTimeout: clearTimeout};. This is how the factory calls it.\nOriginally reported here with more details: Sanjo/meteor-jasmine#145 (comment)", "createdAt": "2015-02-24T00:04:50Z", "updatedAt": "2015-02-25T05:03:16Z", "closedAt": "2015-02-25T05:03:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Sanjo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Sanjo", "company": "Horpidu"}, {"login": "Gerg", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 793, "url": "https://github.com/jasmine/jasmine/issues/793", "title": "Not toHaveBeenCalledWith should test against all object properties", "contents": "Hello,\nI have the following test:\nit(\"tests if method was executed or not with a certain object argument\", function() {\n    var fooSpy = jasmine.createSpy('foo');\n    var expectedArg = { any : jasmine.any(String), foo : 'fuu' };\n\n    // Passes as expected\n    fooSpy({ any : 'lulz', foo : 'fuu'});\n    expect(fooSpy).toHaveBeenCalledWith(expectedArg);\n\n    // Fails as not expected\n    fooSpy({ any : 'lulz', foo : 'foo'});\n    expect(fooSpy).not.toHaveBeenCalledWith(expectedArg);\n});\nShouldn't the second expect pass? The value of any is correct but foo isn't. I would expect toHaveBeenCalledWith to test against all properties in the object. Am I wrong? Is there a better way to do this?", "createdAt": "2015-02-25T12:07:55Z", "updatedAt": "2015-02-25T18:23:42Z", "closedAt": "2015-02-25T18:23:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bensampaio", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "bensampaio", "company": "@karify"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-02-25T12:47:38Z", "contents": "toHaveBeenCalledWith looks at all the spy's calls. If you only care about the most recent call, you want something like this:\nexpect(fooSpy.calls.mostRecent()).not.toEqual(expectedArg);\nDoes this answer your question?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bensampaio", "authorAssociation": "NONE", "createdAt": "2015-02-25T13:49:40Z", "contents": "Thank you for your fast reply!\nWell that works, but I think what I want is this:\nexpect(fooSpy.calls.mostRecent().args[0]).not.toEqual(expectedArg);\nBecause from what I understood the mostRecent() function returns an object with more data besides the passed arguments. Anyway, it works but I must say it doesn't look very nice compared to most expectations I have been writing. I believe it would look much nicer like this:\nexpect(fooSpy.calls.mostRecent()).not.toHaveBeenCalledWith(expectedArg);\nThat is a suggestion for future releases ;)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-02-25T17:14:28Z", "contents": "You should also be able to call fooSpy.calls.reset() to clear out the currently tracked calls in between if you want. This would let you use the toHaveBeenCalledWith matcher.\nGiven that, I think we're unlikely to change this behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bensampaio", "authorAssociation": "NONE", "createdAt": "2015-02-25T18:14:16Z", "contents": "Ok, that is also a solution. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 794, "url": "https://github.com/jasmine/jasmine/issues/794", "title": "How come there is not a single reference about jasmine-node in the README?", "contents": "I understand, they are different things, but it would not hurt to mention the jasmine-node package IMO.\nAlso, collecting a list of getting started with jasmine examples would be nice as well. I could provide some as well.\nIf anyone is interested, I can get on this \ud83e\udd18\nCheers!", "createdAt": "2015-02-28T09:06:17Z", "updatedAt": "2015-03-03T00:43:59Z", "closedAt": "2015-03-02T22:52:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-02T22:52:18Z", "contents": "Thanks for using jasmine. The officially supported way to use jasmine in a node/npm context is to install the npm package named jasmine. Issues and such are in the jasmine-npm github repo.\nDocumentation is at our documentation site jasmine.github.io. The docs for use in node are pretty bare-bones right now and could certainly be improved. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2015-03-03T00:19:32Z", "contents": "Hey. The documentation at your site talks about how to use the jasmine framework to write tests (certainly very important), but I would love to see more about initial setup and configuration, workflows, etc. I would love to help of course.\nWhat is the difference between jasmine-node and jasmine-npm? I have only used jasmine-node because I didn't even know there was jasmine-npm to begin with. \ud83d\ude04", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T00:43:59Z", "contents": "jasmine-node was created by the community because, while jasmine tests worked in node, there wasn't an officially supported way to run them. As we've gained a bit more knowledge of how to work in node, we released jasmine-npm around the time when 2.0 was released. jasmine-npm only supports 2.x (probably more like 2.1 and above).\nIdeally, there shouldn't be much in the way of setup needed, but some more documentation around what configuration is available in jasmine-npm would be good on the node.js page.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 795, "url": "https://github.com/jasmine/jasmine/issues/795", "title": "Why can't you stub a variable.", "contents": "I want to be able to stub a variable with Jasmine, to control the state of the test for different scenario's\nFor example\nvar foo = false;\nif(foo)\nconsole.log('Hey')\nstub(window, 'foo').andReturn(true);", "createdAt": "2015-03-01T12:42:18Z", "updatedAt": "2015-03-01T16:21:16Z", "closedAt": "2015-03-01T16:21:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vsakaria", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vsakaria", "company": null}, {"login": "infews", "company": "Infews LLC & Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "infews", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-01T16:21:16Z", "contents": "JavaScript makes this hard or impossible depending on how backwards-compatible one is.\nHave you looked at dependency injection as a technique? This can accomplish what you want without polluting your implementation.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 796, "url": "https://github.com/jasmine/jasmine/issues/796", "title": "Ugly error messages from `toHaveBeenCalledWith` when using `jasmine.any`", "contents": "Try this test case:\nit('aaa', function () {\n    var spy = jasmine.createSpy();\n    spy('a', {});\n    expect(spy).toHaveBeenCalledWith('b', jasmine.any(Object));\n});\n\nResult:\nFAILED TESTS:\n  \u2716 aaa\n    PhantomJS 1.9.8 (Mac OS X)\n      [native code]\n  })> ] but actual calls were [ 'a', Object({  }) ].\n  Error: Expected spy unknown to have been called with [ 'b', <jasmine.any(function Object() {\n      at (...)\n\nUsing Jasmine  2.2.1.", "createdAt": "2015-03-02T14:10:49Z", "updatedAt": "2015-03-04T09:57:41Z", "closedAt": "2015-03-03T21:29:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mik01aj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mik01aj", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-02T16:54:12Z", "contents": "PS. When I try to check stuff like expect(...).toEqual(jasmine.any(Promise)); the error message is even worse:\n    \u2716 should work woth object\n      PhantomJS 1.9.8 (Mac OS X)\n          this._id = $$es6$promise$promise$$counter++;\n          this._state = undefined;\n          this._result = undefined;\n          this._subscribers = [];\n          if ($$$internal$$noop !== resolver) {\n            if (!$$utils$$isFunction(resolver)) {\n              $$es6$promise$promise$$needsResolver();\n            }\n            if (!(this instanceof $$es6$promise$promise$$Promise)) {\n              $$es6$promise$promise$$needsNew();\n            }\n            $$$internal$$initializePromise(this, resolver);\n          }\n        })>.\n    Error: Expected undefined to equal <jasmine.any(function $$es6$promise$promise$$Promise(resolver) {\n        at (...)/__tests__/stuff.js:120:0\n\n(Note that this is some internal code from the es6-promise library.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-03T00:54:57Z", "contents": "The only line of those errors that jasmine is actually in control of is:\nError: Expected spy unknown to have been called with [ 'b', <jasmine.any(function Object() {\n\nand\nError: Expected undefined to equal <jasmine.any(function $$es6$promise$promise$$Promise(resolver) {\n\nand then only up to the point where the actual name of the expected comes in. I don't know where all the lines above that error line are coming from, but to me that seems like the part that is hard to read. What part of those error messages concerns you?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-03T10:02:09Z", "contents": "To me it looks like Jasmine is doing some simple parsing on the errors, and it's a bug in this parsing. In the first example, I would expect to see something like this:\nFAILED TESTS:\n  \u2716 aaa\n    PhantomJS 1.9.8 (Mac OS X)\n      [native code]\n  Error: Expected spy unknown to have been called with [ 'b', <jasmine.any(function Object() { })> ] but actual calls were [ 'a', Object({  }) ].\n      at (...)\n\nNote that this is exactly what Jasmine outputs now, just in different order.\nAnd in the second example, I would expect to see an error message like Expected spy unknown to have been called with [ 'b', any $$es6$promise$promise$$Promise ]. Constructors are functions, and it doesn't make sense to put the whole function in the error report - name would be enough (this affects only jasmine.any, I believe.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-04T09:57:41Z", "contents": "It works, thanks! :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 797, "url": "https://github.com/jasmine/jasmine/issues/797", "title": "Cannot find name 'bool'. Jasmine 2.2.0 and TypeScript", "contents": "I'm trying to use Jasmine with TypeScript. When I pulled the NuGet Package down I got about 58 errors \"Cannot find name 'bool'.\" in the Jasmine.d.ts file. TypeScript stopped using the bool keyword and has swapped to Boolean. Is it safe to find and replace all bool with Boolean? Or is there a more up to date file I can pull?\nEDIT: My apologizes, the bool keyword seems to live in the TypeScript Jasmine Test Suite template I downloaded. Please disregard :)", "createdAt": "2015-03-02T15:29:32Z", "updatedAt": "2015-03-02T15:31:06Z", "closedAt": "2015-03-02T15:31:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rwildema", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "rwildema", "company": "Microsoft"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 798, "url": "https://github.com/jasmine/jasmine/issues/798", "title": "Add fdescribe() and fit() to the docs", "contents": "Please add the info for fdescribe() and fit() to the documentation. xdescribe() and xit() is already there.\nThanks,\nMarkus", "createdAt": "2015-03-05T21:55:04Z", "updatedAt": "2015-03-05T23:13:24Z", "closedAt": "2015-03-05T23:13:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "biegl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "biegl", "company": "@mohemian "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-05T23:13:24Z", "contents": "fdescribe and fit were added in 2.1, so exist in the 2.1 docs, here: http://jasmine.github.io/2.1/focused_specs.html", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 799, "url": "https://github.com/jasmine/jasmine/issues/799", "title": "Documentation for async tests using done", "contents": "Hello,\nI am having trouble understanding the way to test async calls using jasmine 2.2.\nPlease could you clarify the execution order if tests when using \"done\" calls:\nIn this case:\nbeforeEach(done) {\ndone();[1]\n}\nit(\"spec 1\", function(done) {\nexpect something;\n});\nit(\"spec 2\", function() {\nexpect something;\n});\nWill it be the case that spec 1 and spec 2 will be executed in arbitrary order after done() [1] is called?\nAnd in the next case will it be that spec 4 will not be executed until done()[2] is called?\nbeforeEach(done) {\ndone();[1]\n}\nit(\"spec 3\", function(done) {\nexpect something;\ndone();[2]\n});\nit(\"spec 4\", function() {\nexpect something;\n});\nThanks", "createdAt": "2015-03-09T12:19:05Z", "updatedAt": "2015-03-11T05:01:45Z", "closedAt": "2015-03-09T20:16:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "MarkPaxton", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "MarkPaxton", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-09T20:16:01Z", "contents": "Having asynchronous specs does not affect the order in which they are run. For more documentation on async see our docs here\nIf you have more questions about how to test something please ask at jasmine-js@googlegroups.com instead of opening an issue. If you feel that jasmine is not behaving properly, or you'd like to suggest a new feature to be implemented, that's what the github issues are for.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarkPaxton", "authorAssociation": "NONE", "createdAt": "2015-03-10T09:23:00Z", "contents": "Hello,\nThanks for the reply, I did actually read the documentation however it was not clear how to test the same behaviour that from the runs / waitsFor methods did prior to 2.x, so I would suggest that this is an 'issue' with the documentation.\nI would propose a modification of the examples such as:\nit(\"is completed after 9000ms\", function(done) {\ndoSomething() // This will be completed within 9000ms\nsetTimeout(function() {\nexpect(something).toBe(completed);\ndone();\n}, 9000);\n});\nI think this would make the usage of done() in it() blocks much clearer. There could also be an example using 'setInterval' and 'clearInterval' to show how it is possible to periodically check for the 'complete' condition and call done to end the spec sooner than 9 seconds. This is basically to support async cases where there is no callback for completion.\nThanks - hope that's helpful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-10T14:46:29Z", "contents": "You can find documentation for upgrading from 1.x to 2.x here. The change from runs / waitsFor to done requires thinking about asynchronous specs a bit differently.\nI would caution against using setTimeouts/setIntervals in your specs.\n\nIf you want to test setTimeouts in your implementation, I would suggest using synchronous tests with the Jasmine mock clock\nIf you are testing other asynchronous code, the function under test should have a callback/ event on completion with which to call done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarkPaxton", "authorAssociation": "NONE", "createdAt": "2015-03-10T15:32:02Z", "contents": "Hello,\nThanks again for the reply - the main problem is when there is no 'done'\ncallback in the async method being testing and you are just waiting for a\ncondition to be satisfied. That's the case which is so far not documented.\nThanks,\nMark\nOn 10 March 2015 at 14:46, Greg Cobb notifications@github.com wrote:\n\nYou can find documentation for upgrading from 1.x to 2.x here\nhttp://jasmine.github.io/2.2/upgrading.html. The change from runs /\nwaitsFor to done requires thinking about asynchronous specs a bit\ndifferently.\nI would caution against using setTimeouts/setIntervals in your specs.\n\nIf you want to test setTimeouts in your implementation, I would\nsuggest using synchronous tests with the Jasmine mock clock\nhttp://jasmine.github.io/2.2/introduction.html#section-Jasmine_Clock\nIf you are testing other asynchronous code, the function under test\nshould have a callback/ event on completion with which to call done.\n\n\u2014\nReply to this email directly or view it on GitHub\n#799 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-11T05:01:45Z", "contents": "If you'd like to suggest a specific change to the docs, they're on github here. We'd love to review a pull request.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 800, "url": "https://github.com/jasmine/jasmine/issues/800", "title": "expect().toBe\u00adGre\u00adate\u00adrTh\u00adan() SyntaxError: illegal character", "contents": "SyntaxError: illegal character\nexpect(homework_03.gl.viewportWidth).toBe\u00adGre\u00adate\u00adrTh\u00adan(1);\nThe arrow points to the \"G' in toBe\u00adGre\u00adate\u00adrTh\u00adan", "createdAt": "2015-03-11T13:52:22Z", "updatedAt": "2015-04-10T00:41:53Z", "closedAt": "2015-04-10T00:41:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "MichaelThompson32214", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "MichaelThompson32214", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-14T22:06:54Z", "contents": "Looks like there are some strange characters/encoding in your call to toBeGreaterThan. When I copy from your post and paste into an editor (I tried vim and textmate) I see toBe-Gre-ate-rTh-an instead, which could be what's causing your issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-10T00:41:53Z", "contents": "Closing, since this seems to be an issue with the text in the spec file and not with jasmine itself.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 801, "url": "https://github.com/jasmine/jasmine/issues/801", "title": "Feature request: Highlight the spec file in stack trace for failed tests", "contents": "As a developer\nI want to the line in the stack trace for my test/spec code to be highlighted or bold\nSo that I can quickly find the line in my spec file\nIt's hard to quickly find validationFieldSpecs with all the Jasmine stack trace information.\nCould that line be highlighted or bolded? I suggest if the file name has Spec, Specifications, or Test in it (use a convention). Or the Jasmine stack information could be grayed or given less emphasis than other non-Jasmine (my code).\nExample output from my test:\nWhen working with a validation field should validate required and must match when both setup\nExpected true to be falsy.\nError: Expected true to be falsy.\nat stack (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:1457:12)\nat buildExpectationResult (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:1427:11)\nat Spec.expectationResultFactory (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:572:12)\nat Spec.addExpectationResult (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:321:32)\nat Expectation.addExpectationResult (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:516:17)\nat Expectation.wrapCompare as toBeFalsy\nat Object. (http://localhost:52734/unittests/Specs/Common/validationFieldSpecs.js?bust=1426081842271:73:22)\nat attemptSync (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:1764:20)\nat QueueRunner.run (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:1752:5)\nat QueueRunner.execute (http://localhost:52734/UnitTests/Jasmine/Jasmine.js?bust=1426081842271:1737:8)", "createdAt": "2015-03-11T13:55:50Z", "updatedAt": "2018-01-19T01:42:48Z", "closedAt": "2018-01-19T01:42:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "participants_count": 9, "participants_data": [{"login": "aligneddev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}, {"login": "r4j4h", "company": null}, {"login": "d-reinhold", "company": null}, {"login": "aMarCruz", "company": "BB-Soft"}, {"login": "kivilahtio", "company": "The National Library of Finland"}, {"login": "skyshore2001", "company": null}, {"login": "lewistg", "company": "@lucidsoftware "}], "comments_count": 14, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-26T17:05:59Z", "contents": "What I think we want to do for this is actually remove the jasmine lines from the stacktrace altogether, and not simply highlight lines that aren't part of jasmine.\nIdeally, this would be configurable, so you could turn on the jasmine lines if you needed to see them for some reason. Configuration to be done with a query param and another option in the option menu similar to 'raise exceptions' and 'stop spec on expectation failure'.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-26T17:22:05Z", "contents": "Jasmine Py currently has this feature, but I could definitely see moving this into core.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-26T20:21:35Z", "contents": "I like the idea of hiding the Jasmine lines and the configuration so that you can turn it on if you really want to.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "r4j4h", "authorAssociation": "NONE", "createdAt": "2015-07-07T02:01:28Z", "contents": "+1 this would be a very ergonomic feature :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-07T13:13:42Z", "contents": "@Gerg could you add a link to the code or changeset in Jasmine Py to make it easier to port that in?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-09T02:52:50Z", "contents": "The code that does it for Jasmine Py is here: https://github.com/jasmine/jasmine-py/blob/eae95c0ecc589a2ce9bebec14851915a30b11689/jasmine/console_formatter.py#L95-L106\nSince Jasmine Py is serving the Jasmine source files, it is pretty easy to filter by path (all core files are served from __jasmine__/*).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "d-reinhold", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-16T21:31:51Z", "contents": "This is a great feature I'd love to have as well, but I don't think it can be fully pulled into the core, because there's no reliable way to detect what code is 'jasmine' code and what isn't. For example, here's a stack trace I get when running jasmine in a browser via gulp-jasmine-browser with webpack:\nError: Expected spy clearLocationHash not to have been called.\n    at stack (http://localhost:8889/:1635:17)\n    at buildExpectationResult (http://localhost:8889/:1605:14)\n    at Spec.Env.expectationResultFactory (http://localhost:8889/:696:18)\n    at Spec.addExpectationResult (http://localhost:8889/:388:34)\n    at Expectation.addExpectationResult (http://localhost:8889/:646:21)\n    at Expectation.toHaveBeenCalled (http://localhost:8889/:1559:12)\n    at Object.eval (webpack:///./spec/app/components/space_page_spec.js?:139:53)\n    at attemptSync (http://localhost:8889/:1944:24)\n    at QueueRunner.run (http://localhost:8889/:1932:9)\n    at QueueRunner.execute (http://localhost:8889/:1917:10)\n    at Spec.Env.queueRunnerFactory (http://localhost:8889/:755:35)\n    at Spec.execute (http://localhost:8889/:417:10)\n    at Object.fn (http://localhost:8889/:2537:37)\n    at attemptAsync (http://localhost:8889/:1974:24)\n    at QueueRunner.run (http://localhost:8889/:1929:9)\n    at http://localhost:8889/:1956:16\n\nIn this case, the core jasmine code is executed from a script tag on the spec runner itself. In general, there's no special directory that the core can assume it was served from in all environments (jasmine-py, jasmine-gem, gulp-jasmine-browser, jasmine-npm etc). We would have to implement the filtering in each of the non-core jasmine projects, like how jasmine-py currently does.\nAlternatively, perhaps we could open up an API for spec runners to inform the core what globs are being used to load the spec files. Then we could apply a regex with those globs to the stack trace and filter out lines that don't match. That would be similar to @logankd's original idea of having a whitelist, but is a little more precise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "r4j4h", "authorAssociation": "NONE", "createdAt": "2016-02-17T16:56:26Z", "contents": "To further @d-reinhold 's case of opening the API for informing what globs are being used, the API could support script tag based approaches through attributes placed on the script tags containing the glob it represents. The attribute could be placed in manually by an end user or by templating code.\nAdditionally we'd have to determine or make configurable the attribute key to use/look for.\nPerhaps instead of a glob just an package-like identifier could work?\nWe'd likely want to be able to whitelist other jasmine extensions that come through from execution via a script tag on the spec runner as well, like jasmine-jquery or jasmine-signals.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aMarCruz", "authorAssociation": "NONE", "createdAt": "2016-02-17T22:57:03Z", "contents": "@d-reinhold the API is a good idea \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kivilahtio", "authorAssociation": "NONE", "createdAt": "2016-03-25T17:04:31Z", "contents": "Hi!\nI am buggered by this same problem in the browser side of jasmine.\nI implemented this hacky fix to get rid of this annoyance so I can fully focus on testing my apps.\n[https://github.com/kivilahtio/jasmine/commit/c7367cf1ed84e18a4f36723c6ed87073fffa7ec4]\nIt prolly doesn't work with node-js and friends, but maybe it will help somebody else get this thing sorted out while you work on the best solution.\nI am trying to learn some javascript development, like testing, and jasmine looks very nice and easy to use. Also parsing the default HTML test report to TAP-framework might not be too difficult!\nKeep up the good work!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "skyshore2001", "authorAssociation": "NONE", "createdAt": "2017-03-02T03:07:42Z", "contents": "+1\nI debug the test code in chrome. I want the feature.\n\nfilter out the stack lines of the jasmine lib.\nBetter the filter rule can be configured.\n(nice to have) click the line, and it locates the file and line in the source code panel in the developer tool of chrome browser.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lewistg", "authorAssociation": "NONE", "createdAt": "2018-01-17T17:13:24Z", "contents": "@skyshore2001, if you are interested, here is a Chrome extension that does your third bullet point: https://github.com/lewistg/stack-trace-linkifier (In web-store: https://chrome.google.com/webstore/detail/stack-trace-linkifier/mafpielkiomgfjolcbikogcpnnjjfdad)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "kivilahtio", "authorAssociation": "NONE", "createdAt": "2018-01-17T18:56:28Z", "contents": "Pretty neat! Thanks for the tip.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-19T01:42:48Z", "contents": "We've added this feature to the 3.0 track. It has been checked in on the 3.0-features branch. I'm going to close this issue.\nThanks for using Jasmine!", "reactions_count": 3, "reactions_data": ["HOORAY", "HOORAY", "THUMBS_UP"]}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 802, "url": "https://github.com/jasmine/jasmine/issues/802", "title": "beforeAll() behaves as beforeEach() when using focused describe", "contents": "Hi there,\nfirst I want to congratulate you for the project. Truly awesome.\nSaid that, the test below is failing to me. Looks like if beforeAll() was executing before each it() block when using the \"fdescribe()\" for focused execution:\nfdescribe(\"When using beforeAll()\", function() {\n  var count = 0;\n  beforeAll(function() {\n    count++;\n  });\n\n  it(\"count should stay at 1\", function() {\n    expect(count === 1).toBeTruthy();\n  });\n\n  it(\"count should stay at 1\", function() {\n    expect(count === 1).toBeTruthy();\n  });\n  console.log('jasmine-version:' + jasmine.version);\n});\nIf I run the same with not focused describe(), it passes. My version as per log is 2.2.0.\nThanks!,\nSergio.", "createdAt": "2015-03-11T14:41:04Z", "updatedAt": "2015-03-11T17:41:42Z", "closedAt": "2015-03-11T16:44:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sdcoca", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sdcoca", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-11T16:44:54Z", "contents": "This is the intended behavior for 2.2, but it will be changing in 2.3 (and has changed on master).\nSee #732 and #773 for details.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sdcoca", "authorAssociation": "NONE", "createdAt": "2015-03-11T17:41:42Z", "contents": "Great - thanks then!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 803, "url": "https://github.com/jasmine/jasmine/issues/803", "title": "CLI Improvements for Node.js", "contents": "Couple ideas:\n\n--configure <FILE NAME> - Specify the config json (jasmine.json) from command line (also allow cson)\n--coffee - Runs coffee files", "createdAt": "2015-03-13T16:27:05Z", "updatedAt": "2015-03-26T15:16:19Z", "closedAt": "2015-03-26T15:16:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jimbol", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jimbol", "company": "Trove, previously Groupon, OnBehalf"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-26T15:16:19Z", "contents": "Setting the config file to use for jasmine-npm is done with the JASMINE_CONFIG_PATH environment variable, though the documentation for this isn't very good.\nWe've made some changes on master as well that should allow you to just have a helper file that requires the coffeescript patch to require so the rest of your coffeescript files will get loaded properly. This should be in the next release.\nWe're working on some other enhancements to the CLI, see jasmine/jasmine-npm#19 and the corresponding tracker story\nIn the future please open issues for the jasmine npm package on its github page\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 805, "url": "https://github.com/jasmine/jasmine/issues/805", "title": "toHaveBeenCalledWith() failing, although values are the same", "contents": "I'm trying to verify that a function has been called with specific values.  Unfortunately, although the values are the same, I'm still getting the error:\nExpected spy dailyRepeat to have been called with [ 0, 100000, Date(Sat Mar 16 2115 00:00:00 GMT-0400 (Eastern Daylight Time)), Date(Mon Mar 16 2015 00:00:00 GMT-0400 (Eastern Daylight Time)) ] but actual calls were [ 0, 100000, Date(Sat Mar 16 2115 00:00:00 GMT-0400 (Eastern Daylight Time)), Date(Mon Mar 16 2015 00:00:00 GMT-0400 (Eastern Daylight Time)) ].\n\nI mocked out the time, cast it to a Number, and they were both the exact same number.  I also verified that all of the parameter typeofs were equivalent.\n\nRunning on Windows 7\nJasmine ~2.1.0\nPhantomJS 1.9.8", "createdAt": "2015-03-16T16:21:23Z", "updatedAt": "2015-05-12T19:08:07Z", "closedAt": "2015-05-12T19:08:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexhoneygosky", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alexhoneygosky", "company": null}, {"login": "mik01aj", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-19T15:56:24Z", "contents": "I tried this:\n        var dailyRepeat = jasmine.createSpy('dailyRepeat');\n        dailyRepeat(\n        0, 100000, new Date('Sat Mar 16 2115 00:00:00 GMT-0400 (Eastern Daylight Time)'), new Date('Mon Mar 16 2015 00:00:00 GMT-0400 (Eastern Daylight Time)')\n        );\n        expect(dailyRepeat).toHaveBeenCalledWith(\n        0, 100000, new Date('Sat Mar 16 2115 00:00:00 GMT-0400 (Eastern Daylight Time)'), new Date('Mon Mar 16 2015 00:00:00 GMT-0400 (Eastern Daylight Time)')\n        );\n\nIn the current jasmine and it doesn't throw an error. Could you provide more details about the issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-12T19:08:07Z", "contents": "We haven't heard anything else from the community on this issue, and have not been able to reproduce it. I'm going to close the issue for now, but if you have more details, please re-open or create a new issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 806, "url": "https://github.com/jasmine/jasmine/issues/806", "title": "j$ call without passing the reference into jasmineToString", "contents": "I have bunch of test failures after upgrading to 2.2.1 jasmine-core and did a git bisect against 2.2.0 and 2.2.1 releases, bisect ended up showing the culprint to be commit:\n1c6f4ef\nError i get from karma run is:\nReferenceError: Can't find variable: j$\nSo, without knowing more about about jasmine codebase, i'm quite confident to assume that the error is in this line:\nhttps://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine.js#L2405", "createdAt": "2015-03-17T13:55:16Z", "updatedAt": "2015-03-18T20:13:23Z", "closedAt": "2015-03-18T20:13:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rasjani", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "rasjani", "company": "@Omenia "}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 807, "url": "https://github.com/jasmine/jasmine/issues/807", "title": "When beforeEach times out, test cases should not execute", "contents": "I would consider this a bug, but I'm happy to hear other opinions. Here's a quick example test case:\ndescribe('my test', function() {\n\n    beforeEach(function(done) {\n      console.log('test start beforeEach');\n      setTimeout(function () {\n        console.log('test stop beforeEach');\n        done();\n      }, 4000)\n    });\n\n    it('test test one', function() {\n      // I don't think this should ever be executed.\n      console.log('test test one started');\n      expect(true).toBe(false);\n    });\n});\nI find it confusing that the it block is still executed, even though the test has already timed out.", "createdAt": "2015-03-17T20:43:28Z", "updatedAt": "2017-08-31T12:36:31Z", "closedAt": "2017-06-19T20:49:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "nckpark", "company": null}, {"login": "sgravrock", "company": null}, {"login": "usmonster", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T20:29:01Z", "contents": "Jasmine handles timeouts the same way it handles any other error, and just continues on to the next thing in the queue.\nThat behavior came up when we were working on #577 because going to the next thing in the queue may not be what the user expects, but we decided to wait on it for now. The reasoning for this is that, in this case, what should probably happen is the QueueRunner should jump straight to any afterEachs defined for the spec with similar behavior for afterAlls, but this would have required a fairly large change to what QueueRunner knows about what it is running, instead of just having a list of functions to call.\nAdditionally, with the new TreeProcessor change already going in, we weren't sure we wanted 2 big refactors in the next release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nckpark", "authorAssociation": "NONE", "createdAt": "2015-09-21T18:33:36Z", "contents": "I ran into the same unexpected behavior recently. Are there any plans to address this? If nothing else, the documentation at http://jasmine.github.io/2.0/introduction.html#section-42 should be updated to make it clear that the spec will run in the case of a timeout.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-06-19T20:53:40Z", "contents": "585287b fixes this if you enable the \"stop spec on expectation failure\" option.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "usmonster", "authorAssociation": "NONE", "createdAt": "2017-08-31T12:36:30Z", "contents": "Thanks, @sgravrock! Where is this documented?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 808, "url": "https://github.com/jasmine/jasmine/issues/808", "title": "Discussion: shouldn't timer mocking be discouraged?", "contents": "I wrote many tests for async code with promises, and I ran into test pollution issues a few times (and those are hard to debug). Now I'm refactoring my tests to use the done() callback whenever possible, and this turns out to be a much more reliable method. Mocking setTimeout may break because:\n\nsome library might store its own reference to setTimeout (which will not be mocked),\nsetTimeout is not the only mechanism of asynchronous scheduling (from es6-promise: there are: BrowserMutationObserver and MessageChannel in browser and process.nextTick in Node)\nJavaScript is a language where threads are never interrupted, and calling tick()is like interrupting the current thread. Imho this can lead to very frustrating problems with tests.\n\nShouldn't the documentation warn about this?", "createdAt": "2015-03-18T11:25:06Z", "updatedAt": "2015-03-27T00:51:57Z", "closedAt": "2015-03-27T00:51:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mik01aj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mik01aj", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-18T20:34:30Z", "contents": "Native promises don't go through the native setTimeout directly and are thus hard to write specs around with a mocked clock, and you might find that a true async spec with a done callback works better for you.\nFor other use cases, say if you have a long timeout passed to setTimeout, using the mock clock is going to allow you to not only run your spec synchronously, but the test also won't have to actually wait for the long timeout to elapse.\nThe documentation is also on github and we accept pull requests and issues if you'd like to contribute.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-03-19T09:35:26Z", "contents": "Thanks for the answer. I think that what you just wrote is a valuable information for the doc, too :) I forked  jasmine.github.io and I'll send a PR when I have some time for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-27T00:51:57Z", "contents": "Cool, closing this in favor of updating the docs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 809, "url": "https://github.com/jasmine/jasmine/issues/809", "title": "A very strange issue with jasmine clock (which can be worked around by empty describe or it blocks)", "contents": "I have a test suite with around 60 tests. Recently I started refactoring them to use the done callback instead of the jasmine mocked clock, and after I changed some of the tests to use done, the next ones that were still using the timer, started to fail. So I got 6 failing tests. Then I started some experimenting, and I found out that if I put this at the beginning of my test suite:\ndescribe('x', function () {\n    it('a', function ()\u00a0{});\n    it('b', function ()\u00a0{});\n    it('c', function ()\u00a0{});\n    it('d', function ()\u00a0{});\n    it('e', function ()\u00a0{});\n});\n\n...the tests pass. What is more, when I remove just one it, one of those timer-based tests fails again. And so on. It's like one empty it fixes one broken timer-based test.\nBtw, I found that the same is true for describe:\ndescribe('a', function ()\u00a0{});\ndescribe('b', function ()\u00a0{});\ndescribe('c', function ()\u00a0{});\ndescribe('d', function ()\u00a0{});\ndescribe('e', function ()\u00a0{});\ndescribe('f', function ()\u00a0{});\n\n...is also enough.\nI can't share my code right now, but I'm saving the current state in Git so I'll be able to reproduce it in the future.", "createdAt": "2015-03-20T15:20:20Z", "updatedAt": "2015-10-28T19:26:57Z", "closedAt": "2015-10-28T19:26:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mik01aj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mik01aj", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-26T17:37:01Z", "contents": "You probably want to make sure you're correctly uninstalling the clock after each spec as well and not installing it when you're using the done callback. There have also been a few fixes to the clock on master and I'd be curious if it worked better for you there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2015-05-11T14:02:54Z", "contents": "FYI: my code got published: https://github.com/mik01aj/flying-squirrel/tree/master/src/__tests__", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:13:52Z", "contents": "@mik01aj are you still seeing this issue? Have you been able to upgrade to a more recent release? The fixes I mentioned earlier should be in a release now as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T19:26:57Z", "contents": "Closing this as we haven't heard anything else from the community on this issue and haven't been able to reproduce it.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 811, "url": "https://github.com/jasmine/jasmine/issues/811", "title": "Expectations in a global beforeAll and afterAll will not work", "contents": "Currently the topSuite in Env doesn't have the ability to handle expect calls itself. In order to support this, the topSuite needs:\n\nto be added to the currentlyExecutingSuites so that Env will properly detect and delegate calls to expect to it\nto receive an expectationFactory and expectationResultFactory upon construction in order to track the expectations\n\nEnv additionally needs to do the following when the treeProcessor completes:\n\nreport the result from topSuite to the reporter in the jasmineDone event\ncall clearResourcesForRunnable with the topSuites id\npop the topSuite from the currentlyExecutingSuites\n\nHtmlReporter and JsApiReporter need to make the failures from jasmineDone available to the user.\nLastly, all the libraries using this (viz. jasmine-gem, jasmine-npm, and jasmine-py) need to consume the information presented in jasmineDone as well.", "createdAt": "2015-03-27T23:10:05Z", "updatedAt": "2016-09-07T23:02:17Z", "closedAt": "2016-09-07T23:02:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "slackersoft", "authorAssociation": "MEMBER", "participants_count": 5, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "provegard", "company": null}, {"login": "philipraath", "company": null}, {"login": "mattc41190", "company": "homeaway"}, {"login": "olignyf", "company": null}], "comments_count": 10, "comments_data": [{"authorLogin": "provegard", "authorAssociation": "NONE", "createdAt": "2015-10-01T10:23:42Z", "contents": "I think I'm getting hit by this. I have an error somewhere in my test suite that gets masked/hidden since expectationResultFactory is undefined at line 2103 (Jasmine 2.3.4):\nthis.result.failedExpectations.push(this.expectationResultFactory(data));`\n\n(That's inside Suite.prototype.onException)\nIs there any workound ATM apart from patching my copy of jasmine.js?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "provegard", "authorAssociation": "NONE", "createdAt": "2015-10-01T15:00:15Z", "contents": "By the way, the real error was a stack overflow error (thrown by the Scala/Nashorn host) due to maximumSpecCallbackDepth being set too high (see #880).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-19T18:37:42Z", "contents": "@provegard currently there isn't a workaround for this. I'm trying to pull together some time to work on jasmine, and this is one of the features we want to get in soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "philipraath", "authorAssociation": "NONE", "createdAt": "2016-02-10T02:29:59Z", "contents": "Has there been any progress made on this issue, especially regarding the ability to register Custom Matchers at a global level? We are still on Jasmine 1.3, and would like to upgrade. However, we have many custom matchers that we would like to refactor in place, rather than duplicating throughout our code base. Our registration follows Toby Ho's model: http://tobyho.com/2012/01/30/write-a-jasmine-matcher/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T18:00:00Z", "contents": "@philipraath you should still be able to register custom matchers in a global beforeEach", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattc41190", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-05-05T17:10:07Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "olignyf", "authorAssociation": "NONE", "createdAt": "2016-08-08T20:45:41Z", "contents": "So how do we write a global beforeAll that will affect all specs files ? Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T18:43:31Z", "contents": "@philipraath @olignyf a beforeAll or beforeEach that is not inside of any describe will be applied to all suites/specs, as appropriate, during the execution of the suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "olignyf", "authorAssociation": "NONE", "createdAt": "2016-08-30T17:17:47Z", "contents": "Hi @slackersoft, In which version of jasmine will this be available? I am having a trouble running a global beforeAll() routine. As usual it might be an error on my side. Would you be kind to check this trace and advise ? I am using Jasmine 2.4.1 and verified that jasmine-core is also at 2.4.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T23:02:17Z", "contents": "As of 2.5.0 (probably really use 2.5.1) beforeAll and afterAll should both support expectations.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 812, "url": "https://github.com/jasmine/jasmine/issues/812", "title": "Print failure summary on specDone", "contents": "Jasmine prints the result on jasmineDone, in case of a failure, need to wait until all the specs finish execution to see the failure summary.\nIt would be better, if we can find the failure trace on SpecDone. Depends on the failure message, can terminate the test manually and fix the problem instead of waiting for long time to see the output.", "createdAt": "2015-03-30T09:44:00Z", "updatedAt": "2015-03-30T15:05:30Z", "closedAt": "2015-03-30T15:05:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "enotha", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "enotha", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-30T15:05:29Z", "contents": "The HtmlReporter used to print out the full failure messages as the specs finished, but we found that it was causing a log of reflows on the page and was actually slowing down the time it took to run the suite.\nIt shouldn't be too hard to write your own reporter that updates the page as the specs run. This isn't something we're going to pull into jasmine itself for now, so I'm going to close this issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 813, "url": "https://github.com/jasmine/jasmine/issues/813", "title": "Setup and Teardown misbehavior with focused specs ", "contents": "When focusing specs with fdescribeor fit, setup and teardown functions beforeAll and afterAll acts like beforeEach and afterEach, running once per spec instead of once per suite. When focus are removed the functions works as expected.\nThis spec reproduces the issue (with jasmine v2.2.1)\nfdescribe(\"A spec using beforeAll and afterAll\", function() {\n  var foo;\n\n  beforeAll(function() {\n    foo = 1;\n  });\n\n  afterAll(function() {\n    foo = 0;\n  });\n\n  it(\"sets the initial value of foo before specs run\", function() {\n    expect(foo).toEqual(1);\n    foo += 1;\n  });\n\n  it(\"does not reset foo between specs\", function() {\n    expect(foo).toEqual(2);\n  });\n});", "createdAt": "2015-03-30T14:49:51Z", "updatedAt": "2015-03-30T20:24:42Z", "closedAt": "2015-03-30T15:05:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "diegossilveira", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "diegossilveira", "company": "NuBank"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-30T15:05:29Z", "contents": "This was the defined behavior in the current release of jasmine. This has been changed on master.\nClosing this as a dupe of #732, #758, #773, and #802\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "diegossilveira", "authorAssociation": "NONE", "createdAt": "2015-03-30T20:24:42Z", "contents": "Thank you for the quick reply!\nI'm sorry about opening another issue on the same subject.\nJust waiting for Jasmine 2.3, and congrats for such a nice project!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 814, "url": "https://github.com/jasmine/jasmine/issues/814", "title": "Add support for spec suite dependencies", "contents": "Would it be possible to add a feature whereby you can specify dependencies for each suite of tests. This would allow the ability to test a specific test suite without knowing what prerequisite tests need to come before it.\nfor e.g,\nYou'd be able to run a single spec file \"supportSpec.js\" and have it's dependencies run before it.\nsupportSpec.js\ndescribe(\"customer support should work\", ['login'], function(){\n  // Tests to go here\n});\n\nloginSpec.js\ndescribe(\"login should work\", ['registration'], function(){\n  // Tests to go here\n});\n\nregistrationSpec.js\ndescribe(\"registration should work\", function(){\n  // Tests to go here\n});\n\nI understand this might require some significant changes.  Is this in any way a proposed or even thought-about feature? I couldn't find any reference to such a feature on the issue trackers.", "createdAt": "2015-03-31T14:24:10Z", "updatedAt": "2015-03-31T14:58:16Z", "closedAt": "2015-03-31T14:58:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "drewzh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "drewzh", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-03-31T14:41:32Z", "contents": "Your tests should be able to function independent of each other. Any setup that you need should be handled in a beforeEach function.\nIf you are looking for a way to do common setup, I suggest making some test helper functions. For example:\ndescribe(\"customer support should work\", function() {\n  beforeEach(function() {\n    testHelper.loginUser();\n  });\n\n  // Tests to go here\n});\nThanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-03-31T14:58:16Z", "contents": "A test or set of tests should not have any dependencies on any other tests in your suite, so this isn't something we're going to bring into jasmine itself. Maybe you can get it to work as a plugin to jasmine.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 816, "url": "https://github.com/jasmine/jasmine/issues/816", "title": "beforeEach does not wait on beforeAll", "contents": "In our pages, we use <ng-controller=\"ctrlName as vm\"> and then use the pattern\nng-model=\"vm.something\".  We use services to communicate between controllers\nso nothing is dependent on the state of $scope.\nWhen unit testing controllers we therefore need a reference not to scope\nbut the controller itself so we would like to do this:\ndescribe('When users does something', function() {\n    var ctrl;\n\n    beforeAll(function() {\n        module['theModule'];\n        inject(function($controller) {\n            ctrl = $controller('theController', { $scope: {} });\n        });\n    });\n\n    beforeEach(function() {\n        ctrl.state = whatever;  //setup specific actions for specific test case\n    });\n\n    it('check the result', function() {\n        expect(ctrl.value).toBe('something');\n    });\n});\n\nWhile we would like to do that we can't.  The issue appears to be that beforeEach\nis called prior to resolution of beforeAll (inbeforeEach, ctrl is null).\nInstead we find that we have to do this pattern:\n...\n    beforeEach(function() {\n        module['theModule'];\n        inject(function($controller) {\n            ctrl = $controller('theController', { $scope: {} });\n        });\n        //Can't use ctrl here, it is null.\n    });\n\n    it('check the result', function() {\n        ctrl.state = whatever;  // This doesn't belong here.\n        expect(ctrl.value).toBe('something');\n\n        describe('', function() {\n            beforeEach(function() {\n                ctrl.state = theNextThing;      //Works fine down here\n            }\n            it('check the next result', function() {\n                expect(ctrl.value).toBe('better');\n            });\n        }\n    });\n...\n\nSo we're both taking the action and checking the result in the same place on the\nfirst level of test but in nested tests we can follow the desired pattern.\nShould we care?  Are we doing something wrong with beforeAll()?  Is there a\nway to wait asynchronously on the creation of ctrl in beforeEach\n(or for that matter, beforeAll) and then take the action there?\nThank you.\nangular: 1.3.15\njasmine: 2.2.1\nkarma: 0.12.31\nkarma-cli: 0.0.4", "createdAt": "2015-04-02T18:33:15Z", "updatedAt": "2015-04-06T19:58:58Z", "closedAt": "2015-04-06T19:58:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jdenekat", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jdenekat", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-02T19:48:20Z", "contents": "It sounds to me like the inject call is asynchronous and is returning before it has called your callback. You should be able to use the done callback in your beforeAll (and beforeEach, etc) to tell jasmine that the function will be asynchronous and will call the done callback when it has completed its work. In your case this would probably be inside your inject callback after you've set the value of ctrl. Hope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdenekat", "authorAssociation": "NONE", "createdAt": "2015-04-03T00:22:28Z", "contents": "Thanks, this worked just fine when doing everything in beforeEach.  But when we tried to move the done callback to beforeAll and create the controller there the result was the same -- beforeAll does not appear to care about done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdenekat", "authorAssociation": "NONE", "createdAt": "2015-04-03T13:24:23Z", "contents": "This is what is happening now and we think it is a deficiency (if not a defect) with beforeAll:\ndescribe('When users does something', function() {\n    var ctrl;\n\n    //Chaining beforeEach...beforeEach works, but beforeAll...beforeEach does not:\n    beforeEach(function() {\n        module['theModule'];\n        inject(function($controller) {\n            ctrl = $controller('theController', { $scope: {} });\n        });\n    });\n\n    beforeEach(function() {\n        ctrl.state = whatever;  //ctrl is available in chained beforeEach\n    });\n\n    it('check the result', function() {\n        expect(ctrl.value).toBe('something');\n    });\n});\n\nChaining together beforeEach and beforeEach gives us a valid controller.  If the first beforeEach is turned into beforeAll then the controller will be null in the beforeEach.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-03T20:33:49Z", "contents": "Can you provide a full simple example with a spec and implementation that displays this issue? I am unable to make something simple that makes your specs work even with beforeEach only.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdenekat", "authorAssociation": "NONE", "createdAt": "2015-04-04T13:19:42Z", "contents": "Thanks for your attention to this issue.  Here is a GIST.\nI don't actually need beforeAll in this simple test, but when I switch between beforeEach and beforeAll on line 6 of commentUnit.js I can observe the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-06T05:13:15Z", "contents": "I think this is actually a quirk with angular-mocks now that jasmine supports beforeAll. Angular-mocks attempts to determine whether or not a spec is currently running when you call module, inject, etc. and the functions behave differently if no spec is running. Basically, it's expecting the difference between:\nbeforeEach(module('foo'));\nand\nbeforeEach(function() {\n  // some stuff\n  module('foo');\n});\nAnd when you run the inject and module calls from within the beforeAll no spec is running yet and you get the behavior as if you'd called it in the first example. This should mean that you can do something like this and it should work with beforeAll:\nbeforeAll(module('comments');\n\nbeforeAll(inject(function ($controller) {\n  ctrl = $controller('commentController', { $scope: {} });\n}));", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jdenekat", "authorAssociation": "NONE", "createdAt": "2015-04-06T12:33:52Z", "contents": "When trying the proposed change I get this:\nTypeError: Cannot read property '$injector' of null at Object.workFn (D:/.../angular-mocks.js:2287:22)\nTypeError: Cannot read property '$modules' of null at Object.workFn (D:/.../angular-mocks.js:2411:32)\n\nApparently it still doesn't know that a spec is running.\nWe plan to adopt this pattern:\nvar initialized = false;\nbeforeEach(function() {\n    if (!initialized) {\n        ...\n        initialized = true;\n    }\n});\n\nThat has the effect we're looking for and doesn't get bogged down in quirky behavior of beforeAll.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-06T19:58:58Z", "contents": "I would take this issue to the angular/angular-mocks folks and see what they have to say about the issue. beforeAll is still pretty new to jasmine, so it's possible they haven't noticed this issue yet.\nSince this doesn't appear to be an issue with jasmine itself, I'm going to close it. Let us know if you have any other issues.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 819, "url": "https://github.com/jasmine/jasmine/issues/819", "title": "toThrowError doesn't consider inheritance", "contents": "toThrowError is very useful, but I think it works incorrectly with custom error classes.\nfunction PirateError(message) {\n    this.message = 'Arrggghhhh! ' + message;\n}\nPirateError.prototype = new Error();\n\ndescribe('custom try/catch', function() {\n    it('works fine in tests', function() {\n        try {\n            throw new PirateError();\n        } catch (error) {\n            expect(error).toEqual(jasmine.any(Error));\n            expect(error).toEqual(jasmine.any(PirateError));\n            expect(error instanceof Error).toBeTruthy();\n            expect(error instanceof PirateError).toBeTruthy();\n        }\n    });\n});\n\ndescribe('toThrowError', function() {\n    it('considers error inheritance', function() {\n        expect(function() {\n            throw new PirateError('Blow me down!');\n        }).toThrowError(PirateError);\n    });\n});\nResult:\nExpected function to throw PirateError, but it threw Error.", "createdAt": "2015-04-08T11:49:21Z", "updatedAt": "2015-04-09T22:38:31Z", "closedAt": "2015-04-09T22:38:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chge", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chge", "company": "@qiwitech"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-08T22:09:04Z", "contents": "Jasmine uses the constructor attribute to determine whether the thrown error is of the desired type. When you assign the prototype of your PirateError to be a new Error() it changes the constructor to the Error function instead. If you add:\nPirateError.prototype.constructor = PirateError;\nafter you assign the prototype your example should work.\nWe'd be open to a way to do this checking that didn't require re-assigning the constructor after setting the prototype, but none has come up yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chge", "authorAssociation": "NONE", "createdAt": "2015-04-09T11:50:37Z", "contents": "But, for example, jasmine.any uses instanceof for matching. Why shouldn't toThrowError use instanceof instead of direct constructor comparison?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 820, "url": "https://github.com/jasmine/jasmine/issues/820", "title": "How to use jasmine with official node.js debugger?", "contents": "Hello all javascript hackers!\nJust create sample rake app and run\njasmine:install\njasmine:examples\njasmine:ci\n5 test are successfull\nAfter it, adding debugger; in to spec file PlayerSpec.js like this\ndescribe(\"Player\", function() {\n  var player;\n  var song;\n\n  beforeEach(function() {\n    player = new Player();\n    song = new Song();\n  });\n\n  it(\"should be able to play a Song\", function() {\n    debugger;\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song);\n\n    //demonstrates use of custom matcher\n    expect(player).toBePlaying(song);\n  });\n\n  describe(\"when song has been paused\", function() {\n    beforeEach(function() {\n      player.play(song);\n      player.pause();\n    });\n\n    it(\"should indicate that the song is currently paused\", function() {\n      expect(player.isPlaying).toBeFalsy();\n\n      // demonstrates use of 'not' with a custom matcher\n      expect(player).not.toBePlaying(song);\n    });\n\n    it(\"should be possible to resume\", function() {\n      player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  });\n\n  // demonstrates use of spies to intercept and test method calls\n  it(\"tells the current song if the user has made it a favorite\", function() {\n    spyOn(song, 'persistFavoriteStatus');\n\n    player.play(song);\n    player.makeFavorite();\n\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  });\n\n  //demonstrates use of expected exceptions\n  describe(\"#resume\", function() {\n    it(\"should throw an exception if song is already playing\", function() {\n      player.play(song);\n\n      expect(function() {\n        player.resume();\n      }).toThrowError(\"song is already playing\");\n    });\n  });\n});\n\n, run jasmine:ci\nAll sucessfull, but debugger is not running, why?\nIt looks, that in usual case, we must use something like this:\n$ node debug file.js\nBut how to use it with jasmine ?\nWith the best regards, Ruslan.", "createdAt": "2015-04-09T08:12:25Z", "updatedAt": "2015-04-09T17:59:00Z", "closedAt": "2015-04-09T17:59:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rusikf", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rusikf", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-09T17:59:00Z", "contents": "It sounds like you're using the jasmine ruby gem to run the specs, which is designed for running javascript specs in a browser, not in nodejs. If you want to debug the specs, you'll want to run the rake jasmine task and load the page in a browser to debug.\nIf your intent is to test nodejs code, you should look at the jasmine-npm.\nYou are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 821, "url": "https://github.com/jasmine/jasmine/issues/821", "title": "add a global \"custom matcher registration\"-method", "contents": "I've seen that this was already request in #721 and it was denied to implement it.\nBut as I'm quite sure that there are several people having the same issue, I'm asking again to implement a method to register a new matcher globally.\n\"Why?\" you're may asking: The reason is simple. It's really painful to add a matcher over and over again, if you want to use it in several beforeAll methods - it simply adds more boilerplate code.\nWhy not add the possiblity to add matchers to a global list like the default matchers are?\nAnd even more horrible: If I want to use the \"jasmine-matchers\" library, there is no way to access and register the matchers at all from the outside.\nSo please: Think again about adding a global matcher registration method.\nThank you. :)", "createdAt": "2015-04-09T13:33:05Z", "updatedAt": "2017-05-02T21:22:27Z", "closedAt": "2015-04-09T17:43:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "GFriedrich", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "GFriedrich", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "77ganesh", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-09T17:43:49Z", "contents": "After a bit of testing it looks like the cascading of a custom matcher should work from a beforeAll that is inside a describe but not a global one. There are a couple of other issues around global beforeAlls and afterAlls that are related to this. See #811\nInstead of adding a new thing to jasmine's interface, I'd prefer to make a global beforeAll work more like one inside a describe.\nClosing this in favor of #811\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "77ganesh", "authorAssociation": "NONE", "createdAt": "2017-04-25T05:49:04Z", "contents": "@GFriedrich You can add global matchers using this\njasmine.Expectation.addCoreMatchers(matchers)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T20:43:08Z", "contents": "The addCoreMatchers method is an internal implementation detail and not part of Jasmine's public interface. As such, it is susceptible to breaking changes without notice. If you want to add matchers to all of your specs, you should either register it in a global beforeEach or possibly now a beforeAll.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "77ganesh", "authorAssociation": "NONE", "createdAt": "2017-05-02T07:49:57Z", "contents": "Ohh! Sorry I didn't know that..  I use jasmine with protractor and I need custom matchers like toBePresent() toBeDisplayed() throughout the entire test suites. Will there be a possibility for such method in the future?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-02T21:22:27Z", "contents": "A matcher registered in a beforeEach is available to all specs within the describe where it is called. If the beforeEach is declared outside of any describe, any matchers in it will be available to all specs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 822, "url": "https://github.com/jasmine/jasmine/issues/822", "title": "Calling done() multiple time inside a single test scope leads to unpredictable behavior", "contents": "I've started using Jasmine 2.1.3 for some async tests, and found the done() a really helpful future.\nIn one of my tests, I accidentely called done() twice:\ndescribe('Some random async tests', () => {\n  it('should not be passing', (done) => {\n    //done();\n    setTimeout( () => {\n      expect(true).toBe(false);\n      done();\n    },\n    200\n    );\n  });\n\n  it('should be passing1',(done) => {\n    setTimeout(\n      () => { done(); },\n      200\n    )\n  });\n  it('should be passing2',(done) => {\n    setTimeout(\n      () => { done(); },\n      200\n    )\n  });\n  it('should be passing3',(done) => {\n    setTimeout(\n      () => { done(); },\n      200\n    )\n  }); \n);\nWhen in 'it should not be passing', the first done() is commented out, things work as expected: 3/4 tests succeed and the failing test is 'it should not be passing'.\nHowever, if you allow the 'it should not be passing' to call done(), then later (timeout) make an invalid expect and call done again, the test runner reports 3/4 tests failed and the failing test is 'it should be passing2'.\nI've debugged my tests for countless hours and doubted my entire code base as every time I commented out any 'it should be passing' test that was failing, one other test that was working before would now randomly start failing.\nAgreed, developers should not call done() multiple times in a single test, but when they do it would be nicer to inform them of their mistake than to report a false negative on another random test.", "createdAt": "2015-04-10T23:54:49Z", "updatedAt": "2015-04-19T17:25:41Z", "closedAt": "2015-04-16T20:15:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "janvanderhaegen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "janvanderhaegen", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-16T20:15:48Z", "contents": "This looks like it is more likely the result of doing more work in your spec after calling done than that you've called it twice. The failure mode that we saw in 2.0.0, before it was fixed in 2.0.1, was that calling done a second time, would start running the next spec again.\nHere I think you would see the same behavior you're seeing now even if you remove the call to done in the first setTimeout as long as you call done before setTimeout.\nUnfortunately, there isn't much we can do about this, especially in the async case. Once you've called done you've told jasmine that it is safe to move on to the next thing in the queue.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "janvanderhaegen", "authorAssociation": "NONE", "createdAt": "2015-04-16T23:59:20Z", "contents": "Is the 'done' passed to each test case a shared instance? Could it not be a new instance which keeps track of how many times it's been called?\nWas just a thought, hopefully there's not much airheads like me coding around ;-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-19T17:25:41Z", "contents": "As of 2.0.1, this is exactly what happens, and the failure mode you're seeing is indicative of running async code after calling done than calling done multiple times.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 823, "url": "https://github.com/jasmine/jasmine/issues/823", "title": "toThrowError does not handle a function call with an argument ...", "contents": "... which is odd. Write now the function has to be wrapped inside another function for it to work. Will there be a fix in the near future?", "createdAt": "2015-04-14T12:57:11Z", "updatedAt": "2015-05-12T00:33:49Z", "closedAt": "2015-05-12T00:33:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lokeb", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "lokeb", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "amavisca", "company": null}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "nertzy", "company": "@pivotal and @nertzdyne"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-16T20:33:27Z", "contents": "I'm not sure how you would pass the argument to the function, given that you don't want it to execute at declaration time, but wait until the spec is running.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lokeb", "authorAssociation": "NONE", "createdAt": "2015-04-28T07:04:22Z", "contents": "There is another problem. When calling in this manner, the context of the call is Window, which is going to create problems when the function expects to be called in the context of the object it is contained in, i.e., it refers to this, and expects the expected.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2015-04-28T07:22:35Z", "contents": "If you're able to use bind, that would let you pass the this and the arguments.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2015-04-28T09:10:59Z", "contents": "Building on this, I think\nexpect(MyMathLib.add, [1, 'two']).toThrow(NotAnIntegerError);\n\nLooks nicer than\nvar plsThrow = function () {\n    MyMathLib.add(1, 'two');\n};\n\nexpect(plsThrow).toThrow(NotAnIntegerError);\n\nOr even\nexpect(function() {\n    MyMathLib.add(1, 'two');\n}).toThrow(NotAnIntegerError);\n\nThe first version cuts out the need of an intermediate wrapping function. In my tests I have quite a few of these things that could be cleaned up this way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nertzy", "authorAssociation": "NONE", "createdAt": "2015-04-28T17:11:03Z", "contents": "Would be interesting to add a calledWith matcher that could support something like the following:\nexpect(MyMathLib.add).calledWith(1, 'two').toThrow(NotAnIntegerError);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-12T00:33:49Z", "contents": "Neither of the proposed solutions from @jaapz and @nertzy solve the problem of specifying what the this should be when the function is executed. If we're not going to solve that problem, I don't think we want to try to only address arguments to the function. Additionally, the interface for specifying the context for execution becomes clunky (expect(foo).calledWith(1).calledOn(4).toThrow) or possibly confusing (expect(foo, [1], 4).toThrow).\nBoth of the solutions also require a lot of code to write and maintain from jasmines point of view, just to make it so you don't have to wrap your call in an anonymous function. Additionally, it seems to me that the anonymous function is a lot more clear about what exactly is happening (the toThrow or toThrowError matcher is going to invoke the function and expect something to be thrown).\nI don't think this is something we're going to implement in jasmine itself, but I'd be happy to link to a plugin that is able to accomplish this.\nThanks for using jasmine!\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 824, "url": "https://github.com/jasmine/jasmine/issues/824", "title": "question about done() in beforeAll/afterAll", "contents": "From http://jasmine.github.io/2.0/upgrading.html#section-Asynchronous_Specs, it is pointed out that it/beforeEach/afterEach can take a done() callback. However, from experimenting, it feels like beforeAll/afterAll will take this callback too. Is this supported behavior? If so, would you please specify in the docs?\nFor example:\ndescribe('test', function() {\n  var x = [];\n  beforeAll(function(done) {\n    setTimeout(function() {\n      x.push('beforeAll');\n      done();\n    }, 100)\n  });\n\n  beforeEach(function(done) {\n    setTimeout(function() {\n      x.push('beforeEach');\n      done();\n    }, 100)\n  });\n\n  it('before/after all', function() {\n    console.log('result: ', x);\n  });\n});\nprints\nresult:  [ 'beforeAll', 'beforeEach' ]", "createdAt": "2015-04-15T18:34:09Z", "updatedAt": "2015-04-16T20:21:44Z", "closedAt": "2015-04-16T20:21:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hankduan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hankduan", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-16T20:21:44Z", "contents": "beforeAll and afterAll can also accept a done callback to execute asynchronously.\nIt looks like a mention of this got missed in the 2.1 docs when they were introduced.\nIf you'd like to help update the docs, they live on github and we accept pull requests\nI'm going to close this issue, since it seems like your major question is answered and this is more of a documentation issue. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 825, "url": "https://github.com/jasmine/jasmine/issues/825", "title": "feature request: toHaveBeenCalledWith and call count", "contents": "In situations where I want to test spy's I'm finding the existing assertions a bit awkward.\nfirstly, toHaveBeenCalledWith is ambiguous as to whether it means \"has been called once and it was called with\" or \"it was last called with\" or \"it was called at some point with\".\nI had expected the first as the most useful for testing, then the 2nd as a little useful and closer to the english but was surprised by the last. I guess it makes sense because of the toHaveBeenCalled matcher. Maybe that confusion was just me..\nWhen would you want to check something had been called with x at some point? I'm using reset, but then I might be fooled into thinking I had a good enough test with\nspy.reset();\ntest();\nexpect(spy).toHaveBeenCalledWith(\"\");\n\nwhere as ideally I want to test that the call count is 1. Would you ever not care how many times a function had been called? So I think that the majority of people using this function probably want to do...\nspy.reset();\ntest();\nexpect(spy).toHaveBeenCalledWith(\"\");\nexpect(spy.calls.count()).toEqual(1);\n\nFurthermore, if what I am testing tests twice I am left with assertions that don't look great\n// I care about ordering\nspy.reset();\ntest();\nexpect(spy.calls.count()).toEqual(2);\nexpect(spy.calls.argsFor(0)).toEqual([\"1\"]);\nexpect(spy.calls.argsFor(1)).toEqual([\"2\"]);\n\n// I don't care about ordering\nexpect(spy.calls.count()).toEqual(2);\nexpect(spy).toHaveBeenCalledWith(\"1\");\nexpect(spy).toHaveBeenCalledWith(\"2\");\n\nSo, I'm wondering about better syntax, something like the below ?\nexpect(spy).toHaveBeenCalled.once.with(\"1\")\nexpect(spy).toHaveBeenCalled.first.with(\"1\");\nexpect(spy).toHaveBeenCalled.second.with(\"1\");\n\nor\nexpect(spy.calls.first()).toHaveBeenCalledWith(\"1\")\nexpect(spy.calls.second()).toHaveBeenCalledWith(\"2\")\n\nso what do you think? the main thing is I am finding in the wild quite messy assertions in some instances and lovely clean ones in others. Thanks.", "createdAt": "2015-04-17T14:26:26Z", "updatedAt": "2019-06-14T20:55:10Z", "closedAt": "2015-04-20T07:52:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lukeapage", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "lukeapage", "company": "@SaxoBank"}, {"login": "ulrichb", "company": null}, {"login": "bebepeng", "company": null}, {"login": "tkane2000", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "lukeapage", "authorAssociation": "NONE", "createdAt": "2015-04-19T10:59:12Z", "contents": "After implementing custom matchers for this, I think the benefit is probably small. Other than changing things in a bigger way - I'm not sure what to do. Maybe its just documentation, maybe its just me. Feel free to close if you can't see anything of benefit here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ulrichb", "authorAssociation": "NONE", "createdAt": "2016-03-26T22:36:37Z", "contents": "I would also like to have this feature. But: In 90% of these cases I want to assert \"exactly once\" bahavior.\nSo what about expect(mySpy).toHaveBeenCalledOnceWith('argA', 'argB', 'argC')?", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "bebepeng", "authorAssociation": "NONE", "createdAt": "2017-02-01T19:39:58Z", "contents": "Or something like expect(mySpy).toHaveBeenCalledWith('argA', 'argB', 'argC').times(1)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "tkane2000", "authorAssociation": "NONE", "createdAt": "2019-06-14T20:55:10Z", "contents": "Here's a quick fix (there should be a slicker way to do this):\n// count how many times commit is called with first arg of 'foo'\nconst count = storeStub.commit.mock.calls.reduce((accum, mockCall) => { accum += (mockCall[0] === 'foo'); // where foo is name of arg return accum; }, 0);", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 826, "url": "https://github.com/jasmine/jasmine/issues/826", "title": "Clock uninstall doesn't work if spy is added on setTimeout after installation", "contents": "See the following block:\ndescribe('clock calls', function () {\n    beforeEach(function () {\n        jasmine.clock().install();\n    });\n\n    afterEach(function () {\n        jasmine.clock().uninstall();\n    });\n\n    it('', function () {\n        spyOn(window, 'setTimeout');\n    });\n});\n\nit('', function () {\n    // window.setTimeout is still non-native\n})\nIf a spy is added on window.setTimeout after clock().install();, the clock().uninstall() doesn't uninstall on window.setTimeout.\nI also noted that adding the spy before clock installation works with expected behavior, though.", "createdAt": "2015-04-17T22:11:21Z", "updatedAt": "2017-04-12T20:42:23Z", "closedAt": "2015-09-24T22:55:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chrisirhc", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "chrisirhc", "company": "@uber "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "czajkowski", "company": null}, {"login": "nwhite89", "company": "Scoota"}], "comments_count": 13, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-20T20:17:55Z", "contents": "What version of jasmine are you using? When I try a slightly modified version it seems to be working correctly to me\ndescribe('clock calls', function () {\n  beforeEach(function () {\n    jasmine.clock().install();\n  });\n\n  afterEach(function () {\n    jasmine.clock().uninstall();\n  });\n\n  it('spies on setTimeout', function () {\n    spyOn(window, 'setTimeout');\n    expect(window.setTimeout.calls).not.toBeUndefined();\n  });\n});\n\nit('has a native setTimeout', function () {\n  expect(window.setTimeout.calls).toBeUndefined();\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisirhc", "authorAssociation": "NONE", "createdAt": "2015-04-20T23:14:25Z", "contents": "I'm using 2.2.0 . Perhaps this has been resolved in 2.2.1 .", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "czajkowski", "authorAssociation": "NONE", "createdAt": "2015-05-07T10:16:55Z", "contents": "I ma having a similar problem in 2.3.0.\nClock is not being uninstalled correctly when I use spyOn(window, \"clearTimeout\") in our tests.\nThe problem doesn't exist when I move installing/uninstalling the clock to beforeAll/afterAll.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-07T21:45:00Z", "contents": "I think I know what's going on here, and why the spec I wrote was passing while you are still seeing the issue. What's happening in this situation is:\n\nclock().install() replaces all of the timing functions on window with stubs\nspyOn then replaces the replacement with a stub and remembers the previous function (which is the stubbed version from the clock)\nclock().uninstall() reinstalls the built-in timing functions\nspies get cleaned up after all afterEach functions are called and this replaces the real timing functions with the \"original\" function at the time the function was spied on.\n\nThis means that the default clock uninstall is getting overridden when the spy is uninstalled. For this reason at least, you probably shouldn't be spying on timing functions when using jasmine's mock clock\nI hope this helps. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisirhc", "authorAssociation": "NONE", "createdAt": "2015-06-06T01:41:02Z", "contents": "This makes it very difficult to test whether tests are actually calling the timing functions, and with which arguments.\nFor example, allowing the following in a test:\nexpect(setTimeout).toHaveBeenCalledWith(jasmine.any(Function), 5000);\njasmine.clock().tick(5000);\n\nI'm thinking there's two ways to achieve this:\n\nAllow access to the jasmine clock instance and allow mocking it.\nAll replaced methods are also spies, or have an option for this.\n\nWould be happy to submit a PR if we decide on a way to achieve this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-08T14:03:38Z", "contents": "For any given spec, you should either use spies to assert that you call the timing functions exactly how you want, or use the mock clock and do something like:\njasmine.clock().install();\n// call the thing that calls setTimeout\n\njasmine.clock().tick(5000);\n// expect the effects from the background call\n\n// and if you want to also check that you used setTimeout and not setInterval\njasmine.clock.tick(5000);\n// expect not to have duplicates.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisirhc", "authorAssociation": "NONE", "createdAt": "2015-06-08T14:50:39Z", "contents": "I'm aware that those are my current options. However, what I'm asking is to allow for spying on the timing functions after installing the mock clock. The reason for this is that I'm testing code that's supposed to run asynchronously. setTimeout and setInterval are called multiple times. I need to check that they're called with the correct arguments and ensure that they run at in the time order that they were invoked with.\nThe first thing that came to mind was to mock the clock. Now with the current solution, I'm faced with the choice of mocking the clock myself instead of using Jasmine's mock clock as I cannot both spy the methods and use the mock clock.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-12T20:48:55Z", "contents": "If you really think you need to assert that the delay that was passed to setTimeout was 5000 and not 4999, then you should probably use spies. I can't think of an application where I would need that level of specificity. Additionally, when you spy on the functions, the best you can check for with the actual function that is passed is jasmine.any(Function) which isn't helpful. If you want to test the side effects, you're left executing the function yourself.\nOn the other hand, if you use the mock clock, you can tick() to just after each of your setTimeouts and setIntervals should be scheduled, and you should see everything run. You can do as many or as few tick()s during a spec as you want, so there should be no problem to test multiple setTimeout and setInterval calls. And if you want, you can always tick() to some value under the expected 5000, and assert that nothing has changed before tick()ing the remainder of the way to 5000.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisirhc", "authorAssociation": "NONE", "createdAt": "2015-06-12T22:00:51Z", "contents": "Take for example, an application where the setTimeout time was not constant, but a variable. You need to both assert that it was called with the correct time, and make sure that they're executed in order.\nI think your solution works fine if the assumption is that I'm testing an expected constant timeout. However, that's not a case. I'm working with an asynchronous API where certain events need to happen with variable timeout. Not only that, setTimeout is called several times with different functions. I would like to test that the specific functions are called with the correct timeouts.\nSince the timeout is variable, and the function is not, I'm able to check whether setTimeout is called with a specific function (since it doesn't necessarily have to be called with an anonymous function) rather than any function.\nI know that Jasmine has the methods for doing such specific testing and matching, which is why I picked this excellent framework. It's just the usage of the mock clock negates this capability for timing functions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-21T21:08:36Z", "contents": "If your test is checking the exact timeout that is passed to setTimeout, then you by definition have enough information to instead step forward that number of milliseconds in the mock clock. So even if you have an algorithm for figuring out how long to delay an action, and not just a constant number, you should still be able to use the mock clock.\nIf you feel you need to have some specs that spyOn some of the timing functions, these should probably be separate from the specs that use the mock clock to run the asynchronous functions.\nI don't think this is functionality that we are likely to change. The two solutions I can think of are:\n\nNo longer automatically clean up spies for you at the end of your spec.\nStart automatically uninstalling the clock again, so we can control order of cleanup.\n\nWe don't want to do 1. because that would leave a large burden on the user writing the specs to remember to clean up their spies when done (and do it in the proper order).\nI'm not sure we want to do 2. either. When we were working on 2.0, we made the decision to require an explicit uninstall of the mock clock to make it work more like other plugins that needed explicit install/uninstall steps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T22:55:15Z", "contents": "We haven't heard anything else on this issue in a while, so I'm going to close it for now. Feel free to continue discussion here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nwhite89", "authorAssociation": "NONE", "createdAt": "2017-04-12T08:54:12Z", "contents": "I'm having a very similar issue I need to have the clearInterval inside the setInvterval as I need to ensure that the interval is removed after running x amount of times. This works in 2.1.3 however, moving ahead then fails any ideas?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-12T20:42:23Z", "contents": "@nwhite89 I don't think that is related to this issue. Can you open a new issue with an example suite that fails and what the failure mode is so we can look into it?\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 829, "url": "https://github.com/jasmine/jasmine/issues/829", "title": "Async timeouts while writing sync specs", "contents": "Hello,\nI get error Error: 'expect' was used when there was no current spec, this could be because an asynchronous test timed out while I am writing synchronous specs and 100% sychronous code.\nLog:\nFailures:\n1) RadioKit.Data.Interface #getQuery if one argument is passed and it is valid but there's no such query encountered a declaration exception\n1.1) Error: 'expect' was used when there was no current spec, this could be because an asynchronous test timed out\n\nI am using jasmine 2.2.1 and gulp to compile coffeescript to JS prior to execution.\n  describe \"#hasQuery\", ->\n    instance = null\n\n    beforeEach ->\n      instance = new RadioKit.Data.Interface({ authUserName: \"123\", authPassword: \"123\" })\n\n    describe \"if no argument is passed\", ->\n      it \"throws an error\", ->\n        expect ->\n          instance.hasQuery()\n        .toThrow()\n\n    describe \"if one argument is passed\", ->\n      describe \"but it is invalid\", ->\n        describe \"because it contains something different than a string\", ->\n          it \"throws an error\", ->\n            expect ->\n              instance.hasQuery(123)\n            .toThrow()\n\n      describe \"and it is valid\", ->\n        describe \"but there's no such query\", ->\n          it \"returns false\", ->\n            expect(instance.hasQuery(\"myQuery\")).toBe(false)\n\n        describe \"and there's such query\", ->\n          beforeEach ->\n            instance.addQuery(\"myQuery\", \"Track\")\n\n          it \"returns true\", ->\n            expect(instance.hasQuery(\"myQuery\")).toBe(true)", "createdAt": "2015-04-20T08:33:59Z", "updatedAt": "2015-11-29T13:01:33Z", "closedAt": "2015-07-01T01:25:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mspanc", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "mspanc", "company": "@membraneframework @SoftwareMansion @radiokit "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "casertap", "company": "@jobseekerltd "}, {"login": "jescacena", "company": null}, {"login": "maxime1992", "company": "@cloudnc"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-20T20:31:54Z", "contents": "Are you able to find a subset of your specs (possibly one) that has this problem, or are you only seeing it when you run the full suite? I tried taking your example here and compiling to javascript and I didn't see any issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "casertap", "authorAssociation": "NONE", "createdAt": "2015-05-03T20:06:04Z", "contents": "Same error here. Did you find a solution to this problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "casertap", "authorAssociation": "NONE", "createdAt": "2015-05-03T20:30:10Z", "contents": "My grunt task was defining:\nframeworks: ['mocha', 'jasmine']\n\nI just removed the mocha framework and it worked.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jescacena", "authorAssociation": "NONE", "createdAt": "2015-06-29T09:15:55Z", "contents": "it worked for me \ud83d\udc4d  Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-01T01:25:10Z", "contents": "It sounds like this is coming up due to misconfiguration within karma,and not directly because of Jasmine itself. I'm going to close this for now, but please reopen if you can narrow it down to something Jasmine is doing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maxime1992", "authorAssociation": "NONE", "createdAt": "2015-11-29T13:01:33Z", "contents": "@casertap thanks, i was lost !\nEven expect(true).toBe(true); was not working and i was loosing time for nothing \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 830, "url": "https://github.com/jasmine/jasmine/issues/830", "title": "Cannot perform a 'it' inside another 'it'", "contents": "Hi everyone,\nI recently upgrade to Jasmine 2.0 and my code does not work anymore. Let me explain my problem:\nI fill a variable in a beforeAll method, and I use this variable to perform a forEach which contains some 'it'. My code is similar as this:\ndescribe ('Main describe', function() {\n    var table;\n    beforeAll( function(done) {\n        table = anotherScript.method();\n        done();\n    });\n\n    it(\"first it\", function(done) {\n        //I perform some actions...\n        done();\n    });\n\n    table.forEach (function(item) {\n        it(\"it in the loop\", function(done) {\n            //I perform some actions...\n            done();\n        });\n    });\n}); \nBut my problem is the code read the loop before the beforeAll is executed and at this moment my 'table' variable is empty, so the code never enters in the loop...\nBefore I upgraded to Jasmine 2.0, I just put my loop in another 'it' like this:\nit(\"it that contains my loop\", function() {\n    describe(\"describe that contains my loop\", function() {   \n        table.forEach (function(item) {\n            it(\"it in the loop\", function() {\n                //I perform some actions...\n            });\n        });\n    });\n});\nI had no issue with 'it' inside other 'it' as long as I declare a 'describe', and the code entered in the loop after the beforeAll was performed. Jasmine 2.0 no longer accepts 'it' in another 'it': the code never enters in my second 'it'...\nI tried to fill the 'table' variable in a method that returns a promise and perform the main describe only after the promise is fulfilled: but in this case, no specs are found and the script finished.\nHave you a solution for this case ?", "createdAt": "2015-04-23T07:27:52Z", "updatedAt": "2017-09-13T14:15:29Z", "closedAt": "2015-05-12T19:06:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Aelsa", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "Aelsa", "company": null}, {"login": "mallowigi", "company": "Dynamic Yield"}, {"login": "nertzy", "company": "@pivotal and @nertzdyne"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "poojagadekar89", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "mallowigi", "authorAssociation": "NONE", "createdAt": "2015-04-23T15:16:04Z", "contents": "I think it's metaprogramming. Technically, your tests should not depend on metadata, such as your table, think that they could be written by a guy that doesn't know your code. Therefore, what you can do in such a case is to iterate over your table and create expectations, not tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nertzy", "authorAssociation": "NONE", "createdAt": "2015-04-23T17:26:22Z", "contents": "The problem is that you're mixing up code that runs at load time with code that runs at test time.\nHere's what the outermost function (the one passed to 'describe') actually does:\n\nDefine a variable named table\nTell jasmine that, in the future, when Jasmine decides to run the tests defined in this describe, it should first run the passed-in function.\nTell jasmine about a test that it should run sometime in the future.\nCall table.forEach (note that at this point the variable table is undefined, since the previous two steps didn't actually run the functions, they only just set them aside to be run later)\n\n@mallowigi's advice makes sense. If you want your tests to be based on what anotherScript.method() returns, you should do that work inside of the it block and just have multiple assertions instead.\nBonus piece of advice: If anotherScript.method() were to ever return an empty array, then you won't even have a single assertion. The test would succeed, even if that's not what you wanted. It's almost always a better idea to separately write each assertion in a verbose way when writing tests. That way your tests don't operate differently based on how the system under test operates.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Aelsa", "authorAssociation": "NONE", "createdAt": "2015-04-24T07:01:39Z", "contents": "Thanks for your comments, I will follow your advises and iterate over my table !", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-12T19:06:21Z", "contents": "Having an it inside another it was never intended functionality, and 1.3 probably shouldn't have let that happen. Since you have a way forward, and this doesn't seem like it is an issue with jasmine itself, I'm going to close this issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "poojagadekar89", "authorAssociation": "NONE", "createdAt": "2017-09-13T14:15:29Z", "contents": "I want to generate multiple protractor tests using promise value with loops, Is it possbile ?\nvar rowNumber = function call;\nrowNumber.then(function(resultTC){\nfor (var i = 1; i < parseInt(resultTC); i++) {\nit('should work for ' + i, function (done) {\nconsole.log(\"welcome\");\n});\n};\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 831, "url": "https://github.com/jasmine/jasmine/issues/831", "title": "tobeUndefined() runs out of memory", "contents": "If I use tobeUndefined() for some element on webpage , it runs out of memory and crashes.\nFollowing is my test:\nit('test for undefined element',function(){\nbrowser.get(\"https://builtwith.angularjs.org/\");\nexpect(element(by.className('myname'))).toBeUndefined();\n});\nAnd when I run it , it takes a few minutes and gives me the following:\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\nAborted (core dumped)\nALSO\ntest passes if I use the following\nit('test for undefined element',function(){\nbrowser.get(\"https://builtwith.angularjs.org/\");\nexpect(element(by.className('myname'))).toBeDefined();\n});", "createdAt": "2015-04-27T17:27:29Z", "updatedAt": "2015-05-28T23:44:25Z", "closedAt": "2015-05-28T23:44:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nishakchaudhari", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nishakchaudhari", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-04T23:53:29Z", "contents": "What browser are you seeing exhibit this behavior? toBeDefined and toBeUndefined both just check === or !== with void 0 since 2.0. It was undefined previously. There isn't really any complicated processing happening there.\nDo you maybe have something that has installed a custom toBeUndefined matcher that clobbers the built-in one?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nishakchaudhari", "authorAssociation": "NONE", "createdAt": "2015-05-09T00:49:39Z", "contents": "So it might be a protractor bug?\nI see this in Chrome. I am not using any custom toBeUndefined matcher\nBut my jasmine version is less than 2.0. will that make difference?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-11T18:01:05Z", "contents": "Pre-2.0 still just did a === undefined so I'm not sure what could be causing much in the way of memory usage.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nishakchaudhari", "authorAssociation": "NONE", "createdAt": "2015-05-11T20:34:57Z", "contents": "so this would be a protractor bug?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-13T18:41:59Z", "contents": "I don't think it is necessarily a bug with protractor, as I don't think it defines its own toBeUndefined or toBeDefined matchers either.\nOne of the things you mentioned in your original post was that it only broke when the expectation failed, but worked fine when successful. We've seen issues with serializing certain types of objects (usually out from a browser or phantomjs (see #640 and #690)). HTML nodes are the most likely to have problems, and it looks like that's what you are checking. It seems likely then, that it is not the expectation itself that is breaking, but the reporting of the failure that it attempting to serialize the DOM node that wasn't supposed to be found.\nHope this helps. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nishakchaudhari", "authorAssociation": "NONE", "createdAt": "2015-05-28T23:44:25Z", "contents": "works with version > 2. Thanks . closing the issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 832, "url": "https://github.com/jasmine/jasmine/issues/832", "title": "BeforeAll only works on first it", "contents": "I hoped that what I did in \"beforeAll\" was to continue for all \"its\" other than the \"beforeEach\" which is run again before every \"it\".\nFor example I thought I could load the \"fixture\" only once and use the same for every \"it\", keeping the changes that every \"it\" did it, because to test the next \"it\" accurate than was done in the previous, currently have to replicate every \"it\" what your anteiror did, what causes my tests grow exponentially, as each \"it\" again has everything that was done in the \"it\" Previous else to want to test it and that depends on all the above process has worked.", "createdAt": "2015-04-27T21:10:20Z", "updatedAt": "2015-09-24T21:28:27Z", "closedAt": "2015-09-24T21:28:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "roger-russel", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "roger-russel", "company": "Locaweb"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "brp-nylin", "company": "BRP Systems"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-04T23:17:26Z", "contents": "I'm not sure I quite understand exactly what behavior you are experiencing. Can you provide a sample spec/suite that exhibits the behavior and what you're expecting to happen?\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brp-nylin", "authorAssociation": "NONE", "createdAt": "2015-06-22T04:14:25Z", "contents": "I'm trying to undertand what you mean here.\nbeforeAll will run once before all the test cases (\"its\") in a describe block, beforeEach will run once per test case in that same describe block. If you want to reset something between every test case you should run it in a beforeEach block, if you want to use the same state or build upon a starting state through your test cases then you should run the code in a beforeAll.\nPlease try to include an example of what your trying to accomplish here with an explanation that ties to it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:28:20Z", "contents": "We haven't heard anything else from the community on this issue in a while, so I'm going to close it for now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 833, "url": "https://github.com/jasmine/jasmine/issues/833", "title": "Missing SpecRunner.html file ", "contents": "Hi, I have recently started learning Jasmine. Most tutorials advise to edit \"SpecRunner.html\" file run the tests. But I am unable to find this file in root folder or anywhere else ? Where can I found this file ? Thanks", "createdAt": "2015-04-28T01:58:53Z", "updatedAt": "2018-02-11T19:42:48Z", "closedAt": "2015-10-15T19:37:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "punit11", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "punit11", "company": null}, {"login": "Gerg", "company": null}, {"login": "ssmahesh", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "amit-kumar88", "company": "HireaJackal"}, {"login": "bryanjebyrd", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-28T15:26:11Z", "contents": "If you download one of the standalone releases, SpecRunner should be in the root directory.\nNote 2.2.1 is missing a standalone version, because the release only affected the bower distribution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ssmahesh", "authorAssociation": "NONE", "createdAt": "2015-05-27T11:51:04Z", "contents": "Hi, I have recently started learning jasmine.I am not able to edit the specRunner.html file.I dowloaded Standalone 2.0.0 version and also Standalone 2.3.4 version,In the root directory specRunner.html file is there,if i try to open that file it will move to chrome,but i can't edit the file.how to edit that file", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-28T23:03:29Z", "contents": "specRunner.html is just a normal html file, so you can edit the same way you edit any other html file you work with.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-15T19:37:06Z", "contents": "We haven't heard anything else from the community on this in a while, so I'm going to close it for now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amit-kumar88", "authorAssociation": "NONE", "createdAt": "2017-02-08T13:09:14Z", "contents": "Hi.\nHi, I have recently started learning Jasmine and downloaded standalone 2.5.1. Most tutorials advise to edit \"SpecRunner.html\" file run the tests. But I am unable to find this file in root folder or anywhere else ? Where can I found this file ?\nThanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:21:18Z", "contents": "The 2.5.1 standalone zip from the releases page definitely includes the SpecRunner.html file, I just checked. Where did you get the standalone package from?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bryanjebyrd", "authorAssociation": "NONE", "createdAt": "2018-02-11T19:42:48Z", "contents": "@slackersoft I'm guessing this is a common theme when you download jasmine from NPM. I am in the same boat but I'm going to head to that releases page you attached and go from there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 834, "url": "https://github.com/jasmine/jasmine/issues/834", "title": "Custom \"chain\" keywords.", "contents": "Does Jasmine offer any methods to add a custom chain?\nFor example:\n// currently you can negate the result \n// of any expectation using the \"not\" keyword\nexpect(true).not.toBe(false);    // test passes\nBut, how would I go about doing something like this:\n// I want to add my own \"or\" keyword, for example.\nexpect('Hello Jasmine').toMatch(/hello/i).or.toMatch(/jasmine/i);", "createdAt": "2015-04-28T13:57:23Z", "updatedAt": "2015-09-24T21:05:34Z", "closedAt": "2015-09-24T21:05:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nbish11", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nbish11", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-04-28T21:01:49Z", "contents": "Jasmine does not have the ability to add a custom expectation modifier similar to not. It's something we've heard of a couple times, but I haven't seen a compelling use case for it yet.\nThe syntax you've suggested doesn't quite work the same way that not does, since it is actually chained onto the matcher and not the expect call, so I don't think that particular syntax is something we want to support.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:05:34Z", "contents": "We haven't heard anything else from the community about this way of chaining matchers, so I'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 835, "url": "https://github.com/jasmine/jasmine/issues/835", "title": "Why does jasmine.HtmlReporter() need the user to define each function??", "contents": "I'm talking about this:\nvar env = options.env || {},\n      getContainer = options.getContainer,\n      createElement = options.createElement,\n      createTextNode = options.createTextNode,\n      onRaiseExceptionsClick = options.onRaiseExceptionsClick || function() {},\n      onThrowExpectationsClick = options.onThrowExpectationsClick || function() {},\n      addToExistingQueryString = options.addToExistingQueryString || defaultQueryString,\n      timer = options.timer || noopTimer,\n      results = [],\n      specsExecuted = 0,\n      failureCount = 0,\n      pendingSpecCount = 0,\n      htmlReporterMain,\n      symbols,\n      failedSuites = [];\n\nWhy is the user supposed to pass all these in??", "createdAt": "2015-04-29T18:52:14Z", "updatedAt": "2015-09-24T21:15:51Z", "closedAt": "2015-09-24T21:15:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dopatraman", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dopatraman", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-04-29T19:44:18Z", "contents": "Jasmine uses dependency injection to increase modularity and testability. For most cases, users should use boot.js instead of constructing HtmlReporter directly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:15:46Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. If you have questions about developing for jasmine you can use the jasmine-js-dev group We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 837, "url": "https://github.com/jasmine/jasmine/issues/837", "title": "Weird Issue, all tests fails on adding an extra it, or xit to a describe", "contents": "I have a set of tests described under one \"describe\" which all pass without an issue. But the moment I add another \"it\" section, all other tests start to fail. Not only that but even when it is \"xit\", all other tests start to have problems. The only way to get the tests to work, is to remove or comment out the section completely. This is the most unusual behavior that I have seen ever.", "createdAt": "2015-04-30T11:16:08Z", "updatedAt": "2015-04-30T11:50:53Z", "closedAt": "2015-04-30T11:50:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lokeb", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "lokeb", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 838, "url": "https://github.com/jasmine/jasmine/issues/838", "title": "Testing a function that has a callback and a return value", "contents": "How do I test a function that has a callback and an immediate return value? Using 'done', ignores the test for the return value, and only considers the tests in the callback function.", "createdAt": "2015-05-02T05:40:44Z", "updatedAt": "2015-09-24T21:06:34Z", "closedAt": "2015-09-24T21:06:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lokeb", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lokeb", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-04T23:54:20Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 839, "url": "https://github.com/jasmine/jasmine/issues/839", "title": "The jasmine page cannot be scrolled in Safari and Chrome on OS X 10.10", "contents": "I'm using jasmine 2.3, the previous version seems doesn't have this issue.\nAfter clicking on a specific test, sometimes the page can be scrolled.", "createdAt": "2015-05-03T05:02:20Z", "updatedAt": "2015-05-28T19:25:26Z", "closedAt": "2015-05-28T19:25:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zhangkaiyulw", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "zhangkaiyulw", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-13T23:37:47Z", "contents": "I just checked on a Yosemite machine against jasmine's own test suite (about 550 specs) and I don't have any problem scrolling the page in either browser.\nIs there maybe something still happening in the background (a custom reporter or something) that could be pre-empting the browsers scrolling?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zhangkaiyulw", "authorAssociation": "NONE", "createdAt": "2015-05-14T01:39:02Z", "contents": "The causing may be this test suite, the tested function uses setTimeOut internally.\ndescribe \"Dispatch After\", ->\n  a = 20\n  time = new Date().getTime()\n  beforeEach (done) ->\n    CB.DispatchAfter (-> a = 30; done()), 2000\n\n  it \"should perform after some time\", ->\n    later = new Date().getTime()\n    expect(a).toBe(30)\n    expect(later - time).toBeGreaterThan(2000)\n    expect(later - time).not.toBeGreaterThan(2200)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-28T19:25:26Z", "contents": "As long as the done callback is invoked after all async work has completed, there shouldn't be anything else running in the background.\nI'm going to close this issue as it doesn't seem like an issue with jasmine itself, but rather something in your test suite that is causing problems. You can also try asking a question on the jasmine-js group.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 840, "url": "https://github.com/jasmine/jasmine/issues/840", "title": "Specs with xit or no function are no longer reported as pending", "contents": "The docs say that xit and functionless specs will be marked as pending which is currently not the case. It seems both of these are disabled and not reported on. The docs currently suggest that xit specs and xdescribe suites will not be reported on at all.\nShould the docs be updated to clarify that only specs with a call to pending are actually reported as pending and others are hidden?\nMy view is that functionless specs should still be reported as pending since they have not be explicitly disabled and represent an unfinished (i.e. pending) test rather than one that is purposely hidden.", "createdAt": "2015-05-04T12:15:42Z", "updatedAt": "2015-05-07T20:47:37Z", "closedAt": "2015-05-07T20:47:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benjaminjosephw", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "benjaminjosephw", "company": null}, {"login": "nickmccurdy", "company": null}, {"login": "mikepack", "company": "Spacebar"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "nickmccurdy", "authorAssociation": "NONE", "createdAt": "2015-05-07T13:36:04Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikepack", "authorAssociation": "NONE", "createdAt": "2015-05-07T15:30:54Z", "contents": "This is holding up support for Jasmine 2.3 in https://github.com/modeset/teaspoon", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-07T18:58:40Z", "contents": "The docs should probably be updated so they no longer incorrectly say that specs declared with xit are pending, they should always have been disabled as they are now.\nFunctionless its should be pending and are currently not as of 2.3. This was an unintended change and we'll need to work on a fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-07T20:46:22Z", "contents": "Upon further inspection, an xit spec will actually be marked pending but and not disabled, but a spec that is a child of an xdescribe will be disabled.\nI think I have a fix for the functionless specs being reported incorrectly, and will work to get that out soon.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 841, "url": "https://github.com/jasmine/jasmine/issues/841", "title": "toHaveBeenCalledWith(param1, undefined) is not considered equivalent to toHaveBeenCalledWith(param1)", "contents": "IMHO these two cases are functionally the same, and should be treated as such (i.e. a test should not fail if you declare toHaveBeenCalledWith(param1) but the function is called with (param1, undefined).", "createdAt": "2015-05-04T18:16:22Z", "updatedAt": "2015-05-12T16:48:02Z", "closedAt": "2015-05-12T16:48:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "settinghead", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "settinghead", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-12T16:47:59Z", "contents": "Jasmine prefers to err on the side of being a bit more explicit in how things behave. This means that toHaveBeenCalledWith compares the expected argument with the actual argument list in the same way that jasmine compares all arrays, so that argument lists of different lengths are considered to be different.\nAlso see this comment for more discussion.\nThis is the currently desired functionality from jasmine's point of view, so it isn't something we're thinking about changing at this point in time.\nThanks for using jasmine! Closing this issue, but feel free to continue the discussion.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 842, "url": "https://github.com/jasmine/jasmine/issues/842", "title": "Async reporter hooks", "contents": "See angular/protractor#1938\nWe want to be able to respond asynchronously to test failures. For instance, taking a screenshot of the browser in selenium webdriver when an end-to-end test fails. We can't do this in afterEach or afterAll since those functions don't have access to the pass/fail state of the spec. Nor can we do it reliably in the reporter, since specDone and suiteDone assume synchronous execution.\nTo address this problem, an optional done callback could be added to reporter functions. Here's an example of how we could apply it to specDone:\njasmine.getEnv().addReporter({\n  specDone: function (result, done) {\n    if (result.failedExpectations.length === 0) {\n      return done();\n    }\n    browser.driver.takeScreenshot(function (data) {\n      // write out screenshot data to a file\n      done();\n    });\n  }\n});\nThe behavior would be similar to an async spec in that if the reporter hook takes 1 or no arguments, it is assumed to be synchronous; but if there are 2 arguments, it becomes an asynchronous reporter hook.\nWould any owners be interested in accepting this as a PR? If so, I'll look into crafting it.", "createdAt": "2015-05-04T23:18:22Z", "updatedAt": "2018-01-29T21:48:59Z", "closedAt": "2018-01-29T21:48:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ksheedlo", "authorAssociation": "NONE", "participants_count": 10, "participants_data": [{"login": "ksheedlo", "company": "Uber"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mvndaai", "company": "Solutionreach"}, {"login": "squidfunk", "company": "Freelancer, Entrepreneur"}, {"login": "c4simba", "company": null}, {"login": "stowns", "company": null}, {"login": "CommanderXL", "company": "Beijing Forestry University"}, {"login": "yjaaidi", "company": "Wishtack"}, {"login": "ajaysuwalka", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 12, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-14T00:34:48Z", "contents": "I'm still on the fence on this issue.\nOn the one hand, I totally understand what you want to do and how this would enable more powerful reporters that want to do async things.\nOn the other hand, so far jasmine has been able to treat reporter hooks as fire and forget type callbacks, and this would change that.\nIt seems that the keeping the fire and forget nature of reporter hooks is really nice, especially for the jasmine internals. And I'm not sure what the break-even point is for this. Thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ksheedlo", "authorAssociation": "NONE", "createdAt": "2015-05-14T02:22:56Z", "contents": "Totally agree with you that keeping the reporter hooks fire-and-forget would be really nice for jasmine internals. I don't know where the break-even point is either; this is one of the things I was hoping for guidance with. It's going to be hard to tell before any code is written, which is why I'm leaning towards trying it anyway and sending you some code to look at.\nOne nice thing Jasmine has going for it here is that the hooks are each only called in one place.\n\u250c\u2500[ken][Kens-MacBook-Pro][\u00b1][master \u2713][2.1.2][~/ksheedlo/jasmine]\n\u2514\u2500\u25aa for m in jasmineStarted suiteStarted specStarted specDone suiteDone jasmineDone; do grasp -r -e '__.'$m'(_$)' src/; done\nsrc/core/Env.js:225-227:(multiline):\n      reporter.jasmineStarted({\n        totalSpecsDefined: totalSpecsDefined\n      });\nsrc/core/Env.js:210:          reporter.suiteStarted(suite.result);\nsrc/core/Env.js:370:        reporter.specStarted(spec.result);\nsrc/core/Env.js:364:        reporter.specDone(result);\nsrc/core/Env.js:217:          reporter.suiteDone(result);\n\nThis will help make it easier to tell where asynchronous behavior needs to propagate. I've only skimmed through so far, but it's at least going to have to propagate through the TreeProcessor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-29T21:38:27Z", "contents": "I think it would be ideal if the async stuff could be kept contained to the ReportDispatcher, but I don't know if that is really possible.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mvndaai", "authorAssociation": "NONE", "createdAt": "2016-09-02T16:07:25Z", "contents": "I support making it Async. There are a lot of issues with it being synchronous, that mostly come up in the protractor community angular/protractor#1938.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T18:29:48Z", "contents": "Probably the nicest way to get something like this out of the current codebase is to convert the report dispatcher to use QueueRunner to handle the report callbacks. This would allow synchronous and asynchronous reporter callback, and should allow the reporter interface to largely stay the same for existing synchronous reporter callbacks.\nI would be happy to review a pull request that accomplishes this. If it turns out we would need to change the reporter interface, it may need to wait until we're ready for a 3.0 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "squidfunk", "authorAssociation": "NONE", "createdAt": "2017-07-21T10:48:09Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "c4simba", "authorAssociation": "NONE", "createdAt": "2017-08-14T13:50:11Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stowns", "authorAssociation": "NONE", "createdAt": "2017-09-02T19:55:46Z", "contents": "My personal use-case is that I'd like to write a reporter that optional ships the results to our reporting system via REST api. In the jasmineDone() step i'd like to be able to make several rest calls (which are composed via promises). However, the process exits midway through the calls being made as it doesn't wait for the async operations.\nedit: Was able to work around this issue using protractor's 'onComplete' method which will wait for a returned promise. I added a 'publishResults' public method to my reporter and called it from 'onComplete'\nonComplete: function() {\n        return myReporter.publishResults()\n                    .then(results => { console.log('complete'); })\n                    .catch(err => { console.log(err.message); });\n},", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "CommanderXL", "authorAssociation": "NONE", "createdAt": "2017-09-09T03:14:21Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yjaaidi", "authorAssociation": "NONE", "createdAt": "2017-10-12T09:43:00Z", "contents": "Hello,\nAs you can see in our fork of protractor-beautiful-reporter https://github.com/wishtack/protractor-beautiful-reporter/blob/master/index.js we are using the following pattern:\nclass Reporter {\n\n    _asyncFlow: Promise<any>;\n    \n    jasmineStarted() {\n\n        /* Wait for async tasks triggered by `specDone`. */\n        beforeEach(async () => {\n            \n            await this._asyncFlow;\n            this._asyncFlow = null;\n            \n        });\n        \n    }\n    \n    specDone(result) {\n        \n        this._asyncFlow = this._asyncSpecDone(result);\n        \n    }\n    \n    async _asyncSpecDone(result) {\n        \n        // @todo: Do your async stuff here depending on `result.status`, take screenshots etc...\n        // await takeScreenshot();\n        \n    }\n\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ajaysuwalka", "authorAssociation": "NONE", "createdAt": "2017-10-15T07:22:42Z", "contents": "@stowns Man, I don't get the words to thank but thanks a lot... You rock.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-29T21:48:59Z", "contents": "This feature has been implemented in the 3.0-features branch and will be released as part of Jasmine 3.0.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 844, "url": "https://github.com/jasmine/jasmine/issues/844", "title": "using common CSS class names on Jasmine DOM elements can cause unintended behavior", "contents": "I'm a relative new-comer in the field of front-end web dev, and there is no other comp sci / programming field in which I'm more experienced. (But hear me out anyway, ha ha.)\nWhile working on a student project, I noticed something about Jasmine which you might consider a \"bug\" which causes unintended DOM interactions between Jasmine's part of the DOM and the app-that's-being-tested's part of the DOM.\nAnd this bug does not have to exist at all; you can painlessly avoid it.\nSo, what is this problem?\nWell, I first noticed a specific case of this bug when I saw some of Jasmine's text appearing in one of the app's divs on a student project I was working on \u2014 the words \"Spec List\" and \"Failures\" appeared on top of what should have been in my app's .menu div. This occurred whenever a specification failed.\nI have reproduced a case of this bug here:\nhttp://codepen.io/prather-mcs/pen/bdVrdN\n(this Pen is loading all necessary Jasmine assets from here)\nWhen you un-comment the test expect(false).toBe(true);, then you will see the bug happen: the app's CSS for .menu is affecting the position of Jasmine's DOM elements that also have class .menu\nI'm sure you want to always keep Jasmine's information down in Jasmine's part of the document.\nSo that's a specific case where .menu is colliding.\nBut I think the general problem you would want to fix is the creation by Jasmine of DOM elements with such commonly-used class-names as these:\n\n.bar\n.menu\n.results\n.summary\n.banner\n\nIn summary, the Issue is this:\nWhile none of Jasmine's CSS rules in jasmine.css change how the app appears, style rules in the tested app which affect any class name that jasmine.css also uses can cause Jasmine's DOM content to be styled in un-intended ways, including causing it to jump right out of Jasmine's part of the page and onto the app's part of the page.\n\nI would be happy to get credit for fixing this bug -- I would go to the jasmine-html.js code that creates DOM Nodes and ensure that all CSS class names are unique (enough) by giving them slightly new names, such as changing code that would add the class .menu to a DOM Node to actually add the class .jasmine-menu instead. Then I would make corresponding changes to jasmine.css as well.\nHowever, I have not contributed to this project before, and have only been looking into the code-base for the first time this week.\nI'm thinking that there are people with seniority and authority who would probably have a better idea of how to name the CSS classes than I have, and they would have a better idea of the best Jasmine app code to write to efficiently implement the fix as well.\nWith that being said, if you would allow me to write a fix and create a Pull request to fix this bug, I would like to get some credit contributing to open source....", "createdAt": "2015-05-05T22:38:04Z", "updatedAt": "2015-05-18T21:28:34Z", "closedAt": "2015-05-18T21:28:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "prather-mcs", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "prather-mcs", "company": null}, {"login": "nertzy", "company": "@pivotal and @nertzdyne"}], "comments_count": 3, "comments_data": [{"authorLogin": "nertzy", "authorAssociation": "NONE", "createdAt": "2015-05-07T22:08:56Z", "contents": "\ud83d\udc4d to prepending jasmine- to the front of all classes and IDs that are injected into the page.\nI'd encourage you to give it a good try. If any of the maintainers disagree with any of your choices they can comment on the Pull Request and give feedback, although everything you're saying sounds quite reasonable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prather-mcs", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-07T22:16:00Z", "contents": "Thanks for the counsel. I was definitely thinking of proceeding to that next step. Told myself I'd wait a week. I have a lot of student work, but the chance to make an accepted commit to a real-world project like Jasmine is probably well worth the time. It does make sense to craft a solution and request pull, because then they can review it and tell me what they really want to see, and then I can do that, and then bam it's done. Thanks again.\nedit/update:\nI've now (2015-05-09) officially started trying to write a fix, in order to then make a pull request and start a dialog there. Figuring out how / where to implement the fix is more difficult than I first thought. But that's not a fatal problem for me. Just means I have to study the source structure carefully, at length, before I can know where to make changes.\nsecond update:\n(2015-05-10) I have now studied the development source code well enough to know all the changes all I need to make (it's \"a little more\" than what I had supposed at the outset). And I've got it to build from source with Ruby and Node. My next step should be to submit a pull request...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prather-mcs", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-14T02:21:16Z", "contents": "Okay I made a Pull Request:\n#851\nHere is the general context and the general thinking I used to implement a fix:\n\nI tried to change the classes that Jasmine uses to be \"unique enough\" by appending \"_jasmine-css\" to any class name. So what used to be called .menu should now be called .menu_jasmine-css.\nThe only files I made changes were to:\n\n/src/html/HtmlReporter.js\n/src/html/_HTMLReporter.scss\n/spec/html/HtmlReporterSpec.js\n\n\nI made changes to those places only because, as far as I could tell, Jasmine is well-modularized and the only places I needed to change were these three. I definitely had to read code in other files, because ResultsNodes and QueryStrings were included in these files, and I definitely needed to understand them in order not to break them. I also did project-wide / codebase-wide searches for relevant pieces of code.\nOne of the many mistakes I may have made was not noticing more code that needed to be changed to implement a fix for this Issue.\nTo find each and every place that CSS classes were being created or used in Jasmine, I looked at:\n\nevery CSS rule in the .scss file\nevery usage of  querySelector and querySelectorAll in the codebase\nevery usage of .getAttribute\nevery usage of methods like find that were built on top of querySelector etc...\n\n\nThis is the list of selectors I found which needed to be changed:\n.alert, .banner, .bar, .description, .duration, .empty, .errored, .exceptions, .failed, .failure-list, .failures, .failures-menu, .menu, .messages, .open, .passed, .payload, .pending, .raise, #raise-exceptions, .result, .result-message, .results, .run-options, .skipped, .spec-detail, .spec-list, .spec-list-menu, .specs, .stack-trace, .suite, .suite-detail, .summary, .symbol-summary, .throw, .throw-failures, #throw-failures, .title, .trigger, .version\nThere would be more id name changes to make, except that I had to leave them alone, for reasons I'll write up in another issue. For now, I left most ids alone.\n\nI don't care much if my particular implementation of a fix for this Issue is used. Perhaps someone will judge that there is a better method to get to the same endpoint. I just wrote a fix to get the conversation started. There's got to be more work to do before it's really fixed, right?\n\nI've written an explanation here...\nhttps://groups.google.com/forum/#!topic/jasmine-js-dev/IM7wkkJHlIw\n...for why I couldn't test my code with rake jasmine either before or after building a new lib from my changes to src and spec", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 845, "url": "https://github.com/jasmine/jasmine/issues/845", "title": "ReferenceError: pending is not defined", "contents": "Inside of one of my tests, based on an environmental condition, I am trying to call pending() as described here. I'm getting a \"ReferenceError: pending is not defined\" error.", "createdAt": "2015-05-07T01:22:46Z", "updatedAt": "2015-05-07T01:29:05Z", "closedAt": "2015-05-07T01:29:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JZ-at-TP", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "JZ-at-TP", "company": "Sagely"}], "comments_count": 1, "comments_data": [{"authorLogin": "JZ-at-TP", "authorAssociation": "NONE", "createdAt": "2015-05-07T01:29:05Z", "contents": "Sorry, though I was running 2.0 but it looks like I'm still on 1.3.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 846, "url": "https://github.com/jasmine/jasmine/issues/846", "title": "Attributes set on the \"this\" keyword inside root beforeAll can no longer be accessed inside describe block", "contents": "Hey, thank you guys so much for maintaining this project! It has helped me out so much! I love Jasmine's \"this\" keyword. While doing some tests and upgrading from Jasmine version 2.2.1 to 2.3.0, I noticed my tests no longer passed because of a change that was made in the way the \"this\" keyword can be used. I want to understand why this change was made, and if the Jasmine team as well as people using Jasmine would support reverting this change. Take for example the following code:\nbeforeAll(function() {\n    this.attr = 1;\n})\n\ndescribe('Testing root beforeAll', function() {\n    it('should be able to access \"attr\"', function() {\n        expect(this.attr).toEqual(1);\n    });\n});\nNote that in the test we are setting an attribute on the \"this\" keyword inside a beforeAll function that executes on the root level. Executing this test in version 2.2.1 (both the standalone and npm versions) shows the test as passing. However, in version 2.3.0 the test fails.\nLet me explain my argument for why this should be changed to work in the latest version of Jasmine. In Jasmine versions 2.2.1 and 2.3.0 I've noticed that inside any describe block you can access attributes on the \"this\" keyword that were set in the beforeAll function of that describe block, regardless of the nesting level inside the block from which you attempt to access those attributes. It only seems logical that the same rules would apply to beforeAll functions on the root level that set attributes on the \"this\" keyword.\nWhy is this a big deal? Normally you could just use global variables, or put the beforeAll function inside your describe block, and then you could access the attribute just fine. This doesn't work for me though because I chose to use helper files to avoid redundancy in my code. Inside the helper file a beforeAll on the root level initializes attributes on the \"this\" keyword so they can be accessed by the tests. Since the beforeAll no longer works this way, my only alternative (while still allowing me to keep the same testing framework) is using the beforeEach, which will run before every single it block. Considering that there will be over 100 it blocks in my code, the beforeEach will be run dozens of times, making my test code more inefficient. As such, this appears to be a poor solution. So I'm hoping we could get the previous functionality back. :)\nThank you to all who have read my post. Please comment and let me know what you think.", "createdAt": "2015-05-07T23:47:19Z", "updatedAt": "2015-05-11T21:00:42Z", "closedAt": "2015-05-11T17:30:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joswhite", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "joswhite", "company": null}, {"login": "trsrm", "company": null}, {"login": "flashbag", "company": "Softjourn"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 10, "comments_data": [{"authorLogin": "trsrm", "authorAssociation": "NONE", "createdAt": "2015-05-08T15:02:55Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "flashbag", "authorAssociation": "NONE", "createdAt": "2015-05-10T19:56:53Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-10T22:41:32Z", "contents": "Sorry about this. This was definitely not intended functionality as part of 2.3. I'm not entirely sure what happened to cause it, but I should have some time tomorrow to take a look and try to fix it, unless someone has time to submit a pull request before then.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "flashbag", "authorAssociation": "NONE", "createdAt": "2015-05-11T05:09:01Z", "contents": "I wrote basic explanation of problem. Now we definitely know that it exists and difference in those two versions clear. Working in - 2.2.1, not working in - 2.3.0.\nSee terminal video about this: https://asciinema.org/a/19871\nOr commited files for proof of working: https://github.com/flashbag/jasmine/commit/0ba1de0d547c81b67187745e57b471bea5e96a0a", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-11T17:58:23Z", "contents": "This should be fixed and released in version 2.3.3", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joswhite", "authorAssociation": "NONE", "createdAt": "2015-05-11T20:48:11Z", "contents": "Thank you so much! I appreciate that. Thanks for getting back to me so quickly as well. I'll try it as soon as version 2.3.3 is released on npm. I assume that will be sometime later this week.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-11T20:50:11Z", "contents": "Version 2.3.3 of jasmine-core should be available already on npm and rubygems. Pypi should will be coming soon.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joswhite", "authorAssociation": "NONE", "createdAt": "2015-05-11T20:54:05Z", "contents": "I'm actually using the CLI version that works with Node. So the package name is \"jasmine\" rather than \"jasmine-core\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-11T20:55:18Z", "contents": "The jasmine package doesn't need to be bumped for this fix, it has a dependency on the jasmine-core package which should allow upgrades of minor and patch version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joswhite", "authorAssociation": "NONE", "createdAt": "2015-05-11T21:00:42Z", "contents": "Yes, you are right! I didn't realize that until now. I installed the package again, and it works with my tests just fine. There are no more problems with the this object. Thanks for your good work!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 847, "url": "https://github.com/jasmine/jasmine/issues/847", "title": "unused CSS classes? dead code?", "contents": "I'm currently writing a fix for Issue 844 :\n#844\nIn this process, I think I've found some CSS classes that are essentially \"dead code\" because I can't find any JavaScript code in the codebase that ever applies them. I'm referring to lines 258\u2013288 here:\n\n  \n    \n      jasmine/src/html/_HTMLReporter.scss\n    \n    \n         Line 258\n      in\n      426eebe\n    \n    \n    \n    \n\n        \n          \n           //--- Results menu ---// \n        \n    \n  \n\n\nThe SCSS code there compiles to dead code in jasmine.css, lines 43\u201348:\n\n  \n    \n      jasmine/lib/jasmine-core/jasmine.css\n    \n    \n         Line 43\n      in\n      426eebe\n    \n    \n    \n    \n\n        \n          \n           .jasmine_html-reporter.showDetails .summaryMenuItem { font-weight: normal; text-decoration: inherit; } \n        \n    \n  \n\n\nBasically, I can't find any JavaScript in the whole code base that ever refers to CSS classes showDetails or summaryMenuItem. I know that code can still refer to things implicitly, like when you invoke forEach or invoke a for..in loop, however these class names are located in CSS, which as far as I know doesn't really have any programmatic constructs for looping or otherwise accessing implicitly \u2014 we always have to explicitly name the CSS class in JS to apply them, right?\n(You could also get a class name in JS by querying a DOM element and then accessing its classList property and then accessing the returned array-like object, and in that case you would also have gotten a CSS class in your JavaScript without ever naming it explicitly \u2014 but the class would have to be explicitly set in the HTML, and that's not applicable in this case, because Jasmine constructs all of its HTML programmatically.)\nAnd I can't find DOM elements with these class names (.showDetails, .summaryMenuItem) ever appearing in the browser document .\nSo I'm really thinking that these style rules are dead wood left over from a time when they were used, but are not used any more.\n\nMy questions are:\n\nhave I said something wrong above?\ncan I just take out this dead CSS in the other fix I'm working on, then submit a pull request to fix both 844 and this Issue at once?\nor should I just make the most atomic of commits, with one that removes the dead CSS, and then one that fixes 844 (my fix in 844 is to make \"unique enough\" names for the CSS that Jasmine uses)\n\nedit/update\nI'll take them out while I'm developing, and see if all specs still pass. I probably should have done that before opening Issue, in addition to the code reasoning I did.", "createdAt": "2015-05-10T20:19:25Z", "updatedAt": "2015-05-12T23:04:33Z", "closedAt": "2015-05-11T18:13:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "prather-mcs", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "prather-mcs", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-10T22:43:47Z", "contents": "In general we prefer smaller commits/pull requests. If you have some classes that are no longer used, I'd rather see a PR for just their removal separate from the PR you're working on to rename the classes that are in use.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prather-mcs", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-12T22:42:37Z", "contents": "Hi I just finished my fix for #844 .\nAnd I caught one more (one last) dead CSS style rule .\nThe running-alert class seems not to be used anywhere else in the codebase, and by my reasoning (same reasoning as above) no Jasmine code will ever produce html with that class, and so we can take it out.\nSo I'm going to create one more pull request that removes this dead style rule, before I introduce the much bigger code change I've already got which is a fix for 844. I'm going to invite people with more experience developing Jasmine to take a good hard look at my fix for 844, and make sure it's really what the project wants, of course. Maybe there's some alternative way to fix 844, and maybe I screwed something up in my fix for it.\nBut for now the small pull request I'm about to introduce (removing .running-alert style rule) should be good-to-go and should officially pave the way clear for my 844 fix.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 850, "url": "https://github.com/jasmine/jasmine/issues/850", "title": "Test order no longer maintained since 2.3.0", "contents": "I am not quite sure this is an issue but without documentation explicitly stating otherwise (at least that I could find) it could be a logical expectation that test declaration order would be maintained. It appears since 2.3.0 the declared order for tests is no longer preserved:\nit('a', function (done) { console.log('a'); setTimeout(done, 100); });\nit('b', function (done) { console.log('b'); setTimeout(done, 100); });\nit('c', function (done) { console.log('c'); setTimeout(done, 100); });\nit('d', function (done) { console.log('d'); setTimeout(done, 100); });\nit('e', function (done) { console.log('e'); setTimeout(done, 100); });\nit('f', function (done) { console.log('f'); setTimeout(done, 100); });\nit('g', function (done) { console.log('g'); setTimeout(done, 100); });\nit('h', function (done) { console.log('h'); setTimeout(done, 100); });\nit('i', function (done) { console.log('i'); setTimeout(done, 100); });\nit('j', function (done) { console.log('j'); setTimeout(done, 100); });\nit('k', function (done) { console.log('k'); setTimeout(done, 100); });\nit('l', function (done) { console.log('l'); setTimeout(done, 100); });\nit('m', function (done) { console.log('m'); setTimeout(done, 100); });\nit('n', function (done) { console.log('n'); setTimeout(done, 100); });\nit('o', function (done) { console.log('o'); setTimeout(done, 100); });\nit('p', function (done) { console.log('p'); setTimeout(done, 100); });\nit('q', function (done) { console.log('q'); setTimeout(done, 100); });\nit('r', function (done) { console.log('r'); setTimeout(done, 100); });\nit('s', function (done) { console.log('s'); setTimeout(done, 100); });\nit('t', function (done) { console.log('t'); setTimeout(done, 100); });\nit('u', function (done) { console.log('u'); setTimeout(done, 100); });\nit('v', function (done) { console.log('v'); setTimeout(done, 100); });\nit('w', function (done) { console.log('w'); setTimeout(done, 100); });\nit('x', function (done) { console.log('x'); setTimeout(done, 100); });\nit('y', function (done) { console.log('y'); setTimeout(done, 100); });\nit('z', function (done) { console.log('z'); setTimeout(done, 100); });\n\n// 2.1.0: a b c d e f g h i l k l m n o p q r s t u v w x y z\n// 2.2.0: a b c d e f g h i l k l m n o p q r s t u v w x y z\n// 2.3.0: a z c d e f g h i j k l m b o p q r s t u v w x y n\n// 2.3.1: a z c d e f g h i j k l m b o p q r s t u v w x y n", "createdAt": "2015-05-13T19:04:55Z", "updatedAt": "2015-05-17T19:00:44Z", "closedAt": "2015-05-13T21:47:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JasonCust", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JasonCust", "company": "@CentralPing"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-13T19:23:41Z", "contents": "This is definitely not intended functionality. I'm not entirely sure what is causing the order to get mixed up, especially in such a consistent manner.\nI'll take a look and see if I can get a fix together.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JasonCust", "authorAssociation": "NONE", "createdAt": "2015-05-13T22:16:58Z", "contents": "Thanks @slackersoft!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JasonCust", "authorAssociation": "NONE", "createdAt": "2015-05-17T19:00:44Z", "contents": "@slackersoft Any idea when this will be published to npm?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 852, "url": "https://github.com/jasmine/jasmine/issues/852", "title": "jasmine.any() without argument fails with unhelpful error message", "contents": "Using jasmine.any() is not correct, as it should be jasmine.anything() or jasmine.any(ConstructorHere).  However, the error message is not very helpful in telling you this.  We suggest checking for undefined in any() and giving a more descriptive error message.  This is the error that we get when using jasmine.any():\nTypeError: Cannot read property 'name' of undefined\n    at Object.j$.fnNameFor (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:151:16)\n    at Any.jasmineToString (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:2416:33)\n    at PrettyPrinter.format (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:1597:31)\n    at PrettyPrinter.StringPrettyPrinter.emitArray (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:1668:12)\n    at PrettyPrinter.format (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:1615:16)\n    at Object.pp (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:1734:25)\n    at Object.compare.result.message (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:2995:124)\n    at Expectation.wrapCompare [as toHaveBeenCalledWith] (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:1395:30)\n    at Object.<anonymous> (http://localhost:3000/assets/behaviors/hit_report_histogram_spec.self-7425606b3113ffbe282f01272fad4b19d49158a116726d0eaba8a85b3f0aa4de.js?body=1:25:26)\n    at attemptSync (http://localhost:3000/assets/jasmine.self-9b30f2f3d16490c8b6cf33d9f21ef71b5634060fdf39ac2e47477d0327021b8e.js?body=1:1790:24)\n\nThis is our spec:\ndescribe('Unicorn', function() {\n\n  beforeEach(function(){\n    spyOn(Chartist, 'Bar');\n    callMyMethod();\n  });\n\n  it('creates a new Chartist.Bar object', function() {\n    expect(Chartist.Bar).toHaveBeenCalledWith(\n      jasmine.any(),\n      {\n        labels: ['1901-01', '1901-02', '1901-13'],\n        series: [\n          [4, 18, 0]\n        ]\n      }\n    );\n  });\n});\n@mbildner\nJasmine version: 2.3.4\nJasmine rails version: 0.10.8", "createdAt": "2015-05-14T18:04:45Z", "updatedAt": "2015-05-18T21:26:59Z", "closedAt": "2015-05-18T21:26:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danfinnie", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "danfinnie", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-14T18:38:47Z", "contents": "Now that there is an alternative in anything, it probably makes sense for any to direct users there if they call it without any arguments.\nI'd be happy to review a pull request that accomplished this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 853, "url": "https://github.com/jasmine/jasmine/issues/853", "title": "feature request: toHaveBeenCalledOnce", "contents": "I find myself doing: expect(searchModel.clearSearchCallback.calls.count()).toEqual(1); a lot to make sure a method has been called, but only one time.\nIt'd be great if there was a toHaveBeenCalledOnce method.\nThanks!", "createdAt": "2015-05-15T16:31:54Z", "updatedAt": "2015-06-06T04:10:20Z", "closedAt": "2015-06-06T04:10:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "aligneddev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-29T21:40:40Z", "contents": "I think we would prefer to have the matcher be able to take a parameter for the call count instead of only having it hard-coded to the singular case. Something like toHaveBeenCalledTimes(4) possibly.\nI'd be happy to review a pull request for that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 855, "url": "https://github.com/jasmine/jasmine/issues/855", "title": "Pending vs disabled", "contents": "Hi,  I know there's been some discussion of pending vs disabled specs (#840).  I was slightly surprised to discover that disabled specs are not reported (a least in jasmine-npm) so I raised an issue at jasmine/jasmine-npm#45, but i understand this is perhaps the intended behaviour.\nCurrently I think xit marks as pending and xdescribe marks as disabled.  It would be good if they did the same thing. If it's clear what the behaviour should be I could (try to) work up a pull request.\nTo my mind, pending is more useful. I'm not sure what the use-case is for disabling specs and not having them show up in reporting?", "createdAt": "2015-05-17T14:48:20Z", "updatedAt": "2015-08-03T22:02:21Z", "closedAt": "2015-08-03T22:02:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "ljwall", "company": "@magicseaweed "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "nertzy", "company": "@pivotal and @nertzdyne"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-28T19:19:47Z", "contents": "As of version 2.3, every spec that is defined in the suite will be reported to all registered reporters. Previously, any specs that were children of an xdescribe (and any suites) were marked as disabled and never run at all and did not get reported. With the addition of fdescribe and fit in jasmine 2.1, it is also possible for a suite or spec to be marked disabled if it is not part of the focus run (i.e. not an fit or child of an fdescribe).\nI think you're probably right that xdescribe and xit should put specs into the same status. I'm not totally sure whether it should be pending or disabled. I'm leaning towards pending because that would mean you get a report at the end of the run of all the specs you've turned off entirely in your suite.\nChanging this in either direction would be a breaking change as far as how the behavior of xit or xdescribe is reported, but I could possibly see it as a bug fix.\nI'd be happy to review a pull request that changed it so child specs of an xdescribe were marked as pending for that run instead of disabled.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-28T19:50:54Z", "contents": "Ok great, I'll have a go at that then.... (I've not looked properly at the jasmine-core code much, so not yet sure where on the trivial/hard spectrum it is..)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nertzy", "authorAssociation": "NONE", "createdAt": "2015-06-02T20:54:47Z", "contents": "Would it make sense to introduce a new state called excluded? If it's hard to decide between pending or disabled then that is probably a good reason not to use either.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-06-03T06:21:45Z", "contents": "For my part, I thing pending is ok.  It accurately describes my use of xdescribe and xit - i.e. the given suite or spec is pending some correction.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 857, "url": "https://github.com/jasmine/jasmine/issues/857", "title": "support for JSX?", "contents": "I added .JS.JSX files in my Rails app to test React, all of my Jasmine specs are now failing. Are there any setup or ways to ignore .JSX files from my test suite.", "createdAt": "2015-05-18T23:30:38Z", "updatedAt": "2015-05-21T05:31:25Z", "closedAt": "2015-05-18T23:35:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ramyathulasingam", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ramyathulasingam", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-18T23:35:53Z", "contents": "Have you looked at react-jsx-sprockets? Also see the discussion in jasmine/jasmine-gem#222.\nClosing this since it sounds like if this is an issue, it is with the jasmine-gem and not jasmine core here.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ramyathulasingam", "authorAssociation": "NONE", "createdAt": "2015-05-21T05:31:25Z", "contents": "Thank so much. react-jsx-sprockets did the magic", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 858, "url": "https://github.com/jasmine/jasmine/issues/858", "title": "Identify the step number were jasmine + protractor test failed", "contents": "I am developing tightly coupled Protractor + Jasmine automation system with our test cases management system.\nSteps in test procedure also documented in test scripts, when ever protractor test cases fails, I want to identify in which step this is failed and reported in XML\nexample Test expected like this\n@Step1 login_page.enterUserName('user1');\n@step2 login_page.enterPassword('password');\n@Step3 home_page = login_page.selectLogin();\nIf this test failed @ step2, this should be reported in XML ,any thought for implementing this ?\nRegards, Rayees", "createdAt": "2015-05-19T17:47:37Z", "updatedAt": "2015-05-19T20:51:01Z", "closedAt": "2015-05-19T19:22:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rayeesnp", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rayeesnp", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T19:22:28Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rayeesnp", "authorAssociation": "NONE", "createdAt": "2015-05-19T19:26:19Z", "contents": "I cannot find this in jasmine, can we consider as new feature request ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T19:29:07Z", "contents": "Jasmine failures will already give you a line number for where the failure occurred. I'm not really sure what the @step1 annotation could even mean in javascript, so it is unclear what feature you could be requested here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rayeesnp", "authorAssociation": "NONE", "createdAt": "2015-05-19T19:45:49Z", "contents": "Let me explain the use case in details\nMy test cases name \"Loginto_system_and_checkvaliduser\"\nProcedure  in Testcase management system\nStep 1 : Enter URL\nStep 2 : Enteruser Name\nStep 3 : Enter Password\nStep 4: Select Submit button\nStep 5: Verify user is valid or not\nSteps in javaScript\nlogin_page = accessURL(https://.......)\nlogin_page.enterUserName('user1');\nlogin_page.enterPassword('password');\nhome_page = login_page.selectLogin();\nhoma_page.verify()\nDuring the automation run, if test case failed at  \"step 4\" ie home_page = login_page.selectLogin(); it should be able to identify which step its failed \"here its 4\", based on this  I want to create JIRA ticket with the summary \"Test cases Loginto_system_and_checkvaliduser failed at step4 \", while creating JIRA ticket i will pull actual steps from test case management system.\nHere the advantage is developer no need to go and re run the test to reproduce the issue, they can map the step number were automation failed and corresponding test case in Test case management system ?\nIt make sense ? @slackersoft ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rayeesnp", "authorAssociation": "NONE", "createdAt": "2015-05-19T20:14:32Z", "contents": "@slackersoft  - can you please re open this ticket? its a new feature request", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-19T20:51:01Z", "contents": "Based on the example you've provided, I don't there is anything that jasmine itself can do to solve your problem. It sounds like you're generating jasmine specs from some external source and you want jasmine to turn errors back into your original source. But since jasmine only knows anything about javascript there is no way for this to be accomplished.\nWhat you're probably going to need to do is write your own reporter that knows about your original test case and can translate the line numbers in the javascript specs from jasmine into your test cases.\nSince this sounds like a completely custom solution, it isn't something we're likely to implement in jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 859, "url": "https://github.com/jasmine/jasmine/issues/859", "title": "Error: Spies must be created in a before function or a spec", "contents": "1) tracks that the spy was called\nA spy\nError: Spies must be created in a before function or a spec\nat http://localhost:9126/base/node_modules/jasmine-core/lib/jasmine-    \ncore/jasmine.js?578a1e5ff14db21b04e2d6db7fd0eda37042440c:687\n\nMy Test code should be ok, so I am out of knowledge where the root cause for this error could be. I already re-installed karma-jasmine.\ndescribe 'A spy', ->\n  foo = undefined\n  bar = null\n  beforeEach ->\n    foo = setBar: (value) ->\n      bar = value\n      return\n    spyOn foo, 'setBar'\n    foo.setBar 123\n    foo.setBar 456, 'another param'\n    return\n  it 'tracks that the spy was called', ->\n    expect(foo.setBar).toHaveBeenCalled()\n\nThis is from the devDependencies section of my package.json:\n..\n\"jasmine\": \"^2.3.1\",\n\"jasmine-core\": \"^2.3.4\",\n\"karma\": \"^0.12.32\",\n\"karma-chai\": \"^0.1.0\",\n\"karma-chai-plugins\": \"^0.5.0\",\n\"karma-chrome-launcher\": \"^0.1.12\",\n\"karma-coffee-preprocessor\": \"^0.2.1\",\n\"karma-firefox-launcher\": \"^0.1.4\",\n\"karma-html2js-preprocessor\": \"^0.1.0\",\n\"karma-jade-preprocessor\": \"0.0.11\",\n\"karma-jasmine\": \"^0.3.5\",\n\"karma-mocha\": \"^0.1.10\",\n\"karma-ng-html2js-preprocessor\": \"~0.1.0\",\n\"karma-ng-jade2js-preprocessor\": \"^0.1.2\",\n\"karma-ng-scenario\": \"~0.1.0\",\n\"karma-phantomjs-launcher\": \"^0.1.4\",\n\"karma-requirejs\": \"~0.2.1\",\n\"karma-script-launcher\": \"~0.1.0\",\n\"karma-spec-reporter\": \"0.0.19\",\n..", "createdAt": "2015-05-20T12:05:26Z", "updatedAt": "2015-05-30T00:46:48Z", "closedAt": "2015-05-30T00:46:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "meshfields", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "meshfields", "company": "Meshfields - Consultancy for Cloud Architecture, Continous Integration and Test-Driven-Development"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-29T21:56:33Z", "contents": "I just set up a tester app with your spec and it is working fine, both with just the jasmine command and through karma. The only direct npm dependencies I installed were:\ncoffee-script\njasmine\njasmine-core\nkarma\nkarma-chrome-launcher\nkarma-coffee-preprocessor\nkarma-jasmine\n\nIs it possible one of your other dependencies is messing something up?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "meshfields", "authorAssociation": "NONE", "createdAt": "2015-05-29T23:37:27Z", "contents": "Yes, it was Mocha which interferred. Removing it from karma.conf.js\nsolved the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-30T00:46:48Z", "contents": "Awesome. Closing this then.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 860, "url": "https://github.com/jasmine/jasmine/issues/860", "title": "How to test throw without actually throw ? like spyOn.", "contents": "Here is my spec\nexpect(function() {\n  throw new Error('testing error');\n}).toThrow();\n\nBut how can I test it without throw the error ? like the spyOn way.", "createdAt": "2015-05-21T05:00:38Z", "updatedAt": "2015-05-21T05:02:03Z", "closedAt": "2015-05-21T05:02:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lili21", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "lili21", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 861, "url": "https://github.com/jasmine/jasmine/issues/861", "title": "is it possible to run only one file by command? ", "contents": "for example:\ni have several files, but in developing, i may just run one of them by jasmine, as so far, it seems jasmine will run all the files.  i want to know if there is a way to run a file by format like this: jasmine aFileSpec.js", "createdAt": "2015-05-22T09:30:27Z", "updatedAt": "2015-05-25T18:01:24Z", "closedAt": "2015-05-25T18:01:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shoyer2010", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "shoyer2010", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-22T17:20:59Z", "contents": "If you have a top level describe for each file, you can use fdescribe to focus the file.\nYou are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shoyer2010", "authorAssociation": "NONE", "createdAt": "2015-05-25T17:45:25Z", "contents": "@Gerg thks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 862, "url": "https://github.com/jasmine/jasmine/issues/862", "title": "\"Template.leaderboard.players() is not a function\" in leaderboard-jasmine ", "contents": "Dear All,\nI'm trying to figure out client unit testing on template helper functions. After I cloned and ran the leaderboard-jasmine code (unchanged), I got this error:\n\nTemplate.leaderboard.players() is not a function\n\nwhich comes from\n// velocity-examples/leaderboard-jasmine/tests/jasmine/client/integration/LeaderboardSpec.js\nvar players = Template.leaderboard.players().fetch();\nAfter digging a bit here, I changed above line to below:\n// velocity-examples/leaderboard-jasmine/tests/jasmine/client/integration/LeaderboardSpec.js\nspyOn(Template.leaderboard.__helpers, 'players')\nwhich resulted in another error:\n\nplayers() method does not exist\n\nI have seen the 2nd usage in the Telescope repo, so it should have worked. Does anyone have had similar experience and sorted it out?", "createdAt": "2015-05-25T00:54:03Z", "updatedAt": "2015-05-28T20:42:56Z", "closedAt": "2015-05-28T20:42:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "totorokk", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "totorokk", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-28T20:42:56Z", "contents": "This sounds like an issue with leaderboard-jasmine and not jasmine itself. Nothing in your examples would be code from within jasmine itself, so you should probably open an issue with leaderboard-jasmine.\nClosing this unless you can narrow it down to an issue with jasmine itself. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 863, "url": "https://github.com/jasmine/jasmine/issues/863", "title": "Issue with angular.mock.inject method", "contents": "I am using karma/jasmine and i have the following jasmine test case .\n'use strict';\n\ndescribe('companyService', function() {\n\nvar $httpBackend, companyService;\n\nbeforeEach(angular.mock.module('myApp'));\n\nbeforeEach(angular.mock.inject(function($httpBackend , companyService ) {\n    $httpBackend = $httpBackend;\n    companyService = companyService;\n}));\n\nit('should return a promise for getCompany function', function() {\n    expect(typeof companyService.getCompany('foobar').then).toBe('function');\n}); \n\n});\n\nfor some reason the execution doesn't enter the angular.mock.inject(function($httpBackend , companyService ) {  code block . Because of this i am getting the following error when i try to access getCompany() method .\n    minErr/<@C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/bower_components/angular/angular.js:63:12\n    loadModules/<@C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/bower_components/angular/angular.js:4138:15\n    forEach@C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/bower_components/angular/angular.js:323:11\n    loadModules@C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/bower_components/angular/angular.js:4099:5\n    createInjector@C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/bower_components/angular/angular.js:4025:11\n    workFn@C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/node_modules/angular-mocks/angular-mocks.js:2425:44\n    TypeError: companyService is undefined in C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/test/company/Compa\nnyServiceSpec.js (line 15)\n    @C:/Users/userone/Documents/myAppPkg/myApp/WebApiRole/test/company/CompanyServiceSpec.js:15:16\n\nif this got something to do with a missing of a dependency , how do i test (isolate) the missing dependency . The only error i get is the undefined error which is not exactly helping me to find the rootcause . I have used karma start --log-level debug but it doesn't tell you much about the issue . If anyone can help me to pinpoint the issue rootcause it would be much appreciated .", "createdAt": "2015-05-26T11:42:23Z", "updatedAt": "2017-11-22T06:06:53Z", "closedAt": "2015-09-24T21:22:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mal90", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mal90", "company": "Kaligo"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "angel3509268", "company": null}, {"login": "Thorocaine", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-28T21:10:05Z", "contents": "Are you sure the function passed to inject is not actually invoked? A console.log or a debugger should help you confirm that. But, from the code you pasted it looks like you just have a variable scoping issue.\nInside the function passed to inject your parameter names $httpBackend and companyService end up shadowing the variables with the same name declared directly in the describe, and thus you can't assign anything to the outer variables.\nYour options are basically:\n\nrename the outer variables to the don't get shadowed\nrename the parameters (I think you can surround with _ for just such an occasion, so you would have _$httpBackend_ etc)\n\nHope this helps. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:22:07Z", "contents": "We haven't heard anything else from the community about this issue, so I'm going to close it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "angel3509268", "authorAssociation": "NONE", "createdAt": "2016-02-19T22:11:58Z", "contents": "I have a  similar problem", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thorocaine", "authorAssociation": "NONE", "createdAt": "2017-11-17T13:58:51Z", "contents": "I have this issue.\nI have tried\nbeforeEach(() => angular.mock.inject(($q: any) => {\n    console.log('injecting');\n}));\n\nI have tried\nbeforeEach(angular.mock.inject(($q: any) => {\n    console.log('injecting');\n}));\n\ninstead of $q I have tried $rootScope, $http, and myOwnService\nI have tried :any, and :ng.IWhatEverService.\nIt is never running, the console.log never writes (I can see other console logs from describe etc writing to the terminal.\nAfter the console output from my it I get an error\nFirefox 57.0.0 (Windows 10 0.0.0) App should work FAILED\n    minErr/<@App/testSpecs.js:464:12\n    loadModules/<@App/testSpecs.js:5305:15\n    forEach@App/testSpecs.js:758:11\n    loadModules@App/testSpecs.js:5265:5\n    createInjector@App/testSpecs.js:5187:19\n    WorkFn@App/testSpecs.js:37414:44\n    angular.mock.inject@App/testSpecs.js:37394:35\n    @App/testSpecs.js:271:37\n    ContextKarma/this.loaded@http://localhost:9876/context.js:162:7\n\nI have read everything I could find, comparing what I am trying to every example I could get my hands on, and nothing seems wrong.\nAny ideas on what else I could try?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thorocaine", "authorAssociation": "NONE", "createdAt": "2017-11-17T14:01:03Z", "contents": "I only get this error when I try angular.mock.inject. I also have an angular.mock.module which works.\nIf I remove the inject, but keep the module, and run an it expect true to be true sort of thing works fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thorocaine", "authorAssociation": "NONE", "createdAt": "2017-11-17T14:13:49Z", "contents": "Okay, if I comment out beforeEach(angular.mock.module('App')); then injection works, but then it doesn't let me inject my own services.\nSo when then have I done wrong with angular.mock.module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thorocaine", "authorAssociation": "NONE", "createdAt": "2017-11-17T14:17:40Z", "contents": "also, console.log(\"AG -> \" + angular.module('App').name); provides the expected output, so my angular module is loaded.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-22T01:35:04Z", "contents": "@Thorocaine If the errors you're seeing are with the different angular.mock functions, it might make more sense to bring this issue to an angular forum as those functions aren't provided by Jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Thorocaine", "authorAssociation": "NONE", "createdAt": "2017-11-22T06:06:53Z", "contents": "It turned out to be DI.\nI found changing the browser from Firefox to Chrome gave better information, and told me what dependancy what not being resolved.\nThank you for your response.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 865, "url": "https://github.com/jasmine/jasmine/issues/865", "title": "Allow filtering of specs when tests being run", "contents": "Currently, by using a custom boot.js file a specFilter can be used to select which tests should be run.  The problem is that this filtering happens when tests are being first registered with Jasmine, rather than when they are being run.  This means that creating a single page interactive test runner is impossible as it is not possible to filter tests based on user input without refreshing the page.", "createdAt": "2015-05-26T15:39:18Z", "updatedAt": "2015-10-01T17:38:15Z", "closedAt": "2015-10-01T17:38:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "keirlawson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "keirlawson", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-29T21:35:21Z", "contents": "The way to specify a spec (or specs) to run as you are executing the suite is to pass an array of spec and suite ids to the execute function itself. This would mean that your test runner would have to know the ids for all of the spec and/or suite objects that are constructed and associate those with whatever UI you have to let the user pick specs.\nDoes this solve your problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keirlawson", "authorAssociation": "NONE", "createdAt": "2015-06-01T07:54:19Z", "contents": "Looks like it might, is there a public API which can be used to retrieve spec/suite IDs? I didn't find information in the documentation about that parameter for execute, did I miss it or has it not been documented?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-05T14:00:50Z", "contents": "Once all the specs have been loaded you should be able to call the topSuite() function on your jasmine Env (jasmine.getEnv().topSuite() if you're not managing the env some other way already). You should be able to then walk down that tree to get all of the Spec objects to retrieve their ids.\nThe execute function on Env isn't well documented because it is primarily for internal use, and this kind of use case is a bit of an advanced feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keirlawson", "authorAssociation": "NONE", "createdAt": "2015-08-31T15:57:42Z", "contents": "Would you accept a PR to document the execute param? It would be useful for my use case but I'm not keen on using undocumented features that might be subject to breaking changes within minor versions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-17T19:49:03Z", "contents": "I'd be happy to have some better documentation for the execute function.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 866, "url": "https://github.com/jasmine/jasmine/issues/866", "title": "Add setImmediate support to jasmine.clock", "contents": "The code I am testing is leveraging setImmediate() to defer a function call. It would be nice to use Jasmine's clock to fast-forward over the delay similar to how I would use it to fast-forward over a setTimeout(fn, 0) call.", "createdAt": "2015-05-26T19:55:48Z", "updatedAt": "2017-02-13T19:15:47Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Aaronius", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "Aaronius", "company": "Adobe"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "bvaughn", "company": "@facebook"}, {"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-28T21:30:49Z", "contents": "As setImmediate is only implemented in IE 10 and doesn't look like it will become a standard any time soon (if ever), I don't think it is something jasmine is going to support as part of it's mock clock implementation.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Aaronius", "authorAssociation": "NONE", "createdAt": "2015-06-01T20:31:21Z", "contents": "Understandable. Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bvaughn", "authorAssociation": "NONE", "createdAt": "2015-11-26T21:15:35Z", "contents": "Adding support would still be nice for React users or those using the setImmediate polyfill.\nI just spent a few minutes scratching my head about why jasmine.clock.tick() wasn't doing anything.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-01T00:00:03Z", "contents": "In general, jasmine tries to stay away from implementing things based on polyfills, so this isn't something we're likely to put into jasmine. That said, you should be able to provide your own setImmediate that simply calls setTimeout(..., 0) only in jasmine that would allow jasmine's existing mock clock to work as you expect.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "agirorn", "authorAssociation": "NONE", "createdAt": "2017-01-31T11:55:22Z", "contents": "Now I think it is time to add support for setImmediate sine node.js seem to have a stable version of it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T19:15:42Z", "contents": "Jasmine is not solely a testing framework for node.js code, it also needs to work in all of the browsers that we currently support (IE8 and up, Chrome, Firefox, Safari 6 and up). Not all web projects will be using a polyfill for setImmediate in those environments, so we don't want the clock to provide a mock version of a function that doesn't actually exist.\nThis still isn't high up on the list, but we'd be willing to review a pull request that provided a mock setImmediate only when there is one already present on the global object.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 867, "url": "https://github.com/jasmine/jasmine/issues/867", "title": "toHaveBeenCalledWith Can't Match", "contents": "For some reason toHaveBeenCalledWith is unable to match some calls to my spy in one oddball test even though the calls and expectations are identical. I'm making two calls to the same method with different parameters and then in the test I check to see if that same method was called two separate times with the two different sets of parameters. The first expectation passes and the second expectation fails every time.\nThe test in question:\nit('removes the transform on feed and globalMenuWrap', function() {\n      expect(utility.setPrefixedStyle).toHaveBeenCalledWith($m('#feed, .globalMenuWrap'), 'transform', '');\n      expect(utility.setPrefixedStyle).toHaveBeenCalledWith($m('.sideNav'), 'transform', '');\n});\n\nThe code that is most definitely getting executed:\nglobal.requestAnimationFrame(function(){\n      $m(document.body).removeClass(\"showSideNav\");\n      utility.setPrefixedStyle($m('#feed, .globalMenuWrap'), 'transform', '');\n      utility.setPrefixedStyle($m('.sideNav'), 'transform', '');\n});\n\nThe resulting failure log which makes no sense:\nExpected spy setPrefixedStyle to have been called with\n[ ({ length: 0, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '.sideNav' }), 'transform', '' ] \n\nbut actual calls were\n\n[ ({ 0: HTMLNode, 1: HTMLNode, length: 2, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '#feed, .globalMenuWrap' }), 'transform', '' ], \n[ ({ length: 0, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '.sideNav' }), 'transform', '' ].\n\nAs you can see from the above print out, the calls are actually identical and toHaveBeenCalledWith seems to be unable to match anything past the first call made to the spy.\nAs a workaround, I also tried using argsFor(1) but this also failed in even more bewildering way. Here is what that test looks like:\nit('removes the transform on sideNav', function() {\n      expect(utility.setPrefixedStyle.calls.argsFor(1)).toEqual([$m('.sideNav'), 'transform', '']);\n});\n\nAnd here is the bewildering failure log:\nExpected \n[ ({ length: 0, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '.sideNav' }), 'transform', '' ] \nto equal \n[ ({ length: 0, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '.sideNav' }), 'transform', '' ].", "createdAt": "2015-05-28T16:29:12Z", "updatedAt": "2015-11-02T20:13:46Z", "closedAt": "2015-09-24T21:25:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johnnyshankman", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "johnnyshankman", "company": "Refinery29"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-28T16:46:15Z", "contents": "Is this definitely because it is the second call? If you remove the first call to setPrefixedStyle and the first expectation, does the test pass?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnnyshankman", "authorAssociation": "NONE", "createdAt": "2015-05-28T16:53:40Z", "contents": "I removed the first call and the first expectation and surprisingly it still fails. I apologize for assuming it was due to there being multiple calls. Updated the issue to reflect that.\nHere is the new code, test, and failure log:\nglobal.requestAnimationFrame(function(){\n      $m(document.body).removeClass(\"showSideNav\");\n      utility.setPrefixedStyle($m('.sideNav'), 'transform', '');\n});\n\nit('removes the transform on feed and globalMenuWrap', function() {\n      expect(utility.setPrefixedStyle).toHaveBeenCalledWith($m('.sideNav'), 'transform', '');\n});\n\nExpected spy setPrefixedStyle to have been called with \n[ ({ length: 0, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '.sideNav' }), 'transform', '' ] \nbut actual calls were \n[ ({ length: 0, prevObject: ({ 0: HTMLNode, context: HTMLNode, length: 1 }), context: HTMLNode, selector: '.sideNav' }), 'transform', '' ].", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-05-29T17:38:40Z", "contents": "Jasmine's equality test sometimes takes into consideration some factors that are not represented by the pretty printer (see #786, #598). We would love to update the pretty printer to include more information, but without having access to your code, it is difficult to tell what is causing the inequality.\nIf you want to explore yourself, Jasmine's equality check lives here: \n  \n    \n      jasmine/src/core/matchers/matchersUtil.js\n    \n    \n         Line 77\n      in\n      4be2079\n    \n    \n    \n    \n\n        \n          \n           function eq(a, b, aStack, bStack, customTesters) { \n        \n    \n  \n\n\nIf you can get more information about why the equality match is failing or reproduce this in a standalone example, I would be happy to look into it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:25:46Z", "contents": "We haven't heard anything else from the community on this in a while, so I'm going to close it for now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnnyshankman", "authorAssociation": "NONE", "createdAt": "2015-11-02T19:56:34Z", "contents": "@Gerg Is there anyway to get an ugly printout so that I can see deep into the object and find the difference manually?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-02T20:03:14Z", "contents": "@johnnyshankman The pretty printer has been updated so it should now print out all the things that are used when doing an equality comparison. You can also define a jasmineToString (or just toString if you're working out of HEAD) to print out whatever you want about the object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnnyshankman", "authorAssociation": "NONE", "createdAt": "2015-11-02T20:13:46Z", "contents": "@slackersoft Thank you a ton. I'll update so that I can get that pretty printer. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 868, "url": "https://github.com/jasmine/jasmine/issues/868", "title": "Jasmine + .swf (jasmine.yml?)", "contents": "Rails 4, Backbone + Marionette, Jasmine 2.1.3\nI have added the DataTables TableTools plugin to our Rails app, and am trying to test that a certain callback gets called when the user attempts to export a PDF and Excel file. However, the TableTools plugins relies of Flash (a .swf file) for this functionality.\nI am able to successful check that the event in question gets called when the user prints using the plugin, which does need the Flash functionality. However, when running the tests, the event does not get called when I try to export a PDF of Excel file.\nI imagine the problem could be because I need to add the assets/copy_csv_xls_pdf.swf to jasmine.yml, but I don't know if this is the right approach.\nIs what I am trying to do even possible using Jasmine?", "createdAt": "2015-05-28T21:08:47Z", "updatedAt": "2015-05-29T21:29:06Z", "closedAt": "2015-05-29T21:29:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NavyAnt24", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "NavyAnt24", "company": "Riverbed"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-29T21:29:06Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nAs far as your tests go though, you probably want to just test that you call into the library correctly, with a mock and not worry about testing the library itself.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 870, "url": "https://github.com/jasmine/jasmine/issues/870", "title": "Jasmine using anonymous instead of Object", "contents": "Hello All,\nI have a test that it is checking that the content of two objects is equal, this test used to work in jasmine 1.3 but it doesn't work in Jasmine 2.x, I don't understand what \"anonymous\" means, this is the first time that I have encounter this issue with the framework, any help is greatly appreciated\nExpected [ anonymous({ request: '321455' }) ] to equal [ Object({ request: '321455' }) ]", "createdAt": "2015-05-29T21:08:50Z", "updatedAt": "2015-09-24T21:08:47Z", "closedAt": "2015-09-24T21:08:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alxdg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alxdg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-05-29T21:21:23Z", "contents": "Jasmine now includes the constructor when checking for equality of two objects, and the name of the constructor is what is being printed out before the (). The string anonymous appears to be the actual name of the constructor for the actual object passed to the expectation, as jasmine's pretty printer does not attempt to clean up a constructor without a name.\nHopefully this helps. If not, can you share a bit more of your spec itself?\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:08:47Z", "contents": "We haven't heard anything else from the community on this issue in a while, so I'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 872, "url": "https://github.com/jasmine/jasmine/issues/872", "title": ".toHaveBeenCalledWith and modified objects", "contents": "The actual problem happens thanks to object references\u2014I realize it's not a bug, but it really looks like that from the first sight. Probably you have a solution or some advice for that.\ndescribe('spy issue', function() {\n    var foo = {};\n    function injectAndCall(prop, val, cb) {\n        foo[prop] = val;\n        console.log(foo);\n        cb(foo);\n    };\n\n    it('spy issue', function() {\n        var mySpy = jasmine.createSpy('test');\n\n        injectAndCall('a', 0, mySpy);\n        injectAndCall('b', 1, mySpy);\n\n        expect(mySpy).toHaveBeenCalledWith({ a: 0 });\n        expect(mySpy).toHaveBeenCalledWith({ a: 0, b: 1 });\n    });\n});\nThe response is:\nExpected spy test to have been called with [ Object({ a: 0 }) ] but actual calls were [ Object({ a: 0, b: 1 }) ], [ Object({ a: 0, b: 1 }) ].\nIf you check the console, however, you'll get:\n{ a: 0 }\n{ a: 0, b: 1 }\n\nMay be this could be solved with deep-cloning arguments for spies?\nThis example is quite easy, but this also could happen when foo has a reference to another object inside, and the latter in its turn is a subject to modifications.", "createdAt": "2015-06-01T09:45:11Z", "updatedAt": "2016-02-16T23:01:14Z", "closedAt": "2016-02-16T23:01:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shamansir", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "shamansir", "company": "@JetBrains GmbH"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "a-r-d", "company": "NanoDolphin Labs LLC"}], "comments_count": 5, "comments_data": [{"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2015-06-01T10:05:57Z", "contents": "...or could there be a special matcher like .toHaveBeenCalledWith(jasmine.identicalTo({ a: 0 }))?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2015-06-01T10:22:17Z", "contents": "I've looked up for a possible reason in source and I discovered that indeed there's a deep-check there, but of course for this case the object a in this line: https://github.com/jasmine/jasmine/blob/master/src/core/matchers/matchersUtil.js#L159 is already modified (since its second name is foo :) ). So the case in the example is easily and obviously solved with:\nto_test('a', 0, mySpy);\nexpect(mySpy).toHaveBeenCalledWith({ a: 0 });\nto_test('b', 1, mySpy);\nexpect(mySpy).toHaveBeenCalledWith({ a: 0, b: 1 });\nCould not be as easy in complex cases (like mine) when one have no ability to put an expectation between the calls, though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2015-06-01T11:31:14Z", "contents": "In my code I solved it with:\nmySpy.and.callFake(function() {\n    if (mySpy.calls.count() === 1) {\n        expect(mySpy).toHaveBeenCalledWith({ 'a': 0 });\n    } else if (mySpy.calls.count() === 2) {\n        expect(mySpy).toHaveBeenCalledWith({ 'a': 0, 'b': 1 });\n    }\n});\n\n// code to emit mySpy:\ninjectAndCall('a', 0, mySpy);\ninjectAndCall('b', 1, mySpy);\nlooks not so nice, though.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-03T17:36:49Z", "contents": "I would be happy to review a pull request that allowed the callTracker for a spy to alternatively save arguments by value. This could be used something like:\njasmine.createSpy().calls.saveArgumentsByValue()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "a-r-d", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-12-14T15:28:55Z", "contents": "@slackersoft hey did anyone ever do some work on this? If not I am interested in adding this feature.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 873, "url": "https://github.com/jasmine/jasmine/issues/873", "title": "beforeAll called before beforeEach from the parent describe", "contents": "I have just encountered something which I think is an issue. Let's have the following simple test:\ndescribe('level 1', function () {\n    beforeEach(function () {\n        console.log('Level 1 beforeEach');\n    });\n\n    describe('level 2', function () {\n        beforeAll(function () {\n            console.log('Level 2 beforeAll');\n        });\n\n        it('test 1', function () {\n            console.log('Test 1');\n        });\n\n        it('test 2', function () {\n            console.log('Test 2');\n        });\n    });\n});\nI would expect that console output would be:\nLevel 1 beforeEach\nLevel 2 beforeAll\nTest 1\nLevel 1 beforeEach\nTest 2\n\nHowever, the actual output is:\nLevel 2 beforeAll\nLevel 1 beforeEach\nTest 1\nLevel 1 beforeEach\nTest 2\n\nI am not sure if this behavior is expected but it strikes me as not obvious and it is definitely not documented.", "createdAt": "2015-06-02T08:53:26Z", "updatedAt": "2018-07-20T11:32:35Z", "closedAt": "2015-06-05T03:25:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ondrejhanslik", "authorAssociation": "NONE", "participants_count": 12, "participants_data": [{"login": "ondrejhanslik", "company": "Vendavo"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "PaddyMann", "company": null}, {"login": "klinki", "company": null}, {"login": "chaoran", "company": "Rice University"}, {"login": "songokudbz", "company": null}, {"login": "keithdtyler", "company": "@oculusvr @qanalysts"}, {"login": "Gerg", "company": null}, {"login": "kevinkuebler", "company": "Matrix Pointe Software"}, {"login": "JoshCheek", "company": null}, {"login": "masaeedu", "company": null}, {"login": "jeme", "company": "Systematic"}], "comments_count": 20, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-05T03:25:22Z", "contents": "This is exactly what is supposed to happen. The beforeAll and afterAll functions wrap the specs where the beforeEach and afterEach functions wrap an individual spec.\nIf jasmine ran in the order you are expecting, then the beforeEach for the first spec would execute before the beforeAll, but the second spec's beforeEach would execute after it, and thus have a different setup. Since the beforeEach is declared at the describe level, a user should be able to expect that it should be at the same state for each spec that it is run for.\nClosing.", "reactions_count": 14, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2015-06-25T12:28:56Z", "contents": "I'm with @ondrejhanslik - this is an unfortunate constraint!\nAs an example use case, I have a page with an Excel file uploader that I'm testing in Protractor. I expected to be able to:\ndescribe('My page', function () {\n  beforeAll(function () {\n    // Call the API and set-up some users\n    // Login\n  });\n\n  beforeEach(function () {\n    // Open the page I'm testing\n  });\n\n  describe('Header', function () {\n    it('should be called \\'My Excel file uploader\\'', function () {\n      // expect...\n    });\n  });\n\n  describe('Excel file uploader', function () {\n    beforeAll(function () {\n      // Upload an Excel file\n    });\n\n    it('should require A1 to be filled in', function () {\n      // expect...;\n    });\n\n    it('should require A2 to be filled in', function () {\n      // expect...;\n    });\n});\n\nI would expect it to run:\n\nbeforeAll1\nbeforeEach1\nspec1\nbeforeEach1\nbeforeAll2\nspec2\nbeforeEach1\nspec3\nbeforeEach1\nspec4\n\nEssentially, I expect beforeAll to act the same a beforeEach (note order of beforeEach1 > beforeAll2 > spec3) with the exception that it is doesn't get called more than once.\nI'm not clear on your reasoning @slackersoft - I see this as a valuable addition and not overly complex to implement?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "ondrejhanslik", "authorAssociation": "NONE", "createdAt": "2015-06-25T12:35:22Z", "contents": "Don't let me wrong. After diving into using beforeAll, I completely understand the reasoning and I prefer the current order of execution. However, the problem is that when you first start using it, you expect it to be different. The ordering should be mentioned in the documentation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2015-06-25T12:56:06Z", "contents": "With the current implementation (if I understand correctly), it only really makes sense to have a single beforeAll, and this should either be outside of any describe block, or at the top of the outermost describe block.\ni.e. It would make no sense for my 2nd beforeAll to be located where it is.\nSo I would see adding support for what I'm after as an extension of what's possible, rather than something that goes against your current desired behaviour.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2015-06-25T12:59:28Z", "contents": "My workaround is:\ndescribe('My page', function () {\n  beforeAll(function () {\n    // Call the API and set-up some users\n    // Login\n  });\n\n  beforeEach(function () {\n    // Open the page I'm testing\n  });\n\n  describe('Header', function () {\n    it('should be called \\'My Excel file uploader\\'', function () {\n      // expect...\n    });\n  });\n\n  describe('Excel file uploader', function () {\n    it('should validate A1', function () {\n      // upload\n      // expect1\n      // expect2\n      // expect3\n    });\n\n    it('should validate A2', function () {\n      // upload\n      // expect1\n      // expect2\n      // expect3\n    });\n});\n\nNow that's sucky - I'm having to duplicate the upload code (which is abstracted in a page object, so at least it's only a one liner), and then put multiple expectations in each spec (bleugh).\nIf there's a better workaround or if I'm fundamentally getting things wrong, I'd love to hear suggestions :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-02T22:03:11Z", "contents": "@PaddyMann You should be able to use beforeAll and beforeEach wherever you want in your spec hierarchy. If you don't want the code duplication in your tests, you should be able to use a beforeEach in your inner describe to perform the upload.\nAll beforeAlls need to be run before the beforeEach because that is how we can guarantee that all the specs in the given describe have their setup run in the same order. If it ran as you proposed your actual order of operations would have been:\n\nCall the API and do setup - beforeAll1\nLogin\nOpen the page - beforeEach1\nexpectations - spec 1\nOpen the page - beforeEach1\nPerform the Upload - beforeAll2\nexpectations - spec 2\nOpen the page - beforeEach1\nexpectations - spec 3\nOpen the page - beforeEach1\nexpectations - spec 4\n\nThis would make any expectations in specs 3 and 4 be in a state where they had just loaded the page with the form and the upload would not have happened yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2015-07-03T06:12:51Z", "contents": "I see how my example confuses - actually in steps 8 and 10, the URL is the same and my test doesn't refresh the page if it's already loaded.\nI understand the point around tests in the same describe block having the same apparent state, but still lament the lack of the flexibility. Never mind - thanks for taking the time to explain (again)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "klinki", "authorAssociation": "NONE", "createdAt": "2016-04-22T11:40:56Z", "contents": "Isn't there any way how to modify execution order of beforeEach/beforeAll?\nI need to execute it on on hierarchy level. (I need basically exactly the same thing as others in this thread).\ndescribe('Root describe', function() {\n     beforeAll(function() { });\n     beforeEach(function() {}); \n     afterEach(function() {});\n     afterAll(function(){}); \n\n    it(function() {});\n\n   describe('Nested describe', function() {\n     beforeAll(function() { });\n     beforeEach(function() {}); \n     afterEach(function() {});\n     afterAll(function(){}); \n\n     it(function() {});\n  });\n});\n\nAnd order would be\n\nRoot describe beforeAll\nRoot describe beforeEach\nRoot describe it\nRoot describe afterEach\nRoot describe beforeEach\nNested describe beforeAll\nNested describe beforeEach\nNested describe it\nNested describe afterEach\nNested describe afterAll\nRoot describe afterEach\nRoot describe afterAll\n\nIdea is basically to handle the describe block in similar way as the it block.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "chaoran", "authorAssociation": "NONE", "createdAt": "2016-06-19T00:39:02Z", "contents": "I agree that the beforeAlls should execute in the order of their hierarchical position. I really don't see the point of the constraint to running all beforeAlls before every beforeEach. This makes the beforeAll only makes sense when using at the outermost scope. With this constraint, what's the point of using a beforeAll in a child scope?", "reactions_count": 13, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "songokudbz", "authorAssociation": "NONE", "createdAt": "2016-07-13T08:43:51Z", "contents": "I also find this nonsense. I would suggest making a Before All for each individual 'describe' ....", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keithdtyler", "authorAssociation": "NONE", "createdAt": "2016-07-18T23:55:00Z", "contents": "I don't agree with anyone who thinks beforeAll should run after beforeEach. It doesn't make any sense from an organizational perspective. beforeEach runs before each test. beforeAll runs before any test is run within the current describe. The beforeEach is effectively tied to the tests and the beforeAll is effectively tied to the describe. Doing the beforeAll after the beforeEach would break that boxing. This is pretty standard stuff in test engines.\nbeforeAll -------\n|   beforeEach -------\n|   |   test1 --------\n|   beforeEach -------\n|   |   test2 -------\n...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2016-07-19T06:51:33Z", "contents": "Very happy for beforeAlls to always run before any beforeEachs @keithdtyler. Only problem is that currently beforeAlls attached to sub-describes are hoisted to the top and shouldn't be.", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-19T07:43:28Z", "contents": "@PaddyMann\nJasmine's ordering of beforeAlls and beforeEachs is consistent with other BDD frameworks.\nFor example this RSpec suite:\nRSpec.describe 'foo' do\n  before(:each) do\n    puts 'each 0'\n  end\n\n  before(:all) do\n    puts 'all 0'\n  end\n\n  it 'spec' do\n    puts 'spec 0.0'\n  end\n\n  it 'another spec' do\n    puts 'spec 0.1'\n  end\n\n  describe 'suite' do\n    before(:each) do\n      puts 'each 1'\n    end\n\n    before(:all) do\n      puts 'all 1'\n    end\n\n    it 'spec' do\n      puts 'spec 1.0'\n    end\n\n    it 'another spec' do\n      puts 'spec 1.1'\n    end\n  end\nend\n\nand the corresponding jasmine suite:\ndescribe(\"foo\", function() {\n    beforeEach(function() {\n        console.log('each 0');\n    });\n\n    beforeAll(function() {\n        console.log('all 0');\n    });\n\n    it('spec', function() {\n        console.log('spec 0.0');\n        expect(true).toBe(true);\n    });\n\n    it('another spec', function() {\n        console.log('spec 0.1');\n        expect(true).toBe(true);\n    });\n\n    describe('suite', function() {\n        beforeEach(function() {\n            console.log('each 1');\n        });\n\n        beforeAll(function() {\n            console.log('all 1');\n        });\n\n        it('spec', function() {\n            console.log('spec 1.0');\n            expect(true).toBe(true);\n        });\n\n        it('another spec', function() {\n            console.log('spec 1.1');\n            expect(true).toBe(true);\n        });\n    });\n});\nHere is the Rspec output:\nall 0\neach 0\nspec 0.0\neach 0\nspec 0.1\nall 1\neach 0\neach 1\nspec 1.0\neach 0\neach 1\nspec 1.1\n\nand the Jasmine output:\nall 0\neach 0\nspec 0.0\neach 0\nspec 0.1\nall 1\neach 0\neach 1\nspec 1.0\neach 0\neach 1\nspec 1.1", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "keithdtyler", "authorAssociation": "NONE", "createdAt": "2016-07-19T16:33:50Z", "contents": "Didn't know the \"outer\" each fired for all the tests for the inner describe in addition to the \"inner\" each, but it's nice to know.\n@PaddyMann It doesn't look to me like a nested describe's beforeEach \"bubbles to the top\" at all, as long as the \"inner\" beforeEach is defined inside the nested describe block.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PaddyMann", "authorAssociation": "NONE", "createdAt": "2016-07-20T09:07:11Z", "contents": "@keithdtyler the beforeEachs do not, but the beforeAlls did I believe. I'm on holiday and can't double check this, but this is what I remember the issue to have been. Apologies for any inaccuracy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinkuebler", "authorAssociation": "NONE", "createdAt": "2016-08-05T15:17:56Z", "contents": "I agree with @PaddyMann and find the ordering with regards to nested contexts to be unintuitive. My expectation is that nested describe contexts are treated as one spec with respect to the beforeAll and beforeEach setups of their parent. So given the example from @Gerg I would expect the following output:\nall 0\neach 0\nspec 0.0\neach 0\nspec 0.1\neach 0     <-- this not happening here is what surprised me\nall 1\neach 1\nspec 1.0\neach 1\nspec 1.1\n\nIt other words, I expect the parent beforeEach to be run once before the nested context, instead of being treated as another beforeEach within the nested context. Obviously, changing to this ordering would be a pretty major breaking change. It might be nice to have a way to configure the framework for this mode though.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "JoshCheek", "authorAssociation": "NONE", "createdAt": "2017-02-04T06:01:48Z", "contents": "Surprising that this has so much attention. It's a totally reasonable decision. Paddy's is reasonable too, it basically amounts to \"before all of these tests\". For the other perspectives, I suspect the confusion is due to the structure of the syntax causing it to feel like tree traversal or something, it'll probably make sense if you think about the meaning of the method names as human words. Anyway, cheers to the maintainers for fighting the good fight \ud83c\udf7b", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "masaeedu", "authorAssociation": "NONE", "createdAt": "2017-11-11T20:40:58Z", "contents": "@JoshCheek All of that is well and good, but how am I supposed to actually do sequencing of beforeAlls? Everyone keeps pointing to other frameworks and their feelings about the issue, but there is a use case that is unserved by the existing feature set. If it needs to be called beforeThisIsTotallyNotAllThisIsSomethingElse, and then be sequenced hierarchically, that's fine, but we still need a way to do:\ndo some setup\nrun 20 general tests\ndo some more setup\nrun 10 special tests\nteardown special test setup\nteardown general setup\n\nAs @PaddyMann said, the duplication he settled for is a workaround. This is not an acceptable workaround in all scenarios. I'm doing integration tests, and it takes on the order of minutes to do setup. I really don't want to saddle every one of my sub-second tests with a minute long setup phase.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T04:44:35Z", "contents": "@masaeedu that's exactly what beforeAll and afterAll are for. Possibly the confusion comes from the fact that they are scoped within the describe that they are within. This means that the specs in a child describe will also run in between the parents beforeAll and afterAll.\nSomething like this seems like it would solve your problem:\ndescribe('global', function() {\n  beforeAll(function() { /* general setup */ });\n\n  it('is not special', function() {});\n\n  describe('special', function() {\n    beforeAll(function() { /* special setup */ });\n    it('is special', function() {});\n    afterAll(function() { /* teardown special setup */ });\n  });\n\n  afterAll(function() { /* teardown general setup */ });\n});\nI've moved the afterAlls out to where the actually run to make it more clear, but you would probably group them with the beforeAlls in a real suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeme", "authorAssociation": "NONE", "createdAt": "2018-07-20T11:31:12Z", "contents": "Ok so this issue had me highly confused, after doing some poking around so just wanted to share some observations.\nGiven this spec:\nvar log = console.log;\ndescribe('spec', function() {\n    beforeAll(function() { log('spec.beforeAll'); });\n    beforeEach(function() { log('spec.beforeEach'); });\n\n    describe('nested_01', function() {\n        beforeAll(function() { log('spec.nested_01.beforeAll'); });\n        beforeEach(function() { log('spec.nested_01.beforeEach'); });\n        it('it_001', function() { log('spec.nested_01.it_001'); });\n        it('it_002', function() { log('spec.nested_01.it_002'); });\n        afterEach(function() { log('spec.nested_01.afterEach'); });\n        afterAll(function() { log('spec.nested_01.afterAll'); });\n    });\n\n    describe('nested_02', function() {\n        beforeAll(function() { log('spec.nested_02.beforeAll'); });\n        beforeEach(function() { log('spec.nested_02.beforeEach'); });\n        it('it_001', function() { log('spec.nested_02.it_001'); });\n        it('it_002', function() { log('spec.nested_02.it_002'); });\n        afterEach(function() { log('spec.nested_02.afterEach'); });\n        afterAll(function() { log('spec.nested_02.afterAll'); });\n    });\n\n    afterEach(function() { log('spec.afterEach'); });\n    afterAll(function() { log('spec.afterAll'); });\n});\nhttps://next.plnkr.co/edit/RoIcryieqLT0JAIi\nWe get:\nspec.beforeAll\nspec.nested_01.beforeAll\nspec.beforeEach\nspec.nested_01.beforeEach\nspec.nested_01.it_001\nspec.nested_01.afterEach\nspec.afterEach\nspec.beforeEach\nspec.nested_01.beforeEach\nspec.nested_01.it_002\nspec.nested_01.afterEach\nspec.afterEach\nspec.nested_01.afterAll\nspec.nested_02.beforeAll\nspec.beforeEach\nspec.nested_02.beforeEach\nspec.nested_02.it_001\nspec.nested_02.afterEach\nspec.afterEach\nspec.beforeEach\nspec.nested_02.beforeEach\nspec.nested_02.it_002\nspec.nested_02.afterEach\nspec.afterEach\nspec.nested_02.afterAll\nspec.afterAll\n\nWhich seems perfectly reasonable to me, but lets dig deeper.\n\nbeforeAll/afterAll bubbles to the top most scope.\n\nThats incorrect if we examine the output above, spec.beforeAll, spec.nested_01.beforeAll and spec.nested_02.beforeAll would all be at the top of the output if that was the case, but spec.nested_02.beforeAll clearly comes later...\nThis works as I would expect it to work.\n\nouter scoped beforeEach/afterEach runs for each test in inner scope.\n\nThis may be counter-intuitive, but either way that it would run would give some feature that wasn't there, so it being defined like this is just fine...\nI am not a fan of beforeEach/afterEach anyways so it's of little consequence to me.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 875, "url": "https://github.com/jasmine/jasmine/issues/875", "title": "Is there a way to get a handle of the spec name in the AfterEach block ?", "contents": "Hi Team,\nWe can perform jasmine.getEnv().currentSpec.description to get the name of the test in the AfterEach block in Jasmine 1 version for protractor but doesn't work when switching to jasmine2 framework in Protractor.\nI see a closed story here: #611.\nThe scenario specifically where I would use is to capture screenshot with file name containing the spec name.\nIs it possible to bring back the deprecated feature or provide a different mechanism that I can include in every spec file in the afterEach block to capture screenshots with the filename containing the spec name.", "createdAt": "2015-06-10T22:38:36Z", "updatedAt": "2015-08-24T21:20:07Z", "closedAt": "2015-06-11T21:39:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "raghavan85", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "raghavan85", "company": null}, {"login": "hjhart", "company": "Voom Flights"}], "comments_count": 2, "comments_data": [{"authorLogin": "raghavan85", "authorAssociation": "NONE", "createdAt": "2015-06-11T21:40:40Z", "contents": "Found protractor-jasmine2-html reporter which does the job.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hjhart", "authorAssociation": "NONE", "createdAt": "2015-08-24T21:20:07Z", "contents": "For those who stumble upon this: https://github.com/Kenzitron/protractor-jasmine2-html-reporter", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 876, "url": "https://github.com/jasmine/jasmine/issues/876", "title": "Is there a standard for object method tests in Jasmine?", "contents": "i.e., testing new List()).add(), FooCollection.index (static methods)\nis it('List#add\"...)\nor\nit(\"List.add\"...)\npreferred?", "createdAt": "2015-06-12T16:50:00Z", "updatedAt": "2015-06-12T19:52:04Z", "closedAt": "2015-06-12T19:52:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bingomanatee", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bingomanatee", "company": "Wonderland Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-12T19:52:04Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nJasmine does not enforce any kind of naming of your its or describes. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 877, "url": "https://github.com/jasmine/jasmine/issues/877", "title": "Execute a single spec process out of the top specs tree", "contents": "Hi all,\nCorrect me if I'm wrong but,\neven though I'm passing the suites Ids to the \"execute\" method the reporter still process the entire specs tree.\nSpecifying the specFilter or the suites IDs - ends with updating the spec status = \"disabled\" on the SpecDone phase, but what about the entire lifecycle?\nCurrently there's no method for setting the top level suite NOR controlling of which suite to be run.\nI did an ugly hack messing up with the topSuite children.\nCan you please give a way of executing a single / multi specs?\nThank you", "createdAt": "2015-06-14T12:27:10Z", "updatedAt": "2015-10-15T23:53:02Z", "closedAt": "2015-10-15T23:53:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lastboy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lastboy", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-30T15:06:42Z", "contents": "Disabled specs are not executed, but are reported to the reporters so that the reporters can see what happened to all of the specs that were defined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lastboy", "authorAssociation": "NONE", "createdAt": "2015-06-30T15:11:20Z", "contents": "That I understand,\nBut why only the SpecDone phase get to be notified? The other listeners are not aware to the fact which was disabled.\nLet's say I'm creating my own reporter and want to ignore those that was disabled. I cannot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-30T15:25:29Z", "contents": "You should be able to check for the status of the spec in your reporter to determine if it was disabled.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lastboy", "authorAssociation": "NONE", "createdAt": "2015-06-30T15:26:58Z", "contents": "I agree,\nBut the status is being update only when the SpecDone", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-17T19:09:11Z", "contents": "The status is unavailable until specDone because that is the time at which we can guarantee that we have a real status. A spec that is not disabled or pending would need some kind of running status in specStarted which would then change in specDone. Since the active case is the normal state of the world, we prefer to optimize for that and not have a possibly confusing or transient status field in specStarted but wait until specDone when we are sure we have a valid status.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-15T23:53:02Z", "contents": "We haven't heard anything further on this issue in a while, so I'm going to close it. Please comment here or open another issue if this isn't resolved.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 878, "url": "https://github.com/jasmine/jasmine/issues/878", "title": "Improved Documentation", "contents": "introduction.html contains almost the entirety of the Jasmine documentation with no form of navigation.\nIt would be very very useful to have at minimum a table of contents so that it is easy to jump to specific sections of the documentation when needed.", "createdAt": "2015-06-15T20:47:31Z", "updatedAt": "2015-07-01T01:28:16Z", "closedAt": "2015-06-30T15:19:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alex-dow", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alex-dow", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-30T15:19:08Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 880, "url": "https://github.com/jasmine/jasmine/issues/880", "title": "Not running all tests", "contents": "I'm on 2.2.0 and typically when I have more than 10 tests, it will only run the first 10 and not the others. Most of my tests are doing api calls which take a little while. If I remove the api calls it works fine with more tests. I can't figure out why though I believe it has something to do with the timeout function. I know if I remove the if statement where it's checking for maximumSpecCallbackDepth in clearStack(), it's fine.\nI'm running this in a Nashorn environment with a custom reporter and using jasmine.clock().install();.\nHas anyone else experience this or have any idea what it may be?", "createdAt": "2015-06-20T00:36:07Z", "updatedAt": "2016-02-23T23:59:11Z", "closedAt": "2016-02-23T23:59:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wejrowski", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "wejrowski", "company": "Infusionsoft"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "provegard", "company": null}, {"login": "vitalije", "company": "\u041c\u0430\u043d\u0430\u0441\u0442\u0438\u0440 \u0421\u0442\u0443\u0434\u0435\u043d\u0438\u0446\u0430"}], "comments_count": 10, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-30T15:23:22Z", "contents": "If your specs are making Ajax requests, you should probably be stubbing them out with something like jasmine ajax or else using the done callback to make your specs asynchronous and wait for the call to return.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "provegard", "authorAssociation": "NONE", "createdAt": "2015-10-01T14:54:08Z", "contents": "I have this problem as well. My test suite is run in a Scala host using Nashorn.\nI lowered maximumSpecCallbackDepth to 5 to make it work. It would be nice to have this value as a configurable option.\n(Side note/question: I had to make my Jasmine boot file async-aware by executing a host-provided done-callback in a custom reporter. Is that the officially recommended way?)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-23T22:54:15Z", "contents": "@provegard The current preferred way to cause your jasmine suite to not execute at onload time is to provide your own boot.js that waits until your suite is ready before kicking off the run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "provegard", "authorAssociation": "NONE", "createdAt": "2015-10-24T13:07:02Z", "contents": "@slackersoft Not sure what you mean - as I wrote I'm running tests from a Scala/Nashorn host, so there is no such thing as onload.\nI have a custom boot file that essentially calls env.execute() inside a function that is called from Scala code. But there is no human to observe HTML output in a browser. Instead, the Scala code wants to know about the outcome of the test run. But as soon as Jasmine starts going async, env.execute() returns to the caller. At this point, the suite may not yet be complete.\nMy current approach to knowing when the suite is complete is to have a Scala-provided reporter that resolves a Promise inside jasmineDone. That works well, so there's no problem here. I was just curious as to if this is a standard approach to dealing with suite-asyncness from a programmatic run. :-)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "provegard", "authorAssociation": "NONE", "createdAt": "2015-10-24T13:11:09Z", "contents": "One more thing to add: http://jasmine.github.io/2.3/boot.html says \"The jsApiReporter also receives spec results, and is used by any environment that needs to extract the results from JavaScript.\" So using jsApiReporter was my first approach, but since it hadn't collected all test results by the time env.execute() returned, it was of no use.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-26T22:32:14Z", "contents": "Spec execution is always potentially asynchronous (if you have more than 20 specs, it will definitely be see #366, #945), so you always have to wait for the jasmineDone event to get reported before all of the specs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vitalije", "authorAssociation": "NONE", "createdAt": "2015-11-25T11:11:50Z", "contents": "I have a problem with Spec with more than 15 tests. Jasmine reports correctly execution of every test printing out dots and F-s, but at the end it gives wrong information that everything went ok without errors. It doesn't print any other information on failed tests. When I comment out some of the tests to reduce number of them, jasmine prints detailed information on every failed test and also at the end it gives correct summary with number of failed tests. Here is the output when suite contains more than 15 tests.\nRunning \"jasmine\" task\nStarted\n..F..........FF..\nDone, without errors.\n\nWell, I have found a solution. In the Gruntfile.coffee, where the task 'jasmine' is registered, the following lines of code should be added before calling jasmine.execute()\ngrunt.registerTask 'jasmine', '....', ()->\n     jasmine = new require('jasmine')\n     conf = \n           spec_dir: 'build/spec'\n           spec_files: ['mySpec.js']\n           helpers: ['helpers/*.js']\n     jasmine.loadConfig conf\n     // the following three lines solved the issue \n     done = this.async()\n     jasmine.onComplete (passed) ->\n           done(passed)\n\n     jasmine.exec()\n\nHTH", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-10T22:33:06Z", "contents": "@vitalije It looks like you're using the jasmine-npm to run your specs. That package also includes a grunt task that should correctly run your specs, but you would need to put your configuration into a jasmine.json file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vitalije", "authorAssociation": "NONE", "createdAt": "2015-12-11T06:48:09Z", "contents": "Thanks @slackersoft", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T23:59:11Z", "contents": "It sounds like this issue was primarily from not waiting for the suite to finish executing (jasmineDone to get called on a reporter), so I'm going to close it.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 881, "url": "https://github.com/jasmine/jasmine/issues/881", "title": "Feature Request: Merge `describe` description with the same name ", "contents": "It could be helpful for storing specs in different files:\ntheme-a/\n    sub-theme.spec.js \n    another-sub-theme.spec.js \ntheme-b/\n    sub-theme.spec.js \n    another-sub-theme.spec.js \n\nwhere sub-theme.spec.js contains:\ndescribe('theme-a', function() {\n    describe('sub-theme', function() {\n         // specs\n    });\n});\nand another-sub-theme.spec.js contains:\ndescribe('theme-a', function() {\n    describe('another-sub-theme', function() {\n         // specs\n    });\n});\nso in the end in the output they are combined in:\ntheme-a\n    sub-theme\n        ...specs...\n    another-sub-theme\n        ...specs...", "createdAt": "2015-06-20T18:34:25Z", "updatedAt": "2015-07-17T01:29:56Z", "closedAt": "2015-06-21T21:12:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shamansir", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "shamansir", "company": "@JetBrains GmbH"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-06-21T21:12:35Z", "contents": "I'm assuming that by define you actually mean describe since there is no define in jasmine. You should be able to do this yourself with a custom reporter.\nCurrently jasmine's built-in reporters don't look at the text of your describes or its at all. This allows them to be fast and relatively simple to maintain.\nThis isn't functionality that we want in jasmine itself. Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2015-07-17T01:29:56Z", "contents": "(fixed the title and body define -> describe for the search)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 882, "url": "https://github.com/jasmine/jasmine/issues/882", "title": "Expectations in async function are not asserted", "contents": "Context\nExpects declared in asynchronous function are not asserted.\nEnvironment\nProtractor 1.6.1 (which packs Jasmine 2.1.1)\nRequest 2.53.0\nExample\n    var request = require('request');\n    describe('async test', function() {\n        it('should verify after done', function(done) {\n                var options = {\n                        url: 'http://www.google.com',\n                        method: 'GET',\n                        json : {},\n                        headers: {\n                            'Accept':'*'\n                        }\n                };\n\n                request(options, function(error, message, body) {\n                    expect(true).toEqual(false);\n\n                    done();\n                });\n        });\n    });\nThe outcome of this test is successful (but it clearly should fail). But when I replace the done invocation with setTimeout(done, 1000), it fails.", "createdAt": "2015-06-23T10:14:23Z", "updatedAt": "2015-08-01T16:03:50Z", "closedAt": "2015-08-01T16:03:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jeroenvekemans", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jeroenvekemans", "company": null}, {"login": "ljwall", "company": "@magicseaweed "}], "comments_count": 2, "comments_data": [{"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-01T06:56:50Z", "contents": "I just tried to replicate this and got the expectation failing as it should, using both Jasmine 2.1.1 directly and Protractor 1.6.1.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeroenvekemans", "authorAssociation": "NONE", "createdAt": "2015-08-01T16:03:50Z", "contents": "@ljwall Thank you for the response, it seems that I did not provide the intended example. The example below does succeed using protractor 1.6.1, but fails correctly when using the latest version of protractor. Executing the test with jasmine also shows correct behaviour, so I guess it was a problem with protractor/jasminewd in older versions.\nvar request = require('request');\n\ndescribe('async test', function() {\n    it('should fail because of afterEach', function() {\n          // verify nothing\n    });\n});\n\nafterEach(function(done) {\n  var options = {\n          url: 'http://www.google.com',\n          method: 'GET',\n          json : {},\n          headers: {\n              'Accept':'*'\n          }\n  };\n\n  request(options, function(error, message, body) {\n      expect(true).toEqual(false);\n\n      done();\n  });\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 883, "url": "https://github.com/jasmine/jasmine/issues/883", "title": "I'd like to be able to run the Jasmine project specs in the browser without needing Ruby", "contents": "In my first pull request, I went through the steps of getting Ruby working (http://geekswithblogs.net/Aligned/archive/2015/06/03/my-github-pull-request-for-jasmine-experience.aspx), but now I have a new computer and don't want to do it again :-). However, I still have a desire to contribute.\nI think it'd also help lower the entry boundary for others to contribute.\nI'd like to do grunt serve from the command line, then browse to the url and run the tests in the browser and debug.\nI started last night, but I don't know enough to get it working. Should this use express? Is \"serve\" a good name for the grunt task?", "createdAt": "2015-06-30T15:59:30Z", "updatedAt": "2019-03-26T00:57:06Z", "closedAt": "2019-03-26T00:57:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "participants_count": 7, "participants_data": [{"login": "aligneddev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "kiewic", "company": "@Microsoft "}, {"login": "johnjbarton", "company": "@google"}, {"login": "sgravrock", "company": null}, {"login": "battk", "company": null}, {"login": "wood1986", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-31T21:47:36Z", "contents": "I think this is a good goal, but I'm not totally sure on the best way to approach it.\nI don't want the jasmine-core repo to have a bunch of code to run specs in the browser now that we have explicitly extracted that out into other packages (jasmine-gem, jasmine-py, gulp-jasmine-browser, and community supported packages like grunt-contrib-jasmine). I think in this situation, it would make the most sense for jasmine-core to try to use gulp-jasmine-browser to do browser based testing with only a nodejs dependency graph. This will probably require some work in order to get two versions of jasmine loaded for testing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kiewic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-17T02:12:09Z", "contents": "Please consider reducing the development dependencies to only Node.js. Installing Ruby on Windows is very troublesome.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-09-01T16:01:43Z", "contents": "it would make the most sense for jasmine-core to try to use gulp-jasmine-browser\n\nDoes this imply conversion of the existing grunt node test to gulp?\n\nThis will probably require some work in order to get two versions of jasmine loaded for testing.\n\nAFAICT the execSpecsInNode test uses the previous version of jasmine (in ./node_modules) but with jasmine-core from the source code. So it's sorta 1.2 rather than 2 versions for jasmine. This is fine for smallish changes.  Is that what you have in mind for a browser based test as well?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-02T16:55:44Z", "contents": "Does this imply conversion of the existing grunt node test to gulp?\n\nAs much as I'd like to keep gulp out of Jasmine core entirely, it probably does. I'd strongly prefer to only convert the parts that actually run Jasmine tests over to gulp and keep the rest in grunt. It might also be worth trying to modify gulp-jasmine-browser to be able to work inside Grunt, if possible.\n\nAFAICT the execSpecsInNode test uses the previous version of jasmine (in ./node_modules) but with jasmine-core from the source code. So it's sorta 1.2 rather than 2 versions for jasmine. This is fine for smallish changes. Is that what you have in mind for a browser based test as well?\n\nI don't think that's the way to go. Making sure that the latest version of Jasmine can test itself is a key part of our development process, and we don't want to lose that. The way it works currently is that jasmine-gem publishes a dependency on the released jasmine-core but depends on a local copy in development. I think a hypothetical all-Node setup would need to do something similar.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "battk", "authorAssociation": "NONE", "createdAt": "2019-01-27T01:21:15Z", "contents": "Can I work on this using Karma? Its removes Ruby and automates the browser testing process so you don't need to actually open pages in browsers.\nAs far as I can tell, the only code change needed would be to modify the Util Spec to make the jasmineFile spec more lenient. Karma file urls have a query at the end used to make sure files served are up to date.\nIt would be relativly easy to make it work exactly how the node tests work. Karma's jasmine test runner will use a jasmine-core module from npm to run the test. Thats pretty close to how the node test is currently done.\nMaking the next version test itself may also be easy if require is smart enough to recognize that jasmine-core is the current module. If not, the Karma Jasmine test runner may need to be modified.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-30T01:27:03Z", "contents": "I don't think we want to have Jasmine rely on Karma (or any other down stream runner) to run Jasmine's own specs. I would like to have Jasmine provide a way to run Jasmine specs in a browser from node, probably as an additional package that user's who want selenium can include. Then we can have jasmine-core use the new package to run with the correct two different versions of Jasmine that we currently use, without requiring changes in libraries not maintained by Jasmine.\nThis is the next big Jasmine endeavor on my list, but I need some time to really dig into it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "battk", "authorAssociation": "NONE", "createdAt": "2019-01-30T03:43:30Z", "contents": "If you want, you can imagine that karma is just a server that automates running test runners (with fancy things like running with your updated code whenever a file is changed). There is a kama-jasmine adapter which is mostly in charge of adding jasmine to a list of src files to be loaded and a custom reporter. If you really wanted to, you could maintain your own karma-jasmine adapter so you would control the runner.\nI picked karma because it almost does what you want out of the box and has reasonable ide support. It doesn't have to be karma, but pick an all node solution. I didn't really enjoy stumbling with the missing ruby related things.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-30T16:42:50Z", "contents": "I understand the reluctance to couple jasmine and karma-jasmine, but another way to look at this is as a kind of jasmine-in-browser integration test. Yes you want to unit test jasmine in browsers, but really it's a checkup: you already passed in node.  The additional ways karma-jasmine will fail beyond jasmine-unit test issues include karma-jasmine's configuration of jasmine: maybe that is a good thing?\nJust to take the other side, a chrome-only solution based on puppeteer might be an option. You need the install to be foolproof or you need the install to solve cross-browser issues. Getting both is going to be hard to find.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wood1986", "authorAssociation": "NONE", "createdAt": "2019-02-25T05:54:30Z", "contents": "See #1658", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 884, "url": "https://github.com/jasmine/jasmine/issues/884", "title": "runnableLookupTable is added to, but never used - causes memory increase for no reason", "contents": "The 'runnableLookupTable' is created and added to, but never used. This causes un-required memory increases.\nIs there any reason I shouldn't put in a PR to remove this?", "createdAt": "2015-07-01T17:13:07Z", "updatedAt": "2015-09-24T21:31:37Z", "closedAt": "2015-09-24T21:31:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lostthetrail", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lostthetrail", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-01T23:41:30Z", "contents": "It should be fine to remove the runnableLookupTable, I believe it is vestigial from how subsets of specs were run before. It looks like it is just holding onto the topSuite which is going to be held onto by other things as well, so I don't know what you'll see much memory improvement from removing it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:31:37Z", "contents": "We haven't seen anything else from the community on this issue so I'm going to close it. I'd still be willing to review a pull request that gets rid of the runnableLookupTable if it truly isn't used.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 885, "url": "https://github.com/jasmine/jasmine/issues/885", "title": "Document fail() function", "contents": "Found this by looking through github issues and it's really useful, however as far as I can see it isn't mentioned anywhere in the public-facing documentation.", "createdAt": "2015-07-03T19:40:28Z", "updatedAt": "2015-07-12T08:59:25Z", "closedAt": "2015-07-12T08:59:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "keirlawson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "keirlawson", "company": null}, {"login": "ljwall", "company": "@magicseaweed "}], "comments_count": 2, "comments_data": [{"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-12T07:15:03Z", "contents": "Hi, I think you can close this as there is an issue on the documentation pages repo: jasmine/jasmine.github.io#26", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "keirlawson", "authorAssociation": "NONE", "createdAt": "2015-07-12T08:59:25Z", "contents": "Great!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 886, "url": "https://github.com/jasmine/jasmine/issues/886", "title": "Spies and promises", "contents": "They don't work from promises callbacks for some reason:\n    validateToken: function () {\n        var options = {\n            url: this.appOptions.exAuthUrl,\n            data: {\n                method: 'validateToken',\n                token: this.get('token')\n            }\n        };\n        return Promise.resolve($.get(options)).then(function (obj) {\n            if (obj.status === \"OK\") {\n                return true;\n            } else {\n                throw new Error(\"Invalid token\");\n            }\n        });\n    }\n\n       describe(\"when calling validateToken\", function () {\n            var successMock, errorMock;\n            beforeEach(function () {\n                model.set('token', 'testtoken');\n\n                successMock = jasmine.createSpy('success');\n                errorMock = jasmine.createSpy();\n            });\n\n            it(\"Should resolve promise if response is correct and status OK\", function (done) {\n\n                model.validateToken().then(function (data) {\n                    console.log('success');\n                    successMock();\n                }).catch(function () {\n                    console.log('err');\n                }).finally(function () {\n                    console.log('don');\n                    done();\n                });\n\n                jasmine.Ajax.requests.mostRecent().respondWith({\n                    status: 200,\n                    responseText: '{\"status\": \"OK\", \"response\": \"text\"}'\n                });\n\n\n                expect(successMock).toHaveBeenCalled();\n            });\n      });\nGives me following:\n'success'\n'don'\nExpected spy success to have been called.\nJasmine 2.3.4", "createdAt": "2015-07-07T01:34:04Z", "updatedAt": "2015-09-25T00:08:25Z", "closedAt": "2015-09-25T00:08:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "asvetliakov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "asvetliakov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ljwall", "company": "@magicseaweed "}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-08T21:38:21Z", "contents": "Some promise libraries (and the native ones too, I think) will invoke their callbacks in a setTimeout(0) or something similar. This would cause your expectation to be run before the callbacks are actually invoked.\nTo confirm if this is the case, can you make your spec async (receive the done callback) and change your expectation to be in its own setTimeout? e.g\nsetTimeout(function() {\n  expect(successMock).toHaveBeenCalled();\n  done();\n}, 50);\nIf this fixes the spec, it should just be a timing issue in the promise library.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-13T07:20:03Z", "contents": "slackersoft is right - indeed it is part of the the promise/A+ spec that then should execute asynchronously.  (See https://promisesaplus.com 2.2.4 and 3.1.)\nHowever, rather than use a timeout to coordinate, you should either move the expect into the finally block, or you could drop the spy and the expect altogether and just use:\nmodel.validateToken()\n  .then(done)\n  .catch(done.fail);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-13T15:07:27Z", "contents": "Sorry, just changing my mind. You shouldn't use timeout like this in application code, but here, where you know the promise should resolve promptly, slackersoft's suggestion will give a more descriptive failure message if the promise rejects or pends for too long.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asvetliakov", "authorAssociation": "NONE", "createdAt": "2015-07-13T15:33:38Z", "contents": "Yes, that makes sense. My original thought was that expect() will be called after done() (may be it can be a feature request?), but looks like it's wasn't so. I was slightly confused.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-17T18:29:42Z", "contents": "In an async spec (or beforeEach, etc) when you invoke the done callback you are informing jasmine that all work in that function is complete and it should move on to the next thing in the suite. Nothing should be happening after done is called.\nIf you need that, you can put the async portion in a beforeEach and your expectations in the it.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-25T00:08:25Z", "contents": "It sounds like you have a solution to this issue, and it hasn't seen any activity in a while, so I'm going to close it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 887, "url": "https://github.com/jasmine/jasmine/issues/887", "title": "Add before and after hooks", "contents": "Hi,\nAny possibility of adding before/after hooks? i do understand there's a beforeEach/afterEach that runs before/after executing every spec, but what i'm looking for is a hook that's executed before/after all the specs.\nRegards.", "createdAt": "2015-07-09T15:21:49Z", "updatedAt": "2015-07-09T19:24:11Z", "closedAt": "2015-07-09T16:06:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lvaldovinos", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lvaldovinos", "company": "Unosquare"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-09T16:06:31Z", "contents": "beforeAll has been in Jasmine since version 2.1. This should be exactly what you're looking for.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lvaldovinos", "authorAssociation": "NONE", "createdAt": "2015-07-09T19:24:11Z", "contents": "thanks @slackersoft  for info, i was looking at the wrong documentation :(", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 888, "url": "https://github.com/jasmine/jasmine/issues/888", "title": "Spies leak into other specs", "contents": "My team is using Jasmine-core 2.3.3.  We recently had an issue where a spy in one test leaked into another test.\nFrom what I understand, a spy that is set up in a test automatically gets removed after the test has completed.  Developers do not have to do anything manual in order to remove a spy.\nWhy would a spy from one test leak into another?  What could I be doing wrong?", "createdAt": "2015-07-09T17:42:26Z", "updatedAt": "2015-10-15T23:31:38Z", "closedAt": "2015-10-15T23:31:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hackingbeauty", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "hackingbeauty", "company": "TBD"}, {"login": "r4j4h", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 8, "comments_data": [{"authorLogin": "r4j4h", "authorAssociation": "NONE", "createdAt": "2015-07-09T17:46:40Z", "contents": "Are you keeping global references to them outside of your tests' closure scopes? Say in a containing describe?\nI guess what I'm asking for is more information. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hackingbeauty", "authorAssociation": "NONE", "createdAt": "2015-07-09T18:23:32Z", "contents": "@r4j4h, the code below shows what I'm doing.  It was the only way I could get the spies to work.  If I just keep a reference to the spies inside of beforeEach, I run into problems.\nThis is the wrong thing to do?  Thanks for your help.\ndescribe('sample tests', function () {\n    var trackSpy1, trackSpy2;\n\n    beforeEach(function(){\n      trackSpy1         = spyOn(Object, 'track');\n      trackSpy2         = spyOn(window, 'track_click');\n    });\n\n    it('ensures something was called with the right arguments', function () {\n      Object.doSomething();\n      expect(trackSpy1).toHaveBeenCalledWith('data var 1 2 3');  \n    });\n\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hackingbeauty", "authorAssociation": "NONE", "createdAt": "2015-07-09T22:57:49Z", "contents": "Hey, I discovered a solution to the leakage, but I'm not sure why my change works.  I'm using require.js, and when I define my spec this way the leakage occurs:\ndescribe('Collab Save Component', function () {\n\n  describe('Tooltip', function() {\n    var spy1, spy2;\n\n    define(['collab/collab_savebutton' ], function( collab ) {\n\n      beforeEach(function(){\n        spyOn(_, 'contains').and.callFake(function(){\n          return { };\n        });\n      });\n\n      it('sample test', function(){\n        ...\n      });\n    });\n  });\n});\nHowever, when I encapsulate the Jasmine spec within require.js, the spy leakage does NOT occur.\ndefine(['collab/collab_savebutton' ], function( collab ) {\n\n  describe('Collab Save Component', function () {\n\n    describe('Tooltip', function() {\n      var spy1, spy2;\n\n      beforeEach(function(){\n        spyOn(_, 'contains').and.callFake(function(){\n          return { };\n        });\n      });\n\n      it('sample test', function(){\n        ...\n      });\n    });\n  });\n});\nAny idea why my fix works? :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "r4j4h", "authorAssociation": "NONE", "createdAt": "2015-07-09T23:36:54Z", "contents": "Very interesting!\nSo before we consider require.js I want to mention that you should probably also add an afterEach that nulls out the spy1 and spy2 variables just to be clean. This might even fix the leaking issue outright.\nNow since you are using require.js and encapsulating it prevents the leakage it may be related. The behavior you are showing leads me to believe its related to a scoping issue arising from require.js' asynchronous nature in relation to jasmine's.\nI am curious, how does this perform?\ndescribe('Collab Save Component', function () {\n\n  define(['collab/collab_savebutton' ], function( collab ) {\n\n    describe('Tooltip', function() {\n      var spy1, spy2;\n\n      beforeEach(function(){\n        spyOn(_, 'contains').and.callFake(function(){\n          return { };\n        });\n      });\n\n      it('sample test', function(){\n        ...\n      });\n    });\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hackingbeauty", "authorAssociation": "NONE", "createdAt": "2015-07-10T00:51:08Z", "contents": "The Jasmine 2.3 specs say the following about spies: \"A spy only exists in the describe or it block it is defined, and will be removed after each spec.\".\nI am using Jasmine 2.3.3.  What must I specifically null out a spy in afterEach if the docs say it will automatically be taken care of?\nWhat do you mean by \"how does this perform\"?\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "r4j4h", "authorAssociation": "NONE", "createdAt": "2015-07-10T04:23:01Z", "contents": "Yes, normally you should not have to null them out, but I have not referred to the source to see if it explicitly clears them out or relies on normal scoping/GC rules. Considering this issue is arising when coupled with require.js, it seems there is a scoping issue. Manually clearing them should not hurt anything, and if it makes this work, then why not? It should not harm things negatively, other than efficiency. But I'm more asking this as a test to rule things out.\nYou found that running the entire test suite inside of your AMD module works well, but when defining an AMD module within a suite it breaks. Keep in mind that the A in AMD for require.js stands for Asynchronous. The Jasmine specs also say that if you testing asynchronous functions you should be using the done parameter and calling it at the appropriate time.\nPerhaps that will fix your problem?\nMy reasoning for asking how that works, is I moved the AMD define block outside of the actual describe block the test is running in, but not all the way outside of the suite. I am curious to see if this allows the scopes to play nicely or if it performs the same as the initial issue and does not work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-16T19:08:46Z", "contents": "@hackingbeauty you shouldn't need to actually hold onto the spy object when using spyOn. When you install the spy that way, jasmine replaces the existing function with the resulting spy object. This means that:\nvar foo = spyOn(window, 'alert');\nfoo === window.alert;\n\n// so\nexpect(foo).toHaveBeenCalled();\n// is the same as\nexpect(window.alert).toHaveBeenCalled();\nFor the cleanup... After all of your afterEach blocks have been run for a spec, jasmine will put the original function that it replaced inside spyOn back. This doesn't do anything to an external reference to the spy that may have been made while it was installed. So your trackSpy1 variable will still have a reference to the spy, and any code that may save off the function for later use will as well, but the source (e.g. Object.track) will no longer be a spy.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-15T23:31:38Z", "contents": "It sounds like you may have fixed your problem, and we haven't seen any other updates in a while. I'm going to close this issue, but please comment or open a new issue if you're still having issues.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 889, "url": "https://github.com/jasmine/jasmine/issues/889", "title": "Disable Jasmine's fdescribe() and fit() based on environment", "contents": "Posted on Stack Overflow: http://stackoverflow.com/questions/31304447/disable-jasmines-fdescribe-and-fit-based-on-environment\nCross posting here in case anyone has any ideas on how to solve this...", "createdAt": "2015-07-09T20:29:52Z", "updatedAt": "2015-07-16T19:18:06Z", "closedAt": "2015-07-16T19:18:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "guyellis", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "guyellis", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-16T19:18:06Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 890, "url": "https://github.com/jasmine/jasmine/issues/890", "title": "Bug in timeouts, jasmine 2.3.1, protractor 2.1.0", "contents": "When I have a few test cases and one of the test fails because of timeout , all the subsequent tests fail because of timeout. If I increase the timeout for the failing test and make that test case pass, no subsequent test case fails. All work fine. Why subsequent test cases use timeout specified for previous test case?\nBelow is my spec file:\n'use strict';\ndescribe('page', function() {\nbeforeEach(function() {\nconsole.log('------- in before each');\n});\nafterEach(function() {\nconsole.log('------- in after each');\n});\nit('test 1',function() {\nreturn browser.get('https://docs.angularjs.org/api');\n});\nit('test 2',function() {\nreturn browser.get('https://angularjs.org/');\n},100);\nit('test 3',function() {\nreturn browser.get('https://docs.angularjs.org/tutorial');\n});\nit('test 4',function() {\nreturn browser.get('https://docs.angularjs.org/misc/contribute');\n});\n});\nbelow is my conf file:\nexports.config = {\nseleniumAddress: 'http://localhost:4444/wd/hub',\nspecs: ['todo-spec.js'],\ncapabilities: {\n'browserName': 'firefox',\n},\nframework: 'jasmine2',\n};\nSo test 2 fails and test 3 and test 4 also fail.\nIf test 2 passes then test 3 and test 4 pass .\nAlso I observed that this problem occurs if using afterEach in suite. If we are not using afterEach , everything works fine.\n@slackersoft", "createdAt": "2015-07-09T22:11:49Z", "updatedAt": "2015-09-24T21:45:12Z", "closedAt": "2015-09-24T21:45:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nishakchaudhari", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nishakchaudhari", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-31T21:55:07Z", "contents": "I don't see a done callback being received by your test 2 so jasmine is unable to know that you expect it to be an asynchronous spec. This means it will continue running further specs immediately after it returns.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nishakchaudhari", "authorAssociation": "NONE", "createdAt": "2015-08-05T00:32:51Z", "contents": "Above thing works fine with jasmine1.3 but doesn't work with jasmine 2.\neven after using done callback , it fails with timeout error on subsequent tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-05T16:55:02Z", "contents": "Have you checked with the Protractor team? Jasmine, itself, doesn't do anything with a return value from an it, so I wonder if something changed with how Protractor handled those after the switch to jasmine 2.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T21:45:12Z", "contents": "We haven't heard anything else from the community on this, and it sounds like it could be an issue with protractor, so I'm going to close this for now. Please open an issue if it looks like you can pinpoint an issue in jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 891, "url": "https://github.com/jasmine/jasmine/issues/891", "title": "update glob dependency to latest", "contents": "Having problem running jasmine in strict mode on node 0.10, 0.12 and JXcore SM. Didn't test with io.js but pretty sure the result would be the same\nsave given script below into 'test.js'\nrequire('jasmine');\n\nnpm install jasmine\nnode --use-strict test.js\nerror:\nnode_modules/jasmine/node_modules/glob/glob.js:323\n    function next(exists, isDir) {\n    ^^^^^^^^\nSyntaxError: In strict mode code, functions can only be declared at top level or immediately within another function.\n\nupdated node-glob to latest and there is no problem left.", "createdAt": "2015-07-14T23:36:00Z", "updatedAt": "2015-07-16T19:10:21Z", "closedAt": "2015-07-16T19:10:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "obastemur", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "obastemur", "company": "Microsoft"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 893, "url": "https://github.com/jasmine/jasmine/issues/893", "title": "No tests displayed in spec window", "contents": "Hi,\nI've added Jasmine 2.2.0 via Nuget to my project angular project which is hosted in Visual Studio. When I run the SpecRunner I don't see the specs list but only the title. If I inspect the page I can see that all the specs are there but not displayed. Can you please help?", "createdAt": "2015-07-17T22:01:37Z", "updatedAt": "2015-10-04T20:40:42Z", "closedAt": "2015-10-04T20:40:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DennisNerush", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DennisNerush", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-03T20:48:56Z", "contents": "I don't know much about the NuGet jasmine package, but looking at the html you've posted, I would guess that angular might be messing with jasmine because you've included it before jasmine loads. Jasmine expects to be loaded on the page before any libraries or code under test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DennisNerush", "authorAssociation": "NONE", "createdAt": "2015-08-03T21:28:35Z", "contents": "Tried without angular. Just the samples. Still nothing. no error or anything..blank page. works in explorer and edge...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-03T22:46:19Z", "contents": "If I'm reading this correctly, it sounds like the specs are working fine in Internet Explorer (and other browsers) but not running correctly in the built-in Visual Studio browser. Jasmine 2.x only supports Internet Explorer version 8 and up, so if the Visual Studio browser is based on IE 7 it may not work properly.\nHope this helps. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DennisNerush", "authorAssociation": "NONE", "createdAt": "2015-08-03T22:52:17Z", "contents": "It works on IE and not running on chrome\nOn 01:46, Tue, Aug 4, 2015 Gregg Van Hove notifications@github.com wrote:\n\nIf I'm reading this correctly, it sounds like the specs are working fine\nin Internet Explorer (and other browsers) but not running correctly in the\nbuilt-in Visual Studio browser. Jasmine 2.x only supports Internet Explorer\nversion 8 and up, so if the Visual Studio browser is based on IE 7 it may\nnot work properly.\nHope this helps. Thanks for using jasmine!\n\u2014\nReply to this email directly or view it on GitHub\n#893 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-03T23:10:34Z", "contents": "Are you seeing any errors in Chrome's javascript console? Are you able to get even a simple expect(true).toEqual(true); to work in Chrome?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DennisNerush", "authorAssociation": "NONE", "createdAt": "2015-08-04T04:53:39Z", "contents": "No..I see the page header (the green jasmine line at the top) but no specs\nOn 02:10, Tue, Aug 4, 2015 Gregg Van Hove notifications@github.com wrote:\n\nAre you seeing any errors in Chrome's javascript console? Are you able to\nget even a simple expect(true).toEqual(true); to work in Chrome?\n\u2014\nReply to this email directly or view it on GitHub\n#893 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T01:42:52Z", "contents": "Sorry we haven't been able to be much help.\nIt looks like you're seeing the icons for passed and failed specs still. Does it look like the symbols are correct for the specs that are running?\nAlso, just to confirm when you inspect the html, does it look like the spec results and failures lists are there but not displayed? That could be a CSS issue. If there doesn't appear to even be any html in the page, it could be something else.\nHave you talked to the maintainers of the NuGet package? It might be something that package is doing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DennisNerush", "authorAssociation": "NONE", "createdAt": "2015-10-04T06:32:30Z", "contents": "It started to work. I guess it has to do with the chrome version.\nOn Sun, Oct 4, 2015, 04:43 Gregg Van Hove notifications@github.com wrote:\n\nSorry we haven't been able to be much help.\nIt looks like you're seeing the icons for passed and failed specs still.\nDoes it look like the symbols are correct for the specs that are running?\nAlso, just to confirm when you inspect the html, does it look like the\nspec results and failures lists are there but not displayed? That could be\na CSS issue. If there doesn't appear to even be any html in the page, it\ncould be something else.\nHave you talked to the maintainers of the NuGet package? It might be\nsomething that package is doing.\n\u2014\nReply to this email directly or view it on GitHub\n#893 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T20:40:42Z", "contents": "Awesome. I'm going to close this issue then. Please let us know if you have any other issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 894, "url": "https://github.com/jasmine/jasmine/issues/894", "title": "Only show output for exclusively run test", "contents": "When I run a test exclusively using fit or fdescribe, the reporter will log all of my tests alongside the exclusively ran test. Is it possible to only show the output for the exclusively ran test? This would be useful for debugging when the user has lots of tests.", "createdAt": "2015-07-20T14:22:45Z", "updatedAt": "2015-09-01T04:49:48Z", "closedAt": "2015-09-01T04:49:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "OliverJAsh", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "OliverJAsh", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-31T22:55:25Z", "contents": "What version of jasmine are you using? What library are you using to run your specs (ruby gem, npm, etc)?\nThe core of jasmine reports every spec that is defined to whatever reporters are listening. When specs are focused with fit and fdescribe all other specs should have a status of disabled and not be reported to the user.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "OliverJAsh", "authorAssociation": "NONE", "createdAt": "2015-08-04T19:29:25Z", "contents": "jasmie-core 2.3.2 which Karma 0.12.31. I guess this is a bug with Karma's reporter then?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-01T04:49:48Z", "contents": "I would certainly investigate this with the Karma maintainers. Closing this for now, since it doesn't seem like it is related to the core of jasmine itself. If it looks like there is something in jasmine that is causing this, please comment again or open a new issue.\nThanks for using jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 895, "url": "https://github.com/jasmine/jasmine/issues/895", "title": "Unable to install clock when using non-native timing functions", "contents": "The check introduced in d137b83 to ensure that jasmine.clock().install() is called on native timing functions seems a little over zealous. I'm working on a project at the moment that patches the timeout functions to show developers warnings when they forget to use clock e.g.\nwindow.setTimeout = function () {\n  console.warn('setTimeout() has been called under test, use jasmine.clock() to stub out the timing functions');\n}\nSadly now I get the following error message. \"Error: Jasmine Clock was unable to install over custom global timer functions.\". Would it not be better to see if clock.install() has been called twice and then raise the error?\nHere's a Jasmine test suite exhibiting the problem I'm seeing.\nhttp://jsbin.com/kagixozaze/edit?js,output", "createdAt": "2015-07-20T15:38:39Z", "updatedAt": "2015-08-03T18:59:02Z", "closedAt": "2015-08-03T18:59:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aron", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aron", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-03T18:59:02Z", "contents": "The jasmine clock refuses to install over anything that is not the built-in timing functions at the time that jasmine is loaded into the page, because we have also had issues with other mock clocks (like Sinon) conflicting with the one provided by jasmine.\nI don't think this is going to change. You should either be able to install the clock in a global beforeEach which would make it available in every spec, or try to get your patched setTimeout in before the jasmine files are loaded on the page.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 896, "url": "https://github.com/jasmine/jasmine/issues/896", "title": "describe should throw when it receives a function that expects a `done` callback.", "contents": "I spent half an hour debugging this.\ndescribe('stuff', function (done) {\n    it('works good', function () {\n        myHttp.get(url).then(function (response) {\n            expect(response.data.length).toBeGreaterThan(10000);\n        }).then(done, fail);\n    });\n});\n\nI got an error in some other unrelated test, with no stacktrace (because async), and had to fire up a debugger to understand what's happening. And it was just a simple mistake.\n(In case you still didn't notice: I put done in describe instead of it.)\nI believe this wouldn't be hard to do (as you already look at the arguments of the function given in it) and would save other programmers from mistakes like this.", "createdAt": "2015-07-23T10:25:52Z", "updatedAt": "2017-03-10T20:15:00Z", "closedAt": "2015-10-27T21:13:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mik01aj", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mik01aj", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "IgorAufricht", "company": null}, {"login": "Maviza101", "company": "HackMyLinux"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-01T20:44:44Z", "contents": "Unfortunately, the functions for it and describe are evaluated in different ways and by different parts of the code. This means that we don't get to automatically take advantage of the existing code for checking argument count.\nThat said, I wouldn't be averse to having a check for argument count for a describe, if you want to work on a pull request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "IgorAufricht", "authorAssociation": "NONE", "createdAt": "2016-02-18T13:08:54Z", "contents": "Sorry for commenting on a closed issue, but I'm not sure it's worth opening a new issue.\nThe error message can be a bit deceiving if you put some other parameter to the function. For example you could do something like this by mistake:\ndescribe('a test', function ($timeout) {\n  // ...\n});\n\nIn this case the error is deceiving, since we don't use the done parameter anywhere. In this case a message along the lines of 'describe() function expects zero parameters' and/or the location of the specific describe() function would help.\nA real-life example can be seen here: http://stackoverflow.com/questions/34899998/jasmine-mocking-angular-http-error-describe-does-not-expect-a-done-parameter", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2016-02-18T13:13:52Z", "contents": "+1 for the idea, I'd just change the text to: \"function passed to describe() shouldn't have arguments\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2016-08-09T11:47:58Z", "contents": "FYI everyone: this error can also be detected be eslint: https://github.com/tlvince/eslint-plugin-jasmine/blob/master/docs/rules/no-suite-callback-args.md", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Maviza101", "authorAssociation": "NONE", "createdAt": "2017-03-10T20:15:00Z", "contents": "Thanks for sharing! Helped me fix the problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 897, "url": "https://github.com/jasmine/jasmine/issues/897", "title": "Log object without \"...\" in properties", "contents": "I'm trying to debug the location of a property in my object, which has a nested structure. When I log it in the test, I get the object, but most of the property values are \"...\" instead of their actual values. How can I log the full object with all its values so that I can properly debug?", "createdAt": "2015-07-27T15:41:06Z", "updatedAt": "2015-08-01T00:16:05Z", "closedAt": "2015-08-01T00:16:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "davidlmiller21", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "davidlmiller21", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-07-27T18:58:27Z", "contents": "What are you using to log the object. Jasmine does not currently have any way to do logging (other than failed expectations).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davidlmiller21", "authorAssociation": "NONE", "createdAt": "2015-07-28T20:14:44Z", "contents": "I am just using console.log", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-01T00:16:05Z", "contents": "console.log is provided by the browser (or whatever execution environment you're in), and not by jasmine. If you're not getting the output you like, jasmine can't help you there.\nSorry. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 898, "url": "https://github.com/jasmine/jasmine/issues/898", "title": "Specs are executed before async beforeAll completes", "contents": "We're using nested describe with beforeAll that does async calls, e.g.\ndescribe('test suite', function(){\n   beforeAll(function(done) {\n       // login.... \n      // then wait for url  ...\n      .then(function(){\n          done();\n       });\n   }, 20000);\n\n   describe('verify bla', function() {\n          it('should bla....', function() {\n\n         });\n   });\n});\nFrom the sample code above, the it spec gets executed before beforeAll calls done.\nWe are using jasmine v2.3.4.\nThanks.", "createdAt": "2015-07-27T16:57:50Z", "updatedAt": "2015-07-27T20:01:02Z", "closedAt": "2015-07-27T20:01:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mocsharp", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mocsharp", "company": null}, {"login": "ljwall", "company": "@magicseaweed "}], "comments_count": 4, "comments_data": [{"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-27T17:45:03Z", "contents": "Do you have a complete example.  I've just tried this with jasmine v2.3.4:\nvar Promise = require('bluebird');\ndescribe('test suite', function(){\n  beforeAll(function(done) {\n    (new Promise(function (resolve) {\n      setTimeout(resolve.bind(null, 'foo'), 1000);\n    }))\n    .then(function(){\n      console.log('Calling done');\n      done();\n    });\n  }, 20000);\n\n   describe('verify bla', function() {\n          it('should bla....', function() {\n                console.log('in it');\n         });\n   });\n});\nand got the expected response\nStarted\nCalling done\nin it\n.\n1 spec, 0 failures\nFinished in 1.01 seconds", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "mocsharp", "authorAssociation": "NONE", "createdAt": "2015-07-27T18:17:34Z", "contents": "Your example works fine.  I think the reason mine's failing is that the login logic redirects the page to Windows Azure, does login and redirects the user back to the app.  The \"it\" would kick off while browser is on the Azure page and it would failed with \"Failed: Error while waiting for Protractor to sync with the page: \"angular could not be found on the window\"\"\nThis used to work in protractor 1.x and jasmine 1.x.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ljwall", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-07-27T19:40:44Z", "contents": "It sounds like this is a support issue for protractor rather than a bug in jasmine?  Suggest to close this issue and try the support channels for protractor.\n(Note that if your beforeAll fails then it will report the specs as failed.  This does not mean that the it has been executed.  I'm not a protractor expert, but what springs to mind is that protractor could be looking for angular on the Azure page and failing when it does not find it.)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mocsharp", "authorAssociation": "NONE", "createdAt": "2015-07-27T20:01:02Z", "contents": "Thanks @ljwall.  I have opened a bug on protractor angular/protractor#2378.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 899, "url": "https://github.com/jasmine/jasmine/issues/899", "title": "Disable Exception Catching", "contents": "I'm using jasmine with webpack which combines my source files into a single file and generates source maps so that when there's an error I know where it is. Unfortunately with Jasmine (and the lack of source map support) when there's an error the HTML test runner swallows the bug and shows it in the DOM with the compiled file and line numbers. If there were a way to disable Jasmine's error catching, the browser would translate the file/line numbers using the source map so I'd know where it is. Without this I have literally no idea even which file the bug is originating from. How do I turn off exception catching?", "createdAt": "2015-08-01T20:20:50Z", "updatedAt": "2015-08-01T20:24:14Z", "closedAt": "2015-08-01T20:24:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "geddski", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "geddski", "company": "Domo"}], "comments_count": 1, "comments_data": [{"authorLogin": "geddski", "authorAssociation": "NONE", "createdAt": "2015-08-01T20:24:14Z", "contents": "Found it browsing the source!\nAdd ?catch=false to the URL. Woot.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 900, "url": "https://github.com/jasmine/jasmine/issues/900", "title": "Parameterized tests in Jasmine", "contents": "Is it possible to add this extremely useful feature to Jasmine? Something like in neckbeard, but native:\nvar \u01b1 = require('neckbeard-node.js');                      \ndescribe('spec which loops', function() {\n  describe('Here is some functionality', function() {\n    \u01b1.iterate('first', 'second', 'sum')\n     .where(   3,       3,        6,\n               10,      4,        14,\n               7,       1,        8\n     );\n     \u01b1.loop('#first plus #second is #sum', function(first, second, sum) {\n       expect(first+second).toEqual(sum);\n     });\n  });\n});", "createdAt": "2015-08-04T18:36:21Z", "updatedAt": "2015-08-22T03:36:52Z", "closedAt": "2015-08-04T18:57:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ctapobep", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ctapobep", "company": "Qala, JavaTalks, EPAM"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "j-funk", "company": "@simonsfoundation"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-04T18:57:52Z", "contents": "We think functionality like this is better suited to an add-on than as an addition to core. (See #741, #527, and #480). The original poster also made a plugin as well.\nClosing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "j-funk", "authorAssociation": "NONE", "createdAt": "2015-08-22T03:36:52Z", "contents": "+1 to add this to core.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 901, "url": "https://github.com/jasmine/jasmine/issues/901", "title": " SpyOn getterTypeError: setting a property that has only a getter ", "contents": "Hi friends\ni am using es6 with babeljs\nStore.js\nvar _allPackages = [];\n\nclass Store() {\n   get allPackages() {\n        return _allPackages;\n    }\n}\n\nexport default new Store();\n\nView.js\nimport Store from './store';\n\nclass View() {\n   convertPackages() {\n       Store.allPackages.forEach() {}\n   }\n}\n\nexport default new Store();\n\nIn unit test\nimport Store from './store';\nimport View from './store';\n\ndescribe('View')\nspyOn(Store, 'allPackages').and.returnValue([]);\n\nit causes an issue * TypeError: setting a property that has only a getter*\nHow can i use sponOn in this case. Thnaks !", "createdAt": "2015-08-07T06:03:16Z", "updatedAt": "2015-08-07T16:35:50Z", "closedAt": "2015-08-07T16:35:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lovedota", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lovedota", "company": "Home"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-07T16:35:50Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 903, "url": "https://github.com/jasmine/jasmine/issues/903", "title": "RequireJS Shim doesn't seem to be working correctly when loaded into Jasmine", "contents": "https://jsfiddle.net/so2z3gvy/5/\nThe issue here is that the shim for \"olLayerSwitcher\" doesn't seem to be working when ran through Jasmine.\nThis is a distilled implementation of a project I am trying to write using RequireJR and Jasmine.\nThe OpenLayers3 library is AMD-capable. I am able to load the library through require and it tests out fine in Jasmine as being defined. However, the olLayerSwitcher OpenLayers3 plugin is not AMD so I am using a shim to load it. It requires that \"ol\" be a variable that it then updates with functionality.\nWhile this works when loading the application itself in a browser in the same configuration I'm using in this fiddle, it doesn't seem like it works properly using Jasmine.\nThe Spec runner here is a hybrid of what the Jasmine-maven plugin creates (my project is a java project and I test on build) and what I was able to cobble together to get Jasmine to load in jsfiddle properly.\nSo the question here is: Why is it that this works outside of Jasmine? It seems like Jasmine is not allowing RequireJS shimming to work properly.", "createdAt": "2015-08-09T02:13:44Z", "updatedAt": "2015-09-22T10:23:56Z", "closedAt": "2015-09-22T10:23:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "isuftin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "isuftin", "company": "US Geological Survey"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-21T20:23:51Z", "contents": "Jasmine shouldn't be doing anything to cause RequireJS not to work. We're pretty sure it works in a generic RequireJS context (and definitely in nodejs). It is possible that the boot.js file is not being a good citizen and just clobbering any existing window.onload that the olLayerSwitcher may be installing. But jasmine mostly expects to be loaded in place before anything else is loaded, so this shouldn't really cause problems.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 904, "url": "https://github.com/jasmine/jasmine/issues/904", "title": "Configuration option pointing to location of jasmine.json", "contents": "As far as our build process it is inconvenient to depend on the standard location of the jasmine.js file. Global environment variable doesn't work well either because it is global and we have more than one project that needs testing. So can you add an option to specify where jasmine.js is via a command line argument? Thank you.", "createdAt": "2015-08-11T08:08:35Z", "updatedAt": "2015-10-28T19:11:22Z", "closedAt": "2015-10-28T19:11:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zpdDG4gta8XKpMCd", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "zpdDG4gta8XKpMCd", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-01T05:19:09Z", "contents": "Assuming that you're using the jasmine-npm package, you should be able to set the environment variable only for the duration of the command execution. Something like:\nJASMINE_CONFIG_PATH=foo/jasmine.json jasmine", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T19:11:22Z", "contents": "Closing this, as the solution provided should work and we haven't heard anything else.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 905, "url": "https://github.com/jasmine/jasmine/issues/905", "title": "jasmine.clock().tick() bug with nested setTimeout()", "contents": "I think, this simple test describes the issue\ndescribe('Jasmine clock', function () {\n  beforeEach(function () {\n    jasmine.clock().install();\n    jasmine.clock().mockDate();\n  });\n\n  afterEach(function () {\n    jasmine.clock().uninstall();\n  });\n\n  it('has bug with nested setTimeout()', function () {\n    var calls = [\n      false, // before timer 1\n      false, // timer 1\n      false, // before timer 2\n      false  // timer 2\n    ];\n\n    var startTime = Date.now();\n\n    setTimeout(function () {\n      calls[1] = true;\n      expect(Date.now() - startTime).toBe(2000); // Success\n\n      setTimeout(function () {\n        calls[3] = true;\n        expect(Date.now() - startTime).toBe(3000); // Fail with actual = 2000\n      }, 1000);\n    }, 1000);\n\n    calls[0] = true;\n    expect(calls).toEqual([true, false, false, false]); // Success\n\n    jasmine.clock().tick(2000);\n    expect(calls).toEqual([true, true, false, false]); // Fail with actual = [true, true, false, true]\n\n    calls[2] = true;\n    expect(calls).toEqual([true, true, true, false]); // Fail with actual = [true, true, true, true]\n\n    jasmine.clock().tick(1000);\n    expect(calls).toEqual([true, true, true, true]); // Success\n  });\n});", "createdAt": "2015-08-17T11:14:12Z", "updatedAt": "2015-09-01T04:36:51Z", "closedAt": "2015-09-01T04:36:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "UnikZ", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "UnikZ", "company": "@wrike"}, {"login": "ryanswood", "company": "Able Health"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "ryanswood", "authorAssociation": "NONE", "createdAt": "2015-08-29T00:16:36Z", "contents": "I suspect this is actually a specific instance of a more general problem: jasmine.click().tick() uses the destination time for all interim scheduled events. Here's a succinct breakdown. #915", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UnikZ", "authorAssociation": "NONE", "createdAt": "2015-08-31T07:04:34Z", "contents": "@ryanswood, you are right.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-01T04:36:51Z", "contents": "This behavior of setTimeout, but not the interaction with Date, is how the mock clock is designed to work.\nClosing this in favor of #915", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 907, "url": "https://github.com/jasmine/jasmine/issues/907", "title": "with my custom reporter,when run first,jasmine can find the files i will test,but when run second,null file found?how can i solve this problem?", "contents": "var jasmine = new Jasmine();\nconsole.log(\"aaaaa\",jasmine);\ntry {\njasmine.loadConfig({\n\"spec_dir\": \"/opt/app/cafbot.yunos.com/test\",\n\"spec_files\": [\n\"/ui/*.js\",\n\"/ui/transform/.js\",\n\"__/animation/.js\",\n\"/layout/*.js\"\n],\n\"helpers\": [\n\"helpers//*.js\"\n]\n});\nconsole.log(\"bbbbb\");\n} catch (e) {\nconsole.log(e);\n}\n                    var myCustomReporter = {\n                        jasmineStarted: function(suiteInfo) {\n                            passedCount = 0;\n                            failedCount = 0;", "createdAt": "2015-08-18T11:17:40Z", "updatedAt": "2015-09-22T19:16:21Z", "closedAt": "2015-09-22T19:16:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "byrhuwei", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "byrhuwei", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-22T19:16:21Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 909, "url": "https://github.com/jasmine/jasmine/issues/909", "title": "Create a spy once for all functions of same class", "contents": "To create two spies on functions of same class i do this:\nspyOn(mockFooService, 'function1');\nspyOn(mockFooService, 'function2');\n\nCan i do something like this?\n spyOn(mockFooService, [\n        'function1',\n        'function2'\n    ]);\n\nOr maybe create spy on all functions of class like this:\nspyOn(mockFooService)", "createdAt": "2015-08-21T09:05:38Z", "updatedAt": "2015-10-28T19:37:31Z", "closedAt": "2015-10-28T19:37:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rstm", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rstm", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-22T19:22:02Z", "contents": "Take a look at createSpyObj (docs here: http://jasmine.github.io/edge/introduction.html#section-Spies:_<code>createSpyObj</code>). This should let you replace the mockFooService with an object that has all of its methods as spies. Jasmine does not have a mechanism to make a partial mock of an object spying on multiple methods at once.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T19:37:31Z", "contents": "Closing this, since we haven't heard anything else from the community on it.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 910, "url": "https://github.com/jasmine/jasmine/issues/910", "title": "jasmine.any() should warn on incorrect use", "contents": "Hello, I'm about average stupid and I accidentally did\nexpect(spy).toHaveBeenCalledWith(jasmine.any())\nThis gives a cryptic error Cannot read property 'name' of undefined and then jasmine hides the line numbers and just references the expect line in the test.\nAnyway after 30 minutes of debugging I ended up in the code for jasmine.any() and realized it crashes like that if not given an argument. I figured out I should use jasmine.anything() but maybe someone else could be spared the headache :) Thanks for a great framework.", "createdAt": "2015-08-24T08:22:50Z", "updatedAt": "2015-08-24T17:02:21Z", "closedAt": "2015-08-24T17:02:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JDaance", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JDaance", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-08-24T17:02:21Z", "contents": "Looks like this is fixed on master with #854, but hasn't been released yet, so I'm going to close this.\nThanks for using jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 911, "url": "https://github.com/jasmine/jasmine/issues/911", "title": "Callback on timed out tests", "contents": "Hi\nWould it be possible to add a callback to a test timeout event?\nI'm running a test which works fine on my machine but times out on CI server. Because there are no exceptions I don't know what's going wrong, but I was thinking about keeping track of the test state and then in case of timeout, log the state, the last successful action or the callback I'm waiting for.\nI can implement it in my tests with a setTimeout(() => { log(...) }, jasmine.DEFAULT_TIMEOUT_INTERVAL - 100); but maybe you guys could add a cleaner solution to jasmine.\nSomething like\ndescribe('Timeout', () => {\n   onTimeout(() => {\n      console.log(details);\n   });\n   it('timesout somewhere', () => {});\n});\n\nWhat do you think?", "createdAt": "2015-08-28T08:47:06Z", "updatedAt": "2016-09-27T01:06:40Z", "closedAt": "2016-09-27T01:06:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piuccio", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "piuccio", "company": "@en-japan-air "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T19:17:58Z", "contents": "Unless you've registered your own mechanism for dealing with unhandled exceptions, it's possible that something is going wrong and jasmine isn't catching it (see #529).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T01:06:40Z", "contents": "Closing due to inactivity", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 912, "url": "https://github.com/jasmine/jasmine/issues/912", "title": "Allow me to pass a reason to `xit`", "contents": "It seems I have no way to pass a reason, if I use xit. It would be great to do this to get rid of the No reason given warning. Can we use a reason as a third param? xit('should foo', fooFn, 'ignore this')", "createdAt": "2015-08-28T09:41:25Z", "updatedAt": "2015-10-15T16:22:12Z", "closedAt": "2015-10-15T16:22:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "donaldpipowitch", "company": "@Mercateo"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "JoseRoman", "company": "@Chatham"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-02T01:56:17Z", "contents": "xit is meant to be a very short term method to stop a spec from running, so I don't think it makes sense to pass an explicit message. I could however see changing the message for an xit to read something like \"Temporarily disabled with xit\" instead of just \"no message given\". This would also be a bit more consistent with other BDD frameworks like rspec for ruby.\nI'd would be happy to review a pull request to change the default message for xit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JoseRoman", "authorAssociation": "NONE", "createdAt": "2015-09-16T02:52:39Z", "contents": "@slackersoft Is there any particular place in the UI where this message should be placed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-22T20:05:50Z", "contents": "There shouldn't need to be any changes to the UI for this, it should simply be a change to how xit calls pend on the spec, so that it passes the message argument.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 913, "url": "https://github.com/jasmine/jasmine/issues/913", "title": "toHaveBeenCalledWith creates confusing output when used with single number argument", "contents": "Let's say you have a mock with a function like\nvar myMock = { doStuff = jasmine.createSpy('myMock.doStuff')}\n\nand put that into a service that calls:\nmyMock.doStuff(2)\n\nand then expect\nexpect(myMock.doStuff).toHaveBeenCalledWith(10)\n\njasmine creates the following error message:\nExpected spy timeout.cancel to have been called with [ <circular reference: Object> ] but actual calls were [ <circular reference: Object> ].\n\nIf you use strings or more than one number argument everything gets printed fine. If the mock gets called with the expected value the test passes, so it seems to be just a formatting issue with the failure message.", "createdAt": "2015-08-28T14:25:18Z", "updatedAt": "2015-10-05T12:15:47Z", "closedAt": "2015-10-05T12:15:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SanityResort", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "SanityResort", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T01:54:00Z", "contents": "I think this is actually a PrettyPrinter issue, and it should have been fixed in 2.3.0. What version are you using? Can you upgrade to get the fix?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SanityResort", "authorAssociation": "NONE", "createdAt": "2015-10-05T12:15:18Z", "contents": "We had this issue by using the jasmine sbt plugin: https://github.com/joescii/sbt-jasmine-plugin\nI just checked the require code and it seems the plugin relies on jasmine 2.0.3 so maybe that is the problem there.\nI will create an issue there, maybe they can upgrade their dependency.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 914, "url": "https://github.com/jasmine/jasmine/issues/914", "title": "[docs][improvement] including jasmine-ajax in commonJS environment", "contents": "Hello,\nIt took me a while to figure out that you can simply do npm install jasmine-ajax, then:\nvar anyName = require('jasmine-ajax');\n\ndescribe('Jasmine is awesome because', function() {\n   beforeEach(function() {\n      // use as described in the docs\n      jasmine.Ajax.install();\n   });\n\n  it('installs jasmine.ajax as a global', function() {\n     jasmine.Ajax.stubRequest('/another/url').andReturn({\n        \"status\": 200,\n        \"contentType\": 'text/plain',\n        'responseText': 'immediate response'\n      });\n  });\n});\n\nIf you browserify this and include it in a html page (or run it with karma & karma-browserify) it works as expected. No need to download and include the mock-ajax.js file in the helpers directory. Yipee. Isn't this worth mentioning in the docs?", "createdAt": "2015-08-28T20:41:06Z", "updatedAt": "2015-08-28T20:47:37Z", "closedAt": "2015-08-28T20:47:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mediafreakch", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "mediafreakch", "company": "@ricardo-ch "}], "comments_count": 1, "comments_data": [{"authorLogin": "mediafreakch", "authorAssociation": "NONE", "createdAt": "2015-08-28T20:47:37Z", "contents": "wrong repo", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 915, "url": "https://github.com/jasmine/jasmine/issues/915", "title": "jasmine.clock().tick() sets Date to destination for all interim events", "contents": "Here's a simple test that demonstrates the problem.\ndescribe('mocking time', function(){\n  beforeEach(function() {\n    jasmine.clock().install();\n    jasmine.clock().mockDate(\n      new Date(2015, 4, 20)\n    );\n  });\n\n  afterEach(function() {\n    jasmine.clock().uninstall();\n  });\n\n  it('sets time correctly for interim functions', function(){\n    var actualTimes = [];\n    setTimeout(function() { actualTimes.push(Date().getTime()); });\n    setTimeout(function() { actualTimes.push(Date().getTime()); }, 1);\n    jasmine.clock().tick(1);\n    expect(actualTimes).toEqual([1432105200000, 1432105200001]);\n  });\n});\nThe failure we see is:\nExpected [ 1432105200001, 1432105200001 ] to equal [ 1432105200000, 1432105200001 ].\nThe culprit is obvious. Here's the code from that link:\nmockDate.tick(millis);\ndelayedFunctionScheduler.tick(millis);\nI don't see any reason for mockDate.tick() to exist. Instead you want something like mockDate.advanceToMillis() that can be called somewhere around this line.", "createdAt": "2015-08-29T00:13:15Z", "updatedAt": "2016-09-07T23:00:00Z", "closedAt": "2015-12-22T23:19:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ryanswood", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "ryanswood", "company": "Able Health"}, {"login": "ClayShentrup", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "gregjacobs", "company": "Goldman Sachs"}, {"login": "benchristel", "company": "Pivotal Labs"}, {"login": "timb-pt", "company": null}, {"login": "mramato", "company": "Analytical Graphics, Inc."}], "comments_count": 7, "comments_data": [{"authorLogin": "ClayShentrup", "authorAssociation": "NONE", "createdAt": "2015-09-01T03:33:39Z", "contents": "Really hoping this gets fixed soon. I took a look at it but it requires a significant refactoring, since the clock stubbing is currently isolated from the scheduled functions runner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T19:26:41Z", "contents": "I agree, we'd like to see this fixed. I've made a tracker story for it here (https://www.pivotaltracker.com/story/show/104843046), but I would also be happy to review a pull request that implements this as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregjacobs", "authorAssociation": "NONE", "createdAt": "2015-12-23T02:56:12Z", "contents": "Awesome, thanks for this!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-01T22:33:57Z", "contents": "It looks like there's still an open Tracker story for this. Should it be closed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timb-pt", "authorAssociation": "NONE", "createdAt": "2016-05-03T20:50:36Z", "contents": "I'm having issues with nested setTimeout calls, which I figure would be a fairly common use case in Jasmine tests. How often do you release and/or when can this fix be added to a release tag?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mramato", "authorAssociation": "NONE", "createdAt": "2016-08-31T15:11:04Z", "contents": "I just submitted #1190, which I think may be a new issue caused by this change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T23:00:00Z", "contents": "#1190 should be fixed in the 2.5.1 release", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 916, "url": "https://github.com/jasmine/jasmine/issues/916", "title": ".toThrow isn't async", "contents": "it('should not create a complete account', function(next) {\n      expect(function() { \n        setTimeout(function() {\n          throw new Error(); \n        });\n      }, 1).toThrowError(Error);\n});\n\nResult\n> api@1.0.0 test /var/www/api\n> node test/run.js\n\nStarted\nfunction () { \n        setTimeout(function() {\n          throw new Error(); \n        });\n      }\n/var/www/api/test/controllers/TestSpec.js:36\n          throw new Error(); \n                ^\nError\n  at [object Object]._onTimeout (/var/www/api/test/controllers/TestSpec.js:36:17)\n  at Timer.listOnTimeout (timers.js:110:15)\n\nIf you add this to line 3102 in jasmine-core/jasmine.js:\nconsole.log('threw? ', threw);\n\nYou get this\nthrew? false", "createdAt": "2015-08-31T21:43:22Z", "updatedAt": "2015-09-01T04:47:10Z", "closedAt": "2015-09-01T04:47:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CodeOtter", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "CodeOtter", "company": "CodeOtter"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-01T04:47:10Z", "contents": "This is due to how setTimeout works. The function passed to setTimeout is executed in a new call stack, so the catch within the toThrow matcher, is unable to catch the exception thrown.\nThis isn't something we're likely to change, though we are looking at what it would take to link errors that occur in asynchronous code to the proper spec.\nThanks for using jasmine!\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 917, "url": "https://github.com/jasmine/jasmine/issues/917", "title": "Error: \"Cannot read property 'appendChild' of undefined\" (2.3.4)", "contents": "This happens occasionally (about once every three test runs), and only seems to affect Chrome browser.\nI have traced the problem down to this line in jasmine-html.js (line 114, version 2.3.4):\nsymbols.appendChild(createDom('li', {\n'symbols' is null at this point - it seems like the html report page has not been initialised yet. It seems to happen when there are nested \"describes\" in my test, and they each have a \"beforeEach()\", but I'm not sure if this is related.\n\nIf I let the debugger go, the test output looks like this:", "createdAt": "2015-09-01T02:14:52Z", "updatedAt": "2015-09-24T19:59:50Z", "closedAt": "2015-09-24T19:59:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danielalexiuc", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "danielalexiuc", "company": null}, {"login": "CharlieHess", "company": "@slackhq"}], "comments_count": 1, "comments_data": [{"authorLogin": "CharlieHess", "authorAssociation": "NONE", "createdAt": "2015-09-16T18:53:31Z", "contents": "+1, also hitting this quite frequently.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 918, "url": "https://github.com/jasmine/jasmine/issues/918", "title": "Negative zero values in array", "contents": "I'm having an issue writing a test for an array which can contain negative values of zero. This:\nexpect([-0]).toEqual([0]);\nfails, as does this:\nexpect([-0]).toBe([0]);\nI understand the logic outlined in #579, but unless I'm missing a better way of writing this test this seems like a much more common case that someone actually wanting to distinguish between 0 and -0.", "createdAt": "2015-09-01T16:17:58Z", "updatedAt": "2015-10-28T21:37:45Z", "closedAt": "2015-10-28T21:37:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Aciho", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Aciho", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-22T19:31:45Z", "contents": "Because toBe uses the === operator to do its comparison, the arrays are not delved into in the same way that toEqual does. Since javascript says that [-0] !== [0] and for that matter [-0] != [0] (even if -0 === 0) the toBe matcher just uses that.\nIf you want to use toEqual you should also be able to specify a custom equality comparator that allows -0 to be equal to 0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T21:37:45Z", "contents": "Closing this, as the current desire in jasmine is that expect(-0).not.toEqual(0) should pass, but display the correct -0 and 0 to show the difference.\nThanks for using jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 920, "url": "https://github.com/jasmine/jasmine/issues/920", "title": "Feature: Combinatorial and Pairwise unit test generators", "contents": "One of the best new features in NUnit is combinatorial test case generation using their Combinatorial and Pairwise attributes.\nThe All Pairs algorithm has been shown to significantly improve combinatorial test coverage without the large blow out in number of combinations that an exhaustive combinatorial test generator incurs.\nNUnit Parameterized Tests\n\nPairwiseAttribute - Source code - This is very useful!\nCombinatorialAttribute - Source code\n\nI'm sure they would be flattered if you used their algorithms.\nI imagined Jasmine test generators would be implemented using this code pattern for V1:\n  genAllPairs({ field1: [va1, val2], field2: [val3, val4] ... }).forEach(function(tuple) {\n  it(\"with \" + JSON.stringify(tuple), function() {\n\n  });\n\n  genAllCombinations({ field1: [va1, val2], field2: [val3, val4] ... }).forEach(function(tuple) {\n  it(\"with \" + JSON.stringify(tuple), function() {\n\n  });\n\nAnd then perhaps a V2 version that can cope with larger number of combinations and can yield a result before all tuples are all generated ...\n  git( new AllPairs({ field1: [va1, val2], field2: [val3, val4]), function(tuple)  {\n     it(\"with \" + JSON.stringify(tuple), function() {\n\n     });\n  });\n\nNow AllPairs() is a stateful iterator class used to generate a test case tuple sequence that the new Jasmine git method consumes.\nYou'd then want to also add fgit (focus) and xgit (exclude). You could also run each tuple over a gdescribe() test suite.\nThese code patterns are just my brainstorming.  Your experience and understanding of the Jasmine framework may dictate otherwise.", "createdAt": "2015-09-08T01:43:44Z", "updatedAt": "2015-09-24T16:09:32Z", "closedAt": "2015-09-24T16:09:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tohagan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tohagan", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T16:09:32Z", "contents": "This isn't something we're likely to bring into the core of jasmine. Given your suggestions on how it could work, this seems like it could work very well as a plugin to jasmine, since you'd just be calling the builtin it function for each combination.\nJasmine prefers to be simple and extensible instead of trying to include everything out of the box. I'm going to close this issue, but feel free to ask questions on either the jasmine-js mailing list or the jasmine developer list if you have issues while trying to work on something like this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 921, "url": "https://github.com/jasmine/jasmine/issues/921", "title": "Test suite won't contain failedExpectations on spec failure", "contents": "I've been looking into creating custom reporters to perform sanity checks within a single page application. To perform those checks I've created several specs within one suite and was going to use custom reporter to collect errors from each suite and send them to back-office application on suiteDone callback.\nHowever I faced an issue with that: It seems latest version of jasmine won't contain failed expectation in suite results when it finishes. To demonstrate what I mean I created a simple jsfiddle based on the examples from here.\nTake a look at suiteDone callback to see what happens. It will log the result object inspecting which will show no errors during suite execution. But if you look at specDone callback result you'll see that the spec is actually failed.\nNot sure if it's something that I'm missing or an issue with the code.", "createdAt": "2015-09-08T16:15:16Z", "updatedAt": "2015-10-28T21:39:14Z", "closedAt": "2015-10-28T21:39:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "RomanKapitonov", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "RomanKapitonov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T17:22:06Z", "contents": "The failedExpectations at the suite level are only for failures in an afterAll. This was added because at the point that an afterAll fails, all the specs have reported their own success or failure, and it is too late to update them.\nAny failures that occur in a beforeAll, beforeEach, it, or afterEach will be in the failedExpectations for the spec. (beforeAll goes to all the specs it affects).\nThis means you'll have to collect the failures from each of the specDone calls (and from the suiteDone  if you're using afterAll) and send them all off together. This is the current desired functionality, and not something we're really looking to change at the moment. The idea is to group the failures with the most specific thing we can for troubleshooting purposes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T21:39:14Z", "contents": "Closing, as we haven't heard anything else from the community, and this is the current desired functionality.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 922, "url": "https://github.com/jasmine/jasmine/issues/922", "title": "Jasmine fails tests when their afterEaches fail", "contents": "I'm all for jasmine failing the suite when an afterEach fails, and probably even failing the test is appropriate, but no indication is given that the error was really in the afterEach, and this is very confusing.\nhttp://jsfiddle.net/6k7a5v34/2/\nInput:\ndescribe('foo', function() {\n    afterEach(function() {\n        expect(true).toBe(false);\n    });\n\n    it('bar', function() {\n        expect(true).toBe(true);\n    });\n});\nOutput: Jasmine reports an issue with foo bar\nDesired output: Jasmine reports an issue with foo bar's afterEach", "createdAt": "2015-09-11T02:03:04Z", "updatedAt": "2015-10-28T21:29:24Z", "closedAt": "2015-10-28T21:29:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "voltrevo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "voltrevo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T17:07:14Z", "contents": "The error should contain information about what line number in your suite the failure was on, which should lead you to the proper expectation. This way jasmine doesn't have to worry about which function in the queue had a failed expectation, but you should still have a pointer to anywhere up the stack of describes that a beforeEach or afterEach could be coming from.\nIf you're not seeing the line numbers in the error report, that would be a bug that we need to fix. Also, see #801 for more discussion on cleaning up the trace that is presented to make it easier to find the actual code in your suite that is causing the problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T21:29:24Z", "contents": "Closing, as this is the desired functionality. If you're seeing issues with the error reporting not properly including stacktrace information, please open a new issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 923, "url": "https://github.com/jasmine/jasmine/issues/923", "title": "How to use async/await with Jasmine?", "contents": "Hi, how can I use async/await with Jasmine? Is this supported somehow? I'd like to do\nit('should run test', async function() {\n    browser.get('https://duckduckgo.com/');\n    $('#search_form_input_homepage').sendKeys('jasmine');\n    $('#search_button_homepage').click();\n\n    let title = await browser.getTitle();\n    expect(title).toBe('foo');\n  });\n\nInstead of\n  it('should run test', function(done) {\n    browser.get('https://duckduckgo.com/');\n    $('#search_form_input_homepage').sendKeys('jasmine');\n    $('#search_button_homepage').click();\n\n    browser.getTitle().then(function(title) {\n      expect(title).toBe('foo');\n      done();\n    });\n  });\n\nDo I need to do that manually like here?", "createdAt": "2015-09-11T06:40:29Z", "updatedAt": "2017-12-16T02:58:02Z", "closedAt": "2015-09-24T17:24:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "participants_count": 17, "participants_data": [{"login": "donaldpipowitch", "company": "@Mercateo"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jamesthurley", "company": "Canopy Simulations"}, {"login": "krishan", "company": null}, {"login": "xpepermint", "company": "@0xcert"}, {"login": "tlisiewi", "company": null}, {"login": "mattburrell", "company": "Solid Code Solutions"}, {"login": "damianobarbati", "company": null}, {"login": "omidh28", "company": null}, {"login": "bloveridge", "company": null}, {"login": "hxuanhung", "company": null}, {"login": "xfg", "company": null}, {"login": "bensampaio", "company": "@karify"}, {"login": "moonmaster9000", "company": null}, {"login": "rafaelkallis", "company": null}, {"login": "rsp", "company": "@inFullMobile "}, {"login": "tanyaYourchuck", "company": null}], "comments_count": 30, "comments_data": [{"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2015-09-11T07:10:24Z", "contents": "This is a modified version from runInGenerator which runs my first example using async/await with babel-node:\n// asyncify\n[ 'it', 'beforeEach', 'beforeAll', 'afterEach', 'afterAll' ].forEach(fnName => {\n  var origFn = global[fnName],\n    specTitle, specFn, specTimeout;\n\n  var runSpec = function(specTitle, specFn) {\n    return origFn.call(null, specTitle, function(done) {\n      specFn().then(done.bind(null, null), done.fail.bind(null));\n    });\n  };\n\n  var runHook = function(specFn, specTimeout) {\n    return origFn.call(null, function(done) {\n      specFn().then(done.bind(null, null), done.fail.bind(null));\n    }, specTimeout);\n  };\n\n  global[fnName] = function() {\n    var args = Array.prototype.slice.call(arguments);\n\n    if(fnName === 'it') {\n      specTitle = args[0];\n      specFn = args[1];\n\n      // check if 'regeneratorRuntime.async' is used\n      if(specFn.toString().includes('regeneratorRuntime.async')) {\n        return runSpec(specTitle, specFn);\n      } else {\n        return origFn.call(null, specTitle, specFn);\n      }\n    }\n\n    specFn = args[0];\n    specTimeout = args[1];\n\n    // check if 'regeneratorRuntime.async' is used\n    if(specFn.toString().includes('regeneratorRuntime.async')) {\n      return runHook(specFn, specTimeout);\n    } else {\n      return origFn.call(null, specFn, specTimeout);\n    }\n  };\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-24T17:24:11Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using jasmine. Closing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2015-09-25T04:50:04Z", "contents": "Well... Isn't this a feature request, because Jasmine doesn't work with async/await yet?", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2015-09-29T08:06:01Z", "contents": "@slackersoft Should I create a new issue for this? \"Feature Request: support async/await in tests\"", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-04T20:39:25Z", "contents": "Given our current browser support list, we're not looking at implementing a lot of the new async functions introduced in ES6. However, you might also check out jasmine-co.", "reactions_count": 2, "reactions_data": ["CONFUSED", "CONFUSED"]}, {"authorLogin": "jamesthurley", "authorAssociation": "NONE", "createdAt": "2016-01-07T11:22:22Z", "contents": "As a workaround you could use a simple helper function:\nfunction testAsync(runAsync) {\n  return (done) => {\n    runAsync().then(done, e => { fail(e); done(); });\n  };\n}\n\nThen your test code becomes:\n  it('should run test', testAsync(async function() {\n    browser.get('https://duckduckgo.com/');\n    $('#search_form_input_homepage').sendKeys('jasmine');\n    $('#search_button_homepage').click();\n\n    let title = await browser.getTitle();\n    expect(title).toBe('foo');\n  }));", "reactions_count": 31, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2016-02-03T12:34:29Z", "contents": "@slackersoft Would you consider adding this feature now? As far as I know the async/await spec is stable now, can be use in Edge natively or in anything which uses Chakra. Babel is also widely used as a fallback solution.", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-19T00:33:20Z", "contents": "Given the simplicity of the sample helper that @jamesthurley suggests, rewriting a bunch of jasmine internals to support the async keyword but still work in browsers that don't support it, this isn't something we're looking to include in Jasmine right now.\nAdditionally, you should actually just be able to pass done.fail as the second argument to your then instead of wrapping it in an extra function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2016-03-04T09:52:05Z", "contents": "to support the async keyword but still work in browsers that don't support it\n\nThe solution for async/await would be the same for plain Promises which are now widely-used - if browser support is the main concern for you. You wouldn't just add support to async/await, you would also add support for Promises. Modules like https://github.com/matthewjh/jasmine-promises wouldn't be needed anymore that way.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "krishan", "authorAssociation": "NONE", "createdAt": "2016-03-08T12:58:20Z", "contents": "The solution for async/await would be the same for plain Promises which are now widely-used\n\n+1 for Promise / async await support.\nAll that needs to be done to support async/await in examples, is to allow an example to enable asynchronous execution by returning a Promise (similar to accepting a done-callback).\nNo other change is needed to fully support async/await in examples. Jasmine would not use async/await itself and would stay 100% compatible with existing browsers.", "reactions_count": 38, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "xpepermint", "authorAssociation": "NONE", "createdAt": "2016-03-12T08:19:40Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tlisiewi", "authorAssociation": "NONE", "createdAt": "2016-04-11T15:15:57Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattburrell", "authorAssociation": "NONE", "createdAt": "2016-06-16T15:43:55Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "damianobarbati", "authorAssociation": "NONE", "createdAt": "2016-09-15T20:09:04Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "omidh28", "authorAssociation": "NONE", "createdAt": "2016-09-30T10:02:08Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bloveridge", "authorAssociation": "NONE", "createdAt": "2016-10-08T10:07:21Z", "contents": "As was suggested above, you might consider using jasmine-co if you find yourself running in an environment where async/await are available and you want to use them in your spec files. It was recently updated to support functions that return promises (as async functions do) rather than only generator functions via co. It does this essentially by wrapping the functions as described above, but makes it transparent to the user, and does it without replacing any core jasmine files or introducing any code transpilers like Babel.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "damianobarbati", "authorAssociation": "NONE", "createdAt": "2016-10-27T23:31:23Z", "contents": "+1 for native async/await support", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "hxuanhung", "authorAssociation": "NONE", "createdAt": "2016-12-21T16:24:04Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "damianobarbati", "authorAssociation": "NONE", "createdAt": "2017-03-16T20:53:33Z", "contents": "@slackersoft node is now shipping async/await as well, Chrome has it and Safari 10.1 has it.\nWhat about moving forward and finally support async/await (which is indeed going to rule JS programming in the next years) natively instead of sh***y co/generators/transpilers/whatever/workaround? Is it really so bad to enjoy and embrace the progress?", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "xfg", "authorAssociation": "NONE", "createdAt": "2017-03-21T08:56:34Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bensampaio", "authorAssociation": "NONE", "createdAt": "2017-03-21T11:00:52Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "moonmaster9000", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-01T19:31:50Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rafaelkallis", "authorAssociation": "NONE", "createdAt": "2017-04-09T14:17:31Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rsp", "authorAssociation": "NONE", "createdAt": "2017-04-12T13:18:32Z", "contents": "@donaldpipowitch This is how I do what you're asking about:\nit('should run test', async (done) {\n  try {\n    let title = await browser.getTitle();\n    // your assertions here\n    done();\n  } catch (err) {\n    done.fail(err);\n  }\n});\nor:\nit('should run test', (done) => {\n  (async () => {\n    let title = await browser.getTitle();\n    // your assertions here\n    done();\n  })().catch(done.fail);\n});\nSee this answer on Stack Overflow with more examples:\n\nHow do I properly fail an async unit test in jasmine-node\n\nIf Jasmine supported testing the promise that is returned by the function then this would work:\nit('should run test', async (done) {\n  let title = await browser.getTitle();\n  // your assertions here\n});\nbut now when I think about it it would be easy to write a function F() that would wrap an async function and return a function with done argument with something like:\nconst F = f => done => f().then(done).catch(done.fail);\nwhich you could use as:\nit('should run test', F(async (done) {\n  let title = await browser.getTitle();\n  // your assertions here\n}));\n(not tested)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "createdAt": "2017-04-12T13:22:08Z", "contents": "Thank you. Maybe this is useful for others. I use Mocha and Expect for several months now \ud83d\udc4d No problems so far.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "damianobarbati", "authorAssociation": "NONE", "createdAt": "2017-04-12T13:38:27Z", "contents": "@rsp thanks but I moved to Jest, native async/await/promises support and no more workarounds like done().", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "bloveridge", "authorAssociation": "NONE", "createdAt": "2017-04-12T15:45:27Z", "contents": "@rsp Your last example is essentially what jasmine-co does, but accomplishes it by wrapping it and the other Jasmine functions so you don't have to use any special syntax. If the it / before[All|Each] / after[All|Each] function is a standard function (i.e. not a generator function), it just wraps it, checks to see if the return value was a promise, and then adds done and done.fail handlers for it.\nThe text syntax thus becomes extremely clean and behaves like native promise support.\nit('should run test', async () => {\n  expect(await browser.getTitle()).toEqual('My Title');\n});", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "tanyaYourchuck", "authorAssociation": "NONE", "createdAt": "2017-12-16T02:29:45Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-16T02:42:56Z", "contents": "Jasmine 2.8 includes support for async specs.", "reactions_count": 15, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "tanyaYourchuck", "authorAssociation": "NONE", "createdAt": "2017-12-16T02:58:02Z", "contents": "aha! need to update. Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 14, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 926, "url": "https://github.com/jasmine/jasmine/issues/926", "title": "Testing Jasmine Plugins", "contents": "I'm trying to write a plugin for Jasmine that allows you to return a promise from a spec and will pass or fail that spec depending on whether or not the promise is fulfilled or rejected.\nOf course, I want to write tests to make sure that my plugin works correctly, and to be thorough, I need to make sure that tests fail when the promise is rejected... so how do I make a test pass when I need to make sure that a test \"successfully fails\"? Essentially I'm using Jasmine to test functionality I'm adding to Jasmine.\nI'm attempting to grab your solution from nodeDefineJasmineUnderTest.js but there are a few requires in there that reference your src files, which I don't have access to.\nI also tried this in my tests\nvar jc = require('jasmine-core');\nvar env = new jc.Env();\nbut that env ends up only being a function and not having env.describe or env.it or anything like that on it, like what you use in your own specs. Can you help me out?", "createdAt": "2015-09-23T15:51:45Z", "updatedAt": "2015-10-05T22:13:44Z", "closedAt": "2015-10-05T22:13:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joezimjs", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joezimjs", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 10, "comments_data": [{"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-02T04:34:09Z", "contents": "Sooo... should I just switch to mocha and forget about creating this plugin?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-03T21:54:49Z", "contents": "I'm sorry if you felt like we were ignoring this issue. We work on jasmine in our spare time, and don't always have as much time to dedicate to the project as we would like.\nI finally got a chance to look at whats is going on. Since jasmine does its own internal dependency/require stuff, the return value of Env straight on the root jasmine object is actually the constructor function for the Env you really want.\nFor what you are trying to do, you may not necessarily need to boot up/require a whole second jasmine so much as just create a new Env from the existing one. (I think this should be possible, but haven't really tried it myself).\nIf it turns out that you do need to get a full new core, you'll also need to boot it, to get it fully set up. Take a look at node_boot.js for a bit more detail about how the running jasmine is booted.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-05T00:13:35Z", "contents": "Thanks for getting back to me. I'm sorry I got \"testy\". I just assumed something as popular as Jasmine would have a bit more activity.\nAnyway, at this point, just calling new jasmine.Env() seems to be working fine. I'll have to look into it more to be certain but otherwise looks good. Thanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-05T19:57:41Z", "contents": "Nope. Here's what I have:\ndescribe('suite', function () {\n    var env;\n\n    beforeEach(function () {\n        env = new jasmine.Env();\n    });\n\n    it('should work', function () {\n        env.describe('faux suite', function () {\n            env.it('faux test', function () {\n                expect(true).toBe(false);\n            });\n        });\n\n        env.execute();\n    });\n});\nThis is saying that my one spec is failing. Shouldn't the failure be contained in the inner environment so that a spec failing there won't cause a failure according to the output? That's what I'm trying to do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-05T20:27:30Z", "contents": "nevermind that last comment, I should have been using env.expect.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-05T20:44:43Z", "contents": "Is this the best way to determine if a test failed in that env?\nexpect(env.topSuite().children[0].children[0].result.status).toBe('failed')\n\nThat seems to be the only way I can find out if it failed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-05T20:53:32Z", "contents": "Usually, we register a completion handler on the env itself and do whatever verifications in there. You'll also want to get a done callback and call it in there, since suite execution is not guaranteed to be a blocking call. Take a look at SpecRunningSpec.js for a bit more detail on how jasmine actually executes the inner env.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-05T21:07:26Z", "contents": "I assume you're talking about the addReporter calls. I discovered the spec = env.it(...) on my own just before I came back here. That's a lot simpler and doesn't look silly with the double .children[0] bit.\nHere's what I have right now:\nvar promisifyJasmine = require('../jasmine2-as-promised')\n\ndescribe('jasmine2-as-promised', function () {\n    var env\n    var FAILED = 'failed'\n    var PASSED = 'passed'\n\n    beforeEach(function () {\n        env = new jasmine.Env()\n    })\n\n    it('should work', function () {\n        var spec;\n\n        env.describe('faux suite', function () {\n            spec = env.it('faux test', function (done) {\n                env.expect(true).toBe(false)\n            })\n        })\n\n        env.execute()\n        expect(spec.result.status).toBe(FAILED)\n    })\n})\nI'll definitely use done inside env.addReporter for jasmineDone for my asynchronous tests, but assuming the thing I'm testing is synchronous, can't I just use what I have up there? It seems to work just fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-05T22:12:40Z", "contents": "If you're calling execute on an env you should probably be using done, if only to protect yourself from changes to the QueueRunner that might change how many steps are run before resetting the stack by calling setTimeout.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joezimjs", "authorAssociation": "NONE", "createdAt": "2015-10-05T22:13:44Z", "contents": "Alright, Thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 928, "url": "https://github.com/jasmine/jasmine/issues/928", "title": "jasmineToString", "contents": "I notice this discussion in the Google Group forum.\nIn particular I agree with Andr\u00e9's comment:\n\nshouldn't their custom toString be preferred over the recursive pretty print?\n\nI have expectations like the following:\nexpect(res).not.toBeDefined();\nwhere res is expected to be undefined but if this fails then it will be an instance of immutable-js List.\nIs the expectation here that immutable-js should define jasmineToString() functions for all their types?", "createdAt": "2015-09-25T16:26:35Z", "updatedAt": "2015-09-25T18:47:14Z", "closedAt": "2015-09-25T18:47:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "myitcv", "company": "myitcv.io"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-25T17:01:55Z", "contents": "Method 2 in this SO answer provides a cleaner means of overriding this behaviour. Still I would argue falling back to toString() is sensible behaviour.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-25T18:05:51Z", "contents": "The jasmineToString method was introduced specifically to make overriding existing methods in the pretty printer unnecessary.\nI would be happy to review a pull request that allows a custom toString to take precedence over just the fallback recursion. I would like it to be pretty sure that it is actually custom and will print something more useful than just [object Object] or similar.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "myitcv", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-09-25T18:47:14Z", "contents": "@slackersoft just created #929. Thoughts/feedback welcomed there", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 931, "url": "https://github.com/jasmine/jasmine/issues/931", "title": "ability to configure \"already been spied upon\" behavior", "contents": "currently I get errors if I try to re-spy upon a function.\nthis makes my code stateful - which is a serious issue for me.\nI need to remember if this is a spy or not.\nfor example: if I decide to have a default spy after written a lot of tests,  I now need to modify the code in all tests from spyOn(object,'myMethod') to object.myMethod.... seems redundant to me.\nIt would be nicer if it worked similar to jquery wrapper..\n$('div') and $($('div')) - give the same result.\nspyOn(obj,'myMethod') should simply return the spy if spy already exists.", "createdAt": "2015-09-27T09:14:27Z", "updatedAt": "2016-02-18T19:40:55Z", "closedAt": "2016-02-18T19:40:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "guy-mograbi-at-gigaspaces", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "guy-mograbi-at-gigaspaces", "company": "GigaSpaces"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-23T21:02:31Z", "contents": "This is something we've talked about a bit before. The concern was that it might lead to confusion in the specs with users not knowing at which point the function started being spied on. That said, I would be happy to review a pull request that changed this behavior to return the existing spy instead of throwing an error.", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 933, "url": "https://github.com/jasmine/jasmine/issues/933", "title": "Passing \"this\" to beforeAll / beforeEach / it", "contents": "There is a strange issue with this, which can be seen here:\nhttp://plnkr.co/edit/04GzjcMez6YhTroJ3HS6?p=preview\nThe problem is, that this passed to beforeAll seems different from this passed to other methods. Check console output to see the object details:\nInited:  Object {counter: 1}\nappSpec.js:22 Before:  Object {} <- where is \"counter 1\"?\nappSpec.js:34 Test 1:  Object {}\nappSpec.js:14 Disposing  Object {counter: 1}\nappSpec.js:10 Inited:  Object {counter: 2}\nappSpec.js:22 Before:  Object {countObj: null}\nappSpec.js:43 Test 2:  Object {countObj: null}\nappSpec.js:14 Disposing  Object {counter: 2}", "createdAt": "2015-09-28T11:31:30Z", "updatedAt": "2015-12-07T17:39:14Z", "closedAt": "2015-12-07T17:39:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mc0re", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mc0re", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-29T19:18:37Z", "contents": "The execution context (this) that is is used for a beforeAll and afterAll is by definition different than the this for a beforeEach, it, and afterEach because the All functions are invoked at the scope of the suite they are declared in, but the other for the individual spec.\nAnything set on this during the beforeAll should be available on this in each beforeEach, it, afterEach within that scope. Each spec (it and constituent beforeEachs and afterEachs) also gets its own this so that they don't clobber each other. The this for any given spec is cloned out from the parent suite just before we start running the first beforeEach for that spec.\nWith how your suite is set up, it ends up adding to the outer context after the clone has already occurred. beforeAll is really designed for just putting the result straight onto this which would then get copied down to the children. It looks like your example is a bit contrived to show the issue and not your real code, but my suggestion for it would be to remove the beforeAll entirely and just have a beforeEach that does something like this.countObj = createObject();\nHope this helps. Thanks for using jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mc0re", "authorAssociation": "NONE", "createdAt": "2015-10-01T09:49:31Z", "contents": "Yes, my example was as simple as possible to illustrate the issue.\nAs I understand, it receives not just a copy of this sent to beforeAll, but a deep copy - otherwise the additional reference would be correct.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-05T23:11:04Z", "contents": "The references from the parent are copied as references to each child. So, if you were to add something at the beginning of the beforeAll and add a property to that object, I think you'd get the functionality you're looking for.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T17:39:14Z", "contents": "We haven't heard anything else on this issue in a while, and we believe that the current behavior is correct, so I'm going to close this.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 934, "url": "https://github.com/jasmine/jasmine/issues/934", "title": "Email Jasmine test reports.", "contents": "Hi,\nI was wondering if there is a module or a tutorial that would actually send email notifications after the test has been executed. If possible, it would be great to send the exact report as an email.\nPlease let me know.\nThanks,\nUday", "createdAt": "2015-09-28T17:31:30Z", "updatedAt": "2015-09-29T19:02:24Z", "closedAt": "2015-09-29T19:02:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "udayas8451", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "udayas8451", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-09-29T19:02:24Z", "contents": "Jasmine does not have (or really want) a built-in way to send emails of the results of a suite. Sending emails is usually very environment specific and as such, this seems like it would be a good candidate for a custom reporter. There might even be something like this already available in the jasmine custom reporters project.\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 935, "url": "https://github.com/jasmine/jasmine/issues/935", "title": "Can't call `execute` twice?", "contents": "When I try to call execute more than once it seems the beforeEach aren't called again? How can I run Jasmine more than once? (Note: I wait for onComplete before running again.) The tests won't change, just the environment where they are executed. I use jasmine-npm, but re-new the JasmineRunner doesn't seem to work.\nI currently use a dirty hack where I copy my test files for every new JasmineRunner.", "createdAt": "2015-09-30T08:25:25Z", "updatedAt": "2015-10-05T22:09:41Z", "closedAt": "2015-10-05T22:09:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "donaldpipowitch", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "donaldpipowitch", "company": "@Mercateo"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-05T22:09:41Z", "contents": "Jasmine doesn't really expect you to call execute multiple times for a loaded suite, and so we haven't really tried to make sure that use case works. See #666 for some more discussion.\nI believe the reason you need to actually move the files is that otherwise node is just returning the previously loaded versions, but you actually need them to be re-evaluated to get new describes and everything.\nRerunning a loaded env is not a feature that is easy for jasmine to support, given the current architecture. I'd be happy to review a pull request that made moved jasmine closer to being able to support this, as it would necessarily require removing various state-based assumptions from the code.\nClosing this for now. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 936, "url": "https://github.com/jasmine/jasmine/issues/936", "title": "expected and actual value in passed result object", "contents": "Currently, when a spec fails, the failedExpectation object contains the expected and actual values. However when the spec passes, the passedExpectation object omit these two.\nWhy?\nThere is a need for me(and maybe for others) to expose this information in official reports both for failed and passed specs. Also this is extra information that is available and that reporters could choose to ignore for passed spec if they want to.", "createdAt": "2015-10-01T15:06:43Z", "updatedAt": "2016-10-14T23:56:27Z", "closedAt": "2016-10-14T23:56:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ravikumars", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ravikumars", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-01T16:23:19Z", "contents": "Jasmine only holds onto the actual and expected values when the expectation fails because the actual could potentially be very large and we had some issues with performance and memory (see #640). The theory there is that the only time a custom reporter would really want to do anything (like display them) with the actual and expected is when they don't match.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ravikumars", "authorAssociation": "NONE", "createdAt": "2015-10-01T18:30:13Z", "contents": "Ah. I now see that.\nHowever I still feel these values are necessary particularly when jasmine is used for documenting automation runs. I see this happening more in QA where there is a need to document passed and failed tests as opposed to strictly finding issues that my happen in developer only situations.\nIs it possible make it take a flag to provide this functionality or override the default when needed? Any other workarounds short of changing the jasmine code locally?\nAlso the passedExpectation.message says Passed now. Is it the same reason why this happens.\nNote: If the performance issue reported in the linked issue is only for PhantomJs(chrome and other browsers seem to not have issues) then can we consider adding a flag to enable it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-27T18:36:30Z", "contents": "The message for passed expectations has been Passed for a long time. This is partially because of the same assumption that users would only need this kind of information in the case of a failure, but also because the otherwise the message would be very confusing.\nI'll have to think about how best to allow the kind of report you're looking for without making it too easy for users to shoot themselves in the foot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-14T23:56:27Z", "contents": "We haven't seen any interest in this from the community in a while and there have been bad performance issues with keeping things around that we don't need to, so this isn't something I think we're going to change for the foreseeable future.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 937, "url": "https://github.com/jasmine/jasmine/issues/937", "title": "[Feature Request] Allow an async spec to be marked as pending", "contents": "It would be great to allow an asynchronous spec to be marked as pending, in the same way that it can be marked as failed with done.fail e.g.\nit('takes a while but is pending', function(done) {\n  setTimeout(function() {\n    done.pend();\n  }, 100);\n}\nSpecifically, this is coming up here: angular/jasminewd#27 (comment).", "createdAt": "2015-10-02T19:58:09Z", "updatedAt": "2017-11-17T21:18:58Z", "closedAt": "2017-03-08T00:34:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "christian-bromann", "company": "Sauce Labs Inc."}, {"login": "guilhermevrs", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-03T15:54:13Z", "contents": "This sounds reasonable. We'll have to figure out the right way to pipe all the necessary stuff through to the QueueRunner, but I'd be happy to review a pull request that adds this feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-15T00:48:13Z", "contents": "If the global onerror handler proposed in #529 is hooked up correctly, simply calling pending even in async code should properly pend the right spec and move on as it does for synchronous specs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "christian-bromann", "authorAssociation": "NONE", "createdAt": "2016-11-03T13:38:49Z", "contents": "@juliemr check out my commit above for the wdio-jasmine-framework. I am pretty sure you guys can pull this off in Protractor too.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "guilhermevrs", "authorAssociation": "NONE", "createdAt": "2017-10-08T10:48:52Z", "contents": "Hi\nI have a specific scenario where, according to other circustances, I have to mark an async it as pending.\nI have tried to use the pending(), but unfortunately I get the UnhandledPromiseRejectionWarning: Unhandled promise rejection with the pending reason ex:\nUnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): => marked PendingInvalid mock error: TypeError: Cannot read property 'mocks' of undefined\n@slackersoft I didn't get it how the onerror will have to be implemented here. Do you have a clear example?\nThanks in advance", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T21:18:58Z", "contents": "@guilhermevrs I've made a new issue (#1450) for the pending promises. Please take a look there and add anything you think I might have missed.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 938, "url": "https://github.com/jasmine/jasmine/issues/938", "title": "Help spread adoption by providing guides how to integrate with node.", "contents": "The top result for \"jasmine node\" is https://github.com/mhevery/jasmine-node\nWhich is more than 1 year old and defaults to 1.x version of Jasmine.\nShall I use https://github.com/jasmine/jasmine-npm then?\nEither way - some notes / some clarification would be helpful.\n\nIn fact I hate making decisions (I hate thinking) and it is easier to use ___ instead.\n(not being fussy, just offering some feedback from top of my head)", "createdAt": "2015-10-06T19:58:25Z", "updatedAt": "2015-11-04T20:24:54Z", "closedAt": "2015-10-26T21:55:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefek99", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "stefek99", "company": "@mailhustle "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-08T20:58:08Z", "contents": "Jasmine-npm is the official jasmine team supported release for use of jasmine in a node context. Given that the readme for this repository also lists jasmine-npm, what other kinds of changes would you like to see for clarification?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefek99", "authorAssociation": "NONE", "createdAt": "2015-10-09T21:37:55Z", "contents": "@slackersoft my suggestion: communicate with owners of the other repo...\n\n...and update their readme :)\n\nShouldn't be that hard as @mhevery is probably busy with @angular and stuff.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-26T21:55:49Z", "contents": "The jasmine team doesn't want to be in the business of telling maintainers of other repos that support jasmine to mark their work as deprecated.\nAs the suggested changes don't seem to be related to any of the jasmine repos, I'm going to close this. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefek99", "authorAssociation": "NONE", "createdAt": "2015-11-04T20:24:54Z", "contents": "Thanks for using jasmine!\n\nActually I'm not using Jasmine because of the confusion.\nIf the top search result for jasmine node js links to an outdated repo - that's a signal that something is not right.\nMinimal effort from the side of maintainers should be enough to provide trusted and reliable info (update the readme, ask them to provide links to the official repo).\n(but I guess that's not my business - back to work)\nPEACE", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 939, "url": "https://github.com/jasmine/jasmine/issues/939", "title": "Errors raised in spec files outside of describe blocks cause spec files not to run", "contents": "Hey, is anybody else getting this or this is specific to a project my company is working on?\nLet's say we have this file:\ndescribe 'Sagamore.Model', ->\n  beforeEach ->\n    @model = new Sagamore.Model\n\n  describe '#parse', ->\n    beforeEach ->\n      @resp = {\n        'a': 1\n        'hasOne?': true\n      }\n\n    it 'removes \"?\" from keys', ->\n      response = @model.parse(@resp)\n\n      expect(response.hasOwnProperty('hasOne'))\n        .toEqual true\n      expect(response.hasOwnProperty('hasOne?'))\n        .toEqual false\nContents are not important. It runs perfectly, test passes, etc. We have 867 specs in our project and all of them pass.\nThe problem is that if you add a line\nthrow Error()\n\nto the beginning of this file, this and 12 other specs do not get run at all. Jasmine says that 854 (note the changed number) specs are passing, 0 failures.\nIs it a bug? Is it something on our side? It caused us a problem where we had about 100 specs not being run without us noticing for a week because of an error inside a spec file outside of a describe block.", "createdAt": "2015-10-08T14:39:19Z", "updatedAt": "2018-01-26T19:01:48Z", "closedAt": "2018-01-26T19:01:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cbrwizard", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "cbrwizard", "company": "@mothershipcx "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "himajasuman", "company": "McGraw-Hill Education"}, {"login": "sgravrock", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-12T17:59:23Z", "contents": "Jasmine does not currently handle exceptions entirely outside the scope of the suite being declared and run. If the exception is thrown within a describe, either at runtime as part of a synchronous spec or not, jasmine will catch it and show the error.\nThis is something I've seen asked for before, but we haven't really found a good way to handle exceptions at that level. I would be happy to review a pull request that addresses this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "himajasuman", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-25T20:08:20Z", "contents": "Hi, I tried figuring it out. I am new to node and jasmine. Any suggestions on where to catch the error(I mean in which file) would really help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-26T22:26:41Z", "contents": "@himajasuman If the error is being thrown from within a describe jasmine will catch it and report it as an error in your suite and you shouldn't have to do anything. If the error is being thrown outside of a describe jasmine has no way to know what to do about the error (and thus just lets it break), you would have to catch it in your code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-01T23:49:50Z", "contents": "This already works in Node, and it should be fixed in browsers as part of 3.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-26T19:01:48Z", "contents": "This has been fixed in the 3.0-features branch and will be released with Jasmine 3.0. Please check it out there and give us any feedback you have.\nNote that 3.0-features is still under development, so you might want to pin to a particular commit.\nClosing this. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 940, "url": "https://github.com/jasmine/jasmine/issues/940", "title": "No way to use a before() statement? Any plugin available?", "contents": "I would need a before() method.\nImagine a login that is done only at the startup.\nI found a way to do it, but I would prefer to have a method before().", "createdAt": "2015-10-08T16:45:58Z", "updatedAt": "2015-10-08T18:01:08Z", "closedAt": "2015-10-08T16:51:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bitliner", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bitliner", "company": "http://www.wonderflow.co"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-08T16:47:18Z", "contents": "Check out the setup and teardown section of the docs. Jasmine uses the function beforeEach for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bitliner", "authorAssociation": "NONE", "createdAt": "2015-10-08T16:48:28Z", "contents": "I know, that is why I am asking for a before() method.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-08T16:51:54Z", "contents": "We use beforeEach to help clarify the difference between it and beforeAll. A function simply named before can be easily confused as to when it is intended to run.\nIf you really can't use beforeEach, you can customize your boot.js to alias the existing beforeEach to also be before.\nThis isn't functionality we're going to put into the core of jasmine. Closing this issue.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bitliner", "authorAssociation": "NONE", "createdAt": "2015-10-08T18:01:08Z", "contents": "beforeAll was what I was looking for, thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 941, "url": "https://github.com/jasmine/jasmine/issues/941", "title": "Memory leaks because of closures", "contents": "Hi, this is the first issue that I am creating after almost 2 years of usage of your extraordinary testing framework for JavaScript. I am using it mainly for testing AngularJs code and I love it, it enables me to test every peace of my code and with the BDD syntax every test simply becomes part of my code documentation.\nRecently after some extensive debugging, reading and analysing your source code I finally found out why I was experiencing memory leak problems. The problem was that the running tests were not able to finish because of the build up memory consumption in the browser caused by improper garbage collection.\nThis problem was reported by lot of people and I documented it recently in this StackOverflow question.\nWhat I found out is that the reason for it was the improper cleanup after each test which is never mentioned anywhere even in the AngularJs testing guide.\nExample:\ndescribe('Test suite', function() {\n  var a, b;\n\n  beforeEach(function() {\n    // init heavy objects\n    a = new Array(10000).join('x');\n    b = new Array(10000).join('y');\n  });\n\n  // NOTE: often forgotten cleanup\n  afterEach(function () {\n    a = null;\n    b = null;\n  });\n\n  it('spec1', function() {\n    // spec code..\n  });\n\n  // other specs and inner suites ..\n});\nIf the needed cleanup is forgotten because jasmine builds up a tree from all registered suits and each suites containes references to his beforeEach, afterEach.. functions which contain references to the describe function closure which holds references to the 'a' and 'b' variables, the large objects that are referenced by that variables won't be GC-ed until Jasmine stops the execution.\nWe can't say that this is an issue with Jasmine, the problem is because this information is not well transferred to all the developers using this great framework. The question is how we can improve this? Is there a better way that enables easy access to the defined variables in every inner spec, suite, function.. as this one but without caring for the cleanup which is almost always forgotten?\nMy idea for a workaround was to define only one 'container' object (ex. 'suite') which is nulled in an afterEach block and attach all variables there. This in the same time reduces the code length and keeps us safe from forgetting some defined variable.\nExample:\ndescribe('Test suite', function() {\n  var suite = {};\n\n  beforeEach(function() {\n    // init heavy objects\n    suite.a = new Array(10000).join('x');\n    suite.b = new Array(10000).join('y');\n  });\n\n  // NOTE: often forgotten cleanup\n  afterEach(function () {\n    suite = null;\n  });\n\n  // other specs and inner suites ..\n});", "createdAt": "2015-10-11T13:03:13Z", "updatedAt": "2019-06-26T23:21:33Z", "closedAt": "2015-12-07T17:42:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "saskodh", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "saskodh", "company": null}, {"login": "ragaskar", "company": "Pivotal Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "codeword", "company": null}, {"login": "thedocbwarren", "company": "Augmented.js"}, {"login": "Gerg", "company": null}, {"login": "firezdog", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "ragaskar", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-12T16:26:23Z", "contents": "Thanks for this detailed email Sashe, I'm sure it will help people who are\nhaving memory leak issues.\nR.\nOn Sun, Oct 11, 2015 at 6:03 AM, Sashe Klechkovski <notifications@github.com\n\nwrote:\nHi, this is the first issue that I am creating after almost 2 years of\nusage of your extraordinary testing framework for JavaScript. I am using it\nmainly for testing AngularJs code and I love it, it enables me to test\nevery peace of my code and with the BDD syntax every test simply becomes\npart of my code documentation.\nRecently after some extensive debugging, reading and analysing your source\ncode I finally found out why I was experiencing memory leak problems. The\nproblem was that the running tests were not able to finish because of the\nbuild up memory consumption in the browser caused by improper garbage\ncollection.\nThis problem was reported by lot of people and I documented it recently in\nthis\nhttp://stackoverflow.com/questions/32998442/angularjs-unit-testing-memory-leaks\nStackOverflow question.\nWhat I found out is that the reason for it was the improper cleanup after\neach test which is never mentioned anywhere even in the AngularJs testing\nguide https://docs.angularjs.org/guide/unit-testing.\nExample:\ndescribe('Test suite', function() {\nvar a, b;\nbeforeEach(function() {\n// init heavy objects\na = new Array(10000).join('x');\nb = new Array(10000).join('y');\n});\n// NOTE: often forgotten cleanup\nafterEach(function () {\na = null;\nb = null;\n});\nit('spec1', function() {\n// spec code..\n});\n// other specs and inner suites ..\n});\nIf the needed cleanup is forgotten because jasmine builds up a tree from\nall registered suits and each suites containes references to his\nbeforeEach, afterEach.. functions which contain references to the describe\nfunction closure which holds references to the 'a' and 'b' variables, the\nlarge objects that are referenced by that variables won't be GC-ed until\nJasmine stops the execution.\nWe can't say that this is an issue with Jasmine, the problem is because\nthis information is not well transferred to all the developers using this\ngreat framework. The question is how we can improve this? Is there a better\nway that enables easy access to the defined variables in every inner spec,\nsuite, function.. as this one but without caring for the cleanup which is\nalmost always forgotten?\nMy idea for a workaround was to define only one 'container' object (ex.\n'suite') which is nulled in an afterEach block and attach all variables\nthere. This in the same time reduces the code length and keeps us safe from\nforgetting some defined variable.\nExample:\ndescribe('Test suite', function() {\nvar suite = {};\nbeforeEach(function() {\n// init heavy objects\nsuite.a = new Array(10000).join('x');\nsuite.b = new Array(10000).join('y');\n});\n// NOTE: often forgotten cleanup\nafterEach(function () {\nsuite = null;\n});\n// other specs and inner suites ..\n});\n\u2014\nReply to this email directly or view it on GitHub\n#941.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-12T17:18:48Z", "contents": "You might also look at putting your variables onto the this keyword (http://jasmine.github.io/edge/introduction.html#section-The_this_keyword) which will get disposed of when done.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-07T17:42:03Z", "contents": "Closing this since it doesn't necessarily sound like an issue with jasmine itself, and jasmine provides a potential workaround with the this keyword.\nThanks for using jasmine!", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "CONFUSED"]}, {"authorLogin": "codeword", "authorAssociation": "NONE", "createdAt": "2016-06-23T15:39:08Z", "contents": "Whoa, hold on, @slackersoft, are you saying the pattern of\ndescribe(\"A suite is just a function\", function() {\n  var a;\n\n  it(\"and so is a spec\", function() {\n    a = true;\n\n    expect(a).toBe(true);\n  });\n});\ncauses memory leaks in the testing framework and that we are ok with that?  I am really surprised by that as this pattern is all over the introduction to Jasmine docs and has always been the pattern for writing tests.  If this pattern is in fact leaky then it is my opinion that Jasmine needs to be very clear in their documentation of the dangers of declaring variables in their describe blocks and update all their documentation to use some non leaky method of sharing variables between blocks.  In my opinion it should not be expected that developers create afterEach blocks for all their describes to ensure they deallocate all memory they may have used.\nHonestly I think the right thing for Jasmine to do is to find the cause of the leak and fix it so that developers can use described scoped variables and know they go away when the describe block ends.", "reactions_count": 25, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "thedocbwarren", "authorAssociation": "NONE", "createdAt": "2016-06-23T15:55:13Z", "contents": "I've experienced this in my testing many times.  In fact in my larger test suites it builds up a large amount of memory that appears to eventually slow down the browser.\nI've performed before and after methods to attempt deallocation as well with some benefit but not a fix.\nSent from my iPhone\n\nOn Jun 23, 2016, at 8:39 AM, Jonathan Barnes notifications@github.com wrote:\nWhoa, hold on, @slackersoft, are you saying the pattern of\ndescribe(\"A suite is just a function\", function() {\nvar a;\nit(\"and so is a spec\", function() {\na = true;\nexpect(a).toBe(true);\n\n});\n});\ncauses memory leaks in the testing framework and that we are ok with that? I am really surprised by that as this pattern is all over the introduction to Jasmine docs and has always been the pattern for writing tests. If this pattern is in fact leaky then it is my opinion that Jasmine needs to be very clear in their documentation of the dangers of declaring variables in their describe blocks and update all their documentation to use some non leaky method of sharing variables between blocks. In my opinion it should not be expected that developers create afterEach blocks for all their describes to ensure they deallocate all memory they may have used.\nHonestly I think the right thing for Jasmine to do is to find the cause of the leak and fix it so that developers can use described scoped variables and know they go away when the describe block ends.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-24T04:42:40Z", "contents": "These lines of code in Jasmine are meant to encourage your JS engine to garbage collect your closures:\n\n  \n    \n      jasmine/src/core/Env.js\n    \n    \n        Lines 158 to 166\n      in\n      f6da084\n    \n    \n    \n    \n\n        \n          \n           function clearStack(fn) { \n        \n\n        \n          \n             currentSpecCallbackDepth++; \n        \n\n        \n          \n             if (currentSpecCallbackDepth >= maximumSpecCallbackDepth) { \n        \n\n        \n          \n               currentSpecCallbackDepth = 0; \n        \n\n        \n          \n               realSetTimeout(fn, 0); \n        \n\n        \n          \n             } else { \n        \n\n        \n          \n               fn(); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nThat said, Jasmine can only do so much to free memory. Memory leaks in your source code, its dependencies, or your spec runner (see #1108) will compound over your suite's execution. Also, if you have circular references in your code, then it may never be freed (see here).\nJasmine is definitely not perfect, so if you are able to find leaks in Jasmine or strategies to mitigate leaks, we would love to hear about them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "firezdog", "authorAssociation": "NONE", "createdAt": "2019-06-26T14:59:39Z", "contents": "What if you limited nesting of tests to cases where absolutely necessary, implementing proper dereferencing as needed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "saskodh", "authorAssociation": "NONE", "createdAt": "2019-06-26T15:06:10Z", "contents": "@firezdog, I found this workaround very useful, I haven't run on a memory leak issue since I started using it and updated all the tests.\nhttps://stackoverflow.com/a/33072532/4319253", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-06-26T23:21:33Z", "contents": "Newer versions of Jasmine (3.0 and later I think) should also do what they can to remove references to functions (specs, before, after, etc) that have been fully executed, so we should be freeing up as much memory as we can.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 943, "url": "https://github.com/jasmine/jasmine/issues/943", "title": "Implement spies for get/set functions on accessor properties", "contents": "I think it would be useful to extend spyOn (or add another method, like spyOnGetter) to spy on the getter or setter function of an accessor property. Currently there is no way to spy on the following get functions, because Jasmine currently can only spy on functions that are properties, and not on functions that are set/get accessor functions of a property:\nObject.defineProperty(obj, \"dynamicFoo\", {\n    configurable: true,\n    get: function() {\n        return Math.random();\n    }\n});\n\nvar obj = {\n    get dyanmicBar() { return Math.random(); }\n}\n\nIt seems like the core functionality could be implemented using defineProperty to rewrite the property with a spy for its get or set method.\nThe current code is\nthis.spyOn = function(obj, methodName) {\n    ...\n    var spy = j$.createSpy(methodName, obj[methodName]);\n    obj[methodName] = spy;\n}\n\nThe code could handle accessor functions with a third argument (either \"get\" or \"set\") like so:\nthis.spyOn = function(obj, methodName, accessType) {\n    ...\n    var desc = Object.getPropertyDescriptor(obj, methodName);\n    if(desc[accessType]) { // \"get\" or \"set\" exists on the property\n        var spy = j$.createSpy(methodName, desc[accessType]);  \n\n        desc[accessType] = spy;\n\n        Object.defineProperty(obj, methodName, desc);\n    }\n}\n\nHowever, I'm not sure how this would break existing assumptions. For example, in my sample code above, createSpy is given the property name, but the property is not being spied on; rather, one of the property's accessor functions is being spied on. This change would require eliminating the assumption that a function being spied on is a property of an object, and instead writing logic that admits the possibility that a spied function could be a get or set function within an object property.", "createdAt": "2015-10-16T12:49:53Z", "updatedAt": "2017-12-18T14:06:27Z", "closedAt": "2016-11-04T21:37:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "apsillers", "authorAssociation": "NONE", "participants_count": 24, "participants_data": [{"login": "apsillers", "company": null}, {"login": "StanleyGoldman", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mgilliganrca", "company": "Real Capital Analytics"}, {"login": "isadovskiy", "company": null}, {"login": "jamesbrobb", "company": null}, {"login": "apaatsio", "company": null}, {"login": "maxyharr", "company": null}, {"login": "vojtech-cerveny", "company": "CloverDX"}, {"login": "salickc", "company": null}, {"login": "yhari", "company": null}, {"login": "nicbou", "company": "Software developer"}, {"login": "anjmao", "company": "Trackforce"}, {"login": "FunkeyFlo", "company": "Dynamic Products"}, {"login": "benediktarnold", "company": null}, {"login": "chrisatanasian", "company": "@MelianLabs "}, {"login": "ptomato", "company": "@endlessm"}, {"login": "henrahmagix", "company": null}, {"login": "Gigitsu", "company": null}, {"login": "elwynelwyn", "company": null}, {"login": "joshfermin", "company": "Poncho"}, {"login": "fimius23", "company": null}, {"login": "pauljeffreys", "company": "Dominion Enterprises"}, {"login": "phra", "company": "@d0nkeys @BolognaJS "}], "comments_count": 26, "comments_data": [{"authorLogin": "StanleyGoldman", "authorAssociation": "NONE", "createdAt": "2015-10-28T01:30:56Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T18:37:36Z", "contents": "I can see that being useful. I don't think we want to add that complexity to the existing spyOn implementation, but I would be happy to review a pull request to add something like spyOnProperty or something.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mgilliganrca", "authorAssociation": "NONE", "createdAt": "2015-10-29T13:12:42Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "isadovskiy", "authorAssociation": "NONE", "createdAt": "2016-01-12T10:17:49Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesbrobb", "authorAssociation": "NONE", "createdAt": "2016-01-22T10:50:31Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "apaatsio", "authorAssociation": "NONE", "createdAt": "2016-02-08T11:17:43Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maxyharr", "authorAssociation": "NONE", "createdAt": "2016-02-23T18:48:26Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vojtech-cerveny", "authorAssociation": "NONE", "createdAt": "2016-02-26T15:56:55Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "salickc", "authorAssociation": "NONE", "createdAt": "2016-03-16T11:27:53Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yhari", "authorAssociation": "NONE", "createdAt": "2016-03-18T00:59:21Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nicbou", "authorAssociation": "NONE", "createdAt": "2016-03-23T12:43:35Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "anjmao", "authorAssociation": "NONE", "createdAt": "2016-03-31T08:08:21Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FunkeyFlo", "authorAssociation": "NONE", "createdAt": "2016-04-18T09:18:45Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benediktarnold", "authorAssociation": "NONE", "createdAt": "2016-05-18T18:54:07Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisatanasian", "authorAssociation": "NONE", "createdAt": "2016-05-28T00:46:57Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-05-28T01:09:31Z", "contents": "I think at this point the +1s are crowding out any actual discussion that might happen here; please show your enthusiasm by subscribing yourself to the issue or adding a \ud83d\udc4d reaction with GitHub's new \"reaction\" feature so that everybody doesn't continue to get notifications for each new +1.\nOr, better yet, attach a pull request \ud83d\ude04", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-05-28T06:38:33Z", "contents": "@ptomato #1008 is a pull-request that fulfills this issue, already attached", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Gigitsu", "authorAssociation": "NONE", "createdAt": "2016-06-28T10:15:04Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-13T06:33:34Z", "contents": "@slackersoft We now have #1008 and #1203 able to be merged. Is there a timeline for this feature?", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "elwynelwyn", "authorAssociation": "NONE", "createdAt": "2017-02-08T02:49:39Z", "contents": "Any guidance on when this will make it into a release?", "reactions_count": 25, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "joshfermin", "authorAssociation": "NONE", "createdAt": "2017-04-06T22:50:13Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fimius23", "authorAssociation": "NONE", "createdAt": "2017-04-26T17:35:08Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-25T14:33:02Z", "contents": "@elwynelwyn @joshfermin @fimius23 I know this is late so you may know already, but this is available in 2.6 (#1203 (comment)) with docs at https://jasmine.github.io/api/edge/global.html#spyOnProperty", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "pauljeffreys", "authorAssociation": "NONE", "createdAt": "2017-12-11T18:34:43Z", "contents": "I realise I am late to the game here, but does anybody know of a similar function call for jest? Wanting to test a getter in that also, but this addition is just jasmine..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-12T01:05:26Z", "contents": "@pauljeffreys you should probable ask the Jest folks. (https://github.com/facebook/jest) I'm not totally sure it's even still built on top of Jasmine in a way that would allow them to incorporate the work done here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "phra", "authorAssociation": "NONE", "createdAt": "2017-12-18T14:06:27Z", "contents": "@pauljeffreys @slackersoft see my PR at facebook/jest#5107", "reactions_count": 0, "reactions_data": []}], "reactions_count": 44, "reactions_datalabels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 944, "url": "https://github.com/jasmine/jasmine/issues/944", "title": "beforeEach(...) skips error when using function references", "contents": "If I use a function reference in my beforeEach(...), and that function throws an error, the test continues to execute as-if there was no problem. In some cases, this skips the it(...) blocks from executing altogether without throwing any indication that something wrong happened.\nie. a case like this:\nvar myVariable;\n\nbeforeEach(setupMyTest);\n\nit('Should be equal to \"fail\" string', function () {\n  expect(myVariable).toEqual('fail');\n});\n\n///\n\nfunction setupMyTest () {\n  myVariable = fail;\n}\n\nWhere-as if I use a function block, the error is echoed to console and shows the tests as failed:\nvar myVariable;\n\nbeforeEach(function () {\n  myVariable = fail;\n});\n\nit('Should be equal to \"fail\" string', function () {\n  expect(myVariable).toEqual('fail');\n});\n\nI use the first pattern for writing tests because it is much cleaner to read and follow, when there is a large series of tests. But there are cases where a bug goes undetected as a result of the error being silenced.", "createdAt": "2015-10-16T21:07:36Z", "updatedAt": "2016-09-27T01:04:33Z", "closedAt": "2016-09-27T01:04:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mpiasta-ca", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mpiasta-ca", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-27T18:50:58Z", "contents": "What version of jasmine are you using? When I try either version with 2.3, I always get this error:\nExpected Function to equal 'fail'.\nThis is because the fail function was introduced in jasmine 2.1.0, so it will be defined.\nWhen I switch fail to something undefined, I see two failures, one from the beforeEach and one from the it:\nReferenceError: thing is not defined\nExpected undefined to equal 'fail'.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T01:04:33Z", "contents": "Closing due to inactivity", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 945, "url": "https://github.com/jasmine/jasmine/issues/945", "title": "Increase the maximumSpecCallbackDepth or make it configurable", "contents": "I've spent a couple of days chasing an issue with maximumSpecCallbackDepth. It either should be configurable or at least, when the currentSpecCallbackDepth is getting reset to 0 (\n  \n    \n      jasmine/lib/jasmine-core/jasmine.js\n    \n    \n         Line 657\n      in\n      141fd91\n    \n    \n    \n    \n\n        \n          \n           currentSpecCallbackDepth = 0; \n        \n    \n  \n\n) the user should be notified about this (for example: \"Please increase the maximumSpecCallbackDepth or split your test on smaller chunks).\nOtherwise, somebody else will spend more days on debugging this issue.\nRelated issue: #366", "createdAt": "2015-10-19T20:11:43Z", "updatedAt": "2016-10-14T16:38:48Z", "closedAt": "2016-10-14T16:38:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NameFILIP", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "NameFILIP", "company": "Uber"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "FuzzySockets", "company": null}, {"login": "stefan-dimitrov", "company": "clouWay ltd"}, {"login": "provegard", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-23T22:42:15Z", "contents": "What issue are you seeing that is being alleviated by raising the maximumSpecCallbackDepth? Also, please take a look at my comment in #366", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FuzzySockets", "authorAssociation": "NONE", "createdAt": "2015-10-24T04:13:20Z", "contents": "Having too many runnable blocks in a single test is causing the number of queueableFunctions to increase beyond the max callback depth.  When this number is greater than 20, you start getting the \"Some of your tests did a full page reload!\" from karma. I'm not sure exactly what triggers the runner context to reload, but it only happens when the currentSpecCallbackDepth reaches the maximumSpecCallbackDepth, which triggers the first clearStack conditional statement (resetting the currentSpecCallbackDepth to 0).  I think there is something quirky with the way runnable functions are being registered.\nI notice if I add a new describe block with a single it, that adds two more functions to allFns, which we pass to queueRunnerFactory: queueRunnerFactory({queueableFns: allFns, onComplete: reporter.jasmineDone});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-26T21:20:44Z", "contents": "@FuzzySockets what version of jasmine are you using? Spec execution was fairly heavily refactored as part of the 2.3.0 release so that line you reference no longer exists in that same form. I would be curious if the newer version fixes your problem.\nAs far as what karma does when a setTimeout is called, that sounds like it would be an issue with karma and not jasmine itself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FuzzySockets", "authorAssociation": "NONE", "createdAt": "2015-10-26T22:02:37Z", "contents": "@slackersoft It happens in both 2.1.0 and 2.3.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "NameFILIP", "authorAssociation": "NONE", "createdAt": "2015-10-27T00:06:22Z", "contents": "I confirm that I had issues with both: 2.1 and 2.3\nWe had a couple of tests with quite a lot of nested describe and it blocks. These tests used to fail consistently with the error message 'expect' was used when there was no current spec, this could be because an asynchronous test timed out.. They were regular tests without any async stuff. We fixed this locally by increasing the maximumSpecCallbackDepth to 1000. But it would be nice to fix this for the whole library.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "FuzzySockets", "authorAssociation": "NONE", "createdAt": "2015-10-27T15:00:15Z", "contents": "I can't put my finger on exactly what is causing the reload upon timeout.  I couldn't find anything in karma that would trigger this behavior.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-28T18:42:33Z", "contents": "If you run your specs in just bare jasmine, without karma, do you see the same problem? Jasmine's own test suite is over 500 specs, and we have sample suites to test against with many thousands of tests that don't exhibit the behavior you mention.\nI'm not totally against moving maximumSpecCallbackDepth to somewhere more configurable, but it seems like it would just be hiding an underlying issue in some other library.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefan-dimitrov", "authorAssociation": "NONE", "createdAt": "2015-11-30T13:48:05Z", "contents": "@FuzzySockets @NameFILIP, what browser are your tests running on ? I'm having the same issue, my tests run on PhantomJS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "provegard", "authorAssociation": "NONE", "createdAt": "2016-03-22T13:57:51Z", "contents": "I'm seeing this as well. Currently running a patched Jasmine that lowers the value to 5.\nMy environment is Scala + Nashorn, so stacks are quite intimidating to begin with. :-)\nBefore lowering the value, I could run around 12 or 13 tests before tests started to \"disappear\".", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 947, "url": "https://github.com/jasmine/jasmine/issues/947", "title": "If fail() or pending() called within beforeEach block, spec should be skipped", "contents": "To my mind if a spec is marked as pending or failed in a beforeEach block I would not expect the test to then be executed, but currently it is.  Is this the expected/desirable behaviour?", "createdAt": "2015-10-20T14:08:15Z", "updatedAt": "2015-10-26T19:14:54Z", "closedAt": "2015-10-26T19:14:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "keirlawson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "keirlawson", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-26T19:14:50Z", "contents": "This sounds like a special case of #577. Closing as a duplicate.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 948, "url": "https://github.com/jasmine/jasmine/issues/948", "title": "Spying on a function that is defined using a getter causes PhantomJS to crash", "contents": "TypeError: setting a property that has only a getter.\nNow you might think that this is an issue for PhantomJS to resolve, but it is not. Your own tests run on Node, which in this case has the same issue but fails silently instead.\nIn the end, it means that you cannot spy on a function or constant that has been declared using only a getter. Depending on the environment, it either fails silently (possibly providing false test results) or fails by hanging the process.", "createdAt": "2015-10-21T10:14:12Z", "updatedAt": "2015-12-07T17:07:40Z", "closedAt": "2015-10-26T23:30:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "StephanBijzitter", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "StephanBijzitter", "company": "Skelware"}, {"login": "amilligan", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "amilligan", "authorAssociation": "NONE", "createdAt": "2015-12-07T17:07:40Z", "contents": "This is no doubt the correct behavior for Jasmine spies.  However, it breaks tests that are currently functioning properly.\nPhantomJS will return { writable: false, enumerable: false, configurable: false } for properties like window.history.pushState, and yet spying on that function would still work.  In fact, just overwriting that property works just fine in PhantomJS; again, no doubt an incorrect behavior in PhantomJS, but one that some indeterminate number of spec suites probably depends on.\nJasmine should make this change, but a deprecation warning, or a major version change, would be appropriate.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 950, "url": "https://github.com/jasmine/jasmine/issues/950", "title": "Specifications generator", "contents": "Hi! I'm new to jasmine and I love it!\nWas wondering if it was possible to generate some auto-generated markdown (or any format) specifications? Each describe block would be a new dummy entry like :\n## Some instance .\n\n- shall handle some specific case ...\n- shall handle some generic case ...\n- shall throw an error when ...\nThanks for your help!", "createdAt": "2015-10-21T17:54:31Z", "updatedAt": "2015-10-21T21:16:13Z", "closedAt": "2015-10-21T21:16:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jsamr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jsamr", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-21T21:16:12Z", "contents": "This sounds like a custom reporter. There are also some existing custom reporters out there (the jasmine-reporters project for example) that may have something like this already built.\nIn the future you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself. I'm going to close this.\nThanks for using jasmine", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 952, "url": "https://github.com/jasmine/jasmine/issues/952", "title": "--watch option for fast iteration during TDD?", "contents": "First, apologies if this has been asked before but a search for 'watch' in github and google don't turn up anything relevant.\nMocha has a --watch mode that re-runs tests when something changes.  Karma also does something similar, in fact Karma's default mode is to stay in a watch mode unless you specify 'single run.'  This makes TDD easy as you can write your tests first, see them fail, then as you save code tests start passing.\nI can approximate this functionality with chokidar and gulp/grunt, but was surprised this doesn't seem to be built-in.", "createdAt": "2015-10-23T17:39:25Z", "updatedAt": "2015-10-24T02:05:08Z", "closedAt": "2015-10-23T20:45:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thom-nic", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "thom-nic", "company": "VoltServer"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-23T20:45:10Z", "contents": "I think you're probably looking for jasmine/jasmine-npm#5. This repository doesn't contain any code to run the suite in a way that would be watchable.\nClosing this as a duplicate. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "thom-nic", "authorAssociation": "NONE", "createdAt": "2015-10-24T02:05:08Z", "contents": "Ah, gotcha.  Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 959, "url": "https://github.com/jasmine/jasmine/issues/959", "title": "Testing the property of an undefined object", "contents": "In the process of testing a REST API with the following code :\ndescribe('GET /', function() {\n    it('should respond with 200', function(done) {\n        request(options, function(error, response, body) {\n            expect(response.statusCode).toBe(200);\n            done();\n         });\n     });\n});\n\nIf the webservice is down, or the requested address is wrong, the response is not defined, all tests are skipped and jasmine fail with :\nTypeError: Cannot read property 'statusCode' of undefined\nIf this situation I would expect jasmine to just report :\nExpected undefined to be 200.\nIs jasmine failing this way by design ? And then how can I best prevent jasmine to completely fails in this situation ?\nOr\nShouldn't jasmine just report \"expected undefined  something\" in case we are reading the property of an undefined object ?", "createdAt": "2015-10-26T19:46:14Z", "updatedAt": "2015-10-26T20:49:40Z", "closedAt": "2015-10-26T20:43:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Tetraib", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Tetraib", "company": "ISISPHINX"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-26T20:43:42Z", "contents": "It's actually the underlying javascript interpreter that is throwing that error and not jasmine itself. If just the statusCode was undefined you would get the error you want. You could also do a precursor check, something like:\nexpect(response).not.toBeUndefined();\nThere isn't much jasmine can do by itself in this situation, so I'm going to close this. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Tetraib", "authorAssociation": "NONE", "createdAt": "2015-10-26T20:49:40Z", "contents": "Yes I was doing the precursor check, but It doesn't help because it is not even showed on the console if I test for\nexpect(response.statusCode).toBe(200);\n\nin the same spec.\nMay be I can go for a custom matcher that tests the existence of the object before testing it's property ?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 960, "url": "https://github.com/jasmine/jasmine/issues/960", "title": "Feature to retry failed tests", "contents": "Is there the possibility for Jasmine to add an option to retry failed tests to de-flake?\ni.e. if my test suite has 3 tests: A, B and C.\nIf B failed, but A and C passed, Jasmine will rerun B to see if it passes (it will retry only the failed tests up to a specified number of times).\nThis would help with Protractor tremendously. (i.e. angular/protractor#1190). I would be willing to create a PR for this if owners think this feature fit within jasmine.", "createdAt": "2015-10-28T23:32:46Z", "updatedAt": "2018-03-15T11:38:32Z", "closedAt": "2017-04-14T21:15:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hankduan", "authorAssociation": "NONE", "participants_count": 12, "participants_data": [{"login": "hankduan", "company": "Google"}, {"login": "joaoffalcao", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "juliemr", "company": "Google"}, {"login": "bruindav", "company": null}, {"login": "willgm", "company": null}, {"login": "vishal-modi", "company": null}, {"login": "premkh9", "company": null}, {"login": "d3ming", "company": null}, {"login": "sul4bh", "company": null}, {"login": "wmhilton", "company": "@stoplightio"}, {"login": "Gerg", "company": null}], "comments_count": 13, "comments_data": [{"authorLogin": "joaoffalcao", "authorAssociation": "NONE", "createdAt": "2015-11-13T16:17:20Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-30T20:19:25Z", "contents": "I think this is functionality we'd like to keep out of jasmine itself. I think you should be able to build something that can do this with the existing custom reporter and filter function. If this isn't possible, I'd be happy to review an issue or pull request about what makes it hard.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2015-12-01T20:03:46Z", "contents": "There's been a lot of requests for this from Protractor users, so I think it's worth at least putting together an initial design to see if it could be done outside of the Jasmine project itself, as a custom reporter. I imagine other users may find it helpful as well. @hankduan can you do a quick prototype?", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "bruindav", "authorAssociation": "NONE", "createdAt": "2016-03-16T11:11:25Z", "contents": "+1000 :-))", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "willgm", "authorAssociation": "NONE", "createdAt": "2016-09-08T13:35:01Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vishal-modi", "authorAssociation": "NONE", "createdAt": "2016-09-19T21:20:00Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "premkh9", "authorAssociation": "NONE", "createdAt": "2016-09-29T22:08:05Z", "contents": "That will be very helpful", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "d3ming", "authorAssociation": "NONE", "createdAt": "2016-11-09T00:21:27Z", "contents": "\ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sul4bh", "authorAssociation": "NONE", "createdAt": "2016-11-09T00:28:38Z", "contents": "This would surely be very useful. juliemr hankduan do you guys have any update on this?\nTo anybody looking see: https://www.npmjs.com/package/protractor-flake", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-14T21:15:53Z", "contents": "It sounds like the primary use case for this feature (Protractor) has been solved with the protractor-flake library. I'm going to close this issue in favor of that solution for now. I would be happy to review a pull request or discuss enhancements to Jasmine that would make this kind of thing easier to put together for Jasmine.\nThanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "wmhilton", "authorAssociation": "NONE", "createdAt": "2018-02-11T23:44:59Z", "contents": "Hi, I have no idea what Protractor is - I'm using Jasmine on SauceLabs on Karma on Travis-CI to run tests on a bunch of different browsers, and the tests are just flaky enough that my Travis-CI build almost never passes on the first try. Having a retry function built into Jasmine would be ideal because it is the lowest level of granularity. Rerunning one test (out of a thousand) would be the fastest and most reliable, since it doesn't run the risk of a test that previously passed now failing. Having a Karma plugin to re-run Jasmine is the next level of granularity, followed by re-running Karma, followed by re-running Travis. I've been re-running Travis, and am about to try using travis_retry to rerun Karma, but that is still less likely to succeed than rerunning the individual Jasmine tests.\nLooking at the custom reporter spec, I don't see how it could be used to re-run a failed spec. I'd need to remove the failed test and append a new test, or somehow \"wrap\" each test in a retrying function before the test executes. Could someone explain how I could implement such a reporter?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-15T00:48:39Z", "contents": "The custom reporter isn't the full solution, but the part that allows recording of which specs failed for a later retry. You should be able to take that info and input it into a second execution of Jasmine to just run those specs that failed. I'm not sure what all Karma will let you do with to pass all of that through, and how the reporter would work there either.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wmhilton", "authorAssociation": "NONE", "createdAt": "2018-03-15T11:38:32Z", "contents": "Ah! That makes sense now. I'll see what I can figure out.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 961, "url": "https://github.com/jasmine/jasmine/issues/961", "title": "Cannot call createSpyObj with only name, not list of methods", "contents": "jasmine.createSpyObj throws if you don't pass it any method names: \n  \n    \n      jasmine/src/core/base.js\n    \n    \n         Line 113\n      in\n      375a6f9\n    \n    \n    \n    \n\n        \n          \n           if (!j$.isArray_(methodNames) || methodNames.length === 0) { \n        \n    \n  \n\n\nWhy was this behavior added? My use case is that I'd like to ensure that a specific parameter was passed through to another function.  For instance:\nfunction iCallThings(a, b) {\n  a(b);\n}\n\na = jasmine.createSpy('a');\nb = jasmine.createSpyObj('b', []);\n\niCallThings(a, b);\nexpect(a).toHaveBeenCalledWith(b);\nAFAIK, this test would work if it weren't for Jasmine checking the length of the array passed as the second argument to createSpyObj.  A solution right now is to do something like b = {'b': true}, but I'd prefer to use createSpyObj.  I'm fine with having to pass an empty array but I'd like to not have to pass a non-empty array.\nI can send out a PR for this if you agree that it'd be a positive change.", "createdAt": "2015-10-30T15:31:44Z", "updatedAt": "2016-10-13T12:07:01Z", "closedAt": "2015-11-02T19:35:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danfinnie", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "danfinnie", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "gestj", "company": "Haufe-Lexware GmbH & Co. KG"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-30T16:33:44Z", "contents": "We're throwing an error in this case under the assumption that you've probably mistakenly called createSpyObj. The line you have\nb = jasmine.createSpyObj('b', []);\nends up being exactly equivalent to:\nb = {};\nbecause if you don't pass in any method names, no spies are actually created on the object. Given this, this isn't functionality we're likely to change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danfinnie", "authorAssociation": "CONTRIBUTOR", "createdAt": "2015-10-31T15:32:21Z", "contents": "Hmmm that does seem to be the case.\nI was hoping that by creating spy objects I would get more descriptive error messages based on their names.  For instance, \"Expected spy a to have been called with [ spy object 'b' ] but actual calls were [ spy object 'c' ]\".  This doesn't seem to be the case though, the name you pass into jasmine.createSpyObj is just used to name the spies it creates.  This functionality exists for normal spies but not spy objects, is there a reason for that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-02T19:35:32Z", "contents": "A spy object is just an object with a bunch of spies on it, the intention is to make it easier to inject a collaborator object in and see which functions get called on it.\nThe functionality you're looking for can be accomplished very easily with plain javascript (var b = {\"object\": \"b\"}; or var b = \"object b\";), so this isn't something we're looking to change in jasmine itself.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gestj", "authorAssociation": "NONE", "createdAt": "2016-10-13T12:07:01Z", "contents": "If you want to create an empty spy/mock in typescript for testing:\nlet x: T = <T>{};\n(just ran into this by myself)", "reactions_count": 3, "reactions_data": ["HEART", "THUMBS_UP", "HEART"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 962, "url": "https://github.com/jasmine/jasmine/issues/962", "title": "Is jasmine really BDD?", "contents": "Jasmine is a Behavior Driven Development testing framework for JavaScript.\n\nIs this really true?\nAs far as I know BDD means the usage of a feature description language, for example gherkin which we can use to describe features in a human readable form. These descriptions have very high abstraction level, use words from ubiquitous language (DDD), for example:\nScenario: Wilson posts to his own blog\n  Given I am logged in as Wilson\n  When I try to post to \"Expensive Therapy\"\n  Then I should see \"Your article was published.\"\nAs you can see they don't contain any (javascript) code, so the implementation is independent from the feature description. You can do it on any programming language using any programming style.\nBy running the tests we translate the feature descriptions into running tests by the usage of step definitions. These step definitions are reusable and contain low level code like fixtures, assertions, etc. and they are reusable. So I can say that\nScenario: Gabriel tries to post to Wilson's blog\n  Given I am logged in as Gabriel\n  When I try to post to \"Expensive Therapy\"\n  Then I should see \"You don't have the permissions to post here\"\nAnd I can reuse the step definition of the When I try to post to \"Expensive Therapy\" part.\nA clean separation of these 2 abstraction levels is important not just because the reusability, but because the human readability and the ensurance of  loose coupling between the feature descriptions and the code. So we don't have to touch the feature descriptions if only the implementations changes, but the supported features remain the same.\nOfc. jasmine could be used for writing these step definitions, just as any unit testing framework.", "createdAt": "2015-10-30T20:43:33Z", "updatedAt": "2015-10-31T14:48:19Z", "closedAt": "2015-10-30T20:45:41Z", "state": "CLOSED", "closed": true, "locked": true, "activeLockReason": null, "authorLogin": "inf3rno", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "inf3rno", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-30T20:45:40Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2015-10-30T20:47:31Z", "contents": "@slackersoft I think this is a documentation bug, because jasmine isn't a BDD framework. I should have put ?! to the end of the title.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-10-30T20:57:56Z", "contents": "BDD is a way to approach testing, not a tool that you use. The question of whether the format of the tests you are writing is or is not BDD is off topic for github issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "inf3rno", "authorAssociation": "NONE", "createdAt": "2015-10-31T09:33:24Z", "contents": "@slackersoft Can you add some references about why jasmine is BDD? I haven't found anything here: https://en.wikipedia.org/wiki/Behavior-driven_development or any BDD related video and article I checked, and I checked a lot in the past year.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 963, "url": "https://github.com/jasmine/jasmine/issues/963", "title": "calling jasmine.execute multiple times in node", "contents": "Is it possible to call jasmine.execute multiple times with different files.\nI have a use case where I want to run tests serially.\nWhen I attempt to do this it appears to just run the first set over again.\nvar Jasmine=require(\"jasmine\");\nvar jasmine=new Jasmine();\njasmine.execute([\"test/testBasic.spec.js\"]);\njasmine.execute([\"test/testBasic2.spec.js\"]);\njasmine.execute([\"test/testBasic3.spec.js\"]);\njasmine.execute([\"test/*.spec.js\"]);\n\nOutput:\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\n\nThe tests log the file name and I see only the first file being called four times.\nIf I change the order in index.js to:\nvar Jasmine=require(\"jasmine\");\nvar jasmine=new Jasmine();\njasmine.execute([\"test/*.spec.js\"]);\njasmine.execute([\"test/testBasic.spec.js\"]);\njasmine.execute([\"test/testBasic2.spec.js\"]);\njasmine.execute([\"test/testBasic3.spec.js\"]);\n```.\nI see:\n\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\nStarted\n./Volumes/DataDrive/jasminetest/test/testBasic.spec.js two\n/Volumes/DataDrive/jasminetest/test/testBasic.spec.js one\n./Volumes/DataDrive/jasminetest/test/testBasic2.spec.js threee\nF/Volumes/DataDrive/jasminetest/test/testBasic3.spec.js four\nF\nFailures:\n\n\nsecond test secondtestIt\nMessage:\nExpected true to be false.\nStack:\nError: Expected true to be false.\nat Object. (/Volumes/DataDrive/jasminetest/test/testBasic2.spec.js:8:16)\n\n\nthird test Suite third test\nMessage:\nExpected true to be false.\nStack:\nError: Expected true to be false.\nat Object. (/Volumes/DataDrive/jasminetest/test/testBasic3.spec.js:8:16)\nMessage:\nExpected 'one' to equal 'seven'.\nStack:\nError: Expected 'one' to equal 'seven'.\nat Object. (/Volumes/DataDrive/jasminetest/test/testBasic3.spec.js:9:17)\n\n\n4 specs, 2 failures\nFinished in 1.001 seconds\nSo it calls the first file 3 times and then calls all four.", "createdAt": "2015-10-31T14:30:21Z", "updatedAt": "2017-11-17T21:23:56Z", "closedAt": "2016-09-28T00:55:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "donniev", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "donniev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Mayank-jain34", "company": null}, {"login": "PhantomMachine", "company": "Digilent Inc."}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-30T19:42:39Z", "contents": "The jasmine-npm module only loads up a single underlying jasmine environment. This is because most of the configuration that is done is simply passed through to the underlying jasmine-core environment.\nIf you really need to do what you are suggesting, you should be able to simply make a separate Jasmine object for each time you want to call execute.\nHope this helps. Thanks for using jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Mayank-jain34", "authorAssociation": "NONE", "createdAt": "2017-10-05T08:45:17Z", "contents": "@slackersoft I have created two instances of jasmine first one is executing perfectly but the second one is not able to find any specs its showing error \"No specs found\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "PhantomMachine", "authorAssociation": "NONE", "createdAt": "2017-10-13T16:58:44Z", "contents": "I am encountering the same issue as @Mayank-jain34, although I've found a work-around that involves creating a second spec file for the other half of the test to reside.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T21:23:56Z", "contents": "When you create an install a Jasmine environment, it assumes control over all of the global Jasmine interface methods (describe, it, etc), therefore, in order to get two suites in a single process, you would need to create and install one, load up only the specs you want in that one, then create the second and load only those specs. If you really need to run all of the specs in both sets in the same process though, you really shouldn't need two Jasmine environments.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 964, "url": "https://github.com/jasmine/jasmine/issues/964", "title": "Jasmine cannot work in Atom Electron environment", "contents": "When I try to run Jasmine under Electron, it fails with error:\njasmine.js:28 Uncaught ReferenceError: exports is not defined\nLooking at source code, I can suppose that the problem is in mixed node.js/browser environment.\nHow to reproduce:\nset -e\ngit clone https://github.com/atom/electron-quick-start\ncd electron-quick-start\nwget https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip\nunzip jasmine-standalone-2.3.4.zip\ncp SpecRunner.html index.html\nnpm install\nnpm start\nAnd then look at developer console by pressing Ctrl-Shift-I", "createdAt": "2015-11-02T16:47:09Z", "updatedAt": "2016-09-27T18:12:59Z", "closedAt": "2016-03-27T04:29:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "skupr", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "skupr", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "denisgursky", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-14T01:01:38Z", "contents": "Yeah, it looks like we've got some bad assumptions/bugs in a couple places that are causing issues.\nI would be happy to review a pull request that fixes this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "denisgursky", "authorAssociation": "NONE", "createdAt": "2016-05-13T09:05:13Z", "contents": "@slackersoft , Is it possible to publish a new version to npm with this fix?", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-27T18:12:59Z", "contents": "New version 2.5.x is released and should have the fix for this in it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 966, "url": "https://github.com/jasmine/jasmine/issues/966", "title": "Add dddescribe, iiit for suites, specs that should always run", "contents": "While I am isolating a test using ddescribe in scenario-change-username.js I also have to use it in scenario-login.js so that the user is logged in.\nIt would be nice to use something like dddescribe in the login file, (for want of better nomenclature).\n``dddescribewould be immutable, and this case, the login test would always run, even when otherddescribes` are used.", "createdAt": "2015-11-03T17:09:13Z", "updatedAt": "2015-11-13T22:33:24Z", "closedAt": "2015-11-13T22:33:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "F1LT3R", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "F1LT3R", "company": "Houghton Mifflin Harcourt"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-13T22:33:24Z", "contents": "Any given test in your suite shouldn't have dependencies on other tests. If you need common setup, jasmine provides beforeEach and beforeAll for this purpose.\nThis isn't a feature we want to have in jasmine itself.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 967, "url": "https://github.com/jasmine/jasmine/issues/967", "title": "Way to export spec tree?", "contents": "Hi,\nI would like to export a tree of the Jasmine specs, is this possible?\nWhen I use karma-spec-reporter I can output the specs as they run, making a tree like:\nMyModule\n  someFunction()\n    when foo == bar\n      returns 'true'\n    when foo == baz\n      returns 'false'\n\nThis is really useful and I would like to use this information to describe my modules outside of running the tests. Is there any way I can simply parse the specs in Jasmine and somehow get at that information? I assume that Jasmine creates some kind of tree somewhere of what it has to run.\nThanks,\n\nGavin", "createdAt": "2015-11-09T17:39:00Z", "updatedAt": "2015-11-14T10:46:38Z", "closedAt": "2015-11-14T01:30:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gavD", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gavD", "company": "Bipsync"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-14T01:30:38Z", "contents": "You should be able to write your own custom reporter to accomplish this as part of your test run. Outside of this, jasmine doesn't provide any way to get your spec tree. You could probably also write a runner that defined describe and it and built up a tree as they were called.\nThis isn't a feature we're looking to have in jasmine itself, so I'm going to close this. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gavD", "authorAssociation": "NONE", "createdAt": "2015-11-14T10:46:38Z", "contents": "Thanks, that's great :-)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 968, "url": "https://github.com/jasmine/jasmine/issues/968", "title": "Error in example usage in introduction page", "contents": "This seems wrong:\n  it(\"The 'toBeCloseTo' matcher is for precision math comparison\", function() {\n    var pi = 3.1415926,\n      e = 2.78;\n\n    expect(pi).not.toBeCloseTo(e, 2);\n    expect(pi).toBeCloseTo(e, 0);\n  });", "createdAt": "2015-11-10T07:49:05Z", "updatedAt": "2015-11-30T20:05:57Z", "closedAt": "2015-11-30T20:05:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lavie", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lavie", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-30T20:05:57Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nPlease open an issue or pull request for the documentation about what in particular seems incorrect about the description.\nThanks for using jasmine! Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 969, "url": "https://github.com/jasmine/jasmine/issues/969", "title": "Feature: mock timezone in fake clock", "contents": "It would be useful to be able to mock the timezone in the mock clock in a similiar way to https://github.com/Jimbly/timezone-mock or https://github.com/plaa/TimeShift-js\nWe already use the jasmine clock everywhere and now we will have one test that is using a different mocking framework so we can mock timezones.", "createdAt": "2015-11-10T09:11:42Z", "updatedAt": "2018-10-04T06:39:27Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "lukeapage", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "lukeapage", "company": "@SaxoBank"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mkprajeen", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-13T21:36:53Z", "contents": "That sounds like an interesting feature. I would be happy to review a pull request that implements this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mkprajeen", "authorAssociation": "NONE", "createdAt": "2018-10-04T06:39:27Z", "contents": "I am looking for this feature. It will be very use full feature.\n-Prajeen", "reactions_count": 0, "reactions_data": []}], "reactions_count": 23, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "CONFUSED"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 971, "url": "https://github.com/jasmine/jasmine/issues/971", "title": "Is there a possibility in jasmine not to override messages from passed expects?", "contents": "I am using in my project protractor for my e2e tests with jasmine2 as framework. I am using as well the libraries jasmine2-custom-message and protractor-jasmine2-html-reporter.\nI have realised that the message from passed expects would be overridden with the word: Passed.\nAfter a little research I realised that the file that is actually overridden this message is the following:\nnode_modules/protractor/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js\nSpecifically the function:\ngetJasmineRequireObj().buildExpectationResult = function () {\n    function buildExpectationResult(options) {\n        var messageFormatter = options.messageFormatter || function () {\n                },\n            stackFormatter = options.stackFormatter || function () {\n                };\n\n        var result = {\n            matcherName: options.matcherName,\n            message: message(),\n            stack: stack(),\n            passed: options.passed\n        };\n\n        if (!result.passed) {\n            result.expected = options.expected;\n            result.actual = options.actual;\n        }\n\n        return result;\n\n        function message() {\n            if (options.passed) {\n                return 'Passed.';\n            } else if (options.message) {\n                return options.message;\n            } else if (options.error) {\n                return messageFormatter(options.error);\n            }\n            return '';\n        }\n\n        function stack() {\n            if (options.passed) {\n                return '';\n            }\n\n            var error = options.error;\n            if (!error) {\n                try {\n                    throw new Error(message());\n                } catch (e) {\n                    error = e;\n                }\n            }\n            return stackFormatter(error);\n        }\n    }\n\n    return buildExpectationResult;\n};\nI wonder if there is a way to override this function (buildExpectationResult), for example in protractor config file. I have already tried that by adding in protractor config file the following.\nonPrepare: function () {\n    jasmine.buildExpectationResult = function () {\n        function buildExpectationResult(options) {\n            var messageFormatter = options.messageFormatter || function () {\n                    },\n                stackFormatter = options.stackFormatter || function () {\n                    };\n\n            return {\n                matcherName: options.matcherName,\n                expected: options.expected,\n                actual: options.actual,\n                message: message(),\n                stack: stack(),\n                passed: options.passed\n            };\n\n            function message() {\n                if (options.passed && !options.message) {\n                    return 'Passed.';\n                } else if (options.message) {\n                    return options.message;\n                } else if (options.error) {\n                    return messageFormatter(options.error);\n                }\n                return \"\";\n            }\n\n            function stack() {\n                if (options.passed) {\n                    return \"\";\n                }\n\n                var error = options.error;\n                if (!error) {\n                    try {\n                        throw new Error(message());\n                    } catch (e) {\n                        error = e;\n                    }\n                }\n                return stackFormatter(error);\n            }\n        }\n\n        return buildExpectationResult;\n    };\n}\nBut that is not working.\nIs there any other way of overriding jasmine functions?", "createdAt": "2015-11-11T15:27:07Z", "updatedAt": "2015-11-13T22:29:01Z", "closedAt": "2015-11-13T22:29:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lynchblue", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lynchblue", "company": "comSysto"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "lynchblue", "authorAssociation": "NONE", "createdAt": "2015-11-13T09:56:13Z", "contents": "I have created a pull request modifying the logic of populating expectation messages. What I do it's very simple, if the expectation has a message we populate this message regardless of the expectation failed or passed.\nI find it very useful for using it in reports in combination with meaningful expectation messages provided for example by jasmine2-custom-message .\nThe pull request can be found in the following link:\n#972", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-13T22:29:01Z", "contents": "A matcher doesn't know whether or not it has been called in conjunction with .not, so it always needs to provide a failure message. The message will assume that the current state is in correct, because that is when messages are shown to the user. If we were to change this behavior the message for:\nexpect(1).toEqual(1);\nwould be: \"Expected 1 not to equal 1\" which is not what is actually in the expectation. In order to reduce confusion, the message is changed to \"Passed\".\nThis is not functionality we'd really be interested in changing, as the use case for showing passing expectations seems dubious at best.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 974, "url": "https://github.com/jasmine/jasmine/issues/974", "title": "Add command line option to run only a subset of the tests", "contents": "It could be useful to have options to filter the tests to be run.  Something like these flags supported by mocha:\n-g, --grep                     only run tests matching \n-f, --fgrep                     only run tests containing", "createdAt": "2015-11-14T22:21:57Z", "updatedAt": "2015-11-30T20:23:02Z", "closedAt": "2015-11-30T20:23:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ggarber", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ggarber", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-30T20:23:02Z", "contents": "Are you using node, ruby, python, or something else to run the tests? The core of jasmine doesn't provide a command line interface, so this issue probably belongs in a different repo.\nThat said, jasmine-npm does provide a --filter= option for specifying which tests to run.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 975, "url": "https://github.com/jasmine/jasmine/issues/975", "title": "restore method for a spy", "contents": "I had a look at two following issues, both of them are closed, however I have an example which I believe would benefit from having a restore method (which would bring it back to its original fn).\n#683\n#236\nPlease have a look at the following code and comments (assume it's requirejs + marionette):\ndescribe(\"MyController\", function () {\n    \"use strict\";\n\n    var MyController;\n\n    beforeAll(function (done) {\n        require([\"path/to/my.controller\"], function (Controller) {\n            MyController = Controller;\n            done();\n        });\n    });\n\n    it(\"should be defined\", function () {\n        expect(MyController).toBeDefined();\n    });\n\n    describe(\"instance\", function () {\n\n        var controller;\n\n        beforeEach(function () {\n            controller = new MyController();\n            // assume that the controller uses\n            // this.listenTo to register an event handler\n        });\n\n        afterEach(function () {\n            controller.destroy();\n            // this destroy unbinds registered event handlers\n        });\n\n        it(\"should be defined\", function () {\n            expect(controller).toBeDefined();\n        });\n\n        describe(\"method\", function () {\n\n            describe(\"onProcessError\", function () {\n\n                it(\"should call destroy\", function () {\n                    spyOn(controller, \"destroy\").and.callFake(function () {\n                        console.log(\"spy called\"); \n                        // triggers twice\n                        // so the registered handlers are not unbinded\n                    });\n                    controller.onProcessError();\n                    expect(controller.destroy).toHaveBeenCalled();\n                    // controller.destroy.restore(); \n                    // it would cause the console.log to trigger only once\n                    // and the handlers would be removed as usual\n                    // but it's quite fragile, you might forget about it\n                });\n\n            });\n\n        });\n\n    });\n\n});\n\nI can see two workarounds of the problem described above:\n\ncallThrough (which would cause destroy to be called twice in the following example, I believe it's unnecessary and might cause problems if internal implementation of given library does throw an error in such case),\nrearrange describe/it statements and create an instance in one it statement and use callThrough to destroy it as usual\n\nBoth of these unfortunately do not fit the way I'm arranging the specs. I wasn't able to find any other solution despite going through the docs. I could use sinon, but I'd rather not add any additional  dependencies, jasmine is great enough and only this edge case bothers me. Do you have any suggestions?", "createdAt": "2015-11-17T09:54:29Z", "updatedAt": "2015-12-01T15:10:45Z", "closedAt": "2015-12-01T15:10:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "emilos", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "emilos", "company": "@buxlabs "}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 976, "url": "https://github.com/jasmine/jasmine/issues/976", "title": "Jasmine Adds additional Object( inside Object( in 2.0+", "contents": "I have a method returning\n{ name: \"FUBAR -X\", property: \"fubar\", parser: { display: 'Fubar', icon: 'icon-x-fubar', parse: 'parse-fn', factory: 'test' } }\n\nAnd I try to verify this behavior with:\nexpect(method).toEqual({ name: \"FUBAR -X\", property: \"fubar\", parser: { display: 'Fubar', icon: 'icon-x-fubar', parse: 'parse-fn', factory: 'test' } });\n\nHowever Jasmine outputs the following:\nExpected Object({ name: 'FUBAR -X', property: 'fubar', parser: ({ display: 'Fubar', icon: 'icon-x-fubar', parse: 'parse-fn', factory: 'test' }) }) \nto equal \nObject({ name: 'FUBAR -X', property: 'fubar', parser: Object({ display: 'Fubar', icon: 'icon-x-fubar', parse: 'parse-fn', factory: 'test' }) }).\n\nAs you can see, it has added an additional Object( in the expected part.\nIf I use angular.equals or JSON.stringify on both it works, but I would prefer to use toEqual.\nIn 1.3 it was possible just to use isEqual", "createdAt": "2015-11-17T14:24:43Z", "updatedAt": "2016-09-28T00:54:12Z", "closedAt": "2016-09-28T00:53:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CThuleHansen", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "CThuleHansen", "company": "Aarhus University"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-17T17:27:45Z", "contents": "It looks like the parse key in your parser object is actually different between the two (parse-fn vs. Xparse-fn and that is what is causing the mismatch.\nThe Object( at the beginning of the object output is the name of the constructor used to create the object. In the case where nothing is there, I believe that is because jasmine is unable to determine the name of the constructor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "CThuleHansen", "authorAssociation": "NONE", "createdAt": "2015-11-17T18:05:54Z", "contents": "Ahh sorry, the Xparse-fn was a leftover because I wanted to make sure which came first in the error message. I have tested it without Xparse-fn - and it fails.\nI have updated my issue description, sorry for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-17T22:02:23Z", "contents": "Ah ok. In that case it sounds like the parser object that is being returned is not using the object constructor. In Jasmine 2.0 we are comparing the constructor used to create the objects when determining whether they are equal, to assist in debugging the failures, the pretty printer also now shows the name of the constructor.\nIt looks like the parser object in the expectation is being constructed as a bare object, but jasmine is unable to determine a name for the object actually being returned.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-28T00:54:12Z", "contents": "Closing due to inactivity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 977, "url": "https://github.com/jasmine/jasmine/issues/977", "title": "Fail a test if no expectations were made", "contents": "Is there anything built-in to jasmine to fail a test if no expectations were made in it?\nIf not, would it make sense to request such a feature? Thanks.", "createdAt": "2015-11-18T00:27:21Z", "updatedAt": "2016-05-23T21:02:12Z", "closedAt": "2015-11-30T22:00:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alecxe", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alecxe", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "foklepoint", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-11-30T22:00:16Z", "contents": "Jasmine does not have a way to fail a given test if no expectations are made during its run. The number of expectations (passed and failed) are sent to reporters for use in reporting.\nThis isn't something we're looking to have as there are legitimate reasons why a spec without expectations might be desired.\nThanks for using jasmine! Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "foklepoint", "authorAssociation": "NONE", "createdAt": "2016-05-23T20:41:16Z", "contents": "Just curious @slackersoft, under what scenario would it make sense for a test without any expectations to pass, be useful? I guess it kinda makes sense during development phase of the test.\nAlso maybe instead of failing, would it makes more sense to emit a warning?", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 978, "url": "https://github.com/jasmine/jasmine/issues/978", "title": "Passing parameters from Spec to Reporter", "contents": "Hello,\nI've been working on a custom reporter that I use from Node. I need the reporter to display more details than are returned in the specResult object from a spec. For example, my spec looks like this:\nspec\nit(\"should return parameter values\", function(done) {\n    expect(true).toBe(true);\n    this.parameter2 = 'anotherValue';\n    done();\n}, { parameter1:'paramValue' });\n\nreporter\nthis.specDone = function(result) {\n  var parameter1 = null; // how do I get result.parameter1\n  var parameter2 = null; // how do I get result.parameter2\n\n  ...\n}\n\nI cannot figure out how to pass additional information from a spec to a reporter. In addition to the properties that are currently returned with result (i.e. description, fullName, passedExpectations, failedExpectations, and status), I'd like add two other properties: properties and result. I'm not having any luck in accomplishing this though.\nThank you to the community for any assistance that can be provided. I personally have the opinion that this would be a valuable addition to the Jasmine in general.", "createdAt": "2015-11-18T12:05:12Z", "updatedAt": "2015-12-01T00:50:02Z", "closedAt": "2015-12-01T00:50:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paranoid-android", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "paranoid-android", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-01T00:50:02Z", "contents": "There is no way to pass arbitrary meta data from a spec to reporters. This doesn't sound like something that we're looking to add to the core of jasmine either, so I'm going to close this. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 979, "url": "https://github.com/jasmine/jasmine/issues/979", "title": "Documentation outdated", "contents": "The documentation example specifies an onComplete callback, however, when you do that and run the tests, jasmine complains that it's been deprecated. Docs should probably be updated to reflect new API?", "createdAt": "2015-11-19T18:56:47Z", "updatedAt": "2015-12-09T23:16:34Z", "closedAt": "2015-12-09T23:16:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adamreisnz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "adamreisnz", "company": "Hello Club Ltd"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T23:16:34Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 981, "url": "https://github.com/jasmine/jasmine/issues/981", "title": "Documentation should reflect that toContain can do substring matching", "contents": "The documentation for Jasmine states\n\nThe 'toContain' matcher is for finding an item in an Array\n\nIn practice it also works for matching substrings. (ie. expect('qwerty').toContain('we')) as mentioned by @slackersoft in #738 . If this is an intended feature, I would recommend that it be included in the documentation. Alternatively, if it's not intended and may go away in a future release I would recommend adding a caveat to the docs reflecting that.\nLet me know which way the collaborators lean on this and I'd be happy to submit a PR.", "createdAt": "2015-11-25T20:52:23Z", "updatedAt": "2016-08-23T02:22:09Z", "closedAt": "2015-12-09T23:20:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ryanwilsonperkin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ryanwilsonperkin", "company": "@waveaccounting"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T23:20:51Z", "contents": "According to the specs for contains substring matching is expected to work.\nI would be happy to review a pull request over at the jasmine documentation github repository.\nI'm going to close this issue as it relates to the documentation and not jasmine itself. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ryanwilsonperkin", "authorAssociation": "NONE", "createdAt": "2016-08-23T02:22:09Z", "contents": "@slackersoft after finding an old email pointing to this thread, I finally got around to adding this support.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 982, "url": "https://github.com/jasmine/jasmine/issues/982", "title": "Link \"this list\" does not work on wiki", "contents": "On site:\nhttps://github.com/jasmine/jasmine/wiki/A-simple-project\nlink does not work.\n404 error is returned.", "createdAt": "2015-11-26T21:05:12Z", "updatedAt": "2015-12-09T23:27:17Z", "closedAt": "2015-12-09T23:27:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Ziemowit", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Ziemowit", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Ziemowit", "authorAssociation": "NONE", "createdAt": "2015-11-26T21:06:58Z", "contents": "Linkt \"downloads page\". also does not work on this site => http://pivotal.github.io/jasmine/#section-Downloads", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T23:27:17Z", "contents": "Thanks for the head up. I've update the download links I could find in the wiki. The wiki is deprecated and falling out of date, so I wouldn't rely on it too heavily.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 983, "url": "https://github.com/jasmine/jasmine/issues/983", "title": "setParams Functionality", "contents": "I suggest adding the following to SpyStrategy:\nthis.setParams = function(obj) {\nplan = function () {\nvar index;\nfor (index = 0; index < arguments.length; index++) {\nobj['arg' + index] = arguments[index];\n}\n};\nreturn getSpy();\n};\nThe method is called as follows:\nvar myObj = {};\nspyOn(xxx, 'yyy').and.setParams(myObj);\nafter the method under test runs and calls xxx.yyy(passedArg0, passedArg1)\nmyObj would look like { arg0: passedArg0, arg1: passedArg1 }\nIt is especially handy when testing anonymous functions. i.e.\nxxx.yyy(function () { ... }) With the existing jasmine code I have to write\nspyOn(xxx, 'yyy').and.callFake(function (param) { myMethod = param; }); in order write the unit test for the anonymous function.\nThoughts?", "createdAt": "2015-11-26T22:36:05Z", "updatedAt": "2016-09-27T01:03:28Z", "closedAt": "2016-09-27T01:03:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "RALifeCoach", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "RALifeCoach", "company": "Looking"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-10T22:44:57Z", "contents": "Jasmine spies save all of the arguments for each invokation by default. So, in your example, you should be able to check the same things with:\n// args is an array of all the arguments\nxxx.yyy.calls.mostRecent().args\nor in an expectation:\nexpect(xxx.yyy).toHaveBeenCalledWith(foo, bar, baz);\nGiven this, it is unclear to me how your proposed setParams would be different.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RALifeCoach", "authorAssociation": "NONE", "createdAt": "2015-12-10T23:01:04Z", "contents": "I want to save an argument into a variable. Is there a way to do that\nwithout a callFake?\nOn Dec 10, 2015 5:45 PM, \"Gregg Van Hove\" notifications@github.com wrote:\n\nJasmine spies save all of the arguments for each invokation by default.\nSo, in your example, you should be able to check the same things with:\n// args is an array of all the argumentsxxx.yyy.calls.mostRecent().args\nor in an expectation:\nexpect(xxx.yyy).toHaveBeenCalledWith(foo, bar, baz);\nGiven this, it is unclear to me how your proposed setParams would be\ndifferent.\n\u2014\nReply to this email directly or view it on GitHub\n#983 (comment).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-01-06T23:34:54Z", "contents": "Using calls.mostRecent().args or calls.argsFor(2) to get the list of arguments for only a specific call to the fake should be more reliable that you're getting the correct args. Getting myMethod set like this as in your earlier example would look something like:\nvar myMethod = xxx.yyy.calls.mostRecent().args[0];\nIt seems like this should solve the same problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T01:03:28Z", "contents": "Closing due to inactivity", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 984, "url": "https://github.com/jasmine/jasmine/issues/984", "title": "Get the current Spec", "contents": "I've not managed to spot an issue/feature request for this, but I'd really really like to be able to get the current spec from within a running test. this is normally undefined at the start of a test, and would fit the bill perfectly for my use case.\nIn my tests I'm typically auto-generating some DOM, and I'll use the ID of the spec or the description of the spec to populate some elements that I can then quiz later. This saves me hard coding everything which I prefer but I'm having to do this for each spec definition and then have to maintain the numbers adding new ones which is a pain:\nvar spec1 = it(\"The First Spec\", function() {\n    var spec = spec1; // Can now consume spec\n});\n\nvar spec2 = it(\"The Second Spec\", function() {\n    var spec = spec2; // I've had a number of times where this was spec1 accidentally... :(\n});\n\nIdeally I'd like something like\nit(\"The Third Spec\", function() {\n  var spec = this;\n});", "createdAt": "2015-11-27T10:26:03Z", "updatedAt": "2016-01-05T22:59:38Z", "closedAt": "2016-01-05T22:59:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "IPWright83", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "IPWright83", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-01-05T22:59:38Z", "contents": "this actually should always be defined in specs in jasmine. In 1.x it was the actual instance of the Spec object that was running, but this leaked out other data that we did feel that users should need. In 2.0 we changed it so that the this is an empty object that is passed through to all of the beforeEachs, to the it and the afterEachs. beforeAll and afterAll should also have a this that cascades down to child specs and suites.\nGiven the issue you're trying to solve, I would actually recommend that you use a single container element (the default jasmine html runner provides a div with the id jasmine_content for this kind of thing) that is cleaned out between specs (I would recommend in beforeEach instead of afterEach so you can inspect it when you have a failing spec that you're focussing on). If you're using a different runner, you should also be able to create a different element that you can use for your tests. Doing it this way and cleaning up, also ensures that your specs/implementations don't accidentally use the DOM that is for a different spec.\nThis isn't something we're likely to change at this point, especially since it would require changing the meaning of this in specs.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 985, "url": "https://github.com/jasmine/jasmine/issues/985", "title": "Karma clock test pollution", "contents": "This is similar to a previous issue:\n#790\nBut it seems to be a little more nuanced. I believe the previous issue was solved because the following does work:\n  describe(\"clock pollution\", function() {\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      setTimeout(function() {\n        jasmine.clock().uninstall()\n        done()\n      }, 2000)\n      jasmine.clock().tick(2001)\n    })\n\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      setTimeout(function() {\n        jasmine.clock().uninstall()\n        done()\n      }, 2000)\n      jasmine.clock().tick(2001)\n    })\n  })\nBut check out the following example when I use promises. I'm using the popular Q library:\n  describe(\"clock pollution\", function() {\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      Q.delay(2000)\n        .then(function() {\n          jasmine.clock().uninstall()\n          done()\n        })\n      jasmine.clock().tick(2001)\n    })\n\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      Q.delay(2000)\n        .then(function() {\n          jasmine.clock().uninstall()\n          done()\n        })\n      jasmine.clock().tick(2001)\n    })\n  })\nI get this weird error:\n    clock pollution\n      \u2713 async with clock\n      \u2717 async with clock\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n\nThe clocks definitely seem to be polluting each other somehow.\nJust for sanity, I tried this one:\n  function delay(ms) {\n    return new Promise(function(resolve, reject) {\n      setTimeout(resolve, ms)\n    })\n  }\n\n  describe(\"clock pollution\", function() {\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      delay(2000)\n        .then(function() {\n          jasmine.clock().uninstall()\n          done()\n        })\n      jasmine.clock().tick(2001)\n    })\n\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      delay(2000)\n        .then(function() {\n          jasmine.clock().uninstall()\n          done()\n        })\n      jasmine.clock().tick(2001)\n    })\n  })\nAnd it worked! Argh!! Wtf?!", "createdAt": "2015-12-02T22:30:51Z", "updatedAt": "2016-10-14T16:38:48Z", "closedAt": "2016-10-14T16:38:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ccorcos", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "ccorcos", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}, {"login": "iKBAHT", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "ccorcos", "authorAssociation": "NONE", "createdAt": "2015-12-02T22:49:57Z", "contents": "Well apparently I didnt know how Q.delay works.\nhttps://github.com/kriskowal/q/blob/v1/q.js#L1849\nStill not working though:\n  describe(\"clock pollution\", function() {\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      Q.delay({}, 2000)\n        .then(function() {\n          jasmine.clock().uninstall()\n          done()\n        })\n      jasmine.clock().tick(2001)\n    })\n\n    it(\"async with clock\", function(done) {\n      jasmine.clock().install()\n      Q.delay({}, 2000)\n        .then(function() {\n          jasmine.clock().uninstall()\n          done()\n        })\n      jasmine.clock().tick(2001)\n    })\n  })", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-02T23:06:27Z", "contents": "Given that it is working with just setTimeout and es6 Promises, it sounds like it's an issue with how Q is going about resolving the promises when using delay, and not jasmine's clock itself. If you find something that we could change in jasmine to make this work, I'd be happy to review a pull request.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ccorcos", "authorAssociation": "NONE", "createdAt": "2015-12-03T00:06:34Z", "contents": "I have an example coming up", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ccorcos", "authorAssociation": "NONE", "createdAt": "2015-12-03T00:09:23Z", "contents": "@slackersoft I created a repo demonstrating this issue:\nhttps://github.com/ccorcos/jasmine-promise-issue\nI'm not using Q and only using promises. You'll see that the test pass individually, but fail when they're run together -- I'm assuming this is due to some pollution of the clocks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2015-12-03T06:44:00Z", "contents": "@ccorcos The problem with calling done synchronously from within a Q promise callback is that it causes the next unit test to run from inside the current iteration of Q's global flush loop. In effect, all of that loop's state is leaked from one test to the next. I don't completely understand why that breaks the tests in your example but I've seen it cause a lot of other problems. Not least of which is that Q's .then() and related methods behave differently if the flush loop is running when they're called.\nI suggest never calling done directly from a Q promise callback. Always wrap it in a setTimeout, and you'll save yourself all kinds of trouble.\nI haven't had a chance to give the tests at https://github.com/ccorcos/jasmine-promise-issue more than a brief glance but it looks like they're doing a lot more than the Q tests are. Are you sure none of the tests manipulate the clock (or do anything else interesting) after calling done?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ccorcos", "authorAssociation": "NONE", "createdAt": "2015-12-03T21:03:57Z", "contents": "In the example I gave, I'm not using Q at all, so I had to add a couple helpers myself. Its as minimal a reproduction I could come up with. I couldnt reproduce the issue with simpler example. The example I gave consists of running a fetch (returning a promise), and then retrying if that request times out. Its pretty simple. But I think recusively using promises is causing some issues...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T23:11:56Z", "contents": "I'm not able to reproduce the issue with the code you've provided. The spec you have that retries always fails because the Promise calls its callbacks asynchronously so it hasn't actually made the second window.fetch call at the point where it is expected.\nAfter debugging a similar issue in jasmine's own tests, it looks to me like this is related to having specs that think they are (or might be) async, but actually execute synchronously. This is similar to what @sgravrock was mentioning, but isn't necessarily due only to Q.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "iKBAHT", "authorAssociation": "NONE", "createdAt": "2016-02-02T14:06:49Z", "contents": "I have the same problem, but with es6-promise polyfill library. I found that problem appear because jasmine done function call from .then function, and it run next test case, while library doesn't clean up it stack.\nI think it's jasmine problem. To fix it jasmine must run next test case asynchronously.\nTemporary fix look like this:\ndescribe('test', function () {\n    var myPromiseFunction;\n    var _resolve;\n    var _reject;\n\n    beforeEach(function () {\n      jasmine.clock().install();\n      myPromiseFunction = () => {\n        return new Promise((resolve, reject) => {\n          _resolve = resolve;\n          _reject = reject;\n        });\n      }\n    });\n\n    it('1', function(done) {\n      myPromiseFunction().then(() => {\n        // expects\n        jasmine.clock().uninstall();\n        setTimeout(done, 1);\n      });\n      runAllPromises();\n      _resolve({\n         // data\n      });\n      jasmine.clock().tick(1);\n    });\n\n    it('2', function (done) {\n      myPromiseFunction().then(() => {\n        // expects\n        jasmine.clock().uninstall();\n        setTimeout(done, 1);\n      });\n      runAllPromises();\n      _reject({\n         // data\n      });\n      jasmine.clock().tick(1);\n    });\n});\nIdea is to call done in setTimeout, as said @slackersoft , but before need to uninstall jasmine clock.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 987, "url": "https://github.com/jasmine/jasmine/issues/987", "title": "Failing to execute tests using text scripts (Knockout Templates)", "contents": "I've been struggling with this for a little while now and can't figure it out. I've got some jasmine tests that seem to run fine under the following situations:\n\nRunning through wallaby.js in Visual Studio\nRunning through Karma\n\nIf however I run them through a SpecRunner.html then they fail. I've limited the problem down to the Knockout templates that I'm using, not being loaded for some reason through the SpecRunner. So what I'm doing is loading a Knockout custom component, via a synchronous call to go grab the content:\n<script id=\"Summary\" type=\"text/html\"> \n    <div class='divider'></div>\n    <div class='camera-button'>\n        <div class='camera-circle'></div>\n        <div class='camera-image'></div>\n    </div>\n</script>\n\n<!-- This is the Details Tab for a Card -->\n<script id=\"Details\" type=\"text/html\">\n    <div id=\"details-tab\" class=\"details-tab tab-pane active\" data-bind=\"component: 'instance-table'\"></div>\n</script>\n\n<div data-bind=\"attr: { id: 'detail_' + id() }\">\n    <div class=\"detail-card-container\"></div>    \n        <ul class='nav nav-tabs'>\n            <li data-bind='css: { active: $data.template() === \"Summary\"}'><a data-toggle='tab' data-bind='click: tabClick'>Summary</a></li>\n            <li data-bind='css: { active: $data.template() === \"Details\"}'><a data-toggle='tab' data-bind='click: tabClick'>Details</a></li>\n        </ul>\n\n        <div class='tab-content' data-bind='template: { name: template }'></div>\n    </div>\n</div>\n\nSo here the last div with the template binding is causing the problem, taking it out fixes my issue, but doesn't help me produce a correct test. Using the following view model:\nvar vm = { \n   template: ko.observable(\"Summary\")\n};\n\nWhen I apply the Knockout bindings to the DOM (which has loaded this custom component) it seems to fail.\n\nError: Unable to process binding \"component: function (){return { name:componentName} }\"\nMessage: Unable to process binding \"template: function (){return { name:template} }\"\nMessage: Cannot find template with ID Summary\n\nSo it looks like the script isn't being loaded for some reason, but I can't understand why the problem only manifests itself when using the SpecRunner.", "createdAt": "2015-12-08T14:24:11Z", "updatedAt": "2015-12-08T14:51:41Z", "closedAt": "2015-12-08T14:51:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "IPWright83", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "IPWright83", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "IPWright83", "authorAssociation": "NONE", "createdAt": "2015-12-08T14:51:41Z", "contents": "Seems that actually the problem was about selecting $(\"body\") too early on in the page lifecycle.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 988, "url": "https://github.com/jasmine/jasmine/issues/988", "title": "Call Done twice? Docs on async inconclusive", "contents": "Hi all!\nUdacity front-end program student here and a bunch of us have been confused by the role of the done function.\nSpecifically, say we use done in a beforeEach. If the accompanying it block doesn't have any async action, do we still need to call it within that it block for a spec to be considered complete?\nSeveral of us have noticed a spec still works if we don't pass in the done function (in the case that it block has no async).\nHowever the documentation language and example seems to indicate that we do need to call done twice in this circumstance. link", "createdAt": "2015-12-09T08:52:20Z", "updatedAt": "2015-12-09T22:49:28Z", "closedAt": "2015-12-09T18:02:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ndrewr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ndrewr", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T18:02:06Z", "contents": "The done function is used to make a specific function (beforeEach, afterEach, it, beforeAll, afterAll) in your suite complete asynchronously. The purpose of this is to keep the knowledge of the async logic contained in that function, so others can execute synchronously as usual. So even if a beforeEach receives a done callback, an it in the same context should only need to if it is async as well.\nThe documentation is specifically trying to show an example of each type of function being async to show the possibilities. The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nClosing this. Thanks for using jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "ndrewr", "authorAssociation": "NONE", "createdAt": "2015-12-09T22:49:28Z", "contents": "Thank you @slackersoft , thats super clear!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 989, "url": "https://github.com/jasmine/jasmine/issues/989", "title": "How to setup a basic Javascript test using Jasmine 2.4.1 (standalone)?", "contents": "This is the first time I'm trying to write tests. I have installed jasmine 2.4.1 inside my project using bower:\nbower install jasmine --save\n\nI just can't figure out what to do next in order to setup specRunner.html. All the tutorials I found online are focused on previous versions of jasmine, which seem to have the specRunner.html file and a slightly different package structure. The install instructions I found on github are outdated, dating back to version 2.0.0. Also no luck on finding useful info on the github page. Sorry for posting such a basic question, but I just can't find a clear answer after so many hours of searching.\nWhat am I suposed to do next to get the most basic of tests running?", "createdAt": "2015-12-09T21:02:32Z", "updatedAt": "2015-12-10T08:23:06Z", "closedAt": "2015-12-09T22:30:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adrian-moisa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "adrian-moisa", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-09T22:30:28Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adrian-moisa", "authorAssociation": "NONE", "createdAt": "2015-12-10T08:22:26Z", "contents": "Finally found the solution (hooray, six hours lost). I was supposed to change jasmine-2.0.0 to jasmine-core. Ok, no problem with that, but at least this could have been mentioned inside README.md somewhere. Not to say that there's no clue where to put the specs scripts and sources. It may be obvious for anyone who used jasmine previously, but not to a newcomer. You know, usually when you open a library, the documentation has clear cut steps on how to proceed.\nSo enough complaining, here's what worked:\n<!doctype html>\n<html>\n    <head>\n        <title>Jasmine Spec Runner</title>\n        <link rel=\"stylesheet\" href=\"../libs/jasmine/lib/jasmine-core/jasmine.css\">\n    </head>\n    <body>\n        <script src=\"../libs/jasmine/lib/jasmine-core/jasmine.js\"></script>\n        <script src=\"../libs/jasmine/lib/jasmine-core/jasmine-html.js\"></script>\n        <script src=\"../libs/jasmine/lib/jasmine-core/boot.js\"></script>\n\n        <!-- include source files here... -->\n        <script src=\"src.js\"></script>\n\n        <!-- include spec files here... -->\n        <script src=\"test.js\"></script>\n    </body>\n</html>", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 991, "url": "https://github.com/jasmine/jasmine/issues/991", "title": "Jasmine spies do not preserve function arity", "contents": "Whether using spyOn to replace an object property whose value is a function, or using .and.callFake to delegate to a supplied function, the resulting spy always has arity (.length) of zero \u2014\u00a0even if the original function has arity of 1, 4, whatever.\nThis is irrelevant much of the time but becomes critical when testing libraries that check function arity. Two well-known examples:\n\nlibraries which check to see if a done param is defined, in order to determine whether to execute asynchronously. Jasmine itself does this, ironically.\nlibraries like Express which register \"error-handling middleware\" as being functions with arity 4 (as opposed to the usual 3 or less), and which execute those functions if a truthy value has been passed into a previously-supplied next function (or if an error was thrown during the execution of \"normal\" middleware).\n\nThe best spies which substitute for existing functions do so transparently, so that the library is not able to determine the difference between a spy and an original. Jasmine spies would be improved by matching the arity of their originals, reducing the possibility of the framework being tested exhibiting different behavior.", "createdAt": "2015-12-14T07:48:19Z", "updatedAt": "2016-09-28T17:52:46Z", "closedAt": "2016-09-28T17:52:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "glebec", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "glebec", "company": "@FullstackAcademy"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "kapke", "company": "@ScalaConsultants "}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T19:07:10Z", "contents": "I'm not sure how to create a function with a dynamic arity, but I would be happy to review a pull request that creates a spy with the arity of the original function passed in.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-18T21:53:36Z", "contents": "Creating a function with desired arity is possible in two ways:\n\nuse Function constructor which takes array of argument names and function body in string (generic but using function constructor is more or less like call to eval)\nin ES6 length property is configurable so it is possible in modern browsers and newer versions of node.js to use Object.defineProperty (checked on Firefox, Chrome, Edge and node.js 5.5, sadly IE 11 doesn't support that)\n\nI have an idea for solution. Probably I will open a pull request in few days.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 992, "url": "https://github.com/jasmine/jasmine/issues/992", "title": "new warnings in bluebird 3.0 and jasmine", "contents": "First, this isn't really jasmine's fault, so I understand if you don't think it should be fixed here.\nThis does seem to be the simplest place to fix it, and bluebird promises are popular...\nI can make a pull request for it, but don't want to go through the effort if it's likely to be rejected.\nBluebird has, in 3.0, added a warning flagging cases where a promise is created in a promise handler, but none is returned.\nThere's a more detailed explanation here .\nThis warning is triggered whenever promises are handled like this:\nit(\"should check the promises result\", function (done) {\n    returnsAPromise()\n    .then(function (res) {\n        expect(res).toBe(expectedResult);\n    })\n    .then(done, done.fail);\n});\nThe warning is easy to turn off, but I like the intent behind it so would like to keep it enabled.\nBut that means that I need to wrap done and done.fail in a function that returns null everywhere instead of .then(done, done.fail)\n.then(function () {\n    done();\n    return null;\n}, function (err) {\n    done.fail(err);\n    return null;\n})\nAlternatively, change jasmine so that the done and done.fail functions created in the QueueRunner always return null.\n  function once(fn) {\n    var called = false;\n    return function() {\n      if (!called) {\n        called = true;\n        fn();\n      }\n      return null;\n    };\n  }\n      next.fail = function() {\n        self.fail.apply(null, arguments);\n        return next();\n      };", "createdAt": "2015-12-15T01:32:11Z", "updatedAt": "2016-03-11T17:13:59Z", "closedAt": "2016-03-11T17:13:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "marneborn", "authorAssociation": "CONTRIBUTOR", "participants_count": 4, "participants_data": [{"login": "marneborn", "company": null}, {"login": "duzun", "company": "Limitlesslane LLC"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "JoshKaufman", "company": "Lifion by ADP"}], "comments_count": 4, "comments_data": [{"authorLogin": "duzun", "authorAssociation": "NONE", "createdAt": "2016-01-26T00:28:34Z", "contents": "Isn't it better (and easy) to add support for Promises to Jasmine?\nI found this library that works great: https://github.com/matthewjh/jasmine-promises\nBut I don't see any reason for not supoorting Promises dirrectly by Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-18T19:04:07Z", "contents": "My inclination is that done and done.fail are intended to not have a return value, so explicitly returning null feels weird. However, since one of the primary use cases for done is promises, I don't think it would fundamentally change how they work to have an explicit return that indicates that nothing further should happen.\nI'd be happy to review a pull request that causes both functions to return null.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JoshKaufman", "authorAssociation": "NONE", "createdAt": "2016-02-27T02:40:48Z", "contents": "@marneborn We are not creating a promise inside of the done function so I don't see why bluebird would show the warning.\nI got a simple test running it doesn't show the warning\nit('no bluebird warning', function(done) {\n  (new Promise(function(resolve, reject){\n    resolve('test')\n  })).then(function(value){\n    expect(value).toBe('test')\n  })\n  .then(done, done.fail);\n});\nWhen I create a nested promise and don't return anything I get the warning\nit('bluebird warning', function(done) {\n  Promise.resolve('test')\n  .then(function(value){\n    var nestedPromise = new Promise(function(resolve, reject){\n      resolve(true);\n   });\n    expect(value).toBe('test');\n  })\n  .then(done, done.fail);\n});\nI tried returning null from the done function as you suggested but it didn't change anything.\nmaybe I'm missing something simple here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marneborn", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-01T18:14:56Z", "contents": "@JoshKaufman,  this is all a bit convoluted, I'll try to explain it better. Bluebird complains if a promise is created within the context of a handler (.then(fullfillmentHandler, rejectionHandler)) and that handler returns undefined.\nHere's an example that shows what Bluebird is trying to flag.\nThere is a promise create within the context of fn0 (in fn3) but the return value is undefined because I \"forgot\" the return in fn2. This is an easy bug to introduce and hard to track down.\nBPromise.resolve(1)\n    .then(fn0);\n\nfunction fn0 (val) {\n    return fn1(2);\n}\n\nfunction fn1 (val) {\n    return fn2(val);\n}\n\nfunction fn2 (val) {\n    fn3(val);\n}\n\nfunction fn3 (val) {\n    return BPromise.resolve(val);\n}\nThis all means that you need more than one thing that uses a promise in the jasmine Queue to see the problem.\nHere's a simple example.\ndescribe('suite for bluebird warnings', function() {\n    beforeEach(function (done) {\n        BPromise.resolve()\n            .finally(done, done.fail);\n    });\n\n    it(\"create a promise test\", function (done) {\n        BPromise.resolve()\n            .finally(done, done.fail);\n    });\n});\nThe promise in the test is created within the context of the done from the beforeEach, so the beforeEach's done needs to return null;\nAs an example to hopefully clarify that point, bluebird doesn't complain in this example.\ndescribe('suite for bluebird warnings', function() {\n    beforeEach(function (done) {\n        BPromise.resolve()\n            .finally(\n                function () { done(); return null; },\n                function () { done.fail(); return null; }\n            );\n    });\n\n    it(\"create a promise test\", function (done) {\n        BPromise.resolve()\n            .finally(done, done.fail);\n    });\nThe failure mechanism is a message being written to console.warn. This message has a stack trace so can get long. The test itself is OK, it's just that all of my console reporter output scrolls off the screen because of of the console.warn's from bluebird.\nThis is how I'm testing in the pull request I created.\n  describe(\"a promise was created in a handler but none were returned from it\", function () {\n    // http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-none-were-returned-from-it\n\n    it(\"shouldn't complain about non-returned promises\", function (outerDone) {\n      spyOn(console, 'warn');\n\n      env.describe('suite for bluebird warnings', function() {\n        env.it(\"create a promise test\", function (done) {\n          BPromise.resolve()\n            .then(function () {})\n            .finally(done, done.fail);\n        });\n        env.it(\"create another promise test\", function (done) {\n          BPromise.resolve()\n            .then(function () {})\n            .finally(done, done.fail);\n        });\n        env.it(\"check if console.log was called\", function () {\n          expect(console.warn).not.toHaveBeenCalled();\n          outerDone();\n        });\n      });\n      env.execute();\n    });\n  });", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 993, "url": "https://github.com/jasmine/jasmine/issues/993", "title": "jasmine examples fails with npm@3", "contents": "As the transitive dependency structure for npm 3 is different than with npm 2, the cli jasmine examples command fails with:\nError: ENOENT: no such file or directory, scandir '.../node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/example/node_example/spec/helpers/jasmine_examples'", "createdAt": "2015-12-16T05:33:27Z", "updatedAt": "2015-12-16T05:39:53Z", "closedAt": "2015-12-16T05:39:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danielsiwiec", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "danielsiwiec", "company": "Slalom"}], "comments_count": 1, "comments_data": [{"authorLogin": "danielsiwiec", "authorAssociation": "NONE", "createdAt": "2015-12-16T05:39:53Z", "contents": "Submitted in jasmine/jasmine-npm#63", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 994, "url": "https://github.com/jasmine/jasmine/issues/994", "title": "documentation for toHaveBeenCalledTimes", "contents": "Hi\ntoHaveBeenCalledTimes was recently introduced in jasmine, nice addition btw. It would be nice if it was documented here.", "createdAt": "2015-12-16T16:54:12Z", "updatedAt": "2016-01-14T15:36:12Z", "closedAt": "2015-12-16T20:26:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piuccio", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "piuccio", "company": "@en-japan-air "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "florimon", "company": null}, {"login": "aligneddev", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-16T20:26:04Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nClosing this in favor of an issue directly in the docs. Thanks for using jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "florimon", "authorAssociation": "NONE", "createdAt": "2016-01-05T13:44:41Z", "contents": "It is not possible to call toHaveBeenCalledTimes() with the value 0 (zero). This is because the implementation uses \"if (!expected)\" to test whether a value was supplied for the 'expected' argument.\n(I know the same can be accomplished with the stanza \"expect(...).not.toHaveBeenCalled()\" but I feel like toHaveBeenCalledTimes() should support this too).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-14T15:35:13Z", "contents": "I have fixed the 0 issue with a test in Pull request #1015.\nI'll add some documentation as well.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 996, "url": "https://github.com/jasmine/jasmine/issues/996", "title": "spyOn report error: `Expected a spy, but got Function`", "contents": "code:\n    let methods = {\n        reportError() {},\n        reportOk(which) {}\n    };\n\n    beforeAll((done) => {\n        spyOn(methods, 'reportError').and.callThrough();\n        smartSprite(options.source, options.output, options.retina).then((data) => {\n            methods.reportOk('sprite');\n            return generateStyle(options.output, options.stylePath, data[0], true, {\n                retina: options.retina\n            });\n        }, (err) => {\n            methods.reportError();\n            done(err);\n        }).then((data) => {\n            methods.reportOk('style');\n            done();\n        }, (err) => {\n            methods.reportError();\n            done(err);\n        });\n    });\n\n    it('should generate sprite successfully.', function() {\n        expect(methods.reportError).not.toHaveBeenCalled();\n        expect(methods.reportOk).toHaveBeenCalledWith('sprite');\n    });\njasmine's version is 'v2.4.1'. And error info is Error: Expected a spy, but got Function.", "createdAt": "2015-12-20T07:30:40Z", "updatedAt": "2017-04-24T21:16:02Z", "closedAt": "2015-12-20T08:40:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "creeperyang", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "creeperyang", "company": "baidu"}, {"login": "reddynr", "company": "Unisystech Consulting INC"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "creeperyang", "authorAssociation": "NONE", "createdAt": "2015-12-20T08:40:01Z", "contents": "After minutes, I found I miss spyOn(methods, 'reportOk').and.callThrough(); \ud83d\ude02", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "reddynr", "authorAssociation": "NONE", "createdAt": "2017-04-21T17:17:08Z", "contents": "I am writing karma test case to used spy.. getting below error\nExpected spy offerCancelled to have been called.\nhere is my code.\nvar spy;\nbeforeEach(function () {\nspy=spyOn($scope,'offerCancelled');\n$scope.offerCancelled=function(){\n        };\n\nit('ModelCtrl Verification..', function (done) {\nconsole.log(compiledElement);\nexpect($scope.offerCancelled).toHaveBeenCalled();\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-24T21:16:02Z", "contents": "You'll see the error message that \"Expected a spy, but got Function\" when you use one of the matchers that expects to be used with a spy (like toHaveBeenCalled()), but the object you pass in isn't actually a spy.\nIn your case, it looks like you're overwriting the spy with another function immediately after you add it. Next time, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 997, "url": "https://github.com/jasmine/jasmine/issues/997", "title": "jasmine.json docs", "contents": "I am trying to wrap jasmine into my project. The project consists of many backends and parts, so it needs to have a rather specific folder structure.\ntest/\n  - php/\n    - ... PHP Testing stuff ...\n  - node/\n    - jasmine.json\n    - tests/\n\nCan I use jasmine.json to tell it:\n\nWhere my tests are?\nHow I want them reported?\nThat I use ES2015/Babel?\n\nKind regards, Ingwie", "createdAt": "2015-12-20T22:08:48Z", "updatedAt": "2016-02-19T13:59:24Z", "closedAt": "2015-12-21T06:11:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "IngwiePhoenix", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "IngwiePhoenix", "company": null}, {"login": "urish", "company": "Uri Shaked"}], "comments_count": 2, "comments_data": [{"authorLogin": "IngwiePhoenix", "authorAssociation": "NONE", "createdAt": "2015-12-21T06:11:47Z", "contents": "Found it. I need to RTFM more...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "urish", "authorAssociation": "NONE", "createdAt": "2016-02-19T13:59:24Z", "contents": "You can find the code that parses jasmine.json here:\nhttps://github.com/jasmine/jasmine-npm/blob/793b7bb4f3ba4f420c7183b825ec477ebcf6eb52/lib/jasmine.js#L87", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 998, "url": "https://github.com/jasmine/jasmine/issues/998", "title": "How can I pass multiple capabilities via cmdline?", "contents": "I am trying something like -\n--capabilities[{browserName=chrome,chrome.chdomeOptions.mobileEmulation.deviceName='Apple iPhone 6'}]\nat the same time, I want my tests/methods to read the deviceName at runtime alike browser.params.browserName", "createdAt": "2015-12-21T11:26:36Z", "updatedAt": "2015-12-21T14:26:40Z", "closedAt": "2015-12-21T14:26:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "allspat", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "allspat", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-21T14:26:40Z", "contents": "I'm fairly certain this issue belongs on a different portion of your testing environment. No part of Jasmine even accepts a capabilities argument. Is this maybe a protractor feature?\nThanks for using Jasmine. Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 999, "url": "https://github.com/jasmine/jasmine/issues/999", "title": "Problem trying test window object is defined on async load", "contents": "I'm creating a test to check if a window object exists after async load, but I can't detect the object. Below I'm putting my case:\nGoogleMapsLoader.js\n// Google async initializer needs global function, so we use $window\nangular.module('myApp')\n  .service('GoogleMapsLoader', ['$window', '$q',\n    function($window, $q) {\n\n      var deferred = $q.defer();\n\n      // Load Google map API script\n      function loadScript() {\n        // Use global document since Angular's $document is weak\n        var script = document.createElement('script');\n        script.src = '//maps.googleapis.com/maps/api/js?libraries=geometry&callback=initMap';\n\n        document.body.appendChild(script);\n      }\n\n      // Script loaded callback, send resolve\n      $window.initMap = function() {\n        deferred.resolve();\n      };\n\n      loadScript();\n\n      return {\n        init: function() {\n          return deferred.promise;\n        }\n      };\n    }\n  ]);\nspec.js\ndescribe('Controller: Ctrl', function(){\n\n  var Ctrl, serviceGoogleMapsLoader, w;\n\n  beforeEach(module('myApp'));\n\n  beforeEach(inject(function ($controller, GoogleMapsLoader) {\n    w                       = window;\n    serviceGoogleMapsLoader = GoogleMapsLoader;\n\n    Ctrl = $controller('Ctrl', {\n      GoogleMapsLoader: serviceGoogleMapsLoader\n    });\n  }));\n\n  it('window.google should be defined', function (done) {\n    serviceGoogleMapsLoader.then(function(){\n        expect(w.google).toBeDefined();\n        done();\n    });\n  });\n\n});", "createdAt": "2015-12-21T14:58:02Z", "updatedAt": "2016-02-16T23:07:29Z", "closedAt": "2016-02-16T23:07:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "obetomuniz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "obetomuniz", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T23:07:29Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1001, "url": "https://github.com/jasmine/jasmine/issues/1001", "title": "No stand alone zip file in latest 2.4.1 release", "contents": "Unlike other releases, 2.4.1 does not have a jasmin-standalone-2.4.1.zip file.\nNewbies like me might have some problems to start :(\nhttps://github.com/jasmine/jasmine/releases\nAre there any instructions on how to make a standalone from the source?", "createdAt": "2015-12-22T15:26:25Z", "updatedAt": "2015-12-23T02:26:06Z", "closedAt": "2015-12-22T22:11:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nacho4d", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nacho4d", "company": "IBM"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2015-12-22T22:11:29Z", "contents": "Sorry about that, I totally forgot to upload it. It should be there now.\nThanks for the find!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nacho4d", "authorAssociation": "NONE", "createdAt": "2015-12-23T02:26:06Z", "contents": "Awesome! .Thank you very much", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1002, "url": "https://github.com/jasmine/jasmine/issues/1002", "title": "TypeError: 'undefined' is not a constructor", "contents": "Running the jasmine-gem with Jasmine 2.4.0\nWith a setup similar to the following (in CoffeeScript):\nclass @Base\n  constructor : ( @options ) ->\n    @_settings = $.extend( {}, @constructor._defaults, @options )\n\nclass @SubClass extends Base\n  @_defaults :\n    test : true\n\n  constructor : ->\n    super\n\n    # ...\nAnd when instantiating the child class in any test (e.g. new SubClass), I get the following error:\nTypeError: 'undefined' is not a constructor (evaluating 'new SubClass')\n\nThe tests were working fine before with this setup:\nclass @Base\n  _settings : {}\n\n  constructor : ( @options ) -> @init?()\n\n  _setDefaults : ( defaults ) ->\n    @_settings = $.extend( defaults, @options )\n\nclass @SubClass extends Base\n  init : ->\n    @_setDefaults\n      test : true\nFunctionally the code works anywhere else. However, for some reason, with the new setup of Base, the tests will always fail with that error, no matter how much I change it around. I've isolated it, updated to the latest Jasmine, and tried as much as I can absolutely think of. I've exhausted all the options I can think of, so I thought I'd drop an issue here and see.\nAny help at all would be greatly appreciated! \ud83d\ude04", "createdAt": "2015-12-23T00:08:41Z", "updatedAt": "2016-09-14T23:20:56Z", "closedAt": "2016-09-14T23:20:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "drewbarontini", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "drewbarontini", "company": "@Differential "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 9, "comments_data": [{"authorLogin": "drewbarontini", "authorAssociation": "NONE", "createdAt": "2015-12-24T15:06:28Z", "contents": "As an update to this, I was able to create tests in a completely different testing library and it worked fine, so I'm still assuming there's something Jasmine doesn't like.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T23:18:38Z", "contents": "I don't really know much CoffeeScript, but one thing I'm seeing different between your two examples is that the SubClass in the second example doesn't actually define its own constructor, while the first example defines a constructor that looks like it simply defers to super. I don't know if this is what is actually causing your issues or not, but Jasmine doesn't concern itself with how you generate the javascript that it is testing.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewbarontini", "authorAssociation": "NONE", "createdAt": "2016-02-17T11:43:29Z", "contents": "They are both valid CoffeeScript examples. The second example worked fine in Jasmine. The first throws an error.\nAs I said, though, I've tested this in Mocha and it works completely fine. Jasmine throws the error for the first example. I tested it in another testing framework to confirm that it wasn't the code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T18:48:46Z", "contents": "Hmmm, I'm not seeing any errors when I run this spec:\nclass @WorkingBase\n  constructor : ( @options ) ->\n    @_settings = $.extend( {}, @constructor._defaults, @options )\n\nclass @WorkingSubClass extends WorkingBase\n  @_defaults :\n    test : true\n\n  constructor : ->\n    super\n\nclass @BrokenBase\n  _settings : {}\n\n  constructor : ( @options ) -> @init?()\n\n  _setDefaults : ( defaults ) ->\n    @_settings = $.extend( defaults, @options )\n\nclass @BrokenSubClass extends BrokenBase\n  init : ->\n    @_setDefaults\n      test : true\n\nit \"working\", () ->\n  expect(new WorkingSubClass()).not.toBeUndefined()\n\nit \"broken\", () ->\n  expect(new BrokenSubClass()).not.toBeUndefined()\nI'm running it through coffee script before loading the page, so maybe since I'm only loading a single javascript file it works fine, but that would seem like it isn't necessarily Jasmine's fault other than maybe not waiting for something to load before executing the suite. Are you using the Rails asset pipeline or some other mechanism to generate the javascript on the fly?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewbarontini", "authorAssociation": "NONE", "createdAt": "2016-02-24T11:45:27Z", "contents": "I'm just using Gulp to build the JS files and then the Jasmine gem to glob and look for the JS files.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-11T17:57:08Z", "contents": "Hmm. Does the example I pasted in work in your setup? It seems to be working for me with current Jasmine versions. If it isn't working for you, it might be something else in your setup. If it does work, but your real code doesn't, we may need a more accurate example of a spec that isn't working to try to diagnose what is going on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewbarontini", "authorAssociation": "NONE", "createdAt": "2016-03-22T13:39:14Z", "contents": "@slackersoft Sorry for the delayed response. I'm having trouble getting everything in my setup completely cleared out so that I can test things with your isolated example. I'll report back once I get this tested out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drewbarontini", "authorAssociation": "NONE", "createdAt": "2016-05-11T12:03:33Z", "contents": "@slackersoft Apologies for the delays here. Running your spec does indeed work within the setup, so I'm assuming it's something within the code, but I'm not sure what or how to diagnose it. Any help would be greatly appreciated. Here is the Base class implementation and an example class that extends it, followed by an example spec that isn't working when run in isolation:\nclass @Base\n  constructor : ( @options ) ->\n    @_settings = $.extend( {}, @constructor._defaults, @options )\nclass @AutoDuplicateInput extends Base\n  @_defaults         :\n    $container       : $( '.js-autoDuplicateInput-container' )\n    $element         : $( '.js-autoDuplicateInput' )\n    classInvalid     : 'is-invalid'\n    classValid       : 'is-valid'\n    dataAttrCloned   : 'cloned'\n    dataAttrValidate : 'validate'\n    onDuplicate      : null\n    onInvalid        : null\n    onValid          : null\n\n  constructor : ->\n    super\n\n    # ...\n\n# ...\ndescribe 'AutoDuplicateInput', ->\n  beforeEach ->\n    loadFixtures( 'auto_duplicate_input.html' )\n\n    @selector              = '.js-autoDuplicateInput'\n    @element               = $( @selector )\n    @container             = $( '.js-autoDuplicateInput-container' )\n    @clonedDataAttribute   = 'cloned'\n    @validateDataAttribute = 'validate'\n    @invalidClass          = 'is-invalid'\n    @validClass            = 'is-valid'\n\n    @adi = new AutoDuplicateInput\n\n  # ...\nIt's erroring out on the new AutoDuplicateInput instantiation, which clearly has something to do with extending Base into the class. The CoffeeScript converts to valid JavaScript, so I'm not sure what the issue is. And, interestingly enough, the spec for the Base class passes fine:\ndescribe 'Base', ->\n\n  beforeEach ->\n    class ExtendsBase extends Base\n\n    @extendsBase = new ExtendsBase\n\n  it 'should cause extended classes to be an instance of itself', ->\n    expect( @extendsBase instanceof Base ).toBeTruthy()\nAny help would be greatly appreciated. Thanks for your time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T23:20:56Z", "contents": "Unfortunately, I don't really know much about coffeescript to help diagnose your error. As you've said it appears to be somewhere in your code and not Jasmine itself, I'm going to close this issue.\nPlease update here or open a new issue if you find something that Jasmine seems to be doing incorrectly.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1003, "url": "https://github.com/jasmine/jasmine/issues/1003", "title": "Seeing tests run multiple times, intermittently.", "contents": "Sometimes when running my tests everything in the describe section gets executed or atleast displayed multiple times on the page. I've just used the info from https://angular.io/docs/ts/latest/testing/first-app-tests.html to set it all up.\nThis is the TypeScript\nimport {Hero} from '../app/hero';\ndescribe('Hero', () => {\n    it('has name given in the constructor', () => {\n        let hero = new Hero(1, 'Super Cat');\n        expect(hero.name).toEqual('Super Cat');\n    });\n    it('has id given in the constructor', () => {\n        let hero = new Hero(1, 'Super Cat');\n        expect(hero.id).toEqual(1);\n    });\n    it('has name given in the constructor', () => {\n        let hero = new Hero(1, 'Super Cat', 'Claw Scratch');\n        expect(hero.power).toEqual('Claw Scratch');\n    });\n    it('has alter ego given in the constructor', () => {\n        let hero = new Hero(1, 'Super Cat', 'Claw Scratch', 'Feline');\n        expect(hero.alterEgo).toEqual('Feline');\n    });\n})\nWhich spits out this JavaScript\nSystem.register(['../app/hero'], function(exports_1) {\n    var hero_1;\n    return {\n        setters:[\n            function (hero_1_1) {\n                hero_1 = hero_1_1;\n            }],\n        execute: function() {\n            describe('Hero', function () {\n                it('has name given in the constructor', function () {\n                    var hero = new hero_1.Hero(1, 'Super Cat');\n                    expect(hero.name).toEqual('Super Cat');\n                });\n                it('has id given in the constructor', function () {\n                    var hero = new hero_1.Hero(1, 'Super Cat');\n                    expect(hero.id).toEqual(1);\n                });\n                it('has name given in the constructor', function () {\n                    var hero = new hero_1.Hero(1, 'Super Cat', 'Claw Scratch');\n                    expect(hero.power).toEqual('Claw Scratch');\n                });\n                it('has alter ego given in the constructor', function () {\n                    var hero = new hero_1.Hero(1, 'Super Cat', 'Claw Scratch', 'Feline');\n                    expect(hero.alterEgo).toEqual('Feline');\n                });\n            });\n        }\n    }\n});\n//# sourceMappingURL=hero.spec.js.map\nThis is my unit-test.html\n<html>\n\n<head>\n    <title>1st Jasmine Tests</title>\n    <link rel=\"stylesheet\" href=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.css\">\n    <script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.js\"></script>\n    <script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js\"></script>\n    <script src=\"../node_modules/jasmine-core/lib/jasmine-core/boot.js\"></script>\n</head>\n\n<body>\n    <script src=\"../node_modules/systemjs/dist/system.src.js\"></script>\n    <script>\n    // #2. Configure systemjs to use the .js extension\n    //     for imports from the app folder\n    System.config({\n        packages: {\n            'out': {\n                'app': {\n                    defaultExtension: 'js'\n                }\n            }\n        }\n    });\n    // #3. Import the spec file explicitly\n    System.import('out/unit-tests/hero.spec')\n        // #4. wait for all imports to load ...\n        //     then re-execute `window.onload` which\n        //     triggers the Jasmine test-runner start\n        //     or explain what went wrong\n        .then(window.onload)\n        .catch(console.error.bind(console));\n    </script>\n</body>\n\n</html>\nThis is what I see:\n\nIt does not always show the tests multiple times.\nBug or my error?\nThanks\nS", "createdAt": "2015-12-23T10:02:49Z", "updatedAt": "2016-09-28T21:35:09Z", "closedAt": "2016-09-28T21:35:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Steveiwonder", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "Steveiwonder", "company": null}, {"login": "TheMysticMan", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "verdammelt", "company": null}, {"login": "stphivos", "company": "@Shiphero "}, {"login": "karelwgonzalez", "company": null}, {"login": "pliski", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "TheMysticMan", "authorAssociation": "NONE", "createdAt": "2016-01-27T20:59:15Z", "contents": "@Steveiwonder. I had the same problem. After moving all scripts to the body instead of the head this problem is gone. I know it feels hacky but it gets the job done.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-22T20:06:42Z", "contents": "Based on the screenshot where it says it has executed 8 specs, but 12 are listed, it looks like when you're seeing this Jasmine is executing twice. My best guess is that somehow the page gets loaded with your spec file already included (browser back button maybe?). This causes the file to register its specs with Jasmine. Jasmine then executes on window.onload, running your 4 specs. Additionally around onload time, your script in body gets executed which loads the spec file again (adding the specs again), then re-runs Jasmine when that finishes causing Jasmine to run the specs (twice this time), and since the HTML reporter just appends to its summary section, the first run's summary sticks around.\nI'm inclined to think that Jasmine is just doing what the page is telling it to in this case, but I'd be happy to look into it if this is still an issue.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "verdammelt", "authorAssociation": "NONE", "createdAt": "2016-03-16T18:57:14Z", "contents": "Thanks @TheMysticMan this helped me too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stphivos", "authorAssociation": "NONE", "createdAt": "2016-04-20T23:23:08Z", "contents": "Still an issue for me, tried @TheMysticMan's suggestion but no luck. I'm also following that tutorial, reached up to the next section pipe-testing and get duplicated specs in the report. When I hit refresh sometimes I get 7 specs, some times I get 10 specs. Any ideas how to overcome this?", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "karelwgonzalez", "authorAssociation": "NONE", "createdAt": "2016-05-20T19:12:47Z", "contents": "I'm having this issue as well, with @TheMysticMan's solution not working. What's weird, is that it's only doing it with one of my .spec files, and not all of them.\nAlso, something is causing my custom matchers to not load when tests are being run occasionally (~30% of the time or so).\nIt seems that @slackersoft is correct in that jasmine is running spec's multiple times. I find it strange that it is selectively running spec's multiple times, though.\nHas anyone found anything on this yet?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pliski", "authorAssociation": "NONE", "createdAt": "2016-06-12T01:03:41Z", "contents": "As describe here, this behavior appear when some of the spec are loaded before the browser raises the window load event.\nThe subsequent window.onload cause the spec to be executed multiple times.\nThe solution suggested in the stackoverflow question above (remove .then(window.onload)), doesn't work for the spec that doesn't get to be loaded before the browser raises the window load event.\nOne (ugly) workaround that I find is to retard the execution of the spec like this:\nsetTimeout(function(){ \n    Promise.all([\n        System.import('app/1st.spec'),\n        System.import('app/my-uppercase.pipe.spec')\n    ])   \n    .then(window.onload)\n    .catch(console.error.bind(console));\n}, 1000);", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-28T21:35:09Z", "contents": "The default boot.js file that Jasmine uses starts execution of your suite when the window.onload event is fired. If your specs are not all loaded (or at least not guaranteed to be loaded) at the time the window.onload event fires, you'll want to either [provide your own boot.js](https://jasmine.github.io/http://jasmine.github.io/edge/custom_boot.html] or otherwise stop the default onload and start your suite once you've confirmed that all of your specs are loaded.\nI'm inclined to think that this isn't really an issue that Jasmine can solve. This is one of the reasons we've split out the things in boot.js so they can be overridden in situations like this. I'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1004, "url": "https://github.com/jasmine/jasmine/issues/1004", "title": "Test results not reported when teardown is undefined", "contents": "When the teardown function is undefined, the test result is not reported.\nFailed tests are missed.\ndescribe('not reported suite', function(){\n  afterEach(undefined);\n  it('failing test case', function(){\n    expect(false).toBe(true);\n  });\n});\nIn this case it there might be an obvious error, but jasmine should still treat it as an error.\nThe following example is not that obvious:\ndescribe('not reported suite', function(){\n  var tearDown;\n  beforeEach(function(){\n    tearDown = function(){}\n  });\n\n  afterEach(tearDown);\n\n  it('failing test case', function(){\n    expect(false).toBe(true);\n  })\n});\nThe tests itself run and report their failure, however the teardown execution throws an exception that is caught and not handled, while discarding the test results.\nSee plnkr.", "createdAt": "2015-12-23T16:29:13Z", "updatedAt": "2017-02-15T23:19:54Z", "closedAt": "2017-02-15T23:19:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "palortoff", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "palortoff", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T23:11:01Z", "contents": "We would be happy to review a pull request that made the functions that receive functions from the user (beforeEach, afterEach, beforeAll, afterAll, it, and describe) throw an error during suite construction that tells the user that something is wrong.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1005, "url": "https://github.com/jasmine/jasmine/issues/1005", "title": "Mocking 2nd-level modules", "contents": "I want to test a CDN helper function. It is super basic and does only one thing that makes it tricky to test - at least I think so.\nvar CDN = require(\"./GlobalConfig\").config.CDN;\nvar url = require(\"url\");\nmodule.exports = function MakeCDNLink(path) {\n    path = path || \"/\";\n    if(CDN.enable) {\n        return url.format({\n            protocol: \"http\",\n            host:     CDN.domain,\n            pathname: path\n        });\n    } else {\n        return CDN.baseUrl+path;\n    }\n}\nThis GlobalConfig module parses a YAML file and puts it's values into a .config property. This property is used to see if we should use a local endpoint (/cdn/...) or remote (http://cdn.example.com/...).\nHow can I mock this config? I want to test specific behaviors, but not needing to change my current config just to get that thing right.", "createdAt": "2015-12-24T02:25:57Z", "updatedAt": "2016-02-16T23:11:54Z", "closedAt": "2016-02-16T23:11:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "IngwiePhoenix", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "IngwiePhoenix", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T23:11:54Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1007, "url": "https://github.com/jasmine/jasmine/issues/1007", "title": "spy always returns 0 for the length", "contents": "I need to spy on a callback function which can be called in 2 different ways depending on the number of parameters. Unfortunately the spy function returned by spyOn always returns 0 as the value of its length property regardless of the number of parameters of the original callback. Is there a way to work around this behavior?", "createdAt": "2015-12-25T01:06:28Z", "updatedAt": "2016-02-16T23:25:48Z", "closedAt": "2016-02-16T23:25:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mfeingold", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mfeingold", "company": "Hill 30"}, {"login": "gpiress", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "gpiress", "authorAssociation": "NONE", "createdAt": "2015-12-30T01:08:45Z", "contents": "So as I see it, you want to know which version of the callback your test has called, is that right?\nIf that is the case, you need to create a spy on the callback method and then you make an expect statement with that callback call, as in:\nexpect(methodSpied.calls.mostRecent().args.length).toEqual(2);,\nas per the docs (in the Other tracking properties section).\nThe code above checks the last call of the spied method with calls.mostRecent(), which is an object that has an args property, that holds the arguments of the last call to the spied method.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mfeingold", "authorAssociation": "NONE", "createdAt": "2015-12-30T01:55:23Z", "contents": "On Tue, Dec 29, 2015 at 7:09 PM, gpiress notifications@github.com wrote:\n\nSo as I see it, you want to know which version of the callback your test\nhas called, is that right?\nNot quite. As the spy to the method I need to spy on is built, the\nsignature of the spy differs from the signature of the original method, The\noriginal method (function) has its length property set to 2 or 3 depending\non the use case, while the spy always has its length property set to 0. The\ncode under testing relies on the correct value of this property and because\nof this it breaks.\n\n\nMichael Feingold, President\n401 Huehl RD, Suite 2A,\nNorthbrook, IL 60062\nEmail mfeingold@hill30.com", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-16T23:25:47Z", "contents": "It looks like this is a duplicate of #991. I'm going to close this as a duplicate. As mentioned in that thread we would be happy to review a pull request to fix this, but I'm not sure what it would look like.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1010, "url": "https://github.com/jasmine/jasmine/issues/1010", "title": "Cleaning up spies after a spy was replaced and then re-spied upon leaves the wrong function in place", "contents": "If one does the following:\n...\nsomewhere in the code being tested\n    myObject.myFunction = function one() {};\n...\nit('does something wonderful', function() {\n    spyOn(myObject, 'myFunction');\n    myObject.myFunction = function two() {}\n    spyOn(myObject, 'myFunction');\n});\nwhen the cleanup is done, function two() will be left on myObject, rather than the expected one().\nThis is ultimately due to SpyRegistry.js's #clearSpies function iterating through the spies in the \"wrong\" order.\n(pull request on its way)", "createdAt": "2016-01-04T02:59:48Z", "updatedAt": "2016-02-16T23:42:08Z", "closedAt": "2016-02-16T23:42:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bodawei", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "bodawei", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1012, "url": "https://github.com/jasmine/jasmine/issues/1012", "title": "How do i spy on javascript DOM methods like getBoundingClientRect", "contents": "", "createdAt": "2016-01-11T09:26:30Z", "updatedAt": "2016-02-17T00:23:33Z", "closedAt": "2016-02-17T00:23:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "amit1911", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "amit1911", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T00:23:33Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using Jasmine! Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1013, "url": "https://github.com/jasmine/jasmine/issues/1013", "title": "GreaterThanOrEqual and LessThanOrEqual matchers", "contents": "I found myself in the situation many times to check that a number is greater than or equal than another number, or less than or equal to it, so I had to write 2 custom matchers for this.\nI've noticed searching on Google, that writing \"Jasmine greater\", it suggests as first option \"Jasmine greater or equal to\", so it seems I'm not the only one to need something like that.\nI would propose to add those 2 default matchers in the core. I can also offer my contribution to the project for it.", "createdAt": "2016-01-11T22:15:21Z", "updatedAt": "2016-02-17T23:46:15Z", "closedAt": "2016-02-17T23:46:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rullopat", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "rullopat", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T00:24:29Z", "contents": "We would be happy to review a pull request to implement these matchers", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rullopat", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-17T23:39:36Z", "contents": "I just did a pull request with the new matchers and the the related spec tests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1014, "url": "https://github.com/jasmine/jasmine/issues/1014", "title": "In console.log, add the current test", "contents": "It is sometimes difficult to know what console.log relate to.\nWould it be possible to add the current test into each console.log?", "createdAt": "2016-01-12T14:02:58Z", "updatedAt": "2016-01-12T22:16:53Z", "closedAt": "2016-01-12T17:39:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jehon", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jehon", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-01-12T17:39:45Z", "contents": "console.log is provided by the outer environment being used to execute jasmine (e.g. the browser or nodejs), and not by jasmine itself. You might be able to write your own wrapper for use in your own tests, but this isn't something we're looking to have in jasmine right now.\nClosing this. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jehon", "authorAssociation": "NONE", "createdAt": "2016-01-12T21:37:20Z", "contents": "I use something to replace console.log by my own function, that something I can do. Could you show me how to get (in that global function) some informations about the running test?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-01-12T22:16:53Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1016, "url": "https://github.com/jasmine/jasmine/issues/1016", "title": "There could be a better error message if non-funtion is passed to spy.and.callFake()", "contents": "I often change from\nspy.and.returnValue(someExistingVariable);\n\nto\nspy.and.callFake(() => someVariableThatCanBeAssignedLater);\n\nand I sometimes forget to pass a function:\n// Triggers error\nspy.and.callFake(someVariableThatCanBeAssignedLater);\n\nThe error that is returned does not tell me immediately what have I done wrong:\nTypeError: 'undefined' is not a function (evaluating 'plan.apply(this, arguments)')\n\nThere could be a better error message that would hint the user that what has been passed to callFake is not a function.", "createdAt": "2016-01-13T11:37:28Z", "updatedAt": "2016-08-15T16:34:53Z", "closedAt": "2016-08-15T16:34:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jrencz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jrencz", "company": "Wonga"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T00:40:54Z", "contents": "We would be happy to review a pull request that throws an error if callFake is called with a non-function argument.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1017, "url": "https://github.com/jasmine/jasmine/issues/1017", "title": "Improving handling of parse errors in test files (running with Node)", "contents": "I use jasmine with Node like this:\njasmine.loadConfig({\n    'spec_dir': 'app',\n    'spec_files': [\n        '**/**/test.{js,jsx}',\n    ],\n});\n\nThen, if any of the test files has invalid syntax (possibly because of invalid babel config or anything), I get this stacktrace:\n/Users/mikolajdadela/code/lb-react-frontend/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:987\n      currentRunnable().addExpectationResult(false, {\n                       ^\n\nTypeError: Cannot read property 'addExpectationResult' of undefined\n    at Env.fail (/Users/mikolajdadela/code/lb-react-frontend/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:987:24)\n    at jasmineInterface.fail (/Users/mikolajdadela/code/lb-react-frontend/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:3423:23)\n    at process.<anonymous> (/Users/mikolajdadela/code/lb-react-frontend/jasmineTestSuite.js:20:5)\n    at emitOne (events.js:77:13)\n    at process.emit (events.js:169:7)\n    at process._fatalException (node.js:221:26)\n\nNote that it this big error report never actually mentions the file that caused the parse error.\nI'm currently using jasmine 2.4.1.", "createdAt": "2016-01-14T10:57:04Z", "updatedAt": "2017-04-12T20:40:46Z", "closedAt": "2017-04-11T19:03:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mik01aj", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mik01aj", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "dcbrwn", "company": null}, {"login": "csymeonides", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-18T23:32:56Z", "contents": "It looks like that error is coming from within the fail function, which is only intended for use while the suite is running. Do you have code that calls it when a parse error occurs? That could be causing this behavior.\nGiven the reason the error is occurring within Jasmine itself, the only thing we might want to change would be to make the message for the error indicate that fail was called in an invalid context, but that wouldn't really solve your problem directly.\nWe'd be happy to review a pull request to make fail throw a more distinctive error in this case, similar to that thrown for expect.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mik01aj", "authorAssociation": "NONE", "createdAt": "2016-02-19T10:39:02Z", "contents": "It looks like that error is coming from within the fail function, which is only intended for use while the suite is running.\n\nA ha! So now I know where it's coming from! That's what I do a few lines before:\nprocess.on('uncaughtException', function(err) {\n    fail('Uncaught exception in async code: ' + err + '\\n' + err.stack);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dcbrwn", "authorAssociation": "NONE", "createdAt": "2016-09-19T15:03:56Z", "contents": "A message for folks who went here from google: This thing also happens when you're forcing to fail before/after hooks outside of describe blocks (i.e. global hooks). So make sure to add correct error handling there and don't do something like this:\n// This beforeAll hook lies outside of any \"describe\" block and the function passed to it\n// will be executed before all tests.\nbeforeAll((done) =>\n  someAsyncAction().then(done, done.fail);\n});", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "HOORAY", "THUMBS_UP"]}, {"authorLogin": "csymeonides", "authorAssociation": "NONE", "createdAt": "2017-04-11T10:17:02Z", "contents": "Just to add to @dcbrwn's comment: if you want to set the window size upfront like I did, instead of a beforeAll you can use chromeOptions in your config.js as suggested here", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T18:58:17Z", "contents": "@dcbrwn, your issue should be fixed on master and in 2.5.1, now that Jasmine allows the global suite to have expectations. See #811.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "csymeonides", "authorAssociation": "NONE", "createdAt": "2017-04-12T11:07:47Z", "contents": "@slackersoft I'm not sure that's true. I'm using 2.5.2 and still getting the same error, so I had to get rid of my global beforeAll.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-12T20:40:45Z", "contents": "Hmm, I just tried this suite:\nbeforeAll(function(done) {\n  setTimeout(done.fail, 1000);\n});\n\nit('should be a thing', function() {\n  expect(true).toEqual(true);\n});\nAnd I'm seeing it report a global error in both 2.5.2 and edge, but fail with a timeout in 2.4.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1018, "url": "https://github.com/jasmine/jasmine/issues/1018", "title": "toHaveBeenCalledTimes doesn't work with 0", "contents": "florimon mentioned this problem in #994.\n\"It is not possible to call toHaveBeenCalledTimes() with the value 0 (zero). This is because the implementation uses \"if (!expected)\" to test whether a value was supplied for the 'expected' argument.\n(I know the same can be accomplished with the stanza \"expect(...).not.toHaveBeenCalled()\" but I feel like toHaveBeenCalledTimes() should support this too).\"", "createdAt": "2016-01-14T16:34:00Z", "updatedAt": "2016-02-17T18:35:03Z", "closedAt": "2016-02-17T18:35:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "aligneddev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-14T16:34:18Z", "contents": "I have fixed the 0 issue with a test in Pull request #1015.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T18:35:03Z", "contents": "Fixed with 342f0eb", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1019, "url": "https://github.com/jasmine/jasmine/issues/1019", "title": "StringPrettyPrinter throws TypeError when object has constructor with overridden toString method", "contents": "Test case:\ndescribe('any', function () {\n  it('any', function () {\n    var Class = function () {};\n\n    Class.toString = function () {\n      return '';\n    };\n\n    var a = {};\n    a.constructor = Class;\n    var b = { foo: 'bar' };\n\n    expect(a).toEqual(b);\n  });\n});\n\nResult:\nTypeError{message: ''null' is not an object (evaluating 'func.toString().match(/^\\s*function\\s*(\\w*)\\s*\\(/)[1]')', line: 157, sourceId: 211379424, sourceURL: 'http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js', stack: 'TypeError: 'null' is not an object (evaluating 'func.toString().match(/^\\s*function\\s*(\\w*)\\s*\\(/)[1]')\n    at http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?:157\n    at http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1791\n    at http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?:1714\n    at http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?:1831\n    at http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?:2705\n    at http://localhost:9876/absolute/Users/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?:1487\n\nHow to fix:\nAdd additional check to fnNameFor method: https://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine.js#L156\nj$.fnNameFor = function(func) {\n    return (func.name || (func.toString().match(/^\\s*function\\s*(\\w*)\\s*\\(/) || [])[1]) || '';\n  };", "createdAt": "2016-01-15T14:38:29Z", "updatedAt": "2016-08-15T22:51:43Z", "closedAt": "2016-08-15T22:51:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dmitryshimkin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dmitryshimkin", "company": "Backbase"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mbildner", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T00:49:28Z", "contents": "We would be happy to review a pull request that makes this change.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mbildner", "authorAssociation": "NONE", "createdAt": "2016-04-27T13:21:01Z", "contents": "@slackersoft anything else needed to merge this in?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1020, "url": "https://github.com/jasmine/jasmine/issues/1020", "title": "Set up auto-update for jsdelivr", "contents": "cdnjs doesn't offer the files necessary for the standalone runner  (trying to file an issue and need this to demonstrate on jsbin), but jsdelivr does. Their latest version of Jasmine is 2.0.0. They have an auto-update feature, instructions here:\nhttps://github.com/jsdelivr/jsdelivr\nThanks for the awesome lib!", "createdAt": "2016-01-16T15:37:27Z", "updatedAt": "2016-02-17T20:05:37Z", "closedAt": "2016-02-17T18:59:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "erquhart", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "erquhart", "company": "@netlify "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T18:59:02Z", "contents": "Based on the files listed on the cdnjs page for jasmine, it looks to me like all of the necessary files are hosted there, and it should be doing auto-updating with new releases. What files do you think are missing?\nI've also created a PR for jsdelivr (jsdelivr/jsdelivr#9829) to configure the auto-update for jasmine.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "erquhart", "authorAssociation": "NONE", "createdAt": "2016-02-17T20:05:26Z", "contents": "Awesome. I did eventually get it going. Jsdelivr should make it even easier, though. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1022, "url": "https://github.com/jasmine/jasmine/issues/1022", "title": "expect(\"1\").toEqual(1) fails", "contents": "In Javascript:\n1 == '1'\ntrue", "createdAt": "2016-01-18T20:31:28Z", "updatedAt": "2016-01-19T07:23:47Z", "closedAt": "2016-01-19T07:23:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fjanon", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fjanon", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-19T07:23:47Z", "contents": "The jasmine equality check is based off the of underscore.js isEqual method. If you want to define your own notion of equality, you can make a custom matcher.\nAlso worth noting:\n1 === '1'\nfalse\nThanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1023, "url": "https://github.com/jasmine/jasmine/issues/1023", "title": "selectively callthrough for spyOn", "contents": "I have a recursive function that i am testing and spying on\ni would like to call the function once to test and subsequent functions calls to stub\nso i tried to use callFake to intercept the parameters to see if it is the first call, of which i would call the actual function\nhowever, the spyOn will still spyOn the actual function call within the callFake and enter infinite loop\n// infinite loop\nvar testobj = {\n  testing: function(i){\n    console.log('inside', i)\n  }\n}\n\nspyOn(testobj, 'testing').and.callFake(function(i){\n  console.log(i)\n  if(isFirstCall(i)){\n    testobj.testing(0);  // this causes infinite loop as it is not ignored by the spy even though it is within the spy\n  } else {\n    fakeIt();\n  }\n});\ntestobj.testing(1);\nexpect(testobj.testing.calls.count()).toEqual(1)\n\nshould any calls to the spied function within the callFake itself be ignored?", "createdAt": "2016-01-19T03:50:35Z", "updatedAt": "2016-01-19T04:36:30Z", "closedAt": "2016-01-19T04:36:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "peonmodel", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "peonmodel", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "peonmodel", "authorAssociation": "NONE", "createdAt": "2016-01-19T04:36:30Z", "contents": "i realised i can create an un-spied version of the function to call to avoid the spy loop\nvar testfunc = testobj.testing.bind(testobj);\nspyOn(testobj, 'testing')\ntestfunc();  // doesnt trigger spy loop", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1024, "url": "https://github.com/jasmine/jasmine/issues/1024", "title": "testing custom matcher failure case", "contents": "Say I want to test the failure case of a custom matcher called toDoCustomMatchy\nAfter a bunch of fiddling I end up with this:\nit('fails and stuff', () => {\n  let expectationPassed, expectationMessage;\n\n  const expectation = expect(guy);\n\n  expectation.addExpectationResult = (pass,result) => {\n    expectationPassed = pass;\n    expectationMessage = result.message;\n  };\n\n  expectation.toDoCustomMatchy();\n\n  expect(expectationPassed).toEqual(false);\n  expect(expectationMessage).toMatch(/Expected guy to custom matchy/);\n});\nIs there a better way?", "createdAt": "2016-01-19T22:21:05Z", "updatedAt": "2016-02-17T00:53:17Z", "closedAt": "2016-02-17T00:53:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "atomanyih", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "atomanyih", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-19T22:24:53Z", "contents": "Take a look at how we test the core matchers: https://github.com/jasmine/jasmine/tree/master/spec/core/matchers", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "atomanyih", "authorAssociation": "NONE", "createdAt": "2016-01-19T22:58:11Z", "contents": "Do you mean unit test the compare method?\nmore like this?\nit('fails and stuff', () => {\n  const matcher = toDoCustomMatchy(jasmine.matcherUtils);\n\n  const {pass, message} = matcher.compare(guy);\n\n  expect(pass).toEqual(false);\n  expect(message).toMatch(/Expected guy to custom matchy/);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-17T00:53:17Z", "contents": "Yes, part of the reason for the syntax change for matchers with 2.0 is to better allow this type of testing.\nIn the future, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1025, "url": "https://github.com/jasmine/jasmine/issues/1025", "title": "Improve error messages", "contents": "Hi,\nSome errors are confusing ex: with spies, toThrow etc.\nEx:\nspyOn(obj.list)\n// No method name supplied\n\nIt's hard to figure out where is the error.\nSo I'm rewriting errors:\nEx\n\nto\n\nDo you have any suggestions?", "createdAt": "2016-01-20T13:28:52Z", "updatedAt": "2016-03-18T18:00:51Z", "closedAt": "2016-03-18T18:00:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dhoko", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "dhoko", "company": "\u00af\\_(\u30c4)_/\u00af"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1027, "url": "https://github.com/jasmine/jasmine/issues/1027", "title": "would be nice if the reporter can be passed as CLI arg", "contents": "For instance jasmine --reporter junit.\nOf course you need to define some convention for the npm module name of a supported reporter.", "createdAt": "2016-01-21T12:13:16Z", "updatedAt": "2018-01-26T18:59:17Z", "closedAt": "2018-01-26T18:59:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "timaschew", "authorAssociation": "NONE", "participants_count": 8, "participants_data": [{"login": "timaschew", "company": "@heremaps"}, {"login": "aMarCruz", "company": "BB-Soft"}, {"login": "floverdevel", "company": "NuGlif"}, {"login": "rochejul", "company": null}, {"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}, {"login": "mister-what", "company": "IBM"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "aMarCruz", "authorAssociation": "NONE", "createdAt": "2016-01-21T15:46:54Z", "contents": "absolutely +1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "floverdevel", "authorAssociation": "NONE", "createdAt": "2016-01-27T16:11:21Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rochejul", "authorAssociation": "NONE", "createdAt": "2016-07-08T06:15:53Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "agirorn", "authorAssociation": "NONE", "createdAt": "2017-01-31T09:52:11Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mister-what", "authorAssociation": "NONE", "createdAt": "2017-09-09T02:49:09Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-26T18:59:17Z", "contents": "The --reporter= arg has been added to jasmine-npm in the 3.0-features branch and will be released as part of the 3.0 release of Jasmine. The string provided will be passed directly to require() and the file is expected to export a constructor that can be newed up and passed in as a reporter to Jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["npm"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1028, "url": "https://github.com/jasmine/jasmine/issues/1028", "title": "Does fail function exist?", "contents": "Hi,\nI know there has been a lot of discussions over fail, this.fail and similar calls. What surprises me is that there is definitely a fail function (I can call 'fail(\"Fail the test\")' from inside \"it\" tests) and I can see it in the source code:\nfail: function() {\n  return env.fail.apply(env, arguments);\n},\n\nbut it is not documented and in some cases its existence is denied. What is the status for it? Is it an undocumented/unsupported feature? Is using it a good idea or it may be dropped at some future versions? So far I have seen it in Jasmine 2.2 and 2.4.1\nThanks,\nHajix", "createdAt": "2016-01-21T18:35:05Z", "updatedAt": "2016-01-21T20:53:33Z", "closedAt": "2016-01-21T20:53:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hajiz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hajiz", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-01-21T18:46:24Z", "contents": "Fail does exist in modern Jasmine.\nIt is currently undocumented because our docs are executed and will fail if\nwe call the fail method.\nThis is not ideal, and we are working to restructure our docs.\nThanks for using Jasmine!\nOn Thursday, January 21, 2016, Amir Hossein Hajizadeh <\nnotifications@github.com> wrote:\n\nHi,\nI know there has been a lot of discussions over fail, thisfail and similar\ncalls What surprises me is that there is definitely a fail function (I can\ncall 'fail(\"Fail the test\")' from inside \"it\" tests) and I can see it in\nthe source code:\nfail: function() {\nreturn envfailapply(env, arguments);\n},\nbut it is not documented and in some cases its existence is denied What is\nthe status for it? Is it an undocumented/unsupported feature? Is using it a\ngood idea or it may be dropped at some future versions? So far I have seen\nit in Jasmine 22 and 241\nThanks,\nHajix\n\u2014\nReply to this email directly or view it on GitHub\n#1028.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hajiz", "authorAssociation": "NONE", "createdAt": "2016-01-21T20:53:33Z", "contents": "Thank you Gerg :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1030, "url": "https://github.com/jasmine/jasmine/issues/1030", "title": "Ability to load tests dynamically and rerun jasmin/reporter", "contents": "I am currently trying to run jasmine tests from partials/ components, which are dynamically loaded via ajax. The idea is to have the corresponding reports appended to the Body (html-reporter) for each \u201cview\u201d, while avoiding the page-reload. I am able to run jasmine exactly once. Is there a way to load test suites via ajax and/or clear jasmines html reports/ unload jasmine or reload/reinitialize it when I load dynamic content?\nThanks.", "createdAt": "2016-01-28T12:06:18Z", "updatedAt": "2016-02-22T19:50:30Z", "closedAt": "2016-02-22T19:50:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "HansHammel", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "HansHammel", "company": "ITK-Solutions"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-22T19:50:29Z", "contents": "A Jasmine suite doesn't currently expect to be run more than once. If I'm understanding your situation correctly, you might be able to write your own boot.js that waits for all of your specs to load before telling Jasmine to start execution of the suite.\nIn the future, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1031, "url": "https://github.com/jasmine/jasmine/issues/1031", "title": "Notify reporters on errors when using catchExceptions/throwOnExpectationFailure", "contents": "If you set any of the below:\n  env.catchExceptions(false);\n  env.throwOnExpectationFailure(true);\nNo reporter is notified in case of failure. I would expect jasmineDone to be executed", "createdAt": "2016-01-28T17:22:57Z", "updatedAt": "2016-02-18T17:41:36Z", "closedAt": "2016-02-18T17:41:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adamziel", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "adamziel", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-18T17:41:36Z", "contents": "When you tell Jasmine catchExceptions(false) it doesn't handle any exceptions thrown during the run. The intention here is to get the exception to bubble all the way out to the browser for easier debugging of issues that jasmine might be inadvertently covering up, it isn't something you would want to permanently leave on in your suite for this exact reason.\nThis isn't something we're looking to change at this point in time, so I'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1032, "url": "https://github.com/jasmine/jasmine/issues/1032", "title": "Jasmine, TypeScript and spyOn", "contents": "Hi,\nI am migrating some tests from JavaScript to TypeScript and I have some issue with spyOn. I have tried\nspyOn(fooService, 'fooMethod').and.returnValue();\nbut it does not work, in the d.ts file the function is declare so I have tried to\njasmine.Spec.spyOn(fooService, 'fooMethod').and.returnValue();\nand it does not work as well, the transpiler says Property 'Spec' does not exist on type 'typeof jasmine'.\nHow can I use the spyOn method?\nThanks a lot for the attention.", "createdAt": "2016-01-29T14:21:08Z", "updatedAt": "2016-02-01T08:58:29Z", "closedAt": "2016-02-01T08:58:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "blackat", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "blackat", "company": null}, {"login": "JoseRoman", "company": "@Chatham"}], "comments_count": 4, "comments_data": [{"authorLogin": "JoseRoman", "authorAssociation": "NONE", "createdAt": "2016-01-29T14:30:01Z", "contents": "If Javascript will eventually be the code in production, why would you test Typescript directly?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "blackat", "authorAssociation": "NONE", "createdAt": "2016-01-29T14:59:26Z", "contents": "I am not tested TypeScript directly, I transpile ts to js and the run the test, but I would like to write test in ts.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JoseRoman", "authorAssociation": "NONE", "createdAt": "2016-01-30T01:34:31Z", "contents": "Oh OK. I have been writing the test in TS and then running them after transpiling too. Could you provide more details as of what TS Definition you are using? Is it the one from the DefinitelyTyped repo?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "blackat", "authorAssociation": "NONE", "createdAt": "2016-02-01T08:58:29Z", "contents": "Hi,\nthanks a lot for your help, may be I have found the problem: in pure JavaScript I have written something like:\nspyOn(myService, 'remove').and.returnValue()\nand I was working, no problems!\nMoving to TypeScript and transpiling I got the following error\nerror TS2346: Supplied parameters do not match any signature of call target.\n\nand I have thought was an issue with the spyOn and how it has been called, but actually it is an issue with the .returnValue() that, because of the type checking, requires now an argument as you can see from\nreturnValue(val: any): void;\nUnfortunately the transpiler does not point out at which column there is error (just the line and the column where the statement starts) and the IDE, at least in this case, does not highlight the error.\nThanks a lot anyway for your offer to help me, much appreciated \ud83d\ude09", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1033, "url": "https://github.com/jasmine/jasmine/issues/1033", "title": "How can I extend the spy API.", "contents": "Hi everyone,\ni am wondering, since i use promisses a lot. How can I extends the spy API to do something like this:\nsomeSpyObj.someSpyMethod.and.returnRejectPromise()\nA workaround is something like this:\nvar RejectPromise = function () { \n    return new Promise(function (resolve, reject) {\n        reject();\n    };\n}\n...\nsomeSpyObj.someSpyMethod.and.returnValue(RejectPromise());\n\nThanks,\nStefan", "createdAt": "2016-01-31T12:58:57Z", "updatedAt": "2016-02-22T20:09:06Z", "closedAt": "2016-02-22T20:09:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Cloud-Automation", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-22T20:09:06Z", "contents": "This looks like a duplicate of #720. We're looking at ways to allow a user to specify they're own SpyStrategy. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1034, "url": "https://github.com/jasmine/jasmine/issues/1034", "title": "Jasmine spec dependency", "contents": "In jasmine suite , if we have 10 specs , how can we arrange dependeny specs such that if any dependency specs are failed the jasmine should not execute other specs which has to be executed.\nIn testNG library which is used for java unit testing where we are using dependency groups or methods attribute on an @test annotation", "createdAt": "2016-02-01T12:47:47Z", "updatedAt": "2016-02-23T18:28:01Z", "closedAt": "2016-02-23T18:28:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vivekbrahmadandi", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vivekbrahmadandi", "company": "Wavelabs"}, {"login": "floverdevel", "company": "NuGlif"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "floverdevel", "authorAssociation": "NONE", "createdAt": "2016-02-13T03:47:21Z", "contents": "are you looking for something like this ?\njasmine --stop-on-failure=true\nhttp://jasmine.github.io/2.4/node.html#section-13", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T18:28:01Z", "contents": "Ideally, your tests shouldn't depend on other tests. If you have some common setup that you need to run, Jasmine has beforeEach to set up each test the same, or beforeAll in case the setup is expensive enough that you're willing to deal with the shared state between tests.\nIf you have all of that set up and you want Jasmine to not execute any further specs after encountering the first failing spec, you can configure Jasmine that way. If you're using Jasmine in a node context, you can use the command line flag as @floverdevel mentioned, or configure it in your jasmine.json, other runners have their own configuration for this, and the built-in Jasmine HTML page includes an option (in the top right) to turn this on as well.\nIn the future you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1035, "url": "https://github.com/jasmine/jasmine/issues/1035", "title": "ui-router and transitionTo, jasmine expecting mysterious relative value", "contents": "Using jasmine (2.4.0) and angular ui-router I'm having an issue\nExpected spy transitionTo to have been called with\n[ Object({ name: '', url: '^', views: null, abstract: true }), Object({}), Object({ inherit: true, relative: null }) ]\nbut actual calls were\n[ Object({ name: '', url: '^', views: null, abstract: true }), Object({}), Object({ inherit: true, relative:  }) ]\nThe problem being the relative: null and relative:__ .  I can't figure out the value of relative that Jasmine is looking for, I've tried null, undefined, empty string, empty object, etc.", "createdAt": "2016-02-02T16:46:23Z", "updatedAt": "2016-09-28T00:59:35Z", "closedAt": "2016-09-28T00:59:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "spiderbites", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "spiderbites", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-18T23:50:28Z", "contents": "Based on your expectation message, Jasmine should be looking for the value of relative to be null. When you change the value you're passing for relative does the error message change to reflect the new value?\nIt seems odd to me that you're not seeing anything print out in the actual call value. The only way that should be possible from Jasmine's pretty printer is if the object defines its own toString that returns the empty string.\nDo you have any more context on the spec you can provide to help us diagnose the issue?\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-28T00:59:35Z", "contents": "Closing due to inactivity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1037, "url": "https://github.com/jasmine/jasmine/issues/1037", "title": "Crash spying on window.history.pushState introduced between 1.3.4 and 1.4.1", "contents": "Hi,\nWe upgraded to 1.4.1 from 1.3.4 via grunt and started getting this error on our test suite. It looks like this:\nSummary (1 tests failed)\nX the history check\n   Error: pushState is not declared writable or has no setter in file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js (line 2008)\n   Error: pushState is not declared writable or has no setter\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:2008\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:776\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:3427\n       at file:///Users/msartint/the-project/test/spec_bundle.js:118747\n       at attemptSync (file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:1886)\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:1874\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:1859\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:697\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:363\n       at file:///Users/msartint/the-project/.grunt/grunt-contrib-jasmine/jasmine.js:2479\n\nAnd the code looks something like this:\ndescribe('the', function() {\n  it('history check', function() {\n    spyOn(window.history, 'pushState');\n...\n    expect(window.history.pushState).toHaveBeenCalled();\n  });\n});\n\nIs there something that changed about how to access this object?\nThanks!", "createdAt": "2016-02-03T06:16:13Z", "updatedAt": "2016-09-27T01:02:39Z", "closedAt": "2016-09-27T01:02:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "msartintarm", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "msartintarm", "company": "University of Wisconsin"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-19T00:09:14Z", "contents": "What library did you upgrade from 1.3.4 to 1.4.1? Neither of those version numbers exist for Jasmine.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T01:02:39Z", "contents": "Closing due to inactivity", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1038, "url": "https://github.com/jasmine/jasmine/issues/1038", "title": "How to test for session variables?", "contents": "I'd like to test for the value of a session variable.\nRight now, this happens:\n\nI have a default session variable: Session.setDefault('alert', null);\nI have the test suite click a button which makes the session variable value = true: Session.set('alert', true);\nI test for the value of Session.get('alert'); and it comes back with null.\n\nHow can I get the correct session variable value after an event takes place?\nFYI, I'm using the sanjo:jasmine implementation for Meteor.", "createdAt": "2016-02-03T16:28:01Z", "updatedAt": "2016-02-22T22:12:31Z", "closedAt": "2016-02-22T22:12:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bwobst", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bwobst", "company": "Toyota Racing Development"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-22T22:12:31Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1039, "url": "https://github.com/jasmine/jasmine/issues/1039", "title": "with this and without this", "contents": "may i ask? sorry to open new issue.\ni just confuse why i have to use this to share variable on a suite.\ni just new on unit test, and i work with example on the internet (which not use this).\ni stuck then read the intro documentation, realize using this to share variable.\nnow it work fine, but why i got undefined when not using this.", "createdAt": "2016-02-03T20:52:00Z", "updatedAt": "2016-02-09T19:29:22Z", "closedAt": "2016-02-04T03:45:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brutalcrozt", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "brutalcrozt", "company": null}, {"login": "Gerg", "company": null}, {"login": "amavisca", "company": null}, {"login": "floverdevel", "company": "NuGlif"}], "comments_count": 8, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-04T03:45:50Z", "contents": "Check out this for an explanation: https://gist.github.com/traviskaufman/11131303\nYou are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brutalcrozt", "authorAssociation": "NONE", "createdAt": "2016-02-04T09:38:38Z", "contents": "@Gerg Thanks for your fast response.\nI suggest update introduction on jasmine website, since i don't know much about it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brutalcrozt", "authorAssociation": "NONE", "createdAt": "2016-02-08T12:43:45Z", "contents": "I use chai with jasmine\nand i got htis\nassert.throw(funtion() {\n  this.service.someMethod(dummyParameter); // yell cannot read service on undefined\n},'some error');\n\nwhen i change to use injector it works\nassert.throw(funtion() {\n  injector.get('service').someMethod(dummyParameter); // works fine\n},'some error');", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brutalcrozt", "authorAssociation": "NONE", "createdAt": "2016-02-08T13:20:18Z", "contents": "even use jasmine it'self\nexpect(function () {\n  this.service.dataContext({}); // yell cant read service of undefined\n}).toThrowError(threwMsg);\n\ndetails:\n\"name\": \"karma-jasmine\",\n\"version\": \"0.2.2\"\n\n\"name\": \"jasmine-core\",\n  \"license\": \"MIT\",\n  \"version\": \"2.4.1\",", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-02-08T16:32:27Z", "contents": "@brutalcrozt This isn't a problem with Jasmine - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\nthisis a reserved word that is scoped within a function, so each function declaration would need to pass the this from the it/beforeEach/etc. block that Jasmine sets up into the inner functions. There are a few ways to accomplish this:\nManually bind your function using Function.prototype.bind:\nit('uses Function.prototype.bind', function() {\n // this = the this that Jasmine bound to the it function\n  expect(function() { \n    // this = the this that was bound to the outer function (the one Jasmine supplied)\n  }.bind(this)).toThrow(...)\n});\n\nUse the ES6 Arrow function (fat arrow) syntax, which accomplishes the same behavior of function(){}.bind(this) with a shorthand syntax (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\nit('uses ES6 Arrow functions', function() {\n  // this = the this that Jasmine bound to the it function\n  expect(function() => {\n    // this = the this that was bound to the outer function (the one Jasmine supplied)\n  }).toThrow(...);\n});\n\nRefer to the Jasmine-supplied this in the it function:\nit('uses closures', function() {\n  var self = this;\n  expect(function() {\n  // self is captured in the closure, so you can refer to self.whatever inside the inner function\n  }).toThrow(...);\n});\n\nDepending on what JS standard was available to me, I'd choose ES6 Arrow func > Function.prototype.bind > var self = this.\nIf you have other questions about usage, please send them to the mailing list as github issues are intended to be used for feature requests and issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "floverdevel", "authorAssociation": "NONE", "createdAt": "2016-02-08T17:33:43Z", "contents": "javascript 101 : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\n\nA function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.\nIn most cases, the value of this is determined by how a function is called.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brutalcrozt", "authorAssociation": "NONE", "createdAt": "2016-02-09T13:49:35Z", "contents": "@amavisca @floverdevel my apologize , thank for your help", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "floverdevel", "authorAssociation": "NONE", "createdAt": "2016-02-09T19:29:22Z", "contents": "no problem @brutalcrozt :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1040, "url": "https://github.com/jasmine/jasmine/issues/1040", "title": "Avoid potential pitfall of forgotten `done` parameter", "contents": "With the done syntax for asynchronous tests, it's possible to inadvertently write something like this:\nit(\"is an async spec\", function() {\n  setTimeout(function() {\n    expect(true).toBeFalsy();\n    done();\n  }, 1000);\n});\nThis spec will pass without encountering the expectation. Is there a way that Jasmine could issue some sort of early warning in a case like this?\nOne way would be to warn if a spec executed no expectations, but that would only solve the problem for specs and not for forgetting the done parameter on a beforeEach(), for example.", "createdAt": "2016-02-03T23:52:09Z", "updatedAt": "2016-10-14T16:51:04Z", "closedAt": "2016-10-14T16:51:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "participants_count": 6, "participants_data": [{"login": "ptomato", "company": "@endlessm"}, {"login": "magcius", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "kapke", "company": "@ScalaConsultants "}, {"login": "rdy", "company": "Sony"}, {"login": "mattburrell", "company": "Solid Code Solutions"}], "comments_count": 12, "comments_data": [{"authorLogin": "magcius", "authorAssociation": "NONE", "createdAt": "2016-02-04T00:15:56Z", "contents": "Another way would be to require explicitly async or sync tests, as in:\nit.async(\"is an async spec\", function (done) {\n});\n\nit.sync(\"is an sync spec\", function () {\n});\nWith a warning if the arity isn't what's expected. This would also work for beforeEach().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-22T22:44:09Z", "contents": "The HTML reporter should be reporting (to the console) when no expectations are made in a spec. You can see the logic for this here, and any other reporter for Jasmine should be able to do something similar.\nI think it might make sense to allow projects using Jasmine the ability an option to get this kind of check up front. I'm not sure about the .async/.sync interface, since we don't really have anything else like that at the top level. I'm also not really sure where the logic should go without adding more places that know about the extra param. I'd be happy to review a pull request that takes a crack at this or further discussion here about mechanisms and interfaces for this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "magcius", "authorAssociation": "NONE", "createdAt": "2016-02-22T23:38:30Z", "contents": "We're using the ConsoleReporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-24T07:48:26Z", "contents": "In my opinion, checking whether a spec has expectations can help, but won't solve the issue of the same problem happening in beforeEach.\nThe most failsafe way to solve it would be, in my opinion, to check whether a done variable is referenced when there isn't any such name in scope. However, that seems kind of ridiculous in practice as you'd basically have to run a linter over the spec before executing it.\nAnother way would be to have a syntax that's harder to get wrong and more obvious when you do, something like this:\nit(\"is an async spec\", function (proceed) {\n    setTimeout(proceed, 1000);\n}, function () {\n    expect(true).toBeFalsy();\n});\nThat way, if you forgot the proceed parameter, but provided a function to be called after proceeding, then Jasmine would be able to know that you messed up. I don't know if changing the syntax is an option for you at all, though, or if the above has the same problem as it.async in that it's not similar to anything used elsewhere in Jasmine.\nI don't have any better ideas right now, and I'd probably not want to start a pull request based on either of the above. But let me know if either general direction makes sense to you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-26T18:58:36Z", "contents": "What about passing thenable instead of callback to it/beforeEach/afterEach or returning thenable from passed callback?\nOf course this doesn't solve problem (especially second option) but it looks to be more save and easy to track from user perspective. Most of JS programmers are familiar with promises so it looks to be natural to start supporting them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ptomato", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-02T06:09:24Z", "contents": "Do you have an idea of how some sample code with your idea would look like? Could we get away with it without including a promise implementation in Jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-03T17:24:39Z", "contents": "First option (passing thenable) would look like as follows:\ndescribe('sth async', function () {\n  beforeEach(new jasmine.Promise((resolve, reject) => {\n    this.foo = 'bar'\n    resolve();\n  });\n\n  it('should be async', new jasmine.Promise((resolve, reject) => {\n    expect(this.foo).toEqual('bar');\n    resolve();\n  });\n}\nIn that case we need some kind of wrapper for Promise (named jasmine.Promise in that example) to start given action only on demand. It should be easy to achieve that by using native/polyfill implementation under the hood.\nThere is also alternative - we can pass a Promise which resolves to function and that function should return another Promise:\ndescribe('sth async', function () {\n  beforeEach(Promise.resolve(function () {\n    this.foo = 'bar';\n    return Promise.resolve();\n  }));\n\n  it('should be async', Promise.resolve(function () {\n    return makeSomeAsyncAction()\n      .then(() => expect(this.foo).toEqual('bar'));\n  }));\n});\nProbably this one is the easiest to implement and the easiest to make checking for returned value.\nSecond option (returning thenable) would look like:\ndescribe('sth async', function () {\n  beforeEach(function () {\n    this.foo = 'bar';\n    return Promise.resolve();\n  });\n\n  it('should be async', function () {\n    expect(this.foo).toEqual('bar');\n    return Promise.resolve();\n  });\n}\nAs you can see - second option is almost the same as using done parameter because omitting return statement makes spec synchronous.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-11T13:23:25Z", "contents": "There is also one more advatange of supporting promises in any of proposed ways: it's possible to add .catch on end od promise chain for every async spec which makes error handling easier (in default errors in promises are not handled and very often I see errors Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL..\nAs I have some spare time I can start work on that issue but it would be nice to have some feedback about design and proposed interface.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2016-04-06T14:49:52Z", "contents": "I have some experimental code where I have added an additional it that expects a promise to be returned. It looks great if you are using ES7 style promises.\n    describe('when clicking the rules tab', () => {\n      beforeEachAsync(async () => {\n        await page.click('.rules-tab');\n      });\n\n      itAsync('renders a rules page', async () => {\n        await page.waitForExist('.rules-page');\n      });\n    });\n\nI'd be happy to share the code, we' re planning to publish the module as a separate way to add promises to jasmine, until the team is ready to add more in depth support for it. The problem as I see it is that not all browsers properly support promises natively and Jasmine still supports very old versions of IE. It might need to be an opt in kind of thing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattburrell", "authorAssociation": "NONE", "createdAt": "2016-06-17T08:41:05Z", "contents": "@rdy it'd be great to see code for itAsync, Ryan.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattburrell", "authorAssociation": "NONE", "createdAt": "2016-06-17T08:47:45Z", "contents": "@rdy Ok I've found it under your repositories. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-14T16:51:04Z", "contents": "Ultimately, what I think we want to do for Jasmine, is have exceptions that are thrown in asynchronous code get associated with the currently running spec. I'm going to close this in favor of a more general solution like the one in #529.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1043, "url": "https://github.com/jasmine/jasmine/issues/1043", "title": "Include TypeScript typings in the distribution", "contents": "Currently, Jasmine users writing in TypeScript need to get the type information from a third-party side channel, such as https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/jasmine/jasmine.d.ts\nThe means of getting this file into the project are all somewhat inconvenient, especially for novice developers. It also has versioning issues: developers must take extra care to keep the typings file synced with the version of Jasmine they are running.\nThe best way currently available in the TypeScript ecosystem is to publish typings in the npm distribution. See https://github.com/Microsoft/TypeScript/wiki/Typings-for-npm-packages\nJasmine could do this in one of two ways:\n\nTake ownership of the existing jasmine.d.ts file for each minor version of Jasmine, include that file in the distribution, add a \"typings\" field to the package.json, and also add a test in the release process that ensures that example uses of Jasmine actually type-check.\nProduce typings directly from the sources, by including correct type information in the source code and extracting typescript type definitions from it. The most straightforward way is to rename the sources to .ts, introduce a compilation step in the build, and publish the resulting .d.ts files. Another way worth investigation is to use JSDoc type annotations, and a converter like https://github.com/angular/clutz to extract .d.ts files from these. But in this latter case, you need something that type-checks the JSDoc annotations or they'll have no chance of staying correct. (eg. Closure Compiler)\n\nFor protractor, we are currently going for the latter approach, and migrating the sources to TypeScript.\nI'm curious what the project maintainers think about better supporting TypeScript users, have you heard a demand for that?", "createdAt": "2016-02-07T23:10:33Z", "updatedAt": "2016-11-18T20:26:46Z", "closedAt": "2016-11-18T19:42:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexeagle", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "alexeagle", "company": "Angular (@Google)"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "xthilakx", "company": "@bookingcom"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-01T15:42:26Z", "contents": "This is the first time I've seen anything about typings for use with TypeScript, but I know I've seen comments from people using TypeScript and Jasmine.\nGiven that Jasmine isn't written in TypeScript, It sounds like a lot of work for the Jasmine team to maintain something we don't have a great way to check. It's too bad TypeScript makes it so hard to integrate with plain javascript libraries.\nI would be happy to review a pull request that would generate (and validate if necessary) typings from the existing source code as part of the buildDistribution task we use to combine the files.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexeagle", "authorAssociation": "NONE", "createdAt": "2016-03-01T17:19:31Z", "contents": "Actually the TypeScript team is starting design work on supporting the typings maintenance and distribution story for non-TypeScript libraries, so I expect the situation will improve in a few months. I've been advocating for reducing the cost for library maintainers who are willing to host the typings in their project, for example, by sending a PR to popular libraries that includes automated testing which validates the typings file against some example usages of the library. If you have any specific ideas how TypeScript could make the integration easier, I'd be interested to help make it happen.\nYour source code doesn't have enough type information to produce a useful typings file, from what I can tell. Without something like JSDoc annotations, everything will be type any. (Note that Typescript does minimal control-flow based type inference; Facebook's Flow would probably be able to infer more types from your existing sources). So if we want to generate the typings, we need to go through the sources and add the missing type information somewhere.\nIf you don't want to add type info in the sources, then I think the separate .d.ts file is the way to go - you only need to maintain the public API surface which I imagine is pretty stable (unless you plan to make a major version bump with breaking changes)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xthilakx", "authorAssociation": "NONE", "createdAt": "2016-07-22T17:52:04Z", "contents": "If you use Typings, you could install it with just one command\ntypings install dt~jasmine --save --global", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T19:42:13Z", "contents": "Especially if the TypeScript team is also looking into solving this problem of letting teams writing in TypeScript use libraries that aren't, that this shouldn't be Jasmine's concern. Since the Jasmine team also doesn't use TypeScript and would not really be able to maintain the typings correctly, I'm going to close this and leave it to the TypeScript community to maintain typings for Jasmine that work.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexeagle", "authorAssociation": "NONE", "createdAt": "2016-11-18T20:26:46Z", "contents": "Sounds reasonable - TypeScript's typing acquisition story has improved so\nmuch in 2.0 that I think the argument for including in your distro is very\nthin.\nOn Fri, Nov 18, 2016 at 11:42 AM Gregg Van Hove notifications@github.com\nwrote:\n\nEspecially if the TypeScript team is also looking into solving this\nproblem of letting teams writing in TypeScript use libraries that aren't,\nthat this shouldn't be Jasmine's concern. Since the Jasmine team also\ndoesn't use TypeScript and would not really be able to maintain the typings\ncorrectly, I'm going to close this and leave it to the TypeScript community\nto maintain typings for Jasmine that work.\nThanks for using Jasmine!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n#1043 (comment),\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAC5I2kjpxie1dzH5EC-NYehub316gZxks5q_f-dgaJpZM4HVNGb\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1045, "url": "https://github.com/jasmine/jasmine/issues/1045", "title": "Using toThrowError testing directive in Jasmine 2.4.1", "contents": "I am testing a directive input parameters and throwing new Error() if they are invalid. I am using Jasmine 2.4.1 and Angular 1.4.9\nIf my directive has templateUrl defined, the exception is recognized by Jasmine because the exception object is instanceof Error.\nHowever, if my directive doesn't have templateUrl defined (because I am creating directive without template), the exception is not recognized by Jasmine, because the exception object is not instanceof Error.\nMore details here:\nhttp://stackoverflow.com/questions/35010158/using-tothrowerror-testing-directive-in-jasmine-2-4-1", "createdAt": "2016-02-11T15:21:08Z", "updatedAt": "2016-02-25T14:52:57Z", "closedAt": "2016-02-19T01:45:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "odancik", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "odancik", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-19T01:45:17Z", "contents": "toThrowError checks explicitly for an Error object to be thrown. If you want to throw something more generic you'll want to use toThrow instead.\nNext time, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "odancik", "authorAssociation": "NONE", "createdAt": "2016-02-19T07:13:58Z", "contents": "I think it is probably a bug, because in both of my examples I throw new Error.\nHowever when Jasmine checks the the type (if (thrown instanceof Error) { ... }), in case when the directive throwing error HAS templateUrl the \"thrown\" variable IS INSTANCE of Error, but in case when the directive throwing error DOESN'T HAVE templateUrl the \"thrown\" variable IS  NOT INSTANCE of Error.\nThat seems very strange. What do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T19:20:32Z", "contents": "Are you sure Angular is executing the code in your directive? I don't see anything about what errors you're actually seeing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "odancik", "authorAssociation": "NONE", "createdAt": "2016-02-25T14:13:42Z", "contents": "After a day of testing and searching I found the problem. It is actually a ngMock bug/issue as described here:\nangular/angular.js#13821\nAnd example: https://codepen.io/anon/pen/NxQKBp\nAnyways, thanks for replying to my question.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-25T14:52:57Z", "contents": "Glad you found the issue", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1050, "url": "https://github.com/jasmine/jasmine/issues/1050", "title": "Add getMock() functionality to mock classes (to work with ECMA6/ TypeScript classes)", "contents": "Would be useful when working with angular2/typescript to be able to stub all methods in one go.", "createdAt": "2016-02-22T15:14:38Z", "updatedAt": "2016-11-10T02:01:34Z", "closedAt": "2016-11-10T02:01:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vladimir-ivanov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vladimir-ivanov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "kapke", "company": "@ScalaConsultants "}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-23T22:32:32Z", "contents": "Can you describe more what the interface for this would look like and how it would behave? Based on what you've said, I don't understand what is needed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vladimir-ivanov", "authorAssociation": "NONE", "createdAt": "2016-02-23T22:46:12Z", "contents": "class LifeCycle {\n\n    constructor(anotherRealClassInstance) {\n        this.dependency = anotherRealClassInstance;\n    }\n\n    init() {\n        //body here\n    }\n\n    change() {\n        //body here\n    }\n\n    destroy() {\n        //body here\n    }\n}\n\n\nclass LifeCycleConsumer {\n\n    constructor(lifeCycleInstance) {\n        lifeCycleInstance.init();\n    }\n}\n\nconst lifeCycleMock = jasmine.mock(LifeCycle) //or jasmine.getMock(LifeCycle);\n\nconst lifeCycleConsumer = new LifeCycleConsumer(lifeCycleMock);\n\n\nlifeCycleMock.expects(\"init\").atLeast(1);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vladimir-ivanov", "authorAssociation": "NONE", "createdAt": "2016-02-23T22:47:09Z", "contents": "an easy shortcut to spyOn / stub all dependency methods\nSome of them could still be modified e.g.\nlifeCycleMock.init.returnValue(44)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-02-26T18:40:26Z", "contents": "I wrote some time ago simple piece of code resolving that problem. The idea was as follows:\n\nFiind all method names in prototype chain starting from given constructor(s) - I had some kind of mixins in project so I needed to provide several constructors.\nDeduplicate them\nreturn jasmine.createSpyObj(name, methods)\n\nI that idea fits you I can start new branch with that code under j$.getMock.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vladimir-ivanov", "authorAssociation": "NONE", "createdAt": "2016-02-27T22:01:04Z", "contents": "This works for me and gives me what I need, would be nice to be part of jasmine?\nlet lifeCycleMock = getMock(LifeCycle);\n\nfunction getMock(mockedClass) {\n            Object.getOwnPropertyNames(mockedClass.prototype).forEach(m => spyOn(mockedClass.prototype, m));\n\n            return new mockedClass();\n        };\n\nlifeCycleMock.init.and.callFake(() => \"I am fake\");\n\nnew LifeCycleConsumer(lifeCycleMock);\n\nexpect(lifeCycleMock.init.calls.count()).toEqual(1)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-03T17:41:14Z", "contents": "The code I've mentioned above is here:\nhttps://github.com/skygate/CodeSamples/blob/master/js/pretender/pretender.js\nAs it creates jasmine mock object we don't call any of original methods (in some not so rare cases it would cause very strange behaviour).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vladimir-ivanov", "authorAssociation": "NONE", "createdAt": "2016-03-03T19:38:52Z", "contents": "code looks good, thanks\nHowever I am trying to avoid using jasmine.createSpyObj(), as that won't return the same type of object as the one being mocked (need to do some testing later to confirm that).\nAlso jasmine.createSpyObj - you won't be able to add / modify specific method behaviour after mock constructor is called.\nE.g. with spyOn() - you can do this\nlifeCycleMock.init.and.callFake(() => \"I am fake\"); or .returnValue etc - by default all methods stubbed, then the ones you are interested in -> you simply call it after the stubbed / mocked object is created (and before calling the methods).\nStill thinking a method like that should exist in jasmine itself. E.g. Sinon has got one, all backend testing frameworks etc (nice shortcut to stub all methods).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-03T20:06:07Z", "contents": "Ok, got your point of view. I also think that method like that should be part of jasmine (look at comment from past week).\nFor type of mocked object - there we can use Object.create or something similar to assign prototypes properly which should result with right types.\nI use the solution I presented above for testing real application and I'm able to add behaviour in the same way you presented, e.g.:\nconst lifeCycleMock = new Pretender(LifeCycle);\nlifeCycleMock.init.and.callFake(() => 'I am fake');\n\nlifeCycleMock.init(); // 'I am fake'", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-10T02:01:34Z", "contents": "Since Jasmine is implemented entirely in ES5, I don't think it makes sense for it to know much about different possibly class constructs (either TypeScript or ES6), since we wouldn't be able to guarantee type safety of the returned stub object.\nThat said, the object returned by jasmine.createSpyObj is just an object with a bunch of attributes that are spy objects, and thus can always have their behavior changed just by calling .and on them again. Jasmine does this in some of its own specs (e.g. https://github.com/jasmine/jasmine/blob/master/spec/core/integration/EnvSpec.js#L396).\nThis seems like the kind of thing that we would like to have be able to be provided as an extension. Since it sounds like it can be now, I think that is how we want to handle it. We would be happy to discuss things that Jasmine could do in order to make this work better.\nI'm going to close this, as I don't think we're looking to implement something like this in Jasmine itself for the time being. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1051, "url": "https://github.com/jasmine/jasmine/issues/1051", "title": "HTML Reporter Spec Link Goes Wrong When Base URI Was Set", "contents": "In SpecRunner.html, when adding an <base href=\"../\"> to document, the reporter-generated spec link may looks like this:\n<a href=\"?spec=prologue%20InstallFunctions()\">InstallFunctions()</a>\nwhen I clicked the link.  browser window jumped to the base URL page\nSo I think, the specHref function in jasmine-html.js shoud be updated from\n    function specHref(result) {\n      return addToExistingQueryString('spec', result.fullName);\n    }\nto\n    function specHref(result) {\n      var search=addToExistingQueryString('spec', result.fullName);\n      var href=search;\n      if(document.URL!=document.baseURI){\n        href=location.pathname+search;\n        if(document.baseURI.indexOf(location.origin+\"/\")==-1){\n          href=location.origin+location.pathname+search;\n        }\n      }\n      return href;\n    }\nSo that spec link in test result works fine test result under such a circumstance.\nP.S.\nI didn't considered about browser compatibility of code document.baseURI and location.origin.\nHere are two fallback functions to resolve the concerns:\nfunction getBaseURI(){\n    var a=this.createElement(\"a\");\n    a.href=\"\";\n    return a.href;\n}\nfunction getOrigin(){\n    return this.protocol+\"//\"+this.host;\n}\nTo make it compatible with old browsers:\n\nuse getBaseURI.call(document) instead of document.baseURI\nuse getOrigin.call(location) instead of location.origin.", "createdAt": "2016-02-23T06:33:19Z", "updatedAt": "2016-11-20T07:09:00Z", "closedAt": "2016-11-10T01:49:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fuweichin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fuweichin", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-10T01:49:20Z", "contents": "The HtmlReporter really kind of expects to be in control of most of the page, so I'm not sure how much sense it makes to try to support a document with a custom baseUri set.\nIf the code being tested needs to handle a page with a custom baseUri it probably makes sense to provide some kind fake or stub to the specs that need it, similar to what you might do if you have code that deals with window.location.\nClosing, I don't think this is something we're looking for in Jasmine at this time. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fuweichin", "authorAssociation": "NONE", "createdAt": "2016-11-20T07:09:00Z", "contents": "I mean Jasmine HTML Reporter always assuming the baseURI of the SpecRunner page is document URI,  regardless of page author's custom baseURI setting.\nAny SpecRunner page  WITH CUSTOM BASE URI (which is not the same as documentURI) will result in wrong page navigation when spec link clicked as long as this issue not resolved.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1052, "url": "https://github.com/jasmine/jasmine/issues/1052", "title": "jasmine repository contains zero-padded file modes", "contents": "The jasmine repository is not clean.\n\"git fsck\" returns the following errors:\nChecking object directories: 100% (256/256), done. warning in tree 30e85099c116ada0d0588915567e6ed438d52ed7: contains zero-padded file modes warning in tree a0a1663600be9b6d099bffd067e4452c5a1a37ef: contains zero-padded file modes warning in tree 34b50ab9f16aecca8263830bfe59f5b4333e4501: contains zero-padded file modes warning in tree 90e54d021c732fb81af9989a019c87c4aee3e621: contains zero-padded file modes warning in tree d589297f4654e4a685eac61cce7481437e612b8b: contains zero-padded file modes warning in tree 0cc331339a0f1e685055bbdf1b38a2f647467a44: contains zero-padded file modes warning in tree 0c932084c1f9f2b2dc86a4dc98dcee126b76b644: contains zero-padded file modes Checking objects: 100% (12993/12993), done.\nSomeone has a clean repository somewhere?\nI am not able to clone the project with a recent version of git like 2.7.", "createdAt": "2016-02-23T13:58:27Z", "updatedAt": "2016-11-10T02:13:15Z", "closedAt": "2016-11-10T02:13:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nfk", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nfk", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "nfk", "authorAssociation": "NONE", "createdAt": "2016-02-24T10:13:37Z", "contents": "This topic can help to clone the project: https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0\nBut it don't solve the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-10T17:20:02Z", "contents": "It looks like those issues have been in the repo for some time now (at least 2 years). I haven't been able to figure out when they occurred, and it looks like fixing this issue would require force pushing a full new repo. Since this would break all forks of jasmine, I'm not sure this is something we want to attempt at this point.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-10T02:13:15Z", "contents": "Given the difficulty in fixing this issue and how long it has been around, I'm inclined to just leave it alone for now so we don't break pull requests and forks.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1053, "url": "https://github.com/jasmine/jasmine/issues/1053", "title": "spyOn(myObject, 'myMethod').with('this argument').andReturn('that');", "contents": "I would like to set a return value for a spy but only when it is called with a specific argument\nspyOn(myObject, 'myMethod').with('this argument').andReturn('that');\n\nThis would return nothing\nmyObject.myMethod('not a recognized argument');\n\nThis would return 'that':\nmyObject.myMethod('this argument');\n\nI couldn't find this brought up in the issues previously. Is this something that I could offer a pull request and add the feature? Am I missing something as to why this has not been implemented already?", "createdAt": "2016-02-23T23:51:08Z", "updatedAt": "2016-02-24T00:11:12Z", "closedAt": "2016-02-24T00:11:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bzitzow", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bzitzow", "company": "BRIAN ZITZOW"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-24T00:11:12Z", "contents": "This looks like a duplicate of #720. We're looking at ways to allow a user to specify they're own SpyStrategy.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1054, "url": "https://github.com/jasmine/jasmine/issues/1054", "title": "'and' assertion chainer", "contents": "It would be good to have an and chainer which allows for multiple assertions/expectations to be chained into a single statement.\nWhen testing that something has been correctly instantiated, it is common to test that it is neither null nor undefined.\nCurrently, this must be done like so:\nit(\"should set someProperty\", () => {\n    let someInstance = new SomeClass();\n\n    expect(someInstance.someProperty).not.toBe(null);\n    expect(someInstance.someProperty).not.toBe(undefined);\n});\n\nThere would then be further tests added to ensure that it has the correct value, but this test would usually come first when TDDing.\nIt would be good to chain the two expect statements into a single statement, like this:\nit(\"should set someProperty\", () => {\n    let someInstance = new SomeClass();\n\n    expect(someInstance.someProperty)\n        .not.toBe(null)\n        .and.not.toBe(undefined);\n});", "createdAt": "2016-02-25T12:19:40Z", "updatedAt": "2018-07-16T14:49:36Z", "closedAt": "2016-03-01T15:09:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Jameskmonger", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "Jameskmonger", "company": null}, {"login": "sinaru", "company": "@lonelyplanet "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "AntonioRedondo", "company": null}, {"login": "liuxh0", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "sinaru", "authorAssociation": "NONE", "createdAt": "2016-03-01T06:07:21Z", "contents": "Each test example should make only one assertion. This helps you on find errors faster and makes your code easier to read and maintain.\nAn exception to this would be when testing a state of a resourceful object. But then again your suggestion reduce the readability and maintainability of test code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-01T15:09:04Z", "contents": "As @sinaru said, using and in this way would make it harder to diagnose failing tests. I would also argue that instead of checking both not null and not undefined, you probably want to check for a single positive assertion that is more descriptive of what should be happening. This could even be something like expect(someProperty).toEqual(Jasmine.any(String)); to assert that it is of the type you expect.\nThis isn't something we're looking at changing any time soon, so I'm going to close this. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_DOWN"]}, {"authorLogin": "AntonioRedondo", "authorAssociation": "NONE", "createdAt": "2017-06-13T11:10:16Z", "contents": "@sinaru, @slackersoft there are plenty cases where it's absolutely legit to chain assertions. For example:\nexpect(button.addEventListener).toHaveBeenCalledTimes(1)\n      .and.toHaveBeenCalledWith('click', jasmine.any(Function));\n\nWithout an .and chaining property the expect block becomes considerably longer:\nexpect(button.addEventListener).toHaveBeenCalledTimes(1);\nexpect(button.addEventListener).and.toHaveBeenCalledWith('click', jasmine.any(Function));\n\nIt's also more prone to bugs: you have to write expect(button.addEventListener) twice.\nThis feature is implemented in Chai and there is no real reason why it shouldn't be implemented on Jasmine taking into account it's a basic feature. You're already using .and for spyOn(). Your answer looks to me a bit opinionated and definitively lessens the number of testing choices. I think it would be nicer to let the user decide which is the best approach for different use cases. I don't think this feature would be a dangerous one.", "reactions_count": 11, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "liuxh0", "authorAssociation": "NONE", "createdAt": "2018-07-16T14:49:36Z", "contents": "I think this feature should be taken into consideration again.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1056, "url": "https://github.com/jasmine/jasmine/issues/1056", "title": "Microsoft Edge crashes when using array .toEqual on arrays multiple times", "contents": "I recently updated a lot of unit tests from jasmine 1 to 2, and now my tests aren't running on Edge anymore. The UI starts showing then I've got a \"This page is having a problem loading\" page error. After a lot of fiddling, I found that it was caused by calling toEqual with an array (expect(...).toEqual([...])) multiple times (but a very few calls is enough to reproduce the error).\nI made a video to illustrate the issue: http://paste.graou.eu/896249ea611b4f80aee3d62e4e44fe4a.webm . In this example I have to refresh two times to crash Edge, but with a lot more tests the issue is reproducible everytime.\nHere is the code I used: http://paste.graou.eu/77512d1a469845219357333b78937be3.tgz\nI bisected jasmine repository and it looks like a regression from 53b0752 , but I can't explain why. Reverting this commit solves the issue.\nEdge version: 20.10240.16384.0 (from a Win10 http://modern.ie VM)\njasmine version: 2.4.1 (tried on master too, same issue)\nIs it a known issue? Should I avoid using a modern.ie VM? Am I the only one facing this issue?", "createdAt": "2016-02-26T17:29:45Z", "updatedAt": "2016-02-29T13:26:39Z", "closedAt": "2016-02-29T13:26:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "BenoitZugmeyer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "BenoitZugmeyer", "company": "@keymetrics "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-02-26T19:32:39Z", "contents": "I just tried your example spec with SauceLabs on Edge 20.10240 and it's seems to be working fine with all of the lines in the spec. I refreshed the page a number of times and it loaded and ran the specs immediately every time. It seems odd that it would be a modern.ie VM issue, but I am unable to reproduce it, so I'm not sure is going on with Edge.\nIn this case I think basically what is happening is the commit you referenced is removing a check for arrays, such that if they both say they are arrays (className === '[object Array]') then Jasmine will actually do a recursive check, where before it would not. I don't know if SauceLabs is maybe running a very slightly newer version of MS Edge than is in the modern.ie VM such that this issue is now fixed in Edge.\nI'd be happy to review anything that seems to be Jasmine directly causing issues, but right now this seems like it is probably a problem in MS Edge itself.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BenoitZugmeyer", "authorAssociation": "NONE", "createdAt": "2016-02-29T09:59:07Z", "contents": "Thank you very much for the quick answer. I will come back to you soon with our real test suit, with which I can reproduce the issue everytime even on an up-to-date Edge version on a real computer. In the meantime, I'll try to work on a PR.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BenoitZugmeyer", "authorAssociation": "NONE", "createdAt": "2016-02-29T13:26:39Z", "contents": "Well, I just realized the issue was solved in b59cacf . I should have tried with the master version first, my bad. Sorry for the noise, I'll wait for the next release!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1057, "url": "https://github.com/jasmine/jasmine/issues/1057", "title": "Add .editorconfig for easy code style configuration", "contents": "Most IDEs and modern editors supports or have plugins for using .editorconfig file. Such file in root project directory describes such things as indentation for different file types. I think it can be very useful for a lot of programmers who have their tools configured by default for using 4 spaces or even tabs to work with Jasmine source code.", "createdAt": "2016-02-28T17:14:37Z", "updatedAt": "2016-03-02T01:51:33Z", "closedAt": "2016-03-02T01:51:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kapke", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "kapke", "company": "@ScalaConsultants "}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1060, "url": "https://github.com/jasmine/jasmine/issues/1060", "title": "Cannot read property 'callThrough' of undefined", "contents": "Hi, all. Here is my test:\nvar someObj = require('someObj');\ndescribe('test registerListener.', function() {\n    beforeEach(function() {\n        spyOn(someObj, 'registerListener').and.callThrough();\n        someObj .registerListener();\n    });\n\n    it('tracks that the registerListener was called', function() {\n        expect(someObj.registerListener).toHaveBeenCalled();\n        expect(someObj.registerListener).not.toThrow();\n    });\n});\n\nI don't know why that I keep getting this error: \"Cannot read property 'callThrough' of undefined\".\nBut if I get rid of .and.callThrough, everything goes fine.\nAny idea?", "createdAt": "2016-02-29T09:00:00Z", "updatedAt": "2016-03-01T01:44:48Z", "closedAt": "2016-03-01T01:44:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AnnieCyl", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "AnnieCyl", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "AnnieCyl", "authorAssociation": "NONE", "createdAt": "2016-02-29T09:12:21Z", "contents": "By the way, I am using karma to run jasmine tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnnieCyl", "authorAssociation": "NONE", "createdAt": "2016-03-01T01:44:46Z", "contents": "Never mind. I found that I didn't install karma-jasmine, somehow karma used some old version of jasmine which was already installed in my project. After I installed karma-jasmine, this problem is gone.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1063, "url": "https://github.com/jasmine/jasmine/issues/1063", "title": "Jasmine Runs Test Three Times", "contents": "I am running Karma/Jasmine/Angular 2.0 tests on my development box. Just recently, Jasmine on my development box decided to start running my tests three times. Yes, exactly three times, every time.\nOn the first run, everything passes as expected. However, on the second and third pass, all of the same things fail. It always acknowledges that there are 7 tests, but runs 21, and 10 fail (first-grade math out the window)????\nThis also fails on Travis with SauceLabs. (Note: That links to an older build with 3 tests, but ran 9, and 5 fail???)\nI have a screenshot, karma.conf.js file, and one suite which started this whole thing. Any help with be greatly appreciated.\n\nCulprit [TypeScript] (Remove this and problem solved on my dev box):\nFull source\ndescribe('From the Conductor Service', () => {\n    let arr: Array<ComponentStatusModel> = null;\n    let svc: ConductorService = null;\n\n    beforeEach(() => {  \n        arr = [/* Inits the array*/];\n        svc = new ConductorService();\n    });\n\n    describe('when it is handed a container to hold objects which need loaded', () => {\n        // More passing tests...\n\n        /// vvvvv The culprit !!!!!\n        describe('then when you need to access the container', () => {\n            beforeEach(() => {\n                svc.loadedContainer = arr;\n            });\n\n            it('it should always be available', () => {\n                assertIsLocalDataInTheService(arr, svc.loadedContainer);\n            });\n        });\n        /// ^^^^^ End of culprit !!!!!\n    });\n\n    // More passing tests...\n});\n\nFailing Tests:\n\nBrowser Screenshots:\nNot sure if this is related, but before all of the errors happen, the Jasmine call stack is smaller (left, observe scrollbar). After the errors start, the stack just gets bigger with repeating calls to the same functions (right, observe scrollbar).\n\nSuite Stack is Wrong:\nIn my test, the Nanobar and Conductor spec files are totally separate. However, you can see the suites array includes stuff from the Nanobar ans Conductor specs. Somehow Jasmine mashed these two spec files together (after everything started failing), and resulted in my describe() statements not making any sense when published to the console.\n\nSimplified karma.conf.js:\nFull source\nmodule.exports = function (config) {\n    config.set({\n        autoWatch: false,\n        basePath: '.',\n        browsers: ['Chrome'],\n        colors: true,\n        frameworks: ['jasmine'],\n        logLevel: config.LOG_INFO,\n        port: 9876,\n        reporters: ['coverage', 'progress'],\n        singleRun: true,\n\n        coverageReporter: {\n            // Code coverage config\n        },\n\n        files: [\n            // Loads everything I need to work\n        ],\n\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-coverage',\n            'karma-jasmine'\n        ],\n\n        preprocessors: {\n            'app/**/*.js': ['coverage']\n        },\n\n        proxies: {\n            // Adjust the paths\n        }\n    })\n}", "createdAt": "2016-03-01T01:26:47Z", "updatedAt": "2016-11-08T00:47:52Z", "closedAt": "2016-11-08T00:47:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "oliverspryn", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "oliverspryn", "company": "@upmc-enterprises"}, {"login": "tcpip4000", "company": "ER Technology"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "tcpip4000", "authorAssociation": "NONE", "createdAt": "2016-04-24T16:22:54Z", "contents": "Same here angular 2  beta 15 tests runs 3 times, dependencies I use:\n...\n\"dependencies\": {\n\"angular2\": \"2.0.0-beta.15\",\n\"systemjs\": \"0.19.26\",\n\"es6-shim\": \"^0.35.0\",\n\"reflect-metadata\": \"0.1.2\",\n\"rxjs\": \"5.0.0-beta.2\",\n\"zone.js\": \"0.6.10\",\n\"jquery\": \"1.12.1\",\n\"bootstrap\": \"^3.0.0\"\n},\n\"devDependencies\": {\n\"concurrently\": \"^2.0.0\",\n\"jasmine-core\": \"2.4.1\",\n\"lite-server\": \"^2.2.0\",\n\"typescript\": \"^1.8.10\",\n\"typings\": \"^0.7.12\"\n}\n...", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-26T23:50:44Z", "contents": "It sounds like somehow your specs are getting registered with Jasmine more than once.\nIs the TypeScript being compiled in the browser and maybe it ends up executing oddly? I don't know much about TypeScript or how things like let work in it, but I could see these things potentially causing problems.\nIf you pre-compile to JS and use those tests can you still reproduce the issue? If so, this would indicate an issue with TypeScript and probably not Jasmine itself.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-08T00:47:52Z", "contents": "We haven't seen any more information on this issue, and it sounds like it is probably an issue with TypeScript configuration and not necessarily Jasmine itself.\nClosing. We'd be happy to review a pull request or further discussion about particular things that Jasmine is doing that can cause errors with TypeScript.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1064, "url": "https://github.com/jasmine/jasmine/issues/1064", "title": "Can't chain 'and.callThrough' with 'and.returnValue' to spy", "contents": "Code fails when chaining 'and.callThrough' with 'and.returnValue' to spy.\nSee below codes. Notice the chaining order causes same test to fail and pass different occasions.\ndescribe('Spy', function () {\n    var bar = null;\n\n    beforeEach(function () {\n        this.foo = {\n            setBar: function (value) {\n                bar = value;\n                return bar;\n            }\n        };\n        spyOn(this.foo, 'setBar').and.returnValue(52).and.callThrough();\n        this.foo.setBar(42);\n    });\n\n    // passes\n    it(\"expect bar to be 42\", function () {\n        return expect(bar).toBe(42);\n    });\n\n    // fails. return value is 42.\n    it(\"expect 52 as return value\", function () {\n        return expect(this.foo.setBar(42)).toEqual(52);\n    });\n});\ndescribe('Spy', function () {\n    var bar = null;\n\n    beforeEach(function () {\n        this.foo = {\n            setBar: function (value) {\n                bar = value;\n                return bar;\n            }\n        };\n        spyOn(this.foo, 'setBar').and.callThrough().and.returnValue(52);\n        this.foo.setBar(42);\n    });\n\n    // fails. bar is null.\n    it(\"expect bar to be 42\", function () {\n        return expect(bar).toBe(42);\n    });\n\n    // passes\n    it(\"expect 52 as return value\", function () {\n        return expect(this.foo.setBar(42)).toEqual(52);\n    });\n});", "createdAt": "2016-03-01T05:53:20Z", "updatedAt": "2017-02-13T19:26:01Z", "closedAt": "2016-03-01T15:02:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sinaru", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "sinaru", "company": "@lonelyplanet "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "tam-borine", "company": null}, {"login": "jasonwr", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-01T15:02:15Z", "contents": "A spy can only have a single execution strategy at a time. When you chain the second and you are changing the execution strategy, this is why it only executes the way you are seeing.\nIf you want to define some behavior and also change the return value of a spy, you probably want to use callFake instead. This will let you pass a function that defines the implementation of the spy.\nClosing this issue, since is the currently defined/expected functionality. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sinaru", "authorAssociation": "NONE", "createdAt": "2016-03-01T15:24:19Z", "contents": "Oh I see. I didn't find any note about a single execution strategy mentioned in the docs. So I thought it is possible to chain like this and expect both behavior. For example, if I want to have the actual execution of the spied function but also have a specified return value, it is not possible it seems. \ud83d\ude22", "reactions_count": 1, "reactions_data": ["CONFUSED"]}, {"authorLogin": "tam-borine", "authorAssociation": "NONE", "createdAt": "2016-09-18T08:15:34Z", "contents": "Yeah I also assumed what sinaru did, I would love to be able to chain spy execution strategies", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jasonwr", "authorAssociation": "NONE", "createdAt": "2016-12-05T18:16:39Z", "contents": "@slackersoft the documentation is poorly written for this and hence IMHO this is still an issue because it is misguiding. Here: https://jasmine.github.io/2.1/introduction.html\nSays, \"By chaining the spy with and.returnValue, all calls to the function will return a specific value.\" @tam-borine I agree with you!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T19:26:01Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1065, "url": "https://github.com/jasmine/jasmine/issues/1065", "title": "Link to individual tests by id instead of full GWT", "contents": "Qunit has a link like: http://localhost:49313/test/unit/index.aspx?testNumber=510\nto contrast Jasmine creates links like http://localhost:52734/unittests/tests.aspx?spec=Given%20sort%20model%20when%20sorting%20And%20setting%20the%20sort%20option%20And%20it%20updates%20the%20sort%20option%20should%20set%20orderBy%20to%20ascending\nProposal: Add ids to each test and links like QUnit to reduce query string length.", "createdAt": "2016-03-01T19:29:14Z", "updatedAt": "2016-03-17T16:48:13Z", "closedAt": "2016-03-17T16:48:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "aligneddev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-17T15:32:35Z", "contents": "Jasmine currently generates ids for all suites and specs, but they are generated as the suite is compiled from your spec files. This means that the id for a given spec could change from run to run if other specs are added to the suite. However, the full description of a given spec is less likely to change without a specific change from the user writing the spec. This is why we use the full description instead of the id.\nAre you seeing something not work properly with the long query string?\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-17T16:48:13Z", "contents": "Everything is working, it was just an it to make it easier to look at as I ran a single spec. Your explanation is plenty for me. I didn't think of them changing as specs are added/removed.\nThanks for looking at this and your work on Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1066, "url": "https://github.com/jasmine/jasmine/issues/1066", "title": "Edge case for jasmine init using node", "contents": "This may be a very unlikely and trivial edge case, but wanted to bring it up.\nWhen running jasmine init within a folder that already has a spec folder it will look for jasmine.json within spec/spec/support/jasmine.json folder.\nGranted you likely wouldn't have a spec folder if you were running jasmine init and this may be a bit too trivial.  Felt like sharing.\nLaptop:spec user$ jasmine\nmodule.js:341\n    throw err;\n    ^\n\nError: Cannot find module '/Users/user/workspace/localrepo/spec/spec/support/jasmine.json'\n    at Function.Module._resolveFilename (module.js:339:15)\n    at Function.Module._load (module.js:290:25)\n    at Module.require (module.js:367:17)\n    at require (internal/module.js:16:19)\n    at Jasmine.loadConfigFile (/usr/local/lib/node_modules/jasmine/lib/jasmine.js:83:16)\n    at runJasmine (/usr/local/lib/node_modules/jasmine/lib/command.js:92:11)\n    at Command.run (/usr/local/lib/node_modules/jasmine/lib/command.js:49:7)\n    at Object.<anonymous> (/usr/local/lib/node_modules/jasmine/bin/jasmine.js:11:9)\n    at Module._compile (module.js:413:34)\n    at Object.Module._extensions..js (module.js:422:10)", "createdAt": "2016-03-04T05:27:14Z", "updatedAt": "2016-03-04T05:30:28Z", "closedAt": "2016-03-04T05:29:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mcnichol", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "mcnichol", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "mcnichol", "authorAssociation": "NONE", "createdAt": "2016-03-04T05:29:34Z", "contents": "My mistake....was actually in the spec folder.  Hindsight is 20/20.\nJust tried recreating and it behaves properly.  This was in my error.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1068, "url": "https://github.com/jasmine/jasmine/issues/1068", "title": "Website hard to read on high-dpi non-retina displays", "contents": "For some reason, you specify font sizes in px, instead of using a method that allows scaling.  As a result, unless you're using a Mac, the website is fairly useless, since the code samples are almost unreadable.   Like so:  http://i.imgur.com/veCLXmm.png\nYou don't see this effect on your Mac because OS X browsers play games with how many pixels per px are rendered.  The rest of us with nice monitors do not get this special treatment.  Text-zoom settings in Chrome do not affect px-specified font sizes, so low-vision people who rely on these settings are unable to use your site.\nYou may find luck multiplying by .75 and switching to pt, which should allow scaling, or you may consider switching to em/rem, with which most accessibility packages work very well.", "createdAt": "2016-03-05T19:16:54Z", "updatedAt": "2016-03-10T17:22:14Z", "closedAt": "2016-03-10T17:22:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "khm", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "khm", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-10T17:22:14Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nI'm going to close this in favor of an issue or pull request on the documentation itself. Thank for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1069, "url": "https://github.com/jasmine/jasmine/issues/1069", "title": "Enumerate Jasmine Suites and related Spec names", "contents": "Hi , I am developing a UI for displaying all the jasmine tests specified in a spec file.\nI am looking for some handle in jasmine API which can enumerate all the spec and suite names for me without making any change in the API.\nPlease let me know if anything available of such sort. For now , I am tweaking in the code by appending a suiteDetails array in to the \" jasmine env\" variable from boot.js and populating it inside the \"getSpecName\" API method which has control to both spec and related suite name.", "createdAt": "2016-03-08T21:39:11Z", "updatedAt": "2016-03-15T16:20:42Z", "closedAt": "2016-03-15T16:20:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aggarwalricha", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aggarwalricha", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-15T16:20:42Z", "contents": "A loaded Jasmine Env has a topSuite() function that you can call to the the root of the spec/suite tree. From there you should be able to enumerate down to all child suites and specs that are loaded.\nIn the future, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1070, "url": "https://github.com/jasmine/jasmine/issues/1070", "title": "Jasmine doesn't seem to like Number.MAX_SAFE_INTEGER for timeouts", "contents": "This fails:\nbeforeEach(function(done) {\n  setTimeout(function () {\n    done();\n  });\n}, Number.MAX_SAFE_INTEGER);\n\ndescribe(\"Some thing\", function() {\n  it(\"should do something\", function() {\n    console.log('did something');\n  });\n});\nWith Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL", "createdAt": "2016-03-11T16:22:25Z", "updatedAt": "2016-09-28T00:46:39Z", "closedAt": "2016-09-28T00:46:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "keirlawson", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "keirlawson", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T16:47:19Z", "contents": "The timeout you pass to Jasmine, is then passed as the delay to a setTimeout call under the hood that may suffer from overflow.\nAlternatively, you might just have Jasmine's mock clock turned on which would cause your setTimeout call to never be invoked.\nDoes it seem to fail immediately, or after MAX_SAFE_INTEGER number of milliseconds?\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1071, "url": "https://github.com/jasmine/jasmine/issues/1071", "title": "Proposal: Mock requestAnimationFrame", "contents": "It would be great to have either the MockClock or some other utility have a means of mocking requestAnimationFrame (or rAF as I like to call it).\nMotivation\nA lot of UI components rely on rAF to avoid synchronous layout and render in sync with the browser's native render cycle. Animation libraries that provide fine-grained control over such animations also lean heavily on the method. Given that jasmine has facilities for mocking dates, timers, and Ajax, I feel functionality to mock rAF is appropriate.\nProposed Implementation\nThe rAF should act similarly to the way that set{Timeout,Interval} behave when mocked. Specifically it would be nice if it:\n\nProvided the ability to tick() all queued callbacks at once\nProvided the ability to tick a certain number of callbacks, e.g. tick(n) where n is the first n callbacks\nSupported cancelAnimationFrame\nPerhaps as a nice to have, provided a way to retrieve a copy of the array of scheduled callbacks, e.g. if you wanted to validate that there are not pending callbacks.\n\ndescribe(\"Manually Ticking Jasmine's requestAnimationFrame\", function() {\n  var rafCallback1, rafCallback2;\n\n  beforeEach(function() {\n    jasmine.raf().install();\n    rafCallback1 = jasmine.createSpy('rafCallback1');\n    rafCallback2 = jasmine.createSpy('rafCallback2');\n  });\n\n  afterEach(function() {\n    jasmine.raf().uninstall();\n  });\n\n  it(\"causes all callbacks given within an rAF cycle to be called\", function() {\n    requestAnimationFrame(rafCallback1);\n    requestAnimationFrame(rafCallback2);\n    jasmine.raf().tick();\n    expect(rafCallback1).toHaveBeenCalled();\n    expect(rafCallback2).toHaveBeenCalled();\n  });\n\n  it(\"allows for only a certain number of callbacks to be called\", function() {\n    requestAnimationFrame(rafCallback1);\n    requestAnimationFrame(rafCallback2);\n    jasmine.raf().tick(1);\n    expect(rafCallback1).toHaveBeenCalled();\n    expect(rafCallback2).not.toHaveBeenCalled();\n  });\n\n  it(\"supports cancelAnimationFrame\", function() {\n    var frameId = requestAnimationFrame(rafCallback1);\n    requestAnimationFrame(rafCallback2);\n    cancelAnimationFrame(frameId);\n    jasmine.raf().tick();\n    expect(rafCallback1).not.toHaveBeenCalled();\n    expect(rafCallback2).toHaveBeenCalled();\n  });\n\n  // Nice to have\n  it(\"can provide a read-only queue of pending callbacks?\", function() {\n    requestAnimationFrame(rafCallback1);\n    requestAnimationFrame(rafCallback2);\n    expect(jasmine.raf().pendingQueue().length).toEqual(2);\n    jasmine.tick(1);\n    expect(jasmine.raf().pendingQueue().length).toEqual(1);\n    jasmine.raf().pendingQueue().shift();\n    expect(jasmine.raf().pendingQueue().length).toEqual(1);\n    expect(jasmine.raf().pendingQueue()).toEqual([rafCallback2]);\n  });\n});\nI feel like most of the code used behind the clock functionality could be repurposed for this, and either way I am happy to take point on this and would love to discuss this with the team further. Thanks!", "createdAt": "2016-03-11T22:53:50Z", "updatedAt": "2016-09-29T00:58:23Z", "closedAt": "2016-09-29T00:58:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "traviskaufman", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "traviskaufman", "company": "Google"}, {"login": "Ryuno-Ki", "company": "@mercedesbenzio "}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "traviskaufman", "authorAssociation": "NONE", "createdAt": "2016-03-15T11:26:45Z", "contents": "Friendly ping \ud83d\ude03 would be great to get some feedback on this", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Ryuno-Ki", "authorAssociation": "NONE", "createdAt": "2016-04-12T15:50:10Z", "contents": "Here's a reference implementation as Jasmine plugin:\nhttps://gist.github.com/ischenkodv/43934774f4509fcb5791\nI'm looking forward to see it in Jasmine Core (I could upgrade from setTimeout-implementation in my code then).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T00:56:14Z", "contents": "Since Jasmine is build to test Javascript in many different environments, many of which are not browsers, I don't think this is a good feature for Jasmine core.\nThat said, this does seem like a useful extension of Jasmine (much like Jasmine Ajax).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "traviskaufman", "authorAssociation": "NONE", "createdAt": "2016-09-27T16:02:13Z", "contents": "@Gerg that's fair.\nIf there's enough interest, I can investigate building an extension. We built a really cheap version for testing MDLv2 code, which I could use as a best. There's also one in react-motion which looks good.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1072, "url": "https://github.com/jasmine/jasmine/issues/1072", "title": "beforeAll() inside xdescribe()", "contents": "The code of spec looks like follow\n...\nxdescribe(\"Test 42\", function () {\nbeforeAll(function () {\n.....\n// This code is executed in case the scope of tests is disabled with x: xdescribe(....\n.....\n});\n...\nIt is supposed that if the tests are disabled within xdescribe then ALL executions inside of scope of xdescribe should be disabled as well.\nDoes it make sense to allow beforeAll be enabled here?", "createdAt": "2016-03-13T18:51:23Z", "updatedAt": "2016-09-27T01:00:57Z", "closedAt": "2016-09-27T01:00:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yageev", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "yageev", "company": null}, {"login": "ravikumars", "company": null}, {"login": "mattmazzola", "company": "@Microsoft"}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "ravikumars", "authorAssociation": "NONE", "createdAt": "2016-04-20T16:22:54Z", "contents": "I came across this issue when I experienced the same issue.\nI feel that when I xdescribe then nothing there should be executed including the before/after functions since they are specific to a describe.\nI perform expensive(time wise) setup in describes and executing those is just unnecessary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattmazzola", "authorAssociation": "NONE", "createdAt": "2016-06-17T00:27:15Z", "contents": "Yea, this has caught me as well.\nIf there is code the beforeAll block which has side affects to the test environment someone would expect them not to have occurred when inside an xdescribe but they still do and it's misleading.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T01:00:57Z", "contents": "Thanks for reporting this issue. This is a duplicate of #1175.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1073, "url": "https://github.com/jasmine/jasmine/issues/1073", "title": "Feature Request: call real function from callfake", "contents": "Hi,\nI might have missed some documentation, but there seems to be no easy way to call the original function from a spy's callFake. Example of how this could work:\nspyOn(bar, 'foo').and.callFake(function() {\n  // Some testing stuff here\n  bar.foo.original();\n  // Some more testing stuff here\n});\n\nI found this could come in handy in some cases. Thoughts?\nThanks,\nVincent", "createdAt": "2016-03-14T18:00:47Z", "updatedAt": "2016-12-02T22:22:21Z", "closedAt": "2016-12-02T22:22:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vgrevendo", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "vgrevendo", "company": null}, {"login": "sgravrock", "company": null}, {"login": "Gerg", "company": null}, {"login": "drtimwright", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2016-05-07T19:04:37Z", "contents": "I usually just stash the real method in a variable:\nvar realFoo = bar.foo;\nspyOn(bar, 'foo').and.callFake(function() {\n  // Some testing stuff here\n  realFoo.original();     // or maybe realFoo.call(bar), if needed\n  // Some more testing stuff here\n});\nIt's slightly awkward, but I'm kind of ok with that. I think that adding fake behavior and then calling the real method is both a useful pattern and a design smell. When I find myself doing it often enough to be bothered by the extra friction, it usually means that the design of the code under test could be improved in some way.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "vgrevendo", "authorAssociation": "NONE", "createdAt": "2016-05-07T19:35:07Z", "contents": "There are cases where it's hard to think of an alternative. For example I find this pattern particularly useful when you need to test in which order API calls are made.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2016-05-07T19:49:19Z", "contents": "Agreed. I haven't come up with a better way to write that kind of test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T00:52:37Z", "contents": "I agree with @sgravrock that if you find yourself doing this, it is probably a design smell. It means that your code is dependent on side effects from another function.\nI think that the strategy of saving off the original function definition is sufficient for the few cases where you need to do this.\nThat said, I would be happy to hear feedback from the Jasmine community if anyone has strong feelings otherwise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drtimwright", "authorAssociation": "NONE", "createdAt": "2016-10-27T05:29:03Z", "contents": "the Mockito library (for Java) has functions to verify that calls to spy methods occurred in a particular order.\nhttp://site.mockito.org/mockito/docs/current/org/mockito/InOrder.html\nIf there's interest, I could have a go implementing that?\nTim", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-02T22:22:21Z", "contents": "We would be happy to review a pull request that allowed a user to verify that spies were called in a specified order. That has been on our radar for a while, but never quite bubbled up to the top of the list.\nHowever, it doesn't seem like it is significantly hard enough to call the original method from your fake to balance the trade-off of demonstrating to a user a potential design smell in their code.\nI'm going to close this issue. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1074, "url": "https://github.com/jasmine/jasmine/issues/1074", "title": "Piping a readable to a writable stream yields unexpected results", "contents": "When running the following program with node, the contents of the input file are shown in the terminal output:\nrequire('fs').createReadStream('input.txt').pipe(process.stdout);\nHowever when executing the same program with jasmine, nothing is shown. Listening to the data event emitted by the readable stream with on('data', ...) yields no events.\nChecking the docs for the node Readable streams:\n\nYou can switch to flowing mode by doing any of the following:\n\nAdding a data event handler to listen for data.\nCalling the stream.resume() method to explicitly open the flow.\nCalling the stream.pipe() method to send the data to a Writable.\n\n\nSo why doesn't this happen when running with jasmine?\nNote: Replacing the file stream with any other readable stream, or process.stdout with any other writable stream shows the same behavior.\nNote: When wrapping the code in a specification, as follows, the problem persists as well:\nit('should output the file', function () {\n  require('fs').createReadStream('input.txt').pipe(process.stdout);\n});", "createdAt": "2016-03-16T19:59:45Z", "updatedAt": "2016-09-28T01:04:23Z", "closedAt": "2016-09-28T01:04:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tdecaluwe", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tdecaluwe", "company": "De Kampeerder"}, {"login": "amavisca", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-03-21T07:11:52Z", "contents": "The stream pipe interface is asynchronous, so you need to pass the done callback into the it function and call it when you are done with the test.\nhttp://jasmine.github.io/2.4/introduction.html#section-Asynchronous_Support\nSomething like:\nit('should output the file', function (done) {\n  require('fs').createReadStream('input.txt')\n   .on('end', done)\n   .pipe(process.stdout);\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1075, "url": "https://github.com/jasmine/jasmine/issues/1075", "title": "Pretty print sparse arrays", "contents": "Jasmine's pretty printer handles the string indexes of arrays nicely, but I am getting less than desirable results when a number index is used and the array is very sparse.\nI ran into this issue due to the the javascript quirk that causes numerical string indexes to be treated the same as number indexes which increases the reported length.\nvar array = [];\narray['200'] = 1;\narray['key'] = 2;\nconsole.log(jasmine.pp(array));\n[ undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ..., key: 2 ]\nThe expected output for this example would be [ 200: 1, key: 2 ].\nDense arrays should almost certainly output the way they do now. Outputting an array's number indexes is usually less readable. As far as I know there is no standard density threshold that qualifies an array as sparse.\nOne reason this is an issue is that I am getting too much unneeded output, so the qualification could be a reduction in output size. A percentage of undefined values would be the easiest. Estimating the difference in output length is possible to do in constant time, but is probably overkill.\nAnother reason this is an issue is that the actual value I am interested in gets folded into the ... and obscured by a wall of 100 undefined values. That may indicate that this is only an issue with arrays whose length exceeds that output limit (100).\n\nI am aware that there are helpers specifically built for jasmine that aid in cleaning up the output of matchers in odd use cases like this. I am using jasmine-collection-matchers.\nThis issue arises when a test like expect(foo).toHaveBeenCalledWith('arg1', 'arg2') fails and one of the spy's other (potentially unrelated) calls was passed a large, sparse array. When jasmine outputs the set of all arguments for the calls to that spy, the useful calls are obscured by the wall of undefined values.\n\n\nNote: I understand abusing arrays as objects is a weird code pattern, but I have to test some code as is before I can shift any of its paradigms.", "createdAt": "2016-03-18T17:16:04Z", "updatedAt": "2016-03-18T19:17:53Z", "closedAt": "2016-03-18T19:04:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "deckar01", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "deckar01", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "deckar01", "authorAssociation": "NONE", "createdAt": "2016-03-18T18:35:58Z", "contents": "I looks like @pivotalops, @xian, and @maxbrunsfeld made most of the major changes to the pretty printer in the past. I looks like @Gerg and @slackersoft added the array properties functionality relatively recently.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-18T19:04:53Z", "contents": "Unfortunately, I'm not sure of a great way to determine when an array is in this situation. The Jasmine pretty printer would need to be able to detect the difference between\nvar arrayWithUndefined = [undefined, undefined, 1]\nand\nvar arrayWithNumberKey = [];\narrayWithNumberKey[2] = 1;\nSince they both report a length of 3 and [0] === undefined, this gets tricky because we don't want Jasmine to just ignore/hide array values that are undefined. The other option would be to print out arrays more similar to how objects are printed which would mean:\njasmine.pp(['a', 'b', 'c'])\n=>\n[ 0: 'a', 1: 'b', 2: 'c' ]\ninstead of (currently):\n[ 'a', 'b', 'c' ]\nThe full key-based output for a simple array doesn't seem like an obvious way to view it. This seems like enough of an edge case and tricky enough to implement that it doesn't sound like something Jasmine needs itself. You should be able to provide a custom toString or jasmineToString on Array.prototype for your tests if you want to configure the output while you're moving away from this pattern.\nHope this helps. I'm going to close this issue. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "deckar01", "authorAssociation": "NONE", "createdAt": "2016-03-18T19:17:52Z", "contents": "Oh, I can define Array.prototype.jasmineToString() to customize he formatting. Thanks for the help!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1076, "url": "https://github.com/jasmine/jasmine/issues/1076", "title": "[toHaveBeenCalledWith] is not freezing the object passed to the function", "contents": "given the example:\nspyOn(accountService, 'create').and.callFake(function (account) {\n    account.id = 3;\n    return q.resolve();\n});\n\naccountService.create({name: 'Kakaroto account'});\nexpect(accountService.create).toHaveBeenCalledWith({name: 'Kakaroto account'});\nI got the following error:\nExpected spy create to have been called with [ Object({ name: 'Kakaroto account' }) ] but actual calls were [ Object({ name: 'Kakaroto account', id: 3 }) ].\nI know, it's not a good practice change the same object, this can be easily solved in my side of the code just making a copy of the account object, but the fact is: I called accountService.create with\n{ name: 'Kakaroto account' } and the test is saying I didn't.\nProbably the code is just saving a reference to the original object.\nIs there a way to just take a copy of the object when it's passed to the function?", "createdAt": "2016-03-18T19:55:54Z", "updatedAt": "2016-09-26T23:57:21Z", "closedAt": "2016-09-26T23:57:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "viniciusdacal", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "viniciusdacal", "company": "@BrandedEntertainmentNetwork"}, {"login": "motizuki", "company": "@boost "}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "motizuki", "authorAssociation": "NONE", "createdAt": "2016-03-28T10:43:18Z", "contents": "Hello @viniciusdacal,\nI believe it's just working as intended.\nAs parameters of a function in Javascript, objects are passed by 'copy of it's reference', thus any change you perform to the object itself will be effective.\nfunction replace(ref) {\n    ref = {};           // this code does _not_ affect the object passed\n}\nfunction update(ref) {\n    ref.key = 'newvalue';  // this code _does_ affect the _contents_ of the object\n}\nvar a = { key: 'value' };\nreplace(a);  // a still has its original value - it's unmodified\nupdate(a);   // the _contents_ of 'a' are changed", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2016-05-07T19:22:14Z", "contents": "Not all objects are trivially copyable, and some aren't copyable at all. Consider an object that's part of a cyclical graph, like a tree whose nodes link to both parents and children. Or an object that references something non-copyable like one of the builtin browser globals. It would be difficult to test code that uses objects like that if toHaveBeenCalledWith tried to copy its argument.\n@viniciusdacal, in the example you gave you could just pass the same object reference to both functions:\nvar account = {name: 'Kakaroto account'};\naccountService.create(account);\nexpect(accountService.create).toHaveBeenCalledWith(account);\nOf course a real test would be more involved than that, and maybe the test can't directly access the object that will be passed to createAccount. In that case you could use the tracking properties of the spy to inspect the argument, like this (untested, beware of errors):\ntriggerAccountCreationSomehow();\nexpect(accountService.create).toHaveBeenCalled();\nexpect(accountService.create.calls.argsFor(0)[0].name).toEqual('Kakaroto account')", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "viniciusdacal", "authorAssociation": "NONE", "createdAt": "2016-05-10T01:06:18Z", "contents": "Indeed, thanks for the help @motizuki @sgravrock\nSo, I think we can close this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-26T23:57:21Z", "contents": "This looks to also be a duplicate of #444. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1078, "url": "https://github.com/jasmine/jasmine/issues/1078", "title": "FeatureRequest: flags to filter specs to run", "contents": "First: amazing job guys.\nI think it would be great to allow developer to run specific specs by matching their name directly from command line.\nWhen a fail raises after a mod, it's actually a pain to search and edit the spec file to apply the \"f\" before the interested \"it\" or \"describe\" block.\nCould a flag like \"-g pattern\" to run just blocks matching the given pattern be implemented in the future?", "createdAt": "2016-03-20T17:49:08Z", "updatedAt": "2016-04-26T15:10:35Z", "closedAt": "2016-04-26T15:10:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "damianobarbati", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "damianobarbati", "company": null}, {"login": "csymeonides", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "csymeonides", "authorAssociation": "NONE", "createdAt": "2016-04-24T17:33:23Z", "contents": "Jasmine on node supports --filter, that might do the trick for you. But I prefer the idea of labelling/tagging tests, as described here, what do you think?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "damianobarbati", "authorAssociation": "NONE", "createdAt": "2016-04-26T15:10:35Z", "contents": "Wow, I don't know how could I possibly miss that.\nI was trying the standard syntax \"jasmine --filter pattern\" and \"jasmine -g pattern\".\nWell, the simple describe/it name is already a label for the block, the second option you posted looks great.\nOthre ideas:\njasmine --d upload <== run describe blocks matching upload\njasmine --i success <== run it blocks matching success\nBetter ideas:\njasmine --b upload:success <== run it blocks matching success in describe blocks matching upload\njasmine --b upload <== run describe blocks matching upload\njasmine --b :success <== run it blocks matching success\nEven better (for nested):\njasmine --b d:form:d:upload:i:success <== run it blocks matching success in describe blocks matching upload nested in describe blocks matching form\nBetter tokens can be found instead of \":\", like \"@\" or \"#\", I don't know\nThe goal of having a command line flag is isolating a block as fast as possible without touching the code . A single powerful flag like -b could solve every case.\nOtherwise just let the developer add an array of tags as you mentioned. And the -t 'tag' will run everything matching that tag. Stop. :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1080, "url": "https://github.com/jasmine/jasmine/issues/1080", "title": "Jasmine seeing parsing error", "contents": "When feeding Jasmine this dummy data:\nconst testShowInfo = '{\"id\": \"11655593\", \"artist\": \"Odesza\", \"date\": \"Thursday, March 24, 2016 at 10:00PM\", \"venue\": \"Pacific Coliseum\", \"location\": \"Vancouver, Canada\", \"tickets\": \"available\"}';\n\nconst test_csrf = 'KGSa3p5f-eJDLDjksk6FQmRqx2aouBU9zY-w';\n\n...and running this test (I'm returning and expecting an arbitrary number while I troubleshoot), I get SyntaxError: Unexpected token u:\ndescribe('The Save Show Form', function() {\n\n  beforeEach(function() {\n\n    saveShow = {\n      saveShowToDashboard: function(info, csrf) {\n        const parsedShowInfo = JSON.parse(info);\n        const _csrf = csrf;\n        const data = {\n          tourInfo: parsedShowInfo,\n          token: _csrf\n        };\n        return 2;\n      }\n    };\n\n    spyOn(saveShow, 'saveShowToDashboard').and.callThrough();\n\n    saveShow.saveShowToDashboard(testShowInfo, test_csrf);\n\n  });\n\n  it('Should return a value of 2 for this test.', function() {\n    expect(saveShow.saveShowToDashboard()).toEqual(2);\n  });\n});\n\nAccording to my browser console, everything is being parsed just fine. Could this be a bug?", "createdAt": "2016-03-21T18:52:46Z", "updatedAt": "2016-03-22T15:37:00Z", "closedAt": "2016-03-22T15:37:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danemery", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "danemery", "company": null}, {"login": "cwmoo740", "company": "Pasturemap"}], "comments_count": 2, "comments_data": [{"authorLogin": "cwmoo740", "authorAssociation": "NONE", "createdAt": "2016-03-22T02:30:02Z", "contents": "expect(saveShow.saveShowToDashboard()).toEqual(2)\nis calling JSON.parse(undefined) because it has no info argument. That's the \"unexpected token u\" error you're seeing. Either pass an argument that is parseable or add a check such as\nconst parsedShowInfo = info ? JSON.parse(info) : null;", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "danemery", "authorAssociation": "NONE", "createdAt": "2016-03-22T15:37:00Z", "contents": "I incorrectly assumed I only needed the arguments when calling it inside the beforeEach function. Thanks a ton.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1081, "url": "https://github.com/jasmine/jasmine/issues/1081", "title": "Cannot find  spec\\support\\jasmine.json'", "contents": "Today I did npm installed jasmine.  I read about configuring it, and am having issues with jasmine on istanbul. I keep gettign back\n'c:\\HA\\VSTS\\Applications\\HA.Web.Main\\spec\\support\\jasmine.json'\n\nDoes this file exist?  I see a reference to it on your docs.  All I see is the file path below.\nnode_modules >> jasmine >> lib >> examples >> jasmine.json", "createdAt": "2016-03-21T20:57:34Z", "updatedAt": "2016-03-22T02:09:43Z", "closedAt": "2016-03-22T02:09:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "winnemucca", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "winnemucca", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-22T02:09:43Z", "contents": "The jasmine library on npm is here: https://github.com/jasmine/jasmine-npm. You can find information about the jasmine.json file in the readme.\nI believe you will need to run jasmine init to create the file.\nThanks for using jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1082, "url": "https://github.com/jasmine/jasmine/issues/1082", "title": "Where can I find automatic unit test generator for JavaScript?", "contents": "Hi Guys,\nWhere can I find automatic unit test generator for JavaScript/Angular2/TypeScript?", "createdAt": "2016-03-23T21:16:52Z", "updatedAt": "2016-03-24T02:59:05Z", "closedAt": "2016-03-24T02:59:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wizardnet972", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wizardnet972", "company": "@wizardnet972"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-03-24T02:59:05Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1083, "url": "https://github.com/jasmine/jasmine/issues/1083", "title": "Spying on a function referenced from object doesn't work when this function was called indirectly", "contents": "var foo = (function() {\n\n    function bar(a) {\n        console.log(a);\n    }\n\n    function callBarWith(a) {\n        bar(a);\n    }\n\n    return {\n        bar: bar,\n        callBarWith: callBarWith\n    }\n})();\n\nvar barSpy = spyOn(foo, 'bar').and.callThrough();\n//var barSpy = jasmine.createSpy('bar', foo.bar).and.callThrough();\nfoo.callBarWith(42);\nexpect(barSpy).toHaveBeenCalled();\nexpect(barSpy).toHaveBeenCalledWith(42);\nboth variants of creating a spy doesn't work for jasmine v2.4.1\nboth result in:\n\nExpected spy bar to have been called.\nExpected spy bar to have been called with [ 42 ] but it was never called.\n\nThough following the console report, bar reference was actually called with '42' and logged the call.\nIf I replace foo.callBarWith(42) with foo.bar(42), everything works.", "createdAt": "2016-03-27T20:26:51Z", "updatedAt": "2018-04-12T00:41:03Z", "closedAt": "2016-03-29T06:15:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shamansir", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "shamansir", "company": "@JetBrains GmbH"}, {"login": "Gerg", "company": null}, {"login": "jackson-sandland", "company": "Valassis Digital"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "shamansir", "authorAssociation": "NONE", "createdAt": "2016-03-27T20:48:02Z", "contents": "Changing it to one of these variants also helps, though:\nvar foo = (function() {\n\n    var obj = {};\n\n    obj.bar = function(a) {\n        console.log(a);\n    }\n\n    obj.callBarWith = function(a) {\n        obj.bar(a);\n    }\n\n    return obj;\n\n})();\nvar foo = (function() {\n\n    function MyObject() {};\n\n    MyObject.prototype.bar = function(a) {\n        console.log(a);\n    }\n\n    MyObject.prototype.callBarWith = function(a) {\n        this.bar(a);\n    }\n\n    return new MyObject();\n\n})();\nbut that looks like changing code to make tests pass.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-03-29T06:15:42Z", "contents": "Jasmine spies will only replace the function on the returned object. The callBarWith function will still have a handle on the original function. It should work if you call this.bar in callBarWith (even without modifying the prototype).\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jackson-sandland", "authorAssociation": "NONE", "createdAt": "2018-04-11T21:58:59Z", "contents": "What is the rationale behind needing all the workaround to get spies to work as the community believes they should? When we are testing, and we create a spy, and we indicate a desire to spy on a given method, the spy should be able to listen for the same method that we called when we console.log in that method to test whether or not the spy is being called...which it is, except jasmine can't figure that out.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-12T00:41:03Z", "contents": "Unfortunately Javascript just doesn't work this way. If you've saved off a reference to the original function, Jasmine can do whatever it wants to the object you grabbed the function from, but it won't change your local variable reference to the original function. You probably don't want that anyways, as that would imply that any Javascript code running in the same process as your Javascript code can modify any of your local variables it wants to without your consent.\nAn example:\nvar foo = {\n  bar: function() {\n    console.log('original');\n  }\n};\n\nvar doThings = (function() {\n  // save off a reference to the current function stored at foo.bar\n  var myBar = foo.bar;\n\n  return function() {\n    myBar();\n  }\n})();\n\n// replace the function stored at foo.bar\nfoo.bar = function() {\n  console.log('replacement');\n};\n\ndoThings();\n> original\n\nfoo.bar();\n> replacement\nThe Jasmine spy is installed similar to the replacement part of this example, so it is similarly unable to modify the saved off local variable reference.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1084, "url": "https://github.com/jasmine/jasmine/issues/1084", "title": "Potential issue on asynchronous test using `done();`", "contents": "Hello everyone,\nBy running the test below, the beforeEach in the inner describe block doesn't wait the done() be called before executing the inners it blocks.\nSetting the inner it blocks a setTimeout of 1ms seems to solve the problem, however it doesn't seem to be ideal.\nDoes anyone have any thoughts about this? Is this really an issue?\ndescribe('some test case..', function () {\n    var User;\n    beforeEach(function(){\n        module(function($provide) {\n            $provide.value('User', {\n                performSignup: function(callback){\n                    callback('123');\n                }\n            });\n        });\n    });\n\n    beforeEach(inject(function (_User_) {\n        User = _User_;\n    }));\n\n    describe('setting local variable this.uid inside the callback', function () {\n        beforeEach(function (done) {\n            User.performSignup(function(_uid){\n                this.uid = _uid;\n                done();\n            });\n        });\n\n        it('should match value returned by callback - FAIL', function() {\n            expect(this.uid).toBe('123');\n        });\n\n        it('nasty workaround adding a 1 ms timeout - PASS', function(done) {\n            setTimeout(function(){\n                expect(this.uid).toBe('123');\n                done();\n            },1);\n        });\n    });\n});\n\n\nThanks in advance!", "createdAt": "2016-03-28T09:37:53Z", "updatedAt": "2016-08-15T17:49:52Z", "closedAt": "2016-08-15T17:49:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "motizuki", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "motizuki", "company": "@boost "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T17:49:52Z", "contents": "The other thing that is happening when you add the setTimeout like that is that the this object is different between the two calls of expect(this.uid).toBe('123');.\nIn the first it, the this is the object Jasmine provides for saving things (like your uid) for use across beforeEach, it, afterEach for a given spec. In the second it, the this will be the global object (window in a browser), which is probably the same object that it is being saved onto in the beforeEach. You should be able to check this by testing expect(window.uid).toBe('123'); or saving off the uid value in a different way.\nAdditionally, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1085, "url": "https://github.com/jasmine/jasmine/issues/1085", "title": "Documentation for `this`", "contents": "I started having memory issue and was able to run into one of the issues on github that discussed using this to clean up. I think if the documentation discussed the use of this for cleanup it would be helpful.", "createdAt": "2016-03-28T15:04:06Z", "updatedAt": "2016-08-15T17:58:21Z", "closedAt": "2016-08-15T17:58:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tpflueger", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tpflueger", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T17:58:21Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nClosing this here. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1086, "url": "https://github.com/jasmine/jasmine/issues/1086", "title": "How do i pass argument when i test a method using and.callFake in jasmine?", "contents": "I am not seeing much useful documentation, how can i pass the arguments/parameters when i test an method/function using callFake jasmine functionality?", "createdAt": "2016-03-29T13:09:03Z", "updatedAt": "2016-08-15T18:07:39Z", "closedAt": "2016-08-15T18:07:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "selvaonline", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "selvaonline", "company": "@selvaonline"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1087, "url": "https://github.com/jasmine/jasmine/issues/1087", "title": "Pretty-printing objects from a different frame results in \"[object Object]\"", "contents": "Attempting to pretty-print an object that came from another frame (or any other situation where value.toString !== Object.prototype.toString despite it not actually having a custom toString) results in the normal output of Object.prototype.toString being printed, \"[object Object]\". This seems to be due to the well-intentioned check for whether an object has a custom toString in order to prefer that over the normal pretty printing behaviour. Specifically, it is the value.toString !== Object.prototype.toString portion which causes a false positive.\nThis could be fixed by speculatively calling value.toString and comparing its output against the normal Object.prototype.toString output. If the output is different, then the value being pretty printed definitely has a custom toString and the output can be used as is.", "createdAt": "2016-04-01T16:42:09Z", "updatedAt": "2016-09-27T18:40:42Z", "closedAt": "2016-09-27T18:40:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thatfulvioguy", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "thatfulvioguy", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "thatfulvioguy", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-08T14:05:59Z", "contents": "I can submit a PR for this, if you like", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1089, "url": "https://github.com/jasmine/jasmine/issues/1089", "title": "Adding gulp-jasmine-browser to the top level README", "contents": "I'd like to advertise our headless browser and browser versions of jasmine that run specifically for node environments that require browser-like environments.\nWould it be ok to reference gulp-jasmine-browser in the top level README for people who might be looking at jasmine as a potential browser test runner in node-like environment setups? I can make the change in a pull request if you like.", "createdAt": "2016-04-06T14:54:20Z", "updatedAt": "2016-08-15T16:31:34Z", "closedAt": "2016-08-15T16:31:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rdy", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "rdy", "company": "Sony"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1090, "url": "https://github.com/jasmine/jasmine/issues/1090", "title": "Serialize objects passed to `done.fail` for readability", "contents": "When testing a promise based API the done and done.fail methods are a great help to write very efficient test code. Usually I end up with something like the following:\nit('tests some async behaviour', function (done) {\n  service.method()\n    .then(function(result) {\n      expect(result).toBe('something');\n      done();\n    })\n    .catch(done.fail);\n});\nNow if the promise is rejected with an object as error description, the error message in jasmine is only Failed: [object Object]. This does not help in finding the issue at all. Thus in general I would change the .catch method to following:\n.catch(function(err) {\n  done.fail(JSON.stringify(err));\n});\nAlthough this is not a lot of code, it bloats up the test code with repetitive \"housekeeping\" code. In worst/extreme case it might take up most of the test method.\nI would love to see a feature, where the done.fail method could print the content of a passed in object in a readable way.\nDuring my research if someone raised this issue already, I stumbled upon the functionality of \"Pretty-printing\". I don't know enough on this feature, but could this maybe be applied to the error parameter?", "createdAt": "2016-04-07T18:18:18Z", "updatedAt": "2017-03-15T00:50:51Z", "closedAt": "2017-03-15T00:50:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mmmichl", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "mmmichl", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "mmmichl", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-24T19:35:20Z", "contents": "If someone might be interested, I wrote a monkey patch:\n/**\n * Monkey patch fail method to serialize objects\n */\nvar origFail = jasmine.getEnv().fail;\njasmine.getEnv().fail = function (error) {\n  if (typeof error !== 'string' && typeof error === 'object' && !error.message) {\n    if (error.toString !== Object.prototype.toString) {\n      error = error.toString();\n    } else {\n      error = JSON.stringify(error);\n    }\n  }\n\n  return origFail.call(this, error);\n};", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-02T18:42:15Z", "contents": "I'm not sure if we want to do straight JSON serialization of the object, but we would be happy to review a pull request that makes fail in Env.js use Jasmine's pretty printer to format the object for human consumption.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1092, "url": "https://github.com/jasmine/jasmine/issues/1092", "title": "cannot spy on reactjs component functions", "contents": "Hey guys,\nI cannot spy on my reactjs component member functions.\nHere is what I have:\nvar MyComponent = React.createClass({\n  render: function() {\n    return <div className=\"my-component\">\n      <input ref=\"nameInput\" />\n      <button ref=\"btn\" onClick={this.clickHandler}>Click Me</button>\n    </div>;\n  },\n  clickHandler: function(evt) {\n    console.log('the value is: ' + this.refs.nameInput.value);\n  }\n});\nReactDOM.render(<MyComponent />, document.getElementById('container'));\n\ndescribe('mycomponent', function() {\n  var TestUtils = React.addons.TestUtils; \n\n  // Can't spy on member function!!!!!!\n  it('clickHandler gets called when the button is clicked', function() {\n    spyOn(MyComponent.prototype, 'clickHandler');\n    var testComp = TestUtils.renderIntoDocument(<MyComponent />);\n    //spyOn(testComp, 'clickHandler'); //this doesn't work either\n    var button = TestUtils.findRenderedDOMComponentWithTag(testComp, 'button');\n    TestUtils.Simulate.click(button);\n    expect(MyComponent.prototype.clickHandler).toHaveBeenCalled();\n    debugger;\n  });\n\n});\n\nCan someone please tell what I'm doing incorrectly?\nThanks.", "createdAt": "2016-04-11T21:31:39Z", "updatedAt": "2016-08-15T17:42:32Z", "closedAt": "2016-08-15T17:42:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rockneverdies55", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rockneverdies55", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T17:42:32Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1093, "url": "https://github.com/jasmine/jasmine/issues/1093", "title": "Spy failed in image onload event", "contents": "I am using karma-jasmine and browserify to test Vue component. One method listen on image on load event. But the spy that called in the event handler didn't get the right result. Following snippets shows the error:\nlet spy = jasmine.createSpy('spy')\nspy.and.returnValues({\n  name: 'name'\n})\n\ndescribe('example tests', () => {\n  it('should pass', (done) => {\n    var img = new Image()\n    img.onload = function() {\n      console.log('2', spy())\n      done()\n    }\n    img.src = \"http://dummyimage.com/100x100\"\n    console.log('1', spy())\n  })\n})\n\nhere we are, at position 1, the log shows 1, but at position 2, the log shows undefined.\nVersions:\n\njasmine-core 2.4.1\nkarma 0.13.22\nkarma-jasmine 0.3.8\nkaram-browserify 5.0.3", "createdAt": "2016-04-16T12:54:03Z", "updatedAt": "2016-04-18T00:54:55Z", "closedAt": "2016-04-18T00:54:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "holmescn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "holmescn", "company": "NiceMind"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-18T00:54:55Z", "contents": "returnValues will return undefined after it runs out of arguments: http://jasmine.github.io/2.4/introduction.html#section-Spies:_and.returnValues\nIf you want to return the same thing multiple times, use returnValue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1094, "url": "https://github.com/jasmine/jasmine/issues/1094", "title": "Angular2 (typescript) + Jasmine: require is not defined", "contents": "I have code var fs = require(\"fs\"); in app.component.ts inside my angular2 project, my app works. But when doing unit test with Jasmine, it comes with an error: require is not defined\nDoes anyone know how to do with it?", "createdAt": "2016-04-18T14:45:56Z", "updatedAt": "2016-04-18T16:47:32Z", "closedAt": "2016-04-18T16:47:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "junjunruan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "junjunruan", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-04-18T16:47:32Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1095, "url": "https://github.com/jasmine/jasmine/issues/1095", "title": "Allow reproducing of test order", "contents": "Recently I was debugging an intermittently failing test, which only happened when the tests were executed in a particular order (we have random test order enabled to prevent accidental dependencies between tests). However, this was hard to reproduce because Jasmine doesn't have functionality like in RSpec, where they print a seed that you can use to reproduce the same order. See https://relishapp.com/rspec/rspec-core/docs/command-line/randomization-can-be-reproduced-across-test-runs\nIt would be great to have something like that in Jasmine too!", "createdAt": "2016-04-18T17:37:23Z", "updatedAt": "2016-05-09T04:46:54Z", "closedAt": "2016-05-09T04:46:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "janpaul123", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "janpaul123", "company": "@cruise-automation"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-04-19T01:57:33Z", "contents": "How are you running jasmine? Jasmine supports a seed option (exposed as query parameter in jasmine-html) for manually specifying seeds. It should be supported in the latest versions of the binding libraries.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "janpaul123", "authorAssociation": "NONE", "createdAt": "2016-05-09T04:46:54Z", "contents": "Ah, I'm running it with karma-jasmine and karma-jasmine-html-reporter and don't see it in the interface, nor does the query parameter work there. But I'll look into those projects then, possibly they use an old version. Thanks for your help!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1096, "url": "https://github.com/jasmine/jasmine/issues/1096", "title": "Should {} ==  Object.create(null)? ", "contents": "I am testing a map built with Object.create(null), before it was with {}.\nEx:\nexpect({}).toEqual(Object.create(null))\nError message:\nExpected Object({  }) to equal null({  })\nThis weird message comes from PrettyPrinter L119\nThe expect:false comes from: matchersUtil L181 because Object.create(null).constructor is undefined.\nShould we use // Deep compare objects. for this one ?", "createdAt": "2016-04-19T11:40:52Z", "updatedAt": "2016-08-19T21:04:47Z", "closedAt": "2016-08-19T21:04:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dhoko", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dhoko", "company": "\u00af\\_(\u30c4)_/\u00af"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "dhoko", "authorAssociation": "NONE", "createdAt": "2016-04-19T12:21:49Z", "contents": "With this it works:\nif (className !== '[object Array]') {\n  var aCtor = a.constructor, bCtor = b.constructor;\n  if (\n      aCtor !== bCtor\n      && !(\n        isFunction(aCtor)\n        && aCtor instanceof aCtor\n        && isFunction(bCtor)\n        && bCtor instanceof bCtor )\n    ) {\n\n    if (bCtor) {\n      return false;\n    }\n  }\n}\nTests:\nvar noProto = Object.create(null);\nnoProto.name = 1;\nfunction Toto() {\n   this.name = 1\n}\nvar otherProto = new Toto()\n\nexpect({}).toEqual({}) // true\nexpect({}).toEqual(Object.create(null)) // true\nexpect({name: 1}).toEqual(noProto) // true\nexpect({name: 1}).toEqual(otherProto) // false", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-19T21:04:47Z", "contents": "The pretty printer is attempting to show you that these objects differ based on the constructor used to create them. That's what the bit before the parentheses is.\nClosing this as a duplicate of #598 and desired functionality for now. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1097, "url": "https://github.com/jasmine/jasmine/issues/1097", "title": "Unable to Handle model dialog in two different it().", "contents": "Hi,\nI've a scenario where clicking on a button will cause alert pop-up. I need to read the text inside the alert (alert.getText() is working) and then accept it(alert.accpet() working also). However, when i split alert.getText() and alert.accept() to two different its() the script is failing with Model dialog present\ni Need to alert.getText() and alert.accept() in two different its(). Could some one please let me know if that is possible?\nENV:\nProtractor 3.0.0.\nIE 9.0\njasmine 2.x\nRegards,\nJagadeesh", "createdAt": "2016-04-19T14:58:28Z", "updatedAt": "2016-08-17T20:52:07Z", "closedAt": "2016-08-17T20:52:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Kothajagadeesh", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Kothajagadeesh", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-17T20:52:07Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1100, "url": "https://github.com/jasmine/jasmine/issues/1100", "title": "Custom equality doesn't work with toHaveBeenCalledWith()?", "contents": "describe(\"custom equality\", function() {\n  var eq = function(a,b) {\n    return a==b;\n  };\n\n  beforeEach(function() {\n    jasmine.addCustomEqualityTester(eq);\n    spyOn(console, 'log');\n  });\n  it('should work with toEqual()', function() {\n    expect('1').toEqual(1);\n  });\n\n  it('should work with toHaveBeenCalledWith()', function() {\n    console.log('1');\n    expect(console.log).toHaveBeenCalledWith('1');\n    expect(console.log).toHaveBeenCalledWith(1);\n\n  });\n});\n\nUsing jasmine-standalone 2.4.1", "createdAt": "2016-04-25T19:05:44Z", "updatedAt": "2016-09-26T23:41:04Z", "closedAt": "2016-09-26T23:41:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "awong9", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "awong9", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-26T23:41:04Z", "contents": "This is happening because when toHaveBeenCalledWith checks for argument equality, it has 2 arrays of arguments in order to handle multiple functions with multiple arguments. Because of that, and because in javascript [1] != [1] you may want to change your custom equality tester to only work on things that aren't arrays, something like this should give you the behavior you are expecting:\njasmine.addCustomEqualityTester(function(a, b) {\n  if (!(a instanceof Array) && !(b instanceof Array)) {\n    return a == b;\n  }\n});\nClosing this, as I believe this is the desired behavior. By returning a non-undefined value from your equality tester, you are telling Jasmine that you know how to compare the two objects. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1102, "url": "https://github.com/jasmine/jasmine/issues/1102", "title": "Tests Fail When Boot.js is Included", "contents": "I have bunch of tests which I was running through Visual Studio but now I am trying to implement the tests such that I can run them through the command line using Karma.  After trying to use Karma, my tests started to fail so I assumed that this was Karma's fault but now I think it might be linked to Jasmine.\nI think it is linked to Jasmine because I started only including files I really needed into my karma.config.js file.  I removed jasmine/boot.js and my tests stopped failing.\nLet's say I have a test in this format...(as an example)\ndescribe(\"\", () => {\n    console.log(\"describe1\");\n    beforeEach(() => {\n        console.log(\"beforeEach\");\n    });\n\n    describe(\"\", () => {\n        console.log(\"describe2\");\n        it(\"\", () => {\n            console.log(\"it1\");\n        })\n\n        it(\"\", () => {\n            console.log(\"it2\");\n        })\n    });\n});\n\nWhat would happen is my first describe would run, then the second describe and then the beforeEach and then the first it and so on.  The problem was that after my test successfully ran it would run the its again without running the beforeEach and thus the tests would fail.\nExample Output of Above Code\ndescribe1\ndescribe2(note that the \"it\"s are not executed)\nbeforeEach\nit1\nbeforeEach\nit2(so far so good but now...)\nit1(notice how before each didn't run but the \"it\"s were reran here and below)\nit2", "createdAt": "2016-04-27T20:28:21Z", "updatedAt": "2016-05-02T15:12:55Z", "closedAt": "2016-05-02T15:12:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lpolya", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "lpolya", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1103, "url": "https://github.com/jasmine/jasmine/issues/1103", "title": "Function.prototype.apply.apply does not work with JavaScriptCore on iOS ?", "contents": "I figured out that the function \"Function.prototype.apply.apply\" does not work with JavaScriptCore on iOS. I am using only the function \"Function.prototype.apply\" and it is working now.", "createdAt": "2016-04-28T16:04:35Z", "updatedAt": "2018-03-29T00:22:53Z", "closedAt": "2018-03-29T00:22:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chreck", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chreck", "company": "Milk Interactive AG"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-27T00:23:41Z", "contents": "Can you give us a bit more information about what errors you're seeing when you run with the apply.apply? That code is there to make sure that the setTimeout calls are executed in the correct context with the correct arguments, so simply removing one of the applys is probably causing some subtle (possibly unnoticed) bugs in your suite.\nWe would be happy to review a pull request that solves whatever problems you're having without breaking the current functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-29T00:22:47Z", "contents": "We haven't heard anything more about this issue in a while and it sounds like it's more of an issue in JavaScriptCore than Jasmine itself. I'm going to close this for now.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1104, "url": "https://github.com/jasmine/jasmine/issues/1104", "title": "argsFor not working for nested calls and same data object", "contents": "Hello, I've been having an issue with argsFor with a function called twice in a nested manner.\nThe function takes a params object, a data object and a callback. Inside the callback I call the original function but changing slightly the data object. Then, inside the test, argsFor(0) and argsFor(1) show the same data object (the one of the last call).\nI was able to replicate the issue in plunker: http://plnkr.co/edit/5RBrnBhKkutYe1coyg7P\nI added a bunch of console.log so you may check that the args are not working as expected.\nIt's important to mention that the controller works fine, the data object is sent as expected.", "createdAt": "2016-04-30T17:05:14Z", "updatedAt": "2016-09-27T00:46:07Z", "closedAt": "2016-09-27T00:46:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mikeiwi", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mikeiwi", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T00:46:06Z", "contents": "The issue is that you are modifying the data object that the spy is holding on to. This issue is a duplicate of #444.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1105, "url": "https://github.com/jasmine/jasmine/issues/1105", "title": "strange jasmine.onComplete behaviour", "contents": "Strange behavior with onComplete, anytime when I create  more than 18 specs, onComplete does not get called\njasmine.onComplete(function () { istanbul.printCoverage(coverageOpts); });\njasmine.execute(files.src);\nfor(var i = 0; i < 17; i++) { it('should be defined', function () { expect(User).toBeDefined(); }); }\n17 specs, 0 failures\nFinished in 0.004 seconds\n----------|----------|----------|----------|----------|----------------|\nFile      |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n----------|----------|----------|----------|----------|----------------|\nmodel/   |       50 |      100 |       50 |       50 |                |\nuser.js |       50 |      100 |       50 |       50 |          5,6,7 |\n----------|----------|----------|----------|----------|----------------|\nAll files |       50 |      100 |       50 |       50 |                |\n----------|----------|----------|----------|----------|----------------|\nif I create 18 specs\nfor(var i = 0; i < 18; i++) { it('should be defined', function () { expect(User).toBeDefined(); }); }\nonComplete function is ignored and result it like this\nStarted\n..................\nDone, without errors.", "createdAt": "2016-05-02T09:40:14Z", "updatedAt": "2016-05-02T11:25:48Z", "closedAt": "2016-05-02T11:25:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jwnoz", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jwnoz", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1108, "url": "https://github.com/jasmine/jasmine/issues/1108", "title": "Severe memory leak in core", "contents": "While tracking down a memory leak in my Angular + Jasmine + Karma + Chrome test suite (the leak is bad enough that Chrome disconnects by the end of every test run, causing the suite to fail), I tried to write the simplest possible test setup to see if the leak exists there.\nWhat I noticed is when running the same test in a loop (eg. 100,000x), memory usage as measured by top keeps climbing. The Chrome Browser process starts at around 240MB of memory, and climbs linearly to ~450MB until the suite is completed.\nIt seems like Jasmine is allocating a bunch of objects, and preventing GC from happening.\nRepro code is below:\n// spec.js:\n\nfunction test() {\n  it('should pass', function() {\n    expect(true).toBe(true)\n  })\n}\n\ndescribe('test', function() {\n  for (var n = 0; n < 100000; n++) {\n    test()\n  }\n})\n// karma.conf.js:\n\nmodule.exports = function (config) {\n  config.set({\n    frameworks: ['jasmine'],\n    files: [\n      './spec.js'\n    ],\n    browsers: ['Chrome']\n  })\n}\nFull repro code is in this repo: https://github.com/bcherny/jasmine-leak-test.\nAnd here is a memory timeline of the original leak, while running ~1500 tests for our production codebase:", "createdAt": "2016-05-04T22:02:36Z", "updatedAt": "2018-08-22T00:31:49Z", "closedAt": "2016-07-13T03:01:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bcherny", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "bcherny", "company": "@Facebook"}, {"login": "timaschew", "company": "@heremaps"}, {"login": "Gerg", "company": null}, {"login": "brandonros", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 11, "comments_data": [{"authorLogin": "timaschew", "authorAssociation": "NONE", "createdAt": "2016-05-24T13:02:09Z", "contents": "I don't think it's jasmine, the same happens with mocha: https://github.com/timaschew/jasmine-leak-test", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcherny", "authorAssociation": "NONE", "createdAt": "2016-05-24T18:24:41Z", "contents": "@timaschew Pretty interesting stuff. I ran a timeline on your mocha suite, and the leak there feels a bit different - less frequent GC, more memory reclaimed at each GC-\nMocha:\n\nJasmine:\n\nWhat do you think this is, if not the test framework? Karma? Chrome?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timaschew", "authorAssociation": "NONE", "createdAt": "2016-05-24T18:56:14Z", "contents": "Oh, indeed. I just compared the total memory in my activity monitor and there was just a difference of 70MB (490 vs. 420).\nMy impression is that it's karma, but you could try it with Firefox and also just on Node.js without any karma and use node-inspector for profiling.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-13T03:01:29Z", "contents": "Hey @bcherny\nLooks like this leak was not caused by Jasmine. Feel free to re-open if you find evidence to the contrary.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcherny", "authorAssociation": "NONE", "createdAt": "2016-07-13T18:19:11Z", "contents": "To put some closure on this, it looks like this is just the way V8's GC works. Unless we are hitting some critical threshold of memory usage, V8 will avoid doing a GC until there is a pause in computation; with a bunch of synchronous operations (like in our test), it avoids pausing for GC.\nTo confirm this, I ran a synchronous and asynchronous loop in Chrome, without Jasmine or Karma. The respective timelines make it pretty clear:\nSynchronous:\n<!doctype html>\n<html>\n  <body>\n    <script>\n      function test() {\n        var a = [1, 2, 3]\n      }\n\n      for (var n = 0; n < 10000000; n++) {\n        test()\n      }\n    </script>\n  </body>\n</html>\n\nAsynchronous:\n<!doctype html>\n<html>\n  <body>\n    <script>\n      function test() {\n        var a = [1, 2, 3]\n      }\n\n      var n = 10000000\n      function loop() {\n        test()\n        if (n-- > 0) {\n          setTimeout(loop, 0)\n        }\n      }\n      loop()\n    </script>\n  </body>\n</html>", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brandonros", "authorAssociation": "NONE", "createdAt": "2018-06-27T06:02:23Z", "contents": "Is there any way to pause execution? I have a ton of unit tests dying becuase of this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-19T00:17:41Z", "contents": "Newer versions of Jasmine should be going asynchronous in their execution much more often than previous versions. Currently, we should ensure a call to setTimeout approximately every 10 specs (specs aren't the only thing that causes the stack to clear) even if we're using MessageChannel or setImmediate for other stack clearing. The intent was to fix exactly this kind of issue where Jasmine wasn't fully giving up the stack, while still making use of the lower overhead functionality when available.\n@brandonros what version of Jasmine are you using? Do you have a sample Jasmine suite so we can reproduce and try to fix the error you're seeing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brandonros", "authorAssociation": "NONE", "createdAt": "2018-07-22T15:13:22Z", "contents": "@slackersoft A super old version. I will update. However... do you think it makes any difference that Chrome dies while executing the tests, but Firefox does not?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-25T00:47:48Z", "contents": "Based on @bcherny's comment, it is probably just a v8 optimization gone awry with the suite, and not cleaning up ever which causes a crash. I would love to hear whether a newer version of Jasmine fixes your issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brandonros", "authorAssociation": "NONE", "createdAt": "2018-07-26T03:39:20Z", "contents": "Confirmed this still happens in the latest jasmine version.\nNot sure what else to provide. I can't provide my code base with 4,000+ unit tests... but... Chrome Helper crawls from 200mb memory to 2gb of memory then dies at about the 1,000th unit test.\nFirefox, no problems.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-22T00:31:49Z", "contents": "I can't seem to get a reproduction case that does anything other than just cause Chrome or Firefox to slow way down. When you say that the suite \"dies\" in Chrome, what particular error message are you seeing? Are you using any javascript frameworks (Angular, React, etc.)? Something like that might help narrow down what is allocating the memory and possibly not letting it be freed.\nThe only way I can really get anything that feels like a memory leak is by having my specs specifically save things off outside of the specs.\nlet stuff = [];\n\nfor(var j=0; j<1000; j++) {\n  describe('The Thing ' + j, function() {\n    let things;\n\n    beforeEach(function() {\n      things = makeStuff();\n      stuff[0] = things;\n      // stuff.push(things);\n      // if (stuff.length > 100) { stuff[stuff.length-100] = null; }\n    });\n\n    it('does things', function() {\n      return new Promise(function(resolve) {\n        expect(stuff[stuff.length-1]).toEqual(things);\n        resolve();\n      });\n    });\n  });\n}\nIf I change the commented lines to use the push and save all of the data off for the duration of the suite, it slows way down, but this doesn't seem like the use case you mention.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1109, "url": "https://github.com/jasmine/jasmine/issues/1109", "title": "Jasmine doesn't seems to recognize Jquery parameter", "contents": "I'm trying to make jasmine work with node. I haven't found any useful information about my problem. Maybe the documentation was not clear enough for me. So I decided to ask you guys.\nI've configured my jasmine.json like this:\n{\n  \"spec_dir\": \"assets\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"assets/vendors/jquery.min.js\",\n    \"js/src/*.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\nWorking tree:\ncodedummies\n  assets\n    js\n      src\n        script.js\n      spec\n        scriptSpec.js\n    vendors\n      jquery.min.js\n  spec\n    suport\n      jasmine.json\n\nAnd I got this error:\njQuery is not defined\njQuery is passed as a parameter for my IIF javascript file like this:\n...})(jQuery);", "createdAt": "2016-05-05T00:27:21Z", "updatedAt": "2016-08-15T22:44:08Z", "closedAt": "2016-08-15T22:44:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wellyal", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wellyal", "company": "Easynvest"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-15T22:44:07Z", "contents": "The paths passed to helpers should be relative to the specified spec_dir, so you probably want to remove the assets/ from the jquery path.\nAdditionally, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1110, "url": "https://github.com/jasmine/jasmine/issues/1110", "title": "jsApiReporter Documentation", "contents": "Hello,\nI'm trying to get the test results within Javascript, I've seen that Jasmine provides a jsApiReporter interface but how is it used? I can't find any documentation of a real scenario which handles the test results.\n@note\nI was able to handle the results using a custom reporter, but I'm a little confused about the jsApiReporter support.\nThanks.", "createdAt": "2016-05-05T13:58:08Z", "updatedAt": "2016-07-13T03:38:41Z", "closedAt": "2016-07-13T03:38:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joafalves", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "joafalves", "company": "Wit-Software"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-13T03:38:41Z", "contents": "The jsApiReporter is not technically considered part of Jasmine's public interface (and is therefore subject to breaking changes). It is used by Jasmine binding libraries like jasmine-py.\nThat said, it has been relatively stable and would be a useful tool for developers like yourself. In the future I could see us committing to keep it stable and document it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1111, "url": "https://github.com/jasmine/jasmine/issues/1111", "title": "Unable to fail test if expect fails", "contents": "Hi,\nWhile using Jasmine 1.3, I was able to stop execution using \"fail()\" function long back but unable to do the same nowadays(since I'm getting error-\n\nReferecne error: fail()\n\n). So, upgraded to Jasmine 2.4 only to overcome this but I'm unable to abort test ('it' block) if any expect fails even in jasmine 2.4.\nCan anyone please guide me in aborting a test if any expect fails in jasmine 2.4\nThanks in advance.", "createdAt": "2016-05-10T10:55:35Z", "updatedAt": "2016-09-24T00:48:54Z", "closedAt": "2016-09-24T00:48:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bharathp", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bharathp", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-24T00:48:54Z", "contents": "As of Jasmine 2.3, you can stop specs on execution failure. This is configurable in your browser using the menu in the top right, with the query parameter throwFailures, or by using certain jasmine runners' config files.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1112, "url": "https://github.com/jasmine/jasmine/issues/1112", "title": "Unable to get spec description and test description", "contents": "Hi,\nI'm in need of getting my spec description in \"onPrepare\" block in order to replicate them in my own customized html report and appending 'it' block's title to my screenshot.png file name.\nAble to get the spec name only when control gets into 'it' block, but not before or after that.\nI've stuck here from many days and been trying in multiple ways as mentioned in many blogs but couldn't achieve this.\nI think this feature is most important for anyone to access their own test names. Could you please provide any possible solution to achieve this.\nThanks  in advance.", "createdAt": "2016-05-10T11:06:09Z", "updatedAt": "2016-09-27T00:39:05Z", "closedAt": "2016-09-27T00:39:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bharathp", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bharathp", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T00:39:05Z", "contents": "This appears to be a duplicate of #1212. See discussion in that thread.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1113, "url": "https://github.com/jasmine/jasmine/issues/1113", "title": "Jasmine throws an exception when test case finishes and a call to done() is made.", "contents": "At the end of my test, jasmine throws an exception and does not proceed to the next test case. Everything in the test function executes okay until when jasmine calls the done function.\nat emitOne (events.js:77:13)\n    at process.emit (events.js:169:7)\n    at process.exit (node.js:750:17)\n    at Jasmine.module.exports [as exit] (/usr/local/lib/node_modules/jasmine/lib/exit.js:6:5)\n    at /usr/local/lib/node_modules/jasmine/lib/jasmine.js:160:23\n    at jasmineDone (/usr/local/lib/node_modules/jasmine/lib/reporters/exit_code_reporter.js:10:5)\n    at dispatch (/usr/local/lib/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1966:28)\n    at ReportDispatcher.jasmineDone (/usr/local/lib/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1949:11)", "createdAt": "2016-05-10T11:57:50Z", "updatedAt": "2017-07-31T21:21:26Z", "closedAt": "2017-07-31T21:21:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mjilugu", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mjilugu", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "CanadianEngineer", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T19:31:52Z", "contents": "What version of Jasmine are you using? jasmine -v should tell you both core and npm versions.\nWhat operating system are you on?\nI almost looks like you have something that is trying to listen to the exit event for the node process. The stacktrace shows that Jasmine is all done and is just trying to exit the process with the correct status code based on the state of your test suite, so there shouldn't be any further test cases for it to run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "CanadianEngineer", "authorAssociation": "NONE", "createdAt": "2017-04-06T00:02:59Z", "contents": "Hey, I'm having a similar issue. done() is throwing an exception for me too, but its just a console error:\n\"Error: 'expect' was used when there was no current spec, this could be because an asynchronous test timed out at ZoneAwareError (http://localhost:9876/base/src/polyfills.ts?8d67a63699a64c8ce0721c5da8532bf8af5893fc:3640:33) at Env.expect (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?916005cc407925f4764668d61d04888d59258f5d:970:15) at expect (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?916005cc407925f4764668d61d04888d59258f5d:3616:18) at SafeSubscriber._next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:30805:13) at SafeSubscriber.__tryOrUnsub (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:615:16) at SafeSubscriber.next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:564:22) at Subscriber._next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:504:26) at Subscriber.next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:468:18) at CatchSubscriber.Subscriber._next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:504:26) at CatchSubscriber.Subscriber.next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:468:18) at MapSubscriber._next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:12696:26) at MapSubscriber.Subscriber.next (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:468:18) at XMLHttpRequest.onLoad (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:56494:38) at ZoneDelegate.920.ZoneDelegate.invokeTask (http://localhost:9876/base/src/polyfills.ts?8d67a63699a64c8ce0721c5da8532bf8af5893fc:3015:31) at ProxyZoneSpec.onInvokeTask (http://localhost:9876/base/src/test.ts?dad5650f71248117cafded2f7873f7a403f3e5ce:94643:39) at ZoneDelegate.920.ZoneDelegate.invokeTask (http://localhost:9876/base/src/polyfills.ts?8d67a63699a64c8ce0721c5da8532bf8af5893fc:3014:36)\"\nI'm on Debian 8,\nnpm view jasmine version : 2.5.3", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-10T20:34:38Z", "contents": "@CanadianEngineer I think your issue is different from the one mentioned in the first post here. Based on the error message it looks like you have a call to expect that occurs after the done function has been called (or otherwise outside of any Jasmine spec).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-31T21:21:26Z", "contents": "We haven't heard anything else on this issue in a while, so I'm going to close it. If you have more information, or an example suite, please open a new issue. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["npm"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1115, "url": "https://github.com/jasmine/jasmine/issues/1115", "title": "Testing set/get", "contents": "Testing the following snippet\nsave(data, successMessage) {\n    chrome.storage.local.set(data, (error) => {\n      if (error) {\n        this.status('Error Occurred. Please refresh.', 1000, 100, 'danger');\n      } else {\n        this.status(successMessage, 1000, 100, 'success');\n      }\n    });\n  }\n}\nOn calling save(data, message), it should call chrome.storage.local.set(...). The spyOn function returns the following error:\nError: set is not declared writable or has no setter in /path/to/jasmine (line 2008)", "createdAt": "2016-05-15T17:04:32Z", "updatedAt": "2016-08-30T14:28:08Z", "closedAt": "2016-05-16T18:41:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ankit-m", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ankit-m", "company": "@postmanlabs "}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "herodrigues", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2016-05-16T15:35:46Z", "contents": "Well, I think the error is quite clear. You are trying to overwrite (patch/spy on) a function that is not allowed to be overwritten. You're going to have to find a different way to mock out the chrome.storage part.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ankit-m", "authorAssociation": "NONE", "createdAt": "2016-05-16T18:40:53Z", "contents": "@jaapz Thank you!", "reactions_count": 1, "reactions_data": ["LAUGH"]}, {"authorLogin": "herodrigues", "authorAssociation": "NONE", "createdAt": "2016-08-30T02:01:15Z", "contents": "@ankit-m have you found a good solution for this situation?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ankit-m", "authorAssociation": "NONE", "createdAt": "2016-08-30T04:48:00Z", "contents": "@herodrigues this is how I solved it\n// in the start of the file where test cases are written\n// NOTE: this overrides chrome.storage.local.set/get everywhere while testing\nglobal.chrome =  {\n  storage: {\n    local: {\n      get: jasmine.createSpy('get'),\n      set: jasmine.createSpy('set')\n    }\n  }\n}\n\n// in the test cases\ndescribe('test something', () => {\n  var chrome;\n  beforeEach(() => {\n    chrome = global.chrome;\n  });\n...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "herodrigues", "authorAssociation": "NONE", "createdAt": "2016-08-30T14:27:32Z", "contents": "@ankit-m this will override everything under chrome?\nFor example, if I print chrome global variable with console.log(chrome) without overriding it, I get the whole chrome API object. However, if I do something similar like what you did, I just get a simple object:\nWithout overriding it:\nLOG: Object{alarms: Object{}, bookmarks: Object{}, browserAction: Object{}, browsingData: Object{}, certificateProvider: Object{}, commands: Object{}, contentSettings: ...\n\nOverriding browserAction.setIcon:\nLOG: Object{browserAction: Object{setIcon: Object{get: ..., set: ...}}}\n\nWhat I want to do is to simulate a user clicking and browsing with my extension.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1116, "url": "https://github.com/jasmine/jasmine/issues/1116", "title": "API Document PLEASE!", "contents": "I really hate tools without api doc, It's too hard to use!\nif I must look out method from source code??", "createdAt": "2016-05-16T08:44:51Z", "updatedAt": "2016-10-15T00:44:22Z", "closedAt": "2016-10-15T00:44:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "qx", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "qx", "company": null}, {"login": "glebec", "company": "@FullstackAcademy"}, {"login": "Gerg", "company": null}, {"login": "stijnherreman", "company": null}, {"login": "alewang", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "glebec", "authorAssociation": "NONE", "createdAt": "2016-05-25T02:41:56Z", "contents": "http://jasmine.github.io/2.4/introduction.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-13T03:39:36Z", "contents": "@qx is that what you were looking for? If not, what documentation would you expect? How could we better surface the documentation?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "qx", "authorAssociation": "NONE", "createdAt": "2016-07-19T14:32:32Z", "contents": "Sorry for late reply, introduction is good for learn ,but not for search. @Gerg", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stijnherreman", "authorAssociation": "NONE", "createdAt": "2016-08-25T14:04:57Z", "contents": "A TOC would be handy on that introduction page.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alewang", "authorAssociation": "NONE", "createdAt": "2016-09-08T23:20:36Z", "contents": "I would like a page that cleanly lists what sorts of objects and methods are available. A wall of text is definitely not helpful (edit: although the information contained in that wall of text definitely is helpful).\nSomething like Protractor's API page would be neat: http://www.protractortest.org/#/api", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-15T00:44:22Z", "contents": "I'm going to close this as a duplicate of #596\nPlease continue any discussion there. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1117, "url": "https://github.com/jasmine/jasmine/issues/1117", "title": "Feature request for spyOn - pass method directly instead of using string constant for identification", "contents": "If I spy on a method with\nspyOn(parent, 'methodToSpyOn')\nand the name of the method changes during refactoring, I have to manually\nadapt the string argument.\nTherefore I suggest to include a method like\nspyOnMethod(self, self.methodToSpyOn);\nthat does not use a string constant for the identification but retrieves the method directly.\nWhen changing the method name during refactoring, my IDE will be able to adapt the argument automatically.\nA method with only one argument would be even better, but I guess\nthis is not possible since the parent needs to be known:\nspyOnMethod(self.methodToSpyOn);\nHere is a first draft for an implementation:\nfunction spyOnMethod(parent, methodToSpyOn) {\n  var methodName = getMethodName(); \n  return spyOn(parent, methodName);\n\n  function getMethodName() {\n    var foundAttributeName = null;\n    var attributeNames = Object.keys(parent);\n    _.forEach(attributeNames, function (name) {\n      var attribute = parent[name];\n      if (attribute === methodToSpyOn) {\n        foundAttributeName= name;\n      }\n    });\n    return foundAttributeName;\n  }\n}", "createdAt": "2016-05-18T10:17:20Z", "updatedAt": "2016-10-15T00:29:51Z", "closedAt": "2016-10-15T00:29:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefaneidelloth", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "stefaneidelloth", "company": null}, {"login": "glebec", "company": "@FullstackAcademy"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "glebec", "authorAssociation": "NONE", "createdAt": "2016-05-25T02:47:19Z", "contents": "The parent does not need to be known. You can use an alternate syntax to spy on any function.\nvar spy = jasmine.createSpy().and.callFake(obj.method);\nBy the same token you can replace a method with such a spy.\nobj.method = jasmine.createSpy().and.callFake(obj.method);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "stefaneidelloth", "authorAssociation": "NONE", "createdAt": "2016-05-25T06:23:32Z", "contents": "Thank you! Using that I get for example\nvar methodMock = function(){};\n....\n\ndefine('fooTest', function(){\n   ....\n   methodMock = spyOnMethod(methodMock);\n   ...\n);\n....\nfunction spyOnMethod(methodToSpyOn){\n    return jasmine.createSpy().and.callFake(methodToSpyOn);\n}", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-15T00:29:51Z", "contents": "In order to install and uninstall a spy on an existing object, Jasmine needs to know that object. This also means that by simply replacing obj.method yourself as @glebec suggests, Jasmine won't be able to remove the spy once the spec completes and it will remain spied upon for any further specs in your suite.\nIf you call createSpy without a name parameter, you also lose some better error messages when you check toHaveBeenCalled.\nI think the spyOnMethod potentially creates too many options when trying to spy on a method, for not very much gained. It potentially causes confusion as to which way a user should spy.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1118, "url": "https://github.com/jasmine/jasmine/issues/1118", "title": "works via CLI but not through HTML, 404 not found", "contents": "This is a project written by Typescript, I use jasmine to do some unit testing. Now it can work via the command line, but doesn't work with the fancy html page. It said 404, how to solve it?\nThis is my UnitTest.html, it is in the root of the project.\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n    <title>My App Unit Tests</title>\n    <link rel=\"stylesheet\" href=\"node_modules/jasmine-core/lib/jasmine-core/jasmine.css\">\n    <script src=\"node_modules/jasmine-core/lib/jasmine-core/jasmine.js\"></script>\n    <script src=\"node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js\"></script>\n    <script src=\"node_modules/jasmine-core/lib/jasmine-core/boot.js\"></script>\n</head>\n\n<body>\n    <script src=\"node_modules/systemjs/dist/system.src.js\"></script>\n    <script src=\"node_modules/typescript/lib/typescript.js\"></script>\n    <script>\n        System.config({\n            transpiler: 'typescript'     \n        });\n        System.import('./spec/UnitTest.spec.ts')\n            .then(window.onload)\n            .catch(console.error.bind(console));\n    </script>\n</body>\n\n</html>\n\nThis is the jasmine.json\n{\n  \"spec_dir\": \"spec\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"helpers/**/*.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n\nThis is the actural test file, in the \"spec\" folder, the folder is the just under the root.\nimport { FindViewModel } from '../Application/TS/ViewModels/FindViewModel';\nimport { ISpeechService } from '../Emulator/TS/Services/ISpeechService';\n\n\ndescribe('Tests for the FindViewModel', () => {\n  it('getKeyword() should return a string', () => {\n    let returnValue: string = (new FindViewModel()).getKeyword();\n    expect(returnValue).toEqual(jasmine.any(String));\n  });\n\n  it('getKeywordByVoice() should return a string', () => {\n    let checkThisValue:string;\n    class mockSpeech implements ISpeechService{\n        recognize():string{\n            return checkThisValue;\n        }\n    }\n\n    let testFindViewModel = new FindViewModel();\n    let findKeywordByVoice = testFindViewModel.getKeywordByVoice(new mockSpeech());\n    expect(findKeywordByVoice).toEqual(checkThisValue);\n  });\n});\n\nAfter compile the Typescript, It can run smoothly via cli, I can comfirm, because when I try to screw the test, it throws exception.\n\nBut it won't run via browser, The error from the browser is just as following, seems can't find the File that imports from the unittest.spec.ts?\n\n\nThis is my structure of the project.\n\nHow to solve it?", "createdAt": "2016-05-18T13:15:24Z", "updatedAt": "2016-11-18T20:17:56Z", "closedAt": "2016-11-18T20:17:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Albert-Gao", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Albert-Gao", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T20:17:56Z", "contents": "Since you're letting the TypeScript library load all of your code and tests, you'll need to stop Jasmine from executeing your suite when window.onload is triggered and wait to start that until TypeScript has loaded everything down from the server. Jasmine can only execute specs it knows about.\nClosing, since this doesn't sound like it is a problem with Jasmine itself. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1119, "url": "https://github.com/jasmine/jasmine/issues/1119", "title": "Passing undefined/null to beforeEach() causes tests to be silently skipped.", "contents": "Passing undefined or null to beforeEach() causes the tests in the given spec file to be silently skipped, without any error. Here's an example showcasing the problem in Jasmine 2.4.1: http://codepen.io/anon/pen/EKzqVe\nThe issue seems to occur on this line - queueableFn.fn ends up being undefined, so the attempt at accessing .length throws an error which is somehow swallowed (you can see the issue using the \"Pause On Caught Exceptions\" feature of Chrome's Devtools).", "createdAt": "2016-05-18T17:55:50Z", "updatedAt": "2016-10-15T00:33:05Z", "closedAt": "2016-10-15T00:33:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "voithos", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "voithos", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-15T00:33:05Z", "contents": "This sounds like a duplicate of #1004. Closing in favor of the more comprehensive issue there.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1120, "url": "https://github.com/jasmine/jasmine/issues/1120", "title": "`random: true` in config json doesn't appear to work", "contents": "I just started using jasmine and am used to having specs randomized in other languages. I'd prefer not to have to type --random=true to have this. Here is my config file:\n{\n  \"spec_dir\": \"spec\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"helpers/**/*.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": true,\n  \"random\": true\n}\nHere is my jasmine version output:\n$ jasmine version\njasmine v2.4.1\njasmine-core v2.4.1\n\nHere is what JASMINE_CONFIG_PATH is set to:\n$ echo $JASMINE_CONFIG_PATH\nspec/config/jasmine.json\n\nAnd here is where my config file is located:\n$ find spec | grep json\nspec/config/jasmine.json\n\nI also tried putting the config where jasmine init placed it under spec/support/jasmine.json and setting the environment variable but no go. I'm running jasmine in a loop forever and it doesn't hit a failure I wrote that depends on the ordering of tests. When I run jasmine --random=true it shows up 50% of the time as expected. Not sure what I'm missing here.", "createdAt": "2016-05-21T23:51:51Z", "updatedAt": "2016-09-28T18:00:26Z", "closedAt": "2016-09-28T18:00:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jasonkeene", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jasonkeene", "company": null}, {"login": "zack", "company": "@etsy"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "zack", "authorAssociation": "NONE", "createdAt": "2016-09-22T12:19:03Z", "contents": "The documentation at https://jasmine.github.io/2.5/node.html shows random: ..., where you have \"random\": .... Same with stopSpecOnExpectationFailure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jasonkeene", "authorAssociation": "NONE", "createdAt": "2016-09-24T00:58:23Z", "contents": "@zack I would say the docs are wrong in that case since without the \" it is invalid json. I seriously doubt they'd load this file by requiring it as JavaScript. Even if they did both would result in the same object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-28T18:00:26Z", "contents": "It looks like this was probably fixed in jasmine/jasmine-npm#65 which is in the latest release (2.5.x). Please update and give it a shot.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["npm"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1121, "url": "https://github.com/jasmine/jasmine/issues/1121", "title": "Equality of different array iterators succeeds", "contents": "The following spec runs without failures:\n\"use strict\";\ndescribe(\"test\", function () {\n    it(\"compare arrays\", function () {\n        let a = [1, 2];\n        let b = [3, 4];\n        expect(a.entries()).toEqual(b.entries());\n    });\n});\nShould it not fail?", "createdAt": "2016-05-22T23:59:55Z", "updatedAt": "2017-03-11T21:01:56Z", "closedAt": "2017-03-11T21:01:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vkliatchko", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "vkliatchko", "company": null}, {"login": "chrisdeely", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "zion1129", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "chrisdeely", "authorAssociation": "NONE", "createdAt": "2016-09-13T02:40:55Z", "contents": "The Array.entries() method returns an Array Iterator which doesn't expose any enumerable keys, which are used to evaluate equality in toEqual(). Since the keys for both amount to an empty array, the objects are considered functionally equal.\nThe quick solution would be to use toBe() which uses a strict equality comparison, if your code structure would allow for it.\nFailing that, a custom matcher could be implemented, or a map within the test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-07T00:42:44Z", "contents": "Jasmine's default equality tester is based off of isEqual from Underscore.js. I just tested it, and Underscore is also not able to handle Array Iterator equality.\nYou can define your own custom equality tester   that accounts for Array Iterators.\nI would also be willing to look at a PR that modifies https://github.com/jasmine/jasmine/blob/master/src/core/matchers/matchersUtil.js to make Jasmine support Array Iterators out of the box.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vkliatchko", "authorAssociation": "NONE", "createdAt": "2016-10-08T17:07:07Z", "contents": "Are you suggesting I give you a PR modifying the current behavior of toEnqual for iterators? The current behavior could definitely be surprising and cause bugs. At the same time, the change would not be backward compatible and could break some tests. It also brings a couple of questions:\n\nThere does not seem to exist an obvious way to match iterators without mutating them. That could be cause bugs in its own way.\nThere does not seem to be a way to detect iterators other than checking for presence of the \"next\" method. That does not feel reliable.\n\nThoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vkliatchko", "authorAssociation": "NONE", "createdAt": "2016-10-08T17:07:57Z", "contents": "Sorry. Did not mean to close. Clicked wrong button.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-02T20:22:56Z", "contents": "Since it looks like this is an ES6 feature (though implemented by some browsers, but not IE), I'm not sure the correct way for Jasmine to support Array Iterators without causing oddities in how it works. Additionally, I'm unsure how useful it would be to compare two iterators with each other, wouldn't the arrays themselves be better?\nIf this is functionality you really need, you might look into either making a custom equality tester or even an asymmetric equality tester, or potentially a custom matcher.\nAlternatively, if you can find a way to address the concerns you've raised, we would be happy to review a pull request to define equality for iterators.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zion1129", "authorAssociation": "NONE", "createdAt": "2016-12-23T14:48:46Z", "contents": "I would be curious to know if this would run without failure if you defined your variables with var instead of let?  We all know let and const don't get hoisted and you would think that code would work as expected but still I would be curious to know...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vkliatchko", "authorAssociation": "NONE", "createdAt": "2017-03-11T21:01:56Z", "contents": "I tried this code with \"var\". It produces the same behavior, i.e., it reports a success while it would be reasonable to expect a failure. I am not sure why \"var\" would change this.\nSince that there does not seem a solution that overcomes the concerns I pointed out above (not mutating and detecting iterators), I will close the issue out. The work-around I have been using is to wrap the iterators in \"Array.from\". It might be costly but works.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1122, "url": "https://github.com/jasmine/jasmine/issues/1122", "title": "Accessibility of CSS styling on documentation pages", "contents": "Please consider changing the background color of the code samples in the documentation, they are hard to read, as the the background and some of the foreground colors lack enough contrast. I can still read it, but it's just requires way more concentration, and I can well imagine that people with visual impairment will inevitably have problems with it.", "createdAt": "2016-05-23T06:10:10Z", "updatedAt": "2017-06-23T17:56:57Z", "closedAt": "2017-06-23T05:52:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "imrek", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "imrek", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T19:58:07Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-06-23T17:56:57Z", "contents": "We've changed the text and background colors so that everything has at least a 4.5:1 contrast ratio, which should solve the problem. If you still think the contrast is too low, please let us know. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1123, "url": "https://github.com/jasmine/jasmine/issues/1123", "title": "Allow custom matchers to customize the error message", "contents": "Issue:\nLarge output messages returned by custom matchers are difficult to read.\nBehavior:\nExpectation.prototype.wrapCompare() only passes along the custom matcher's message, so buildExpectationResult has to construct a new error, which duplicates the message.\n\nHaving a really long line in the message breaks the HTMLReporter layout.\n\nExpected behavior:\nExpectation.prototype.wrapCompare() allows custom matchers to return an error object in its results and passes it to buildExpectationResult which will specify a custom error message.\njasmine.addMatchers({\n  exampleMatcher: function() {\n    return {\n      compare: function(actual, expected) {\n        ...\n        return {\n          pass: pass,\n          message: message,\n          error: new Error (message + '\\n\\n' + details)\n        };\n      }\n    };\n  }\n});\n\nThe HTMLReporter layout should specify .jasmine-result-message { overflow-x: scroll; } to prevent horizontal overflow out of the document body (although it is less of an issue when the extended details are moved to the error).", "createdAt": "2016-05-26T18:00:41Z", "updatedAt": "2017-04-10T20:52:19Z", "closedAt": "2017-04-10T20:52:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "deckar01", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "deckar01", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "deckar01", "authorAssociation": "NONE", "createdAt": "2016-06-01T00:18:22Z", "contents": "I'm not sure if/when this would ever land, so I made a helper to override Expectation.wrapCompare().\neval(\n  'jasmine.Expectation.prototype.wrapCompare = ' +\n  jasmine.Expectation.prototype.wrapCompare.toString()\n  .replace(/message:\\s*(\\w+),\\n/, 'message: $1, error: result.error,\\n')\n);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "deckar01", "authorAssociation": "NONE", "createdAt": "2016-06-01T14:52:25Z", "contents": "... and published it as a helper:\nhttps://github.com/deckar01/jasmine-matcher-errors", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "deckar01", "authorAssociation": "NONE", "createdAt": "2016-06-02T18:16:53Z", "contents": "... and now it supports jasmine v1.\nhttps://github.com/deckar01/jasmine-matcher-errors", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T18:32:42Z", "contents": "I would be happy to review a pull request that allows a matcher to optionally specify an Error for the purpose of printing a more detailed message.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1124, "url": "https://github.com/jasmine/jasmine/issues/1124", "title": "Possibility to run external script before/after", "contents": "Hello,\nI would like to know if there is there the possibility to run an external script file before/after jasmine runs all tests written?\ne.g run a bat file to execute some task automatically when in Visual studio jasmine starts and just before it starts to run effectively the tests.\nIt is possible to capture the moment it start/end to run all tests?\n\nThanks for help", "createdAt": "2016-05-31T16:35:09Z", "updatedAt": "2016-06-05T19:38:25Z", "closedAt": "2016-06-05T19:38:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jean-fr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jean-fr", "company": null}, {"login": "adityaparab", "company": "EPAM Systems"}], "comments_count": 2, "comments_data": [{"authorLogin": "adityaparab", "authorAssociation": "NONE", "createdAt": "2016-06-03T08:23:45Z", "contents": "Hi, This is a question not an issue as such. This would have been answered very quickly had it been posted on StackOverflow :)\nBut in any case, you can take advantage of jasmine's custom reporters.\nvar JohnsReporter = {\n    jasmineStarted: function(suiteInfo) {\n        //This is where you call your batch file or external javascript file \n        //(make sure you `require` it above :) ) or whatever\n    },\n\n    jasmineDone: function() {\n        // This is where you call your post jasmine stuff.\n    }\n\n}\n\nAnd in your jasmine config you write:\njasmine.getEnv().addReporter(JohnsReporter );", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jean-fr", "authorAssociation": "NONE", "createdAt": "2016-06-05T19:38:25Z", "contents": "Hi,\nThank you, I will try this.\nRegards", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1126, "url": "https://github.com/jasmine/jasmine/issues/1126", "title": "Help with testing javascript Closure in jasmine", "contents": "I am completely novice at using jasmine. I couldn't figure out how can I write a test case for a java script closure like below.\nMy code in Typescript is as follows\nmodule FIRST.Mobile.Controllers{\n\"use strict\";\nclass sampletest\n{\npublic  subtract(a: number, b: number): number {\n    return a - b;\n}\n}\n}\n\nAnd when converted to JavaScript it becomes\nvar FIRST;\n(function (FIRST) {\n    var Mobile;\n    (function (Mobile) {\n        var Controllers;\n        (function (Controllers) {\n            \"use strict\";\n            var sampletest = (function () {\n                function sampletest() {\n                }\n                sampletest.prototype.subtract = function (a, b) {\n                    return a - b;\n                };\n                return sampletest;\n            })();\n        })(Controllers = Mobile.Controllers || (Mobile.Controllers = {}));\n    })(Mobile = FIRST.Mobile || (FIRST.Mobile = {}));\n})(FIRST || (FIRST = {}));\n\nI do not understand if I could test code in a typescript module?\nIf yes can some one explain me how could I test the subtract method using jasmine.\nThank you", "createdAt": "2016-06-02T05:04:12Z", "updatedAt": "2016-06-10T15:42:55Z", "closedAt": "2016-06-10T15:42:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ramavaxa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ramavaxa", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-10T15:42:55Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group or sites like stackoverflow. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1127, "url": "https://github.com/jasmine/jasmine/issues/1127", "title": "Custom messages for passed expectations", "contents": "Hi,\nThere are various places where it makes sense to have a custom message for passed test cases.\nThis is not an \"issue\" as such and the jasmine framework is doing a pretty good job for what it is intended.\nHowever, I have faced many situations where if I write of own report generator, It is impossible to add an explanatory message for all the expectations. It makes HTML/Excel reports much readable,\nThere is a condition in the buildExpectationResult function in ExpectationResult.js\n    function message() {\n      if (options.passed) {\n        return 'Passed.';\n      } else if (options.message) {\n        return options.message;\n      } else if (options.error) {\n        return messageFormatter(options.error);\n      }\n      return '';\n    }\n\nif this the option.passed condition evaluates true, it overrides my custom message with a string \"Passed.\"\nDo you think changing this condition to\nif (options.passed && !options.message) {\nwould make it more useful?\nI have tested in on my local setup and everything seems to work as expected.\nIf I set custom message for expectations (using functions like since() ) then the passed and failed test cases use that message. If I don't pass any custom message, it returns passed.\nFollowing this approach, I was expecting the framework to return something like, for example, Expected true to be true but it seems to be working perfectly fine.\nI believe this would be a great value add to the framework.\n\nUse case where it comes handly\n    var tc1 = it('Should navigate to SomePage', function () {\n        tc1.result.tcName = \"TC1\";\n        tc1.result.tcDesc = \"Verify create button is present\";\n        tc1.result.expectations = [];\n        since('Verify create button is present') // This is how the message is passed.\n        .expect(SomePage.CreateButton.isPresent()).toBe(true);\n    });\n\nThis generates the output as\n\"passedExpectations\": [{\n    \"matcherName\": \"toBe\",\n    \"message\": \"Verify create button is present\",\n    \"stack\": \"\",\n    \"passed\": true\n}]\n\nPretty handy, isn't it?\nNow, If I don't have ability to add custom message, I have to build my own expecation results again by writing each each expecation twice. (2nd time for my own result generation) like\n    var tc1 = it('Should navigate to SomePage', function () {\n        tc1.result.tcName = \"TC1\";\n        tc1.result.tcDesc = \"Verify create button is present\";\n        tc1.result.expectations = [];\n        expect(SomePage.CreateButton.isPresent()).toBe(true); // This will build the native jasmine results object\n        SomePage.CreateButton.isPresent().then(function(isPresent){ // now I have to manually build my own result object\n            tc1.result.expectations.push({\n                title: 'Verify create button is present',\n                status: isPresent ? 'Passed' : 'Failed'\n            })\n        });\n    });\n\nAs you can see, this makes the test cases look dirty. And the logic gets scattered all over the place.\nIt would be great, if all the results logic is at one place and is handled by the framework itself. :)", "createdAt": "2016-06-03T07:57:05Z", "updatedAt": "2016-10-17T19:11:40Z", "closedAt": "2016-10-17T19:11:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "adityaparab", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "adityaparab", "company": "EPAM Systems"}, {"login": "t2n", "company": null}, {"login": "faredis", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "t2n", "authorAssociation": "NONE", "createdAt": "2016-07-01T11:43:16Z", "contents": "or maybe extend all the default matchers so that we can do something like expect(elementsFound).toBe(5).because('expected to have 5 elements after doing something')\nso html reporter could provide more feedback on which expectation passed and which not\nI guess people would benefit from such behavior a lot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "faredis", "authorAssociation": "NONE", "createdAt": "2016-07-14T00:46:44Z", "contents": "This also means the the custom matcher's passed messages are changed to \"Passed.\"\nI would find it useful when working with protractor as a number of the expect statements are testing a number of things  so to make it easier to read we created custom matchers and we would like the  passed messages to appear in the reports so that we can show our customers the tests we have run without  showing them the actual test code.\nSo a customer requirement:\nGiven an admin user\nWhen they log into the website\nthen they have access to the admin page\n\nTranslates to:\ndescribe (\"Given an admin User\", function() {\n  ...\n    it(\"logs into the website\", function(){\n         ...\n         expect(something).toHaveAdminAccess();\n    }\n...\n}\n\ntoHaveAdminAccess will then have a user friendly passed message along the lines of the requirement above that will appear in our reports.\nWhat is odd is that within jasmine the error message is generated in one place and the passed message in another. Therefore I think they need to be moved together and hopefully somewhere that is exposed so that we can alter it.\nMy suggestion is within buildExpectationResult\nIs changed to:\nfunction message() {\n      if (options.message) {\n        return options.message;\n      } else if (options.error) {\n        return messageFormatter(options.error);\n      }\n      return '';\n    }\nThen within Expectation.prototype.wrapCompare\n...\nif (!result.pass) {\n        if (!result.message) {\n          args.unshift(this.isNot);\n          args.unshift(name);\n          message = this.util.buildFailureMessage.apply(null, args);\n        } else {\n          if (Object.prototype.toString.apply(result.message) === '[object Function]') {\n            message = result.message();\n          } else {\n            message = result.message;\n          }\n        }\n} else {\n         message = \"Passed.\"\n}\n...\nThen if we want to we can override Expectation.prototype.wrapCompare as protractor already does via jasminewd\nIn my case I wanted the message for passed and failed so I changed it to either output the normal message or use my custom matcher message, or the since(...) message:\n...\nif (!result.message) {\n          args.unshift(this.isNot);\n          args.unshift(name);\n          message = this.util.buildFailureMessage.apply(null, args);\n        } else {\n          if (Object.prototype.toString.apply(result.message) === '[object Function]') {\n            message = result.message();\n          } else {\n            message = result.message;\n          }\n        }\n...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-17T19:11:40Z", "contents": "This sounds like a duplicate of #971. Jasmine doesn't expect you to really print messages for expectations that were met, and in order to reduce confusion by displaying a message that doesn't make sense, we change the message for passed expectations to 'Passed'.\nI think @t2n and @faredis may be talking about a different use case of simply allowing more customizability for expectations that fail which is then a duplicate of #641.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1128, "url": "https://github.com/jasmine/jasmine/issues/1128", "title": "waitsFor like imlemenation in jasmine 2.4", "contents": "I need to wait for specified amount of time before second request(comment in code). How can i implement this one using jasmine 2.4?\nit('It will fail for expiration of token', done => {\n    const fakeUser = {\n          \"grant_type\" : \"password\",\n          \"client_id\" : \"abc123\",\n          \"client_secret\" : \"ssh-secret\",\n          \"username\": \"bob\",\n          \"password\": \"secret\"\n        };\n        request({\n          url: routeFor('oauth/token'),\n          method: 'POST',\n          body: fakeUser,\n          json: true\n        }, (error, response, token) => {     \n\n        let aheader = {};\n        aheader.Authorization = 'Bearer '+ token.access_token;\n\n       // Waitfor specified amount of time\n\n        request({\n           url: routeFor('test'),\n           method: 'GET',\n           headers: aheader,\n           json: true\n         }, (error, response, body) => {\n          console.log(body);\n         expect(body.error).toEqual(\"token expired\");    \n         done();\n         });\n      });\n    });", "createdAt": "2016-06-06T18:08:41Z", "updatedAt": "2016-06-10T15:35:10Z", "closedAt": "2016-06-10T15:35:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lutfor3737", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "lutfor3737", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "lutfor3737", "authorAssociation": "NONE", "createdAt": "2016-06-06T20:48:23Z", "contents": "I solved this issue by using setTimeout.\n` it('It will fail for expired token', done => {\nconst fakeAuth = {\n\"grant_type\" : \"password\",\n\"client_id\" : \"abc123\",\n\"client_secret\" : \"ssh-secret\",\n\"username\": \"bob\",\n\"password\": \"secret\"\n};\nrequest({\nurl: routeFor('oauth/token'),\nmethod: 'POST',\nbody: fakeAuth,\njson: true\n}, (error, response, token) => {\n  setTimeout(function(){ callback() }, 9000);\n\n  function callback(){\n      let aheader = {};\n      aheader.Authorization = 'Bearer '+ token.access_token;\n      request({\n         url: routeFor('test'),\n         method: 'GET',\n         headers: `aheader,`\n         json: true\n       }, (error, response, token) => {\n       expect(token.error).toEqual(\"Unauthorized\");    \n       done();\n       });\n  }\n});\n\n});`", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1130, "url": "https://github.com/jasmine/jasmine/issues/1130", "title": "Dynamically Loading Javascript files in test file.", "contents": "Hi\nCurrently working on getting our testing setup for a jQuery plugin.\nIn our test cases we need to be able to load different javascript files on the same test.\nWe're using fixtures to load html files but gotten stuck on how to include an external javascript file into a test.\nIs there any built in way to do this in Jasmine, if not could anyone suggest how I could go about it?\nThanks for your help.", "createdAt": "2016-06-09T10:43:44Z", "updatedAt": "2016-06-10T15:39:32Z", "closedAt": "2016-06-10T15:39:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2016-06-10T07:44:44Z", "contents": "Either add them manually to your TestRunner.html file (just add a <script> tag), or use something like karma.\nThis kind of question would better be asked on stackoverflow, though. This issue tracker is meant for bugs \ud83d\ude04", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1131, "url": "https://github.com/jasmine/jasmine/issues/1131", "title": "How to test spy in setTimeout?", "contents": "I have code like this:\nit('should call json-rpc', function() {\n    var spy = spyOn(object, 'echo');\n    if (spy.andCallThrough) {\n        spy.andCallThrough();\n    } else {\n        spy.and.callThrough();\n    }\n    enter(term, 'echo foo bar');\n    setTimeout(function() {\n        // here I've got error Expected a spy, but got Function.\n        expect(object.echo).toHaveBeenCalledWith('foo', 'bar');\n    }, 200);\n});\nand I've got error: Expected a spy, but got Function. how to test spy in setTimeout?", "createdAt": "2016-06-13T18:10:52Z", "updatedAt": "2016-06-15T08:55:15Z", "closedAt": "2016-06-14T14:48:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jcubic", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jcubic", "company": "Astek Polska sp. z o. o."}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}], "comments_count": 2, "comments_data": [{"authorLogin": "jcubic", "authorAssociation": "NONE", "createdAt": "2016-06-14T14:48:50Z", "contents": "this work:\nexpect(spy).toHaveBeenCalledWith('foo', 'bar');", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2016-06-15T08:54:05Z", "contents": "You should use done so the test runner knows something asynchronous is happening in the spec and doesn't start another test until done is called:\nit('should call json-rpc', function(done) {\n    var spy = spyOn(object, 'echo');\n    if (spy.andCallThrough) {\n        spy.andCallThrough();\n    } else {\n        spy.and.callThrough();\n    }\n    enter(term, 'echo foo bar');\n    setTimeout(function() {\n        // here I've got error Expected a spy, but got Function.\n        expect(object.echo).toHaveBeenCalledWith('foo', 'bar');\n        done();\n    }, 200);\n});\n\nOtherwise the test runner will already start another test, which means the spy for this test is also removed.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1132, "url": "https://github.com/jasmine/jasmine/issues/1132", "title": "Add a way to specify custom reason for disabled suites", "contents": "Currently we can provide custom reason for pending specs using pend(). How do we do the same for suites where we disable it using xdescribe? See http://stackoverflow.com/questions/37791690/any-way-to-provide-reason-to-a-disabled-suite-in-jasmine for more details. Thanks!", "createdAt": "2016-06-14T07:07:01Z", "updatedAt": "2016-12-02T18:12:43Z", "closedAt": "2016-12-02T18:12:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "grushler", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "grushler", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-17T00:24:00Z", "contents": "It looks like Suite has a pend method on it: \n  \n    \n      jasmine/src/core/Suite.js\n    \n    \n         Line 45\n      in\n      04bb56a\n    \n    \n    \n    \n\n        \n          \n           Suite.prototype.pend = function(message) { \n        \n    \n  \n\n\nFrom my testing it doesn't seem to do anything currently. I would be happy to look at a PR that makes pend work for Suites.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-02T18:12:43Z", "contents": "The pend function for Suites and Specs isn't really exposed in the Jasmine interface. Both are meant as the internal way that Jasmine marks them as having been xed out with xdescribe or xit. Neither of those calls accept a reason (they'll default to marked pending with xit or something) because they are meant to be a short term measure to limit the specs that you're running, not a longer term way to turn the specs off.\nIf you want to specify a reason for pending the spec(s) you should use pending possibly in a beforeEach (beforeAll might work) to pend all the specs with a reason.\nSee also #1175 and the merged PR #1225 which makes xdescribe use its pending state correctly.\nClosing this, pending is the way to specify a message for this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1133, "url": "https://github.com/jasmine/jasmine/issues/1133", "title": "Help with \"extending\" the BDD interface", "contents": "Hi there\nI need some help to extend the default Jasmine interface (describe, before, etc) to add my own methods to it.\nInstead of doing something like\ndescribe('Module', function() {\n  it('should assert true', function() {\n  ))\n})\n\nI would like to do something like\nNewInterface('Module', function () {\n  check('title', function, function() {\n  })\n})\n\nI'm having a hard time trying to put the pieces together. I know about the jasmine-npm project and understand (ish) the boot file but it feels excessive to have to write a new boot file to expose more methods in the interface.\nI've also read about the guidelines to \"not change the interface\" which is fine, but wondering, in this case I would like to have people using the new interface with Jasmine under the hood.\nIs there any other way? Like using a configuration file like the matchers or something?\nThanks for your help", "createdAt": "2016-06-15T09:53:49Z", "updatedAt": "2016-09-17T00:14:40Z", "closedAt": "2016-09-17T00:14:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tarciosaraiva", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tarciosaraiva", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-17T00:14:39Z", "contents": "Creating a custom boot file is the official way to do this. You could also do something like NewInterface = describe; in your test setup.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1134, "url": "https://github.com/jasmine/jasmine/issues/1134", "title": "Timeline issues when testing with multiple setTimeout on a timeline ", "contents": "I am trying to test an idleTimeout library that includes a function to reset a timeout when a DOM event fires.\nMy issue is that the timeout's timeline, mocked by Jasmine, does not seem to be linear.\nMy test\n  it('should reset the idleTimeout if one of the event handlers get\\s called', () => {\n            jasmine.clock().install();\n            let callback = jasmine.createSpy('timerCallback');\n            let IL = new InactivityLogout({idleTimeoutTime: 2000, timeoutCallback: callback});\n            console.log('new InactivityLogout created');\n            jasmine.clock().tick(1001); // 1001ms total time\n            console.log('jasmine.clock().tick(1001)');\n            expect(callback).not.toHaveBeenCalled();\n\n            // initial timer 1 will be destoryed and new timer initialise \n            // with set idleTimeoutTime(2000)\n            dispatchMouseEvent('click'); \n\n            jasmine.clock().tick(1000); // 2001 total time\n\n            // new timer 2 is only 1000 into it's own timeline \n            // should not be called until 3001 because it was reset at 1001\n            expect(callback).not.toHaveBeenCalled();  <- FAILS\n\n            jasmine.clock().tick(2000); // 4001\n            expect(callback).toHaveBeenCalled();\n            jasmine.clock().uninstall();\n  })\nI expected that when calling jasmine.clock().tick(somenum) the current time in the jasmine scheduler would be updated, but that does not seem to happen.\nBoth the first callback and the second callback created get initialized with a current time of 0. And I don't fully understand why?\nDelayedFunctionScheduler.js\ngetJasmineRequireObj().DelayedFunctionScheduler = function() {\n  function DelayedFunctionScheduler() {\n    var self = this;\n    var scheduledLookup = [];\n    var scheduledFunctions = {};\n    var currentTime = 0;\n    var delayedFnCount = 0;\n    console.log('delayedfunctionscheduler init current time set', currentTime)\n\n\n    self.tick = function(millis, tickDate) {\n      millis = millis || 0;\n      var endTime = currentTime + millis;\n\n      runScheduledFunctions(endTime, tickDate);\n      currentTime = endTime;\n      console.log('delayedfunctionscheduler init current time set', currentTime)\n    };\n\n    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {\n      var f;\n      if (typeof(funcToCall) === 'string') {\n        /* jshint evil: true */\n        f = function() { return eval(funcToCall); };\n        /* jshint evil: false */\n      } else {\n        f = funcToCall;\n      }\n\n      millis = millis || 0;\n      timeoutKey = timeoutKey || ++delayedFnCount;\n      runAtMillis = runAtMillis || (currentTime + millis);\n\n      console.log('schedule function timeoutkey', timeoutKey)\n      console.log('schedule function currentTime', currentTime)\n      console.log('schedule function run at millis', runAtMillis)\n\n      var funcToSchedule = {\n        runAtMillis: runAtMillis,\n        funcToCall: f,\n        recurring: recurring,\n        params: params,\n        timeoutKey: timeoutKey,\n        millis: millis\n      };\n\n      if (runAtMillis in scheduledFunctions) {\n        scheduledFunctions[runAtMillis].push(funcToSchedule);\n      } else {\n        scheduledFunctions[runAtMillis] = [funcToSchedule];\n        scheduledLookup.push(runAtMillis);\n        scheduledLookup.sort(function (a, b) {\n          return a - b;\n        });\n      }\n\n      return timeoutKey;\n    };\nConsole logging to illustrate timeline\n**** : code run in the idleTimeout library not shown\ndelayedfunctionscheduler init current time set 0\n**** start timer timeout time 2000\nschedule function timeoutkey 1\nschedule function currentTime 0\nschedule function run at millis 2000\n**** start timer idleTimeoutID 1\n**** clear timeout for id 1\n**** start timer timeout time 2000\nschedule function timeoutkey 2\nschedule function currentTime 0\nschedule function run at millis 2000\n**** start timer idleTimeoutID 2\nnew InactivityLogout created\ndelayedfunctionscheduler self.tick current time set 1001\njasmine.clock().tick(1001)\n**** timeout called\ndelayedfunctionscheduler self.tick current time set 2001\njasmine.clock().tick(2001)\ndelayedfunctionscheduler self.tick current time set 4001\njasmine.clock().tick(4001)\nAs you can see the order of logging is strange.\nIdeally I feel like I my test case should work with Jasmine? Maybe I am just missing something super simple? Any help would be appreciated, hopefully this issue may help others. Happy to help out with a fix if you can help me understand what is wrong.\nThe test does work if it's for a simple case of the timer firing or not firing, depending on the callback time.\nSimple test example that does work.\n    it('should timeout when the idleTimeout is finished', () => {\n        jasmine.clock().install();\n\n        let callback = jasmine.createSpy('timerCallback');\n        let IL = new InactivityLogout({idleTimeoutTime: 2000, timeoutCallback: callback});\n        expect(callback).not.toHaveBeenCalled();\n        jasmine.clock().tick(2001);\n        expect(callback).toHaveBeenCalled();\n\n        jasmine.clock().uninstall();\n    });", "createdAt": "2016-06-16T22:28:57Z", "updatedAt": "2016-06-17T09:21:51Z", "closedAt": "2016-06-17T09:11:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vespertilian", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "vespertilian", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "vespertilian", "authorAssociation": "NONE", "createdAt": "2016-06-17T09:21:51Z", "contents": "Ha, it was a silly mistake, when using setTimeout I was unintentionally resetting it before the test started.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1135, "url": "https://github.com/jasmine/jasmine/issues/1135", "title": "Inherit parent context in beforeAll", "contents": "I have a test suite organized like this:\ndescribe('Something', function() {\n  beforeEach(function() {\n    this.something = new Something();\n  });\n  describe('Suite 1', function() {\n    beforeAll(function() {\n      this.something.setSomething();\n    });\n    ... // a series of tests\n  });\n  describe('Suite 2', function() {\n     beforeAll(function() {\n      this.something.setSomethingElse();\n     });\n     ... // a series of tests\n  });\n});\n\nI assume the something I created in beforeEach can be seen in the beforeAll child scope. However, this is not the behavior currently jasmine implemented (2.4.1).\nI don't understand why this behavior is not supported. If not passing the parent context setup by beforeEach to beforeAll is the intended behavior, it would be nice to know why.", "createdAt": "2016-06-19T00:22:23Z", "updatedAt": "2016-07-19T06:47:34Z", "closedAt": "2016-07-19T06:47:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chaoran", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chaoran", "company": "Rice University"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-06-19T00:32:14Z", "contents": "I believe the issue is that all beforeAll functions are run before beforeEach functions. See this issue for details: #873", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1136, "url": "https://github.com/jasmine/jasmine/issues/1136", "title": "TypeScript source and testing", "contents": "I have a JS app with Jasmine tests, but now I'm in the process of rewriting the entire app in TypeScript. I'd also like to rewrite the tests in TypeScript. Any suggestion on how to test with Jasmine then? Currently I'm transpiling all to JS and testing in a temporary build, but I hope to find a more straightforward way.", "createdAt": "2016-06-22T13:34:02Z", "updatedAt": "2016-06-27T14:42:25Z", "closedAt": "2016-06-27T14:42:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "heruan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "heruan", "company": "@axians"}, {"login": "ValeriiVasin", "company": "@groupon"}], "comments_count": 2, "comments_data": [{"authorLogin": "ValeriiVasin", "authorAssociation": "NONE", "createdAt": "2016-06-27T10:25:28Z", "contents": "I solved this problem with ts-node require hook. Just by adding helper first.\nts-node.helper.js:\nrequire('ts-node/register');\njasmine config:\n\"helpers\": [\n  \"ts-node.helper.js\"\n]\nThat works pretty fine.\nBTW, same goes for babel :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "heruan", "authorAssociation": "NONE", "createdAt": "2016-06-27T14:42:25Z", "contents": "That's perfect. Thank you @ValeriiVasin!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1138, "url": "https://github.com/jasmine/jasmine/issues/1138", "title": "Custom equality testers are ignored by asymmetric matchers", "contents": "At the very least, custom equality testers should be supported within objectContaining() and arrayContaining().  It is surprising to register a custom tester and have it ignored in certain contexts.", "createdAt": "2016-06-23T20:55:02Z", "updatedAt": "2016-09-27T18:04:12Z", "closedAt": "2016-09-27T18:04:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "joeyparrish", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "joeyparrish", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1140, "url": "https://github.com/jasmine/jasmine/issues/1140", "title": "No Nested It?", "contents": "Hi, I am doing a front-end automation using protractor and jasmine. My test scenarios heavily reliant with the front end as such my specs are dynamic and loop dependent. Example of what I am doing: in the page there is this called template ( template for a survey ). It is divided into groups and each groups contains questionnaires ( can be multiple-choice, rubric type, or open-ended ). My test involves creating a template, which includes creating the groups and the questionnaires to create a whole template. Then I need to check if the front-end actually displays what I created. I have no problem with creating but my problem is the checking. I am not allowed to do the checking the same time as creating, they must be separate as after creating I need to save it first before I can do the checking. Since, I need to check the questionnaires and groups, I need to loop a lot. So first I need to loop the groups and then loop the questionnaires in each group and then check its question text and question options. So my first it block is to loop the groups it looks like this:\nit( 'Should loop groups', function () {\ngroupPage.getGroups().map( function ( groupEl, groupIndex ) {\n        if ( groupIndex > 0 ) {\n            groupPage.clickGroup( groupIndex );\n        }\n                it( 'Should verify group title for group: ' + groupIndex, function () {\n                        expect( groupPage.getGroupName() ).toEqual( 'Group Name' );\n                }  );\n    } );\n} );\n\nHowever the questionnaires are within the groups, so within the loop group it block, I need to write it blocks for the questionnaires and assert the question texts and option texts. In order to do that, I need to nest the questionnaires it inside the group it. It should look like this.\nit( 'Should verify group titles', function () {\n    groupPage.getGroups().map( function ( group, groupIndex ) {\n        if ( groupIndex > 0 ) {\n            groupPage.clickGroup( groupIndex );\n        }\n                it( 'Should verify group title for group: ' + groupIndex, function () {\n                        expect( groupPage.getGroupName() ).toEqual( 'Group Name' );\n                }  );\n                questionPage.getQuestions().map( function ( question, questionIndex ) {\n                        verifyQuestionText( questionIndex );\n                } );\n    } );\n} );\n\n\nfunction verifyQuestionText( questionIndex ) {\n       it( 'Should verify question text: '  + questionIndex, function () {\n              expect( questionPage.getQuestionText() ).toEqual( 'Question Text' );\n       } );\n}\n\nBut this doesn't work. It won't execute the nested it blocks. Any advice?", "createdAt": "2016-06-27T10:01:39Z", "updatedAt": "2017-02-13T18:07:37Z", "closedAt": "2016-07-19T06:42:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kariasbolster", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "kariasbolster", "company": null}, {"login": "Gerg", "company": null}, {"login": "vance", "company": "Foreverscape, LLC"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-07T15:48:52Z", "contents": "Jasmine does not support nesting it functions inside each other. If you remove the nested it calls (and keep their expectations in the top level it), then it appears that you spec will work.\nWhy are you interested in nesting its? It appears that you only need to to do that because your test is not aware of what groups/questions are created until runtime. If you programmatically did test setup, then you would know exactly what groups and questions you needed to check.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vance", "authorAssociation": "NONE", "createdAt": "2017-02-09T09:57:50Z", "contents": "the problem is it is sometimes hard to persist class instances across it statements, leading to redundant setup code. This really happens often when testing angular2 services, for instance.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T18:07:37Z", "contents": "In general you shouldn't have shared state between two specs. If this is something you really want, take a look at the setup options that Jasmine has.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1141, "url": "https://github.com/jasmine/jasmine/issues/1141", "title": "Can't set jasmine.DEFAULT_TIMEOUT_INTERVAL to a value bigger then 10000", "contents": "I am using Jasmine 2.4.1 :\nI can change jasmine.DEFAULT_TIMEOUT_INTERVAL to value less than 10000 ms, but\nwhen I try to change the jasmine.DEFAULT_TIMEOUT_INTERVAL to a value bigger then 10000 ms\nthen the timeout still fires at 10000 ms.\nIs that a bug or a feature ?", "createdAt": "2016-06-28T07:24:29Z", "updatedAt": "2016-07-01T08:32:22Z", "closedAt": "2016-07-01T08:32:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "udiedrichsen", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "udiedrichsen", "company": "UD-Softworks"}], "comments_count": 1, "comments_data": [{"authorLogin": "udiedrichsen", "authorAssociation": "NONE", "createdAt": "2016-07-01T08:32:22Z", "contents": "My fault \ud83d\udc4e\nThe problem is the browser timeout in my karma test runner configuration.\nSorry. I close this issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1144, "url": "https://github.com/jasmine/jasmine/issues/1144", "title": "Can you update npm?", "contents": "jasmine-core v2.4.1 on npm is not the same with github, it's painful.\n/lib/jasmine-core/jasmine.js/ on npm:\nline 26:    if (typeof module !== 'undefined' && module.exports) {\n\n/lib/jasmine-core/jasmine.js/ on github:\nline 26:  if (typeof module !== 'undefined' && module.exports && typeof exports !== 'undefined') {", "createdAt": "2016-07-01T03:11:24Z", "updatedAt": "2016-09-17T00:07:39Z", "closedAt": "2016-09-17T00:07:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yeluoqiuzhi", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "yeluoqiuzhi", "company": null}, {"login": "amavisca", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-13T22:48:54Z", "contents": "I'm blocked on bumping jasmine-npm until we get a core release.\nWe do weird things in jasmine-npm: jasmine/jasmine-npm#81 that I can stop doing once we get a core release out.\n@Gerg @slackersoft What do we need to do to get a jasmine-core npm release out? Is it a matter of getting the release docs ready and pulling the trigger?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-17T00:07:39Z", "contents": "2.5 was released", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1145, "url": "https://github.com/jasmine/jasmine/issues/1145", "title": "Asynchronous beforeEach / beforeAll", "contents": "Jasmine's it is able to handle async. However beforeEach, beforeAll, and describe do not seem to handle async functions properly. Sometimes test setup is asynchronous. Suggestions?", "createdAt": "2016-07-07T06:36:36Z", "updatedAt": "2016-07-08T15:56:36Z", "closedAt": "2016-07-08T15:41:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tonyxiao", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tonyxiao", "company": "@beamf "}, {"login": "Gerg", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-07T15:40:56Z", "contents": "Can you provide an example of what you mean by \"do not seem to handle async functions properly?\" beforeEach, afterEach, beforeAll, and afterAll all support async testing via the done callback. Also, can you give an example why you might want describe to be executed asynchronously?\nSee documentation here: http://jasmine.github.io/2.4/introduction.html#section-Asynchronous_Support", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tonyxiao", "authorAssociation": "NONE", "createdAt": "2016-07-07T15:59:29Z", "contents": "@Gerg ah ok. Nvm there's actually no reason to use describe asynchronously since we'd want setup code to be done in beforeAll anyways to be more idiomatic rather than directly inside the describe method (which I sometimes do.). Speaking of which, is there any technical reason to use beforeAll rather than just write the setup code directly toward the top of the describe block before all the its?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tonyxiao", "authorAssociation": "NONE", "createdAt": "2016-07-07T16:00:45Z", "contents": "And I was talking about es7 async await function support in beforeEach. Turns out I was using jasmine through jest and jest implemented additional async await support on top of its bundled version of jasmine. So never mind that either. (see facebook/jest#1256)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-08T15:41:20Z", "contents": "I see. Jasmine doesn't currently have explicit support for many ES* features (largely due to support for legacy browsers).\nThe code inside your describe is executed at a different time then code inside beforeAll etc (internally called \"runnables\"). describe callback functions are invoked when Jasmine is building your spec tree. Your runnables run later when Jasmine is executing the tree it built. Putting code inside the runnables also has other benefits like:\n\nAccess to Jasmine's managed this keyword\nErrors in the runnables will be linked to the correct specs\nSpies created with spyOn in runnables are cleaned up\nCustom matcher created in runnables are cleaned up\n\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tonyxiao", "authorAssociation": "NONE", "createdAt": "2016-07-08T15:56:36Z", "contents": "Got it. Thanks for the helpful explanation.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1146, "url": "https://github.com/jasmine/jasmine/issues/1146", "title": "Is this project active?", "contents": "I don't see any activity since March 2016, which is surprising for a number of reasons.\nI hate to be that guy.   But I have to ask!\nSeth", "createdAt": "2016-07-11T16:03:37Z", "updatedAt": "2016-07-13T03:19:30Z", "closedAt": "2016-07-13T03:19:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sethcall", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sethcall", "company": "https://www.jamkazam.com"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-13T03:19:30Z", "contents": "We still use Jasmine extensively at Pivotal. There has not been much work on jasmine core recently, but hopefully this will be changing soon.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["LAUGH", "LAUGH"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1147, "url": "https://github.com/jasmine/jasmine/issues/1147", "title": "jasmine.js:2219 Uncaught TypeError: this.expectationResultFactory is not a function", "contents": "Version 2.4.1 fails on one specific test I have.\nThe error is:\njasmine.js:2219 Uncaught TypeError: this.expectationResultFactory is not a function\nSuite.onException @ jasmine.js:2219\nonException @ jasmine.js:2330\nonException @ jasmine.js:1924\nhandleException @ jasmine.js:1928\nattemptAsync @ jasmine.js:1918\nQueueRunner.run @ jasmine.js:1871\n(anonymous function) @ jasmine.js:1898\n(anonymous function) @ jasmine.js:1842\nonComplete @ jasmine.js:2467\n\n\nAfter upgrading jasmine to the latest version (commit f6da084  on Mar 27), original error gone, but now I get a new one:\njasmine.js:1921 Uncaught TypeError: Cannot read property 'length' of undefined\nQueueRunner.run @   jasmine.js:1921\nQueueRunner.execute @   jasmine.js:1910\nqueueRunnerFactory  @   jasmine.js:706\nSpec.execute    @   jasmine.js:362\nfn  @   jasmine.js:2558\nattemptAsync    @   jasmine.js:1967\nQueueRunner.run @   jasmine.js:1922\n(anonymous function)    @   jasmine.js:1949\n...\n\nThe main problem I see is with error handling by jasmine - when this error happens jasmine doesn't reports failure to Karma but stops running other tests, making karma and CI think that all tests are passed:\nChrome 51.0.2704 (Windows 10 0.0.0): Executed 49 of 190 SUCCESS (0.149 secs / 0.074 secs)", "createdAt": "2016-07-12T20:11:06Z", "updatedAt": "2016-12-02T18:37:56Z", "closedAt": "2016-12-02T18:37:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yrtimiD", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "yrtimiD", "company": null}, {"login": "Gerg", "company": null}, {"login": "seanhelvey", "company": null}, {"login": "derickbailey", "company": "Muted Solutions, LLC"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "yrtimiD", "authorAssociation": "NONE", "createdAt": "2016-07-12T20:26:46Z", "contents": "The error was caused by having beforeEach(..) within it(..) function.\nI know it's stupid, but can happen with newbie devs and it's extremely hard to discover when you have a lot of tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-13T02:55:47Z", "contents": "Hey @yrtimiD,\nGlad to see you figured it out. Was there anything Jasmine could have done to make things easier to debug? What type of error message would you expect to see?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "seanhelvey", "authorAssociation": "NONE", "createdAt": "2016-07-19T17:47:38Z", "contents": "I am receiving this error but I do not have a beforeEach within an it block. I created a new issue here #1156.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "derickbailey", "authorAssociation": "NONE", "createdAt": "2016-08-09T16:30:38Z", "contents": "i'm also getting this error, and i do not have anything like a beforeEach in an it function. this is on a test suite that has worked fine for months, but i recently deleted the node_modules folder and re-installed everything. now i get this stack trace:\nFatal error: TypeError: this.expectationResultFactory is not a function\n  at Suite.onException (/Users/derickbailey/dev/projects/rabbus/node_modules/grunt-jasmine-nodejs/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2219:48)\n  at QueueRunner.queueRunnerFactory.onException (/Users/derickbailey/dev/projects/rabbus/node_modules/grunt-jasmine-nodejs/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2330:28)\n  at onException (/Users/derickbailey/dev/projects/rabbus/node_modules/grunt-jasmine-nodejs/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1924:12)\n  at [object Object]._onTimeout (/Users/derickbailey/dev/projects/rabbus/node_modules/grunt-jasmine-nodejs/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1910:11)\n  at Timer.listOnTimeout (timers.js:92:15)\n\nMy tests run and pass... this happens after everything is done, and I don't see the pass/fail report at the end, anymore.\nI'm on node v4.4.7, OSX v10.11.6, and am using the grunt-jasmine-nodejs plugin for grunt, which installs jasmine v2.4.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "derickbailey", "authorAssociation": "NONE", "createdAt": "2016-08-09T20:09:48Z", "contents": "i've been digging into this, and in my case the specific cause is having an afterAll with a done parameter that is never called.\ncreated any test suite using node and jasmine-core (or whatever library on top of jasmine-core), and add this to your suite:\nafterAll(function(done){});\nthis will cause the above Fatal error: TypeError: this.expectationResultFactory is not a function error, instead of giving us a proper \"timeout\" error like older versions of jasmine used to do.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T23:06:12Z", "contents": "This sounds like it is probably a duplicate of #811 which should be fixed in the 2.5.x releases. Can you take a look at the new version and see if it fixes your issue?\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1148, "url": "https://github.com/jasmine/jasmine/issues/1148", "title": "Please update Glob dependency (minimatch@0.3.0 deprecated)", "contents": "Hi,\nI get the following warning during my test environment install:\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n\nas far as I see this comes from jasmine@2.4.1 dependency for glob@3.2.11 (here \"minimatch\": \"0.3\" is defined as dependency). So the install shows:\n+-- jasmine-reporters@2.2.0 \n| +-- jasmine@2.4.1 \n| | +-- exit@0.1.2 \n| | +-- glob@3.2.11 \n| | | `-- minimatch@0.3.0 \n| | |   +-- lru-cache@2.7.3 \n| | |   `-- sigmund@1.0.1 \n| | `-- jasmine-core@2.4.1 \n| +-- mkdirp@0.5.1 \n| | `-- minimist@0.0.8 \n| `-- xmldom@0.1.22 \n\nCould you help me out to resolve this issue. Maybe just a Glob update is needed for Jasmine.", "createdAt": "2016-07-13T12:47:56Z", "updatedAt": "2017-08-12T16:16:32Z", "closedAt": "2016-09-02T04:17:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aszegedi", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "aszegedi", "company": "Hortonworks"}, {"login": "amavisca", "company": null}, {"login": "satidurga", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-13T22:51:50Z", "contents": "@aszegedi This is an issue in the node runner here: jasmine/jasmine-npm#78\nI'm working on finding out what we need to do to get a release out.\nThanks for the report!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-15T01:36:22Z", "contents": "Well actually this happens when I npm install this module too since the jasmine-npm module is a devDependency. I'll leave this open for now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "satidurga", "authorAssociation": "NONE", "createdAt": "2017-08-12T06:42:10Z", "contents": "couls u plz help me in solving this issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-12T16:16:32Z", "contents": "This repository is published to npm as jasmine. The jasmine-node package is not maintained by the jasmine team, and I'm not totally sure how maintained it is at all now. jasmine-node", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1149, "url": "https://github.com/jasmine/jasmine/issues/1149", "title": "How can I call a spy upon a function being exported through a module", "contents": "I'm not very good at explaining so I'll do my best. I'm working with nodejs project.\nI have a controller that has the following code inside of it:\n// controller.js\nexports.bar = (request, reply) => {\n  // Do some processing\n  return foo('val1','val2','val3')\n}\n\nfunction foo(arg1,arg2,arg3){\n/// do something\n}\n\nexports.foo = foo;\nSo what I'm trying to do is test that foo has been called. I used the following code\ncontroller = require('controller.js')\nbeforeEach(() => {\n  spyOn(controller, 'foo').and.callFake((args, action) => {\n    // return something\n  });\n})\n\nit('testing foo function', (done) => {\n   server.inject(opts, cb)\n   function cb(res){\n     expect(controller.foo).toHaveBeenCalled();\n   }\n})\nI get an error with the test that says \"spy foo to have been called\"\nI also tried using spyOn(controller.prototype, 'foo') ando got the following error \"spyOn could not find an object to spy upon for foo()\"\nAny help with this is greatly appreciated, Thanks", "createdAt": "2016-07-13T17:45:19Z", "updatedAt": "2016-09-12T13:57:47Z", "closedAt": "2016-09-12T13:57:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jrcastillo", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jrcastillo", "company": "Rappi"}, {"login": "chrisdeely", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "jrcastillo", "authorAssociation": "NONE", "createdAt": "2016-07-14T15:32:39Z", "contents": "I managed to workaround this assigning the function as a static method of the module, the following way:\n// controller.js\nexports.bar = (request, reply) => {\n  // Do some processing\n  return foo('val1','val2','val3')\n}\n\nexports.foo = function foo(arg1,arg2,arg3){\n/// do something\n};\ncontroller = require('controller.js')\nbeforeEach(() => {\n  spyOn(controller, 'foo').and.callFake((args, action) => {\n    // return something\n  });\n})\n\nit('testing foo function', (done) => {\n   server.inject(opts, cb)\n   function cb(res){\n     expect(controller.foo).toHaveBeenCalled();\n   }\n})\nAlthough this solution is not the most indicated since my foo method is supposed to be private, it works for the moment for testing", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisdeely", "authorAssociation": "NONE", "createdAt": "2016-09-12T13:33:04Z", "contents": "This is not an issue with jasmine, but a common challenge for testing code in general. If there is a significant amount of functionality inside your private method, perhaps it truly belongs in a separate module with its own tests?\nI found a good discussion with various viewpoints and recommendations on this Stack Overflow question.\nIf you plan to keep the method \"private\" and still want to test it, the approach you took is suitable. I would recommend a naming convention to identify the method as private. A common convention it to add a leading or trailing underscore to the method name: _foo or foo_.\nYou can also add a JSDoc annotation to the method so IDEs & documentation generators will know it is a private function: /** @private **/", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-12T13:57:46Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for usIng Jasmine!", "reactions_count": 9, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1153, "url": "https://github.com/jasmine/jasmine/issues/1153", "title": "NodeJS: Promise.then() doesn't get called during test?", "contents": "Im returning a promise from a module for an async file read function. The .then method in the promise doesnt get executed. Is this a known bug?\nSource code is here", "createdAt": "2016-07-15T14:16:29Z", "updatedAt": "2016-07-15T15:17:40Z", "closedAt": "2016-07-15T15:17:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ShashankaNataraj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ShashankaNataraj", "company": "@Cisco"}, {"login": "amavisca", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-15T15:17:40Z", "contents": "It's not a bug, you're doing an async operation so Jasmine doesn't have a way to know when your test is done.\nThere's some documentation of async tests here: http://jasmine.github.io/edge/introduction.html#section-Asynchronous_Support\nYou need to ask for the done callback in the it's function, something like this:\nit('does something async', function(done) {\n  doSomethingAsync().then(function() {\n    expect('foo').toEqual('foo');\n    done();\n  }, function(e) {\n    done.fail('The promise rejected because of ' + e.message);\n  });\n});\n\nGoing to mark this issue as closed! For usage questions: https://groups.google.com/forum/#!forum/jasmine-js\nYou are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1154, "url": "https://github.com/jasmine/jasmine/issues/1154", "title": "Memory Leaks in Jasmine", "contents": "So I'm working on a large angular project with a large number of tests, 2539 as of writing this. In my tests, I'm using angular mock to inject angular variables into my tests in a beforeEach() and then saving them in a scoped variable for my tests to use. The problem I'm having is that jasmine maintains various references to the it(), describe(), beforeEach(), afterEach() functions inside it's suite object (https://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine.js#L2186-L2192) which prevent any garbage collection from occurring of these scoped variables, so currently the memory footprint just spikes up to 2+ gigs of memory when we finally reach some internal limit of the browser's memory footprint and we get a browser disconnect.\nMy current solution is to have an afterEach() in each test file where it clears out these scoped variables, but it would be great if jasmine released it's references to the tests after they were run.", "createdAt": "2016-07-18T16:46:42Z", "updatedAt": "2018-06-26T00:17:07Z", "closedAt": "2016-11-04T17:23:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fracmak", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "fracmak", "company": null}, {"login": "amavisca", "company": null}, {"login": "mikeperri", "company": "Jet.com"}, {"login": "tpflueger", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "thorn0", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-18T22:33:20Z", "contents": "This might not \"solve\" your issue as you've a large existing codebase, but I recommend not capturing variables in the closure to avoid these memory issues. Jasmine hands you a fresh this object inside of each spec run that gets wiped out between every it.\nStumbled upon this nice writeup that I hadn't seen before by some Jasmine users: https://gist.github.com/traviskaufman/11131303\nThere's some related discussion on this memory issue here: #941\nThe official documentation talking about this docs", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikeperri", "authorAssociation": "NONE", "createdAt": "2016-08-11T22:24:24Z", "contents": "Is there any reason Jasmine can't just delete the references to the functions after they're executed?\nI made a function like this:\n    var clearSuiteFns = function(suite) {\n        function clearArray(arr, message) {\n          for (var i = 0; i < arr.length; i++) {\n            delete arr[i].fn;\n          }\n        }\n\n        clearArray(suite.afterAllFns);\n        clearArray(suite.afterFns);\n        clearArray(suite.beforeAllFns);\n        clearArray(suite.beforeFns);\n    };\n\nand then called it after each suite finishes:\ngetJasmineRequireObj().Env = function(j$) {\n  function Env(options) {\n...\n    this.execute = function(runnablesToRun) {\n...\n      var processor = new j$.TreeProcessor({\n...\n        nodeComplete: function(suite, result) {\n          clearSuiteFns(suite);\n\n          if (!suite.disabled) {\n            clearResourcesForRunnable(suite.id);\n          }\n          currentlyExecutingSuites.pop();\n          reporter.suiteDone(result);\n        },\n...\n      });\n...\n  }\n};\n\nand then I just added a line to delete queueableFn's fn when a spec completes:\ngetJasmineRequireObj().Spec = function(j$) {\n...\n  Spec.prototype.execute = function(onComplete, enabled) {\n...\n    function complete(enabledAgain) {\n      self.result.status = self.status(enabledAgain);\n      self.resultCallback(self.result);\n      delete self.queueableFn.fn;\n\n      if (onComplete) {\n        onComplete();\n      }\n    }\n...\n  }\n}\n\nHere's my commit:\nmikeperri@bb9adf6\nAll the tests pass - is there any reason why this would cause an issue? Is there ever some scenario where a suite or spec might need to be run multiple times?\nI tried to add some unit & integration tests but I run into some issues, namely, neither of those complete callbacks seem to be getting called by jasmineUnderTest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fracmak", "authorAssociation": "NONE", "createdAt": "2016-08-12T02:00:31Z", "contents": "@mikeperri that is the type of solution I've been looking for. I tried doing something similar but it didn't make a big difference in the memory footprint. I'll try your code and let you know how well it works", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikeperri", "authorAssociation": "NONE", "createdAt": "2016-08-15T14:46:38Z", "contents": "@fracmak how did it go?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fracmak", "authorAssociation": "NONE", "createdAt": "2016-08-16T18:13:57Z", "contents": "sadly it didn't make that big a dent", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tpflueger", "authorAssociation": "NONE", "createdAt": "2016-09-14T15:03:51Z", "contents": "@fracmak I've also had memory issues with a large Angular app. The project I was on had close to 6k tests and we tried splitting it up. However, Angular came out with a way to limit the amount of times the app is initialized for each test spec, which greatly decreased some of the memory issues we were having.\nhttps://docs.angularjs.org/api/ngMock/function/angular.mock.module.sharedInjector", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-04T17:23:09Z", "contents": "We've looked at deleting functions once Jasmine is done with them, in order to clean out anything that is closed over (See https://www.pivotaltracker.com/story/show/56030214). Unfortunately, there are users who expect to be able to execute a Jasmine environment multiple time without reloading the specs, and this isn't something we're quite ready to break compatibility for.\nFor now, you should probably use the this context that is shared between the beforeEachs, it, and afterEachs and inherited from beforeAlls and afterAlls. It will be available for garbage collection once it is no longer in use by your specs.\nClosing. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["CONFUSED"]}, {"authorLogin": "thorn0", "authorAssociation": "NONE", "createdAt": "2018-06-21T14:16:30Z", "contents": "Unfortunately, there are users who expect [...], and this isn't something we're quite ready to break compatibility for.\n\n@slackersoft Sounds like this behavior simply should be optional. What are your thoughts on introducing an option for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-26T00:17:07Z", "contents": "Jasmine 3.0 should be nulling out references to functions that Jasmine has completed execution of. This should allow variables that were closed over by specs, befores, and afters to be cleaned up by the javascript runtime. If you're still seeing further leaks, we should open a new issue with some more details of what kinds of things are leaking, so we can figure out strategies to fix them.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 6, "reactions_data": ["HOORAY", "THUMBS_UP", "HEART", "THUMBS_UP", "HOORAY", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1156, "url": "https://github.com/jasmine/jasmine/issues/1156", "title": "\"TypeError: this.expectationResultFactory is not a function\" unable to force specs", "contents": "I'm currently unable to force specs without receiving the error TypeError: this.expectationResultFactory is not a function. I'm running protractor e2e tests using Jasmine 2.3.4.\nHere is a stack trace:\n/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2219\n      this.result.failedExpectations.push(this.expectationResultFactory(data);\nSuite.onException /node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2219:48\nat QueueRunner.queueRunnerFactory.onException /node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2330:28\nat onException /jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1924:12\nat [object Object]._onTimeout /jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1910:11\nat Timer.listOnTimeout (timers.js:92:15) /jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1910:11\n\nPlease let me know what info would be helpful. Note that I do not have a beforeEach in an it block, as described in issue #1147.", "createdAt": "2016-07-19T17:43:50Z", "updatedAt": "2016-12-02T18:37:53Z", "closedAt": "2016-12-02T18:37:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "seanhelvey", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "seanhelvey", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T23:05:59Z", "contents": "This sounds like it is probably a duplicate of #811 which should be fixed in the 2.5.x releases. Can you take a look at the new version and see if it fixes your issue?\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1160, "url": "https://github.com/jasmine/jasmine/issues/1160", "title": "`grunt execSpecsInNode` does not print spec failures", "contents": "When I run grunt execSpecsInNode in the presence of failing tests, I get this output:\nRunning \"execSpecsInNode\" task\nWarning: Task \"execSpecsInNode\" failed. Use --force to continue.\n\nAborted due to warnings.\n\nI'm pretty sure this task used to output the actual failure messages. Is it just me? I'm on Mac OS 10.11.5, Node v6.3.0, latest master of Jasmine. Below is the output from npm ls.\njasmine-core@2.4.1 /Users/pivotal/workspace/jasmine\n\u251c\u2500\u252c glob@5.0.15\n\u2502 \u251c\u2500\u252c inflight@1.0.5\n\u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.2\n\u2502 \u251c\u2500\u2500 inherits@2.0.1\n\u2502 \u251c\u2500\u252c minimatch@3.0.2\n\u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.5\n\u2502 \u2502   \u251c\u2500\u2500 balanced-match@0.4.2\n\u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1\n\u2502 \u251c\u2500\u2500 once@1.3.3\n\u2502 \u2514\u2500\u2500 path-is-absolute@1.0.0\n\u251c\u2500\u252c grunt@0.4.5\n\u2502 \u251c\u2500\u2500 async@0.1.22\n\u2502 \u251c\u2500\u2500 coffee-script@1.3.3\n\u2502 \u251c\u2500\u2500 colors@0.6.2\n\u2502 \u251c\u2500\u2500 dateformat@1.0.2-1.2.3\n\u2502 \u251c\u2500\u2500 eventemitter2@0.4.14\n\u2502 \u251c\u2500\u2500 exit@0.1.2\n\u2502 \u251c\u2500\u252c findup-sync@0.1.3\n\u2502 \u2502 \u251c\u2500\u252c glob@3.2.11\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 minimatch@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 lodash@2.4.2\n\u2502 \u251c\u2500\u2500 getobject@0.1.0\n\u2502 \u251c\u2500\u252c glob@3.1.21\n\u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.3\n\u2502 \u2502 \u2514\u2500\u2500 inherits@1.0.2\n\u2502 \u251c\u2500\u252c grunt-legacy-log@0.1.3\n\u2502 \u2502 \u251c\u2500\u252c grunt-legacy-log-utils@0.1.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 lodash@2.4.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 underscore.string@2.3.3\n\u2502 \u2502 \u251c\u2500\u2500 lodash@2.4.2\n\u2502 \u2502 \u2514\u2500\u2500 underscore.string@2.3.3\n\u2502 \u251c\u2500\u2500 grunt-legacy-util@0.2.0\n\u2502 \u251c\u2500\u2500 hooker@0.2.3\n\u2502 \u251c\u2500\u2500 iconv-lite@0.2.11\n\u2502 \u251c\u2500\u252c js-yaml@2.0.5\n\u2502 \u2502 \u251c\u2500\u252c argparse@0.1.16\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 underscore@1.7.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 underscore.string@2.4.0\n\u2502 \u2502 \u2514\u2500\u2500 esprima@1.0.4\n\u2502 \u251c\u2500\u2500 lodash@0.9.2\n\u2502 \u251c\u2500\u252c minimatch@0.2.14\n\u2502 \u2502 \u251c\u2500\u2500 lru-cache@2.7.3\n\u2502 \u2502 \u2514\u2500\u2500 sigmund@1.0.1\n\u2502 \u251c\u2500\u252c nopt@1.0.10\n\u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.9\n\u2502 \u251c\u2500\u2500 rimraf@2.2.8\n\u2502 \u251c\u2500\u2500 underscore.string@2.2.1\n\u2502 \u2514\u2500\u2500 which@1.0.9\n\u251c\u2500\u252c grunt-cli@0.1.13\n\u2502 \u2514\u2500\u2500 resolve@0.3.1\n\u251c\u2500\u252c grunt-contrib-compass@0.6.0\n\u2502 \u251c\u2500\u2500 async@0.2.10\n\u2502 \u251c\u2500\u2500 dargs@0.1.0\n\u2502 \u2514\u2500\u2500 tmp@0.0.21\n\u251c\u2500\u252c grunt-contrib-compress@0.5.3\n\u2502 \u251c\u2500\u252c archiver@0.4.10\n\u2502 \u2502 \u2514\u2500\u252c readable-stream@1.0.34\n\u2502 \u2502   \u251c\u2500\u2500 core-util-is@1.0.2\n\u2502 \u2502   \u251c\u2500\u2500 isarray@0.0.1\n\u2502 \u2502   \u2514\u2500\u2500 string_decoder@0.10.31\n\u2502 \u251c\u2500\u2500 lazystream@0.1.0\n\u2502 \u2514\u2500\u2500 prettysize@0.0.3\n\u251c\u2500\u2500 grunt-contrib-concat@0.3.0\n\u251c\u2500\u252c grunt-contrib-jshint@0.7.2\n\u2502 \u2514\u2500\u252c jshint@2.3.0\n\u2502   \u251c\u2500\u2500 cli@0.4.5\n\u2502   \u251c\u2500\u2500 console-browserify@0.1.6\n\u2502   \u251c\u2500\u2500 minimatch@0.4.0\n\u2502   \u2514\u2500\u2500 underscore@1.4.4\n\u251c\u2500\u252c jasmine@2.4.1 (git://github.com/jasmine/jasmine-npm.git#b2f2f3c4a85fdfb9982dc6ec7db6c78f55299d77)\n\u2502 \u251c\u2500\u252c glob@3.2.11\n\u2502 \u2502 \u2514\u2500\u2500 minimatch@0.3.0\n\u2502 \u2514\u2500\u2500 jasmine-core@2.4.1\n\u251c\u2500\u252c load-grunt-tasks@0.4.0\n\u2502 \u2514\u2500\u252c multimatch@0.1.0\n\u2502   \u251c\u2500\u2500 lodash@2.4.2\n\u2502   \u2514\u2500\u2500 minimatch@0.2.14\n\u251c\u2500\u2500 shelljs@0.1.4\n\u2514\u2500\u252c temp@0.8.3\n  \u2514\u2500\u2500 os-tmpdir@1.0.1", "createdAt": "2016-07-20T16:57:27Z", "updatedAt": "2016-07-22T00:27:24Z", "closedAt": "2016-07-22T00:27:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "benchristel", "company": "Pivotal Labs"}, {"login": "amavisca", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-21T03:20:11Z", "contents": "I think this fixes it:\n#1162", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-21T19:07:36Z", "contents": "@benchristel Could you confirm this when you get a chance?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-21T19:31:39Z", "contents": "Nope, I still get no output when running the tests. I pulled the latest master and ran npm i.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-21T20:10:40Z", "contents": "I changed our devDependency on the jasmine node runner to the npm released one instead of the github repo. You'll have to force npm uninstall jasmine and reinstall since both the npm release and github are valid semver versions (2.4.1, we ask for ^2.4.0). \ud83d\ude35\nIf you npm ls right now I'd assume it still shows the github url.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-22T00:27:24Z", "contents": "That did the trick. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1161, "url": "https://github.com/jasmine/jasmine/issues/1161", "title": "expect().toThrow() doesn't work", "contents": "code.js\n/*jshint node:true*/\n'use strict';\n\nexports.throw_error = function () {\n    throw new Error('ALL YOUR BASE');\n};\n\nspec/TestSpec.js\n/*jshint node:true, jasmine:true*/\n'use strict';\n\nvar code = require('../code.js');\n\ndescribe('code.js', function () {\n    it('test throw_error method', function () {\n        expect(code.throw_error()).toThrow();\n    });\n});\n\nResult\n$ jasmine spec/TestSpec.js \nStarted\nF\n\nFailures:\n1) code.js test throw_error method\n  Message:\n    Error: ALL YOUR BASE\n  Stack:\n    Error: ALL YOUR BASE\n        at Object.exports.throw_error (/home/borisov/test/jasmine/code.js:5:11)\n        at Object.<anonymous> (/home/borisov/test/jasmine/spec/TestSpec.js:8:21)\n\n1 spec, 1 failure\nFinished in 0.008 seconds\n\nVersion\n$ jasmine -v\njasmine v2.4.1\njasmine-core v2.4.1", "createdAt": "2016-07-20T22:35:01Z", "updatedAt": "2016-07-20T22:40:43Z", "closedAt": "2016-07-20T22:40:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "borisovg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "borisovg", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-20T22:39:31Z", "contents": "Your problem is that you are calling your function in your test, so it blows up before it has a chance to match. toThrow takes a function and calls it itself.\nYou can either do:\nexpect(code.throw_error).toThrow();\nor if you need arguments:\nexpect(function () {\n code.throw_error(1,2,3) \n}).toThrow();", "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "borisovg", "authorAssociation": "NONE", "createdAt": "2016-07-20T22:40:43Z", "contents": "Oops, my bad - should have read the docs more carefully - thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1164, "url": "https://github.com/jasmine/jasmine/issues/1164", "title": "Test failures on feature branches should not make the Travis badge red", "contents": "I'd expect the badge to reflect only the state of master. If I push failing tests to a feature branch that has a PR open, the badge currently turns red.", "createdAt": "2016-07-22T22:37:49Z", "updatedAt": "2016-07-22T22:47:40Z", "closedAt": "2016-07-22T22:46:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "benchristel", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-22T22:46:42Z", "contents": "Never mind, it seems that master actually has failing tests \ud83d\ude32", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-22T22:47:39Z", "contents": "Yea, the issue is that sauce doesn't run against PRs. Your last PR broke\nie8.\nOn Friday, July 22, 2016, Ben Christel notifications@github.com wrote:\n\nNever mind, it seems that master actually has failing tests \ud83d\ude32\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n#1164 (comment),\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA1ddKF27UcY82Ijw8eszIh-CXvBl4NSks5qYUhWgaJpZM4JTMF0\n.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1165, "url": "https://github.com/jasmine/jasmine/issues/1165", "title": "Cannot run \"jasmine examples\"", "contents": "Hi, I was just starting up with jasmine, but I got this:\nfs.js:951\n  return binding.readdir(pathModule._makeLong(path), options.encoding);\n                 ^\n\nError: ENOENT: no such file or directory, scandir '{{MY_PATH}}/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/example/node_example/spec/helpers/jasmine_examples'\n    at Error (native)\n    at Object.fs.readdirSync (fs.js:951:18)\n    at copyFiles ({{MY_PATH}}/node_modules/jasmine/lib/command.js:186:24)\n    at Object.installExamples [as action] ({{MY_PATH}}/node_modules/jasmine/lib/command.js:127:3)\n    at Command.run ({{MY_PATH}}/node_modules/jasmine/lib/command.js:47:20)\n    at Object.<anonymous> ({{MY_PATH}}/node_modules/jasmine/bin/jasmine.js:11:9)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:458:32)\n    at tryModuleLoad (module.js:417:12)\n\nNot sure why it happens yet. You probably will be faster than me in understanding why the error is occurring.", "createdAt": "2016-07-23T10:03:33Z", "updatedAt": "2016-07-30T10:57:12Z", "closedAt": "2016-07-28T21:36:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "walterdolce", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "walterdolce", "company": "OVO Energy"}, {"login": "Gerg", "company": null}, {"login": "amavisca", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-27T16:34:19Z", "contents": "This looks like an issue with https://github.com/jasmine/jasmine-npm. @amavisca should be able to help.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-28T21:36:36Z", "contents": "It's fixed on master with this commit: jasmine/jasmine-npm@073e3a7", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "walterdolce", "authorAssociation": "NONE", "createdAt": "2016-07-30T10:57:12Z", "contents": "Thanks all. I guess I should wait for the next release to happen.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1166, "url": "https://github.com/jasmine/jasmine/issues/1166", "title": "Error during \"jasmine -v\"", "contents": "By running jasmine -v, I get:\njasmine v2.4.1\nmodule.js:442\n    throw err;\n    ^\n\nError: Cannot find module '../node_modules/jasmine-core/package.json'\n    at Function.Module._resolveFilename (module.js:440:15)\n    at Function.Module._load (module.js:388:25)\n    at Module.require (module.js:468:17)\n    at require (internal/module.js:20:19)\n    at Object.version [as action] ({{MY_PATH}}/node_modules/jasmine/lib/command.js:174:28)\n    at Command.run ({{MY_PATH}}/node_modules/jasmine/lib/command.js:47:20)\n    at Object.<anonymous> ({{MY_PATH}}/node_modules/jasmine/bin/jasmine.js:11:9)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:458:32)\n\nNode version: v6.3.1\nNpm: 3.10.3\nOS is Mac OS X El Capitan", "createdAt": "2016-07-23T10:05:42Z", "updatedAt": "2016-09-14T23:52:46Z", "closedAt": "2016-09-14T23:52:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "walterdolce", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "walterdolce", "company": "OVO Energy"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T23:52:46Z", "contents": "I believe this should be fixed as of jasmine/jasmine-npm@2b511fb which should be included in the 2.5.x releases.\nWe're working on solving some other issues with the 2.5.x release of jasmine-npm right now, so it may be best to wait before updating until we've fixed jasmine/jasmine-npm#88.\nClosing this. Please let us know if this doesn't appear to be fixed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1167, "url": "https://github.com/jasmine/jasmine/issues/1167", "title": "Permanent \"Cancelled\" result if using Asynchronous XMLHttpRequest in Google Chrome", "contents": "Hi there,\nI am having both Karma and Jasmine installed. The case described below is tested without Jasmine-Ajax.\nFor some reason asynchronous ajax requests to remote servers failed with \"cancelled\" state in the Google Chrome console.\ndescribe (\"Test:\", function () {\n    it (\"test XMLHttpRequest\", function (done) {\n        var xhr = new XMLHttpRequest ();\n\n        xhr.addEventListener (\"load\", function (event) {\n            done ();\n        }, false);\n\n        xhr.open (\"GET\", \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js\", true);\n        xhr.send ();\n    });\n});\n\nExpected behavior\n\nAjax requests should work as expected\n\nActual behavior\nAjax ends with \"abort\" event and exists.\nAlso the code below works fine in the Google Chrome console:\nvar xhr = new XMLHttpRequest ();\n\nxhr.addEventListener (\"load\", function (event) {\n    console.log (\"ALL OK\");\n}, false);\n\nxhr.open (\"GET\", \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js\", true);\nxhr.send ();\n\nEnviroment Details\n\nwindows 8.1\ngulp CLI version 3.9.1\ngulp Local version 3.9.1\nKarma version: 1.1.0\njasmine-core: 2.4.1\n\nWorkaround\nCurrently it seems stable if working with synchronous requests:\ndescribe (\"Test:\", function () {\n    it (\"test XMLHttpRequest\", function (done) {\n        var xhr = new XMLHttpRequest ();\n\n        xhr.addEventListener (\"load\", function (event) {\n            done ();\n        }, false);\n\n        // TADAAA: synchronous!\n        xhr.open (\"GET\", \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js\", false);\n        xhr.send ();\n    });\n});", "createdAt": "2016-07-24T05:19:00Z", "updatedAt": "2019-04-17T09:47:24Z", "closedAt": "2016-07-27T16:31:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexander-ossur", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alexander-ossur", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-27T16:24:47Z", "contents": "I'm not able to reproduce this running just Jasmine. My guess would be that this is either Karma or one of your other libraries.\nHere is a codepen where I tried to reproduce: https://codepen.io/Gerg/pen/bZKavz\nFeel free to reopen if you can reproduce this with just Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1168, "url": "https://github.com/jasmine/jasmine/issues/1168", "title": "How to compose matchers or use built-in matchers in custom matchers", "contents": "I have implemented a custom wrapper type - called Some - (using ES6 classes) and now want to create a custom matcher - called toBeSome for this type.\nclass Some {\n  constructor(value) { ...}\n  method1() { ... }\n  method2() { ... }\n}\n\nThe custom matcher I want to create needs to accept other matchers which apply to the value inside Some:\nexpect(new Some(2)).toBeSome(x => x.toEqual(2))\n\nI wasn't sure how to pass in built-in matchers to toBeSome, but I figured if I pass them as functions, I should be able to call them within my custom matcher.\nMy custom matcher looks like this (I've simplified it here a little bit):\nvar customMatchers = {\n  toBeSome: (util, customEqualityTesters) => ({\n    compare: (actual, expectedMatcher) => {\n      var result = expectedMatcher(expect(actual.value));\n      return result;\n    }\n  })\n};\n\nI'm expecting expectedMatcher(expect(actual.value)) to apply the given expectedMatcher for me.\nFor example, in the case of expect(new Some(2)).toBeSome(x => x.toEqual(2)) above, expectedMatcher(expect(actual.value)) should become:\nexpect(actual.value).toEqual(2)\n\nBut it actually returns undefined.\nIt seems like built-in matchers are not defined yet when defining custom matchers?\nAny idea how I can pass and use matchers in custom matchers?", "createdAt": "2016-07-24T06:10:29Z", "updatedAt": "2017-02-16T00:44:05Z", "closedAt": "2017-02-16T00:44:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mmollaverdi", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "mmollaverdi", "company": null}, {"login": "benchristel", "company": "Pivotal Labs"}, {"login": "jaketodaro", "company": "@facebook"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 8, "comments_data": [{"authorLogin": "mmollaverdi", "authorAssociation": "NONE", "createdAt": "2016-07-24T06:15:34Z", "contents": "You might ask why I just don't apply built-in matchers to the value inside Some in my test, e.g.:\nexpect(new Some(2).value).toEqual(2)\n\nThe answer is that I'm actually not exposing value directly in the Some class. The methods in Some class apply the given arguments to the value internally.\nMy custom matchers is also going to use those methods, as opposed to accessing the value directly. The version of custom matcher I've posted above is simplified to demonstrate the problem with accessing built-in matchers; and is different to what I'm actually trying to implement.\nI hope it's not all confusing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-25T16:15:52Z", "contents": "If you only need to test for equality in your matcher, you can call util.equals(actual, expected, customEqualityTesters). This is what toEqual uses for object comparison.\nEDIT: OK, I misread your question; it sounds like you do want to use matchers besides toEqual. Maybe something like the code below would work, although it doesn't read as nicely.\nwithValueOf(Some(2), x => expect(x).toEqual(2))\nI don't know of a good pattern for actually composing the matchers in the way that you want. I suspect it's not possible, but the Jasmine maintainers would know better.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmollaverdi", "authorAssociation": "NONE", "createdAt": "2016-07-26T05:48:36Z", "contents": "Thanks @benchristel. Yes, the idea was to actually compose the matchers (use built-in matchers in custom matchers). I want to be able to pass in different matchers to toBeSome in different tests.\nThe issue with  expectedMatcher(expect(actual.value)) (which translates to expect(actual.value). toEqual(2)) returning undefined seems to be that jasmine internally uses addExpectationResult to set expectation results to a variable which is then used to pass or fail a test. The expectation result doesn't actually get returned by built-in matchers.\nI wonder if refactoring the jasmine code to return expectation results in addition to setting it which it currently does, would address my problem without impacting how it currently works. I might try that locally.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmollaverdi", "authorAssociation": "NONE", "createdAt": "2016-07-26T05:50:30Z", "contents": "Just saw your edit above. How do you suggest I implement withValueOf?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-26T15:02:46Z", "contents": "How do you suggest I implement withValueOf?\n\nIf we assume that we can get the value of a Some just by accessing the value property, it would be:\nfunction withValueOf(some, fn) {\n  fn(some.value);\n}\nBut of course in reality you'd get the value some other way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mmollaverdi", "authorAssociation": "NONE", "createdAt": "2016-07-27T07:06:07Z", "contents": "Good suggestion @benchristel \ud83d\udc4d. That would work. I'm going to use it for the time being.\nI won't be able to customize the failure messages though with this approach obviously. I had a play with making wrapCompare function return the result and a message and it \"sort of\" worked. I can call built-in matchers in my custom matcher with this change and use the result. I might PR that through later on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaketodaro", "authorAssociation": "NONE", "createdAt": "2016-10-07T15:57:34Z", "contents": "I have a very similar situation where I'd like to compose matchers. Let's say you want to write a custom matcher to check that a tuple contains both even numbers. You could just check for evenness manually in the custom matcher\nvar customMatchers = {\n  toBeEvenTuple: () => ({\n    compare: (actual) => {\n      return {\n        pass: actual[0] % 0 === 0 && actual[1] % 0 === 0\n      };\n    }\n  })\n};\n\nBut it would be better if I could do something like this...\nvar customMatchers = {\n  toBeEvenTuple: () => ({\n    compare: (actual) => {\n      return {\n        pass: expect(actual[0]).toBeEven() && expect(actual[1]).toBeEven()\n      };\n    }\n  })\n};\n\nI can do this now, but if I test [0, 1], I'll get a failure message that \"1 is expected to be even\", when really what I want is to fail with the message \"Tuple [0, 1] is expected to be even\". This is a trivial example where the nested matchers could be replaced with a one line boolean expression, but not all matchers can be so easily swapped out.\nI'm not sure what would have to happen to make this work. Maybe custom matchers could catch failures from nested expect statements and fail the entire expectation, or something could be added to allow obtaining a boolean value from an expect statement. The latter might be better because then the matcher could have different error messages for different kinds of failures.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:44:05Z", "contents": "With the current architecture of Jasmine, a running matcher would actually need to become its own currentRunnable for the purpose of getting any expectation failures in child expects. This is due to the desire for Jasmine to give you all of the failing expectations for your spec, which means no errors are thrown unless the option is set to throwFailures.\nThe most common use case that I have heard for custom matchers calling other matchers is toEqual, which as @benchristel mentioned can be done without the actual matcher now. We don't have any plans to generally allow matchers inside other matchers at this time.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1171, "url": "https://github.com/jasmine/jasmine/issues/1171", "title": "Codeclimate is analyzing files in `lib/`", "contents": "Not only do the compiled files get a very bad grade, Codeclimate detects duplicated code between the src/ and lib/ files, which drags the GPA of the whole project down.", "createdAt": "2016-07-25T17:42:22Z", "updatedAt": "2016-07-26T04:43:50Z", "closedAt": "2016-07-26T04:43:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "benchristel", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1172, "url": "https://github.com/jasmine/jasmine/issues/1172", "title": "Weird behavior when comparing a DOM element to a POJO with a nodeType property", "contents": "Some strange stuff happens with toEqual when objects have a nodeType property.\nvar a = {nodeType: 1, foo: 1};\nvar b = {nodeType: 1, foo: 'different'};\n\nexpect(a).not.toEqual(b); // fails!\n// the failure message is \"Expected HTMLNode not to equal HTMLNode.\"\nThe root cause seems to be that we ascertain whether something is a DOM node by checking its nodeType property. But then there's this code from eq:\nvar aIsDomNode = j$.isDomNode(a);\nvar bIsDomNode = j$.isDomNode(b);\nif (aIsDomNode && bIsDomNode) {\n  // At first try to use DOM3 method isEqualNode\n  if (a.isEqualNode) {\n    return a.isEqualNode(b);\n  }\n  // IE8 doesn't support isEqualNode, try to use outerHTML && innerText\n  var aIsElement = a instanceof Element;\n  var bIsElement = b instanceof Element;\n  if (aIsElement && bIsElement) {\n    return a.outerHTML == b.outerHTML;\n  }\n  if (aIsElement || bIsElement) {\n    return false;\n  }\n  return a.innerText == b.innerText && a.textContent == b.textContent;\n}\nif (aIsDomNode || bIsDomNode) {\n  return false;\n}\nThe code that uses Element seems to be supposed to run only in IE8 (it can actually be hit in other browsers, if a has a nodeType property, which is checked by isDomNode, but does not have an isEqualNode method). But Element seems to be supported in other browsers as well, so why not always check for DOMness with x instanceof Element?", "createdAt": "2016-07-25T22:11:03Z", "updatedAt": "2018-05-05T01:02:10Z", "closedAt": "2018-05-05T01:02:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "participants_count": 6, "participants_data": [{"login": "benchristel", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "DZapdos", "company": null}, {"login": "sgravrock", "company": null}, {"login": "bxu-github", "company": null}], "comments_count": 9, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-26T04:26:07Z", "contents": "Looking at the history, this code came from this PR: #657", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benchristel", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-07-26T17:22:01Z", "contents": "After some more investigation, it seems that Element isn't the superclass of all DOM nodes; it doesn't include text nodes. In Chrome, Node is a superclass of both Element and Text, but there's no Node constructor in IE8.\nTo make this both sane and IE8 compatible we could check whether something is a DOM node by checking every subclass of Node. According to MDN,\n\nThe following interfaces all inherit from Node its methods and properties: Document, Element, CharacterData (which Text, Comment, and CDATASection inherit), ProcessingInstruction, DocumentFragment, DocumentType, Notation, Entity, EntityReference\n\nbut the inheritance tree seems to be totally different in IE8. Based on my poking around in the dev console, IE8 doesn't have CharacterData, Comment, or CDATASection (or at least, it doesn't represent the concepts using those names), but does have Text. In Chrome and Firefox, Document is a superclass of HTMLDocument, but IE8 seems to have only HTMLDocument.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-17T23:11:20Z", "contents": "A few other things to think about with relationship to this:\n\nWe also need to support running specs outside of a browser (i.e. nodejs) where there won't be any HTML objects\nAs mentioned in the linked PR (#657) we grabbed the DOM Node check from underscore, so it should be fairly consistent with many other libraries\nThat is a ton of stuff Jasmine would need to check to be really really sure that the thing we have is a DOM Node and not an object masquerading as one\n\nI'm inclined to think this probably isn't worth it, but we'd be willing to review a PR that makes isDomNode behave correctly for your example.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DZapdos", "authorAssociation": "NONE", "createdAt": "2017-11-10T02:07:37Z", "contents": "+1\nJust ran into this frustrating bug today with TypeScript whilst trying to compare arrays of my POJO objects.\nI assume as there is currently no fix the only work around is to rename the property (which isn't practical for me) or avoid using Jasmine/testing for these objects. Quite annoying.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-15T17:11:40Z", "contents": "You should be able to work around the problem by implementing a custom equality tester for your objects that have nodeType properties. You'll probably also want to to give those objects jasmineToString methods as well, since the default way that Jasmine formats objects for matcher failure messages will also assume that they're DOM nodes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bxu-github", "authorAssociation": "NONE", "createdAt": "2018-04-28T02:02:29Z", "contents": "+1\nThis issue is so strange for Jasmine user,  should better be fixed or provide some configuration to easily work around it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-28T02:19:38Z", "contents": "@bxu-github Did you try using a custom equality tester?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bxu-github", "authorAssociation": "NONE", "createdAt": "2018-04-28T02:58:50Z", "contents": "@sgravrock    Thanks for your reply.\nI will investigate it and have a try.\nCould u give an idea how to easily customize it for this case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bxu-github", "authorAssociation": "NONE", "createdAt": "2018-04-28T05:45:16Z", "contents": "I have a try,  This simple myCustomEquality works for my cases\n  import isPlainObject from 'lodash.isplainobject';\n    let myCustomEquality = (first, second) => {\n        let renameNodeType = o => {\n            if (isPlainObject(o) && Object.keys(o).includes('nodeType')){\n                o.nodetype = o.nodeType;\n                delete o.nodeType;\n            }\n        };\n        renameNodeType(first);\n        renameNodeType(second);\n    };", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1173, "url": "https://github.com/jasmine/jasmine/issues/1173", "title": "Unresolved function or method configureDefaultReporter()", "contents": "Hello,\nI am very new to using Jasmine and I am trying to set it up to use jasmine-spec-reporter instead of the default reporter. However I cannot remove the default reporter because configureDefaultReporter() is undefined. I am using version 2.3.2\nHere is my code\nvar Jasmine = require('jasmine');\nvar jasmine = new Jasmine();\nvar SpecReporter = require('jasmine-spec-reporter');\n\njasmine.loadConfig({\n    \"spec_dir\" : \"test/electron\",\n    \"spec_files\" : [\n        \"electron_spec.js\"\n    ],\n    \"helpers\" : []\n});\n\njasmine.configureDefaultReporter({\n    print: () => {}\n});\n\njasmine.getEnv().addReporter(new SpecReporter());\nThis should be pretty close to exactly the same as the docs\nhttp://jasmine.github.io/2.4/node.html#section-25\nhttp://jasmine.github.io/2.4/node.html#section-Reporters\nI have tried using jasmine.getEnv().configureDefaultReporter() as well.\nAny thoughts/suggestions?\nI apologize in advance if this is something incredibly simple that is going over my head.", "createdAt": "2016-07-28T16:51:43Z", "updatedAt": "2016-07-29T21:00:32Z", "closedAt": "2016-07-28T17:26:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Mercieral", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Mercieral", "company": null}, {"login": "amavisca", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-28T17:17:13Z", "contents": "The last line should be:\njasmine.addReporter(new SpecReporter());\nthe jasmine.addReporter interface is provided by the node runner and is what will cause the default to not be added.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Mercieral", "authorAssociation": "NONE", "createdAt": "2016-07-28T17:26:31Z", "contents": "That worked, thanks! Is this documented anywhere because all of my searching and examples showed that I had to use configureDefaultReporter() to remove the original?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-07-29T21:00:32Z", "contents": "http://jasmine.github.io/2.4/node.html#section-Reporters", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1174, "url": "https://github.com/jasmine/jasmine/issues/1174", "title": "noTryCatch option to make debugging easier", "contents": "When a spec throws an exception and a developer has dev tools open it would be better if the exception is thrown all the way out and causes test execution to stop and the browser to open the source of the exception and begin debugging.\nOur current implementation simply avoids the try/catch in QueueRunner attemptSync and attemptAsync functions.", "createdAt": "2016-07-28T16:53:15Z", "updatedAt": "2016-11-18T19:28:32Z", "closedAt": "2016-11-18T19:25:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "craigcomstocks", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "craigcomstocks", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "craigcomstocks", "authorAssociation": "NONE", "createdAt": "2016-07-28T17:46:37Z", "contents": "I am investigating whether Env.catchExceptions(false) is suitable for this purpose or can be modified for this purpose.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "craigcomstocks", "authorAssociation": "NONE", "createdAt": "2016-07-28T18:20:49Z", "contents": "With catchExceptions, the exception is thrown from a different location than it's source and so with Chrome or IE11 the debugger position lands on QueueRunner.handleException() instead of at the source as it would if there was no try/catch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T19:25:15Z", "contents": "My inclination here would be to solve the problems of correct stack traces and making sure break on errors works correctly, by using a global error handler like window.onerror to handle all errors to associate them with the currently running spec. This would also solve #529 for async specs as well. I don't think we want yet another option to configure exception handling in Jasmine.\nI'm going to close this in favor of a more general change to handle all errors the same way at a global level that also solves the async case. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "craigcomstocks", "authorAssociation": "NONE", "createdAt": "2016-11-18T19:28:32Z", "contents": "Sounds good. Thanks for looking at the bug and PR.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1175, "url": "https://github.com/jasmine/jasmine/issues/1175", "title": "beforeAll and afterAll execute asyncronious functions inside xdescribe, unlike their -Each counterparts", "contents": "The behaviour inside disabled suites (i.e. in the xdescribe function calls) of beforeAll and beforeEach differs considerably, and I suppose this is not an expected behavior.\nIn the example below, if the beforeAll call is changed to beforeEach then the suite passes, otherwise it is not.\nOne can use such constructs to setup a requirejs module before all specs, so this is not an artificial example, it is just simplified.\ndescribe('TestBug suite\\n', function() {\n  'use strict';\n  xdescribe('xdecsr\\n', function() {\n    beforeAll(function(done) {\n      setTimeout(function() {\n        throw 1;\n        done();\n      }, 0);\n    });\n    it('descr', function() {\n      expect(1).toEqual(1);\n    });\n  });\n  describe('decsr\\n', function() {\n    it('descr', function() {\n      expect(1).toEqual(1);\n    });\n  });\n});\n\nThe same issue is with afterAll.", "createdAt": "2016-07-31T11:42:35Z", "updatedAt": "2016-12-02T17:57:07Z", "closedAt": "2016-12-02T17:57:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "koroliov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "koroliov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "alex-svyatenko", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T23:14:34Z", "contents": "This definitely looks like a bug in Jasmine. We would be happy to review a pull request that fixes this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-18T00:53:51Z", "contents": "It looks like this broke when xdescribe was switched to mark the Suite as pending instead of disabled for better consistency with xit. Since nothing will actually set a Suite to disabled, all the disabling stuff should be removed and Suites should report that that aren't executable when they are pending.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alex-svyatenko", "authorAssociation": "NONE", "createdAt": "2016-11-10T16:19:21Z", "contents": "Hi guys,\nIt seems that I found a workaround here, while this issue will be fixed.\nIf you set \"xdescribe\" and \"xbeforeAll\" (x can be replaced by another letter in beforeAll), test will be not executed and have pending status.\nAn example, result in console :\nPending:\n\n'describe name' encountered a declaration exception\n1 spec, 0 failures, 1 pending spec\n\nThanks,\nAlex.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1176, "url": "https://github.com/jasmine/jasmine/issues/1176", "title": "jasmine.anything() doesn't match undefined", "contents": "When using\nspyOn(myFn, 'myMethod');\nmyFn.myMethod(undefined);\nexpect(myFn.myMethod).toHaveBeenCalledWith(jasmine.anything());\nI get\nExpected spy call to have been called with [ <jasmine.anything> ] but actual calls were [ undefined ]\nIf I use anything other than 'undefined' everything is fine.", "createdAt": "2016-08-01T11:02:01Z", "updatedAt": "2017-07-25T00:23:51Z", "closedAt": "2016-08-02T02:46:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "w3apps", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "w3apps", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "vanta", "company": "@smartrecruiters "}, {"login": "filmaj", "company": "@adobe"}], "comments_count": 6, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-02T02:46:50Z", "contents": "This is the expected behavior. See the docs for more info on jasmine.anything.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "w3apps", "authorAssociation": "NONE", "createdAt": "2016-08-02T07:48:36Z", "contents": "You are correct, not sure how I missed that. However is there a way to match even null and undifined?", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-08T19:43:51Z", "contents": "You can also supply your own custom asymmetric matcher that behaves however you want.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vanta", "authorAssociation": "NONE", "createdAt": "2017-01-05T13:30:19Z", "contents": "Is there a way to do it in easy way? Like:\njasmine.reallyAnything()", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "filmaj", "authorAssociation": "NONE", "createdAt": "2017-07-11T17:01:41Z", "contents": "Or perhaps jasmine.nothing(), to match to null or undefined?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T00:23:51Z", "contents": "I think an asymmetric matcher like jasmine.ignored() or something that basically, just returns true for anything that's passed to it would solve this. You might even just be able to implement that in your own suite without Jasmine doing anything.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1178, "url": "https://github.com/jasmine/jasmine/issues/1178", "title": "xdescribe results appear in report as pending", "contents": "http://jasmine.github.io/2.4/introduction.html#section-Disabling_Suites\nAs per the docs it states the results will not appear in the results (I'm guessing this means the report). And in Pending section right below it, it clearly makes the distinction that it will still show the results.\nAnd from what I understand xdescribe should not mark things as pending() as it's different from being disabled.\nReproduce:\nUsing jasmine 2.4.1 (from npm), I copy the code in that section into a file and run jasmine on the file (with a barebones support json file).\nOutput:\nStarted\n*\n\nPending:\n\n1) A spec is just a function, so it can contain any code\n  No reason given\n\n1 spec, 0 failures, 1 pending spec", "createdAt": "2016-08-10T19:51:50Z", "updatedAt": "2016-12-16T21:47:21Z", "closedAt": "2016-12-16T21:47:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hnry", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hnry", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-17T00:10:48Z", "contents": "Using xit is just a shortcut for calling pending in your spec. This is the expected behavior.\nIf you can think of a way to more clearly describe this behavior in the docs, please submit a PR here: https://github.com/jasmine/jasmine.github.io", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hnry", "authorAssociation": "NONE", "createdAt": "2016-09-17T00:15:42Z", "contents": "Hi Greg think there is a mistake, I am referring to xdescribe not xit, doc says \"Suites can be disabled with the xdescribe function. These suites and any specs inside them are skipped when run and thus their results will not appear in the results.\"\nThe example is exact copy of the doc example. Yet xdescribe suite is still printed in report.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-17T00:43:57Z", "contents": "You are correct. xdescribe is a way to recursively pend all the specs below it in the spec tree.\nI believe what the docs are trying to say is something like: \"These suites and any specs inside them are skipped when run and thus will not be marked as passed or failed.\"\nWe still expect the specs and suites to be displayed, just marked as pending.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hnry", "authorAssociation": "NONE", "createdAt": "2016-09-17T01:45:36Z", "contents": "OK, I guess I misunderstood the doc.\nThe text \"These suites and any specs inside them are skipped when run and thus their results will not appear in the results.\" seemed as if it would not be part of the report.\nImmediately below that line is \"Pending specs do not run, but their names will show up in the results as pending.\" almost like it's making a contrast between the two.  Both do not run, but one is \"not part of the report\", and the \"other will show up in the result\".\n\nAlso when I try this in jasmine 2.3.2 I get:\nStarted\n\n\n\nRan 0 of 1 spec\n0 specs, 0 failures\nFinished in 0.005 seconds\n\nSo 2.4.x and 2.5.x both display as pending but 2.3.2 does not show at all.\nOr more accurately the behavior changes 2.3.2 -> 2.4.0.\nSo the doc seems to be more accurate for 2.3.2, it shows there is a spec that did not run, but it won't show up as pending.\nNot sure if bug or doc did not get updated with more accurate behavior during 2.3.2 -> 2.4.0 change?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-17T01:57:31Z", "contents": "This might just be because the npm module didn't support displaying pending specs until 2.4. I'll check with other versions of jasmine to see what the behavior was.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T00:22:56Z", "contents": "I'm seeing the same behavior in browser versions of Jasmine. Prior to 2.4, it printed specs inside xdescribe blocks in grey.\n\nAfter 2.4 is is marked pending:\n\nLooking at the release notes, this changed as part of this PR: #855\nYou are correct that the documentation was probably not updated as part of this. I'll leave this open as a documentation issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1179, "url": "https://github.com/jasmine/jasmine/issues/1179", "title": "Jasmine and JavaScript for Automation (JXA) on the Mac", "contents": "Any chance that Jasmine works with JavaScript for Automation (JXA) on the Mac? JXA can't be run in the context of a browser - it has access to OS APIs and things like that, so as I said, it can't run in a browser.\nAny ideas?\nThanks", "createdAt": "2016-08-12T01:20:09Z", "updatedAt": "2016-09-16T22:47:16Z", "closedAt": "2016-09-16T22:47:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dagware", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "dagware", "company": null}, {"login": "joeldbirch", "company": null}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "joeldbirch", "authorAssociation": "NONE", "createdAt": "2016-08-13T07:33:50Z", "contents": "Just yesterday, I had a crack at getting Jasmine testing working (via Testem) for my JXA scripts and reached this stumbling block. I began doing silly stuff, like:\n\nstubbing non-browser objects, eg. if (!Application) Application = function(){};, and\nadding conditionals to check for features before using them in my JXA scripts, eg. const finder = Application('Finder'); if (finder) finder.includeStandardAdditions = true;\n\nThis allowed the tests to run in the browser, but (obviously) you can only test the most basic functions that don't rely on OS APIs, which I'm finding isn't really worth the effort.\nI'm rewriting an eight year old AppleScript with JXA using cool ES6 stuff (via Browserify/Babelify, NPM, etc) and it is so much better. We just need a testing solution to make it all feel reliable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dagware", "authorAssociation": "NONE", "createdAt": "2016-08-13T11:27:44Z", "contents": "Yeah, I thought about mocking all that stuff, and it's not an undoable thing. I could build up a library of mocks, I suppose. I was just hoping for the real thing.\nStill, good ideas. Having testing in place just feels good. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T22:32:58Z", "contents": "Jasmine should work fine without a browser (for example: Jasmine in node). You will have to run your specs in JXA rather than in a browser.\nIf JXA supports NPM packages, you should check out jasmine core. It contains all the guts of Jasmine, so you will just have to hook it up yourself.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dagware", "authorAssociation": "NONE", "createdAt": "2016-09-16T22:36:31Z", "contents": "Thanks. I have no idea how to do any of this, but that won't stop me from diving in and trying. Thanks again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-16T22:47:15Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1180, "url": "https://github.com/jasmine/jasmine/issues/1180", "title": "Improve default error messages for typed arrays", "contents": "For typed arrays, only a comma-separated list of array elements is output, which can cause confusion.\nFor example:\nexpect(new Uint32Array([1,3,2,5,4,8,])).toEqual(new Uint8Array([1,3,2,5,4,8,]));\noutputs\nError: Expected 1,3,2,5,4,8 to equal 1,3,2,5,4,8.", "createdAt": "2016-08-13T09:17:27Z", "updatedAt": "2017-08-04T16:34:45Z", "closedAt": "2017-08-04T16:34:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "reiner-dolp", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "reiner-dolp", "company": null}, {"login": "Gerg", "company": null}, {"login": "mezoistvan", "company": "heven.com"}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T22:36:40Z", "contents": "How would you suggest we pretty print typed arrays? Ideally we could find a solution that doesn't affect regular arrays (since they are far more common).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "reiner-dolp", "authorAssociation": "NONE", "createdAt": "2016-09-22T12:35:53Z", "contents": "How about one of these:\nif(is_typed_array()) {\nmsg = \"Error: Expected array 1,3,2,5,4,8 of type uint32 to equal array 1,3,2,5,4,8 of type uint8\"\nmsg = \"Error: Expected array type uint32 to equal uint8\" // <-- hides values until type matches\nmsg = \"Error: Expected Uint32Array 1,3,2,5,4,8 to equal Uint8Array 1,3,2,5,4,8\" // <-- my fav\n}\nThe constructor name is available through new Uint32Array().constructor.name. is_typed_array can be implemented using a regex or using instanceof:\nfunction is_typed_array(arr) {\n    return arr instanceof Int8Array ||\n       arr instanceof Uint8Array ||\n       arr instanceof Uint8ClampedArray ||\n           arr instanceof Int16Array ||\n       arr instanceof Uint16Array || \n           arr instanceof Int32Array ||\n       arr instanceof Uint32Array ||\n       arr instanceof Float32Array ||\n       arr instanceof Float64Array;\n}", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-24T00:27:43Z", "contents": "I also like \"Error: Expected Uint32Array 1,3,2,5,4,8 to equal Uint8Array 1,3,2,5,4,8\" as long as it doesn't show the type for regular arrays. For example, we don't want \"Error: Expected Array 1,3,2,5,4,8 to equal Array 11,13,12\".\nWe'd be happy to review a pull request to accomplish this.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mezoistvan", "authorAssociation": "NONE", "createdAt": "2016-10-04T18:36:24Z", "contents": "Hi! I'm using Jasmine as my daily driver, and I'd like to start working on this issue if that's ok!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "reiner-dolp", "authorAssociation": "NONE", "createdAt": "2016-10-05T08:46:24Z", "contents": "I am not working on it. Would appreciate!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1181, "url": "https://github.com/jasmine/jasmine/issues/1181", "title": "No documentation for jasmine.json", "contents": "I can't find documentation for the jasmine.json file format anywhere, making it a big productivity drain.\nI want to figure out how to exclude directories from my specs list, but can't figure out how due to the lack of documentation.\nThis is a core configuration file and should be easy to find.", "createdAt": "2016-08-19T14:31:42Z", "updatedAt": "2016-09-07T23:15:52Z", "closedAt": "2016-09-07T23:15:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fortuna", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "fortuna", "company": null}, {"login": "nashwaan", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "fortuna", "authorAssociation": "NONE", "createdAt": "2016-08-19T14:47:49Z", "contents": "This seems to be a recurring topic: #49 #997.\nDespite those issues being closed, I don't think the problem was solved. There must be a more explicit documentation about the file format that one can easily find.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "nashwaan", "authorAssociation": "NONE", "createdAt": "2016-08-27T08:04:22Z", "contents": "I found some documentation about jasmine.json here http://jasmine.github.io/edge/node.html\nBut i could not find anywhere how to exclude certain files or folders.\nMy workaround is that I suffix all my spec files with _test.js such as api_test.js and logic_test.js.\nSo that i am certain that these are the only files included as in this jasmine.json:\n{\n    \"spec_dir\": \".\",\n    \"spec_files\": [\n        \"./**/*_test.js\"\n    ],\n    \"helpers\": [\n    ],\n    \"stopSpecOnExpectationFailure\": false,\n    \"random\": false\n}", "reactions_count": 2, "reactions_data": ["CONFUSED", "CONFUSED"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T23:15:52Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nClosing this in favor of something in the docs repo. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1182, "url": "https://github.com/jasmine/jasmine/issues/1182", "title": "Run time generated suites", "contents": "Hi, I want to run tests when some event occurs in my app/browser, I embedded jasmine inside some app and tried something more complex but i felt like Jasmine doesn't support run time generated tests so i went and write something simple, like :\ndescribe(\"Refresh\", function () {\nwindow.addEventListener(\"click\",function(){\ndescribe(\"test\",function(){\nit(\"test\",function(){\nexpect(true).toBe(true);\n});\nconsole.log(\"Some text\")\n});\n})\n});\nSo after this i get \"Some test\" in console but no specs, however if I do this :\ndescribe(\"Refresh\", function () {\n        describe(\"test\",function(){\n            it(\"test\",function(){\n               expect(true).toBe(true);\n            });\n            console.log(\"Some text\")\n        });\n\n});\nBasically same thing just without window,addEventListener it work. Is there any way i could do this kind of testing in Jasmine and if not can you suggest some framework that supports this kind of testing.\nBest regards, Nikola Ilic", "createdAt": "2016-08-24T08:52:57Z", "updatedAt": "2016-08-24T17:09:41Z", "closedAt": "2016-08-24T17:09:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chokaa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chokaa", "company": "/"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-24T17:09:41Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1183, "url": "https://github.com/jasmine/jasmine/issues/1183", "title": "Allow reporters to be cleared", "contents": "Hey guys,\nI wanted to swap the default Jest reporter, but since they do their own config somewhere and Jasmine only supports adding reporters and not removing old ones, I can't use any reporters unless the guys at Jest make that configurable somehow.\nSeems like being able to clear or remove reporters would solve this nicely.", "createdAt": "2016-08-25T06:44:25Z", "updatedAt": "2016-09-28T19:16:48Z", "closedAt": "2016-09-28T19:16:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hakunin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hakunin", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-08-25T17:56:05Z", "contents": "Sounds reasonable. We'd be happy to review a pull request to accomplish this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-28T19:16:48Z", "contents": "This should be fixed as of 04bb56a. We were looking to solve some other problems, namely jasmine/jasmine-npm#88", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1184, "url": "https://github.com/jasmine/jasmine/issues/1184", "title": "Stop single test on first expectation failed", "contents": "Using jasmine 2.4, and I was wondering if it's possible to stop a single test on first expect failed. I mean the test (it block code) not the entire suite/set of tests (describe block code).\nI have acknowledged the existence of stopSpecOnExpectationFailure but this stop all the Spec.\nExample\ndescribe('demo suite', function () {\n  it('older test', function (done) { /* some code */});\n  it('old test', function (done) { /* some code */});\n\n  it('new test', function (done) {\n\n    //should be an object, but let's assume that for some Exception/Error on function returns a null\n    var person = getPerson(); \n\n    expect(person).not.toBeNull();\n    expect(person.name).not.toBeNull(); // if person == null will not stop here and throw an exception later\n    expect(person.name).toBe('john');\n\n    done();\n\n  });\n\n  it('newer test', function (done) { /* some code */});\n\n});\nSo, regardless of the other tests being marked as success or failed, it would be great If I could \"stop\" new test on first failed expectation and not by a thrown exception. It's possible to do that?\nAppreciate any help you can give! \ud83d\udc4d", "createdAt": "2016-08-26T20:58:49Z", "updatedAt": "2017-06-16T18:52:25Z", "closedAt": "2016-09-14T21:17:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "poliveira89", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "poliveira89", "company": null}, {"login": "henrahmagix", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "alex-svyatenko", "company": null}, {"login": "zhong-edward", "company": null}], "comments_count": 10, "comments_data": [{"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-13T13:33:32Z", "contents": "The second expect never fails because it never runs: person.name throws a TypeError as soon as it's run, and it's not possible to continue after that because of the javascript engine.\nYou could wrap the second and third expect in try/catch, one for both or one each, and manually deal with the caught errors, then fail with Jasmine's fail().\nvar erred = false;\nvar thing = getObjectOrNull();\n\nexpect(thing).not.toBeNull();\n\ntry {\n    expect(thing.a).toBe('a');\n} catch (error) {\n    erred = true;\n    console.error(error);\n}\n\ntry {\n    expect(thing.b).toBe('b');\n} catch (error) {\n    erred = true;\n    console.error(error);\n}\n\nif (erred) {\n    fail('Errors thrown');\n} else {\n    done();\n}\nOr, more succinctly:\nvar erred = false;\nvar thing = getObjectOrNull();\n\nexpect(thing).not.toBeNull();\n\nif (typeof thing === 'object') {\n    expect(thing.a).toBe('a');\n    expect(thing.b).toBe('b');\n} else {\n    fail('thing is not object');\n}\nAs a side note, you don't need done for synchronous tests, so you can remove it from the spec's function arguments and the spec will end when the function ends.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-13T13:35:11Z", "contents": "After a second read of your question, my second example would fit better: fail the assertion instead of throwing an exception if thing is null. This is also related to #414.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "poliveira89", "authorAssociation": "NONE", "createdAt": "2016-09-14T21:17:53Z", "contents": "@henrahmagix as I made my question I was expecting something more aligned with expect, but your solution seems to deliver the job as well.\nSo, thank you very much for your time (and help)! \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-14T21:22:06Z", "contents": "You're welcome, glad I could help :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T21:26:55Z", "contents": "@poliveira89 Unless I'm misunderstanding your question, I think you just want stopSpecOnExpectationFailure. The setting will affect each of the specs, but not the entire run of the suite. So: each spec that has a failed expectation will stop, but the next spec will be run.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "poliveira89", "authorAssociation": "NONE", "createdAt": "2016-09-14T22:00:42Z", "contents": "@slackersoft Hello, for my understanding a spec is a single .js with one/several describe.\nAnd when I found that property, I interpreted as it can ignore failed spec when several are executed at same time.\nMy need it's in a lower level, it's focused on the \"test/assertion\" (in this case expect function), as I said earlier, I want to have a list of expect but I would like to \"break\" the it on first failed expect occurrence.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T22:13:19Z", "contents": "In Jasmine terminology a spec is a single it, not the whole file that includes it. stopSpecOnExpectationFailure is definitely what you want from your description.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alex-svyatenko", "authorAssociation": "NONE", "createdAt": "2016-11-02T15:55:25Z", "contents": "@slackersoft\nHello! Could you please explain how to do it?\nI added in protractor config file the next thing :\nexports.config = {\nframework: 'jasmine2',\njasmineNodeOpts: {\nstopSpecOnExpectationFailure: true\n},\nspecs: [\n'../spec/test1.spec.js',\n'../spec/test2.spec.js'\n]};\nIt doesn't work.\nIf I have 3 'it' blocks in one spec file and the 2d 'it' was failed, the next one (the 3d) will be executed.\nI'm searching an approach how to fail describe with many 'it' blocks, when first expectation is failed and the rest 'it' blocks will NOT be executed.\nIn the meantime, the rest spec file in config file should be executed.\nCould you please give your recommendations? Is it possible to implement this solution using Protractor + Jasmine ?\nMany thanks in advance.\nAlex.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:47:18Z", "contents": "@alex-svyatenko I think you're talking about something more like #414 not this issue. As for how to set the current setting in Protractor, you'd have to talk to the Protractor team, I don't know how those options are set or passed through to the underlying jasmine instance.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zhong-edward", "authorAssociation": "NONE", "createdAt": "2017-06-16T18:52:25Z", "contents": "as I know element.click() can stop case if the element not present.\nbut if a file flag not exist, how can stop case flow?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1185, "url": "https://github.com/jasmine/jasmine/issues/1185", "title": "htmlReporter for node projects", "contents": "I can use jasmine-standalone to run spec in the browser and get the nice html output of the specs (only if the specs are not accessing node specific features like process.argv and require('fs')).\nHowever, i am unable to find a way to get same nice html output if i am writing specs for a node project.\nwhen i type this command in the console jasmine, i get the following output:\n...............................................................\n63 specs, 0 failures\nFinished in 1.229 seconds\n\nBut I wonder if there is a way like writing this command jasmine --useHtmlReporter so that i get nice html output.\nNote that I am using node specific features which means i cannot use tools like browserify to bundle the project and load in the jasmine.html.\nIt seems that env.addReporter(htmlReporter) requires a DOM and thus should be run in a browser like chrome or PhantomJS, right?", "createdAt": "2016-08-27T08:31:42Z", "updatedAt": "2016-09-24T00:38:07Z", "closedAt": "2016-09-24T00:38:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nashwaan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nashwaan", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T22:02:25Z", "contents": "I don't know of any existing solutions for this.\nYou could probably set up a HtmlReporter without a browser-side Jasmine that communicates with a web server running jasmine in node. You would also need to provide the HtmlReporter with a fake jasmine env, but thankfully the reporter doesn't use it for much.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1186, "url": "https://github.com/jasmine/jasmine/issues/1186", "title": "Parent's beforeEach/afterEach apply to specs inside nested describe -- bug or by design?", "contents": "Let's consider a nested specs structure:\ndescribe {\n  beforeEach {}\n  afterEach {}\n  it { #1 }\n  describe {\n    it { #2 }\n    it { #3 }\n  }\n}\n\nRight now (or, as of version 2.4.1) beforeEach and afterEach will be called three times, as if specs 2 and 3 where not nested, and at the same level as spec 1.\nNesting logic would suggest calling beforeEach and afterEach only two times, once for spec 1, and once for nested describe, as a whole.\nIs current behavior accidental (bug?), or was it created intentionally.\nIf it is not a bug, then what is the reasoning behind such decision (it will help to find structural work-around).", "createdAt": "2016-08-29T19:57:51Z", "updatedAt": "2016-08-30T01:48:14Z", "closedAt": "2016-08-30T01:48:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "3n-mb", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "3n-mb", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-08-30T01:48:14Z", "contents": "This behavior is correct and consistent with other BDD frameworks (RSpec, Ginkgo, Mocha).\nWhenever possible, your tests should be isolated from each other. If your beforeEach only ran once for the nested its then changes to the test setup from spec 2 could leak into spec 3. If you intentionally want to leak state between tests, then you should use beforeAll.\nSee this thread for more info about test ordering: #873\nThanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1187, "url": "https://github.com/jasmine/jasmine/issues/1187", "title": "toHaveBeenCalledTimes(0) fails silently in async", "contents": "In Jasmine v2.4.1 (jasmine-core v2.4.1), calling expect(obj.Save).toHaveBeenCalledTimes(0) asynchronously hangs until jasmine.DEFAULT_TIMEOUT_INTERVAL limit is reached.\nCalling the function synchronously returns the following error\n\nExpected times failed is required as an argument.\n\nEither the behavior of toHaveBeenCalledTimes(0) should be changed to match not.toHaveBeenCalled() or providing 0 to toHaveBeenCalledTimes will have to find a way to emit an error in an asynchronous execution flow.\nTo reproduce:\ndescribe(\"Multiple spies, when created manually\", function () {\n  var tape;\n\n  beforeEach(function() {\n    tape = jasmine.createSpyObj('tape', ['play', 'pause', 'stop', 'rewind']);\n\n    tape.play();\n    tape.pause();\n    tape.rewind(0);\n  });\n\n  it(\"tracks that the spies were called\", function(done) {\n    Promise.resolve().then(function () {\n        expect(tape.play).toHaveBeenCalled();\n        expect(tape.pause).toHaveBeenCalled();\n        expect(tape.rewind).toHaveBeenCalled();\n        expect(tape.stop).toHaveBeenCalledTimes(0);\n        done()\n    })\n  });\n});\n\nOutput:\n\nFailures:\n\nMultiple spies, when created manually tracks that the spies were called\nMessage:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nStack:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nat tryOnTimeout (timers.js:228:11)\nat Timer.listOnTimeout (timers.js:202:5)", "createdAt": "2016-08-30T23:37:17Z", "updatedAt": "2017-09-07T19:47:07Z", "closedAt": "2016-09-07T22:56:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jerroydmoore", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "jerroydmoore", "company": null}, {"login": "chrisdeely", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "azanebrain", "company": "Veyo Logistics"}], "comments_count": 3, "comments_data": [{"authorLogin": "chrisdeely", "authorAssociation": "NONE", "createdAt": "2016-09-03T23:56:04Z", "contents": "This issue appears to have been corrected in 2.5.0 via commit e5c744f", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T22:56:13Z", "contents": "Closing this, as it sounds like it has been fixed in the current release. Please let us know if you feel this is incorrect.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "azanebrain", "authorAssociation": "NONE", "createdAt": "2017-09-07T19:47:07Z", "contents": "You can also use expect(...).not.toHaveBeenCalled()", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1188, "url": "https://github.com/jasmine/jasmine/issues/1188", "title": "2.5.0 Regression issue with expect().toHaveBeenCalledWith()", "contents": "After installing 2.5.0, many of our tests are failing with:\nPhantomJS 2.1.1 (Windows 8 0.0.0) Some test... FAILED\n        TypeError: undefined is not a constructor (evaluating 'allKeys[i].match(/^[0-9]+$/)') in C:/<path>/node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 2988)\n        c:/<path>/specFile.js:79:85\n\nAll the tests I've looked at so far call toHaveBeenCalledWith, e.g.:\nexpect(aSpy).toHaveBeenCalledWith({\n  someProperties: \"string\",\n  someOtherProperties: true\n})\nThe full function that is throwing an error is:\n    function keys(obj, isArray) {\n      var allKeys = Object.keys ? Object.keys(obj) :\n        (function(o) {\n            var keys = [];\n            for (var key in o) {\n                if (has(o, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        })(obj);\n\n      if (!isArray) {\n        return allKeys;\n      }\n\n      var extraKeys = [];\n      for (var i in allKeys) {\n        if (!allKeys[i].match(/^[0-9]+$/)) {\n          extraKeys.push(allKeys[i]);\n        }\n      }\n\n      return extraKeys;\n    }\n(edit)\nTemporary Workaround\nLock jasmine-core to version 2.4.1 until this is addressed.", "createdAt": "2016-08-31T08:17:12Z", "updatedAt": "2016-09-07T22:02:03Z", "closedAt": "2016-09-02T03:45:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "azz", "authorAssociation": "NONE", "participants_count": 15, "participants_data": [{"login": "azz", "company": "IRESS Limited"}, {"login": "tfrijsewijk", "company": "@infoprojects "}, {"login": "SuneRadich", "company": null}, {"login": "AlexChesters", "company": "@bbc @fmtvp"}, {"login": "gebeuhler", "company": null}, {"login": "dmcquillan314", "company": "Peapod, LLC"}, {"login": "xenobytezero", "company": null}, {"login": "chanjunc", "company": null}, {"login": "leonelgoncalves", "company": null}, {"login": "chrisfunston", "company": "LogiSense Corp."}, {"login": "fluffy88", "company": null}, {"login": "aligneddev", "company": null}, {"login": "pnahtanoj", "company": null}, {"login": "jeremyhill-up", "company": "@unionpacific"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 16, "comments_data": [{"authorLogin": "tfrijsewijk", "authorAssociation": "NONE", "createdAt": "2016-08-31T09:27:50Z", "contents": "Same here. The folllowing test fails:\nit('should equal', function() {\n  expect(true).toEqual(true); // ok\n  expect([true]).toEqual([true]); // fail\n}\nFails with\nPhantomJS 1.9.8 (Windows 8 0.0.0) This should equal FAILED\n        TypeError: 'undefined' is not a function (evaluating 'allKeys[i].match(/^[0-9]+$/)')\n            at D:/toEqualSpec.js:7", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "SuneRadich", "authorAssociation": "NONE", "createdAt": "2016-08-31T12:22:03Z", "contents": "For now I have downgraded to 2.4.1 and all my tests run again", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AlexChesters", "authorAssociation": "NONE", "createdAt": "2016-08-31T12:25:13Z", "contents": "@SuneRadich we've done the same and that solves our failures as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gebeuhler", "authorAssociation": "NONE", "createdAt": "2016-08-31T15:39:50Z", "contents": "I am experiencing this issue as well. Downgrading to 2.4.1 fixed it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmcquillan314", "authorAssociation": "NONE", "createdAt": "2016-08-31T15:40:01Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "xenobytezero", "authorAssociation": "NONE", "createdAt": "2016-08-31T15:53:21Z", "contents": "I am also seeing this issue, downgrade has solved it.\nThis issue only occurs on PhantomJS, In Chrome 53.0.2785.80 I see no issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chanjunc", "authorAssociation": "NONE", "createdAt": "2016-08-31T17:10:07Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leonelgoncalves", "authorAssociation": "NONE", "createdAt": "2016-08-31T19:43:53Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisfunston", "authorAssociation": "NONE", "createdAt": "2016-08-31T21:13:05Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisfunston", "authorAssociation": "NONE", "createdAt": "2016-08-31T21:17:42Z", "contents": "(Specifically, it's this change: https://github.com/jasmine/jasmine/pull/1155/files)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffy88", "authorAssociation": "NONE", "createdAt": "2016-09-01T11:40:53Z", "contents": "Having the same issue and can confirm it's only a problem in PhantomJS, Chrome and Firefox work fine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffy88", "authorAssociation": "NONE", "createdAt": "2016-09-01T13:42:55Z", "contents": "After a little more investigation I found the following.\n\nINFO: 'AllKeys:', ['0', '1']\nINFO: 'I:', '0'\nINFO: 'AllKeys[i]:', '0'\nINFO: 'I:', '1'\nINFO: 'AllKeys[i]:', '1'\nINFO: 'I:', 'find'\nINFO: 'AllKeys[i]:', function (predicate) { ... }\n\nThis issue seems to extend from another PhantomJS issue, where Array.find isn't available in PhantomJS so I am using phantomjs-polyfill-find to add Array.find.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aligneddev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-01T14:55:49Z", "contents": "I'm seeing this with tests running in Karma and running through the browser as well.\nerror: \" TypeError: allKeys[i].match is not a function\"\nI see it with toHaveBeenCalledWith as well.\nThis is on line 2988 of jasmine.js. When I get the exception, the allKeys is an array of 0 length.\nI think it goes back to this changeset: 5458f2f#diff-4b1cbd917e62d27b2645d46dd0d01be3\nusing for...in at line 2944, adds an extra \"remove\" to the loop (see my attached screenshot). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in. Maybe there is something in the \" enumerable properties\" of this array.\n\nChanging it to\nif (allKeys.length === 0) {\n  return allKeys;\n}\n\nfor (var i = 0; i < allKeys.length; i++) {\n if (!allKeys[i].match(/^[0-9]+$/)) {\n  extraKeys.push(allKeys[i]);\n }\n}\n\nI'll get a pull request going. @slackersoft do you see any issues with this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pnahtanoj", "authorAssociation": "NONE", "createdAt": "2016-09-01T15:49:36Z", "contents": "+1 for error and fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeremyhill-up", "authorAssociation": "NONE", "createdAt": "2016-09-07T21:31:51Z", "contents": "+1, same deal here (comparing arrays for equality).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T22:02:03Z", "contents": "The fix should be released in v2.5.1", "reactions_count": 2, "reactions_data": ["HOORAY", "HOORAY"]}], "reactions_count": 15, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1189, "url": "https://github.com/jasmine/jasmine/issues/1189", "title": "Nested describes fail when using spyOn in 2.5.0", "contents": "After updating to 2.5.0 we have lots of failing tests because Jasmine fails to set the spy correctly when describes are nested inside each other. Consider this simple test case:\ndescribe(\"demo\", function () {\n    beforeEach(function () {\n        spyOn(sessionStorage, 'getItem').and.callFake(function (key) {\n            return 'item-'+key;\n        });\n    });\n\n    it(\"should do something\", function() {\n        expect(sessionStorage.getItem('test')).toBe('item-test');\n    });\n\n    describe(\"nested describe\", function() {\n        it(\"should do something\", function() {\n            expect(sessionStorage.setItem('test', 'value')).toBe(undefined);\n        });\n    });\n});\nThe error message returned is:\nError: <spyOn> : getItem has already been spied upon\nUsage: spyOn(<object>, <methodName>)", "createdAt": "2016-08-31T09:24:49Z", "updatedAt": "2016-09-09T20:35:37Z", "closedAt": "2016-09-02T04:11:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mariusGundersen", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "mariusGundersen", "company": null}, {"login": "leonelgoncalves", "company": null}, {"login": "leungandrew", "company": "@TribalScale  @OpenFuturePlatform "}, {"login": "SilverDFlame", "company": null}, {"login": "kjsalexander", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "leonelgoncalves", "authorAssociation": "NONE", "createdAt": "2016-08-31T19:44:07Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "leungandrew", "authorAssociation": "NONE", "createdAt": "2016-09-01T01:48:44Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SilverDFlame", "authorAssociation": "NONE", "createdAt": "2016-09-01T15:57:40Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kjsalexander", "authorAssociation": "NONE", "createdAt": "2016-09-01T16:02:12Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}], "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1190, "url": "https://github.com/jasmine/jasmine/issues/1190", "title": "Jasmine 2.5.0 breaks jasmine.clock tick behavior", "contents": "After updating my node project to jasmine-core 2.5.0, jasmine test ticks seems to cause the clock to increase with geometric progression.\nHere's a simple test that shows what I'm talking about.  It ticks the clock several times, 1000 ms each time.\ndescribe('jasmine.clock', function() {\n    beforeEach(function() {\n        jasmine.clock().install();\n        jasmine.clock().mockDate(new Date(2016, 6, 7));\n    });\n\n    afterEach(function() {\n        jasmine.clock().uninstall();\n    });\n\n    it('jasmine.clock.tick', function() {\n        console.log(Date.now());\n\n        jasmine.clock().tick(1000);\n\n        console.log(Date.now());\n\n        jasmine.clock().tick(1000);\n\n        console.log(Date.now());\n\n        jasmine.clock().tick(1000);\n\n        console.log(Date.now());\n    });\n});\nThe actual output is\nLOG LOG: 1467864000000\nLOG LOG: 1467864001000\nLOG LOG: 1467864003000\nLOG LOG: 1467864006000\n\nbut I expect it to be\nLOG LOG: 1467864000000\nLOG LOG: 1467864001000\nLOG LOG: 1467864002000\nLOG LOG: 1467864003000\n\nI think #915 may be the culprit, but that's just because it's the only related recent change I could find.", "createdAt": "2016-08-31T15:10:40Z", "updatedAt": "2016-09-01T04:25:51Z", "closedAt": "2016-09-01T04:25:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mramato", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "mramato", "company": "Analytical Graphics, Inc."}], "comments_count": 0, "comments_data": [], "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1191, "url": "https://github.com/jasmine/jasmine/issues/1191", "title": "callFake() fails when passing a \"special\" function", "contents": "To reproduce:\njasmine.createSpy('spy').and.callFake(console.log);\nThis fails with the following error:\nError: Argument passed to callFake should be a function, got function () {\n          self.log(method, arguments)\n          return Function.prototype.apply.call(orig, localConsole, arguments);\n        }\n\nThis is caused by the change in #1059. The check for a function in the change is fn instanceof Function. And since console.log instanceof Function returns false, this will fail.\nThis is quite confusing, since it indeed is a function. I would say the check should be updated. (For example _.isFunction() returns true for console.log.)", "createdAt": "2016-09-01T11:18:54Z", "updatedAt": "2016-09-14T23:07:27Z", "closedAt": "2016-09-14T23:07:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "IgorAufricht", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "IgorAufricht", "company": null}, {"login": "chrisdeely", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "chrisdeely", "authorAssociation": "NONE", "createdAt": "2016-09-04T20:33:26Z", "contents": "Are you overwriting console.log within your code by any chance?\nWhat browsers have you tested this in? In Chrome 52 console.log instanceof Function === true", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "IgorAufricht", "authorAssociation": "NONE", "createdAt": "2016-09-04T20:48:44Z", "contents": "My apologies - this is happening in PhantomJS (1.9.8 running with karma). No overwriting of console.log() as far as I can tell.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1194, "url": "https://github.com/jasmine/jasmine/issues/1194", "title": "Missing `has()` check in `keys()`", "contents": "Hey there,\n.toEqual() is failing for me since updating to edge, and I tracked it down to a missing has() in the keys function.\nNote: I tried to fork and contribute, but jasmine-core package seems to itself load a (gitignored) older version of itself inside of its own ./node_modules, so editing ./lib/jasmine-core/jasmine.js has no effect, and a change in /node_modules/jasmine-core//node_modules/jasmine-core/lib/jasmine-core/jsmine.js can't of course get committed...\nFurther, I found that the non-node_modules version of that lib has already been fixed using a for loop instead of for-in, but that newer file doesn't get loaded since the node-module dependency takes priority for some reason.\nPrevious version (commented out hotfix I added):\nvar extraKeys = [];\nfor (var i in allKeys) {\n    // if (has(allKeys, i)) {\n        if (!allKeys[i].match(/^[0-9]+$/)) {\n            extraKeys.push(allKeys[i]);\n        }\n    // }\n}\nSeems to have been changed recently, but doesn't get loaded:\nvar extraKeys = [];\nif (allKeys.length === 0) {\n    return allKeys;\n}\n\nfor (var x = 0; x < allKeys.length; x++) {\n    if (!allKeys[x].match(/^[0-9]+$/)) {\n        extraKeys.push(allKeys[x]);\n    }\n}", "createdAt": "2016-09-02T16:48:51Z", "updatedAt": "2016-09-12T20:01:17Z", "closedAt": "2016-09-07T22:03:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nemoDreamer", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nemoDreamer", "company": "nemoDreaming.com"}, {"login": "mbuckley", "company": "@clio "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "mbuckley", "authorAssociation": "NONE", "createdAt": "2016-09-02T17:16:29Z", "contents": "Hi @nemoDreamer I'm seeing this issue and just opened a ticket for it here. #1195. We're seeing this when updating from v2.4.1 to v2.5.0.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2016-09-04T01:04:34Z", "contents": "I guess a more general question is: why is the jasmine-core node-module including an older version of jasmine-core inside of itself, and why is that older version's /lib being loaded by Karma, instead of the /lib in its root? \ud83d\ude22", "reactions_count": 1, "reactions_data": ["LAUGH"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T22:03:19Z", "contents": "Closing this as a duplicate of #1188. The fix should be released in v2.5.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2016-09-12T20:01:17Z", "contents": "Thanks, guys, I just updated to v2.5.1, and all's \u2728 !", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1195, "url": "https://github.com/jasmine/jasmine/issues/1195", "title": "TypeError: undefined is not a constructor (evaluating 'allKeys[i].match(/^[0-9]+$/)')", "contents": "Version: 2.5.0\nException\nTypeError: undefined is not a constructor (evaluating 'allKeys[i].match(/^[0-9]+$/)') in ~/node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 2989)\nAssertion triggering exeption\nexpect(window.alert).toHaveBeenCalledWith 'response'\nOverview\nAfter updating jasmine-core from v2.4.1 to v2.5.0 I am seeing the following exception. With the changes to the eq function for v2.5.0, it seems to be caused by the following loop block.\njasmine-core/lib/jasmine.js ~ line 2988\nfor (var i in allKeys) {\n  if (!allKeys[i].match(/^[0-9]+$/)) { // line 2988\n    extraKeys.push(allKeys[i]);\n   }\n}\n\nIf I add a guard check for hasOwnProperty it resolves the issue. I'm not familiar enough with this code to know if this is the correct solution. Should this loop also be checking inherit properties or should it exclude them?\n// hasOwnProperty example code that resolves the exception\nfor (var i in allKeys) {\n  if (allKeys.hasOwnProperty(i)) { // guard that resolves issue\n    if (!allKeys[i].match(/^[0-9]+$/)) {\n      extraKeys.push(allKeys[i]);\n    }\n  }\n}\n\nHas anyone else run into this?", "createdAt": "2016-09-02T17:12:29Z", "updatedAt": "2019-02-11T23:44:59Z", "closedAt": "2016-09-07T22:01:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mbuckley", "authorAssociation": "NONE", "participants_count": 11, "participants_data": [{"login": "mbuckley", "company": "@clio "}, {"login": "olgabuksa", "company": null}, {"login": "Sygnious", "company": null}, {"login": "seanparmelee", "company": "HomeAway"}, {"login": "Rhathe", "company": null}, {"login": "jeremyhill-up", "company": "@unionpacific"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jonashartwig", "company": null}, {"login": "BenjenJones", "company": null}, {"login": "enmanuelduran", "company": null}, {"login": "sanidz", "company": null}], "comments_count": 14, "comments_data": [{"authorLogin": "olgabuksa", "authorAssociation": "NONE", "createdAt": "2016-09-02T22:39:31Z", "contents": "We are facing the same problem in our big project. Please fix it as high priority", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mbuckley", "authorAssociation": "NONE", "createdAt": "2016-09-02T22:59:32Z", "contents": "@olgabuksa We've worked around the issue by locking to version 2.4.1 for now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Sygnious", "authorAssociation": "NONE", "createdAt": "2016-09-05T08:16:28Z", "contents": "I got the same error as well, before going back to 2.4.1.\nBefore the reversion, I found out that this error happens when you compare two arrays with toEqual (expect(...).toEqual(...)), and both are equal.\nIf unequal, you get the standard error message showing the contents. If they are equal, you get TypeError: undefined is not a constructor.\nIt sounds more like an error in jasmine-core, if you ask me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "seanparmelee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-06T04:24:59Z", "contents": "I believe this was fixed with #1192 (for #1188).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "olgabuksa", "authorAssociation": "NONE", "createdAt": "2016-09-06T17:16:08Z", "contents": "It's not fixed yet. @mbuckley, how to lock 2.4.1?  npm install is downloading latest version jasmine-core...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mbuckley", "authorAssociation": "NONE", "createdAt": "2016-09-06T19:05:46Z", "contents": "@olgabuksa If you are using npm, you can lock the version by using a tilde which will allow patch updates, or just specify the version with no prefix.\n// patch updates\n\"devDependencies\": {\n  \"jasmine-core\": \"~2.4.1\"\n}\n\n// lock version at 2.4.1\n\"devDependencies\": {\n  \"jasmine-core\": \"2.4.1\"\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Rhathe", "authorAssociation": "NONE", "createdAt": "2016-09-07T16:41:49Z", "contents": "You can reproduce this with:\nexpect([]).toEqual([])", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jeremyhill-up", "authorAssociation": "NONE", "createdAt": "2016-09-07T21:32:27Z", "contents": "+1, same deal here (comparing arrays for equality).  2.4.1 was fine, npm upgrading jasmine to 2.5.0 caused the breakage immediately.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T22:01:55Z", "contents": "Closing this as a duplicate of #1188. The fix should be released in v2.5.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jonashartwig", "authorAssociation": "NONE", "createdAt": "2017-04-25T06:21:10Z", "contents": "This seems to have returned in jasmine 2.6.0 went back to 2.5.2 to make it work.", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "BenjenJones", "authorAssociation": "NONE", "createdAt": "2017-04-25T08:41:47Z", "contents": "Same here. Please fix.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "enmanuelduran", "authorAssociation": "NONE", "createdAt": "2017-04-25T21:39:49Z", "contents": "Happening to my team too!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sanidz", "authorAssociation": "NONE", "createdAt": "2019-01-14T11:58:21Z", "contents": "This seems to have returned in jasmine 2.6.0 went back to 2.5.2 to make it work.\n\nVersion 2.6.2 has this problem after installing \"@zxing/ngx-scanner\": \"^1.3.0\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-11T23:44:59Z", "contents": "2.6.2 is over a year old and we've released a new major version since then. Can you try updating to a more recent version of Jasmine? I'd like to confirm that the issue still exists since I'm not seeing any errors with the previous examples, like expect([]).toEqual([]).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1196, "url": "https://github.com/jasmine/jasmine/issues/1196", "title": "SpyOn not being reset on BeforeEach for PhantomJS ", "contents": "Hi,\nI'm having this issue after updating to v2.5.0.\nI'm using SpyOn inside a beforeEach to mock localstorage with an object. Any it() statement will fail, except the first one, throwing Error:  : getItem has already been spied upon\nIt seems to not be resetting the spies after each it() statement.\nThis happens when using PhantomJS (2.1.1). Switching to Chrome does not produce the error.\nBelow is a sample of my code.\nThanks.\nimport {provide} from '@angular/core';\n\nimport {beforeEachProviders, inject} from '@angular/core/testing';\n\nimport {MyService} from '../myService/index'\n\ndescribe('My Service', () => {  \n\n    var storeMock = {};\n\n    beforeEachProviders(() => {\n        return [         \n        MyService,                               \n        ];\n    });\n\n    // Mock localStorage;    \n    beforeEach(() => {\n        storeMock = {};\n\n        spyOn(localStorage, 'getItem').and.callFake( (key:string):String => {\n        return storeMock[key] || null;\n        });\n        spyOn(localStorage, 'removeItem').and.callFake((key:string):void =>  {\n        delete storeMock[key];\n        });\n        spyOn(localStorage, 'setItem').and.callFake((key:string, value:string):string =>  {\n        return storeMock[key] = <string>value;\n        });\n        spyOn(localStorage, 'clear').and.callFake(() =>  {\n            storeMock = {};\n        });               \n    });\n\n    it('should set items in local storage when calling doSomething', inject([MyService], \n        (service: MyService) => {                       \n\n            service.doSomething();\n\n            expect(localStorage.getItem('item1')).toBe('value1');\n            expect(localStorage.getItem('item2')).toBe('value2');            \n        })\n    );\n\n    it('should set items in local storage when calling doSomething2', inject([MyService], \n        (service: MyService) => {                       \n\n            service.doSomething2();\n\n            expect(localStorage.getItem('item3')).toBe('value3');\n            expect(localStorage.getItem('item4')).toBe('value4');            \n        })\n    );\n\n});", "createdAt": "2016-09-02T17:22:28Z", "updatedAt": "2016-09-05T13:30:05Z", "closedAt": "2016-09-05T13:30:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ezekjh", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ezekjh", "company": null}, {"login": "seanparmelee", "company": "HomeAway"}], "comments_count": 2, "comments_data": [{"authorLogin": "seanparmelee", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-03T22:59:14Z", "contents": "This was fixed with #1193", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ezekjh", "authorAssociation": "NONE", "createdAt": "2016-09-05T13:30:04Z", "contents": "Awesome.  I confirm the issue is no longer occurring.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1198, "url": "https://github.com/jasmine/jasmine/issues/1198", "title": "mock clock in 2.5.0 advances date by sum of previous calls to tick", "contents": "seems that pull request #980 may have fixed an issue, but it broke the clock. mockDate.tick is now called with endTime, which is accumulated from all calls to tick.\nExample:\nfdescribe('test', function () {\n    beforeEach(function() {\n        jasmine.clock().install();\n\n        self.baseDate = new Date(2016, 0, 1, 5, 30, 20);\n\n        jasmine.clock().mockDate(self.baseDate);\n    });\n\n    function offsetFromBaseDate() {\n        return new Date().getTime() - self.baseDate.getTime();\n    }\n\n    it('should work', function () {\n        expect(offsetFromBaseDate()).toBe(0);\n\n        jasmine.clock().tick(60000);\n\n        expect(offsetFromBaseDate()).toBe(60000);\n\n        jasmine.clock().tick(60000);\n\n        expect(offsetFromBaseDate()).toBe(120000);\n    });\n\n    afterEach(function() {\n        jasmine.clock().uninstall();\n    });\n}); \n\nfails with Expected 180000 to be 120000.", "createdAt": "2016-09-05T11:47:43Z", "updatedAt": "2016-09-07T22:52:57Z", "closedAt": "2016-09-07T22:52:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Necroskillz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Necroskillz", "company": "Freelance"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T22:52:57Z", "contents": "Closing this as a duplicate of #1190. The fix should be available in 2.5.1", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1199, "url": "https://github.com/jasmine/jasmine/issues/1199", "title": "Jasmine does not report anything", "contents": "According to jasmine documentation, I should be able to run the testsuite running jasmine.\nOn this repository running jasmine in the test directory does absolutely nothing, even after exporting JASMINE_CONFIG_PATH to the jasmine.json file or passing it as argument. Note that even changing a test so that it fails, I get no result, no error, nothing. The command just returns to the prompt.\nThis is the content of the file\n$ more jasmine.json \n{\n  \"spec_dir\": \"test\",\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false,\n  \"spec_files\": [\"*spec.js\"]\n}\n\n\n(venv) sborini@MacBook-Pro:test (protocol-host-rewrite) [1 stash] $ ls `which jasmine`\n/usr/local/bin/jasmine\n\npackage.json\n{\n  \"version\": \"1.4.0-dev\",\n  \"name\": \"configurable-http-proxy\",\n  \"description\": \"A configurable-on-the-fly HTTP Proxy\",\n  \"author\": \"Jupyter Developers\",\n  \"license\": \"BSD-3-Clause\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jupyterhub/configurable-http-proxy.git\"\n  },\n  \"dependencies\": {\n    \"commander\": \"~2.9\",\n    \"http-proxy\": \"~1.13.2\",\n    \"lynx\": \"^0.2.0\",\n    \"strftime\": \"~0.9\",\n    \"winston\": \"~2.2\"\n  },\n  \"devDependencies\": {\n    \"jasmine\": \"^2.4.1\",\n    \"jshint\": \"^2.9.2\",\n    \"nyc\": \"^6.4.0\",\n    \"request\": \"~2\",\n    \"ws\": \"^1.1\"\n  },\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/configproxy.js\",\n    \"lib/trie.js\",\n    \"lib/error/*.html\",\n    \"bin/configurable-http-proxy\"\n  ],\n  \"bin\": {\n    \"configurable-http-proxy\": \"bin/configurable-http-proxy\"\n  },\n  \"scripts\": {\n    \"jshint\": \"jshint bin/ lib/ test/\",\n    \"test\": \"nyc jasmine JASMINE_CONFIG_PATH=test/jasmine.json\",\n    \"coverage-html\": \"nyc report --reporter=html\",\n    \"codecov\": \"nyc report --reporter=lcov && codecov\"\n  }\n}", "createdAt": "2016-09-06T21:39:53Z", "updatedAt": "2016-09-08T02:04:17Z", "closedAt": "2016-09-07T22:21:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "stefanoborini", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "stefanoborini", "company": null}, {"login": "godmar", "company": null}, {"login": "drtimwright", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "godmar", "authorAssociation": "NONE", "createdAt": "2016-09-07T01:01:35Z", "contents": "Same here. This happens with 2.5.0, it does not happen with 2.4.1\nHow to reproduce:\n$mkdir jasminefail\n$cd jasminefail\n$cat > testshort.js\ndescribe (\"A suite\", function () {\n  it (\"contains spec with an expectation\", function () {\n    expect (true).toBe (true);\n  });\n});\n$npm init -y\n$npm install jasmine\n$node_modules/.bin/jasmine init\n$node_modules/.bin/jasmine testshort.js\nOutputs nothing\n$npm install jasmine@2.4.1\n$node_modules/.bin/jasmine testshort.js\nStarted\n.\n\n\n1 spec, 0 failures\nFinished in 0.008 seconds", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "drtimwright", "authorAssociation": "NONE", "createdAt": "2016-09-07T06:34:39Z", "contents": "I've got this issue as well. Have downgraded to 2.4.1 as a fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-07T22:21:51Z", "contents": "Closing this as a duplicate of #88. The fix should be released in v2.5.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "godmar", "authorAssociation": "NONE", "createdAt": "2016-09-08T01:00:07Z", "contents": "Can you explain how it is a duplicate of #88, an issue that dates back to 2011?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-08T02:04:17Z", "contents": "Sorry, that should be jasmine/jasmine-npm#88", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1200, "url": "https://github.com/jasmine/jasmine/issues/1200", "title": "When mixing Angular's $q and ES6's Promise, some of the promises don't get resolved.", "contents": "I was trying to test my code that uses Restangular (which uses $q) and Sweetalert2 (which uses Promise). Basically, I open an alert box; this in turn returns a Promise, which gets resolved when the user clicks the confirm button; then I make a Restangular call which produces a $q promise. While it worked just fine on my browser, the promise produced by $q never got resolved in Jasmine.\nSo I googled around and found this issue: http://stackoverflow.com/questions/33965435/testing-angular-when-mixing-q-and-es6-promises\nIt has simple code to reproduce the issue I described above. I'm currently using the workaround suggested by the OP to get around this issue, but I believe there should be a fix for this issue.", "createdAt": "2016-09-08T15:19:21Z", "updatedAt": "2016-09-16T21:48:26Z", "closedAt": "2016-09-16T21:48:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yukw777", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "yukw777", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T21:48:24Z", "contents": "Jasmine does not know anything about the content of the code you are testing and will not affect promise resolution. My guess is this issue is being caused by angular-mocks (or similar).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1201, "url": "https://github.com/jasmine/jasmine/issues/1201", "title": "Array containing an object broken after update.", "contents": "This check used to pass:\nexpect(array).toContain(value)\n\nArray:\n[\n  {\"_t\":\"user\",\"id\":1073970419,\"email\":\"email3@example.org\",\"name\":\"Spectator\"},\n  {\"_t\":\"user\",\"id\":4464992042,\"email\":\"email4@example.org\",\"name\":\"Collaborator\"},\n  {\"_t\":\"user\",\"id\":1978569710,\"email\":\"email5@example.org\",\"name\":\"Manage\"}\n]\n\nValue:\n{\"_t\":\"user\",\"id\":1978569710,\"email\":\"email5@example.org\",\"name\":\"Manage\"}\n\nBut no longer passes. Whats the new way to write the same test?\nStackOverflow question:\nhttp://stackoverflow.com/questions/39411424/jasmine-how-to-check-that-array-contains-an-object", "createdAt": "2016-09-09T12:17:49Z", "updatedAt": "2016-11-03T09:53:37Z", "closedAt": "2016-09-27T00:10:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hakunin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hakunin", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T16:44:08Z", "contents": "Can you try upgrading to 2.5.1? This test passes for me:\ndescribe(\"A suite\", function() {\n    it(\"contains spec with an expectation\", function() {\n        var array = [\n          {\"_t\":\"user\",\"id\":1073970419,\"email\":\"email3@example.org\",\"name\":\"Spectator\"},\n          {\"_t\":\"user\",\"id\":4464992042,\"email\":\"email4@example.org\",\"name\":\"Collaborator\"},\n          {\"_t\":\"user\",\"id\":1978569710,\"email\":\"email5@example.org\",\"name\":\"Manage\"}\n        ]\n        expect(array).toContain({\"_t\":\"user\",\"id\":1978569710,\"email\":\"email5@example.org\",\"name\":\"Manage\"});\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-27T00:10:01Z", "contents": "Closing for now, please re-open if you are still having issues.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "hakunin", "authorAssociation": "NONE", "createdAt": "2016-11-03T09:53:37Z", "contents": "You're right Gerg, somehow Jest is using a different version of Jasmine that I have installed manually.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1202, "url": "https://github.com/jasmine/jasmine/issues/1202", "title": "how to write test case for REST web service call for custom components", "contents": "Hi all,\nI am newbie for jasmine test-case .I had written a test-case for my components coded with AngularJS.\nrelease.directive.js\nangular.module('wepaComponents')\n  .directive('wepaComponentsRelease', wepaComponentsReleaseDirective)\n\n/**\n * Represents a directive for release block.\n *\n * Loads the release block content in body of the release page\n *\n * @example @lang html\n * <wepa-components-release></wepa-components-release>\n */\nfunction wepaComponentsReleaseDirective () {\n  return {\n    restrict: 'E',\n\n    scope: {\n      'callback': '='\n    },\n\n    link: function (scope) {},\n\n    templateUrl: 'release/componentRelease.html',\n\n    controller: function ($scope, $http, wepaCore, wepaUIMessageConst, wepaUIErrorMessage,\n      $mdDialog, session, $location, DTOptionsBuilder, DTColumnDefBuilder, DTColumnBuilder) {\n      $scope.fullName = ''\n      $scope.userBalance = ''\n      $scope.persons = ''\n      $scope.succResponse = ''\n      $scope.errorResponse = ''\n      $scope.showeAlert = false\n      $scope.releasefiles = null\n      $scope.API_NAME = session.getAPIName()\n      var refreshPrintTimer = ''\n\n      /* DataTable Responsive view changes based on the screen width */\n\n      if (window.innerWidth < 751) {\n        $scope.dtColumnDefs = [\n          DTColumnDefBuilder.newColumnDef(0).notSortable(),\n          DTColumnDefBuilder.newColumnDef(1).notSortable(),\n          DTColumnDefBuilder.newColumnDef(2).notSortable(),\n          DTColumnDefBuilder.newColumnDef(3).notSortable(),\n          DTColumnDefBuilder.newColumnDef(4).notSortable(),\n          DTColumnDefBuilder.newColumnDef(5).notSortable().withClass('none')\n        ]\n      }\n      if (window.innerWidth < 630) {\n        $scope.dtColumnDefs = [\n          DTColumnDefBuilder.newColumnDef(0).notSortable(),\n          DTColumnDefBuilder.newColumnDef(1).notSortable(),\n          DTColumnDefBuilder.newColumnDef(2).notSortable(),\n          DTColumnDefBuilder.newColumnDef(3).notSortable(),\n          DTColumnDefBuilder.newColumnDef(4).notSortable().withClass('none'),\n          DTColumnDefBuilder.newColumnDef(5).notSortable().withClass('none')\n        ]\n      }\n      if (window.innerWidth > 751) {\n        $scope.dtColumnDefs = [\n          DTColumnDefBuilder.newColumnDef(0).notSortable(),\n          DTColumnDefBuilder.newColumnDef(1).notSortable(),\n          DTColumnDefBuilder.newColumnDef(2).notSortable(),\n          DTColumnDefBuilder.newColumnDef(3).notSortable(),\n          DTColumnDefBuilder.newColumnDef(4).notSortable(),\n          DTColumnDefBuilder.newColumnDef(5).notSortable()\n        ]\n      }\n      $scope.dtOptionsdata = DTOptionsBuilder.newOptions()\n        .withOption('responsive', true)\n        .withOption('paging', false)\n        .withOption('scrollCollapse', true)\n\n      /*$scope.dtColumns = [\n        DTColumnBuilder.newColumn('ReleaseCode').withTitle('ReleaseCode'),\n        DTColumnBuilder.newColumn('Status').withTitle('Status').notVisible()\n      ]*/\n      /**\n       * @desc: This method get the all uploaded file list from the library call\n       * it is responsible for (1) Call wepa core library for getFileList function (2) Get and parse the response data\n       * from library call (3) Display the uploaded file list (4) Call remote release functions - submitRemoterelease(),\n       * cancelRemoterelease() and getRemotereleasestatus()\n       *\n       * @action getFileDetails initially called from the controller and show the all uploaded file list.\n       **/\n\n      $scope.getFileDetails = function () {\n        console.log('getFileDetails starts')\n        log.info('COM:RELEASE: API: '+ $scope.API_NAME +' getFileDetails Method has been called')\n        $scope.token = session.getAuthTokenFromCookie()\n        $scope.filenamesession = session.getFilename()\n        console.log($scope.filenamesession)\n        $scope.file = []\n        var j = 0\n        $scope.kioskStationKey = ''\n        $http.get('config/config.json')\n          .then(function (response) {\n            log.info('COM:RELEASE: API: '+ $scope.API_NAME +' config.json File has been read')\n            $scope.kioskStationKey = response.data.kioskStationIDKey\n            wepaCore.getRemoteReleaseStationList([$scope.kioskStationKey])\n              .then(function (response) {\n                log.info('COM:RELEASE: API: '+ $scope.API_NAME +' getRemoteReleaseStationList service has been called')\n                console.log('response.length')\n                console.log(response)\n                if (response.length <= 0) {\n                  $scope.showeAlert = true\n                  $scope.errorResponse = 'Station Key is mismatched or invalid!'\n                  log.info($scope.errorResponse)\n                } else {\n                  console.log('submitRemoteRelease loop outer')\n                  log.info('COM:RELEASE: API: '+ $scope.API_NAME +' Files submitted to remote release')\n                  for (var i = 0; i < $scope.filenamesession.length; i++) {\n                    if ($scope.filenamesession[i].checked == true) {\n                      console.log('********SELECTED FILE LIST*********')\n                      console.log($scope.filenamesession[i])\n                      $scope.file[j] = $scope.filenamesession[i];\n                      (function (j) {\n                        wepaCore.submitRemoteRelease(response[0], $scope.filenamesession[i].releaseCode)\n                          .then(function (response) {\n                            console.log(response)\n                            $scope.file[j].transactionId = response.transactionId\n                            $scope.file[j].remotePrintStatus = 'PROCESSING'\n                            console.log($scope.file[j])\n                          })\n                          .catch(function (error) {\n                            $scope.showeAlert = true\n                            $scope.errorResponse = error.errorMessage\n                            console.log(error.errorMessage)\n                            log.error('COM:RELEASE: API: '+ $scope.API_NAME +' RemoteRelease process failed')\n                          })\n                      })(j)\n                      j++\n                    }\n                  }\n                  refreshPrintTimer = setInterval(function () {\n                    $scope.refreshPrintStatus()\n                  }, 10000)\n                }\n              })\n              .catch(function (error) {\n                log.error('COM:RELEASE: API: '+ $scope.API_NAME +' Login User login failed!!!')\n                console.log(error)\n              })\n          })\n      }\n\n      $scope.refreshPrintStatus = function () {\n        for (var i = 0; i < $scope.file.length; i++) {\n          {\n          if (!angular.isUndefined($scope.file[i].transactionId)) {\n            (function (i) {\n              wepaCore.getRemoteReleaseStatus($scope.file[i].transactionId)\n                .then(function (response) {\n                    log.info('COM:RELEASE: API: '+ $scope.API_NAME +' getRemoteReleaseStatus called successfully!')\n                  console.log(response.status)\n                  console.log('*********TransactionId*********')\n                  console.log($scope.file[i].transactionId)\n                  if (response.status == 'COMPLETED' || response.status == 'CANCELED' || response.status == 'FAILED' || response.status == 'INVALID') {\n                    clearInterval(refreshPrintTimer)\n                    $scope.showbar = true\n                    $scope.cancel = true\n                    console.log('timer stopped')\n                  }\n                  if (response.status == 'ACCEPTED' || response.status == 'QUEUED' || response.status == 'PRINTING') {\n                    console.log('STATUS---->ACCCEPTED|QUEUED|PRINTING')\n                    $scope.showbar = false\n                    $scope.cancel = false\n                  } else {\n                    console.log('STATUS----->OTHERS')\n                    $scope.cancel = true\n                  }\n                  $scope.file[i].remotePrintStatus = response.status\n                })\n                  .catch(function (error) {\n                      log.error('COM:RELEASE: API: '+ $scope.API_NAME +' getRemoteReleaseStatus failed!!!')\n                  })\n            })(i)\n          }\n          }\n        }\n      }\n\n      $scope.cancelprint = function (transactionId) {\n        var confirm = $mdDialog.confirm()\n          .title('Important')\n          .textContent('Are you sure do you want to cancel this remote release?')\n          .ok('Yes')\n          .cancel('No')\n        $mdDialog.show(confirm).then(function () {\n          console.log('Cancel starts')\n          console.log(transactionId)\n          wepaCore.cancelRemoteRelease(transactionId)\n            .then(function (response) {\n              log.info('COM:RELEASE: API: '+ $scope.API_NAME +' Print cancel process has been started')\n              console.log('*****CANCEL SERVICE HIT********')\n              if (response.status === 'COMPLETED') {\n                $scope.cancel = true\n                $scope.showbar = false\n              } else {\n                console.log('CANCEL STATUS FAILED')\n                $scope.cancel = false\n              }\n            }).catch(function (error) {\n            log.error('COM:RELEASE: API: '+ $scope.API_NAME + ' Print cancel process failed!!')\n            console.log(error)\n          })\n        }, function () {\n          $scope.status = ''\n        })\n      }\n      $scope.getFileDetails()\n\n      /**\n       * @desc: This method get the user details from the library call\n       * it is responsible for (1) Call wepa core library for getUserInfo function (2) Get and parse the response data\n       * from library call (3) Display the uploaded file list\n       *\n       * @action getUserInfo initially called from the controller and show the user information.\n       **/\n      $scope.getUserName = function () {\n        wepaCore.getUserInfo($scope.token)\n          .then(function (response) {\n            log.info('COM:RELEASE: API: '+ $scope.API_NAME + ' getUserInfo service has been called successfully and returned user info')\n            $scope.succResponse = response\n            $scope.fullName = $scope.succResponse.firstName + ' ' + $scope.succResponse.lastName\n            $scope.userBalance = $scope.succResponse.accountBalance\n          }).catch(function (error) {\n          log.error('COM:RELEASE: API: '+ $scope.API_NAME +' getUserInfo service call failed!!')\n          console.log(error)\n        })\n      }\n      $scope.getUserName()\n      /**\n       * @desc: This method clear the current user session data\n       * it is responsible for (1) remove user session (2) redirect to login page\n       **/\n      $scope.logOut = function () {\n        log.info('COM:RELEASE: API: '+ $scope.API_NAME + ' Logout successfully')\n        session.destroy()\n        clearInterval(refreshPrintTimer)\n        $location.path('/login')\n      }\n      $scope.goDashboard = function () {\n        log.info('COM:RELEASE: API: '+ $scope.API_NAME + ' Redirect to dashboard')\n        clearInterval(refreshPrintTimer)\n        $location.path('/dashboard')\n      }\n      /*\n       * @desc: This method is used to show processing dialog box. If user submit the form with valid details\n       * this box will appear and intimate to user request has been processing\n       */\n      $scope.showAlert = function (ev) {\n        $scope.hide = false\n        $mdDialog.show(\n          $mdDialog.alert()\n            .clickOutsideToClose(true)\n            .title('Sure! Abort the printing')\n            .textContent('Click OK to Abort')\n            .ok(wepaUIMessageConst.DIALOG_OK)\n            .targetEvent(ev)\n        )\n      }\n    }\n  }\n}\n\n\nreleaseSpec.js:\ndescribe('Unit testing file model', function() {\n    var $compile, $rootScope, elements, scope, wepaCore, deferred, $mdDialog, $httpBackend, authRequestHandler, session\n    var FAKE_RESPONSE = {data: {status: 'COMPLETED'}}\n    var FAKE_FILE_LIST = [{checked: true, tes1: 'test1', tes8: 'test8'}]\n    var FAKE_STATIONKEY = ['ABC123-ABC123']\n    var FAKE_SUBMIT_RESPONSE = 'TEST_RESPONSE'\n    var FAKE_RELEASECODE = 'ABC123'\n    var FAKE_TRANSACTIONID = 'abc1234'\n    var FAKE_FILERESPONSE = 'COMPLETED'\n    var FAKE_LENGTH = 5\n\n    // Load the myApp module, which contains the directive\n    beforeEach(module('ngMaterial'))\n    beforeEach(module('ngAria'))\n    beforeEach(module('datatables'))\n    beforeEach(module('wepaComponents'))\n    beforeEach(module('wepaComponentsTemplates'))\n    beforeEach(module('wepaCore'))\n\n    // Store references to $rootScope and $compile\n    // so they are available to all tests in this describe block\n    beforeEach(inject(function(_$compile_, _$rootScope_,_wepaCore_,_$q_,_$mdDialog_,_$httpBackend_,_session_) {\n        // The injector unwraps the underscores (_) from around the parameter names when matching\n        deferred = _$q_.defer()\n        $compile = _$compile_;\n        $rootScope = _$rootScope_;\n        wepaCore = _wepaCore_;\n        $mdDialog = _$mdDialog_;\n        $httpBackend = _$httpBackend_;\n        session = _session_;\n        scope = $rootScope.$new();\n        log = {\n            info: function(str){},\n            error: function(str){},\n            debug: function(str){}\n        }\n        spyOn(wepaCore, 'getFileList').and.returnValue(deferred.promise)\n        spyOn(wepaCore, 'getUserInfo').and.returnValue(deferred.promise)\n        spyOn(wepaCore, 'getRemoteReleaseStatus').and.returnValue(deferred.promise)\n        spyOn(wepaCore, 'cancelRemoteRelease').and.returnValue(deferred.promise)\n        spyOn(wepaCore, 'submitRemoteRelease').and.returnValue(deferred.promise)\n        spyOn(wepaCore, 'getRemoteReleaseStationList').and.returnValue(deferred.promise)\n        spyOn($mdDialog, 'show').and.returnValue(deferred.promise)\n        //$httpBackend.when('GET', 'config/config.json').respond(deferred.resolve(FAKE_TRANSACTIONID));\n        authRequestHandler = $httpBackend.when('GET', 'config/config.json').respond({kioskStationIDKey: '0.0.1'});\n        elements = angular.element(\"<wepa-components-release callback='called'></wepa-components-release>\");\n        $compile(elements)($rootScope.$new())\n        $rootScope.$digest()\n        controller = elements.controller(\"wepaComponentsRelease\")\n        scope = elements.isolateScope() || elements.scope()\n        scope.callback = function(){}\n\n\n    }));\n\n    afterEach (function () {\n        $httpBackend.verifyNoOutstandingExpectation ();\n        $httpBackend.verifyNoOutstandingRequest ();\n    });\n\n\n    it('getFileDetails method called with config.json', function() {\n        // Compile a piece of HTML containing the directive\n        session.putFilename([{checked:true}])\n        scope.getFileDetails();\n        deferred.resolve(FAKE_FILE_LIST)\n        $httpBackend.flush();\n        scope.$digest();\n    });\n\n   /* it('getFileDetails method called with empty config.json', function() {\n        // Compile a piece of HTML containing the directive\n        authRequestHandler.respond(200, '');\n\n        scope.getFileDetails();\n        deferred.resolve([])\n        $httpBackend.flush();\n        scope.$digest();\n    });\n\n    it('getFileDetails method called with getRemoteReleaseStationList service rejected', function() {\n        // Compile a piece of HTML containing the directive\n        authRequestHandler.respond(200, '');\n        scope.getFileDetails();\n        $httpBackend.flush();\n        deferred.reject([])\n        scope.$digest();\n    });*/\n\n    it('refreshPrintStatus method called', function() {\n        // Compile a piece of HTML containing the directive\n            scope.file.length = FAKE_LENGTH\n            scope.refreshPrintStatus();\n            /*scope.file[0] = {transactionId:'terst'}\n            scope.file[1] = {transactionId:'terst'}*/\n            deferred.resolve(FAKE_TRANSACTIONID)\n            $httpBackend.flush();\n            scope.$digest();\n    });\n\n    it('cancelprint method called', function() {\n        // Compile a piece of HTML containing the directive\n        scope.cancelprint(FAKE_TRANSACTIONID);\n        deferred.resolve(FAKE_RESPONSE)\n        $httpBackend.flush();\n        scope.$digest();\n    });\n\n    it('cancelprint method called', function() {\n        // Compile a piece of HTML containing the directive\n        console.log('cancelprint method called')\n        scope.cancelprint(FAKE_RESPONSE);\n        deferred.resolve(FAKE_RESPONSE)\n        scope.response.status = FAKE_FILERESPONSE\n        deferred.reject(FAKE_RESPONSE)\n        $httpBackend.flush();\n        scope.$digest();\n    });\n\n    it('showAlert() method called with success response', function() {\n        // Compile a piece of HTML containing the directive\n        scope.showAlert ();\n        deferred.resolve(FAKE_RESPONSE)\n        window.innerWidth = 600\n        $httpBackend.flush();\n        scope.$digest();\n    });\n\n    it('showAlert() method called with failled response', function() {\n        // Compile a piece of HTML containing the directive\n        scope.showAlert ();\n        deferred.reject(FAKE_RESPONSE)\n        window.innerWidth = 600\n        $httpBackend.flush();\n        scope.$digest();\n    });\n\n    it('logOut() method called with success response', function() {\n        // Compile a piece of HTML containing the directive\n        $httpBackend.flush();\n        scope.logOut();\n    })\n\n    it('goDashboard() method called with success response', function() {\n        // Compile a piece of HTML containing the directive\n        $httpBackend.flush();\n        scope.goDashboard();\n    })\n    it('getUserName() method called with success response', function() {\n        // Compile a piece of HTML containing the directive\n        $httpBackend.flush();\n        scope.getUserName();\n        deferred.reject(FAKE_RESPONSE)\n    })\n})\n\nCoverage Report:\nLink : Screenshot\nI surfed in google for 3 days ,no reference help me to write a good javascript testcase.\nThanks in advance for valuable help !!", "createdAt": "2016-09-12T16:31:06Z", "updatedAt": "2016-09-13T00:15:51Z", "closedAt": "2016-09-13T00:15:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gopi1989", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gopi1989", "company": "Sella"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-13T00:15:51Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1204, "url": "https://github.com/jasmine/jasmine/issues/1204", "title": "done.fail() results in timeout", "contents": "Calling done.fail() or fail() still waits for the timeout and then prints an erroneous error message stating that the async callback wasn't invoked in time. The error message seems to get through correctly (the message was \"Failed\" below)\n\nMessage:\nFailed\nStack:\nError: Failed\nat /Users/areed/Projects/chilmark/spec/chilmarkSpec.js:45:16\nat process._tickCallback (node.js:369:9)\nMessage:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nStack:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nat Timer.listOnTimeout (timers.js:92:15)", "createdAt": "2016-09-13T01:56:33Z", "updatedAt": "2016-09-28T00:24:05Z", "closedAt": "2016-09-28T00:24:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "albertreed", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "albertreed", "company": null}, {"login": "Gerg", "company": null}, {"login": "httpdigest", "company": "@HBTGmbH"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T16:29:33Z", "contents": "What version on Jasmine are you using? Can you provide an example spec that demonstrates this behavior?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "httpdigest", "authorAssociation": "NONE", "createdAt": "2016-09-26T10:35:47Z", "contents": "We are experiencing this, too, with Jasmine 2.5.2. It happens with every test case that is executed asynchronously, such as via a task or microtask (ES \"Job\"). The simplest test case to reproduce this, would be via setTimeout() task:\nit('...', done => {\n  setTimeout(() => {\n    fail('...');\n  }, 0);\n});\nIt fails with:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n\nOur real usecase is more sophisticated with a microtask (via a Promise), which can be summarized to:\nit('...', done => {\n  thePromise().then(result => {\n    done(); // <- will not reach here because promise throws\n  }).catch(err => {\n    fail(); // <- this will be called and should fail the test, but doesn't.\n  });\n});\nUsing done() in asynchronous tests however works. So done() must be doing something more than fail() with regards to notifying test completion.\nThat is, a quick workaround for the above test case would be:\nit('...', done => {\n  thePromise().then(result => {\n    done(); // <- will not reach here because promise throws\n  }).catch(err => {\n    fail(); // <- this will be called and should fail the test, but doesn't.\n    done(); // <- completes the test with a fail, because of the fail() call\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-26T16:26:55Z", "contents": "@httpdigest You should use done.fail() in an async spec to get it to continue to the next spec. If you're seeing the same behavior with done.fail() as with fail() alone, we would definitely like to look into it.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "httpdigest", "authorAssociation": "NONE", "createdAt": "2016-09-26T17:52:22Z", "contents": "Thanks! Indeed, using done.fail() solves the issue. From my side, there are no issues with asynchronous tests and done/done.fail() anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-28T00:24:05Z", "contents": "Closing since things seem to be working as intended if you use done.fail(). Please re-open if you are able to reproduce the original issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1205, "url": "https://github.com/jasmine/jasmine/issues/1205", "title": "Standalone download for 2.5.1", "contents": "The 2.5.1 release list on https://github.com/jasmine/jasmine/releases doesn't have a stand-alone download.", "createdAt": "2016-09-13T05:18:36Z", "updatedAt": "2016-09-14T16:54:39Z", "closedAt": "2016-09-14T16:54:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tntim96", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tntim96", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T16:54:39Z", "contents": "Should be up now, sorry about that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1206, "url": "https://github.com/jasmine/jasmine/issues/1206", "title": "Documentation for customer matchers is unclear", "contents": "Hi. In the example for the custom matcher you have this code sample\ntoBeGoofy: \n// ... time passes\n  if (result.pass) {\n    result.message = \"Expected \" + actual + \" not to be quite so goofy\";\n  } else {\n    result.message = \"Expected \" + actual + \" to be goofy, but it was not very goofy\";\n  }\n\nNow the test is called \"toBeGoofy\" and the \"pass\" says NOT to be goofy, while the other branch says \"to be goofy\". So \"toBeGoofy\" passes if actual is NOT goofy? It's not clear at all from the two sentences which branch of the if-statement is and which isn't goofy. It's all well and good to have fun while writing documentation, but if it's not understandable than you are missing the point. Is it not possible to have something which is more black and white?\nThanks.", "createdAt": "2016-09-13T14:21:28Z", "updatedAt": "2016-09-13T15:24:54Z", "closedAt": "2016-09-13T15:24:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gotofritz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gotofritz", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-13T15:14:48Z", "contents": "Jasmine matchers will only print messages if the assertion fails. So the result.pass case is when the matcher succeeded, but the assertion failed because of a not. For example: expect(foo).not.toBeGoofy(). The else case is for the normal case where matcher failures result in assertion failures.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gotofritz", "authorAssociation": "NONE", "createdAt": "2016-09-13T15:24:54Z", "contents": "I see, it makes sense, thanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1207, "url": "https://github.com/jasmine/jasmine/issues/1207", "title": "Missing documentation for .toThrow('foo')", "contents": "The jasmine documentation for 'toThrow()' fails to mention the following useful feature.\n  it(\"The 'toThrow' matcher can also test for specific strings being thrown\", function() {\n    var foo = function() {\n      throw 'foo';\n    };\n\n    expect(foo).toThrow('foo');\n    expect(foo).not.toThrow('bar');\n  });\n\nThis is different than \".toThrowError\" (which expects a \"new Error\" object to be thrown).\n(Only by stepping through the source code did I discover this undocumented feature).", "createdAt": "2016-09-13T19:22:02Z", "updatedAt": "2016-12-16T19:32:30Z", "closedAt": "2016-12-16T19:32:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Xantix", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Xantix", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-13T20:58:43Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1210, "url": "https://github.com/jasmine/jasmine/issues/1210", "title": "FR: if there is a map file next to the javascript file, use that for the line numbers", "contents": "Hi\nI use jasmine with typescript source. The problem I am running into is that when an expect fails, jasmine prints out the line number of the line in the javascript file and then I am left trying to do the mapping back to the original typescript source manually. It would be very useful if jasmine would notice the existence of a .map file and use that to figure out the line of the original typescript file.\nFrom other comments I have seen, it doesn't seem that the jasmine authoring team uses typescript at all, but jasmine is proving very useful for unit testing typescript.\nThanks\nGreg", "createdAt": "2016-09-14T22:13:27Z", "updatedAt": "2016-09-14T22:35:58Z", "closedAt": "2016-09-14T22:26:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gregveres", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gregveres", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-14T22:26:50Z", "contents": "This looks like a duplicate of #491. Closing in favor of the discussion over there.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gregveres", "authorAssociation": "NONE", "createdAt": "2016-09-14T22:35:58Z", "contents": "Yup I agree it is the same. Sorry I didn't see the existing thread when I searched.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1211, "url": "https://github.com/jasmine/jasmine/issues/1211", "title": "Tests are not running", "contents": "For some reason, when I run $ jasmine nothing happen and I really don't get it what am I missing.\npackage.json\n{\n    \"jasmine\": \"^2.5.1\",\n    \"jshint\": \"^2.7.0\"\n}\n\njasmine.json\n{\n  \"spec_dir\": \"spec\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"helpers/**/*.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n\nDummySpec.js\ndescribe(\"Dummy\", function() {\n  it('has a dummy spec to test 2 + 2', function() {\n    expect(1 + 1).toEqual(4);\n  });\n});", "createdAt": "2016-09-15T12:05:16Z", "updatedAt": "2016-09-15T16:27:34Z", "closedAt": "2016-09-15T16:27:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rochapablo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rochapablo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-15T16:27:34Z", "contents": "It sounds like this is a duplicate of jasmine/jasmine-npm#88. Closing this in favor of the discussion over there.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1212, "url": "https://github.com/jasmine/jasmine/issues/1212", "title": "jasmine.getEnv().currentSpec returns undefined", "contents": "Snippet for taking screenshot on Test Failure\n    afterEach(function() {\n\n        var spec = jasmine.getEnv().currentSpec;\n        var passed = spec.results().passed();\n\n      if (!passed) {\n        browser.takeScreenshot().then(function(png) {\n          writeScreenShot(png, \"screenshot.png\");\n        });\n      }\n\n        function writeScreenShot(data, filename) {\n                var stream = fs.createWriteStream(filename);\n                stream.write(new Buffer(data, 'base64'));\n                stream.end();\n        }\n\n    });\n\nConsole error\n  Message:\n    Failed: Cannot read property 'results' of undefined\n  Stack:\n    TypeError: Cannot read property 'results' of undefined\n        at Object.<anonymous> \n\n\nit returns undefined here,\nvar spec = jasmine.getEnv().currentSpec;\nconsole.log(spec);", "createdAt": "2016-09-16T01:19:13Z", "updatedAt": "2016-09-16T22:46:30Z", "closedAt": "2016-09-16T22:46:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "prashanth-sams", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "prashanth-sams", "company": "@PropertyFinder"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T16:27:56Z", "contents": "What version of Jasmine are you using? As of 2.0, env.currentSpec is no longer supported.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prashanth-sams", "authorAssociation": "NONE", "createdAt": "2016-09-16T21:26:07Z", "contents": "@Gerg I use Jasmine 2.0 and is there any work around for this in Jasmine 2.0?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-16T21:39:16Z", "contents": "You could probably make a custom reporter to take screenshots on spec failure. Something like https://www.npmjs.com/package/protractor-jasmine2-screenshot-reporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "prashanth-sams", "authorAssociation": "NONE", "createdAt": "2016-09-16T22:14:43Z", "contents": "@Gerg I use cucumber and is there any suitable libraries for the same? Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-16T22:46:30Z", "contents": "This appears to have morphed into a question about how to use Jasmine. You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this, since the current functionality is the desired in Jasmine post 2.0. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1213, "url": "https://github.com/jasmine/jasmine/issues/1213", "title": "stopSpecOnExpectationFailure does not work in asynchronous specs", "contents": "Using Jasmine 2.5.2, running in node.\nstopSpecOnExpectationFailure will throw an uncaught exception and cause the process to just exit if it's used with an asynchronous spec. This means that reporters don't get a chance to print final output, and wrappers get no chance to recover and shut down gracefully.\nFor example, with this config:\n{\n  \"stopSpecOnExpectationFailure\": true,\n  \"spec_dir\": \"\",\n  \"spec_files\": [\n    \"spec.js\"\n  ]\n}\nand this spec file:\ndescribe('async foo', function() {\n  it('should bar', function(done) {\n    setTimeout(function() {\n      expect(1).toEqual(2);\n    }, 10);\n  });\n\n  it('should baz', function() {\n    expect(1).toEqual(1);\n  });\n});\nInstead of getting some nice output, I get:\n$ node node_modules/jasmine/bin/jasmine.js JASMINE_CONFIG_PATH=config.json\nStarted\n\n/Users/ralphj/jasminetest/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:349\n        throw new j$.errors.ExpectationFailed();\n        ^\nError\n    at Object.getJasmineRequireObj.errors (/Users/ralphj/jasminetest/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2761:33)\n    at Object.getJasmineRequire.core (/Users/ralphj/jasminetest/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:49:26)\n    at Object.module.exports [as boot] (/Users/ralphj/jasminetest/node_modules/jasmine-core/lib/jasmine-core/node_boot.js:24:32)\n    at new Jasmine (/Users/ralphj/jasminetest/node_modules/jasmine/lib/jasmine.js:15:30)\n    at Object.<anonymous> (/Users/ralphj/jasminetest/node_modules/jasmine/bin/jasmine.js:7:15)\n    at Module._compile (module.js:413:34)\n    at Object.Module._extensions..js (module.js:422:10)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\n    at Function.Module.runMain (module.js:447:10)", "createdAt": "2016-09-20T19:30:39Z", "updatedAt": "2016-09-28T21:25:40Z", "closedAt": "2016-09-28T21:25:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-24T00:37:11Z", "contents": "This seems like it might only be a node issue. I just tested it in a browser, and it seemed to work as expected.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-09-28T21:25:39Z", "contents": "I think this is really a specific case of #529. Jasmine does need some way to associate Errors that occur in asynchronous code to the spec that is currently executing, but I we want to keep it generic.\nI'm going to close this issue in favor of #529, since solving that issue should also solve this one. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["bug"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1214, "url": "https://github.com/jasmine/jasmine/issues/1214", "title": "No specs found with no errors when using angular decorators and classes calling super()", "contents": "When I run jasmine on my browser, I get a no specs found error without errors in my console and my network returns 304 and 200 responses.\nI narrowed it down to creating objects from classes that use super() in their constructors or if the angular services uses an @Injectable decorator.\n\nWhat version are you using?\nJasmine 2.4.1\nWhat environment are you running Jasmine in (node, browser, etc)?\nNode JS\nChrome\nTypescript\nAngular 2 final version\nHow are you running Jasmine (standalone, npm, karma, etc)?\nStandalone and through browser", "createdAt": "2016-09-22T18:07:10Z", "updatedAt": "2017-04-24T21:23:40Z", "closedAt": "2016-10-15T00:27:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "atang020", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "atang020", "company": null}, {"login": "Gerg", "company": null}, {"login": "WillPK", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-09-24T00:29:56Z", "contents": "Does it work if you use the example specs that come with Jasmine standalone: https://github.com/jasmine/jasmine/tree/master/lib/jasmine-core/example", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-15T00:27:23Z", "contents": "Closing due to inactivity. Please re-open if you are still having this issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "atang020", "authorAssociation": "NONE", "createdAt": "2016-10-15T04:53:03Z", "contents": "Found the issue to be needing to add a Promise to load all specs before allowing Jasmine to run.\nThank you!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "WillPK", "authorAssociation": "NONE", "createdAt": "2017-04-23T17:17:52Z", "contents": "How?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-24T21:23:40Z", "contents": "If you want to change when Jasmine starts executing your suite, or anything else about the bootstrapping process, you might need a custom boot file", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1216, "url": "https://github.com/jasmine/jasmine/issues/1216", "title": "configureDefaultReporter to noop will no longer remove the default reporter", "contents": "I noticed when I upgrade from version 2.5.1 -> 2.5.2 I am no longer able to supres the console logger with\n    let Jasmine = require('jasmine')\n    let myReporter = require('./spec/helpers/customReporter')\n    let noop = function() {}\n    let jrunner = new Jasmine()\n\n    jrunner.configureDefaultReporter({\n        print: noop\n    }) // remove default reporter logs\n\nrunning jasmine via node $ node launcher.js\nIt's OS independent, on both windows and linux", "createdAt": "2016-10-03T04:51:51Z", "updatedAt": "2016-11-02T00:30:18Z", "closedAt": "2016-11-02T00:30:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "freed00m", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "freed00m", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-02T00:30:17Z", "contents": "This appears to be the same issue as #1228. Please continue any discussion there.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1217, "url": "https://github.com/jasmine/jasmine/issues/1217", "title": "Show difference in equality failure of objects", "contents": "If two objects are compared using expect.toEqual and there is a difference, we only get a dump of the entire object, which makes it nearly impossible to tell what the difference actually is.\nMany other libraries print the actual difference. Can jasmine do the same?", "createdAt": "2016-10-03T21:56:33Z", "updatedAt": "2016-10-04T15:50:31Z", "closedAt": "2016-10-04T15:50:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aaronbeall", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aaronbeall", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-04T15:50:30Z", "contents": "There is currently an open PR for this feature: #1163. Please continue any discussion there.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1218, "url": "https://github.com/jasmine/jasmine/issues/1218", "title": "Testing a style properties on element hover", "contents": "we have a problem with testing styles when element is hovered.  Event for \"mousover\" is executed but change of background color is not detected, but it works in browser.\nWe are using Jasmine version 2.5.2, Karma version 1.2.0 and Angular 2.\nExample of a test:\nit('Primary Button shoud have proper css color on hover', fakeAsync(() => {\n    let testComponent = fixture.debugElement;\n    de = fixture.debugElement.query(By.css('button.a-button.u-is-large'));\n    el = de.nativeElement;\n    let styles = window.getComputedStyle(el);\n\n\n    el.addEventListener('mouseover', (a) => {\n      tick();\n      fixture.detectChanges();\n\n      console.log(styles.backgroundColor);\n      expect(de).not.toBeNull();\n      expect(styles.backgroundColor).toBe('rgb(0, 138, 203)');\n\n    });\n\n    console.log(styles.backgroundColor);\n    let event = new Event('mouseover');\n    el.dispatchEvent(event);\n  }));\n\nHTML:\n<button type=\"button\" class=\"a-button u-is-large u-is-primary\">Primary Button</button>\nIf anyone has idea how to solve this, we would really appreciate it.\nThanks", "createdAt": "2016-10-06T16:29:50Z", "updatedAt": "2018-02-08T18:51:46Z", "closedAt": "2016-10-07T00:30:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gasperthegracner", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "gasperthegracner", "company": "@poviolabs "}, {"login": "Gerg", "company": null}, {"login": "Sumanth447", "company": null}, {"login": "szymexpawlowski", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-07T00:30:44Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Sumanth447", "authorAssociation": "NONE", "createdAt": "2017-10-24T21:53:43Z", "contents": "Do you have a solution for that yet?\nI encountered the same thing in one of my test case.\nIt would be really helpful if you can update the solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "szymexpawlowski", "authorAssociation": "NONE", "createdAt": "2018-02-08T18:51:46Z", "contents": "this could help https://codecraft.tv/courses/angular/unit-testing/directives/", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1219, "url": "https://github.com/jasmine/jasmine/issues/1219", "title": "deepEqual module outdated", "contents": "I noticed that current deepEqual implementation lacks a lot of features? It is a \"copy\" of underscore.\nLodash supports more features now, but I also found this one: https://github.com/zubuzon/kewlr. Seems to support both browser and node.\nIs this going to be fixed?", "createdAt": "2016-10-07T12:10:21Z", "updatedAt": "2016-12-02T19:40:14Z", "closedAt": "2016-12-02T19:40:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Gerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-10-12T00:39:54Z", "contents": "What features are you looking for that are missing? You can also define custom equality testers in the mean time to support your use cases.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-02T19:40:14Z", "contents": "We haven't heard any more specific feedback on this, so I'm going to close this issue. If there are particular features that you would like to see in Jasmine's equality functionality, we would be happy to review any specific issues or pull requests. Simply saying that it is old doesn't allow us to fix this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1220, "url": "https://github.com/jasmine/jasmine/issues/1220", "title": "UI is not recreated properly in 2.5+ when window.onload is called multiple times", "contents": "I was following this guide to setup Angular2 testing in Jasmine: https://www.xplatform.rocks/2016/02/01/testing-angular2-apps-with-jasmine-and-typescript/\nVersion 2.4+ works fine, however when updating to version 2.5+, UI is not displayed correctly. See screenshots:\nJasmine 2.4.1\n\nJasmine 2.5.2\n\nError in console:\nzone.js@0.6.25?main=browser:357 TypeError: Cannot read property 'spies' of undefined\n    at currentSpies (https://unpkg.com/jasmine-core@2.5.2/lib/jasmine-core/jasmine.js:803:53)\n    at SpyRegistry.clearSpies (https://unpkg.com/jasmine-core@2.5.2/lib/jasmine-core/jasmine.js:2123:19)\n    at clearResourcesForRunnable (https://unpkg.com/jasmine-core@2.5.2/lib/jasmine-core/jasmine.js:615:21)\n    at https://unpkg.com/jasmine-core@2.5.2/lib/jasmine-core/jasmine.js:777:9\n    at ZoneDelegate.invokeTask (https://unpkg.com/zone.js@0.6.25?main=browser:236:37)\n    at Zone.runTask (https://unpkg.com/zone.js@0.6.25?main=browser:136:47)\n    at drainMicroTaskQueue (https://unpkg.com/zone.js@0.6.25?main=browser:368:35)\n    at XMLHttpRequest.ZoneTask.invoke (https://unpkg.com/zone.js@0.6.25?main=browser:308:25)\n\n\nWhat version are you using?\n2.5.2 (reproducible since 2.5.0)\nWhat environment are you running Jasmine in (node, browser, etc)?\nbrowser\nHow are you running Jasmine (standalone, npm, karma, etc)?\nstandalone\nIf possible, include an example spec that demonstrates your issue.\nany spec", "createdAt": "2016-10-08T15:27:39Z", "updatedAt": "2016-10-14T17:44:24Z", "closedAt": "2016-10-14T16:27:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dmitrijs", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dmitrijs", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-14T16:27:22Z", "contents": "Jasmine does not expect to have a single loaded environment executed more than once. This isn't functionality we expect to work, so I'm going to close this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dmitrijs", "authorAssociation": "NONE", "createdAt": "2016-10-14T17:44:24Z", "contents": "Ok, thanks.\nPossible workaround:\n        (() => {\n            var onloadWithJasmine = window.onload;\n            window.onload = () => {};\n            SystemJS.import('app/components/app/app.spec')\n                    .then(onloadWithJasmine)\n                    .catch(console.error.bind(console));\n        })();", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1221, "url": "https://github.com/jasmine/jasmine/issues/1221", "title": "ability to suppress \"has no expectations\" warnings", "contents": "Using Jasmine 2.5.0, I have several tests that have no expectations. Some are just testing, whether a particular asynchronous method is called (and will error out due to the timeout), others will report errors by throwing exceptions. Currently all these tests print \"Spec 'Foo' has no expectations.\" to the browser console and \"SPEC HAS NO EXPECTATIONS\" to the HTML output.\nThe latter is a bit annoying, since it indicates a problem, where there is none. The former is more problematic as it spams the console with bogus error messages, which make it harder to recognize real problems in the console output.\nOne workaround is to add a \"null\" expectation to the tests, for example \"expect(true).toBe(true)\", but this makes tests harder to read and is non-obvious.\nBelow is a real world example:\ndescribe(\"Foo.LoadManager\", function () {\n    \"use strict\";\n    it(\"load() will abort another Promise\", function (done) {\n        let promise1, promise2,\n            manager = new Foo.LoadManager();\n\n        promise1 = new Promise(function (resolve) {\n            window.setTimeout(resolve, 1);\n        });\n        promise2 = new Promise(function (resolve) {\n            window.setTimeout(resolve, 5);\n        });\n        manager.load(promise1).then(() => {\n            done.fail(\"promise1 was unexpectedly fulfilled\");\n        });\n        manager.load(promise2).then(done);\n    });\n});", "createdAt": "2016-10-11T16:05:28Z", "updatedAt": "2018-02-19T19:31:41Z", "closedAt": "2017-08-10T00:22:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "srittau", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "srittau", "company": "@zfutura "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ksvitkovsky", "company": null}, {"login": "Kuraisu", "company": null}, {"login": "andregs", "company": null}, {"login": "sgravrock", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T01:26:44Z", "contents": "We would be happy to review a pull request to add an option to turn the warnings off. The warnings should stay on by default, since they are a smell that you're possibly not actually testing anything.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "srittau", "authorAssociation": "NONE", "createdAt": "2017-04-01T14:12:26Z", "contents": "I wonder what the best way to implement this is. Currently I have a helper function expectNothing():\nfunction expectNothing() {\n    expect(true).toBeTruthy();\n}\nSomething like this could easily be shipped with Jasmine, although probably a bit more \"smart\": included on the expect function (expect.nothing()) and marking a spec instead of using the magic above.\nThis would be used like this:\ndescribe(\"a test without expectations\", () => {\n    it(\"would not output any warnings\", () => {\n        // elaborate test code ...\n        expect.nothing();\n    });\n});\nAnother approach is a custom it() function or another argument to it():\ndescribe(\"a test without expectations\", () => {\n    it(\"would not output any warnings\", () => {\n        // elaborate test code ...\n    }, { noExpectations: true });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-05T18:55:55Z", "contents": "Syntax-wise, I like expect.nothing() a bit better than adding another optional argument to it, but the internal implementation of that is probably a bit trickier. Initially I was thinking something more like the existing global suite flags like throwExceptions, random, etc.\nHope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ksvitkovsky", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-05T10:57:24Z", "contents": "I'm thinking about adding a new matcher with compare function that simply returns true. You would use it like this - expect().nothing();.\nI prefer that approach because:\n\nimplementation is consistent with the actual code base;\nit explicitly applies on single spec and not on whole suite;\n\nOne question though, what should we do if there are other expectations along with 'nothing':\n\nsilently suppress other expectations;\nthrow an error like 'expected nothing but have another expectation';\ndo not check that case at all;\n\n@slackersoft, ready to make a pull request on your command \ud83d\ude0a", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Kuraisu", "authorAssociation": "NONE", "createdAt": "2017-08-05T11:10:53Z", "contents": "I think it would be an inconsistent behavior of one single matcher to depend on neighboring matchers. But issuing a warning instead of an exception would be useful.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "andregs", "authorAssociation": "NONE", "createdAt": "2018-02-18T22:18:21Z", "contents": "Please, is there some sort of flag to activate that warning message? I have tests with no expectations but I don't get the warning.\nMy setup:\nrequire(\"reflect-metadata\");\nconst Jasmine = require(\"jasmine\");\nconst handler = new Jasmine();\n\n// https://jasmine.github.io/edge/node.html\nhandler.loadConfig({\n  random: false,\n  spec_dir: 'dist',\n  spec_files: [\n    '**/*.spec.js',\n  ],\n  helpers: ['helpers/**/*.js'],\n  random: false\n});\n\nhandler.execute();\nOutput:\nStarted\n......................................\n\n\n38 specs, 0 failures\nFinished in 0.209 seconds", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-02-19T19:31:41Z", "contents": "@andregs, the warning in question is implemented in the HTML reporter, so it's not available in Node. If you want, you can easily implement it yourself by writing a custom reporter with a specDone event that checks the number of passed and failed expectations and prints a warning if they're both 0. But I'd encourage you to take a look at your testing workflow instead, since relying on a check for assertions can mask deeper problems.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1223, "url": "https://github.com/jasmine/jasmine/issues/1223", "title": "HI  i am using jasmin 0.9.b3  version  but unfortunately  new version 0.9.b11 is updated  in repository due to new version  we are unable to update dlr reports to particular  messageId.  so, plz help us ,Thanks in Advance .     ", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine (Jasmine npm, karma, etc),\nconsider filing an issue with that library if appropriate\n\nWhen submitting an issue, please answer the following:\n\n\nWhat version are you using?\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\n\n\nIf possible, include an example spec that demonstrates your issue.\nThanks for using Jasmine!", "createdAt": "2016-10-19T10:38:42Z", "updatedAt": "2016-10-19T14:04:47Z", "closedAt": "2016-10-19T14:04:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "anushakl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "anushakl", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-19T14:04:47Z", "contents": "The version numbers you mention are not version numbers for any of the Jasmine libraries that I know of. Are you sure this is the correct Jasmine project? dlr and messageid are also not concepts in Jasmine.\nClosing. Hope you find the correct library!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1226, "url": "https://github.com/jasmine/jasmine/issues/1226", "title": "Share `this` on beforeAll/afterAll", "contents": "Version: 2.4\nEnvironment: browser\nRunner: karma\n\nI like that the this object gets shared between each beforeEach run.\nBut how come this isn't shared with beforeAll/afterAll calls?\nThere may be an obvious reason to this (apologies for this then), unfortunately I can't see it. Searching around hasn't given me any result either.\nThanks", "createdAt": "2016-10-24T17:46:43Z", "updatedAt": "2016-10-25T12:30:47Z", "closedAt": "2016-10-25T12:30:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "augnustin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "augnustin", "company": "Freelance"}, {"login": "amavisca", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-10-25T11:54:07Z", "contents": "The this object is about sharing a clean object between a single it and all of the beforeEach and afterEachs that are run for it. The all functions aren't run directly connected to an it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-10-25T11:55:40Z", "contents": "In general I find the entire \"this\" pattern to be a wonderful deterrent against test pollution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "augnustin", "authorAssociation": "NONE", "createdAt": "2016-10-25T12:21:43Z", "contents": "What's the best practice in my case: in need to initialize a player before starting my test series.\nI find the hoisting strategy ugly:\ndescribe('test player', function(){\n  var player;\n  beforeAll(function(done){\n    player = new Player(params, done);\n  });\n\n  it('should be accessible', function(done) {\n    expect(!!player).toBe(true);\n  });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amavisca", "authorAssociation": "MEMBER", "createdAt": "2016-10-25T12:30:47Z", "contents": "Hoisting would be my personal recommendation if you feel you must use a beforeAll. Without knowing more about your test suite - if I put on my strongly opinionated hat I'd recommend avoiding sharing state between \"it\"s as much as possible to avoid test pollution.\nOthers may have recommendations on the jasmine mailing list (we try to keep discussions on usage out of the github issue tracker).\nhttps://groups.google.com/forum/m/#!forum/jasmine-js", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1227, "url": "https://github.com/jasmine/jasmine/issues/1227", "title": "Wrapping jasmine in node-fiber", "contents": "So I have the following to bootstrap my jasmine:\nimport Jasmine from 'jasmine';\nimport Fiber from 'fibers';\nimport log from 'loglevel';\n\n// Set log level to \"error\" so anything lower won't be printed.\nlog.setDefaultLevel(\"error\");\n\nfunction main() {\n    var jasmine = new Jasmine();\n    jasmine.loadConfigFile('spec/support/jasmine.json');\n    jasmine.execute();\n}\n\n// Here we run the main executable.\n// This makes javascript synchronous instead of the asynchronous.\nFiber(main).run();\nAs you can see, I wrapped it in Fiber.\nFor a short while, no problem. It was testing my \"Fiberized\" modules well. This is until I added a trivial unit test, just accessor test. The accessor test is not failing, but those \"Fiberized\" modules (passing before) are now failing.", "createdAt": "2016-10-24T21:30:12Z", "updatedAt": "2016-10-24T23:34:28Z", "closedAt": "2016-10-24T23:34:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JoeyAndres", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JoeyAndres", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-10-24T23:34:27Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1228, "url": "https://github.com/jasmine/jasmine/issues/1228", "title": "Expose clearReporters() method in runner module", "contents": "I noticed that in v2.5.2 the default reporter is no longer removed when adding a custom one. So I've found out that there is a new method. But for some reason it is not exposed in runner class. So now I have to do:\nvar Jasmine = require('jasmine'),\n    jrunner = new Jasmine();\n\njrunner.env.clearReporters();\njrunner.addReporter(myReporter);\n\njrunner.execute();\nI think it would be better to be able to drop env:\nvar Jasmine = require('jasmine'),\n    jrunner = new Jasmine();\n\njrunner.clearReporters();\njrunner.addReporter(myReporter);\n\njrunner.execute();", "createdAt": "2016-10-25T14:21:03Z", "updatedAt": "2017-03-24T18:41:48Z", "closedAt": "2017-03-24T18:41:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lonelyelk", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "lonelyelk", "company": "@fliit | Fliit Holding GmbH"}, {"login": "DerekOverlock", "company": "Web Developer"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "DerekOverlock", "authorAssociation": "NONE", "createdAt": "2016-11-30T16:44:51Z", "contents": "This is more so related to #1216... but since that was closed I figured I'd add it here:\nLooking at the source code for 2.5.2, I see:\nfunction Jasmine(options) {\n...\nthis.reporter = new module.exports.ConsoleReporter();\nthis.env.addReporter(this.reporter);\n...\n}\nWith this change, we are no longer able to use configureDefaultReporter to configure the default ConsoleReporter, since a console reporter (without any configuration) is already added when Jasmine is initiated, which explains the issue in #1216.\nRelating to this issue, as noted above by @lonelyelk, this also means that this console reporter will not be replaced by a custom reporter, unless you clear the console reporter by calling jasmine.env.clearReporters() and then adding the desired reporter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T19:19:29Z", "contents": "@DerekOverlock The ConsoleReporter was also refactored to allow options to be set later, which is what configureDefaultReporter does.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T19:20:26Z", "contents": "We would be happy to review a pull request to expose a clearReporters function on the wrapper Jasmine, so you don't have to pull out the env to do that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lonelyelk", "authorAssociation": "NONE", "createdAt": "2017-03-22T10:52:49Z", "contents": "I'm sorry, I may be lacking experience in writing code that works in multiple environments, but it's too obscure for me. I can't seem to find any differences in addReporter and clearReporters implementations. They are always defined and mentioned together. I can't seem to find any node-require API test suite either. May be someone can direct me to a proper place?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T00:47:37Z", "contents": "@lonelyelk it looks like the pull request would actually be in jasmine-npm, which is the node.js wrapper around jasmine-core.\nSorry for the confusion.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1229, "url": "https://github.com/jasmine/jasmine/issues/1229", "title": "Can't use numeric assertions passing through protractor", "contents": "I'm trying to use toBeGreaterThan and co in my protractor assertions.\n        initialWidth = $(selectedPanel.width).getAttribute('value')\n        .... resize the panel ....\n        resizedWidth = $(selectedPanel.width).getAttribute('value')\n        expect(resizedWidth).toBeGreaterThan(initialWidth)\n\nTo my understanding this makes a string comparison, not a number comparison. In fact protractor will resolve the promises (resolving with text) before calling the jasmine matcher.\nI guess this could be solved either in the protractor call, but it could also be solved by casting to a number in jasmine. ie\n  compare: function(actual, expected) {\n    return {\n      pass: **+**actual > **+**expected\n    };\n  }\n\nThis seems like the most sensible of the two solutions, but what do you think?\nusing jasmine 2.4, protractor 3.3.0", "createdAt": "2016-10-26T13:31:10Z", "updatedAt": "2016-11-02T00:51:00Z", "closedAt": "2016-11-02T00:51:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "martinsson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "martinsson", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "Gerg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2016-11-02T00:50:57Z", "contents": "I think it makes more sense for the test writer to cast the values themselves. We would like to limit how much Jasmine matchers manipulate their arguments so things are less surprising.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1231, "url": "https://github.com/jasmine/jasmine/issues/1231", "title": "error  \".spies undefined\" after all specs run as of v.2.5.x", "contents": "Somewhere around jasmine.js v.2.5.x the spy clearing logic changed and I started getting\nthe error: TypeError: Cannot read property 'spies' of undefined in the console.\nThe visible symptom is that the browser testrunner output is empty.\nAll tests have run. This error happens during the final cleanup.\nEverything worked fine as recently as v.2.4.1 before some kind of change to the cleanup involving spies.\nSee the errant behavior in this trivial plunker: http://plnkr.co/edit/qixgrpWpf6mgbIfn29zc?p=preview from the Angular 2 docs (I'm the author of the Angular 2 testing chapter).\nDuring the final cleanup, when the id is \"suite0\", the error is thrown in ...\n    var spyRegistry = new j$.SpyRegistry({currentSpies: function() {\n      if(!currentRunnable()) {\n        throw new Error('Spies must be created in a before function or a spec');\n      }\n      return runnableResources[currentRunnable().id].spies; // <-- THROWS HERE\n    }});\n\n... because the value of runnableResources is the empty object {}.\nThe following hack gets around the bug:\n    var spyRegistry = new j$.SpyRegistry({currentSpies: function() {\n      if(!currentRunnable()) {\n        throw new Error('Spies must be created in a before function or a spec');\n      }\n      if (runnableResources[currentRunnable().id]) {\n        return runnableResources[currentRunnable().id].spies;\n      }\n      return [];\n    }});", "createdAt": "2016-10-30T06:20:05Z", "updatedAt": "2018-03-28T00:18:48Z", "closedAt": "2017-06-16T21:11:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wardbell", "authorAssociation": "NONE", "participants_count": 9, "participants_data": [{"login": "wardbell", "company": "IdeaBlade"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mikegwhit", "company": null}, {"login": "eplatzek", "company": null}, {"login": "GZidar", "company": null}, {"login": "RonNewcomb", "company": null}, {"login": "bisubus", "company": null}, {"login": "cbuteau", "company": null}, {"login": "Gerg", "company": null}], "comments_count": 19, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-04T18:49:36Z", "contents": "There is quite a bit of code in the example you've provided, including some patching of core Jasmine functionality. Given that we're not seeing this in Jasmine's own tests or hearing about it from other sources, I'm inclined to say that the issue is arising because of the custom patches to Jasmine that you are using. If you can provide a simpler example without the patching that still causes the error, that would be helpful in diagnosing this issue. At this point, my best guess is that something in the patches is causing the completion callback for the TreeProcessor (https://github.com/jasmine/jasmine/blob/master/src/core/Env.js#L254) to be called more than once, and the second time everything has already been cleaned for the top suite.\nIf you need to wait to execute your Jasmine environment, like in the browser-test-shim.js when window.onload() is called, you should make sure that that onload is not getting called when the window loads.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mikegwhit", "authorAssociation": "NONE", "createdAt": "2016-11-30T04:28:09Z", "contents": "Reproduced this behavior via #1237", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-01T00:50:12Z", "contents": "See my comment on #1237, multiple execute calls on the same Env isn't really supported by Jasmine.\nIf this is happening during a single run and we can narrow it down to something that Jasmine is doing, we would be happy to get that fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eplatzek", "authorAssociation": "NONE", "createdAt": "2017-01-10T21:12:12Z", "contents": "+1: Our project started throwing this error when we upgrade from 2.4.1 to 2.5.2.\nIf we run jasmine and remove all the test cases, it still throws the same error.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:55:16Z", "contents": "I still haven't seen an example that fails with just Jasmine and not other patching going on. This makes it very hard to nail down to something that Jasmine itself is doing to cause this. If anyone can give me a sample that doesn't include patching Jasmine or running the same suite twice, I'd be happy to help figure out what is going on.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GZidar", "authorAssociation": "NONE", "createdAt": "2017-03-14T02:20:58Z", "contents": "I have encountered this error with jasmine versions v2.5.0 and above in conjunction with zone.js v0.7.2 and above patching. The issue may not be in the jasmine code at all but reverting to 2.4.1 does fix it so perhaps some analysis of what changed with regards to cleanup of spies between those two versions might be helpful to track down why the zone.js patch is causing this to fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T00:35:43Z", "contents": "The primary change for spy cleanup in 2.5.0 was allowing the global beforeAll and afterAll to have spies and expectations #811. Doing this means that Jasmine now has to track those things at the topLevel suite (this is the hidden parent describe of all of the describes in your suite). These should be tracked in the same way as in any of the child suite, so if zone.js (and the associated patching) is doing something to Jasmine that breaks this, the patches and such probably need to change.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RonNewcomb", "authorAssociation": "NONE", "createdAt": "2017-05-25T00:37:35Z", "contents": "I am also having this issue, using a SpecRunner.html file and spec files which are wrapped by SystemJS.  I haven't changed jasmine-core for this, but reverting to 2.4.1 made the error go away.\nGranted, I still get \"no specs found\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GZidar", "authorAssociation": "NONE", "createdAt": "2017-05-25T04:26:44Z", "contents": "Hi @RonNewcomb, the issue (for me at least) isn't with Jasmine it was the combination of Jasmine and Zone.js if you have a look at this link (angular/zone.js#679) you will find a workaround to the problem so you can use the newest Jasmine with the zone.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "RonNewcomb", "authorAssociation": "NONE", "createdAt": "2017-05-25T17:03:24Z", "contents": "I am indeed using zone.js; thanks for the tip @GZidar !", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-16T21:11:13Z", "contents": "It sounds like this issue is primarily arising because of patching that zone.js is doing to Jasmine and it potentially not matching up with the current version of Jasmine. I'm going to close this issue, but if we can identify a reproduction case that only uses Jasmine, I'd be happy to work on a fix.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bisubus", "authorAssociation": "NONE", "createdAt": "2017-09-13T16:16:15Z", "contents": "@slackersoft The error is still applicable in pure SystemJS setup, with no Zone.js. See http://plnkr.co/edit/oJq4W8WnW3EpkWu2ysKN", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-15T05:23:48Z", "contents": "@bisubus It looks like the bootstrapping code you have there is just re-executing the window.onload handler that Jasmine installs in boot.js which is causing the Jasmine Suite to be executed twice. Once without any specs, and once again after all the specs have been loaded. Because a Jasmine Env doesn't really expect to be executed more than once, it looks like there is some cleanup/setup that is only done during creation of the full Environment that causes this error when run a second time. If you need to cause Jasmine to delay executing your specs for some time after page load, you should also remove the window.onload handler that Jasmine installs (or build your own custom boot that sets up when you really need the execute call to be made).\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bisubus", "authorAssociation": "NONE", "createdAt": "2017-11-15T05:59:20Z", "contents": "@slackersoft Thanks, I see what you mean by executed twice. I've tried to remove window.onload, but it seems it doesn't help. Yes, custom boot is an option but copying and pasting a considerable part of the library without changes doesn't look very good.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T05:13:58Z", "contents": "@bisubus looks like delete doesn't do the job in this case. I tried window.onload = function() {}; and it looks like it works correctly.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "cbuteau", "authorAssociation": "NONE", "createdAt": "2018-03-19T01:10:30Z", "contents": "What is the actual workaround?\nI need more information spelled out to me.\nI originally launched my package with testem/jasmine and am trying to migrate my tests and infrastructure to karma/jasmine and this bug is in the way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-22T00:37:03Z", "contents": "@cbuteau the workaround mentioned above has to do with using Zone.js with Jasmine. You should take a look at the Zone.js issue referenced above and ask in that forum, since the patching happening there seems to be causing the issue and not Jasmine itself.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cbuteau", "authorAssociation": "NONE", "createdAt": "2018-03-25T00:45:01Z", "contents": "I am not using Zone.js I am just migrating to karma/jasmine and I keep getting this error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-28T00:18:48Z", "contents": "@cbuteau please create a new issue with a stripped down example that exhibits the problem. The error shown in this issue was related to Zone.js (as a dependency of Angular) and how it was patching into Jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1232, "url": "https://github.com/jasmine/jasmine/issues/1232", "title": "There is a broken link in the Wiki", "contents": "In the Wiki you are pointing to 'Try Jasmine out in your browser' which is pointing to broken link. Could you please update?", "createdAt": "2016-11-06T20:22:29Z", "updatedAt": "2016-11-06T21:16:01Z", "closedAt": "2016-11-06T21:16:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nalekberov", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nalekberov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-06T21:16:01Z", "contents": "It's gone now. I don't know what it would've linked to.\nThanks.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1233, "url": "https://github.com/jasmine/jasmine/issues/1233", "title": "Tests get false positive if you yield without wrapping (in coffeescript)", "contents": "Version: jasmine-core@2.4.1\nEnvironment: node, coffeescript\nRun via npm run jasmine\nThis is a problem especially with Coffeescript, which will \"helpfully\" automatically convert functions to generators for you if you use yield in them.\nWe normally use this slight modification of co.wrap around all our it test functions, so that we can yield inside them.\nco = require 'co'\n\nmodule.exports = utils =\n  wrap: (gen) ->\n    fn = co.wrap(gen)\n    return (done) ->\n      fn.apply(@, [done]).catch (err) -> done.fail(err)\n\nThe problem is that if we accidentally leave off utils.wrap, the test still passes silently, but none of the expectations were actually run. This seems to happen any time the callback that it gets is a generator function.\nHere's a spec that works correctly (by failing)\nit \"doesn't silently pass generator functions\", utils.wrap (done) ->\n  a = yield Promise.resolve(\"a\")\n  expect(false).toBe(true)\n  done()\n\nHere's a spec that demonstrates the problem (by passing)\nit 'silently passes generator functions', ->\n  a = yield Promise.resolve(\"a\")\n  expect(false).toBe(true)\n\nThe problem doesn't occur if you use (done) ->, (it correctly fails due to timeout), but because yielding tests look synchronous, we failed to notice that in several cases.\nThis is what we've put in place for now to prevent this from ever happening, in our spec helper.js file, which successfully revealed three old tests which were not actually being run due to this problem. It would be great if something like this were put into Jasmine proper.\nvar oldIt = global.it;\nglobal.it = function(description, testFn) {\n  if(testFn.constructor.name === 'GeneratorFunction'){\n    throw(Error(\"You didn't wrap a generator function! Do it like this: it 'does a thing', utils.wrap (done) ->\"))\n  }\n  oldIt.apply(jasmine.getEnv(), arguments)\n}", "createdAt": "2016-11-07T20:30:10Z", "updatedAt": "2017-04-11T18:53:31Z", "closedAt": "2017-04-11T18:53:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "phoenixeliot", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "phoenixeliot", "company": "CodeCombat"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T20:31:05Z", "contents": "It looks like when you fail to wrap your spec functions, that the function passed into Jasmine doesn't have any arguments so Jasmine has no way to tell that it is supposed to be async. This means that as soon as you yield Jasmine moves on to the next spec in your suite.\nWithout a large refactoring to support Promises as return types or something (like #965) which we're not sure we want in Jasmine-Core at the moment, I'm not sure how we would support generator functions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "phoenixeliot", "authorAssociation": "NONE", "createdAt": "2017-03-23T19:58:41Z", "contents": "(whoops, dropped this from my radar forever)\nThe thing we ended up doing was something like this, which seems like it could be dropped into Jasmine fairly easily without implementing full support of unwrapped generators. So at least now we get a test failing instead of being ignored if we make that mistake.\nvar oldIt = global.it;\nglobal.it = function(description, testFn) {\n  if(testFn.constructor.name === 'GeneratorFunction'){\n    throw(Error(\"Function passed to 'it' must not be a generator function\"))\n  }\n  oldIt.apply(jasmine.getEnv(), arguments)\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T18:53:31Z", "contents": "I think this actually gets fixed with #1222 which checks that it, describe, etc. all receive a function where they expect it. This hasn't been released yet, but you should be able to run off of master to check if this solves your problem.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1235, "url": "https://github.com/jasmine/jasmine/issues/1235", "title": "feature: make main testing functions module importable", "contents": "In a javascript, typescript or other module environment it would be ideal to import the testing functions as opposed to making them available globally.\neg\nimport { describe, it } from 'jasmine';\nDoes this sound like a good idea to everyone else?", "createdAt": "2016-11-12T14:03:00Z", "updatedAt": "2018-02-14T00:14:00Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "mikehaas763", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mikehaas763", "company": "Capital One Financial"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "denniscollective", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-11-18T20:23:07Z", "contents": "That sounds interesting, and probably the thing you want to use to provide that is the jasmineInterface that is loaded up by the various boot scripts. I'm not what the right way for Jasmine-Core to provide this interface since it is purely ES5. Additionally, removing the interface from the global object would be a breaking change and not something we would be able to release in the current 2.x release cycle.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "denniscollective", "authorAssociation": "NONE", "createdAt": "2017-11-08T03:40:09Z", "contents": "It could theoretically be backwards-compatible by making it be a different require IE\nimport { describe, it } from 'jasmine/no-global'\n\nwhich the jasmine package could then depend on and install globally.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-14T00:13:55Z", "contents": "We would be happy to review a pull request to add a different entry point into Jasmine that didn't auto install onto global to allow users to use imports more idiomatically.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["HEART", "HEART", "HEART"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1237, "url": "https://github.com/jasmine/jasmine/issues/1237", "title": "executing Jasmine twice creates exception via undefined spies property on undefined ", "contents": "I'm using Jasmine to generate a boolean of pass/fail.  This is on 2.5.2\nTo do this, I'm running jasmine.execute([files]) and relying on jasmine.completionReporter.onComplete.\nRunning jasmine.execute a second time produces an exception on line 803 of jasmine.js in jasmine-core.  Seems the currentRunable().id is undefined in runnableResources.\n    var spyRegistry = new j$.SpyRegistry({currentSpies: function() {\n      if(!currentRunnable()) {\n        throw new Error('Spies must be created in a before function or a spec');\n      }\n      return runnableResources[currentRunnable().id].spies; // exception,runnableResources = [];\n    }});", "createdAt": "2016-11-30T04:26:17Z", "updatedAt": "2016-12-01T15:01:58Z", "closedAt": "2016-12-01T00:48:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mikegwhit", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mikegwhit", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "mikegwhit", "authorAssociation": "NONE", "createdAt": "2016-11-30T04:36:47Z", "contents": "This is helped by initializing a new Jasmine object.   This fixes the bug, however it's unclear that execute  is a one-time operation for a Jasmine object and it's worth considering cleaning up/re-initializing the suite after execution or clarifying that  the Jasmine object is a one-time object or adding an additional function to run Jasmine multiple times.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-01T00:48:04Z", "contents": "We have generally tried not to do anything to explicitly break potentially running the specs in an Env more than once, but it isn't really supported functionality. That said, it might be time to have the Env track whether it has executed already and throw an error if execute is called more than once on the same object.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mikegwhit", "authorAssociation": "NONE", "createdAt": "2016-12-01T15:01:58Z", "contents": "Please notify  if there is intent to shift any objects over to singleton objects, as this  would  break my code(!) and this use case I've stated is helpful for testing before continuous integration.\nThanks in advance :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1238, "url": "https://github.com/jasmine/jasmine/issues/1238", "title": "Custom Matchers Issue", "contents": "Never mind I figured it out. Please delete this issue.", "createdAt": "2016-12-01T17:27:43Z", "updatedAt": "2016-12-01T18:13:33Z", "closedAt": "2016-12-01T18:13:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Mujaddadi", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Mujaddadi", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1239, "url": "https://github.com/jasmine/jasmine/issues/1239", "title": "Provide clear documentation with function signatures", "contents": "Hello.\nCurrent documentation it's fun and good example. But when I find some non-typical framework's call I stumble every time to understand what extra parameter means. Can you make standard documentation with function signatures and parameters description.\nE.g., At the moment I'm trying realize what 3rd parameter does in this call\nit('text', callbackFunc, 1000)", "createdAt": "2016-12-02T16:50:12Z", "updatedAt": "2016-12-02T17:35:19Z", "closedAt": "2016-12-02T17:35:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fetis", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fetis", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2016-12-02T17:35:19Z", "contents": "This sounds like a duplicate of #596. Closing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1240, "url": "https://github.com/jasmine/jasmine/issues/1240", "title": "nstall jasminenoe", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine (Jasmine npm, karma, etc),\nconsider filing an issue with that library if appropriate\n\nWhen submitting an issue, please answer the following:\n\nWhat version are you using?\nWhat environment are you running Jasmine in (node, browser, etc)?\nHow are you running Jasmine (standalone, npm, karma, etc)?\nIf possible, include an example spec that demonstrates your issue.\n\nThanks for using Jasmine!", "createdAt": "2016-12-09T17:36:51Z", "updatedAt": "2016-12-09T18:47:25Z", "closedAt": "2016-12-09T18:47:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gibbok", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "gibbok", "company": "@Actyx"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1241, "url": "https://github.com/jasmine/jasmine/issues/1241", "title": "Only first spec runs when testing with Nashorn engine", "contents": "I'm trying to run Jasmine with Nashorn. I've written my boot script and basically Jasmine runs as intended, but sadly it runs only first spec from first suite. Here is my code (I copied jasmine release /lib folder contents inside ./jasmine folder):\n./code.js:\nvar isJavaByteArray = function(value) {\n    return typeof value == 'object' \n        && typeof value.length == 'number' \n        && !Array.isArray(value)\n        && (value.length == 0 || typeof value[0] == 'number')\n}\n./test.js:\n#!/usr/lib/jvm/default/bin/jjs -scripting\n\n\nload('jasmine/jasmine.js');\n\njasmine = jasmineRequire.core(jasmineRequire);\nvar env = jasmine.getEnv();\nvar jsm = jasmineRequire.interface(jasmine, env);\n\nenv.addReporter({\n\n    jasmineStarted: function(suiteInfo) {\n        print('Running suite with ' + suiteInfo.totalSpecsDefined);\n    },\n\n    suiteStarted: function(suite) {\n        print('\\n    ' + suite.description + '...');\n    },\n\n    specDone: function(result) {\n        print(result.description + ': ' + result.status);\n\n        for(var i = 0; i < result.failedExpectations.length; i++) {\n            print('Failure: ' + result.failedExpectations[i].message);\n            print(result.failedExpectations[i].stack);\n        }\n    }\n\n});\n\n\n\nload('code.js');\n\n\njsm.describe(\"code.js\", function() {\n\n    jsm.it(\"recognizes Java byte[] array correctly\", function() {\n        jsm.expect( isJavaByteArray([1, 2, 3]) ).toBe(false);\n        jsm.expect( isJavaByteArray(new java.lang.String('test').getBytes()) ).toBe(true);\n    });\n\n    jsm.it(\"is not insane\", function() {\n        jsm.expect( true ).toBe(true);\n    });\n\n});\n\njsm.describe(\"Nashorn\", function() {\n\n    jsm.it(\"is not insane\", function() {\n        jsm.expect( true ).toBe(true);\n    });\n\n});\n\n\nenv.execute();\nI made some additional effort (load/print functions substitutes) to run the tests with Node.js, and under Node.js all tests are running. Am I doing some mistake? How can I debug to resolve my problem?", "createdAt": "2016-12-09T20:34:14Z", "updatedAt": "2017-10-26T19:28:41Z", "closedAt": "2017-10-26T19:28:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "loziniak", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "loziniak", "company": "Robotix"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "DanielJoyce", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-12T01:10:27Z", "contents": "My best guess is that your process is not waiting for the entire suite to complete. Even if you don't use the async support in Jasmine, your suite could still end up with an async call in the QueueRunner.\nJasmine will trigger the jasmineDone event on all reporters when the entire suite has finished execution.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DanielJoyce", "authorAssociation": "NONE", "createdAt": "2017-03-24T23:20:22Z", "contents": "Same issue here. Only first test runs...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-26T00:42:39Z", "contents": "We need a bit more detail on this to lock down what exactly the issue is. It sounds like the Nashorn process is not waiting for the suites to complete before exiting. You'll probably want to figure out how to have the process wait, so you can get the full suite and handle the jasmineDone callback in a reporter to close out the process.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-26T19:28:41Z", "contents": "I'm closing this due to lack of activity. Feel free to open an issue with more details if you're still having problems.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1243, "url": "https://github.com/jasmine/jasmine/issues/1243", "title": "Feature request: done() in describe", "contents": "Using:\n-Jasmine 2.5\n-Node 6.6\n-with Protractor\nBackground:\nI'm generating a list of string URIs from a page, through a promise running in beforeEach.\nI'd like to loop through that list and on each URI, which I'd like to place each in its own describe with the URI string as title, execute a number of tests, which preferably should live each in its own it().\nMy code looks like this:\n`describe('Pages', () => {\nvar pages\n\nbeforeAll((done) => {\n\n  // open page\n  browser.get(someurl)\n\n  // get links\n  element.all(by.css(someselector)).then(rows => {\n    get_list_of_url_objects_from_elements(rows).then( resolved_links=> {\n      pages = resolved_links\n      done()\n    })\n  })\n})\n\n   pages.forEach( page => {\n  describe(page.name+' should have no 404',() => {\n    beforeAll(() => {\n      browser.get(page.href)\n    })\n\n    it('on images', () => {\n      common.check404_images()\n    })\n\n    it('on stylesheets', () => {\n      common.check404_stylesheets()\n    })\n      \n    it('on scripts', () => {\n      common.check404_scripts()\n    })\n  })\n})\n\n})\n`\nProblem:\npages is always in undefined, because that part of the code is executed while the first beforeAll runs.\nPossible solution:\nI could just wrap the forEach loop within a describe(done), so that it waits for pages to have a value.\nRequested feature:\nI'd need describe to allow done() function, so that I can do async tests with better separation of sub-specs.\nIn the meantime, I managed to stash the each loop in a single big it() and execute all tests on all URIs together, but it's not pleasant and I really would like to display separate sections for each sub-spec.\nThanks for the attention", "createdAt": "2016-12-13T12:10:09Z", "updatedAt": "2017-02-09T21:59:27Z", "closedAt": "2017-02-09T21:59:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aijanai", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aijanai", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T21:59:27Z", "contents": "Adding specs after the suite has started execution is not something we're looking to add to Jasmine. If you want to generate specs in your javascript, I would recommend writing a custom boot that waits until you have defined all of your specs before calling execute on the Jasmine Env.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1244, "url": "https://github.com/jasmine/jasmine/issues/1244", "title": "Derivative Promises get resolved incorrectly", "contents": "Gist:\nI spy on get method of my rest service.\nspyOn(restService, 'get').and.callFake(function () {\nreturn deferred.promise;\n});\nThe method I am trying to test is myService.getFormData() that returns a chained promise:\nfunction getFormData() {\nvar getPromise = this.restService.get(endPoint, params, true);\nvar processedDataPromise = then(successHandle, failHandler);\nreturn processedDataPromise;\n}\n3.Back to Jasmine spec, I invoke getFormData function and make assertions:\n     var processedDataPromise = myService.getFormData();\n     processedDataPromise.then(function(data) {\n      expect(data).not.toBeNull();\n\n    });\n\ndeferred.resolve(testFormData);\n$rootScope.$digest();\nThe Problem:\nThe above derivative promise (processedDataPromise) does indeed get resolved. However the 'data' passed to it is undefined. Is it anything to do with $digest cycles not doing its job in Jasmine?\nWhy does Jasmine not pass any data to the above derived promise.?\nFurther Note: The processedDataPromise is a completely new promise than the get returned promise.\nIt is a promise for processedData which as we can see is returned by successHandle (Definition not shown) once its parent getPromise gets resolved.\nIn UI everything works like a Charm.", "createdAt": "2016-12-14T18:43:16Z", "updatedAt": "2017-02-09T19:05:45Z", "closedAt": "2017-02-09T19:05:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "YelloJacket", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "YelloJacket", "company": null}, {"login": "zion1129", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "zion1129", "authorAssociation": "NONE", "createdAt": "2016-12-23T14:45:44Z", "contents": "It's not really clear where the parameter/argument \"data\" is coming from? Where that is an anonymous function how are you passing it in? If it's being returned by myService.getFormData() I would be interested to see how you're passing it in.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T19:05:45Z", "contents": "Jasmine doesn't know anything about Promises. It looks like you're probably using Angular in some form, so I would take a look at their docs for how to deal with multiple chained promises in test. Many promise libraries do resolution in a setTimeout (or similar) so if you are using either Jasmine's built-in clock or some of the Angular clock testing stuff, you may need to force that to proceed to continue resolution.\nJasmine clock documentation\nI'm going to close this, since it seems like an issue with Angular or your tests, and not with Jasmine itself. In the future, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1245, "url": "https://github.com/jasmine/jasmine/issues/1245", "title": "Behaviour of stopSpecOnExpectationFailure=true + done.fail(Error)", "contents": "Hello,\nRun: jasmine-npm\nVersion: 2.5.2\nNode: 7.0.0\nWith the following\nConfig:\n{\n  \"stopSpecOnExpectationFailure\": true,\n}\nTest:\n    it('Should fail in async before test', (done) => {\n        Promise.reject(new Error('make me fail')).then((result) => {\n            expect(result).toEqual(result);\n\n            done();\n        }).catch(done.fail);\n    });\nI have an error\n(node:30498) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error\n(node:30498) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nF\n\nFailures:\n1) MalformedMessageError: Should fail in async before test\n  Message:\n    Failed: make me fail\n  Stack:\n    Error: make me fail\n        at Object.it (/path/to.spec.js:34:24)\n  Message:\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n  Stack:\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n        at ontimeout (timers.js:365:14)\n        at tryOnTimeout (timers.js:237:5)\n        at Timer.listOnTimeout (timers.js:207:5)\n\nThere are 2 possible solutions:\n\nMake done.fail not to rethrow an error\nUpdate docs to document such case\n\nBoth are OK for me, but it took several hours to find a root cause of test failures.", "createdAt": "2016-12-15T11:32:20Z", "updatedAt": "2019-02-11T16:45:18Z", "closedAt": "2017-04-11T17:15:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wingedfox", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "wingedfox", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "lselbeck", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T19:00:55Z", "contents": "I'm not sure I fully understand what the problem is, but it sounds like it might be:\n\nPromise rejection handlers catch shouldn't throw errors.\nJasmine throws errors with failed expectations only with stopSpecOnExpectationFailure (there isn't any real other way to get an expect to break control flow of your spec)\ndone.fail adds a failed expectation so that the error message can be reported\nWhen you combine 2 & 3, you cause done.fail to throw an error, and if that is in your promise rejection handler, that ends up wrapping the real expectation failure in the promise error message.\nAdditionally, because the fail portion now throws an error, Jasmine no longer proceeds to the next spec immediately, and you get the timeout error message as well.\n\nWe would be happy to review a pull request to address 5 for sure. Making the throw on failure logic know about done.fail in particular gets a little trickier, because a call to just fail should probably behave as a normal failed expectation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T17:15:25Z", "contents": "I believe that issue number 5 should be fixed with the recent fix for #529 which should cause the Error to be caught and associated with the running spec.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lselbeck", "authorAssociation": "NONE", "createdAt": "2018-10-25T18:37:02Z", "contents": "I believe this is still an issue.  I'm reproing in jasmine 3.3.0 and npm 6.4.1 with the following code:\nConfig:\n{\n  \"stopSpecOnExpectationFailure\": true,\n}\nTest:\ndescribe('test', () => {\n    it('test', (done) => {\n        return Promise.reject()\n            .then(() => {\n                done();\n            })\n            .catch(() => {\n                done.fail('this should fail normally');\n            });\n    });\n});\nOutput:\nJasmine started\n(node:75318) UnhandledPromiseRejectionWarning: Error\n    at Object.getJasmineRequireObj.errors (/{test_dir}/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2463:33)\n    at Object.getJasmineRequire.core (/{test_dir}/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:49:26)\n    at Object.module.exports [as boot] (/{test_dir}/node_modules/jasmine-core/lib/jasmine-core/node_boot.js:24:32)\n    at new Jasmine (/{test_dir}/node_modules/jasmine/lib/jasmine.js:14:30)\n    at Object.<anonymous> (/{test_dir}/config/testRunner.js:9:17)\n    at Module._compile (module.js:649:14)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n(node:75318) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)\n(node:75318) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n\ntest\n  \u2717 test\n    - Failed: this should fail normally\n    - Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-11T16:45:18Z", "contents": "Hmm, when I run that spec, I see:\n\u25cb \u2192 npx jasmine\nStarted\nF\n\nFailures:\n1) test test\n  Message:\n    Failed: this should fail normally\n  Stack:\n    Error: Failed: this should fail normally\n        at <Jasmine>\n        at Promise.reject.then.catch (/Users/gregg/workspace/tester/spec/javascripts/spec.js:49:22)\n\n1 spec, 1 failure\nFinished in 0.005 seconds\n\nRunning Jasmine:\n\u25cb \u2192 npx jasmine -v\njasmine v3.3.1\njasmine-core v3.3.0", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1247, "url": "https://github.com/jasmine/jasmine/issues/1247", "title": "the doc error in introduction.js about the mockDate", "contents": "Hello!\nI recently read the documentation, and I found an error in it.\nAbout the mocking the Date part in the documentation, the code is as below:\n   describe(\"Mocking the Date object\", function(){\n     it(\"mocks the Date object and sets it to a given time\", function() {\n         var baseTime = new Date(2013, 9, 23);\n\n         jasmine.clock().mockDate(baseTime);\n\n        jasmine.clock().tick(50);\n        expect(new Date().getTime()).toEqual(baseTime.getTime() + 50);\n       });\n   });\n\nAccording to the documentation, before using jasmine.clock().tick function to manipulate time, we  should call the jasmine.clock().install function.\nWhen I test the code shown as above, it throws an error : \"Mock clock is not installed, use jasmine.clock().install()\".", "createdAt": "2016-12-28T11:36:26Z", "updatedAt": "2016-12-29T01:54:22Z", "closedAt": "2016-12-29T01:54:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lukesomnus", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "lukesomnus", "company": "@qunar"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1250, "url": "https://github.com/jasmine/jasmine/issues/1250", "title": "Support symbols in array arg to createSpyObj() and expect().toHaveBeenCalled() etc", "contents": "\u00a0- What version are you using? 2.5.2\nSymbols don't appear to work\u00a0in these methods, I get the\u00a0error:\nTypeError: Cannot convert a Symbol value to a string", "createdAt": "2017-01-03T22:41:16Z", "updatedAt": "2017-02-13T17:52:20Z", "closedAt": "2017-02-09T21:53:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nbransby", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nbransby", "company": "TeamHub"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T21:53:57Z", "contents": "This doesn't seem like something that add a whole lot of value to Jasmine, especially since we can't simply .toString() it to get the correct equivalent string. Additionally, since there isn't an Internet Explorer version that supports Symbols, it would require a bunch of effort to make sure this code doesn't break in those browsers.\nI'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nbransby", "authorAssociation": "NONE", "createdAt": "2017-02-12T17:29:06Z", "contents": "Do you mean for logging? You can toString() a symbol. I have no words for no support in IE being a reason not to implement! Maybe an example would help clarify, here is what I have to do to workround this issue:\n        const handler = jasmine.createSpyObj('response', ['onText'])\n        functionUnderTest({\n                [onText]: (text) => handler.onText(text)\n        })\n        expect(handler.onText).toHaveBeenCalled();\nwith the onText var being the symbol - what I would like to write instead:\n        const handler = jasmine.createSpyObj('response', [onText])\n        functionUnderTest(handler)\n        expect(handler[onText]).toHaveBeenCalled();\nMaybe you would accept a PR for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T17:52:20Z", "contents": "Unfortunately, the toString() on a Symbol doesn't return the text of the symbol.\n> Symbol('foo').toString()\n\"Symbol(foo)\"\nThis means that the Jasmine code would need to specifically know about Symbols in order to get the value foo that you want out of it.\nJasmine currently maintains support for IE 8 and up, while this doesn't mean we don't want any code that can't be run on IE8, it does mean we need to be careful about supporting features that completely don't exist in certain browsers.\nThis is not currently something that we want to merge in.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1251, "url": "https://github.com/jasmine/jasmine/issues/1251", "title": "EADDRINUSE connect EADDRINUSE 127.0.0.1:<port number> error seen when executing protractor scripts", "contents": "Node version - 4.4.2\nJasmine version - 2.4.1\nProtractor version - 3.1.1\nOS - Windows Server 2012 R2, 64-bit\nWhen we try to run our protractor tests that use Jasmine, we see an error - EADDRINUSE being thrown after a couple of it blocks are executed. This same test works fine on our laptops (Win7 64bit). Can you advise on why this error is thrown?\nThe error thrown: EADDRINUSE connect EADDRINUSE 127.0.0.1:\nIt throws a random port number each time and we have verified that this port is not being used by any other processes at that time.", "createdAt": "2017-01-05T22:24:27Z", "updatedAt": "2017-01-06T05:57:51Z", "closedAt": "2017-01-06T05:57:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "eymemathew", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "eymemathew", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-06T05:57:51Z", "contents": "This sounds like it is probably an issue with protractor and not Jasmine itself. The only part I. Jasmine that would try to listen on a port wouldn't be in the core repo (something like Jasmine-gem or Jasmine-py). To my knowledge, protractor depends directly on the Jasmine-Core package which has no concept of ports.\nClosing. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1252, "url": "https://github.com/jasmine/jasmine/issues/1252", "title": "toThrowError with <iframe> reports incorrectly", "contents": "jasmine-standalone-2.5.2 in browser\n\nHi, thank you for the great framework.\nWhen an app that runs in <iframe> is tested, toThrowError reports incorrectly. It says \"Expected function to throw an Error, but it threw...\".\nJasmine uses Error constructor in current window, but it was made by Error constructor in child window.\nIn this code:\n\n  \n    \n      jasmine/src/core/matchers/toThrowError.js\n    \n    \n         Line 31\n      in\n      8624a52\n    \n    \n    \n    \n\n        \n          \n           if (!(thrown instanceof Error)) { \n        \n    \n  \n\n\nif (!(thrown instanceof Error)) {\nIt checks with the Error in current window always. But the thrown was made in different global (namespace).\nFor example:\n\napp.html\n\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n\n  <script>\n\n    function methodA() {\n      return 'foo';\n    }\n\n    function methodB() {\n      throw new Error('bar');\n    }\n\n  </script>\n\n</head>\n\n<body>\n  app.html\n</body>\n</html>\n\nSpec\n\ndescribe('App running in <iframe>', function() {\n\n  function methodC() {\n    throw new Error('baz');\n  }\n\n  var childWindow;\n\n  beforeAll(function(done) {\n    // Prepare <iframe>\n    var iframe = document.body.insertBefore(document.createElement('iframe'), document.body.firstChild)\n    iframe.addEventListener('load', function() {\n      childWindow = iframe.contentWindow;\n      // self.Error = childWindow.Error;\n      done();\n    });\n    iframe.src = 'app.html';\n  });\n\n  it('should return foo', function() {\n    expect(childWindow.methodA()).toBe('foo');\n  });\n\n  it('should throw an error', function() {\n    expect(function() {\n      childWindow.methodB();\n    }).toThrowError('bar');\n  });\n\n  it('(test in current window)', function() {\n    expect(function() {\n      methodC();\n    }).toThrowError('baz');\n  });\n});\nThe second spec fails.\nI think, this line:\nif (!(thrown instanceof Error)) {\nshould be:\nif (!(thrown instanceof (thrown.constructor.constructor('return this')()).Error)) {\nThis gets Error from the same global as thrown.", "createdAt": "2017-01-12T06:54:23Z", "updatedAt": "2017-03-10T22:36:40Z", "closedAt": "2017-03-10T22:36:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "anseki", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "anseki", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T22:10:40Z", "contents": "We would be happy to review a pull request that allows toThrowError to correctly detect Errors that come from different frames correctly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "anseki", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-02-10T06:29:10Z", "contents": "@slackersoft,\nOk, I will send a PR later.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1253, "url": "https://github.com/jasmine/jasmine/issues/1253", "title": "Stop Jasmine javascript testing after first it fails.", "contents": "I am new to jasmine javascript testing and for starting i got a dummy project from internet with some basic functions and test spec for same. I am using jasmine 2.5 and using jasmine.js library for loading jasmine related functionality. I am running this basic test in chrome browser.\nMy source file: MathUtils.js:\nMathUtils = function() {};\n\nMathUtils.prototype.sum = function(number1, number2) {\n\t\treturn number1 + number2;\n}\n\nMathUtils.prototype.substract = function(number1, number2) {\n\treturn number1 - number2;\n}\n\nand spec file for this is:\ndescribe(\"MathUtils\", function() {\n\tvar calc;\n\tbeforeEach(function() {\n\t\tcalc = new MathUtils();\n\t});\n\tit(\"should be able to calculate sum of 10 and 40\", function() {\n\t\texpect(calc.sum(10, 40)).toEqual(54);\t\n\t});\n        it(\"should be able to calculate diff of 40 and 10\", function() {\n\t\texpect(calc.substract(40, 10)).toEqual(30);\t\n\t});\n});\n\nIn spec, 1st case will fail and 2nd will pass.\nHere I want a mechanism to stop execution when 1st case fails i.e. when 1st case fails 2nd should not execute. Right now even if 1st case fails, it executes remaining cases and shows report with test cases fail/pass status.\nThere are already issue with same requirement raised specially #414 and #577 . I tried to use the solution but could not achieve desired result. (or you can say i did not understand it)\nCan you give solution in naive way, or in context of above code so it will be very basic approach to understand jasmine abort test feature for new developer.", "createdAt": "2017-01-13T10:02:47Z", "updatedAt": "2017-02-09T22:43:00Z", "closedAt": "2017-02-09T22:42:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gavdix", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "gavdix", "company": null}, {"login": "lmj0011", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "lmj0011", "authorAssociation": "NONE", "createdAt": "2017-01-15T01:04:12Z", "contents": "you may need to look into customizing configuration to be loaded by boot.js\nhttps://jasmine.github.io/2.0/boot.html - it's not clear on how to set the option though.\nhttps://jasmine.github.io/2.5/custom_boot.html\nI know this option is available if you're using node to run your tests.\njasmine --stop-on-failure=true\nhttps://jasmine.github.io/2.5/node.html#section-21", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gavdix", "authorAssociation": "NONE", "createdAt": "2017-01-16T06:16:03Z", "contents": "Node command i already saw in some comments, but i am not using node to run my tests.\nLet me check this boot.js options.\nI will check and shall update the outcome. Thanks in advance. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gavdix", "authorAssociation": "NONE", "createdAt": "2017-01-16T11:31:47Z", "contents": "@lmj0011 As you mentioned \"it's not clear on how to set the option\" in given link.\nI did not find any solution to my problem. Can anyone update any solution?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T22:42:53Z", "contents": "This sounds like a duplicate of #414 which has not been implemented. The current eager stopping functionality is to stop further expect calls in a single spec once one of them has failed.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1254, "url": "https://github.com/jasmine/jasmine/issues/1254", "title": "Test fail when calling `done(true)`", "contents": "Hi guys!\nAs I was reading (jasmine/jasmine.github.io#67), jasmine should not fail when calling done(true) or done(whatever!), but it's failing in my local env.\nDo you have unit tests for done function? You should check that done should not fail when passing a parameter.\n\n\nWhat version are you using?\n\"karma-jasmine\": \"^0.3.6\",\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nBrowser\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\nIE, Chrome, FF, Safari", "createdAt": "2017-01-13T14:50:16Z", "updatedAt": "2017-02-09T22:28:31Z", "closedAt": "2017-02-09T22:28:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "NoelBroda", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "NoelBroda", "company": "@Olapic "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-09T22:28:31Z", "contents": "The done callback that is provided by Jasmine itself will ignore any parameters that are passed to it. (https://github.com/jasmine/jasmine/blob/master/src/core/QueueRunner.js#L59)\nBecause karma wraps some of this up, it might be worth asking the karma team about this as well.\nI'm going to close this because it doesn't look like this issue is with Jasmine itself. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1255, "url": "https://github.com/jasmine/jasmine/issues/1255", "title": "expect(null).toEqual(jasmine.any(Object)) passes", "contents": "version\njasmine v2.5.3\njasmine-core v2.5.2\nenvironment\nnode v6.9.4\nnpm v3.10.10\nrunning Jasmine\nfrom cli using the jasmine command to run my tests\nI'm expecting this to fail, but it doesn't.\nHow does null equal an Object?\nexpect(null).toEqual(jasmine.any(Object));", "createdAt": "2017-01-15T00:52:49Z", "updatedAt": "2018-02-06T19:23:09Z", "closedAt": "2018-02-06T19:23:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "lmj0011", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "lmj0011", "company": null}, {"login": "JamieMason", "company": "Fold Left Ltd"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "JamieMason", "authorAssociation": "NONE", "createdAt": "2017-01-30T16:29:36Z", "contents": "I think these lines in /src/core/asymmetric_equality/Any.js:26-28 could be the problem and the following snippet should be enough to fix it AFAICT.\n    if (this.expectedObject == Object) {\n      return Object.prototype.toString.call(other) == '[object Object]';\n    }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "lmj0011", "authorAssociation": "NONE", "createdAt": "2017-01-30T18:32:36Z", "contents": "@JamieMason\nI suppose in this context using == or === doesn't matter.\nother than that, it looks legit.\nyou wanted to make the PR for this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JamieMason", "authorAssociation": "NONE", "createdAt": "2017-01-31T09:26:08Z", "contents": "I suppose in this context using == or === doesn't matter.\n\nYeah I'd normally use === but I notice the rest of that file is using ==.\n\nyou wanted to make the PR for this?\n\nI don't mind yeah, I'll try and fit it in today \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:17:49Z", "contents": "I'm not sure if we can change this behavior for any right now, since that has a potential to break existing suites. That said, I think for 3.0 (when we can break things :), we'll want to look at the provided asymmetric matchers to ensure we are providing the right options out of the box.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["feature request", "has Tracker story"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1256, "url": "https://github.com/jasmine/jasmine/issues/1256", "title": "Give test file in the result to enable to use the new sonar generic test import", "contents": "When reporting to sonar, we now need to specify in wich file the test has run - see this:\nhttps://docs.sonarqube.org/display/PLUG/Generic+Test+Coverage\nA plugin exists to report data from karma to jenkins, but it requires the \"describe\" to contains the exact path name, which is not really beautifull:\nhttps://github.com/tornaia/karma-sonarqube-unit-reporter\nWould it be possible to add the file path (relative to baseRoot of course) in the result:\nthis.specSuccess = this.specSkipped = this.specFailure = function (browser, result) {\nresult.file = ...\n}\nThanks in advance", "createdAt": "2017-01-16T15:26:47Z", "updatedAt": "2017-03-10T20:35:57Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jehon", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jehon", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "jehon", "authorAssociation": "NONE", "createdAt": "2017-01-16T15:37:42Z", "contents": "This has already been done in Mocha, if I read that correctly:\nmochajs/mocha#1222", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-10T20:35:50Z", "contents": "In order to get a feature like this to work in browsers as well as node.js, Jasmine would need to throw an Error and parse out the stacktrace when processing your suite in order to get the name of the file that called describe or it. Throwing exceptions for everything in your full suite could potentially be expensive and make loading your suite take significantly longer than it does now.\nLooking at that PR in mocha, it looks like it only really gets the filename when requireing a file (as in node.js) and won't get it at all when running in a browser.\nBecause of the Error stuff it might be necessary to make the file name information optional or configurable, but it would depend on how much (if any) time it added to parsing and running the suite. I would be happy to review a pull request that added the file info to the result object that gets sent to the reporters. The functionality should either be configurable, or have a discussion about how much time this adds to a large suite.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "CONFUSED"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1257, "url": "https://github.com/jasmine/jasmine/issues/1257", "title": "Maps comparison always passes", "contents": "This code passes successfully:\nconst a = new Map();\nconst b = new Map();\na.set('name', 10);\nb.set('id', 9);\n\nexpect(a).toEqual(b);\nURLSearchParams objects comparison also always passes because of using Map internally\nTested on Jasmine 2.4.1 and 2.5.2. Using Karma test runner (version 1.3.0), Chrome 55.0.2883.", "createdAt": "2017-01-18T06:41:45Z", "updatedAt": "2017-05-19T21:19:21Z", "closedAt": "2017-05-19T21:19:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "downace", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "downace", "company": "Vast Ltd."}, {"login": "derekdowling", "company": "Twitch"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mjeanroy", "company": null}, {"login": "rmehlinger", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "derekdowling", "authorAssociation": "NONE", "createdAt": "2017-02-10T00:18:22Z", "contents": "Hey guys! Us in the TypeScript community would love for this to get fixed. Maps are much more prevalent there and this is causing us a lot of pain due to silent failures!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-10T03:40:17Z", "contents": "We would be happy to review a pull request that compares maps correctly in all browsers that support them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mjeanroy", "authorAssociation": "NONE", "createdAt": "2017-02-22T09:33:02Z", "contents": "@slackersoft If maps are supported in toEqual matcher, it could be great to also support Set.\nI had the same problem, and until it is included in jasmine, you can solve this with a custom equality tester. Here is a simple example:\nbeforeEach(() => {\n  jasmine.addCustomEqualityTester((first, second) => {\n    if (supportMap() && isMap(first) && isMap(second)) {\n      if (first.size !== second.size) {\n        return false;\n     \u00a0}\n\n      let areEquals = true;\n      first.forEach((value, key) => {\n        if (!second.has(key) || !jasmine.matchersUtil.equals(value, second.get(key)) {\n          areEquals = false;\n        }\n      });\n\n      return equals;\n    }\n  });\n});\nIt's not perfect, and methods supportMap and isMap needs to be implemented but you got the main idea.\nThere's one downside: the map equality tester does not works if the map contains values that need to be tested against an other custom equality testers. I don't see an easy way to access all the equality testers when calling jasmine.matchersUtil.equals, but maybe I'm missing something.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T00:27:34Z", "contents": "I believe Set should be supported for equality in Jasmine from #1067. This functionality just hasn't been released yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rmehlinger", "authorAssociation": "NONE", "createdAt": "2017-04-29T07:55:21Z", "contents": "Because ES6 Maps and Sets preserve order, it would seem that a simple array comparison would be sufficient. As a workaround until such a thing can be included:\nexpect(Array.from(new Map([[1, 'a'], [2, 'b']]).toEqual([[1, 'a'], [2, 'b']])", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rmehlinger", "authorAssociation": "NONE", "createdAt": "2017-04-30T01:02:44Z", "contents": "Pull request implementing Map support: #1340", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1258, "url": "https://github.com/jasmine/jasmine/issues/1258", "title": "TypeError: null is not an object", "contents": "Below is the error log that I have received with running the gulp test\nbower_components/angular/angular.js:4631:53\n18-Jan-2017 16:45:09\tforEach@bower_components/angular/angular.js:322:24\n18-Jan-2017 16:45:09\tloadModules@bower_components/angular/angular.js:4591:12\n18-Jan-2017 16:45:09\tcreateInjector@bower_components/angular/angular.js:4513:30\n18-Jan-2017 16:45:09\tworkFn@bower_components/angular-mocks/angular-mocks.js:3060:60\n18-Jan-2017 16:45:09\t     TypeError: null is not an object (evaluating 'obj[methodName]') in node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 1991)\nWhen submitting an issue, please answer the following:\n\n\nWhat version are you using?  \"jasmine-core\": \"2.4.1\"\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?  node\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?  karma\n\n\nIf possible, include an example spec that demonstrates your issue.\nit 'should go() to `login` state', ->\n spyOn $state, 'go'\n\n $security.notAuthenticated 'bar',\n   foo: 'bar'\n\n expect $state.go\n   .toHaveBeenCalledWith 'login',\n     data: Base64.encode '{\"to\":\"bar\",\"toParams\":{\"foo\":\"bar\"}}'\n\n\n\nThanks for using Jasmine!", "createdAt": "2017-01-18T18:38:27Z", "updatedAt": "2017-02-15T23:56:01Z", "closedAt": "2017-02-15T23:56:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dinee4321", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dinee4321", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-15T23:50:02Z", "contents": "Based on the Jasmine code at that point, it looks like the objecting you are attempting to add a spy to is null. Probably $state for you. We have code to check for undefined but apparently not null for both params.\nI think Jasmine can provide a better message in this case, but it sounds like you'll need to look into how to get the right $state object from angular and/or angular-mocks to truly fix this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1260, "url": "https://github.com/jasmine/jasmine/issues/1260", "title": "toThrow don't work in Firefox", "contents": "I'm running test from browser (firefox) and toThrow don't work (it work in Chrome)\nI have code like this:\nit('should throw exception when calling from login', function() {\n    term.logout();\n    var strings = $.terminal.defaults.strings;\n    expect(function() { term.logout(); }).toThrow(new Error(sprintf(strings.notWhileLogin, 'logout')));\n    enter(term, '1');\n    enter(term, '1');\n    push_interpreter();\n    expect(function() { term.logout(); }).toThrow(new Error(sprintf(strings.notWhileLogin, 'logout')));\n});\nI get this Error message:\nError: You can't call `login' function while in login in http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js (line 4124)\n$.fn.terminal/<.login@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:4124:27\n$.fn.terminal/</<@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:5279:28\nready/<@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:5098:33\nmake_interpreter@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:3187:17\nready@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:5086:21\nwhen_ready@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:3921:17\n$.fn.terminal/<.push@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:5061:17\n$.fn.terminal/</<@http://localhost/projects/jcubic/terminal/repo/js/jquery.terminal-src.js:5279:28\npush_interpreter@http://localhost/projects/jcubic/terminal/repo/spec/terminalSpec.js:1986:21\ntests_on_ready/</</</<@http://localhost/projects/jcubic/terminal/repo/spec/terminalSpec.js:2026:21\nattemptSync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1510:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1498:9\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSpec.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:306:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nattemptAsync/next@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1517:32\ncomplete@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:333:9\nclearStack@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:506:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1505:7\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSpec.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:306:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nattemptAsync/next@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1517:32\ncomplete@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:333:9\nclearStack@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:506:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1505:7\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSpec.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:306:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nattemptAsync/next@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1517:32\ncomplete@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:333:9\nclearStack@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:506:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1505:7\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSpec.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:306:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSuite.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1694:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nattemptAsync/next@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1517:32\ncomplete@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1703:9\nclearStack@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:506:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1505:7\nattemptAsync/next@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1517:32\ncomplete@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:333:9\nclearStack@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:506:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1505:7\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSpec.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:306:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nQueueRunner.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1485:5\nEnv/queueRunnerFactory@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:518:7\nSuite.prototype.execute@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1694:5\nwrapChildAsAsync/<@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1708:31\nattemptAsync@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1520:9\nQueueRunner.prototype.run@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1496:16\nattemptAsync/next@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1517:32\ncomplete@http://localhost/projects/jcubic/terminal/repo/bower_components/jasmine/lib/jasmine-core/jasmine.js:1703:9\n\nI'm using jasmine ~2.5.2 from bower\nYou can see it online here  http://terminal.jcubic.pl/SpecRunner.html", "createdAt": "2017-01-21T17:48:36Z", "updatedAt": "2017-01-21T18:28:41Z", "closedAt": "2017-01-21T18:28:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jcubic", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jcubic", "company": "Astek Polska sp. z o. o."}], "comments_count": 1, "comments_data": [{"authorLogin": "jcubic", "authorAssociation": "NONE", "createdAt": "2017-01-21T18:28:41Z", "contents": "It seems that it throw exception from push_interpreter function.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1261, "url": "https://github.com/jasmine/jasmine/issues/1261", "title": "Firefox load spec two times", "contents": "I'm running jasmine from browser it work fine from Chromium but in FireFox it load my spec twice I have only one <script> tag in html file and if I remove it, it don't load my tests at all. To fix it I needed to add code that check for global variable if it set to true it don't load tests.\nIf can check it here http://terminal.jcubic.pl/SpecRunner.html look at firefox console (there are two requests for spec/terminalSpec.js", "createdAt": "2017-01-21T18:01:07Z", "updatedAt": "2017-01-24T23:47:09Z", "closedAt": "2017-01-24T23:44:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jcubic", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jcubic", "company": "Astek Polska sp. z o. o."}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-24T23:44:55Z", "contents": "Based on what I see in the console, it looks like you have some sort of AJAX request that is loading various things in multiple times. In Firefox, it's getting your spec file, but Chrome looks like it's getting the favicon multiple times.\nJasmine itself doesn't even really know about the browser so it won't be making any additional requests or writing <script> tags into the page, so it looks like it is probably something outside of Jasmine. Possibly in your specs, or the code under test, or even a dependency that is loaded.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-24T23:47:09Z", "contents": "You are also more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1262, "url": "https://github.com/jasmine/jasmine/issues/1262", "title": "undefined is not a constructor (evaluating 'this.documentResponsiveListener()') ", "contents": "I'm using a ConfirmDialog component from the PrimeNG library in my angular 2 app. The component works fine when testing it out in a browser, but for some reason, using the component makes Karma/Jasmine explode.\n Error: Error in ./ReturnFileParameterComponent class ReturnFileParameterComponent - inline template:2:4 caused by: undefined is not a constructor (evaluating 'this.documentResponsiveListener()') in C:/Users/wlaw/Desktop/ens_fits_ui/karma-shim.js (line 41475)\n        ngOnDestroy@C:/Users/wlaw/Desktop/ens_fits_ui/karma-shim.js:71991:45 <- webpack:///~/primeng/components/confirmdialog/confirmdialog.js:140:0\n        ngOnDestroy\n        destroyInternal\n        destroy@C:/Users/wlaw/Desktop/ens_fits_ui/karma-shim.js:41076:34 <- webpack:///~/@angular/core/bundles/core.umd.js:12361:0\n        ...\n\nIn the component.spec.ts file, I imported both the dialog service and module needed for the dialog component to work:\nimport {\n    ...\n    ConfirmDialogModule,\n    ConfirmationService\n} from 'primeng/primeng';\n\n\ndescribe('Return File Parameter Component Test', () => {\n\n    beforeEach(() => {\n        TestBed.configureTestingModule({\n            declarations: [ReturnFileParameterComponent, HtmlUserFriendlyTimePipe, Html24HourDatePipe, DayOfWeekPipe],\n            providers: [\n                ...\n                ConfirmationService,\n                ...\n            ],\n            imports: [\n                ...\n                ConfirmDialogModule\n            ]\n        });\n        TestBed.compileComponents();\n    });\n\n...\n\n    it('should call add on a new Return File Parameter and submit it to the service', inject(\n        [ReturnFileParameterComponent, AuthHelper],\n        (component: ReturnFileParameterComponent, authHelper: AuthHelper) => {\n            let fixture: ComponentFixture<ReturnFileParameterComponent> =\n                getTestBed().createComponent(ReturnFileParameterComponent);\n\n            fixture.componentInstance.ngOnInit()\n                .then(fixture.detectChanges)\n                .then(function () {\n                    let newParam = fixture.componentInstance.add();\n                    expect(fixture.componentInstance.selectedParam).toBe(newParam);\n                    expect(fixture.componentInstance.editParam).toBe(true);\n                });\n        })\n    );\n});\n\nBut almost every test fails.\nHere is the beginning portion of the template file:\n<div class=\"ui-grid-row\" id=\"return-parameter-table\">\n    <h5>Return File Parameters</h5>\n    <p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\n    <p-confirmDialog header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmDialog>\n...\n\nI'm using jasmine-core 2.2.5 with karma 1.4.0 and karma-jasmine 1.1.0. I've seen this issue before without using Karma that was a result of some dependency injection issues, but here I can't quite figure it out since it looks like all the correct dependencies are imported.\nI'm running the tests with PhantomJS, but I've also tried Firefox and Chrome to see if it was a browser issue, but the error persists.\nSo basically I have no idea why its failing the tests but I get absolutely no problems using it in a browser. Any help would be greatly appreciated.", "createdAt": "2017-01-23T16:00:18Z", "updatedAt": "2017-01-24T23:46:53Z", "closedAt": "2017-01-24T23:46:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wheelerlaw", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wheelerlaw", "company": "Red Hat"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-24T23:46:53Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1263, "url": "https://github.com/jasmine/jasmine/issues/1263", "title": "Test freezes when fixture.debugElement.query(By.css(\".something\")) is checked for null", "contents": "I have a test that checks if a DOM element has been removed by an ngIf. When I grab the DOM element using: fixture.debugElement.query(By.css(\".something\")) the result is either null or a DOM element.\nIf the result is null, then the following test works fine. But, if the test result contains an element, it doesn't simply fail the test, it freezes up the debug browser.\nThe test looks like this:\nvar result = fixture.debugElement.query(By.css(\"#something\"))\nexpect(result).toBe(null)  // same goes for .toBeFalsy(), .toEqual(null)\nThis is not a problem if you use document.getElementById(\"something\") to get the element. So the issue seems to be only if you try to check if a fixture element is null when it is not.", "createdAt": "2017-01-23T18:53:35Z", "updatedAt": "2018-02-04T08:31:50Z", "closedAt": "2017-01-24T23:06:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "egdraper", "authorAssociation": "NONE", "participants_count": 7, "participants_data": [{"login": "egdraper", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "SethGunnells", "company": null}, {"login": "kkajdd", "company": null}, {"login": "prashu2705", "company": null}, {"login": "sgravrock", "company": null}, {"login": "dwilches", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-24T23:06:33Z", "contents": "This sounds like it is probably an issue with Protractor (that's what it looks like you're using), and not Jasmine itself. Jasmine doesn't include any kind of fixture or DOM manipulation functionality, so I'm unsure what might be going on there. Also, if I remember correctly, Protractor also wraps the built-in expect that comes with Jasmine so that it will wait for promises to be resolved and make your synchronous looking code actually behave asynchronously.\nI'm going to close this, since it doesn't seem like it is a problem with Jasmine itself. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SethGunnells", "authorAssociation": "NONE", "createdAt": "2017-03-22T16:53:48Z", "contents": "I looked into this myself as I've just run in to the same problem. It also occurs when checking with toBeFalsy(). My exploration showed that the failure occurs when Jasmine attempts to pretty print the DebugElement from Angular.\nI don't know for sure, but I suspect that DebugElement might have circular references in it as this is something I've generally observed with Angular. Is it conceivable that, as Jasmine is attempting to print out, it is getting caught up in the circular reference?\nTo be specific, stepping over this line while debugging freezes up.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "SethGunnells", "authorAssociation": "NONE", "createdAt": "2017-03-23T17:49:22Z", "contents": "Angular will fix this with this upcoming PR: angular/angular#15074", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kkajdd", "authorAssociation": "NONE", "createdAt": "2017-11-29T15:29:40Z", "contents": "Hi SethGunnells,\nI migrated to angular 5, but still this issue exists", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "prashu2705", "authorAssociation": "NONE", "createdAt": "2018-01-11T02:18:34Z", "contents": "I'm using angular 5.0.0 and met with the same scenario to check whether an element exists or not in my test and used the below and it works fine.\nexpect(fixture.debugElement.query(By.css('.cssclass')) === null).toBeTruthy();", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-11T02:52:17Z", "contents": "This sounds like it could be a case of Jasmine exhausting memory when trying to pretty-print an object graph that's both deep and wide. We've done some recent work, particularly c0d0513, to prevent that. If anyone who has this issue is willing and able to run Jasmine from the master branch and let us know if the issue still reproduces, it would be helpful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dwilches", "authorAssociation": "NONE", "createdAt": "2018-02-04T08:31:50Z", "contents": "Posted a workaround that works for me in Angular 4.2.4 here: https://stackoverflow.com/questions/44301315/karma-error-no-captured-browser-open-http-localhost9876/48606192", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1264, "url": "https://github.com/jasmine/jasmine/issues/1264", "title": "Variation on allow reSpy for inheritance", "contents": "Our app uses SmartClient which provides a class inheritance system which uses the underlying Javascript inheritance system. The following example is SmartClient-based, but the problem applies more generally, too.\nLet's say you have a class isc.ListGrid and a sub-class isc.ListGridPlus.\nIf you spyOn(isc.ListGrid, 'create') it works. If you then try to spyOn(isc.ListGridPlus, 'create') it fails saying create has already been spied upon. This is because ListGridPlus does not provide its own implementation of create and hence spyOn sees the superclass' spy.\nIf you want to be able to differentiate between calls made to isc.ListGrid.create and isc.ListGridPlus.create you'd need to do something like:\nisc.ListGridPlus.create = jasmine.createSpy('ListGridPlus.create');\nHowever, I wanted to be able to use the idiomatic spyOn, so I made the following patch:\nOsirium@ca35330\nWith the patch if spyOn detects the method it's trying to spyOn is already a spy, instead of outright throwing, it tests to see whether the obj.hasOwnProperty(methodName). If it doesn't, then it creates a dummy function, such that the rest of spyOn can behave as expected.\nThe one caveat is that you couldn't call .callThrough because the dummy function would not do what you expected. This potentially could be worked around but I thought to keep it simple.\nIf this patch had associated tests and I raised a PR, would it be something you would consider merging? Or is there a better way of doing this?", "createdAt": "2017-01-24T12:58:07Z", "updatedAt": "2017-01-25T00:54:39Z", "closedAt": "2017-01-25T00:54:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "edsharp", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "edsharp", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-25T00:54:39Z", "contents": "It sounds like this might be a duplicate of #931, which was fixed in #953. Please take a look at those to find the setting to allow re-spying on existing spies. I don't think that we want special case logic for handling subclassing and spying, but let us know if more general respy-ability solves your problem.\nClosing this for now. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1265, "url": "https://github.com/jasmine/jasmine/issues/1265", "title": "Using --grep will call every defined beforeAll() in your suite/spec", "contents": "Hello!\nEssentially when users use the --grep option to delineate which tests run (which is a fantastic feature), it will run every beforeAll() in the file where matches are found, resulting in many superfluous beforeAll()s being triggered. This does not happen with beforeEach().\nI reported this issue within the Protractor project, but it was tagged as possibly as issue with Jasmine (and not Protractor).\nFor much more detail (including full code examples), please see the original issue: angular/protractor#3952", "createdAt": "2017-01-24T19:25:42Z", "updatedAt": "2018-03-22T00:33:09Z", "closedAt": "2017-01-24T23:00:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wburgess-datical", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "wburgess-datical", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Ukochka", "company": null}, {"login": "dsteinbach", "company": "Yahoo"}, {"login": "anushreetp", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-01-24T23:00:03Z", "contents": "It looks like this is a duplicate of #1175 which was fixed in #1225, but hasn't been released yet.\nWe're still looking at what is going to be in the 2.6 release of Jasmine, and I don't have an ETA on when that will occur.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wburgess-datical", "authorAssociation": "NONE", "createdAt": "2017-02-13T16:51:13Z", "contents": "Great news! Thanks for all your hard work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Ukochka", "authorAssociation": "NONE", "createdAt": "2017-05-19T07:52:11Z", "contents": "Hello,\nI have updated to Jasmine 2.6, but still BeforeAll methods are running for every suite if I am using --grep=#smoke. What am I doing wrong? Can you help me?\nThanks in advance.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-19T20:40:23Z", "contents": "@Ukochka the --grep flag isn't part of Jasmine itself, so I'm not sure how it is implemented and how it is calling into Jasmine to accomplish its task. It's also possible that the library you're using to run Jasmine isn't utilizing the newer version of Jasmine you have installed, and that's why you're still seeing this issue.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dsteinbach", "authorAssociation": "NONE", "createdAt": "2017-09-25T19:27:24Z", "contents": "@wburgess-datical @Ukochka Were you able to solve your issues? I am having the same issue except afterEach() is being called for all tests while beforeEach() is not called even if they dont pass the grep filter.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wburgess-datical", "authorAssociation": "NONE", "createdAt": "2017-09-26T13:45:07Z", "contents": "@dsteinbach I am stuck with <2.6 Jasmine due to the version of Protractor we're currently using, so I forked it and took a different approach. I split up my tests into a bunch of different files and organized them into directories so I can set up suites with wildcards; don't really need to --grep anymore.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "anushreetp", "authorAssociation": "NONE", "createdAt": "2018-03-19T11:00:14Z", "contents": "Is this issue resolved? I am working with jasmine 3.1.0 and still facing the same issue.\nbeforeAll and afterAll of pending specs are running.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-22T00:33:09Z", "contents": "This issue is resolved within Jasmine itself, but the library you're using to run Jasmine might not be using (or support) the newer versions of Jasmine that include the fix. Please ensure that your Protractor, Karma, or other library that you're using to execute your Jasmine specs is using at least Jasmine 2.6 or later.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1266, "url": "https://github.com/jasmine/jasmine/issues/1266", "title": "TypeError: jasmine.configureDefaultReporter is not a function", "contents": "When trying to configure the default reporter as described in the documentation. Then I get the following error.\nnpm test\n\n> trying-to-configure-jasmine-default-reporter@0.0.0 test /home/agirorn/tmp/trying-to-configure-jasmine-default-reporter\n> jasmine first.spec.js\n\n/home/agirorn/tmp/trying-to-configure-jasmine-default-reporter/first.spec.js:1\n(function (exports, require, module, __filename, __dirname) { jasmine.configureDefaultReporter({\n                                                                      ^\n\nTypeError: jasmine.configureDefaultReporter is not a function\n    at Object.<anonymous> (/home/agirorn/tmp/trying-to-configure-jasmine-default-reporter/first.spec.js:1:71)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at /home/agirorn/tmp/trying-to-configure-jasmine-default-reporter/node_modules/jasmine/lib/jasmine.js:87:5\n    at Array.forEach (native)\n    at Jasmine.loadSpecs (/home/agirorn/tmp/trying-to-configure-jasmine-default-reporter/node_modules/jasmine/lib/jasmine.js:86:18)\nnpm ERR! Test failed.  See above for more details.\nThis can be reproduced from this gist: https://gist.github.com/agirorn/2d58eb1c08cbd4837830c3e3cbfa9503\nI guess this is either a bug in the documentation of jasmine.", "createdAt": "2017-01-27T12:26:03Z", "updatedAt": "2017-04-11T17:19:30Z", "closedAt": "2017-04-11T17:19:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "agirorn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-15T23:39:14Z", "contents": "What is jasmine in the line where the error occurs?\nThe configureDefaultReporter option isn't intended to be called inside a spec file, since that's possibly too late, and you don't have any hooks to the jasmine object created by the executable. In normal use, I wouldn't expect you to need to configure the default reporter when just using the jasmine executable, it is really there so you can do some more configuration.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T17:19:30Z", "contents": "We haven't heard anything back on this issue, so I'm going to close it. If you're still having issues, we'd be happy to look into them further with a bit more information.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1267, "url": "https://github.com/jasmine/jasmine/issues/1267", "title": "Jasmine .spec.js files outside the spec directory", "contents": "Is it possible to have my .spec.js files outside of the spec directory?\nI.E.\n/src/thing.model.js\n/src/thing.model.spec.js\n\ninstead of\n/src/thing.model.js\n/spec/thing.model.spec.js\n```", "createdAt": "2017-01-30T22:42:04Z", "updatedAt": "2017-10-21T02:54:59Z", "closedAt": "2017-04-11T17:11:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sgen", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sgen", "company": null}, {"login": "piniu", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "piniu", "authorAssociation": "NONE", "createdAt": "2017-02-01T07:46:38Z", "contents": "of course.  provide jasmine the correct path and it will work. i have it in different location. you can also set\n\"spec_dir\": \"/tests/jasmine\" so\n\"spec_files\": [\"test1\", \"test2\"]", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T17:11:44Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1269, "url": "https://github.com/jasmine/jasmine/issues/1269", "title": "Jasmine does not catch error thrown from setImmediate in a Promise.", "contents": "When jasmine is run with the spec below it does not detect the failed test and it exits cleanly with an exit code of 0. This has resulted in falls positive test runs.\nI ran this on jasmine version 2.5.2 in node.js version 4.5.0 and 6.9.4.\nfunction doIt(callback) {\n  return Promise.resolve(true)\n    .then(callback)\n    .catch((error) => {\n      setImmediate(() => {\n        throw error;\n      });\n    });\n}\n\ndescribe('broken', () => {\n  it('is broken', (done) => {\n    doIt((value) => {\n      throw new Error('I am broken!');\n    }).then(done).catch(done.fail);\n  });\n});\nI get this output.\n\u279c  bug-in-jasmie ./node_modules/.bin/jasmine\nStarted\n.\n\n\n1 spec, 0 failures\nFinished in 0.005 seconds\n\n\u279c  bug-in-jasmie echo $?\n9\nI expected to see this.\n\u279c  bug-in-jasmie ./node_modules/.bin/jasmine\nStarted\nF\n\nFailures:\n1) broken is broken\n  Message:\n    Failed: I am broken!\n  Stack:\n    Error: I am broken!\n        at /home/agirorn/tmp/bug-in-jasmie/spec/broken.spec.js:14:13\n        at process._tickCallback (node.js:369:9)\n        at Function.Module.runMain (module.js:443:11)\n        at startup (node.js:139:18)\n        at node.js:974:3\n\n1 spec, 1 failure\nFinished in 0.007 seconds\n\n\u279c  bug-in-jasmie echo $?\n1", "createdAt": "2017-01-31T12:17:12Z", "updatedAt": "2017-02-16T00:24:34Z", "closedAt": "2017-02-16T00:24:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "agirorn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:24:29Z", "contents": "This looks like a duplicate of #529. This is something we're looking at fixing soon though.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1271, "url": "https://github.com/jasmine/jasmine/issues/1271", "title": "trigger jasmine from controller", "contents": "I'm trying to trigger jasmine tests from my controller using jasmine-reporter.\nthe issue is when it finish (btw it finish correctly) the node process exit.\nHow can i prevent jasmine.execute()  to take the node server down?\ni think this repository is more relevant then jasmine-reporters simply because i'm loading the reporter into jasmine - but maybe I'm wrong.\nvar Jasmine = require('jasmine'),\n    reporters = require('jasmine-reporters');\nrunQaTests: function (req, res, next) {\n        var jasmine = new Jasmine();\n        var junitReporter = new reporters.JUnitXmlReporter({\n            savePath: __dirname+'/../tests/jasmine',\n            consolidateAll: true\n        });\n\n        jasmine.loadConfigFile(\"./spec/support/jasmine.json\");\n        jasmine.addReporter(junitReporter);\n        jasmine.execute();\n        return res.json('trigger qa tests');\n    }", "createdAt": "2017-02-01T08:06:33Z", "updatedAt": "2017-03-10T22:25:39Z", "closedAt": "2017-03-10T22:25:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "piniu", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "piniu", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "piniu", "authorAssociation": "NONE", "createdAt": "2017-02-01T10:19:26Z", "contents": "OK after debugging found the way to do it. simply override onComplete\njasmine.onComplete(function (passed) {\n                if (passed) {\n                    console.log('All specs have passed');\n                }\n                else {\n                    console.log('At least one spec has failed');\n                }\n            });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-10T22:25:39Z", "contents": "This is the supported way to specify your own behavior when the suite completes.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1272, "url": "https://github.com/jasmine/jasmine/issues/1272", "title": "Wrong invocation of a callback", "contents": "What version are you using?\nI am using jasmine v2.5.3 and jasmine-core v2.5.2.\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nI am using babel-node.\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\nAs far as I know I'm running it standalone.\n\n\nIf possible, include an example spec that demonstrates your issue.\nSee the repository I created: https://github.com/marco-a/jasmine-bug.\n\n\n$ npm install\n$ npm test\nYou should see one test failing:\n\nBut I'm not even calling the said callback in my second test case!\nAlso strange: if you comment out some of the tests then it suddenly works again?!\nAFAIK the method under test does not have an internal state.\nOr am I maybe doing something wrong?", "createdAt": "2017-02-01T16:34:10Z", "updatedAt": "2017-02-16T19:14:02Z", "closedAt": "2017-02-16T19:14:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "marco-a", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "marco-a", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "marco-a", "authorAssociation": "NONE", "createdAt": "2017-02-01T18:57:18Z", "contents": "Okay I maybe got the error: Is it possible that calling done does not immediately exit the test case?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T19:14:02Z", "contents": "The done callback simply tells Jasmine that this spec is complete and it is safe to move on to the next spec. This means that if there is still async work going on after done is called, it will still get invoked at some point. We have explored a bit around trying to stop the outer execution once done is called, but haven't really found a good way to accomplish this.\nI'm going to close this, since it sounds like you're encountering what is the currently expected functionality. Thanks for using Jasmine!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "HEART"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1273, "url": "https://github.com/jasmine/jasmine/issues/1273", "title": "Running jasmine should fail if process.exit is called.", "contents": "When running this tests that call process.exit jasmine exits and the exit code is 0 indicating that the test run was successful. This can lead and has lead to false positive test runs.\nI would assume that jasmine would exit with an error of some sorts, for example like this.\n\u279c  jasmine-dies-in-the-end git:(master) \u2717 ./node_modules/.bin/jasmine kill-jasmine.spec.js\nStarted\nF\n\nFailures:\n1) process.kill() should not kill jasmine the test runner\n  Message:\n    Error: Jasmine was killed by calling (process.exit).\n  Stack:\n    Error: Jasmine was killed by calling (process.exit).\n        at process.exit (/home/agirorn/tmp/jasmine-dies-in-the-end/kill-jasmine.spec.js:6:37)\n        at doSomethingThatCallsProcessKillZero (/home/agirorn/tmp/jasmine-dies-in-the-end/kill-jasmine.spec.js:2:11)\n        at Object.<anonymous> (/home/agirorn/tmp/jasmine-dies-in-the-end/kill-jasmine.spec.js:8:20)\n\n1 spec, 1 failure\nFinished in 0.005 seconds\nAnd have a none 0 exit code.\nExample code to reproduce.\nfunction doSomethingThatCallsProcessKillZero() {\n  process.exit();\n}\n\ndescribe('kill jasmine', () => {\n  it('should not kill jasmine the test runner', () => {\n    const result = doSomethingThatCallsProcessKillZero();\n    expect(false).toBeTruthy();\n  });\n});\nResult from Running in node 4.5.0\n\u279c  jasmine-dies-in-the-end git:(master) \u2717 ./node_modules/.bin/jasmine kill-jasmine.spec.js\nStarted", "createdAt": "2017-02-02T16:14:48Z", "updatedAt": "2017-03-14T23:58:37Z", "closedAt": "2017-03-14T23:58:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "agirorn", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1274, "url": "https://github.com/jasmine/jasmine/issues/1274", "title": "How to pass parameters to beforeEach / afterEach?", "contents": "Is there a way to parameterize beforeEach / afterEach calls?\nIt is a common scenario for me to have multiple tests share same initialization code with some minor difference, e.g.:\nit('test default', () => {\n  this.myObj = createObj('default');\n  // perform some test on myObj\n});\nit('other test for default', () => {\n  this.myObj = createObj('default');\n  // perform some other test on myObj\n});\nit('test foo', () => {\n  this.myObj = createObj('foo');\n  // perform some test on myObj\n});\nIs there a way to extract common logic to beforeEach and express parameters in test declaration? Something like that can be achieved in at least one framework I'm aware of (Java+TestNG). Here it could be something like:\nbeforeEach((name = 'default') => {\n  this.myObj = createObj(name);\n});\nit('test default', () => {\n  // perform some test on myObj\n});\nit('other test for default', () => {\n  // perform some other test on myObj\n});\nit('test foo', 'foo', () => {\n  // perform some test on myObj\n});", "createdAt": "2017-02-07T09:43:43Z", "updatedAt": "2019-02-08T03:28:33Z", "closedAt": "2017-02-16T17:53:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tomkur", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "tomkur", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "codyherzog", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T17:53:22Z", "contents": "The function passed to beforeEach won't be passed any parameters from Jasmine when it is invoked, and we don't have any plans to add that ability. If you have test setup that is mostly the same, I would suggest making a function that you can call with your arguments, like it looks like you have with createObj.\nI'm going to close this since this isn't really a feature we're looking to have in Jasmine. Thanks for using Jasmine!", "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "tomkur", "authorAssociation": "NONE", "createdAt": "2017-02-17T07:16:01Z", "contents": "I see, thanks for answering.\nWhat I was trying to achieve is not to have to explicitly call initialization code everywhere just because there's this single test which is initialized differently.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "codyherzog", "authorAssociation": "NONE", "createdAt": "2019-02-08T03:24:17Z", "contents": "I've used something like this...\ndescribe('outer', () => {\n  function init (options) {\n    // Common init behavior here...\n    if (options.opt1) {\n      // Different behavior depending on options.\n    } else {\n      // Different behavior depending on options.\n    }\n  };\n  describe('inner 1', () => {\n    beforeEach(() => {\n      init({ opt1: true, opt2: false });\n    });\n    it('test 1', () => {\n    });\n    it('test 2', () => {\n    });\n  });\n  describe('inner 2', () => {\n    beforeEach(() => {\n      init({ opt1: false, opt2: true });\n    });\n    it('test 1', () => {\n    });\n    it('test 2', () => {\n    });\n  });\n});\nThe idea is to use a common init() function which has options to control its behavior. You can then have different nested describe blocks which call init() inside their beforeEach(), but using different options. I pulled this example based on something I'd done in Jest, but hopefully it's also applicable to Jasmine.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1276, "url": "https://github.com/jasmine/jasmine/issues/1276", "title": "i18n of Jasmine API", "contents": "We're writing Dutch descriptions in our specs, and using Dutch names in our code. This makes it feel it bit 'off' that the functions describe and it are in English. To work around this, we've added some aliases to our test config:\nvar beschrijf = describe;\nvar het = it;\n\nNow our specs read like a story in Dutch:\n// ...\n\nbeschrijf(\"Mijn Component\", () => {\n\n\thet(\"opent een modal\", () => {\n\t\tcomp.klikOpModalLink();\n\t\texpect(comp.isModalOpen()).toBe(true);\n\t});\n\n\thet(\"valideert de invoer\", () => {\n\t\tcomp.vulIn(\"\");\n\t\texpect(comp.getFoutmelding()).toBe(\"Verplicht\");\n\t});\n\n\t// etc..\n});\n\nNotice that we didn't translate expect or toBe: we would have loved to have done so, but it was simply too much work.\nThings got a little more complicated when we put our tests in TypeScript and had to declare our aliases:\ndeclare function beschrijf(description: string, specDefinitions: () => void): void;\ndeclare function het(expectation: string, assertion?: (done: DoneFn) => void, timeout?: number): void;\nI was wondering whether it might be an interesting feature for the Jasmine framework itself to support i18n of its API, so that this scenario is supported out of the box.", "createdAt": "2017-02-10T13:56:39Z", "updatedAt": "2017-02-13T18:05:51Z", "closedAt": "2017-02-13T18:05:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "RomkeVdMeulen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "RomkeVdMeulen", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-13T18:05:51Z", "contents": "The globally scoped functions should be reasonably easy to rename in a custom boot. Unfortunately, matchers, spy mechanics, and things will be a bit trickier.\nI don't think full i18n of the public interface for Jasmine is something we're looking for at this time. Hopefully the custom boot and aliasing everything in the jasmineInterface will get you close to where you want to be. Thanks for using Jasmine. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1277, "url": "https://github.com/jasmine/jasmine/issues/1277", "title": "Expect message ", "contents": "JASMINE 2.4.1\nexpect(someValue).toBe(otherValue);\nIt does not show the detail message.\nCurrently, it just says expected false to be true and it spits out bunch of file references like below:\nbuildExpectationResult@file:/// ..., expectationResultFactory@file:... , addExpectationResult@file:///C:/Users/, addExpectationResult@file://... in ..file (line 52)\nI think it should just show that test case failed message and why it failed. I am not sure why it is showing other 3 files names and its locaitons ?", "createdAt": "2017-02-10T17:31:33Z", "updatedAt": "2017-04-11T17:21:05Z", "closedAt": "2017-04-11T17:21:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rupeshtiwari", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rupeshtiwari", "company": "Strasz Assessment Systems"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T00:29:41Z", "contents": "What is \"The detail message\" that you are expecting to see? You say that it does report expected false to be true which sounds like the error message. The stacktrace lines are from Jasmine trying to tell you where in your code the expectation is that is failing. Right now this is a full stacktrace, but we would like to remove the Jasmine specific lines at some point (see #801).\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T17:21:05Z", "contents": "We haven't heard anything else about what the issue you are reporting really is, so I'm going to close it. If you're still having issues, we'd be happy to look into them with a bit more information.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1278, "url": "https://github.com/jasmine/jasmine/issues/1278", "title": ".toThrow() matcher with context argument", "contents": "Hey, I'd like to know if it is possible to add some context into .toThrow() matcher, just like the second argument in .toBe() or simmilar matcher:\nexpect(1).toBe(2, 'Reason-why-test-failed')\nI don't want to specify what kind of error am I getting, just that I got some error.\nThanks.", "createdAt": "2017-02-15T08:56:42Z", "updatedAt": "2017-04-11T17:31:39Z", "closedAt": "2017-04-11T17:31:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "iFarmGolems", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "iFarmGolems", "company": "Microstep-MIS"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-16T01:15:05Z", "contents": "The second argument showing up in the failure message for some of the matchers is unintentional functionality, based on how a default failure message is generated if the matcher doesn't specify one. We're not necessarily looking to break this for the matchers it currently works for, but nor are we looking to provide this functionality intentionally.\nI'm not totally clear on what information the matcher isn't providing to you that you want. You may also want to look at the toThrowError matcher which will check that the thrown thing is actually an Error.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T17:31:39Z", "contents": "We haven't heard anything else on this issue, so I'm going to close it. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1279, "url": "https://github.com/jasmine/jasmine/issues/1279", "title": "Some URLs from the documentation are invalid", "contents": "Example:\nhttps://jasmine.github.io/2.5/introduction#section-Spies:_and.callFake\nCharacters < and > are not valid and should be escaped.\nSee What characters are valid in a URL?", "createdAt": "2017-02-19T23:16:12Z", "updatedAt": "2019-02-22T01:24:56Z", "closedAt": "2019-02-22T01:24:56Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tkrotoff", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "tkrotoff", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-11T00:16:42Z", "contents": "The source for the Jasmine documentation has its own github repository. We do accept pull requests for our documentation, if you'd like to help out, or issues if you have things you'd like see addressed but aren't sure how.\nI would be happy to review a pull request there that either fixes the html/link generation that we're using to make the pages from the annotated source, or updates the headers to no longer include markdown that will generate bad html.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:24:56Z", "contents": "I think the newer version of the docs has largely fixed this issue and we haven't seen any further discussion here, so I'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1280, "url": "https://github.com/jasmine/jasmine/issues/1280", "title": "  Error: (SystemJS) Can't find variable: jasmineRequire", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine (Jasmine npm, karma, etc),\nconsider filing an issue with that library if appropriate\n\nWhen submitting an issue, please answer the following:\n\nWhat version are you using? 3.10.3\nWhat environment are you running Jasmine in (node, browser, etc)? node\nHow are you running Jasmine (standalone, npm, karma, etc)? karma\nIf possible, include an example spec that demonstrates your issue.\ndescribe('Work Karma Jasmine FrameWork', function () { it('true is true', function () { expect('Hello World for Karma and Jasmine FrameWork').toBe('Hello World for Karma and Jasmine FrameWork'); }); }); //# sourceMappingURL=work-karma-jasmine.spec.js.map\n\nWhen I try to run the tests with karma get\nPhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR\nError: (SystemJS) Can't find variable: jasmineRequire\neval code\neval@[native code]\nF@http://localhost:9878node_modules/systemjs/dist/system-polyfills.js:4:12217\nH@http://localhost:9878node_modules/systemjs/dist/system-polyfills.js:4:11846\nwhen@http://localhost:9878node_modules/systemjs/dist/system-polyfills.js:4:15520\nrun@http://localhost:9878node_modules/systemjs/dist/system-polyfills.js:4:14559\n_drain@http://localhost:9878node_modules/systemjs/dist/system-polyfills.js:4:3250\ndrain@http://localhost:9878node_modules/systemjs/dist/system-polyfills.js:4:1667\nEvaluating http://localhost:9878node_modules/karma-jasmine/lib/boot.js\nError loading http://localhost:9878node_modules/karma-jasmine/lib/boot.js\n\ni try include directorios of lib in file config karma => `// Karma configuration\n// Generated on Fri Feb 17 2017 14:46:21 GMT-0500 (COT)\nmodule.exports = function (config) {\nconfig.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine', 'systemjs'],\n\n    // list of files / patterns to load in the browser\n    files: [\n        'node_modules/jasmine-core/**/*.js',\n\n        'app/built/!**!/!*spec.js',\n         'app/built/!*spec.js',\n         'app/built/!**!/!*spec.map.js',\n         'app/built/!*spec.map.js'\n\n    ],\n\n\n    // list of files to exclude\n    exclude: [],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {},\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['PhantomJS', 'PhantomJS_custom'],\n\n    customLaunchers: {\n        'PhantomJS_custom': {\n            base: 'PhantomJS',\n            options: {\n                windowName: 'my-window',\n                settings: {\n                    webSecurityEnabled: false\n                },\n            },\n            flags: ['--load-images=true'],\n            debug: true\n        }\n    },\n\n    phantomjsLauncher: {\n        // Have phantomjs exit if a ResourceError is encountered (useful if karma exits without killing phantom)\n        exitOnResourceError: true\n    },\n    // plugin\n    plugins: ['karma-systemjs', 'karma-jasmine', 'karma-phantomjs-launcher'],\n\n    // systemjs config\n    systemjs: {\n        // Path to your SystemJS configuration file\n        configFile: 'systemjs.config.js',\n\n        // Patterns for files that you want Karma to make available, but not loaded until a module requests them. eg. Third-party libraries.\n        serveFiles: [\n            'public/**/*.js',\n            'node_modules/jasmine-core/lib/jasmine-core.js'\n\n\n        ],\n\n    },\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n})\n\n}\n`\nbut not working please help me.", "createdAt": "2017-02-20T19:38:14Z", "updatedAt": "2017-02-20T21:04:09Z", "closedAt": "2017-02-20T21:04:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ahelord", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ahelord", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-20T21:04:09Z", "contents": "This sounds like it is probably an issue with Karma and not Jasmine itself. That error is related to the page not being set up properly for Jasmine to work.\nI'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1281, "url": "https://github.com/jasmine/jasmine/issues/1281", "title": "Allow to manually destroy a spy", "contents": "Following the discussion on Google Groups: https://groups.google.com/forum/#!topic/jasmine-js/0RXvFo707EQ, I think my usecase is valid.\nJasmine does not allow to manually delete/destroy a spy and this is limiting.\nfunction signIn(done) {\n  ...\n  // Fails the 2x time with \"<spyOn> : bar has already been spied upon\"\n  const mySpy = spyOn(foo, 'bar').and.callThrough();\n  ...\n  expect(foo.bar).toHaveBeenCalledTimes(1);\n\n  // Jasmine missing feature:\n  //mySpy.destroy();\n}\n\nfunction signOut(done) {\n  ...\n}\n\nit('should be able to sign in/sign out multiple times', done => {\n  signIn(() => {\n    signOut(() => {\n      signIn(() => { // Fails with \"<spyOn> : bar has already been spied upon\"\n        done();\n      });\n    });\n  });\n});\nsignIn, signOut... are bricks (i.e simple functions - not Jasmine tests) that are reused to write complex Jasmine test scenarios like:\n\nsignIn, doSomething1, signOut\nsignIn, doSomething1, doSomething2, doSomething3, signOut\nsignIn, signOut, signIn, signOut, signIn, signOut\n\nRemarks:\n\nCurrently the second signIn call fails with <spyOn> : bar has already been spied upon\nI cannot make spyOn global otherwise error Spies must be created in a before function or a spec\nAdding beforeEach(()=> { spyOn(foo, 'bar').and.callThrough(); }) is not the solution because expect(foo.bar).toHaveBeenCalledTimes(1) will fail with the 2x signIn call (because .toHaveBeenCalledTimes(2))", "createdAt": "2017-02-24T09:54:47Z", "updatedAt": "2018-12-17T11:54:40Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "tkrotoff", "authorAssociation": "CONTRIBUTOR", "participants_count": 13, "participants_data": [{"login": "tkrotoff", "company": null}, {"login": "brandonros", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ljharb", "company": "@airbnb"}, {"login": "UziTech", "company": "UziTech"}, {"login": "ChrisBellew", "company": "@spookfishltd "}, {"login": "marcoturi", "company": "Topcon"}, {"login": "sc-lewis-notestine", "company": "Steelcase"}, {"login": "profiprog", "company": "ProfiProg"}, {"login": "OscarGodson", "company": "Director of Engineering at Acorns and Partner at Yorkshire Interactive"}, {"login": "jackson-sandland", "company": "Valassis Digital"}, {"login": "Humberd", "company": "@Acaisoft "}, {"login": "fider", "company": null}], "comments_count": 24, "comments_data": [{"authorLogin": "tkrotoff", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-02-28T00:22:06Z", "contents": "expect has spy.restore(), same for Sinon.JS. Jasmine is missing spy.restore(), this has been reported multiple times:\n\n#236 (Jun 6, 2012)\n#342 (Mar 16, 2013)\n#683 (Oct 6, 2014)\n#975 (Nov 17, 2015)\n\nHere you have the simplified use-case from above working with spy.restore(): mjackson/expect#196 (comment)\nTime to reconsider?", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "brandonros", "authorAssociation": "NONE", "createdAt": "2017-02-28T14:27:21Z", "contents": "Why doesn't this exist yet?\nUse case 1: in a more \"global\" beforeEach, you set up a spy. Then, in a very specific test, you need to override that spy with another spy. Overriding with andCallThrough does not help.", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T00:59:23Z", "contents": "@brandonros if you simply want to change the strategy for the spy to execute when called, you can always call and.callThrough again on it later without needing to remove the spy and recreate it.\n@tkrotoff if your primary concern with the global spy is call counts continuously increasing, you should also be able to call calls.reset() on your spy to clear out any calls that have already been tracked.\nThis still doesn't sound like an issue that requires actually removing the spy.", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_DOWN"]}, {"authorLogin": "ljharb", "authorAssociation": "NONE", "createdAt": "2017-03-15T05:25:03Z", "contents": "@slackersoft if things keep references to the original, or to the spy, such that actually removing the spy changes how === works, then absolutely that would require it. I'm not sure why there's resistance to something that allows truly cleaning up after oneself, as opposed to leaving garbage on spied-upon objects and just expecting other tests to guess or know that there's a spy there.", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T18:12:12Z", "contents": "@ljharb As mentioned in the other issues, Jasmine will clean up any spies that were created with spyOn at the end of the spec or suite where they were instantiated, so your code shouldn't need to do this for itself.\nIf you are assigning the output of createSpy to an object, Jasmine can't clean replace it because it doesn't know where that spy lives. Even an explicit unspy type of thing is not possible to implement for this as the only thing that knows what to put back is the code that did the assignment.\nIf you want to check for strict equality of a function that you're spying on for some tests:\n\nWhy is the identity important and not what the function does\n\nIf you just want the real thing to happen for a single spec you can change the strategy to callThrough for that spec.\n\n\nIf the function is already being removed and replaced an identity check would seem to be testing the Jasmine framework itself and not your code.\n\nWe haven't implemented this feature yet, because the use cases for unspy that I have seen have all been solvable with existing Jasmine functionality. Since every feature has an ongoing maintenance cost, if we can solve peoples problems with existing code, we prefer to do that as it let's us solve a greater breadth of problems.", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP"]}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-15T18:36:31Z", "contents": "We haven't implemented this feature yet, because the use cases for unspy that I have seen have all been solvable with existing Jasmine functionality.\n\nEverything jasmine can do can be solved with other functionality. (e.g. expect(x).toBeGreaterThan(y) can be easily solved with expect(x > y).toBe(true))\nThe point is that unspy is a more direct and understandable way to reset the original method then spy.calls.reset(); spy.and.callThrough(); the same way that toBeGreaterThan is more understandable than toBe", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T19:21:57Z", "contents": "Let me rephrase this then. The only use cases I've seen for when people want to unspy on something involves them immediately re-spyOn that same thing to change something. So the unspy version of calls.reset() or and.callThrough() is:\nunspy(thing, 'method');\nspyOn(thing, 'method').and.callThrough();\nThis is actually more complicated to use than the existing functionality, so it doesn't seem like a very good reason to add unspy.", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "ljharb", "authorAssociation": "NONE", "createdAt": "2017-03-15T19:48:21Z", "contents": "Unless those two lines live in different places, in which case separating them into two calls is much better than conflating two goals into the andCallThrough call.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-15T20:04:25Z", "contents": "My point is that this is obviously a wanted feature, even if it is just for semantics.\nMy pull request uses the feature already in place to clear the spies therefore I believe more time and effort is spent by the jasmine team to come up with reasons not to have this feature than would be spent maintaining it.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "ChrisBellew", "authorAssociation": "NONE", "createdAt": "2017-05-22T05:21:32Z", "contents": "I want to clarify the use case that some kind of \"remove spy\" function would give me.\nvar foo = { bar: () => {} };\n\ndescribe('one', () => {\n    beforeEach(() => {\n        spyOn(foo, 'bar').and.returnValue(1);\n    });\n    it('returns 1', () => {\n        expect(foo.bar()).toEqual(1);\n    })\n    describe('two', () => {\n        beforeEach(() => {\n            // Remove first spy here?\n            spyOn(foo, 'bar').and.returnValue(2);\n        });\n        it('returns 2', () => {\n            expect(foo.bar()).toEqual(2);\n        })\n    });\n})\n\nIs this better done another way? A nice removeSpy(foo, 'bar') would be pretty nice", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-23T20:50:31Z", "contents": "@ChrisBellew based on what you have in that example, you should be able to change the strategy for the inner beforeEach, something like this.:\nbeforeEach(() => {\n    foo.bar.and.returnValue(2);\n});", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "marcoturi", "authorAssociation": "NONE", "createdAt": "2017-06-28T15:42:39Z", "contents": "@slackersoft using your example i get TypeError: Cannot read property 'returnValue' of undefined. On Jasmine 2.6.4 in an angular 4 project.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T01:00:38Z", "contents": "That probably means that foo.bar isn't a spy at that point, if .and is returning undefined, possibly due to some other configuration. When I run the following spec, everything works fine:\nvar foo = { bar: () => {} };\n\ndescribe('one', () => {\n    beforeEach(() => {\n        spyOn(foo, 'bar').and.returnValue(1);\n    });\n    it('returns 1', () => {\n        expect(foo.bar()).toEqual(1);\n    })\n    describe('two', () => {\n        beforeEach(() => {\n            // Remove first spy here?\n            foo.bar.and.returnValue(2);\n        });\n        it('returns 2', () => {\n            expect(foo.bar()).toEqual(2);\n        })\n    });\n})", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sc-lewis-notestine", "authorAssociation": "NONE", "createdAt": "2017-08-28T20:32:12Z", "contents": "for posterity:\nI came across this page in a search for how to deal with something I want to both mock in a beforeEach block and use as a test outcome.\nI got around it by using toHaveBeenCalledWith in addition to the spyOn block, as follows:\ndescribe('when we expect $location to mean one thing before execution and another thing after', function() {\n\n\n      beforeEach(function() {\n        //mock out the first call to location search.\n        spyOn($location, 'search').and.returnValue({\n            uuid: 'test-current-node-uuid',\n            customerId: currentCustomer\n          });\n      });\n\n      it('should have the appropriate query string parameters set, after execution', function() { \n        objectUnderTest.foo();\n\n        //Verify that the second call came through with different info.\n        expect($location.search).toHaveBeenCalledWith({ \n          uuid: 'some-other-uuid', \n          customerId: 'some-other-id'\n        });\n      });\n    });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-29T00:48:16Z", "contents": "@sc-lewis-notestine I'm glad you found something that works for you. Note that you might want to check calls.mostRecent().args to make sure that it is the last call to $location.search() that has the arguments you need.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "profiprog", "authorAssociation": "NONE", "createdAt": "2017-09-14T18:02:55Z", "contents": "There is also possible to add support for Spy.restore() directly in test or in helper file:\nbeforeAll(function () {\n\tvar oringSpyOn = spyOn;\n\tspyOn = (obj, fnName) => {\n\t\tvar originalValue = obj[fnName];\n\t\tvar spy = oringSpyOn(obj, fnName);\n\t\tspy.restore = function () {\n\t\t\tobj[fnName] = originalValue;\n\t\t};\n\t\treturn spy;\n\t};\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "OscarGodson", "authorAssociation": "NONE", "createdAt": "2017-09-24T05:49:41Z", "contents": "If there's a way to do this without resetting the spy I'm happy to do it another way but I'm not sure how. I have some components that will cache state upon initialization. Here's a simplified example:\nfunction Parent () {\n  var cachedState = MyApp.getState();\n  return Child({\n    isVisible: [cachedState.isPaidAccount]\n  });\n});\nThen I have a test like:\ndescribe('Parent', function () {\n    beforeEach(function () {\n\t\tspyOn(window, 'Child');\n\t\tthis.args = window.Child.calls.argsFor(0)[0];\n    });\n\n  // ...\n\t\tit('sets visibility to true if isPaidAccount is true', function () {\n\t\t\t// ???\n\t\t});\nThat it is where im not sure what to do. I can go back and move that original spy to every test, I can slow down the app some by looking up state for every operation or I wish I could simply do window.Child.removeSpy() or something so that I can re-call it with a new stubbed state. I'm stubbing the state easy enough with a spyOn(MyApp, 'getState').and.returnValue but the problem is that the state was already called.\nSuggestions for a work around?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T05:10:37Z", "contents": "@OscarGodson Maybe something got lost in the simplification process, but from what you've got there it sounds like you really just want a unit test of the Child object without necessarily creating it via Parent, here's why:\nIf you spyOn Child (even callThrough so the real implementation happens), you still run into the problem that the Parent call has already cached off its state. If what you want to do right now in that it is change the spy behavior of the window.Child function, you can do that with window.Child.and.returnValue() or whichever behavior your want. Unfortunately, this doesn't change the fact that MyApp.getState() has already been called and its value saved.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jackson-sandland", "authorAssociation": "NONE", "createdAt": "2018-04-19T22:00:30Z", "contents": "Guys, what is the deal? The community has been asking about a spy.Restore() method for like 5 years. I'd be open to writing this for you if there are sufficient resources to quickly put it together. If not, would love to see this method added.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-04-19T23:47:51Z", "contents": "This already had a PR #1289\n@slackersoft doesn't seem to want people to restore a spy", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-02T00:57:02Z", "contents": "The older github issues asking to restore a spy all centered around wanting to clean up spies installed with spyOn at the end of the spec. Since Jasmine handles this for you, this doesn't seem like a compelling reason for Jasmine to add explicit restore. Other spy/expectation libraries, like expect and sinon, need this feature since they're not integrated with the test execution itself, so the user needs to tell the library when it is safe to clean up spies. If you're migrating from another spy library to Jasmine's built in spies, it should be safe to just delete these restore calls.\nAnother issue centers around the need to change the strategy for the spy, possibly resetting the call counts as well. Using the existing functionality already built into Jasmine seems like it more accurately expresses the intent.\nspyOn(foo, 'bar').and.callThrough();\nfoo.bar.calls.reset();\nfoo.bar.and.returnValue(3);\nor with jasmine.getEnv().allowRespy(true);\nspyOn(foo, 'bar').and.callThrough();\nspyOn(foo, 'bar').and.returnValue(3);\nThe original post for this issue seems like it could be solved similarly with similar clarity arguments, leaving signIn looking something like:\nfunction signIn(done) {\n  foo.bar.calls.reset();\n\n  doStuff();\n\n  expect(foo.bar).toHaveBeenCalledTimes(1);\n}\n\nbeforeEach(() => {\n  spyOn(foo, 'bar').and.callThrough();\n});\nIn this case I might also question the assumption that it is valuable to check the call to foo.bar() in every test that needs to execute in a logged in state, as this can cause heavy coupling to the actual implementation of logging a user in in tests that don't need it.\nLooking back at this conversation, it appears I might not have done as well as I had hoped at giving good examples or explaining why I'm asking these questions and suggesting current functionality to solve user's issues. The intent here was never to say that Jasmine will never have this functionality, but that we need to better understand the use case for it to make sure we come up with the right solution. During this discussion of use cases and solutions is not a good time to send in a pull request for the feature, which is why I referred back to this issue and discussion from @UziTech's pull request and left it open pending this discussion.\nI'm happy to revisit this feature, and pull request, with the new understanding about the differences between people aesthetic choices in their test suite and desire for compatibility with other mocking frameworks.\nHopefully this clears up some of the confusion. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "OscarGodson", "authorAssociation": "NONE", "createdAt": "2018-06-06T06:22:57Z", "contents": "heh... i just ran into this again so i just saw the response Nov \ud83d\ude02\n@slackersoft regarding it being cached, it wouldnt happen because I'd be doing like this (this code just has different function names by copy pasta'd\n\t\t\tspyOn(Devices, 'is').and.returnValue(false);\n\t\t\tthis.bt = new BaseToolbar();\n\t\t\texpect(this.locationButton.visibility).toEqual([false]);\n\n\t\t\tspyOn(Devices, 'is').and.returnValue(true);\n\t\t\tthis.bt = new BaseToolbar();\n\t\t\texpect(this.locationButton.visibility).toEqual([true]);\n\nfuture instances of this.bt will have a cached visibility but since im making new instances it will be cached with the stubbed data.\nI ended up fixing it based on your answer. In case anyone else runs into this that code above changed to this:\n\t\t\tspyOn(Devices, 'is').and.returnValue(false);\n\t\t\tthis.bt = new BaseToolbar();\n\t\t\texpect(this.locationButton.visibility).toEqual([false]);\n\n\t\t\tDevices.is.and.returnValue(true);\n\t\t\tthis.bt = new BaseToolbar();\n\t\t\texpect(this.locationButton.visibility).toEqual([true]);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Humberd", "authorAssociation": "NONE", "createdAt": "2018-12-07T10:43:05Z", "contents": "It should be implemented. I don't see a reason not to have this feature. Jest already has it.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "fider", "authorAssociation": "NONE", "createdAt": "2018-12-17T11:54:40Z", "contents": "It is implemented but usage is defferent:\nspyOn(a, \"method\").and.callFake( behaviorA );\n\n// Now you want behavior B instead of A\n// (type casting <> is for typescript)\n(<jasmine.Spy>a).method.and.callFake( behaviorB );\n\n// And now you want to restore original behavior:\n(<jasmine.Spy>a).method.and.stub();\n\n// Behavior B again\n(<jasmine.Spy>a).method.and.callFake( behaviorB );\nHowever I propose to add Spy.reset / remove method so it will be possible to use object without \"overhead\" (for \"some\" reasons)", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 11, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1282, "url": "https://github.com/jasmine/jasmine/issues/1282", "title": "jasmine.clock and setTimeout inside nested promises", "contents": "How to use jasmine.clock setTimeout mock inside nested promises? (result: Error: jasmine.DEFAULT_TIMEOUT_INTERVAL)\nOrder is crucial here.\nI need to test nested promises that must have setTimeout inside - order matters. I know that then is kind of process.nextTick (or setImmediate) and it goes beyond current event loop (which is the core problem here) but this knowledge does not solve the problem :)\nI know that I can put jasmine.clock().tick() inside nested promise but this is pointless because I'm testing proper order in some events related lib.\nHow to test something like this in jasmine? any ideas?\nIt looks like jamine.clock().tick(...) have a sync nature but promises are async. So we are hitting a wall here?\nit(\"should run setTimeout mock inside chained promises\",(done)=>{\n\n      jasmine.clock().install();\n\n      let realOrder = [];\n\n      let ok1=new Promise((resolve,reject)=>{\n          resolve(\"ok\");\n      }).then((ok)=>{\n        let p=new Promise((resolve,reject)=>{\n          setTimeout(()=>{ // not fired up due to 'then' method\n            realOrder.push(\"1\");\n            resolve(\"1\");\n          },100);\n        });\n        //jasmine.clock().tick(101); //<- order is crucial here so I can't do that\n        return p;\n      });\n\n      let ok2=new Promise((resolve,reject)=>{\n          resolve(\"ok\");\n      }).then((ok)=>{\n        let p=new Promise((resolve,reject)=>{\n          setTimeout(()=>{ // not fired up due to 'then' method\n            realOrder.push(\"2\");\n            resolve(\"2\");\n          },50);\n        });\n        //jasmine.clock().tick(51); //<- order is crucial here so I can't do that\n        return p;\n      });\n\n      jasmine.clock().tick(151);// we must go outside nested promise - we dont need to run tick inplace because order will change\n      Promise.all([ok1,ok2]).then((results)=>{\n        expect(results).toEqual([\"1\",\"2\"]);\n        expect(realOrder).toEqual([\"2\",\"1\"]);\n        done();\n      });\n  });", "createdAt": "2017-02-24T19:44:56Z", "updatedAt": "2017-03-16T17:13:44Z", "closedAt": "2017-02-24T21:34:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "camel-chased", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "camel-chased", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-02-24T21:34:32Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "camel-chased", "authorAssociation": "NONE", "createdAt": "2017-02-24T22:30:52Z", "contents": "This actually is a bug / feature.\nsetTimeout and jasmine.clock().tick() doesn't work inside nested promises.\nFor those who came along with same problem here is the custom solution:\nhttp://stackoverflow.com/questions/42446795/how-to-use-jasmine-clock-settimeout-in-nested-promises-when-order-matters-ja", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-16T17:13:43Z", "contents": "The intention behind the Jasmine clock is to make actions that are normally async (possibly with a long wait) to be run in a synchronous manner. The way it does this is by mocking out the normally async methods (setTimeout and setInterval) so that callbacks passed to them can be triggered synchronously when your test wants them to. This means that if you do something async within an async callback, you may need to tick again to get that secondary async thing to happen. Within a given timeout length, the clock will call the functions in the order that they are added, so order should be preserved.\nI hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1284, "url": "https://github.com/jasmine/jasmine/issues/1284", "title": "Start and stop the test manually in browser", "contents": "Expected behavior:\n\nStart test manually: When I open the test runner web page in a browser, it shows all the suites and cases. Actually now it executes all of cases immediately on the page load.\nStop test manually: There is a \"stop\" button when I click it stop the test immediately. Actually now I cannot stop test unless I close the browser.\n\nEnvironment\n\n\nWhat version are you using?\n2.5.2\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nBrowser.\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\nStandalone", "createdAt": "2017-03-02T02:40:38Z", "updatedAt": "2017-03-14T22:02:51Z", "closedAt": "2017-03-14T22:02:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "skyshore2001", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "skyshore2001", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "skyshore2001", "authorAssociation": "NONE", "createdAt": "2017-03-03T05:04:07Z", "contents": "First I appreciate your great work and I like jasmine very much.\nI'd like you to understand that my test is slow and one full run may cost several minutes or even hours.  So I have some special requirements described in several issues. Now I summarize them here.\nI use jasmine to test the back-end web service interface in browser, as it's easy to view the network log and debug the steps in chrome utilizing chrome's the developer tools.\nEach case contains at least one synchronized ajax call to the back-end which may cost 50ms-500ms. The whole test may contains tens of suites and hundreds of cases.\nI expect such features:\nI can see the test progress.\nAs I use sync ajax call in the test case,  the browser loses response and I cannot see which case has completed. (see #1285)\nI don't want to write the cases in async mode as it makes code complex.\nI can start and stop the test manually.\n(described in this post)\nWhen I open the test runner page, sometimes I just want to choose a case to debug rather than run all cases with waiting several minutes.\nCritical case support\nDeveloper is able to mark some case as \"critical case\".  If some critical case fail, skip the other cases in the same suite. And if some critical suite fails, skip all of the others tests. (see #414 and #577)\nUsually the first case in a suite is auto marked as \"critical case\". If such case fails, the other cases (\"it\" blocks) are skipped to execute and marked as \"pending\". If the first suite fails, skip all the rest cases.\nI expect a flexible mechanism that the core lib expose some more interfaces that allows developers to program the logic.\nEasy debugging\nHighlight the spec file in stack trace for failed tests (see #801)\n\nfilter out the stack lines of the jasmine lib.\nBetter the filter rule can be configured.\n(nice to have) click the line, and it locates the file and line in the source code panel in the developer tool of chrome browser.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-14T22:02:51Z", "contents": "A I noted in #1285, Jasmine already displays progress information as the suite is executed. So this part is a duplicate.\nIf you want to only run a subset of your suite, you should look into focused specs to solve this. Being able to start and stop a suite in the middle of a run would be a huge undertaking without much upside so this isn't something we're looking to have in Jasmine.\nOther people have been asking for the other items you've mentioned (you've even link to the issues), so those seem like duplicates as well.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1285, "url": "https://github.com/jasmine/jasmine/issues/1285", "title": "Cannot show test progress in the browser", "contents": "Problem\nI use jasmine 2.5.2 to test my back-end web APIs via ajax sync call in each \"it\" block.\nWhen the test starts, the browser enters no response status with blank screen.\nAs the tests last long time, I want the progress feedback (result like \".\"/\"X\"/\"*\" shows after each case completes) and a manual stop-test feature (see #1284)\nI don't want to write the cases in async mode as it makes code complex.\nEnvironment\n\n\nWhat version are you using?\n2.5.2\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nBrowser.\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\nStandalone", "createdAt": "2017-03-02T02:53:59Z", "updatedAt": "2017-03-14T21:34:14Z", "closedAt": "2017-03-14T21:34:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "skyshore2001", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "skyshore2001", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-14T21:34:14Z", "contents": "Jasmine should print out dots, x's, and *'s as each spec completes. However, this is best effort rendering, due to javascript's threading model (or lack thereof). This means that if your specs or code under test are still working and not letting the HTMLReporter get its contents redrawn, you won't be able to see the updates.\nI would either look into making your suite use async XHR, to get some of those benefits, or test your backend API without using a browser (framework may differ based on the backend language).\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1286, "url": "https://github.com/jasmine/jasmine/issues/1286", "title": "Spec is called before async beforeAll calls done", "contents": "Hello,\ni am very new to Jasmine and all this stuff, so it is my first angular app at all. My application is an angular 2 app.\nEverything is installed via npm.\nTests running in browser.\nI use Karma as test runner.\nVersions:\nJasmine: 2.4.1\nKarma: 1.5.0\nChrome: 56.0.2924\nOS:  Mac OS X 10.12.3\nThe Problem:\nI created a suite, as follows:\ndescribe('Service with asyncCall', function() {\n        beforeAll(function(done) {\n            new Service().asyncCall().then(function(result) {\n                        console.log(result);\n                        done();\n                    }\n                );\n            }\n        );\n\n        it(\n            'should be true',\n            function() {\n                console.log('test');\n                expect(true).toEqual(true);\n            }\n        );\n}\n\nThe asyncCall is as follows:\nasyncCall() {\n    var out = new Promise(\n       function (resolve) {\n            setTimeout(\n                function() {\n                    resolve('success');\n                },\n                2000\n            );\n        }\n    );\n\n    return out;\n}\n\nI expect the output to be something like\n...\nsuccess\ntest\n...\n\nBut the actual output in the Browser console is\ntest\nsuccess\n\nAlso the test is failing with the following message(s)\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n\nPlease can anybody help me out, or pointing in the right direction.\nAnd sorry for my english is not so well...\nThank you.", "createdAt": "2017-03-03T10:11:06Z", "updatedAt": "2017-03-03T19:25:09Z", "closedAt": "2017-03-03T19:25:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "neurospective", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "neurospective", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "neurospective", "authorAssociation": "NONE", "createdAt": "2017-03-03T19:25:00Z", "contents": "Ok i think i found the problem. To start with angular 2 i cloned the QuickStart Seed. As a newbie i have no idea what the most files inside are for, but now i found jasmine.DEFAULT_TIMEOUT_INTERVAL = 1000; in the karma-test-shim.js Changing this value in my code seems to have no effect, but changing the value here solved my problem. YEAY! :-)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1287, "url": "https://github.com/jasmine/jasmine/issues/1287", "title": "Message set with \"fail()\" can leak into following \"it()\"", "contents": "A message set with \"fail()\" can leak into following \"it()\" if an async method is mistakenly called by user (e.g., if one is not aware some 3rd party callback is async).\nHappens with \"fail()\" messages only, not with \"expect()\" messages.\nhttps://plnkr.co/edit/qfZCXMBM8IiA2AsvQwGu\nThe spec is also included below.\nWhen submitting an issue, please answer the following:\n\n\nWhat version are you using?\n2.5.2\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)? standalone\nhttps://plnkr.co/edit/qfZCXMBM8IiA2AsvQwGu demonstrates it in browser environment.\nPlunkr shows same results for FireFox/Chrome/Safari.\ndescribe('Jasmine message leak demo.', () => {\n\n   // Oops - I am doing async but forgot \"done\".  My bad.\n   it('This will unintentionally pass, and leak its fail.', () => {\n       setTimeout(() => {\n           fail('I am in your test!');\n       }, 1000);\n       expect(true);\n   });\n\n   // Should error on\n   //     'Async callback was not invoked within timeout\n   //      specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.'\n   // Instead, it reports the fail message\n   //     'I am in your test!'\n   it('This will fail, but with wrong message.', (done) => {\n       let rememberToCallDone = false;\n       if (rememberToCallDone) {\n           done();\n       }\n   });\n\n   // Same code as previous \"it()\", but now this one behaves correctly:\n   // It errors on\n   //     'Async callback was not invoked within timeout\n   //      specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.'\n   it('This will fail, but with correct message.', (done) => {\n       let rememberToCallDone = false;\n       if (rememberToCallDone) {\n           done();\n       }\n   });\n\n   // Nothing leaks into here.  Behaves as expected.\n   it('This will pass.', () => {\n       expect(true);\n   });\n\n   // Nothing leaks into here.  Behaves as expected.\n   it('This will pass.', (done) => {\n       expect(true);\n       done();\n   });\n });\n\n\n\nThank you for this great library.", "createdAt": "2017-03-03T16:24:40Z", "updatedAt": "2017-03-17T20:41:53Z", "closedAt": "2017-03-15T18:27:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johncvrs", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "johncvrs", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T18:27:41Z", "contents": "Unfortunately, there isn't a whole lot that Jasmine can do to stop this. To my knowledge, there isn't a way to detect that some code has called setTimeout (or setInterval, setImmediate, made a promise, etc.) or otherwise caused execution to become async without mocking out all of the possibilities. Expectations inside your setTimeout would also get associated with the next spec because as soon as the function for the first it returns, Jasmine will move on to the next.\nI'm going to close this, since I don't think this is something Jasmine can really solve. Sorry. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johncvrs", "authorAssociation": "NONE", "createdAt": "2017-03-17T20:41:53Z", "contents": "Ah, I had seen Jasmine installing its own setTimeout() before.  Now I see that it only does that within the context of Jasmine.clock().install(), not for all specs.   Within that context, it also seems to discard any stragglers in the timer queue when uninstall() is called, which is what I need.  Problem solved.  Thanks for the support.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1288, "url": "https://github.com/jasmine/jasmine/issues/1288", "title": "Jasmine hangs for a few min when trying to assert an object with circular reference", "contents": "Current behavior\nThere's a data structure DebugElement (wrapper around a native element with additional info useful for debugging). When you test to see if DebugElement doesn't exists expect(de).toBeFalsy() browser hangs for a few mins (as far as I understand Jasmine will keep cycling with a circular reference as it tries to print out the DebugElement to compare it to false).\nExpected behavior\nShould take a reasonable amount of time to execute the test.\nCan it be addressed somehow inside Jasmine or should I change DebugElement impl?\nMinimal reproduction of the problem with instructions\nhttps://plnkr.co/edit/GGECfSqptOXadysFDUh6?p=preview", "createdAt": "2017-03-03T20:07:35Z", "updatedAt": "2017-03-10T22:35:03Z", "closedAt": "2017-03-10T22:35:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DzmitryShylovich", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DzmitryShylovich", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-10T22:20:06Z", "contents": "It looks like the matcher is executing fine, but the PrettyPrinter is taking a while to print out the object. The PrettyPrinter should skip over circular object graphs, and print out a message. You should also be able to set your jasmine.MAX_PRETTY_PRINT_DEPTH to something lower than the default of 40 since it looks like that object is quite wide but not necessarily very deep.\nThe Jasmine PrettyPrinter will also look for a custom toString (or jasmineToString if you want it for specs only) that will pre-empt any recursing.\nIf those aren't sufficient, you'll probably need to change something else about the DebugElement implementation to make it more amenable to printing in Jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DzmitryShylovich", "authorAssociation": "NONE", "createdAt": "2017-03-10T22:35:03Z", "contents": "jasmineToString if you want it for specs only\n\n\ud83d\udc4d Thank you very much!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1290, "url": "https://github.com/jasmine/jasmine/issues/1290", "title": "How to load jasmine into browser with installed by npm?", "contents": "I just want to load jasmine into browser with installed by npm, no using bundlers like webpack or browserify. I downloaded jasmine from npm, but it fails run from browser with:\nUncaught ReferenceError: require is not defined\n    at jasmine.js:1\nLooks like jasmine installed via npm is just working with node.js, not for browser :(\nI hate download javascript library from website and put them inside of project, I prefer download module from npm directly, so I can easily install it just run 'npm install', and also I can easily update with 'npm update'.\nIf I use bundler, it will resolves this problem, but I want to write testing code directly, without bundling. So, is there a way to using jasmine from npm to browser directly? Also do you have a plan to support UMD? Thanks!", "createdAt": "2017-03-07T06:28:27Z", "updatedAt": "2017-03-09T20:21:39Z", "closedAt": "2017-03-09T20:21:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rico345100", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rico345100", "company": "Terra"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-07T14:55:09Z", "contents": "The npm package called \"jasmine\" includes the wrapping context to run the tests in node itself. If you just want the underlying library check out the \"jasmine-core\" package. The object returned by requireing that should include information on the exact locations of the library code you need to load.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rico345100", "authorAssociation": "NONE", "createdAt": "2017-03-08T04:31:04Z", "contents": "So, you mean load 'jasmine-core' from browser instead? Got it, thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1291, "url": "https://github.com/jasmine/jasmine/issues/1291", "title": "toHaveBeenCalledWith() crashes test environment when matching large objects", "contents": "Problem:\ntoHaveBeenCalledWith() matcher with large objects\nOutcome:\ncrashes the entire environment (PhantomJS) or runs recursively (Chrome).\nWorkaround\ncreate a custom equality tester (jasmine.addCustomEqualityTester) before \"toHaveBeenCalledWith()\" is called. This leads to the EqualityTester failing rather than the environment crashing :)\nSetup:\n\nAngular2\nJasmine 2.5.2\n\nExample:\nSome sort of injectable service\n@Injectable()\nclass EventService {\n    broadcast(name: string, ...args: any[]) {\n\t\t//do something\n\t}\n}\n\nA big/complex object to match like an Angular component\nclass Angular2Component {\n\n\tsomeFunction() {\n\t\tinjectedEventService.broadcast(\"myEventName\", this);\t//this being the component itself\n\t}\n\n}\n\nNow the Test\ndescribe(() => {\n\n    it(\"myTest\", inject([EventService], (eventService: EventService) => {\n\t\n\t\tspyOn(eventService, \"broadcast\");\n\t\t//createComponent\n\t\tcomponent.someFunction();\n\t\t\n\t\texpect(eventService.broadcast).toHaveBeenCalled(); // true\n\n\t\t// When the second argument isn't passed, the equlity matcher crashes the \n                // environment\n\t\texpect(eventService.broadcast).toHaveBeenCalledWith(\"myEventName\")\n\t\n                // Also crashes the environment when the argument amount is correct but one value is\n                // not correct\n                expect(eventService.broadcast).toHaveBeenCalledWith(\"someOtherEventName\", jasmine.any(Angular2Component));\n\n\t}));\n\n})", "createdAt": "2017-03-10T16:00:06Z", "updatedAt": "2017-11-24T07:57:56Z", "closedAt": "2017-06-14T20:36:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "smasala", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "smasala", "company": "TUI InfoTec Gmbh"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "avoerman", "company": null}, {"login": "nburwell", "company": null}, {"login": "janpaul123", "company": "@cruise-automation"}], "comments_count": 15, "comments_data": [{"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-03-10T16:11:30Z", "contents": "Custom equality tester workaround\njasmine.addCustomEqualityTester((first, second) => {\n    let test1: boolean = first[0] === second[0]; //test name\n    let test2: boolean = first[1].constructor.toString() === second[1].expectedObject.toString();\n    return test1 && test2;\n});\nexpect(eventService.broadcast).toHaveBeenCalledWith(\"myEventName\", jasmine.any(Angular2Component));", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-10T21:48:41Z", "contents": "Jasmine equality comparison (which is used for the toHaveBeenCalledWith matcher that comes with Jasmine) should handle circular objects correctly, and passing in something with jasmine.any should short-circuit most of the equality stuff anyways.\nI notice in your initial comment though, that you are calling hasBeenCalledWith and not toHaveBeenCalledWith as you are in your workaround. hasBeenCalledWith is not part of Jasmine and may not correctly use Jasmine's equality logic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-03-13T08:33:57Z", "contents": "@slackersoft - Ah, typo! I've tested the example again and narrowed the error down further. The crash with big objects only happens when the expect fails (updated initial example).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T17:29:39Z", "contents": "If the error only occurs when the matcher fails, it is probably that the PrettyPrinter is crashing while trying to print out the object. The PrettyPrinter should skip over circular object graphs, and print out a message. You should also be able to set your jasmine.MAX_PRETTY_PRINT_DEPTH to something lower than the default of 40 since it looks like that object is quite wide but not necessarily very deep.\nThe Jasmine PrettyPrinter will also look for a custom toString (or jasmineToString if you want it for specs only) that will pre-empt any recursing.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-03-17T12:51:17Z", "contents": "Thanks @slackersoft for the tips - lowering jasmine.MAX_PRETTY_PRINT_DEPTH worked too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-03-17T13:46:41Z", "contents": "@slackersoft Somehow, although these options work, they are still not great.\n\nI could set the MAX_PRETTY_PRINT_DEPTH property and then reset the property each time I want to check a circular object\nI could give each circular object I want to check a custom function (toString/jasmineToString)\n\nBoth solutions are quite error-prone. The best option would be if Jasmine skipped printing the entire graph and printed a simplified message for each argument where jasmine.any is expected.\nexpect(eventService.broadcast).toHaveBeenCalledWith(\"correctArgument\", jasmine.any(Angular2Component));\n\n//output\nExpected spy broadcast to have been called with [ 'correctArgument', <jasmine.any(Angular2Component)> ] but actual calls were [ 'wrongArgument', Angular2Component ].", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T01:02:02Z", "contents": "Circular objects should always break out of the prettyprint as soon as Jasmine sees the same object again. The any matcher already defines its own jasmineToString to help alleviate this problem from this end, and unfortunately the pretty printer has no way to know that the object being printed is doing so because it was compared against an any.\nWe could also look into lowering the default MAX_PRETTY_PRINT_DEPTH to help with this problem in the base case, since 40 seems a bit high, but I'm not sure what would be a good default.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-03-26T19:54:30Z", "contents": "I see, the expect fails and the pretty printer is called afterwards?\nWhat about formatting the string return value from JSON.stringify(myBigObject) on circular objects instead of iterating over them?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-29T23:26:26Z", "contents": "I don't think this is necessarily a circular reference problem, since the pretty printer should detect actual circular references and display something to that effect. JSON.stringify tends to behave even worse, either throwing an Error or traversing the circular reference. Most likely the object being printed is just super large.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-04-03T08:48:15Z", "contents": "Might be of help....\nWith Crockford's cycle lib: JSON.stringify(JSON.decycle(myBigObject)) I was able to print out the large Angular component. If we utilise his method and limit it to the MAX_PRETTY_PRINT ( as the decycle was still quiet big :) ) we should have readable output that doesn't crash with large objects \ud83d\udc4d\nhttps://github.com/douglascrockford/JSON-js/blob/master/cycle.js", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-03T22:56:39Z", "contents": "Jasmine's pretty printer should detect and not descend into circular references correctly. See: \n  \n    \n      jasmine/spec/core/PrettyPrintSpec.js\n    \n    \n         Line 82\n      in\n      41a8135\n    \n    \n    \n    \n\n        \n          \n           it(\"should indicate circular array references\", function() { \n        \n    \n  \n\n for the specs on this. So this almost certainly isn't an issue with actually circular objects, but simply objects that are very large. Jasmine additionally has its own pretty printer that isn't just JSON.stringify because that would lose information (like constructors, etc.) that would cause two objects to be considered different to Jasmine and we want to be able to print that info out to the user.\nThe MAX_PRETTY_PRINT_DEPTH setting is more meant to be set once for your entire suite and not necessarily moved up and down by different specs, so you should be totally fine to just set it once in a helper file before the suite starts running.\nThe default MAX_PRETTY_PRINT_DEPTH isn't something we can really change during the 2.x release cycle as it could have negative effects for projects with deep, but not wide, objects that print in a reasonable time. But a new default value probably makes sense in 3.0 in the future.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "smasala", "authorAssociation": "NONE", "createdAt": "2017-04-04T10:17:28Z", "contents": "Yea, I agree. I don't think changing MAX_PRETTY_PRINT_DEPTH is the answer - especially not in 2.x.\nI think this problem may be solvable by tweaking util.arrayContains. The function only does a simple equals (===). However, if the search item is inside an array item in this.seen then it is not found and thinks it hasn't been seen yet, it then misses the circular reference although the 2 items point to the same object. This also means that the same object can be placed multiple times inside \u00b4this.seen` when dealing with multidimensional arrays.\nAlternatively one could flatten the array seen so that it is not multidimensional and circular references would be found (recursion is tricky here though - maybe a depth flatten maximum would be needed (MAX_PRETTY_PRINT_DEPTH?). Perhaps Crockfords method with WeakMaps may be handy here?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "avoerman", "authorAssociation": "NONE", "createdAt": "2017-04-20T16:00:41Z", "contents": "I think this is related, but doing a simple:\nexpect(aLargeObject).toBeFalsy()\ncauses a nasty crash, giving a \"RangeError: Invalid string length\" trace. This only happens on a failed test, so it leads me to believe it's the same pretty print issue.\nfortunately there's an easy workaround for this case:\nexpect(!!aLargeObject).toBe(false)\n\u00af_(\u30c4)_/\u00af", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nburwell", "authorAssociation": "NONE", "createdAt": "2017-07-09T16:46:22Z", "contents": "I just ran into this on 2.6.4 with expect(aLargeObject).not.toEqual(anotherLargeObject) too. I confirmed that using jasmine#master with 4c491b2 my test works (though it takes 7.4 seconds to run just the one test!).  Alternatively if I bump down the MAX_PRETTY_PRINT_DEPTH setting my test will pass on 2.6.4.\nNow, our test should be re-written as we don't need to compare the entire objects, but this was working fine in all versions previous to 2.6.0, and I confirmed it was due to an out of memory issue in the PrettyPrinter trying to walk the entire object, which did have circular references too. I'm sure many others with large, existing Jasmine test suites are going to hit this too.\nWould be great to get a new version released with this fix in it, at least as a safe guard for others running into this issue.  Related: is there a reason the MAX_PRETTY_PRINT_DEPTH is set to 40 (which seems really high, and clearly is not preventing out of memory issues at that level), can that be bumped down in master too?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "janpaul123", "authorAssociation": "NONE", "createdAt": "2017-11-24T07:57:56Z", "contents": "I ran into this as well and fixed it in our default setup (https://github.com/remix/remix-jasmine-setup), but I am wondering why you wouldn't bump down MAX_PRETTY_PRINT_DEPTH in 2.x. I doubt that projects with deep objects would be that significantly helped by a value of 40 over 10 or 20 or so, while on the other hand it seems that quite a few people have run into entire browser crashes because of this. To me the latter seems to outweigh the former.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1292, "url": "https://github.com/jasmine/jasmine/issues/1292", "title": "TypeError: this.expectationResultFactory is not a function", "contents": "Jasmine-core 2.5.2\n\nThe following is the test I am running:\n/// <reference path=\"visualize.page.ts\" />\n/// <reference path=\"../../reference.d.ts\" />\n\nimport { CommonPageItems } from '../../../../test/e2e/common.page'\nimport { NewVisualizationView } from './visualize.page'\nimport { ListView } from '../../../../test/e2e/listView.page'\n\nlet common = new CommonPageItems()\nlet vizList = new ListView()\nlet vizPage = new NewVisualizationView()\n\ndescribe('create visualizations', () => {\n    /**\n     * Create Visualizations Test Suite\n     */\n\n    beforeAll(() => {\n        vizPage.navigateToApp()\n    })\n\n    afterAll(() => {\n        common.signOut()\n    })\n\n    beforeEach(() => {\n        vizPage.newViz()\n    })\n\n    it('bar chart - additional config', () => {\n        vizPage.chooseChart('bar')\n        expect(vizPage.additionalConfigAlert.getText()).toMatch('Bar chart needs at least 1 measure and 0 breakdowns.')\n        vizPage.returnToVizListView()\n    })\n})\n\nI run the following command to get this run:\ngulp e2e --suite visualize --baseUrl <a URL goes here>\nThe test runs and passes however the browser session never closes and I get the following error:\n<REST OF PATH>/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2219\n      this.result.failedExpectations.push(this.expectationResultFactory(data));\n                                               ^\nTypeError: this.expectationResultFactory is not a function\n    at Suite.onException (/Users/curtissalisbury/src/github.com/artemishealth/artemis-app/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2219:48)\n    at QueueRunner.onException (/Users/curtissalisbury/src/github.com/artemishealth/artemis-app/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2330:28)\n    at onException (/Users/curtissalisbury/src/github.com/artemishealth/artemis-app/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1924:12)\n    at Timeout._onTimeout (/Users/curtissalisbury/src/github.com/artemishealth/artemis-app/node_modules/jasmine/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1910:11)\n    at tryOnTimeout (timers.js:232:11)\n    at Timer.listOnTimeout (timers.js:202:5)\n\nThis was literally working yesterday and this morning I come in and I am getting the above mess.\nThanks for using Jasmine!", "createdAt": "2017-03-15T15:49:39Z", "updatedAt": "2017-03-15T18:16:52Z", "closedAt": "2017-03-15T18:16:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DarthOpto", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DarthOpto", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T17:18:26Z", "contents": "Are you sure you didn't somehow get bumped back to jasmine-core 2.4.x? The code in Jasmine to handle failures in global beforeAll and afterAll didn't get implemented until 2.5 and it looks like the line numbers in that stacktrace match up with the line number in 2.4.0, but not 2.5.0 or later.\nFrom where the error is coming from, it looks like something (probably cleanup in an afterAll) is taking too long and hitting Jasmine's timeout. You should also be able to set a custom timeout if the action can take longer than the default 5 seconds.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DarthOpto", "authorAssociation": "NONE", "createdAt": "2017-03-15T17:32:11Z", "contents": "Yes, it looks like jasmine-reporters is depending on 2.4.1.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-15T18:16:51Z", "contents": "I'm going to close this issue then, since it sounds like the issue is with jasmine-reporters and not jasmine itself.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1293, "url": "https://github.com/jasmine/jasmine/issues/1293", "title": "use async7await on the tests ", "contents": "Hi, i`m trying to implement a test for my postman library but i need use async/await to do this. The problem is that if I put the done parameter in the test method I got this:\n(node:3253) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error\nBut, If I remove the parameter the test passes but don't execute the ajax call. That is the code:\nit('Basic test', async function (done) {\n    let data;\n    try {\n      data = await this.actionwords.thePostmanTestIsExecuted(\"Login\").catch(error=> {throw new Error(error)});\n    } catch(error){\n        expect(error.error).toBe(null);\n    }\n    try {\n      data = await this.actionwords.aResponseIsReceived(data).catch(error=> {throw new Error(error)});\n      \n      expect(data.data).not.toBe(null);\n      expect(data.data.length).toBeGreaterThan(0);\n      expect(data.error).toBe(null).or.toBe(undefined);        \n    } catch(error) {\n        expect(error.error).toBe(null);\n    }\n    try {\n      Promise.all(done).catch(error=>{ throw Error(error); }).catch(error=>{ throw Error(error); });\n    } catch(error) {\n       expect(error.error).toBe(null);\n    }\n  });\n\nHow can I do this test execute properly using async/await?", "createdAt": "2017-03-16T09:34:29Z", "updatedAt": "2017-03-16T16:35:55Z", "closedAt": "2017-03-16T16:35:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thiagohora", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "thiagohora", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-16T16:35:55Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1294, "url": "https://github.com/jasmine/jasmine/issues/1294", "title": "What about including Infinity methods?", "contents": "I am thinking about two methods like toBeInfinity(), toBeNegativeInfinity().\nOf course one could argue that we could work around this issue with toEqual(Infinity), but then I would reply \"what is then the purpose of toBeNaN() method?\".\nFor a visual example, you can refer to https://github.com/mhevery/jasmine-node/pull/415/files.", "createdAt": "2017-03-18T23:54:42Z", "updatedAt": "2017-04-08T00:43:12Z", "closedAt": "2017-04-08T00:43:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "thodorisbais", "company": "ABN Amro"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T00:43:07Z", "contents": "This probably has a fairly limited use, but I would be happy to review a pull request to add these matchers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-03-24T03:01:42Z", "contents": "Cool, I start working on it then!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1295, "url": "https://github.com/jasmine/jasmine/issues/1295", "title": "Feature Request: Nested 'it' blocks should throw a useful error", "contents": "Version 2.5.3 and previous, all environments.\nNested it blocks are unsupported and meaningless, but sometimes test writers mess up and make them anyway (for example, if they have helper functions). It would be nice if Jasmine threw an error when this happens, instead of silently passing. For example, something like:\ndescribe('nested its', function() {\n  it('should throw some sort of error', function() {\n    it('erroneous nested it', function() {\n      expect(true).toEqual(false);\n    });\n  });\n});\nShould throw something like unexpected \"it\" statement inside a test.", "createdAt": "2017-03-22T04:15:32Z", "updatedAt": "2018-01-25T04:18:25Z", "closedAt": "2018-01-25T04:18:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Goodwine", "company": null}, {"login": "ksvitkovsky", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-24T00:44:34Z", "contents": "This seems reasonable as we've moved to some nicer error messages for cases like this. I'd be happy to review a pull request to have it throw an error if Jasmine is already executing another it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Goodwine", "authorAssociation": "NONE", "createdAt": "2017-06-01T00:17:43Z", "contents": "Note that the problem is not only nested its, but also nested beforeEach, afterEach, beforeAll, and afterAll.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ksvitkovsky", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-05T08:43:21Z", "contents": "@slackersoft I started to work on the issue, should I keep it just about nested it statements or expand that to describes/befores/afters that are being used not on top-level of describe function? Just thinking that it might be a bit of overhead and too much control over client's code.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-08T21:36:07Z", "contents": "To clarify, anything can be nested inside of a describe (including another describe), but nothing should be nested inside of an it, beforeEach, afterEach, beforeAll, or afterAll. Possibly the best way to block this is just to have all of these top-level interface methods throw an error if they are called while the suite is executing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-25T04:18:25Z", "contents": "This was released in 2.9.0. Thanks, @ksvitkovsky!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1296, "url": "https://github.com/jasmine/jasmine/issues/1296", "title": "Spying on ES module properties", "contents": "I'm using webpack 2 with babel to transpile my code. With webpack 1 it was possible to spy on module properties since import/export were converted to CommonJS but webpack 2 is now compliant with the ES standard. Which means I can no longer spy on a module property because the module is frozen. Does jasmine provides a way to spy on module properties? Or is there a workaround for this?", "createdAt": "2017-03-22T13:43:43Z", "updatedAt": "2017-04-11T17:28:00Z", "closedAt": "2017-04-11T17:28:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bensampaio", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "bensampaio", "company": "@karify"}, {"login": "senyaak", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "senyaak", "authorAssociation": "NONE", "createdAt": "2017-04-11T14:50:20Z", "contents": "How about that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T17:28:00Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nSpies are implemented by overwriting the existing properties on the object, so if things are not modifiable, Jasmine won't be able to spy on them. I'm going to close this since it doesn't sound like an issue with Jasmine itself, but we would be happy to talk about functionality that could be added to Jasmine, if possible, to support this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1297, "url": "https://github.com/jasmine/jasmine/issues/1297", "title": "jasmine.DEFAULT_TIMEOUT_INTERVAL at odds with actual execution times", "contents": "What version are you using? 2.5.2\nWhat environment are you running Jasmine in (node, browser, etc)? node\nHow are you running Jasmine (standalone, npm, karma, etc)? gulp-wdio (so WebdriverIO using Jasmine as the test runner)\n\nThis is not a blocking issue for me at all - I've learned that the jasmine.DEFAULT_TIMEOUT_INTERVAL needs to be set fairly high for web UI tests. What has me curious, though, is that the run times I see in my console don't seem to have much relation to my configured timeout, and that makes it hard for me to understand (and communicate to others) what exactly is going wrong when I get timeout errors. To illustrate: Here is a jasmine.DEFAULT_TIMEOUT_INTERVAL failure where the timeout was set to 20000.\n\nSo for a 20 second timeout:\n\nThe test itself had a 28 second runtime.\nThe suite had a 43 second runtime.\nThe entire command (using time to measure) had a 49 second runtime.\n\nSo some questions arise:\n\nWhat exactly is jasmine.DEFAULT_TIMEOUT_INTERVAL measuring?\nAt what point does it start waiting and counting to 20000 (or whatever one has configured the timeout to be)?\n\nI'm open to the possibility that the webdriverio context might be muddying the waters here, but it at least seems like it's related to jasmine itself so I wanted to start here.", "createdAt": "2017-03-23T22:32:15Z", "updatedAt": "2017-03-24T16:34:35Z", "closedAt": "2017-03-24T16:34:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TheMetalCode", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "TheMetalCode", "company": "Doximity"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-23T23:59:41Z", "contents": "DEFAULT_TIMEOUT_INTERVAL, or the custom timeout passed to a given it, is the number of milliseconds that will be passed to setTimeout to interrupt an async spec. Due to the nature of setTimeout, this means your spec may not be immediately interrupted after exactly that amount of time.\nThe suite runtime is the amount of time it took to actually execute your suite, and doesn't include any time to require or set up the suite.\nI hope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "TheMetalCode", "authorAssociation": "NONE", "createdAt": "2017-03-24T16:34:35Z", "contents": "@slackersoft That helps immensely - thank you!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1299, "url": "https://github.com/jasmine/jasmine/issues/1299", "title": "Add `console.time` and `console.timeEnd` support to `jasmine.clock`", "contents": "I wrote a util that wraps console's time and timeEnd methods (https://developer.mozilla.org/en-US/docs/Web/API/console#Timers), and is able to calculate averages across multiple calls, etc...\nBut I'm getting brittle test results even when using combinations of .toBeGreaterThan and .toBeLessThan, because I can't account for large fluctuations of test execution time...\nIt would be great to be able to \"mock\" these console methods much like we currently can setTimeout.\nIt seems they're standard, and so would not be subject to the same requirements as #866 ?", "createdAt": "2017-03-24T20:44:25Z", "updatedAt": "2017-04-06T22:04:53Z", "closedAt": "2017-03-30T14:38:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nemoDreamer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nemoDreamer", "company": "nemoDreaming.com"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-03-29T23:33:29Z", "contents": "It looks like the functions are there on most browsers, but not IE < 11 and phantomjs, so it would still need to be detected and not blindly installed. Additionally, all the docs I'm reading indicate that they just print the timing information directly to the console and not necessarily return the information, so I'm not totally sure how you would programmatically get the information.\nAlternatively, for your tests, you should probably just be able to spyOn the functions and specify behavior that way.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2017-03-30T14:38:34Z", "contents": "Aha, yes, I'm storing the timestamps myself in my wrapper.\nI'll se if there's a way I should be using new Date().getTime(); that works w/ Jasmine's clock.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2017-03-30T17:31:06Z", "contents": "Hey @slackersoft finally used mockDate, and was able to get rid of all my fuzze less/greaterThan assertions, thanks!\nCan I suggest you add something about mockDate and withMock to the introduction.js docs? Should I create a new issue to track that suggestion?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-03T21:58:44Z", "contents": "Here's the current mention for this: https://jasmine.github.io/edge/introduction#section-Mocking_the_Date  I agree this isn't super easy to find, and we've launched some new API docs that should be better at surfacing what exists on Jasmine's API. The clock page for that is here: https://jasmine.github.io/api/edge/Clock.html\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nemoDreamer", "authorAssociation": "NONE", "createdAt": "2017-04-06T22:04:53Z", "contents": "Oh wow, I must have seen that at some point, and then forgotten about it...\nSorry!!\nJasmine rocks, @slackersoft . I keep getting nearly lured away to mocha/sinon/chai blends, but always end up thinking \"wait a minute, Jasmine already does all this for me in one package...\"\n(I do use the karma-mocha-reporter though, 'cause it's purdy \ud83d\ude1c )", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1302, "url": "https://github.com/jasmine/jasmine/issues/1302", "title": "Please release new NPM including spyOnProperty", "contents": "See also #1008", "createdAt": "2017-03-27T12:36:12Z", "updatedAt": "2017-04-24T21:03:48Z", "closedAt": "2017-04-24T21:03:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "StefH", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "StefH", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 0, "comments_data": [], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1303, "url": "https://github.com/jasmine/jasmine/issues/1303", "title": "Two questions regarding code implementation.", "contents": "Hi,\nIn toBeFasly.js:\nreturn {\n    pass: !!!actual\n};\n\nIs it just a personal style or there is a deep reason to use !!! instead of one !?\nIn toBeDefined.js:\nreturn {\n    pass: (void 0 !== actual)\n};\n\nIs it just a personal style or there is a deep reason to use void 0 instead of undefined?", "createdAt": "2017-03-31T01:08:19Z", "updatedAt": "2017-04-08T00:48:44Z", "closedAt": "2017-04-08T00:48:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T00:48:44Z", "contents": "My best guess for the !!! thing is some odd browser behavior from long ago (or maybe not that long), but I'm not totally sure.\nThe void 0 vs undefined thing is because it is possible in some browsers to assign a value to the undefined global and using void 0 makes sure we really get something that is undefined.\nIn the future you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1305, "url": "https://github.com/jasmine/jasmine/issues/1305", "title": "What about having something like an overloaded method of toBeCloseTo() for cases with a precision value of 0?", "contents": "For example, the following toBeCloseTo(1.17, 0) would be more readable (imho) if it was just toBeCloseTo(1.17), because method's name itself declares that it's not an actual equality, but an \"almost equal\". Having that said, the method's precision argument is only useful for cases that the user has the need to explicitly declare the amount of decimal points to be checked for possible equality.", "createdAt": "2017-03-31T17:11:51Z", "updatedAt": "2017-04-08T00:52:04Z", "closedAt": "2017-04-08T00:52:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "thodorisbais", "company": "ABN Amro"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T00:52:04Z", "contents": "Wouldn't toBeCloseTo(1.17, 0) be the same as toEqual(1.17)? The latter would be much more descriptive of the intent of the test and should probably be used instead for that case. To that end, this doesn't sound like something we want to add to Jasmine at this time, since it seems to lead to more confusion, as it isn't necessarily obvious that a precision of 0 is used.\nClosing this for now. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1306, "url": "https://github.com/jasmine/jasmine/issues/1306", "title": "createSpyObj() with a return value for each spy method", "contents": "I use Jasmine to mock a lot of AngularJS services that return promises. For this purpose, I'd like to use the createSpyObj method and have a certain return value for each. For example:\nvar UserService  = jasmine.createSpyObj('UserService', ['query', 'get', 'post', 'remove', 'put'])\n.and.returnValue(new Promise())\n\nHowever, Jasmine does not allow me to tack on .and.returnValue at the end of this function call. It throws an error. As a result, I'm stuck writing this significantly more verbose syntax:\nvar UserService = {\n   query: jasmine.createSpy('query').and.returnValue(new Promise()),\n   get: jasmine.createSpy('get').and.returnValue(new Promise()),\n   post: jasmine.createSpy('post').and.returnValue(new Promise()),\n   delete: jasmine.createSpy('delete').and.returnValue(new Promise()),\n   put: jasmine.createSpy('put').and.returnValue(new Promise()),\n}\n\nIs there any way I can, by default, return a specific value for every method created by a createSpyObj factory?\nAdditional info:\n\nWhat version are you using? Jasmine 2.4\nWhat environment are you running Jasmine in (node, browser, etc)? Browser\nHow are you running Jasmine (standalone, npm, karma, etc)? Chutzpah for Visual Studio", "createdAt": "2017-03-31T22:16:00Z", "updatedAt": "2018-05-22T06:52:40Z", "closedAt": "2017-04-10T14:39:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jongunter", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "jongunter", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ericis", "company": "American Airlines @americanair"}, {"login": "boris-ilijic", "company": null}, {"login": "X-51", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T00:32:26Z", "contents": "You should be able to pass an object for the methods instead of an array. (https://jasmine.github.io/api/edge/jasmine.html#.createSpyObj). createSpyObj returns the object that was created, which just happens to have each of its properties be a Spy. So this should work:\nvar UserService = jasmine.createSpyObj('UserService', {\n    'query': new Promise(),\n    'get': new Promise(),\n    .\n    .\n    .\n});\nHope this helps. Thanks for using Jasmine!", "reactions_count": 39, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "jongunter", "authorAssociation": "NONE", "createdAt": "2017-04-10T14:39:28Z", "contents": "@slackersoft Thanks! Is that syntax only available in the latest version, or do 2.4 and 2.5 have it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-10T20:32:22Z", "contents": "It looks like it is only in edge right now.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "CONFUSED", "THUMBS_UP"]}, {"authorLogin": "ericis", "authorAssociation": "NONE", "createdAt": "2017-05-17T16:48:03Z", "contents": "Yep. this isn't available. I get an array of strings as the only option for 2nd arg", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-19T20:50:00Z", "contents": "@ericis this functionality should be out in the 2.6.2 release. What version of Jasmine are you using?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "boris-ilijic", "authorAssociation": "NONE", "createdAt": "2017-05-23T12:42:27Z", "contents": "Does createSpyObj support mocking getter / setters in the same fashion as it supports methods in the example above?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-23T20:48:08Z", "contents": "@boris-ilijic Jasmine does not currently have a way to bulk create spies on properties", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "X-51", "authorAssociation": "NONE", "createdAt": "2018-05-22T06:52:09Z", "contents": "Thank you it helped a lot.\nI would like to add that you can return another function and then spyOn it again.\ntape = jasmine.createSpyObj('tape', \n    {\n        'controls': {\n            rewind: function() {\n                return true;\n            },\n            forward: function() { \n                return true;\n            }\n        }\n    }\n);\n\nspyOn(tape.controls(), 'rewind');", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1307, "url": "https://github.com/jasmine/jasmine/issues/1307", "title": ".clock().mockDate() is one month off", "contents": "When I use mockDate() to simulate a specific date it's a month off...\n    xit(\"cookie_expiration() is 30 days out\", function () {\n        console.info(new Date()); // Fri Mar 31 2017 16:21:28 GMT-0700 (PDT)\n        var baseTime = new Date(2016, 10, 1, 0, 0, 0, 0);\n        jasmine.clock().mockDate(baseTime);\n        console.info( new Date() ); // Tue Nov 01 2016 00:00:00 GMT-0700 (PDT)\n       ...\n    });\n\n\n\nWhat version are you using?\n2.5.3\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nnode (unit test)\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\nkarma", "createdAt": "2017-03-31T23:22:39Z", "updatedAt": "2017-04-03T22:46:40Z", "closedAt": "2017-04-03T22:46:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "emersonthis", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "emersonthis", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-03T22:46:40Z", "contents": "Javascript actually uses 0-based months see MDN. This means that your baseTime variable is actually set to November 1, not October 1 as you might be expecting.\nI'm going to close this issue since this is not something under Jasmine's control, but a function of Javascript itself. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1308, "url": "https://github.com/jasmine/jasmine/issues/1308", "title": "Test Category or Attribute for Jasmine Tests", "contents": "Is there a way to add Test Category or attribute like Nunit test framework in Jasmine?\nWe have a lot of specs and would like an ability to mark flaky tests and run them in separate suite.\n\nWhat version are you using? 2.0\nWhat environment are you running Jasmine in (node, browser, etc)? Node.Js\nHow are you running Jasmine (standalone, npm, karma, etc)? Standalone -Protractor test\nIf possible, include an example spec that demonstrates your issue.", "createdAt": "2017-04-06T10:41:47Z", "updatedAt": "2017-07-26T00:43:12Z", "closedAt": "2017-07-26T00:43:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sharvarik", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sharvarik", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-10T20:59:42Z", "contents": "Jasmine does not have the ability to annotate specs or suites aside from fit/fdescribe and xit/xdescribe to change which specs are run. You should also be able to set the description for the specs you want to run and filter that run as well.\nIn general, we think you should spend the time to fix the flaky specs so they produce consistent results instead. If you can isolate the sets of specs into different files, you might also be able to pick a normal config and a \"flaky\" config that only include the spec files of their respective types.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-26T00:43:11Z", "contents": "Closing due to inactivity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1309, "url": "https://github.com/jasmine/jasmine/issues/1309", "title": "expect(spy) Causes Error While expect(obj[\"functionName\"]) Functions as Expected", "contents": "I'm running Jasmine npm 2.5.3, and running the unit test via a web browser.  The Spec Runner is testing multiple JS files, and when I run all tests, I get a test that fails, that shows the name of the test being in a completely different file, than the stack trace shown.\nHere is the code from the stack trace:\n\nIt is failing on this\nexpect(get).toHaveBeenCalledTimes(expectedCalls);\nline.\nIf I run either test one at a time, no issues.  I did figure out that if I change the line that is in error to not reference the spy directly, there are no issues:\nexpect(webApi[spyFunctionName]).toHaveBeenCalledTimes(expectedCalls);\nI would have thought that expect(get) and expect(webApi[spyFunctionName])) would have been equivalent in this case.\nAm I not understanding how spies work, or did I stumble onto a bug?\nHere is the stack trace in case it is helpful:\nExpected spy GetList to have been called 0 times. It was called 1 times.\n    at stack (http://localhost:1130/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1640:17)\n    at buildExpectationResult (http://localhost:1130/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1610:14)\n    at Spec.expectationResultFactory (http://localhost:1130/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:655:18)\n    at Spec.addExpectationResult (http://localhost:1130/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:342:34)\n    at Expectation.addExpectationResult (http://localhost:1130/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:599:21)\n    at Expectation.toHaveBeenCalledTimes (http://localhost:1130/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1564:12)\n    at http://localhost:1130/test/spec/Allgnt.RestLibSpec.js:166:34", "createdAt": "2017-04-07T03:06:26Z", "updatedAt": "2017-04-11T02:00:59Z", "closedAt": "2017-04-11T02:00:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "daryllabar", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "daryllabar", "company": "Gap Integrity"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-10T21:10:25Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nGiven that you appear to be getting an extra call to the spy when you run the full suite, you probably either have some other spec that ends up with a callback or something registered. Additionally, I would recommend against having that kind of logic in your specs if at all possible, since this forces your tests to be very explicit about the state they want.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "daryllabar", "authorAssociation": "NONE", "createdAt": "2017-04-11T02:00:59Z", "contents": "I assumed this was a bug since I thought my calls to expect on the spy should have been equivalent in both cases.  Thanks for your time, I'll post in a different place.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1310, "url": "https://github.com/jasmine/jasmine/issues/1310", "title": "Does beforeAll and afterAll support 'done' callback ?", "contents": "Hi All,\nI have read that beforeEach and afterEach in Jasmine supports done callbacks for asynchronous code the same way as it.Is done callback supported in beforeAll and afterAll too ?\nRegards,\nKunal", "createdAt": "2017-04-07T06:09:49Z", "updatedAt": "2017-04-08T00:23:12Z", "closedAt": "2017-04-08T00:23:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kunalshokeen", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kunalshokeen", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T00:23:12Z", "contents": "Yep. Heres the link to the docs: https://jasmine.github.io/edge/introduction#section-Asynchronous_Support we haven't quite added all of this stuff to the API docs just yet.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1311, "url": "https://github.com/jasmine/jasmine/issues/1311", "title": "After hooks fire in an inconsistent order.", "contents": "Are you creating an issue in the correct repository?\nI think so \ud83e\udd14 .\nWhen submitting an issue, please answer the following:\n\nWhat version are you using? 2.5.3\nWhat environment are you running Jasmine in (node, browser, etc)? node v4.6.2\nHow are you running Jasmine (standalone, npm, karma, etc)? jasmine ./path/to/spec.js\nIf possible, include an example spec that demonstrates your issue. See below.\n\nGiven the following test file\ndescribe('stuff', function() {\n  beforeAll(console.log.bind(null, 'beforeAll1'));\n  beforeAll(console.log.bind(null, 'beforeAll1'));\n\n  beforeEach(console.log.bind(null, 'beforeEach1'));\n  beforeEach(console.log.bind(null, 'beforeEach2'));\n\n  afterEach(console.log.bind(null, 'afterEach1'));\n  afterEach(console.log.bind(null, 'afterEach2'));\n\n  afterAll(console.log.bind(null, 'afterAll1'));\n  afterAll(console.log.bind(null, 'afterAll2'));\n\n  it('should pass', console.log.bind(null, 'test'));\n});\nI get the following output:\n\u276f jasmine ./test/what_spec.js --silent\nStarted\nbeforeAll1\nbeforeAll1\nbeforeEach1\nbeforeEach2\ntest\nafterEach2\nafterEach1\n.afterAll1\nafterAll2\n\nNote that afterEach gets its order reversed while afterAll does not.\nPersonally I'd like to see neither of them reversed, but that doesn't matter as much as consistency.  I found this while working on a tool that helps automate some setup/teardown, and noticed that the teardown was happening in the wrong order.", "createdAt": "2017-04-08T01:41:00Z", "updatedAt": "2017-04-10T20:37:27Z", "closedAt": "2017-04-10T20:37:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "gdborton", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "gdborton", "company": "Airbnb"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T02:45:53Z", "contents": "See the discussion in #908 about what is the correct order for afterEach in a BDD framework. Long story short the current behavior is the right behavior and we're probably not going to change it.\nHope this helps. Closing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gdborton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-08T09:36:35Z", "contents": "@slackersoft The issue here isn't that afterEach is run in reverse order, but that afterAll isn't. Shouldn't these behave consistently with each other?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-08T14:07:07Z", "contents": "Ahh! afterEach and afterAll should both be run in the opposite order they are declared. If this isn't happening for afterAll, we would be happy to review a pull request to correct this.\nSorry for the confusion.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1313, "url": "https://github.com/jasmine/jasmine/issues/1313", "title": "stopSpecOnExpectationFailure not work as expected", "contents": "I am using Webdriver with JasmineJs. In WDIO configuration I have set\njasmineNodeOpts: {\n    stopSpecOnExpectationFailure: true\n  },\n\nI am expecting that in that test case:\ndescribe('Log to the site', () => {\n \n  it('authorize', () => {\n    //some webdriver steps\n  });\n\n  it('go to other site', () => {\n      //some webdriver steps\n  });\n});\n\nWhen my steps in authorize it failed, my tests not go to next it , but continue executing next describe.\nI am right?", "createdAt": "2017-04-11T11:55:53Z", "updatedAt": "2017-07-26T00:44:12Z", "closedAt": "2017-07-26T00:44:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "netmajor", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "netmajor", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T13:54:15Z", "contents": "In Jasmine/BDD parlance an it is called a spec and describe is a suite. So stopSpecOnExpectationFailure just bails out of the current it.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "netmajor", "authorAssociation": "NONE", "createdAt": "2017-04-11T18:01:21Z", "contents": "How should I use stopSpecOnExpectationFailure to exit current suite after failure in spec?\nI can only think about using beforeEach. Do you have any solution for that problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-11T18:07:35Z", "contents": "If you want to stop the entire Jasmine suite on the first spec failure, this is something we're looking into, the existing issue for that is #414.\nIf you want to skip out from one describe into the next describe when an it from fails, I don't think that is something we're likely to have in Jasmine. In general, you should probably try to have your specs be isolated from one another so this isn't necessary. If some core functionality breaks, it probably makes sense for multiple specs to break as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-26T00:44:12Z", "contents": "It sounds like this has become a duplicate of #414, so I'm going to close it. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1314, "url": "https://github.com/jasmine/jasmine/issues/1314", "title": "Mocks' toHaveBeenCalledWith method behaves incorrectly with promise arguments", "contents": "Calling a mock with a promise will make any later assertions on that mock's calls with other promises it was not called with fail.\nIn other words, calling a mock with a promise will make that mock behave as if it were called with any other promises, even when it was not called with another promise.\n\njasmine and jasmine-core version 2.5.2\nRunning with Karma through Chrome 56.0.2924.87\n\nFailing reproduction spec:\n    it('verifies a method was not called with promise2 as a parameter', () => {\n        const promise1 = new Promise(resolve => resolve({\n            data: 'foo'\n        }))\n        const promise2 = new Promise(resolve => resolve({\n            data: 'bar'\n        }))\n\n        const someMock = jasmine.createSpy('something')\n        someMock(promise1)\n\n        expect(someMock).not.toHaveBeenCalledWith(promise2)\n    })\n\nIn Chrome, running promise1 === promise2 and promise1 == promise2 returns false for both cases.\nPlease let me know if additional info would help :)", "createdAt": "2017-04-12T22:07:05Z", "updatedAt": "2017-11-03T00:18:32Z", "closedAt": "2017-11-03T00:18:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "austinmckinley", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "austinmckinley", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-14T21:02:17Z", "contents": "Jasmine's equality logic (which is used for toHaveBeenCalledWith as well as toEqual) doesn't just use === or ==, but attempts to do a deep compare of the two objects. Since the two Promises have the same constructor and Object.keys doesn't return anything for a Promise, Jasmine doesn't really know what else to check to see if they are equal.\nI would be happy to review a pull request that enabled Jasmine to correctly test equality for a Promise (while still working in environments where there is no Promise).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1315, "url": "https://github.com/jasmine/jasmine/issues/1315", "title": "Really Important Question.", "contents": "Hi I am new to jasmine and javascript in general,\ni know i should have asked this question on stackoverflow, but i think this is the right place , as i have tried stackoverflow.\nthe question is .\nin a spec , e.g in the it function , if i have a promise that gets rejected.\ncan i return a pending on this. e.g\ndescribe ('blah' ,() => {\nit('blah blah', ()=>{\ncheckBlah().\nthen((result) => {\nif(result != ok){\nreturn pending();\n}\nreturn doBlahBah() .....\n});\n});\n});", "createdAt": "2017-04-13T15:33:09Z", "updatedAt": "2017-04-14T20:35:20Z", "closedAt": "2017-04-14T20:35:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-14T20:35:20Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1317, "url": "https://github.com/jasmine/jasmine/issues/1317", "title": "Calling toThrowError with no arguments errors via assuming the undefined argument is a regex", "contents": "The current behavior of toThrowError assumes that if the first argument isn't a string or a function, then it must be a regex; it subsequently calls .test on the undefined first argument and throws the error TypeError: expected.test is not a function (error partially suppressed by Protractor wrapping Jasmine).\nThe behavior should change to .toThrowError() being identical to .toThrowError(Error).\nI am running Jasmine 2.4.1 (The 2.5 docs do not include an argumentless example so I think this carries through to 2.5) in node/protractor.", "createdAt": "2017-04-17T19:44:20Z", "updatedAt": "2017-07-20T05:09:11Z", "closedAt": "2017-07-20T05:09:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tsclaus", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tsclaus", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-17T20:53:14Z", "contents": "That seems reasonable. I would be happy to review a pull request to treat toThrowError without arguments the same as if it had been called with just the Error constructor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-20T05:09:04Z", "contents": "Upon further inspection, it looks like this already works in Jasmine. The following spec passes:\nit('checks errors thrown', function() {\n  expect(function() {\n    throw new TypeError();\n  }).toThrowError();\n\n  expect(function() {\n    throw new TypeError();\n  }).toThrowError(Error);\n});\nSo it seems like this is already resolved. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1318, "url": "https://github.com/jasmine/jasmine/issues/1318", "title": "'expect' was used when there was no current spec, this could be because an asynchronous test timed out", "contents": "Version details:\n\"jasmine\": \"2.5.2\",\n\"jasmine-core\": \"2.5.2\",\n\"jasmine-expect\": \"3.7.0\",\n\"karma\": \"1.3.0\",\n\"phantomjs\": \"2.1.7\"\n\"karma-phantomjs-launcher\": \"1.0.2\",\n\nLog messages\n=============================== Coverage summary ===============================\nStatements   : 87.93% ( 1217/1384 ), 64 ignored\nBranches     : 80.57% ( 456/566 ), 43 ignored\nFunctions    : 86.18% ( 399/463 ), 20 ignored\nLines        : 90.2% ( 1086/1204 )\n================================================================================\n\ufffd[1A\ufffd[2KPhantomJS 2.1.1 (Linux 0.0.0) ERROR\n  Error: 'expect' was used when there was no current spec, this could be because an asynchronous test timed out\n  at node_modules/jasmine-core/lib/jasmine-core/jasmine.js:970\nPhantomJS 2.1.1 (Linux 0.0.0): Executed 171 of 182 (skipped 11) ERROR (4.388 secs / 0.768 secs)\n\ufffd[1A\ufffd[2KPhantomJS 2.1.1 (Linux 0.0.0): Executed 171 of 182 (skipped 11) ERROR (4.424 secs / 0.768 secs)\n\n=============================== Coverage summary ===============================\nStatements   : 87.93% ( 1217/1384 ), 64 ignored\nBranches     : 80.57% ( 456/566 ), 43 ignored\nFunctions    : 86.18% ( 399/463 ), 20 ignored\nLines        : 90.2% ( 1086/1204 )\n================================================================================\nnpm ERR! weird error 1\nnpm WARN This failure might be due to the use of legacy binary \"node\"\nnpm WARN For further explanations, please read\n/usr/share/doc/nodejs/README.Debian\n \nnpm ERR! not ok code 0\nBuild step 'Execute shell' marked build as failure\n\nI can't identify which line of code is causing this issue. Could someone help on how can I trace the issue and its from which source file.\nI have tried following:\njasmine.getEnv().defaultTimeoutInterval = 15000;\n\nand in karma conf\nbrowserNoActivityTimeout: 100000,\n\nBut this error doesn't gets resolved.", "createdAt": "2017-04-23T14:57:37Z", "updatedAt": "2017-04-24T21:21:14Z", "closedAt": "2017-04-24T21:21:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cksachdev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cksachdev", "company": "Tarento Technologies Pvt Ltd"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-24T21:21:13Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nThe most common way we've seen this happen is when an async spec calls done (or times out) before all of its expects have been run.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1320, "url": "https://github.com/jasmine/jasmine/issues/1320", "title": "it, beforeEach, etc. no longer accept async functions", "contents": "Summary\nVersion 2.6.0 includes #1222 which forces functions as the argument for it, beforeEach, and the like. This introduces a breaking change because we can no longer pass async functions.\nExample\ndescribe('some suite', () => {\n    it('is good', async (done) => {\n        expect(await someAsyncLogic()).toBe(1);\n        done();\n    });\n});\nExpected result\nTest should pass.\nActual result\nError: it expects a function argument; received [object AsyncFunction]\n\nEnvironment\nJasmine: v2.6.0\nNode.js: v7.9.0\nRunner: gulp-jasmine v2.4.2", "createdAt": "2017-04-25T03:04:56Z", "updatedAt": "2017-05-19T21:03:30Z", "closedAt": "2017-05-19T21:03:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pe8ter", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "pe8ter", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "denzp", "company": null}, {"login": "niieani", "company": "@zendesk"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-25T20:52:24Z", "contents": "Jasmine doesn't actually know how to handle async functions, so while it was not throwing an error before, it certainly wasn't waiting for the functions to complete correctly. For now, I think this is the desired behavior, but once something like #1270 has been merged, I'd be happy to talk about how to correctly support native async.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pe8ter", "authorAssociation": "NONE", "createdAt": "2017-04-26T06:42:53Z", "contents": "I'd argue for leaving the functionality as-is for now. It shouldn't matter what kind of function you throw at Jasmine because handling async behavior has always been up to the test writer anyway. Then introduce the breaking change once Jasmine has natural async behaviors built in.\nI did find a workaround though. I updated my spec wrapping function to use the Promise API instead of async/await. Before 2.6.0:\nfunction testAsync(specFunction) {\n    return async (done) => {\n        try {\n            await specFunction();\n            done();\n        } catch (error) {\n            done.fail(error);\n        }\n    };\n}\nAfter:\nfunction testAsync(specFunction) {\n    return (done) => {\n        specFunction().then(() => {\n            done();\n        }).catch((error) => {\n            done.fail(error);\n        });\n    };\n}\nThis way, my specs don't have to change:\ndescribe('some suite', () => {\n    it('is good', testAsync(async () => {\n        expect(await someAsyncLogic()).toBe(1);\n    }));\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "denzp", "authorAssociation": "NONE", "createdAt": "2017-04-27T13:09:26Z", "contents": "I made a workaround with \"monkey patching\" for my project. It waits for async function's returned promise to be resolved.\npatchJasmineAsyncSpec('it');\npatchJasmineAsyncSpec('fit');\npatchJasmineAsyncSpec('beforeEach');\npatchJasmineAsyncSpec('beforeAll');\npatchJasmineAsyncSpec('afterEach');\npatchJasmineAsyncSpec('afterAll');\n\nfunction patchJasmineAsyncSpec(method) {\n    const originalMethod = global[method];\n\n    global[method] = function(name, callback) {\n        if (callback && callback.constructor.name === 'AsyncFunction') {\n            switch (callback.length) {\n                case 0:\n                    return originalMethod.call(this, name, function(done) { callback.call(this).then(done, done.fail); });\n\n                default:\n                    throw new Error('Async function should not have \"done\" callback!');\n            }\n        }\n\n        originalMethod.call(this, ...arguments);\n    }\n}\nEdit... Here is a correct version that works with async beforeEach, beforeAll, etc.\nfunction patchJasmineAsyncSpec(method) {\n    const originalMethod = global[method];\n\n    global[method] = function(...args) {\n        args = args.map(argument => {\n            if (argument && argument.constructor.name === 'AsyncFunction') {\n                switch (argument.length) {\n                    case 0:\n                        return function(done) { argument.call(this).then(done, done.fail); };\n\n                    default:\n                        throw new Error('Async function should not have \"done\" callback!');\n                }\n            }\n\n            return argument;\n        });\n\n        originalMethod.call(this, ...args);\n    }\n}", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "niieani", "authorAssociation": "NONE", "createdAt": "2017-04-29T22:33:22Z", "contents": "@denzp Awesome. Thanks for this!\nIf you use babel/typescript to transpile await/async, you can also use this version to patch jasmine to support returning Promises:\npatchJasmineAsyncSpec('it');\npatchJasmineAsyncSpec('fit');\npatchJasmineAsyncSpec('beforeEach');\npatchJasmineAsyncSpec('beforeAll');\npatchJasmineAsyncSpec('afterEach');\npatchJasmineAsyncSpec('afterAll');\n\nfunction patchJasmineAsyncSpec(method) {\n  const originalMethod = global[method];\n\n  global[method] = function (...args) {\n    args = args.map(argument => {\n      if (argument) {\n        if (argument.constructor.name === 'AsyncFunction') {\n          switch (argument.length) {\n            case 0:\n              return function (done) { argument.call(this).then(done, done.fail); };\n            default:\n              throw new Error('Async function should not have a \"done\" callback!');\n          }\n        } else if (argument.constructor.name === 'Function' && !argument.length) {\n          return function (done) {\n            try {\n              const maybePromise = argument.call(this)\n              if (maybePromise.then) {\n                maybePromise.then(done, done.fail);\n              } else {\n                done();\n              }\n            } catch (e) {\n              done(e);\n            }\n          }\n        }\n      }\n\n      return argument;\n    });\n\n    originalMethod.call(this, ...args);\n  }\n}", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1321, "url": "https://github.com/jasmine/jasmine/issues/1321", "title": "TypeError: undefined is not a constructor (evaluating 'allKeys[i].match(/^[0-9]+$/)')", "contents": "Hi, this issue seems to have resurfaced. Works with 2.5.2 but not with 2.6.0.\n\n\n2.6.0\n\n\nnode with karma\nit(\"should calculate correct when xAxisLabels length less than 8\", () =>\nexpect(buildDefaultDataZoom({}, []))\n.toEqual(\n[{\nstartValue: 0,\nendValue: 0\n}, {\ntype: \"inside\"\n}]\n)\n)\n\n\nregards", "createdAt": "2017-04-25T06:26:21Z", "updatedAt": "2017-04-25T20:48:54Z", "closedAt": "2017-04-25T20:48:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jonashartwig", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "jonashartwig", "company": null}, {"login": "EstartuPrime", "company": null}, {"login": "DamienCassou", "company": "F\u00f6retagsplatsen"}], "comments_count": 2, "comments_data": [{"authorLogin": "EstartuPrime", "authorAssociation": "NONE", "createdAt": "2017-04-25T06:53:48Z", "contents": "Hello,\ni have the same here. My nightly build failed with jasmine 2.6.0 worked with jasmine 2.5.3 and jasmine-core 2.5.2 before.\nPhantomJS 2.1.1 (Linux 0.0.0) Broadcast service  Function register() should not add an listener to the same event from the same module FAILED TypeError: undefined is not a function (evaluating 'allKeys[i].match(/^[0-9]+$/)') in node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 2576) spec/blocks/broadcast/broadcast.service.spec.js:63:66 \nAll test's fail with a .toEqual() call.\nBest regards\nAlex", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DamienCassou", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-25T11:01:02Z", "contents": "This looks like this: http://www.mzan.com/article/39288777-karma-jasmine-phantomjs-undefined-is-not-a-constructor.shtml", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1322, "url": "https://github.com/jasmine/jasmine/issues/1322", "title": "Very slow tests after update from 2.5.3 to 2.6.0 ", "contents": "After upgrading Jasmine and Jasmine only, suddenly the tests were running dramatically slower than usual. The test duration increased from approximately 15 minutes to more than 30 minutes.\nThe tests run in chrome via karma.", "createdAt": "2017-04-25T07:29:18Z", "updatedAt": "2017-05-01T20:48:55Z", "closedAt": "2017-05-01T20:48:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rryter", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rryter", "company": "TWY GmbH"}, {"login": "olivierbelzile", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "olivierbelzile", "authorAssociation": "NONE", "createdAt": "2017-04-27T12:36:22Z", "contents": "Same here with 2.6.1. Running in karma and PhantomJS. Reverting to 2.5.2 fixes everything.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-01T20:48:48Z", "contents": "There is a bunch more conversation about what seems like this same issue over in #1327, so I'm going to close this issue as a duplicate. As I mentioned there, this is my current highest priority in my limited Jasmine time.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "CONFUSED", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["duplicate"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1323, "url": "https://github.com/jasmine/jasmine/issues/1323", "title": "2.6 breaks support of using `toEqual(null)` and `toEqual(undefined)`", "contents": "Version: 2.6\nEnv: Browser.\nRunning using: Karma\nIn some cases we don't care wether the resultant value is null or undefined, so long as it's one of those.\nFor example, this helps especially when using a 3rd party library that may return one the former in one version, the the latter in another.\nAnd so when attempting to assert that a value is either null or undefined, we have simply used something like:\nexpect(result).toEqual(null);\nIn Jasmine 2.5, that worked as expected -\nexpect(null).toEqual(null); // pass\nexpect(undefined).toEqual(undefined); // pass\nexpect(undefined).toEqual(null); // pass\nexpect(0).toEqual(null); // fails\nJasmine 2.6 however, seems to introduce a breaking change:\nexpect(result).toEqual(null); // RangeError: Invalid string length", "createdAt": "2017-04-25T11:45:28Z", "updatedAt": "2017-05-24T09:44:47Z", "closedAt": "2017-04-27T15:47:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "roni-frantchi", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "roni-frantchi", "company": "Sapiens"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "emilio-martinez", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T20:40:34Z", "contents": "Do you have any more information on stack trace for that RangeError you're seeing? I am not able to reproduce that.\nAlso, when I roll back and use jasmine 2.5.2 expect(undefined).toEqual(null); still fails, so I don't think this functionality should have changed in the 2.6 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "roni-frantchi", "authorAssociation": "NONE", "createdAt": "2017-04-27T15:47:07Z", "contents": "@slackersoft I'm sorry, you're right.\nTrying to isolate, it seems like the issue is completely different that what I had thought.\nThe test case that fails seems to involve using toEqual() on an Angular 2's DebugElement.\nThis used to work in 2.5.2:\n        let viewTestComponentFixture: ComponentFixture<ViewTestComponent>;\n\n        beforeEach(async(() => {\n            TestBed.compileComponents()\n                .then(() => {\n                    ViewTestComponentFixture = TestBed.createComponent(ViewTestComponent);\n                    viewTestComponent = viewTestComponentFixture.componentInstance;\n                });\n        }));\n...\ndomainInputDebugElement = viewTestComponentFixture.debugElement.query(d => d.name === \"dcn-domain-input\");\n...\n            it('should NOT have a domain input value element', async(() => {\n                expect(domainInputDebugElement).not.toEqual(null);\n            }));\nWhile after upgrading Jasmine (and only Jasmine) to 2.6 it fails:\n\nFailed: Invalid string length\n\tRangeError: Invalid string length\n\t    at Object.eval (modeling/src/app/decision/table/cell/edit/cell-operand.component.spec.ts:763:44 <- modeling/src/app/decision/table/cell/edit/cell-operand.component.spec.js:621:45)\n\t    at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:334:26)\n\t    at AsyncTestZoneSpec.onInvoke (node_modules/zone.js/dist/async-test.js:49:39)\n\t    at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:76:39)\n\t    at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:333:32)\n\t    at Zone.runGuarded (node_modules/zone.js/dist/zone.js:139:47)\n\t    at runInTestZone (node_modules/@angular/core/bundles/core-testing.umd.js:110:29)\n\t    at Object.eval (node_modules/@angular/core/bundles/core-testing.umd.js:49:17)\n\t    at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:334:26)\n\t    at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:79:39)\n\t    at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:333:32)\n\t    at Zone.run (node_modules/zone.js/dist/zone.js:126:43)\n\t    at Object.<anonymous> (node_modules/zone.js/dist/jasmine-patch.js:102:34)\n\t    at eval (node_modules/@angular/core/bundles/core-testing.umd.js:96:21)\n\t    at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:334:26)\n\t    at AsyncTestZoneSpec.onInvoke (node_modules/zone.js/dist/async-test.js:49:39)\n\t    at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:76:39)\n\t    at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:333:32)\n\t    at Zone.run (node_modules/zone.js/dist/zone.js:126:43)\n\t    at AsyncTestZoneSpec.eval [as _finishCallback] (node_modules/@angular/core/bundles/core-testing.umd.js:91:29)\n\t    at node_modules/zone.js/dist/async-test.js:38:31\n\t    at ZoneDelegate.invokeTask (node_modules/zone.js/dist/zone.js:367:31)\n\t    at Zone.runTask (node_modules/zone.js/dist/zone.js:166:47)\n\t    at ZoneTask.invoke (node_modules/zone.js/dist/zone.js:420:38)\n\t    at data.args.(anonymous function) (node_modules/zone.js/dist/zone.js:1581:29)\n\n\nThat said, it does not happen with any ElementType... I'll need to put some more time trying to isolate the root cause... I'll reopen a proper ticket once I do.\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emilio-martinez", "authorAssociation": "NONE", "createdAt": "2017-05-19T08:17:44Z", "contents": "@roni-frantchi I found this kind of issue as well doing this type of test:\nexpect(componentInstance).toEqual(jasmine.any(ComponentClass));\nThat would give me RangeError: Invalid string length. However, in my case, neither expression evaluates to null. Removing the jasmine.any inside the toEqual seems to be what did it for me; I was able to \"work around\" this issue like so:\nexpect(componentInstance instanceof ComponentClass).toBeTruthy()\nThat said, it makes me think that somehow Jasmine is running out of memory? The expressions are individually calculated correctly; it's just equality + .any that messes it up.\nFYI, I am also using Angular (4.1.3).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-19T20:45:02Z", "contents": "@emilio-martinez There were some issues like that invalid string length, but they should be fixed in the most recent 2.6.2 release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emilio-martinez", "authorAssociation": "NONE", "createdAt": "2017-05-21T05:22:07Z", "contents": "@slackersoft Upgraded to jasmine-core 2.6.2. Still getting the same error. Not sure how helpful it might be, but below is the stack trace that I'm getting:\nUncaught RangeError: Invalid string length\n    at Object.<anonymous> (http://localhost:9999/base/src/test.ts:34288:45)\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1154)\n    at ProxyZoneSpec.onInvoke (http://localhost:9999/base/src/test.ts:28429:2160)\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1050)\n    at Zone.run (http://localhost:9999/base/src/test.ts:28477:2925)\n    at Object.<anonymous> (http://localhost:9999/base/src/test.ts:28363:131)\n    at http://localhost:9999/base/src/test.ts:6511:46\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1154)\n    at AsyncTestZoneSpec.onInvoke (http://localhost:9999/base/src/test.ts:28268:156)\n    at ProxyZoneSpec.onInvoke (http://localhost:9999/base/src/test.ts:28429:2040)\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1050)\n    at Zone.run (http://localhost:9999/base/src/test.ts:28477:2925)\n    at AsyncTestZoneSpec._finishCallback (http://localhost:9999/base/src/test.ts:6510:13)\n    at http://localhost:9999/base/src/test.ts:28265:139\n    at ZoneDelegate.invokeTask (http://localhost:9999/base/src/test.ts:28493:2120)\n    at Zone.runTask (http://localhost:9999/base/src/test.ts:28482:417)\n    at ZoneTask.invoke (http://localhost:9999/base/src/test.ts:28495:975)\n    at timer (http://localhost:9999/base/src/test.ts:28627:248)\n\nAlso worth noting is that I get a [Violation] 'setTimeout' handler took 14605ms warning in \"Verbose\" log mode in the Chrome Dev Tools. I believe that's because whatever's causing the error takes a bit before ending up in the RangeError.\nThe at Object.<anonymous> [...]/test.ts:34288:45 reference at the very top refers to exactly the point where .toEqual is called. In my tests, I have only two instances of .toEqual(jasmine.any(ComponentClass), both of which fail in the same manner. Changing to the instanceof approach not only removes the error but also doesn't cause a delay, therefore avoiding the Violation warning.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-23T21:04:52Z", "contents": "@emilio-martinez can you please open a new issue for this error, as it doesn't seem to be related to using toEqual with null or undefined.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emilio-martinez", "authorAssociation": "NONE", "createdAt": "2017-05-24T09:44:46Z", "contents": "@slackersoft done!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1324, "url": "https://github.com/jasmine/jasmine/issues/1324", "title": "2.6.0 causes regression of 1188", "contents": "Since updating to Jasmine 2.6.0, we have noticed the same issue described here: #1188\nThis appears to be a regression; downgrading to 2.5.2 resolved it for us.\nSeems to have been caused by the fix (c0a9d20) either not being applied to the 2.6 branch, or being reverted.", "createdAt": "2017-04-25T12:45:25Z", "updatedAt": "2017-04-25T20:48:54Z", "closedAt": "2017-04-25T20:48:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "davidje13", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "davidje13", "company": null}, {"login": "Darkein", "company": null}, {"login": "dougludlow", "company": "@ImagineLearning"}], "comments_count": 2, "comments_data": [{"authorLogin": "Darkein", "authorAssociation": "NONE", "createdAt": "2017-04-25T13:06:23Z", "contents": "same problem for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dougludlow", "authorAssociation": "NONE", "createdAt": "2017-04-25T15:21:33Z", "contents": "Seeing the same thing. My CI build suddenly started failing on several tests with the following error:\nTypeError: allKeys[i].match is not a function\n\nDowngrading to 2.5.2 resolves the issue for us as well.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1325, "url": "https://github.com/jasmine/jasmine/issues/1325", "title": "2.6.0 Breaks CSP in Atom", "contents": "EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"script-src 'self'\"\nUziTech/atom-jasmine2-test-runner#14", "createdAt": "2017-04-25T15:18:02Z", "updatedAt": "2017-04-26T20:36:47Z", "closedAt": "2017-04-26T20:36:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "UziTech", "company": "UziTech"}], "comments_count": 2, "comments_data": [{"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-25T18:37:23Z", "contents": "This is almost certainly because of /src/core/Spy.js#L24\nAtom's preferred way to deal with eval is by using loophole.allowUnsafeEval which I haven't been able to get to work.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-25T19:25:10Z", "contents": "It seems that loophole.allowUnsafeEval won't work because it calls vm.runInThisContext with the eval args and it doesn't have access to the local scope, which wrapper needs in order to call spy", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1327, "url": "https://github.com/jasmine/jasmine/issues/1327", "title": "Karma - Disconnected, because no message in 10000 ms.", "contents": "So after I did a rm -r node_modules;npm install today, my jasmine tests (ran via karma) started failing with a Disconnected, because no message in 10000 ms.\nAfter half a day debugging... it all came down to jasmine-core causing the issue. After you guys upped your version to 2.6.0 I started getting the Disconnected, because no message in 10000 ms. message).\nSo I did a binary commit search until I found the commit that broke my test build. This is the commit 2f01f64, which is part of the 2.6.0 release\nBefore this commit, my karma tests run just fine.\nFor now my solution was to go back jasmine-core@2.5.2 in my package.json without any carret or tilde.\nSeems some people in here karma-runner/karma-phantomjs-launcher#126 are having issues the last days, not sure, but it might be related to the commit mentioned:\n\nWhat version are you using?\nThese are the dependencies in my package.json:\n\n\"devDependencies\": {\n    \"async\": \"^1.5.1\",\n    \"beeper\": \"^1.1.0\",\n    \"del\": \"^1.2.0\",\n    \"eslint\": \"^2.13.1\",\n    \"eslint-plugin-angular\": \"^0.11.0\",\n    \"eslint-plugin-jasmine\": \"^1.8.0\",\n    \"eslint-plugin-lodash\": \"^1.9.0\",\n    \"glob\": \"^6.0.3\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-angular-templatecache\": \"^1.7.0\",\n    \"gulp-autoprefixer\": \"^2.3.1\",\n    \"gulp-clean-css\": \"^2.0.7\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-eslint\": \"^2.1.0\",\n    \"gulp-filter\": \"^3.0.0\",\n    \"gulp-help\": \"^1.6.0\",\n    \"gulp-htmlhint\": \"^0.3.1\",\n    \"gulp-if\": \"^1.2.5\",\n    \"gulp-imagemin\": \"^2.3.0\",\n    \"gulp-inject\": \"^1.5.0\",\n    \"gulp-json-editor\": \"^2.2.1\",\n    \"gulp-load-plugins\": \"^1.0.0-rc.1\",\n    \"gulp-minify-html\": \"^1.0.4\",\n    \"gulp-ng-annotate\": \"^1.1.0\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-plumber\": \"^1.0.1\",\n    \"gulp-print\": \"^1.1.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-replace\": \"^0.5.3\",\n    \"gulp-rev\": \"^5.1.0\",\n    \"gulp-rev-replace\": \"^0.4.2\",\n    \"gulp-sass\": \"^2.1.0\",\n    \"gulp-shell\": \"^0.4.2\",\n    \"gulp-size\": \"^2.1.0\",\n    \"gulp-sourcemaps\": \"^1.5.2\",\n    \"gulp-symlink\": \"^2.1.2\",\n    \"gulp-uglify\": \"^1.2.0\",\n    \"gulp-uncss\": \"^1.0.2\",\n    \"gulp-useref\": \"^1.2.0\",\n    \"gulp-util\": \"^3.0.6\",\n    \"gulp-watch\": \"^4.3.5\",\n    \"gulp-zip\": \"^3.0.2\",\n    \"jasmine-ajax\": \"^3.2.0\",\n    \"jasmine-core\": \"^2.4.1\",\n    \"karma\": \"^1.3.0\",\n    \"karma-beep-reporter\": \"^0.1.4\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-coffee-preprocessor\": \"^1.0.1\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-firefox-launcher\": \"^1.0.0\",\n    \"karma-growl-reporter\": \"^1.0.0\",\n    \"karma-html2js-preprocessor\": \"^1.1.0\",\n    \"karma-jasmine\": \"^1.0.2\",\n    \"karma-junit-reporter\": \"^1.1.0\",\n    \"karma-ng-html2js-preprocessor\": \"^1.0.0\",\n    \"karma-phantomjs-launcher\": \"^1.0.2\",\n    \"karma-requirejs\": \"^1.1.0\",\n    \"karma-script-launcher\": \"^1.0.0\",\n    \"karma-spec-reporter\": \"0.0.26\",\n    \"lazypipe\": \"^1.0.1\",\n    \"lodash\": \"^3.10.1\",\n    \"map-stream\": \"0.0.6\",\n    \"node-notifier\": \"^4.2.3\",\n    \"phantomjs\": \"^2.1.7\",\n    \"require-dir\": \"^0.3.0\",\n    \"requirejs\": \"^2.1.18\",\n    \"run-sequence\": \"^1.1.2\",\n    \"vinyl-paths\": \"^1.0.0\",\n    \"yargs\": \"^3.15.0\",\n    \"bower\": \"^1.8.0\"\n  },\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nRunning karma with phanthomjs@2.1.7 on a OSX Sierra machine, but it is also happening in a unix machine\nHow are you running Jasmine (standalone, npm, karma, etc)?\nkarma\n\nThanks!!!", "createdAt": "2017-04-25T18:17:18Z", "updatedAt": "2019-06-28T10:12:34Z", "closedAt": "2017-06-15T21:30:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cafesanu", "authorAssociation": "NONE", "participants_count": 45, "participants_data": [{"login": "cafesanu", "company": null}, {"login": "jgornick", "company": null}, {"login": "niemyjski", "company": "CodeSmith Tools, LLC."}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "arshaw", "company": null}, {"login": "firebluetom", "company": null}, {"login": "ritik-kumar427", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "davidjgoss", "company": "@whiteclarkegroup "}, {"login": "asafbe", "company": null}, {"login": "fluffynuts", "company": "Codeo"}, {"login": "dgsmith2", "company": null}, {"login": "Narretz", "company": null}, {"login": "maikdiepenbroek", "company": null}, {"login": "etiennetalbot", "company": "Poka"}, {"login": "jasonayre", "company": null}, {"login": "olivierbelzile", "company": null}, {"login": "JLoskota", "company": null}, {"login": "aj-dev", "company": "@evbox "}, {"login": "raztus", "company": null}, {"login": "petebacondarwin", "company": "Angular"}, {"login": "meriturva", "company": null}, {"login": "robisim74", "company": null}, {"login": "pierrettemugisha", "company": null}, {"login": "ruslan-molodyko", "company": null}, {"login": "alvipeo", "company": null}, {"login": "mayankgupta0510", "company": null}, {"login": "timbru31", "company": "@sinnerschrader @Dustplanet "}, {"login": "jtc10005", "company": null}, {"login": "elkin0727", "company": null}, {"login": "peterheard01", "company": "Logic Room "}, {"login": "johannesjo", "company": null}, {"login": "yurifw", "company": null}, {"login": "leveque", "company": null}, {"login": "QHQuach", "company": null}, {"login": "EdmondChuiHW", "company": null}, {"login": "dcleao", "company": "Hitachi Vantara"}, {"login": "mderazon", "company": null}, {"login": "sgravrock", "company": null}, {"login": "13it235", "company": null}, {"login": "winni4eva", "company": "Kudobuzz"}, {"login": "opsaharan01", "company": null}, {"login": "StrictLine", "company": "StrictLine e.U."}, {"login": "DoubleB123", "company": null}, {"login": "joeyhub", "company": null}], "comments_count": 65, "comments_data": [{"authorLogin": "jgornick", "authorAssociation": "NONE", "createdAt": "2017-04-25T18:49:57Z", "contents": "@cafesanu I can also verify that we are seeing this issue. Downgrading to 2.5.2 is our current workaround.", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "niemyjski", "authorAssociation": "NONE", "createdAt": "2017-04-25T22:35:07Z", "contents": "I upgraded to 2.6.0 and I had one of these messages but it's working (I've been having lots of these issues for the past year) https://ci.appveyor.com/project/Exceptionless/exceptionless-ui/build/2.6.1117", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2017-04-26T07:27:13Z", "contents": "Looks like I have the same issue using KarmaJS, PhantomJS and Jasmine. When I have single run set to false, the first run works, but after a file change karma emits the \"START:\" text, and then does nothing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "arshaw", "authorAssociation": "NONE", "createdAt": "2017-04-26T17:09:14Z", "contents": "I had the same problem and downgrading to 2.5.2 to fix the problem. I kept my karma and phantomJS deps the same, which gives me more confidence that jasmine is the cause.\nI dug a bit deeper, and notice that time setTimeout calls in my tests are taking a really long time. For example a setTimeout of 200ms is taking > 10 seconds.\nCould it be that jasmine is now overzealous with registering its own setTimeouts and thusly the setTimeouts within the actual tests are being penalized?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "firebluetom", "authorAssociation": "NONE", "createdAt": "2017-04-27T23:03:06Z", "contents": "I have the same issue. Downgraded to 2.5.2 as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ritik-kumar427", "authorAssociation": "NONE", "createdAt": "2017-04-28T08:56:06Z", "contents": "@cafesanu Thanks a tonne! I was stuck with the same issue for almost 8 hours. Your comment here was difficult to find but saved me a lot of time:\nkarma-runner/karma-phantomjs-launcher#126\nDowngrading to 2.5.2 fixed my CI process as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-01T20:47:13Z", "contents": "I am having a very hard time reproducing the slowdown with just plain Jasmine. All of the test cases I've tried with 10000 specs seem to actually run in about half the time in 2.6 compared to 2.5.2. Even with a fairly large object comparison that would trigger the new diff builder code, I'm seeing speed improvements in 2.6.\nThe new things in 2.6 that seem speed related are:\n\nSeparate clear stack and run it after each spec\nMake toEqual matcher report the difference between objects\nWhen the HtmlReporter has a 'spec' query param, the spec list only shows matching specs/suites\n\nIt seems most likely that it's the HtmlReporter change if you're seeing it be unresponsive and disconnect, but I'm not seeing a whole lot of slowdown even with a fairly deep (10 describes) tree.\nAfter getting 2.6.1 out, this has been my primary focus in the time I have to work on Jasmine, but I haven't really been able to make any headway. I'd be happy to review a Pull Request that can point to something Jasmine is doing to cause this error when running under Karma.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "niemyjski", "authorAssociation": "NONE", "createdAt": "2017-05-02T20:48:48Z", "contents": "@slackersoft my project seems to do it quite a bit... github.com/exceptionless/Exceptionless.ui", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "davidjgoss", "authorAssociation": "NONE", "createdAt": "2017-05-04T09:57:32Z", "contents": "We've been having the same issue - running with jasmine-core@2.5.2 works fine, running with jasmine-core@^2.6.0 produces the issue.\nNote that it only happens with projects with a lot of tests where they take more time than 10 seconds - the problem seems to be with the reporter mechanism that communicates back from the browser to the runner periodically, but the overall callback at the end is perfectly fine.\nThe real kicker, though, is that we only see this issue in the recently released Chrome 58 - machines (whether they be dev laptops or CI agents) that are still on Chrome 57 don't get the issue. The timing of when this issue was reported would seem to line up with that too.", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "asafbe", "authorAssociation": "NONE", "createdAt": "2017-05-07T15:17:20Z", "contents": "We can also see the browser disconnected right after upgrading Chrome to version 58. We're not using jasmine at all. Is someone knows about any fix for that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-05-09T08:21:54Z", "contents": "I was going to report this as a new issue, but have stumbled across this one, so placing my info here (with a workaround):\nNot too long ago, after clearing out an re-installing node_modules, we noticed this behavior when running through Karma.\nExtending the overall timeout showed that the output from the first test result would show, then complete output silence and then all test output (from about 450 tests) suddenly barfed out.\nThis was observed with both the standard progress reporter as well as the spec and mocha (3rd-party) reporters.\nWe've narrowed this down to an upgrade from 2.5.2 to 2.6.1 (though the issue can also be seen with 2.6.0).\nIt appears as if the main JS thread is locked up (permanently busy), preventing console flushes and the overall Karma process views the radio silence as an indicator that the test suite overall has failed. Stepping through code (or adding debugger points in tests) shows that tests are being run during this time period -- simply no output is done.\nI've also managed to work around the issue with the following global beforeEach:\nbeforeEach(function(done) {\n  window.setTimeout(function() {\n    done();\n  }, 0);\n});\n\nSince this seems to be an async/sync issue, this may also relate to #1342 and #1241 (especially since the last is what I see on my Karma run if I set the timeout really high: the first test outputs, then all output is buffered until the end of the entire test run when the whole lot is barfed out at once).", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-05-09T08:23:19Z", "contents": "Also, we see this behavior on Chrome and PhantomJS. Whilst Chrome has been updated to 58, PhantomJS is pretty-much as it was, so I highly doubt that the problem is specific to a Chrome update.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asafbe", "authorAssociation": "NONE", "createdAt": "2017-05-09T08:53:09Z", "contents": "Update:\nUpgrading Chrome to version 59 (beta) resolve the issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dgsmith2", "authorAssociation": "NONE", "createdAt": "2017-05-09T12:34:31Z", "contents": "I downgraded to 2.5.2 and am running Chrome version 59.  Neither of which address the problem.  Adding the global beforeEach mentioned by @fluffynuts does.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Narretz", "authorAssociation": "NONE", "createdAt": "2017-05-10T09:53:34Z", "contents": "I think I'm seeing the same on AngularJS core on Travis - Safari 8 and IE 9 and 10 exhibit the \"Disconnected, because no message in 120000 ms.\" problem. Works with FF53, Chrome 58 and Edge 14, though.\nHere's the travis log: https://travis-ci.org/angular/angular.js/jobs/230435715", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maikdiepenbroek", "authorAssociation": "NONE", "createdAt": "2017-05-10T11:22:48Z", "contents": "Downgrading to 2.5.2 seems to resolve the issue \ud83d\udc4d", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "etiennetalbot", "authorAssociation": "NONE", "createdAt": "2017-05-18T12:27:45Z", "contents": "2.6.2 didn't solve the problem for me \ud83d\ude1e. Still having the same issue. I'm using PhantomJS and Karma 1.7.0\nWill downgrade again to 2.5.2", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "jasonayre", "authorAssociation": "NONE", "createdAt": "2017-05-23T18:51:08Z", "contents": "Try @fluffynuts 's workaround above if you haven't (assuming you ran into the issue after an upgrade to 2.6.X), as it worked for me and was hard to see through all the static.\n#1327 (comment)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "etiennetalbot", "authorAssociation": "NONE", "createdAt": "2017-05-23T18:56:23Z", "contents": "Thank, I appreciate! But I will still use 2.5.2 as long as it's not fixed... I'm flooded in work right now and I know I'll forget to remove the workaround when the issue is fixed, so I prefer to keep 2.5.2.\nBy the way, shouldn't this issue still be opened?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "olivierbelzile", "authorAssociation": "NONE", "createdAt": "2017-05-23T19:22:39Z", "contents": "Using @fluffynuts fix works for me but it doubles the time it takes to run our tests. I think this should be reopened and will also be using 2.5.2 until a better solution is found.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-05-23T19:55:11Z", "contents": "Yeah, this should totally be reopened. I may have a workaround (hackaround, more like), but I've also downgraded to 2.5.2. Got bigger fish to fry than if my test framework wants to behave on 600+ (and climbing) tests, all using possibly the slowest ui framework I've had the misfortune to use to date: Polymer.\nI have the latest Chrome - it doesn't help. And I need phantom for ci builds, so there's that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2017-05-24T08:54:25Z", "contents": "I'm also still seeing the issue with 2.6.2, however now instead of always failing, sometimes builds run, other times builds fail. So it does seem to have affected it somewhat.\nHowever, when I run karma using singleRun: false (which re-runs specs automatically after code change), the first run most often goes fine, but the second run is always stuck. Even worse, it doesn't even log the \"disconnected\" message. It just stays stuck until i Ctrl+C out of it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JLoskota", "authorAssociation": "NONE", "createdAt": "2017-06-02T15:26:34Z", "contents": "As a workaround, we made all of our beforeEachStatements use 'angular/core/testing/async'\nThis:\nbeforeEach(() => {\nbecame this:\nbeforeEach(async(() => {", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-07T21:04:46Z", "contents": "We believe this should be fixed with the 2.6.3 release, but the only reproduction steps we were able to find was when async specs called done synchronously, so it may not fix all users.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "etiennetalbot", "authorAssociation": "NONE", "createdAt": "2017-06-08T00:50:46Z", "contents": "I'm unfortunately one of the \"not all users\" that this didn't help \ud83d\ude1e\nSame behaviour... Disconnected after 1 min 35 secs when testing my Angular 4 app (about 2000 tests).\nThanks for all the continuous efforts, though. It's really appreciated \ud83d\ude0a\nI'll just keep using v2.5.2 for now", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2017-06-08T07:34:24Z", "contents": "2.6.3 seems to have fixed our problems, thanks guys!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-06-08T08:46:21Z", "contents": "2.6.3 still doesn't fix our problems )': Still no output on Chrome or\nPhantomJS, though if I launch with Chrome, I can pause execution and I can\nsee that specs are being run -- just no output.\n\nIf it helps, more info about our environment:\n* I'm manually kicking off by hijacking window.__karma__.start, since I\nhave to wait for Polymer's webcomponents.js to get itself in order --\notherwise subsequent html imports don't work. I'm not sure if that\ninterferes somehow, but I would have expected it not to, since that's\nsomething that would have happened automatically before Jasmine actually\ngot involved.\n* We're writing Typescript -- tests are run for CI by building and running\nthe JS artifacts. For the dev-cycle, we use karma-typescript.\n* When running against build Javascript files, the only output I see is\nfrom my test-setup script (getting Polymer ready), until all tests complete\nand then all results are spewed to screen\n* When running with karma-typescript, I see one test runs (the status line\nincrements to 1 / 863), output hangs, and when complete, the run figure\njumps up to the final value.\n\u2026\nOn 8 June 2017 at 09:34, Jaap Broekhuizen ***@***.***> wrote:\n 2.6.3 seems to have fixed our problems, thanks guys!\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#1327 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AEc_nJljp-HAcvWA6nG8JdurF0iPibubks5sB6QMgaJpZM4NH3h5>\n .\n\n\n-- \n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\nIf you say that getting the money is the most important thing\nYou will spend your life completely wasting your time\nYou will be doing things you don't like doing\nIn order to go on living\nThat is, to go on doing things you don't like doing\n\nWhich is stupid.\n\n- Alan Watts\nhttps://www.youtube.com/watch?v=-gXTZM_uPMY\n\n*Quidquid latine dictum sit, altum sonatur. *", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aj-dev", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-06-09T08:37:51Z", "contents": "Still doesn't work. Seeing \"Disconnected, because no message in 10000 ms.\" with v2.6.3", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "raztus", "authorAssociation": "NONE", "createdAt": "2017-06-09T16:52:43Z", "contents": "We had this issue with Chrome 58 on Windows 10. Chrome 58 on Windows 8.1 did not have the issue. Downgrading to Chrome 57 on Windows 10 works around the issue, as does the workaround proposed by @fluffynuts above. Note that either of these workarounds are independent--i.e., we did not need the setTimeout workaround in Chrome 57.\nWe're on very old versions of the libraries (below), but even upgrading all of these, and Node.js, didn't help:\n    \"jasmine-core\": \"^2.3.3\",\n    \"karma-jasmine\": \"^0.3.5\",\n    \"karma-chrome-launcher\": \"^0.1.11\",", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "petebacondarwin", "authorAssociation": "NONE", "createdAt": "2017-06-14T14:10:58Z", "contents": "We did some analysis of the problem in the angular.io website: here are the results and the workaround, which is basically what has been suggested here already.\nangular/angular#17498", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-16T20:53:23Z", "contents": "Jasmine should now break into a real setTimeout every 10 clearStacks to allow the CPU to do other things.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "meriturva", "authorAssociation": "NONE", "createdAt": "2017-06-19T09:19:51Z", "contents": "@petebacondarwin have you tried 2.6.4 version? Latest version still doesn't fix issue on our side.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-21T18:58:59Z", "contents": "Hmmmm, Jasmine 2.6.4 should actually call setTimeout more often than the 2.5 and previous releases. The counter used to be 20, and should now only be 10. The only other difference is that Jasmine will now try to use setImmediate or MessageChannels if available instead of directly tail-calling the next thing.\nI wonder if there isn't some angular or karma thing that is causing the issue, possibly with how it is interacting with/patching Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-06-22T04:13:07Z", "contents": "2.6.4 does work better for us than other 2.6.x releases (karma, polymer, around 1000 tests) but the nature of the fix seems quite obvious: with the progress reporter, one sees the run test count generally incrementing by 10 instead of by one, ie output is still blocked until a setTimeout round. Since we're (unfortunately) using polymer, I'd rule out angular.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "robisim74", "authorAssociation": "NONE", "createdAt": "2017-06-22T15:18:51Z", "contents": "@slackersoft There are applications where the tests pass and others don't pass. There are environments where tests pass and others don't. See for example the simple test of this library: https://travis-ci.org/robisim74/angular-library-starter Travis runs smoothly, instead locally on Windows 10 it gets the famous message. But I don't think the problem is just Jasmine: there were recent updates (Angular, Npm, Windows, Chrome) because of which this problem has appeared from one day to the next.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pierrettemugisha", "authorAssociation": "NONE", "createdAt": "2017-06-27T13:23:49Z", "contents": "I am having the same issue running karma start and starting Chrome browser. I was using version 2.5.2, and thought that I can upgrade to the latest version, but still getting the same issue. And I started wondering if it because I am using many JSON files in my tests to provide testing data. If so, is there a limit of the file size that has to be read?\nOn the other hand, I don't think that that is the reason behind it, as I was killing the process, and restarting it, and it was showing the same message before it got to the tests that require to read json files. The only solution I have so far is to run karma start --single-run. I usually don't use the --single-run option, but leave karma start running to follow the changed files \"live\".", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T00:27:19Z", "contents": "If this is happening only when using Karma in multi-run mode (single-run = false), then it seems like it might be something to bring up with karma. If using single-run works fine, it's possible something about how karma or karma-jasmine are re-executing the Jasmine environment that is causing the issue.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "ruslan-molodyko", "authorAssociation": "NONE", "createdAt": "2017-07-29T10:36:58Z", "contents": "If you are using angular2/4, be careful using something like this:\nexpect(fixture.componentInstance).toBe(...);\nexpect(hostFixture.componentInstance.childComponent).toBe(...);\n\nwhere childComponent got by @ViewChild/@ContentChild\n\nbecause a browser crashes and you get an error:\nDisconnected, because no message in 10000 ms.\nThe explanation you can find here: Crashing browsers with Angular2 DebugElement", "reactions_count": 9, "reactions_data": ["HOORAY", "HEART", "THUMBS_UP", "HOORAY", "HEART", "HOORAY", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-31T21:16:50Z", "contents": "Jasmine's pretty printing behavior for objects with a lot of keys should be better now in 2.7. Jasmine should only print the first MAX_PRETTY_PRINT_ARRAY_LENGTH keys from any given object, similar to arrays, sets, and maps.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "alvipeo", "authorAssociation": "NONE", "createdAt": "2017-08-29T23:44:50Z", "contents": "Same here with Chrome 60 on Windows 10... karma 1.7.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mayankgupta0510", "authorAssociation": "NONE", "createdAt": "2017-09-01T06:24:20Z", "contents": "I am also facing similar kind of issue,  Disconnected, because no message in 199000 ms.\nChrome : 56.0.2924, we are using mocha framework and mocha timeout is 200000.\nmy package.json dependencies are\n\"karma\": \"^1.1.2\",\n\"karma-babel-preprocessor\": \"6.0.1\",\n\"karma-chrome-launcher\": \"1.0.1\",\n\"karma-coverage\": \"^1.1.1\",\n\"karma-coverage-allsources\": \"0.0.4\",\n\"karma-firefox-launcher\": \"^1.0.0\",\n\"karma-html-reporter\": \"0.2.7\",\n\"karma-ie-launcher\": \"^1.0.0\",\n\"karma-junit-reporter\": \"1.1.0\",\n\"karma-mocha\": \"1.1.1\",\n\"karma-mocha-reporter\": \"2.0.4\",\n\"karma-openui5\": \"0.2.1\",\n\"karma-requirejs\": \"1.0.0\",\n\"lodash\": \"3.10.1\",\n\"mkdirp\": \"0.5.1\",\n\"mocha\": \"2.4.4\",\n\"mustache\": \"2.0.0\",\n\"npm-check-updates\": \"2.6.2\",\ncan anyone help me.\nThanks,\nMayank", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "timbru31", "authorAssociation": "NONE", "createdAt": "2017-09-13T10:24:00Z", "contents": "While the problem itself is not fixed, we have a good workaround with our GitLab CI setup, because we automatically retry failed jobs. Travis and e.g. Jenkins have support for this feature, too.\nThis might help some people and save some time, since no manual retry action is required:\n\nGitLab CI: https://docs.gitlab.com/ee/ci/yaml/README.html#retry\nTravis CI: https://docs.travis-ci.com/user/common-build-problems/#travis_retry\nJenkins: https://wiki.jenkins.io/display/JENKINS/Naginator+Plugin", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "jtc10005", "authorAssociation": "NONE", "createdAt": "2017-09-28T19:28:00Z", "contents": "I know I'm late to this and hate to comment on a closed ticket, but in case anyone else comes here looking...  I resolved this by adding two configurations to my karma.config file\n       /** *  maximum number of tries a browser will attempt in the case of a disconnection */ browserDisconnectTolerance: 2,\nand\n/** * How long will Karma wait for a message from a browser before disconnecting from it (in ms). */ browserNoActivityTimeout: 50000,\nhttps://github.com/karma-runner/karma/blob/master/docs/config/01-configuration-file.md#browsernoactivitytimeout", "reactions_count": 107, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY"]}, {"authorLogin": "elkin0727", "authorAssociation": "NONE", "createdAt": "2017-09-29T21:38:16Z", "contents": "Thanks @jtc10005 for the suggestion.\nThe property \"browserNoActivityTimeout\" saved me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "peterheard01", "authorAssociation": "NONE", "createdAt": "2017-11-08T09:09:50Z", "contents": "@jtc10005  thanks for the tip on the config values that sorted it for me. I am running Angular 5 with CLI.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johannesjo", "authorAssociation": "NONE", "createdAt": "2017-11-25T14:51:34Z", "contents": "@jtc10005  that's unfortunately not a real fix. In many case PhantomJS shouldn't be as slow as it is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-11-25T15:06:19Z", "contents": "Yeah, waiting 50 seconds for a response isn't a fix - it's a band-aid. If you're dealing with a crappy framework like polymer, it's just a number you'll keep increasing until dev is complete or, like I just did, devise a \"divide and conquer\" mechanism for running tests in batches (and optionally, in parallel).\nI'm not seeing the original issue on the latest Jasmine, so do try an update. Give up on band-aids like longer timeouts.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fluffynuts", "authorAssociation": "NONE", "createdAt": "2017-11-25T15:08:29Z", "contents": "Also, forget phantom js, now that chrome headless has come to all platforms. Phantom is not actively maintained and not a good platform to run tests on any more (imo) since it diverges from real-world browser experiences in its behavior.", "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "yurifw", "authorAssociation": "NONE", "createdAt": "2018-01-09T20:39:23Z", "contents": "just happened to me with chrome 63.0.3239.132 (64 bits) in a small project with 13 specs. Switched to Firefox and it worked fine.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "leveque", "authorAssociation": "NONE", "createdAt": "2018-01-12T16:12:12Z", "contents": "Headless firefox, @yurifw ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yurifw", "authorAssociation": "NONE", "createdAt": "2018-01-12T19:31:36Z", "contents": "No, didn't set any flags to run it headless", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "QHQuach", "authorAssociation": "NONE", "createdAt": "2018-02-02T02:17:46Z", "contents": "Having same issue here with current Chrome 63.0.3239.132 64-bit. Switching over to Firefox 57.0.4 32-bit works as suggested.  jasmine-core=2.5.2, karma=1.3.0.\nAny idea? I guess have to wait and try again in the next Chrome update?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Narretz", "authorAssociation": "NONE", "createdAt": "2018-02-02T07:35:07Z", "contents": "@QHQuach Both Karma and jasmine have newer releaes than you listed. You should try updating jasmine / and or karma runner to latest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "QHQuach", "authorAssociation": "NONE", "createdAt": "2018-02-02T15:17:14Z", "contents": "Looks like most recent Chrome 64.0.3282.140 64-bit resolves the issue.\nBTW, tried with update of karma runner (but not yet jasmine) did not help. It is worth a try for someone as @Narretz suggested if you want to stay on older Chrome version.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "EdmondChuiHW", "authorAssociation": "NONE", "createdAt": "2018-03-07T11:12:17Z", "contents": "beforeEach(async( () => {\n    jasmine.DEFAULT_TIMEOUT_INTERVAL = 999999999;\n  }));\n\n  it(\"should display asset picker\", (done: () => any) => {\n    let dialogRef = dialog.open(CreateAssetWizardDialogComponent);\n    setTimeout(() => {\n      dialogRef.close();\n      done();\n    }, 999999999);\n  });\n\nSo\u2026 the culprit was not this issue\u2026 it's a collaborator who checked this code in that broke all the tests\ud83d\ude02", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dcleao", "authorAssociation": "NONE", "createdAt": "2018-03-28T02:38:02Z", "contents": "Happens to me, on karma 2.0.0, jasmine-core 3.1.0, Chrome 65 or Phantom JS ...  :-(", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dcleao", "authorAssociation": "NONE", "createdAt": "2018-03-28T21:05:19Z", "contents": "This might be the cause for some of you... I found that the statement in my code that \"broke the connection\" was: document.domain = document.domain... Now, something has changed in karma or jasmine, that made it sensitive to this, as it used to work before.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mderazon", "authorAssociation": "NONE", "createdAt": "2018-04-08T06:57:56Z", "contents": "I see a lot of solutions to this in this discussion, but I still have no idea why this is happening.\n@sgravrock since you've closed this, can you please explain what is the solution ? For now I have downgraded but it's not a good solution.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-08T19:05:07Z", "contents": "@mderazon It's difficult to give a single answer because this error message could potentially be caused by a broad set of underlying causes including bugs in Jasmine, bugs in Karma, and bugs in your test suite. We think that most instances of it were caused by Jasmine's internal state being corrupted when uncaught errors occurred in between specs. That was fixed in b1e97cf and the fix was released in 2.6.2. Users' comments in this thread since then hint at other possible causes such as incompatibility between certain combinations of Karma and Chrome. It's also possible that there are still bugs in how Jasmine handles errors that occur when no spec is running. I'm not aware of any, but that area has been fertile ground for bugs and I can't say for sure that we've gotten it 100% right.\nHere's the basic approach that I would suggest. First the easier stuff that seems to have worked for most people:\n\nUpdate Jasmine to 2.99.x (or 3.x once karma-jasmine releases support for it).\nUpdate Karma, karma-jasmine, and Chrome (if that's what you're using) to the latest versions.\nCheck the run time of your specs and make sure they're all completing in significantly less time than whatever the Karma's browserNoActivityTimeout setting is set to. Also make sure that browserNoActivityTimeout is set to something greater than Jasmine's DEFAULT_TIMEOUT_INTERVAL setting.\n\nIf that doesn't fix it, you've got some digging to do. Here's what I'd suggest doing, in increasing order of difficulty:\n\nLook at each error being logged to the browser console during a test run. Fix as many as possible. For each one that can't be fixed, prove to yourself that the error occurs while the test that causes it is still running, i.e. before the done callback is called or the promise returned from  the test is resolved.\nTry to track down the spec (or smallest possible set of specs) that's causing the problem by disabling blocks of specs using xit/xdescribe until the error goes away. Since these problems can be order-dependent, it can help to disable randomization or set a specific random seed.\nIf you've been able to narrow the problem down to a particular spec, review both the spec and the code under test to make sure that none of your code runs after the spec tells Jasmine that it's done. Pay particular attention to event handlers and callbacks that aren't really relevant to the spec in question but might be running anyway.\nIf you aren't able to narrow it down, review all of your async specs as described in the previous step.\n\nI hope this helps.", "reactions_count": 10, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "13it235", "authorAssociation": "NONE", "createdAt": "2018-11-20T12:25:30Z", "contents": "just happened to me with chrome 63.0.3239.132 (64 bits) in a small project with 13 specs. Switched to Firefox and it worked fine.\n\nThis worked for me", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "winni4eva", "authorAssociation": "NONE", "createdAt": "2019-01-17T08:50:56Z", "contents": "Faced this issue because i had a call to window.location.assign() in my tests", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "opsaharan01", "authorAssociation": "NONE", "createdAt": "2019-04-08T14:11:22Z", "contents": "Faced this issue because i had a call to window.location.assign() in my tests\n\n@winni4eva  I am facing same problem as I have used a legacy JS library which is required for my project and for that I have to use window object, If I don't use window then karma does fail during compilation it.\nPlease let me know if you get any heck for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "StrictLine", "authorAssociation": "NONE", "createdAt": "2019-04-17T17:11:09Z", "contents": "It appears as if the main JS thread is locked up (permanently busy), preventing console flushes and the overall Karma process views the radio silence as an indicator that the test suite overall has failed. Stepping through code (or adding debugger points in tests) shows that tests are being run during this time period -- simply no output is done.\n\nI confirm that @fluffynuts has some good assumptions. I've come across the issue in VS Code with Powershell terminal. As soon as I exited the current PS terminal, and opened a new one, the error disappeared.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DoubleB123", "authorAssociation": "NONE", "createdAt": "2019-05-29T16:54:22Z", "contents": "For anyone using Vue and Vuetify, I may have a fix. My issue was similar excpet most of the tests would actually run, but certain components would run a test or two and then freeze and timeout. Turns out removing this from my test/index.js file fixed it:\nconst app = document.createElement('div');\napp.setAttribute('data-app', true);\ndocument.body.appendChild(app);\n\nAdding this is recommended by one of the Vuetify devs (vuetifyjs/vuetify#1210 (comment)) but for some reason, it was causing HTML to actually show up in Karma's window and I'm guessing this had to do with it freezing.\nRemoving this causes some warnings to display, but you can either ignore them or there are ways to make it so they don't show up (http://nidkil.me/2019/01/18/vuetify-multiple-instances-of-vue-detected/ just change the error message to '[Vuetify] Unable to locate target [data-app]')", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joeyhub", "authorAssociation": "NONE", "createdAt": "2019-06-28T10:12:34Z", "contents": "It would be great to actually have some visibility on this. It seems a bunch of things can cause this?\nIt's not clear from the error when or where it's failing, IE, did it fail to close after tests or even connecting in the first place? If it had to force shutdown then could it not try to dump any active resources holding it open?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 38, "reactions_datalabels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1328, "url": "https://github.com/jasmine/jasmine/issues/1328", "title": "Error: it expects a function argument; received [object Undefined]", "contents": "ensureIsFunction throws an error when it, describe, etc. are called with their function arguiment as undefined which acording to the documentation is allowed.", "createdAt": "2017-04-25T20:07:25Z", "updatedAt": "2017-04-26T20:50:20Z", "closedAt": "2017-04-26T20:50:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "UziTech", "company": "UziTech"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-25T20:59:23Z", "contents": "A spec is allowed to not have a function to execute (it makes it pending), but the other functions don't make sense without that. This was added to fix #1004 which is specifically caused by not passing a function in.\nIf you are seeing this error when using it or xit, I would be happy to talk more and fix that issue. Otherwise, we have really just specified what will happen in a previously unspecified case.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-25T21:37:41Z", "contents": "Yes I am seeing this when I try to pass it an undefined variable.\nI fixed the pull request and added a check for undefined along with the check for arguments.length in it and xit", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T04:07:30Z", "contents": "Ah, I misunderstood. Accidentally passing in a variable whose value is currently undefined is what this new functionality is trying to save you from. Explicitly passing undefined to an it seems like something is probably going wrong in your suite. If you don't want the spec to run, you should use xit.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-26T05:37:11Z", "contents": "when patching it like jasmine-promises or dynamically creating tests it is sometimes necessary to pass a variable that could be undefined and let it skip that test.\nI suppose you could test for that call it without a second variable, but at the very least this is a breaking change.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1331, "url": "https://github.com/jasmine/jasmine/issues/1331", "title": "Expected $[0] not to have properties     invocationOrder:", "contents": "same error that is on the bottom of your documentation\nhttps://jasmine.github.io/2.6/introduction.html", "createdAt": "2017-04-25T20:26:08Z", "updatedAt": "2017-04-26T05:38:32Z", "closedAt": "2017-04-25T21:23:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "UziTech", "company": "UziTech"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-25T21:25:06Z", "contents": "I've fixed the docs. What are you doing that you are also encountering this error?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-25T21:39:20Z", "contents": "https://github.com/UziTech/atom-jasmine2-test-runner\nI basically run all the same tests to make sure everything is working for jasmine 2.x on Atom", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T03:55:54Z", "contents": "Just to confirm then, fixing Jasmine's docs solves this issue for you correct? Or is something else needed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-04-26T05:38:32Z", "contents": "yes that fixed it, thank you.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1334, "url": "https://github.com/jasmine/jasmine/issues/1334", "title": "2.6 upgrade from 2.5.2 generates errors", "contents": "Jasmine 2.5.2 -> 2.6.0\nI am running my tests using Karma and PhantomJS and until yesterday everything was running smoothly but since then my Jenkins tests have been failing. After downgrading to jasmine 2.5.2 explicitly everything went back to normal.\n> karma start ./config/karma.conf.js\n\nPhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR\n  TypeError: undefined is not a constructor (evaluating 'global.process.listeners('uncaughtException')')\n  at node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2180\nPhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR\n  TypeError: undefined is not a constructor (evaluating 'global.process.listeners('uncaughtException')')\n  at node_modules/jasmine-core/lib/jasmine-core/jasmine.js:2180\n\nPhantomJS 2.1.1 (Mac OS X 0.0.0): Executed 0 of 44 ERROR (0.002 secs / 0 secs)\n\nnpm ERR! Test failed.  See above for more details.\nI am fine with 2.5.2, but I am just putting it here in case someone else really needs 2.6 and needs this fixed", "createdAt": "2017-04-26T10:24:29Z", "updatedAt": "2017-08-02T00:45:44Z", "closedAt": "2017-08-02T00:45:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "samudurand", "authorAssociation": "NONE", "participants_count": 13, "participants_data": [{"login": "samudurand", "company": "Cake Solutions"}, {"login": "maksimluzik", "company": "@netlight "}, {"login": "arshtepe", "company": null}, {"login": "master-elodin", "company": null}, {"login": "pierremanceaux", "company": "Thermondo GmbH"}, {"login": "BrianLenzo", "company": "Paychex Inc."}, {"login": "gap777", "company": "@RoleModel "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Itschrismorgan", "company": "@twinspires "}, {"login": "steel", "company": "@polleverywhere "}, {"login": "Sebl29", "company": null}, {"login": "tkmcmaster", "company": null}, {"login": "asednev", "company": "Engineering Lead and Technologist from SFBA"}], "comments_count": 25, "comments_data": [{"authorLogin": "maksimluzik", "authorAssociation": "NONE", "createdAt": "2017-04-26T10:34:44Z", "contents": "Having same issues as well with the new 2.6.0 Jasmine version. constructor errors as well as Jasmine promise/ajax timeouts happening. Was working before the update.\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nand\nTypeError: undefined is not a constructor (evaluating 'allKeys[i].match(/^[0-9]+$/)') in /node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 2576)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "arshtepe", "authorAssociation": "NONE", "createdAt": "2017-04-26T11:28:33Z", "contents": "I have same issue, when i use  toEqual  for array.\nexpect([1]).toEqual([1]);\n\nTypeError: undefined is not a function (evaluating 'allKeys[i].match(/^[0-9]+$/)') in .../node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 2576)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "master-elodin", "authorAssociation": "NONE", "createdAt": "2017-04-26T13:36:53Z", "contents": "I am also getting errors after upgrading 2.5.2 -> 2.6.0:\nError: <spyOn> : success has already been spied upon\nUsage: spyOn(<object>, <methodName>) in file:///projectdir/.grunt/grunt-contrib-jasmine/jasmine.js (line 4321) (1)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pierremanceaux", "authorAssociation": "NONE", "createdAt": "2017-04-26T13:40:22Z", "contents": "+1, same here.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "BrianLenzo", "authorAssociation": "NONE", "createdAt": "2017-04-26T13:49:25Z", "contents": "+1 same error.  2.5.2 and 2.5.3 work fine.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "gap777", "authorAssociation": "NONE", "createdAt": "2017-04-26T15:49:38Z", "contents": "I am also getting errors after upgrading 2.5.2 -> 2.6.0 when comparing arrays:\nexpect(['a']).toEqual(['a'])\n\nwhen my array has some custom functions added to it (via Array.prototype.customFunction = ...)\nMessage:\n    TypeError: allKeys[i].match is not a function\n  Stack:\n    TypeError: allKeys[i].match is not a function\n        at Object.<anonymous> (/MySpecFile.js:104:21)\n\nThese seem to be fixed in fbd2ffc.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T20:59:46Z", "contents": "The process.listeners errors should be fixed as of 1d62504\nThe allKeys errors should be fixed from #1326", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T21:01:43Z", "contents": "@maksimluzik what type of constructor errors are you seeing? I'm not sure what to look for based on that description.\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-26T21:05:19Z", "contents": "@master-elodin spyOn doesn't allow overriding of an existing spy by default. The option to allow overriding at all was only added in 2.5 with jasmine.getEnv().allowRespy().\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maksimluzik", "authorAssociation": "NONE", "createdAt": "2017-04-27T07:08:37Z", "contents": "@slackersoft my bad, with the constructor errors I meant the allKeys[i].match(/^[0-9]+$/)') issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gap777", "authorAssociation": "NONE", "createdAt": "2017-04-27T18:23:34Z", "contents": "Kudos for 2.6.1 release, but npm repos don't see it yet?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-04-27T20:35:11Z", "contents": "@gap777 This repo is the jasmine-core package on npm. As these fixes don't require changes to the node.js bindings the jasmine package did not get bumped.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Itschrismorgan", "authorAssociation": "NONE", "createdAt": "2017-05-01T14:49:46Z", "contents": "Just to chime in.\nWe are still seeing the asyc callback error with 2.6.1.  I've had to peg our package.json to version 2.5.2 to keep our unit test passing.\n        Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "steel", "authorAssociation": "NONE", "createdAt": "2017-05-03T18:08:59Z", "contents": "We're seeing these errors as well after upgrading to 2.6.1. We've downgraded back to 2.5.2 for the time being.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-18T00:29:33Z", "contents": "I'm working on getting 2.6.2 out tonight with some fixes for various async related issues. Assuming you're seeing the async callback issue incorrectly, this should hopefully fix the problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Sebl29", "authorAssociation": "NONE", "createdAt": "2017-05-23T07:04:34Z", "contents": "+1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tkmcmaster", "authorAssociation": "NONE", "createdAt": "2017-06-02T14:41:54Z", "contents": "We're still seeing the async/await issues with jasmine-core 2.6.2. We've also had to revert to 2.5.2 as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-07T21:09:26Z", "contents": "@tkmcmaster what kind of async/await errors are you seeing? The issues reported so far in this issue haven't necessarily been about using the actual keyword async functionality, but just specs that are asynchronous by nature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tkmcmaster", "authorAssociation": "NONE", "createdAt": "2017-06-15T15:54:33Z", "contents": "@slackersoft  We have both an async setup and teardown functions as part of our tests in a plugin we pull in for our tests. Our tests in our spec then use methods set up by the plugin.\nThe effect we see is that the browser is getting shut down before our setup is even complete.\nEdit: The issue is still in jasmin-core 2.6.3 as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-16T20:59:51Z", "contents": "@tkmcmaster Jasmine doesn't support async functions being passed to it, beforeEach, etc. and won't actually wait for them to finish before moving on. It sounds like you might have an issue with Jasmine not knowing that your setup is asynchronous. Are you receiving a done param?\nCan you provide a simplified example of a suite that exhibits the issue so we can help resolve it?\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-28T17:38:19Z", "contents": "Jasmine 2.7.0 is now out with support for Promises and async functions for the various portions of the interface that can be async (i.e. with the done argument). Hopefully this will help with some of the async setup issues people are having.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asednev", "authorAssociation": "NONE", "createdAt": "2017-07-31T22:37:35Z", "contents": "@slackersoft interestingly enough after upgrading from 2.6.4 to 2.7.0 we started getting following error in number of projects:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-01T00:17:24Z", "contents": "@asednev do you have specs that return Promises or are async functions? These should be detected as async by Jasmine in 2.7 and can cause that timeout error if they take too long.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "asednev", "authorAssociation": "NONE", "createdAt": "2017-08-01T03:46:54Z", "contents": "do you have specs that return Promises or are async functions?\n\n@slackersoft your question provided much needed insight. We use coffeescript and all functions return last statement. So far it looks like all of the tests that are failing with timeout error in Jasmine 2.7 return Promises. Thank you for the tip.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-02T00:45:44Z", "contents": "I think we've solved all of the concerns from this issue, so I'm going close it. If we missed something, please open a new issue so we can track it more easily.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1335, "url": "https://github.com/jasmine/jasmine/issues/1335", "title": "  Failed: Uncaught (in promise): [throw error....]", "contents": "What version are you using?\n\"jasmine-core\": \"~2.5.2\",\n\"jasmine-spec-reporter\": \"~3.2.0\",\n\n\nWhat environment are you running Jasmine in (node, browser, etc)?\nAngular 4.0.1 via angular cli\n\n\nHow are you running Jasmine (standalone, npm, karma, etc)?\nng test\n\n\nIf possible, include an example spec that demonstrates your issue.\n\n\nI have a login page which call authentication service to authenticate the users. If there user's credentials are invalid then it throws an observable error back to login method (which is of type void).. The unit test is throwing uncaught exception like..\nFailed: Uncaught (in promise): The username or password is invalid\nI have tried to use following but it didn't help\nexpect(app.login()).toThrow( new Error(\"The username or password is invalid\"));", "createdAt": "2017-04-26T20:38:05Z", "updatedAt": "2017-05-03T14:04:28Z", "closedAt": "2017-05-02T21:07:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yasiryc", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "yasiryc", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-02T21:07:20Z", "contents": "Assuming that app.login() is the thing that is throwing the Error, I think you probably want something more like:\nexpect(function() {\n  app.login();\n}).toThrowError(\"The username or password is invalid\");\nWhen you use expect(app.login()), the login function is already called and its output is passed to expect.\nIn the future, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nHope this helps. Closing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yasiryc", "authorAssociation": "NONE", "createdAt": "2017-05-03T14:04:28Z", "contents": "Thank you!. I do have followup question but will take it up to right group.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1337, "url": "https://github.com/jasmine/jasmine/issues/1337", "title": "beforeAll is not defined", "contents": "recently I use jasmine to run my api testing,and I also install karma,the karma is configed by other people.\nWhen I write scripts,\nbeforeEach can be used,but beforeAll is not defined and always report an error.\nI have searched and tried to upgrade my jasmine-node and karma-jasmine to @v0.3.5 and the problem still exist.I think it is due to  the version relative to jasmine\nthe package.json is as follows:\n\"dependencies\": {\n\"@angular/common\": \"2.0.0\",\n\"@angular/compiler\": \"2.0.0\",\n\"@angular/core\": \"2.0.0\",\n\"@angular/forms\": \"2.0.0\",\n\"@angular/http\": \"2.0.0\",\n\"@angular/platform-browser\": \"2.0.0\",\n\"@angular/platform-browser-dynamic\": \"2.0.0\",\n\"@angular/router\": \"3.0.0\",\n\"@angular/upgrade\": \"2.0.0\",\n\"angular2-in-memory-web-api\": \"0.0.20\",\n\"body-parser\": \"~1.16.0\",\n\"bootstrap\": \"^3.3.6\",\n\"cookie-parser\": \"~1.4.3\",\n\"core-js\": \"^2.4.1\",\n\"debug\": \"~2.6.0\",\n\"express\": \"~4.14.1\",\n\"express-session\": \"\",\n\"frisby\": \"^0.8.5\",\n\"jasmine-core\": \"^2.5.2\",\n\"jasmine-node\": \"^1.14.5\",\n\"jasmine-node-karma\": \"^1.6.1\",\n\"jasmine-xml-reporter\": \"^1.0.6\",\n\"kerberos\": \"~0.0.23\",\n\"mongodb\": \"~2.2.25\",\n\"morgan\": \"~1.7.0\",\n\"passport\": \"\",\n\"passport-cas2\": \"*\",\n\"reflect-metadata\": \"^0.1.3\",\n\"requirejs\": \"^2.3.3\",\n\"rxjs\": \"5.0.0-beta.12\",\n\"serve-favicon\": \"~2.3.2\",\n\"systemjs\": \"0.19.27\",\n\"vertx3-min\": \"^3.0.0-1\",\n\"zone.js\": \"^0.6.23\"\n},\n\"devDependencies\": {\n\"angular2-cookie\": \"^1.2.6\",\n\"angular2-template-loader\": \"^0.6.2\",\n\"awesome-typescript-loader\": \"^3.1.2\",\n\"babel-cli\": \"^6.24.1\",\n\"babel-core\": \"^6.24.1\",\n\"babel-loader\": \"^6.4.1\",\n\"babel-preset-es2015\": \"^6.24.1\",\n\"concurrently\": \"^2.2.0\",\n\"copy-webpack-plugin\": \"^4.0.1\",\n\"css-loader\": \"^0.28.0\",\n\"expect.js\": \"^0.3.1\",\n\"file-loader\": \"^0.11.1\",\n\"html-loader\": \"^0.4.5\",\n\"inline-source-map\": \"^0.6.2\",\n\"istanbul\": \"^0.4.5\",\n\"istanbul-instrumenter-loader\": \"^2.0.0\",\n\"istanbul-merge\": \"^1.1.1\",\n\"jasmine\": \"^2.5.2\",\n\"jasmine-core\": \"^2.5.2\",\n\"jasmine-supertest\": \"^1.0.0\",\n\"jasmine-webpack-plugin\": \"^0.1.1\",\n\"karma\": \"^1.6.0\",\n\"karma-chrome-launcher\": \"^2.0.0\",\n\"karma-cli\": \"^1.0.1\",\n\"karma-coverage\": \"^1.1.1\",\n\"karma-coverage-istanbul-reporter\": \"^1.2.0\",\n\"karma-jasmine\": \"^0.3.5\",\n\"karma-jasmine-html-reporter\": \"^0.2.2\",\n\"karma-junit-sonarqube-reporter\": \"0.0.1\",\n\"karma-phantomjs-launcher\": \"^1.0.4\",\n\"karma-requirejs\": \"^1.1.0\",\n\"karma-sourcemap-loader\": \"^0.3.7\",\n\"karma-spec-reporter\": \"0.0.31\",\n\"karma-webpack\": \"^2.0.3\",\n\"less-vars-loader\": \"^1.1.0\",\n\"lite-server\": \"^2.2.2\",\n\"nodemon\": \"^1.11.0\",\n\"npm-run-all\": \"^4.0.2\",\n\"null-loader\": \"^0.1.1\",\n\"raw-loader\": \"^0.5.1\",\n\"rimraf\": \"^2.6.1\",\n\"should\": \"^11.2.1\",\n\"style-loader\": \"^0.16.1\",\n\"supertest\": \"^3.0.0\",\n\"ts-loader\": \"^0.8.1\",\n\"tslint\": \"^5.1.0\",\n\"typescript\": \"^2.0.2\",\n\"typings\": \"^1.3.2\",\n\"webpack\": \"^2.4.1\",\n\"webpack-node-externals\": \"^1.5.4\",\n\"webpack-shell-plugin\": \"^0.5.0\"\n},\nSo pls tell me the jasmine version or karma-jasmine and others' version\nTHX", "createdAt": "2017-04-28T01:50:37Z", "updatedAt": "2017-05-23T20:56:25Z", "closedAt": "2017-05-23T20:56:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "qblslion", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "qblslion", "company": null}, {"login": "askarby", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "megamindbrian", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "askarby", "authorAssociation": "NONE", "createdAt": "2017-05-02T09:04:39Z", "contents": "I think you'd have much more luck in getting help, if posing this question on Stackoverflow", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-02T20:29:52Z", "contents": "I don't think that jasmine-node supports 2.x versions of Jasmine, which are required for access to beforeAll. In your HTML runner page, what version of Jasmine does it say is being run?\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "megamindbrian", "authorAssociation": "NONE", "createdAt": "2017-05-23T17:08:56Z", "contents": "Any progress on this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-23T20:56:24Z", "contents": "@megamindbrian what version of Jasmine are you using? How are you running Jasmine (Karma, jasmine-node, etc.)? As I said, this feature was only released in Jasmine 2.1, which I don't think is supported by jasmine-node.\nIt sounds like this is either a configuration issue or using an older version of Jasmine. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1338, "url": "https://github.com/jasmine/jasmine/issues/1338", "title": "Feature Request", "contents": "If theres a console.log in the JS under test, pl display output on SpecRunner.html", "createdAt": "2017-04-28T22:51:32Z", "updatedAt": "2017-05-02T20:44:52Z", "closedAt": "2017-05-02T20:44:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hippikon", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hippikon", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-02T20:44:52Z", "contents": "I don't think this is something we're going to put into Jasmine. console.log is a browser built-in that isn't always available in all browsers (older versions of IE only define it when the dev tools are open). This would make it difficult to intercept properly. In addition, this message should already appear in the console for whichever browser you are using.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1341, "url": "https://github.com/jasmine/jasmine/issues/1341", "title": "Confused about MO vs MT", "contents": "Hello!\nFirst of all, Jasmin is awesome in the couple of tests I've run so far, so many thanks to everyone involved.  I'm not sure if I'll get an answer here because this is more of a support/conceptual question than an issue. Apologies in advance.\nI'm pretty confused when it comes to receiving messages. Our situation is as follows: we have our own numbers but we're not a mobile service provider. We would like to send messages to our clients (through the actual mobile providers) and be abale to receive answers (Like standardized YES or NO answers or prompts) and act on them through an API. This would be covered by the MO messages you refer to in your architecture:\n\nBut to interconnect with the actual providers they require an SMPP connection where they are the client, while also getting DLRs and everything. This is obviously covered by the \"SMPP Server\" part of your architecture.\n\nThe connection works with the one provider we've tried so far, but every message through that channel gets identified as an MT message...and we have nowhere to forward it because our numbers aren't actual devices. (We get this error:\n\"2017-04-28 19:17:01 ERROR    1 SMPPC [cid:virgin] is not bound: Requeuing ...\"\nSo, to sum it up, is there any way to force messages to be identified as MO (How would they ever be MO and not MT?) to be able to trigger the scripts associated with Receiving SMS-MO as described in your documentation, while at the same time delivering DLRs to the SMPP client. Or if thats impossible, a way to save SMS-MT in a database and respond with DLRs while not actually delivering them to the destination number.\nI hope that wasn't too confusing. Thanks in advance for any kind reply.", "createdAt": "2017-05-02T21:28:12Z", "updatedAt": "2017-05-05T07:39:53Z", "closedAt": "2017-05-02T21:32:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AndreaAltamirano", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "AndreaAltamirano", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-02T21:32:33Z", "contents": "I think you might have the wrong project. Jasmine is a javascript testing framework, and has no knowledge of SMPP or any other domain concepts. Additionally, the screenshots you posted, are not from any Jasmine documentation I have ever seen.\nI'm going to close this. Hope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2017-05-05T07:39:53Z", "contents": "This is the project you're looking for: https://github.com/jookies/jasmin, next time read the readme first ;)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1342, "url": "https://github.com/jasmine/jasmine/issues/1342", "title": "Upgrade from 2.5.2 to 2.6.1 get strange error", "contents": "today when I upgraded jasmine-core from 2.5.2 to 2.6.1, got a strange error:\n\nif one test case failed, caused all the rest of cases failed with same error:\nfailed case:\n\nthe rest part cases:\n\nalso during them, there's some other errors:\n\n\nBut if I add breakpoint to debug, the result is right(one case fail, other passed):\njust 3 errors for the failed case\n\nKarma version used : 1.6.0\nKarma-jasmine : 1.1.0\nKarma-chrome-launcher: 2.1.0\nthanks for your help", "createdAt": "2017-05-04T12:12:56Z", "updatedAt": "2017-05-10T20:57:49Z", "closedAt": "2017-05-10T20:57:49Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Teamop", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Teamop", "company": "@IBM "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-10T20:57:49Z", "contents": "This should also be fixed by #1352. Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1345, "url": "https://github.com/jasmine/jasmine/issues/1345", "title": "Why not also returning the actual value of a failing test?", "contents": "My test is failing:\n\nI'd also like as a user to be able to inspect the actual value of the offending variable of my failing test, like below for example:\nExpected 6589 to equal 663.\nActual value is 3424234\n\nDisclaimer: The only related issue I found -and please correct me if I'm wrong- is adding a custom error message when a test fails.", "createdAt": "2017-05-06T10:49:24Z", "updatedAt": "2017-05-06T11:08:40Z", "closedAt": "2017-05-06T10:54:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "thodorisbais", "company": "ABN Amro"}], "comments_count": 1, "comments_data": [{"authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-05-06T10:54:19Z", "contents": "My bad, Saturday morning \ud83e\udd23", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1346, "url": "https://github.com/jasmine/jasmine/issues/1346", "title": "No Spec Setting for console output ", "contents": "What version are you using?\n\"jasmine\": \"^2.5.2\"\nWhat environment are you running Jasmine in (node, browser, etc)?\nnode v6.5.0 (different OS's all same result)\nHow are you running Jasmine (standalone, npm, karma, etc)?\njust jasmine at the command line\n\nnot sure if that is an issue. I get a tests result just as\nStarted\n......\n6 specs, 0 failures\nFinished in 0.01 seconds\nBut I don't get anything as in the examples which mentions the describe or it sections. Only if there is a fault. Is there any spec setting which simply shows the same as a SepcRunner.html would ?", "createdAt": "2017-05-08T14:52:41Z", "updatedAt": "2017-05-11T08:08:15Z", "closedAt": "2017-05-10T20:56:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vkuehn", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vkuehn", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-10T20:56:59Z", "contents": "Jasmine's built in console reporter only supports dots. There are other projects, like jasmine-reporters that provide more options for output.\nClosing this. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "vkuehn", "authorAssociation": "NONE", "createdAt": "2017-05-11T08:08:15Z", "contents": "thanks, didn't know they support also jasmine versions newer than 1.3", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1349, "url": "https://github.com/jasmine/jasmine/issues/1349", "title": "Async errors are sometimes routed to many specs", "contents": "This looks like it might be similar to #1342 except that it only reproduces in Node as far as I can tell. When a spec causes an uncaught exception after telling Jasmine that it's done (in this case by returning from a synchronous spec), Jasmine will sometimes report the error on multiple unrelated specs.\nHere's the spec that causes it:\n  it(\"fails in several different ways\", function(done) {\n    var env = new jasmineUnderTest.Env(),\n        reporter = jasmine.createSpyObj('fakeReporter', [\n          \"jasmineStarted\",\n          \"jasmineDone\",\n          \"suiteStarted\",\n          \"suiteDone\",\n          \"specStarted\",\n          \"specDone\"\n        ]);\n    env.randomizeTests(true);\n    env.seed('123456');\n\n    reporter.jasmineDone.and.callFake(function(doneArg) {\n      throw new Error('oops!');\n    });\n\n    env.addReporter(reporter);\n    env.execute();\n  });\n\nBut it's at least somewhat dependent on random seed, what specs run after it, and moonphase so it's probably best to just grab the misrouted-errors branch https://github.com/sgravrock/jasmine/ and play with that.\nAnd here's output that shows several different behaviors, including 51 specs failing with the same error.\nScript started on Mon May  8 12:19:41 2017\nbash-3.2$ grunt execSpecsInNode\nRunning \"execSpecsInNode\" task\nStarted\n....[ snipped page-widening dots]/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/GlobalErrors.js:8\n      handler.apply(null, Array.prototype.slice.call(arguments, 0));\n             ^\n\nTypeError: Cannot read property 'apply' of undefined\n  at process.onerror (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/GlobalErrors.js:8:14)\n  at emitOne (events.js:101:20)\n  at process.emit (events.js:188:7)\n  at process._fatalException (bootstrap_node.js:297:26)\n\nbash-3.2$ grunt execSpecsInNode\nRunning \"execSpecsInNode\" task\nStarted\n...[ snipped page-widening dots]\nFailures:\n1) Env integration fails in several different ways\n  Message:\n    Error: oops!\n  Stack:\n    Error: oops!\n      at Object.<anonymous> (/Users/pivotal/workspace/jasmine-stuff/jasmine/spec/core/integration/EnvSpec.js:1407:13)\n      at dispatch (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/ReportDispatcher.js:39:28)\n      at ReportDispatcher.jasmineDone (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/ReportDispatcher.js:10:11)\n      at Immediate.<anonymous> (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/Env.js:268:18)\n      at runCallback (timers.js:672:20)\n      at tryOnImmediate (timers.js:645:5)\n      at processImmediate [as _immediateCallback] (timers.js:617:5)\n    \n\n[... snipped another 49 specs that failed with the same erorr ...]\n\n51) Env integration suiteDone reporting reports when an async afterAll fails an expectation\n  Message:\n    Error: oops!\n  Stack:\n    Error: oops!\n      at Object.<anonymous> (/Users/pivotal/workspace/jasmine-stuff/jasmine/spec/core/integration/EnvSpec.js:1407:13)\n      at dispatch (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/ReportDispatcher.js:39:28)\n      at ReportDispatcher.jasmineDone (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/ReportDispatcher.js:10:11)\n      at Immediate.<anonymous> (/Users/pivotal/workspace/jasmine-stuff/jasmine/src/core/Env.js:268:18)\n      at runCallback (timers.js:672:20)\n      at tryOnImmediate (timers.js:645:5)\n      at processImmediate [as _immediateCallback] (timers.js:617:5)\n    \n\nRan 689 of 693 specs\n689 specs, 51 failures\nFinished in 0.931 seconds\n\nRandomized with seed 95427\nWarning: Task \"execSpecsInNode\" failed.\ufffd Use --force to continue.\n\nAborted due to warnings.\nbash-3.2$ grunt execSpecsInNode\nRunning \"execSpecsInNode\" task\nStarted\n..[ snipped page-widening dots]\n\n\nRan 689 of 693 specs\n689 specs, 0 failures\nFinished in 0.93 seconds\n\nRandomized with seed 28208\n\nDone.\nbash-3.2$ exit\n\nScript done on Mon May  8 12:19:54 2017", "createdAt": "2017-05-08T19:39:17Z", "updatedAt": "2017-05-10T20:51:25Z", "closedAt": "2017-05-10T20:51:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sgravrock", "authorAssociation": "MEMBER", "participants_count": 1, "participants_data": [{"login": "sgravrock", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1350, "url": "https://github.com/jasmine/jasmine/issues/1350", "title": "Does jasmine 2.6.0 not support ES7 async await functions?", "contents": "I am trying to use Jasmine to test functions that use ES7 async await features. Jasmine although works for promises and async functions, it fails for ES7 async function. For example:\ndescribe(\"async-test\", () => {\n  it('should run test', (async function(done) {\n     var x = await fakeRequest();\n     expect(x).toBeDefined();\n     done();\n  }));\n \n});\n\nasync function fakeRequest() {\n     let result = await another_request();\n     return result;\n}\n\nasync function another_request(){\n    // returns promise resolution or some async function call return\n}\n\nit always gives this error:\nasync-test\n    \u2716 should run test\n      PhantomJS 2.1.1 (Mac OS X 0.0.0)\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL. in config/karma-shim.js (line 98794)\n    ZoneAwareError@webpack:///~/zone.js/dist/zone.js:999:0 <- config/karma-shim.js:98794:28\n\nHow can I make it work. Jasmine works when I am only dealing with promises but as soon as ES7 come in, it stops working. How can I make it work with functions that use ES7 features?\nI am running\n\"jasmine-core\": \"^2.6.0\",\"karma\": \"^1.6.0\", \"typescript\": \"~2.2.2\" and Node 7.10.0", "createdAt": "2017-05-08T23:41:11Z", "updatedAt": "2017-05-19T21:03:30Z", "closedAt": "2017-05-19T21:03:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thepiyush13", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "thepiyush13", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rdy", "company": "Sony"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-10T21:08:44Z", "contents": "Jasmine never truly supported async functions, since it would never actually await them. In 2.6, Jasmine will now throw an Error if something that is not a function is passed into it because users would accidentally pass in an async function() without a done parameter and Jasmine would just execute it as if it was synchronous, moving on to the next spec at the first await.\nWe're looking into fully supporting promises (via #1270 or something like it), which would then also hopefully allow async/await to work as expected.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rdy", "authorAssociation": "NONE", "createdAt": "2017-05-18T20:35:41Z", "contents": "I've built the following support here\nhttps://github.com/rdy/jasmine-async-suite\nIt can be added as long as you are running jasmine in a javascript environment that supports promises.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-19T20:46:31Z", "contents": "The plan right now is to try to get Promise support, along with async functions into Jasmine itself in 2.7. With some of the issues from 2.6, I haven't been able to get too much further into this though.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1351, "url": "https://github.com/jasmine/jasmine/issues/1351", "title": "What about including toBeNumber method?", "contents": "The concept and the reason I thought about it is more or less similar to #1294.", "createdAt": "2017-05-09T21:32:29Z", "updatedAt": "2017-05-11T20:56:59Z", "closedAt": "2017-05-11T20:56:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "thodorisbais", "company": "ABN Amro"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-11T20:56:59Z", "contents": "A toBeNumber matcher doesn't seem like it provides quite as much value as the Infinity matchers do. Infinity can be a harder thing to get right, and numberness, should be checkable with something like toEqual(jasmine.any(Number)).\nI don't think this is something we need in Jasmine at this time. Closing. thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1353, "url": "https://github.com/jasmine/jasmine/issues/1353", "title": "and.returnValue is undefined on Spy [2.6.0]", "contents": "I use jasmine 2.6.0 in my test js:\nvar qbitFunction = jasmine.createSpy('qbitFunction');\n      console.log(88, qbitFunction, qbitFunction.add);\n      qbitFunction.add.returnValue({amplitudeOf0: real(0.2), amplitudeOf1: real(0.3)});\nbut got error:\nTypeError: Cannot read property 'returnValue' of undefined.\nHere is the log:\n88 { [Function: spy]\n  and: \n   SpyStrategy {\n     identity: [Function],\n     exec: [Function],\n     callThrough: [Function],\n     returnValue: [Function],\n     returnValues: [Function],\n     throwError: [Function],\n     callFake: [Function],\n     stub: [Function] },\n  calls: \n   CallTracker {\n     track: [Function],\n     any: [Function],\n     count: [Function],\n     argsFor: [Function],\n     all: [Function],\n     allArgs: [Function],\n     first: [Function],\n     mostRecent: [Function],\n     reset: [Function],\n     saveArgumentsByValue: [Function] } } undefined\nAnyone can help?\n\ntypo!!! sorry.", "createdAt": "2017-05-10T07:16:16Z", "updatedAt": "2017-05-10T07:49:44Z", "closedAt": "2017-05-10T07:49:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tearsofphoenix", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "tearsofphoenix", "company": "Veritas"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1354, "url": "https://github.com/jasmine/jasmine/issues/1354", "title": "it timeput confusing", "contents": "Hi, documentation says that using timeout parameter in it function should wait for runs the function associated, but runs always immediately, why?", "createdAt": "2017-05-10T16:27:31Z", "updatedAt": "2017-05-10T20:42:11Z", "closedAt": "2017-05-10T20:42:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alienator", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "alienator", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-10T20:42:11Z", "contents": "The timeout only does something when the it is async. Jasmine determines sync vs. async based on whether the function takes an argument.\nClosing as this is more of a how to question than an issue with Jasmine. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1355, "url": "https://github.com/jasmine/jasmine/issues/1355", "title": "Jasmine 2.6 fails to pretty print Set on Safari 8", "contents": "Hi,\nThe pretty print function of Jasmine fails (throw an error) to pretty print Set instances on Safari 7.1 and Safari 8. The reason is that the pretty print function use the Set.values but the iterators returned by them lack a next method.\nThe fix could be to:\n\nNot try to pretty-print Set on browsers with incomplete Set features.\nUse forEach functions of Set which is correctly implemented in all browsers that support Set (even with partial support).\n\n@slackersoft What do you think? I would be happy to submit a PR if you think it's worth it.", "createdAt": "2017-05-11T10:11:51Z", "updatedAt": "2018-01-13T01:34:08Z", "closedAt": "2018-01-13T01:34:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mjeanroy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mjeanroy", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-11T20:52:37Z", "contents": "I would be happy to review a pull request to correctly pretty-print Sets on all browsers that support them.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1357, "url": "https://github.com/jasmine/jasmine/issues/1357", "title": "How do I run jasmine using node's --trace-warnings?", "contents": "I'm using jasmine 2.5.3\nI submitted this question to jasmine-js@googlegroups.com but got a mailer error.", "createdAt": "2017-05-13T05:43:03Z", "updatedAt": "2017-07-26T00:45:01Z", "closedAt": "2017-07-26T00:45:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "SeanHayes", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "SeanHayes", "company": "@google "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-16T20:59:25Z", "contents": "The jasmine npm package doesn't have a built-in way to pass node options through to the underlying node process, but you should be able to execute it by passing it as an explicit parameter to the node executable. Probably something like:\nnode --options node_modules/.bin/jasmine\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-26T00:45:01Z", "contents": "Closing this as it sounds like it has been resolved. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1358, "url": "https://github.com/jasmine/jasmine/issues/1358", "title": "Expecting array of object 'toContain' array of objects fails", "contents": "When I try to check if an array of objects contains objects from another array, the test fails.\nI have made a jsFiddle which outlines my expectations of the 'toContain' method which may be wrong but they would be nice!\n\nAll version info is shown in the fiddle!", "createdAt": "2017-05-22T11:49:17Z", "updatedAt": "2017-05-23T07:32:46Z", "closedAt": "2017-05-22T21:32:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Tom-Hudson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Tom-Hudson", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-22T21:32:19Z", "contents": "The toContain matcher look inside the actual to detect the occurrence of the single argument passed to it. Thus it is looking for one of the element in the actual array to be equal to the array that you passed. If you want to check an array for a subset of elements, you should try arrayContaining\nexpect(array).toEqual(jasmine.arrayContaining([\"your\", \"stuff\", \"here\"]);\nHope this helps. Thanks for using Jasmine! Closing.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Tom-Hudson", "authorAssociation": "NONE", "createdAt": "2017-05-23T07:32:46Z", "contents": "@slackersoft - Thank you! I should have Googled more before posting here...", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1359, "url": "https://github.com/jasmine/jasmine/issues/1359", "title": "Default parameters", "contents": "Given a class like this:\nclass Example {\n  constructor(fn = (a, b) => b) {\n    this.fn = fn;  \n  }\n}\nIs it possible to test whether the function assigned to the property fn of the class is the default parameter or not? One approach would be to test the function itself which gets assigned to the class property fn. But this won't work for all cases - for example:\nconst eg = new Example((a,b,c) => b);\nThe second function applied to the parameter fn isn't the same as the default parameter. This is just a very basic example and the use case for this test is indeed very rare.", "createdAt": "2017-05-23T11:48:06Z", "updatedAt": "2017-05-25T19:25:21Z", "closedAt": "2017-05-25T19:25:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "emanuelbuholzer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "emanuelbuholzer", "company": "Suva"}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-05-25T18:55:45Z", "contents": "Assuming that the default function doesn't really have to be an arrow function with the right this, I'd expose it as a named function and then test its identity:\nfunction defaultFn(a, b) { return b; }\n\nclass Example {\n   constructor(fn = defaultFn) {\n      this.fn = fn;\n   }\n}\n\n// ...\n\nit(\"does not get the default function\", function() {\n   const eg = new Example((a,b,c) => b);\n   expect(eg.fn).not.toBe(defaultFn);\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emanuelbuholzer", "authorAssociation": "NONE", "createdAt": "2017-05-25T19:25:21Z", "contents": "Thank you! I didn't knew, that default constructors have access to variables from that scope.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1360, "url": "https://github.com/jasmine/jasmine/issues/1360", "title": "`RangeError` when using `toEqual(jasmine.any(Class)`", "contents": "Continuing thread from #1323.\nRunning Jasmine via Karma.\nJasmine: 2.6.2\nNode: 6.9.5\nKarma: 1.7.0\nKarma Jasmine: 1.1.0\nLaunchers I've been using are Chrome and Phantom; both show the same issue.\nI found this kind of issue as well doing this type of test for Angular 4 components:\nexpect(componentInstance).toEqual(jasmine.any(ComponentClass));\nThat would give me RangeError: Invalid string length. I've checked and both expressions evaluate to valid objects, as far as I can tell, i.e., they're not undefined, null, or something I wouldn't expect. Removing the jasmine.any inside the toEqual seems to be what did it for me; I was able to \"work around\" this issue like so:\nexpect(componentInstance instanceof ComponentClass).toBeTruthy()\nThat said, it makes me think that somehow Jasmine is running out of memory? The expressions are individually calculated correctly; it's just equality + .any that messes it up. Not sure how helpful it might be, but below is the stack trace that I'm getting:\nUncaught RangeError: Invalid string length\n    at Object.<anonymous> (http://localhost:9999/base/src/test.ts:34288:45)\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1154)\n    at ProxyZoneSpec.onInvoke (http://localhost:9999/base/src/test.ts:28429:2160)\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1050)\n    at Zone.run (http://localhost:9999/base/src/test.ts:28477:2925)\n    at Object.<anonymous> (http://localhost:9999/base/src/test.ts:28363:131)\n    at http://localhost:9999/base/src/test.ts:6511:46\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1154)\n    at AsyncTestZoneSpec.onInvoke (http://localhost:9999/base/src/test.ts:28268:156)\n    at ProxyZoneSpec.onInvoke (http://localhost:9999/base/src/test.ts:28429:2040)\n    at ZoneDelegate.invoke (http://localhost:9999/base/src/test.ts:28493:1050)\n    at Zone.run (http://localhost:9999/base/src/test.ts:28477:2925)\n    at AsyncTestZoneSpec._finishCallback (http://localhost:9999/base/src/test.ts:6510:13)\n    at http://localhost:9999/base/src/test.ts:28265:139\n    at ZoneDelegate.invokeTask (http://localhost:9999/base/src/test.ts:28493:2120)\n    at Zone.runTask (http://localhost:9999/base/src/test.ts:28482:417)\n    at ZoneTask.invoke (http://localhost:9999/base/src/test.ts:28495:975)\n    at timer (http://localhost:9999/base/src/test.ts:28627:248)\nAlso worth noting is that I get a [Violation] 'setTimeout' handler took 14605ms warning in \"Verbose\" log mode in the Chrome Dev Tools. I believe that's because whatever's causing the error takes a bit before ending up in the RangeError.\n\nThe at Object.<anonymous> [...]/test.ts:34288:45 reference at the very top refers to exactly the point where .toEqual is called. In my tests, I have only two instances of .toEqual(jasmine.any(ComponentClass)), both of which fail in the same manner. Changing to the instanceof approach not only removes the error but also doesn't cause a delay, therefore avoiding the Violation warning.", "createdAt": "2017-05-24T09:44:24Z", "updatedAt": "2017-06-15T14:02:40Z", "closedAt": "2017-06-14T20:36:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "emilio-martinez", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "emilio-martinez", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "emilio-martinez", "authorAssociation": "NONE", "createdAt": "2017-06-15T10:20:17Z", "contents": "@slackersoft what ended up being the issue? Having to limit the output of the pretty printer to avoid crashing?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-15T14:02:39Z", "contents": "Best I can tell is basically an out of memory issue printing a really big object.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1361, "url": "https://github.com/jasmine/jasmine/issues/1361", "title": "Not working expectationFAilOutput.", "contents": "What version are you using?\n'2.6.0'\nWhat environment are you running Jasmine in (node, browser, etc)?\n'nodejs'\nHow are you running Jasmine (standalone, npm, karma, etc)?\n'included in protractor'\nIf possible, include an example spec that demonstrates your issue.\nusers.createUser(someUser);\nexpect(users.isUser(someUser)).toEqual(true, 'There isnt user:' + someUser.name)\n\nif it fails, there isn't fail output there: \"There isnt user: someUser\"\nit's just output:\nExpected false to equal true.", "createdAt": "2017-05-25T07:09:20Z", "updatedAt": "2017-09-27T08:29:54Z", "closedAt": "2017-05-25T21:13:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Niyarlatotep", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "Niyarlatotep", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "fatsu", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-05-25T21:13:42Z", "contents": "This is a duplicate of #641, also check out my comment there. This isn't a feature that Jasmine officially supports.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fatsu", "authorAssociation": "NONE", "createdAt": "2017-09-27T08:29:54Z", "contents": "This n+1 message argument does work for other matchers but not for toEqual().\n@slackersoft\nCould this be because the toEqual matcher explicitly sets the message on the result objects, while others don't?\nresult.message = diffBuilder.getMessage();", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1363, "url": "https://github.com/jasmine/jasmine/issues/1363", "title": "How do you pronounce Jasmine", "contents": "We are having a bit of a pedantic argument in the office and are wondering about the correct pronunciation of Jasmine.\nIs it jaz-min or yas-meen ?", "createdAt": "2017-05-31T09:41:33Z", "updatedAt": "2017-06-07T21:26:42Z", "closedAt": "2017-06-07T21:26:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DavePilks", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "DavePilks", "company": null}, {"login": "jaapz", "company": "@AdvancedClimateSystems "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "jaapz", "authorAssociation": "NONE", "createdAt": "2017-05-31T11:39:58Z", "contents": "http://dictionary.cambridge.org/pronunciation/english/jasmine", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_DOWN", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-07T21:26:42Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nSee @infews blog post on the origins of the name.\nClosing.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "HEART"]}], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "CONFUSED", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "CONFUSED", "CONFUSED", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1364, "url": "https://github.com/jasmine/jasmine/issues/1364", "title": "\"expect\" call executed in incorrect test for an async test", "contents": "In a case where I'm subscribing to the statusChanges observable of a FormBuilder and calling updateValueAndValidity after setting the value of the FormBuilder, for some reason, the expect isn't being executed until the next test, which is causing that test to fail.\nimport { TestBed, ComponentFixture, async } from '@angular/core/testing';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Logger, Level } from 'angular2-logger/core';\nimport { SharedModule } from '../../common/shared.module';\nimport { CommonModule } from '@angular/common';\nimport { FormsComponent } from './forms.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { environment } from '../../environments/environment';\n\nimport { DebugElement } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\n\nconst LOGGER_LEVEL: Level = Level.OFF;\n\nconst STATUS = {\n  VALID: 'VALID',\n  INVALID: 'INVALID',\n  PENDING: 'PENDING'\n};\n\ndescribe('FormsComponent', () => {\n\n  let de: DebugElement;\n  let fixture: ComponentFixture<FormsComponent>;\n  let app: FormsComponent;\n  let logger: Logger;\n\n  beforeEach(async(() => {\n    environment.logger.level = LOGGER_LEVEL;\n\n    TestBed.configureTestingModule({\n      declarations: [\n        FormsComponent\n      ],\n      imports: [\n        SharedModule.forRoot(),\n        CommonModule,\n        ReactiveFormsModule\n      ],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            params: Observable.of({})\n          }\n        },\n        {\n          provide: Router,\n          useValue: {\n            params: Observable.of({}),\n            navigate: function (routes: any[]) {\n              return true;\n            }\n          }\n        }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(FormsComponent);\n    app = fixture.componentInstance;\n    de = fixture.debugElement;\n    logger = TestBed.get(Logger);\n    app.ngOnInit();\n  }));\n\n  it('should be valid for these test cases.', async(() => {\n    const TEST_CASES = [\n      {\n        name: 'John',\n        power: 'Invisibility'\n      },\n      {\n        name: 'Aaron',\n        power: 'Flight'\n      },\n      {\n        name: 'Dan',\n        power: 'Super Strength'\n      },\n      {\n        name: '#$%^$@',\n        power: 'power'\n      },\n      {\n        name: '1234',\n        power: 'ppppppppppppppppppppppppppppppppppppppp'\n      },\n      {\n        name: '123456789012',\n        power: ';fgsdpr[bsdf['\n      }\n    ];\n\n    TEST_CASES.forEach(testCase => {\n      expect(true).toEqual(false);\n      app.heroForm.statusChanges.filter(status => status !== STATUS.PENDING).subscribe(status => {\n        expect(status).toEqual(STATUS.INVALID);\n      });\n      app.heroForm.setValue(testCase);\n      app.heroForm.updateValueAndValidity();\n    });\n  }));\n\n  it('should have heroForm created', async(() => {\n    expect(app.heroForm).toBeTruthy();\n  }));\n\n});\n\nChrome 58.0.3029 (Linux 0.0.0) FormsComponent should be valid for these test cases. FAILED\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\nChrome 58.0.3029 (Linux 0.0.0): Executed 15 of 46 (1 FAILED) (0 secs / 2.242 secs)\nChrome 58.0.3029 (Linux 0.0.0) FormsComponent should be valid for these test cases. FAILED\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\n\t    at ZoneDelegate.invoke (webpack:///~/zone.js/dist/zone.js:391:0 <- src/app/polyfills.ts:3039:26)\n\tExpected true to equal false.\n\t    at webpack:///src/app/app/forms/forms.component.spec.ts:96:19 <- src/app/test.ts:65198:26\n\t    at Array.forEach (native)\n\t    at Object.<anonymous> (webpack:///src/app/app/forms/forms.component.spec.ts:95:15 <- src/app/test.ts:65197:20)\nChrome 58.0.3029 (Linux 0.0.0) Component: GridComponent should create component FAILED\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\nChrome 58.0.3029 (Linux 0.0.0): Executed 17 of 46 (2 FAILED) (0 secs / 2.358 secs)\nChrome 58.0.3029 (Linux 0.0.0) Component: GridComponent should create component FAILED\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\n\t    at Subscriber.Array.concat.Subscriber._next (webpack:///~/rxjs/Subscriber.js:125:0 <- src/app/test.ts:23250:26)\n\tExpected 'VALID' to equal 'INVALID'.\n\t    at SafeSubscriber._next (webpack:///src/app/app/forms/forms.component.spec.ts:98:23 <- src/app/test.ts:65200:32)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.__tryOrUnsub (webpack:///~/rxjs/Subscriber.js:238:0 <- src/app/test.ts:23363:16)\n\t    at SafeSubscriber.Array.concat.SafeSubscriber.next (webpack:///~/rxjs/Subscriber.js:185:0 <- src/app/test.ts:23310:22)\nChrome 58.0.3029 (Linux 0.0.0): Executed 46 of 46 (2 FAILED) (2.618 secs / 2.401 secs)\nnpm ERR! Test failed.  See above for more details.", "createdAt": "2017-06-01T18:32:18Z", "updatedAt": "2017-06-02T12:37:38Z", "closedAt": "2017-06-02T12:37:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yanisin13", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "yanisin13", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1366, "url": "https://github.com/jasmine/jasmine/issues/1366", "title": "HTML Snippet on README is Wrong", "contents": "Looking at the current README, I see instructions on putting the following HTML in your page (for in-browser usage)\n<link rel=\"shortcut icon\" type=\"image/png\" href=\"jasmine/lib/jasmine-core/jasmine_favicon.png\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"jasmine/lib/jasmine-core/jasmine.css\">\n\n<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-core/jasmine.js\"></script>\n<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-core/jasmine-html.js\"></script>\n<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-core/boot.js\"></script>\n\nIf you download the latest release package, these links are not correct. The jasmine-core directory does not exist under `jasmine/lib'.", "createdAt": "2017-06-06T22:46:17Z", "updatedAt": "2017-06-06T22:59:35Z", "closedAt": "2017-06-06T22:59:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jongunter", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "jongunter", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1367, "url": "https://github.com/jasmine/jasmine/issues/1367", "title": "(Some) async test fail after update to jasmine-core 2.6.3", "contents": "Our build started to fail on a few async tests after updating to jasmine 2.6.3\nTypeError: JSON.stringify cannot serialize cyclic structures.\n\nIt's really easy to reproduce, by creating an async test that doesn't call done\nit('tests nothing', (done) => {});\nMight be related to commit 578f63b9bd34f75074a00b9a404b48d567dbe180\nUsing\njasmine 2.6.0\njasmine-core 2.6.3\nwebpack 2.6.1\nkarma 1.7.0\nkarma-jasmine 1.1.0", "createdAt": "2017-06-08T12:56:43Z", "updatedAt": "2017-07-28T17:40:09Z", "closedAt": "2017-07-28T17:40:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ambvdijk", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "ambvdijk", "company": "XsWise"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "jRichardeau", "company": "Giro"}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-12T21:16:46Z", "contents": "I'm not sure this is purely a Jasmine issue. I'm unable to reproduce the error in either a browser or raw node.js with just Jasmine itself. Additionally, Jasmine doesn't ever call JSON.stringify, you might check with Karma.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jRichardeau", "authorAssociation": "NONE", "createdAt": "2017-06-13T10:33:59Z", "contents": "Hello,\nI have an issue too since updating to jasmine 2.6.3 (no issue with 2.6.2) with async tests (angular promises).\nMy test is about routing web app with ui-router that provides an object with a list of promises which will be resolved before accessing a route.\nI want to test one property of this object however when running my test on one property it runs the others (not with 2.6.2), that means I should mock all what is accessed by all these promises !\nI don't know if it is clear, do you need a piece of code ?\nThank you", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-19T18:12:35Z", "contents": "@jRichardeau an example suite and what you expect to be happening would be super helpful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jRichardeau", "authorAssociation": "NONE", "createdAt": "2017-06-21T15:06:39Z", "contents": "I found what is running differently in 2.6.3, a piece of code is running while not running in 2.6.2\nThis is it :  router.stateService.go('testState');\nI add a project to test it.\njasmine-2.6.3-with-uirouter-test.zip", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-21T18:12:20Z", "contents": "The only real difference between Jasmine 2.6.3 compared to 2.6.2 is that Jasmine will make sure to go asynchronous (by calling setTimeout) for any spec that says it should be asynchronous, but actually calls done() synchronously. This could happen in a mocked out promise or timeout type environment.\nI would bet that the code in your otherwise is being run in 2.6.2 as well, just at a different point in time that isn't causing your specs to fail. I don't see any mechanism by which your $urlServiceProvider would only be set up in one of the specs and not the other, so I would assume that it would run at some point. If this is not what you want, you would need to mock something out to cause it to not happen.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jRichardeau", "authorAssociation": "NONE", "createdAt": "2017-06-22T08:28:04Z", "contents": "You're right !\nIf I add some synchronous code in my resolve function, my test fails in 2.6.2 too...\nSo I was lucky that my test passed...\nI'll try to mock this.\nThank you very much", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-28T17:40:08Z", "contents": "Sounds like this ends up being a test setup issue and not something that Jasmine itself is doing wrong, so I'm going to close this issue. If this proves not to be the case, I'd be happy to talk more about what Jasmine might be doing that causes your specs to behave differently than you expect.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1369, "url": "https://github.com/jasmine/jasmine/issues/1369", "title": "jasmine-html \"Ran X of Y specs - run all\" link clobbers the query string", "contents": "Jasmine 2.6.3, after clicking on the Ran X of Y specs - run all link, none of the existing query string parameters are preserved, with the exception of random.\nExpected result: the query string is preserved, and only the spec parameter is cleared out.", "createdAt": "2017-06-16T07:57:20Z", "updatedAt": "2017-06-16T21:08:16Z", "closedAt": "2017-06-16T21:08:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vais", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "vais", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "vais", "authorAssociation": "NONE", "createdAt": "2017-06-16T08:06:53Z", "contents": "For what it's worth, I simply patched my copy of jasmine-html.js as follows, and it works as expected:\n@@ -208,11 +208,11 @@ jasmineRequire.HtmlReporter = function(j$) {\n         }\n       };\n \n       if (specsExecuted < totalSpecsDefined) {\n         var skippedMessage = 'Ran ' + specsExecuted + ' of ' + totalSpecsDefined + ' specs - run all';\n-        var skippedLink = order && order.random ? '?random=true' : '?';\n+        var skippedLink = addToExistingQueryString('spec', '');\n         alert.appendChild(\n           createDom('span', {className: 'jasmine-bar jasmine-skipped'},\n             createDom('a', {href: skippedLink, title: 'Run all specs'}, skippedMessage)\n           )\n         );", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1370, "url": "https://github.com/jasmine/jasmine/issues/1370", "title": "Did you forget to signal async completion?", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine (Jasmine npm, karma, etc),\nconsider filing an issue with that library if appropriate\n\nWhen submitting an issue, please answer the following:\n\nWhat version are you using?\nWhat environment are you running Jasmine in (node, browser, etc)?\nHow are you running Jasmine (standalone, npm, karma, etc)?\nIf possible, include an example spec that demonstrates your issue.\n\nThanks for using Jasmine!", "createdAt": "2017-06-16T14:52:32Z", "updatedAt": "2017-06-16T20:51:18Z", "closedAt": "2017-06-16T20:51:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "crvora", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "crvora", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "crvora", "authorAssociation": "NONE", "createdAt": "2017-06-16T14:57:16Z", "contents": "In a given describe suite , we have multiple specs. Individually (using fit for focus test), they pass. But, together when I run the entire suite, I get the error saying \"Did you forget to signal async completion. It is very intermittent and it fails at different spec everytime I run. We are using @types/jasmine\": \"^2.5.38\" , \"gulp-jasmine\": \"^2.4.2\", \"jasmine\": \"^2.5.2\", \"jasmine-console-reporter\": \"^1.2.7\",  \"karma-jasmine\": \"~0.3.6\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "crvora", "authorAssociation": "NONE", "createdAt": "2017-06-16T14:58:18Z", "contents": "Is there a limit on how many asynchronous specs can Jasmine handle at any given time ? Are there any debugging tools to use to see what is going on ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-16T20:51:18Z", "contents": "The \"Did you forget to signal async completion?\" message does not come from Jasmine. Possibly from one of the wrapping libraries you're using (I see gulp-jasmine and karma-jasmine in your message).\nJasmine does not have a maximum number of specs that can be asynchronous in a given suite, but only a single spec should be running at any given time.\nClosing this, as it doesn't sound like the error you're seeing is coming from Jasmine. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1371, "url": "https://github.com/jasmine/jasmine/issues/1371", "title": "'npm package' test specs fail on Windows because tar is not a valid Windows command", "contents": "When running node_modules\\.bin\\grunt.cmd execSpecsInNode in Windows, six test specs consistently fail because tar is not a command available on Windows.\nFailing specs are:\n\nnpm package has bootFiles\nnpm package has an imagesDir\nnpm package has a bootDir\nnpm package has a root path\nnpm package has cssFiles\nnpm package has jsFiles\n\nError message is the same in all of them:\n  Message:\n    Expected 1 to be 0.\n  Stack:\n    Error: Expected 1 to be 0.\n      at Object.<anonymous> (c:\\repos\\jasmine\\spec\\npmPackage\\npmPackageSpec.js:15:24)\n      at ontimeout (timers.js:365:14)\n      at tryOnTimeout (timers.js:237:5)\n      at Timer.listOnTimeout (timers.js:207:5)\nThe output of require('shelljs').exec(...) reveals the followign error:\n  stderr: '\\'tar\\' is not recognized as an internal or external command,\\r\\noperable program or batch file.\\r\\n',\n  code: 1,\nI guess this is expected since I can see from the setup instructions Ubuntu is the recommended dev environment.\nThanks,\nGilberto", "createdAt": "2017-06-17T02:59:50Z", "updatedAt": "2017-06-19T19:10:59Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "kiewic", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "kiewic", "company": "@Microsoft "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-19T19:10:55Z", "contents": "For now you can probably ignore those errors, the specs should run fine on travis. We've had a couple issues in the past with some files not being included in the npm package correctly, so we want to keep that from happening again.\nI'd be happy to review a pull request that either:\n\nMarked the tests as pending and not run if the tar command is unavailable\nPlatform independently untarred the result of npm pack so the specs can run either way.\n\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1372, "url": "https://github.com/jasmine/jasmine/issues/1372", "title": "Trying to send an SMS via SMPP", "contents": "Hi there!\nI'm actually trying to send a SMS via SMPP by using Jasmin, but i can't find the way to do it.\nOnce I'm designed smppcm\n#Connector id                        Service Session          Starts Stops\n#SMPP_INX                            started BOUND_TRX        1      0\na user:\n#User id          Group id         Username         Balance MT SMS Throughput\n#AN             J*                     AN         0.0     ND     ND/20.0\na group:\n#Group id\n#J*\na mtrouter:\n#Order Type                    Rate       Connector ID(s)                                  Filter(s)\n#0     DefaultRoute            0.01000    smppc(SMPP_INX)\nIn Logs:\n2017-06-21 12:11:47 INFO     838 Added amqpBroker to SMPPClientManagerPB\n2017-06-21 12:11:47 INFO     838 Added Redis Client to SMPPClientManagerPB\n2017-06-21 12:11:47 INFO     838 Added RouterPB to SMPPClientManagerPB\n2017-06-21 12:11:47 INFO     838 Loading/Activating [jcli-prod] profile configuration from //etc/jasmin/store/jcli-prod.smppccs\n2017-06-21 12:11:47 INFO     838 Binding submit.sm.SMPP_INX queue to submit.sm.SMPP_INX route_key\n2017-06-21 12:11:47 INFO     838 Added a new connector: SMPP_INX\n2017-06-21 12:11:47 INFO     838 SMPPClientFactory-SMPP_INX is consuming from queue: submit.sm.SMPP_INX\n2017-06-21 12:11:47 INFO     838 Started connector [SMPP_INX]\n2017-06-21 12:12:06 INFO     838 Returning a list of 1 connectors\n2017-06-21 13:04:06 INFO     838 Returning a list of 1 connectors\n3091 SMS-MO [cid:SMPP_INX] [queue-msgid:XXXX] [status:ESME_ROK] [prio:LEVEL_0] [validity:None] [from:XXXX] [to:XXXX] [content:'Test']\nIf I execute this file:\nGNU nano 2.3.1                        Fichero: file.py\nimport logging\nfrom twisted.internet import reactor, defer\nfrom jasmin.vendor.smpp.twisted.client import SMPPClientTransceiver, SMPPClientService\nfrom jasmin.vendor.smpp.twisted.config import SMPPClientConfig\nclass SMPP(object):\ndef __init__(self, config=None):\n    if config is None:\n        config = SMPPClientConfig(host='IP', port=2775, username='A*N*', password='XXX')\n\n        # Uncomment line below to recv SMS via ### only\n        # config = SMPPClientConfig(host='localhost', port=999, username='uname', password='pwd', addressTon=$\n    self.config = config\n\n@defer.inlineCallbacks\ndef run(self):\n    try:\n        #Bind\n        smpp = yield SMPPClientTransceiver(self.config, self.handleMsg).connectAndBind()\n        #Wait for disconnect\n        yield smpp.getDisconnectedDeferred()\n    except Exception, e:\n        print \"ERROR: %s\" % str(e)\n    finally:\n        reactor.stop()\n\ndef handleMsg(self, smpp, pdu):\n    \"\"\"\n    NOTE: you can return a Deferred here\n    \"\"\"\n    print \"Received pdu %s\" % pdu\n\nif name == 'main':\nlogging.basicConfig(level=logging.DEBUG)\nSMPP().run()\nreactor.run()\npython file.py\nWARNING:smpp.twisted.client:Establishing TCP connection to 10.22.20.21:2775\nWARNING:smpp.twisted.protocol:SMPP connection established from 10.22.20.21 to port 41628\nWARNING:smpp.twisted.protocol:Requesting bind as transceiver\nDEBUG:smpp.twisted.protocol:Sending PDU: PDU [command: bind_transceiver, sequence_number: 1, command_status: ESME_ROK\nsystem_id: 'AN'\npassword: 'XXX'\nsystem_type: ''\ninterface_version: 52\naddr_ton: None\naddr_npi: None\naddress_range: None\n]\nDEBUG:smpp.twisted.protocol:Sending data [00000025000000090000000000000001416972654e657400343172336e3374000034000000]\nDEBUG:smpp.twisted.protocol:Outbound transaction started with message id 1\nINFO:smpp.twisted.protocol:SMPP Client received PDU [command: bind_transceiver_resp, sequence_number: 1, command_status: ESME_ROK]\nDEBUG:smpp.twisted.protocol:Received PDU: PDU [command: bind_transceiver_resp, sequence_number: 1, command_status: ESME_ROK\nsystem_id: 'AN'\n]\nDEBUG:smpp.twisted.protocol:Receiving data [00000018800000090000000000000001416972654e657400]\nDEBUG:smpp.twisted.protocol:Outbound transaction finished with message id 1\nWARNING:smpp.twisted.protocol:Bind succeeded...now in state BOUND_TRX\nINFO:smpp.twisted.protocol:SMPP Client received PDU [command: enquire_link, sequence_number: 1, command_status: ESME_ROK]\nDEBUG:smpp.twisted.protocol:Received PDU: PDU [command: enquire_link, sequence_number: 1, command_status: ESME_ROK\n]\nDEBUG:smpp.twisted.protocol:Receiving data [00000010000000150000000000000001]\nDEBUG:smpp.twisted.protocol:Sending PDU: PDU [command: enquire_link_resp, sequence_number: 1, command_status: ESME_ROK\n]\nDEBUG:smpp.twisted.protocol:Sending data [00000010800000150000000000000001]\nSo, what is exactly the purpose of this? What exactly do i have to do?\nThe map of all of this is that i'm connected to a SMSC which will send a SMS if I send a SMS to it but the only way to do this is via SMPP because this SMSC doesn't understand HTTP POST messages.\nWhat I have to do is to create a phyton file to execute it and send the SMS to the SMSC?\nKind regards.", "createdAt": "2017-06-21T11:18:24Z", "updatedAt": "2017-06-21T14:43:08Z", "closedAt": "2017-06-21T14:43:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JFnine", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JFnine", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-21T14:43:08Z", "contents": "Dupe of #1341 you're in the wrong repo. Closing", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1373, "url": "https://github.com/jasmine/jasmine/issues/1373", "title": "[Bug] Async expect fail not triggering done.fail(), timeout reached", "contents": "Env info\nJasmine version: 2.6.0\nEnvironment: Node 7.10.0\nTest runner: karma with karma-jasmine\nDescription\nAsync tests that fail still wait for the timeout, an example below\nit('Should be able to query existing products', (done) => {\n        (async () => {\n          try {\n            const query = `{\n              products {\n                product_id\n              }\n            }`;\n\n            const resp = await graphql(Schema, query, {}, context);\n            expect(() => graphqlSpecErrorHandler(resp, `Product addProduct error`)).not.toThrow();\nIn example above the graphqlSpecErrorHandler function will throw, the spec is marked as failed but still waits for the timeout, in such case currently we're forced to use this boilerplate instead:\ntry {\n    graphqlSpecErrorHandler(resp, `Product addProduct error`)\n} catch (e) {\n    done.fail(e)\n}\nHowever how to achieve the same with other simple expects? like this one for example:\nexpect(resp).toBeDefined()\nIf the previous expect succeeded, it would go on, but if failed, it will mark as failed but also wait for timeout, what to do here then?", "createdAt": "2017-06-21T13:55:53Z", "updatedAt": "2017-06-21T21:21:04Z", "closedAt": "2017-06-21T18:42:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "luchillo17", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "luchillo17", "company": "PSL"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-21T18:42:38Z", "contents": "If a spec informs Jasmine that it is asynchronous, by receiving an argument (done), then it is the responsibility of that spec to invoke done() when all code has been completed and it safe to move on to the next thing in the queue. Since the it in your example never calls done(), Jasmine waits for the timeout and fails the spec at that point.\nThe goal of done.fail() is really to allow the option of a spec to fail outside of a specific expect call, like a Promise failing. A catch can also work, but you would still want to call done() explicitly in the successful case.\nThe next full release of Jasmine should add support for Promises and async functions directly to Jasmine so wrapping like your example should no longer be needed.\nClosing this, since this is the currently desired functionality. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "luchillo17", "authorAssociation": "NONE", "createdAt": "2017-06-21T19:05:37Z", "contents": "What i mean is that current expect behaviour in async test only marks the test as failed, but doesn't call done so the test still waits for timeout even if the test already failed.\nIs not about the wrap i do to the promise one, is about all expect statements not calling done when they fail.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-21T19:08:53Z", "contents": "Jasmine allows you to call expect multiple times in a single spec, so unless you use the \"stop spec execution on expectation failure option\" (which makes the expect throw an Error on failure), that is the expected behavior.\nNote that async errors are only handled correctly as of 2.6.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "luchillo17", "authorAssociation": "NONE", "createdAt": "2017-06-21T19:44:18Z", "contents": "Didn't know such option existed, that should fix it for me.\n@slackersoft i cannot find how to turn it on in karma, do you know how?\nNevermind, found it, just adding stopOnFailure: true, in karma.config.ts file works just fine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1374, "url": "https://github.com/jasmine/jasmine/issues/1374", "title": "Calling done.fail() after done() fails the test", "contents": "What version are you using?\n2.6.4\nWhat environment are you running Jasmine in (node, browser, etc)?\nChrome 59 on Windows 10\nHow are you running Jasmine (standalone, npm, karma, etc)?\nStandalone\nIf possible, include an example spec that demonstrates your issue.\nhttps://jsfiddle.net/w8q0xdsz/1/\nhttps://jsfiddle.net/200nr56k/3/\n\nIt seems that an async test will fail if you call done.fail() after calling done():\ndescribe('test', function() {\n  it('an async test', function(done) {\n    done();\n    done.fail();\n  });\n});\n\nI would have expected the done.fail() call to be ignored, as we have already said done(). So the test should be over and done. Nothing should be able to come back and fail it.\nI ran in to this problem when I had the bright idea that I should make sure that my rxjs subscriptions are cleaned up after each test. So I used takeUntil and make sure that it was triggered in the afterEach method. But I was already making sure that complete wasn't being called, by calling done.fail inside the complete callback, and this now gets triggered when takeUntil triggers.", "createdAt": "2017-06-21T16:15:59Z", "updatedAt": "2017-06-21T17:11:48Z", "closedAt": "2017-06-21T17:11:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "samal84", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "samal84", "company": "Shure Scandinavia"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-21T17:11:48Z", "contents": "Jasmine takes the approach that if fail() is called (even via done.fail()) or expect fails anywhere in a suite, then the suite should report the failure. So as long as the full suite hasn't finished reporting, calling a fail will cause something in the suite to have that failure.\nOnce done() has been called in a spec, Jasmine assumes that no more code for that spec will be run and it is free to move on to the next one. There is, however, some bookkeeping time before the next spec/suite is officially started and any failures that happen during that time will be associated with that spec. If they happen later, they may be associated with a completely different spec, as long as the full suite is still running.\nFor these reasons, we're going to leave this behavior as is for the foreseeable future.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1376, "url": "https://github.com/jasmine/jasmine/issues/1376", "title": "jasmine.any() runs out of memory on 2.6.4", "contents": "What version are you using?\n2.6.4\nWhat environment are you running Jasmine in (node, browser, etc)?\n6.10.3\nHow are you running Jasmine (standalone, npm, karma, etc)?\nKarma and yarn\nIf possible, include an example spec that demonstrates your issue.\nit('should extend TagRequestsComponent', () => { expect(component).toEqual(jasmine.any(TagRequestsComponent)); });\n\nAfter upgrading from 2.5.2 to 2.6.4 (also tested on 2.6.0 and issue happened too), the spec above stopped working. It's task is to check if the component extends TagRequestsComponent.\nWhat happens is that my test times out and fails for being out of memory (Chrome reaches some 2.5gb of RAM usage). The other tests of this component and of TagRequestsComponent run normally (what makes me think that the problem is not on the component itself then).\nThe output follows (though it seems of little help):\n\nRangeError: Invalid string length\nat StringPrettyPrinter.append (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3831:20)\nat StringPrettyPrinter.formatProperty (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3821:12)\nat http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3814:12\nat StringPrettyPrinter.PrettyPrinter.iterateObject (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3706:7)\nat StringPrettyPrinter.emitObject (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3807:10)\nat StringPrettyPrinter.PrettyPrinter.format (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3692:16)\nat StringPrettyPrinter.formatProperty (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3826:14)\nat http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3814:12\nat StringPrettyPrinter.PrettyPrinter.iterateObject (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3706:7)\nat StringPrettyPrinter.emitObject (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3807:10)", "createdAt": "2017-06-22T11:43:02Z", "updatedAt": "2017-06-22T18:53:45Z", "closedAt": "2017-06-22T18:53:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "VictorJuliani", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "VictorJuliani", "company": "Von Braun Labs"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-22T18:53:44Z", "contents": "This looks like a duplicate of #1360 which should be fixed in master.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1377, "url": "https://github.com/jasmine/jasmine/issues/1377", "title": "Uncaught ReferenceError: jasmineRequire is not defined", "contents": "I found the example on https://github.com/jasmine/jasmine#installation can be done by the webpack with html-webpack-plugin. Therefore I try to wire them up instead of hardcoding the script\n// webpack.config.js\n\nconst path = require(\"path\"),\n      webpack = require(\"webpack\"),\n      HtmlWebpackPlugin = require('html-webpack-plugin'),\n      ExtractTextPlugin = require(\"extract-text-webpack-plugin\"),\n      jasmineCore = require(\"jasmine-core\");\n\nmodule.exports = {\n  \"devServer\": {\n    \"compress\": true,\n    \"host\": \"0.0.0.0\",\n    \"disableHostCheck\": true,\n    \"clientLogLevel\": \"error\"\n  },\n  \"entry\": {\n    \"client\": path.resolve(__dirname, \"src/pages/Spec/Spec.web.tsx\")\n  },\n  \"module\": {\n    \"rules\": [\n      {\n        \"test\": /\\.spec\\.tsx?$/,\n        \"enforce\": \"pre\",\n        \"loader\": \"tslint-loader\",\n        \"options\": {\n          \"configuration\": require(\"./tslint.json\"),\n          \"tsConfigFile\": \"tsconfig.json\",\n          \"fix\": true\n        }\n      },\n      {\n        \"test\": /\\.tsx?$/,\n        \"exclude\": /node_modules/,\n        \"loader\": \"awesome-typescript-loader\"\n      },\n      {\n        \"test\": /jasmine\\.css$/,\n        \"use\": ExtractTextPlugin.extract({\n          \"fallback\": \"style-loader\",\n          \"use\": [\"css-loader\"]\n        })\n      },\n      {\n        \"test\": /\\.scss$/,\n        \"use\": \"null-loader\"\n      }\n    ]\n  },\n  \"resolve\": {\n    \"alias\": {\n      \"jasmine\": path.resolve(jasmineCore.files.path, \"jasmine.js\"),\n      \"jasmine-core\": path.resolve(jasmineCore.files.path)\n    },\n    \"extensions\": [\".ts\", \".tsx\", \".js\", \".json\", \".jsx\"]\n  },\n  \"output\": {\n    \"filename\": \"[name].spec.js\",\n    \"libraryTarget\": \"umd\",\n    \"path\": path.resolve(__dirname, `spec`),\n  },\n  \"plugins\": [\n    new HtmlWebpackPlugin({\n      \"minify\": {\n        \"removeComments\": true,\n        \"collapseWhitespace\": true\n      },\n      \"filename\": \"index.html\",\n      \"template\": path.resolve(__dirname, \"src/pages/Spec/Spec.ejs\"),\n      \"favicon\": path.resolve(jasmineCore.files.imagesDir, \"jasmine_favicon.png\")\n    }),\n    new ExtractTextPlugin(\"[name]-[contenthash].css\"),\n  ],\n  \"target\": \"web\"\n};\n\n\nIt compiles successfully but it fails in runtime. The error is Uncaught ReferenceError: jasmineRequire is not defined Then I compared the execution flow between the example and my webpack version. The issue in jasmine-core/lib/jasmine-core/jasmine.js\nvar jasmineRequire;\n\nif (typeof module !== 'undefined' && module.exports && typeof exports !== 'undefined') {\n           ^^^^^^\n\nmodule and exports are Objects in my webpack version. But in standalone example, they are undefined. How can I move forward?", "createdAt": "2017-06-23T02:06:32Z", "updatedAt": "2017-07-25T00:52:59Z", "closedAt": "2017-06-23T18:01:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wood1986", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wood1986", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "wood1986", "authorAssociation": "NONE", "createdAt": "2017-06-23T05:18:57Z", "contents": "I have just found. require(\"script-loader!jasmine\") works. But I think there is a better way to achieve", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-06-23T18:01:28Z", "contents": "It sounds like this was a webpack configuration issue and not Jasmine itself. Glad to hear you fixed it.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wood1986", "authorAssociation": "NONE", "createdAt": "2017-06-24T01:25:02Z", "contents": "Don't close please. I think it is Jasmine issue and I am using webpack to hack it.  I think the implementation to determine whether it is node or web environment is not correct. If the implementation of jasmine.js is correct, I don't need to 'script-loader' to make 'module' and 'exports' undefined", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wood1986", "authorAssociation": "NONE", "createdAt": "2017-06-24T01:35:39Z", "contents": "I would say there are one issue and one improvement\n\nnode vs web checking\nthe standalone installation cannot be achieved in a proper way without using the alias in webpack situation", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T00:52:59Z", "contents": "I would be happy to review a pull request that specifically fixed the checks around global detection for web-based CommonJS environments if Jasmine thinks it is finding a node.js environment, when it's really a browser.\nWe haven't fully re-worked the documentation site, but if there is a better getting started guide for Jasmine standalone when in a browser-based CommonJS environment, I'd be happy to review a pull request", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1378, "url": "https://github.com/jasmine/jasmine/issues/1378", "title": "(promise) expect() instructions are not executed in finally clause without a catch clause", "contents": "jasmine-core 2.6.4 - expect() are not executed in finally clause when there is no catch clause.\nHere is a plunker demo.\nRun the tests with jasmine 2.6.4 :\n\nthe first test shows that expect in finally is not executed\nthe second test is the same as the first, with a catch clause in addition (spy is returning a resolved promise so catch is not ran here). Everything works fine in that case.\n\nAll of this is invisible before jasmine 2.6.3, because with jasmine <= 2.6.2, no expect are executed in finally clause at all.\nTo see this, activate the third test and link jasmine 2.6.2 instead (or any lower version) of 2.6.4 in the index.html.", "createdAt": "2017-06-23T15:15:56Z", "updatedAt": "2017-10-26T19:27:07Z", "closedAt": "2017-10-26T19:27:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "MarcLoupias", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "MarcLoupias", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-06-24T00:30:20Z", "contents": "There's a lot going on in that plunker demo, which makes it hard to tell exactly what the problem is. But I'm noticing a couple of things. The first is that the expectations that you're expecting to fail might not actually be failing. When I drop expect(true).toBe(false) into each of the finally functions, I see both specs fail.\nThe other, possibly larger, problem is that each spec calls done, then does an expectation, then calls done again. Jasmine expects that specs won't do anything else -- and especially won't trigger any failures -- after done. When specs fail after calling done, Jasmine can't reliably associate the failure with the spec that caused it.\nTry changing your specs to only call done from the finally function, and make sure that the expectations that should fail actually are failing. I hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarcLoupias", "authorAssociation": "NONE", "createdAt": "2017-06-24T07:18:10Z", "contents": "You are right with expectations, the issues seems to be with spies only !\nI have modified the plunker to be more accurate. I have commented the lines where the issue is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-06-26T19:26:17Z", "contents": "I added a bit of logging and saw thatuiLoaderServiceMock.disable is being called after its calls are checked in the test that doesn't call catch. The catch call (or another then, for that matter) delays processing of the finally function until after uiLoaderServiceMock.disable has been called. So it looks like the expectations are behaving correctly in both cases, but one of them is running before the behavior that it's trying to test has happened.\nIt looks like what you need is a way to ensure that the code you've passed to finally doesn't get called until after Angular is done doing whatever it does that causes uiLoaderServiceMock.disable to be called. You'll probably get better help with that if you ask in an Angular forum.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarcLoupias", "authorAssociation": "NONE", "createdAt": "2017-06-27T17:29:06Z", "contents": "I am not sure i have understood. Are you saying the issue is in the $q AngularJS service ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-07-05T16:50:11Z", "contents": "No, I'm saying that your test runs two pieces of code in what is essentially a random order and then assumes that one of them happens before the other. It might be helpful to think of the promise then and catch methods as saying \"and then do this other thing later on, when you get a chance\".\nIn the plunker demo that you posted, userService.load creates two independent promise chains: one that gets resolved when loading finishes, and then a separate one that disables the uiLoaderService at some point in the future. Then the spec chains off of the first promise to check the calls to the disable method at some other point in the future. Because the code doesn't do anything to ensure that one of those actions is caused by the other, they could happen in either order. And making changes like adding additional .then or .catch calls can certainly change the ordering.\nIf you want to write this kind of test, you'll probably need to modify your userService to expose a promise that resolves after uiLoaderService.disable is called. (Or an event, or some other similar mechanism.) Then put the test code that checks whether uiLoaderService.disable was called in a .then off of that promise, rather than off of the one returned by userService.load.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarcLoupias", "authorAssociation": "NONE", "createdAt": "2017-07-12T16:51:31Z", "contents": "I'm saying that your test runs two pieces of code in what is essentially a random order and then assumes that one of them happens before the other\n\nI am maybe missing something on promise but there is no random order.\nThe tested code is a promise with a then, a catch and a finally.\nSo the order is then then finally or catch then finally. It cannot be different.\nAccording to the AngularJS $q doc :\n\nallows you to observe either the fulfillment or rejection of a promise, but to do so without modifying the final value. This is useful to release resources or do some clean-up that needs to be done whether the promise was rejected or resolved.\n\nThis is exactly what i am doing here. I enable a loader in the UI, i start an http request, then i use the finally clause to disable the loader disregarding to the request result (then or catch).\nThis is the implementation.\nFor the testing part, i want to expect the loader.disable function is called when it have to be called. So after the http request resolution or rejection.\nWhat i am understanding from your explanation is : The finally close inside the load function is not executed before the then clause execution in the spec.\nThis is a really weird behavior, because i assume the then clause in the spec is executed after the resolve or the reject in the load function, so i assume the finally clause in the load function is also executed before.\nIn the end, the finally clause in the spec should always be executed the last !\nI cannot see what i am missing here it makes me feel really bad !!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-18T04:47:12Z", "contents": "It looks like you're still potentially calling done multiple times. Once in the catch (done.fail is still done) and then again in the finally. Once an async spec has told Jasmine that it is done, Jasmine will move on in its queue of specs and expectations that run may not get associated with the correct spec (if at all).\nIf you're going to call done and done.fail in your then and catch respectively, you probably shouldn't have a finally for that promise, but figure out a different way to check that assertion.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1379, "url": "https://github.com/jasmine/jasmine/issues/1379", "title": "Create a version of createSpyObj that accepts a constructor instead of a name.", "contents": "This is a feature request. And is useful mainly for typescript users.\nThe proposal is to have a version of createSpyObj that can be called with a constructor rather than a name. Maybe it could be called createSpyOf(ClassConstructor, ...params).\nThis would make typings in Typescript much easier to write and work with. For an overview of why it's hard to type the current function in an accurate way, see here: microsoft/TypeScript#10571 (comment)\nBy having a constructor as first argument rather than a string, both the mocked type as well as the list of keys being spied on could be inferred just from the parameters, and typescript developers would not need to specify them as generic parameters, which, as you can see from the comment linked above, is annoying for the list of keys being mocked.\nIn order to work with other things besides classes (e.g. typescript interfaces), ideally it would just get as first argument an object with a \"name\" property on it (something like a constructor). This way, we can pass a class constructor, but also anything else that has a name and carries a type.\nThe implementation in the jasmine world is pretty straightforward:\nfunction createSpyOf(constructorLike, params) {\n   return createSpyObj(constructorLike.name, params);\n}\nMy second proposal would be to extend createSpyObj, but I notice from the implementation that it supports a mode of operation in which you only pass one JSON object as first argument and it mocks all its properties. Changing that behavior would break existing clients.\nIn any case, this increases the API surface of jasmine, and I understand it might be marginally useful to javascript developers, so I wanted to gather your feedback.", "createdAt": "2017-06-23T18:03:30Z", "updatedAt": "2017-07-25T00:45:26Z", "closedAt": "2017-07-25T00:45:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rubenlg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rubenlg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "rubenlg", "authorAssociation": "NONE", "createdAt": "2017-07-12T13:27:33Z", "contents": "Any thoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-25T00:45:26Z", "contents": "Given the ease of adding a function like what you provided to your own TypeScript project and the potential for confusion about which function does which thing for normal Javascript users, I'm not sure this is something we want in Jasmine itself. While I appreciate the issues with finding types for the current Jasmine createSpyObj, maintaining typings within Jasmine is tricky given that we (the Jasmine team) don't really make use of TypeScript to see what we might be breaking.\nHope this helps. Thanks for using Jasmine! Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1380, "url": "https://github.com/jasmine/jasmine/issues/1380", "title": "Please release this.emitMap soon", "contents": "Thanks for the great ES6 map fix, exactly what I was looking for. Is it possible to get a new npm release for jasmine-core with the commit please? It was committed almost two months ago.\nThanks!\n5ee03f0", "createdAt": "2017-06-23T18:46:47Z", "updatedAt": "2017-07-26T05:39:48Z", "closedAt": "2017-07-26T00:48:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "michaelcm", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "michaelcm", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "michaelcm", "authorAssociation": "NONE", "createdAt": "2017-06-23T19:20:52Z", "contents": "Actually, the last release was 2.6.4 which was 9 days ago... why didn't it include the code from the resolved pull request from a couple of months ago? The code is in master.\nhttps://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine.js\nPerhaps 2.6.4 was tagged from the 2_6 branch? Is it possible to pull this into the 2_6 branch if that is the case? 5ee03f0\nThanks in advance!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-26T00:48:40Z", "contents": "The emitMap code didn't make it into the 2.6.x patch releases because we use patch releases for bug-fix updates to the previous minor release. As this is a new feature, it doesn't make sense to be in a bug-fix release. It should be in the next minor version (2.7).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "michaelcm", "authorAssociation": "NONE", "createdAt": "2017-07-26T05:39:48Z", "contents": "I'm not picky about where/how it gets released, would just like to be able to use it easily with an npm relase. It was committed a good many months ago now. Hopefully 2.7.0 will arrive soon. Thanks for responding.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1382, "url": "https://github.com/jasmine/jasmine/issues/1382", "title": "toBeCloseTo fails when expected value is different of exactly half of the allowed precision", "contents": "expect(350).toBeCloseTo(350.4, 0); => true as expected\nexpect(350).toBeCloseTo(350.5, 0); => false should be true\nexpect(350.5).toBeCloseTo(350.54, 1); => true as expected\nexpect(350.5).toBeCloseTo(350.55, 1); => false should be true\nI think Math.abs(expected - actual) < (Math.pow(10, -precision) / 2) should be Math.abs(expected - actual) <= (Math.pow(10, -precision) / 2).", "createdAt": "2017-06-25T19:59:27Z", "updatedAt": "2017-06-26T17:56:33Z", "closedAt": "2017-06-26T17:56:33Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pvdlg", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "pvdlg", "company": "@reaktor, @semantic-release, @xojs"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1384, "url": "https://github.com/jasmine/jasmine/issues/1384", "title": "Customise Report", "contents": "https://sqa.stackexchange.com/questions/27936/unable-to-add-attach-screenshot-and-test-steps-in-report", "createdAt": "2017-06-26T09:13:17Z", "updatedAt": "2017-08-04T17:35:09Z", "closedAt": "2017-08-04T17:35:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vedant05", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vedant05", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-06-26T16:29:39Z", "contents": "It looks like you're having trouble with some components that are part of Protractor, not Jasmine. If you aren't able to get the help you need on Stack Exchange, I suggest reaching out to the Protractor folks. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-04T17:35:09Z", "contents": "We haven't heard anything else on this in a while. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1387, "url": "https://github.com/jasmine/jasmine/issues/1387", "title": "Not able to create spy on method", "contents": "My service is :\n  var testappserviceone = angular.module('testappserviceonemodule',[])\n    testappserviceone.factory('testappServiceone',[ function(){\n    return function (x,y) {\n\n         function addobj (x,y){\n             return x+y;\n         }\n\n         return{\n            add:addobj\n         }\n    }\n   }]);\n\nMy test suite is :\ndescribe('testappserviceone add method functionality', function(){\n    beforeEach(function () {\n        spyOn(testappServiceone(10,15),'add').and.callThrough();\n    });\n\n    it('testappServiceone add method functionality', function() {\n        testappServiceone(10,15).add();\n        expect(testappServiceone(10,15).add).toHaveBeenCalled();\n    });\n});\n\nThe Exception I am getting is :\nError: <toHaveBeenCalled> : Expected a spy, but got Function.\nUsage: expect(<spyObj>).toHaveBeenCalled()\n\nI think spy() is not creating a spy object . Please help me in understanding and solving this problem.", "createdAt": "2017-06-28T09:04:06Z", "updatedAt": "2017-07-12T17:42:59Z", "closedAt": "2017-07-12T17:42:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tak2ashokkumar", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "tak2ashokkumar", "company": "Spaneos Software Solutions "}, {"login": "sgravrock", "company": null}, {"login": "MarcLoupias", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-06-28T16:58:44Z", "contents": "It looks like testappServiceone returns a new object each time it's called. So your beforeEach function calls testappServiceone, spies on the returned object's add method, and then throws that object away. Then the test calls testappServiceone and tries to verify calls on the returned object's add method, but it doesn't work because it's an entirely different object than the one that was spied on.\nOne way to fix this would be to have testappServiceone return the same object every time it's called. That should be an option since testappServiceone doesn't appear to use the parameters passed to it.\nI hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tak2ashokkumar", "authorAssociation": "NONE", "createdAt": "2017-06-29T05:05:21Z", "contents": "Thank you for proposing solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarcLoupias", "authorAssociation": "NONE", "createdAt": "2017-07-12T17:15:02Z", "contents": "You should use a service, not a factory, a factory is used when you want to execute some code before the injector instanciate the service singleton. It is not the case in your code. So you don't need to use a factory and you should use a service.\nThe x and y args in the constructor method are useless and unused. When you inject your service in another service or a controller or a directive, the injector have already instantiated the service for you. You cannot pass args to it. To do this, to configure a service, you need to use a provider.\nYou want to configure a service passing data to it before the injector instantiate your service ? Use a provider.\nYou want to execute some code before the injector instantiate your service ? Use a factory.\nIn all other cases, use a service.\nSee this discussion.\nFor the testing part, the only things to test here is the add function logic. Testing that add function is bind to addobj function is an overkill.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-12T17:42:59Z", "contents": "It sounds like this has become a discussion about using angular and testing and not about an issue with Jasmine itself, so I'm going to close it.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1388, "url": "https://github.com/jasmine/jasmine/issues/1388", "title": "If toEqual() fails, the error message always include all properties compared to jasmine.any()", "contents": "When toEqual() fails, and the expected value uses jasmine.any(), all comparisons to jasmine.any() are listed as errors.\nFor example, the next spec succeeds:\nit(\"foo property equal\", function() {\n    var actual = {\n        foo: true,\n        bar: 1987\n    };\n    var expected = {\n        foo: true,\n        bar: jasmine.any(Number),\n    };\n    expect(actual).toEqual(expected);\n});\nBut changing only foo makes the test fail, and the error indicates foo and bar do not have the expected value.\nit(\"foo property different\", function() {\n    var actual = {\n        foo: false,\n        bar: 1987\n    };\n    var expected = {\n        foo: true,\n        bar: jasmine.any(Number),\n    };\n    expect(actual).toEqual(expected);\n});\nThis is the error message:\nExpected $.foo = false to equal true.\nExpected $.bar = 1987 to equal <jasmine.any(Number)>.\n\nI'm using Jasmine 2.6.4 in a browser environment.\nThx", "createdAt": "2017-06-29T02:01:53Z", "updatedAt": "2017-08-04T17:28:53Z", "closedAt": "2017-08-04T17:28:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kiewic", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "kiewic", "company": "@Microsoft "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-18T04:50:01Z", "contents": "It looks like the diff builder tracking for asymmetric equality testers doesn't properly report when the check passed or not, and instead always reports a difference. I would be happy to review a pull request to fix this tracking so that the message is more correct.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1389, "url": "https://github.com/jasmine/jasmine/issues/1389", "title": "Error in object with toString having a jasmine.any value", "contents": "Using version 2.6.4 in node an browsers.\nI have an error when expecting an object to have toString function using jasmine.any()\nExample:\nexpect( {\n  toString: () => {}\n} ).toEqual( jasmine.objectContaining( {\n  toString: jasmine.any( Function )\n} ) )\nThese thows the error TypeError: value.toString is not a function.\nIt appears to be trying to use the toString, but it has an Any value.", "createdAt": "2017-06-29T17:47:01Z", "updatedAt": "2017-07-18T05:01:51Z", "closedAt": "2017-07-18T05:01:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "roddolf", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "roddolf", "company": "Base22"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1390, "url": "https://github.com/jasmine/jasmine/issues/1390", "title": "testing http calls from angular services", "contents": "My service is\nvar testappserviceone = angular.module('testappserviceonemodule',[])\ntestappserviceone.factory('testappServiceone',[function(){\n    return function (handler) {\n     function getData (){\n        $http.get(handler.selection.selected.url).then(function (response) {\n            handler.obj = JSON.parse(JSON.stringify(response.data));\n       });\n     }\n     return{\n        getData : getData\n     }\n   }\n }]);\n\nFrom My controller , I will call the service like\n  $scope.config = **testappServiceone(handler);\n\nI am trying to test $http call made from testappServiceone.getData and test suite is\n describe('testappServiceone getData method functionality', function(){\n\n    var apiSuccessResponse = {\n          statuscode : 200,\n          data : {\n             responsedata : 'responsedata'\n          }\n     } \n\n    beforeEach(function (done) {\n        spyOn(testappServiceone(handler),'edit').and.callThrough();\n        httpBackend.expect('GET', handler.selection.selected.url).respond(apiSuccessResponse);\n        testappServiceone(handler).edit();\n        done();\n    });\n\n    it('method invokation', function() {\n        expect(testappServiceone(handler).edit).toHaveBeenCalled();\n    });\n\n    it('http call mock part', function() {\n        expect(handler.obj).toEqual(JSON.parse(JSON.stringify(apiSuccessResponse.data)));\n    });\n\n    afterEach(function(){\n        httpBackend.flush();\n        httpBackend.verifyNoOutstandingExpectation();\n        httpBackend.verifyNoOutstandingRequest();\n    });\n });\n\nEvery thing is working properly except\n it('http call mock part', function() {\n     expect(handler.obj).toEqual(JSON.parse(JSON.stringify(apiSuccessResponse.data)));\n });\n\nException is showing as\n  Expected undefined to equal Object({ responsedata: 'responsedata' }).\n\nPlease help me in handling these scenarios", "createdAt": "2017-06-30T06:01:11Z", "updatedAt": "2017-06-30T12:22:20Z", "closedAt": "2017-06-30T12:22:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tak2ashokkumar", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "tak2ashokkumar", "company": "Spaneos Software Solutions "}], "comments_count": 1, "comments_data": [{"authorLogin": "tak2ashokkumar", "authorAssociation": "NONE", "createdAt": "2017-06-30T12:22:20Z", "contents": "All the httpBackend callls should be flushed and then only the output from them can be tested. So changed the code as below and it worked.\n     beforeEach(function (done) {\n          spyOn(testappServiceone(handler),'edit').and.callThrough();\n          httpBackend.expect('GET', handler.selection.selected.url).respond(apiSuccessResponse);\n          testappServiceone(handler).edit();\n          done();\n          httpBackend.flush();\n     });\n\n     afterEach(function(){\n          httpBackend.verifyNoOutstandingExpectation();\n          httpBackend.verifyNoOutstandingRequest();\n     });", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1391, "url": "https://github.com/jasmine/jasmine/issues/1391", "title": "unexpected error throwed by jasmine at regular intervals", "contents": "I have a test file, which works fine, but at times an error is be thrown. For example if execute the test now it does not throw any error but if i execute few minutes later it throws this error\nAn error was thrown in an afterAll\nAfterAll Expected null to be undefined.\n\nAnd am not even using an afterAll in my test. I only used a beforeEach and afterEach\njasmine version:- jasmine v2.6.0\njasmine-core version: jasmine v2.6.1\nAm presently using jasmine in node\nThis test is been ran with npm\nI can't pinpoint which spec causes the above specified error, because it occurs whenever it wants to occur", "createdAt": "2017-06-30T06:08:33Z", "updatedAt": "2017-06-30T10:43:50Z", "closedAt": "2017-06-30T10:43:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zombieleet", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "zombieleet", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1392, "url": "https://github.com/jasmine/jasmine/issues/1392", "title": "Adding metadata to suites and specs", "contents": "Hi everyone,\nthank you for the good job you made and you're making with Jasmine which is by far my favourite testing framework.\nBefore putting my hands in the code and creating a fork of Jasmine I would like to know if there's a less hacky way to achieve what I want.\nBasically I'd like to add some metadata to suites and specs in order to have more detailed reports.\nFor example:\ndescribe('Suite name', {date: Date.now(), detailedDescription: 'Super detailed description'}, function() {\n    it('should work', {detailedDescription: 'Another super detailed description'}, function() {\n        expect(true).toBeTruthy()\n    });\n})\nI'd like to use the extended object this way:\nconst Reporter = {\n    suiteStarted: (suite) => {\n        console.log(`Suite started at ${suite.metdata.date}`)\n    },\n    specDone: (spec) => {\n        console.log(`Description ${spec.metadata.detailedDescription}`)\n    },\n}\nIs there any way to extend the object returned by describe or by spec?\nI have of course tried (without any success):\nlet suite = describe('Suite name', function() {\n    suite.date = Date.now();\n   ...\n})\nThank you in advance!", "createdAt": "2017-06-30T11:44:12Z", "updatedAt": "2017-10-26T19:29:08Z", "closedAt": "2017-10-26T19:29:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shikaan", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "shikaan", "company": "Global Gaming"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-20T04:27:28Z", "contents": "If the primary thing you want to do is have start/stop times in a custom reporter, you should use the existing reporter events to do the timing there. The suite and spec objects are internal details of Jasmine and not meant for storing transient data about the execution of the suite. Additionally, the Date.now() call you use would be the time of declaration of the suite or spec and not when execution started.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1393, "url": "https://github.com/jasmine/jasmine/issues/1393", "title": "Creating a spy on service not working", "contents": "** My target service is **\n  var app = angular.module('testapp');\n  app.factory('testAppServiceOne', function () {\n         return function (count, page) {\n               this.count = 0;\n               this.currentPage = page;\n          };\n  });\n\n** My current service is **\n  var app = angular.module('testapp');\n  app.factory('testAppService', function () {\n         return function (count, currentPage) {\n                     var getPageModel = function(){\n                           return new testAppServiceOne(count, currentPage);\n                     }\n                      return {\n                          getPageModel: getPageModel\n                      };\n          };\n  });\n\n** I am unit testing 'testAppService().getPageModel()' method and my test case is as follows**\ndescribe('testAppService getPageModel method functionality -->', function(){\n    var windowobj,testAppServiceObj;\n    beforeEach(function (done) {\n        testAppServiceObj = testAppService();\n        spyOn(testAppServiceObj,'getPageModel').and.callThrough();\n        windowobj = jasmine.getGlobal();\n        spyOn(windowobj, testAppServiceOne);\n        testAppServiceObj.getPageModel();\n        done();\n    });\n    it('method should return testAppServiceOne object', function(){\n        expect(windowobj.testAppServiceOne).toHaveBeenCalled();\n    });\n\n});\n\n** The exception I am getting is **\n   Error: <spyOn> : function (count,page)\n   {__cov_yZntKTPynIMLK8OsQyDl5w.f['63']++;__cov_yZntKTPynIMLK8OsQyDl5w.s['145']++; \n   this.count=0; \n   __cov_yZntKTPynIMLK8OsQyDl5w.s['146']++; \n   this.currentPage=page;}() method does not exist\n\nPlease help in understanding and solving this issue.", "createdAt": "2017-06-30T12:24:33Z", "updatedAt": "2017-07-06T05:09:47Z", "closedAt": "2017-07-06T05:09:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tak2ashokkumar", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tak2ashokkumar", "company": "Spaneos Software Solutions "}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-07-05T16:39:01Z", "contents": "This call is incorrect: spyOn(windowobj, testAppServiceOne);. The second argument to spyOn needs to be a string, the name of the method to be spied on. I hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tak2ashokkumar", "authorAssociation": "NONE", "createdAt": "2017-07-06T05:09:47Z", "contents": "Thank you for reply. It helps me", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1395, "url": "https://github.com/jasmine/jasmine/issues/1395", "title": "Inconsistent behavior between matcher on Promise ", "contents": "I noticed a strange behavior when I was testing an Angular/TypeScript application with Jasmine matchers. Matchers that I believed should function similarly was not equally happy about promises.\nI simplified the behavior to this:\n// Won't compile\nexpect(Promise.resolve(42)).toBe(42);\nexpect(Promise.resolve(42)).toEqual(42);\n\n// Will compile and asserts without problem\nexpect(Promise.resolve(42)).not.toBeGreaterThan(42);\nexpect(Promise.resolve(42)).toBeCloseTo(42);\nexpect(Promise.resolve(42)).toBeLessThan(43);\nThe compiler tells me that:\nArgument of type '42' is not assignable to parameter of type 'Expected<Promise<number>>'.\nIs this by design or a bug?\nVersions\n\"jasmine-core\": \"2.6.4\",\n\"typescript\": \"2.3.4\", // (with 'es5' as target)\n\"angular/core\": \"4.2.3\",\n\"karma\": \"1.7.0\",\n\"protractor\": \"5.1.2\"\n\nTest runners\nSame behavior in both karma and protractor.", "createdAt": "2017-07-10T15:11:35Z", "updatedAt": "2017-07-10T16:22:24Z", "closedAt": "2017-07-10T16:22:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jonatanskogsfors", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jonatanskogsfors", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-10T16:22:24Z", "contents": "Jasmine doesn't know anything about Typescript or the typings you may be using, so if you're getting a compiler error it almost certainly isn't Jasmine causing it.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1396, "url": "https://github.com/jasmine/jasmine/issues/1396", "title": "spy.reset() not working for toHaveBeenCalledTimes ", "contents": "Jasmine: 2.5.2\nKarma: 1.4.1\nThe method toHaveBeenCalledTimes does not get reseted when called spy.reset()\nsample:\n\n  it(\"should get available years only once\", fakeAsync(() => {\n    // Arrange\n    getAvailableYearsSpy = spyOn(service, \"getAvailableYears\").and.returnValue(Promise.resolve([2015,2016,2017]);\n\n    fixture.detectChanges();\n\n    expect(getAvailableYearsSpy).toHaveBeenCalledTimes(1); // True\n\n    getAvailableYearsSpy.reset();\n\n    // Act\n    anyMethodWhichCallsGetAvailableYearsAgain();\n\n    tick();\n\n    // Assert\n    expect(getPrognoseMeldungSpy).toHaveBeenCalledTimes(1); // False -> called twice\n  }));", "createdAt": "2017-07-11T21:32:46Z", "updatedAt": "2019-04-26T14:00:48Z", "closedAt": "2017-07-12T08:47:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dgroh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dgroh", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "SAkhil95", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-07-12T00:25:40Z", "contents": "This seems to be working fine for me. You do need to call .calls.reset() not just .reset() on the spy to get it to work. The following spec passes fine for me.\nit('spies reset', function() {\n  var foo = { bar: function() {} };\n  var spy = spyOn(foo, 'bar').and.returnValue(42);\n\n  foo.bar();\n  expect(spy).toHaveBeenCalledTimes(1);\n\n  spy.calls.reset();\n\n  foo.bar();\n  expect(foo.bar).toHaveBeenCalledTimes(1);\n\n  foo.bar.calls.reset();\n\n  foo.bar();\n  expect(foo.bar).toHaveBeenCalledTimes(1);\n});\nHope this helps. Thanks for using Jasmine!", "reactions_count": 20, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "dgroh", "authorAssociation": "NONE", "createdAt": "2017-07-12T08:47:16Z", "contents": "That is it, thanks a lot.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SAkhil95", "authorAssociation": "NONE", "createdAt": "2019-04-26T13:51:42Z", "contents": "Hi @slackersoft ,\nI have created ,\nconst routerSpy = jasmine.createSpyObj('Router', ['navigate']);\nand in beforeEach I gave routerSpy.navigate.reset.. but its till not getting reset.\nIf I use routerSpy.calls.reset() , its throwing reset of undefined.\nIf I use routerSpy.navigate.reset() , its throwing router.navigatereset() is not a function.\nLet me know if you've any solution for this.\nRegards,\nAkhil", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SAkhil95", "authorAssociation": "NONE", "createdAt": "2019-04-26T14:00:48Z", "contents": "Got it, had to do routerSpy.navigate.calls.reset()", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1402, "url": "https://github.com/jasmine/jasmine/issues/1402", "title": "Sets & Maps should be compared irrespective of order", "contents": "Expected Behavior\nES6 Sets and Maps are most often used as unordered sets and maps, and I would expect the following tests to pass:\nvar setA = new Set([3, 6]);\nvar setB = new Set([6, 3]);\nexpect(setA).toEqual(setB); // pass\n\nvar mapA = new Map([['a', 3], [6, 1]]);\nvar mapB = new Map([[6, 1], ['a', 3]]);\nexpect(mapA).toEqual(mapB); // pass\nCurrent Behavior\nJasmine matchers would fail the tests above, since the insertion order is considered for equality.\nI would consider this behaviour a bug, since it's surprising to require the same order. As an analogy, Objects also retain insertion order, but Jasmine matches ignore the insertion order when comparing Objects.\nPossible Solution\nCan we change the tests and implementation to ignore insertion order for Sets and Maps, and thus match the expected behaviour?\nIf not, why not? Is there an alternative approach to providing order-agnostic matchers?\nSuite that reproduces the behavior (for bugs)\nThe behaviour described above is enforced by the tests.", "createdAt": "2017-08-01T14:26:43Z", "updatedAt": "2017-08-04T16:23:45Z", "closedAt": "2017-08-04T16:23:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "theefer", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "theefer", "company": "@Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-02T00:43:40Z", "contents": "I believe the insertion order was left in the equality comparison simply because it was easier to implement at the time. I would be happy to review a pull request to change the equality comparison to ignore insertion order for Maps and Sets.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "theefer", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-02T10:21:23Z", "contents": "Great thanks, I've started working on a PR to make the comparison order-agnostic!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1403, "url": "https://github.com/jasmine/jasmine/issues/1403", "title": "saveArgumentsByValue() saves primitive arguments as Object({ })", "contents": "Expected Behavior\nsaveArgumentsByValue() should save arguments of primitive types (passed by value) as it is.\nCurrent Behavior\nsaveArgumentsByValue() saves arguments of primitive types (passed by value) as Object({ })\nSuite that reproduces the behavior (for bugs)\nit('test', () => {\n            let service = { test: (x, y)=> { x.key = y; } };\n            let testSpy = spyOn(service, 'test').and.callThrough();\n            testSpy.calls.saveArgumentsByValue();\n            let a = { key: 1 };\n            let b = 2;\n            service.test(a, b);\n            expect(testSpy).toHaveBeenCalledWith(jasmine.objectContaining({ key: 1 }), 2);\n        });\nMessage:\n    Expected spy test to have been called with [ <jasmine.objectContaining(Object({ key: 1 }))>, 2 ] but actual calls were [ Object({ key: 1 }), Object({  }) ].\n\nI went ahead and tried to run the condition check at \n  \n    \n      jasmine/src/core/CallTracker.js\n    \n    \n         Line 14\n      in\n      9cb2f06\n    \n    \n    \n    \n\n        \n          \n           if(Object.prototype.toString.apply(argsAsArray[i]).match(/^\\[object/)) { \n        \n    \n  \n\n. I got the following results, so this check would always be true, which is incorrect.\n\u03bb node                                          \n> Object.prototype.toString.apply(1)            \n'[object Number]'                               \n> Object.prototype.toString.apply('adad')       \n'[object String]'                                \n> Object.prototype.toString.apply({a:1})        \n'[object Object]'                              \n> Object.prototype.toString.apply(new Date())   \n'[object Date]'                                 \n\nYour Environment\n\nVersion used: 2.6.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): node 8.2.1\nOperating System and version (desktop or mobile): Windows 10", "createdAt": "2017-08-01T18:58:55Z", "updatedAt": "2017-08-04T16:55:19Z", "closedAt": "2017-08-04T16:55:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kapil-ms", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kapil-ms", "company": "Microsoft"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-01T19:28:32Z", "contents": "This definitely sounds like a bug. Because Dates are mutable, I think it make sense to find some way to clone them properly, but numbers and strings are probably find to copy the reference. I'd be happy to review a pull request to fix this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1405, "url": "https://github.com/jasmine/jasmine/issues/1405", "title": "spyOn removes angular implict injector signiture", "contents": "Using Jasmine 2.6.4; Angular 1.5.12\nclass Foo {\n  static bar($rootScope) {\n    return true;\n  }\n}\ndescribe('SpyOn', () => {\n  it('static method foo should be called', inject(($injector) => {\n       spyOn(Foo, 'bar');\n       expect($injector.invoke(Foo.bar)).toBe(true);\n     }));\n});\n\nFails with this error:\nError: [$injector:unpr] Unknown provider: aProvider <- a\nhttps://docs.angularjs.org/error/$injector/unpr?p0=aProvider%20%3C-%20a\nFor implicit injection, angular calls toString() on the method to get the argument names.   Here is what i see:\nFoo.bar.toString() -> function (a) { return fn.apply(this, arguments); }\nI believe the behavior changed with this change:\n686d815\nI have a workaround, where the test sets Foo.bar.$inject =[..] to make injection work.", "createdAt": "2017-08-01T22:17:02Z", "updatedAt": "2017-11-17T20:44:31Z", "closedAt": "2017-11-17T20:44:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dspattison-google", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dspattison-google", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-02T00:33:59Z", "contents": "I'm afraid I don't have a great solution for this. Before the 2.6 release, Jasmine just replaced the function with one without any explicit arguments. In the 2.6.0 release, we wanted to try to preserve function arity with spies. At first we tried using eval but had at least one (#1325) issue with that. After that, we decided to fall back to just declaring the function with explicit param as you see in 686d815.\nThis likely never really worked well for spies you expect to get things injected into. This also seems a bit like testing the Angular framework and not necessarily your applications code to have a test like that, so I think that writing a wrapper to spyOn you can use to set the $inject property on the spy after it is created it probably the way to go.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T20:44:31Z", "contents": "Closing this since we haven't heard anything back from the community in a while and doesn't sound like an issue with Jasmine itself.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1409, "url": "https://github.com/jasmine/jasmine/issues/1409", "title": "Clarify suite failed expectations and exceptions", "contents": "Current Behavior\n\n\nFailed expectation or exception during beforeAll:\nAll children specs are reported as failed with the beforeAll failure.\nIt could be easier to spot the issue if it is clearer that the issue comes from beforeAll.\n\n\nFailed expectation or exception during afterAll:\nFailure is added as a failed expectation for the suite.\n\n\nException during suite declaration:\nAn extra spec is added with the encountered exception.\n\n\nPossible Solution\n\nFor beforeAll failures, disable specs and children suites in order to not report them.\nAdd beforeAll failed expectations in suite.failedExpectations (like afterAll does).\nAdd beforeAll, afterAll and suite declaration exceptions in a new suite.exceptions field.\n\nIn order to display it in a generic way, we could add an extra field origin in suite failed expectation and exception filled with \"beforeAll\", \"afterAll\" or \"suite declaration\".\nContext\nI am maintaining jasmine-spec-reporter and it would be very nice to provide the most specific and consistent information for these cases.\nI would be glad to help if you think that it could be useful.", "createdAt": "2017-08-06T18:41:10Z", "updatedAt": "2018-01-26T18:00:54Z", "closedAt": "2018-01-26T18:00:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bcaudan", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "bcaudan", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-10T00:37:05Z", "contents": "The suite declaration failure spec came about because Jasmine didn't always support expectations at the suite level. Only once beforeAll or afterAll exist is something like that even possible.\nThe beforeAll expectation failures are passed on to the child specs in an effort to do best effort on getting them reported to users, since suiteDone didn't have any expectation information until then. Failures in afterAll can't have that happen, because all of the children have by definition already reported success or failure and can't be modified after that.\nSo that's why it is the way it is now. That said, I think it would be useful to add an origin field to the Expectation object passed to the reporters, which could be ignored by reporters who don't care. I don't think we want to change how failures are reported, since that would break existing reporters.\nFor 3.0 it might make sense to review how these types of errors are reported, once we can make a breaking change. I've made a story in tracker for the 3.0 changes, but I'd be happy to review a pull request to add an origin field to expectations.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bcaudan", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-08-10T06:16:47Z", "contents": "Just a few questions to be sure to understand your answer:\n\nI don't think we want to change how failures are reported, since that would break existing reporters.\n\nSo we do not report differently failed expectations and exceptions, right?\nThen for:\n\nfailure in beforeAll\nexceptions in suite declaration\n\nare you ok to report them in suite failed expectation object?\nAnd for failures in beforeAll what about disable specs and children suites in order to not report them?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-10T17:01:29Z", "contents": "Basically, for 2.x I don't think we want to change the mechanism by which anything is reported. So exceptions stay as failed expectations, beforeAll failures still cascade down to specs, and suite declaration exception is still a spec with a failure in it.\nWe also don't want to change the default way that failures are handled in beforeAll, but I think it would be interesting to look into having the stopSpecOnFailedExpectation flag work for beforeAll. It would need some tweaking so that a failure in one spec wouldn't cause others specs not to run.\nHope this helps!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-29T23:00:10Z", "contents": "I like the idea of adding an origin field to expectations. I'm not so sure about disabling specs inside a suite with a beforeAll failure, though. The disabled state has been overloaded to have a wide variety of meanings over time. It's provided fertile ground for bugs and plenty of confusion for reporter authors, and I don't think using it in yet another scenario is going to help the situation. In particular, using the disabled state to mean both \"the user focused on a set of specs that didn't include this one\" and \"this spec didn't run because of a beforeAll failure\" seems dangerous.\nThere are at least two valid ways to look at a suite with a beforeAll failure: As a suite that failed without running anything, or as N specs that each failed. I think what we want to do here is make things easier for reporter authors that take the former viewpoint without making things harder for reporter authors that take the latter viewpoint. I particularly want to avoid anything that would cause old reporters to report success when a suite fails, even in a major release.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-26T18:00:54Z", "contents": "The origin field on expectations proved to be harder to implement that we initially expected. We have however done some work to make all errors at the suite level report the same way (on the suite) instead of either making a spec you've never heard of, or cascading the failure down to the children.\nThis work is in the 3.0-features branch, and will be included in Jasmine 3.0. Closing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1410, "url": "https://github.com/jasmine/jasmine/issues/1410", "title": "Making toThrowError work with async function", "contents": "Is there a way to leverage toThrowError in the context of an async function throwing an error?", "createdAt": "2017-08-09T07:12:50Z", "updatedAt": "2019-03-05T20:52:55Z", "closedAt": "2017-10-26T19:38:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DamienCassou", "authorAssociation": "CONTRIBUTOR", "participants_count": 7, "participants_data": [{"login": "DamienCassou", "company": "F\u00f6retagsplatsen"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ivanbtrujillo", "company": null}, {"login": "sgravrock", "company": null}, {"login": "khuslen", "company": null}, {"login": "xfg", "company": null}, {"login": "SLaks", "company": "Google"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-09T22:40:05Z", "contents": "Without some heavy reworking, I don't think this is possible in Jasmine right now. If I'm understanding you correctly you want to do something like:\nexpect(async function() {\n  throw new Error('bar');\n}).toThrowError();\nIn order to correctly handle and match an error thrown in an async function, the matcher, would also have to be async so you could await the statement in your spec. You could probably write your own matcher to do this, or just get a hold of the Promise that is returned and check for rejection.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "ivanbtrujillo", "authorAssociation": "NONE", "createdAt": "2017-08-28T14:39:17Z", "contents": "Hi, for me throwError doesn't work neither. I tested it by calling the async function as a promise and checking the error on the .catch statement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-26T19:38:43Z", "contents": "It's even worse than that -- an async matcher system could only be used inside of async tests. We'd either have to support two separate matcher systems (normal and async) or force users to convert every existing synchronous test to be async. I think that would be unfair to our users even if we did it as part of a major release. Especially not when there are straightforward (if clumsy) workarounds.\nSince we're very unlikely to make toThrowError work with async functions, I'm going to close this.", "reactions_count": 5, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "khuslen", "authorAssociation": "NONE", "createdAt": "2018-01-15T01:18:17Z", "contents": "To get similar functionality, I used a work around that I found on issue #1377 of Jest.\nit('to throw error', async () => {\n    let errorMessage = 'No error thrown.';\n    try {\n        await functionToThrowError();\n    } catch (error) {\n        errorMessage = error.message;\n    }\n    expect(errorMessage).toBe('An error was thrown.');\n});", "reactions_count": 19, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "CONFUSED"]}, {"authorLogin": "xfg", "authorAssociation": "NONE", "createdAt": "2018-01-23T11:52:53Z", "contents": "I think need add this feature to next major release.", "reactions_count": 15, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "SLaks", "authorAssociation": "NONE", "createdAt": "2019-03-05T20:52:55Z", "contents": "You can use https://jasmine.github.io/api/3.3/async-matchers.html:\nawait expectAsync(aPromise).toBeRejected();\nawait expectAsync(aPromise).toBeRejectedWith({prop: 'value'});", "reactions_count": 6, "reactions_data": ["HEART", "HEART", "HEART", "HEART", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1413, "url": "https://github.com/jasmine/jasmine/issues/1413", "title": "Disconnected, because no message in 10000 ms.", "contents": "Jasmine 2.7.0 fails to launch headless Chrome (--no-sandbox) on Shippable node_js 7.4.0. As a workaround, reverting to 2.6.4 resolves the issue.\nLogs copied below, for reference.\n$ xvfb-run --server-args=\"-ac\" yarn test\n\nyarn run v0.24.5\n$ ng test -cc -sr --progress false --reporters coverage-istanbul,junit,spec \n\n15 08 2017 04:11:53.934:INFO [karma]: Karma v1.7.0 server started at http://0.0.0.0:9876/\n15 08 2017 04:11:53.937:INFO [launcher]: Launching browser Chrome --no-sandbox with unlimited concurrency\n15 08 2017 04:11:53.943:INFO [launcher]: Starting browser Chrome\n15 08 2017 04:12:36.062:INFO [Chrome 58.0.3029 (Linux 0.0.0)]: Connected on socket UAp0xuAyNMjtm4f6AAAA with id 80303544\n15 08 2017 04:12:46.065:WARN [Chrome 58.0.3029 (Linux 0.0.0)]: Disconnected (1 times), because no message in 10000 ms.\nChrome 58.0.3029 (Linux 0.0.0) ERROR\n  Disconnected, because no message in 10000 ms.\nChrome 58.0.3029 (Linux 0.0.0) ERROR\n  Disconnected, because no message in 10000 ms.\nChrome 58.0.3029 (Linux 0.0.0) ERROR\n  Disconnected, because no message in 10000 ms.\n\nChrome 58.0.3029 (Linux 0.0.0): Executed 0 of 0 DISCONNECTED (10.004 secs / 0 secs)\n\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n\nPlease let me know if I can provide any further context or logs. \ud83d\ude42 If you are already aware, please feel free to close this issue.", "createdAt": "2017-08-15T04:52:19Z", "updatedAt": "2018-10-23T06:36:07Z", "closedAt": "2017-10-15T10:30:00Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "byrondover", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "byrondover", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "johncrim", "company": null}, {"login": "cport1", "company": "@ReactiveCore-com "}, {"login": "jasonwr", "company": null}, {"login": "dlarr", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-15T16:54:04Z", "contents": "Jasmine doesn't launch a browser, it should be karma that's doing that for you. Check over here: https://github.com/karma-runner/karma\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "byrondover", "authorAssociation": "NONE", "createdAt": "2017-08-15T17:36:47Z", "contents": "Hrmm ... I wonder why changing the Jasmine package version in isolation causes this behavior, but I shall follow up with the Karma team.\nThanks, Gregg!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johncrim", "authorAssociation": "NONE", "createdAt": "2017-10-04T00:58:53Z", "contents": "See angular/angular-cli#7281", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cport1", "authorAssociation": "NONE", "createdAt": "2017-10-04T18:26:13Z", "contents": "Add this to your Karma.conf:\ncaptureTimeout: 210000,\nbrowserDisconnectTolerance: 3, \nbrowserDisconnectTimeout : 210000,\nbrowserNoActivityTimeout : 210000,", "reactions_count": 72, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY", "HEART", "HOORAY", "THUMBS_UP"]}, {"authorLogin": "jasonwr", "authorAssociation": "NONE", "createdAt": "2017-10-09T22:14:48Z", "contents": "@byrondover I don't think the Karma team will be able to assist you much further on this issue. I was having the same problem and following the advice of @cport1 resolved my issue, but he set his timeout to nearly four minutes. I found that 30 seconds was more than enough time. Might bump it up to 60 seconds. Running this all on Jenkins daily so I'm sure I'll get an email if this happens again. For development I am running off of an older Macbook Pro 13\" Mac OS X Sierra.", "reactions_count": 2, "reactions_data": ["HOORAY", "THUMBS_UP"]}, {"authorLogin": "byrondover", "authorAssociation": "NONE", "createdAt": "2017-10-15T10:30:00Z", "contents": "Thanks, gents! Appreciate the advice. \ud83d\ude42", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "dlarr", "authorAssociation": "NONE", "createdAt": "2018-02-01T14:43:49Z", "contents": "Thanks @cport1 - This worked like a charm.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2018-10-23T06:36:07Z", "contents": "Using @swetapatil1 answer, I am now able to finally work!\nUsing the flags from this:\n\n/home/jenkins/workspace/node_modules/puppeteer/.local-chromium/linux-579032/chrome-linux/chrome --user-data-dir=/tmp/karma-62557134 --no-default-browser-check --no-first-run --disable-default-apps --disable-popup-blocking --disable-translate --disable-background-timer-throttling --disable-renderer-backgrounding --disable-device-discovery-notifications --disable-gpu --headless --no-sandbox --remote-debugging-port=9222 http://localhost:9876/?id=62557134\nYou may also want to try the same command but without --headless to see what happens. (Note that the URL will probably be invalid.)\n\nI was finally able to forge a working karma.conf.json (for headless ubuntu+chrome):\nkarma.conf.json\nmodule.exports = function (config) {\n  config.set({\n    basePath: '',\n    frameworks: ['jasmine', '@angular-devkit/build-angular'],\n    plugins: [\n      require('karma-jasmine'),\n      require('karma-chrome-launcher'),\n      require('karma-jasmine-html-reporter'),\n      require('karma-coverage-istanbul-reporter'),\n      require('@angular-devkit/build-angular/plugins/karma')\n    ],\n    client:{\n      clearContext: false, // leave Jasmine Spec Runner output visible in browser\n      jasmine: {\n        random: false\n      }\n    },\n    coverageIstanbulReporter: {\n      dir: require('path').join(__dirname, 'coverage'),\n      reports: [ 'html', 'lcovonly' ],\n      fixWebpackSourcePaths: true,\n      thresholds: {\n        statements: 85,\n        lines: 85,\n        branches: 55,\n        functions: 80\n      }\n    },\n    captureTimeout: 210000,\n    browserDisconnectTolerance: 3,\n    browserDisconnectTimeout : 210000,\n    browserNoActivityTimeout : 210000,\n    reporters: ['progress', 'kjhtml'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_DEBUG,\n    autoWatch: true,\n    browsers: ['ChromeHeadlessNoSandbox'],\n    customLaunchers: {\n      ChromeHeadlessNoSandbox: {\n        base: 'ChromeHeadless',\n        flags: [\n                '--no-sandbox',\n                '--disable-gpu',\n                '--enable-logging',\n                '--no-default-browser-check',\n                '--no-first-run',\n                '--disable-default-apps',\n                '--disable-popup-blocking',\n                '--disable-translate',\n                '--disable-background-timer-throttling',\n                '--disable-renderer-backgrounding',\n                '--disable-device-discovery-notifications',\n                '--remote-debugging-port=9222',\n                '--disable-web-security'\n        ]\n      }\n    },\n    singleRun: true\n  });\n};", "reactions_count": 1, "reactions_data": ["HOORAY"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1414, "url": "https://github.com/jasmine/jasmine/issues/1414", "title": "Cannot spy on individual functions that are individually exported", "contents": "Having done a lot of research I cannot find a way to mock functions that are exported with no parent object. For example I'm trying to mock functions exported the following way:\nmodule.exports = function thing(event) {};\n\nOR in ES6\nexport function thing(event) {};\n\nWhen importing these into a test file I try importing like this:\nimport {thing} from 'emvio-util-responses;  \n\n\n//call some function that calls thing()\n\nspyOn(???, 'thing').and.returnValue({});\nexpect(???.thing).toHaveBeenCalled();\n\nI have tried many ways of accomplishing this but the mock is not called.\nSome suggest importing * and providing an alias as a parent object. like this:\nimport * as SomeObj from 'emvio-util-responses;  \n\n\n//call some function that calls thing()\n\nspyOn(SomeObj , 'thing').and.returnValue({});\nexpect(SomeObj .thing).toHaveBeenCalled();\n\nThis doesn't work.\nOthers suggest using the window object\nspyOn(window, 'thing').and.returnValue({});\n\nBut I'm in node :(.", "createdAt": "2017-08-22T17:31:00Z", "updatedAt": "2019-07-02T09:21:41Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "kevinlbatchelor", "authorAssociation": "NONE", "participants_count": 13, "participants_data": [{"login": "kevinlbatchelor", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}, {"login": "jscharett", "company": null}, {"login": "maxime1992", "company": "@cloudnc"}, {"login": "goliney", "company": "@datarobot "}, {"login": "momegas", "company": null}, {"login": "gund", "company": "McMakler"}, {"login": "hauner", "company": null}, {"login": "ellipticaldoor", "company": null}, {"login": "josh08h", "company": "@bambooengineering "}, {"login": "llorenspujol", "company": null}, {"login": "antonpegov", "company": null}], "comments_count": 28, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-23T00:49:11Z", "contents": "How are you expecting to use the spied on function in your actual implementation. Node.js most likely isn't going to use the spy when you import in the implementation. If you just need to pass in a fake implementation, you can just use jasmine.createSpy to get a spy function that can be passed to the implementation.\nThe way that spyOn works is by replacing the property for the function with a function that has all of the tracking properties on it, which means that the spec and implementation have to share the same object that holds the spy.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-03T01:00:02Z", "contents": "I'm closing this as there hasn't been any activity for a while and I don't think it's something that we can realistically fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinlbatchelor", "authorAssociation": "NONE", "createdAt": "2018-04-18T00:02:44Z", "contents": "Inability spy on things easily is actually the reason a lot of people are leaving Jasmine, that said we found some work around that are awkward, however in alot of cases its just easier to move to Jest, I wish I had some time to dig into this cause there is alot about Jest that I don't like.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-18T00:52:16Z", "contents": "I would love to hear about how Jest or Mocha or whichever other testing frameworks you're using are able to accomplish what you're trying to do here. As far as I can tell, it is more of a limitation of Node.js itself and the ability (or lack thereof) to change the functions exported by another module.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jscharett", "authorAssociation": "NONE", "createdAt": "2018-05-30T13:09:27Z", "contents": "Ran across this thread as I'm running into same issue.  Looks like Jest has the ability to mock modules that are required by other modules.  Looks like tit can also mock Implementations, which is what @kevinlbatchelor is looking for I believe.  Can Jasmine do these?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-01T00:37:30Z", "contents": "@jscharett Jasmine should be able to spy on functions from a module in the same way that Jest does with the module mocking.\nvar foo = require('foo');\njasmine.spyOn(foo, 'bar');\nShould replace the bar function from the foo module, in much the same way as Jest does for all functions on the module.\nThe original poster was asking for the ability to spy on a function that is exported directly, which doesn't give Jasmine a consistent place between the spec and implementation to save the spy.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jscharett", "authorAssociation": "NONE", "createdAt": "2018-06-01T08:57:02Z", "contents": "Would this do the trick?\n/*bar.js*/\nexport function bar(){}\n\n/*foo.js*/\nimport { bar } from 'bar';\nexport function foo(){bar();}\n\n/*foo.spec.js*/\nimport * as Bar from 'bar';\njasmine.spyOn(Bar, 'bar');\n\nNot sure about using the commonjs syntax, but looks like its possible based off of what Jest is doing.\njest.mock('../foo'); \nconst foo = require('../foo');", "reactions_count": 11, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "HEART"]}, {"authorLogin": "maxime1992", "authorAssociation": "NONE", "createdAt": "2018-08-21T10:22:30Z", "contents": "Using ngrx (but it does not matter here), I'm able to import a single function select:\nimport { select } from '@ngrx/store'\nIt wasn't working with spyOn as suggested by @jscharett but it definitely put me on the right track to find how to spy/stub it \ud83d\ude4c\nimport * as ngrx from '@ngrx/store';\n\nspyOnProperty(ngrx, 'select')", "reactions_count": 18, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "goliney", "authorAssociation": "NONE", "createdAt": "2018-12-13T13:45:57Z", "contents": "import * as ngrx from '@ngrx/store';\nspyOnProperty(ngrx, 'select')\n\nDidn't work for me, unfortunately. Failed with:\n\nError:  : myFunctionName is not declared writable or has no setter", "reactions_count": 13, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "momegas", "authorAssociation": "NONE", "createdAt": "2019-01-05T17:39:27Z", "contents": "Also facing the same issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gund", "authorAssociation": "NONE", "createdAt": "2019-01-27T00:31:29Z", "contents": "Approach with spyOnProperty actually works but it is doing something different than just spyOn.\nI actually had an error saying TypeError: Object(...) is not a function so it was obvious something did change but not quite the way I expected.\nWhat really happened is spyOnProperty actually replaced the function I was trying to spy on with a getter function that was a spy now, and when it was accessed undefined was returned by default and then it was trying to call function on undefined which led to that error.\nSo I needed to return my spy for that property and everything worked:\nimport * as metadata from './metadata';\n\nit('should...', () => {\n  // First create your actual spy\n  const setPropertyTypeSpy = jasmine.createSpy('setPropertyTypeSpy');\n  // Then replace original function with your spy\n  spyOnProperty(metadata, 'setPropertyType').and.returnValue(setPropertyTypeSpy);\n\n  // Do your test\n\n  expect(setPropertyTypeSpy).toHaveBeenCalled(); // This will work now!\n});\nI still believe there is something wrong with spyOn function, I think it should actually do what I did inside...\n\nP.S. I created fixed version of spyOn:\nfunction fixedSpyOn<T>(target: T, prop: keyof T): jasmine.Spy {\n  const spy = jasmine.createSpy(`${prop}Spy`);\n  spyOnProperty(target, prop).and.returnValue(spy);\n  return spy;\n}", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-05T19:04:43Z", "contents": "Jasmine's spyOnProperty is intended for installing a spy over a get or set property created with Object.defineProperty, whereas spyOn is intended for installing a spy over an existing function. @gund, it sounds like what you really want is just spyOn.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["CONFUSED"]}, {"authorLogin": "gund", "authorAssociation": "NONE", "createdAt": "2019-02-05T20:15:46Z", "contents": "@slackersoft you are right, I really want to use just spyOn, BUT as many of us explained before (including me) it does not work with objects from other modules thus rendering spyOn broken.\nSo we came up with workaround by using spyOnProperty however it is not the way it was intended to be used, right?\nSo I think Jasmine as a testing library must provide first class support for mocking module exports but it's not currently because implementation of spyOn is buggy/not compatible with module exports...\nMaybe it would make sense to add another function called spyOnModule:\nfunction spyOnModule(modulePath: string, exportSymbolName: string): jasmine.Spy;\nAnd it's implementation will be something like:\nfunction spyOnModule(modulePath: string, exportSymbolName: string): jasmine.Spy {\n  const spy = jasmine.createSpy(`Spy of ${modulePath}#${exportSymbolName}`);\n  spyOnProperty(require(modulePath), prop).and.returnValue(spy);\n  return spy;\n}\nP.S. I'm not sure if require() will really work but it's just an example, we can very well pass already imported module from import * as m from './module/path'.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "hauner", "authorAssociation": "NONE", "createdAt": "2019-02-10T11:25:05Z", "contents": "I have the same issue with functions exported from a library created with angular cli ng generate library mylib which are imported with import * as ml from 'mylib'.\nspyOn works with import * as ml if the function is defined in the same angular project, but not when it is imported from another library project.\nThe spyOnModule workaround from @gund fixed that for me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-11T19:27:47Z", "contents": "I want to make sure I'm understanding this use case and the issues you're seeing with it. This is my current understanding so far. Given a function exported directly from some module, either\nexport function bar() {}\nor\nmodule.exports.bar = function() {}\nYou would like to be able to install a spy on bar such that the code under test actually gets the spy and not the original implementation.\nThis is potentially going to depend on which import/require mechanism you actually use and possibly even the load order of the spec and implementation. If both sides load the full module either with require or import * as foo, I would expect spyOn to work properly (and I think I'm seeing folks here saying that it does).\nIt's possible that in order to really make spyOn work, you'll need to actually use require for the full module at least in the spec in order to allow things to get installed correctly. I'm open to adding an additional function to Jasmine's interface, but I want to make sure that we can't solve this with the existing interface.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "hauner", "authorAssociation": "NONE", "createdAt": "2019-02-11T23:25:55Z", "contents": "I created a minimal test project to show the issue. Now spying doesn't work in both cases with spyOn. Grmpf ;-)\nIt fails with: Error: <spyOn> : spyMethod is not declared writable or has no setter.\nI found this webpack issue, which says\n\nWhen exporting functions using export function foo and importing using import * as bar, they are compiled to getters/setters in Webpack 4.\n\nwhich explains why spyOn fails in that case and why it works using spyOnModule.\nNo idea why I have two different behaviors in my project.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:21:54Z", "contents": "Ok, I think I've got a handle on this now. I would be happy to review a pull request to add something like spyOnModule. I would like it to be able to handle either the case of import using getters/setters or just a plain replacement. Basically it should work anywhere spyOn does currently so folks don't have to think about whether to use this across different setups.\nRe-openning.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "gund", "authorAssociation": "NONE", "createdAt": "2019-02-22T08:18:13Z", "contents": "@slackersoft I can create a PR for this.\nJust to clarify, you want to have spyOnModule that will support both spying on normal functions as well as functions declared as getters?\nAlso in my example of  spyOnModule above does it make sense to do require or should it accept already imported module object?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-23T01:44:01Z", "contents": "I think it makes sense for a spyOnModule to also spy on a normal function as well as the function returned by a getter. This should allow it to be used if WebPack changes how it creates those imports or between different packaging systems.\nI think it will make the most sense to have spyOnModule accept an already required module. This allows it to also run in a browser or other non-CommonJS environment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ellipticaldoor", "authorAssociation": "NONE", "createdAt": "2019-02-24T21:23:30Z", "contents": "This works for me\nimport * as helpers from '@root/helpers'\nimport { decideWinner } from '@root/helpers/combat'\nimport cases from 'jest-in-case'\n\nbeforeEach(() => {\n  jest.restoreAllMocks()\n})\n\ncases(\n  'decideWinner',\n  ({ prepare, expected }) => {\n    const getRandomPercentageMock = jest\n      .spyOn(helpers, 'getRandomPercentage')\n      .mockReturnValueOnce(prepare.randomPercentage)\n\n    const winner = decideWinner(prepare.attackerChanceToWin)\n\n    expect(getRandomPercentageMock).toHaveBeenCalledTimes(1)\n    expect(winner).toEqual(expected.winner)\n  },\n  {\n    'attacker wins': {\n      prepare: {\n        randomPercentage: 70,\n        attackerChanceToWin: 80,\n      },\n      expected: {\n        winner: 'attacker',\n      },\n    },\n    'defendant wins': {\n      prepare: {\n        randomPercentage: 90,\n        attackerChanceToWin: 80,\n      },\n      expected: {\n        winner: 'defendant',\n      },\n    },\n  },\n)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-26T01:37:20Z", "contents": "@ellipticaldoor it looks like you're actually using Jest for all of that testing and not Jasmine, so I'm not sure this will apply here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinlbatchelor", "authorAssociation": "NONE", "createdAt": "2019-03-07T00:52:04Z", "contents": "We did find a hacky work around for that Jasmine + Webpack mocking using new es6 export syntax while calling functions in the same file.\nIf you file has a function you wanto mock say:\nexport function goData() {}\nand later in the file you call that funciton:\nlet result  = goData() {}\nJasmine cannot mock or spyOn this function.\nHowever if when you call this function you append it to exports like this:\nlet result  = exports.goData() {}\nJasmine can now spy on this function in the tests:\n import * as allFunctions from './myFile';\n spyOn(allFunctions , 'goData')\n\nThis is super hacky but it works. One downside to doing this is if you tack your function calls on to exports it will break your IDE ability to refactor or navigate or autocomplete stuff. We decided not to this and instead we just move these functions we need to mock into a different files, which can be tricky or we just all through the functions if we can.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-14T00:36:42Z", "contents": "Unfortunately, @kevinlbatchelor, I don't think that use case is something that can be solved, since Jasmine doesn't have access to the scope inside your module to make changes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "josh08h", "authorAssociation": "NONE", "createdAt": "2019-04-01T18:27:53Z", "contents": "I'm currently faced with the same issue:\n// utils.js\nexport const sayHello = () => 'hello';\n\n\n// foobar.js\nimport { sayHello } from './utils';\nexport const foobar = () => {\n  return sayHello();\n};\n\n\n// foobar-spec.js\nimport { foobar } from './foobar';\nimport * as utils from './utils';\n\ndescribe('foobar', () => {\n  it('works', () => {\n    spyOn(utils, 'sayHello').and.returnValue('foobar');\n    expect(foobar()).toEqual('foobar'); // Fails since sayHello() calls original and returns 'hello'\n  });\n});\nAny suggestions?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-02T00:40:21Z", "contents": "@josh08h this is going to largely come down to what code is being generated by your bundler/compiler of choice as to whether this is mockable. If import { sayHello } from './utils'; becomes const sayHello = require('./utils').sayHello then the original function will already be saved off into a local variable and there isn't anything Jasmine (or any other library) can to to replace a local variable. However, if it becomes const utils = require('./utils') and usages are utils.sayHello(), then replacing the sayHello function on the object returned by require should work fine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "josh08h", "authorAssociation": "NONE", "createdAt": "2019-04-02T06:00:41Z", "contents": "@slackersoft thanks for the help. I have decided to go against named exports and instead I will export a default object which will look like export default { sayHello: sayHello }. This should do it. \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "llorenspujol", "authorAssociation": "NONE", "createdAt": "2019-06-12T10:14:28Z", "contents": "I have experienced this issue recently in a Angular/Typescript project. We solved it setting the tsc ouput module to be commonjs in our testing tsconfig:\ntsconfig.spec.json:\n\"compilerOptions\": {\n     ....\n      // force commonjs module output, since it let mock exported members on modules to anywhere in the application (even in the same file)\n      \"module\": \"commonjs\",\n  },\n\nThe resultant output of any exported member of a module in commonjs would be like: exports.myFunc = function() {}. This led use spyOn without worries since it is wrapped on the 'exports' object. One great use case of that, is that it would be mocked anywhere, including the usages in its own file!\nExample:\n// some-module.js\nexport function functionToMock() {\n     return 'myFuncToMock';\n}\nexport function functionToTest() {\n     return functionToMock();\n}\n\n// testing-module.spec.js\nimport * as SomeModule from ./some-module\nspyOn(SomeModule, 'functionToMock').and.returnValue('mockedCorrectly');\nSomeModule.functionToTest().toBe('mockedCorrectly')\nSo, in resume, compile to commonjs module when testing may solve your issue, hope this helps someone:)", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "antonpegov", "authorAssociation": "NONE", "createdAt": "2019-07-02T08:57:07Z", "contents": "So, in resume, compile to commonjs module when testing may solve your issue, hope this helps someone:)\n\nThis is the best workaround! Thanks @llorenspujol!!!\n@gund, your fixedSpyOn didn't work for me, because spy goes to this property, but tested method still has original dependency in it's lexical scope chain. So it calls original method instead of my spy.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1415, "url": "https://github.com/jasmine/jasmine/issues/1415", "title": "spyOnProperty does not work with object literals.", "contents": "Expected Behavior\nI seem completely unable to override existing object literals to provide mock data during tests. Initially I tried with object properties 2 levels deep, but it seems that it also does not work even at the first level.\nvar foo = { \n  bar: \"test\",\n  pizza: {\n    toppings: \"cheese\"\n  }\n};\nspyOnProperty(foo, \"bar\", \"get\").and.returnValue(\"baz\");\nspyOnProperty(foo.pizza, \"toppings\", \"get\").and.returnValue(\"pineapple\");\nexpect(foo.bar).toEqual(\"baz\");\nexpect(foo.pizza.toppings).toEqual(\"pineapple\");\n\nCurrent Behavior\n- Error: Property bar does not have access type get\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"BASIC test of object properties\", () => {\n    const foo = {\n        bar: \"test\",\n        pizza: {\n            toppings: \"cheese\"\n        }\n    };\n    it(\"test base-level object property\", () => {\n        spyOnProperty(foo, \"bar\", \"get\").and.returnValue(\"baz\");\n        expect(foo.bar).toEqual(\"baz\");\n    });\n    it(\"test second level object property\", () => {\n        spyOnProperty(foo.pizza, \"toppings\", \"get\").and.returnValue(\"pineapple\");\n        expect(foo.pizza.toppings).toEqual(\"pineapple\");\n    });\n});\n\n//   BASIC test\n//    \u2717 test base-level object property\n//      - Error: Property bar does not have access type get\n//    \u2717 test second level object property\n//      - Error: Property toppings does not have access type get\nYour Environment\n\njasmine v2.7.0\njasmine-core v2.7.0\nnode.js v8.2.1\nMac OS X - Sierra", "createdAt": "2017-08-23T12:31:09Z", "updatedAt": "2017-08-24T08:27:13Z", "closedAt": "2017-08-23T23:49:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "silverbucket", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "silverbucket", "company": "silverbucket.net"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-23T23:49:47Z", "contents": "spyOnProperty is intended for use on objects that have used Object.defineProperty, since that is implemented with a function behind it and can't be modified by just assigning to it. If you just have basic properties on an object, you should be able to just assign over them.\nSince this is the current expected behavior, I'm going to close this.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "LAUGH", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "silverbucket", "authorAssociation": "NONE", "createdAt": "2017-08-24T08:27:13Z", "contents": "@slackersoft thanks for the clarification, do you think this should be clarified in the documentation? It's really not that clear from reading the API doc on this function.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1416, "url": "https://github.com/jasmine/jasmine/issues/1416", "title": "Behaviour of the \u201cthis\u201d keyword", "contents": "After reading https://jasmine.github.io/2.8/introduction.html#section-The_%3Ccode%3Ethis%3C/code%3E_keyword I expected this to be empty for every single beforeEach/it/afterEach run. But when testing with jasmine 2.8 (on node 6.10) I found that it is only reinitialized for different spec files.\nThus it has no advantage over normal variables except that it has not to be declared.\nIf being reset on every it cycle it would become really good because one has not to worry about cleaning up the fragments of earlier specs.\nTherefore I suggest that either:\n\nthis should be reinitialized on every beforeEach/it/afterEach cycle. This would disable the current available possibility to use it to share data from beforeAll, but that could be done with variables instead.\n\nor:\n\nthis should be replaced by two global context objects (like spec and suite) which serve the purpose of this in the spec and suite context. spec would then be cleared on every it cycle while suite would be cleared on every spec file, only.", "createdAt": "2017-08-27T07:21:56Z", "updatedAt": "2017-09-01T00:22:43Z", "closedAt": "2017-09-01T00:22:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "toaster", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "toaster", "company": "Infopark AG"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-29T00:15:17Z", "contents": "Jasmine doesn't have a concept of a file when running your specs, only specs and suites that contain them. Because of the hierarchical nature of suites, it's possible that a parent suite sets a property on the this that you're seeing further down the tree. If you're using beforeAll or afterAll this gets even trickier, but without that this is basically what happens:\nEach Spec object gets a new context object when Jasmine begins executing it. Execution of a Spec involves running any beforeEachs, then the it itself, then any afterEachs. After the Spec finishes execution, the context object goes out of scope and can thus be garbage collected. This purpose here is to allow objects to be shared between a beforeEach and the associated its (with each it getting its own copy) without having to use closure scoped variables, which can bloat the amount of memory your suite uses.\nbeforeAll and afterAll start allowing some of the things on the this to be shared between specs in a given suite.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "toaster", "authorAssociation": "NONE", "createdAt": "2017-08-29T06:55:45Z", "contents": "Okay, got the file thing. But, why does the following suite fail:\n'use strict';\n\ndescribe(\"\u201cthis\u201d behaviour #1\", () => {\n  it(\"is empty #1\", () => {\n    expect(this.foo).toBeUndefined();\n    this.foo = \"#1\";\n    expect(this.foo).toBe(\"#1\");\n  });\n\n  it(\"is empty #2\", () => {\n    expect(this.foo).toBeUndefined();\n    this.foo = \"#2\";\n    expect(this.foo).toBe(\"#2\");\n  });\n});\nOutput with node 6.10:\nStarted\n.F\n\nFailures:\n1) \u201cthis\u201d behaviour #1 is empty #2\n  Message:\n    Expected '#1' to be undefined.\n  Stack:\n    Error: Expected '#1' to be undefined.\n        at UserContext.it (/Users/tilo/work/test/jasmine/spec/test_spec.js:12:22)\n\n2 specs, 1 failure\nFinished in 0.011 seconds", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-31T00:35:21Z", "contents": "This is because you're using arrow functions which bind their own this and ignore the one that Jasmine is passing in. If you change the specs to use function() { instead of () => { they should behave as expected.\nUnfortunately there isn't anything that Jasmine can do about this.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "toaster", "authorAssociation": "NONE", "createdAt": "2017-08-31T05:30:38Z", "contents": "Mea culpa! Sorry for bothering you with this.\nBut one more thing: Couldn't be a global variable a replacement for this which would work with arrow functions, too?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-09-01T00:22:43Z", "contents": "I don't think that a global variable is the right solution to this problem. I understand your disappointment in not getting the correct this, but maintaining the correct state on a global variable doesn't seem worth the complexity. You can either use the function keyword or closure variables (if you still want to use fat arrow).\nI'm going to close this, since it's not really an issue with Jasmine. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1417, "url": "https://github.com/jasmine/jasmine/issues/1417", "title": "toThrowError(Error) does not fail the test correctly", "contents": "Suite that reproduces the behavior (for bugs)\nThis suit checks if the function throws TypeError:\ndescribe('The function',function(){\n  it('should throw TypeError',function(){\n    function fun(){\n      throw Error('message');\n    }\n    expect(fun).toThrowError(TypeError,'message');\n  });\n});\nThis sample works fine, it fails the test and return the message:\nExpected function to throw TypeError with message 'message', but it threw Error with message 'message'.\nThis suit  checks if the function throws Error:\ndescribe('The function',function(){\n  it('should throw Error',function(){\n    function fun(){\n      throw TypeError('message');\n    }\n    expect(fun).toThrowError(Error,'message');\n  });\n});\nAnd this sample does not work fine.\nExpected Behavior\nFor me, it should fail the test and return the message:\nExpected function to throw Error with message 'message', but it threw TypeError with message 'message'.\nCurrent Behavior\nIt passed the test.\nYour Environment\n\n\nVersion used: 2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): 8.3.0\nOperating System and version (desktop or mobile): Windows 10", "createdAt": "2017-08-28T00:56:23Z", "updatedAt": "2017-08-29T01:09:36Z", "closedAt": "2017-08-29T01:09:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "devrafalko", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "devrafalko", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-08-29T00:27:09Z", "contents": "Unfortunately, Error is the base constructor for most other errors that can be thrown, and thus checking for Error as the type will pass for anything that extends that prototype (like TypeError). This is advantageous if you have a hierarchy of Error types and you just want to check that one of your AppError objects was thrown to make sure you're wrapping everything up, and not letting any native Errors through.\nThis is actually the currently designed behavior and I don't think we're looking to change it. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1419, "url": "https://github.com/jasmine/jasmine/issues/1419", "title": "It can't do some async work in the reporter hooks.", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\nI want to do some async work during the custom reporter hooks.\nCurrent Behavior\nIt can't do async work in the custom reporter hooks.\ncustom reporter:\nvar reporter = {\n    ....\n    suiteDone () {\n        //  It log nothing after 1s\n         setTimeout(() => {\n             console.log(123)\n       }, 1000)\n    },\n    jasmineDone() {\n        // It log nothing after 2s\n          setTimeout(() => {\n               console.log(456)\n         }, 2000)\n    }\n}\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nYour Environment\n\n\nVersion used: 2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 62\nOperating System and version (desktop or mobile): Desktop\nLink to your project:", "createdAt": "2017-09-07T03:26:48Z", "updatedAt": "2017-10-23T17:01:14Z", "closedAt": "2017-10-23T17:01:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CommanderXL", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "CommanderXL", "company": "Beijing Forestry University"}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T17:01:13Z", "contents": "This looks like a duplicate of #842, so I'm closing it in favor of that issue. If you have a moment to comment on that issue explaining what async things you need to do, it would help us understand the need.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1420, "url": "https://github.com/jasmine/jasmine/issues/1420", "title": "beforeEach timeout not reporting where the timeout occurs.", "contents": "Here is a trivial example where jasmine is not helping. It should at least say it failed in the beforeEach block on line 2\nUsing\njasmine v2.8.0\njasmine-core v2.8.0\nTEST\ndescribe('Timeout', () => {\n  beforeEach((done) => {\n\n  });\n\n  it('Should work', () => {\n    expect(true).toBe(true);\n  });\n});\nFAILURE\nStarted\nF\n\nFailures:\n1) Timeout Should work\n  Message:\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n  Stack:\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n        at ontimeout (timers.js:386:14)\n        at tryOnTimeout (timers.js:250:5)\n        at Timer.listOnTimeout (timers.js:214:5)\n\n1 spec, 1 failure\nFinished in 5.02 seconds", "createdAt": "2017-09-14T12:25:35Z", "updatedAt": "2018-05-15T00:32:59Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "agirorn", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "agirorn", "company": "NOVOMATIC Lottery Solutions"}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "SalathielGenese", "company": "@macrocephal "}], "comments_count": 5, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-26T15:31:20Z", "contents": "This would be pretty difficult to solve in 2.x, but it seems like it should be easy enough once #1409 is implemented.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-27T01:22:32Z", "contents": "Finding the origin of a function is a bit harder than it seems at first, especially once things start becoming asynchronous. In order to get the file and line number in the QueueRunner where the timeout is handled, we would need to actually throw an Error and grab the information from the stack (browser willing), during suite construction time. This means that each call to beforeEach, it, etc would throw and catch an Error, which isn't without overhead.\nWe would be happy to review a pull request that updated the creation functions in Env to add file path, line number, and possibly the type (beforeEach, it, etc.) to the queueableFn that is created, and have the QueueRunner use this information when constructing its error message for timeouts.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SalathielGenese", "authorAssociation": "NONE", "createdAt": "2018-05-13T00:44:38Z", "contents": "As the below output shows, all my tests passed but I get that pending error bound to no it no describe... When there's no it, thus no test, no error but even an empty it shows as passed but throws that pending error.\nThe real pain is that such error message don't help debugging. As for me, I'm learning testing so I'm not really sure it has nothing to do with a exception from either my code or my mocks.\nStarted\n............\n\n\nSuite error: POST /users\n  Message:\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n  Stack:\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n        at <Jasmine>\n        at ontimeout (timers.js:482:11)\n        at tryOnTimeout (timers.js:317:5)\n        at Timer.listOnTimeout (timers.js:277:5)\n\n12 specs, 1 failure\nFinished in 5.045 seconds\n[nodemon] app crashed - waiting for file changes before starting...\n\nI believe it has to do with this thread !", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SalathielGenese", "authorAssociation": "NONE", "createdAt": "2018-05-13T00:48:06Z", "contents": "Oh, yes -\nI set timeout at 2E4 during integration testing because of remote microservices' API calls but for my unit testing (hummm, I'd to give up integration testing with jasmine + superstests) my mocks resolves instantly. So we are far from having a REAL timeout.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-15T00:32:59Z", "contents": "If a failure occurs outside of the execution of a specific test (it), like say in a beforeAll, Jasmine will report that as a Suite error, as you're seeing in that output. Based on that, it looks like a beforeAll or afterAll in the \"POST /users\" suite is executing asynchronously, but not completing. Make sure you're not returning an unresolved Promise, or that you're appropriately invoking the done callback if you receive any arguments. If the beforeAll doesn't need to be asynchronous, make sure you're not doing anything that makes Jasmine think it is async.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["feature request", "has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1421, "url": "https://github.com/jasmine/jasmine/issues/1421", "title": "[Improvement] Spy on all functions in a class/object", "contents": "This is similar to issue #909. But, instead of just being able to have an object with spies on multiple functions with one function call, I would like to have a method like spyOnAllMethods(Instance of some class/object) which returns a spy object with all the functions of the provided instance are spies of the original functions.\nThanks!", "createdAt": "2017-09-17T08:00:07Z", "updatedAt": "2018-07-25T00:55:57Z", "closedAt": "2018-07-25T00:55:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "yxliang01", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "yxliang01", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mjeanroy", "company": null}, {"login": "bdirito", "company": null}, {"login": "mohanrao", "company": null}, {"login": "aeisenberg", "company": "Ganchrow Scientific"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-17T20:57:42Z", "contents": "I think it might make sense to have an easier way to create a test double for an object. We would be happy to review a pull request that creates something like a createDouble that takes a constructor function and returns a new Jasmine spy object for all of the functions on an instance of that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mjeanroy", "authorAssociation": "NONE", "createdAt": "2017-11-21T14:08:26Z", "contents": "Hi,\nIt's certainly not perfect, but I already implemented this kind of utility function in a small library: take a look at the description here.\nNot sure to have the time soon, but I would be happy to share it to jasmine core.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "yxliang01", "authorAssociation": "NONE", "createdAt": "2017-11-21T14:25:30Z", "contents": "@mjeanroy Nice one! This library looks fantastic. :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bdirito", "authorAssociation": "NONE", "createdAt": "2017-12-20T18:51:52Z", "contents": "It doesnt spy on them but\nmock = new Proxy(\n  () => {\n    return mock;\n  },\n  {\n    get: function() {\n      return mock;\n    }\n  }\n)\n\nallows the mocking of anything. ie you can mock.call().it.all.the().way.down()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mohanrao", "authorAssociation": "NONE", "createdAt": "2018-06-29T01:34:24Z", "contents": "Any plans to improve jasmine like the methods in jasmine-utils developed by @mjeanroy ?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "aeisenberg", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-07-19T17:19:04Z", "contents": "I had some free time and added this functionality in the PR above. Is anyone available to take a look at the PR and provide feedback?", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1422, "url": "https://github.com/jasmine/jasmine/issues/1422", "title": "[2.8.0] - Running out of memory on false(y) expectation.", "contents": "Hello,\nI'm trying to run an expectation against a variable containing a DOM element for my Angular 4 specs, and one of the specs are causing the browser to go into an infinite loop and crash. I stumbled upon this when I changed the implementation of my tests. Where the element variable used to be null (see example below), it's now present on the DOM and is an instance of the DebugElement class. When it hits the expectation line it freezes, and with Task Manager open I can watch my computer's memory usage skyrocket (I actually let it go a bit too long once and my screen went black and had to reboot).\nExpected Behavior\nThe test suite should not freeze, and my computer should not run out of memory and crash.\nCurrent Behavior\nThe test suite freezes at the current spec and fills up my computer's memory until it crashes.\nPossible Solution\nI haven't gone through the jasmine source yet, so I'm not sure :/\nSuite that reproduces the behavior (for bugs)\nit('should not crash the computer', () => {\n    let element = fixture.debugElement.query(By.css('div#container'));\n    expect(element).toBeFalsy();\n    expect(element).toBe(null); // this makes it crash as well...\n});\n\nYour Environment\n\n\nVersion used: jasmine-core@2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 61.0.3163.100, Angular 4.0.0\nOperating System and version (desktop or mobile): Windows 10 Professional\nLink to your project: It's a private repository, sorry.", "createdAt": "2017-09-28T13:29:14Z", "updatedAt": "2018-02-14T00:51:27Z", "closedAt": "2018-02-14T00:51:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elliotwesoff", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "elliotwesoff", "company": null}, {"login": "scottmcmaster", "company": "Grab"}, {"login": "sgravrock", "company": null}, {"login": "akaztp", "company": "inCoding (freelance)"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "scottmcmaster", "authorAssociation": "NONE", "createdAt": "2017-10-18T20:29:20Z", "contents": "Also seeing something like this. Right offhand, it looks like maybe a stack overflow in the prettyprinting of the object for the failure message.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-03T00:54:36Z", "contents": "The pretty printer tries to prevent both stack overflows and memory exhaustion, but it's possible that your DOM tree is both deep and wide enough to get past its checks. You might be able to fix the problem by setting jasmine.MAX_PRETTY_PRINT_DEPTH to a smaller value than the default of 40. You might find that the matcher failure message isn't very useful, though, since it's likely to contain a serialization of a lot more DebugElement instances than you might expect. You might actually find an assertion like expect(!!element).toBeFalsy() to be more useful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "akaztp", "authorAssociation": "NONE", "createdAt": "2017-11-22T22:19:03Z", "contents": "Got me one hour to pinpoint to this problem.\nWhat is more interesting is that\nexpect(element).not.toBe(null);\ndoes not have any problem", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-13T16:37:19Z", "contents": "I've made a couple of changes on master that should help with this. I've reduced jasmine.MAX_PRETTY_PRINT_DEPTH to 8. Jasmine will also now stop pretty-printing after a certain number of characters, configurable as jasmine.MAX_PRETTY_PRINT_CHARS, even if it hasn't hit either MAX_PRETTY_PRINT_DEPTH or MAX_PRETTY_PRINT_ARRAY_LENGTH.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-14T00:51:26Z", "contents": "With the new default values for the pretty printer and the inclusion of a maximum number of characters to print, this issue should be solved in 2.9 and 3.0. 3.0 also includes better pretty printing of DOM nodes which should help this problem as well.\nI'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1423, "url": "https://github.com/jasmine/jasmine/issues/1423", "title": "It block executed before beforeEach done() called", "contents": "Current Behaviour\nI have a test which has some setup which does some async requests. I do the setup in a beforeEach function, and when all the promises resolve, it calls done(). However, I'm seeing that the it block is executed before the done() callback is executed. I've put a simple test together to show this.\nNote that if I use beforeAll instead, it works.\nExpected Behaviour\nit block should not be executed until the done callback of beforeEach is called.\nSuite that reproduces the behaviour (for bugs)\nExample simple test:\ndescribe('Test', function () {\n    let flag = false;\n\n    describe('simple test -', function () {\n        beforeEach(function (done) {    \n            var xhttp = new XMLHttpRequest();\n            xhttp.onreadystatechange = function () {\n                if (this.readyState == 4 && this.status == 200) {\n                    flag = true;\n                    done();\n                }\n            };\n            xhttp.open('GET', 'https://api.github.com/zen', true);\n            xhttp.send();\n        });\n        it('should wait for done and set flag correctly', function () {\n            expect(flag).toBe(true);\n        });\n    });\n});\n\nContext\nI need to wait for network requests (promises) to resolve before running tests.\nYour Environment\nJasmine v2.8.0\nKarma v1.7.1\nWebpack\nMac OS Sierra. Suite run inside Vagrant.\nConsole errors posted here: https://stackoverflow.com/questions/46604310/jasmine-beforeeach-not-waiting-for-done-callback", "createdAt": "2017-10-06T14:15:19Z", "updatedAt": "2018-01-22T20:39:34Z", "closedAt": "2018-01-22T20:39:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "PhilBroadbent", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "PhilBroadbent", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T17:39:38Z", "contents": "This is puzzling. The code that you posted looks fine, and it passes when I run it by itself. But the console errors Uncaught TypeError: Cannot read property 'spies' of undefined and\nUncaught Error: Tried to complete the wrong suite (from your stackoverflow link) are consistent with the describe function's done callback being called after the test runs.\nI wonder if the problem has something to do with the interaction between Jasmine and Karma, or with something that's in your Vagrant image. I might be able to do a bit more digging if you can provide a minimal, complete, runable code sample that reproduces the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-22T20:39:34Z", "contents": "Closing as we haven\u2019t heard anything in several months. If you\u2019re still having this problem, feel free to open a new issue with code that reproduces it.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1425, "url": "https://github.com/jasmine/jasmine/issues/1425", "title": "Add command line option like --disallow-focused for jasmine which cause fail if there is any focused suites or specs", "contents": "It would be nice to have option like this, which can be used in pre-commit hook preventing not to commit focused suites or specs.", "createdAt": "2017-10-11T09:15:06Z", "updatedAt": "2018-02-14T00:02:50Z", "closedAt": "2018-02-14T00:02:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "profiprog", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "profiprog", "company": "ProfiProg"}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T16:56:11Z", "contents": "I agree. Actually, the plan is to make that the default behavior rather than an option. We're planning to release that along with a number of other breaking changes in Jasmine 3.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-14T00:02:50Z", "contents": "Jasmine 3.0 will now treat suites with specs excluded (with fit/fdescribe or otherwise) to report an overall status of incomplete to solve this problem.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["has Tracker story", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1426, "url": "https://github.com/jasmine/jasmine/issues/1426", "title": "fake clock does not allow one timer to clear another when they are scheduled for the same time", "contents": "The following test should pass, but it fails:\nit('one timer can clear another even if they expire concurrently', () => {\n  jasmine.clock().install();\n\n  let timerId2;\n\n  setTimeout(() => {\n    console.log('timer1');\n    expect(timerId2).not.toBeUndefined();\n    clearTimeout(timerId2);\n  }, 100);\n\n  timerId2 = setTimeout(() => {\n    console.log('timer2');\n    fail();\n  }, 100);\n\n  jasmine.clock().tick(1000);\n\n  jasmine.clock().uninstall();\n});\nI can see an argument that the order of these two might not be guaranteed, or shouldn't be relied upon, so maybe timer2 could fire first so timer1 can't clear it. However, the log output shows that timer1 does in fact fire first, so timer2 was cleared, and should not fire.\nTested using 2.8.0.", "createdAt": "2017-10-11T09:17:42Z", "updatedAt": "2018-01-02T16:17:58Z", "closedAt": "2018-01-02T16:17:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "voltrevo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "voltrevo", "company": null}, {"login": "leahciMic", "company": "TokBox"}], "comments_count": 1, "comments_data": [{"authorLogin": "leahciMic", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-11T13:14:53Z", "contents": "I have confirmed that this is an issue.\nI have submitted a PR (#1427) that adds tests and a fix for this issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1430, "url": "https://github.com/jasmine/jasmine/issues/1430", "title": "Since Jasmine 2.7.0, it's not possible to spyOn(window, 'Function')", "contents": "Are you creating an issue in the correct repository?\n\nExpected Behavior\nIt should be possible to spyOn(window, 'Function')\nNote that this is the Function constructor, not a user-defined function.\n\n\nCurrent Behavior\njasmine throws a hard error that keeps the spec and suite from completing:\nTypeError: Function.prototype.apply is undefined   jasmine.js:4236:11\nclearTimeout jasmine.js:4236:11\n  attempt/cleanup< jasmine.js:4247:11\n  once/< jasmine.js:4172:9\n  attempt jasmine.js:4306:7\n  QueueRunner.prototype.run jasmine.js:4217:20\n  QueueRunner.prototype.execute jasmine.js:4199:5\n  queueRunnerFactory jasmine.js:909:7\n  TreeProcessor/this.execute jasmine.js:5187:7\n  Env/this.execute jasmine.js:983:7\n  window.onload boot.js:144:5\n\nSame happens for window.Function = jasmine.createSpy().and.callThrough();\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\nit('should do something', function() {\n  spyOn(window, 'Function');\n  expect(true).toBe(true);\n});\nLive repro here: http://plnkr.co/edit/sCxS40pqfQuHdeKuZnNM?p=preview\nIn the plnkr, if your revert to 2.6.4 it works.\nContext\nWe are using spyOn(window ... in the AngularJS test suite to check if the Function constructor is accessed, see https://github.com/angular/angular.js/blob/e58bcfab99450d2c4777d87a7ddfea19b9f38b5c/test/AngularSpec.js#L1041\nWe test this with karma. For some reason, in the karma setup, the 2.6.4 tests also fail. Not sure why it works in the plnkr.\n\n\nYour Environment\n\n\nVersion used: 2.8.0, 2.7.0. Worked last in 2.6.4\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2017-10-16T12:05:39Z", "updatedAt": "2017-10-24T15:30:21Z", "closedAt": "2017-10-24T15:30:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Narretz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Narretz", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T15:58:05Z", "contents": "Jasmine needs to be able to make some basic assumptions about the environment that it operates in. In particular, it has to be able to assume that core objects provided by the runtime, as well as its own code, have not been modified. There's no way to guarantee any particular behavior in the face of code that replaces things like Function. In this case, Jasmine relies on the presence of Function.prototype.apply to ensure compatibility with browsers that don't provide an apply method on setTimeout and clearTimeout. Jasmine <= 2.6.4 didn't hit that particular code path when running synchronous tests. Jasmine >= 2.7.0 does.\nNormally my advice would be to find a more direct way to assert what your tests really mean, but it looks like your tests really are all about verifying calls to Function. So you might try something like this:\nit('should not call Function', function() {\n  var wasCalled = false;\n  var realFunction = Function;\n  window.Function = function() {\n    wasCalled = true;\n  };\n  \n  try {\n    doSomething();\n  }\n  finally {\n    window.Function = realFunction;\n  }\n  \n  expect(wasCalled).toBe(false);\n});\n\nNote that the the test is synchronous, the mock is installed and removed within the test rather than in beforeEach and afterEach, a hand-rolled mock is used in place of Jasmine spies, and all assertions happen after the real Function is restored. That combination should ensure that no Jasmine code runs while the mock is in place.\nI'd be happy to review a pull request that makes Jasmine more robust in the face of code that modifies the environment. But I don't want to set the expectation that we're going to actively support, or make any compatibility guarantees about, test code that modifies things like Function.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Narretz", "authorAssociation": "NONE", "createdAt": "2017-10-24T14:09:42Z", "contents": "Thanks for the explanation. If spying on window.Function was never actively supported then this is fine with me. Although this should be documented somewhere. Or is it already?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-24T15:30:21Z", "contents": "The documentation is due for a major overhaul as part of 3.0. We can certainly consider adding some notes about this sort of thing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1431, "url": "https://github.com/jasmine/jasmine/issues/1431", "title": "jasmine.any(Symbol) does not match Symbol instances", "contents": "Expected Behavior\nsymbolObj instanceof Symbol actually returns false, so perhaps this is working as intended (even if a bit non-intuitive). But I'd expect a symbol instance to be treated as equal to jasmine.any(Symbol).\nCurrent Behavior\nSymbol instances are not equal to jasmine.any(Symbol).\nPossible Solution\nWe could special-case Symbols in the equality checker to work with .any(Symbol).\nSuite that reproduces the behavior (for bugs)\nhttps://codepen.io/anon/pen/rGoXMz\nContext\n\n\nYour Environment\n\n\nVersion used: 2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 61\nOperating System and version (desktop or mobile): Linux", "createdAt": "2017-10-18T17:19:10Z", "updatedAt": "2017-10-24T15:18:29Z", "closedAt": "2017-10-24T15:18:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "voithos", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "voithos", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T21:52:10Z", "contents": "Your proposed solution makes sense to me. I'd be happy to review a pull request that added this feature while preserving compatibility with older IE versions that don't have Symbol.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1432, "url": "https://github.com/jasmine/jasmine/issues/1432", "title": "[2.8.0] jasmine.anything() does not match Symbols as keys in Maps", "contents": "Expected Behavior\nA Map object with a Symbol key is neither null nor undefined, so per the documentation for .anything(), it should be considered equal to a Map object with jasmine.anything() as the key.\nCurrent Behavior\nexpect(symbol).toEqual(jasmine.anything()) works fine, but comparing 2 Map objects with Symbol and jasmine.anything() as keys, respectively, fails.\nThis used to be working in an earlier version of Jasmine, so is likely a regression?\nSuite that reproduces the behavior (for bugs)\nhttps://codepen.io/anon/pen/rGoXMz\nYour Environment\n\n\nVersion used: 2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 61\nOperating System and version (desktop or mobile): Linux", "createdAt": "2017-10-18T17:22:35Z", "updatedAt": "2017-10-24T15:26:34Z", "closedAt": "2017-10-24T15:26:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "voithos", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "voithos", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T21:57:08Z", "contents": "I think it's likely that fixing #1431 would take care of this one too. If not, I'd be happy to review a pull request that fixes it.\nBy the way, I noticed that you've included small run-able demos in this and other issues you'e logged. Thank you for that. It really makes things easier.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "voithos", "authorAssociation": "CONTRIBUTOR", "createdAt": "2017-10-24T04:28:17Z", "contents": "Thanks for mentioning that - I'm glad that the demos help.\nI did a bit of investigation, and it seems like fixing #1431 doesn't actually help here, unfortunately. Even more surprisingly, it seems that it's not just Symbols that are having this issue: as far as I can tell, nothing seems to be matching properly with jasmine.anything() as a Map key: https://codepen.io/anon/pen/MEdZvN", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1433, "url": "https://github.com/jasmine/jasmine/issues/1433", "title": "PhantomJs unable to process jasmine spyOnProperty", "contents": "Are you creating an issue in the correct repository?\nYes\n\nI am spying on 2 of my properties using spyOnProperty and they are working good in intellij console for karma testing and debug mode in browser but when I run them using phantomjs they give me error mentioned below.\nCode I am using to test\nconst div = fixture.debugElement.query(By.css('.xxxx'));\ndiv.triggerEventHandler('mouseover', null);\nfixture.detectChanges();\nexpect(component.tooltip.isOpen()).toBeFalsy();\n\n// now spying on to see if its behavior changes\nspyOnProperty(div.nativeElement, 'clientWidth', 'get').and.returnValue(1400);\nspyOnProperty(div.nativeElement, 'scrollWidth', 'get').and.returnValue(2400);\n\n###Error\nPhantomJS 2.1.1 (Mac OS X 0.0.0) EllipsisOverflowComponent should show tooltip on mouse over of the element FAILED\n\tError: clientWidth is not declared configurable in http://localhost:9877node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 4410)\n\thttp://localhost:9877/_karma_webpack_/main.bundle.js:8593:22\n\tinvoke@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12949:31\n\tonInvoke@http://localhost:9877/_karma_webpack_/vendor.bundle.js:136846:45\n\tinvoke@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12948:40\n\trun@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12699:49\n\thttp://localhost:9877/_karma_webpack_/vendor.bundle.js:136543:37\n\thttp://localhost:9877/_karma_webpack_/vendor.bundle.js:183754:31\n\tinvoke@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12949:31\n\tonInvoke@http://localhost:9877/_karma_webpack_/vendor.bundle.js:136080:45\n\tonInvoke@http://localhost:9877/_karma_webpack_/vendor.bundle.js:136843:47\n\tinvoke@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12948:40\n\trun@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12699:49\n\thttp://localhost:9877/_karma_webpack_/vendor.bundle.js:183749:28\n\thttp://localhost:9877/_karma_webpack_/vendor.bundle.js:136069:46\n\tinvokeTask@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12982:36\n\trunTask@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:12749:57\n\tinvoke@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:13044:45\n\ttimer@http://localhost:9877/_karma_webpack_/polyfills.bundle.js:14070:34\n\nWhen debugged deep it looks like the error is in these lines and throwing this\n  if (!descriptor.configurable) {\n    throw new Error(propertyName + ' is not declared configurable');\n  }\n\nhttps://github.com/jasmine/jasmine/blob/master/src/core/SpyRegistry.js#L82-L95\nhttps://github.com/jasmine/jasmine/blob/master/src/core/util.js#L62-L76\nExpected Behavior\n\n\nShould spy on properties\nCurrent Behavior\n\n\nThrowing Error: clientWidth is not declared configurable in http://localhost:9877node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 4410)\nPossible Solution\n\n\nShould work in all condition\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nUnable to run the test\nYour Environment\n\n\nVersion used: 2\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): angular cli phantomjs\nOperating System and version (desktop or mobile): mac\nLink to your project: internal", "createdAt": "2017-10-18T22:55:22Z", "updatedAt": "2017-10-23T22:18:12Z", "closedAt": "2017-10-23T22:18:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aniruddhadas9", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aniruddhadas9", "company": "@FINRAOS @candifood @ybranttech @etouchsystemscorp @squareTrade"}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T22:18:12Z", "contents": "Unfortunately, I don't see a way to fix this. PhantomJS doesn't allow changing clientWidth, which is exactly what spyOnProperty needs to do. There are a number of possible workarounds discussed in the thread about a related Karma issue. Hopefully one or more of them will work in your situation.\nI'm closing this as there's nothing that Jasmine can do about it.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1434, "url": "https://github.com/jasmine/jasmine/issues/1434", "title": "angular.mock.module causing a break in testing", "contents": "I am attempting to run some tests but keep getting a break in the build, here is my error:\n C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:443181 forEach@C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:172615 loadModules@C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:440391 createInjector@C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:301303 WorkFn@C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:164286 inject@C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:162795 C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:3371 TypeError: undefined is not a constructor (evaluating '$compile('<bss></bss>')') in C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js (line 9) C:/Users/schmitzb/Projects/RCO/rco-project/test/index.js:9:4189 PhantomJS 2.1.1 (Windows 7 0.0.0): Executed 4 of 4 (1 FAILED) (0.109 secs / 0.084 secs)\nHere is the test I am trying to run:\n`import * as angular from 'angular';\n import 'angular-mocks';\n import 'modules/bss/bss.component';\n\ndescribe('bssGrid', function () {\nbeforeEach(angular.mock.module('app.modules.bss'));\n\nvar $compile: angular.ICompileService;\nvar $rootScope: angular.IRootScopeService;\nvar $q: angular.IQService;\n\nbeforeEach(function () {\n\tinject(function (_$compile_, _$rootScope_, _$q_) {\n\t\tconsole.log('hey there');\n\t\t$compile = _$compile_;\n\t\t$rootScope = _$rootScope_;\n\t\t$q = _$q_;\n\t});\n});\n\nit('should display the component', function () {\n\t// Compile a piece of HTML containing the directive\n\tvar element = $compile('<bss></bss>')($rootScope);\n\n\t// fire all the watches\n\t$rootScope.$digest();\n\n\t// Check\n\tvar html = element.html();\n\texpect(html).toBe(true);\n });\n});`\n\nI am trying to test this component:\n `angular.module('app.modules.bss', [\n   'app.services.bss',\n   'ui.grid',\n  'ui.grid.edit',\n  'ui.grid.treeView',\n  'ui.grid.resizeColumns',\n  'ui.grid.cellNav',\n  'ui.grid.selection',\n  'ui.grid.autoResize',\n  'ui.grid.exporter',\n  'ui.grid.pinning',\n  'app.modules.newVolumeTarget',\n  // 'app.modules.targetDefType',\n  'app.modules.newVolumeType',\n  'app.modules.uigridtemplates.bss-cell',\n  'app.modules.targetDefType.select-formula'\n   ]).component('bss', {\n\tbindings: {},\n\tcontroller: BssComponent,\n\ttemplate: require('./bss.html')\n})`\n\n   `export class BssComponent {\n     public static $inject = ['bssService', 'uiGridTreeBaseService', '$timeout', '$scope', 'ersModalService', '$location', '$window', '$q', '$interval', 'uiGridConstants', '$uibModal'];\n\n           // variables defined here\n\n     constructor(bssService: BssService, uiGridTreeBaseService, $timeout, $scope, ersModalService, $location, $window, $q, $interval, uiGridConstants, $uibModal) {\n         // rest of controller code sits here\n   }\n }\n\n`\nThis line of code seems to be breaking my test:\nbeforeEach(angular.mock.module('app.modules.bss'));\nWhen I run this test, it works fine:\n `import * as angular from 'angular';\n  import 'angular-mocks';\n  import 'components/layout/header-bar/header-bar.component';\n\ndescribe('heaaderBar', function() {\n\nbeforeEach(angular.mock.module('app.components.layout.header-bar'));\n\nvar $compile: angular.ICompileService;\nvar $rootScope: angular.IRootScopeService;\nvar $q: angular.IQService;\t\n\nvar mockFilter = function(value) {\n\treturn value;\n};\n\nbeforeEach(function() {\n\tangular.mock.module(function($provide) {\n\t\t$provide.value('translateFilter', mockFilter);\n\t});\n});\n\nbeforeEach(angular.mock.inject(function(_$compile_, _$rootScope_, _$q_) {\n\t// The injector unwraps the underscores (_) from around the parameter names when matching\n\t$compile = _$compile_;\n\t$rootScope = _$rootScope_;\n\t$q = _$q_;\n}));\n\nit('should display the component', function() {\n\t// Compile a piece of HTML containing the directive\n\tvar element = $compile('<header-bar></header-bar>')($rootScope);\n\n\t// fire all the watches\n\t$rootScope.$digest();\n\n\t// Check\n\tvar html = element.html();\n\texpect(html).toBeTruthy();\n });\t\n });\n\n`\nIs there something that has changed that I need to update in regards to using a specific test?\nI am using Angular 1.5.5 and Angular Mocks 1.5.5. Thanks!", "createdAt": "2017-10-20T21:37:05Z", "updatedAt": "2017-12-21T16:03:58Z", "closedAt": "2017-12-21T16:03:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bschmitz9", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bschmitz9", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-23T16:14:10Z", "contents": "This is just an educated guess, but it might work if you do this:\nbeforeEach(function() {\n   angular.mock.module('app.modules.bss')\n});\n\ninstead of this:\nbeforeEach(angular.mock.module('app.modules.bss'));\n\nI'm guessing that the problem has to do with Angular Mocks rather than Jasmine, so if the above fix doesn't get things working, you might be better off asking for help in an Angular forum.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-21T16:03:58Z", "contents": "Closing as this doesn't appear to be an issue with Jasmine and we haven't heard anything about it in a while.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1438, "url": "https://github.com/jasmine/jasmine/issues/1438", "title": "jasmine.createSpy() with no arguments - is it discouraged?", "contents": "Coming from the world of Sinon where stub()/spy() doesn't take in a string name, jasmine.createSpy(\"methodName\") seems unnecessary:\nconst stubLogger = () => {\n    const clock = lolex.createClock();\n    const { setTimeout } = clock;\n    const onLog = jasmine.createSpy(\"onLog\");\n\n    const logger = new Logger({ onLog, setTimeout });\n\n    return { clock, logger, onLog };\n};\nAll the jasmine.github.io samples pass a string to createSpy, and the TypeScript definition marks name as mandatory:\nfunction createSpy(name: string, originalFn?: (...args: any[]) => any): Spy;\nIs it discouraged to not pass a name? I'd prefer not to unless there's a good technical reason?", "createdAt": "2017-10-26T03:09:25Z", "updatedAt": "2017-10-26T18:22:30Z", "closedAt": "2017-10-26T18:22:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JoshuaKGoldberg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JoshuaKGoldberg", "company": "@Codecademy"}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-26T14:56:18Z", "contents": "The spy's name is used by the matchers to build failure messages. So if you don't pass it, you might get failures with messages like Expected spy unknown to have been called. or Expected Object({ s: spy on unknown }) to equal 'something else'. instead of something more readable. Other than that, I don't think there's any harm in omitting it.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "JoshuaKGoldberg", "authorAssociation": "NONE", "createdAt": "2017-10-26T18:22:30Z", "contents": "Thanks for the clarification! I'll update the TypeScript typings.\nIf you could put this somewhere in the Jasmine docs, IMO that would be useful too.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1439, "url": "https://github.com/jasmine/jasmine/issues/1439", "title": "Expected undefined to equal 'G'. at UserContext.<anonymous> (...\\rna-transcription.spec.js:6:39)", "contents": "# This is my rna-transcription.js\nvar DnaTranscriber = function (input) {\nthis.Dna = input;\n};\nDnaTranscriber.prototype.toRna = function () {\nvar DNA = this.Dna;\nif(DNA == 'G'){\n      return 'C';\n} else if(DNA == 'C'){\n    return 'G';\n} else if(DNA == 'T'){\n    return 'A';\n} else if(DNA == 'A'){\n    return 'U';\n}\n\n//\n};\nmodule.exports = DnaTranscriber;\n# This is rna-transcription.spec.js\nvar DnaTranscriber = require('./rna-transcription');\nvar dnaTranscriber = new DnaTranscriber();\ndescribe('toRna()', function () {\nit('transcribes cytosine to guanine', function () {\nexpect(dnaTranscriber.toRna('C')).toEqual('G');\n});\nxit('transcribes guanine to cytosine', function () {\nexpect(dnaTranscriber.toRna('G')).toEqual('C');\n});\nxit('transcribes adenine to uracil', function () {\nexpect(dnaTranscriber.toRna('A')).toEqual('U');\n});\nxit('transcribes thymine to adenine', function () {\nexpect(dnaTranscriber.toRna('T')).toEqual('A');\n});\nxit('transcribes all dna nucleotides to their rna complements', function () {\nexpect(dnaTranscriber.toRna('ACGTGGTCTTAA'))\n.toEqual('UGCACCAGAAUU');\n});\nxit('correctly handles completely invalid input', function () {\nexpect(function () { dnaTranscriber.toRna('XXX'); }).toThrow(\nnew Error('Invalid input')\n);\n});\nxit('correctly handles partially invalid input', function () {\nexpect(function () { dnaTranscriber.toRna('ACGTXXXCTTAA'); }).toThrow(\nnew Error('Invalid input')\n);\n});\n});\nI got this failure:\n\ntoRna() transcribes cytosine to guanine\nMessage:\nExpected undefined to equal 'G'.\nStack:\nError: Expected undefined to equal 'G'. at UserContext. (..\\rna-transcription.spec.js:6:39)", "createdAt": "2017-10-26T05:01:38Z", "updatedAt": "2017-11-03T00:56:21Z", "closedAt": "2017-11-03T00:56:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jfmojicas", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jfmojicas", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-26T15:39:06Z", "contents": "It looks like your tests pass the DNA sequence as an argument to toRna but the code under test expects it to be a constructor argument. If you fix that, things should work like you expect them to.\nIf you need further help writing or debugging your tests, please ask on the Jasmine mailing list.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1441, "url": "https://github.com/jasmine/jasmine/issues/1441", "title": "Type definition of custom matchers cannot be merged to Matcher<T> interface", "contents": "I'm working on Typescript. I created following custom matcher.\n\nmatcher.ts\n\nexport const customMatchers: any = {\n  toBeAt: (util, customEqualityTesters) => {\n    return {\n      compare: (actual, expected) => {\n        return {\n          pass: actual.isClose(expected, 0.00001)\n        }}}}\n};\n\n... and this is the type definition to be merged to jasmine.Matcher<T> interface.\n\n\nmatcher.d.ts\n\ndeclare namespace jasmine {\n  interface Matchers<T> {\n    toBeAt(expected: any): boolean;\n  }\n\nBut typescript compiler complains TS2551: Property 'toBeAt' does not exist on type 'Matchers<any>'. why?", "createdAt": "2017-10-28T10:19:52Z", "updatedAt": "2017-11-03T00:56:41Z", "closedAt": "2017-11-03T00:56:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kota65535", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kota65535", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-02T16:42:02Z", "contents": "This is just a guess, but did you forget to reference your matcher.d.ts file in the file that TypeScript is complaining about? If that's not it, you'll probably be better off asking for help in a TypeScript forum or from whoever provided the Jasmine typings that you're using.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-03T00:56:41Z", "contents": "I'm closing this as it doesn't appear to be an issue with Jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1442, "url": "https://github.com/jasmine/jasmine/issues/1442", "title": "extend createSpyObj to support properties", "contents": "Expected Behavior\nCurrently i cant create nicely spy object full of methods, but what if i need to mix some properties and methods?\nCurrent Behavior\ncurrently createSpyObj creates only methods\nPossible Solution\nanother array argument 'propertyNames' just like ;methodNames' could solve problem.\nProperties would return default values until i use spyOnProperty.\nContext\nThat's my typescript,  i hope it could be less ugly:\nlet mockRouter: jasmine.SpyObj<Router>;\n\nmockRouter = jasmine.createSpyObj('mockRouter', ['navigateByUrl']);\n\nmockRouter = {\n  ...mockRouter,\n  events: Observable.of(...routerEvents),\n} as jasmine.SpyObj<Router>;", "createdAt": "2017-10-28T20:44:42Z", "updatedAt": "2019-06-25T23:27:15Z", "closedAt": "2019-06-25T23:27:15Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Plondrein", "authorAssociation": "NONE", "participants_count": 12, "participants_data": [{"login": "Plondrein", "company": null}, {"login": "sgravrock", "company": null}, {"login": "ninjamyst", "company": null}, {"login": "benelliott", "company": null}, {"login": "sergiojoker11", "company": "@flexys "}, {"login": "felpel", "company": null}, {"login": "szabolcssimonyi", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "MarcinusX", "company": "@MSzalek-Mobile "}, {"login": "rcavezza", "company": "Liberty Mutual"}, {"login": "Daniel-Marcelo", "company": null}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 18, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-02T16:43:05Z", "contents": "That seems like a nice feature to have. I'd be happy to review a pull request that adds it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ninjamyst", "authorAssociation": "NONE", "createdAt": "2018-04-18T15:25:26Z", "contents": "This would be very helpful as we have many objects we want to mock that have getter properties.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "benelliott", "authorAssociation": "NONE", "createdAt": "2018-05-18T13:21:12Z", "contents": "A slightly terser form for the current API:\nlet mockRouter = {\n  ...jasmine.createSpyObj('mockRouter', ['navigateByUrl']),\n  events: Observable.of(...routerEvents),\n} as jasmine.SpyObj<Router>;", "reactions_count": 12, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "sergiojoker11", "authorAssociation": "NONE", "createdAt": "2018-05-24T10:15:23Z", "contents": "Is this achievable? This feature would make code more readable... and our life easier in turn.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sergiojoker11", "authorAssociation": "NONE", "createdAt": "2018-06-18T23:39:37Z", "contents": "PR implementing this: #1569", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "felpel", "authorAssociation": "NONE", "createdAt": "2018-07-30T23:48:46Z", "contents": "@sergiojoker11 any updates on your end to complete your current PR? Would be very neat to have this feature out of the box, my test classes would be cleaner.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sergiojoker11", "authorAssociation": "NONE", "createdAt": "2018-07-31T09:11:04Z", "contents": "@felpel Yes, I am planning on addressing the comments later this week. I swear I will!", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "szabolcssimonyi", "authorAssociation": "NONE", "createdAt": "2018-08-13T13:25:41Z", "contents": "any progress on this? this feature would be very usefull", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-23T00:29:16Z", "contents": "@szabolcssimonyi  You can see the current state of @sergiojoker11's pull request #1569.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MarcinusX", "authorAssociation": "NONE", "createdAt": "2018-08-30T08:46:31Z", "contents": "Is it possible to achieve the same result until the feature is released?", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "benelliott", "authorAssociation": "NONE", "createdAt": "2018-08-30T09:04:23Z", "contents": "@MarcinusX there are workarounds in the original post and my comment above.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "MarcinusX", "authorAssociation": "NONE", "createdAt": "2018-08-30T09:09:17Z", "contents": "@benelliott Oh! I understand now! I thought that events was something specific to the issue but it is just overriding the field. Thank you!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rcavezza", "authorAssociation": "NONE", "createdAt": "2018-11-27T19:52:59Z", "contents": "Does this pull request need someone to come in and finish it? This is something I can use in my codebase and it looks like this is close to the finish line, but fell through the cracks a few months ago.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sergiojoker11", "authorAssociation": "NONE", "createdAt": "2018-11-28T10:23:20Z", "contents": "@rcavezza Yes, it does need someone to finish it. By the time when the code review was done, I didn't understand the proposed changes and didn't have the time. So, please, feel free to take it over and finish it.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Daniel-Marcelo", "authorAssociation": "NONE", "createdAt": "2019-03-21T14:52:20Z", "contents": "What\n\nExpected Behavior\nCurrently i cant create nicely spy object full of methods, but what if i need to mix some properties and methods?\nCurrent Behavior\ncurrently createSpyObj creates only methods\nPossible Solution\nanother array argument 'propertyNames' just like ;methodNames' could solve problem.\nProperties would return default values until i use spyOnProperty.\nContext\nThat's my typescript, i hope it could be less ugly:\nlet mockRouter: jasmine.SpyObj<Router>;\n\nmockRouter = jasmine.createSpyObj('mockRouter', ['navigateByUrl']);\n\nmockRouter = {\n  ...mockRouter,\n  events: Observable.of(...routerEvents),\n} as jasmine.SpyObj<Router>;\n\nWhat exactly is the purpose of the rest/spread operator in this case? Without, the compiler gives out stating that instance variables are missing. But it works fine after adding. Just looking for a bit more clarity on why this works.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-13T05:06:49Z", "contents": "I wonder if this is a case where a potential new feature exposes (makes worse) holes in existing features.\nToday, let spy = createSpyObj('foo', [...]) makes sense only because it's possible to easily update the plans of any methods you create in your tests.  spy.bar.and.throwError, etc.\nThat doesn't exist with spyOnProperty.  Using spyOnProperty on existing objects (mocking individual properties) is therefore trickier than mocking individual methods: you need to save a pointer to the actual spy returned because you cannot get it back again to update the plan.\nTwo potential things to fix:\n\n\nMaybe we need to be opening up access to property spies.  I'm not sure exactly how, but maybe if you spy on object.prop (get), we add object.prop_.get to the object?  A non-enumerable new prop?  I suppose nothing is guaranteed to work for ALL code under test, so perhaps a universal getSpy(object, prop/method, [accessType]) is what is missing.\n\n\nIf we fix that, then the original proposal (a list of props) is fine.  If not, it's useless because you can't set any plans!  So a possible improvement is a new interface for createSpyObj that includes plans... something like this, instead of the arrays:\n\n\ncreateSpyObj('obj', {\n    foo: plan => plan.returnValue(3),\n    bar: true, // spy with no plan (default)\n    baz: {\n        get: plan => plan.returnValue(43),\n        set: plan => plan.stub\n    }\n})", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-16T00:04:07Z", "contents": "The current version of createSpyObj already takes an object for the functions to spy on, so I'm not sure about the right way to check the difference between \"this is a function that returns a function\" and \"this is a function that I would like to have a complex spy on\".\nGiven that, I think it would make more sense to add a jasmine.getSpy type of function instead of extending more things onto existing objects outside of Jasmine's control. I still think it is probably fine to allow createSpyObj handle properties since you can at least default to a stub or define a return value.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "felpel", "authorAssociation": "NONE", "createdAt": "2019-06-19T20:30:39Z", "contents": "@felpel Yes, I am planning on addressing the comments later this week. I swear I will!\n\n@sergiojoker11 leaving me hanging, mate", "reactions_count": 3, "reactions_data": ["LAUGH", "EYES", "LAUGH"]}], "reactions_count": 49, "reactions_datalabels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1443, "url": "https://github.com/jasmine/jasmine/issues/1443", "title": "How to await async functions wrapped with spyOn() ?", "contents": "In my test code I got undefined returned for some async functions wrapped with spyOn().\nI then created a codepen to reproduce, and here it times out.\nhttps://codepen.io/anon/pen/wPvLeZ\nCan I use spyOn() with async functions and how do I await them?", "createdAt": "2017-10-29T17:01:58Z", "updatedAt": "2018-05-31T15:50:51Z", "closedAt": "2017-10-30T17:35:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "angularsen", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "angularsen", "company": "@webstep"}, {"login": "sgravrock", "company": null}, {"login": "2rhop", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-10-30T15:20:06Z", "contents": "You can spyOn an async function just like any other. There are a couple of issues with the code you provided that are stopping it from working. First of all, spyOn replaces methods on objects. It doesn't work with free functions. Second, spyOn replaces the original method with one that, by default, doesn't do anything but record that the call happened. Call .and.callThrough() on the spy if you want it to behave the same way as the original method So instead of this:\nasync function getAsync() {\n  await delayAsync(50);\n  return \"async result\";\n}\n\n// ...\nconst getAsyncWithSpyOn = spyOn(getAsync, 'getAsync');\nexpect(await getAsyncWithSpyOn()).toEqual(\"async result\");\n\nYou probably want something more like this:\nvar someObject = {\n  getAsync: async function() {\n    await delayAsync(50);\n    return \"async result\";\n  }\n}\n\n//...\nspyOn(someObject, 'getAsync').and.callThrough()\nexpect(await someObject.getAsync()).toEqual(\"async result\");\n\nFinally, asynchronous test functions can either be declared async, return a promise, or take a done callback. Since yours are async they don't need to take a callback.\nHere's a passing version of your demo. I hope this helps.", "reactions_count": 13, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "angularsen", "authorAssociation": "NONE", "createdAt": "2017-10-30T17:35:02Z", "contents": "Wow, thanks for the thorough feedback. My bad on the codepen, I did actually have an object in my own test code so that is probably why the behavior was different.\nThanks for the tip on .and.callThrough(), I didn't catch that in the docs so hopefully someone else might find this issue useful when searching later.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "2rhop", "authorAssociation": "NONE", "createdAt": "2018-05-31T15:50:50Z", "contents": "@sgravrock thanks a lot you are saving my work today!!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1444, "url": "https://github.com/jasmine/jasmine/issues/1444", "title": "Set comparison is broken.", "contents": "I'm using jasmine version 2.8.0\nExpected Behavior\ndescribe(\"test\", function() {\n  it(\"work\", function() {\n    const refs1 = new Set([\n      ['a', 'a'],\n      ['b', 'b'],\n    ]);\n    const refs2 = new Set([\n      ['a', 'a'],\n      ['b', 'b'],\n    ]);\n    expect(refs1).toEqual(refs2);\n  });\n});\n\n\nI'm expecting this test to pass.\nCurrent Behavior\nThe test does not pass.\nPossible Solution\nRevert acc8c23\nor merge #1445", "createdAt": "2017-10-31T20:07:32Z", "updatedAt": "2017-11-02T15:17:19Z", "closedAt": "2017-11-02T15:17:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "b-3-n", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "b-3-n", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1447, "url": "https://github.com/jasmine/jasmine/issues/1447", "title": "Suggestion: Expect should also handle promises", "contents": "Expected Behavior\nCurrently Jasmine supports async code in before*, after* and it blocks. I think it would be a great addition to the framework if the expect function could handle promises as well. The main reasons that come to my mind are:\n\nCode would be less verbose\nWe would be able to use some existent matchers, improving the console output\n\nCurrent Behavior\nCurrently, if one wants to test if an async function throws, this is one possible way out:\nit('throws an error on invalid argument', async () => {\n  let error;\n  try {\n    await methodBeingTested(invalidArgument);\n  } catch (err) {\n    error = err;\n  }\n  expect(error).toEqual(ExpectedError);\n});\nIf expect did handle async code, one could just do:\nit('throws an error on invalid argument', async () => {\n  expect(async () => {\n    await methodBeingTested(invalidArgument);\n  }).toThrow(ExpectedError);\n});\nPossible Solution\nI don't know how Jasmine's internals work, so I think any solution I could provide here would be too naive. =/\nContext\nThere's much async code to be tested nowadays. Async before*, after* and it blocks handle almost every situation I can think of, except by the case described above. If expect could handle async code as well, I think the framework would be more feature complete. =)", "createdAt": "2017-11-07T16:21:52Z", "updatedAt": "2019-01-30T01:49:04Z", "closedAt": "2017-11-07T17:13:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "danielalves", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "danielalves", "company": "descomplica.com.br"}, {"login": "sgravrock", "company": null}, {"login": "darlanalves", "company": "@tntdigital "}, {"login": "brunolm", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-07T17:13:05Z", "contents": "We've had a few requests for this feature. The biggest problem is that async is \"contagious\" -- if a function calls an async function and wants to do anything with the result, it has to be async itself. So if matchers are async, then all specs have to be async as well. Which means that implementing this feature would break the majority of Jasmine specs.\nThe other problem is that the feature would be difficult to use correctly. In order for Jasmine to associate the failure with the spec that causes it, it would be necessary to await the expect call so that the spec doesn't finish until after the matcher is evaluated:\nit('throws an error on invalid argument', async () => {\n  await expect(async () => {\n    await methodBeingTested(invalidArgument);\n  }).toThrow(ExpectedError);\n})\n\nThat would be really easy to forget, in which case Jasmine would associate the failure with the wrong spec or no spec at all. We already see that problem when people call done at the wrong time, and it can be incredibly time-consuming to debug.\nSo, to sum up: I recognize the value of this feature, but it would require users to rewrite most existing specs and would make writing Jasmine specs much more error prone. I'm open to suggestions if anyone has a clever idea for how to make this work without requiring specs to be async or to await the call to expect. But I'm going to go ahead and close this as it's not something that we are likely to implement.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "danielalves", "authorAssociation": "NONE", "createdAt": "2017-11-08T16:37:42Z", "contents": "Hey, @sgravrock! Thanks for your answer!\nAfter reading all your points above, I came up with an idea. Please, tell me if it could work (and again, forgive me if this is too naive =) ).\nFirst of all, we would need to borrow the idea of cancelable promises described on React's Blog and alter it a bit:\nfunction makeCancelablePromise(originalPromise) {\n  let resolved = false;\n  let hasCanceled = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    originalPromise.then(val => {\n      resolved = true;\n      (hasCanceled ? reject({ isCanceled: true }) : resolve(val))\n    });\n    originalPromise.catch(error => {\n      resolved = true;\n      (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    });\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled = true;\n    },\n    isResolved() {\n      return resolved;\n    },\n  };\n}\nOk. Now, the goal is to use expect with async functions without needing to use await before it:\n// `It`'s callback wouldn't need to be async here\nit('throws an error on invalid argument', () => {\n  expect(async () => {\n    await methodBeingTested(invalidArgument);\n  }).toThrow(ExpectedError);\n});\nThe rough idea I came up with goes like this:\nfunction expect(param, ...) {\n\n  // ...\n\n  if (isPromise(param)) {\n      const cancelablePromise = makeCancelablePromise(promise);\n\n      // We will need this to make the parent it wait for all\n      // async expects before exiting\n      parentIt.registerAsyncExpect(cancelablePromise.promise);\n\n      // This will let us abort async expects after the\n      // specified timeout\n      const timeoutId = setTimeout(() => {\n          if (!cancelablePromise.isResolved()) {\n            cancelablePromise.cancel();\n          \n            // Fails the expect here telling the user that the \n            // promise was not called before the specified timeout\n            fail(...);\n          }\n      }, jasmine.DEFAULT_TIMEOUT_INTERVAL);\n  }\n\n  // ...\n}\n\nfunction it(...) {\n\n  // ...\n\n  callTestCallback();\n\n  // Either an async expect will get called or it'll get canceled, so\n  // there's no need to track the async expects timeouts\n  await Promise.all(this.asyncExpects);\n\n  // ...\n}\n\nWhere:\n\nparentIt: the it block where expects get called\nregisterAsyncExpect: a method that would keep track of every async callback passed to expects. In the code above, it is filling the this.asyncExpects array.\n\nOne problem to be worked out is how to abort on a first failure. Maybe listening for a first rejection could work. We would also need to keep what matcher should be called and use it inside makeCancelablePromise's wrappedPromise's handlers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-18T00:14:37Z", "contents": "It's not as \"easy\" as that, unfortunately. I can see a few challenges that might not be immediately obvious:\n\nJasmine can't create promises because it needs to run in environments that don't have them. (And we can't use a polyfill because that could cause users' tests to falsely pass in environments that lack promise support.) So you'd need a purely callback-based equivalent of makeCancelablePromise.\nJasmine would need to support arbitrary numbers of these async expect calls in a given spec, which would add more complexity.\nexpect can't just decide to be async based on the type of the parameter because that would break the behavior of invocations like expect(promiseThatNeverResolves).toEqual(jasmine.any(Promise)). Or imagine a custom matcher like this: expect(somePromise).not.toBeSettled(). Any implementation would need to preserve those behaviors.\nIt seems like this might significantly complicate the code that determines when a spec is done, which is already pretty challenging to work with.\n\nYou are of course welcome to take a crack at this. But one of the key criteria we use when evaluating PRs for new features is whether the feature is worth the impact on maintainability. In this case that may be a high bar to clear.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "darlanalves", "authorAssociation": "NONE", "createdAt": "2018-04-19T11:09:27Z", "contents": "@sgravrock\nWhat would be the chances of introducing a new async expect function that has all the special cases covered and yet doesn't interfere with current specs in the wild?\nI don't have a clear answer to that either, but it's painful for a lot of developers including me...\nHow about an extension of expect() that handles promises?\ne.g. expect.async(promise).toBeResolved()", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "brunolm", "authorAssociation": "NONE", "createdAt": "2019-01-23T15:33:35Z", "contents": "If anyone got here from Google, you can use this:\nconst myAsyncFunction = async () => { ... }\nexpectAsync(myAsyncFunction()).toBeRejected()", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-30T01:49:04Z", "contents": "You should also be able inline the async function, something like:\nexpectAsync(async () => { ... }).toBeRejected();", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1449, "url": "https://github.com/jasmine/jasmine/issues/1449", "title": "calling pending() on async fn will fail the test", "contents": "Suite that reproduces the behavior (for bugs)\ndescribe('GIVEN I have pending scenarions ', () =>  {\n  it('and initial test callback is marked as async', async () => {\n    pending('it causes a failure');\n  });\n  it('and second one is just with a normal done callback', done => {\n    pending('it gets marked as pending and does not cause a failure');\n    done();\n  });\n});\nOutput:\nStarted\nF*\n\nFailures:\n1) GIVEN I have pending scenarions  and initial test callback is marked as async\n  Message:\n    Failed: => marked Pendingit causes a failure\n  Stack:\n    Error: Failed: => marked Pendingit causes a failure\n        at <anonymous>\n        at runMicrotasksCallback (internal/process/next_tick.js:121:5)\n        at _combinedTickCallback (internal/process/next_tick.js:131:7)\n        at process._tickCallback (internal/process/next_tick.js:180:9)\nPending:\n\n1) GIVEN I have pending scenarions  and second one is just with a normal done callback\n  it gets marked as pending and does not cause a failure\n\n2 specs, 1 failure, 1 pending spec\nFinished in 0.005 seconds\n\nExpected outcome:\nBoth tests should be marked as pending and who spec should not have failures.\nCurrent behaviour:\nFirst testcase fails.\nContext\n\n\nYour Environment\nnode version: 8.7.0\njasmine: 2.8.0\nwindows 10 cmd & cygwin console.", "createdAt": "2017-11-13T11:03:50Z", "updatedAt": "2017-11-29T16:57:09Z", "closedAt": "2017-11-29T16:57:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rasjani", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rasjani", "company": "@Omenia "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-29T01:37:40Z", "contents": "Similar to #1450", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1450, "url": "https://github.com/jasmine/jasmine/issues/1450", "title": "Async `pending` fails the spec when used with Promises", "contents": "The work done to handle global errors in async specs using the done callback correctly collects the pending exception and marks the spec appropriately. When calling pending from within a Promise returned by a spec, it is treated as a Promise failure and doesn't mark the spec as pending.\nExample suite:\nit('done pends', function(done) {\n  setTimeout(pending, 10);\n});\n\nit('promise pends', function() {\n  return new Promise(function () {\n    pending('promise');\n  });\n});\nOutput:\nnpm test\n\n> tester@ test /Users/gregg/workspace/tester\n> jasmine --config=jasmine.json\n\nStarted\n*F\n\nFailures:\n1) promise pends\n  Message:\n    Failed: => marked Pendingpromise\n  Stack:\n    Error: Failed: => marked Pendingpromise\n        at runMicrotasksCallback (internal/process/next_tick.js:58:5)\n        at _combinedTickCallback (internal/process/next_tick.js:67:7)\n        at Immediate._tickCallback (internal/process/next_tick.js:98:9)\n        at runCallback (timers.js:651:20)\nPending:\n\n1) done pends\n  No reason given\n\n2 specs, 1 failure, 1 pending spec\nFinished in 0.022 seconds\n\nPossible Solution\nIt looks like the Spec object only checks for the isPendingSpecException when handling an exception, but the QueueRunner passes Promise failures along via fail which causes them to skip this logic and go directly to the expectation failure handler.\nThe goal of using fail in QueueRunner was to not have to duplicate the continuation logic, but it probably needs to change to handle a Promise rejection as an Error and then continue on after that.\nYour Environment\n\nVersion used: jasmine 2.8\nEnvironment name and version nodejs v7.5.0 (and others)\n\nWe would be happy to review a pull request that addresses this issue.", "createdAt": "2017-11-17T21:17:57Z", "updatedAt": "2019-04-16T00:18:55Z", "closedAt": "2017-11-29T16:57:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "slackersoft", "authorAssociation": "MEMBER", "participants_count": 6, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rasjani", "company": "@Omenia "}, {"login": "fushi", "company": null}, {"login": "sgravrock", "company": null}, {"login": "jasmine4ever", "company": null}, {"login": "ViieeS", "company": null}], "comments_count": 14, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-29T01:37:32Z", "contents": "Similar to #1449", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rasjani", "authorAssociation": "NONE", "createdAt": "2017-11-30T08:54:18Z", "contents": "I spend a few hours yesterday reading the code around this issue and looking into possible way fix this issue.\nEssentially the issue can be caught within QueueRunner's atttach() at:\n         if (maybeThenable && j$.isFunction_(maybeThenable.then)) {\n            maybeThenable.then(next, next.fail);\n            completedSynchronously = false;\n            return { completedSynchronously: false };\n          }\n\nmaybeThenable is called and if promise fails, it goes to next.fail() - Now, if someone could point out how i could get a reference to running Spec from that point on so that i could mark it pending would be nice. As, just comparing the error in next.fail() to pending i'm already able to prevent the actual error but reporting the spec as pending wont happen..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-01T00:39:17Z", "contents": "@rasjani this should be fixed on master now. If you have a chance, please take a look and if you're still seeing the issue with the updated code let us know.\nThanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "fushi", "authorAssociation": "NONE", "createdAt": "2018-01-30T01:33:38Z", "contents": "@slackersoft Is this supposed to fix angular/jasminewd#32 as well?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-30T03:28:12Z", "contents": "@fushi That's likely to have been already working for a release or four, depending on exactly what flavor of async spec we're talking about.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fushi", "authorAssociation": "NONE", "createdAt": "2018-01-30T19:02:58Z", "contents": "@sgravrock I'm using Protractor/Jasmine, and still hitting this issue with:\nit('Should be pending', () => { pending(); });\nWhich fails like this:\nFailed: => marked Pending", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-30T23:48:07Z", "contents": "This functionality should have been released in Jasmine 2.9. You'll have to make sure your Protractor is using the newest version of Jasmine to get this fix.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jasmine4ever", "authorAssociation": "NONE", "createdAt": "2018-03-20T17:13:04Z", "contents": "@slackersoft Is there a way to programmatically find if the pending() is called in a spec? Or if the error object contains any details regarding the pending?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-22T00:17:36Z", "contents": "Since pending() is invoked during execution of a spec, there isn't really a good way to determine that it will have been called once the spec will have completed. If Jasmine is handling the error, it should properly mark the spec as pending and add any message to the result passed to reporters. If you are injecting a different handler that is catching the error that is thrown, you should be able to look at the message to determine if it is the pending spec exception.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jasmine4ever", "authorAssociation": "NONE", "createdAt": "2018-03-30T22:21:04Z", "contents": "@slackersoft Yes, I am passing a custom handler. How can I get an error message? Is there a specific function in jasmine to do that? Can I programmatically set a spec to pending if I see Pending string in the thrown error string? If yes, how? Any help with that?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-03T00:13:53Z", "contents": "@jasmine4ever this seems to have move quite far away from the original intent in this issue. Please start a new conversation with some more specifics on your actual use case. This probably belongs on the jasmine-js group, since this sounds more like a \"how do I?\" question, than an issue with Jasmine itself.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jasmine4ever", "authorAssociation": "NONE", "createdAt": "2018-04-05T17:06:36Z", "contents": "Didn't knew about the group. Will start a thread there. Thank you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ViieeS", "authorAssociation": "NONE", "createdAt": "2019-04-05T10:59:13Z", "contents": "I have the latest version of Jasmine v3.3.0 and get error when calling pending()... \ud83d\ude15", "reactions_count": 3, "reactions_data": ["CONFUSED", "CONFUSED", "CONFUSED"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-16T00:18:55Z", "contents": "@ViieeS, please open a new issue and provide us with some more information about what you're seeing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["bug", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1451, "url": "https://github.com/jasmine/jasmine/issues/1451", "title": "Run code before beforeEach for each it", "contents": "Context\nI would like to have a new type of test with I can reduce the repetition or code.\nThe problem happens if I have mocked something for the component and little changes needed to be done to the mocks. (e. g. for this test I need another value for test 6) In the beforeEach I create the component, with the dependencies. If I do the modification in the it the component is created and I can't apply changes to the mock for the creation part.\nCurrent Behavior\nclass Component {\n  constructor(service) {\n    this.data = service.ex();\n  }\n}\nFails:\ndescribe('component', () => {\n  const mock = {\n    ex() { return 1; }\n  };\n  let component;\n  beforeEach(() => {\n    component = new Component(mock);\n  });\n  it('test 1', () => {\n    expect(component.data).toEqual(1);\n  });\n  it('test 2', () => {\n    spyOn(mock, 'ex').and.returnValue(2); // The component is created, it is too late to set value.\n    expect(component.data).toEqual(2);\n  });\n});\nA workaround can be:\ndescribe('component', () => {\n  const mock = {\n    ex() { return 1; }\n  };\n  let component;\n  it('test 1', () => {\n    component = new Component(mock);\n    expect(component.data).toEqual(1);\n  });\n  it('test 2', () => {\n    spyOn(mock, 'ex').and.returnValue(2);\n    component = new Component(mock);\n    expect(component.data).toEqual(2);\n  });\n});\nPossible Solution\ndescribe('component', () => {\n  const mock = {\n    ex() { return 1; }\n  };\n  let component;\n  beforeEach(() => {\n    component = new Component(mock);\n  }, {\n    name: 'creation'\n  });\n  it('test 1', () => {\n    expect(component.data).toEqual(1);\n  });\n  it('test 2', () => {\n    expect(component.data).toEqual(2);\n  }, {\n    before:{\n      creation: () =>  spyOn(mock, 'ex').and.returnValue(2); // The component is not created.\n    }\n  });\n});\nSometimes the code of creation is not one line and it is really annoying if the test file has the same lines in most of the tests. E. g. in angular code, that uses jasmine to test.", "createdAt": "2017-11-20T18:41:25Z", "updatedAt": "2018-02-27T01:10:46Z", "closedAt": "2018-02-27T01:10:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "csutorasr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "csutorasr", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-21T01:09:16Z", "contents": "What I've usually done when I encounter this situation is either:\n\nRemove the beforeEach and inline all of the setup into each it as you've noticed. This is actually what Jasmine does for all of its tests since it also surfaces when our objects are hard to create.\nTurn the beforeEach into a (possibly parameterized) function that you can call inside each it. If you don't really have control over the amount of setup because of a framework or something, you can wrap it in an interface you like.\n\nYour example might look like\ndescribe('component', () => {\n  const mock = {\n    ex() { return 1; }\n  };\n  function setupComponent() {\n    return new Component(mock);\n  };\n  it('test 1', () => {\n    component = setupComponent();\n    expect(component.data).toEqual(1);\n  });\n  it('test 2', () => {\n    spyOn(mock, 'ex').and.returnValue(2);\n    component = setupComponent();\n    expect(component.data).toEqual(2);\n  });\n});\nWhat you've suggested might make it easier to hide a code/test smell behind some framework magic, making it harder to detect code that could be made better. Additionally, it sounds rather complex and a bit hard to describe to a user, and so not something we're looking to add to Jasmine at this time.\nHope this helps. Thanks for using Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-27T01:10:46Z", "contents": "We haven't heard anything else on this issue in a while, and it appears to be a bit of a \"How to use Jasmine\" question and not an issue with Jasmine itself, so I'm going to close this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1452, "url": "https://github.com/jasmine/jasmine/issues/1452", "title": "Failing to add custom matchers. v2.8.0", "contents": "This is my test-runner.js which i run with npm test command.\nconst jasmine = new Jasmine({ projectBaseDir: __dirname });\njasmine.loadConfig({});\n\njasmine.addMatchers(customMatchers);\njasmine.execute(\n  glob.sync('tests/e2e/**/*.spec.js')\n      .map(p => path.relative(__dirname, p))\n);\nWhat is going wrong\nI see an error TypeError: this.jasmine.Expectation.addMatchers is not a function\nEnvironment\n\njasmine v2.8.0\nnode v7.7.3", "createdAt": "2017-11-26T12:18:24Z", "updatedAt": "2017-11-28T01:39:59Z", "closedAt": "2017-11-28T01:38:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "EugenAz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "EugenAz", "company": "movingimage.com"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-11-28T01:39:59Z", "contents": "Sorry about that. I'm not sure if that function on the jasmine-npm object ever really worked correctly. I've set it up to correctly register matchers with the running jasmine-core environment so they will be available to the underlying suite.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1453, "url": "https://github.com/jasmine/jasmine/issues/1453", "title": "Jasmine fails on errors in React 16 components", "contents": "Expected Behavior\n\n\nThe test should be green\nCurrent Behavior\n\n\nTest fails.\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\nA React component has an error which is caught by an Error Boundary. React prints the error in console and Jasmine fails the test.\nCodePen\nContext\n\n\nNot sure if it's desired behavior in Jasmine.\nYour Environment\n\n\nVersion used: 2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 62, Node 8.9.1\nOperating System and version (desktop or mobile): Ubuntu 17.04 (4.10.0-40-generic)\nLink to your project:", "createdAt": "2017-11-27T14:38:47Z", "updatedAt": "2018-08-29T10:25:12Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "the-spyke", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "the-spyke", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "craigkovatch", "company": "@tableau "}, {"login": "jillesme", "company": "@udemy  "}], "comments_count": 11, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-11-27T16:55:30Z", "contents": "I was able to reproduce the issue without using an Error Boundary. It looks like React is triggering an error event whenever a component throws an exception. Failing the current spec in response to an error event is very much expected behavior -- error events during spec execution almost always indicate the kind of bugs that a test suite should catch. But I can see how it makes it difficult to do things like write integration tests for error handling in a React app. I'm open to suggestions for how to improve that scenario without making error handling worse in general.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2017-11-27T17:03:45Z", "contents": "Yeah, I've added an Error Boundary to my sample to show that I can't catch this error.\nDoes Jasmine have a way to expect on error events?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2017-11-28T14:00:19Z", "contents": "My temporary solution for now:\nfunction catchWindowError(testSpec, handleError) {\n    const backup = window.onerror;\n    const unhandledErrors = [];\n\n    function onUnhandledError(error) {\n        unhandledErrors.push(error);\n    }\n\n    let regularError;\n\n    try {\n        window.onerror = onUnhandledError;\n\n        testSpec();\n    } catch (error) {\n        regularError = error;\n    }\n\n    window.onerror = backup;\n\n    handleError(regularError, unhandledErrors);\n}\n\nit(\"should throw an error on empty props\", () => {\n    catchWindowError(() => {\n        mount(<MyComp />);\n    }, error => {\n        expect(error).toEqual(new Error(\"MockCmp requires <name> prop\"));\n    });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-15T01:28:14Z", "contents": "Jasmine doesn't currently have any way to expect an error event to occur. We'd be happy to review a pull request to add a new matcher similar to toThrowError that registers itself with Jasmines existing GlobalError handler to receive these without failing the spec.\nThanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "craigkovatch", "authorAssociation": "NONE", "createdAt": "2017-12-27T05:23:07Z", "contents": "@slackersoft I think this issue should be renamed -- as @sgravrock mentioned, Error Boundary usage is not required for Jasmine to fail to catch thrown errors in React 16 components.\nI'd also like to suggest this get some kind of prioritization. Right now there doesn't seem to be a built-in way to properly handle throws.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-05-09T03:40:22Z", "contents": "I spent a bit of time digging into this recently. I'm seeing some inconsistency in whether or not a global error event is triggered when React catches an exception from a component. In the example above, it is. In the examples I've set up myself, it isn't. I'm not sure if the difference is due to React versions, use of Enzyme, where in the lifecycle the exception is thrown, or something else. In the case where no error event is triggered, there's nothing that Jasmine can do because it has no way of knowing about the error.\nI've had some success with using an error boundary to take control of the behavior, e.g.:\nexport class SpecErrorBoundary extends React.Component {\n   componentDidCatch(error, info) {\n      if (this.props.errorHandler) {\n         this.props.errorHandler(error);\n      } else {\n         // Rethrow from a setTimeout so react can't catch it.\n         // This way it will fail the test suite even if the error\n         // might not be associated with the test that caused it.\n         setTimeout(() => {\n            throw error;\n         });\n      }\n   }\n\n   render() {\n      return this.props.children;\n   }\n}\n\n\nThis can be used to write tests that expect an error to occur, that fail if an error occurs, or (if you really want to) that don't care if an error occurs:\nit('throws an exception', function() {\n   const errorHandler = jasmine.createSpy('errorHandler');\n   mount(\n      <SpecErrorBoundary errorHandler={errorHandler}>\n         <Throws />\n      </SpecErrorBoundary>\n   );\n   expect(errorHandler).toHaveBeenCalledWith(\n      jasmine.objectContaining({message: 'nope!'})\n   );\n});\n\nit('fails the suite if an exception is thrown', function() {\n   mount(\n      <SpecErrorBoundary>\n         <Throws />\n      </SpecErrorBoundary>\n   );\n});\n\nThere are a couple of major issues still: React will log the error to the console even if it's caught by an error boundary, and Enzyme will throw if you try to do anything to the wrapper after the error is caught. I don't believe there's anything Jasmine can do about those issues, and to my way of thinking they seriously limit the usefulness of any test that intentionally causes a component to throw.\nTo cover all the bases around React 16 errors and error boundaries, I think we need three things:\n\nA way to control whether a thrown error fails the test.\nA way to control whether the error is logged to the console.\nA way to inspect the render tree of an error boundary after it catches an error.\n\nI don't think Jasmine itself can or should solve any of those problems. The first is best handled with individual test code, as above. The second is ultimately up to react-dom, and the third seems to be solidly on Enzyme's turf (or on the turf of whatever it is that people use instead of Enzyme).\nFurther discussion and new ideas are welcome but as it is I'm inclined to close this since I don't think there's anything that Jasmine can do to help the situation.", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2018-05-14T08:17:03Z", "contents": "Not sure how it works for you. I've used MyComp from CodePen, copied you error boundary and tests, and added one more test that always pass.\nCode:\nclass SpecErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { isError: false };\n    }\n\n    componentDidCatch(error, info) {\n        if (this.props.errorHandler) {\n            this.props.errorHandler(error);\n        } else {\n            // Rethrow from a setTimeout so react can't catch it.\n            // This way it will fail the test suite even if the error\n            // might not be associated with the test that caused it.\n            setTimeout(() => {\n                throw error;\n            });\n        }\n\n        this.setState({ isError: true });\n    }\n\n    render() {\n        if (this.state.isError) {\n            return \"Error\";\n        }\n\n        return this.props.children;\n    }\n}\n\nclass MyComp extends React.Component {\n    componentDidMount() {\n        throw new Error(\"Ha-ha!\");\n    }\n    render() {\n        return <span>{\"No error\"}</span>;\n    }\n}\n\ndescribe(\"React 16 issues\", () => {\n\n    it(\"should always pass\", () => {\n        expect(true).toBe(true);\n    });\n\n    it(\"throws an exception\", () => {\n        const errorHandler = jasmine.createSpy(\"errorHandler\");\n\n        mount(\n            <SpecErrorBoundary errorHandler={errorHandler}>\n                <MyComp />\n            </SpecErrorBoundary>\n        );\n\n        expect(errorHandler).toHaveBeenCalledWith(\n            jasmine.objectContaining({ message: \"Ha-ha!\" })\n        );\n    });\n\n    xit(\"fails the suite if an exception is thrown\", () => {\n        mount(\n            <SpecErrorBoundary>\n                <MyComp />\n            </SpecErrorBoundary>\n        );\n    });\n\n});\nResults:\nSTART:\n  React 16 issues\n    \u2714 should always pass\nERROR: 'The above error occurred in the <MyComp> component:\n    in MyComp (at react-tests.js:81)\n    in SpecErrorBoundary (created by WrapperComponent)\n    in WrapperComponent\n\nReact will try to recreate this component tree from scratch using the error boundary you provided, SpecErrorBoundary.'\n    \u2716 throws an exception\n\nFinished in 0.024 secs / 0.021 secs @ 11:14:18 GMT+0300 (+03)\n\nSUMMARY:\n\u2714 1 test completed\n\u2139 1 test skipped\n\u2716 1 test failed\n\nFAILED TESTS:\n    \u2716 throws an exception\n      Chrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2018-05-14T08:22:33Z", "contents": "There is also another weird issue with results duplication: it there're many other tests (even excluded), output will be duplicated. But maybe this is an issue with karma-jasmine...\nSTART:\n14 05 2018 11:18:42.583:INFO [karma]: Karma v1.7.1 server started at http://0.0.0.0:9876/\n14 05 2018 11:18:42.583:INFO [launcher]: Launching browser ChromeHeadless with unlimited concurrency\n14 05 2018 11:18:42.671:INFO [launcher]: Starting browser ChromeHeadless\n14 05 2018 11:18:43.850:INFO [HeadlessChrome 66.0.3359 (Linux 0.0.0)]: Connected on socket 9xMlh1OXCqkqK0WFAAAA with id 82693832\n\n  React 16 issues\n    \u2714 always pass\nERROR: 'The above error occurred in the <MyComp> component:\n    in MyComp (at signallable_test.js:155)\n    in SpecErrorBoundary (created by WrapperComponent)\n    in WrapperComponent\n\nReact will try to recreate this component tree from scratch using the error boundary you provided, SpecErrorBoundary.'\n    \u2716 throws an exception\nERROR: 'The above error occurred in the <MyComp> component:\n    in MyComp (at signallable_test.js:165)\n    in SpecErrorBoundary (created by WrapperComponent)\n    in WrapperComponent\n\nReact will try to recreate this component tree from scratch using the error boundary you provided, SpecErrorBoundary.'\n    \u2716 fails the suite if an exception is thrown\n    \u2716 throws an exception \n    \u2716 fails the suite if an exception is thrown \n\nFinished in 0.119 secs / 0.025 secs @ 11:18:45 GMT+0300 (+03)\n\nSUMMARY:\n\u2714 1 test completed\n\u2139 275 tests skipped\n\u2716 4 tests failed\n\nFAILED TESTS:\n    \u2716 throws an exception\n      HeadlessChrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown\n\n    \u2716 fails the suite if an exception is thrown\n      HeadlessChrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown\n\n    \u2716 throws an exception \n      HeadlessChrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown\n\n    \u2716 fails the suite if an exception is thrown \n      HeadlessChrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2018-05-14T08:36:47Z", "contents": "Okay, with jasmine@3.1.0 I've got duplication even in simple test file:\nSTART:\n  React 16 issues\n    \u2714 should always pass\nERROR: 'The above error occurred in the <MyComp> component:\n    in MyComp (at react-tests.js:81)\n    in SpecErrorBoundary (created by WrapperComponent)\n    in WrapperComponent\n\nReact will try to recreate this component tree from scratch using the error boundary you provided, SpecErrorBoundary.'\n    \u2716 throws an exception\n    \u2716 throws an exception \n\nFinished in 0.029 secs / 0.021 secs @ 11:34:29 GMT+0300 (+03)\n\nSUMMARY:\n\u2714 1 test completed\n\u2139 1 test skipped\n\u2716 2 tests failed\n\nFAILED TESTS:\n  React 16 issues\n    \u2716 throws an exception\n      Chrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown\n\n    \u2716 throws an exception \n      Chrome 66.0.3359 (Linux 0.0.0)\n    Uncaught Error: Ha-ha! thrown", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-05-14T15:09:52Z", "contents": "I haven't been able to reproduce either the test failure or the duplication. I wonder if the duplication has something to do with the reporter that you're using. Here's what I get with ConsoleReporter, Jasmine's default reporter:\nRandomized with seed 67197\nStarted\n*.Error: Uncaught [Error: Ha-ha!]\n    at reportException (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)\n    at invokeEventListeners (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:209:9)\n    at HTMLUnknownElementImpl._dispatch (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\n    at HTMLUnknownElementImpl.dispatchEvent (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\n    at HTMLUnknownElementImpl.dispatchEvent (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\n    at HTMLUnknownElement.dispatchEvent (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\n    at Object.invokeGuardedCallbackDev (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:138:16)\n    at invokeGuardedCallback (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:187:29)\n    at commitRoot (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:11594:9)\n    at completeRoot (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:12502:36) Error: Ha-ha!\n    at MyComp.componentDidMount (/Users/work/workspace/jasmine-enzyme-update-exception-demo/src/Throws.test.js:12:15)\n    at commitLifeCycles (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:9784:26)\n    at commitAllLifeCycles (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:11455:9)\n    at HTMLUnknownElement.callCallback (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:100:14)\n    at invokeEventListeners (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\n    at HTMLUnknownElementImpl._dispatch (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\n    at HTMLUnknownElementImpl.dispatchEvent (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\n    at HTMLUnknownElementImpl.dispatchEvent (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\n    at HTMLUnknownElement.dispatchEvent (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\n    at Object.invokeGuardedCallbackDev (/Users/work/workspace/jasmine-enzyme-update-exception-demo/node_modules/react-dom/cjs/react-dom.development.js:138:16)\nThe above error occurred in the <MyComp> component:\n    in MyComp\n    in SpecErrorBoundary (created by WrapperComponent)\n    in WrapperComponent\n\nReact will try to recreate this component tree from scratch using the error boundary you provided, SpecErrorBoundary.\n.\n\nPending:\n\n1) React 16 issues fails the suite if an exception is thrown\n  Temporarily disabled with xit\n\n3 specs, 0 failures, 1 pending spec\nFinished in 0.036 seconds\nRandomized with seed 67197 (jasmine --random=true --seed=67197)\n\u2728  Done in 1.07s.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jillesme", "authorAssociation": "NONE", "createdAt": "2018-08-29T10:25:12Z", "contents": "We ran into this issue, we fixed it by spying on onerror\nit('should handle an error correctly', () => {\n  const onerror = spyOn(window, 'onerror');\n  // do something that throws the error\n  expect(onerror).toHaveBeenCalled();\n})", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["React", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1454, "url": "https://github.com/jasmine/jasmine/issues/1454", "title": "Possible to wait for stdin before continuing tests ?", "contents": "https://stackoverflow.com/questions/47588851/waiting-for-stdin-from-a-jasmine-test-script\npseudo code:\ndescribe(\"Checking OTP\", function () {\n\n    it(\"it should be valid \", function () {\n        const readline = require('readline');\n        const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n\n        rl.question('Enter OTP:', (answer) => {\n\n            rl.close();\n\n            fetch.post(\"/verifyOTP\", {\n                otp: answer\n            }).then(response => {\n\n                it(\"..testing the next step\", function () {\n                    //...\n                })\n            })\n        });\n    })\n})", "createdAt": "2017-12-01T11:53:15Z", "updatedAt": "2017-12-21T16:04:31Z", "closedAt": "2017-12-21T16:04:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jigarvyas", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jigarvyas", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-01T16:51:59Z", "contents": "Have a look at the documentation for async specs. If you make your \"it should valid\" spec be asynchronous, that should solve your problem.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1455, "url": "https://github.com/jasmine/jasmine/issues/1455", "title": "Async test passes in 2.6.2 but fails in 2.8.0", "contents": "This issue is related to nrwl/nx#127\nThe following test runs fine with version 2.6.2 but fails with version 2.8.0\n  describe('someEffect', () => {\n    it('should work', async () => {\n      actions = hot('-a-|', { a: { type: 'LOAD_DATA' } });\n      expect(await readAll(effects.loadData)).toEqual([{ type: 'DATA_LOADED', payload: {} }]);\n    });\n  });\n\nIn version 2.8.0, I get this error:\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n\nDo I need to change any settings to make the test work?", "createdAt": "2017-12-02T00:19:02Z", "updatedAt": "2017-12-02T01:57:30Z", "closedAt": "2017-12-02T01:57:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dereklin", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dereklin", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-02T00:36:01Z", "contents": "Chances are that test never actually worked correctly. Until 2.7, Jasmine only supported callback-style asynchronous tests. So an async function like the one in your example would've been run synchronously. My guess is that the promise returned by readAll was never resolved even in 2.6.2, but you didn't see the problem because Jasmine wasn't waiting for the async function to finish the way you expected it to. I hope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dereklin", "authorAssociation": "NONE", "createdAt": "2017-12-02T01:01:14Z", "contents": "@sgravrock\nAnd tried to debug it in this repo: https://github.com/dereklin/nx-demo/tree/feature/figuring-out-jasmine-asyc\nIt's still using 2.6.2\nIn the debugging code, I do see readAll being resolved.\n\nSince you said async not available in 2.6.2.  Then this async must be from typescript then.  And async became available since 2.7?  How is it supposed to be used?  Is there a conflict between typescript's async and jasmine async?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-02T01:08:32Z", "contents": "Before 2.7, it wouldn't wait for an async function to complete (or a Promise), it only worked with the done callback version. It's possible that your readAll function just takes longer than Jasmine's default timeout interval and now that Jasmine is waiting for it to complete before moving on to the next spec, you're seeing this timeout.\nAs a side note, the it function also accepts a custom timeout if this looks like it might solve your problem.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dereklin", "authorAssociation": "NONE", "createdAt": "2017-12-02T01:44:10Z", "contents": "OK. With some digging, it seems like the promise that realAll returns might not resolve.  So it will always cause the timeout error", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1456, "url": "https://github.com/jasmine/jasmine/issues/1456", "title": "Jasmine doesn't unregister some spy on IE11", "contents": "I am using spyOn(window, 'onerror') to test some uncaught exceptions. It works well in most browsers, except on IE11 where I get a Error: <spyOn> : onerror has already been spied upon in the second test case using this pattern.\nExpected Behavior\nJasmine should remove the spy on window.onerror after the first test case.\nCurrent Behavior\nJasmine isn't removing the spy on window.onerror after the first test case.\nPossible Solution\nThis issue is caused by a bug in IE11 (and probably before, but I guess we don't care anymore):\nfunction foo() {}\nwindow.onerror = foo;\nconsole.log(window.hasOwnProperty(\"onerror\")); // false\ndelete window.onerror;\nconsole.log(window.onerror === foo); // true\nBecause of this, jasmine doesn't remove the spy in SpyRegistry, because it never do obj[methodName] = originalMethod.\nSuite that reproduces the behavior (for bugs)\nYou can reproduce this by running this jsbin in IE11: http://jsbin.com/xumakorezo/1/edit?js,output\ndescribe(\"aa\", function() {\n  it(\"bb\", function () {\n    spyOn(window, \"onerror\");\n  })\n  it(\"cc\", function () {\n    spyOn(window, \"onerror\");\n  })\n});\nYour Environment\n\n\nVersion used: 2.8\nEnvironment name and version: IE11\nOperating System and version (desktop or mobile): Windows 10", "createdAt": "2017-12-04T15:49:35Z", "updatedAt": "2017-12-19T00:53:41Z", "closedAt": "2017-12-19T00:53:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "BenoitZugmeyer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "BenoitZugmeyer", "company": "@keymetrics "}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-04T16:46:06Z", "contents": "I was able to reproduce this in IE 10 as well. I assume it affects all the versions that Jasmine supports (8 and later) but I don't have VMs for the older versions readily at hand right now.\nSpyRegistry currently uninstalls spies by reassigning the original value if there was one and deleting the property otherwise. That's the right strategy in general but it doesn't work for window.onerror. We probably need to treat window.onerror as a special case and always unspy it by assigning rather than deleting. I'd be happy to review a pull request that does that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-19T00:53:41Z", "contents": "Fixed on master with b6cc34d.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["bug", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1457, "url": "https://github.com/jasmine/jasmine/issues/1457", "title": "toEqual doesn't display given failure message", "contents": "When using the toEqual matcher and passing in the optional expectationFailOutput message, the message will not display when the assertion fails.\nExpected Behavior\nThe expectationFailOutput message should display for .toEqual when the assertion it is attached to fails.\nCurrent Behavior\nthe expectationFailOutput message does not display for .toEqual when the assertion it is attached to fails.\nPossible Solution\nNot sure why this is happening; perhaps it was changed in a recent build.\nSuite that reproduces the behavior (for bugs)\nhttps://codepen.io/willwsharp/pen/LOvxJd?editors=1010\nContext\nIt's very helpful to immediately see which assertion failed when working in specs with multiple assertions.\nYour Environment\nJasmine 2.8", "createdAt": "2017-12-05T15:27:03Z", "updatedAt": "2018-11-02T18:17:57Z", "closedAt": "2017-12-06T01:22:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "willwsharp", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "willwsharp", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "adame11", "company": null}, {"login": "MattiJarvinen-BA", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-06T01:22:40Z", "contents": "Jasmine does not have a concept of an expectationFailOutput. This functionality has been discussed elsewhere, but the fact that other matchers do seem to support something like this a side effect of those matchers not supplying a custom message.\nClosing this, since this isn't actually supported functionality of Jasmine itself. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "adame11", "authorAssociation": "NONE", "createdAt": "2018-10-09T23:42:36Z", "contents": "Please re-open this ticket! .toEqual() is the only matcher (that I know of) that does not support the \"undocumented\" feature of a custom error message. Others DO support a custom error, such as\n.toBe(true, \"this is a custom error\")\nand this makes failures on these a pain to debug! I don't know how anyone lives without the custom error messages in the first place. They are essential to me.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-10T20:01:16Z", "contents": "Any matcher that supplies its own message will not display any information it doesn't explicitly know about. If no explicit message is provided by a matcher, Jasmine will look at all of the arguments that were passed and attempt to make a message out of those. This is entirely accidental as far as Jasmine is concerned, which is why we haven't tried to add explicit support for this to things like toEqual.\nHowever, I do hear the need for some way to tell Jasmine some sort of description of the value being checked, but I don't think it will be as an additional argument to the matcher itself. I'm leaning more toward something like #641, but I think because might be the wrong word for it. I would prefer something that will work for all matchers without them having to build in support for it in customizing their failure messages further.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "MattiJarvinen-BA", "authorAssociation": "NONE", "createdAt": "2018-11-01T08:01:03Z", "contents": "It's very common to add that message as part of the assert matcher. IMHO we should strive for simplicity and use existing common assert syntax patterns.\nAs last parameter:\n\nPHPUnit https://phpunit.de/manual/6.5/en/appendixes.assertions.html#appendixes.assertions.assertCount\nMSUnit https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.assert.areequal?redirectedfrom=MSDN&view=mstest-net-1.2.0#Microsoft_VisualStudio_TestTools_UnitTesting_Assert_AreEqual_System_Object_System_Object_System_String_\nNUnit http://nunit.org/docs/2.2.7/equalityAsserts.html\n\nAs first parameter:\n\nJUnit http://junit.sourceforge.net/javadoc/org/junit/Assert.html", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T18:17:57Z", "contents": "Jasmine 3.3 includes withContext as the officially supported way to specify additional information about the expectation without worrying about which matcher you are using.", "reactions_count": 5, "reactions_data": ["HOORAY", "HOORAY", "THUMBS_UP", "THUMBS_UP", "HOORAY"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1458, "url": "https://github.com/jasmine/jasmine/issues/1458", "title": "Hide disabled specs/gray balls in the html report", "contents": "Expected Behavior\nWhen running single spec- expected to only see html reporter only show focused spec. This used to be the case in 2.2.0, not anymore in 2.5.0 for example.\nCurrent Behavior\nIt shows all the specs - which if you have thousands of tests makes the UI/run slow.\nPossible Solution\ndisplay: none; in jasmine.css for disabled specs like in AlexBerson/karma-jasmine-html-reporter@f263fa6 ?\nSuite that reproduces the behavior (for bugs)\nN/A for this issue?\nContext\nDebugging/running single spec while watching html is painfully slow on newer versions of Jasmine.\nYour Environment\n\nVersion used: 2.8.0, 2.5.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 62, node 7\nOperating System and version (desktop or mobile): N/A\nLink to your project: N/A I guess?", "createdAt": "2017-12-06T07:25:39Z", "updatedAt": "2018-10-22T18:55:04Z", "closedAt": "2018-10-22T18:55:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mkj28", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mkj28", "company": "@sagansystems "}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-06T16:37:42Z", "contents": "First off, I'd suggest upgrading to 2.8.0 before trying anything else. There have been a lot of changes to how focused specs are handled since 2.5.0, and although none of them do the specific thing you're asking for, they might improve performance in your situation.\nBeyond that, this is one of those areas where the needs of people with large test suites are somewhat in conflict with the needs of people with fewer test suites. We show the gray dots for disabled specs to help users understand what's going on. A suite with one spec and a suite with many specs one of which is focused are different things and it's helpful to display them differently. This is particularly valuable since a change in the number of dots can be the only indication of a newly introduced syntax error in a spec file.\nWhile we're unlikely to revert the change to show disabled specs, I think it would be reasonable to make it configurable and/or to automatically disable it when there are more than some large number of specs. I'd be happy to review a pull request that does that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mkj28", "authorAssociation": "NONE", "createdAt": "2017-12-06T17:41:11Z", "contents": "First off, I'd suggest upgrading to 2.8.0 before trying anything else\n\nyep, as noted above - it's the same in 2.8.0\n\nmake it configurable and/or to automatically disable it when there are more than some large number of specs\n\nthat makes sense!!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-22T18:55:04Z", "contents": "Closing this, it looks like it got merged in with #1561, but the original issue never got updated.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1459, "url": "https://github.com/jasmine/jasmine/issues/1459", "title": "Testing asnyc (Promise) methods in Angular 2 Services", "contents": "This is an interesting problem: I'm trying to test a Service, that uses the Ionic BarcodeScanner. I have a repo based on the ionic unit-testing repository in order to try testing. I'm mocking the BarcodeScanner.scan method via spyOn(..).and.callFake(..)\nExpected Behavior\n\n\nThe following test code should work for both components and services.\nCurrent Behavior\n\n\nIt just works for components.\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\nThis works (component).\nit(\"should be able to set a spy on the scanner and test the component\", done => {\n        const testBC = \"123456\";\n        const spy = spyOn(TestBed.get(BarcodeScanner), \"scan\");\n        spy.and.callFake(() => {\n            return new Promise((resolve, reject) => {\n                resolve(testBC);\n            })\n        });\n\n            component.testScanner().then(res => {\n                expect(res).toBe(testBC);\n                done();\n            }, reason => {\n                expect(true).toBe(false);\n                done();\n            })\n    });\nThis does not work (service):\nit(\"should be able to set a spy on the scanner and test the service\", done => {\n        const testBC = \"123456\";\n        const spy = spyOn(TestBed.get(BarcodeScanner), \"scan\");\n        spy.and.callFake(() => {\n            return new Promise((resolve, reject) => {\n                resolve(testBC);\n            })\n        });\n\n        inject([TestService], (service) => {\n            service.testScanner().then(res => {\n                expect(res).not.toBe(testBC);\n                done()\n            }, reason => {\n                expect(true).toBe(false);\n                done();\n            })\n        })\n    });\nContext\n\n\nI'm trying to unit test a service that uses the barcode-scanner and then does some stuff with the result..\nYour Environment\n\n\nVersion used: 2.5.3\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome Version 62.0\nOperating System and version (desktop or mobile): Arch Linux (desktop)\nLink to your project: https://github.com/ionic-team/ionic-unit-testing-example", "createdAt": "2017-12-06T18:38:47Z", "updatedAt": "2017-12-11T07:26:05Z", "closedAt": "2017-12-11T07:26:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dasois", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "dasois", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-08T06:05:54Z", "contents": "It's hard to tell what's going on from the code sample you posted. Can you create a minimal, self-contained codepen/plunkr/jsfiddle/etc demo that reproduces the problem?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-09T01:46:34Z", "contents": "What in particular is \"not working\" when you run the code for the service test? I also notice that you're using inject in one of the specs (from angular mocks, I assume) which isn't functionality that Jasmine provides, so the problem might also be there.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dasois", "authorAssociation": "NONE", "createdAt": "2017-12-11T07:12:22Z", "contents": "I created a repository that shows the problem in calling.service.spec.ts.\nI also noticed, that it works when i omit the done method, even though it works with promises and thus should be asynchronous...\nI also added a test, that uses TestBed.get instead of inject with the done-method and this works too, so it could be something with the inject method indeed..", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dasois", "authorAssociation": "NONE", "createdAt": "2017-12-11T07:26:05Z", "contents": "I found the problem. I have forgotten to call the inject function.\nThank you for helping!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1462, "url": "https://github.com/jasmine/jasmine/issues/1462", "title": "What about adding a toBeOfLength() method?", "contents": "There are cases where IMHO it would be handier to have a check (i.e. toBeOfLength(2) for the fore-mentioned case) regarding the length of a variable, instead of pure equality.", "createdAt": "2017-12-11T01:38:43Z", "updatedAt": "2017-12-12T01:11:03Z", "closedAt": "2017-12-12T01:11:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thodorisbais", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "thodorisbais", "company": "ABN Amro"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-12T01:11:03Z", "contents": "This just came up in #1446 and I think for now we're trying to keep Jasmine's built-in matcher list smaller. We want to be considered and careful about how we introduce new matchers so they are all documented well, etc.\nClosing this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1463, "url": "https://github.com/jasmine/jasmine/issues/1463", "title": "While using 'fit' all other 'it' tests are skipped. How to make 'it' run?", "contents": "Hi,\nI am not sure if this is an expected way but while using fit all other it tests are skipped. How to make 'it' run?\nI searched on google and didn't find any answers and also looked in the documentation with no luck. Have posted a question on stack overflow.\nThanks.", "createdAt": "2017-12-14T06:05:05Z", "updatedAt": "2017-12-15T02:25:19Z", "closedAt": "2017-12-15T01:11:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pbalan", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pbalan", "company": "WeFlex"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-15T01:11:02Z", "contents": "As the documentation page you linked to says, \"If suites or specs are focused, only those that are focused will be executed.\" fit is specifically to focus the current runs of your suite to only run specs and describes that have been focused (with either fit or fdescribe). You can have multiple fits or fdescribes, but if you want to run your full suite, you should not have any.\nI'm going to close this since this is the desired functionality. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pbalan", "authorAssociation": "NONE", "createdAt": "2017-12-15T02:25:19Z", "contents": "Thanks. Its a great library \ud83d\udc4d I figured out my issue I posted on stack overflow as well. I shall reply to my own question later when I am able to do so.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1464, "url": "https://github.com/jasmine/jasmine/issues/1464", "title": "testFunction in it() should be required", "contents": "I am wondering, why the parameter testFunction in it() is optional, but in the function fit() it is not.\nBackground:\nI had the following code and was struggling to find the error:\ndescribe('foo', () => { it('bar'),async(inject([BarService], (classUnderTest: BarService)=>{ //some test code })); });\nThis is two expressions ( it('bar') AND async(...) ) separated by a comma. As it('bar') is valid code, the compiler is perfectly fine with it.\nAt some point i changed to fit (to just run this one test) and immediately got an error message, that the testFunction is missing, which helped me to find my mistake.\nIs there an use case to call it() with just a name. I can not image one.\nTherefore I would recommend to keep the signature of both methods the same.", "createdAt": "2017-12-15T08:48:36Z", "updatedAt": "2017-12-17T00:35:04Z", "closedAt": "2017-12-17T00:35:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sefo2810", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sefo2810", "company": null}, {"login": "tymfear", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "tymfear", "authorAssociation": "NONE", "createdAt": "2017-12-15T08:59:02Z", "contents": "@sefo2810 yes, there is a valid case to call it with just a name. When you do so the spec is marked as pending.\nThis is very helpful when you plan your test suite, and just create pending cases. And after planning you start developing these specs one by one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-17T00:35:04Z", "contents": "The only thing I have to add to @tymfear's explanation is that the signatures differ because it's not useful to focus on a pending test. So fit doesn't support the pending form.\nClosing as this is the intended behavior and not something that we're interested in changing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1465, "url": "https://github.com/jasmine/jasmine/issues/1465", "title": "Show a warning when a beforeEach, afterEach, beforeAll and afterAll block contains tests", "contents": "This is a feature suggestion.\nExpected Behavior\n\n\nNesting describes, or its, or any expectations inside of a beforeEach, afterEach, beforeAll or afterAll should throw a warning or an error that's easy to notice.\nCurrent Behavior\n\n\nCurrently, nesting tests inside of the aforementioned hooks will go unnoticed and will not throw a warning or an error.\nPossible Solution\n\n\nI haven't looked at Jasmine's code too much, but I'd love to jump in and solve this myself if it gets approval.\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n  beforeEach(() => {\n    it('renders', () => { // Jasmine won't complain about this test being here\n      expect(true).toBe(false)\n    })\n  })\n});\nContext\n\n\nUsing jasmine I've come across the situation where I edit my tests and accidentally move blocks or closing curly brackets and end up with a describe, an it or expectations inside of a beforeEach or any of its counterparts.\nThis goes unnoticed except for the fact that the tests in particular don't run anymore. In my company's projects we've discovered in many occasions that a couple of our tests hadn't been running for several months.\nYour Environment\n\n\nVersion used: Jasmine 2.8.0\nEnvironment name and version: Chrome 59.0.3071, Karma 1.7.1", "createdAt": "2017-12-15T14:06:47Z", "updatedAt": "2017-12-15T22:00:27Z", "closedAt": "2017-12-15T22:00:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "brainlessdeveloper", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "brainlessdeveloper", "company": "@store2be "}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-15T16:20:51Z", "contents": "Jasmine does allow expectations inside before/after functions, which are useful for making sure that shared setup works correctly or verifying other preconditions:\ndescribe(\"When the frobnicator has two bars\", function() {\n  beforeEach(() => {\n    causeTheFrobnicatorToHaveTwoBars();\n    expect(frobnicator.bars().length).toEqual(2);\n  });\n\n  it(\"frobnicates both bars\", function() {\n    // ...\n  });\n});\n\nI think that  PR #1411, which is already merged into master, should cover the rest of the scenarios that you've described.", "reactions_count": 1, "reactions_data": ["HOORAY"]}, {"authorLogin": "brainlessdeveloper", "authorAssociation": "NONE", "createdAt": "2017-12-15T22:00:27Z", "contents": "That's great news! I should have read those checks better. Thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1466, "url": "https://github.com/jasmine/jasmine/issues/1466", "title": "Is it possible to define specs during configuration time?", "contents": "I'm wondering if there's some hidden gem so I can do something like this:\njasmine.addSpec(x => {\n     x.describe(\"foo\", () => {\n             x.it(\"bar\", () => {\n                   // Stuff here\n             })\n     })\n})", "createdAt": "2017-12-15T15:34:58Z", "updatedAt": "2017-12-18T08:59:52Z", "closedAt": "2017-12-16T01:14:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mfidemraizer", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mfidemraizer", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "mfidemraizer", "authorAssociation": "NONE", "createdAt": "2017-12-15T16:56:20Z", "contents": "I want to add that I'm wondering if this is possible because I'm working with .mjs/ES modules in Node, using --experimental-modules flags, so I can't run my tests with Jasmine because it tries to load my specs using require (CJS) instead of import (ESM).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2017-12-16T01:14:47Z", "contents": "I think you might want to use the library directly from Jasmine-NPM. This will let you control when jasmine.execute() is called so it isn't until after you've otherwise loaded all your specs.\nRight now Jasmine just installs itself on whatever the global object is in the context it is being run (global in nodejs, window in a browser) to make itself available. At some point, we'd like to move to something more friendly to modules of all sorts, but I don't think that is going to come any time too soon.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mfidemraizer", "authorAssociation": "NONE", "createdAt": "2017-12-18T08:58:57Z", "contents": "@slackersoft This is enough. I can define the whole tests in a module default function which may take describe, it and others as arguments.\nThank you :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1467, "url": "https://github.com/jasmine/jasmine/issues/1467", "title": "Failing test with no expectations", "contents": "Expected Behavior\nWould you agree on failing a test that doesn't have any expectations?\nPossible Solution\nMaybe adding:\nresult.status = 'failed'\nafter this line:\nhttps://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine-html.js#L107\nThanks!!", "createdAt": "2017-12-16T23:39:39Z", "updatedAt": "2018-12-15T13:36:15Z", "closedAt": "2017-12-17T00:29:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "francittadini", "authorAssociation": "NONE", "participants_count": 6, "participants_data": [{"login": "francittadini", "company": null}, {"login": "sgravrock", "company": null}, {"login": "CWSpear", "company": "Self"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "dstj", "company": null}, {"login": "nasreddineskandrani", "company": null}], "comments_count": 11, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-17T00:29:13Z", "contents": "There are some legitimate use cases for tests without assertions, for instance:\n\nA test that verifies that an asynchronous process completes.\nA test that verifies that something doesn't throw an exception. (Using .not.toThrow is arguably better, but the no-assertion form of this test is very common.)\nA test for behavior that doesn't apply in the current environment, e.g. Node-specific functionality in a browser or vice versa.\n\nThose might seem like edge cases but in my experience most test suites for nontrivial programs end up with at least a couple of them. That includes Jasmine's own test suite. We've seen more interest from the community in coming up with ways to suppress the \"spec has no expectations\" warning than in turning it into an error.\nAlso, having an assertion in a test is a means to an end, not an end in itself. To be correct a test needs to fail in the expected way when the functionality that it verifies is broken. The only way to be sure of that is to actually see it happen. If you've made sure that your test fails correctly, either by working test-first or by breaking the code under test, then you don't need a tool to check for the presence of assertions. If you haven't done that, then you shouldn't have much confidence in the test whether a tool has checked it for assertions or not.\nWe're unlikely to make this change because it would break many existing test suites, it makes some use cases more awkward, and could provide a false sense of security. But if you really want to expose tests without expectations in a more obvious way than a console message, you could write a custom reporter that checks the expectation count in its specDone event and does something suitably noticeable.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "francittadini", "authorAssociation": "NONE", "createdAt": "2017-12-17T00:36:45Z", "contents": "Thanks for the response \ud83d\ude03", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "CWSpear", "authorAssociation": "NONE", "createdAt": "2018-03-22T23:10:51Z", "contents": "What about making it configurable? So the some 40 tests I just discovered were false positives in our test suite could have been caught sooner...", "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-24T00:07:03Z", "contents": "Given that Jasmine already provides a way to see specs that don't have any expectations without any configuration, while still allowing the use cases where you might intentionally leave them out, I'm not sure we want to add an additional option to cause specs without expectations to fail.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dstj", "authorAssociation": "NONE", "createdAt": "2018-06-27T21:00:11Z", "contents": "@slackersoft You mention that Jasmine has a way \"out of the box\" to list tests without expectations. Can you elaborate? I haven't found how in the documentation.\nFor example, my Karma runner page mentions 20 specs, 0 failures, randomized with seed 62124, but I've got one SPEC HAS NOT EXPECTATIONS around the middle on the page, in green mind you, just like a successful test. It's also counted as a successful test. So without doing CTRL+F, I would probably miss it... @francittadini requests seem legit to me.\nMaybe simply adding 19 specs, 0 failures, 1 has no expectation, randomized with seed 62124 would do the trick. Is it already possible with jasmine making that a Karma issue?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-19T00:34:52Z", "contents": "By default Jasmine's HTML Reporter will add the 'SPEC HAS NO EXPECTATIONS' message to the beginning of the spec and log a message with console.error.\nEven these warnings aren't features that everyone wants, so this isn't something we can change to fail for everyone. I'd be happy to review a pull request that adds another option like 'stop execution on spec failure' called something like 'fail specs with no expectations'. Oddly, I think the easiest way to implement that will be to add an expectation failure to the spec with the appropriate message just before the Spec object marks itself complete and successful.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nasreddineskandrani", "authorAssociation": "NONE", "createdAt": "2018-11-10T16:46:29Z", "contents": "Hi @slackersoft,\nif no one do this PR soon, I'll (got a baby this week :) less time my side now)\nI have one question:\nplease look at this stackblitz\nhttps://stackblitz.com/edit/testing-false-positiv?file=src%2Fapp%2Ftest-b%2Ftest-b.service.spec.ts\nthe result is:\n...1\nSPEC HAS NO EXPECTATIONS ...1a\n\nThe second spec is flagged as NO EXPECTATIONS so it helps to know the test is useless and fix it.\nNow if i uncomment the line 33 adding another expect => the one in the subscribe is not reached but not detected and the test become successful when it shouldn't. This time the result become:\n...1\n...1a\n\nYou think we can adjust easily the code of the library to detect this case when adding the flag? (i didn't check the code yet my self)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-07T01:59:41Z", "contents": "@nasreddineskandrani if you're doing asynchronous work in the code you're testing (say with events and subscriptions), you should probably look at Jasmine's async support to ensure your tests don't complete before you've finished executing everything.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["HOORAY"]}, {"authorLogin": "nasreddineskandrani", "authorAssociation": "NONE", "createdAt": "2018-12-07T02:53:01Z", "contents": "@slackersoft it's exactly what we are doing.\nthe only thing is that the done do prevent/detect it => but if not used :) we need to go check test by test.\nif something is missed during review and a junior dev do not use done we are open to possible false positiv.\nMaybe something like a linter can check it if jasmine can't detect it.\nnote: at the end, in my example the subscribe pattern by hand in test is to avoid and this can be achieved easily by using jasmine-marbles or just writing test proprely without subscribe (still if jasmine can detect it for projects that do use subsribe in test => it'll be cool)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-14T01:49:12Z", "contents": "I'm not really sure how Jasmine would go about detecting the use of a particular type of subscribe function in a given test to guarantee that it was an RxJS type subscribe and not just some function in your codebase that had the name. Jasmine's existing functionality for detecting a spec that completes asyncronously, allows a spec to explicitly call a done callback, return a Promise, or declare the async function when calling it, so you might be able to provide some sort of wrapper for your codebase that maps over to one of those.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "nasreddineskandrani", "authorAssociation": "NONE", "createdAt": "2018-12-15T13:31:27Z", "contents": "...to guarantee that it was an RxJS type subscribe and not just some function ...\n\ni see your point. i agree.\nso we ll be more careful on reviews to make sure when needed we use done to have a timeout error in case of false positiv.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1468, "url": "https://github.com/jasmine/jasmine/issues/1468", "title": "Affix function - Pattern attribute with square brackets?", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\nExpected some sort of escape behaviour - but it is not building the pattern correctly when rendering the test page.\nCurrent Behavior\n\n\nExample, using the affix method I have this;\n[id=\"testInput\"][type=\"text\"][required=\"true\"][pattern=\"[a-zA-Z0-9-]{1,20}\"]\nbut the above does not work, its having a problem with the square brackets within the pattern.\nPossible Solution\n\n\nIs there any escape mechanism - note I have already tried , with no joy.\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n\nit('should be invalid', function (){\nvar testInput = 'input[id=\"testInput\"][type=\"text\"][required=\"true\"][pattern=\"[a-zA-Z0-9-]{1,20}\"][value=\"#123123\"]';\n\naffix(testInput);\n\n//does not need an assert, as the pattern does not render correctly.\n})\n});\nContext\n\n\nTesting element against some real JS, but need to affix elements as part of the DOM - had this working by manually creating the element but wanted to clean it up by using affix.\nYour Environment\n\n\nVersion used:\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:\n\nlocalhost.", "createdAt": "2017-12-19T10:31:04Z", "updatedAt": "2018-02-05T11:20:21Z", "closedAt": "2018-01-12T00:17:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sreaney1989", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sreaney1989", "company": null}, {"login": "sgravrock", "company": null}, {"login": "babielmam", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sreaney1989", "authorAssociation": "NONE", "createdAt": "2017-12-19T14:33:22Z", "contents": "already tried  \\ and \\.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-19T16:10:44Z", "contents": "The affix method that you're asking about isn't part of Jasmine. I don't know what it is or how to call it. You're probably better off asking for help wherever you got affix from.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "babielmam", "authorAssociation": "NONE", "createdAt": "2018-02-05T11:20:21Z", "contents": "@sreaney1989 The problem might have to do to with jasmin-fixture. However, changing jasmine-core version from 2.9.1 to 2.8.0 fixed it (for the moment)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1469, "url": "https://github.com/jasmine/jasmine/issues/1469", "title": "Fake setTimeout/setInterval is missing Node methods", "contents": "I'm running into a problem trying to write tests for a Node project that uses the brakes module since it uses Node's Timeout.unref() method and Jasmine's fake setInterval returns a number.\nExpected Behavior\nRunning test shouldn't cause uncaught exceptions\nCurrent Behavior\nTests cause this uncaught exception TypeError: this._spinningInterval.unref is not a function\nPossible Solution\nReturn a fake Timeout object if we're using Node. I don't mind doing this myself if people are cool with it.\nContext\nI'm trying to switch our circuit breaker implementation, the new module we want to use seems incompatible with Jasmine\nEnvironment\n\nVersion used: 2.8.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Node\nOperating System and version (desktop or mobile): OS X\nLink to your project: https://github.com/Tinder/sharded-redis-client", "createdAt": "2017-12-19T23:07:59Z", "updatedAt": "2017-12-21T21:23:48Z", "closedAt": "2017-12-21T21:23:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chris--young", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "chris--young", "company": "Tinder"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1471, "url": "https://github.com/jasmine/jasmine/issues/1471", "title": "Feature Request: differentiate tests that have run 0 expect", "contents": "It would be cool to see the tests that are in success because they have run 0 expect from the ones that are in success because they actually run some expects. It would be even cooler to have a count of the expect run.\nExemple:\nit('should warn', () => {\n    // 0 expect here\n});\n\nit('should success', () => {\n    expect(true).toBe(true);\n});\n\n// Success: 1 expect run\nit('should success again', () => {\n    if (true) {\n        expect(true).toBe(true);\n    } else {\n        expect(null).toBe(null);\n    }\n});", "createdAt": "2017-12-22T13:54:27Z", "updatedAt": "2018-02-13T23:48:37Z", "closedAt": "2018-02-13T23:48:37Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sound-matt", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sound-matt", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2017-12-23T17:12:33Z", "contents": "If you're using the HTML reporter in a released version of Jasmine, you should see warnings logged to the console and the words \"SPEC HAS NO EXPECTATIONS\" prepended to the name of any spec that doesn't  have any expectations.\nWe'd prefer not to have Jasmine output more detailed information about expectation counts because it would just be unnecessary noise for most users and relying on that information can mask deeper testing workflow problems. However, if you find that information useful, you can write a custom reporter that outputs it in the way that you want. Have a look at the specDone event, specifically passedExpectations and failedExpectations.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sound-matt", "authorAssociation": "NONE", "createdAt": "2017-12-26T08:53:17Z", "contents": "Thank you \ud83d\ude03", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-13T23:48:37Z", "contents": "Closing this as it sounds like current functionality is enough for this use case. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1472, "url": "https://github.com/jasmine/jasmine/issues/1472", "title": "Maps comparison always passes in IE11", "contents": "This is the same bug as #1257 but happens only in IE11\nPossible Solution\nAlso take care of the unsupported Map/Set methods and contructor in IE11 see Kangax table\n\nkeys\nvalues\nentries\n\nSuite that reproduces the behavior (for bugs)\nit('Test', function() {\n  const map1 = new Map();\n  map1.set(1, 2);\n  const map2 = new Map();\n  map2.set(1, 3);\n  map2.set(2, 3);\n  expect(map1).toEqual(map2);\n});\nYour Environment\n\nVersion used: ~2.8.0\nEnvironment name and version: IE11\nOperating System and version: Windows 10", "createdAt": "2018-01-03T11:57:29Z", "updatedAt": "2018-01-12T01:51:59Z", "closedAt": "2018-01-12T01:51:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Volox", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Volox", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-05T01:47:54Z", "contents": "Unfortunately, the things that IE 11 leaves out of make it nearly impossible to do a comparison of two Sets or Maps. Jasmine isn't in the business of manipulating your javascript environment (unless you explicitly tell it with spies or the mock clock), because this wouldn't be a good indication of how your code would run in that environment. If your code needs to run in IE11 and needs to use Set or Map, you'll need to provide your own polyfills to add the functionality to make them work.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Volox", "authorAssociation": "NONE", "createdAt": "2018-01-05T10:21:57Z", "contents": "Why impossible?\nFor Map and Set you can use the forEach method to get the contents and do the comparison using that one.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-10T01:58:24Z", "contents": "I missed that one before. We would be happy to review a pull request to make Map and Set equality comparison fall back to use forEach where keys() or values() aren't available. The checkers for Jasmine's tests should also be updated so the specs will actually run in these environments.\nSorry for the confusion. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1474, "url": "https://github.com/jasmine/jasmine/issues/1474", "title": "Spy objects with properties ", "contents": "I'm currently working on a tech test, and would like to be able to create a spy object that has properties, as a JS constructor function might have, in order to be able to properly isolate tests. I feel this functionality would be a useful addition to the spyOnProperty functionality that was released relatively recently.\nExpected Behavior\nWhen writing a test, it should be possible to create a spy object with properties that can be accessed using constructorFunction.property, as you might call constructorFunction.method() on a Jasmine spy object that had been created as follows (from the Jasmine documentation:\nbeforeEach(function() {\n    tape = jasmine.createSpyObj('tape', ['play', 'pause', 'stop', 'rewind']);\n\n    tape.play();\n    tape.pause();\n    tape.rewind(0);\n  });\n\nCurrent Behavior\nAs things stand currently, I have been unable to find another way to create a Jasmine spy object that holds properties as well as methods. This means it is not possible to isolate tests for functions that alter the properties of a different constructor (see below for example).\nPossible Solution\nOne possible implementation that suggests itself to me is to add a second, optional array of properties as key/value pairs when creating a Jasmine spy object. In practice, this would look something like this:\nbeforeEach(function() {\n    tape = jasmine.createSpyObj('tape', ['play', 'pause', 'stop', 'rewind'], ['title': 'Guardians of the Galaxy Awesome Mix: Vol. 1', 'artist': 'Various artists', 'tracks': 12, 'playingTime': 42]);\n\n    tape.play();\n    tape.pause();\n    tape.rewind(0);\n\n    console.log(tape.title); // Guardians of the Galaxy Awesome Mix: Vol. 1 \n  });\n\nSuite that reproduces the behavior (for bugs)\nThis is code to write a simple command-line banking application.\n// account.js\n'use strict';\n\nvar Deposit = require('./deposit.js').Deposit;\nvar Withdrawal = require('./withdrawal.js').Withdrawal;\nconst DEFAULT_BALANCE = 0;\n\nvar Account = function() {\n  this._balance = DEFAULT_BALANCE;\n  this._transactions = [];\n};\n\nObject.defineProperty(Account.prototype, 'balance', {\n  get: function() { return this._balance },\n  set: function(newBalance) { this._balance = newBalance },\n  configurable: true\n});\n\nAccount.prototype.deposit = function(depositAmount) {\n  var deposit = new Deposit(this, depositAmount);\n  deposit.deposit();\n};\n\n// More code\n\n// deposit.js\n'use strict';\n\nvar Deposit = function(account, depositAmount) {\n  this.date = new Date();\n  this.account = account;\n  this.depositAmount = depositAmount;\n};\n\nDeposit.prototype.deposit = function() {\n  var currentBalance = this.account.balance;\n  var newBalance = currentBalance + this.depositAmount;\n  this.account.balance = newBalance;\n};\n\nexports.Deposit = Deposit;\n\n// DepositSpec.js\n'use strict';\n\ndescribe('Deposit', function() {\n  var Account = require('../lib/account.js').Account;\n  var Deposit = require('../lib/deposit.js').Deposit;\n  var account;\n  var deposit;\n\n  beforeEach(function() {\n    account = new Account();\n    deposit = new Deposit(account, 50);\n  })\n\n  describe('Date', function() {\n    it('Should be a date object', function() {\n      expect(deposit.date).toEqual(jasmine.any(Date));\n    });\n  });\n\n  describe('#deposit', function() {\n    it('Should reduce an account\\'s balance', function() {\n      spyOnProperty(account, 'balance', 'get').and.returnValue(0);\n      var balanceSetterSpy = spyOnProperty(account, 'balance', 'set').and.returnValue(50);\n      account.deposit(50);\n      expect(balanceSetterSpy).toHaveBeenCalled();\n    });\n  });\n});\n\nContext\nIn the final test above, it is necessary to create a real account object in order to properly test the functionality of the deposit class, as it modifies the balance property of the account. However, in creating this real object, the test is no longer isolated.\nYour Environment\n\nVersion used: 2.8.0\nUbuntu 16.04 run on a Chromebook Pixel via crouton\nNode version: 4.2.6\nLink to your project: https://github.com/peterwdj/bankTechTest", "createdAt": "2018-01-04T09:36:21Z", "updatedAt": "2018-01-10T01:43:36Z", "closedAt": "2018-01-10T01:43:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "peterwdj", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "peterwdj", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-06T01:14:34Z", "contents": "This seems like something that could be interesting, but I'm not sure I fully see the utility. I'm not sure if these questions are because of a simplified example, or just I'm misunderstanding the full problem.\n\n\nYour usage of the property balance doesn't seem to truly need to be a defined property, probably just setting balance = 0 and checking expect(balance).toEqual(50) should work fine.\n\n\nYour test is calling account.deposit so you would need to have a fully created account regardless of spied on properties.\n\n\nOutside of tracking calls, the primary thing that a spy provides in your test is the ability to define what the return value is and check things on it. If you provide an object with a pre-defined value and then check the value at the end, this seems to provide the same benefit.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "peterwdj", "authorAssociation": "NONE", "createdAt": "2018-01-08T06:01:48Z", "contents": "Hey Slackersoft, thanks for replying! Having spent more time with my code, I've come to the realisation that the approach I took to this problem was actually rather a poor one in terms of design choices, and I imagine this is part of the reason I struggled with this.\nIn response to your two points:\n\nI don't think this would have worked, as balance was a property of account, which is what I was attempting to check (although in hindsight, that this was in the tests for my Deposit spec should have told me that this approach was an ill-thought-through one)\nWould it not have been possible to replicate that using a Jasmine spy, though, were this functionality to have existed?\n\nI guess the main problem I see with using a simple (spy) object is how that value is accessed by the program. But no matter now, and from what I can see, this does not seem to be something that many other people have had issues with in the past, so no problems at all if you want to go ahead and close this issue :-)\nThanks again for taking the time to respond!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1475, "url": "https://github.com/jasmine/jasmine/issues/1475", "title": "pretty printer doesn't handle symbols as args in toHaveBeenCalledWith", "contents": "I'm running some tests where a spy on a method is asserting that the method should be called with a symbol and a callback as parameters like:\nconst mySymbol = Symbol('test');\nexpect(mySpy).toHaveBeenCalledWith(mySymbol, jasmine.any(Function))\nWhen the test fails, result.message() throws an uncaught TypeError: Cannot convert a Symbol to a string when the pretty printer tries to output expectedArgs\nfunction() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but it was never called.'; }\nExpected Behavior\nThe test log should output\n\nExpected spy mySpy to have been called with [ Symbol(test), ...\n\nCurrent Behavior\nThe test log shows\n\nTypeError: Cannot convert a Symbol value to a string\nTypeError: Cannot convert a Symbol value to a string\n    at Array.toString (native)\n    at StringPrettyPrinter.PrettyPrinter.format (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3681:42)\n    at Object.pp (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3836:25)\n    at Object.result.message (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:3288:124)\n    at Expectation.toHaveBeenCalledWith (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?da99c5b057693d025fad3d7685e1590600ca376d:2087:30)\n    at Object.it (http://localhost:9876/_karma_webpack_/main.bundle.js:1514:22)\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:10585:26)\n    at ProxyZoneSpec.webpackJsonp.../../../../zone.js/dist/proxy.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/vendor.bundle.js:46246:39)\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:10584:32)\n    at Zone.webpackJsonp.../../../../zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:10335:43)\n\n\nPossible Solution\nJSON.stringify() the expectedArgs array, rather than relying on Array.toString to output the array.\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n    it('fails to show symbols', () => {\n        const mySymbol = Symbol('test');\n        let mySpy = jasmine.createSpy('mySpy');\n        expect(mySpy).toHaveBeenCalledWith(mySymbol, jasmine.any(Function));\n    })\n});\nContext\nI'm writing an events subsystem where events are uniquely identified by symbols. This events system has an EventService.subscribe() method, that expects a discriminating symbol and a callback.\nIn writing unit tests for other parts of the app that should be subscribing to events, I check that a particular symbol was the symbol passed into the subscribe method.\nIt's worth pointing out that if I were calling\nexpect(mySpy).toHaveBeenCalledWith({\n    type: mySymbol,\n    callback: jasmine.any(Function)\n})\nit would work (and does, in a different method and tests relating to it). This is only a problem when the symbol is a separate parameter.\nYour Environment\n\"devDependencies\": {\n    \"@angular/cli\": \"1.1.1\",\n    \"@angular/compiler-cli\": \"^4.0.0\",\n    \"@angular/language-service\": \"^4.0.0\",\n    \"@types/jasmine\": \"2.5.45\",\n    \"@types/node\": \"~6.0.60\",\n    \"codelyzer\": \"~3.0.1\",\n    \"jasmine-core\": \"~2.6.2\",\n    \"jasmine-spec-reporter\": \"~4.1.0\",\n    \"karma\": \"^1.7.1\",\n    \"karma-chrome-launcher\": \"~2.1.1\",\n    \"karma-cli\": \"~1.0.1\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-coverage-istanbul-reporter\": \"^1.2.1\",\n    \"karma-jasmine\": \"~1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"karma-mocha-reporter\": \"^2.2.3\",\n    \"karma-phantomjs-launcher\": \"^1.0.4\",\n    \"ng2-mock-component\": \"0.0.6\",\n    \"protractor\": \"~5.1.2\",\n    \"ts-node\": \"~3.0.4\",\n    \"tslint\": \"~5.3.2\",\n    \"typescript\": \"~2.3.3\"\n  }\n$ cat /etc/linuxmint/info\nRELEASE=18.1\nCODENAME=serena\nEDITION=\"Cinnamon 64-bit\"\nDESCRIPTION=\"Linux Mint 18.1 Serena\"\nDESKTOP=Gnome\nTOOLKIT=GTK\nNEW_FEATURES_URL=http://www.linuxmint.com/rel_serena_cinnamon_whatsnew.php\nRELEASE_NOTES_URL=http://www.linuxmint.com/rel_serena_cinnamon.php\nUSER_GUIDE_URL=help:linuxmint\nGRUB_TITLE=Linux Mint 18.1 Cinnamon 64-bit", "createdAt": "2018-01-08T17:48:45Z", "updatedAt": "2018-01-09T16:08:12Z", "closedAt": "2018-01-09T16:08:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jamesona", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jamesona", "company": "iPartnr"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-09T01:23:11Z", "contents": "What version of Jasmine are you running? If you're using the default HTML reporter, it should be in the top left corner of the results page. I just ran your same spec in Jasmine 2.8.0 and it looks like it's producing the correct output there, so you might try updating your version of Jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jamesona", "authorAssociation": "NONE", "createdAt": "2018-01-09T16:08:12Z", "contents": "Ah, you're correct. Updating to 2.8.0 fixes it. Most of this app is just a default angular-cli build of angular 4.x, so I don't often look at updating my deps. Thanks for looking!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1476, "url": "https://github.com/jasmine/jasmine/issues/1476", "title": "A vulnerability in jasmine-core ", "contents": "NSP reported a vulnerability in the jasmine-core 2.8.0 , So this version should be upgraded to suppress this vulnerabiltiy !", "createdAt": "2018-01-11T08:46:37Z", "updatedAt": "2018-02-17T21:30:53Z", "closedAt": "2018-02-17T21:30:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ammy1999", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ammy1999", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-11T16:14:12Z", "contents": "Can you provide any details at all about this? I'm guessing that by NSP you mean Node Security Platform, and it's not reporting anything for Jasmine.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-02-17T21:30:52Z", "contents": "I'm closing this because we've found no sign of any vulnerabilities and there's been no activity since the initial report. Feel free to open a new issue with more information (specifics of the vulnerability, what steps we can follow to see it ourselves) if you think this shouldn't have been closed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1479, "url": "https://github.com/jasmine/jasmine/issues/1479", "title": "Arguments for a call to a spy are not available when spy is called using .apply()", "contents": "Are you creating an issue in the correct repository?\nI think so! I don't think this has anything to do with Karma, as the issue is with jasmine's spies. Forgive me if this should be posted somewhere else. I've tried to search through existing issues and on StackOverflow, but I can't find anything specific to my use case.\nExpected Behavior\nGiven a function that is a spy\nWhen said function is called using .apply\nThen I should be able to see the arguments that were passed using argsFor\nCurrent Behavior\nThe return value of argsFor() is an empty array when inspecting a spy after it's been called using .apply, instead of the arguments that were passed\nSuite that reproduces the behavior (for bugs)\ndescribe('spying and applying', function() {\n  it('should store arguments when you use apply', () => {\n    const spy = jasmine.createSpy('mySpy');\n    spy.apply(['foo', 'bar', 'baz']);\n    expect(spy.calls.count()).toEqual(1); // Passes\n    expect(spy.calls.argsFor(0)).toEqual('foo', 'bar', 'baz'); // Fails\n  });\n});\nContext\nBasically I have a function that accepts both a string or an array, and if it is an array it applies said array to another function (which is spied in my tests). The code looks like this:\nfunction trackBeforePushingTo(payload, pushTo, ...pushArgs) {\n  if(Array.isArray(payload)) {\n    track.apply(payload);\n  } else {\n    track(payload);\n  }\n  pushTo(...pushArgs);\n}\nWhen I test passing an array into this function, the value of count() is correct, but the value of argsFor() is an empty array.\nYour Environment\n\n\nVersion used: 2.5.2\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Node 6.9.1, PhantomJS (via Karma)\nOperating System and version (desktop or mobile): MacOS Sierra\n\nThanks!", "createdAt": "2018-01-16T22:45:47Z", "updatedAt": "2018-01-17T00:40:00Z", "closedAt": "2018-01-17T00:36:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "glosee", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "glosee", "company": "Grammar Studios"}, {"login": "sgravrock", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-17T00:26:06Z", "contents": "It sounds like you're trying to pass payload as the arguments to track, but your code under \"Context\" actually passes it as the this. Instead of track.apply(payload), you probably want to do something like track.apply(null, payload). Then you'll also want to change the call to toEqual to take an array containing all the arguments. Putting it all together, your example test suite should look something like this:\ndescribe('spying and applying', function() {\n  it('should store arguments when you use apply', () => {\n    const spy = jasmine.createSpy('mySpy');\n    spy.apply(null, ['foo', 'bar', 'baz']);\n    expect(spy.calls.count()).toEqual(1); // Passes\n    expect(spy.calls.argsFor(0)).toEqual(['foo', 'bar', 'baz']); // Passes\n  });\n});\n\nIf you actually wanted to pass payload as this, you can test that by checking spy.calls.first().object.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "glosee", "authorAssociation": "NONE", "createdAt": "2018-01-17T00:36:12Z", "contents": "ah crap... I'm so embarrassed that I opened this ticket. I've used apply hundreds of times, but today I somehow forgot that the first argument is the context. I definitely meant to pass null as the first argument. Thank you very much for taking the time to reply to my silly mistake. I will close this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-17T00:40:00Z", "contents": "No worries. We've all gotten apply wrong a time or ten.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1480, "url": "https://github.com/jasmine/jasmine/issues/1480", "title": "Nested focused describe(fdescribe) breaks sequence of beforeEach and beforeAll calls", "contents": "Issue is based on @Gerg's #873 (comment)\nIf I'm focusing nested describe like so:\ndescribe(\"foo\", function() {\n    beforeEach(function() {\n        console.log('each 0');\n    });\n\n    beforeAll(function() {\n        console.log('all 0');\n    });\n\n    it('spec', function() {\n        console.log('spec 0.0');\n        expect(true).toBe(true);\n    });\n\n    it('another spec', function() {\n        console.log('spec 0.1');\n        expect(true).toBe(true);\n    });\n\n   fdescribe('suite', function() {\n        beforeEach(function() {\n            console.log('each 1');\n        });\n\n        beforeAll(function() {\n            console.log('all 1');\n        });\n\n        it('spec', function() {\n            console.log('spec 1.0');\n            expect(true).toBe(true);\n        });\n\n        it('another spec', function() {\n            console.log('spec 1.1');\n            expect(true).toBe(true);\n        });\n    });\n});\nI'm getting sequence:\nall 0\nall 1\neach 0\neach 1\nspec 1.0\neach 0\neach 1\nspec 1.1\n\nwhile I would expect something like:\nall 0\neach 0\nall 1\neach 1\nspec 1.0\neach 0\neach 1\nspec 1.1\n\nJasmine version is - 2.8.0\nQuestion: am I expecting wrong behaviour?\nNote: Please, let me know If I have to provide more details.", "createdAt": "2018-01-17T17:06:51Z", "updatedAt": "2018-01-18T11:14:23Z", "closedAt": "2018-01-18T11:14:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Nodarii", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Nodarii", "company": "SoftServe"}], "comments_count": 2, "comments_data": [{"authorLogin": "Nodarii", "authorAssociation": "NONE", "createdAt": "2018-01-17T23:32:04Z", "contents": "Note: one more connected finding:\nCase:\ndescribe(\"foo\", function() {\n  beforeEach(function() {\n    console.log('each 0');\n  });\n\n  beforeAll(function() {\n    console.log('all 0');\n  });\n\n  describe('suite 1.1', function() {\n    beforeEach(function() {\n      console.log('each 1.1');\n    });\n\n    beforeAll(function() {\n      console.log('all 1.1');\n    });\n\n    it('spec', function() {\n      console.log('spec 1.1.0');\n      expect(true).toBe(true);\n    });\n\n    it('another spec', function() {\n      console.log('spec 1.1.1');\n      expect(true).toBe(true);\n    });\n  });\n  \n  describe('suite 1.2', function() {\n    beforeEach(function() {\n      console.log('each 1.2');\n    });\n\n    beforeAll(function() {\n      console.log('all 1.2');\n    });\n\n    it('spec', function() {\n      console.log('spec 1.2.0');\n      expect(true).toBe(true);\n    });\n\n    it('another spec', function() {\n      console.log('spec 1.2.1');\n      expect(true).toBe(true);\n    });\n  });\n});\nResult:\nall 0\nall 1.1\neach 0\neach 1.1\nspec 1.1.0\neach 0\neach 1.1\nspec 1.1.1\nall 1.2\neach 0\neach 1.2\nspec 1.2.0\neach 0\neach 1.2\nspec 1.2.1", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Nodarii", "authorAssociation": "NONE", "createdAt": "2018-01-18T11:14:23Z", "contents": "It's my misunderstanding closing issue", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1481, "url": "https://github.com/jasmine/jasmine/issues/1481", "title": "List of specs are no longer shown after upgrading to 2.8 from 2.4", "contents": "Expected Behavior\nIn 2.4.1, if one gives an invalid spec name in the url, all the specs were listed in the browser with their appropriate links which would allow the user to click on any specific test spec to run that spec.\nCurrent Behavior\nIn 2.8, if one gives an invalid spec name in the url, the specs are not listed in the browser. This is inconvenient as one has to specifically enter the whole spec name in the url  ?spec=\"this spec name is longer than i expected\".\nYour Environment\n\nVersion used: 2.8\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome: Version 63, Node: Version 7.9.0\nOperating System and version (desktop or mobile): Mac OS Sierra 10.12.6", "createdAt": "2018-01-17T22:53:09Z", "updatedAt": "2018-01-19T19:25:20Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "applecool", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "applecool", "company": "Esri"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-01-17T22:56:04Z", "contents": "I am not really sure if this is an expected behavior and has been purposefully designed this way. If it is, then I don't have any complaints. But would be nice, if there is a way to make those specs listed the way they used to be.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-19T01:38:53Z", "contents": "This functionality was introduced in Jasmine 2.6 (#1046). If you need the full list of specs, you should see that if you run all of your specs.\nAdditionally, I would be happy to review a pull request that only filtered out specs from the HtmlReporter if any were actually run.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-01-19T19:25:20Z", "contents": "Right. When the specs are ran, at the end, I can see the list of specs. Will try to look into a fix :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1482, "url": "https://github.com/jasmine/jasmine/issues/1482", "title": "[2.9.0 regression] clearing a non-existing timeout id affects upcoming setTimeout", "contents": "#1427 introduced a regression.\nAfter using jasmine.clock().install() in a browser, if the upcoming timeout id is cleared before setTimeout is called, tick() won't execute the callback:\nExpected Behavior\nclearTimeout shouldn't stop upcoming timers from executing.\nCurrent Behavior\ntimeout callback never runs\nPossible Solution\nhttps://github.com/jasmine/jasmine/blob/master/src/core/DelayedFunctionScheduler.js#L55\nMove deletedKeys.push(timeoutKey); to the first line of the if (i > -1) {\nSuite that reproduces the behavior (for bugs)\nthis would only break in web browsers. not in node. see context below...\njasmine.clock().install();\ndescribe(\"sample\", function() {\n  it(() => {\n    let val =1\n    clearTimeout(0)\n    setTimeout(() => val = 2, 2000) // asuming this is the first setTimeout since install() was called.\n    jasmine.clock().tick(2000)\n    expect(val).toBe(2)\n  })\n});\nContext\nReal project. Real browser tests that pass (and should pass) with jasmine 2.8.0, but don't with 2.9.0\nThis issue can only happen in web browsers, where timeout ID is a primitive number. Node.js uses objects, so it's not affected.\nYour Environment\n\nVersion used: 2.9.0\nEnvironment name and version: Chrome 63\nOperating System and version (desktop or mobile): win 10 x64", "createdAt": "2018-01-18T16:58:16Z", "updatedAt": "2018-01-20T02:18:49Z", "closedAt": "2018-01-20T01:48:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AviVahl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "AviVahl", "company": "Wix.com"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-19T01:24:32Z", "contents": "I haven't been able to reproduce this error, even when I copy your full example suite, and add a description for the it so the HtmlReporter displays results correctly.\nI've also tried putting the clock().install() into a beforeEach where it expects to be (including the clock().uninstall() in an afterEach). Even so, the value is still updated correctly.\nI tried to write a unit test for the DelayedFunctionScheduler even specifying the timeoutKey to use when scheduling, and it doesn't look like this is happening if the clearTimeout is called outside a tick.\nCan you provide an example suite that actually fails in your browser so we can help fix the issue?\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AviVahl", "authorAssociation": "NONE", "createdAt": "2018-01-19T16:24:12Z", "contents": "Sorry for the naive example. The original code that fails is closed source and involves a lot more code, as you can imagine. I'll try reproducing it in a clean environment and report back.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AviVahl", "authorAssociation": "NONE", "createdAt": "2018-01-19T16:51:55Z", "contents": "I was able to reproduce it with clearTimeout(1). Not sure why I thought the first id was 0.\nSteps to reproduce:\n$ npm i create-react-app -g\n$ create-react-app jasmine-bug\n$ cd jasmine-bug\n$ yarn add jasmine-core script-loader --dev\n\nThen, change src/index.js to:\n/* eslint-disable */\n\nimport 'jasmine-core/lib/jasmine-core/jasmine.css';\nimport 'script-loader!jasmine-core/lib/jasmine-core/jasmine';\nimport 'script-loader!jasmine-core/lib/jasmine-core/jasmine-html';\nimport 'script-loader!jasmine-core/lib/jasmine-core/boot';\n\ndescribe('clearTimeout bug', () => {\n    beforeEach(() => jasmine.clock().install())\n    afterEach(() => jasmine.clock().uninstall())\n\n    it('should pass', () => {\n        let val = 1\n        clearTimeout(1)\n        setTimeout(() => val = 2, 2000)\n        jasmine.clock().tick(2000)\n        expect(val).toBe(2)\n    })\n\n})\n\nAnd run yarn start. Test fails here.\nIf I run:\nyarn add jasmine-core@2.8.0 --dev\nThen the test passes.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-20T01:56:32Z", "contents": "Thanks for the updated example. The fix should be out in 2.9.1 now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AviVahl", "authorAssociation": "NONE", "createdAt": "2018-01-20T02:18:49Z", "contents": "Thanks for the prompt response and release! Much appreciated.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1483, "url": "https://github.com/jasmine/jasmine/issues/1483", "title": "beforeAll runs after IT statement in my jasmine test", "contents": "Issue\nIn my node.js integration testing project , i have a config file defined with certain parameters.\nI need to read those values in my beforeAll but my describe, it statements are executed first then the beforeAll.\n     ` var environment;\n\nbeforeAll( () => {\nconsole.log(\u2019Step1\u2026\u2026\u2026..: ');\nbrowser.getProcessedConfig().then((config) => {\n    environment = config.environment ;\n    console.log(\u2018Step2: ' + environment);\n});\n\n})\ndescribe('*Executing TestSuite', function () {\nconsole.log(\u2018Step3: ');\nconsole.log(environment);\n\nit('value1 should be not null\u2019, (done) => {\n// code to use environment\ndone();\n}\n});`\nExpected Behavior\nStep1\nStep 2\nStep 3\nI want to use the value of environment before it block and inside it block . But at this moment i only see undefined value being refered by the code in it block.\nCurrent Behavior\nStep 3\nundefined\nStep 1\nStep 2\nContext\nIntegration Testing\nYour Environment\nMac, Visual Studio Code\n\"jasmine-node\": \"^1.14.5\",\n\"jasmine-data-provider\": \"^2.2.0\",\n\"jasmine-expect\": \"^3.7.1\",\n\"jasmine-json-test-reporter\": \"^1.0.0-beta\",\n\"jasmine-reporters\": \"^2.2.0\",\n\"jasmine-screenshot-reporter\": \"0.0.6\"\n\"protractor\"", "createdAt": "2018-01-18T22:25:17Z", "updatedAt": "2018-06-01T00:26:29Z", "closedAt": "2018-01-19T18:29:40Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bitquality", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "bitquality", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "mattcheah", "company": "@colbitech "}, {"login": "santimendoza", "company": "Condor Labs | @cebroker"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-19T01:30:49Z", "contents": "It looks like your beforeAll function is meant to be executed asynchronously (since you're using a Promise), but Jasmine doesn't know to wait. If you return the promise from the beforeAll Jasmine should correctly detect the asynchronous nature and wait until it is complete to move on. Also, see the docs for async support for more info.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bitquality", "authorAssociation": "NONE", "createdAt": "2018-01-19T12:53:16Z", "contents": "As per your suggestion i tried to do the below but it still didn't work.\n     `          beforeAll( () => {\n                    console.log('Step0\u2026\u2026\u2026..: ');\n                    return new Promise(resolve => {\n                        console.log('Step1\u2026\u2026\u2026..: ');\n\n                        browser.getProcessedConfig().then((config) => {\n                            \n                            console.log('environment 12: ' );\n                            resolve(true);\n                        });    \n                    });\n\n                });\n\n                describe('*************************Executing TestSuite************************', function () {\n\n                    console.log('Step2\u2026\u2026\u2026..: ');\n\n                    it(\"should support async execution of test preparation and expectations\", function() {\n                        expect(3).toBeGreaterThan(0);\n                    });\n        \n                });//describe\n\n`\nAs per the documentation link you have given I tried using done keyword like below inside my describe but still no use. It still executed it block first.\n `beforeEach(function(done) {\n  browser.getProcessedConfig().then((config) => {\n       environment = config.environment ;\n       console.log(\u2018Step4: ' + environment);\n       resolve();\n   });\n \n});`\n\nIs it a library issue ? Because i had jasmine-node and jasmine earlier but now i only have jasmine-node lib.\nPlease note that my it block uses done keyword too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mattcheah", "authorAssociation": "NONE", "createdAt": "2018-01-31T22:51:42Z", "contents": "@bitquality Did you ever get your code working? I have a similar issue. - BTW i found your stackoverflow question and it looks like you passed in the done() function and it worked for you, but using done() had no effect for me. I'm trying to figure out if I'm doing something wrong.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "santimendoza", "authorAssociation": "NONE", "createdAt": "2018-05-31T13:39:10Z", "contents": "I am having this issue too, using async/await. Any help or update about this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-01T00:26:28Z", "contents": "As far as I can tell the jasmine-node library isn't being maintained anymore, the last commit is in 2014, and I'm not sure which version of Jasmine it is tied to. Jasmine added the new support for Promises and async/await in 2.7, so you'll need to make sure you're using a new enough version of Jasmine to use that feature. Based on the original comment, I would expect something like the following to work:\nbeforeAll(function() {\n  return browser.getProcessedConfig().then((config) => {\n    environment = config.environment;\n    console.log('Step2: ' + environment);\n  });\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1484, "url": "https://github.com/jasmine/jasmine/issues/1484", "title": "Missing custom message with toEqual(..) Failure", "contents": "Expected Behavior\nThe custom messages appended to .toEqual(..) should be included in results / logs upon expectation failure. The below suite should emit both 'GOOD: ...' and 'BAD: ...' messages.\nCurrent Behavior\nThe 'BAD: ...' custom messages associated with .toEqual(..) is not present. The message for that expectation only includes the results from diffBuilder.getMessage().  See this live here: https://codepen.io/AnmAtAnm/pen/PEVPBO\nThis stopped working around v2.6.0.\nPossible Solution\nI don't know whether this is the responsibility of wrapCompare(..) or .toEqual(..). wrapCompare(..) has a var message that is never sliced from the args array. Instead, it is assigned the matcher's results, which received the full args array.\nSuite that reproduces the behavior (for bugs)\nhttps://codepen.io/AnmAtAnm/pen/PEVPBO\ndescribe(\"Expect test's custom message\", function() {\n  it(\"toEqual example\", function() {\n    expect(0).toEqual(1,\n        'BAD: This message does not appear')\n  });\n  it(\"toBeGreater example\", function() {\n    expect(0).toBeGreaterThan(1,\n        'GOOD: This message appears')\n  });\n});\nContext\nUnable to annotate my errors with meaningful logs.\nYour Environment\n\nVersion used: 2.9.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 63\nOperating System and version (desktop or mobile): Mac dekstop", "createdAt": "2018-01-20T07:19:31Z", "updatedAt": "2019-03-15T02:07:39Z", "closedAt": "2018-02-27T01:12:08Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AnmAtAnm", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "AnmAtAnm", "company": null}, {"login": "sgravrock", "company": null}, {"login": "antonmitsev", "company": "EPAM"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "AnmAtAnm", "authorAssociation": "NONE", "createdAt": "2018-01-20T08:36:02Z", "contents": "The following addition to wrapCompare(..) appears to do it:\nif (args[2]) {\n  message += ((message.indexOf('\\n') === -1) ? ' \\'' : '\\n\\'');\n  if (Object.prototype.toString.apply(args[2]) === '[object Function]') {\n    message += args[2]() + '\\'';\n  } else {\n    message = args[2] + '\\'';\n  }\n}\nHowever, the initial assignments to expected and message don't make sense to me:\nvar args = Array.prototype.slice.call(arguments, 0),\n  expected = args.slice(0),\n  message = '';\n...and fixing them would probably lead to a slightly different solution.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "AnmAtAnm", "authorAssociation": "NONE", "createdAt": "2018-01-21T15:44:43Z", "contents": "Dupe of #1457. Can't say I agree with the authors on closing that issue, or the root feature request (#641). Three+ years later, people are still replying in request of it, clear evidence there are numerous (probably hundreds. thousands?) of users who want this behavior with very reasonable use cases.\nThe recommended alternative of implementing custom matcher is significantly more code, more complexity, and more effort. When one considers that a significant number of use-cases are probably one-off efforts (a particular rationale only needs to be tested once or a small handful of time in its codebase), the short-hand feature makes a world of sense.\n[removed per COC -- sgravrock] The rationale of not expanding the API falls flat when one realizes we are talking about one method (.because(), #641) or one parameter (expectationFailOutput).", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-21T16:40:24Z", "contents": "@AnmAtAnm, please review the project's Code of Conduct before participating further. We welcome and value feedback about the direction of Jasmine, but not personal attacks or other conduct that would be inappropriate in a professional setting.\nThis is one of those features that seems easy but turns out to be quite a bit more challenging once you dig into it. That said, I'd be happy to review a pull request that solves the problem without also breaking existing custom matchers or making it more difficult to correctly write custom matchers.", "reactions_count": 2, "reactions_data": ["THUMBS_DOWN", "THUMBS_DOWN"]}, {"authorLogin": "antonmitsev", "authorAssociation": "NONE", "createdAt": "2019-03-14T16:22:20Z", "contents": "Hi guys,\nThis issue still persists in version 3.3.0. Any news/ideas on it?\nHow can a guy like me contribute to the project?\nThanks,\nAnton", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-15T02:07:39Z", "contents": "Please see https://jasmine.github.io/api/edge/matchers.html#withContext", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1485, "url": "https://github.com/jasmine/jasmine/issues/1485", "title": "Confusing error message with toEqual(array) when array is too long.", "contents": "Expected Behavior\nWhen testing expect(array).toEqual(shorterArray);, replace\nExpected $[n] = 'extra array element' to equal undefined.\n\nwith\nUnexpected $[n] = 'extra array element'\n\nTo remove the confusing (even though technically accurate) reference undefined.\nCurrent Behavior\nIt outputs\nExpected $[n] = ... to equal undefined.\n\nwhich implies some $[n] was expected, when most likely the actual array was just longer than the expected.\nPossible Solution\nUnexpected $[n] = 'extra array element'\n\nSuite that reproduces the behavior (for bugs)\nhttps://codepen.io/AnmAtAnm/pen/ppGgjX\ndescribe(\"Expect a shorter array error message\", function() {\n  it(\"example .toEqual(shorterArray)\", function() {\n    expect(['example']).toEqual([]);\n  });\n});\nContext\nTrying to grok the meaning of my errors quickly.\nYour Environment\n\nVersion used: v2.9.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 63\nOperating System and version (desktop or mobile): Mac laptop", "createdAt": "2018-01-20T07:35:06Z", "updatedAt": "2018-03-10T15:42:47Z", "closedAt": "2018-03-10T15:42:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "AnmAtAnm", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "AnmAtAnm", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-16T01:49:27Z", "contents": "This proposal seems reasonable. We would be happy to review a pull request that changes the message for extra elements at the end of an array without changing the message for one in the middle.\nThis means that expect([1, 2, 3]).toEqual([1, undefined, 3]) should still produce the existing failure message.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1486, "url": "https://github.com/jasmine/jasmine/issues/1486", "title": "Executing `beforeEach` outside `describe` block fails since 2.9.0", "contents": "Hi,\nContext\nSince version 2.9.0, any beforeEach / afterEach functions must be put inside a describe block. Even if it was not really documented, it has always been possible to define a beforeEach function outside any describe and it was executed before any tests in the entire test suite.\nThis was really useful to:\n\nExecute some initialization code before any test, without declaring it in every describe block.\nDeclaring additional matcher that would become available in the entire test suite.\nEtc.\n\nFor example, I used to mock clock using jasmine.clock().install() in a \"global\" beforeEach and uninstalling it in a global afterEach.\nI think this change comes from: #1411.\nNot sure if it was intended. If so: what do you suggest to have initialization code shared across all describe blocks?\nExpected Behavior\n\nDo not fail if a beforeEach function is defined outside any describe block.\n\nCurrent Behavior\n\nHaving a beforeEach function outside any describe block fail with this error: Error: 'beforeEach' should only be used in 'describe' function.\n\nMy Environment\n\nVersion used: 2.9.0 / 2.9.1", "createdAt": "2018-01-20T13:53:28Z", "updatedAt": "2018-08-14T00:38:40Z", "closedAt": "2018-01-20T20:27:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mjeanroy", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "mjeanroy", "company": null}, {"login": "sgravrock", "company": null}, {"login": "tomas-cani", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "BrainforgeUK", "company": "BrainforgeUK"}], "comments_count": 7, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-20T17:09:25Z", "contents": "Top-level beforeEach ought to work, for the reasons that you describe. I'm not immediately able to reproduce the problem. Can you provide example code that demonstrates it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mjeanroy", "authorAssociation": "NONE", "createdAt": "2018-01-20T20:27:48Z", "contents": "Ok, that was a mistake in my code, that just throw now because of the new check in Jasmine. Really sorry, and thanks for Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-01-21T17:17:59Z", "contents": "No worries. I'd rather see a false alarm than have a bug like the one you thought you saw get missed.", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "tomas-cani", "authorAssociation": "NONE", "createdAt": "2018-01-30T19:44:45Z", "contents": "I'm having the same error when using reusable describes like here. Tests using the reusable functions are failing now, any ideas on how to accomplish something similar with the new check?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-30T19:55:37Z", "contents": "@tomas-cani can you provide a small sample suite and what types of failures you're seeing? This will help us diagnose the underlying cause. When I put together a super simple version with a shared context, I'm not seeing any problems.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "BrainforgeUK", "authorAssociation": "NONE", "createdAt": "2018-08-11T08:16:20Z", "contents": "Got same issue here:\njoomla/joomla-cms#20152 (comment)\nHow can I resolve it?\nChecks applied to Joomla pull request, cannot see how my changes would be relevant.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-14T00:38:26Z", "contents": "@BrainforgeUK  It looks like you got unlucky in the base for your PR to Joomla. That spec file is indeed using invalid Jasmine syntax, having a beforeAll nested inside an it. These tests likely didn't work correctly for them before, and it looks like things have been moved around in the Joomla repository such that I can't figure out where the current version of that file would be in the branch you're trying to merge into (4.0-dev). If you want to fix the error for your particular PR and let the Joomla folks figure out what the long term strategy is there, you should be able to change the it on line 192 to a describe and update your PR.\nHope this helps.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1487, "url": "https://github.com/jasmine/jasmine/issues/1487", "title": "Why doesn't jasmine support using async function for describe method?", "contents": "When I am using an async function as the second argument of describe function, I got an error message about using AsyncFuntion. Is there some reasons I cannot use async function or it's just an issue with the type checking?", "createdAt": "2018-01-22T16:40:03Z", "updatedAt": "2019-02-05T18:39:12Z", "closedAt": "2018-03-01T18:53:20Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "LvChengbin", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "LvChengbin", "company": "NS"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "joet87", "company": null}, {"login": "thomann061", "company": null}, {"login": "yacovg", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-24T01:17:20Z", "contents": "The function passed to describe is executed during loading of your suite, and isn't expected to have anything asynchronous when defining which specs should be run.\nIf you have async setup work that needs to be done before the specs are actually executed, you should use beforeAll and an async mechanism there to do the setup.\nIf you really need to wait for some async process to finish before actually defining your specs, you'll need to also provide a custom boot file to cause Jasmine to wait until you've finished defining all of your specs before executeing the Environment.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-02T22:21:02Z", "contents": "Looks like the comment might have been deleted, but I was moving some things around in the documentation and temporarily broke the link to custom boot. It should be fixed now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "LvChengbin", "authorAssociation": "NONE", "createdAt": "2018-02-03T01:06:01Z", "contents": "@slackersoft okay, thank you so much.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joet87", "authorAssociation": "NONE", "createdAt": "2018-02-23T22:40:04Z", "contents": "I full don't understand this comment\" If you have async setup work that needs to be done before the specs are actually executed, you should use beforeAll and an async mechanism there to do the setup.\" .\nI need to call a SigninApi() that does a rest call and return few authorization token in beforeEach . I only want execute 'it' only after the  token have be returned. So far I cannot get the beforeEach to wait for the call to return instead test starts after making the signInApi() call. I tried sever ways to make it wait,  but none of them seem to work.\nDoes beforeEach support waiting on async calls  or can elaborate or provide example of \" an async mechanism there to do the setup.\"", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-26T19:36:31Z", "contents": "Jasmine supports 3 ways for a beforeEach, afterEach, it, beforeAll, or afterAll to be asynchronous.\n\nThe function passed should receive a done callback that is invoked when all work is finished.\nThe function returns a Promise that is resolved when all work is finished\nThe function uses the async keyword and appropriately awaits all async work.\n\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "thomann061", "authorAssociation": "NONE", "createdAt": "2018-03-01T17:44:37Z", "contents": "@joet87 Here's an example of doing async setup:\nconst fetch = () => {\n  return Promise.resolve(10);\n}\n\ndescribe('async function test', () => {\n\n  let data = null;\n\n  beforeEach(async () => {\n    console.log(`\\nbeforeEach is fetching async.....`);\n    data = await fetch();\n    console.log(`The data: ${data}`);\n    console.log(`Done fetching!\\n`);\n  })\n\n  it('should run after beforeEach', () => {\n    console.log(`Running after beforeEach.....`);\n    console.log(`Got the data: ${data}`);\n  })\n})\nOutput:\nbeforeEach is fetching async.....\nThe data: 10\nDone fetching!\n\nRunning after beforeEach.....\nGot the data: 10", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "yacovg", "authorAssociation": "NONE", "createdAt": "2019-01-29T12:01:06Z", "contents": "@joet87 Here's an example of doing async setup:\nconst fetch = () => {\n  return Promise.resolve(10);\n}\n\ndescribe('async function test', () => {\n\n  let data = null;\n\n  beforeEach(async () => {\n    console.log(`\\nbeforeEach is fetching async.....`);\n    data = await fetch();\n    console.log(`The data: ${data}`);\n    console.log(`Done fetching!\\n`);\n  })\n\n  it('should run after beforeEach', () => {\n    console.log(`Running after beforeEach.....`);\n    console.log(`Got the data: ${data}`);\n  })\n})\nOutput:\nbeforeEach is fetching async.....\nThe data: 10\nDone fetching!\n\nRunning after beforeEach.....\nGot the data: 10\n\n\nHow can I use data in it method?\nit(should run after beforeEach - ${data.name}, () => {\n...\n})", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-05T18:39:12Z", "contents": "Dynamically naming your specs seems like a test smell to me. Ideally, you should know enough about what the it is testing when you write it to give a good enough name, and not need to rely on data returned by some other part of your production code to determine what to call the test. Jasmine gathers the names of all your specs and suites (describe and it) when the suite is compiled before anything has been run, so you can't use any information created during execution of the suite.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1488, "url": "https://github.com/jasmine/jasmine/issues/1488", "title": "Jump to method in docs", "contents": "The new doc format is great, but since it's no longer a single long page, I can't use my browsers \"find\" to jump to the line I want.\nIt would be great to add some version of search to the docs. Or maybe just add a second level to the outline on the left side of the page.", "createdAt": "2018-01-23T22:15:57Z", "updatedAt": "2018-01-31T00:02:38Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "KyleW", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "KyleW", "company": "Adobe"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-31T00:02:35Z", "contents": "We definitely want to continue iterating on the docs for Jasmine. For now, the older, prose-style, docs are still available, but the plan is to convert them into API style, tutorials, and getting started type docs, removing the one format to rule them all.\nWe would be happy to review a pull request to update the jsdoc template to include all of the functions of the current section (or even expand/collapse for all sections).\nSearch is a bit harder since the docs are hosted as github pages, but I'd be happy to take a pull request for that as well, if someone wants to dig into how to implement that without changing the hosting of the docs.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["docs", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1489, "url": "https://github.com/jasmine/jasmine/issues/1489", "title": "Marking a successful test as failed in case of exception", "contents": "I'm writing a test to check exception scenario\nit('would not be started when the port is not accessible', function (done) {\n        var server = require('.././lib/server');\n        server.setup({ \"-d\" : path.join(__dirname, \"spec/test_assets\"), \"-p\" : \"8\"});\n        server.on(\"start\",function(){\n            fail(\"Not expected\");\n            done();\n        });\n        server.on(\"error\",function(err){\n            expect(err.code).toBe('EACCES');\n            done();\n        });\n        server.on(\"request\",function(err){\n            fail(\"Not expected\");\n            done();\n        });\n        server.start();\n    });\n\nI have confirmed that expect(err.code).toBe('EACCES'); is passed and done() is being called in above test.\n\nExpected Behavior\nSo It should mark the test successful.\nCurrent Behavior\nBut It is marking it failed and printing the error on console.\n1) server would not be started when the port is not accessible\n  Message:\n    Error: EACCES: Permission denied for use of port 8\n  Stack:\n    Error: EACCES: Permission denied for use of port 8\n        at networkErrHandler (/home/amit/git/stubmatic/lib/server.js:100:8)\n        at Server.server.on.err (/home/amit/git/stubmatic/lib/server.js:73:3)\n        at emitOne (events.js:115:13)\n        at Server.emit (events.js:210:7)\n        at emitErrorNT (net.js:1325:8)\n        at _combinedTickCallback (internal/process/next_tick.js:102:11)\n        at process._tickCallback (internal/process/next_tick.js:161:9)\n        at Function.Module.runMain (module.js:607:11)\n        at startup (bootstrap_node.js:158:16)\n        at bootstrap_node.js:575:3\n\n\nHence I have changed the test in following way.\nit('would not be started when the port is not accessible', function () {\n        var server = require('.././lib/server');\n        server.setup({ \"-d\" : path.join(__dirname, \"spec/test_assets\"), \"-p\" : \"8\"});\n        expect(function(){\n            server.start();\n        }).toThrow(\"EACCES: Permission denied for use of port 8\");\n    });\n\nBut now it fails saying no exception is thrown.\nYour Environment\n\n\nVersion used: 2.9.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): node.js 8.0\nOperating System and version (desktop or mobile): ubuntu 17.10\nLink to your project: https://github.com/NaturalIntelligence/Stubmatic", "createdAt": "2018-01-30T05:26:49Z", "updatedAt": "2018-01-31T02:20:38Z", "closedAt": "2018-01-31T02:20:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "amitguptagwl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "amitguptagwl", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-30T23:56:56Z", "contents": "More recent versions of Jasmine will trap global unhandled errors that occur during spec execution and report them to the current running spec. My guess is that this is the functionality that is causing you difficulty.\nIf your code under test actually causes an unhandled error to be thrown (say by trying to open a port it isn't allowed to), then Jasmine will get that in global.onerror and route it back through to your spec. If your server does this asynchronously (after the call to start()) has returned, then Jasmine's toThrow matchers won't work, because start is no longer on the call stack when the Error is thrown.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amitguptagwl", "authorAssociation": "NONE", "createdAt": "2018-01-31T02:20:38Z", "contents": "Thanks @slackersoft for your kind response. Previously I was throwing error in some certain cases when server doesn't start, to inform the user. However due to the jasmine changes Now I'm just logging it with the reason instead of throwing the error.\nIn short, thanks it made my build green.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1490, "url": "https://github.com/jasmine/jasmine/issues/1490", "title": "Unable to query input element in Shadow DOM of Polymer 2 component inside Angular page", "contents": "Hi,\nI am working with some Polymer 2 components which implement ShadowDOM v1 spec and I need to select elements (e.g. input) inside their shadowRoots to run unit tests and few integration tests using Jasmine.\nExpected Behavior\nW should be able to access Shadow DOM elements using Jasmine selectors.\nvar allInputs =  fixture.debugElement.queryAll(By.css('input'));\n\nCurrent Behavior\nUnable to access inside of Shadow DOM from unit test. We should have query selectors to query shadow DOM elements.\nSuite that reproduces the behavior (for bugs)\ndescribe('AppComponent', () => {\n  let component: AppComponent;\n  let fixture: ComponentFixture<AppComponent>;\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [\n        AppComponent\n      ],\n      imports: [\n        FormsModule\n      ],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n    }).compileComponents();\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n  }));\n  it('should have default value set for first name and last name', () => {\n    fixture.detectChanges();\n    var allInputs =  fixture.debugElement.queryAll(By.css('input'));\n    var firstNameInput = allInputs[0].nativeElement;\n    var lastNameInput = allInputs[1].nativeElement;\n    expect(firstNameInput.value).toBe('');\n    expect(lastNameInput.value).toBe('');\n  });\n});\nWhat is the best way I can test the Polymer Web Components inside Angular page?\nOr whether we have a mechanism to mock web components while unit testing Angular component?\nMy environment:\nAngular CLI: 1.6.4\nNode: 6.10.0\nAngular: 5.2.0\n\"devDependencies\": {\n\"karma-jasmine\": \"^0.3.6\",\n\"jasmine\": \"^2.4.1\",\n\"jasmine-core\": \"^2.2.0\"\n}", "createdAt": "2018-01-31T07:37:37Z", "updatedAt": "2018-02-01T03:19:58Z", "closedAt": "2018-02-01T03:19:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "msbasanth", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "msbasanth", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-01-31T17:48:10Z", "contents": "Unfortunately, I don't think any of the components you mention having issues with are part of Jasmine. Jasmine doesn't and shouldn't know anything about which javascript framework you're using or how it gets hooked up, it just runs your javascript specs. You might have better luck asking in a Polymer and/or Angular forum for help with test setup.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "msbasanth", "authorAssociation": "NONE", "createdAt": "2018-02-01T03:19:58Z", "contents": "thanks for the quick reply", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1491, "url": "https://github.com/jasmine/jasmine/issues/1491", "title": "Frequently I get this error when I run test using protractor", "contents": "This issue occurs frequently but randomly, sometimes the test passes.\n[16:05:16] I/update - chromedriver: file exists \\c\\someproject\\node_modules\\protractor\\node_modules\\webdriver-manager\\selenium\\chromedriver_2.35.zip\n[16:05:16] I/update - chromedriver: unzipping chromedriver_2.35.zip\n[16:05:16] I/update - chromedriver: chromedriver_2.35.exe up to date\n[16:05:16] I/launcher - Running 1 instances of WebDriver\n[16:05:16] I/direct - Using ChromeDriver directly...\n\nDevTools listening on ws://127.0.0.1:12270/devtools/browser/39dae962-b401-4bd0-a9e0-5d79c4886a3a\nJasmine started\nMock Server started\n\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:5277\n    return children && children[0].result.status;\n                                  ^\n\nTypeError: Cannot read property 'result' of undefined\n    at isAfterAll (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:5277:35)\n    at Suite.onException (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:5240:8)\n    at Suite.onException (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:5252:27)\n    at Suite.onException (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:5252:27)\n    at QueueRunner.onException (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:5490:34)\n    at onException (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:4461:14)\n    at handleError (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:4394:11)\n    at process.onerror (\\c\\someproject\\node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js:2455:17)\n    at emitOne (events.js:115:13)\n    at process.emit (events.js:210:7)\n    at process.emit (\\c\\someproject\\node_modules\\source-map-support\\source-map-support.js:439:21)\n    at process._fatalException (bootstrap_node.js:329:26)\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 7\nnpm ERR! someproject@0.0.0 e2e: `node ./.npm-scripts/serve.js && ng e2e --port 4200`\nnpm ERR! Exit status 7\nnpm ERR!\nnpm ERR! Failed at the someproject@0.0.0 e2e script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     \\c\\Users\\FOOBAR\\AppData\\Roaming\\npm-cache\\_logs\\2018-02-01T10_35_23_646Z-debug.log\n\nError is thrown due to a missing null check for the first element of children array\nfunction isAfterAll(children) {\n    return children && children[0].result.status;\n }\n\nPath: node_modules\\jasmine\\node_modules\\jasmine-core\\lib\\jasmine-core\\jasmine.js\nLine: 5277\nContext\nYour Environment\n\nVersion 64.0.3282.119 (Official Build) (64-bit)\nWindows 10 Pro\nnpm@5.1.0\nnode@v8.1.4\njasmine-core@2.9.1", "createdAt": "2018-02-02T06:15:12Z", "updatedAt": "2018-02-22T10:15:52Z", "closedAt": "2018-02-22T10:15:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mehdhi", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "mehdhi", "company": "@creately "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T19:57:01Z", "contents": "This error is most likely a leak of a previous async spec that has told Jasmine to move on, but still has code executing in the background. It looks like some asynchronous code is throwing an Error that Jasmine is trying to associate with the suite/spec that is currently running and it's finding a suite that doesn't have any children. Since Jasmine doesn't actually execute any user code in suites without children (reporter stuff still happens), the assumption is that if onException gets invoked on a suite that it must have children.\nThis code should be fixed on master now as part of Jasmine 3.0. Jasmine no longer tries to determine whether an afterAll is running anymore and just logs all errors that occur in beforeAll or afterAll directly on the suite itself.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "mehdhi", "authorAssociation": "NONE", "createdAt": "2018-02-22T10:15:52Z", "contents": "@slackersoft Thanks alot.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1492, "url": "https://github.com/jasmine/jasmine/issues/1492", "title": "Following Error shown When I Execute the test cases parallely with concurrently package Error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.", "contents": "Hai,\nI'm new to TDD. Currently we have 3000 more test cases in our project.  If we run the coverage, these 3000 cases were executed parallell with npm-concurrently  package. I have configured my test cases folder structure into 10 subFolders.  For Example, Consider, Two Main Folders A and B is here.  Folder A has 5 subFolders and Folder B had  5 Sub Folders. Each SubFolders has minimum 5 count of spec files. I had configured separate karma configuration file for each subFolders and configured the separate gulp tasks for each sub folders too. We are using Chrome Headless Browser to run the test cases. The Sample Karma Configuration file is given below for your reference,\n    `module.exports = function (config) {\n     config.set({\n    browsers: ['Chrome', 'IE', 'Firefox', 'ChromeHeadless'],\n    frameworks: ['jquery-1.10.2', 'jasmine-jquery', 'jasmine'],\n     files: [   \n            'js/src/**/**/*.css',\n           'js/src/assets/scripts/jquery-1.10.2.min.js',\n           'js/src/assets/scripts/jquery.easing.1.3.min.js',\n           'js/src/**/**/*.js',\n           {\n             pattern: 'js/**/**/Index.html',\n             watched: true,\n             served: true,\n             included: false\n           }\n          ],\n         concurrency: Infinity,\n         browserDisconnectTolerance: 3,\n         browserNoActivityTimeout: 1000000,\n         browserDisconnectTimeout: 1000000,\n         captureTimeout: 1000000,\n         retryLimit: 5,\n       htmlDetailed: {\n               splitResults: false,\n              dir: 'reoports/nunit/one',\n              fileName: 'TestResult.html',\n              autoReload: false\n        },\n       coverageReporter: {\n           type: \"html\",\n               check: {\n                 each: {\n                statements: 0,\n                branches: 0,\n                functions: 0,\n                lines: 0\n             }\n          }\n         }\n    });\n  }; `\n\nSample Gulp Configuration file is give below,\n     `gulp.task('one', function (done) {\n        return new Server({\n           configFile: __dirname + '/karma.conf.one.js',\n           action: 'run',\n           singleRun: true,\n           preprocessors: {\n        'js/src/**/**/*.js': ['coverage'] \n           },\n          reporters: ['progress', 'htmlDetailed', 'coverage'],\n          coverageReporter: {\n          dir: './reports',\n          subdir: \"reporters/new\",\n          reporters: [\n             { type: 'json', file: \"one.json\" }\n          ]\n       },\n      customLaunchers: {\n        MyHeadlessChrome_Desktop: {\n            base: 'ChromeHeadless',\n            flags: ['--disable-translate', '--disable-extensions', '--remote-debugging-port=9223', \"--\n            headless\", \"--disable-gpu\", \"--window-size=1228,1000\"],\n          },\n        },\n       browsers: ['MyHeadlessChrome']\n      }, done).start();\n   });\n   `\n\nMy Package.JSON File is given below for your reference:-\n    `{\n     \"name\": \"gulp-karma\",\n     \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"scripts\": {\n      \"test\": \"gulp test\",\n      \"ci\": \"gulp ci\",\n      \"coverage\": \"concurrently \\\"gulp one\\\" \\\"gulp two\\\" \\\"gulp three\\\" \\\"gulp four\\\" \\\"gulp five\\\" \n       \\\"gulp six\\\" \\\"gulp seven\\\" \\\"gulp eight\\\" \\\"gulp nine\\\" \\\"gulp ten\\\"\",\n      \"lint\": \"gulp runeslint\"\n     },\n  \"devDependencies\": {\n   \"concurrently\": \"^3.5.1\",\n    \"eslint-html-reporter\": \"^0.5.2\",\n    \"ghooks\": \"^2.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-csslint\": \"^1.0.0\",\n    \"gulp-eslint\": \"^2.0.0\",\n    \"gulp-jasmine\": \"^3.0.0\",\n    \"gulp-lesshint\": \"^4.0.0\",\n    \"gulp-shell\": \"^0.6.5\",\n    \"istanbul-combine\": \"^0.3.0\",\n    \"jasmine\": \"^2.9.0\",\n    \"jasmine-core\": \"^2.9.1\",\n    \"jasmine-jquery\": \"^2.1.1\",\n   \"jquery-1x\": \"^1.12.1\",\n   \"karma\": \"^2.0.0\",\n   \"karma-chrome-launcher\": \"^2.2.0\",\n   \"karma-coverage\": \"^1.1.1\",\n   \"karma-firefox-launcher\": \"^1.0.1\",\n  \"karma-html-detailed-reporter\": \"^1.1.21\",\n   \"karma-ie-launcher\": \"^1.0.0\",\n   \"karma-jasmine\": \"^1.1.1\",\n   \"karma-jasmine-jquery-2\": \"^0.1.1\",\n   \"karma-jquery\": \"^0.2.2\",\n   \"karma-safari-launcher\": \"^1.0.0\",\n   \"clean-dir\": \"^1.0.3\"\n   },\n `\n\nMy Sample Test Case is given below for your reference\n   `describe(\"Checking AsynC Call\", function () {\n    var originalTimeout;\n     beforeEach(function (done) {\n     originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n     jasmine.DEFAULT_TIMEOUT_INTERVAL = 30000;\n     });\n    it(\"Ensure element a is visible\", function \n    (done) {\n                  var num = document.find(\".number\");\n\t\tnum.trigger('click');\n\t\tsetTimeout(function(){\n\t\texpect(document.find(\"a\").is(\":visible\")).toBeTruthy();\n\t\tdone();\n\t\t},1000);\n       });\n    it(\"Ensure element b is visible\", function \n    (done) {\n                  var num = document.find(\".num\");\n\t\tnum.trigger('click');\n\t\tsetTimeout(function(){\n\t\texpect(document.find(\"b\").is(\":visible\")).toBeTruthy();\n\t\tdone();\n\t\t},5000);\n       });\n\n       afterEach(function (done) {\n        jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;\n        done();\n      });\n    });`\n\nIf i set the jasmine.DEFAULT_TIMEOUT_INTERVAL value into Math.pow(2, 31) - 1 value also, This \"Error-Async callback was not invoked within the jasmine.DEFAULT_TIMEOUT_INTERVAL\" exception was shown?\nCan anybody tell me the solution for above issue?\nAnd Tell me, what is the maximum timeout interval, we can set in **jasmine.DEFAULT_TIMEOUT_INTERVAL\" in this settings?\nRegards,\nThiru", "createdAt": "2018-02-05T12:16:08Z", "updatedAt": "2019-04-09T06:23:11Z", "closedAt": "2018-08-16T00:41:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "thirusabari", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "thirusabari", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "JESii", "company": "EDP Consulting, Inc."}, {"login": "kmeeraj", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T17:49:30Z", "contents": "It looks like your beforeEach function is receiving a done callback but never invoking it, which is probably causing the timeout error. Additionally, that beforeEach probably doesn't need to be asynchronous and doesn't really need the done callback at all.\nJasmine 2.9 should also allow you to pass an override to the default timeout to the individual asynchronous spec, instead of saving and resetting the global value. See: it\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "thirusabari", "authorAssociation": "NONE", "createdAt": "2018-02-08T03:31:44Z", "contents": "Hai @slackersoft , I will check and update you. And Thanks for the Comment", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "thirusabari", "authorAssociation": "NONE", "createdAt": "2018-02-08T08:51:04Z", "contents": "Hai @slackersoft , FYI, I had posted my questions with some mistakes, My beforeEach contains, the following block of code,\n`beforeEach(function (done) { \n\n        LoadData(done, {\n\n            Data: Request,\n\n            Value: \"string\"\n\n        });\n\n    });`\n\nCan you please answer for this scenario?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-08T18:26:26Z", "contents": "If you're seeing a timeout error in Jasmine, it is probably because you're not completing your asynchronous work before the timeout expires. Make sure your LoadData function is actually calling done and that it is doing soon before the timeout runs out.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JESii", "authorAssociation": "NONE", "createdAt": "2018-04-23T16:42:25Z", "contents": "One more thing that helped me: when you get the timeout error, check your console log to see what's going on. In my experience, there's usually an exception that interrupted the workflow and so you never got to the done() method.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-16T00:41:44Z", "contents": "Closing this since this error is a feature of Jasmine to make sure async specs don't go on forever. Please let us know if you have any other information that looks like Jasmine might be giving the error incorrectly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kmeeraj", "authorAssociation": "NONE", "createdAt": "2019-04-09T06:23:11Z", "contents": "just don't forget to add done method inside the test case;\ndescribe(\"long asynchronous specs\", function() {\nvar originalTimeout;\nbeforeEach(function() {\noriginalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\njasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;\n});\nit(\"takes a long time\", function(done) {\n  setTimeout(function() {\n    done();\n  }, 9000);\n});\n\nafterEach(function() {\n  jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;\n});\n\n});\n});", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1493, "url": "https://github.com/jasmine/jasmine/issues/1493", "title": "Jasmine Timeout error in  jasmineBoot,js file ", "contents": "Uncaught TypeError: Cannot assign to read only property 'setTimeout' of object '[object Object]'\nthrows at  jasmine boot.js file\nthe line is 107:21\nwindow.clearTimeout = window.clearTimeout;", "createdAt": "2018-02-06T15:20:03Z", "updatedAt": "2018-02-08T18:16:02Z", "closedAt": "2018-02-08T18:16:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Artirobo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Artirobo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T17:44:51Z", "contents": "Unfortunately, I don't really have enough information here to help solve your problem.\n\nWhat version of Jasmine are you using?\nWhat browser (name and version) are you running Jasmine in?\nHow are you running Jasmine (e.g. via Karma, the ruby gem, etc)?\n\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Artirobo", "authorAssociation": "NONE", "createdAt": "2018-02-08T15:46:54Z", "contents": "i am being using the jasmine 2.9.1 and  i am using jasmine in chrome Version 64.0.3282.140   and  i am using jasmine to test lightning component in salesforce\ni added those files and run the aura component than its giving me that error", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-08T18:16:02Z", "contents": "Based on this talk and the associated repo, it sounds like the window object that Jasmine receives when booting in the Lightning Locker Service is actually a secure window where these timing functions are not writable. He suggests in the video that you comment customize your boot.js and remove (or comment out) those lines.\nHope this helps. I'm going to close this issues since it doesn't look like an issue with Jasmine itself. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1494, "url": "https://github.com/jasmine/jasmine/issues/1494", "title": "global beforeEach throws error", "contents": "Expected Behavior\nShould be called before each test\nCurrent Behavior\nthrows the error 'beforeEach' should only be used in 'describe' function\nPossible Solution\ncould test for currentSpec instead of currentRunnable() in ensureIsNotNested\n\n  \n    \n      jasmine/src/core/Env.js\n    \n    \n        Lines 472 to 477\n      in\n      3d8e379\n    \n    \n    \n    \n\n        \n          \n           function ensureIsNotNested(method) { \n        \n\n        \n          \n             var runnable = currentRunnable(); \n        \n\n        \n          \n             if (runnable !== null && runnable !== undefined) { \n        \n\n        \n          \n               throw new Error('\\'' + method + '\\' should only be used in \\'describe\\' function'); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nchange to:\n    function ensureIsNotNested(method) {\n      if (currentSpec !== null && currentSpec !== undefined) {\n        throw new Error('\\'' + method + '\\' should only be used in \\'describe\\' function');\n      }\n    }\nSuite that reproduces the behavior (for bugs)\n\nbeforeEach(function() {});\ndescribe(\"sample\", function() {\n  it(\"test\", function() {});\n});\nContext\nThis limits the ability to add a beforeEach for all tests when tests are in multiple files.\nYour Environment\nJasmine 3.0.0\nNode 9.4.0", "createdAt": "2018-02-07T06:44:59Z", "updatedAt": "2018-02-07T14:58:26Z", "closedAt": "2018-02-07T14:58:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "UziTech", "company": "UziTech"}], "comments_count": 1, "comments_data": [{"authorLogin": "UziTech", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-02-07T14:58:25Z", "contents": "nevermind. it looks like i had the beforeEach executing inside a beforeAll", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1495, "url": "https://github.com/jasmine/jasmine/issues/1495", "title": "You need to include some adapter that implements __karma__.start method", "contents": "I'm coming here since I received a PR to update jasmine: julmot/mark.js#196\nSince this update, only in IE9 it throws an error:\nYou need to include some adapter that implements __karma__.start method\n\nhttps://travis-ci.org/julmot/mark.js/builds/338176986#L3394\nWhat's causing the issue? Is it a bug of jasmine when used in combination with Karma or an issue with the environment of mark.js?\n\nYour Environment\n\n\nVersion used: 3.0.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): IE9\nOperating System and version (desktop or mobile): Windows 7\nLink to your project: https://github.com/julmot/mark.js", "createdAt": "2018-02-07T09:27:01Z", "updatedAt": "2018-02-07T17:34:25Z", "closedAt": "2018-02-07T17:34:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "julmot", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "julmot", "company": "@CandoImage, Switzerland"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T17:22:31Z", "contents": "Sorry about that. Somehow in all the internal deprecation warnings, I missed the supported browser (and other environment) changes. Jasmine 3.0 will no longer support IE 8 or 9. The market is too small and the workarounds too many.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "julmot", "authorAssociation": "NONE", "createdAt": "2018-02-07T17:34:24Z", "contents": "Thanks for this information. I won't update to v3 though, as IE9 is still important in some industries.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1496, "url": "https://github.com/jasmine/jasmine/issues/1496", "title": "Jasmine 3.0.0 breaks Angular 5.2 tests", "contents": "Expected Behavior\nTests work with Jasmine 2.9.1\nCurrent Behavior\nWith Jasmine 3.0.0, all tests fail with this error:\nTypeError: Cannot read property 'run' of null\n  at <Jasmine>\n  at UserContext.<anonymous> home/bobn/Projects/app/node_modules/zone.js/dist/jasmine-patch.js:106:1)\n  at <Jasmine>\n  at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invokeTask home/bobn/Projects/app/node_modules/zone.js/dist/zone.js:421:1)\n  at Zone.webpackJsonp.../../../../zone.js/dist/zone.js.Zone.runTask home/bobn/Projects/app/node_modules/zone.js/dist/zone.js:188:1)\n  at drainMicroTaskQueue home/bobn/Projects/app/node_modules/zone.js/dist/zone.js:595:1)\n  at <Jasmine>\n\nSame behavior using Angular 5.2.3 and 5.2.4.\nIt seems as though jasmine-patch.js is no longer compatible with Jasmine 3.0.0.\nYour Environment\nUbuntu 16.04\nChrome 64.0.3282 (Linux)\nng -v\n\nAngular CLI: 1.6.7\nNode: 8.8.1\nOS: linux x64\nAngular: 5.2.4\n... animations, common, compiler, compiler-cli, core, forms\n... http, language-service, platform-browser\n... platform-browser-dynamic, router\n@angular/cli: 1.6.7\n@angular-devkit/build-optimizer: 0.0.42\n@angular-devkit/core: 0.0.29\n@angular-devkit/schematics: 0.0.52\n@ngtools/json-schema: 1.1.0\n@ngtools/webpack: 1.9.7\n@schematics/angular: 0.1.17\ntypescript: 2.7.1\nwebpack: 3.10.0", "createdAt": "2018-02-07T20:05:29Z", "updatedAt": "2018-03-27T17:34:46Z", "closedAt": "2018-02-08T17:52:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rnadler", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "rnadler", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "JiaLiPassion", "company": "Sylabs"}, {"login": "corvinrok", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T20:19:13Z", "contents": "jasmine-patch.js is not supplied by Jasmine, it looks like it's probably zone.js based on the stack trace. I don't know what zone.js is trying to patch into Jasmine, but if it is reaching past what Jasmine considers to be its external interface various things could have changed to cause issues like this.\nYou're probably better off asking this over there.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 6, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "JiaLiPassion", "authorAssociation": "NONE", "createdAt": "2018-02-08T17:40:30Z", "contents": "@rnadler , you can close the issue here, and I will provide a patch from zone.js.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-08T17:52:52Z", "contents": "Thanks! Closing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "corvinrok", "authorAssociation": "NONE", "createdAt": "2018-03-27T16:07:16Z", "contents": "Why is this closed? The issue still exists in the latest revision of stable releases from all components notes (zone.js, rxjs, jasmine).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-27T17:34:46Z", "contents": "The other library(s) were patching the internals of Jasmine, and the patches broke with the new, major version, release of Jasmine. Thus this isn't an issue with Jasmine itself, and this issue was closed.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 11, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HOORAY", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1497, "url": "https://github.com/jasmine/jasmine/issues/1497", "title": "v2.99 catchExceptions deprecation warning is unavoidable", "contents": "Are you creating an issue in the correct repository?\nyes\nExpected Behavior\nIf I am not expliclty using catchExceptions, I should not see the deprecation warning\nCurrent Behavior\nI see the deprecation warning even though I am not using catchExceptions explicitly\nPossible Solution\nThe catchExceptions function is called uncondtionally from here, and if the query parameter is not provided, defaults the value to true.\nIt seems like the value should default to false, and that the warning in the catchExceptions function should only be displayed if the value is truthy. If the catchExceptions function needs to be enabled by default and that a change to that would be breaking, that's fine, but it seems like odd that the deprecation warning would show up if you didn't opt in to the feature. Because you have to explicitly opt out of something you never opted in to to get rid of the warning.\nContext\nI am just running jasmine in a browser and would like to get rid of the deprecation warning.\nYour Environment\n\n\nVersion used: 2.99\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 64 node 8.9\nOperating System and version (desktop or mobile): OS X High Sierra", "createdAt": "2018-02-07T21:12:34Z", "updatedAt": "2018-02-09T17:32:34Z", "closedAt": "2018-02-09T17:32:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bdwain", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "bdwain", "company": "@grubhub"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-07T22:50:04Z", "contents": "You're totally correct, catchExceptions should only be printing the deprecation warning if you turn it off, as that is the part that is deprecated. I'm going to release 2.99.1 shortly to fix this.", "reactions_count": 2, "reactions_data": ["HOORAY", "HOORAY"]}, {"authorLogin": "bdwain", "authorAssociation": "NONE", "createdAt": "2018-02-07T22:56:06Z", "contents": "thanks for the quick response!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1500, "url": "https://github.com/jasmine/jasmine/issues/1500", "title": "Unresolved merge conflict", "contents": "jasmine/lib/jasmine-core/jasmine.css\n    \n    \n         Line 36\n      in\n      1acbd1e\n    \n    \n    \n    \n\n        \n          \n           <<<<<<< HEAD", "createdAt": "2018-02-08T07:07:19Z", "updatedAt": "2018-02-08T18:23:10Z", "closedAt": "2018-02-08T18:23:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aptx4869", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "aptx4869", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1502, "url": "https://github.com/jasmine/jasmine/issues/1502", "title": "Unable to bundle jasmine-core v2.99.1", "contents": "Are you creating an issue in the correct repository?\nyes?\nExpected Behavior\nI should be able to run bundle install when Jasmine is in my gemfile.\nCurrent Behavior\nI'm seeing the following error that did not happen with v2.99.0:\nInstalling jasmine-core 2.99.1 (was 2.99.0)\nErrno::EEXIST: File exists @ dir_s_mkdir - /Users/cameron/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/jasmine-core-2.99.1/lib/jasmine-core/spec\nAn error occurred while installing jasmine-core (2.99.1), and Bundler cannot continue.\nMake sure that `gem install jasmine-core -v '2.99.1'` succeeds before bundling.\n\nPossible Solution\nIs jasmine-core or jasmine-gem trying to create a directory that already exists?\nSuite that reproduces the behavior (for bugs)\nThis fails for me:\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'http://rubygems.org'\n  gem 'jasmine', '~> 2.3.0'\nend\nYour Environment\n\nRuby 2.5.0\nBundler 1.16.1", "createdAt": "2018-02-09T01:27:33Z", "updatedAt": "2018-02-09T19:48:51Z", "closedAt": "2018-02-09T17:36:47Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "camertron", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "camertron", "company": "Lumos Labs, Inc"}, {"login": "mykhi", "company": null}, {"login": "rocket-turtle", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "joshrowley", "company": "Flatiron School"}], "comments_count": 5, "comments_data": [{"authorLogin": "mykhi", "authorAssociation": "NONE", "createdAt": "2018-02-09T11:23:33Z", "contents": "+1 here, looks like it's broken. works up to 2.99.0", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "rocket-turtle", "authorAssociation": "NONE", "createdAt": "2018-02-09T16:22:10Z", "contents": "+1 looks like the spec folder is a broken symlink\n$ cd gems/jasmine-core-2.99.1/lib/jasmine-core/\n$ ls -la\n...\nlrwxr-xr-x   1 jos  staff      29  9 Feb 17:07 spec -> ./lib/jasmine-core/../../spec", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "HOORAY"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-09T17:36:47Z", "contents": "I've just released 2.99.2  which should fix this issue. Nothing around the spec folder and bundling has changed in a long while, but we probably don't need to be shipping Jasmine's own specs in the gem anyways.\nThanks for pointing this out!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "joshrowley", "authorAssociation": "NONE", "createdAt": "2018-02-09T19:15:51Z", "contents": "@slackersoft Thanks so much for the quick fix!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "camertron", "authorAssociation": "NONE", "createdAt": "2018-02-09T19:48:51Z", "contents": "Thank you!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1503, "url": "https://github.com/jasmine/jasmine/issues/1503", "title": "Error when trying to use the 'toHaveClass' matcher", "contents": "Are you creating an issue in the correct repository?\nYes\n\nExpected Behavior\nexpect(el).toHaveClass('bar'); should return true or false.\nCurrent Behavior\nexpect(el).toHaveClass('bar'); returns the following error:\nTypeError: expect(...).toHaveClass is not a function\n\t    at <Jasmine>\n\t    at UserContext.<anonymous> (spec/directives/spec.alerts.js:30:20)\n\t    at <Jasmine>\nSuite that reproduces the behavior (for bugs)\nit('should check the element class', function () {\n    var el = document.createElement('div');\n    el.className = 'foo bar baz';\n    expect(el).toHaveClass('bar');\n});\nContext\n\n\nI'm trying to run some tests for a directive and wanted to use the new matcher that has become available in Jasmine 3.0.0.  The first attempt at using the matcher, caused the issue above.\nI am using Karma (1.7.1) as a test runner.\nYour Environment\n\n\nVersion used: 3.0.0\nEnvironment name and version: Chrome 62.0.3202, node.js 8.5.0\nOperating System and version (desktop or mobile): Desktop\nApp: AngularJS 1.5.11", "createdAt": "2018-02-09T12:00:04Z", "updatedAt": "2018-02-14T01:10:52Z", "closedAt": "2018-02-14T01:10:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "emaduka-debanke", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "emaduka-debanke", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-02-10T19:57:02Z", "contents": "We're still working out the best way to package browser-specific matchers. I hope to have something that will work for Karma ready Real Soon Now\u2122. In the meantime, you should be able to get it working by grabbing jasmine-html.js from the standalone distribution and including it in your Karma config's files array before any of your spec files.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "emaduka-debanke", "authorAssociation": "NONE", "createdAt": "2018-02-12T09:42:18Z", "contents": "Many thanks @sgravrock, I'll use jasmine-html.js in the meantime.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1504, "url": "https://github.com/jasmine/jasmine/issues/1504", "title": "Error in the Version for NPM for jasmine-core", "contents": "I  believe there's been an error in the versioning for jamine-core. As I was checking for updates in an angular app, I noticed the version jumped from 2.9.1  \u2192  2.99.1 and that looks like a mistake:\n\nIs this an error?", "createdAt": "2018-02-09T23:44:04Z", "updatedAt": "2018-02-10T00:10:59Z", "closedAt": "2018-02-09T23:50:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "seanwestfall", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "seanwestfall", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-09T23:50:39Z", "contents": "This is not an mistake. We also released 3.0 this week. In an effort to help mitigate migration pains, 2.99 was released to let users know about deprecated features.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1506, "url": "https://github.com/jasmine/jasmine/issues/1506", "title": "Node.js gives exit code 4 when jasmine encounters an exception in the test file", "contents": "Consider this javascript file\nvar Jasmine = require('jasmine');\nvar jasmine = new Jasmine();\n\n\ntry {\n    jasmine.execute(\"./simple_test.js\");\n}\ncatch (e) {\n    process.exit(1);\n}\nAnd this jasmine test file\nthrow new Error(\"error\");\n\ndescribe(\"simple suite\", function () {\n\n    it(\"simple test\", function () {\n        var result = \"\";\n        expect(result).toBe(\"1\");\n    });\n    \n});\nOn running the command node main.js and checking the exit code using echo $? I constantly get exit code 4 instead of exit code 1.", "createdAt": "2018-02-14T16:26:47Z", "updatedAt": "2018-02-15T10:02:12Z", "closedAt": "2018-02-15T10:02:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "karanjitsingh", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "karanjitsingh", "company": "@Microsoft"}], "comments_count": 1, "comments_data": [{"authorLogin": "karanjitsingh", "authorAssociation": "NONE", "createdAt": "2018-02-15T10:02:12Z", "contents": "Ran into this piece of code while debugging\nvar checkExit = function(jasmineRunner) {\n  return function() {\n    if (!jasmineRunner.completionReporter.isComplete()) {\n      process.exitCode = 4;\n    }\n  };\n};\n\nJasmine.prototype.execute = function(files, filterString) {\n  process.on('exit', this.checkExit);", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1507, "url": "https://github.com/jasmine/jasmine/issues/1507", "title": "Spies : Calling through doesn't work, but calling fake the same function does. ", "contents": "I first should mention I use Jasmine ~2.8.0 with Angular 5.1.1 (CLI @ 1.6.1).\n\nExpected Behavior\nWhen I create a spy with this\n  component['createMarker'] = jasmine.createSpy().and.callThrough();\n\nI expect the function to have been called, and I expect the function to run as if there was no spy.\nCurrent Behavior\nThe callThrough won't work, but using this\n  component['createMarker'] = jasmine.createSpy().and.callFake(component['createMarker']);\n\nWorks. I really can't understand the issue there, therefore I am creating an issue into your repo.\nSuite that reproduces the behavior\nI'm not sure I can reproduce the behavior, so instead of making a sandbox, I will post my whole code, hoping for an explanation (at least).\nThe code is at the end of the issue, so that it doesn't bother your reading !\nI should also state the error I guess. When I create a marker with the createMarker function, using callThrough returns undefined (and as I stated, fakely calling the same function works well), thus making it impossible to call getLatLng on undefined. Here is the error (look for marker.getLatLng() in the setSelected function)  :\n\u00d7 should remove the marker of the select source post\n  Chrome 63.0.3239 (Windows 10 0.0.0)\n  TypeError: Cannot read property 'getLatLng' of undefined\n    at MapComponent.setSelected C:/Users/MT4E45CN/Documents/Projects/ms-front/src/app/components/logged/map/map.component.ts:122:62)\n\nAs I said, I have found a workaround, so it's just for information at this point. Although, I would like to use callThrough, it's easier ...\nI stay available if you have questions or need additional information !\nYour Environment\nI'm on Windows 10, using Chrome 63.0.3239, with Jasmine ~2.8.0.\nCode snippets\nmap.component.ts\n  setSelected(sp: CustomObject) {\n    this.removeMarker(sp);\n\n    if (this.currentPost) {\n      this.removeMarker(this.currentPost);\n\n      if (this.session.isCustomObjectInCustomValue(this.currentPost)) {\n        this.createMarker(this.currentPost, this.createCoordinates(this.currentPost));\n      }\n    }\n    if (sp.latitude && sp.longitude) {\n      const marker = this.createMarker(sp, this.createCoordinates(sp), this.selectedIcon);\n      if (\n        !this.isMapSelection &&\n        !this.leafletMap.getBounds().contains(marker.getLatLng())\n      ) { this.zoomOnMarker(marker, 14); }\n    } else {\n      this.snacker.open('Coordonn\u00e9es non renseign\u00e9es', 'OK', { duration: 2500 });\n    }\n  }\nmap.component.spec.ts\ndescribe('MapComponent', () => {\n  let component: MapComponent;\n  let fixture: ComponentFixture<MapComponent>;\n\n  const spMock: any = { id: 1, latitude: 10, longitude: 10 };\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [MapComponent],\n      providers: [sessionServiceMock, sourcePostServiceMock],\n      imports: [SharedModule, BrowserAnimationsModule]\n    })\n      .compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MapComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  describe('setSelected', () => {\n\n    let mapContainsSpy: jasmine.Spy;\n\n    beforeEach(() => {\n      component.currentPost = spMock;\n      component['removeMarker'] = createFakeCallSpy();\n      component['createMarker'] = jasmine.createSpy().and.callThrough();\n      component['zoomOnMarker'] = createFakeCallSpy();\n\n      mapContainsSpy = spyOn(component.leafletMap.getBounds(), 'contains');\n    });\n\n    it('should remove the marker of the select source post', () => {\n      component.setSelected(spMock);\n      expect(component['removeMarker']).toHaveBeenCalledWith(spMock);\n    });\n  });\n});", "createdAt": "2018-02-15T16:13:37Z", "updatedAt": "2018-02-27T17:21:30Z", "closedAt": "2018-02-27T17:21:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "guntram", "company": "df"}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-15T17:43:34Z", "contents": "The callThrough strategy for spies relies on there to be an original function. This gets set up automatically when you use spyOn. You should probably be using spyOn if you're replacing existing functions on an object because those spies will get cleaned up after each spec is done to help eliminate test pollution.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2018-02-15T17:59:37Z", "contents": "I used the array notation to bypass the private scope of my function and still be tslint compliant. Should I set it to public and use spy on ? I'll try that tomorrow then !", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-15T22:58:53Z", "contents": "In general, I would recommend against mocking (or spying on) internals of the object/class/component that you are testing, even if they are public. This can put your tests in a position where they aren't really testing the object how it really works. You could also try injecting a collaborator object that has those functions publicly available. Jasmine does a lot of this in its own specs for just this type of reason.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guntram", "authorAssociation": "NONE", "createdAt": "2018-02-27T14:06:25Z", "contents": "You can spy on private methods without the array notation:\nspyOn<any>(component, 'myPrivateMethod');", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2018-02-27T14:10:45Z", "contents": "@guntram No you can't (well at least I can't). Furthermore, I think that's besides the point ...\n(Here is my proof : )", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guntram", "authorAssociation": "NONE", "createdAt": "2018-02-27T17:07:56Z", "contents": "@trichetriche try any ;)\nspyOn< A N Y >(component, 'privateMethodName');", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "", "authorAssociation": "NONE", "createdAt": "2018-02-27T17:11:28Z", "contents": "Oh, my bad ! Anyway, that's still besides the point :P\n(but thank you, I will try that tomorrow and see if it suits me !)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "guntram", "authorAssociation": "NONE", "createdAt": "2018-02-27T17:19:14Z", "contents": "Yes, I am also confused that sometimes using callTrough() and not using it works...\nI tried to avoid callFake() until now, and also createSpy(). I don't like all this manually creating stuff and zones and whatever just to test if some method was called to keep up coverage :)\nI hope at least you won't need to hack these private methods for the tests...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-27T17:21:30Z", "contents": "I'm going to close this since it seems like there isn't an issue with Jasmine itself, but with test setup and testing angular components. Feel free to discuss more on the jasmine-js google group.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1508, "url": "https://github.com/jasmine/jasmine/issues/1508", "title": "Object equality fails when object contains a function", "contents": ".toEqual and jasmine.objectContaining fail to recognize equal objects with functions\nExpected Behavior\nI would expect this text assertion to pass:\nit('passes objects that contain functions', () => {\nexpect({1: 'hello', 2: function() {}}).toEqual({1: 'hello', 2: function() {}});\nexpect({1: 'hello', 2: function() {}}).toEqual(jasmine.objectContaining({1: 'hello', 2: function() {}}));\n});\n\nCurrent Behavior\nExpected Object({ 1: 'hello', 2: Function }) to equal <jasmine.objectContaining(Object({ 1: 'hello', 2: Function }))>.\n\t    at Object.eval (http://localhost:9876/statictests/\n\nContext\nI'm attempting to test a function call that passes callbacks within an object. Here was my initial test idea but it fails.\nconst params = {\n  resolve: {\n    someData: () => someData\n  }\n};\nmyFunc(params);\nexpect(myFunc).toHaveBeenCalledWith(params);\n\nYour Environment\n\nVersion used: 2.3.4\nEnvironment name and version: Headless Chrome 64.0.3282.167\nOperating System and version: macOS High Sierra 10.13.3", "createdAt": "2018-02-15T22:31:06Z", "updatedAt": "2018-07-25T13:42:26Z", "closedAt": "2018-02-15T23:17:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "antgonzales", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "antgonzales", "company": "@UrbanCompass "}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "alexsalmon", "company": null}, {"login": "Gnanarajk", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-15T22:55:07Z", "contents": "Unfortunately, functions are really hard to do equality comparisons on. For example, this spec fails:\nit(\"can't compare functions\", function()  {\n  expect(function() {}).toEqual(function() {});\n});\nBecause functions are compared via reference equality\nit('does reference equality', function()  {\n  var fn = function() {};\n  expect(fn).toEqual(fn);\n});\nDepending on what you're looking to test about the function, you might also look at jasmine.any(Function), which you can also nest inside your jasmine.objectContaining.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "antgonzales", "authorAssociation": "NONE", "createdAt": "2018-02-15T23:17:16Z", "contents": "Thanks for the reply. It looks like this was previously answered so I'm going to go ahead and close.\n#652", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "alexsalmon", "authorAssociation": "NONE", "createdAt": "2018-05-02T13:37:15Z", "contents": "If allowed, try using a JSON.stringify() on your objects.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Gnanarajk", "authorAssociation": "NONE", "createdAt": "2018-07-25T13:42:26Z", "contents": "you can use toString() to do equality check, so it checks the text exactness rather its functionality.", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1509, "url": "https://github.com/jasmine/jasmine/issues/1509", "title": "Provide an example of async reporter hooks", "contents": "It is said here that async custom reporter hooks are implemented in Jasmine3. But I failed to implement it. Provide some examples to documentation on this, please.", "createdAt": "2018-02-17T21:45:12Z", "updatedAt": "2018-02-26T20:20:39Z", "closedAt": "2018-02-26T20:20:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tymfear", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tymfear", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-26T20:20:39Z", "contents": "The api docs for Reporters and the custom reporter tutorial have both been update with the new info about async reporters.\nThe short answer is that they work much like other async functionality in Jasmine. You can accept a trailing param (after the result information) as a done callback, return a Promise, or use the async keyword.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1510, "url": "https://github.com/jasmine/jasmine/issues/1510", "title": "[Feature] Snapshot testing like jest", "contents": "Hi, there are plans to add support for snapshot testing like jest? There are plugins, but many work incorrectly or outdated", "createdAt": "2018-02-19T10:35:53Z", "updatedAt": "2018-02-26T19:55:13Z", "closedAt": "2018-02-26T19:55:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "listepo-alterpost", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "listepo-alterpost", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-26T19:55:13Z", "contents": "I don't think this is a feature we're looking to add to Jasmine itself. Snapshot testing itself is fairly flaky and you can usually get better failures by deciding which bits of your functionality are truly required and testing those. Jasmine also needs to run in the browser as well, which doesn't give a good place to save the snapshot in between runs.\nIf there are extension bits to Jasmine that would make writing an extension/matcher for this easier, we would be happy to discuss those in a separate issue.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1511, "url": "https://github.com/jasmine/jasmine/issues/1511", "title": "Transforming deliver.sm to submit.sm", "contents": "Good morning,\nI\u2019ve been checking the configuration of JasminSMPP to build it. In one of the URL\u2019s \u2013 this one: jookies/jasmin#142 - I\u2019ve found that was not posible to comunicate two SMPPclients by transforming deliver.sm to submit.sm because the standard didn\u2019t allow that.\nThen, from Jasmin platform, was wrote a basic scripted example to do this making a PDU and sending it to RabbitMQ, but the webpage  - https://gist.github.com/zoufou/efc604070f34ef699c8b - seems that is not working anymore.\nIn the latest version of Jasmin, is still not posible to do this? Do I have to prepare some script to make it happen?\nAnyway, what I'm trying to do is to connect a SMPP client to a SMPP server to send the SMS to the SMScenter. So, at first, I should be able to receive the petition of the SMPP client via PDU - submit.sm (deliver at my SMPP server) and, by creating a connector, re-send it to SMScenter.\nThanks in advance,\nkind regards.", "createdAt": "2018-02-19T12:03:37Z", "updatedAt": "2018-02-19T17:37:21Z", "closedAt": "2018-02-19T17:37:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JFnine", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "JFnine", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-02-19T16:46:32Z", "contents": "Did you mean to open this issue on https://github.com/jookies/jasmin rather than here? Jasmine (as opposed to Jasmin) is a Javascript testing framework and has nothing to do with SMPP or SMS.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JFnine", "authorAssociation": "NONE", "createdAt": "2018-02-19T17:37:15Z", "contents": "Wow, you're right. My apologies.\nKind regards.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1517, "url": "https://github.com/jasmine/jasmine/issues/1517", "title": "Provide a way to run all specs marked as pending", "contents": "It would be helpful to have a way to force all specs marked as pending to be run, to easily check if they are now passing without having to go to the corresponding code and take off the pending marker.\nAt a minimum I believe a Pending 'tab' on the html reporter which listed all pending specs in one place would be useful:\nSpec List | Failures | Pending\nProviding an option on this tab to run the listed specs, and another in Jasmine to run a spec even when it is marked as pending.\nContext\nAlthough we try and use the pending argument to say which task numbers in our backlog a spec is blocked by for example pending('Should be fixed by 123'), it is still a manual process to comment out the pending and re-run the spec to check it has been fixed. This means it invariably gets forgotten on occasion.\nOther times the cause isn't known at the time, or there's no issue in the backlog yet, so the spec gets set to pending without and argument and forgotten about.\nBoth of these mean we have an ever increasing number of pending specs for our project which I would like an easier way to tackle.", "createdAt": "2018-02-23T15:16:55Z", "updatedAt": "2019-05-19T16:44:43Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "chris-orchard", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "chris-orchard", "company": null}, {"login": "henrahmagix", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 10, "comments_data": [{"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-03-14T14:33:39Z", "contents": "I too would like this! Rspec is an example of a test runner that does this (by default), and I love it: it succeeds if pending tests fail, but it fails if pending tests pass, which means you'll never forget about pending tests that end up passing.\nExample\n\nwrite a failing test (unimplemented in code)\nmark as pending('unimplemented')\n\nreporter shows test as pending and passes (current usage)\n\n\nwrite code to implement the test\n\nreporter shows test as pending and fails (new change)\n\n\nremove pending\n\nreporter passes\n\n\n\nOn top of that, I think reporting the failure of the pending test is useful to see, even though the runner passes.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "chris-orchard", "authorAssociation": "NONE", "createdAt": "2018-03-14T14:55:32Z", "contents": "@henrahmagix That sounds good but how does Rspec cope with tests that have been marked as pending because they fail intermittently? We have some we've marked pending until we can investigate and make them stable. But with Rspec's approach every time they happen to pass the suite would be failed (due to pending tests now passing).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-03-14T15:04:15Z", "contents": "fail intermittently\n\nRspec's approach doesn't allow for that. I have a few intermittent failures \u2013 ~5% of the time \u2013 so I just restart the build and hope that it doesn't fail again =D (Of course I also file a bug to investigate in the future why those failures are intermittent and make them stable).\nHonestly, I don't think a test runner should consider dealing with intermittent tests. It should expect all tests to be stable.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-15T00:38:53Z", "contents": "Currently Jasmine's pending is more like RSpecs skip than anything else. At some point I'd like to get to the point where Jasmine has both skip and pending mechanisms, with a possible first step being allowing pending to also take a function and only doing the fail on success mechanic when that is used. This would let a user opt-in to this behavior and allow us to make that be the default behavior in a future major release.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "chris-orchard", "authorAssociation": "NONE", "createdAt": "2018-03-15T09:26:11Z", "contents": "@slackersoft that sounds like a good starting point to allow running pending specs.\nHow about my other suggestion of adding a pending tab to the html report to view all of them together?\n\nAt a minimum I believe a Pending 'tab' on the html reporter which listed all pending specs in one place would be useful:\nSpec List | Failures | Pending\n\nThat sounds like it should be straightforward. If so I'd be happy to have a go at that.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "henrahmagix", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-03-15T09:29:25Z", "contents": "@slackersoft Sounds great! What about also including a config option so users don't have to rewrite all their pending to pass functions? It would satisfy @chris-orchard's requirement:\n\nIt would be helpful to have a way to force all specs marked as pending to be run, to easily check if they are now passing without having to go to the corresponding code and take off the pending marker.\n\nI'm quite keen to give this a go so I'll see what I can come up with over the weekend =)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-22T00:47:44Z", "contents": "I'd be happy to review a pull request that adds a \"Pending\" tab to the HtmlReporter, including a bit better method to display the message/reason for the pendingness.\nI'd also be happy to review a pull request that either added a skip function or allowed pending to take a function and fail the test when the function doesn't have any failing expectations.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-09T07:35:05Z", "contents": "Just noting here the potential interaction between this request and #1579 - this change basically means Jasmine will always be \"stealth running\" pending tests, whereas the other issue is relying on behavior that does not run code in the unit test if it's pending (with the appropriate flags on).\nIt sounds to me like maybe there's a breaking change, where today's pending implementation should just become skip (which always exits the test when called), and then pending becomes a marker only -- the test will always run, but failures will be ignored.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-10T00:17:49Z", "contents": "Even the current pending implementation isn't a great fit for what we would want a skip to do. It currently only stops execution of the current function, but continues to run others unless oneFailurePerSpec is set. I would expect a skip inside a beforeEach to skip out of the rest of the spec, where a current pending will run further beforeEach, it, and afterEach. I would definitely like to see such a skip function come into Jasmine at some point.\nThe conversion process might look something like what RSpec for ruby did some time ago where pending starts to expect to receive a function that will be executed and allow failures, but will first work as normal but show a deprecation message.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-19T16:44:43Z", "contents": "I am slicing off #1709 to represent the \"add skip to jasmine\" work.  In my opinion, we probably want that to exist before we begin changing the behavior of pending, because today I often use pending to mark code that is not safe to run.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1518, "url": "https://github.com/jasmine/jasmine/issues/1518", "title": "How can I run \"done\" multiple times?", "contents": "I want to run a test if an async function was executed multiple times, how can I implement the test case?\nFor example: while emitting the \"x\" event, I hope the handler function would be executed twice, and then to execute the done function.\nit( 'should be executed twice', done => {\n    const handler = () => done();\n    em.on( 'x', handler );\n   em.emit( 'x' );\n} );", "createdAt": "2018-02-24T00:49:15Z", "updatedAt": "2018-02-26T19:31:51Z", "closedAt": "2018-02-26T19:31:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "LvChengbin", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "LvChengbin", "company": "NS"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-26T19:31:51Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1519, "url": "https://github.com/jasmine/jasmine/issues/1519", "title": "Jasmine does not handles exception in static instances", "contents": "Hi!\nI don't know if the title is correct... but here's my case.\nI'm using Typescript by the way...\nI have a class with static members of it's own class... Here's the code:\nexport class StaticClass {\n\tpublic static readonly instance: StaticClass = new StaticClass();\n\n\tconstructor() {\n\t\tthrow new Error('Static class error');\n\t}\n}\n\nHere's my test\nimport { StaticClass } from './static-class';\n\ndescribe('test static instance class', () => {\n\tit('should works', () => {\n\t\texpect(StaticClass.instance).toBeDefined();\n\t});\n});\n\n\nHere's my jasmine.json\n{\n\t\"spec_dir\": \"dist\",\n\t\"spec_files\": [\n\t\t\"**/*[sS]pec.js\"\n\t],\n\t\"stopSpecOnExpectationFailure\": false\n}\n\nIt's obvious that the test should fail, the constructor throws an exception. But when I run this test, Jasmine outputs nothing.\nMBA:test-jasmine vincent$ ./node_modules/.bin/jasmine --config=jasmine.json\nMBA:test-jasmine vincent$ \n\nAS soon as I remove the Error, it works.\nMBA:test-jasmine vincent$ ./node_modules/.bin/jasmine --config=jasmine.json\nRandomized with seed 90625\nStarted\n.\n\n\n1 spec, 0 failures\nFinished in 0.013 seconds\nRandomized with seed 90625 (jasmine --random=true --seed=90625)\n\nShould'nt Jasmine outputs something in this case, instead of... nothing? It's maybe a lower-level problem, but it took me quite a while to analyse what was doing on.\nThanks\nVB", "createdAt": "2018-02-25T16:34:56Z", "updatedAt": "2018-02-27T00:49:01Z", "closedAt": "2018-02-27T00:49:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vIceBerg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "vIceBerg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-27T00:32:57Z", "contents": "Load time errors are not being reported correctly in Jasmine 3.0, but we've got a fix in the works. The difference you're seeing is because the static instance is most likely constructed when the file is required and not when the test is actually run, so the error you're looking for will never show up in your spec, unless you were to lazily construct the instance object.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1520, "url": "https://github.com/jasmine/jasmine/issues/1520", "title": "jasmine-core NPM package has 2.99.1 instead of 3.0.0 under latest tag", "contents": "Run npm info jasmine-core dist-tags to investigate package metadata. It will say that latest is 2.99.1, but there is version 3.0.0 published! Also jasmine package returns 3.0.0 as latest: npm info jasmine dist-tags.\nBecause of this NPM will install jasmine-core@2.99.1 when version is omitted and npm outdated won't report that new version is available.\nExpected Behavior\n\n\n$ npm info jasmine-core dist-tags\n{ latest: '3.0.0' }\n\nCurrent Behavior\n\n\n$ npm info jasmine-core dist-tags\n{ latest: '2.99.1' }\n\nPossible Solution\n\n\nMaintainers change latest tag to point to 3.0.0 \ud83d\ude04", "createdAt": "2018-02-26T14:59:38Z", "updatedAt": "2018-02-26T18:23:27Z", "closedAt": "2018-02-26T18:23:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "devoto13", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "devoto13", "company": "Softwerk AB"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-02-26T18:23:27Z", "contents": "This should be fixed now. It looks like NPM just assumes that the most recently released (by date) version of a package it the one that should be installed as latest, and it doesn't look at the actual version numbers at all. Since we patched 2.99 with a 2.99.1 after 3.0 was released, NPM thought that would be better.\n$ npm info jasmine-core dist-tags\n{ latest: '3.0.0' }\n\nThanks for reporting this, and thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["HOORAY"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1522, "url": "https://github.com/jasmine/jasmine/issues/1522", "title": "Async custom reporter hook not working", "contents": "I'm using the following packages with TypeScript 2.7.2:\n\"jasmine-core\": \"^3.1.0\",\n\"jasmine-reporters\": \"^2.3.0\",\n\"jasmine-spec-reporter\": \"^4.2.0\",\nThis is a chunk of code for testing:\nimport CustomReporter = jasmine.CustomReporter;\n\nexport const TestReporter: CustomReporter = {\n    async specDone(result) {\n        console.log('Spec Done started');\n        await setTimeout(() => console.log('Time out....'), 5000);\n        console.log('Spec Done finished');\n    }\n};\n\njasmine.getEnv().addReporter(TestReporter);\n\ndescribe('Test reporter.', () => {\n    it(`Successful Test`, async () => {\n        expect(true).toBeTruthy();\n    });\n});\nThis won't asynchronously wait for timeout and won't print 'Time out....'.\nAlso in the issue #1509 (Closed) you advised to return a Promise, but all functions in TS typing for custom reporter are void:\ninterface CustomReporter {\n        jasmineStarted?(suiteInfo: SuiteInfo): void;\n        suiteStarted?(result: CustomReporterResult): void;\n        specStarted?(result: CustomReporterResult): void;\n        specDone?(result: CustomReporterResult): void;\n        suiteDone?(result: CustomReporterResult): void;\n        jasmineDone?(runDetails: RunDetails): void;\n    }\nPlease advise.", "createdAt": "2018-03-06T11:38:18Z", "updatedAt": "2018-12-13T10:44:59Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "brainroma", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "brainroma", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "JohannesRudolph", "company": "@Meshcloud "}, {"login": "cnishina", "company": "@Google"}, {"login": "sgravrock", "company": null}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-07T01:09:04Z", "contents": "What output are you seeing from your example? This will help diagnose the problems you're seeing.\nAdditionally, I don't think that setTimeout actually returns a Promise that would make it awaitable, so control flow won't actually break.\nAs for returning a Promise, the Jasmine team doesn't actually maintain any typings for jasmine-core, so it is possible that wherever you're getting these typings from simply hasn't updated the reporter typings for Jasmine 3.0.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brainroma", "authorAssociation": "NONE", "createdAt": "2018-03-07T12:57:28Z", "contents": "It won't wait and won't print 'Time out....', the output I see is:\nSpec Done started\nSpec Done finished\nI have updated the code with the following:\nimport CustomReporter = jasmine.CustomReporter;\n\nexport function delay(): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(console.log('Time out....')), 5000);\n    });\n}\n\nexport const TestReporter: CustomReporter = {\n    async specDone(result) {\n        console.log('SPEC DONE started');\n        await delay();\n        console.log('SPEC DONE finished');\n    }\n};\n\njasmine.getEnv().addReporter(TestReporter);\n\ndescribe('Test reporter.', () => {\n    it(`Successful Test`, async () => {\n        expect(true).toBeTruthy();\n    });\n});\nThis won't wait and won't print 'Time out....' and 'SPEC DONE finished'. The output I see is:\nSPEC DONE started", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-15T00:30:16Z", "contents": "It looks like this is probably an issue with the typings that you're using to work with Jasmine. When I convert to ES5 like this, all three versions of async specDone work correctly.\n(function() {\n  var setTimeout = window.setTimeout;\n\n  function delay() {\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        resolve(console.log('Time out...'));\n      }, 3000);\n    });\n  }\n\n  function MyReporter() {\n    this.specDone = async function(result) {\n      console.log('SPEC DONE started');\n      await delay();\n      console.log('SPEC DONE finished');\n    };\n\n    // this.specDone = function(result) {\n      // console.log('SPEC DONE started');\n      // return delay();\n    // };\n\n    // this.specDone = function(result, done) {\n      // console.log('SPEC DONE started');\n      // setTimeout(function() {\n        // console.log('Time out...');\n        // done();\n      // }, 3000);\n    // };\n  }\n\n  jasmine.getEnv().addReporter(new MyReporter());\n})();\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JohannesRudolph", "authorAssociation": "NONE", "createdAt": "2018-03-25T19:58:28Z", "contents": "@slackersoft I tried the reporter code above in my typescript project and all I see logged is:\n  Outer describe\n    \u2713 spec A\nSPEC DONE started\n    \u2713 spec B\nSPEC DONE started\n\n    inner describe\n      \u2713 spec C\nSPEC DONE started\n      \u2713 spec D\nSPEC DONE started\n\nExecuted 4 of 4 specs SUCCESS in 0.051 sec.\n\nbut never a SPEC DONE finished. Is there a sample test for async reporters in jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "JohannesRudolph", "authorAssociation": "NONE", "createdAt": "2018-03-25T20:12:34Z", "contents": ".... figured it out. I was using jasmine-ts which has got its own dependency on jasmine and that was still on v2.8.6. I'm using yarn, so I could use this in my package.json to force use of 3.1:\n  \"resolutions\": {\n    \"jasmine\": \"3.1.0\"\n  }\nI assume that trick may also help @brainroma. Async callbacks work fine for me now.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "brainroma", "authorAssociation": "NONE", "createdAt": "2018-03-26T15:35:29Z", "contents": "I'm using \"types/jasmine\": \"^2.8.6\",\nAlso probably it is worth mentioning that I'm running tests using protractor", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-28T00:24:58Z", "contents": "Protractor is still locked to Jasmine 2.8.0, so it isn't going to load Jasmine 3.0.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cnishina", "authorAssociation": "NONE", "createdAt": "2018-12-13T10:44:59Z", "contents": "^^^ you have a Protractor tag! Awesome! \ud83d\udc4d", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": ["Protractor"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1523, "url": "https://github.com/jasmine/jasmine/issues/1523", "title": "Tests breaks after upgrading jasmine-core from 2.99.0 to 3.1.0", "contents": "Expected Behavior\n\n\nI'm running Angular 5 test cases with karma/jasmine. The test should succeed but fails.\nCan't really tell which package is responsible for the actual bug. But he bug occurred after upgrading jasmine-core from 2.99.0 -> 3.1.0. If you think this bug is related to Karma or any other package, please tell so and feel free to close it.\nCurrent Behavior\n\n\nI have an Angular 5 project running karma/jasmine. Unfortunately the tests stopped working after upgrading from 2.99.0 to 3.1.0 with this ambiguous error.\nChrome 64.0.3282 (Windows 10.0.0) ERROR\n  {\n    \"message\": \"An error was thrown in afterAll\\n[object ErrorEvent]\",\n    \"str\": \"An error was thrown in afterAll\\n[object ErrorEvent]\"\n  }\nChrome 64.0.3282 (Windows 10.0.0): Executed 1 of 1 ERROR (0 secs / 0 secs)\nChrome 64.0.3282 (Windows 10.0.0) ERROR\n  {\n    \"message\": \"An error was thrown in afterAll\\n[object ErrorEvent]\",\n    \"str\": \"An error was thrown in afterAll\\n[object ErrorEvent]\"\nChrome 64.0.3282 (Windows 10.0.0): Executed 1 of 1 ERROR (0.187 secs / 0 secs)\n\nPossible Solution\n\n\nNone. I'm happy to help debugging the issue. But my knowledge of karma/jasmine is to limited to do without assistance.\nSuite that reproduces the behavior (for bugs)\n\nimport { async, TestBed } from '@angular/core/testing';\nimport { StartComponent } from './start.component';\ndescribe('StartComponent', () => {\n    beforeEach(async(() => {\n        TestBed.configureTestingModule({\n            declarations: [\n                StartComponent\n            ],\n        }).compileComponents();\n    }));\n    it('should create the app', async(() => {\n        const fixture = TestBed.createComponent(StartComponent);\n        const app = fixture.debugElement.componentInstance;\n        expect(app).toBeTruthy();\n    }));\n});\nYour Environment\n\n\nVersion used: 3.1.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 64, Node 8.9.4,\nOperating System and version (desktop or mobile): Dekstop\n\n{\n\"devDependencies\": {\n    \"@angular/cli\": \"6.0.0-beta.4\",\n    \"@angular/compiler-cli\": \"6.0.0-beta.6\",\n    \"@types/jasmine\": \"2.8.6\",\n    \"@types/jasminewd2\": \"2.0.3\",\n    \"@types/node\": \"8.0.19\",\n    \"@types/webpack\": \"3.8.8\",\n    \"awesome-typescript-loader\": \"3.5.0\",\n    \"css-loader\": \"0.28.10\",\n    \"extract-text-webpack-plugin\": \"4.0.0-beta.0\",\n    \"html-loader\": \"0.5.5\",\n    \"html-webpack-plugin\": \"^3.0.4\",\n    \"husky\": \"0.14.3\",\n    \"jasmine-core\": \"^2.99.0\",\n    \"jasmine-spec-reporter\": \"4.2.1\",\n    \"karma\": \"2.0.0\",\n    \"karma-chrome-launcher\": \"2.2.0\",\n    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n    \"karma-jasmine\": \"1.1.1\",\n    \"karma-jasmine-html-reporter\": \"0.2.2\",\n    \"less\": \"3.0.1\",\n    \"less-loader\": \"4.0.6\",\n    \"postcss\": \"6.0.19\",\n    \"postcss-cssnext\": \"3.1.0\",\n    \"postcss-easy-import\": \"3.0.0\",\n    \"postcss-load-plugins\": \"2.3.0\",\n    \"postcss-loader\": \"2.1.1\",\n    \"protractor\": \"^5.3.0\",\n    \"puppeteer\": \"1.1.1\",\n    \"serve\": \"6.5.1\",\n    \"style-loader\": \"0.20.2\",\n    \"to-string-loader\": \"1.1.5\",\n    \"ts-node\": \"5.0.1\",\n    \"tslint\": \"5.9.1\",\n    \"tslint-config-standard\": \"7.0.0\",\n    \"tslint-eslint-rules\": \"5.1.0\",\n    \"typescript\": \"2.6.2\",\n    \"uglifyjs-webpack-plugin\": \"1.2.2\",\n    \"webpack\": \"4.1.0\",\n    \"webpack-cli\": \"^2.0.10\",\n    \"webpack-dev-server\": \"3.1.0\",\n    \"write-file-webpack-plugin\": \"4.2.0\"\n  },\n  \"dependencies\": {\n    \"@angular/animations\": \"6.0.0-beta.6\",\n    \"@angular/common\": \"6.0.0-beta.6\",\n    \"@angular/compiler\": \"6.0.0-beta.6\",\n    \"@angular/core\": \"6.0.0-beta.6\",\n    \"@angular/forms\": \"6.0.0-beta.6\",\n    \"@angular/http\": \"6.0.0-beta.6\",\n    \"@angular/language-service\": \"6.0.0-beta.6\",\n    \"@angular/platform-browser\": \"6.0.0-beta.6\",\n    \"@angular/platform-browser-dynamic\": \"6.0.0-beta.6\",\n    \"@angular/router\": \"5.2.7\",\n    \"angular\": \"1.6.9\",\n    \"core-js\": \"2.5.3\",\n    \"rxjs\": \"5.5.6\",\n    \"zone.js\": \"0.8.20\"\n  }\n}", "createdAt": "2018-03-06T15:02:34Z", "updatedAt": "2019-01-07T23:07:14Z", "closedAt": "2018-08-02T00:48:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "JonWallsten", "authorAssociation": "NONE", "participants_count": 15, "participants_data": [{"login": "JonWallsten", "company": "Jon Wallsten Web Consulting AB"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rmsmq", "company": null}, {"login": "borriej", "company": "Freelance Angular Front-end"}, {"login": "kloasn", "company": null}, {"login": "sgravrock", "company": null}, {"login": "ddubson", "company": "@pivotal "}, {"login": "harpcio", "company": "F.H.U. Studioars"}, {"login": "sopretty", "company": null}, {"login": "ilancohen", "company": null}, {"login": "fabiendv", "company": "@daskeyboard "}, {"login": "plakhtiin", "company": null}, {"login": "jahller", "company": "ottonova AG"}, {"login": "Ruluk", "company": "Euphoric Vortex"}, {"login": "tapaz1", "company": "@infusion-code "}], "comments_count": 22, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-10T01:44:43Z", "contents": "I submitted a pull request (karma-runner/karma-jasmine#192) to karma-jasmine a few weeks ago to add support for Jasmine 3.x, but it hasn't seen attention from the maintainers there. We changed some of the mechanisms for reporting some errors in 3.0, so it might be related to that.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 10, "reactions_data": ["HEART", "HEART", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "JonWallsten", "authorAssociation": "NONE", "createdAt": "2018-03-12T06:44:27Z", "contents": "@slackersoft Ah,I see! I saw you finally got a reply there a couple of days back.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rmsmq", "authorAssociation": "NONE", "createdAt": "2018-04-04T23:29:15Z", "contents": "I am also having this issue. Are we essentially waiting for @slackersoft changes to be released in karma-jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-05T00:10:17Z", "contents": "Until there's a new karma-jasmine version that supports some of the new features in Jasmine 3.0, there's not much for us to look into here. I'm keeping this issue open in case there are some other issues that aren't resolved by updating karma-jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "borriej", "authorAssociation": "NONE", "createdAt": "2018-05-16T08:54:12Z", "contents": "Im also getting this issue when running npm test :(\nall the unit test code in the *.spec files have been commented out for debug purpose...\nand I get this:\n\n 10% building modules 1/1 modules 0 active16 05 2018 10:47:23.649:WARN [karma]: No captured browser, open http://localhost:9876/\n16 05 2018 10:47:23.660:INFO [karma]: Karma v2.0.2 server started at http://0.0.0.0:9876/\n16 05 2018 10:47:23.661:INFO [launcher]: Launching browser Chrome with unlimited concurrency\n16 05 2018 10:47:23.668:INFO [launcher]: Starting browser Chrome\n16 05 2018 10:47:30.338:WARN [karma]: No captured browser, open http://localhost:9876/  \n16 05 2018 10:47:30.496:INFO [Chrome 66.0.3359 (Mac OS X 10.13.4)]: Connected on socket 4yMxIms1uAC0jI69AAAA with id 45005496\nChrome 66.0.3359 (Mac OS X 10.13.4) ERROR\n  {\n    \"message\": \"An error was thrown in afterAll\\n[object ErrorEvent]\",\n    \"str\": \"An error was thrown in afterAll\\n[object ErrorEvent]\"\n  }\nChrome 66.0.3359 (Mac OS X 10.13.4): Executed 0 of 0 ERROR (0 secs / 0 secs)\nChrome 66.0.3359 (Mac OS X 10.13.4) ERROR\n  {\n    \"message\": \"An error was thrown in afterAll\\n[object ErrorEvent]\",\n    \"str\": \"An error was thrown in afterAll\\n[object ErrorEvent]\"\nChrome 66.0.3359 (Mac OS X 10.13.4): Executed 0 of 0 ERROR (0.013 secs / 0 secs)\n^C\nMacBook-Pro:fe user$ \n\n\npackage.json\n{\n  \"name\": \"project\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve --host 0.0.0.0 --proxy-config proxy.conf.json\",\n    \"build\": \"ng build --prod --output-hashing none\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^5.0.0\",\n    \"@angular/common\": \"^5.0.0\",\n    \"@angular/compiler\": \"^5.0.0\",\n    \"@angular/core\": \"^5.0.0\",\n    \"@angular/forms\": \"^5.0.0\",\n    \"@angular/http\": \"^5.0.0\",\n    \"@angular/platform-browser\": \"^5.0.0\",\n    \"@angular/platform-browser-dynamic\": \"^5.0.0\",\n    \"@angular/router\": \"^5.0.0\",\n    \"@types/jasmine\": \"^2.8.7\",\n    \"bootstrap\": \"^4.1.1\",\n    \"core-js\": \"^2.5.6\",\n    \"karma-jasmine\": \"^1.1.2\",\n    \"keycloak-js\": \"3.4.3\",\n    \"lodash\": \"^4.17.10\",\n    \"ng2-slim-loading-bar\": \"^4.0.0\",\n    \"ng2-toastr\": \"^4.1.2\",\n    \"ngx-bootstrap\": \"^2.0.5\",\n    \"protractor\": \"^5.3.2\",\n    \"rxjs\": \"^5.5.2\",\n    \"svgxuse\": \"^1.2.6\",\n    \"zone.js\": \"^0.8.14\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"1.7.2\",\n    \"@angular/compiler-cli\": \"^5.0.0\",\n    \"@angular/language-service\": \"^5.0.0\",\n    \"@types/jasmine\": \"~2.8.6\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"@types/node\": \"~9.4.6\",\n    \"codelyzer\": \"^4.3.0\",\n    \"jasmine-core\": \"^3.1.0\",\n    \"jasmine-spec-reporter\": \"^4.2.1\",\n    \"karma\": \"^2.0.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-cli\": \"^1.0.1\",\n    \"karma-coverage-istanbul-reporter\": \"^1.2.1\",\n    \"karma-jasmine\": \"^1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"protractor\": \"^5.3.0\",\n    \"ts-node\": \"~5.0.1\",\n    \"tslint\": \"^5.10.0\",\n    \"typescript\": \"^2.8.3\"\n  }\n}\n\nwhat do we need to do?\nWhen i downgrade to jasmine-core: \"^2.9.0\" the tests do run", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kloasn", "authorAssociation": "NONE", "createdAt": "2018-05-16T09:21:34Z", "contents": "Since the error message is rather obscure I don't know if it helps here, but what helped in my case was removing test.js from the files section in karma,conf.js.\nAfter also moving karma.conf.js to the /src folder and changing the path to this file in angular.json I got it to work with jasmine 3.1.0. This is also how it gets generated if you do ng new.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-05-16T14:34:34Z", "contents": "@borriej The reporter interface changed in Jasmine 3.0, and several of the package versions you're using only work with the old interface. Right now it looks like you have two options. One is to stay on Jasmine 2.x for now. The other is to upgrade karma-jasmine and karma-jasmine-html-reporter and remove jasmine-spec-reporter, which hasn't been updated to work with Jasmine 3 yet.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ddubson", "authorAssociation": "NONE", "createdAt": "2018-06-04T01:19:22Z", "contents": "I ran into this issue as well, and the comment above led me to the fact that I did have a reporter configuration file in my tests directory. I excluded that file from the included test files that the browser loads (karma.conf.js -> exclude: [...], and the issue is no more. Running with Jasmine 3.1.0", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-05T00:23:29Z", "contents": "The newest version of Karma-Jasmine includes support for Jasmine 3.x and the new reporter interface. You should look at updating that as well if you're using Karma already. If you have a custom reporter that is having issues, take a look at the 3.0 release notes for a bit more information on what changed in the reporting structure.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "harpcio", "authorAssociation": "NONE", "createdAt": "2018-06-28T22:09:26Z", "contents": "My problem was caused by using \"this.router.navigate(['/login']);\" in ngOnInit method in completely other component.\nIn your tests you need to specify:\n                RouterTestingModule.withRoutes([\n                    { path: 'login', component: LoginComponent }\n                ]),\n\nand put this formula into \"imports\", and also \"LoginComponent\" into \"declarations\".", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "sopretty", "authorAssociation": "NONE", "createdAt": "2018-07-11T08:27:35Z", "contents": "I had the same issue with a library project with angular 6. And I fixed it with polyfills inside the karma.conf file of my project.\nYou maybe need to add this two lines :\nimport 'core-js/es7/reflect';\nimport 'zone.js/dist/zone';", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ilancohen", "authorAssociation": "NONE", "createdAt": "2018-07-23T07:48:07Z", "contents": "@sopretty - which polyfills did you use?\nAnd/or where did you add those two lines? In test.ts? I tried that, and the tests simply didn't run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sopretty", "authorAssociation": "NONE", "createdAt": "2018-07-23T10:39:10Z", "contents": "@ilancohen\nI changed few things :\n\nthe angular.json of the project.\nFor each libraries, I set up my test environment :\n\n[...]\n     \"test\": {\n                    \"builder\": \"@angular-devkit/build-angular:karma\",\n                    \"options\": {\n                        \"polyfills\": \"projects/my-lib/src/polyfills.ts\",\n                        \"main\": \"projects/my-lib/src/test.ts\",\n                        \"tsConfig\": \"projects/my-lib/tsconfig.spec.json\",\n                        \"karmaConfig\": \"projects/my-lib/karma.conf.js\"\n                    }\n                },\n[...]\n\n\ntsconfig.spec.json of a specific project :\n\n{\n    \"extends\": \"../../tsconfig.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"../../out-tsc/spec\",\n        \"types\": [\n            \"jasmine\",\n            \"node\"\n        ]\n    },\n    \"files\": [\n        \"src/test.ts\",\n        \"src/polyfills.ts\"\n    ],\n    \"include\": [\n        \"**/*.spec.ts\",\n        \"**/*.d.ts\"\n    ]\n}\n\n\npolyfills.ts of a specific project :\nI added this two lines to all polyfills I need to import.\n\nimport 'core-js/es7/reflect';\nimport 'zone.js/dist/zone';", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-02T00:48:39Z", "contents": "It sounds like this issue has been resolved and the remaining points are configuration of the upgrade of Karma/Angular with the new versions of Jasmine. I'm going to close this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fabiendv", "authorAssociation": "NONE", "createdAt": "2018-08-27T16:31:42Z", "contents": "I have still the same error even if I made some changes.\nChrome 68.0.3440 (Linux 0.0.0) ERROR\n  {\n    \"message\": \"An error was thrown in afterAll\\nUncaught TypeError: env.hideDisabled is not a function\",\n    \"str\": \"An error was thrown in afterAll\\nUncaught TypeError: env.hideDisabled is not a function\"\n\nEvery packages are updated, I don't understand", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "plakhtiin", "authorAssociation": "NONE", "createdAt": "2018-08-28T07:15:00Z", "contents": "@F-DALLA-VALLE Do you have some external scripts into your index.html? I think problem can be there.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fabiendv", "authorAssociation": "NONE", "createdAt": "2018-08-28T13:34:44Z", "contents": "I uninstalled and installed every packages, and it's working now.\nThank for your help,", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fabiendv", "authorAssociation": "NONE", "createdAt": "2018-08-29T15:49:16Z", "contents": "It happened again,\nI do not have external scripts in my index.html\nSometimes it works (when I launch my ng command), I don't understand why.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fabiendv", "authorAssociation": "NONE", "createdAt": "2018-08-29T15:59:12Z", "contents": "There was just a dependencies issues in my package.json\nI updated everything, (jasma core , karma , ... ) , It's working now.\nSorry about that, thanks for your help", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "jahller", "authorAssociation": "NONE", "createdAt": "2018-09-10T14:52:09Z", "contents": "To whom it may concern, we had a similar issue:\nChrome 70.0.3508 (Mac OS X 10.13.6) ERROR\n  {\n    \"message\": \"An error was thrown in afterAll\\n[object ErrorEvent]\",\n    \"str\": \"An error was thrown in afterAll\\n[object ErrorEvent]\"\n  }\n\nproblem was a test failing silently, which was ultimately found out by running Chrome with singleRun=false and checking the reports in the Jasmine UI.", "reactions_count": 7, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP"]}, {"authorLogin": "Ruluk", "authorAssociation": "NONE", "createdAt": "2018-10-16T22:34:54Z", "contents": "I see that same error message from @jahller. I've noticed it is somehow related to concurrency, because it does not happen in the same tests, every now and then all tests manage to pass, and the more tests, the more often it happens.\nI've also noticed that when trying multiple browsers, IE breaks the most, almost always.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "tapaz1", "authorAssociation": "NONE", "createdAt": "2019-01-07T23:07:14Z", "contents": "For those still having this issue I would suggest the following since most of the proposed answers here didn't resolve the problem our team was facing.\n\nRun your tests and enable watch (i.e. watch=true) if disabled, and remove the \"headless\" flag (if included in your karma.conf.js file) if you are using it (you'll need to see the console in the browser).\n\nSomeone suggested to look in the console for errors in a related post in stack overflow and I cannot stress enough how simple and helpful this is.\nThe issue for our team was that we are using a directive in a dummy component in our spec file, but the dummy component was missing the id for the resizeHandle in the directive, which is used to create an observable stream of mouse events (see below)\nexport class ResizableDirective implements AfterViewInit, OnDestroy {\n @Input('attr.resize-handle') private resizeHandle;\nprivate mouseUp$: Observable<MouseEvent | Event>;\nprivate mouseDown$: Observable<any>;\nprivate mouseMove$: Observable<MouseEvent | Event>;\nprivate subscription: Subscription;\nconstructor(\n@Inject(DOCUMENT) private document,\nprivate element: ElementRef,\nprivate renderer: Renderer2\n) { }\n ngAfterViewInit() {\nthis.mouseMove$ = fromEvent(this.document, 'mousemove');\n this.mouseUp$ = fromEvent(this.document, 'mouseup');\n this.mouseDown$ = fromEvent(this.resizeHandle, 'mousedown')\n .map((event: MouseEvent) => {\nevent.stopPropagation();\nconst offset = this.calculateOffset(event);\nreturn this.mouseMove$.map((moveEvent: MouseEvent) => {\nmoveEvent.stopPropagation();\nmoveEvent.preventDefault();\n return this.calculatePosition(offset, moveEvent);\n })\n .takeUntil(this.mouseUp$);\n })\n .flatMap(_ => _);\n }\n }\nThe bold code above wound up throwing this error \u21d3\n { \"message\": \"An error was thrown in afterAll\\n[object ErrorEvent]\", \"str\": \"An error was thrown in afterAll\\n[object ErrorEvent]\" }\nSo, the most logical and helpful answer is to look at the console in the browser because it will give you hints with the trace and call stack as to what could possibly be going wrong. Fixing the dummy component to include the \"resizeHandle\" fixed it being undefined and throwing the silent error, which was visible in the browser.\nAlso, it looks like as of v2.0.0  karma-jasmine fixes the obscure error thrown and possibly bubbles up a more useful error for those using an older version of karma-jasmine (like we were).\nHope this helps others find a path to resolving this error!\nCheers \ud83c\udf7a", "reactions_count": 9, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "HEART", "THUMBS_UP", "THUMBS_UP", "HEART"]}], "reactions_count": 34, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["Karma"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1524, "url": "https://github.com/jasmine/jasmine/issues/1524", "title": "beforeAll not working as expected (version 3.1)", "contents": "could be because this option?", "createdAt": "2018-03-07T10:19:46Z", "updatedAt": "2018-03-10T01:38:48Z", "closedAt": "2018-03-10T01:38:48Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "andrew-vdb", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "andrew-vdb", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-10T01:38:48Z", "contents": "Jasmine 3.0 changes the default run order to be randomized, so if you have specs that rely on being run in a specific order, you'll need to either make sure you explicitly turn off the randomization, or fix your tests so they don't depend on each other.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1525, "url": "https://github.com/jasmine/jasmine/issues/1525", "title": "Disable empty tests", "contents": "Hello,\nCan we have an option (or maybe make it as default behavior) that empty tests which look like\nit('should do smth', () => {})\n\nwill be failed or at least provide some warnings. This's extremely important if you testing some async actions.", "createdAt": "2018-03-09T16:10:22Z", "updatedAt": "2018-03-15T00:32:47Z", "closedAt": "2018-03-10T01:33:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fetis", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "fetis", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-10T01:33:54Z", "contents": "This is a similar problem to detecting a spec which doesn't include any calls to expect. There are some situations where a user might feel that an expectation is superfluous (maybe the code under test throws), so we don't want this to cause an the spec to fail. This use case is the reason why reporters are told the number of passed and failed expectations for a spec, so they can tell if none were evaluated. If you're using Jasmine's HTMLReporter, you should see the specs show yellow with a big message and a warning in the console for all specs that don't have any expectations.\nI don't think we're likely to be making any changes to this functionality, so I'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fetis", "authorAssociation": "NONE", "createdAt": "2018-03-12T12:14:25Z", "contents": "@slackersoft Are you speaking about Karma Jasmine reporter? I don't use it. But so far, I haven't seen any warnings about empty tests from other reporters. Only total number of failed/successful specs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-13T00:25:12Z", "contents": "If you're using Karma, I'm afraid it covers up some of the built-in functionality of Jasmine including the default HTMLReporter. The reporter and example of no expectations error looks like this:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fetis", "authorAssociation": "NONE", "createdAt": "2018-03-13T07:54:31Z", "contents": "My stack is more complex. It's Angular CLI project with 2 testing frameworks: Karma and Angular CLI itself and Jasmine as underlaying unit-testing library. It's standard setup for Angular CLI projects.\nIf you provide the number of expectations via API, I could try to pull it on top level and do corresponding checks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-15T00:32:47Z", "contents": "@fetis take a look at the spec result object for details on what is sent to a reporter.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1526, "url": "https://github.com/jasmine/jasmine/issues/1526", "title": "StackTrace component truncating error messages from certain stack traces", "contents": "Since Jasmine 3.0.0, the StackTrace component strips all but the first line of certain error messages that come from the raw browser trace. When running in Chrome, this affects AngularJS exceptions that can be multi-line.\nI made a plunker to illustrate the issue with an AngularJS exception - see https://embed.plnkr.co/3qtge9FUP0PCIlu2jB9m/. This plunker boots Jasmine with a custom reporter, and runs a simple Angular app. The output in the gray box comes from the strackTrace object passed into specDone reporter method - the gray box is showing the message and stack properties. You can see the full error is only included in the message, but is stripped from the stack.\nI was able to confirm the issue began with this commit: 5906a2c. The issue is not present in Jasmine 2.99.x.\nThanks!\nExpected Behavior\nTo be able to view the full multi-line error message, and the stack trace.\nCurrent Behavior\nCan only see the first line of the error message, and the stack trace.\nPossible Solution\nUpdate the StackTrace logic to handle this error format.\nContext\nThis of course makes it difficult to track debug issues. I'm using karma-jasmine specifically which outputs the stackTrace stack.\nYour Environment\n\nVersion used: Jasmine 3.0.0 +\nEnvironment name and version: Chrome 64\nOperating System and version: desktop", "createdAt": "2018-03-09T21:46:46Z", "updatedAt": "2018-08-09T18:23:00Z", "closedAt": "2018-03-10T20:05:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rmunch", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "rmunch", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}, {"login": "jaimemarijke", "company": null}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-10T01:27:33Z", "contents": "I'm not sure I fully understand the differences you're seeing between what you expect and what you're getting. Can you show an example Error with message and stack, then what you're seeing reported for that error in 2.x and 3.x?\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rmunch", "authorAssociation": "NONE", "createdAt": "2018-03-10T03:24:48Z", "contents": "Hi @slackersoft - I forked the Plunker with a version that just sets the Jasmine version down to 2.99.0 so that they can be compared directly:\nJasmine 2.99.0 (works, can see additional lines from the Angular error): https://embed.plnkr.co/FPTovSMUsUz8UxCn94vH/\nJasmine 3.1.0 (only has the first line of the error):\nhttps://embed.plnkr.co/3qtge9FUP0PCIlu2jB9m/\nIn the spec, I'm manually throwing an error in the call to initialize a mock angular module just to get Angular to throw its exception.\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rmunch", "authorAssociation": "NONE", "createdAt": "2018-03-10T03:31:07Z", "contents": "Also if helpful, it looks like the logic that is truncating the error message is at https://github.com/jasmine/jasmine/blob/master/lib/jasmine-core/jasmine.js#L5747-L5748 - commenting out this block fixes my particular exception (though I'm sure breaks another format).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-03-10T16:12:39Z", "contents": "Thanks. That helps. The code in question is needed to correctly format stack traces across all browsers, some of which include the error message in the stack trace and some of which don't. But it looks like it needs to be a little smarter to correctly handle multi-line messages.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaimemarijke", "authorAssociation": "NONE", "createdAt": "2018-08-08T19:26:12Z", "contents": "@sgravrock do you have a timeline for when this fix will be published?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-09T02:01:54Z", "contents": "This fix is included in 3.2.0, which has just been released.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jaimemarijke", "authorAssociation": "NONE", "createdAt": "2018-08-09T18:23:00Z", "contents": "Wow, great timing, thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1528, "url": "https://github.com/jasmine/jasmine/issues/1528", "title": "Jamsine", "contents": "There is no directive with \"exportAs\" set to \"matButtonToggleGroup\"\n<mat-button-toggle-group (ngModelChange)=\"changeView($event)\" [ngModel]=\"currentView\" [ERROR ->]#group=\"matButtonToggleGroup\">\n<mat-button-toggle matTooltip=\"GanttChart\" value=\"ganttch\"): ng:///DynamicTestModule/ActionsComponent.html@2:94\nThere is no directive with \"exportAs\" set to \"bs-mdbPopover\" (\" \n    <span style=\"width:170px\" placement=\"bottom\" [ERROR ->]#pop1=\"bs-mdbPopover\" [mdbPopover]=\"popTemplate\" mdbRippleRadius class=\"changeFilter pull-right selec\"): ng:///DynamicTestModule/ActionsComponent.html@50:53\n\nThe pipe 'search' could not be found (\"pan>\n\n<li (click)=\"changeuser(user);pop1.hide()\" *ngFor='let [ERROR ->]user of auth.subordinates | search:{ string: filterText, type: \"user\" }' [class.active]=\"currentFilte\"): ng:///DynamicTestModule/ActionsComponent.html@117:71\nThe pipe 'search' could not be found (\" \n<li (click)=\"changeplan(invit.plan);pop1.hide()\" *ngFor='let i[ERROR ->]nvit of currentUserPlans  | search: { string: filterText, type: \"filter\" }' [class.active]=\"currentPl\"): ng:///DynamicTestModule/ActionsComponent.html@143:74", "createdAt": "2018-03-12T12:29:29Z", "updatedAt": "2018-03-12T14:38:27Z", "closedAt": "2018-03-12T14:38:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "smritiz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "smritiz", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-03-12T14:38:26Z", "contents": "This looks like an error message from an Angular application, not Jasmine. Assuming that it's your own code, you're probably better off asking for help on Stack Overflow or in an Angular forum. But note that you're more likely to get a helpful response if you include enough information for readers to understand the problem rather than just copying and pasting an error message.\nClosing as this doesn't appear to have anything to do with Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1529, "url": "https://github.com/jasmine/jasmine/issues/1529", "title": "Enumerating Specs after loading test file (broken in 3.x, worked in 2.9)", "contents": "I work on the Node Tools for Visual Studio and after the release of Jasmine 3.0 our ability to enumerate tests has broken. \ud83d\ude1e\nBefore 3.0 we were able to do the following to get a list of specs in a specific file, and communicate that back to VS to show in the test explorer.\nvar testList = [];\nvar jasmineInstance = // create instance\njasmineInstance.env.specFilter = (spec) => {\n   testList.push({\n       test: spec.getSpecName(spec),\n       // bunch more properties\n       });\n       return false; \n    };\njasmineInstance.addSpecFiles([testFile]);\njasmineInstance.loadSpecs();\nBut in 3.0 the specFilter function no longer seems to be called when loadSpecs is called.\nMy question is, is there a way to access the enumerated Specs before executing the tests? If there isn't what would be a logical place to make a change to implement this? (I wasn't able to find anything useful, but I only spend a little time spelunking through the code).", "createdAt": "2018-03-12T23:56:20Z", "updatedAt": "2018-03-13T00:22:45Z", "closedAt": "2018-03-13T00:22:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paulvanbrenk", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "paulvanbrenk", "company": "Microsoft"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-13T00:16:44Z", "contents": "You should be able to get the topSuite() from the env object and traverse the spec tree from there. This also leaves the specFilter available for determining which specs should run programmatically if you want.\nThe topSuite() function is also available in 2.x versions of Jasmine, with the same capabilities.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulvanbrenk", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-03-13T00:22:44Z", "contents": "Thanks!\nThat's a much cleaner solution.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1530, "url": "https://github.com/jasmine/jasmine/issues/1530", "title": "ES 7 Array.includes issue", "contents": "Expected Behavior\nShould not return error when using Array.includes(element)\nCurrent Behavior\nReturns following error\nTypeError: undefined is not a constructor (evaluating 'exclusions.includes(element) \nPossible Solution\nArray.includes() can be replaced with Array.indexOf > -1.\nSuite that reproduces the behavior (for bugs)\n\nTS\n  exclusionTest() {\n    return this.exclusions('Event').includes('id');\n  }\n\n  exclusions(eventType: string): string[] {\n    let defaultExclusions = ['id', 'pendStatus', 'accountId'];\n    return eventType === 'REMOVE' ? defaultExclusions : [...defaultExclusions, 'pendDeleteReason'];\n  }\nIn angular environment\ndescribe ('SomeComponent', () => {\n  let fixture: ComponentFixture<SomeComponent>;\n\n  beforeEach(() => {\n\n    TestBed.configureTestingModule({\n      providers: [\n        SomeComponent,\n      ]\n    });\n  });\n\n  it('should test includes', inject([SomeComponent],\n      (component: SomeComponent) => {\n        expect(component.exclusionTest()).toBeTruthy();\n    }));\n  });\n});\nContext\nI am trying to test if an Array has a particular element.\nSince there is an option to use indexOf, it does not affect as much. But with this issue, testing is dictating how i write my javascript code.\nYour Environment\n\nVersion used: jasmine@2.99.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome Version 64.0.3282.186 (Official Build) (64-bit)\nOperating System and version (desktop or mobile): Mac OS\nLink to your project: internal company project. Cannot link.", "createdAt": "2018-03-16T15:44:41Z", "updatedAt": "2019-05-23T19:47:53Z", "closedAt": "2018-03-21T15:57:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vsharma2266", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "vsharma2266", "company": null}, {"login": "sgravrock", "company": null}, {"login": "yanlucas99", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "vsharma2266", "authorAssociation": "NONE", "createdAt": "2018-03-16T16:30:15Z", "contents": "Doing more research, looks like none of the ES7 features are supported yet.\nLike Object.values, Object.enteries, padStart, padEnd, etc.\nIs that correct?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-03-21T15:57:39Z", "contents": "The methods that you're trying to use are provided by Node, not Jasmine. Node 5.4 doesn't provide them, regardless of whether or not you use Jasmine. You'll need to upgrade to a newer version of Node if you want to use things like Array.includes.\nClosing as this doesn't appear to be an issue with Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "yanlucas99", "authorAssociation": "NONE", "createdAt": "2019-05-23T19:47:53Z", "contents": "You can use a contour solution by setting the parameter before the call on the \" it \" function, as follows:\n\n// if you want to test an includes function, you should pass an object that contains the function, example:\n$scope.testIncludes( { includes: function(){ return true } } );\n\nAnd your test will pass at your controller, example:\n\nfunction testIncludes(text){\nif(text.includes(\"anything\")){\n// do anything\n} else {\n// do anything else\n}\n}\n\nNote that the else path will only be taken if you test with the opposite of the object we created ( just swap true for false) , example:\n\n$scope.testIncludes( { includes: function(){ return false} } );", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1531, "url": "https://github.com/jasmine/jasmine/issues/1531", "title": "List filtered specs without executing them", "contents": "I am using Jasmine in stand-alone mode in the browser. Every time, I am opening the page, all the tests are executed. I would prefer to have an option to set if tests should be executed or just listed (in gray). More or less an interactive mode (cf Git).\nIt could take the form of:\n\nURL parameter (my_test.html?execution=false)\nA check box option in the Options menu of Jasmine\n\nAdvantages:\n\nYou don't have to change your code to choose which specs to do\n\nAvoid to disturb the git\nYou can share the spec param to provide the same filter\n\n\nYou can see and prepare which tests are going to be done (Also because each suites/specs give a link to select automatically the sub tests)\nYou can open a page with tests without launching them right now (I have mostly integration tests that use the browser API, they impact the UI directly and are resource consuming)\n\nTemporary solution but limited\nThis code makes all and only all the tests to be listed (in grey) without being executed if spec param is empty or not defined. It is like if no spec names match the filter, then all the tests are listed. Am I right ?\nLimitation: I didn't find an alternative to keep the list mode while filtering the specs by name.\nvar specFilter = new jasmine.HtmlSpecFilter({\n  filterString: function() {\n    switch(queryString.getParam(\"spec\")) {\n      case \"all\":\n        return \"\";\n      case undefined:\n        return \"@@@@@@@\";\n      case \"\":\n        return \"@@@@@@@\";\n      default:\n        return queryString.getParam(\"spec\")\n    }\n  }\n});\n\nvar env = jasmine.getEnv();\n\nenv.specFilter = function(spec) {\n  return specFilter.matches(spec.getFullName());\n};", "createdAt": "2018-03-19T20:47:45Z", "updatedAt": "2018-03-31T09:21:23Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Morikko", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Morikko", "company": "@DoctrineLegal "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-24T00:14:20Z", "contents": "Full support for a dryRun kind of flag gets a bit more complicated with the command line runners, so I'm not sure this is something we're looking for right now.\nHowever, if you're already customizing your boot.js to override the specFilter on env, you might also look at how the filterSpecs argument is being set in the HtmlReporter object. This is the flag that tells the HtmlReporter whether it should hide specs that were excluded from the run.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Morikko", "authorAssociation": "NONE", "createdAt": "2018-03-31T09:21:22Z", "contents": "Thank you, I will check filterSpecs in the HtmlReporter.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1532, "url": "https://github.com/jasmine/jasmine/issues/1532", "title": "\"fit\" and \"fdescribe\" are ignored in jasmine-core >= 3.0.0 when run via Karma", "contents": "How to reproduce:\npackage.json:\n{\n  \"name\": \"jasmine-core-fit-bug\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"jasmine-core\": \"^3.1.0\",\n    \"karma\": \"^2.0.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-jasmine\": \"^1.1.1\"\n  }\n}\n\nkarma.conf.js:\n// Karma configuration\n// Generated on Tue Mar 20 2018 11:36:08 GMT+0100 (CET)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n      'spec/*.spec.js'\n    ],\n\n\n    // list of files / patterns to exclude\n    exclude: [\n    ],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n\nspec/allspecs.spec.js:\nit('makes sure that true is true', () => {\n  expect(true).toBe(true);\n});\n\nfit('makes sure that false is false', () => {\n  expect(false).toBe(false);\n});\n\nExpected output:\nChrome 65.0.3325 (Mac OS X 10.12.6): Executed 1 of 2 (skipped 1) SUCCESS (0.003 secs / 0 secs)\n\nActual output:\nChrome 65.0.3325 (Mac OS X 10.12.6): Executed 2 of 2 SUCCESS (0.006 secs / 0 secs)\n\nIt works, if you use jasmine-core in Version 2.9.1:\n\"jasmine-core\": \"^2.9.1\",", "createdAt": "2018-03-20T11:44:26Z", "updatedAt": "2018-12-06T00:19:26Z", "closedAt": "2018-05-15T00:19:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "djungowski", "authorAssociation": "NONE", "participants_count": 8, "participants_data": [{"login": "djungowski", "company": "@crosscan "}, {"login": "mramato", "company": "Analytical Graphics, Inc."}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}, {"login": "whyboris", "company": null}, {"login": "the-spyke", "company": null}, {"login": "SalathielGenese", "company": "@macrocephal "}, {"login": "jjm340", "company": "Thematic"}], "comments_count": 15, "comments_data": [{"authorLogin": "mramato", "authorAssociation": "NONE", "createdAt": "2018-03-21T12:49:29Z", "contents": "I've seen this as well, but as far as I can tell the tests are still skipped, so fit and fdescribe are working but the bug is in the reporting.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "djungowski", "authorAssociation": "NONE", "createdAt": "2018-03-21T13:50:47Z", "contents": "You're right, I've just tried it adding console.log commands:\nit('makes sure that true is true', () => {\n  console.log('This should not be visible');\n  expect(true).toBe(true);\n});\n\nfit('makes sure that false is false', () => {\n  console.log('This should be visible');\n  expect(false).toBe(false);\n});\n\nIt does not seem to be the progress reporter though, as the output is broken with the mocha reporter aswell. Looks like something in the reporting API itself is messed up", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-21T13:56:34Z", "contents": "I think this is probably an issue with karma-jasmine at least. I submitted a pull request to support some of the new reporting constructs in Jasmine 3.0 (karma-runner/karma-jasmine#192), but it doesn\u2019t appear to have gotten any attention from maintainers. The current failures look to be because karma-jasmine\u2019s Travis-ci confit still runs tests on versions of node that karma itself no longer supports.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mramato", "authorAssociation": "NONE", "createdAt": "2018-03-21T13:57:37Z", "contents": "I don't think it's karma, I see the same problem in non-karma jasmine-only Node.js unit tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-03-21T15:46:23Z", "contents": "@mramato Can you provide a minimal running example of the problem? So far I've been unable to reproduce it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mramato", "authorAssociation": "NONE", "createdAt": "2018-03-21T16:05:19Z", "contents": "Sure, I'll try and trim down my current configuration and post something later today/early tomorow.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "mramato", "authorAssociation": "NONE", "createdAt": "2018-03-22T13:41:06Z", "contents": "@sgravrock Looks like I owe you an apology.  I swear this was happening in our node/jasmine based tests but it looks like I was wrong.  Sorry for the noise and confusion.  Sounds like this it may be a karma-specific issue after all.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "whyboris", "authorAssociation": "NONE", "createdAt": "2018-04-24T18:35:48Z", "contents": "Possibly related: https://github.com/karma-runner/karma-jasmine/pull/192/files#diff-e52a9a67956bd51d044af4058fb939ceR241\nKarma would not label skipped tests as skipped because they are now labeled excluded \nSorry if it's not related \ud83d\udc39", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-25T00:09:52Z", "contents": "@whyboris yes. We're leaving this issue open in the meantime until Karma-Jasmine releases a version that has compatibility with Jasmine 3.0 in an effort to help discoverability.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2018-05-14T10:43:18Z", "contents": "Should be closed because karma-jasmine@1.1.2 is out already.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-15T00:19:32Z", "contents": "Closing, now that Karma-Jasmine has a version that includes support for Jasmine 3.x", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "SalathielGenese", "authorAssociation": "NONE", "createdAt": "2018-10-17T22:07:31Z", "contents": "I'm glad everyone is glad here but I'm not using karma. I really never used fit before, until this random but clean error in my tests.\n  \"devDependencies\": {\n    \"debug\": \"^3.1.0\",\n    \"jasmine\": \"^3.1.0\",\n    \"nodemon\": \"^1.17.5\",\n    \"uuid\": \"^3.3.2\"\n  },\n  \"dependencies\": {\n    \"@google-cloud/datastore\": \"^1.4.1\"\n  }", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-17T22:24:09Z", "contents": "@SalathielGenese can you please open a new issue with a bit more information about your use case and the behavior you are seeing? This issue was primarily around Karma's interactions with Jasmine, so if you aren't using Karma, I would like to track your issue separately.\nThanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jjm340", "authorAssociation": "NONE", "createdAt": "2018-12-05T19:08:23Z", "contents": "I'm having the same problem as @SalathielGenese, if he opened a new issue I'd like to comment on it with my configuration so it can be debugged.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-06T00:19:26Z", "contents": "I haven't seen any other issues around this type of issue. If you have a reproduction case, please open a new issue with as much info as you can.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["Karma"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1533, "url": "https://github.com/jasmine/jasmine/issues/1533", "title": "Feature request: Stop entire test suite execution on beforeAll failure", "contents": "This is somewhat related to issue #577, but different because it deals with beforeAll instead of beforeEach. In many situations, I imagine that a failure in beforeAll means that there's no useful information to be gained from continuing the test. It would be nice to immediately fail without trying to run each of the specs after that.\nExpected Behavior\ndescribe('bad setup', function() {\n  beforeAll(function() {\n    throw new Error('error from beforeAll');\n  });\n\n  it('test 1', function() {\n    expect(1).toEqual(11);\n  });\n});\nExpected behavior - output:\nSuite error: bad setup\nMessage:\nError: error from beforeAll\nCurrent Behavior\nOutput tries to run all tests:\nFailures:\n\n\nbad setup test 1\nMessage:\nExpected 1 to equal 11.\nStack:\n...\n\n\nbad setup test 2\nMessage:\nExpected 2 to equal 22.\nStack:\n...\n\n\nSuite error: bad error\nMessage:\nError: error from beforeAll\nSuite that reproduces the behavior (for bugs)\ndescribe('bad setup', function() {\n  beforeAll(function() {\n    throw new Error('error from beforeAll');\n  });\n\n  it('test 1', function() {\n    expect(1).toEqual(11);\n  });\n});\nYour Environment\nJasmine 3.1. I believe this behavior is the same in all environments. I have tried both with and without stopSpecOnExpectationFailure", "createdAt": "2018-03-22T00:51:38Z", "updatedAt": "2019-05-29T10:10:39Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "juliemr", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "juliemr", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "codehunter13", "company": null}, {"login": "Durgam777", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-22T00:58:54Z", "contents": "Does it make sense to merge this into the existing option to stop a spec on expectation failure or does this make sense as a separate option? The option to stop the suite execution (failFast) should do this as well, but it obviously has other effects as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "juliemr", "authorAssociation": "NONE", "createdAt": "2018-03-22T03:57:59Z", "contents": "My two cents is that it makes sense to merge with the existing stopSpecOnExpectationFailure option.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-24T00:07:45Z", "contents": "That makes sense to me. I'd be happy to review a pull request for this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "codehunter13", "authorAssociation": "NONE", "createdAt": "2019-03-28T13:59:33Z", "contents": "any progress on this :)", "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "Durgam777", "authorAssociation": "NONE", "createdAt": "2019-05-29T06:50:31Z", "contents": "I am also facing the same issue: Test script (it) is executing on failure on 'beforeAll'.\nAny update on this, please\nThanks,", "reactions_count": 0, "reactions_data": []}], "reactions_count": 4, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1534, "url": "https://github.com/jasmine/jasmine/issues/1534", "title": "jasmine-html.js put an \"i\" variable in the global scope", "contents": "Expected Behavior\nTo not pollute the global scope\nCurrent Behavior\nAn \"i\" variable is attached to the global scope (window.i)\nPossible Solution\nReplace:  \"for(i\" with \"for(var i\" on line 214 and 235 of jasmine-html.js", "createdAt": "2018-03-25T17:32:17Z", "updatedAt": "2018-03-25T21:04:44Z", "closedAt": "2018-03-25T21:04:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "MassimoFoti", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "MassimoFoti", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1535, "url": "https://github.com/jasmine/jasmine/issues/1535", "title": "Add some way to handle css, scss, html files in node", "contents": "The world seems to be leaving Jasmine behind. recently I was forced to swtich one of my test services to use Jest instead of Jasmine, which was rather painless as I think Jest must respect Jasmine syntax. However I cannot stand how Jest ignores fdescribe and fit.  But the problem is this:\nI can find no documentation or examples of how to get Jasmine to handle or mock css, scss or html. This is not a front end app, but I need to process some css and html and when I import or require these files Jasmine goes ballistic.\nIs this even possible with out aid from karma? Are there any examples of doing this?\nI would expect to be able to add some type of transform to a config like:\n\"transform\": {\n  \"^.+.(js|jsx)$\": \"<rootDir>/node_modules/babel-jest\",\n  \"^.+.(css|scss|handlebars)$\": \"<rootDir>/config/jest/textTransform.js\"\n}\n\n}\nI don't want to test the results of the css or html, I just want to test the test the code surrounding it. Any thoughts on this?", "createdAt": "2018-03-26T20:01:58Z", "updatedAt": "2018-08-16T01:00:03Z", "closedAt": "2018-08-16T01:00:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kevinlbatchelor", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "kevinlbatchelor", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "sgravrock", "company": null}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-03-28T00:32:02Z", "contents": "The jasmine npm package is intended for use in a node.js only context. I'm not totally sure what kinds of errors you're actually seeing or what outcome you're expecting, but you might take a look at:\n\nJasmine npm react tutorial\ngulp jasmine browser\nJasmine ruby gem\n\nJasmine is intended to be able to run in (more or less) any JavaScript context, be it browser, Node.js, or something else. So you need to make sure that the environment in which Jasmine is running supports loading the files you want.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kevinlbatchelor", "authorAssociation": "NONE", "createdAt": "2018-04-18T00:08:04Z", "contents": "We are using jasmine in node only. This particular micro service creates html templates and passes them onto be processed by another micro service as apart of a job. We actually package the file using webpack, which obviously handles the handlebars files. I wish I could find some help on this, but it was just easier to switch to Jest, event through I'm not a big fan of the Jest test runner. Thanks for your comments. If you guys are interested in this I could throw up a example of what I'm talking about.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-18T00:42:36Z", "contents": "I'm having a really hard time figuring out what it is that you're trying to do, and what you think Jasmine is doing (or not doing) that is making this hard.\nYou mentioned loading CSS/HTML/etc. files, and having Jasmine \"go ballistic\". Unfortunately, we can't really address (or even figure out how to discuss) this feedback. If you can provide an example of what you're trying to do and what Jasmine is doing to make it difficult we'd be happy to discuss solutions within Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-05-09T20:10:51Z", "contents": "Are you importing things like CSS files from your Javascript files, like this:\n// in somefile.js\nimport './foo.css';\n\nIf so, you might be able to solve the problem by using ignore-styles as outlined at https://jasmine.github.io/tutorials/react_with_npm.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-16T01:00:03Z", "contents": "Closing this since we haven't heard anything else in a while.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1537, "url": "https://github.com/jasmine/jasmine/issues/1537", "title": "incorrect test execution queue", "contents": "// file.spec.js\ndescribe('[test]', () => {\n    it('first', () => {\n        expect(true).toBeTruthy();\n    });\n    it('second', () => {\n        expect(true).toBeTruthy();\n    });\n});\n\nin file.spec.js -> ctrl + S (first save):\n[test]\n   first\n   second\n\nin file.spec.js -> ctrl + S (second save):\n[test]\n   second\n   first\n\nIs it normal that the test execution queue is broken\npart package.json with version libraries-\n{\n  \"devDependencies\": {\n    \"@types/enzyme\": \"^3.1.9\",\n    \"@types/enzyme-adapter-react-16\": \"^1.0.2\",\n    \"@types/jasmine\": \"^2.8.6\",\n    \"@types/react\": \"^16.1.0\",\n    \"@types/react-redux\": \"^5.0.15\",\n    \"@types/redux\": \"^3.6.0\",\n    \"awesome-typescript-loader\": \"^5.0.0-1\",\n    \"cross-env\": \"^5.1.4\",\n    \"css-loader\": \"^0.28.11\",\n    \"enzyme\": \"^3.3.0\",\n    \"enzyme-adapter-react-16\": \"^1.1.1\",\n    \"html-webpack-plugin\": \"^3.1.0\",\n    \"jasmine\": \"^3.1.0\",\n    \"jasmine-spec-reporter\": \"^4.2.1\",\n    \"karma\": \"^2.0.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-jasmine\": \"^1.1.1\",\n    \"karma-jasmine-html-reporter\": \"^1.0.0\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-spec-reporter\": \"0.0.32\",\n    \"karma-webpack\": \"^4.0.0-beta.0\",\n    \"node-sass\": \"^4.8.3\",\n    \"object-assign\": \"^4.1.1\",\n    \"sass-loader\": \"^6.0.7\",\n    \"style-loader\": \"^0.20.3\",\n    \"typescript\": \"^2.8.1\",\n    \"webpack\": \"^4.4.1\"\n  }\n}\n\nIs bug?", "createdAt": "2018-04-03T08:42:22Z", "updatedAt": "2018-05-12T05:54:05Z", "closedAt": "2018-04-17T18:55:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "vasivas", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "vasivas", "company": null}, {"login": "sgravrock", "company": null}, {"login": "christian-bromann", "company": "Sauce Labs Inc."}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rm185033", "company": null}], "comments_count": 6, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-03T19:53:55Z", "contents": "This is by design. Jasmine 3 runs tests in random order by default, to make it easier to detect accidental state leakage between tests.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "christian-bromann", "authorAssociation": "NONE", "createdAt": "2018-04-26T14:10:30Z", "contents": "@sgravrock is there an option to run them sequentially again? It is not the desired behavior when using Jasmine in context of e2e tests.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-26T23:54:14Z", "contents": "Jasmine does have the ability to configure whether your specs run in a random order. Which library you're using to execute your suite will determine the exact mechanism. The jasmine packages for ruby, python, and node.js all support a random option in their respective config files or some ability to pass true or false in from the command line. Other libraries like karma or protractor should have their own configuration format as well.\nThe goal behind this change is that specs should be independent enough from each other that change the execution order shouldn't affect the outcome.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rm185033", "authorAssociation": "NONE", "createdAt": "2018-05-11T20:22:57Z", "contents": "I am a beginner to Jasmine (and JS). Is there a global configuration (like the jasmine.DEFAULT_TIME_INTERVAL), that i can use to set the test randomization to false?\n(I am using the Jasmine standalone 3.1.0 library to test my JavaScript libraries).\nApart from this\nI am attempting to test an end-to-end flow of my transaction flow; It is typically a state based. Move from State A, to State B...etc. And for this, i intentionally want to test sequentially and have defined my specs accordingly. This is now, not working as the default Jasmine 3.1.0 behavior is to run the tests randomized as you have suggested above.  I understand the rationale behind making specs independent of each other, so they run in any order.  My question to you then is, how would i test such an end-to-end state flow (for example, assume i am performing a Purchase Transaction on a POS machine). Can you give or suggest any guidelines.\nthanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-12T00:41:33Z", "contents": "If the order of execution is important for your testing that order should be encapsulated within a single test. Multiple tests should typically indicate different test cases. I usually build these kinds of things up as a single \"happy path\" test through the system to make sure all the wizard pages are wired up to each other correctly, and then use unit tests to check all of the edge cases for a given page.\nWhile you convert, or if you don't want to, you should be able to use jasmine.getEnv().randomizeTests(false) in your boot.js or a helper before test execution begins.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rm185033", "authorAssociation": "NONE", "createdAt": "2018-05-12T05:54:05Z", "contents": "Thanks for the suggestion, it definitely helps.\nI understand what you are saying.\nIn the hindsight, I now feel that my intention to split the transaction flow into specs was more to annotate the logical flow (using specs...state a- spec1, state b -spec2...etc), rather than testing any substantial in each spec (which i could have done in a single test spec as you suggested).\nI am now changing the suite/spec structure , so randomizing the test runs will not affect their order of execution. This makes so much sense to me now.\nThanks again.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1538, "url": "https://github.com/jasmine/jasmine/issues/1538", "title": "Cannot test non exported function of file.", "contents": "I have a .ts file which has few non-exported functions.\nI am unable to test this since the scope of this function is not clear (Closure function).\nEg.\nexport function b(){\na()\n}\nfunction a(){\n}\n\nHere I am unable to test this function a(). However, I were able to spy on same with\njasmine.createSpy('a')", "createdAt": "2018-04-04T07:42:41Z", "updatedAt": "2018-04-05T00:18:13Z", "closedAt": "2018-04-05T00:18:13Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hir06", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hir06", "company": "Pramati technologies"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-05T00:18:13Z", "contents": "I like to think of functions that aren't exported as being private in scope. This means that they're inaccessible to anyone else in the system and can't be called or overwritten or messed with in any other way. Because of this, they also aren't available to test code to invoke or spy on. If the functions are truly private in scope and shouldn't be available outside the context of the one file, you will need to test them via the public interface (exported functions). Your other option is to make them public so they can be tested directly, either in the existing file, or as another module that your current one depends on.\nAdditionally, your jasmine.createSpy('a') call doesn't actually do anything to replace the a() function inside the module under test, it simply returns a new spy with the internal name of 'a'. If you want to install a spy over an existing function, you should use spyOn.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1539, "url": "https://github.com/jasmine/jasmine/issues/1539", "title": "Extend the interface of all Expectations by the `optionally` function/keyword. ", "contents": "Feature request\nExtend the interface of all Expectations by the optionally function/keyword.\n=> Apply a certain expectation if and only if property is existing.\n==> It does not matter if it does not exist, but if it does, expect it to be of certain shape..\ntechnical Solution\nIn   function Expectation(options) { I would love to see code like:\n    this.isOptional = options.isOptional;\n\nIn Expectation.prototype.wrapCompare I would love to see something like:\n      function defaultOptionalCompare() {\n        if (args[0] != null) {\n            return matcher.compare.apply(null, args);\n        }\n        return { pass: true };\n      }\n      if (this.isOptional) {\n        matcherCompare = defaultOptionalCompare;\n      }\n\nIn Expectation.Factory add code like:\n    options.isOptional = true;\n    expect.optionally = new Expectation(options);", "createdAt": "2018-04-05T08:37:53Z", "updatedAt": "2018-05-05T21:23:16Z", "closedAt": "2018-04-06T00:38:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wzr1337", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wzr1337", "company": "Jaguar Land Rover"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-06T00:38:58Z", "contents": "Your tests should be deterministic enough that you will always know whether you have an object or not. An optional expectation format makes it easy to have tests that give a false positive. If you expect something to be someway, but it's null or undefined, it is by definition not as you expect. It is therefore better for the test framework to tell you this so you can fix the bug, then allow you an easy way to paper over it to make your suite green.\nIf you have a spec that can't know what it is getting back, how can you tell it is doing anything correctly. For example, say I have:\nexpect(randomStuff()).optionally.toEqual({ foo: 'bar', baz: 'quux' });\nAnd someone changes randomStuff to always return null. This expectation will continue to pass even though the functionality, we were previously testing has been completely removed.\nIf you testing a component that relies on Math.random, I would suggest injecting a collaborator that wraps it so you can control the randomization in your tests.\nThis isn't functionality that we want in Jasmine, so I'm going to close this.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wzr1337", "authorAssociation": "NONE", "createdAt": "2018-05-05T21:23:09Z", "contents": "for those, still interested in a solution, I build something:\nhttps://gist.github.com/wzr1337/b8f7a2130fb4b8aeeb267450383f432e", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1540, "url": "https://github.com/jasmine/jasmine/issues/1540", "title": "is it possible to mqtt services", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\n\n\nCurrent Behavior\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nYour Environment\n\n\nVersion used:\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2018-04-06T11:18:41Z", "updatedAt": "2018-04-06T16:23:23Z", "closedAt": "2018-04-06T16:23:23Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "raghulrajnkl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "raghulrajnkl", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-06T16:23:23Z", "contents": "I think you have the wrong Jasmine project. This Jasmine is a javascript testing framework, and doesn't know anything about MQTT.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1541, "url": "https://github.com/jasmine/jasmine/issues/1541", "title": "Option to set random order for a single suite?", "contents": "With ^3.0.0, is it possible to set the random option for a single suite (describe) as well?\nWe'd like to use random: true as a default to encourage properly encapsulated tests, but will need to keep the old non-random behaviour for a number of legacy specs until they can be migrated.", "createdAt": "2018-04-10T14:59:36Z", "updatedAt": "2018-05-09T20:11:30Z", "closedAt": "2018-05-09T20:11:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "colinjoy", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "colinjoy", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-17T18:52:13Z", "contents": "No, the randomization settings are global.\nHow frequently does your team write tests that aren't properly encapsulated from each other? If it's frequent enough to be cause for concern, then it might be worth running the legacy specs in a separate invocation of Jasmine that runs with randomization off. That way you could turn it on immediately for the remaining specs. On the other hand, if this is just a \"once in a blue moon\" problem, it might be better to save the effort and just leave randomization off until all the legacy tests are converted.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1542, "url": "https://github.com/jasmine/jasmine/issues/1542", "title": ".toEqual & .toBe is not a function - Build breaks", "contents": "Hi All,\nI am new to the angular/Jasmine frameworks. Can anyone advise me for the below issue? I saw other 's post but the anwser is not clear,\nPackage.JSON\n{ \"name\": \"dashboard-kendo-ui\", \"version\": \"1.0.0\", \"license\": \"MIT\", \"scripts\": { \"ng\": \"ng\", \"start\": \"ng serve\", \"build\": \"ng build --prod\", \"test\": \"ng test\", \"lint\": \"ng lint\", \"e2e\": \"ng e2e\" }, \"private\": true, \"dependencies\": { \"@angular/animations\": \"^5.2.9\", \"@angular/common\": \"^5.2.0\", \"@angular/compiler\": \"^5.2.0\", \"@angular/core\": \"^5.2.0\", \"@angular/forms\": \"^5.2.0\", \"@angular/http\": \"^5.2.0\", \"@angular/platform-browser\": \"^5.2.0\", \"@angular/platform-browser-dynamic\": \"^5.2.0\", \"@angular/router\": \"^5.2.0\", \"@progress/kendo-angular-buttons\": \"^3.0.4\", \"@progress/kendo-angular-charts\": \"^2.0.3\", \"@progress/kendo-angular-dateinputs\": \"^2.2.0\", \"@progress/kendo-angular-dialog\": \"^3.4.0\", \"@progress/kendo-angular-dropdowns\": \"^2.1.0\", \"@progress/kendo-angular-excel-export\": \"^1.0.7\", \"@progress/kendo-angular-grid\": \"^2.1.2\", \"@progress/kendo-angular-inputs\": \"^2.2.0\", \"@progress/kendo-angular-intl\": \"^1.3.2\", \"@progress/kendo-angular-l10n\": \"^1.1.0\", \"@progress/kendo-angular-layout\": \"^2.2.1\", \"@progress/kendo-angular-popup\": \"^2.1.0\", \"@progress/kendo-angular-upload\": \"^3.0.3\", \"@progress/kendo-data-query\": \"^1.2.2\", \"@progress/kendo-drawing\": \"^1.5.2\", \"@progress/kendo-angular-ripple\" : \"^0.2.5\", \"@progress/kendo-theme-default\": \"^2.49.1\", \"classlist.js\": \"^1.1.20150312\", \"core-js\": \"^2.4.1\", \"hammerjs\": \"^2.0.8\", \"rxjs\": \"^5.5.6\", \"web-animations-js\": \"^2.3.1\", \"zone.js\": \"^0.8.19\" }, \"devDependencies\": { \"@angular/cli\": \"~1.7.3\", \"@angular/compiler-cli\": \"^5.2.0\", \"@angular/language-service\": \"^5.2.0\", \"@types/jasmine\": \"~2.5.38\", \"@types/node\": \"~6.0.60\", \"codelyzer\": \"^4.0.1\", **_\"jasmine-core\": \"~2.5.2\",_** \"jasmine-spec-reporter\": \"~3.2.0\", \"karma\": \"~1.4.1\", \"karma-chrome-launcher\": \"~2.0.0\", \"karma-coverage-istanbul-reporter\": \"^0.2.0\", \"karma-jasmine\": \"~1.1.0\", \"karma-jasmine-html-reporter\": \"^0.2.2\", \"protractor\": \"~5.1.0\", \"ts-node\": \"~2.0.0\", \"tslint\": \"~5.9.1\", \"typescript\": \"~2.5.3\" } }", "createdAt": "2018-04-16T02:55:04Z", "updatedAt": "2018-08-16T00:39:04Z", "closedAt": "2018-08-16T00:39:04Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "muthucse7", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "muthucse7", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-17T00:15:47Z", "contents": "Jasmine doesn't patch anything onto your existing objects, so you'll need to call expect to use Jasmine matchers. Based on your error message it might look something like:\nexpect(coeGridTitle).toEqual('some thing')\nFor a bit more information take a look at the your first spec tutorial.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-16T00:39:04Z", "contents": "Closing this since we haven't seen any more discussion on this topic and it sounds like it might be an issue with the tests and not Jasmine itself.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1543, "url": "https://github.com/jasmine/jasmine/issues/1543", "title": "Matchers can't compare promises", "contents": "So I've got some long standing unit tests that have been running for several months that are all just verifying that the return of functions is wrapped in a promise, and are all basically iterations of:\nexpect(object.function()).toEqual(Promise.resolve());\nThese tests run fine on jasmine 2.8, but if I update to 2.99 (or 3.0+), the tests fail with the message:\nError: Expected [object Promise] to equal [object Promise].\nI couldn't see any recent checks in the toEqual function, so I'm wondering if I'm missing something?", "createdAt": "2018-04-17T18:14:24Z", "updatedAt": "2019-02-22T01:36:27Z", "closedAt": "2019-02-22T01:36:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chrisgodsey", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "chrisgodsey", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-17T18:42:00Z", "contents": "Chances are that your tests would have always passed prior to 2.9.0, even if the returned promise was rejected or resolved to a different value than expected.\nIn general, .toEqual tries to determine if two objects represent the same value. That's not really possible with promises because they don't expose any properties (at least not in a way that's either public or portable). Prior to 2.9.0, .toEqual treated any two promises as equal because they had the same constructor and had the same properties. Starting with 2.9.0, .toEqual treats two promises as equal only if they are the same object, i.e. === equality.\nIt looks like you're trying to assert that the promise returned by object.function() has been resolved to undefined. There isn't a way to do exactly that, but you can assert that it eventually resolves to undefined:\nit('should return a promise that resolves to undefined', function() {\n   return object.function().then(function (result) {\n      expect(result).toBeUndefined();\n   });\n});", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisgodsey", "authorAssociation": "NONE", "createdAt": "2018-04-17T19:02:59Z", "contents": "Yeah, I had been changing everything to this as an attempt to fix things:\nexpect(object.function().then).toBeTruthy();\nThanks for the response, I'll just update the tests.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisgodsey", "authorAssociation": "NONE", "createdAt": "2018-04-17T19:24:53Z", "contents": "So following up on this - why does toEqual treat promises as equal only if they're the same object? Isn't this the function of toBe? This seems like a unique implementation of toEqual specifically for promises\nI can expect({}).toBe({}) and I will get a failure, but if I do expect({}).toEqual({}) I will get a pass.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-17T20:48:44Z", "contents": "why does toEqual treat promises as equal only if they're the same object?\n\nBecause it's not possible (as far as I know) for toEqual to do the same thing with promises that it does with other objects. Let's set aside the pending and rejected cases for now and say that two promises should be considered equal if they're both resolved to the same value. The comparison logic would look something like this:\n// ...\nif (isPromise(a) && isPromise(b) {\n   return isResolved(a) && isResolved(b) && equals(resolvedValue(a), resolvedValue(b));\n}\n// ...\n\nThe problem is that it's not possible to implement isResolved or resolvedValue. The Promise spec doesn't provide any synchronous API for inspecting the state of the promise, only the async then method. Since toEqual is necessarily synchronous, it can't use those async methods. If you're not convinced, you can prove this to yourself by trying to implement isResolved and resolvedValue. Make sure that they return a boolean and use only features that are documented in the Promise spec.\nSo that leaves only a few options:\n\nMake matchers asynchronous. This would be a major effort and would require literally every Jasmine spec out there to be rewritten.\nThrow an exception if a promise is passed to toEqual.\nTreat all promises as equal, as before 2.9.0.\nTreat promises as equal if they are the same instance, as in 2.9.0.\n\nOption 1 is out of the question, and I think that option 4 is significantly more useful than 2 or 3.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisgodsey", "authorAssociation": "NONE", "createdAt": "2018-04-18T13:55:58Z", "contents": "Yeah, I totally understand why using toEqual for two promises doesn't check if they resolve the same value - I was just more remarking that just making toEqual and toBe be the same thing (but only for promises) is a confusing interaction.\ne.g expect(Promise.resolve()).toEqual(Promise.resolve()) = fail, expect({}).toEqual({}) = pass is confusing when expect(Promise.resolve()).toBe(Promise.resolve()) = fail and expect({}).toBe({}) = fail\nThis unique implementation of toEqual for promises doesn't gain you any functionality you don't already have, it's just conflating what toEqual actually does.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-19T00:34:10Z", "contents": "Jasmine's toEqual is a best effort deep compare of two objects. Other places where it also falls back to work the same as toBe are for literal values like numbers and strings. The only really viable options for comparing two promises are (per @sgravrock's note):\n\nDon't allow it. Throw an Error if we ever find a Promise anywhere in the object graph of two things being compared.\nAll promises are equal as before 2.9.0. This breaks previously fixed issues (#1314) and also means that expect(Promise.resolve()).toEqual(Promise.reject()) would also pass in your tests.\nFall back to the best effort of checking whether they are the same object, as currently.\n\nOf these options, the current (number 3) seems like the best option since it allows some form of equality checking, which is especially useful for spy argument matching, without reporting false equivalency for two Promises that are easily recognizable to a human as being different things.\nIn general Jasmine believes that a spec that should fail but passes is much worse than a spec that should pass but fails as the former is more likely to hide a real issue in the underlying code that the latter.\nWe would be happy to hear about any other options that you (or any other reader) have to more accurately compare to Promises synchronously without having to know which Promise library might be in use.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:36:27Z", "contents": "Jasmine 3.1 introduced the new expectAsync syntax which should allow better matching of the value that a Promise resolves to. Jasmine 3.3 makes this work with non-built-in versions of Promises as well.\nThis new syntax should address the underlying issue here, so I'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1544, "url": "https://github.com/jasmine/jasmine/issues/1544", "title": "Information on automatic generation of Jasmine Unit test cases", "contents": "Are you creating an issue in the correct repository: Yes\nHello Folks,\nWe are trying to generate jasmine test cases automatically from developed java script code. Any idea if someone of you have developed some utility or recommendation?\nThanks.\nAkhilesh T\n+91 8130652060", "createdAt": "2018-04-18T07:22:12Z", "updatedAt": "2018-04-19T00:40:41Z", "closedAt": "2018-04-19T00:40:41Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "akhileshtripa", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "akhileshtripa", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-19T00:40:41Z", "contents": "In general, I would shy away from using a tool to automatically generate tests. These tests can only represent the current actual state of the system, and not the desired functionality. They are also less likely to be discoverable and maintainable by the actual humans working in the code, since they didn't write them themselves.\nThat said, I am sure there are tools that exist to perform this action for you. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself. Next time you have a \"How to use jasmine?\" question please use the jasmine-js group.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1545, "url": "https://github.com/jasmine/jasmine/issues/1545", "title": "Customize PrettyPrinter", "contents": "Hello I wanna customize PrettyPrinter. I wanna see result of toHaveBeenCalledWith\nlike\nObject({\n  key: value,\n  key: value2,\n})\n\ninstead of\nObject({key: value,key: value2});\n\nI searched the internet I wan't able to make error message like above.So I tried to modify PrettyPrinter little bit. I changed code jasmine code. But I don't want to do it. I achieve this by decorating PrettyPrinter not directly modifying it.\nBut I found that I couldn't access PrettyPrinter in my code because PrettyPrinter is private in pp function.\nIt there any way to customize it or another way to prettify error message of toHaveBeenCalledWith or\nobject compare. I don't want to add matcher for toHaveBeenCalledWith because It is very hard work..\nps. Is there any reason it's impossible or hard to prettify toHaveBeenCalledWith reported message? or Is there any option already for it?\nThank you for reading.", "createdAt": "2018-04-23T06:07:15Z", "updatedAt": "2019-04-19T22:25:33Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "UniverseHan", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "UniverseHan", "company": "electronic arts"}, {"login": "whyboris", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "whyboris", "authorAssociation": "NONE", "createdAt": "2018-04-24T18:38:13Z", "contents": "You might be looking for a reporter to do this job:\nhttps://www.npmjs.com/package/karma-jasmine-diff-reporter\nSpecifically look for their pretty option, which should result in something like this:", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "UniverseHan", "authorAssociation": "NONE", "createdAt": "2018-04-25T11:05:43Z", "contents": "That doent work for toHaveBeenCalledWith in jasmine nodejs environment.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-03T00:33:52Z", "contents": "Customizing the pretty printer is something we've been thinking about for a while, but haven't figured out a good way to do it. Where the pretty printer lives right now makes things a bit tricky, since it needs to output something that is useful both in a console format and in a web page without knowing which context it is running in. Possibly even both at the same time, if you're running in a browser via selenium or something and want to potentially see both versions.\nAnother workaround you might be able to try for spy argument assertions is checking number of calls and using toEqual for argument checking to get the more descriptive output it provides.\nexpect(mySpy.calls.count()).toEqual(1);\nexpect(mySpy.calls.mostRecent().args).toEqual(['foo', {}]);\nWe would also be happy to review a pull request to allow some sort of custom formatters similar to custom equality testers (tracker story: https://www.pivotaltracker.com/story/show/152892751) or a pretty formatter that knows how to deal with different newlines depending on the environment.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1546, "url": "https://github.com/jasmine/jasmine/issues/1546", "title": "Inconsistent behavior in async/await tests", "contents": "When the following block is running, the test is always successful. am I doing something wrong?\nconst promise = new Promise((resolve, reject) => resolve(2))\n\ndescribe('tests', () => {\n  it('somethings', async () => {\n      expect(await promise).toEqual(1);\n  });\n})\nEdit:\nI checked again and put the assertion block to the tr/catch statements. It's throw an exception with TypeError{} error. I think the  problem is in my configuration.\nExpected Behavior\nThe test should be fail.\n\n\nCurrent Behavior\nThe test always successfull\n\n\nYour Environment\n\nVersion used: 3.1.0\nEnvironment name and version (node: 8.11.1 / ChromeHeadless):\nOperating System and version (macOS, 10.13.4):", "createdAt": "2018-04-23T11:11:47Z", "updatedAt": "2018-04-23T20:43:57Z", "closedAt": "2018-04-23T20:43:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "atayahmet", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "atayahmet", "company": "EFabrika"}, {"login": "sgravrock", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-04-23T14:23:54Z", "contents": "It looks like you intended for promiseFunc to be a function that returns a promise, but it's actually just a a promise. This does what you expected:\nfunction promiseFunc() {\n   return new Promise((resolve, reject) => resolve(2));\n}\n\ndescribe('tests', () => {\n  it('somethings', async () => {\n      expect(await promiseFunc()).toEqual(1);\n  });\n})\n\nFailures:\n1) tests somethings\n  Message:\n    Expected 2 to equal 1.\n  Stack:\n    Error: Expected 2 to equal 1.\n        at <Jasmine>\n        at UserContext.it (/private/tmp/j/spec/aSpec.js:7:35)\n        at <Jasmine>", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "atayahmet", "authorAssociation": "NONE", "createdAt": "2018-04-23T18:06:31Z", "contents": "I made a syntax error above example but your edited example same with my real test code and still not working.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1547, "url": "https://github.com/jasmine/jasmine/issues/1547", "title": "Add new syntax to execute expecations on Promises", "contents": "We've heard from a number of folks that working with Promises in Jasmine is harder than it needs to be. To that end, we're looking for pull requests to add an expect.async expectation that will have only asynchronous matchers on it that return promises that can be awaited by the test code.\nDesired Behavior\nit(\"promises\", () => {\n  expect.async(promiseFunc()).toBeResolved();\n});\nCurrent Behavior\nit(\"promises\", () => {\n  var result = await promiseFunc();\n  expect(result).toEqual(1);\n});\nKey points on the solution\n\nIf global.Promise is not available in the current environment, the expect.async() function should throw an Error indicating the issue. Jasmine wants to allow polyfills, but not provide them\nThe Promise returned to the executing suite should attempt to always resolve successfully\nThe intermediate Promise returned by a matcher, and handled by the expectation message system, should resolve with the same type of object as a synchronous matcher\n\nwith a boolean pass\nan optional message, that can be either a string, or a function returning a string\n\n\nNeeds to also support .not so that a user could expect.async(promiseFunc()).not.toBeRejected()\nThe intermediate Promise returned by a matcher should only be rejected if the something is wrong with the use of the matcher, such as the actual not being a Promise\nMinimal async matchers included should be toBeRejected and toBeResolved\n\nadditional matchers like toBeResolvedTo(<stuff>) are fine but not required for the initial release\nallowing custom async matchers are not required for the initial release\n\n\n\nThis is probably a large piece of work, but will be useful to many Jasmine users.\nContext\nSee also #1447", "createdAt": "2018-04-24T00:59:53Z", "updatedAt": "2018-11-02T16:48:30Z", "closedAt": "2018-06-05T04:12:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "slackersoft", "authorAssociation": "MEMBER", "participants_count": 2, "participants_data": [{"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "rubenlg", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "rubenlg", "authorAssociation": "NONE", "createdAt": "2018-11-02T15:24:12Z", "contents": "Opinion ahead\nI don't agree with the desired behavior section in the original post, it can be trivially rewritten in a much more compact way:\nit(\"promises\", () => {\n  return promiseFunc();\n});\nOr alternatively:\nit(\"promises\", async () => {\n  await promiseFunc();\n});\nIf the function rejects the promise, both of these fail the test, same as calling a non-promise function that throws.\nIn fact, the only case in which having special support for promises provides any value (in my opinion) is rejections, but that can be solved much easier with an async version of toThrow, that could be used like this:\nit(\"rejects\", async () => {\n  expect(promiseFunc()).toReject();\n});\nI understand that my proposals above are not very fluent, so similarly to the toReject, we could have a toResolve. Those are the only two cases needed. No need for expectAsync, since one can always await on promises before running any of the existing expectations. I do that all the time and never found it to be a problem.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T16:48:30Z", "contents": "Newer versions of Jasmine also include support for expectAsync with some async matchers.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_DOWN"], "labels": ["feature request", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1548, "url": "https://github.com/jasmine/jasmine/issues/1548", "title": "Jasmine reports skipped tests as executed", "contents": "When skipping test using fdescribe in Jasmine 3.1.0 the tests come back as executed and as passing.\nExpected Behavior\nSkipped tests should be listed as skipped\nCurrent Behavior\nSkipped tests are being reported as Successful\nSuite that reproduces the behavior (for bugs)\nA well outlined suite can be found here\nContext\nHaving to wait for thousands of tests to pretend to run is a hassle.\nYour Environment\noutline here", "createdAt": "2018-04-24T23:31:08Z", "updatedAt": "2018-04-25T16:36:21Z", "closedAt": "2018-04-25T00:07:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Benjarmil", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Benjarmil", "company": "inContact"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-25T00:07:12Z", "contents": "It looks like you're using Karma to run your Jasmine suite. Unfortunately, the Karma maintainers haven't released a new version of Karma-Jasmine that is compatible with some of the reporting changes made in Jasmine 3.0. The pull request for 3.0 support (karma-runner/karma-jasmine#192) has been merged but not yet released. I believe this is also a duplicate of #1532 which is still open pending a release from of Karma-Jasmine which the Jasmine team has no insight or control over.\nClosing. Hope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "Benjarmil", "authorAssociation": "NONE", "createdAt": "2018-04-25T16:36:21Z", "contents": "Thanks for the insight, slacker. I'll keep my eye on that pr.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1549, "url": "https://github.com/jasmine/jasmine/issues/1549", "title": "Support for logging the expectation failure to the console in Jasmine.", "contents": "Expected Behavior\nWhen an expectation fails in a test spec, it would be great to show the line number of the assertion in the console of the browser.\nCurrent Behavior\nCurrently, when an expectation fails, there is no information to the developer which line it has failed.\nPossible Solution\nAdding console.error() or console.log() to the expectationFailureFactory maybe? I am not really sure about it. Sorry about the ignorance.\nSuite that reproduces the behavior (for bugs)\ndescribe(\"sample\", () => {\n  it('test', () => {\n  expect(true).toBe(false); \n }\n});\nContext\nIn the above spec, the expectation fails on line 3. It would be great to see that in the console of the browser with the expectation failure message.\nYour Environment\n\nVersion used: Jasmine 2.9.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 65, node 9.4\nOperating System and version (desktop or mobile): MacOSX High Sierra.\n\nNote: It already logs the range of line numbers (of the spec) to the browser like here:\nat eval (http://localhost:3000/build/exp/chains/test.spec.js?1524674:24:30) which indicates the error is from 24 to 30 but not precisely the expectation line.", "createdAt": "2018-04-25T22:29:15Z", "updatedAt": "2018-04-27T19:18:03Z", "closedAt": "2018-04-26T00:04:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "applecool", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "applecool", "company": "Esri"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-04-25T22:34:26Z", "contents": "@slackersoft Any advice on workarounds?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-04-26T00:04:18Z", "contents": "I found the workaround by adding the customReporter. Closing this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-26T00:10:02Z", "contents": "If you would like to see the error details in the browser console as well as in the page where Jasmine displays your results, a custom reporter is indeed probably the correct solution. If you're just looking to see the stacktrace and error details in your browser, this should already be visible in the page.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "applecool", "authorAssociation": "NONE", "createdAt": "2018-04-27T19:18:03Z", "contents": "@slackersoft Yup, that's what I did :) Thank you :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1550, "url": "https://github.com/jasmine/jasmine/issues/1550", "title": "jasmine tests run in random order", "contents": "Hi,\nWe are using wdio-jasmine-framework to run our e2e test, but we found out the test steps run in random order.\nSame issue has been reported in wdio-jasmine-framework.\nwebdriverio-boneyard/wdio-jasmine-framework#124", "createdAt": "2018-04-26T15:35:26Z", "updatedAt": "2018-04-27T18:17:28Z", "closedAt": "2018-04-26T23:59:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dudaming", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dudaming", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-26T23:59:25Z", "contents": "The default configuration for random order was changed in a major version release of Jasmine (3.0), because we knew it would be a breaking change for many suites. Jasmine supports the ability to turn the randomization off, but it is up to the wrapping framework to pass this option through to Jasmine.\nClosing this, since this is the current desired functionality for the 3.x release of Jasmine. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dudaming", "authorAssociation": "NONE", "createdAt": "2018-04-27T08:03:08Z", "contents": "Hi,\nThanks for the reply.\nCould you please tell me which parameter should I change to disable this?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-04-27T18:17:27Z", "contents": "Jasmine's config file has a random flag that you can set to false. I'm not sure how to get the WebDriverIO runner to pass that to the underlying Jasmine environment, sorry.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1552, "url": "https://github.com/jasmine/jasmine/issues/1552", "title": "Property 'jasmineMatches' is missing in type", "contents": "I constantly get this error in jasmine tests and I don't understand what causes this error. Stackoverflow user suggests it's problem with Jasmine typings\nHere's the small code for example\n    it('should work with empty arrays', () => {\n      expect(ReviewComponent.orderByTime([])).toEqual([]);\n    });\n\norderByTime is a simple function which just sort array with built-in sort function. But I get\nType 'undefined[]' is not assignable to type 'ObjectContaining<void>'.\n    Property 'jasmineMatches' is missing in type 'undefined[]'.\n\nThis code is valid in my understanding, but not for Jasmine.\nAs a workaround, I can fix the error by adding .toEqual([] as any), but I don't think it's a proper way to this it.\nYour Environment\n\n\nVersion used: jasmine-core@2.9.1, typescript@2.6.2\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): HeadlessChrome 65.0.3325, node v8.9.4\nOperating System and version (desktop or mobile): Mac OS X 10.13.4", "createdAt": "2018-04-30T15:10:31Z", "updatedAt": "2018-04-30T15:16:22Z", "closedAt": "2018-04-30T15:16:21Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "fetis", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "fetis", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "fetis", "authorAssociation": "NONE", "createdAt": "2018-04-30T15:16:21Z", "contents": "Sorry, that was my mistake. I didn't return a value", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1553, "url": "https://github.com/jasmine/jasmine/issues/1553", "title": "ability to spyOn multiple funtions", "contents": "let func1  = spyOn(component.prototype , func1)\nlet func2  = spyOn(component.prototype , func2)\n\nright now why jasmine is not allowing to spyOn multiple funtions ?\nit is only allowing to spyOn one funtion at a time..\nhow to unit test  when a scenario come ,where one function is calling other funtion", "createdAt": "2018-05-01T10:10:38Z", "updatedAt": "2018-08-16T00:44:45Z", "closedAt": "2018-08-16T00:44:45Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "shivasai09", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "shivasai09", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-03T00:59:09Z", "contents": "What sorts of errors are you getting when you try to spy on more than one function? Your example code doesn't look like it will work at all, since you're passing in a variable that you haven't yet initialized as the name of the function to spy on. If you have a function that you want to test that it correctly calls two other functions:\nfunction Component() {}\nComponent.prototype.foo = function () {};\nComponent.prototype.bar = function () {};\n\nfunction doStuff() {\n  var component = new Component();\n  component.foo();\n  component.bar();\n}\nYou should be able to test it like so:\nit('calls foo and bar', function() {\n  spyOn(Component.prototype, 'foo');\n  spyOn(Component.prototype, 'bar');\n  doStuff();\n  expect(Component.prototype.foo).toHaveBeenCalled();\n  expect(Component.prototype.bar).toHaveBeenCalled();\n});\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-16T00:44:45Z", "contents": "Closing this since we haven't gotten enough information to indicate an issue in Jasmine.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1554, "url": "https://github.com/jasmine/jasmine/issues/1554", "title": "How to know in the test if expectation failed or not?", "contents": "Sometimes I find it useful to know inside the test if an expectation failed or not.\nCurrently, I just repeat the matcher logic in the test. For example\nexpect(1+1).toBe(3); // log failure in reporter\nif (1+1 === 3){ // decide on future test steps\n   ... // only relevant if 1+1 === 3\n}else{\n   ... // relevant if 1+1!==3\n}\nHowever it would be nice to be able to reuse a matcher instead. For example something like this:\nif (expect(1+1).toBe(3)){ // real failure to be shown in reports\n   ... // skip these steps as they are not relevant in this case\n} else {\n   ... // move on to these steps since 1+1 is not 3. \n}\nOr with promises\nexpect(someAsyncThing()).toBe(3).then(()=>{...}).catch(()=>{...})\nI just can't seem to find a way to know if an expectation failed or not. Is there a way to know this?", "createdAt": "2018-05-02T00:21:00Z", "updatedAt": "2019-05-23T00:36:58Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "GuyMograbi", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "GuyMograbi", "company": null}, {"login": "sgravrock", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "eyecatchup", "company": "eyecatchUp"}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 9, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-05-02T03:20:55Z", "contents": "It would be interesting to know more about your testing strategy, particularly what the code in the // skip these steps as they are not relevant in this case branch looks like and what you do with the information that that code provides.\nJasmine doesn't currently provide a way for a spec to detect the result of a matcher. Without knowing more about your use case, my first reaction is to say that it's probably not something that we want to add. Although your tests might be an exception, my experience is that tests with significant conditional logic tend to be flakier than others. In particular, they're much less likely to fail correctly when the code under test is broken. So I'm reluctant to add a feature that would encourage that sort of test.\nI hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GuyMograbi", "authorAssociation": "NONE", "createdAt": "2018-05-05T23:08:28Z", "contents": "@sgravrock thanks for the reply.\nMy project would like to add A/B testing on some features and the decision about some tests is that they will be able to handle the flow regardless of A/B testing changes.\nSo for example if page X appears earlier in the flow due to a test, we should still be able to handle this.\ncurrently we are doing\n   browser.getCurrentUrl().then((url)=>{\n     if (url.endsWith('/url1')){ // this line used to be 'expect' previously\n         // .. \n     } else if (url.endsWith('/url2')){ ... }\n     throw Error('unknown url [' + url + ']');\n   })\n\nSimilarly if elements are present or not.\nIt would be nice to write something like\nexpect(browser.getCurrentUrl()).toMaybeContain('/url1').then({\n  ...\n});\n\nexpect(browser.getCurrentUrl()).toMaybeContain('/url2').then({\n ... \n});\n\n// .. do some common stuff to both versions\n\nexpect(browser.getCurrentUrl()).toContain('/url3'); // ... on with the flow\n\nAnd then preferably somehow to write a reporter that will be able to say \"url1 one failed, but that's ok because url2 worked\"\nor possibly \"this test failed because both scenarios failed\".\nHope this makes it clearer.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-09T00:41:36Z", "contents": "This functionality seems like it would be hard to implement in a general way, and probably also hard to use correctly.\nIf Jasmine were to return the status of an expectation, as the original suggestion, you might be able to change course after that, but the failure would already have been recorded and the spec would still fail.\nExtending expect with some sort of \"maybe\" syntax doesn't indicate why you might use the feature and makes it far too easy to write a spec that should fail but doesn't. This is worse than having a spec that should pass but doesn't, because you won't even notice.\nAdditionally, it kind of sounds like the if statements most directly express the intent of the functionality, which is to check which A/B test branch was delivered, and respond accordingly.\nThis doesn't sound like functionality we want to have in Jasmine itself at this time, but if you have another suggestions that would make writing and extension for something like this easier, we'd be happy to discuss that more. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GuyMograbi", "authorAssociation": "NONE", "createdAt": "2018-05-09T01:35:53Z", "contents": "@slackersoft Thanks for the reply. I understand your considerations.\nPerhaps there is a way to access the matchers without expect?\nBasically any way that would allow me to reuse a matcher without the need to reimplement the logic would be nice.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2018-05-09T02:30:07Z", "contents": "Apologies in advance if I've misunderstood what you're doing or am about to get some math wrong.\nIt sounds like you care about testing both the A path and the B path, but each time you run the test it will only exercise one of them, right? So it's worth thinking about how many times you'd have to run your tests to get a high enough probability of exercising all the paths you care about. For instance, if there's an equal chance of getting A or B on any given run, then running a test like the one you described twice would give only a 50% chance of exercising both paths. If you have many tests, each of which can independently get either A or B, the problem compounds. In any case you'd end up with a test suite that's probabilistic rather than deterministic: if it's run X times it has a Y% chance of verifying everything that you want it to, where Y is always less than 100.\nThe approach I'd take in your situation is to put the A/B switch under the control of my tests somehow, and then write two tests: One that puts the system into the A state and then verifies the A path, and another that does the same thing with B. That way I could be confident that a single test run had exercised both paths. I realize that setting that up can be extra work when doing end to end testing, which your code sample hints at, but I'd consider it time well spent in most situations.\nIf you do want to stick with the probabilistic approach, I think sticking with simple if statements that have explicit conditions would be clearer than trying to reuse matchers somehow:\nvar url = browser.getCurrentUrl();\nif (url.indexOf('/url1') !== -1) {\n   ...\n} else if (url.indexOf('/url2') !== -1) {\n   ...\n} else {\n   throw new Error('Expected a URL of /url1 or /url2 but got ' + url);\n}\n\nThe virtue of that approach, at least to my eyes, is that the control flow is obvious no matter how much or how little the reader knows about Jasmine.\nI hope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "eyecatchup", "authorAssociation": "NONE", "createdAt": "2018-09-03T12:58:51Z", "contents": "Another use case where it might be useful:\nit('ALL database GET routes should return their correct status code', function(done) {\n    const async = require('async');\n    const mongoose = require('mongoose');\n    const Route = mongoose.model('Route');\n\n    Route.find({\n        method: 'get'\n    }, function(err, routes) {\n        async.each(routes, function (route, callback) {\n            let statusCode = 200;\n            if (route.statusCode) {\n                statusCode = route.statusCode;\n            }\n\n            request.get(base_url + route.path, function(error, response) {\n                expect(response.statusCode).toBe(statusCode);\n                callback();\n            });\n        }, done);\n    });\n});\nGiven the test above, we can not get the information on which route the expectation fails. In order to achieve this, we'd need to add something like:\nrequest.get(base_url + route.path, function(error, response) {\n    if (response.statusCode !== statusCode) {\n        console.log(route.path);\n    }\n    expect(response.statusCode).toBe(statusCode);\n    callback();\n });", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-18T01:42:00Z", "contents": "Please also check out the new withContext helper for expectations (and async expectations), as I think this should help differentiate your expectations.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-18T17:22:38Z", "contents": "I think I have an alternate use case for this feature (or maybe, it's a feature like it?)\nThe gist is that sometimes, it's helpful when testing jasmine add-ons to be able to test whether code will generate a test failure.  In large projects, you end up bolting on some additional wrappers and test harnesses and the like and that code usually needs testing too.  You need to be able to write a spec like this:\ndescribe('integrationTestHelper', function() {\n    it('fails with jasmine.getEnv().fail if express server cannot start', function() {\n        spyOn(integrationTestHelper, 'startServer').and.throwError();\n        expect(integrationTestHelper(function() { })).toFailWith({\n            pass: false, message: 'Spec aborted, integration environment not ready.'\n        });\n    });\n});\n\nFor some custom frameworks I've worked on, I've seen copied and pasted a matcher to provide this functionality... the important guts are (cringe):\ncompare: function (actual, expectedResult) {\n  var testResults = [];\n  var originalAddExpectationResult = jasmine.Spec.prototype.addExpectationResult;\n  jasmine.Spec.prototype.addExpectationResult = function (...result) {\n      testResults.push(result);\n  };\n\n  actual();\n\n  jasmine.Spec.prototype.addExpectationResult = originalAddExpectationResult;\n\n  if (jasmine.matchersUtil.equals(testResults, expectedResults)) {\n      // ....\n  }\n}\n\nI wonder if something similar could be provided by Jasmine, without the scary prototype monkey patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-23T00:36:58Z", "contents": "@elliot-nelson this seems like a different use case than the original poster had in mind. I think if you're writing a custom matcher for Jasmine, I would test it by call the compare function on the matcher directly and inspecting the output. This is what Jasmine itself does to test its own matchers and doesn't require any scary code clobbering.\nUltimately, I think that exposing the pass status out to the spec currently being run is more likely to encourage poor usage and hard to debug false positives, than the converse. In general, Jasmine prefers to prevent false positives. The failure mode I'm particularly looking at is a spec where an expectation fails that shouldn't, but because you're checking the outcome and entering a different branch of your test, the test reports as passing when it should be failing.\nHope this helps.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1556, "url": "https://github.com/jasmine/jasmine/issues/1556", "title": "Setting Up Jasmine With ASP.Net Core Web Application", "contents": "Is there a recommended practice or a walk through for setting up Jasmine with an ASP.Net Core Web Application?  I've posted a question on SO, but haven't gotten any responses yet, so any type of response would be helpful.", "createdAt": "2018-05-09T18:08:14Z", "updatedAt": "2018-05-12T02:15:18Z", "closedAt": "2018-05-12T00:33:43Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "daryllabar", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "daryllabar", "company": "Gap Integrity"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-12T00:33:43Z", "contents": "In previous projects where we've used ASP.Net, we used chutzpah to execute our specs. I don't remember all of the particulars of the setup, and there are a few quirks, but it hooks in and serves your javascript the same way that it will be in production, including the bundling. I'm not sure about Chutzpah's support for .Net Core though.\nNext time, you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Hope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "daryllabar", "authorAssociation": "NONE", "createdAt": "2018-05-12T02:15:17Z", "contents": "Thanks for the Jasmine-js group reference.  I'll post there for non-bug/enhancement requests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1557, "url": "https://github.com/jasmine/jasmine/issues/1557", "title": "Mark test suite as ordered/serial", "contents": "Is there a way to create a suite that runs specs in order? I don't need to set it globally, just for some special suites. Something like:\ndescribe_ordered(\"sample\", function() {\n});\nYour Environment\nJasmine 3.1.0", "createdAt": "2018-05-14T10:49:42Z", "updatedAt": "2018-05-16T00:51:31Z", "closedAt": "2018-05-15T00:28:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "the-spyke", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "the-spyke", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-15T00:28:29Z", "contents": "Jasmine does not have a way to specify that a suite (and its children) are to be run with the global randomization options overridden. I don't think this is a feature we're looking to add to Jasmine either. It would be pretty complex to add and maintain for not much added benefit.\nIf you're in the process of moving your full suite to be able to execute randomly, you could look at having  two suites, one that uses randomization, and one that doesn't, and use those to manage your migration.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "the-spyke", "authorAssociation": "NONE", "createdAt": "2018-05-15T07:51:36Z", "contents": "That's exactly what I wanted to do, but I don't see any other options except running them separately.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-16T00:51:31Z", "contents": "It should also be possible to spot check your suite periodically to see if it is able to be run with randomization. Depending on how big your suite is and how many specs currently need to be run in order, you could also just bite the bullet and turn randomization on and fix the resulting issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1558, "url": "https://github.com/jasmine/jasmine/issues/1558", "title": "Async question after utilize code in documentation", "contents": "Expected Behavior\nUnit test should pass\nCurrent Behavior\nunit test fails. https://www.screencast.com/t/XkVOsPIs71j\nSuite that reproduces the behavior (for bugs)\nTest Suite\nvar contentURL = \"/MyVector/Assignments/Admin/_ManagePositionsTile\";\nvar actionURL = '/MyVector/Assignments/Position';\n\n   var response = `<a id=\"managePositionsLink\" href=\"#\"\n       onclick = \"showInverseLoader($('#managePositionsPanel')); return false;\" >\n           <div id=\"managePositionsPanel\" class=\"panel panel-blue\" style=\"margin: 0\">\n               <div class=\"panel-heading\">\n                   <div class=\"row\">\n                       <div class=\"col-xs-3\">\n                           <i class=\"fa fa-fighter-jet fa-5x\"></i>\n                       </div>\n                       <div class=\"col-xs-9 text-right\">\n                           <h4>Positions</h4>\n                           <div>56,352 Positions</div>\n                       </div>\n\n                   </div>\n               </div>\n               <div class=\"panel-footer\">\n                   <span class=\"pull-left\">Manage Positions</span>\n                   <span class=\"pull-right\"><i class=\"fa fa-arrow-circle-right\"></i></span>\n                   <div class=\"clearfix\"></div>\n               </div>\n           </div>\n       </a >`;\n\n       describe(\"Using promises\", function() {\n        if (!browserHasPromises()) {\n          return;\n        }\n    \n        beforeEach(function() {\n          return soon().then(function() {\n            $('#testHarness').prepend(\"<div id='managePositionsTileSection' data-content-url='\" + contentURL + \"' data-action-url='\" + actionURL+\"'></div>\");\n            $.mockjax({\n                url: contentURL,\n                responseText: {\n                    status: \"success\",\n                    responseText: response\n                }\n            });\n          });\n        });\n    \n    \n        it(\"should support async execution of test preparation and expectations\", function() {\n            AssignmentManagerAdminModule.Initialize();\n            var link = $(\"#managePositionsLink\");\n            expect(link.length).toEqual(0);\n            return soon().then(function() {\n            \n            var link = $(\"#managePositionsLink\");\n            expect(link.length).toEqual(1);\n          });\n        });\n      });\n    \n      function soon() {\n        return new Promise(function(resolve, reject) {\n          setTimeout(function() {\n            resolve();\n          }, 1);\n        });\n      }\n    \n      function browserHasPromises() {\n        return typeof Promise !== 'undefined';\n      }\nTest Harness\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Jasmine Spec Runner v3.1.0</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"lib/jasmine-3.1.0/jasmine_favicon.png\">\n    <link rel=\"stylesheet\" href=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.css\">\n    \n    <script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.js\"></script>\n    <script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js\"></script>\n    <script src=\"../node_modules/jasmine-core/lib/jasmine-core/boot.js\"></script>\n    <script src=\"lib/mock-ajax.js\"></script>\n    <script src=\"../Scripts/jquery-3.1.1.js\"></script>\n    <script src=\"../Scripts/global/globals.js\"></script>\n    <script src=\"../node_modules/jquery-mockjax/dist/jquery.mockjax.min.js\"></script>\n    <script src=\"../js/Assignments/Admin/AssignmentManagerAdmin.js\"></script>\n    <!-- include spec files here... -->\n    <script src=\"AssignmentManagerAdmin.spec.js\"></script>\n</head>\n\n<body>\n<div id='testHarness'/>\n</body>\n</html>\nSystem under test\nAssignmentManagerAdminModule = (function () {\n    var managePositionsTileContentUrl;\n    var managePositionsTileActionUrl;\n    var configureVmlEligibilityCriteriaUrl;\n\n    function loadManagePostionsTile() {\n        $.get({ url: managePositionsTileContentUrl, cache: false }).then(function (result) {\n            if (result.responseText) {\n                result = result.responseText;\n            }\n            $(\"#managePositionsTileSection\").html(result); //attempting to validate this line\n            $(\"#managePositionsLink\").on(\"click\", function (e) {\n                e.preventDefault();\n                window.location.href = managePositionsTileActionUrl;\n            });\n        });\n    }\n\n    function setupPage() {\n        managePositionsTileContentUrl = $(\"#managePositionsTileSection\").data(\"content-url\");\n        managePositionsTileActionUrl = $(\"#managePositionsTileSection\").data(\"action-url\");\n        configureVmlEligibilityCriteriaUrl = $(\"#vmlEligibilityCriteriaModalContainer\").data(\"url\");\n        loadManagePostionsTile();\n    }\n    \n    /* test-code */\n    var _managePositionsTileContentUrl, _managePositionsTileActionUrl,_configureVmlEligibilityCriteriaUrl;\n        \n    /* end-test-code */\n\n    return {\n        Initialize: function () {\n            setupPage();\n        }\n        /* test-code */\n        , test: function () {\n            if (jasmine) {\n                this._managePositionsTileContentUrl = managePositionsTileContentUrl;\n                this._managePositionsTileActionUrl = managePositionsTileActionUrl;\n                this._configureVmlEligibilityCriteriaUrl = configureVmlEligibilityCriteriaUrl;\n            }\n        }\n        /* end-test-code */\n    };\n})();\nContext\n\n\nMy application is in serious need of unit tests against our javascript code base.  I was able to perform unit tests against sychronous action.  I tried to use jasmine-ajax to perform asych unit tests, but documentation / actual experience in utilizing it was not performing as expected.  I was seeing actual ajax requests instead of fake request I expected to see.\nI found jquery-mockjax https://github.com/jakerella/jquery-mockjax, which performed fake requests that Jasmine-ajax was not performing as desired.\nhttps://www.screencast.com/t/twE5KEIKYc\nYour Environment\n\n\nVersion used: 3.1.0\nEnvironment name and version: 66.0.3359.170 (Official Build) (64-bit)\nOperating System and version (desktop or mobile): Windows 10 1803", "createdAt": "2018-05-15T17:18:52Z", "updatedAt": "2018-05-15T17:37:46Z", "closedAt": "2018-05-15T17:37:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "minoseah629", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "minoseah629", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "minoseah629", "authorAssociation": "NONE", "createdAt": "2018-05-15T17:37:46Z", "contents": "I keep going with trying to make it work.\nI believe I got it to work.\nI extended the soon function to 1000 millisecond instead of 1 millisecond\nfunction soon() {\n    return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        resolve();\n      }, 1000);\n    });\n  }", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1559, "url": "https://github.com/jasmine/jasmine/issues/1559", "title": "online", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\n\n\nCurrent Behavior\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nYour Environment\n\n\nVersion used:\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2018-05-17T12:24:10Z", "updatedAt": "2018-05-17T13:58:53Z", "closedAt": "2018-05-17T13:58:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "virtax", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "virtax", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-17T13:58:53Z", "contents": "If you\u2019re having an issue with the Jasmine JavaScript testing framework, please take some time to fill in the portions of the issue template with information relevant to your issue. If you have a question about how to do something in Jasmine, please take a look at the jasmine-js google group or at Jasmine\u2019s documentation.\nI\u2019m going to close this. Hope this helps", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1560, "url": "https://github.com/jasmine/jasmine/issues/1560", "title": "How to exclude some spec files in jasmine?", "contents": "Is there any way to exclude some spec files with in a directory in jasmine?\nFor example, I want to exclude all spec in the extended folder from Foo folder.\n```\n\u251c\u2500\u2500 Foo\n\u2502   \u251c\u2500\u2500 sub\n|   |    |\n|   |    |--extended\n\u2502   \u2502         \u251c\u2500\u2500 a-spec.js\n|   |         \u251c\u2500\u2500 e-spec.js\n\u2502   \u251c\u2500\u2500 b-spec.js\n\u2502   \u251c\u2500\u2500 c-spec.js\n\u2502   \u251c\u2500\u2500 d-spec.js\n\u2514\u2500\u2500 \n```\n\nI have tried with folowing jasmin.json.But this is not working.\n    {\n    \"spec_dir\": \"Foo/\",\n    \"spec_files\": [\n        \"**/*[sS]pec.js\",\n        \"!**/extended/*.js\"\n    ]\n}", "createdAt": "2018-05-21T05:51:11Z", "updatedAt": "2018-05-21T05:52:03Z", "closedAt": "2018-05-21T05:52:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Chinmoy-globalIds", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Chinmoy-globalIds", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1562, "url": "https://github.com/jasmine/jasmine/issues/1562", "title": "[Feature Request] [v.3.x.x] Are there any plans to add Flow types for v3.x.x ? ", "contents": "I see that there are jasmine flow types in flow-typed project for version 2.4.x.\nCould we add for v 3.x.x as well ? Are there any plans on doing that?", "createdAt": "2018-05-22T23:35:15Z", "updatedAt": "2018-12-06T00:18:14Z", "closedAt": "2018-12-06T00:18:14Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "puneetar", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "puneetar", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-05-24T00:21:46Z", "contents": "The Jasmine team doesn't maintain any of the typings for Jasmine. Jasmine itself is written in raw ES5 (history and browser support), which makes it hard to automatically generate this type of thing. We would rather not create something incorrect in some way, so we've erred on the side of having the community maintain typings like this.\nI'm sure they would be happy to have a pull request to update the types for newer versions of Jasmine.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1563, "url": "https://github.com/jasmine/jasmine/issues/1563", "title": "--fail-fast fails forgetfully (only skips upcoming specs in the current suite, then runs specs in the next suite)", "contents": "Are you creating an issue in the correct repository?\nThe jasmine-npm tool has a --fail-fast=true command line option but it seems to be operating correctly (it parses and passes flags); the real issue is apparently inside jasmine-core.\n\nJasmine npm\n\nExpected Behavior\nWhen running a spec suite with several describe blocks, if you specify --fail-fast=true, it should abort the entire test run, skipping all upcoming specs and describes, and reporting only a single failure.\nCurrent Behavior\nWhen running a spec suite with several describe blocks, if you specify --fail-fast=true, after a failure, it skips upcoming specs in the current block, but continues to run all upcoming describe blocks. Then if a test fails, it skips all upcoming specs in that describe block, but jumps to the next and resets again.\nBasically, given the spec below:\ndescribe(\"Apple\", function() {\n    it(\"mercury\", function() {\n        fail();\n    });\n    it(\"venus\", function() {\n        fail();\n    });\n    it(\"earth\", function() {\n        fail();\n    });\n});\n\ndescribe(\"Banana\", function() {\n    it(\"mars\", function() {\n        fail();\n    });\n    it(\"jupiter\", function() {\n        fail();\n    });\n    it(\"saturn\", function() {\n        fail();\n    });\n});\n\ndescribe(\"Cherry\", function() {\n    it(\"uranus\", function() {\n        fail();\n    });\n    it(\"neptune\", function() {\n        fail();\n    });\n    it(\"pluto\", function() {\n        fail();\n    });\n});\n\nIf you run it with fail-fast=true and --random=false, you should see only a single failure (\"Apple mercury\") but instead you see three failures (\"Apple mercury\", \"Banana mars\", and \"Cherry uranus\").\nFailures:\n1) Apple mercury\n  Message:\n    Failed\n  Stack:\n    Error: Failed\n        at <Jasmine>\n    Error: Failed\n        at <Jasmine>\n        at UserContext.<anonymous> (/Users/alex/code/fail-fast-forgets.spec.js:3:9)\n        at <Jasmine>\n\n2) Banana mars\n  Message:\n    Failed\n  Stack:\n    Error: Failed\n        at <Jasmine>\n        at UserContext.<anonymous> (/Users/alex/code/fail-fast-forgets.spec.js:15:9)\n        at <Jasmine>\n\n3) Cherry uranus\n  Message:\n    Failed\n  Stack:\n    Error: Failed\n        at <Jasmine>\n        at UserContext.<anonymous> (/Users/alex/code/fail-fast-forgets.spec.js:27:9)\n        at <Jasmine>\n\n\n\nPossible Solution\nI have implemented a solution but it's a hack...\nnodeComplete() sets a variable hasFailures which would seem to do the trick. I'd like to check it inside Spec.execute and if fail-fast is set and hasFailures is true, skip lightly on, like xit does.\nBut sadly, I couldn't figure out how to get access to hasFailures from inside Spec.execute (jasmine.js:620 or so).\nSo I wrote a global accessor and got it that way, checking it at the same place pending and excluded specs are checked:\nif (this.markedPending || excluded === true || $HACK_HAS_FAILURES()) {\n\nand this provided the correct behavior (only report the first failure).\nIf someone can point me in the right direction I'll take another stab at it.\nSuite that reproduces the behavior (for bugs)\nThe above suite reproduces the behavior but I haven't written a meta-spec that would assert that if you pass in the proper command line options and suite, that only one failure is reported.\nContext\nI am teaching a class using test-guided exercises from exercism.io and testfirst.org. In that class it is important that the students work on one feature (spec) at a time, then move on to the next. Seeing a dozen test failures is confusing, especially when they're in random order.\n(As a side issue, IMHO specifying fail-fast should also change the default value of random to false, otherwise you would potentially see a different test failing on each run, which negates the use case of fail-fast to focus on a single failure at a time. I may submit this as a feature request or PR later.)\nYour Environment\n\n\n\nVersion used: 3.1.0 (jasmine-npm and jasmine-core)\n\n\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nkombucha-mac:code [ruby 2.3.3p222] alex$ npm -v\n3.10.9\nkombucha-mac:code [ruby 2.3.3p222] alex$ node -v\nv7.2.0\n\n\nOperating System and version (desktop or mobile):\nMacOS High Sierra\n\n\nLink to your project:\nhttps://github.com/alexch/exercism-javascript", "createdAt": "2018-05-25T16:27:22Z", "updatedAt": "2018-05-31T00:34:35Z", "closedAt": "2018-05-31T00:34:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "alexch", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "alexch", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "alexch", "authorAssociation": "NONE", "createdAt": "2018-05-25T17:13:53Z", "contents": "for the record, e15f273 is the commit that added proper fail-fast support and #414 is the issue that requested it -- ditto for jasmine-npm here: jasmine/jasmine-npm@375b7aa and here jasmine/jasmine-npm#16", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1564, "url": "https://github.com/jasmine/jasmine/issues/1564", "title": "Question: How to use a custom matcher when using toHaveBeenCalledWith", "contents": "The following test-case verifies if the service (which uses Angular HttpClient to do a post request) does indeed use certain headers.\nI want to write some custom matching code to check if the headers contains a certain key and value, like:\nheaders.get('Session') === 'abc'\nMy question is what to write at the ??? in below example?\nspyOn(http, 'post').and.returnValue(new Observable<Response>());\n\nconst result = service.Post<string>(data);\n\nassert.isNotNull(result);\n\nexpect(http.post).toHaveBeenCalledWith(`http://localhost/odata/Employees`, jasmine.any(String),\n    {\n        headers: // ???,\n        observe: 'response'\n    });\n\nIs this possible?", "createdAt": "2018-06-04T06:07:21Z", "updatedAt": "2018-06-13T00:10:02Z", "closedAt": "2018-06-13T00:10:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "StefH", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "StefH", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-05T00:06:14Z", "contents": "You should be able to use something like the stringMatching asymmetric matcher. You can also build your own by passing in an object that has an asymmetricMatch function on it, admittedly our documentation for this isn't very good.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "StefH", "authorAssociation": "NONE", "createdAt": "2018-06-05T08:22:38Z", "contents": "Some documentation on this functionality, especially writing typescript code would indeed be helpfull.\nFor now I ended up with this matcher class:\nclass HttpHeadersMatcher {\n\n    constructor(private check: { [name: string]: string }) {\n    }\n\n    public asymmetricMatch(options: any): boolean {\n        const headers: HttpHeaders = options.headers;\n\n        assert.equal(options.observe, 'response');\n\n        Object.keys(this.check)\n            .forEach((key: string) => {\n                assert.equal(headers.get(key), this.check[key], `The header '${key}' does not have the correct value`);\n            });\n\n        return true;\n    }\n\n    public jasmineToString(): string {\n        return `<HeaderMatching: ${JSON.stringify(this.check)}>`;\n    }\n}\nWhich is used like:\nexpect(http.post).toHaveBeenCalledWith(`http://localhost/odata/Employees`, jasmine.any(String), new HttpHeadersMatcher({ 'Session': 'abc' }));\n\nMy project and example code can also be found here: angular-odata-es5 : angularODataService.spec.ts", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1565, "url": "https://github.com/jasmine/jasmine/issues/1565", "title": "Env() properties are sorely lacking JavaDoc", "contents": "https://jasmine.github.io/api/3.0/Env.html\n\"Documentation generated by JSDoc 3.5.5 on ...\"\nOnly one method of the created Env instance has JavaDoc comments on it (addReporter), and that's the only one documented in the generated Env page.\nI noticed this because Jasmine 3.0 randomizes the order of tests by default, per release notes.  For my testing, that's bad because I often place simpler tests earlier than more complex ones.  If I call jasmine.getEnv().randomizeTests(false), I think that will solve the problem for me.  But I am not sure because the documentation doesn't say anything about this new method.", "createdAt": "2018-06-04T08:49:48Z", "updatedAt": "2018-06-07T00:16:04Z", "closedAt": "2018-06-06T00:14:01Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ajvincent", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ajvincent", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-05T00:18:17Z", "contents": "You're right. In the first pass for the API docs, we focused on getting the primary use cases populated. There is a lot of stuff on Env that is wrapped up in other interfaces, but things like this are currently used directly from jasmine.getEnv().\nWe would be happy to review a pull request here to add the appropriate documentation comments to Env.js to document randomizeTests and any other things that appear to be missing.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ajvincent", "authorAssociation": "NONE", "createdAt": "2018-06-06T15:42:39Z", "contents": "Nice.  So how do we get the documentation page refreshed?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-07T00:16:04Z", "contents": "Sorry about that, it looks like I named them incorrectly for JSDoc and it didn't put them on the right page. The edge Env page is updated correctly now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1568, "url": "https://github.com/jasmine/jasmine/issues/1568", "title": "Feature request: Matcher that verifies that none of the spies in a SpyObj were called", "contents": "Desired Behavior\nA matcher that verifies that none of the spies of the specified object have been called - i.e. there have been zero interactions with an entire mock service.\nhttpClient = jasmine.createSpyObj('HttpClient',\n  ['get', 'post', 'put', 'delete', 'head', 'options', 'patch']);\n\n// Checks that there have been no calls to httpClient.get, httpClient.post, etc.\nexpect(httpClient).not.toHaveBeenCalled();\n\nCurrent Behavior\nError: <toHaveBeenCalled> : Expected a spy, but got\n  Object({ get: spy on HttpClient.get, post: spy on HttpClient.post, ... })\n\nThus requiring:\nexpect(httpClient.get).not.toHaveBeenCalled();\nexpect(httpClient.post).not.toHaveBeenCalled();\nexpect(httpClient.put).not.toHaveBeenCalled();\nexpect(httpClient.delete).not.toHaveBeenCalled();\nexpect(httpClient.options).not.toHaveBeenCalled();\nexpect(httpClient.head).not.toHaveBeenCalled();\nexpect(httpClient.patch).not.toHaveBeenCalled();\n\nContext\nIf I want to test there have been no HTTP calls for a specific condition, I don't want to have to check every possible method - someone might add a PUT in there but the test doesn't checking for that so still passes.\nOther frameworks such as Java's Mockito have this capability - Mockito.verifyZeroInteractions(mock) - to allow us to verify that a particular service was not interacted with at all.", "createdAt": "2018-06-18T09:47:30Z", "updatedAt": "2018-10-02T19:58:33Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "pcroc", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "pcroc", "company": "NewVoiceMedia"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "nitobuendia", "company": "@Google"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-19T00:48:44Z", "contents": "I like this idea, but I'm not sure on the right way to enable it in Jasmine. Right now, the object returned by createSpyObj is just a plain old javascript object with each of the methods setup as a spy.\nThe simplest thing to do would just be a matcher that loops through all properties on the actual object and checks the call counts for any that are spies. This might have some unexpected behavior if you pass an object without any spies, or where only some of the methods/properties are spied on.\nWe would be happy to review a pull request to add a toHaveNoSpyInteractions matcher that does this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nitobuendia", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-16T04:15:47Z", "contents": "How about having something like .calls. but for all .spies. when created with createSpyObj?\nI have not checked the code, but I would imagine it is possible that when a spy of a spyObj gets called it would not only update its own counter, but also the spies properties in the same fashion but aggregated for all methods.\nThis would allow things such as:\nexpect(mySpyObj.spies).not.toHaveBeenCalled();\nexpect(mySpyOb.spies.calls.count()).toEqual(5);", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nitobuendia", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-16T07:12:08Z", "contents": "I have created #1606 with the previous proposal. It's still a draft, but some discussion are needed around:\n\nWhether this is a good approach.\nWhat to do with the \"expected no properties\" tests as now there will always be a \"spies\" property.\nWhat tests would be expected to ensure everything works properly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-02T19:58:33Z", "contents": "I think we should stay away from adding an additional property to the returned object with spies on it. This would also potentially reduce the use of a new matcher to only work correctly when used in conjunction with createSpyObj. Given that right now we're just looking for a matcher that verifies no interactions, I would still prefer to see a new matcher (something like toHaveNoSpyInteractions) that looks at all of the properties of the actual and checks the call count for any that are spies.\nHope this helps.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1570, "url": "https://github.com/jasmine/jasmine/issues/1570", "title": "Karma + Jasmine infinite freezing", "contents": "326 / 600 tests executed, then hangs.\n19 06 2018 15:54:19.133:WARN [Firefox 52.0.0 (Windows 8.1 0.0.0)]: Disconnected (1 times)\nFirefox 52.0.0 (Windows 8.1 0.0.0) ERROR\n  Disconnected\n\nTried with Chrome - same thing.\n19 06 2018 16:11:34.594:WARN [Chrome 67.0.3396 (Windows 8.1 0.0.0)]: Disconnected (1 times)\nChrome 67.0.3396 (Windows 8.1 0.0.0) ERROR\n  Disconnected\n\nCurrent config:\n    browsers: ['Firefox'],\n    singleRun: true,\n    autoWatch: false,\n    /**\n     * How long will Karma wait for a message from a browser before disconnecting from it (in ms).\n     */\n    browserNoActivityTimeout: 100000,\n    /**\n     * maximum number of tries a browser will attempt to reconnect in the case of a disconnection\n     */\n    browserDisconnectTolerance: 2,\n    browserDisconnectTimeout: 210000,\n    captureTimeout: 60000,\n    retryLimit: 5,\n    concurrency: Infinity,\n\n    frameworks: ['browserify', 'jasmine'],\n\n    client: {\n      mocha: {\n        /*\n        @see https://github.com/karma-runner/karma-phantomjs-launcher/issues/126\n        */\n        timeout: 20000\n      }\n    },\n\n    reporters: ['mocha', 'junit', 'html', 'coverage'],\n\n    plugins: [\n      'karma-junit-reporter',\n      'karma-jasmine',\n      'karma-chrome-launcher',\n      'karma-firefox-launcher',\n      'karma-html-reporter',\n      'karma-browserify',\n      'karma-coverage',\n      'karma-babel-preprocessor',\n      'karma-mocha-reporter',\n    ],\nhardware:\n\nCPU: Intel Xeon E5-1620 v3 @ 3.5GHz\nRAM: 128 GB\nGPU: Nvidia Quadro K2200 4GB RAM\n\nenvironment:\n\nOS:  win 8.1 x64\nnode: v10.0.0\nnpm: 5.6.0\n\nmodules:\n    \"jasmine-core\": \"2.99.1\",\n    \"karma\": \"2.0.3\",\n    \"socket.io\": \"1.4.5\"\n    \"jasmine-ajax\": \"3.4.0\",\n    \"karma-babel-preprocessor\": \"6.0.1\",\n    \"karma-browserify\": \"5.3.0\",\n    \"karma-chrome-launcher\": \"2.0.0\",\n    \"karma-coverage\": \"1.1.1\",\n    \"karma-firefox-launcher\": \"1.1.0\",\n    \"karma-html-reporter\": \"0.2.7\",\n    \"karma-jasmine\": \"1.1.2\",\n    \"karma-junit-reporter\": \"1.2.0\",\n    \"karma-mocha-reporter\": \"2.2.0\",\n    \"babel-polyfill\": \"6.23.0\",\n    \"babel-preset-es2015\": \"6.16.0\",\n    \"babel-preset-es2016\": \"6.22.0\",\n    \"babelify\": \"7.3.0\",\n    \"browserify\": \"14.4.0\",\n    \"browserify-istanbul\": \"2.0.0\",\n    \"eslint\": \"3.19.0\",\n    \"eslint-config-airbnb-base\": \"11.1.3\",\n    \"eslint-plugin-import\": \"2.2.0\",\n    \"gulp\": \"3.9.1\",\n    \"gulp-babel\": \"6.1.2\",\n    \"gulp-clean\": \"0.3.2\",\n    \"gulp-connect\": \"5.0.0\",\n    \"gulp-notify\": \"2.2.0\",\n    \"gulp-param\": \"1.0.3\",\n    \"gulp-replace\": \"0.5.4\",\n    \"gulp-sonar\": \"3.0.1\",\n    \"gulp-sourcemaps\": \"1.6.0\",\n    \"gulp-util\": \"3.0.7\",\n    \"isparta\": \"4.0.0\",\n    \"istanbul\": \"0.4.5\",\n    \"node-notifier\": \"4.6.1\",\n    \"proxyquireify\": \"3.2.1\",\n    \"shelljs\": \"0.7.8\",\n    \"vinyl-buffer\": \"1.0.0\",\n    \"vinyl-source-stream\": \"1.1.0\",\n    \"watchify\": \"3.9.0\",\nNotable observations:\n\nBrowsers tab saturates 1 CPU core usage (~100%)\nMemory usage keeps growing,\n\nfrom about 100mb to 750 in 1 minute on FF\nfrom about 60 to 180 on Chrome\n\n\ntab is unresponsive entirely until gets killed by karma or crashes with crash report (only on FF).\nkarma guys say it's not their fault\njasmine guys say it's not their fault\nkarma-jasmine guys say it's not their fault\n\nrelated issues:\n#1327\nkarma-runner/karma#1788\nkarma-runner/karma#762\nkarma-runner/karma-phantomjs-launcher#126\nkarma-runner/karma-phantomjs-launcher#55\nkarma-runner/karma-phantomjs-launcher#126\nMay this help those who come after us fare better \ud83d\ude09", "createdAt": "2018-06-19T14:18:37Z", "updatedAt": "2018-06-21T00:27:44Z", "closedAt": "2018-06-21T00:27:24Z", "state": "CLOSED", "closed": true, "locked": true, "activeLockReason": "TOO_HEATED", "authorLogin": "Usnul", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Usnul", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-20T00:20:39Z", "contents": "If your suite always failing in the same spot, it might have something to do with your tests themselves, and how they interact with the various test frameworks you're using. Take a look at Steve's comment in #1327 for some options on how to troubleshoot this error. I would also suggest updating to Jasmine 3.1 (and corresponding karma-jasmine updates) ensure this hasn't already been fixed in the 3.0 or later releases.\nWe (Jasmine maintainers) haven't been able to reproduce this case, as it seems to require a fairly complex async suite.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Usnul", "authorAssociation": "NONE", "createdAt": "2018-06-20T11:47:34Z", "contents": "@slackersoft\n\nTake a look at Steve's comment in #1327 for some options on how to troubleshoot this error.\n\nThank you for your response. I have linked that issue too, and I have read and tried everything that would not require node version change or break our build pipeline that was proposed in all of the posts on all of those issues.\nMy post is not really a call for help, I have spent sufficient time here to be convinced that it's not worth more investment from our side. Instead I hope for this to be a good overview for others, and perhaps it will help others some of the time that I have invested.\n\nWe (Jasmine maintainers) haven't been able to reproduce this case, as it seems to require a fairly complex async suite.\n\nYour choice of words is not very accurate. You didn't try to reproduce this issue. Your reasoning is on point though - outlined configuration is much too complex and has only started failing after certain tests were added (added tests run 100% fine, but others don't and the whole thing freezes).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-21T00:27:24Z", "contents": "My post is not really a call for help,\n\nThen it doesn't really sound like it belongs as an issue here. We want to keep this space clear for bugs and issues in Jasmine itself.\nI would also urge you to be careful and considerate when telling others what they have and haven't done. We've invested a significant amount of time in trying to eliminate various timing issues with Jasmine, but this one seems to come primarily from the suite being executed.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1571, "url": "https://github.com/jasmine/jasmine/issues/1571", "title": "CIA: Community, Interfacing and Attitude", "contents": "Jasmine is an amazing project, one that I love and have personally been using for nearly a decade.\nI have been tracking participation of core contributors of jasmine over the past few days here and in related projects. Here's what I have noticed and have an issue with:\n\nPresumption of Incompetence. Assumption is made that the reporter has made a mistake and no issue exists unless proven otherwise.\nDismissal. I have often read \"Thanks for using jasmine!\" in a comment where the comment uses polite words to say \"it is not important to us\".\nDefensiveness. A lot of critique of the project is viewed as an attack on the project and its contributors, this makes any further discussion a lot less productive.\nShifting the blame. Jasmine is used by many other projects and is typically a component of a larger infrastructure in real-world usage, which means that it is rarely used in isolation. I have read a lot of comments along the lines of \"You use Jasmine with X, please address your problems to X instead of Jasmine\" or \"We noticed that you use Jasmine with tests, please address your problems with your tests!\"\n\nI believe the above points are making jasmine an unwelcoming community and is a net negative for the project as a whole and would like to invite a discussion on how to address these.\nExample\nhere is a thread that may serve as anecdotal evidence: #1570\nthe overview goes like so:\n\nA new person (A) presents a problem\nSenior member (S) comments quoting a quote of A back and claiming \"can't reproduce\"\nA corrects S on the reasonable assumption that reproduction was not attempted\nS responds with I would also urge you to be careful and considerate when telling others what they have and haven't done. We've invested a significant amount of time [...]\nS closes the issue\nS locks the issue as \"too heated\"", "createdAt": "2018-06-21T08:23:43Z", "updatedAt": "2018-07-26T12:35:06Z", "closedAt": "2018-07-21T00:56:26Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Usnul", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Usnul", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-21T00:56:26Z", "contents": "I'm going to be short here, since you've expressed a preference for the Jasmine maintainers not to \"use polite words\" when discussing the project.\nWe get a wide variety of issues logged here on github. I try to answer them as best as I can, but I am just one person, and have a life outside of maintaining Jasmine. My questions on issues are generally meant to uncover more details to help solve the problem a user has, and sometimes the solution can be to test your code in a different way. Sometimes, the issue is caused by interactions with other libraries. Specifically with Karma and Angular, some of the other libraries, like Zone.js, actually reach in and \"monkey-patch\" parts of Jasmine.\nI also don't appreciate the multiple issues you have stirred up here (because the issue you reference was created by you). The issue in question (#1570) was a duplicate of another issue (#1327) that has been discussed extensively, including a number of changes to Jasmine to help alleviate the issue. We have been unable to reproduce with Jasmine alone, which makes it much harder to pinpoint where in Jasmine might be causing the problem. You then accused me and other maintainers of not even trying to reproduce the issue:\n\nYour choice of words is not very accurate. You didn't try to reproduce this issue.\n\nNote that you didn't say \"reasonable attempt\" as you indicate here, but none at all. Because of this and your note that\n\nMy post is not really a call for help,\n\nI then closed and locked the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Usnul", "authorAssociation": "NONE", "createdAt": "2018-07-26T12:35:05Z", "contents": "Dear @slackersoft ,\nThank you for your response, I appreciate your open attitude. Your explanation is reasonable, however, it's quite contrarian, with respect and in friendly spirit - I would ask you to read what I have written here as constructive criticism for the project as a whole, not of your person specifically. Personally - I do not want to \"fight\" you or \"win\", I wanted to provide feedback with a hope that it may help make project as a whole better.\nThere is no doubt in my mind that the project is doing exceedingly well as is, the testament to that is success of jasmine and it's widespread adoption.\nAs such, I wish you a wonderful time of the day and I impart a big \"thank you\" for all your work so far.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1572, "url": "https://github.com/jasmine/jasmine/issues/1572", "title": "jasmine.DEFAULT_TIMEOUT_INTERVAL not being respected with async await", "contents": "I have code that goes something like the following:\nit('will always timeout', () => {\n  jasmine.DEFAULT_TIMEOUT_INTERVAL = 999999\n  const x = await someThingNotThatSlow()\n  expect(x).toBe(true);\n}\n\nAnd I get\nError: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n\nI'm quite confident that the async function I'm calling isn't over the timeout. If there is trouble reproducing, I can try and work together an example. My real word scenario has some incidental complexity .I would need to wring out.", "createdAt": "2018-06-26T07:39:28Z", "updatedAt": "2019-02-22T01:43:28Z", "closedAt": "2019-02-22T01:43:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "CADBOT", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "CADBOT", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "CADBOT", "authorAssociation": "NONE", "createdAt": "2018-06-26T07:45:40Z", "contents": "Nevermind, I got it worked out. Of course I figure it out right after opening the issue. Sorry for the spam!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "CADBOT", "authorAssociation": "NONE", "createdAt": "2018-06-26T07:48:29Z", "contents": "False false alarm. It appears to still be happening. I'll take another look in the morning and try and get a toy example working to reproduce.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-06-26T18:01:44Z", "contents": "The DEFAULT_TIMEOUT_WINDOW is designed more for changing the global default timeout, and should be set outside of whatever spec or other async work needs the timeout. If you just want to set the timeout for a single spec, you can pass that along as another argument to it (https://jasmine.github.io/api/edge/global.html#it).\nI would also recommend checking your console, as sometimes errors in async work slip through and cause the test not to complete correctly.\nHope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-22T18:59:40Z", "contents": "The error messages for timeouts have been improved recently (#1567) so updating might also help you track down your error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:43:27Z", "contents": "We haven't heard anything further on this in a while, so I'm going to close it. If you have more information about the behavior you're seeing, please let us know.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1573, "url": "https://github.com/jasmine/jasmine/issues/1573", "title": "jitSpy = spyOn(window, 'Function').and.callThrough(); breaks Jasmine", "contents": "Imagine you would like to spy on new Function() calls. This may be accomplished in your tests by something like so:\nconst mySpy = spyOn(window, 'Function').and.callThrough();\n\nThis works great as expected except if one would like to test with clock. In that case it fails with NullPointerException. The crux of the problem is code which contains `Function.prototype.apply.apply:\n\n\n  \n    \n      jasmine/src/core/Clock.js\n    \n    \n        Lines 90 to 96\n      in\n      74287c5\n    \n    \n    \n    \n\n        \n          \n           self.setTimeout = function(fn, delay, params) { \n        \n\n        \n          \n             return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]); \n        \n\n        \n          \n           }; \n        \n\n        \n          \n            \n        \n\n        \n          \n           self.setInterval = function(fn, delay, params) { \n        \n\n        \n          \n             return Function.prototype.apply.apply(timer.setInterval, [global, arguments]); \n        \n\n        \n          \n           }; \n        \n    \n  \n\n\n\n  \n    \n      jasmine/src/core/QueueRunner.js\n    \n    \n        Lines 54 to 60\n      in\n      8bb0e2d\n    \n    \n    \n    \n\n        \n          \n           QueueRunner.prototype.clearTimeout = function(timeoutId) { \n        \n\n        \n          \n             Function.prototype.apply.apply(this.timeout.clearTimeout, [j$.getGlobal(), [timeoutId]]); \n        \n\n        \n          \n           }; \n        \n\n        \n          \n            \n        \n\n        \n          \n           QueueRunner.prototype.setTimeout = function(fn, timeout) { \n        \n\n        \n          \n             return Function.prototype.apply.apply(this.timeout.setTimeout, [j$.getGlobal(), [fn, timeout]]); \n        \n\n        \n          \n           }; \n        \n    \n  \n\n\n\n  \n    \n      jasmine/src/core/ClearStack.js\n    \n    \n        Lines 44 to 46\n      in\n      9ee7b4e\n    \n    \n    \n    \n\n        \n          \n           var setTimeoutImpl = function clearStack(fn) { \n        \n\n        \n          \n               Function.prototype.apply.apply(realSetTimeout, [global, [fn, 0]]); \n        \n\n        \n          \n           }; \n        \n    \n  \n\n\n\nWith spy enabled on Function Function.prototype.apply.apply raises NPE because Function.prototype.apply is not defined.\nThe issue is that spyOn replaces native Function with an instance of Function which no longer has the prototype.\nSuggested Fix.\nIn all cases where Function.prototype.apply.apply is invoked, replace it with.\n// Place the next line at top of the file in the outer most context so that `Function.prototype`\n// can be captured early.\nconst Function_prototype = Function.prototype;\n\n\nfunction someFunction() {\n  // Now even if `Function` gets replace in `spyOn` the code works fine \n  // Since we are working with the original Function.prototype\n  Function_prototype.apply.apply(...);\n}\n\nSimple workaround in tests\nFor users of jasmine which may run into this problem the following line fixes the issues in your test.\nconst mySpy = spyOn(\u0275global, 'Function').and.callThrough();\n// Patch prototype due to spying on the Function\nFunction.prototype.apply = Function.constructor.prototype.apply;", "createdAt": "2018-07-02T16:51:07Z", "updatedAt": "2018-10-10T00:35:24Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "mhevery", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mhevery", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "nitobuendia", "company": "@Google"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-10T00:23:55Z", "contents": "I'm a bit of two minds on this. On the one hand I would recommend against spying on Function instead preferring to make assertions about the behavior of the function returned. This should lead to less brittle tests, which also check that things are truly working the way you want.\nOn the other hand, I agree with you that Jasmine should protect itself from users changing things about the environment that can cause Jasmine to break. To that end, I would be happy to review a pull request solve this issue.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nitobuendia", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-15T15:16:15Z", "contents": "Clock.js also uses Array.prototype.\n\n  \n    \n      jasmine/src/core/Clock.js\n    \n    \n         Line 168\n      in\n      74287c5\n    \n    \n    \n    \n\n        \n          \n           return Array.prototype.slice.call(argsObj, n); \n        \n    \n  \n\n\nEven if the const Function_prototype = Function.prototype; is applied, using spyOn(window, 'Array'); would make jasmine fail again. Trying to capture all possible window Objects like this would be tedious and not a very good practice to be populating the global space or even namespace.\n\nApproach 1\nOne suggestion here is delegating the prototype property as to the original object. This is:\nwrapper.prototype = originalFn.prototype;\nThis would change:\n\n  \n    \n      jasmine/lib/jasmine-core/jasmine.js\n    \n    \n        Lines 5649 to 5655\n      in\n      12f56fd\n    \n    \n    \n    \n\n        \n          \n           for (var prop in originalFn) { \n        \n\n        \n          \n             if (prop === 'and' || prop === 'calls') { \n        \n\n        \n          \n               throw new Error('Jasmine spies would overwrite the \\'and\\' and \\'calls\\' properties on the object being spied upon'); \n        \n\n        \n          \n             } \n        \n\n        \n          \n            \n        \n\n        \n          \n             wrapper[prop] = originalFn[prop]; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nInto:\n    for (var prop in originalFn) {\n      if (prop === 'and' || prop === 'calls') {\n        throw new Error('Jasmine spies would overwrite the \\'and\\' and \\'calls\\' properties on the object being spied upon');\n      }\n\n      wrapper[prop] = originalFn[prop];\n    }\n    if (originalFn && originalFn.prototype) {\n      wrapper.prototype = originalFn.prototype;\n    }\n\nThe only drawback I can foresee with this approach is that if we try to prototype something on the spy, we would be actually prototyping it on the original object.\n\nApproach 2\nOne idea here to avoid this would be only mapping the methods that are required:\n    if (!wrapper.prototype) wrapper.prototype = {};\n    if (originalFn && originalFn.prototype) {\n      wrapper.prototype.apply = originalFn.prototype.apply;\n      wrapper.prototype.call = originalFn.prototype.call;\n      wrapper.prototype.slice = originalFn.prototype.slice;\n      wrapper.prototype.join = originalFn.prototype.join;\n    }\n\nThis has the advantage of just being a \"read\" of methods. Adding new prototypes would be destroyed with the wrapper. However, now we are back to the point of continuously having to add all the prototype methods which is not ideal.\n\nApproach 3\nThe former can also be solved by simply copying the prototype for non-replace methods.\n    if (!wrapper.prototype) wrapper.prototype = {};\n    if (originalFn && originalFn.prototype) {\n      wrapper.prototype = Object.assign(\n        originalFn.prototype,\n        wrapper.prototype,\n      );\n    }\n\n\nI have done a small quick test:\ntest.js\ndescribe('ClockSpyErrorTest', () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n\n  it('equals true', () => {\n    spyOn(window, 'Array');\n    spyOn(window, 'Function');\n    expect(true).toBe(true);\n  });\n});\n\nWithout any changes, the test breaks with the following console errors:\njasmine.js:5044 Uncaught TypeError: Cannot read property 'apply' of undefined\n    at QueueRunner.clearTimeout (jasmine.js:5044)\n    at cleanup (jasmine.js:5058)\n    at jasmine.js:5000\n    at QueueRunner.attempt (jasmine.js:5128)\n    at QueueRunner.run (jasmine.js:5149)\n    at runNext (jasmine.js:5075)\n    at next (jasmine.js:5082)\n    at QueueRunner.onComplete (jasmine.js:5000)\n    at jasmine.js:5165\n    at MessagePort.channel.port1.onmessage (jasmine.js:2317)\nQueueRunner.clearTimeout @ jasmine.js:5044\ncleanup @ jasmine.js:5058\n(anonymous) @ jasmine.js:5000\nattempt @ jasmine.js:5128\nQueueRunner.run @ jasmine.js:5149\nrunNext @ jasmine.js:5075\nnext @ jasmine.js:5082\n(anonymous) @ jasmine.js:5000\n(anonymous) @ jasmine.js:5165\nchannel.port1.onmessage @ jasmine.js:2317\njasmine.js:3007 Uncaught TypeError: Cannot read property 'call' of undefined\n    at onerror (jasmine.js:3007)\n\nWith the const Function_prototype = Function.prototype; solution, the test fails with:\nTypeError: Cannot read property 'call' of undefined\n    at <Jasmine>\n    at UserContext.it (file:///Users/nito/Google%20Drive/webapps/jasmine-test/test.js:13:18)\n    at <Jasmine>\n\nAdding  const Array_prototype = Array.prototype; makes the test pass. However, now we need to capture all potential prototype breaks such as:\n\nArray.prototype\nFunction.prototype\nObject.prototype\n\nAdding wrapper.prototype = originalFn.prototype; without any other of the previous changes also makes the tests pass. As well as any other of the other approaches suggested here.\nAdditionally, all the 3 approaches here passes all the tests using grunt.\n@slackersoft Would you be willing to approve any of these changes?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-10T00:35:24Z", "contents": "My inclination for this is to add some helper methods to Jasmine's util object (slice and join) that wrap up the Array prototype stuff and reduce some of that groping out from the various places in Jasmine's codebase. I think I might actually look for a new thing in Jasmine (timers? maybe) that holds onto the originals and does the apply/call logic there when needed.\nWe might also want to do something like your option 1 (copying over the prototype of the function being spied upon), but that would be more to keep a users code working.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1574, "url": "https://github.com/jasmine/jasmine/issues/1574", "title": "[v3.1.x] Potential regression with custom matcher usage", "contents": "When using a custom matcher (like toBeUseless below)  inside a then method of a Promise, Jasmine will throw:\n(node:41179) UnhandledPromiseRejectionWarning: TypeError: expect(...).toBeUseless is not a function\n    at Promise.resolve.then (/Users/cedric/Code/tests/jasmine-v3-custom-matchers/spec/custom-matcher-in-promise.spec.js:19:32)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n\nExpected Behavior\nLet's consider a dumb custom matcher:\nconst customMatcher = {\n  toBeUseless: (util, customEqualityTesters) => ({\n    compare: (actual, expected) => ({\n      pass: true, message: 'useless'\n    })\n  })\n}\nUsed a in unit test:\ndescribe('Custom matcher', () => {\n\n  beforeEach(() => jasmine.addMatchers(customMatcher));\n  \n  it('should succeed', () => {\n    expect(true).toBeUseless(true);\n  });\n\n  it('should succeed in promise', () => {\n    Promise.resolve()\n      .then(() => expect(true).toBeUseless(true));\n  });\n\n});\nThis will succeed if using Jasmine v2.99\nYou can check out a simple reproduction repository here: https://github.com/cexbrayat/jasmine-v3-custom-matchers/blob/master/spec/custom-matcher-in-promise.spec.js\nCurrent Behavior\nThe same unit tests using Jasmine v3.1 with the following error:\n(node:41179) UnhandledPromiseRejectionWarning: TypeError: expect(...).toBeUseless is not a function\n    at Promise.resolve.then (/Users/cedric/Code/tests/jasmine-v3-custom-matchers/spec/custom-matcher-in-promise.spec.js:19:32)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n\nNote that the error for the unknown custom matcher only arises in the then case.\nSee the same reproduction repo, with this PR cexbrayat/jasmine-v3-custom-matchers#1\nA simple npm install, npm test will reproduce the issue.\nPossible Solution\nWeirdly, registering the custom matcher again in the then makes the test pass:\ndescribe('Custom matcher', () => {\n\n  beforeEach(() => jasmine.addMatchers(customMatcher));\n  \n  it('should succeed', () => {\n    expect(true).toBeUseless(true);\n  });\n\n  it('should succeed in promise', () => {\n    Promise.resolve()\n      .then(() => {\n        // register again the matcher\n        jasmine.addMatchers(customMatcher);\n        expect(true).toBeUseless(true);\n      });\n  });\n\n});\nSuite that reproduces the behavior (for bugs)\nSee above or https://github.com/cexbrayat/jasmine-v3-custom-matchers\nContext\nThis bugs hits us when bumping an Angular project from Jasmine v2.99 to v3.1, in which we use custom matchers.\nYour Environment\n\n\nVersion used: v3.1.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): node v8.11.2\nOperating System and version (desktop or mobile): MacOS 10.13.5\nLink to your project:\n\nOriginal issue: Ninja-Squad/globe42#203\nDumbed down repro: https://github.com/cexbrayat/jasmine-v3-custom-matchers", "createdAt": "2018-07-02T19:54:54Z", "updatedAt": "2018-07-19T00:37:30Z", "closedAt": "2018-07-06T10:47:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cexbrayat", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "cexbrayat", "company": "@Ninja-Squad "}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "cexbrayat", "authorAssociation": "NONE", "createdAt": "2018-07-06T10:46:06Z", "contents": "Closing as it looks like:\n  it('should succeed in promise', (done) => {\n    Promise.resolve()\n      .then(() => {\n        expect(true).toBeUseless(true);\n        done();\n      });\n  });\ndoes not fail, so this is just a matter of async tests not calling done().", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-19T00:37:29Z", "contents": "Jasmine also supports returning a Promise from your specs, so return Promise.resolve().then(...) should also work without the done callback.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1575, "url": "https://github.com/jasmine/jasmine/issues/1575", "title": "ERROR: TypeError: s.substring is not a function", "contents": "Expected Behavior\njasmin nicely print error\nCurrent Behavior\nfails with murky message\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n  it('d', async(()=>{\n//TypeError, like  (stack is from when it's wropped in try /catch)\nTypeError: Cannot read property '$injector' of undefined\n    at http://localhost:9876/_karma_webpack_/webpack:/src/tests/newPayment.spec.ts:214:41\n    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone.js:388:1)\n    at AsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.AsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone-testing.js:713:1)\n    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone-testing.js:285:1)\n    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone.js:387:1)\n    at Zone.push../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone.js:138:1)\n    at http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone.js:872:1\n    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone.js:421:1)\n    at AsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.AsyncTestZoneSpec.onInvokeTask (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone-testing.js:697:1)\n    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvokeTask (http://localhost:9876/_karma_webpack_/webpack:/node_modules/zone.js/dist/zone-testing.js:316:1)\n\n}));\n});\n\nfails with \nTypeError: s.substring is not a function\n    at truncate (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4652:11)\n    at PrettyPrinter.append (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4637:18)\n    at PrettyPrinter.emitScalar (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4478:10)\n    at PrettyPrinter.format (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4434:14)\n    at PrettyPrinter.emitArray (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4496:12)\n    at PrettyPrinter.format (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4440:16)\n    at PrettyPrinter.formatProperty (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4632:14)\n    at http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4594:12\n    at PrettyPrinter.iterateObject (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4471:7)\n    at PrettyPrinter.emitObject (http://localhost:9876/absolute/home/mememe/dvl/proj/proj/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?daba65c98fa088349a3e9d7df843a63405ccfc15:4587:26)\nContext\n\n\nYour Environment\n\n\nVersion used:3.1.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):  Chrome 66.0.3359.139 , node v8.11.3\nOperating System and version (desktop or mobile):  4.15.0-23-generic #25-Ubuntu SMP\nLink to your project:", "createdAt": "2018-07-06T14:10:01Z", "updatedAt": "2019-05-21T00:18:39Z", "closedAt": "2019-05-21T00:18:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bushuyev", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "bushuyev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "marinvirdol", "company": null}, {"login": "fr0", "company": null}, {"login": "Jonatino", "company": "@Anglur "}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-20T00:50:42Z", "contents": "Unfortunately, I think you might have removed a bit too much from your example code to help diagnose the underlying issue. It looks like you're using Angular and Karma to run your Jasmine suite, and based on the initial error message with $injector, probably angular-mocks or something similar. My best guess based on what I see here is that something in your test setup is causing one of those things to break and when Jasmine tries to format the error message one of the objects in the tree provides it's own toString() function (or possibly jasmineToString()) and the object returned by that isn't fully a String in that it doesn't have a substring function on it.\nFor now, you're probably going to have to dig into your tests and figure out what is causing the original error, but I would be happy to review a pull request for Jasmine that allowed it to cope with toString or jasmineToString functions that return objects that don't appear to be strings.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "marinvirdol", "authorAssociation": "NONE", "createdAt": "2018-09-18T12:06:15Z", "contents": "I experience the same issue", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-02T19:49:37Z", "contents": "@marinvirdol If you have any other information or a small sample suite that reproduces the error, we can look into it a bit more, but at this point, I don't have enough information to provide any more help than above.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fr0", "authorAssociation": "NONE", "createdAt": "2018-10-31T22:13:24Z", "contents": "I experienced this issue today:\nTypeError: s.substring is not a function\n    at truncate (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5289:11)\n    at PrettyPrinter.append (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5274:18)\n    at PrettyPrinter.emitScalar (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5115:10)\n    at PrettyPrinter.format (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5071:14)\n    at PrettyPrinter.emitArray (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5133:12)\n    at PrettyPrinter.format (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5077:16)\n    at PrettyPrinter.formatProperty (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5269:14)\n    at http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5231:12\n    at PrettyPrinter.iterateObject (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5108:7)\n    at PrettyPrinter.emitObject (http://localhost:9876/base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?1f336da4025323945fc818c69bdc564a85081e4e:5224:26)\n\nI put breakpoints in jasmine.js and discovered that the truncate function was being given a numeric value where it expects a string.\nThe numeric value was being passed in from PrettyPrinter.append via PrettyPrinter.emitScalar via PrettyPrinter.format.\nThe object being formatted is a ZoneTask instance from zone.js. It's odd that the ZoneTask.toString() value would return a number rather than a string (this seems like a bug in zone.js).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T18:31:39Z", "contents": "Given that Jasmine is calling toString() but getting a number back, this definitely sounds like an issue with zone.js and not necessarily Jasmine.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Jonatino", "authorAssociation": "NONE", "createdAt": "2018-11-19T19:04:29Z", "contents": "Also getting this error.\nERROR: TypeError: s.substring is not a function\nTypeError: s.substring is not a function\n    at truncate (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4943:11)\n    at PrettyPrinter.append (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4928:18)\n    at PrettyPrinter.emitScalar (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4769:10)\n    at PrettyPrinter.format (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4725:14)\n    at PrettyPrinter.emitArray (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4787:12)\n    at PrettyPrinter.format (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4731:16)\n    at PrettyPrinter.formatProperty (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4923:14)\n    at http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4885:12\n    at PrettyPrinter.iterateObject (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4762:7)\n    at PrettyPrinter.emitObject (http://localhost:9876/absoluteC:/git/UWF/AngularApps/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?a1eb923d36d1ca53b93387cb5312668373ad9ef2:4878:26)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Jonatino", "authorAssociation": "NONE", "createdAt": "2018-11-19T20:01:56Z", "contents": "angular/zone.js#1153 (comment)\nThe zone.js team will be working on a fix in the case where ZoneTask.toString() returns a number instead of a string.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:47:16Z", "contents": "It looks like this has been fixed in zone.js v0.8.27. Please update your dependency there and try this again. Please let us know if you're still seeing the issue so we can look into it further.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1576, "url": "https://github.com/jasmine/jasmine/issues/1576", "title": "\"Stop execution on spec failure\" does not work", "contents": "Expected Behavior\n\n\n\"Stop execution on spec failure\" does not work\nCurrent Behavior\n\n\nThe specs keep executing even if a previous spec has failed.\nYour Environment\n\n\nJasmine core : v3.1.0\nChrome 67\nOperating System and version (desktop or mobile): OSX 10.13.5", "createdAt": "2018-07-07T20:52:04Z", "updatedAt": "2019-01-23T01:48:24Z", "closedAt": "2019-01-23T01:48:24Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "maximedupre", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "maximedupre", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "johnjbarton", "company": "@google"}], "comments_count": 8, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-20T00:54:24Z", "contents": "It looks like it's working in my environment. Can you give me a bit more information about how you're running your specs and maybe an example suite that reproduces the error to help with troubleshooting?\nThanks", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maximedupre", "authorAssociation": "NONE", "createdAt": "2018-08-18T15:30:11Z", "contents": "It seems to stop the execution, but only for the current describe. Shouldn't it bail for the whole test suite?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-22T00:37:09Z", "contents": "Do you have an example suite that demonstrates the error? This is what I'm seeing when I check the \"stop execution on spec failure\" checkbox.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maximedupre", "authorAssociation": "NONE", "createdAt": "2018-08-31T14:26:59Z", "contents": "Please clone https://github.com/maximedupre/jasmineIssue1576, change directory to the repo and run npm test\nAs you can see in the screenshot, there is an error in describe('1', ..., but describe('2'... is still executed. The execution is stopped only in the describe context, not for the whole suite.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-09-26T00:22:19Z", "contents": "Hmm, you're right. There seems to be something funny going on when the suite is run through Karma. When I take the same suite and run with just Jasmine, it stops after the first failure correctly.\nIt might be worth bringing this up with the Karma or Karma-Jasmine folks to see if it's something they have any more info on what might be happening.\nIf we can narrow down what Jasmine might be doing to cause this, I will be happy to review a pull request to fix it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-12-21T16:41:10Z", "contents": "Almost certainly a karma-jasmine issue, fixed in v2.x", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "maximedupre", "authorAssociation": "NONE", "createdAt": "2018-12-24T17:59:39Z", "contents": "I'm using \"karma-jasmine\": \"2.0.1\" and it has not been fixed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-23T01:48:24Z", "contents": "It looks like this is an issue with Karma-Jasmine and not Jasmine itself. Closing this.\nIf you're still seeing the issue, I'm sure the Karma-Jasmine team would appreciate a reproduction case to help them resolve the issues.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["Karma"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1577, "url": "https://github.com/jasmine/jasmine/issues/1577", "title": "callFake on express route", "contents": "I am using Jasmine for test and meet some problems with callFake.\nI fake fetchPanelRowData function in my test, but it still steps into original fetchPanelRowData.\nexpress dashboardRouter:\nexports.fetchPanelRowData = (req, res) => {\n    ...\n}\n\nspec:\nconst request = require('supertest');\nconst app = require('../../app');\nconst dshRouter = require('../../routes/dashboardRouter');\n\ndescribe('test dashboard router: ', () => {\n\n    it('test fetchPanelRowData', async () => {\n        spyOn(dshRouter, 'fetchPanelRowData').and.callFake((req, res) => {\n            res.status(500).end();\n        });\n\n        let response = await request(app).post('/api/fetchPanelRowData');\n        expect(response.statusCode).toBe(500);\n        expect(dshRouter.fetchPanelRowData).toHaveBeenCalled();\n    })\n})\n\nAny ideas?", "createdAt": "2018-07-10T00:58:40Z", "updatedAt": "2018-10-22T18:37:07Z", "closedAt": "2018-10-22T18:37:07Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tzjoke", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tzjoke", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-21T00:31:49Z", "contents": "How are you requireing your dashboardRouter in the code under test? spyOn works by replacing the function on the root object with a new function that is a spy, so if the live code saves a reference to the function itself, replacing it will happen too late.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-22T18:37:07Z", "contents": "Closing this since we haven't heard anything in a number of months.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1578, "url": "https://github.com/jasmine/jasmine/issues/1578", "title": "beforeAll called non non-focused specs", "contents": "From my understanding, for the following tests, the beforeAll on the \"disabled suite\" should no be called, but it is.\ndescribe.only(\"enabled suite\", () => {\n  it(\"enabled test\", () => {\n  });\n});\n\ndescribe(\"disabled suite\", () => {\n  beforeAll(() => {\n    console.log(\"should not run\");\n  });\n\n  it(\"disabled\");\n});\n\nThis is on 23.4.0.\nYour Environment\n\n\nVersion used: This is on 23.4.0.", "createdAt": "2018-07-11T18:58:10Z", "updatedAt": "2018-07-19T01:41:58Z", "closedAt": "2018-07-19T01:41:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rlotufo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rlotufo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-19T00:50:14Z", "contents": "The .only suffix isn't the Jasmine mechanism to focus a suite or spec, Jasmine uses an f prefix, so describe becomes fdescribe and it becomes fit. Additionally, Jasmine is only up to version 3.1.0, not 23.4.0. That version number looks like it probably came from Jest and not Jasmine.\nHope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "rlotufo", "authorAssociation": "NONE", "createdAt": "2018-07-19T01:41:39Z", "contents": "Indeed, I'm sorry, I posted this to the wrong project. We can close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1579, "url": "https://github.com/jasmine/jasmine/issues/1579", "title": "pending() in beforeEach does not stop execution", "contents": "Expected Behavior\nCalling pending() in beforeEach should allow the user to prevent further execution of a spec.\nCurrent Behavior\nCalling pending() in the spec itself stops spec execution while calling it in beforeEach only marks the test as pending but does not stop execution.\nSuite that reproduces the behavior (for bugs)\n./node_modules/.bin/jasmine --random=false dummy.spec.js of\ndescribe(\"pending in body\", () => {\n  it(\"should not explode\", () => {\n    pending(\"Stop execution or things will explode\");\n    console.log(\"body: boom!\");\n  });\n});\n\ndescribe(\"pending in beforeEach\", () => {\n  beforeEach(() => pending(\"Stop execution or things will explode\"));\n\n  it(\"should not explode\", () => {\n    console.log(\"beforeEach: boom!\");\n  });\n});\nprints\nStarted\n*beforeEach: boom!\n*\n\nPending:\n\n1) pending in body should not explode\n  Stop execution or things will explode\n\n\n2) pending in beforeEach should not explode\n  Stop execution or things will explode\n\n2 specs, 0 failures, 2 pending specs\nFinished in 0.009 seconds\n\nContext\nIn our environment we want to selectively stop test execution for client-server tests when server is not there. Marking the spec as pending is not sufficient since a complex initialization is started that leads to some very hard to debug exceptions in afterAll.\nYour Environment\n\nnode v8.10.0\njasmine 3.1.0", "createdAt": "2018-07-17T07:31:14Z", "updatedAt": "2019-01-17T21:30:04Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "webmaster128", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "webmaster128", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "johnjbarton", "company": "@google"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-25T00:43:31Z", "contents": "The current mechanism for this is the --stop-on-failure CLI argument. This is also configurable in your jasmine.json as stopSpecOnExpectationFailure. If this isn't working with pending() we definitely need to fix that.\nI would also be happy to review a pull request that makes pending() always behave as if stopSpecOnExpectationFailure is set.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-02T22:55:48Z", "contents": "We hit a similar issue, but I am confused by the answer here.\nIf we set stopSpecOnExpectationFailure, the pending() will work when called in beforeAll()?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-09T01:04:01Z", "contents": "stopSpecOnExpectationFailure should only affect what pending does in a beforeEach not a beforeAll. Jasmine runs a beforeAll as part of a suite, where a beforeEach is run as part of a spec.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-09T01:52:05Z", "contents": "Thanks, so what should pending() mean in beforeAll()?  I believe the intention was for the entire suite to be set pending, but that was not the result.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-17T21:30:04Z", "contents": "A call to pending() from a beforeAll should mark all specs within the describe as pending, but Jasmine may still run them as long as their status continues to be pending after execution. This should be similar to how calling pending works within a beforeEach without stopSpecOnExpectationFailure (or oneFailurePerSpec) enabled.\nThis may be a future looking statement, I'm not sure that Jasmine has any tests that assert on the interaction of pending and beforeAll. If this isn't the case currently, I would also be happy to review a pull request to at least define that functionality. Given the current mechanisms for handling exiting early, I'm not sure what the effort would be to make pending also exit the describe early without exiting the entire suite.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1580, "url": "https://github.com/jasmine/jasmine/issues/1580", "title": "possibility to mark describe/it's to run mandatory, also when there are focused tests", "contents": "We run our login in a spec as a test (because in Protractors \"onPrepare\" no expect-statements may run).\nWhen now working on another spec/describe/it of the application under test I'd like to mark this describe and/or it as focused, so when I run, only login and the part I'm working on gets executed.\nBecause of the number of tests and people working on the code, it's quite time consuming and error prone to focus/unfocus manually all \"mandatory\" describe/it blocks to ensure, that the application under tests reaches the one \"describe/it\" we're currently working on.\nExpected Behavior\nPossibility to mark describe/it as \"mdescribe\"/\"mit\" (mandatory describe/it). These parts shall not be ignored by a focused test execution, but shall not define a focused execution on its own.\nCurrent Behavior\nNo possibility to define/mark describe/it-blocks that need to be executed also in focused execution.\nSuite that reproduces the behavior (for bugs)\n\n/*abstract structure of my idea \nin our case all those describes are in different files and get called via a caller-function*/\nmdescribe(\"login\", function() {\n});\nmdescribe(\"create customer\", function(){\n});\ndescribe(\"add tax data\", function(){\n});\ndescribe(\"add address data\", function(){\n});\nfdescribe(\"add category tags\", function(){\n});", "createdAt": "2018-07-18T13:38:09Z", "updatedAt": "2018-08-10T00:59:42Z", "closedAt": "2018-08-10T00:59:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "zwingliernst", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "zwingliernst", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-02T00:54:16Z", "contents": "Have you tried using beforeAll for the shared setup instead of a describe that has to be run in the appropriate order? The beforeAll will be run as part of you Jasmine suite (not just Protractor) so expect should work as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "zwingliernst", "authorAssociation": "NONE", "createdAt": "2018-08-02T11:25:32Z", "contents": "I thought of it as well, but face a couple of issues with:\n\nin \"afterEach\" there are relevant actions, that are to be executed also for the login\nin the Reporting \"beforeAll\" doesn't trigger a report while \"it\" does\nThe login was a slightly simplified example. I also need to execute some basic test cases (like create customer, add income values) in order to run the it I'm working on. So there are (data-)dependencies. One test case creates the data, that I need in another.\n\nWhat do you think of the idea, closing the gap between xit (ignore me) and fit (only me), by adding a mit (I run in normal and focused mode)?\n(same for describe of course)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-10T00:59:42Z", "contents": "For the same reasons we moved to making randomized execution order the default in 3.0, that we don't want to include a feature like this into Jasmine itself. Ideally, each test should be isolated from any/all other specs in your suite.\nIf you're using a previous test primarily because the test code would be duplicated, you might try defining a function that can execute that code in all of the relevant places. If it's primarily because of suite execution time, I would figure out which parts can/should be pulled out to something like a beforeAll possibly with a single it for some of the expectations that everything there was set up correctly.\nI don't think this is something we're going to add to Jasmine at this time, so I'm going to close this. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1582, "url": "https://github.com/jasmine/jasmine/issues/1582", "title": "[Question] Testing WebSockets with Jasmine", "contents": "Could some one please provide a working code example, on how to test WebSockets using Jasmine syntax and spies? (Do I need any additional libraries like Rxjs or what not?)", "createdAt": "2018-07-19T11:52:06Z", "updatedAt": "2018-07-25T00:30:10Z", "closedAt": "2018-07-25T00:30:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Jakems777", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Jakems777", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-25T00:30:10Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing this.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1583, "url": "https://github.com/jasmine/jasmine/issues/1583", "title": "Uncaught TypeError: Cannot read property 'classList' of undefined thrown", "contents": "Hi,\nJasmine: 2.0.4\nThis error is logged to console sometime afterEach completes and sometime beforeEach starts.\nUncaught TypeError: Cannot read property 'classList' of undefined thrown\nAny ideas how to diagnose?\nCheers\nJeremy", "createdAt": "2018-07-23T09:25:33Z", "updatedAt": "2018-10-22T18:38:05Z", "closedAt": "2018-10-22T18:38:05Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "greengumby", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "greengumby", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-24T00:32:28Z", "contents": "Jasmine pre-3.0 doesn't use classList since some of the supported browsers don't support it. (The only place I even see Jasmine 3.x using it is in the toHaveClass matcher).\nMaybe you have some async code that is still running after your test has completed. Newer versions of Jasmine have better support for different ways of testing asynchronous code, supporting Promises and the async keyword.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-22T18:38:05Z", "contents": "Closing this since we haven't seen any further discussion in a number of months.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1584, "url": "https://github.com/jasmine/jasmine/issues/1584", "title": "Error acessing availableMatchers on IE8", "contents": "I'm running Jasmine with Karma on IE8 and there's a error occurring when Jasmine-core try to run through the array of availableMatchers.\nThe error is caused because IE8 treats arrays declarations syntax different of modern browsers, not allowing the last item to be postfixed with a comma without adding an extra undefined item to array like in the image bellow\n\nExpected Behavior\nJasmine core should iterate through availableMatchers array without issue on any compatible browser, like IE8.\nCurrent Behavior\nJasmine-core are throwing an exception when try to access the last item of availableMatchers (the undefined item that IE8 adds to array)\nPossible Solution\nRemove comma after the last item on declaration of availableMatchers\nYour Environment\n\n\nVersion used: Internet Explorer 8.0.7601.17514\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): IE8\nOperating System and version (desktop or mobile): Windows 7", "createdAt": "2018-07-23T18:44:07Z", "updatedAt": "2018-07-24T00:38:38Z", "closedAt": "2018-07-24T00:38:38Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Tanato", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Tanato", "company": "CI&T Software S/A"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-24T00:38:38Z", "contents": "Jasmine 3.0 no longer supports IE 8 & 9 as more people move away from them. There are probably other things that also don't work there, and we decided it wasn't worth the effort to continue to maintain code to support these older browsers.\nThis isn't something we're looking to fix in future versions of Jasmine. Closing this.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1586, "url": "https://github.com/jasmine/jasmine/issues/1586", "title": "spy on an objects object", "contents": "This is a netsuite based unit test. So we generally use apis. I am new to jasmine. I have an api which is in a window. So this returns an object. I have to spy on that object.\nfunction userEventBeforeLoad_addCusRecWf(type){\nnlapiGetField(\"custentity_cybersource_error_code\").setDisplayType(\"hidden\");\n}\nso here I have to spy on setDisplayType(\"hidden\");\nI need to check if it is actually hidden or not. Is there a way to do that.\nnlapiGetField is in window.\ni.e\nwindow.nlapiGetField = function(){\nreturn{\nsetDisplayType: function()\n}\n}", "createdAt": "2018-07-24T20:55:44Z", "updatedAt": "2019-02-22T01:36:57Z", "closedAt": "2019-02-22T01:36:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sirishasriramineni207", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "sirishasriramineni207", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-07-27T00:44:36Z", "contents": "It really depends on what exactly you're trying to test for.\nIf you want to test that the custentity_cybersource_error_code has been hidden, you might want to get it again in your test and inspect it to see if it is hidden. This will depend on what the api you're using provides for this kind of inspection. It might allow you to do something like:\nexpect(nlapiGetField(\"custentity_cybersource_error_code\").getDisplayType()).toEqual(\"hidden\");\nIf that isn't possible, you might be looking at doing something like providing yourself a mock version of the api and using spies. In order to spy on function that the nlapiGetField function returns, you're going to have to spy on that function as well, or invert the dependency and inject the function into your code under test so you provide a fake that way.\nIf possible, I would still recommend trying to check the actual state of the component under test instead of mocking.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "sirishasriramineni207", "authorAssociation": "NONE", "createdAt": "2018-07-27T13:46:49Z", "contents": "Thanks for the answer.\nIt is helpful.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1587, "url": "https://github.com/jasmine/jasmine/issues/1587", "title": "Zone is needed for the async() test helper but could not be found.", "contents": "Are you creating an issue in the correct repository?\nI'm writing a project in Angular 6.x. This is a new project so tests are just getting started.\nI'm running tests and getting the following error when using async():\nZone is needed for the async() test helper but could not be found.\nPlease make sure that your environment includes zone.js/dist/zone.js\n\nIs this a configuration issue? I'm not sure where to include Zone because I've tried everywhere and nothing seems to fix this.\n\nExpected Behavior\nI expect requiring or importing Zone to fix the issue but see no progress. I've tried it in all places I can think of.\nCurrent Behavior\nThis error throws on all tests that use async()\nPossible Solution\nSuite that reproduces the behavior (for bugs)\n\ndescribe('AppComponent', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [\n        AppComponent,\n      ],\n      imports: [AtlasLibModule],\n    }).compileComponents();\n  }));\n\n}\nContext\nSimply trying to run tests on a new project.\nYour Environment\nIntellij IDEA Ultimate 2018.1\nWindows 10\nJasmine 3.0\nWallaby.js\nAngular 6.x", "createdAt": "2018-07-28T22:23:16Z", "updatedAt": "2018-07-31T22:15:32Z", "closedAt": "2018-07-31T22:15:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dudewad", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "dudewad", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "dudewad", "authorAssociation": "NONE", "createdAt": "2018-07-31T22:15:32Z", "contents": "This was a configuration with the WallabyJs Test running. I had improperly configured the testing file (importing the angular polyfills needs to be done in a specific way).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1589, "url": "https://github.com/jasmine/jasmine/issues/1589", "title": "How to reuse code of 'it' block / Is there a way we can call 'it' block in other spec files?", "contents": "Hi,\nI have multiple spec files in which I want to reuse the code of 'it' block from some other spec file just to avoid code redundancy.\nIs there a way to achieve this purpose?", "createdAt": "2018-08-08T05:04:47Z", "updatedAt": "2018-09-21T14:52:12Z", "closedAt": "2018-08-09T02:33:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "bharukaRupesh", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "bharukaRupesh", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "fetis", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-09T02:33:29Z", "contents": "If you have code that you want to test with something like a shared example, but doesn't make sense to be fully pulled out into a separate component, you should be able to write a function that makes specs.\nI've done something like this before:\nfunction sharedExamples(args) {\n  it('does something arg based', function () {\n    // use the args and build your tests.\n  });\n}\nIn the future you are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself. Closing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "fetis", "authorAssociation": "NONE", "createdAt": "2018-09-21T14:52:11Z", "contents": "@bharukaRupesh see this answer for an example https://stackoverflow.com/a/52446198/2145997\n@slackersoft approach with args will fail in real life because args normally are defined on beforeEach section, whic invoked later than function call", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1590, "url": "https://github.com/jasmine/jasmine/issues/1590", "title": "Jasmine 3.2.0 breaks spyOn().and.returnValue(Promise.reject())", "contents": "Expected Behavior\nWhen trying to create a spy using spyOn(things, 'function).and.returnValue(Promise.reject()), I expect the function to have a spy.\nCurrent Behavior\nWhen trying to create a spy using spyOn(things, 'function).and.returnValue(Promise.reject()), the function does not change to a spy. It is the original function still. Doing so with a Promise.resolve() correctly makes a spy.\nLogging out fetch.fetch within main shows the actual fetch function instead of the spy.\nThis behavior worked as intended until jasmine updated to 3.2.0;\n\nimport * as fetch from './fetch';\nimport Promise from 'bluebird';\nexport async function main(event, context, callback) {\n    try {\n        await Promise.map(things, (thing) => {\n            return fetch.fetch(thing);\n        });\n\n        return callback();\n    } catch (error) {\n        console.error(error);\n    }\n}\nimport { main } from './thing';\nimport * as fetch from './fetch';\ndescribe(\"main\", function() {\n    it('errors correctly', (done) => {\n        const fetchSpy = spyOn(fetch, 'fetch').and.returnValue(Promise.reject({ message: 'failure' }));\n\n        main({}, {}, () => {\n            expect(fetchSpy).toHaveBeenCalled();\n            done();\n       });\n    });\n});\nContext\nJasmine updating to 3.2.0 (via Package.json of ^3.0.0) broke our build machine of previously passing tests.\nYour Environment\n\nVersion used: 3.0.0, 3.1.0, 3.2.0 Jasmine\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Node 8.1.0\nOperating System and version (desktop or mobile): Mac Sierra & Alpine Linux build machine", "createdAt": "2018-08-10T15:11:42Z", "updatedAt": "2019-05-01T13:33:55Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "veeto620", "authorAssociation": "NONE", "participants_count": 5, "participants_data": [{"login": "veeto620", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "bobbyg603", "company": null}, {"login": "bwknight877", "company": "@tanium "}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-11T00:38:01Z", "contents": "Hmmm, it seems like this might be some kind of side effect from trying to capture unhandled rejections to report them with the spec, but I can get a reproduction case where the spy isn't actually installed. The extra stripped down example that I think should be equivalent to what you've got is (this should just strip out your fetch function being spied upon and bluebird):\nconst foo = { bar: function() {} };\n\nasync function main(callback) {\n  try{\n    await foo.bar();\n\n    return callback();\n  } catch(e) {\n    console.error(e);\n  }\n}\n\ndescribe(\"Apple\", function() {\n  it(\"mercury\", function(done) {\n    const thingSpy = spyOn(foo, 'bar').and.returnValue(Promise.reject({ message: 'failure' }));\n\n    main(() => {\n      expect(thingSpy).toHaveBeenCalled();\n      done();\n    });\n  });\n});\nWhen I run this the console.error line prints out the error, but since the callback is never invoked because of the rejected Promise, Jasmine times out on the spec. If you only have the callback for your test code, you might take a look at the new async functionality in Jasmine and use async/await or return a Promise in your spec itself, which might just simplify your test code, though I wouldn't expect it to fix it.\nLet me know if there is something crucial I stripped out in my sample spec or something else I've missed that might be contributing to the error.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bobbyg603", "authorAssociation": "NONE", "createdAt": "2018-10-30T17:30:08Z", "contents": "Any update here?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T21:52:56Z", "contents": "As I mentioned above, I haven't been able to reproduce this error, which makes it difficult to find a solution. If you can provide a simplified suite with all of the code that reproduces the issue, I'll be happy to take another look.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "bwknight877", "authorAssociation": "NONE", "createdAt": "2018-11-03T00:29:45Z", "contents": "I think I have a repro, but using returnValues() using Jasmine 3.3.0 and nodejs 8.11.3:\nfile is saved as bar.spec.js\n'use strict';\n\nconst bar = {\n  test() {\n    return Promise.resolve('Hello World');\n  },\n};\n\ndescribe('bar', () => {\n  fit('jasmine suite error', async () => {\n    // multiple return values to test calls that may fail\n    // a few times but succeed after a few retries\n    spyOn(bar, 'test').and.returnValues(\n      Promise.reject(new Error('bad')),\n      Promise.reject(new Error('worse')),\n      Promise.resolve('things are ok'),\n    );\n\n    try {\n      await bar.test();\n      fail();\n    } catch (err) {\n      expect(err.message).toBe('bad');\n    }\n\n    expect(bar.test).toHaveBeenCalled();\n  });\n});\nrunning it, I get the following output:\n~/source/jasmine-snafu (master #) $ npx jasmine *.spec.js\nDEPRECATION: Setting throwOnExpectationFailure directly on Env is deprecated, please use the oneFailurePerSpec option in `configure`\nDEPRECATION: Setting randomizeTests directly is deprecated, please use the random option in `configure`\nStarted\n.\n\n\nSuite error: bar\n  Message:\n    Error: worse\n  Stack:\n    Error: worse\n        at UserContext.fit (/Users/azure.diamond/source/jasmine-snafu/bar.spec.js:15:22)\n        at <Jasmine>\n        at runCallback (timers.js:810:20)\n        at tryOnImmediate (timers.js:768:5)\n        at processImmediate [as _immediateCallback] (timers.js:745:5)\n\n1 spec, 1 failure\nFinished in 0.009 seconds\n\nIt seems like if you have returnValues() with multiple return values, and there are more than one Promise rejection in there, it will cause issues.\nBased on the output though, the test succeeded, but the error was still thrown.\nI have a few tests where I have retry logic around code that makes network calls, and I use returnValues() to return a few failed promises and then a successful one to make sure my retry logic will actually retry, but eventually succeed.\nI updated another project to Jasmine 3.3.0 and had to fix this in a few tests of mine just last week.  For whatever reason I can't create a simple repro using just .returnValue(Promise.reject(new Error('bad')) right now though, I'll update if I can revert my changes and condense it down to a simple repro\nif I use bluebird instead of the default nodejs 8.x Promise library, I get a slightly different error:\n~/source/jasmine-snafu (master *) $ npx jasmine\nDEPRECATION: Setting throwOnExpectationFailure directly on Env is deprecated, please use the oneFailurePerSpec option in `configure`\nDEPRECATION: Setting randomizeTests directly is deprecated, please use the random option in `configure`\nStarted\nF\n\nFailures:\n1) bar jasmine suite error\n  Message:\n    Error: worse\n  Stack:\n    Error: worse\n        at UserContext.it (/Users/azure.diamond/source/jasmine-snafu/bar.spec.js:17:22)\n        at <Jasmine>\n        at runCallback (timers.js:810:20)\n        at tryOnImmediate (timers.js:768:5)\n        at processImmediate [as _immediateCallback] (timers.js:745:5)\n  Message:\n    Failed: worse\n  Stack:\n    Error: worse\n        at UserContext.it (/Users/azure.diamond/source/jasmine-snafu/bar.spec.js:17:22)\n        at <Jasmine>\n        at runCallback (timers.js:810:20)\n        at tryOnImmediate (timers.js:768:5)\n        at processImmediate [as _immediateCallback] (timers.js:745:5)\n  Message:\n    Error: <toHaveBeenCalled> : Expected a spy, but got Function.\n    Usage: expect(<spyObj>).toHaveBeenCalled()\n  Stack:\n    Error: <toHaveBeenCalled> : Expected a spy, but got Function.\n    Usage: expect(<spyObj>).toHaveBeenCalled()\n        at <Jasmine>\n        at UserContext.it (/Users/azure.diamond/source/jasmine-snafu/bar.spec.js:28:22)\n        at <Jasmine>\n\n1 spec, 1 failure\nFinished in 0.011 seconds", "reactions_count": 3, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-11T16:52:49Z", "contents": "My best guess here is that Node.js itself is detecting that the rejected promise exists and no code setup an error handler before it went out of scope and that is where the error is coming from. The fact that you're seeing different behavior when you use Bluebird seems to confirm some of this. I'm not sure what Jasmine can do to help with this.\nA workaround you might try is to use callFake and only create the rejected Promise when the spy is actually invoked.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-01T13:33:55Z", "contents": "^ Agree on the workaround.  Personally, I don't feel this is is a jasmine issue at all, it's a Bluebird issue.\nThe fix in general is to just never create rejected promises until you need them (from a jasmine perspective, that means always .callFake(() => Promise.reject()), never .returnValue()).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 8, "reactions_data": ["THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1591, "url": "https://github.com/jasmine/jasmine/issues/1591", "title": "Do not manage to import a module \"User.findById is not a function\"", "contents": "Hello there,\nExpected Behavior\nI have 3 files:\n// user.js\n\nconst findById = async id => {\n  //...\n}\n\nmodule.exports = {\n  findById\n}\n// auth.js\nconst User = require('../models/user')\n\nconst validateToken = async token => {\n  // ...\n  const user = await User.findById(id)\n  return user\n}\n\nmodule.exports = { validateToken }\n// auth.spec.js\n// ...\nconst auth = require('../../src/services/auth')\ndescribe('validateToken', () => {\n    const userData = {\n      firstName: 'Nico',\n      lastName: 'Andre',\n      email: 'nicolas@any.com',\n      password: 'myPassword'\n    }\n    let user\n    beforeEach(async () => {\n      user = await User.create(userData)\n    })\n    it('Should return a user', async () => {\n      const token = auth.make(user)\n      const { email, _id } = await auth.validateToken(token)\n      expect(email).toBe(user.email)\n      expect(_id).toBe(user._id)\n    })\n  })\nSo if not wrong, auth.spec imports auth that imports user yes but\nCurrent Behavior\nI receive an error form the console:\nFailures:\n1) JWT Service validate Should return a user\n  Message:\n    TypeError: User.findById is not a function\n  Stack:\n        at <Jasmine>\n        at Object.validate ([...]auth.js:38:27)\n        at process._tickCallback (internal/process/next_tick.js:68:7)\n\nRan 1 of 30 specs\n1 spec, 1 failure\nFinished in 0.163 seconds\n\nI already tried to exports a full defined object like: (didn't work)\nconst core = { findById: findById }\nmodule.exports = core\nwhen I debug User > it's just an empty literal object ({})\nDid anyone experienced this type of bug? Or have any idea where to start investigating?\nContext\n\nExpress app designed as an API\nnot using Babel\nModel is managed by mongoose\nNode 10.8\n\nThanks a lot for your help", "createdAt": "2018-08-13T14:47:12Z", "updatedAt": "2019-02-22T01:39:00Z", "closedAt": "2019-02-22T01:38:59Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nclsndr", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "nclsndr", "company": "@chance-get-yours"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "nitobuendia", "company": "@Google"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-15T00:46:38Z", "contents": "Do you have any spies installed anywhere or something else that might be changing the default behavior? I'm not able to run your example suite as it is written, so I'm using this example:\nUser.js\nmodule.exports = {\n  findById: async id => await Promise.resolve('hi')\n}\nAuth.js\nconst User = require('./user');\n\nconst validateToken = async token => {\n  const user = await User.findById(token);\n  return user;\n};\n\nmodule.exports = { validateToken };\nSpec.js\nconst auth = require('../lib/auth');\n\ndescribe('validate', () => {\n  it('works?', async () => {\n    const result = await auth.validateToken(1);\n    expect(result).toEqual('hi');\n  });\n});\nAnd it is running correctly. If you can provide a runnable example suite that reproduces the issue, that would greatly help with diagnosing and fixing the error.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nitobuendia", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-16T04:25:03Z", "contents": "I believe the issue on your test suite is that User is never defined on that file.\nUser only exists on your auth.js as a local variable. Not on auth.spec.js.\nIn other words, \"auth.spec imports auth that imports user\". Yes, but User is only imported for auth.js to be used there. Not to auth.spec.js to be mocked.\nOne way around this is dependency injection.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:38:59Z", "contents": "We haven't heard anything further to help diagnose this issue, so I'm going to close it. If you have more information please comment here and we can look into it further.\nThanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1592, "url": "https://github.com/jasmine/jasmine/issues/1592", "title": "In npm is last 3.2.0 not 3.21", "contents": "From npm is not possible install last version 3.2.1", "createdAt": "2018-08-16T07:09:49Z", "updatedAt": "2018-10-30T07:42:35Z", "closedAt": "2018-10-30T07:42:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rebajz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rebajz", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-17T00:13:49Z", "contents": "Only the jasmine-core package was updated to 3.2.1. The jasmine package depends on jasmine-core with a ~3.2.0 version spec which should allow installation of 3.2.1 of jasmine-core.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-22T18:41:07Z", "contents": "If this versioning strategy is causing issues for installing things in node.js, I would love to have that discussion, but my understanding is that it is possible to update jasmine-core as long as jasmine works with the later version.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1594, "url": "https://github.com/jasmine/jasmine/issues/1594", "title": "Improve exception formatter", "contents": "Expected Behavior\nIf an expectation fails because of an ErrorEvent it should print at least the message of that ErrorEvent object.\nCurrent Behavior\nThe printed message is simply [object ErrorEvent] thrown\nThis is because the ErrorEvent object does not have a name property, so it drops into the else case in the ExceptionFormatter here https://github.com/jasmine/jasmine/blob/master/src/core/ExceptionFormatter.js#L8\nPossible Solution\nThe exception formatter could be changed, so that it can handle the ErrorEvent object which is described here https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\nSuite that reproduces the behavior (for bugs)\nhttps://stackblitz.com/edit/jasmine-error-event", "createdAt": "2018-08-23T08:23:30Z", "updatedAt": "2018-09-26T00:29:11Z", "closedAt": "2018-09-26T00:29:11Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "giniedp", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "giniedp", "company": "http://www.binarymolecule.com"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "armand2099", "company": null}, {"login": "nitobuendia", "company": "@Google"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-24T00:18:35Z", "contents": "This sounds like a nice addition. I would be happy to review a pull request to add support for printing the message for a thrown object that doesn't also have a name property.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "armand2099", "authorAssociation": "NONE", "createdAt": "2018-09-07T16:39:18Z", "contents": "It will be great if the script line could be printed when an exception fails instead of:\nFailure: Expected true to be false.\nCurrently I'm using:\nexpect(btn.enabled).toBe(false, \"[TS:\" + Error().lineNumber + \"] Button should be disabled\");", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nitobuendia", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-13T12:03:32Z", "contents": "Sent PR #1601 to cover @giniedp proposal.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1595, "url": "https://github.com/jasmine/jasmine/issues/1595", "title": "implement toBeRejectedWith(exception) method", "contents": "jasmine now has toBeRejected() method to check if promise rejects, however it doesn't check for specific exception being thrown, which limits its use.\nIt would be very helpful  to have toBeRejectedWith(exception) method which would be used like this:\nawait expectAsync(aPromise).toBeRejectedWith(expectedError);\n\nor to be even more flexible:\nawait expectAsync(aPromise).toBeRejectedWith({message: 'expected error message'});\nawait expectAsync(aPromise).toBeRejectedWith({code: 21});", "createdAt": "2018-08-23T19:20:57Z", "updatedAt": "2018-10-22T18:20:18Z", "closedAt": "2018-10-22T18:20:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "dkrantsberg", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dkrantsberg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-08-24T00:21:00Z", "contents": "This sounds like a nice addition to Jasmine. I would be happy to review a pull request to add this async matcher. I would expect the actual rejection object to be compared using the existing deep equality built into Jasmine in matcherUtils.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1596, "url": "https://github.com/jasmine/jasmine/issues/1596", "title": "Add optional status marks to standalone", "contents": "Expected Behavior\nFollowing up on issue #463, I suggest adding an option to display status marks next to each spec in the Spec List in the standalone version.\nCurrent Behavior\nThe shades of green, yellow, and red used for passing, failing, and pending specs are impossible to distinguish for people with Monochromacy/Achromatopsia, and the shades of green and red are almost impossible to distinguish for people with Red-Blind/Protanopia. Here's a sample Spec List using the original colors:\n\nHere's how it looks to someone with Monochromacy/Achromatopsia:\n\nAnd here's how it looks to someone with Red-Blind/Protanopia:\n\n(I used color-blindness.com to generate these two images.)\nPossible Solution\nAdd optional status marks next to each spec in the Spec List. Here's a suggestion of what that could look like:\n\nIt there's interest in adding this feature, I'd be happy to make the PR.\nContext\nSee here and here for information about these two types of color-blindness. An estimated 1.01% of men and .02% of women have Red-Blind/Protanopia.", "createdAt": "2018-09-01T02:56:49Z", "updatedAt": "2018-10-01T19:25:44Z", "closedAt": "2018-10-01T19:25:44Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "m1010j", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "m1010j", "company": "LoanStreet"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-09-26T00:34:03Z", "contents": "This sounds like a great idea. I would be happy to review a pull request that added the symbols next to the spec in the details. Since this is purely additive, I don't think we need an option to turn it off.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1598, "url": "https://github.com/jasmine/jasmine/issues/1598", "title": "Jasmine html web page reports wrong line numbers", "contents": "Our project has a tests.html webpage which loads jasmine.js, jasmine-html.js, boot.js and our test suite. When a test fails, I get a stack trace with columns, line numbers and filenames. This is fine except that the line numbers are shifted: there is a difference between the line number as reported by Jasmine and the correct line number in the file.\nMy project uses webpack and cheap-eval-source-map.\nExpected Behavior\nJasmine should report:\nTypeError: Cannot read property 'getPeriodType' of undefined\n    at <Jasmine>\n    at SomeModel._someMethod (webpack-internal:///./js/SomeModel.js:106:18)\n\nCurrent Behavior\nJasmine instead reports:\nTypeError: Cannot read property 'getPeriodType' of undefined\n    at <Jasmine>\n    at SomeModel._someMethod (webpack-internal:///./js/SomeModel.js:112:18)\n\nNote that line number (112) is not the same as expected one (106).\nYour Environment\n\nVersion used: 3.2.0\nEnvironment name and version: Chromium 68\nOperating System and version: Linux desktop\nLink to your project: private\nTechnology stack:\n\nwebpack: 4.3.0", "createdAt": "2018-09-06T11:37:45Z", "updatedAt": "2019-04-19T22:37:22Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "DamienCassou", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "DamienCassou", "company": "F\u00f6retagsplatsen"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "DamienCassou", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-06T11:41:02Z", "contents": "I've just tried launching the same test suite with karma and I got the wrong line numbers as well.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-10T00:26:56Z", "contents": "Jasmine doesn't currently have a good story around using sourcemaps for your tests (see #491), so it's possible that this is causing some of the confusion in the stack traces that Jasmine prints/reports.\nI would still like to get a better solution for this, but I'm not sure of the right approach at this point in time.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DamienCassou", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-10-10T05:14:56Z", "contents": "When Jasmine was displaying the stacktrace in terms of minified files, I was happily using sourcemapped-stacktrace. Then we updated Jasmine and got rid of sourcemapped-stacktrace because Jasmine did the job of looking into the source maps. Unfortunately, the lines numbers became slightly wrong. What about letting sourcemapped-stacktrace do the work for Jasmine?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-07T01:26:13Z", "contents": "Jasmine just asks the thrown error for its stack (see https://github.com/jasmine/jasmine/blob/master/src/core/StackTrace.js), and doesn't currently do anything to try to resolve sourcemapped files. My best guess is that another dependency also got updated that changed the way sourcemaps interact with stacktraces in your codebase.\nHope this helps.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1602, "url": "https://github.com/jasmine/jasmine/issues/1602", "title": "Angular 6.1.0 TypeError on is not a function", "contents": "Expected Behavior\n\nTypeError on is not a function\nSuite that reproduces the behavior (for bugs)\n\n##Component\nngOnInit() {\n    const that = this;\n    if ( this._var === undefined ) {\n      // Saved div with id for later click events\n      this._var = document.getElementById('element');\n    }\n    this._var.on('plotly_click', function( event ) {\n      that.customFunction( event );\n    });\n  }\n##Test\n  let component: CustomComponent;\n  let fixture: ComponentFixture<CustomComponent>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ CustomComponent]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n     fixture = TestBed.createComponent(CustomComponent);\n     component = fixture.componentInstance;\n     fixture.detectChanges();\n  });\n\n  it('should create', () => {\n     expect(component).toBeTruthy();\n  });\nYour Environment\n\n\nVersion used:\n\"jasmine-core\": \"~2.99.1\",\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nChrome: 68.0.3440.106\nOperating System and version (desktop or mobile):\nDesktop", "createdAt": "2018-09-13T09:43:51Z", "updatedAt": "2018-09-26T00:39:34Z", "closedAt": "2018-09-26T00:39:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "theS3ns", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "theS3ns", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-09-26T00:39:34Z", "contents": "I'm not exactly sure what error you're seeing or what line it might be coming from, so I'm guessing a bit based on the code you've pasted in. If I had to guess, I'd say your _var variable is undefined (or null or something else that doesn't have an on function), so that when you call this._var.on(...) you get the error you're seeing.\nSince this looks like it's being caused by not having an element on the page with the id element, it doesn't sound like this is an issue with Jasmine itself, so I'm going to close this.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1603, "url": "https://github.com/jasmine/jasmine/issues/1603", "title": "Spy a method having multiple arguments and a callback", "contents": "When ever a method is having more than 1 argument I cant stub a method.\nExpected Behavior\n\n\nCurrent Behavior\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\nComponent\nservice.myMethod(reqBody,true, false, false, (success) => {\n\n    },(failure)=>{\n\n    });\ntest\nconst service = TestBed.get(Service);\nspyOn(service, 'myMethod').and.callFake(function (reqBody, success,error) {\n        return success({});\n    });\nIt throws error \"success is not a function.\"\nspyOn(service, 'myMethod').and.callFake(function (reqBody,true,false,false, success,error) {\n        return success({});\n    });\nIt throws compilation error.\nContext\n\n\nYour Environment\n\"jasmine\": \"^2.99.0\"", "createdAt": "2018-09-13T17:38:16Z", "updatedAt": "2018-09-16T08:56:53Z", "closedAt": "2018-09-16T08:56:53Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "swayangjit", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "swayangjit", "company": "Goodworklabs Services Pvt. Ltd"}, {"login": "nitobuendia", "company": "@Google"}], "comments_count": 2, "comments_data": [{"authorLogin": "nitobuendia", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-09-16T03:52:59Z", "contents": "This is not a problem with Jasmine, but with your function definition.\nTry with:\nspyOn(service, 'myMethod').and.callFake(function (reqBody, boolean1, boolean2, boolean3, success, error) {\n        return success({});\n    });\n\nI think you are mixing between defining functions and passing parameters to them.\nboolean1, boolean2, boolean3 will receive the values \"true, false, false\", but you cannot define the values on the function level.\nI have created a JSFiddle to illustrate it: http://jsfiddle.net/ej5ubzxn/\nThe test passes and you can see {'it': 'worked'} on the console log too.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "swayangjit", "authorAssociation": "NONE", "createdAt": "2018-09-16T08:56:53Z", "contents": "Thanks, @nitobuendia . It's working now.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1604, "url": "https://github.com/jasmine/jasmine/issues/1604", "title": "Disconnected, because no message in 10000 ms  :: using Jasmine.Clock and JQuery", "contents": "I have a fairly complicated setup where my Angular 5 service uses JQuery to get a element from my document (this element is not part of the Angular app).  My service also uses a setTimeout in one of it's functions that's being unit tested.  In order to test it I need an element in the document that matches the selector in the function I'm testing\nExpected Behavior\nThe browser should disconnect without error\nCurrent Behavior\nThe test itself is reported as successful, it's just that I get the following after all tests run :\n\nHeadlessChrome 69.0.3497 (Windows 10.0.0) ERROR\nDisconnected, because no message in 10000 ms.\n\nPossible Solution\nI'm not sure but I think that the use of Jasmine.clock is causing the problem, it's not releasing the process.\nSuite that reproduces the behavior (for bugs)\ndescribe('AnalyticsService', () => {\n  beforeAll(() => {\n    document.body.innerHTML = '<div class=\"metricspp\"></div>';\n    jasmine.clock().install();\n  });\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    providers: [\n      { provide: Router, useClass: MockRouter },\n      { provide: ActivatedRoute, useClass: MockActivatedRoute },\n      { provide: WindowRef, useValue: windowRefMock },\n      { provide: LoggerService, useValue: MockLogger },\n      AnalyticsService\n    ]\n  });\n});\n\nafterAll(() => {\n  jasmine.clock().uninstall();\n});\n\nit('should be created', inject([AnalyticsService, LoggerService], (service: AnalyticsService, logger: LoggerService) => {\n  jasmine.clock().tick(1);\n  expect(service).toBeTruthy();\n  expect(logger.log).toHaveBeenCalledWith('some stuff');\n}));\n\n});\nYour Environment\nWindows 10\nNode: 9.5.0\nKarma: 2.0.0\nJasmine: 2.99.0\nKarma-Jquery plugin: 0.2.3\nJQuery: 3.3.1\nUsing ChromeHeadless as the browser to run the tests in and I have version 69 of Chrome installed.\nOne  note is I run the tests in Chrome it runs fine but then again it's not really disconnecting and the test have always run successfully.", "createdAt": "2018-09-14T21:18:57Z", "updatedAt": "2018-09-18T20:45:35Z", "closedAt": "2018-09-18T20:45:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "buddyackerman", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "buddyackerman", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "buddyackerman", "authorAssociation": "NONE", "createdAt": "2018-09-18T20:45:35Z", "contents": "This was fixed by replacing the following\ndocument.body.innerHTML = '<div class=\"metricspp\"></div>';\n\nWith this:\nconst node = document.createElement('DIV');\nnode.className = 'dellmetrics-pp';\ndocument.body.appendChild(node);", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1607, "url": "https://github.com/jasmine/jasmine/issues/1607", "title": "specStarted called even when a spec will not run and no way of knowing it will not run?", "contents": "I'm running test cases with Jasmine/Protractor. My issue is that I want some code to be executed before each spec in every spec-file. If I use beforeEach it means that I would have to have this setup-code called explicitly in every spec file. Instead I thought that I could add a reporter and use the specStarted and there add this generic setup/restore-code.\nHowever, when I focus the test I'm currently working on with 'fit' the specStarted is still called for those test that are not focused (and that will not be run). The result metadata that's given to specStarted doesn't seem to include any information that could help my code identify that this spec will not be run (is not focused) so the setup-code can be skipped. If I explicitly exclude a spec (xit) I can check result.pendingReason and exit the function, but it doesn't help in the opposite case I have here...\nCan't the result passed to specStarted include information whether a spec will be excluded or included in the current test run?", "createdAt": "2018-09-19T09:15:19Z", "updatedAt": "2019-04-19T22:26:58Z", "closedAt": "2019-04-19T22:26:57Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jensakejohansson", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jensakejohansson", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-09-26T00:52:10Z", "contents": "You should be able to have a beforeEach outside of any describes. I often have a specHelper.js file that Jasmine will load that has this kind of global setup and teardown logic that should be executed for all specs in the suite. If protractor is breaking this functionality (which I doubt), you should take that up with them.\nAs for the reporter callbacks, we went back an forth on this and decided that the ...Started events wouldn't include status information because we didn't want to introduce a transient status for specs that are about to be run and will find their status during execution. Additionally, reporter callbacks aren't meant to change the way the tests themselves run, as that is why beforeEach, afterEach, beforeAll, and afterAll all exist.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jensakejohansson", "authorAssociation": "NONE", "createdAt": "2018-09-27T19:00:07Z", "contents": "I think I did try your suggestion at first, but as far as I understood it Protractor breaks that functionality. I think someone came to the same conclusion in another forum. The solution for now is to have the global setup in a function that I have to invoke in the beforeEach in every spec-file. I means a little code duplication, but I guess I'll have to live with it...", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-01T19:21:53Z", "contents": "Another thing to check is that your version of Protractor is using the a recent version of Jasmine. There have been issues in past versions with global before[Each|All] and after[Each|All] not fully behaving properly. I would also be happy to hear what Protractor is trying to work around in Jasmine that would cause them to turn off some of Jasmine's built-in functionality.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-19T22:26:57Z", "contents": "It sounds like this is largely an issue with Protractor and not necessarily Jasmine itself. We also haven't heard anything from the community in a while, so I'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["Protractor"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1608, "url": "https://github.com/jasmine/jasmine/issues/1608", "title": "By init standalone have only one  string in trace", "contents": "jasmine/lib/jasmine-core/jasmine.js\n    \n    \n         Line 517\n      in\n      6b9ae2d\n    \n    \n    \n    \n\n        \n          \n           return trace.frames[2].file; \n        \n    \n  \n\n\nWhy trace.frames[2]?\nIf open default SpecRunner.html got here only trace.frames.length = 1", "createdAt": "2018-09-21T15:15:50Z", "updatedAt": "2019-02-22T01:40:40Z", "closedAt": "2019-02-22T01:40:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DK-2013", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DK-2013", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-08T20:05:00Z", "contents": "Can you give me a bit more context on when you're seeing Jasmine enter this code and have fewer than 2 frames? What browser are you using? Do you have a bit more of a stack trace to help determine what is happening in Jasmine?\nIf you're just probing in and calling this directly it is entirely possible it doesn't work in different circumstances, since it is a private method.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:40:39Z", "contents": "Closing this since we haven't heard anything further.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1609, "url": "https://github.com/jasmine/jasmine/issues/1609", "title": "trigger afterAll on error", "contents": "I'm trying to write end-2-end tests using the Jasmine framework with selenium-webdriver,\nmy problem is that the browser doesn't close when an element not found.\nPS: the code that closes the brower is in the afterAll function,\nPS: I don't want to add .catch call at the end of it because I'm goint to have many its and I don't want to repeat it multiple times\nthis is my spec code:\nconst webdriver = require('selenium-webdriver');\nconst until = webdriver.until;\n\nconst capabilities = {\n    \"browserName\": \"chrome\",\n    \"platform\": \"any\"\n};\ndescribe('my spec', function () {\n    jasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\n    waitTimeout = 20000;\n\n    beforeAll(function (done) {\n        this.driver = new webdriver\n            .Builder()\n            .usingServer(\"http://127.0.0.1:4444/wd/hub\")\n            .withCapabilities(capabilities)\n            .build();\n        this.driver.then(done);\n    });\n\n// --------- this function is not triggered if an element is not found\n    afterAll(function (done) {\n        this.driver.quit().then(done);\n    });\n\n\n    it('test name 1 should succeed', function (done) {\n\n        this.driver.get(\"http://127.0.0.1:8800\")\n\n        // wait for element to be present\n//--------- the element #packageAddressSearchHome is not present, so it should fail\n            .then(_ => this.driver.wait(until.elementLocated(webdriver.By.css(\"#packageAddressSearchHome\")), waitTimeout, \"the element #packageAddressSearchHome is not present\"))\n            .then(_ => this.driver.findElement(webdriver.By.css(\"#packageAddressSearchHome\")))\n            .then(element => {\n                // wait for element to be displayed\n                this.driver.wait(_ => element.isDisplayed(), waitTimeout, \"the element #packageAddressSearchHome is not visible\");\n                // element is enabled\n                this.driver.wait(_ => element.isEnabled(), waitTimeout, \"the element #packageAddressSearchHome is not enabled\");\n                return element.sendKeys(\"Paris\");\n            })\n\n            .then(done)\n    });\n\n});\n\n\nPS: I'm new to jasmine-selenium-webdriver, so maybe the code I wrote is wrong\nany idea how to fix it ? and thanks", "createdAt": "2018-09-26T11:31:25Z", "updatedAt": "2018-10-04T14:28:22Z", "closedAt": "2018-10-04T14:28:22Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "tahayk", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "tahayk", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-01T19:41:42Z", "contents": "Jasmine should always invoke your afterAll callbacks unless you're using the failFast option. This seemed like a reasonable decision for other types of specs, but is probably not the right decision for selenium uses, or other things that definitely need to be torn down.\nI would be happy to review a pull request to change the way the TreeProcessor invokes the queueRunnerFactory to pass in afterAll callbacks as cleanup functions so they will always be invoked.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "tahayk", "authorAssociation": "NONE", "createdAt": "2018-10-04T14:28:22Z", "contents": "Thank you very much for the hint @slackersoft , it was my mistake, I set stopSpecOnExpectationFailure to true in the jasmine.json config file, now it works fine as expected.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1611, "url": "https://github.com/jasmine/jasmine/issues/1611", "title": "[Proposal] Request to add support for CI/CD pipelines for Test reporting", "contents": "Issue:\nCurrently Azure DevOps and Circle CI/CD systems provide rich test experience.\nIn order to get this experience/track test reporting, users has to explicitly generate test reports (currently supported format JUnit) by 3rd party plugins (Jasmine-Reporter) and publish test results.\nMost of the popular open source projects aren't using 3rd party reporting plugins.\nTo keep local development experience and CI/CD build experience similar, scripts to build/test are written to print test results to console (std_out).\nTo get richer test experience in CI/CD pipeline, customers has to modify their scripts and often need to add 3rd party plugins.\nThis is a steep learning and test reporting is one of the important data that should be easily available for open source github projects.\nProposal for solution(s):\nGenerate test results file based on environment variables:\nIn this approach, test runners will generate test results file along with regular console output if an environment variable is set.\nCI/CD pipelines can set this variable to desired test output location where they can automatically publish test results by consuming test results file generated by test runners (Mocha, Jasmine, Jest, Pytest).\nThis simple flag will make sure test runners are not going through any change in behavior in terms of execution or context they are running and users don't require go through any modification to their source/scripts.\nHappy to listen to community feedback. Feel free to share other ideas if proposed solution is not feasible one.", "createdAt": "2018-10-15T06:03:44Z", "updatedAt": "2018-10-22T04:26:12Z", "closedAt": "2018-10-22T04:26:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nigurr", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "nigurr", "company": "Microsoft"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-17T22:28:57Z", "contents": "The way Jasmine is currently set up makes adding a junit xml reporter straight into Jasmine-Core complicated. Jasmine-Core is designed to be agnostic to browser/node.js environments, and I don't think it makes sense to generate a report xml file from within a browser. Additionally, keeping the effort to generate a coherent xml report separate from Jasmine itself, helps the Jasmine team to focus on Jasmine directly, without having to worry as much about interoperability with other build systems.\nAll that said, I think it could make sense to make it a bit easier to get this kind of report out of Jasmine-NPM\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nigurr", "authorAssociation": "NONE", "createdAt": "2018-10-22T04:26:09Z", "contents": "@slackersoft makes sense. I will raise separate issue for Jasmine-Npm.\nThanks for response.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 1, "reactions_data": ["THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1612, "url": "https://github.com/jasmine/jasmine/issues/1612", "title": "angularJS expectAsync does not function.", "contents": "Are you creating an issue in the correct repository?\nI believe so \ud83d\udc14\nExpected Behavior\nWhen using libraries that implement their own Promise API, Jasmine should be able to handle these Promises given they have the same methods as the global Promise.\nCurrent Behavior\nWhen attempting to use the expectAsync feature of jasmine ex.\nawait expectAsync($q.resolve('RESULT')).toBeResolvedTo('RESULT');\nYou will always receive the error \"Expected expectAsync to be called with a promise.\"\nThis is because Jasmine pipes the passed promise to this isPromise method which checks that the promise has the global / window Promise constructor.\nj$.isPromise = function(obj) {\n  return typeof jasmineGlobal.Promise !== 'undefined' && obj && obj.constructor === jasmineGlobal.Promise;\n};\nThis will return false because the angularJS implementation of Promise has a different constructor than the jasmineGlobal.Promise\nPossible Solution\nSome kind of isPromiseLike method should be implemented that checks to see that the object in question contains a resolve method.\nSuite that reproduces the behavior (for bugs)\n\nIn angularJS the spec\ndescribe(\"resolving a $q promise\", function() {\n  it('should be able to match the resolved value)', function() {\n    return expectAsync($q.resolve('Hello')).toBeResolvedTo('Hello');\n  });\n});\n\nWill fail because the angularJS deferred API does not have the same constructor as the global / browser Promise API.\n});\nContext\nI am trying to write specs that can test the resolve of some promises. I noticed it wasn't quite working as expected and did a little debugging to figure out what was wrong.\nI'm going to make a PR that will fix the issue, but I understand it's a hefty change and you might want me to make some changes. Just let me know \ud83c\udf83.\nYour Environment\n\n\nVersion used: 3.2.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome: 69\nOperating System and version (desktop or mobile): OSX\nLink to your project: Private Sorry", "createdAt": "2018-10-18T19:42:30Z", "updatedAt": "2018-10-19T23:24:46Z", "closedAt": "2018-10-19T23:24:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "codymikol", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "codymikol", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-18T22:33:56Z", "contents": "I think you're correct that expectAsync should just check if it is being passed something \"thenable\". I've written some notes up in your PR.\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1614, "url": "https://github.com/jasmine/jasmine/issues/1614", "title": "Error: Expected [ 'Array', 'Contents' ] to be [ 'Array', 'Contents' ].", "contents": "When comparing two arrays in my test framework expect(['Array', 'Contents']).toBe(['Array', 'Contents']); Jasmine reports an error in that Expected [ 'Array', 'Contents' ] to be [ 'Array', 'Contents' ].  Jasmine is truly mad about the fact that the address pointers for both of these arrays is not the same regardless of their contents. The first [ 'Array', 'Contents' ] is not the second [ 'Array', 'Contents' ]. While it isn't a huge deal, I would maybe expect some sort of error message explaining that.\nExpected Behavior\nI would expect some error message or some way of implying that the base address of my arrays is not the same and therefore they are not the same object.\n\n\nCurrent Behavior\nRight now jasmine reports Expected [ 'Array', 'Contents' ] to be [ 'Array', 'Contents' ]. \n\n\nPossible Solution\nA new error message that tells me the base addresses of my arrays is not the same and they are not the same object because of that. Ideally, I think there could be something that suggests that I should use toEqual to compare the contents of my arrays instead, maybe if it notices their contents are similar.\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() { \n    expect(['Array', 'Contents']).toBe(['Array', 'Contents']);\n});\nContext\n\n\nAgain, this isn't a huge deal. Maybe I shouldn't assume the worst of people, but I feel like had I not been more informed and actually known what the issue was, this could have been a very frustrating error to come across. In every way, it looks like the first array should be the second array as reported by Jasmine, and I think it would be a frustrating experience to see something that looks like it should be working, but is still upset and wrong.", "createdAt": "2018-10-19T21:16:48Z", "updatedAt": "2018-10-22T17:59:16Z", "closedAt": "2018-10-22T17:59:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "TheeRFG", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "TheeRFG", "company": "N/A"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-19T23:15:49Z", "contents": "If you want a deep equality of your objects you should be using toEqual instead of toBe. As I write this up again though, you're probably correct, that an additional note for toBe that mentions deep equality vs object equality would be useful. I'd be happy to review a pull request to update the failure message for toBe.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1617, "url": "https://github.com/jasmine/jasmine/issues/1617", "title": "Deprecated jasmineEnv configuration breaks plugins", "contents": "Expected Behavior\nSince jasmine-core@3.3, configuration object is introduced to Env. Plugins like karma-jasmine, still uses the old style configuration.\nCurrent Behavior\nIt prevents runners to run jasmine.\nPossible Solution\nInstead of deprecating it right away, a warning should suffice for the time being, to let plugin maintainers to migrate to the new configuration.\nEnvironment\nWe're using karma, jasmine, and karma-jasmine to run tests.", "createdAt": "2018-10-26T05:23:27Z", "updatedAt": "2018-12-05T01:25:08Z", "closedAt": "2018-10-26T17:12:29Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "nasvillanueva", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "nasvillanueva", "company": "@infoteria"}, {"login": "cenfun", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "johnjbarton", "company": "@google"}], "comments_count": 7, "comments_data": [{"authorLogin": "nasvillanueva", "authorAssociation": "NONE", "createdAt": "2018-10-26T05:31:56Z", "contents": "karma-runner/karma-jasmine#221", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "cenfun", "authorAssociation": "NONE", "createdAt": "2018-10-26T06:44:00Z", "contents": "same issue here\n{\n\"message\": \"TypeError: this.deprecated is not a function\\n    at Env.throwOnExpectationFailure (/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1079:12)\\n    at setOption (/node_modules/karma-jasmine/lib/adapter.js:354:7)\\n    at ContextKarma.start (/node_modules/karma-jasmine/lib/adapter.js:343:5)\\n    at ContextKarma.loaded (http://localhost:9890/context.js:168:14)\\n    at http://localhost:9890/context.html:167:22\",\n\"str\": \"TypeError: this.deprecated is not a function\\n    at Env.throwOnExpectationFailure (/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:1079:12)\\n    at setOption (/node_modules/karma-jasmine/lib/adapter.js:354:7)\\n    at ContextKarma.start (/node_modules/karma-jasmine/lib/adapter.js:343:5)\\n    at ContextKarma.loaded (http://localhost:9890/context.js:168:14)\\n    at http://localhost:9890/context.html:167:22\"\n}", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-10-26T17:06:27Z", "contents": "The old functions haven't been removed, only deprecated. It looks like the error is caused because the way that karma-jasmine is setting the configuration options is breaking the Jasmine environments link to its own this such that reporting the deprecation is failing. The purpose of this change was to explicitly leave the old configuration mechanism functioning, but reporting the deprecation for removal in the future. It looks like karma-jasmine is relying on the happenstance of the functions previously only using closure scoping to set the options, but they now need to be called with an appropriate this.\nHope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "nasvillanueva", "authorAssociation": "NONE", "createdAt": "2018-10-26T17:12:29Z", "contents": "Ah, that makes sense. I'll close this ticket and maybe try to fix it on karma-jasmine. Thank you.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-11-06T15:45:40Z", "contents": "I know you can't do anything about this now, so this is just feedback for the future.\nAdding the new configure() API at 3.3 and simultaneously adding deprecation messages is very unpleasant for downstream apps like karma-jasmine.  We can't use the new API because we need to support 3.x including 3.2; we don't want the deprecation messages because users will complain; we don't want to support both because we already have limited resources.   So in effect this becomes a breaking API change for us.", "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-04T01:50:06Z", "contents": "@johnjbarton sorry about this. I'm not sure what the fully correct answer here is. I added the deprecation warnings to give as much lead time for fixing them before things actually break and the methods are removed, and I know I'll forget to do it later if I wait a release or two.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2018-12-05T01:25:08Z", "contents": "Hey, we recovered, no problems now, thanks!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 2, "reactions_data": ["THUMBS_UP", "THUMBS_UP"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1618, "url": "https://github.com/jasmine/jasmine/issues/1618", "title": "bug: PrettyPrinter fails in IE11", "contents": "IE10 - IE11\ndo not support outerHTML or innerHTML property for SVG elements.\nerror\nUnable to get property 'indexOf' of undefined or null reference\nCode:\n\n  \n    \n      jasmine/src/core/PrettyPrinter.js\n    \n    \n        Lines 230 to 240\n      in\n      110c092\n    \n    \n    \n    \n\n        \n          \n           PrettyPrinter.prototype.emitDomElement = function(el) { \n        \n\n        \n          \n             var closingTag = '</' + el.tagName.toLowerCase() + '>'; \n        \n\n        \n          \n            \n        \n\n        \n          \n             if (el.innerHTML === '') { \n        \n\n        \n          \n               this.append(el.outerHTML.replace(closingTag, '')); \n        \n\n        \n          \n             } else { \n        \n\n        \n          \n               var tagEnd = el.outerHTML.indexOf('>'); \n        \n\n        \n          \n               this.append(el.outerHTML.substring(0, tagEnd + 1)); \n        \n\n        \n          \n               this.append('...' + closingTag); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           }; \n        \n    \n  \n\n\nWork around could be that we create 'div' element and clone that node there and read divs innerHTML.", "createdAt": "2018-10-29T08:10:52Z", "updatedAt": "2018-12-04T01:45:54Z", "closedAt": "2018-12-04T01:45:54Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Havunen", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "Havunen", "company": "Visma Solutions Oy, Severa"}, {"login": "mdomi", "company": "Intelligent Software Solutions, Inc."}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "mdomi", "authorAssociation": "NONE", "createdAt": "2018-10-31T17:52:47Z", "contents": "Seeing the same behavior in PhantomJS 2.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T19:05:13Z", "contents": "That sounds like a good plan. I would be happy to review a pull request that detected DOM elements without innerHTML or outerHTML and uses some other mechanism to print, possibly even falling back to putting the tagName inside some < and leaving it at that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1619, "url": "https://github.com/jasmine/jasmine/issues/1619", "title": "afterAll not working with fit", "contents": "if  test contains afterAll() and fit(), then afterAll is ignored.\nProbably same problem will have afterEach()", "createdAt": "2018-10-29T20:48:29Z", "updatedAt": "2019-02-22T01:44:28Z", "closedAt": "2019-02-22T01:44:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rebajz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rebajz", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T18:46:52Z", "contents": "Can you provide a bit more information or an example suite to show the issue? When I run the following suite, it I see the console.log output just fine.\ndescribe('foo', function() {\n  afterAll(function() {\n    console.log('hi there');\n  });\n\n  fit('things', function() {\n    expect(true).toBe(true);\n  });\n});\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:44:28Z", "contents": "Closing this since we haven't received any more information to help track down an issue. Please let us know if you have more details.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1620, "url": "https://github.com/jasmine/jasmine/issues/1620", "title": "Jasmine cancels callback execution when unsubscribe is called", "contents": "I've created this stackblitz to representate the bug:\nhttps://stackblitz.com/edit/jasmine-testing-r6bpfh\nTo execute the code in normal mode you must change the TEST variable to false in main.ts and reload the live preview window. You can click on button and then in 'yes' or 'no'. You can see how the 'dialogIsOpen' variable is being changed from false, to true and then again to false, because the callback function is fully being executed.\nIn test mode (set TEST variable to true and reload the preview window) the test fails because the callback function execution is being cancelled on unsubscribe call.\nExpected Behavior\nContinue the execution of the current callback in test.\nCurrent Behavior\nThe callback execution is being cancelled after calling unsubscribe.\nPossible Solution\nSuite that reproduces the behavior (for bugs)\nhttps://stackblitz.com/edit/jasmine-testing-r6bpfh\nContext\nI can't test callbacks with unsubscribe methods.\nYour Environment\n\nVersion used: 3.1.0\nEnvironment: Chrome  70.0.3538.67 32 bits\nOperating System and version (desktop or mobile): Windows 10", "createdAt": "2018-10-30T09:18:33Z", "updatedAt": "2019-02-22T01:49:04Z", "closedAt": "2019-02-22T01:49:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kno", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kno", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-11-02T18:42:22Z", "contents": "If you need callback or other asynchronous behavior, make sure you're taking advantage of Jasmine's async functionality to ensure that the framework knows when your tests having completed. By default all Jasmine tests are synchronous, and will move on to the next test as soon as the function passed in returns.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kno", "authorAssociation": "NONE", "createdAt": "2018-11-04T12:48:06Z", "contents": "Thanks @slackersoft , but I think this is not a problem with callback: If you comment the line 23 in app.component.ts in the example (the unsubscribe call) the callback is fully executed and the test pass, but with this line, the callback execution is cancelled and it shoun't be cancelled, only it shouldn't be called again.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-05T23:49:01Z", "contents": "It looks like this that unsubscribe call is throwing an error. When I open up the the developer console, I see:\nUncaught TypeError: Cannot read property 'unsubscribe' of undefined\n    at SafeSubscriber.eval [as _next] (app.component.ts:27)\n    at SafeSubscriber.__tryOrUnsub (Subscriber.ts:270)\n    at SafeSubscriber.next (Subscriber.ts:212)\n    at Subscriber._next (Subscriber.ts:141)\n    at Subscriber.next (Subscriber.ts:101)\n    at Observable.eval [as _subscribe] (scalar.ts:5)\n    at Observable._trySubscribe (Observable.ts:224)\n    at Observable.subscribe (Observable.ts:205)\n    at AppComponent.openDialog (app.component.ts:26)\n    at UserContext.eval (app.component.spec.ts:37)\n\nIt looks like a couple of things are happening here.\n\nSomething in that call chain seems to be actually catching the error and preventing it from making it all the way up to Jasmine to be reported to you.\nSomething (possibly the same thing) is causing that callback to be invoked inline, in such a way that your reference to dialogSub hasn't actually been assigned to yet, causing the error to be thrown.\n\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:49:03Z", "contents": "We haven't seen any more information to help diagnosing an issue with Jasmine itself, so I'm going to close this. If you have some more information, please let us know so we can investigate further.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1622, "url": "https://github.com/jasmine/jasmine/issues/1622", "title": "Stuck in infinite loop after test run", "contents": "Current Behavior\nUpdated jasmine from 3.2.0 to 3.3.0 and the tests are stuck in an infinite loop after they pass successfully. The hang appears to be coming from the function processImmediate() in <node_internals>/timers.js.\nContext\nThe tests just hang.\nYour Environment\n\nVersion used: 3.3.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Electron 3.0.4\nOperating System and version (desktop or mobile): Windows 10", "createdAt": "2018-11-07T23:09:25Z", "updatedAt": "2018-12-04T01:40:10Z", "closedAt": "2018-12-04T01:40:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "kht2018", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "kht2018", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "kht2018", "authorAssociation": "NONE", "createdAt": "2018-11-08T00:34:26Z", "contents": "It looks to be stemming from this change https://github.com/jasmine/jasmine-npm/pull/141/files . When line 204 is edited to be\nstream.write('', null, exitIfAllStreamsCompleted);\nThen my tests pass again.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1623, "url": "https://github.com/jasmine/jasmine/issues/1623", "title": "$j.isError_ incorrectly assumes function with WebSocket event", "contents": "Expected Behavior\nShould conclude that incoming value is not an Error.\nCurrent Behavior\nTries to invoke a string as a function, which fails with \"Function expected\".\nPossible Solution\nThis if-statement in j$.isError\n    if (value && value.constructor && value.constructor.constructor &&\n      (value instanceof (value.constructor.constructor('return this')()).Error)) {\n      return true;\n    }\nassumes that value.constructor.constructor('return this') evaluates to a function (and calls it). This is not always the case. I have a combination of Jasmine, Karma, Typesript, RxJs and WebSocket (puh!) where the incoming value parameter is a WebSocket open event.\nIn IE the expression value.constructor.constructor evaluates to Object where in Chrome it evaluates to Function. Calling that with the argument 'return this' creates a string object in IE but a function that returns a string in Chrome.\nWe are using this override now, that has a more defensive approach:\njasmine.isError_ = function (value) {\n    if (value instanceof Error) {\n        return true;\n    }\n    if (value && value.constructor && value.constructor.constructor) {\n        var vccTarget = value.constructor.constructor('return this');\n        if (typeof vccTarget === 'function') {\n            vccTarget = vccTarget();\n        }\n        if (vccTarget.Error && (value instanceof vccTarget.Error)) {\n            return true;\n        }\n    }\n    return false;\n};\nYour Environment\n\nVersion used: 3.1.0\nEnvironment name and version: IE11\nOperating System and version: Windows 7 x64\nLink to your project: Commercial", "createdAt": "2018-11-08T11:44:57Z", "updatedAt": "2019-04-02T01:53:09Z", "closedAt": "2019-04-02T01:53:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "peter-backlund-sg", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "peter-backlund-sg", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "esterletho", "company": null}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-04T01:52:28Z", "contents": "Ouch. I would be happy to take a look at a pull request for this, especially if you can figure out a non-mocking mechanism to cause the failure.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "esterletho", "authorAssociation": "NONE", "createdAt": "2019-03-29T16:30:42Z", "contents": "Any updates on this? It is also breaking some of my tests.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1624, "url": "https://github.com/jasmine/jasmine/issues/1624", "title": "TypeError when use jasmine^3.0 ", "contents": "I get error messages when use jasmine^3.0 to run sample code(src/Player.js and src/Song.js),\nbut jasmine works well when I use jasmine 2.99.\n\nThe browser information (the browser version is older since I use Qt4.8 webkit to implement) :\n\n\nExpected Behavior", "createdAt": "2018-11-14T02:03:12Z", "updatedAt": "2018-12-18T01:54:35Z", "closedAt": "2018-12-18T01:54:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ShengYenPeng", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ShengYenPeng", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-06T00:14:58Z", "contents": "What version of Firefox are you running then? One of the major things that happened when we released Jasmine 3.0 is dropping support for older browsers.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ShengYenPeng", "authorAssociation": "NONE", "createdAt": "2018-12-06T07:03:57Z", "contents": "it looks like that the version of browser is Safari/534.34", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-18T01:54:35Z", "contents": "Based on the wikipedia Safari history page it looks like that UserAgent string maps to Safari version 5, which is no longer supported by Jasmine as of the 3.0 release.\nClosing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1625, "url": "https://github.com/jasmine/jasmine/issues/1625", "title": "Add a `toBeRejectedWithError` async matcher", "contents": "Expected Behavior\nI want to test to use the toThrowError utility matcher on an asynchronous operation which rejects with a given error.\nCurrent Behavior\nAPI is not available - but eq and objectContaining works as interim solutions.\nawait expectAsync(boom()).toBeRejectedWith(new TypeError(\"BOOM\"))\nawait expectAsync(boom()).toBeRejectedWith(jasmine.objectContaining({ message: \"BOOM\" }))\n\nPossible Solution\nJasmine already has toThrowError besides toThrow to make it easier matching against errors with various overloads.\nexpect(foo).toThrowError(\"foo bar baz\");\nexpect(foo).toThrowError(/bar/);\nexpect(foo).toThrowError(TypeError);\nexpect(foo).toThrowError(TypeError, \"foo bar baz\");\n\nHaving toBeRejectedWithError besides toBeRejectedWith with the same overloads would be quite intuitive.\nIt seems that would require extracting some code from toThrowError first.\nI wonder whether that extracted code could live in a jasmine.error asymmetric matcher instead though (meaning that ultimately toThrowError could be deprecated).", "createdAt": "2018-11-19T13:00:40Z", "updatedAt": "2019-05-03T23:36:55Z", "closedAt": "2019-05-03T23:36:55Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "sirlantis", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "sirlantis", "company": "Binary Molecule GmbH"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "webmaster128", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sirlantis", "authorAssociation": "NONE", "createdAt": "2018-11-19T13:38:31Z", "contents": "I can take on that issue, just wanted to gather some opinions before doing some refactoring.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-06T01:34:08Z", "contents": "I would be happy to review a pull request to add a toBeRejectedWithError matcher. I'm not entirely sold on the usefulness of a jasmine.error asymmetric equality tester, but I'm willing to discuss that. I think you're correct that there is probably some common code that would be able to be pulled out between toThrowError and toBeRejectedWithError, and I think that would make sense as part of a PR for this if you find something that looks good.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "webmaster128", "authorAssociation": "NONE", "createdAt": "2018-12-06T09:39:53Z", "contents": "Love and thumbs up for @sirlantis. You are our man!\nI did not know about toBeRejectedWith (missing in TypeScript types?), but our current workaround looks like:\nawait connection\n  .getItem(1234)\n  .then(() => fail(\"promise must be rejected\"))\n  .catch(err => expect(err).toMatch(/Item 1234 doesn't exist yet/));", "reactions_count": 0, "reactions_data": []}], "reactions_count": 5, "reactions_data": ["HEART", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP", "THUMBS_UP"], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1626, "url": "https://github.com/jasmine/jasmine/issues/1626", "title": "Test fails when NGRX action contains observable", "contents": "Expected Behavior\nTest based on NGRX should pass when an Action contains observable.\nCurrent Behavior\nWhen testing effects and the expected observable contains action That contains another observable jasmine throws:\nExpected $[2].notification.value.payload.commands[0].active._subscribe = Function to equal Function.\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\nit('should not crash', () => {\n  \n      const expectedStream$ = cold('--b', {b: new successAction(Observable.of(true))});\n\n        // Act\n        actions$ = hot('--a', {a: new MyAction()});\n\n        // Assert\n        expect(effects.MyEffect$).toBeObservable(expectedStream$);\n});\n});\nContext\nI have an ngrx effect that throws Action containing an observable.\nWhen I'm testing the effect I get: 'Expected $[2].notification.value.payload.commands[0].active._subscribe = Function to equal Function.`\nYour Environment\n\nNode: 9\nChrome: 70\nJasmine: 3.3.0", "createdAt": "2018-11-29T10:21:39Z", "updatedAt": "2019-04-19T22:39:50Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "TKul6", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "TKul6", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "ohjames", "company": "chilon.net"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-06T01:25:22Z", "contents": "Based on the failure message you're seeing, it looks like the _subscribe functions on the two sides of the comparison are different functions. Functions are tricky to compare in a reasonable way, so Jasmine defaults to comparing them by identity, so any potential side-effects are avoided. Some options for you:\n\nEnsure that any two of these objects (Observables?) that are intended to be equal use the same function references for these kinds of callbacks. (Annoying and fiddly)\nImplement a custom equality comparison that can detect and compare Observables, without looking at the _subscribe method, or by comparing in a different way.\nUpdate the toBeObservable matcher that you're using (not part of Jasmine itself) to do said custom comparison.\n\nI'm grasping a bit here, because I haven't ever used NGRX. Hope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "ohjames", "authorAssociation": "NONE", "createdAt": "2018-12-31T15:25:10Z", "contents": "Is it possible to use a switchMap to expand your inner observable during the test?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "TKul6", "authorAssociation": "NONE", "createdAt": "2019-01-02T19:43:28Z", "contents": "Thanks @ohjames  I think it might work, I'll check it and let you know ASAP.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1627, "url": "https://github.com/jasmine/jasmine/issues/1627", "title": "SpyObj typings, only functions should be treated as spies", "contents": "Expected Behavior\n\n\ninterface Service {\n  test();\n  count: number;\n}\n\nlet serviceSpy: jasmine.SpyObj<Service>;\nserviceSpy.count = 1; // should work\nCurrent Behavior\n\n\nlet serviceSpy: jasmine.SpyObj<Service>;\nserviceSpy.count = 1; // Type '1' is not assignable to type 'number & Spy' \nPossible Solution\n\n\nIt is possible to use conditional types and only add & Spy if property type is a function. It requires typescript 2.8 though.\nAt the same time maybe all properties should also be marked as writable using -readonly switch for easier and safer tests?\nI am interested in making a PR as well\nSuite that reproduces the behavior (for bugs)\nhttps://stackblitz.com/edit/jasmine-xkyr6n?file=src/identity.spec.ts", "createdAt": "2018-11-29T14:05:06Z", "updatedAt": "2018-12-01T13:40:18Z", "closedAt": "2018-12-01T13:40:18Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FDIM", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "FDIM", "company": null}], "comments_count": 1, "comments_data": [{"authorLogin": "FDIM", "authorAssociation": "NONE", "createdAt": "2018-12-01T13:40:18Z", "contents": "Seems like I should have opened this in DefinitelyTyped repo, closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1628, "url": "https://github.com/jasmine/jasmine/issues/1628", "title": "Unclear deprecation messages", "contents": "The deprecation messages issued when using the default configuration generated by jasmine init does not explain any remediation.\nExpected Behavior\nWhen installing Jasmine and generating a config using jasmine init it should use up to date configuration syntax. The error message thrown when deprecated keys could be updated to explain what the newer keys or syntax is. The current message seems to imply one should use a configuration object and tuck these new key/values inside. However I've tried various combinations in my jasmine.json file to control test randomization, for eg. and nothing seems to work. Here's one example:\n{\n  \"spec_dir\": \"spec\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"helpers\": [\n    \"helpers/**/*.js\"\n  ],\n  \"oneFailurePerSpec\": true,\n  \"config\": {\n    \"random\": false\n  }\n}\n\nWhen running with this I still see messages like Randomized with seed 70099 which, I believe, indication randomization is still happening. When I set \"random\": false directly the Randomized with seed message goes away but I get a deprecation warning. I've checked online docs and briefly looked through the commit which adds the new feature but I can't figure out the recommended syntaxt for configuring these values. Do they now belong under a configure subkey? Is there a separate file?", "createdAt": "2018-12-05T20:51:11Z", "updatedAt": "2019-05-08T00:10:17Z", "closedAt": "2019-05-08T00:10:17Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "cliff76", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "cliff76", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "Adalid07", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-06T00:44:17Z", "contents": "These deprecation messages are coming from the internals of Jasmine, where the external interface was not fully updated for the 3.3.0 release. At this time, 3.3.1 has been released which should fix the deprecation warnings.\nSorry for the confusion. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "cliff76", "authorAssociation": "NONE", "createdAt": "2018-12-07T19:28:45Z", "contents": "Just tried it and it works perfect now. Thanks!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "Adalid07", "authorAssociation": "NONE", "createdAt": "2019-05-06T02:09:08Z", "contents": "Guys,\nI'm new in jasmine, so i trying to run a test using npm run test for example, and i'm getting the below error someone knows how to fix that ?\nDEPRECATION: Setting randomizeTests directly is deprecated, please use the random option in configure\nDEPRECATION: Setting specFilter directly on Env is deprecated, please use the specFilter option in configure\nThanks in advance!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-07T00:38:08Z", "contents": "I'm going to re-open this to make the messages more clear that deprecated doesn't actually mean removed and that your tests will still run.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1629, "url": "https://github.com/jasmine/jasmine/issues/1629", "title": "\"fit\" and \"fdescribe\" still show output of not running tests (not related to karma)", "contents": "Are you creating an issue in the correct repository?\nYes\n\nExpected Behavior\nWhen I run a test with fit or a suite of tests with fdescribe I expect the test output to only show the results of the run tests.\nCurrent Behavior\nI see all my other tests as if they have passed which obscures the results that I have narrowed in on with fdescribe/fit\nSuite that reproduces the behavior (for bugs)\n\nThis is my run.js which is launched when I execute npm test\nimport Jasmine from 'jasmine'\nimport reporters from 'jasmine-reporters'\n\nconst jasmine = new Jasmine()\njasmine.loadConfigFile('spec/support/jasmine.json')\n\nconst junitReporter = new reporters.JUnitXmlReporter({\n  savePath: 'shippable/testresults',\n  consolidateAll: true\n})\n\njasmine.addReporter(junitReporter)\n\nconst terminalReporter = new reporters.TerminalReporter({\n  verbosity: 3,\n  color: true,\n})\n\njasmine.addReporter(terminalReporter)\n\nconst files = process.argv\n  .slice(2)\n  .map(item => {\n    if (!item.endsWith('.js')) {\n      return `${item}.js`\n    }\n\n    return item\n  })\n\njasmine.execute(files)\n\nContext\n\n\nYour Environment\nnode v10.10\njasmine: ^3.2.0,\njasmine-reporters\": ^2.3.2,", "createdAt": "2018-12-06T08:05:18Z", "updatedAt": "2018-12-07T01:47:51Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jjm340", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jjm340", "company": "Thematic"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-07T01:47:51Z", "contents": "Jasmine reports the status of all declared specs to any and all registered reporters. This will include specs that were excluded for any reason (xit/xdescribe, fit/fdescribe, etc.). It is then up to the reporter to decide how to display those specs to you. Jasmine's built-in console reporter just shows ., F, * (success, failed, pending) and will not display specs that were excluded from execution at all.\nFrom your example code, it looks like you're using the reporters from jasmine-reporters, and not Jasmine's defaults. I would recommend creating an issue there.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1630, "url": "https://github.com/jasmine/jasmine/issues/1630", "title": "spyOn(myService, \"gettest1\").and.callThrough(); promise is not resolving get status like 0", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nTrying to get API data from controller. It works fine in controller. Once i used callThrough(). testcase pases but  Api was not resolving. It shows status 0\nExpected Behavior\n\n\nExpecting to get data from ApI as response. Below is tried code.\nspyOn(myService, \"gettest1\").and.callThrough();\nit('getDateRangeData return Data obj', function() {\nvar tee = myService.gettest1();\nvar tee1 = myService.gettest1().then(function(response) {\n  console.log('Success', response);\n}, function() {\n  console.log(\"error on chart list\");\n\n})\n}\ncan any one help me resolve promise?\nAlso tried  \"scope.$apply();\" it gives an error Unexpected request: GET https://jsonplaceholder.typicode.com/todos/1\nNo more request expected\nCurrent Behavior\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nYour Environment\n\n\nVersion used:\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2018-12-06T12:27:20Z", "updatedAt": "2018-12-07T01:40:58Z", "closedAt": "2018-12-07T01:40:58Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "Ajaykumarkonda", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Ajaykumarkonda", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-07T01:40:58Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1631, "url": "https://github.com/jasmine/jasmine/issues/1631", "title": "Add warning and resolution for OOM by result tracking", "contents": "Let's look at the following spec:\nconst spec = it('should not run out of memory',\n  () => new Promise( (resolve,reject) => {\n    let i=0\n  \n    setInterval( () => { // <- keep test from freezing up\n      const t0 = performance.now()\n      do {\n        if( 0 === i%1e6 )\n          console.log( i.toString().padStart(12) )\n        expect(i).toBeGreaterThan(-1)\n        ++i\n      }\n      while( (performance.now() - t0) < 500 )\n    }, 0)\n  }\n))\nThe spec is asynchronous merely to prevent the browser from freezing up using karma-jasmine. The stopping condition was removed to simplify the example. Note that You are going to have to increase the timeout durations to reproduce the results.\nYou - as developers and/or seasoned users of Jasmine - may already know what happens when this spec is executed: Chrome runs out of memory at around 2gb at i = 31*106, the browser tab crashes and the test fails silently, i.e. no warnings or errors are logged to the console.\nThe cause for the memory \"leak\" is likely that Jasmine creates a result object for every single expectation that passed. This hypothesis is based on the fact that monkey-patching Spec::addExpectationResult fixes the memory \"leak\":\nspec.addExpectationResult = (pass, ...args) => {\n  if( ! pass )\n    Object.getPrototypeOf(spec).addExpectationResult.call(spec, pass, ...args)\n}\nFor someone like me, who's new to Jasmine however, this memory \"leak\" is terribly confusing. I realize that this is not an actual leak since keeping track of passed results is intended. The out-of-memory error without feedback however is likely not intentional.\nWhich brings me to the following suggestions:\n\nCould a warning be emitted when Spec::result.passedExpectations exceeds a threshold, say 106?\nIdeally said warning would point to a setting that allows one to drop passed expectations from the spec. In my experiments, specs ran just fine with the monkey patch above.\n\nEnvironment\nInvolved:\n\nnode@v10.14.1\nkarma-jasmine@2.0.1\njasmine-core@3.3.0\n\nLikely not involved:\n\nkarma-webpack@3.0.5\nkarma-spec-reporter@0.0.32\nkarma-chrome-launcher@2.2.0\n\nOS: Ubuntu 18.04 64x\nBrowser: Chrome 71.0.3578", "createdAt": "2018-12-09T19:47:32Z", "updatedAt": "2019-03-07T03:13:20Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "DirkToewe", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DirkToewe", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-27T20:52:51Z", "contents": "I think that getting a check like this truly correct is going to be a bit of a challenge. If you really want a message just before Jasmine uses up all of your memory (even if only looking at passedExpectations), you'll need to check across all specs and suites being run, and not just the length of the array on the current spec.\nThat said, I would be happy to review a pull request to add an option to not save the actual passed expectations. Turning this option on should not impact the display of the \"Has no expectations\" message in the HtmlReporter, so I would expect the result object to have at least a simple count instead of an array.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "DirkToewe", "authorAssociation": "NONE", "createdAt": "2019-02-28T10:29:32Z", "contents": "Thank You for the response @slackersoft. The warning would not have to be exact science. My idea was rather that there is some threshold for the number of passedExpectations beyond which a warning might be in order, along the lines of \"There is an unusually large number of passed expectations. Too many expectations might cause Browsers to crash (silently).\"\nWhen it comes to filing a PR, I sadly don't feel up for the task. There's only roughly 6 months of JS experience under my belt and the JS way/kind of programming is quite different from what I'm used to. In addition to that jasmine is an intricate project with plugins relying on it. My fingers are crossed that somebody else might be willing to work on this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-07T03:13:20Z", "contents": "The issue I'm most worried about is tracking the passedExpectations across all Specs and Suites since these are currently saved as a single array for each. This would mean a separate set of bookkeeping to know how many passedExpectations have been saved across the entire Jasmine suite, or a limit per Suite/Spec.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1633, "url": "https://github.com/jasmine/jasmine/issues/1633", "title": "Feature Request: Detect duplicate test names", "contents": "Expected Behaviour\nIt would be nice if Jasmine could be configured to detect and warn/fail when duplicate fully qualified test names are found.  This is similar to Issue #747, but asking for a config option to enable the behaviour.\nAlternatively, the list of fully qualified test names could be returned to the Reporter in JasmineStartedInfo and the Reporter could choose to detect duplicates itself.\nCurrent Behaviour\nDuplicate test aren't detected.\nPossible Solution\nSee expected behaviour.", "createdAt": "2018-12-11T13:44:49Z", "updatedAt": "2019-05-24T00:32:46Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "paulmedynski", "authorAssociation": "NONE", "participants_count": 4, "participants_data": [{"login": "paulmedynski", "company": "Healthy Bytes Technology & Wellness"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "didaquis", "company": null}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-12T01:28:20Z", "contents": "What sorts of issues you're seeing with your suite because of duplicated test names? I'm hesitant to add another configuration option to Jasmine without a compelling reason, so I would like to know more about the \"why\" for this.\nThanks.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "didaquis", "authorAssociation": "NONE", "createdAt": "2018-12-12T07:03:28Z", "contents": "It\u2019s an interesting idea. So usefull when you have two thousand test writted for others developers.\nOn this conditions, If some test fail detect which test are throwing error can be confusing if you have multiple test with same description.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulmedynski", "authorAssociation": "NONE", "createdAt": "2018-12-16T12:31:15Z", "contents": "@didaquis summed it up nicely.  The nested structure of Jasmine tests (describe -> describe -> ... it) make it hard to visualize the full test names when you're in the code.  I think the nesting approach is totally fine for writing tests and having common functionality (aka fixtures), but it does obfuscate the full test names.  Boost (C++ test framework) has the same nested test definition approach and duplicate name problem, but detects the duplicates for you at runtime.\nI'd be perfectly happy if there were a way to query Jasmine for the list of full test names in the jasmineStarted() Reporter callback.  Then my reporter could implement the detection.  Jasmine knows all of the tests by then (it provides the test count in the callback), so presumably there is a list of tests somewhere that could be queried.\nIf someone can point me to the place in the Jasmine code where the tests are compiled, I could probably write a patch.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-05T18:29:10Z", "contents": "Jasmine doesn't really see the duplicate test names as a problem. I can see the usability concerns if all you have to go on is the full name of the spec that failed, but Jasmine also provides the stacktrace for errors as well. Most environments now also include at least filename if not also line number at this point, so I would expect that to help find the spec that is failing.\nI don't think we want duplicate test names to cause the suite to fail as a default, but we can discuss how it might be implemented as an option, and how to present the error (or warning?) to the user. Some topics for this:\n\nWhen should Jasmine detect the duplication?\n\nSuite compilation\nexecution\nother?\n\n\nDoes the entire suite fail just because you have two specs with the same full name?\nHow do you tell the user about the error?\n\nWhat does the HTML Report say\nnode.js console log\nhow do you tell karma\ngulp\nothers", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "didaquis", "authorAssociation": "NONE", "createdAt": "2019-02-05T22:27:47Z", "contents": "In my opinion throw an error is too much, a warning will be nice. I think it's important don't break test suites written before implement this feature.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-18T17:04:39Z", "contents": "I find this idea interesting as well.\nI think a common thread here is detecting potential errors, like:\n\nPotentially copy/pasted tests (this issue)\nexpect() with no matcher (#1696)\na spec with no expects (kind of supported -- but only the HtmlReporter shows it, never displayed for JUnit or console output)\n\nAll of these things and more are detected by linters, using plugins like https://github.com/tlvince/eslint-plugin-jasmine.  It might make sense to have some kind of decision about where the boundary should be between jasmine and  the linter (if jasmine will do error detection, which kinds, and why?).", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-23T00:49:29Z", "contents": "Given the presence and availability of linting plugins as you've noted and the existing complexity of Jasmine already, I'm inclined to keep that type of detection outside of Jasmine itself. I might actually be more inclined to add a link of some kind to the documentation to the appropriate linter options to allow users to catch the types of errors that are important to them.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulmedynski", "authorAssociation": "NONE", "createdAt": "2019-05-24T00:15:33Z", "contents": "That sounds good to me.  Even better if there's a TSLint plugin for Jasmine already :)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-24T00:32:46Z", "contents": "I don't know if there is also a plugin for TSLint, but it sounds like Palantir is also deprecating TSLint to focus on ESLint (https://medium.com/palantir/tslint-in-2019-1a144c2317a9).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1634, "url": "https://github.com/jasmine/jasmine/issues/1634", "title": "Feature request: Include (custom) expectation message in both passed and failed expectations", "contents": "I appreciate this is something of a duplicate of #1127, but the response there of \"Jasmine doesn't expect you to really print messages for expectations that were met\" doesn't really help.\nI'm guessing that many users like me will have tests that produce multiple expectations. Some might argue this is not good practice - and they may have a point - but the fact is, that's what many people will do. Furthermore, sometimes these varied expectations can include somewhat \"dynamically\" generated actual / expected values - it would be massively beneficial to be able to see the actual values used in the successfully executed expectation.\nBeyond this, it would be useful to have a custom message for reporting purposes. A stream of \"Passed. Passed. Passed. Passed.\" is meaningless to interested parties. Something that says \"Passed - found 3 doughnuts left after having 4 before that, because we ate one\" would be far more useful / meaningful.\nClearly a number of users have looked into what would be required to support this sort of thing. Can we revisit this as an idea? If someone submitted a PR that offered it, would the PR immediately be rejected?", "createdAt": "2018-12-12T08:52:58Z", "updatedAt": "2019-04-19T22:44:16Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "GCHQDeveloper911", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "GCHQDeveloper911", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-14T01:55:22Z", "contents": "See my comment in the #971 (referenced from #1127) about some of the difficulties related to this. The main issue is that a given matcher doesn't know whether the user has inserted .not into the call chain, and as such is unable to provide the message you suggest. There are also some memory usage concerns around passed expectations and how much memory they should be expected to take up from other members of the community, so I'm hesitant about adding more information back into these.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GCHQDeveloper911", "authorAssociation": "NONE", "createdAt": "2018-12-14T13:38:07Z", "contents": "I've made a few simple changes to improve the reporting - I don't believe there will be any impact on memory usage - with your approval I'll submit a PR and let you take a look. I've not done anything earth shattering(!), but hopefully something that you and others would agree makes sense / could prove beneficial. FWIW, We're using webdriverio, and I'm going to be submitting a PR there for some similar changes, but there is (unless I'm very much mistaken!) no interdependency between my changes there, and here.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-11T01:40:17Z", "contents": "If you want to report additional context around an expectation, you should also take a look at the new withContext matcher helper. Additionally, Jasmine doesn't report (and doesn't expect you to report) on expectations that were successful. This includes expectations that use .not in them.\nAdditionally, the more data stored in the result object for a spec and suite the more quickly Jasmine's memory usage goes up in larger suite, which then causes them to execute slower. The main reason passed expectations are reported at all was to allow users to see if they accidentally had a spec without any expectations at all, and the nicest internal architecture for that was to provide the passed expectations along with the failed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GCHQDeveloper911", "authorAssociation": "NONE", "createdAt": "2019-01-11T12:26:36Z", "contents": "Hi @slackersoft,\nI've closed the PR I had submitted for this work (sorry about that), and am happy to use withContext for custom messages.\nHowever, while I appreciate the risk regarding memory usage for large specs and suites, I also do feel that there is potentially significant benefit from being able to see details of passed expectations - to allow the tester to see what comparison was performed, and what the actual / expected values were can help understand what happened in a test.\nI've got a working version of jasmine-core that implements this, but obviously it's not worth submitting a PR if you are totally opposed to it. Unless... perhaps there might be a way to have some sort of config flag? Maybe something like:\nreportPasses: true // true = report passes, false = don't report passes at all\nreportPassesInDetail: true // false = report as is \"Passed.\", true = report along the lines of \"Passed: Expected 2 to be greater than 0\" - only relevant if 'reportPasses' = true.\n\nThoughts?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-05T19:13:48Z", "contents": "My biggest concern around actually showing a message for an expectation that is successful is what the messages should look like in that case. Remember that a given matcher doesn't necessarily know whether it was invoke with .not, so it should always provide an error message that would be correct assuming that the current state is failing and that Jasmine will do the correct thing based on the outer context.\nAn example might help.\nexpect(1).toBe(1);\n\nIf the toBe matcher provided its own message in this case it would read expected 1 not to be 1, because that is what would need to be reported for expect(1).not.toBe(1).\nexpect(1).not.toBe(2);\n\nThe message here is expected 1 to be 2, because that is what would be reported for expect(1).toBe(2)\nJasmine changes these both to read \"passed\" because otherwise the message indicates a comparison that was not actually done.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GCHQDeveloper911", "authorAssociation": "NONE", "createdAt": "2019-02-11T15:09:25Z", "contents": "I appreciate the concern over a \"misleading\" pass report - indeed I encountered this problem when I first tried reporting passed expectations in more detail. However, either I am misunderstanding the context / scope, or perhaps toEqual and toBe are just lucky examples, however, with my locally modified jasmine-core, I have tried toEqual and toBe, even using withContext, and got:\ntest snippet:\nexpect(0).withContext('blah a').toBe(0); expect(1).withContext('blah b').not.toBe(1); expect(2).withContext('blah c').toBe(0); expect(3).withContext('blah d').not.toBe(0);\nresults snippet:\n[chrome #0-0] blah b: Expected 1 not to be 1.   [chrome #0-0] Error: blah b: Expected 1 not to be 1.   [chrome #0-0]     at <Jasmine> [chrome #0-0]     at <Jasmine> [chrome #0-0]     at UserContext.it (/home/user/WDIO/test.js:20:45) [chrome #0-0] blah c: Expected 2 to be 0. [chrome #0-0] Error: blah c: Expected 2 to be 0. [chrome #0-0]     at <Jasmine> [chrome #0-0]     at <Jasmine> [chrome #0-0]     at UserContext.it (/home/user/WDIO/test.js:21:41) [chrome #0-0] Passed: blah a: Expected 0 to be 0. [chrome #0-0] Passed: blah d: Expected 3 not to be 0.\nThe expectation statement, with and without 'not' is the same for both toBe, and toEqual, with or without a withContext.\nOr do I need to try other comparators that might not work so well? Or have I missed your point completely?!\n(Apologies for the messy output - I tried every new line marker for markdown I could find - none seemed to work?!?)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-14T19:14:14Z", "contents": "You are correct that the actual version of toBe doesn't actually have this problem because it doesn't provide its own message, but relies on higher level Jasmine context to provide the message (which includes whether .not was used). I used toBe in my example because the failure mode is easier to demonstrate, we all know what the message should look like for toBe. The concept here is really that if the matcher does its own work to provide an error message, Jasmine expects it to be correct for if the current state is a failure.\nSorry for the confusion from the example.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1635, "url": "https://github.com/jasmine/jasmine/issues/1635", "title": "Feature request: Report all failed expectations, not just first.", "contents": "If I have a test:\ndescribe('my suite', () => {\nit ('tests something', () => {\nexpect(1).toEqual(2);\nexpect(2).toEqual(3);\nconsole.log('oh dear');\n})\n})\nThen obviously this fails - but only the \"1=2\" expectation is reported. It would be good to see all failed expectations. The test IS running through, because I see my log output.", "createdAt": "2018-12-12T10:01:27Z", "updatedAt": "2018-12-13T19:43:50Z", "closedAt": "2018-12-13T09:45:16Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "GCHQDeveloper911", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "GCHQDeveloper911", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "GCHQDeveloper911", "authorAssociation": "NONE", "createdAt": "2018-12-13T09:45:16Z", "contents": "Further investigation shows this to be an issue with the tool I'm using (WebdriverIO) not Jasmine itself. Closing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-13T19:43:50Z", "contents": "Awesome, glad to hear you've solved the issue. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1636, "url": "https://github.com/jasmine/jasmine/issues/1636", "title": "Help finding a sponsor for learning materials", "contents": "Hello! I know, I know, this is not an issue or a bug! It is just a question and I hope you can point me in the right direction here.\nTL;DR: I created an awesome course (with the help of @ReyPena) on Jasmine that has paid students from 50+ countries and I want to make it available for free but I need a sponsor.\nHi! I am Juan Lizarazo \ud83d\udc4b , author of \"The unit testing your Javascript with Jasmine\" course at Udemy.\n\nI wanted to create the best resource online where people could learn jasmine quick and get solid foundations but I never it expect it to become the highest rated course in Jasmine in the platform with students from 50+ countries. Nothing like spreading the jasmine love \u2764\ufe0f !\nSo, I want to make the course free, available for everyone, forever so more people from developing countries can have access to it and can learn how to use the framework, but in order to do, I just need to recoup my production costs.\nI need some guidance on whom I can contact to get a sponsor, I'd like to make the course free sooner rather than later as I could just wait 6 months to one year and then do so.\nIs this something pivotal labs or the jasmine project would be interested in doing?", "createdAt": "2018-12-14T04:35:15Z", "updatedAt": "2019-04-19T22:43:25Z", "closedAt": "2019-04-19T22:43:25Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "juanlizarazo", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "juanlizarazo", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-12T00:13:40Z", "contents": "Unfortunately, Pivotal doesn't really have a budget for Jasmine outside of a bit of time set aside for me, so I don't think we're likely to sponsor the course. Good luck!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1637, "url": "https://github.com/jasmine/jasmine/issues/1637", "title": "How to test router.events with jasime test framework", "contents": "I want to write a unit test for following typescript class which has two private methods\n`export class BreadcrumbsComponent extends BaseComponent {\nbreadcrumbs: MenuItem[];\nhomeBreadcrumb: MenuItem;\nnavigationDepth: number;\nrouter: Router;\nactivatedRoute: ActivatedRoute;\nconstructor(router: Router, activatedRoute: ActivatedRoute) {\nsuper();\nthis.router = router;\nthis.activatedRoute = activatedRoute;\nthis.initBreadcrumbs();\nthis.router.events.pipe(\n    filter(event => event instanceof NavigationEnd)\n  ).subscribe(event => {  \n  this.initBreadcrumbs();\n  const root: ActivatedRoute = this.activatedRoute.root;\n  this.getBreadcrumbs(root);\n  }\n);\nthis.homeBreadcrumb = {\n  icon: 'icon home',\n  title: 'OWEO dashboard',\n  label: 'OWEO dashboard',\n  routerLink: 'dashboard'\n};\n\n}\nprivate initBreadcrumbs() {\n// first private method\n}\nprivate getBreadcrumbs(route: ActivatedRoute, url = '') {\n// second private method\n}\n}`\nI want to write unit test using jasmine for the two private methods of this class.", "createdAt": "2018-12-17T06:22:18Z", "updatedAt": "2019-01-10T01:23:36Z", "closedAt": "2019-01-10T01:23:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "krishna1990fis", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "krishna1990fis", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-10T01:23:36Z", "contents": "You are more likely to get quicker responses from the community for \"How to use jasmine?\" questions and a history of other solutions on the jasmine-js group. We try to keep jasmine's github issues list focused on bugs and feature requests for jasmine itself.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1639, "url": "https://github.com/jasmine/jasmine/issues/1639", "title": "Assert local variable of a function", "contents": "Jasmine: 3.3.0\nCurrent Project: Develop electron application (with angular 7).\nHow do I use Jasmine to assert the value of arg, which is a local variable of onSubmit function? or is it even possible in the first place?\nonSubmit() {\n    .... (omit for brevity)\n    let startId = this.formData.startId \n    let numOfID = this.formData.numOfId\n    let idType = this.formData.idType\n   \n     **let arg = {idType: idType, startId:parseInt(startId),  numOfID:parseInt(numOfID)}**\n    this._electronService.ipcRenderer.send(\"generateID\",arg)\n}", "createdAt": "2018-12-19T00:55:51Z", "updatedAt": "2019-04-19T22:39:29Z", "closedAt": "2019-04-19T22:39:28Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "hanct", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "hanct", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2018-12-21T01:26:39Z", "contents": "This really depends on what all exactly you're trying to assert. At the end of the day Jasmine is just javascript, so anything you can't access from any other javascript code won't be accessible in a Jasmine test either. If you're looking to verify arguments of a call and not a local variable, you should be able to set up a spy, probably with spyOn.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-19T22:39:28Z", "contents": "Closing this due to lack of activity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1640, "url": "https://github.com/jasmine/jasmine/issues/1640", "title": "Support  for custom systemic features ('plugins')", "contents": "Our users love the jasmine testing  API, so they adapt jasmine to cases it may not have been designed for.  They call non-API jasmine functions and these break when we update them. Maybe more of these cases could be fixed with 'plugin' support?\nSome of the use cases:\n\nRequire it() functions to be async (to avoid errors when promises are used in tests).\nRequire it() functions to be synchronous (because the system ensures synchrony).\nAdd an afterEach to every suite to ensure environment cleanup (avoid errors from mismatched before/after operations)\nAdd an afterEach to every suite to record the state of the test env (browser screenshots).\n\nThe general flavor of these hacks is to operate on the suite or spec list after user code creates the list but before it is passed into the jasmine queue.  Unlike beforeEach/afterEach, these changes are systemic and not context dependent.  Typically they are implemented by wrapping the globals describe or afterEach and calling the wrapped functions.", "createdAt": "2018-12-21T17:16:56Z", "updatedAt": "2019-05-29T00:48:37Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "johnjbarton", "company": "@google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-10T01:22:49Z", "contents": "I definitely want to move towards allowing more customizibility with the use of plugin type things in Jasmine. I'm not sure that your last two examples need a plugin in order to work though, an afterEach not inside of a describe should apply to all specs across all files in your suite.\nThe it changes can also be a bit tricky within Jasmine due to where the sync/async determination is made. What kind of entry point or interface from Jasmine would make this something you could write a plugin to solve?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-01-11T22:44:24Z", "contents": "I was thinking of an onAddSpecsToSuites(suite, specDefinitions) in at the entry to addSpecsToSuites()", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-29T00:48:37Z", "contents": "I was thinking as well about how the plugin would get registered with Jasmine and what types of errors, etc. it might have available. Right now Jasmine doesn't really have \"global\" configuration, just configuration that happens to be on the super secret global suite (matchers, custom equality, etc.), so I want to make sure we have a reasonable interface.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1641, "url": "https://github.com/jasmine/jasmine/issues/1641", "title": "Jasmine \"Expect spy ... to have called\" errors not readable", "contents": "This message all on one-line is unreadable:\nExpected spy next to have been called with [ Object({ subject: [ 'serviceu', 'more-serviceu' ], type: [ 'shyan-the-cat', 'lovely', 'beautfiul', 'hero' ], profile: [ 'human', 'annoying', 'notsogood' ] }) ] but actual calls were [ Object({ subject: [ 'serviceu', 'more-serviceu' ], profile: [ 'human', 'annoying', 'notsogood' ], type: [ 'shyan-the-cat', 'lovely', 'beautiful', 'hero' ] }) ]\n\nThe error here is a small typo in a single string but it takes ages to track down. For the same scenario mocha shows a lovely object diff which makes the issue immediately clear.", "createdAt": "2018-12-31T15:06:05Z", "updatedAt": "2019-01-10T01:44:07Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "ohjames", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "ohjames", "company": "chilon.net"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-10T01:44:01Z", "contents": "I would be nice to have some better comparison errors for toHaveBeenCalledWith, but it gets a bit trickier than for toEqual since the spy could have been called multiple times, and the arguments could be different at some deeper level. That said, I would be happy to review a pull request that used the existing difference reporting logic inside of the deep equals comparison to show the differences for each of the calls similar to how toEqual does. I think it will have to be all of the calls, not just the one most likely to be the match, because there's no way to know that the one that is least different is the call that mattered.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1642, "url": "https://github.com/jasmine/jasmine/issues/1642", "title": "Inexisting error", "contents": "I cannot understand where is the issue, because other action (without any parameters) does not throw an error\n\nExpected spy dispatch to have been called with [ LoginAction({ payload: ApiCredentialsModel({ username: 'denis', password: 'mockpassword' }), type: '[Auth] Login' }) ] but actual calls were [ LoginAction({ payload: ApiCredentialsModel({ username: 'denis', password: 'mockpassword' }), type: '[Auth] Login' }) ].\n\nExpected Behavior\nThere should be no error\nCurrent Behavior\nFail instead of Success\nYour Environment\nAngular 7", "createdAt": "2019-01-02T08:33:48Z", "updatedAt": "2019-04-19T22:40:30Z", "closedAt": "2019-04-19T22:40:30Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "DenisSemionov", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "DenisSemionov", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-10T01:29:42Z", "contents": "Jasmine attempts to compare the function arguments with the expected arguments using its built-in deep equality mechanism. Generally speaking the pretty printer should print everything that equality uses in the comparison, unless the object being printed supplies a toString or jasmineToString function to override the default behavior.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-19T22:40:30Z", "contents": "Closing due to inactivity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1643, "url": "https://github.com/jasmine/jasmine/issues/1643", "title": "Test suite execution and reporting order", "contents": "Hi, I have two jasmine test suites in separate files that I'm running on node in conjunction with karma and reporting using karma-mocha-reporter.\nI have  random: false. Each suite (A & B) runs five async tests in sequence and then completes.\nWhen I run the suites separately the tests run sequentially and complete as expected. With both suites enabled I get one of two outcomes on each test run:\nOutcome #1 (good)\nSTART:\nIDBCache Timeout Tests\n\u221a A1. Create entries\n\u221a A2. Read data back\n\u221a A3. Sleep...\n\u221a A4. Confirm entries have timed out\n\u221a A5. Flush table\nIDBCache Tests\n\u221a B1. Create cache instance\n\u221a B2. Read data back\n\u221a B3. Count Keys\n\u221a B4. Delete cache entry\n\u221a B5. Clear cache\n** Outcome #2 (puzzling)**\nSTART:\nIDBCache Timeout Tests\n\u221a A3. Sleep...\n\u221a A4. Confirm entries have timed out\n\u221a A5. Flush table\nIDBCache Tests\n\u221a B1. Create cache instance\n\u221a B2. Read data back\n\u221a B3. Count Keys\n\u221a B4. Delete cache entry\n\u221a B5. Clear cache\n\u221a A1. Create entries\n\u221a A2. Read data back\nIn outcome #2 the reports for tests A1 & A2 are appended to the end of the report for suite B.\nThe A3 test is a simple delay between tests A2 and A4:\n  it(\"A3. Sleep...\", async (done) => {\n    await sleep(2100);\n    done();\n  }, 3000);\n\nI'm no sure how to investigate/resolve this.  Is it a problem with karma, jasmine or karma-mocha-reporter? Any suggestions would be very welcome.\nCheers.", "createdAt": "2019-01-03T13:41:27Z", "updatedAt": "2019-04-19T22:41:08Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "stevej2608", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "stevej2608", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-31T01:44:37Z", "contents": "This sounds like it's probably an issue with how Karma is setting and running up your suites with Jasmine. My guess is that it's trying to speed things up by making two Jasmine's (one for the file with A, and another for file B), and running those more or less in parallel. If they are all loaded into the same Jasmine instance, I would expect them to work exactly as you have in your first example output.\nDo you have an entire example suite that reproduces the issue to help debug?\nThanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["Karma"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1646, "url": "https://github.com/jasmine/jasmine/issues/1646", "title": "Report duration of each spec", "contents": "In larger test suites or systems, test time becomes an issue. Understanding whether the issue is say lots of time in one test or too many tests, a record of the duration of each test would be very helpful.\nExpected Behavior\nThe test report includes testDuration for each spec.\nCurrent Behavior\nNo duration report.\nPossible Solution\nJust before execution it(), store performance.now().\nJust after, compute the delta between the performance.now() and the stored value.\nAdd the result to the specDone reporter callback result as testDuration", "createdAt": "2019-01-11T22:52:45Z", "updatedAt": "2019-03-15T02:12:50Z", "closedAt": "2019-03-15T02:12:50Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "johnjbarton", "company": "@google"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "wood1986", "company": null}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-31T01:33:51Z", "contents": "It would be nice to be able to get timing output for specs. Jasmine's current reporters only do timing calculations on the entire suite (and not with performance.now because of browser compatibility). I would be happy to review a pull request that updated Timer and HtmlReporter to support and show timing information for each spec, as long as this doesn't break the Timer interface. The ConsoleReporter in jasmine-npm should also be able to be updated in the future.\nI would also be happy to see the Timer use performance.now() where it is available, either as part of the same PR, or standalone.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-02-13T01:00:33Z", "contents": "Jasmine's current reporters only do timing calculations on the entire suite\n\nAs far as I can tell, the current reporters only report the time for the overall jasmine run (all suites).\nI see now that each reporter could be updated to start/stop a timer on the specStarted/specDone.\nI was thinking more along the lines of measuring the duration in jasmine and adding the value to the result. Each reporter needs a bit more display logic, but they share the duration calculation.  WDYT?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-14T19:20:26Z", "contents": "Moving the timing calculation into the actual execution of Jasmine is definitely a bigger task, which is really the main reason to look at leaving it in the reporters for now. I'm also wary of having the core of Jasmine managing too many things, but I agree that putting timings on the result makes it easier for other reporters and things to use that information without having to calculate it themselves.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "wood1986", "authorAssociation": "NONE", "createdAt": "2019-02-23T22:50:55Z", "contents": "#1657", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1647, "url": "https://github.com/jasmine/jasmine/issues/1647", "title": "Getting the current test name in jasmine", "contents": "as of jasmine 2.0 jasmine.getEnv().currentSpec no longer works, is there any way of getting the test name without doing\nvar spec = it('test', function()  {\n    //\n});", "createdAt": "2019-01-26T20:39:35Z", "updatedAt": "2019-01-30T05:52:46Z", "closedAt": "2019-01-30T05:52:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "karanjitsingh", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "karanjitsingh", "company": "@Microsoft"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-01-30T01:47:46Z", "contents": "This functionality was explicitly removed in 2.0. You can see a bit more discussion in #611. The Jasmine teams opinion has been that there shouldn't be logic in your spec itself (including beforeEach and afterEach) that depends on the actual name of the spec being executed. Generally your specs will be more reproducible and less dependent on each other if you fully recreate the world for them (or share the world explicitly with beforeAll and afterAll), than by trying to name particular global scope things to the particular test being executed.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "karanjitsingh", "authorAssociation": "NONE", "createdAt": "2019-01-30T05:52:46Z", "contents": "Thanks", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1648, "url": "https://github.com/jasmine/jasmine/issues/1648", "title": "spyOn() breaks Jasmine with when returning rejected Promise", "contents": "When using this pattern in a spec\nspyOn(foo, 'bar').and.returnValue(Promise.reject('NO!'));\nthe entire test run fails even if the spied function never gets called.\nThis is similar to #1590, but different enough that I thought it warranted a separate item (in my case my spy creates correctly). Feel free to close this if you think it is too similar.\nExpected Behavior\nThe test run should pass because both the spec and tested code do not actually throw any exceptions or await on rejected Promises.\nCurrent Behavior\nThe spec succeeds but the test run fails (the Node.js process exits with code 1). When I use jasmine-console-reporter module it reports An error was thrown in an afterAll.\nSuite that reproduces the behavior\nHere is the complete test file. Notice that the spied function is in a branch that cannot get called:\n\nconst foo = {\n    bar: async () => 0\n}\n\nconst baz = {\n    quux: async () => {\n        if (false) {\n            await foo.bar();\n        }\n    }\n};\n\ndescribe('some suite', () => {\n    it('some spec', async () => {\n        const spy = spyOn(foo, 'bar').and.returnValue(Promise.reject('NO!'));\n        await baz.quux();\n        expect(spy).not.toHaveBeenCalled();\n    });\n});\nContext\nWe have a test where we need to verify that one code path isn't taken given some conditions. To make the test fail in a controlled manner, we added a spy with this rejected Promise pattern if the tests hits this undesired code path.\nYour Environment\n\n\njasmine: v3.3.1\njasmine-core: v3.3.0\nEnvironment: Node.js v8.15.0\nOS: macOS Mojave, Version 10.14.3 18D42", "createdAt": "2019-02-07T19:27:05Z", "updatedAt": "2019-02-14T05:12:03Z", "closedAt": "2019-02-14T05:12:02Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "pe8ter", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "pe8ter", "company": null}, {"login": "sgravrock", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "sgravrock", "authorAssociation": "MEMBER", "createdAt": "2019-02-11T19:15:34Z", "contents": "Simply creating a rejected promise is enough to trigger Node's unhandled rejection event if the rejection is never handled, even if you don't do anything with the promise. Jasmine then turns the unhandled rejection into a failure, because unhandled rejections almost always indicate that something went wrong with the test or the code under test. You can see that more clearly with this stripped-down test, which produces the same failure:\nit('fails', () => {\n    Promise.reject('NO!');\n});\n\nIf I understand your use case correctly, you don't want the unhandled promise to cause a failure unless foo.bar is called. There are a couple of ways to do that. I think the cleanest is to create the promise only if the function is called:\nit('some spec', async () => {\n    const spy = spyOn(foo, 'bar').and.callFake(() => Promise.reject('NO!'));\n    await baz.quux();\n    expect(spy).not.toHaveBeenCalled();\n});\n\nAnother approach is to explicitly handle the failure by await ing the promise inside a try block in the test, but that's messier and more verbose.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "pe8ter", "authorAssociation": "NONE", "createdAt": "2019-02-12T00:42:15Z", "contents": "Simply creating a rejected promise is enough to trigger Node's unhandled rejection event if the rejection is never handled, even if you don't do anything with the promise\n\nWow, TIL. I wonder if there's a way for Jasmine to capture this and report the spec as failed, as opposed to passing the spec and failing the whole test run.\nThis is turned into more of a support item than a bug report. Thanks for taking the time.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "pe8ter", "authorAssociation": "NONE", "createdAt": "2019-02-14T05:12:02Z", "contents": "Closing because my original concern was addressed.\nThanks again!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1649, "url": "https://github.com/jasmine/jasmine/issues/1649", "title": "Failing with unexpected reason: \"Error: \" and \"Failed: \"", "contents": "Expected Behavior\nTests must pass with the latest version of jasmine.\nCurrent Behavior\nWhen I run tests using jamine v3.3.1, they fail with a weird message while they are passing with jasmine v2.9.0.\n  Message:\n    Error: I don't like fat bodies\n  Stack:\n    Error: I don't like fat bodies\n        at EventEmitter.muneem.setFatBodyHandler (/home/amit/git/muneem/tests/fatBody_test.js:32:11)\n        at EventEmitter.emit (events.js:182:13)\n        at Object.router.on [as handler] (/home/amit/git/muneem/src/routesManager.js:104:31)\n        at Anumargak.lookup (/home/amit/git/muneem/node_modules/anumargak/src/letsRoute.js:404:20)\n        at Server.httpHandler (/home/amit/git/muneem/src/server.js:87:32)\n        at Server.emit (events.js:182:13)\n        at parserOnIncoming (_http_server.js:652:12)\n        at HTTPParser.parserOnHeadersComplete (_http_common.js:109:17)\n  Message:\n    Failed: I don't like fat bodies\n  Stack:\n    Error: I don't like fat bodies\n        at EventEmitter.muneem.setFatBodyHandler (/home/amit/git/muneem/tests/fatBody_test.js:32:11)\n        at EventEmitter.emit (events.js:182:13)\n        at Object.router.on [as handler] (/home/amit/git/muneem/src/routesManager.js:104:31)\n        at Anumargak.lookup (/home/amit/git/muneem/node_modules/anumargak/src/letsRoute.js:404:20)\n        at Server.httpHandler (/home/amit/git/muneem/src/server.js:87:32)\n        at Server.emit (events.js:182:13)\n        at parserOnIncoming (_http_server.js:652:12)\n        at HTTPParser.parserOnHeadersComplete (_http_common.js:109:17)\nWhat I'm testing\nI'm running the server and throwing an error. I'm handling that error on server and responding with 500 status in this case.\nit('should 500 on big body.', (done) => {\n        chai.request(\"http://localhost:3006\")\n            .post('/small')\n            .send(\"This is really big body than expected\")\n            .then(res => {\n                expect(res.status).toBe(500);\n                expect(res.text).toBe(\"\");\n                done();\n            }).catch( err => {\n                done.fail(\"not expected \" + err);\n            });\n    });\nI can check that done is being called properly and the test must be passing. But instead, it fails with the error that I'm throwing in my code.\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\nI'm updating dependencies and re-running tests to verify if everything is working fine.\nYour Environment\n\n\nVersion used: 3.3.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): node.js 10.10.0\nOperating System and version (desktop or mobile): Ubuntu 17.10\nLink to your project: https://github.com/node-muneem/muneem/", "createdAt": "2019-02-10T04:39:24Z", "updatedAt": "2019-02-15T01:50:40Z", "closedAt": "2019-02-15T01:50:39Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "amitguptagwl", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "amitguptagwl", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-14T19:25:56Z", "contents": "A number of things changed in 3.0 of Jasmine, including better handling of unhandled errors and unhandled Promise rejections. We're still working on getting some of the messages for these to better indicate the situtation, but it is possible something like this is what is tripping you up. You should also try out the 2.99 release and look for any deprecation messages if you haven't already before upgrading to Jasmine 3.x\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "amitguptagwl", "authorAssociation": "NONE", "createdAt": "2019-02-15T01:50:39Z", "contents": "It worked with 2.99 so closing the issue", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1650, "url": "https://github.com/jasmine/jasmine/issues/1650", "title": "[Feature] Use \"skip\" / \"todo\"", "contents": "Jest 24 introduced the possibility to mark tests as \"todo\" / \"to be skipped\" (see facebook/jest#1605). This is very helpful in situations where\n\na test is to be fixed later on\nwhen laying out all test cases before actually implementing them\n\nI'd love to see such a functionality in Jasmine as well!", "createdAt": "2019-02-11T12:43:08Z", "updatedAt": "2019-04-19T22:43:07Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "dominique-mueller", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dominique-mueller", "company": "moguru GmbH"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-11T17:37:30Z", "contents": "Jasmine currently supports xit to stop the spec from running at all. You can also call it without providing a callback to layout tests before implementing them. I believe this is basically the functionality you're looking for, but I'm happy to discuss interface changes for this existing functionality.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["waiting"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1651, "url": "https://github.com/jasmine/jasmine/issues/1651", "title": "Support nodejs experimental-modules", "contents": "Are you creating an issue in the correct repository?\nThe \"bug\" (unwanted feature) is at jasmine.js#89.5\nExpected Behavior\nWe should be able to use the \"ecmascript\" experimental modules of nodejs (https://nodejs.org/dist/latest-v11.x/docs/api/esm.html),\nCurrent Behavior\nwe receive an error:\n\nError [ERR_REQUIRE_ESM]: Must use import to load ES Module: /mnt/c/Users/jhn/src/kiosk/tests/server/basic-test.mjs\nat Object.Module._extensions..mjs (internal/modules/cjs/loader.js:724:11)\nat Module.load (internal/modules/cjs/loader.js:599:32)\nat tryModuleLoad (internal/modules/cjs/loader.js:538:12)\nat Function.Module._load (internal/modules/cjs/loader.js:530:3)\nat Module.require (internal/modules/cjs/loader.js:637:17)\nat require (internal/modules/cjs/helpers.js:22:18)\nat /mnt/c/Users/jhn/src/kiosk/node_modules/jasmine/lib/jasmine.js:89:5\nat Array.forEach ()\nat Jasmine.loadSpecs (/mnt/c/Users/jhn/src/kiosk/node_modules/jasmine/lib/jasmine.js:88:18)\nat Jasmine.execute (/mnt/c/Users/jhn/src/kiosk/node_modules/jasmine/lib/jasmine.js:257:8)\n\nPossible Solution\nJasmine should use \"import\" instead of \"require\" when loading esm modules. But that is not that easy, since \"import\" is asynchronous, while require is synchronous.\nSuite that reproduces the behavior (for bugs)\n\nCreate a .jsm file (can be any test, even a simple one)\nlaunch nearly as usual:\n\nnode --experimental-modules node_modules/.bin/jasmine\n\nContext\nThis is blocking to use jasmine in this new (experimental) context.\nYour Environment\n\n\nVersion used: 3.3.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): nodejs v10.15.1\nOperating System and version (desktop or mobile): ubuntu\nLink to your project:", "createdAt": "2019-02-12T11:13:36Z", "updatedAt": "2019-04-19T22:48:09Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "jehon", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jehon", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "jehon", "authorAssociation": "NONE", "createdAt": "2019-02-12T11:45:19Z", "contents": "After looking, I think it is part of the jasmine-npm package. I opened a bug there:\njasmine/jasmine-npm#150", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "jehon", "authorAssociation": "NONE", "createdAt": "2019-03-08T12:56:11Z", "contents": "Reopened to include the management of the stacktrace in core", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["has pr"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1652, "url": "https://github.com/jasmine/jasmine/issues/1652", "title": "After updating jasmine from jasmine 2.4.0 to jasmine 3.3.0 I am getting some error", "contents": "After updating jasmine from jasmine 2.4.0 to jasmine 3.3.0 I am getting some error. The bellow error comes after when my all specs run completely. Also, because of the upgradation I am getting more jasmine failures.\n2019-02-15 11:36:19 +0530: Rack app error handling request { POST / }\n#<RuntimeError: can't add a new key into hash during iteration>\n/home/aniketshivamtiwari/.rvm/rubies/ruby-2.5.3/lib/ruby/2.5.0/set.rb:189:in replace' /home/aniketshivamtiwari/.rvm/rubies/ruby-2.5.3/lib/ruby/2.5.0/set.rb:189:in replace'\n/home/aniketshivamtiwari/.rvm/rubies/ruby-2.5.3/lib/ruby/2.5.0/set.rb:405:in collect!' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/loader.rb:85:in asset_from_cache'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/loader.rb:35:in load' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/cached_environment.rb:20:in block in initialize'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/cached_environment.rb:47:in load' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/legacy.rb:195:in block in to_a'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/legacy.rb:195:in map' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/sprockets-3.7.2/lib/sprockets/legacy.rb:195:in to_a'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_expander.rb:39:in get_javascript_assets' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_expander.rb:25:in assets'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_expander.rb:6:in expand' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_pipeline_mapper.rb:11:in call'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_pipeline_mapper.rb:11:in block in map_src_paths' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_pipeline_mapper.rb:10:in map'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/asset_pipeline_mapper.rb:10:in map_src_paths' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/configuration.rb:108:in block in map'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/configuration.rb:106:in each' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/configuration.rb:106:in inject'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/configuration.rb:106:in map' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/configuration.rb:59:in js_files'\n(erb):11:in block in render' /home/aniketshivamtiwari/.rvm/rubies/ruby-2.5.3/lib/ruby/2.5.0/erb.rb:876:in eval'\n/home/aniketshivamtiwari/.rvm/rubies/ruby-2.5.3/lib/ruby/2.5.0/erb.rb:876:in result' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/jasmine/page.rb:8:in render'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/rack/jasmine/runner.rb:15:in call' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/cascade.rb:33:in block in call'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/cascade.rb:24:in each' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/cascade.rb:24:in call'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/urlmap.rb:68:in block in call' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/urlmap.rb:53:in each'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/urlmap.rb:53:in call' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/jasmine-3.3.0/lib/rack/jasmine/cache_control.rb:10:in call'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/head.rb:12:in call' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/rack-2.0.6/lib/rack/builder.rb:153:in call'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/puma-3.12.0/lib/puma/configuration.rb:225:in call' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/puma-3.12.0/lib/puma/server.rb:658:in handle_request'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/puma-3.12.0/lib/puma/server.rb:472:in process_client' /home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/puma-3.12.0/lib/puma/server.rb:332:in block in run'\n/home/aniketshivamtiwari/.rvm/gems/ruby-2.5.3@rails5-portal/gems/puma-3.12.0/lib/puma/thread_pool.rb:133:in `block in spawn_thread'\nMy configuration\nRails- 5.2.2\nruby - 2.5.3\njasmine (3.3.0)\njasmine-core (~> 3.3.0)\nphantomjs\nrack (>= 1.2.1)\nrake\njasmine-core (3.3.0)\njasmine-jquery-rails (2.0.3)", "createdAt": "2019-02-15T06:23:35Z", "updatedAt": "2019-02-15T18:43:32Z", "closedAt": "2019-02-15T18:43:32Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "aniketstiwari", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "aniketstiwari", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-15T18:43:32Z", "contents": "This looks like an issue more related to the ruby gem and not the core of Jasmine. It looks like you've also already opened an identical issue over there (jasmine/jasmine-gem#305), so I'm going to close this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1653, "url": "https://github.com/jasmine/jasmine/issues/1653", "title": "Content Security Policy eval restriction incompatibility in j$.isError_", "contents": "I attempted to update my project from using Jasmine v2.5.2 to v3.3.0, and found that test execution would stop with this error in the console:\nEvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"default-src 'self' 'unsafe-inline'\".\nInvestigating, commit 46cc48c introduced j$.isError_ which does\nif (value && value.constructor && value.constructor.constructor &&\n  (value instanceof (value.constructor.constructor('return this')()).Error)) {\n  ...\n\nwhich is a form of string eval in disguise.\nBased on issue #1325's resolution, I assume that Jasmine is intended to be able to run under an unsafe-eval-restricting Content Security Policy, and so I request that this code be modified to not use eval, or to fall back to returning false if the eval fails.", "createdAt": "2019-02-17T01:26:31Z", "updatedAt": "2019-06-07T17:49:01Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "kpreid", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "kpreid", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-21T01:58:26Z", "contents": "I would be happy to review a pull request that allows the same level of Error detection while allowing the code to be run with in this type of context. Note that the thing this code is doing is finding the actual Error constructor from whichever context the value object came from. This is primarily useful in the toThrowError matcher when the Error might have come from an iframe or other global.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-28T17:54:59Z", "contents": "A possible solution would be to catch EvalError around this check for Error inheritance in window/iframe, and assume false.  I'd imagine this is not a common situation and at least the test won't be blowing up.\nAn alternative would be to see if we really need to be this careful.  Looking at existing internal uses of .isError(), I don't think a strict Error is necessary - for example, we could take \"duck-typed\" definition of \"if it's got a .constructor that is a function, a .message that is a string, and a .stack that is a string, it's an Error\".  This allows user created fake errors but I don't know if that matters.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-06-04T16:43:04Z", "contents": "We shouldn't relax the constraint around being an actual Error for everyone because a certain setup doesn't let Jasmine check properly. Catching a thrown Error and returning false seems fine for now for a CSP, but it might be nice to evaluate another way to get the relevant global object for the object we're checking to be an Error.\nSee #1252 and #1275 for more detail on why this code is here in the first place.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-07T13:20:14Z", "contents": "Thanks for pointing me at the original PR!  Good to have context.\nIn my opinion, there \"shouldn't\" be a way to get ahold of a global object from another context without a CSP.  If I could find one, I'd consider it potentially temporary (likely to be closed in one or more browsers in the future).  But I guess it's worth looking around.\nI'll offer a (more reliable?) alternate duck typing approach, just so it's out there: maybe instead of allowing a duck-typed instance, we allow a duck-typed constructor.  That is:\nvalue instanceof Error || (value.constructor && value.constructor.captureStackTrace && value.constructor.stackTraceLimit)\n\nI'm pushing back only because I don't think the phrase \"is an actual Error\" really means anything in JavaScript.  Even if we allow no duck-typing, any instanceof check can be fooled with:\nvar object = new Date();\nobject.__proto__ = Error.prototype;\nconsole.log(object instanceof Error);   // => true\n\nSo, given that any user can fool the check at will if they want to, our only real obligation in this check is to make sure the user won't fool it by accident.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-06-07T17:49:01Z", "contents": "It doesn't look like captureStackTrace or stackTraceLimit are supported by Firefox and possibly other browsers as well, so it doesn't seem like that check would work consistently across all environments.\nI don't think your example of \"fooling\" instanceof is exactly correct. What you've done is write some Javascript to set the prototype of your object, thus turning it into an instanceof Error. Remember that Javascript has prototypal inheritance and not class based inheritance.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1655, "url": "https://github.com/jasmine/jasmine/issues/1655", "title": "Spec.status does not match with Suite.status", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\n\n\nsuites[0].status should be in failed.\nCurrent Behavior\n\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"index\", () => {\n  it(\"index\", () => {\n    expect(1).toBe(0);\n  });\n});\nContext\n\n\nYour Environment\n\n\nVersion used: 3.3.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2019-02-21T07:36:19Z", "updatedAt": "2019-02-22T05:08:31Z", "closedAt": "2019-02-22T05:08:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "wood1986", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "wood1986", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-22T01:12:35Z", "contents": "The status property on a Suite result is intended to represent failures at the suite level and is not a rollup of child failures. Errors and failures in a beforeEach, afterEach, or it will be on the Spec result and errors in beforeAll, afterAll or outside of anything will be on the suite.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1656, "url": "https://github.com/jasmine/jasmine/issues/1656", "title": "Unable to write conditional test ", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\n\n\nCurrent Behavior\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nYour Environment\n\n\nVersion used:\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2019-02-22T08:20:17Z", "updatedAt": "2019-04-19T22:45:52Z", "closedAt": "2019-04-19T22:45:52Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "PreetalC", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "PreetalC", "company": null}, {"login": "codymikol", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "PreetalC", "authorAssociation": "NONE", "createdAt": "2019-02-22T08:31:02Z", "contents": "In my application i have added to two cases one is to add user and other is to delete user so i want program should run based on parameter i send like if i pass \"ADD\" then it block which has the code to add user should execute and when i pass \"DELETE\" other it block which has the code for Delete should execute\nSo here as it depend on condition i can not use X\nSample code ---------\nlet e = new Excel(\"./TestData/TestData.xlsx\", \"Sheet1\");\nlet data: any;\ndata = e.readExcelasJson()[testRow];\nif(data.action == \"ADD\"){\nit('Should add user ', () => {\nrAcct.openUsersTab();\nrAcc.addUser();\n}\n});\n}\nif(data.action  == \"DELETE\"){\nit('Should add user ', () => {\nrAcct.openUsersTab();\nrAcc.deleteUser();\n}\n});\n}", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "codymikol", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-02-22T15:16:06Z", "contents": "This behavior is odd, but can definitely be achieved in jasmine, given the following example the test will pass.\n            describe('Not sure why you would do this but, but to each his own!', function () {\n\n                var test = 'YES';\n\n                if(test === 'YES') {\n\n                    it('should pass', function () {\n                        expect(true).toBeTruthy();\n                    });\n\n                } else {\n                    it('should fail', function () {\n                        expect(true).toBeFalsy();\n                    });\n                }\n            });\nif the var test is anything but 'YES' the failure test case will run.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-02-23T01:40:25Z", "contents": "It sounds to me like you really want two separate tests, maybe with similar setup. Then you have one test to the add test case, and the other do the delete. I'm also not seeing any expect calls in your specs so it is unclear what exactly you're trying to test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-19T22:45:52Z", "contents": "Closing due to lack of activity.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1659, "url": "https://github.com/jasmine/jasmine/issues/1659", "title": "Jasmine clock + Promise unintuitive", "contents": "It took me a while to figure out how to test a function that used a Promise and a timeout with Jasmine.clock(), so I figured I'd log this issue with my solution and a request to change something. I'm basically reposting issue #710 and #1282 and asking for a better solution than \"this is more of a how-to-unit-test question rather than a jasmine issue\".\nAn example simplified function to unit test:\nimport { NEVER, from, Observable } from 'rxjs';\nimport { flatMap, timeout } from 'rxjs/operators';\nconst myFuntion = (): Observable<void> => {\n    return from(Promise.resolve()).pipe(\n        flatMap(() => Promise.resolve()),\n        flatMap(() => NEVER.pipe(timeout(30000))));\n};\nAnd the unit test (nonworking):\ndescribe(\"Jasmine clock + Promise\", function() {\n    it('should timeout with Promise+clock', (done: DoneFn): void => {\n        jasmine.clock().install();\n        myFuntion().subscribe(\n            () => {\n                done.fail('was supposed to timeout error');\n            },\n            (error) => {\n                expect(error.name).toEqual('TimeoutError');\n                done();\n            }\n        );\n        jasmine.clock().tick(30000);\n    });\n});\nExpected Behavior\ntick() or some other function should trigger the timeout.\nCurrent Behavior\njasmine.clock().install() disables timing out until tick is called. Tick must be called after the timeout is set, which may be set in an async context and inaccessible from the unit test.\nPossible Solution\nReplace the tick() line with this:\nPromise.resolve().then(() => Promise.resolve()).then(() => jasmine.clock().tick(30000));\nOr, mark the function provided to it() as async and replace the subscribe( line with:\nawait await myFuntion().subscribe(\nAlternately, as mentioned by the other issues and StackOverflow post, override Promise to be synchronous, or save off the original setTimeout() function before installing jasmine clock. Perhaps Jasmine could:\n\noffer an option to make Promises synchronous\nmention that Promises are asynchronous in the jasmine.clock() documentation\nperhaps when jasmine.clock() is installed, that could be a reference time, so if it was ticked forward, it would then trigger any timeouts that should've been triggered, even if those timeouts were set after the jasmine.clock().tick() call.\nperhaps a new method like jasmine.clock().tick(300).withAsyncLevels(3) that would result in the code\n\n        Promise.resolve().then(() => {\n            Promise.resolve().then(() => {\n                Promise.resolve().then(() => {\n                    jasmine.clock().tick(30000);\n                });\n            });\n        });\nContext\nI spent multiple days trying to figure out why my code appeared to be ceasing execution in the chain of promises and observables I was attempting to test, eventually narrowing it down to an issue between interactions of Promise + Jasmine + Observable timeout operator. Then learning that jasmine.clock().tick() won't trigger timeouts that haven't been set yet, Promises are defined to be always async, and Observables may be async or sync depending on how they're used.\nYour Environment\n\n\nVersion used: 2.99.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Chrome 72\nOperating System and version (desktop or mobile): macOS", "createdAt": "2019-02-28T15:50:13Z", "updatedAt": "2019-05-31T00:30:13Z", "closedAt": "2019-05-31T00:30:12Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "chrisjdev", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "chrisjdev", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 9, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-14T00:29:44Z", "contents": "Promises resolving asynchronously is even more complicated than you indicate here. Most promise libraries actually use a few other tricks to do asynchronous callbacks for resolution and rejection with less overhead that setTimeout(fn, 0).\nIf I'm understanding you correctly, I think Jasmine actually does do some of the things that you suggest. If you schedule a setTimeout during a tick, the callback for that setTimeout should be executed before tick returns. There is a caveat on setTimeout(fn, 0) if that occurs on the last millisecond of the current tick, but you should be able to work around that by ticking for an extra one. An example:\ndescribe('timeouts', function() {\n  beforeEach(() => { jasmine.clock().install() });\n  afterEach(() => { jasmine.clock().uninstall() });\n\n  it('does some stuff', function() {\n    var thing1 = jasmine.createSpy('thing1');\n    var thing2 = jasmine.createSpy('thing2');\n\n    thing1.and.callFake(() => setTimeout(thing2, 0));\n    setTimeout(thing1, 0);\n\n    expect(thing1).not.toHaveBeenCalled();\n    expect(thing2).not.toHaveBeenCalled();\n\n    jasmine.clock().tick(0);\n\n    expect(thing1).toHaveBeenCalled();\n    expect(thing2).toHaveBeenCalled();\n  });\n});\nThis fails because thing2 isn't called. But\ndescribe('timeouts', function() {\n  beforeEach(() => { jasmine.clock().install() });\n  afterEach(() => { jasmine.clock().uninstall() });\n\n  it('does some stuff', function() {\n    var thing1 = jasmine.createSpy('thing1');\n    var thing2 = jasmine.createSpy('thing2');\n\n    thing1.and.callFake(() => setTimeout(thing2, 0));\n    setTimeout(thing1, 0);\n\n    expect(thing1).not.toHaveBeenCalled();\n    expect(thing2).not.toHaveBeenCalled();\n\n    jasmine.clock().tick(1);\n\n    expect(thing1).toHaveBeenCalled();\n    expect(thing2).toHaveBeenCalled();\n  });\n});\nThis passes. This functionality is the current defined functionality for the Jasmine clock (we even have a comment denoting):\n              // checking first if we're out of time prevents setTimeout(0)\n              // scheduled in a funcToRun from forcing an extra iteration\nThe reasoning for this seems to me to be so you can tick and check the side effects from the first callback without having any subsequent callbacks run. I could also see allowing an option to tick to proceed through any setTimeout(0)s that occurred, but I wouldn't want to make this the default functionality right now.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisjdev", "authorAssociation": "NONE", "createdAt": "2019-03-14T14:45:38Z", "contents": "Thank you very much for the response. I hadn't considered behavior with setTimeout(0). I still believe that having to tick the clock forward after any Promises resolve async requires too much knowledge of the code under test, and of how Jasmine works. I believe Promises are implemented without setTimeout(), so they run async and the Jasmine clock won't change that. Also, writing a unit test that locks in how many Promises are involved in the code under test means that if future code changes increases the number of Promises in the future, it will start to fail the unit test, even though it's working as intended. Or worse, if it was previously synchronous and not using a DoneFn, it could fail an unrelated unit test, or pass when it should've failed.\nPlease let me know if there's anything I can clarify.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-15T02:22:45Z", "contents": "I agree that you don't want to write a spec that knows about the promise depth in the code under test. That being said, if you're testing code that uses promises you probably want to use the new-ish promise support in Jasmine (either async/await or returning a Promise) to ensure that your specs are waiting for a promise to resolve. I don't think it will make sense for Jasmine to provide an way to do anything else to promises in the near future, if only because we still support browsers that don't have Native promises so we would have to figure out how to do it for any promise library.\nI would also be happy to review a pull request for the docs to give an example of providing a promise implementation that completes synchronously/on demand.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisjdev", "authorAssociation": "NONE", "createdAt": "2019-03-21T10:20:41Z", "contents": "I was looking at Jasmine code, and it looks like scheduleFunction called by the fake setTimeout/setInterval functions does not have a branch to call the function immediately, which is fair, because I imagine you wouldn't want code like this to call thing1:\ndescribe('timeouts', function() {\n  beforeEach(() => { jasmine.clock().install() });\n  afterEach(() => { jasmine.clock().uninstall() });\n\n  it('does some stuff', function() {\n    var thing1 = jasmine.createSpy('thing1');\n    jasmine.clock().tick(1);\n    setTimeout(thing1, 0);\n    expect(thing1).not.toHaveBeenCalled();\n  });\n});\nTo make testing async code a little easier, one option would be to have a new method so thing1 would be called in that case:\ndescribe('timeouts', function() {\n  beforeEach(() => { jasmine.clock().install() });\n  afterEach(() => { jasmine.clock().uninstall() });\n\n  it('does some stuff', function(done) {\n    var thing1 = jasmine.createSpy('thing1');\n    // new function call, records current clock value for reference\n    jasmine.clock().markTimeForAsync(); \n    jasmine.clock().tick(1);\n    // fake setTimeout sees it is 1 past the reference time, and runs thing1 immediately\n    setTimeout(thing1, 0);\n    expect(thing1).toHaveBeenCalled();\n    // Another example, this would work also\n    var thing2 = jasmine.createSpy('thing2');\n    jasmine.clock().markTimeForAsync();\n    Promise.resolve(() => setTimeout(thing2, 0)).then(() => {\n        expect(thing2).toHaveBeenCalled();\n        done();\n    });\n    jasmine.clock().tick(1);\n  });\n});\nI don't think I was previously aware of the async / await or returning a Promise options for specs...those do sound useful, but it still wouldn't cover some of our use-cases where functions we're unit testing are triggering things that happen asynchronously and don't return a Promise.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-22T00:34:57Z", "contents": "It sounds like what you're looking for is a way for a previous call to tick to be going to trigger the call of a setTimeout that might happen in the future. I'm not entirely sure how that could work in a way that would be intuitive. I think we might also be losing some of the nuance with the samples here, so I'm having a hard time seeing what the real use case for something like this is. Another note is that I don't think your example with thing2 would work even without a mock clock because the Promise library would probably enqueue the then callback in a way that preempts the setTimeout, which makes the Jasmine clock behavior possibly more realistic.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisjdev", "authorAssociation": "NONE", "createdAt": "2019-03-25T16:52:13Z", "contents": "Yes, one way to make Jasmine clock + Promise more intuitive would be for a previous call to tick trigger a call of a setTimeout that might happen in the future. I'm also not sure what the most intuitive way for that to happen would be...my proposal was for a new function called markTimeForAsync() to enable that behavior to avoid breaking tests that aren't expecting that behavior. I'm certainly open to other ideas. Is there some way I can clarify our use-case for something like this? We've got functions that don't return anything and trigger behavior asynchronously, that I tried to boil down in the original bug report. I was hoping for a way to test that the function interacts with other objects as intended through spies and using jasmine.clock() to avoid waiting for a full 30s timeout. Currently, I can do that with\n        Promise.resolve().then(() => {\n            jasmine.clock().tick(30000);\n        });\nbut if there's another Promise added to the source code in the future, that will break. And I find it to be unintuitive that I need to advance the clock like that in the first place.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-27T00:50:33Z", "contents": "The Jasmine clock is fairly complicated already, and I don't really see a good way to add functionality like this without surprising other users while still being able to figure out what the clock is going to do in any given circumstance. I would either see what kind of use you can make out of actually awaiting some of the portions of your code instead of forcing all of the asynchronous work to be synchronous with clock, or listen to your tests that are telling you this is hard to use and see if you can find another way to architect the system that the tests are easier to write.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "chrisjdev", "authorAssociation": "NONE", "createdAt": "2019-05-17T21:28:38Z", "contents": "I just realized that the code in the original issue wasn't failing as I said it was, so I fixed it and made the example slightly more complicated to illustrate my issue. As far as our use-case, we've got a auto-login function that needs to load some items saved in Storage. We've got the Storage interface mocked out with Promises that resolve, and HTTP mocked out with Observables. If you're loading a username, server name, and authentication token, then performing a HTTP call to check if it's working, then you've got multiple async things and a timeout on the last item.\nThank you very much for at least considering my issue. I really appreciate the work you do with Jasmine. You can close this issue if you don't think it's worth addressing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-31T00:30:12Z", "contents": "Unfortunately, I can't really think of a good way to incorporate some of this logic without impacting the ability to reason about the clock. I could see maybe adding a note to the documentation to clock about interactions with promises, but the asynchronous nature of promises is something that I would expect users using promises to know on their own, since this isn't due to anything that Jasmine is doing.\nI'm going to close this. But please feel free to open a PR for a note that seems like it makes sense either here in the JSDoc comments or in the documentation repo.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1661, "url": "https://github.com/jasmine/jasmine/issues/1661", "title": "suiteStarted and suiteDone not called when filtering", "contents": "Expected Behavior\nWhen filtering, any tests that will be run should have specStarted() and specDone() called if those tests live within any number of describe() suites.\nIn my case, I'm doing this:\nconst Jasmine = require('jasmine');\nconst jasmine = new Jasmine();\njasmine.loadConfig(...);\njasmine.addReporter(new MyReporter());\njasmine.execute(undefined, 'my filter');\nMyReporter defines suiteStarted() and suiteDone(), and those functions are called as expected when no filter is provided.  However, when I supply a filter ('my filter' in the case above), none of the suites in which filtered tests run have suiteStarted() or suiteDone() called for them.\nCurrent Behavior\nsuiteStarted() and suiteDone() are not called on my custom reporter when I call execute() and provide a filter (the second arg to execute).  I would expect that the suite the filtered tests belong to would have suiteStarted() and suiteDone() called for them, but that's not happening.\nPossible Solution\nWhenever a test within a suite (or nested suites) actually executes, call suiteStarted() and suiteDone() for each level of suite that test resides within.\nContext\nWhen running filtered tests, errors in a suite beforeEach() or afterEach() are not reported, but the overall execution state ends up failed.  I have to run without filtering to see the suite errors.\nYour Environment\n\nVersion used:  3.3.1\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): node 11\nOperating System and version (desktop or mobile): Linux", "createdAt": "2019-03-07T16:05:40Z", "updatedAt": "2019-03-18T11:17:31Z", "closedAt": "2019-03-18T11:17:31Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paulmedynski", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "paulmedynski", "company": "Healthy Bytes Technology & Wellness"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-12T01:32:45Z", "contents": "That sounds concerning, but I'm having some trouble reproducing the issue. When I run Jasmine's own tests with a beforeAll that has an expectation failure in it, I see the suite failure message printed out when I have the specs filtered. Only errors in a beforeAll, afterAll, or during declaration of the suite itself will be reported as part of the result on a suite. Any errors in a beforeEach or afterEach will be reported as part of the individual spec that they failed for.\nCan you try to reproduce the issue with the built-in Jasmine reporters? If you're seeing all the errors there, it might be an issue with the custom reporter you're using. Depending on how old the reporter is, it might need to be updated, there were some large status changes for reporters as part of Jasmine 3.0.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulmedynski", "authorAssociation": "NONE", "createdAt": "2019-03-18T11:17:31Z", "contents": "I've confirmed with a minimal custom reporter that Jasmine is behaving correctly:\nhttps://github.com/paulmedynski/jasmine-issue-1661\nThe custom reporter I have been using had a bug where it was suppressing the spec start/done messages under certain circumstances, and was triggered by the filtering (among other things).\nThanks for indulging me :)", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1663, "url": "https://github.com/jasmine/jasmine/issues/1663", "title": "\"received\" spelled wrong as \"receieved\"", "contents": "Expected Behavior\n\nError: Spy 'test' received a call with arguments [ 1 ] but all configured strategies specify other arguments.\n\nCurrent Behavior\n\nError: Spy 'test' receieved a call with arguments [ 1 ] but all configured strategies specify other arguments.\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe('Jasmine Test', function() {\n  it('Spelling is wrong', function() {\n  \tvar fixture = { test(value) { }, };\n    spyOn(fixture, \"test\").withArgs(function() { }).and.returnValue(1);\n    fixture.test(1);\n  });\n});", "createdAt": "2019-03-08T22:07:20Z", "updatedAt": "2019-03-12T00:33:34Z", "closedAt": "2019-03-12T00:33:34Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "ErikPhilips", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "ErikPhilips", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1668, "url": "https://github.com/jasmine/jasmine/issues/1668", "title": "Implement a way to add a timeout for a specific describe block", "contents": "Expected Behavior\n// Default timeout for all specs becomes 20000. \nconst TIMEOUT = 20000;\n\ndescribe('...', () => { ... }, TIMEOUT);\n\nCurrent Behavior\ndescribe('...', () => {\n    // Timeout needs to be added for all the individidual tests\n    const TIMEOUT = 20000;\n\n    it('should do A', () => { ... }, TIMEOUT)\n    it('should do B', () => { ... }, TIMEOUT) \n    it('should do C', () => { ... }, TIMEOUT) \n});\n\nContext\nTo avoid duplication", "createdAt": "2019-03-11T01:06:18Z", "updatedAt": "2019-03-12T01:24:46Z", "closedAt": "2019-03-12T01:24:46Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "maximedupre", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "maximedupre", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-12T01:07:40Z", "contents": "You should be able to accomplish something like this now by setting the jasmine.DEFAULT_TIMEOUT_INTERVAL in a beforeAll (and afterAll to revert). I like the idea of some kind of option like you suggest, but I think this syntax could be confusing because it is so similar to the it syntax but works differently.\nIf the beforeAll/afterAll workaround seems insufficient, I would be happy to review a pull request to add an options argument to describe that could take an option to set the default timeout for all children.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1670, "url": "https://github.com/jasmine/jasmine/issues/1670", "title": "Question: is it possible to not have fdescribe/fit cause jasmine to exit with a non zero exit code?", "contents": "As of now, I will have to use\n./node_modules/.bin/jasmine --config=./jasmine.json test/*spec.js || exit 0\n\nwhich is a working work around, however, I'd rather would like to use a configuration that states that focused tests are fine and must not cause the build to fail, e.g.\n{\n  \"failOnFocusedTests\": false\n}\n\nwith focused suites this is different, as this will cause all the other suites from being skipped/not run, but within a single suite, aka \"describe\", these focused tests should not cause the build to fail.", "createdAt": "2019-03-18T18:16:36Z", "updatedAt": "2019-03-24T15:15:09Z", "closedAt": "2019-03-24T15:15:09Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "silkentrance", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "silkentrance", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 7, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-19T00:56:52Z", "contents": "Can you give me an example of the deprecation message you're seeing. From my quick search through the codebase there shouldn't be any message about deprecated functionality around fit/fdescribe. The various libraries that execute your Jasmine suite should be printing out something like Incomplete: fit() or fdescribe() was found. This is to help catch issues where someone might have accidentally committed a focused spec or suite which would disable anything not in an fit or fdescribe from running.\nBecause focused specs/suites are usually used while debugging an issue locally, and because they have the potential to turn off the entire suite except for one test, Jasmine reports a non-0 exit code to specifically to cause CI systems to note the failure. Jasmine generally attempts to err on the side of reporting a potential error in your suite instead of allowing it to pass when you might not expect it to. Because of this, I'd like to hear a bit more about the use case for allowing a suite with focused specs and suite to succeed.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "silkentrance", "authorAssociation": "NONE", "createdAt": "2019-03-19T19:05:07Z", "contents": "Oh, I just updated jasmine, and there is no longer a deprecation warning, instead the following message is printed:\nIncomplete: fit() or fdescribe() was found\nand the tests are exited with a non zero exit code", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "silkentrance", "authorAssociation": "NONE", "createdAt": "2019-03-19T19:05:34Z", "contents": "I have changed the title.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-20T01:21:24Z", "contents": "I would still like to hear more about why you would like to allow Jasmine to exit cleanly when (potentially) most of your suite has not been run. This behavior was very intentionally added in 3.x in order to help users find times when they had accidentally commited their suite with an fit or fdescribe and inadvertently disabled the rest of their specs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "silkentrance", "authorAssociation": "NONE", "createdAt": "2019-03-20T17:02:18Z", "contents": "Over at testdeck testdeck/testdeck#180 we are currently working on an integration for jasmine.\nWhile everything is working so far, we need to show that all of the features are working and we would like to do that in process rather than in separate processes.\nWhile the latter works, I would prefer the in process solution as it is much faster, similarly to what we did with the integration for jest.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-22T00:48:48Z", "contents": "Assuming you are programmatically creating a Jasmine object from the wrapper package (just jasmine on npm, not jasmine-core), you should be able to pass a handler to onComplete to override the default exit code setting. The callback will receive a boolean value indicating whether the suite as a whole was successful. (Note that the exitCode = 4 behavior for a suite that calls process.exit before it has completed is not currently overridable)\nHope this helps.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "silkentrance", "authorAssociation": "NONE", "createdAt": "2019-03-24T15:15:09Z", "contents": "@slackersoft Thank you very much for the information. I will look into this once we have the new testdeck up and running. Closing.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1671, "url": "https://github.com/jasmine/jasmine/issues/1671", "title": "Running Child Process in Jasmine Produces Inconsistent Results Based on the Shell Command", "contents": "Summary\nWhen I execute a child process using exec(), some shell commands produce standard out and others do not.  pwd works for me but ps doesn't.\nExpected Behavior\nI should see the same standard out and error as I would if I were to run the commands in teh shell.\nCurrent Behavior\nI have the following code to execute a shell command in Jasmine.  If I change \"ps\" to something like \"pwd\", it works.  I see the standard out and the exit code, but I see neither one if I use certain commands like \"ps\".\nPossible Solution\nSuite that reproduces the behavior (for bugs)\n\n    const uuid = require('uuid');\n    const child_process = require('child_process');\n\n    describe('TESTS', () => {\n      console.log('TEST***');\n      it('mp4', () => {\n        console.log('1TEST***');\n        const cmd = 'ps';\n        child_process\n          .exec(cmd, (err, stdout, stderr) => {\n            console.log(`stdout is:${stdout}`);\n            console.log(`stderr is:${stderr}`);\n            console.log(`error is:${err}`);\n          })\n          .on('exit', code => console.log('final exit code is', code));\n      }, 20000);\n    });\n});\nContext\nI'm trying to build an integration test suite taht runs some AWS SAM commands.  When I found that the tests weren't working I reverted to trying some basic shell commands.\nYour Environment\nJasmine 3.3.0\nNode 10.15\nLinux Mint 19", "createdAt": "2019-03-23T02:13:52Z", "updatedAt": "2019-03-26T01:07:03Z", "closedAt": "2019-03-26T01:07:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "jcald1", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "jcald1", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-03-26T01:07:03Z", "contents": "Remember that command the command line prints both stderr and stdout to the same place, so just because you see some text when you run the command in a terminal doesn't mean it is necessarily being printed to one or the other. Additionally, it doesn't sound like this is an issue with Jasmine itself, as Jasmine doesn't provide the child_process library.\nClosing. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1673, "url": "https://github.com/jasmine/jasmine/issues/1673", "title": "Jasmine 'expect(\u2026).withContext is not a function' error", "contents": "I was looking for a way to make failure messaging more descriptive in Jasmine and found this new functionality https://jasmine.github.io/api/edge/matchers.html#withContext\nSo I try it in my Protractor framework like this\nexpect(true).withContext(\"something else\").toBe(false);\nRun the test and get error - Failed: expect(...).withContext is not a function\nThis feature was implemented since Jasmine 3.3.0, so I checked my package.json and see \"jasmine\": \"^3.3.1\", and package-lock.json has\n\"jasmine-core\": {\n      \"version\": \"3.3.0\",\n\nAny ideas what is wrong?", "createdAt": "2019-04-03T18:57:10Z", "updatedAt": "2019-04-04T17:14:06Z", "closedAt": "2019-04-04T17:14:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "spleshakov", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "spleshakov", "company": null}, {"login": "tymfear", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "tymfear", "authorAssociation": "NONE", "createdAt": "2019-04-03T21:37:52Z", "contents": "Protractor uses jasminewd wrapper which uses Jasmine 2.x. If you want to use Jasmine 3.x, you can use Protractor 6.0, that has been released recently. In older versions the newest features of Jasmine, like withContext function, async hooks (e.g. onSpecDone) are not available.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "spleshakov", "authorAssociation": "NONE", "createdAt": "2019-04-04T17:14:06Z", "contents": "Thanks for the help!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["Protractor"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1674, "url": "https://github.com/jasmine/jasmine/issues/1674", "title": "toBePositiveInfinity/toBeNegativeInfinity fail messages describe opposite of actual expectation", "contents": "toBePositiveInfinity/toBeNegativeInfinity fail messages describe opposite of actual expectation\nExpected Behavior\nWhen an matching toBePositiveInfinity or toBeNegativeInfinity fails, the fail message shows the correct expectation e.g. \"Expected 123 to be Infinity.\".\nCurrent Behavior\nWhen an matching toBePositiveInfinity or toBeNegativeInfinity fails, the fail message shows the inverted expectation e.g.\"Expected 123 not to be Infinity.\".\nPossible Solution\nEither fix the strings in the given matchers for these messages, or using util.buildFailureMessage to make sure all matcher messages are in the same structure.\nIf this is confirmed as a bug, I would love to fix this myself.\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"Demo Suite\", () => {\n    it(\"Demo Test\", () => {\n        // Fail messages as expected\n        expect(1).toBe(2); // Expected 1 to be 2.\n        expect(1).not.toBe(1); // Expected 1 not to be 1.\n\n        // Inverted fail messages\n        expect(1).toBePositiveInfinity(); // Expected 1 not to be Infinity.\n        expect(Infinity).not.toBePositiveInfinity(); // Expected 1 to be Infinity.\n        expect(1).toBeNegativeInfinity(); // Expected 1 not to be -Infinity.\n        expect(-Infinity).not.toBeNegativeInfinity(); // Expected actual to be -Infinity.\n    });\n});\nContext\n-\nYour Environment\n\n\nVersion used: 3.4.0 (Reproduceable in 2.99)\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): node.js 11.13.0\nOperating System and version (desktop or mobile): Debian Buster\nLink to your project: -", "createdAt": "2019-04-06T17:28:10Z", "updatedAt": "2019-04-17T00:40:10Z", "closedAt": "2019-04-17T00:40:10Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "FelixRilling", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "FelixRilling", "company": "Cryptshare AG"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1675, "url": "https://github.com/jasmine/jasmine/issues/1675", "title": "SpyObj and returnValue TypeError on version 3.4.0", "contents": "Are you creating an issue in the correct repository?\n\njasmine.SpyObj -> and.returnValue(val: void) which invokes TypeError. The expected behavior is returnValue(val: any) so that it can return value for mockup method or object.\nJasmine Version: 3.4.0\nExpected Behavior\njasmine.SpyObj -> and.returnValue(val: any);\nCurrent Behavior\njasmine.SpyObj -> and.returnValue(val: void);\nSuite that reproduces the behavior (for bugs)\n\n it(\"Should DataEditorService works correctly with method init and update\", () => {\n    // mock dataService method\n    let testData = { name: \"hello\" };\n    dataServiceSpy.init.and.returnValue(testData);\n});\n\nYour Environment\n\nVersion used: 3.4.0 (previous version 3.3.0 works fine)\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Windows 10\nOperating System and version (desktop or mobile): Desktop", "createdAt": "2019-04-07T02:36:06Z", "updatedAt": "2019-04-17T00:33:11Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Vibrat", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "Vibrat", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-17T00:33:11Z", "contents": "The behavior for returnValue hasn't changed in quite some time, and definitely not in the 3.4 release. Additionally, it looks like your problem is possibly mostly with the typings for Jasmine which are provided by DefinitelyTyped and not Jasmine itself.\nIf you have any additional information on where exactly you're seeing the error, that would also help me investigate.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1676, "url": "https://github.com/jasmine/jasmine/issues/1676", "title": "Spec duration is mentioned in docs, but null or 0", "contents": "As I see on docs duration is available and there is a pull request (#1646) to support duration property. But it is null or 0. How to make it works?\nConsole reporter and Third-party console reporter use their own timers. It is possible to use jasmine.jasmine.Timer in custom reporter?", "createdAt": "2019-04-09T13:58:29Z", "updatedAt": "2019-04-16T00:32:08Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "apla", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "apla", "company": "apla.me"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-16T00:32:08Z", "contents": "What version of Jasmine are you using? Spec duration was only just released in version Jasmine-Core 3.4.\nIt should be possible to use jasmine.Timer in other contexts, the interface is pretty simple. The goal of #1646 was to make it so reporters didn't have to do that work themselves.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1677, "url": "https://github.com/jasmine/jasmine/issues/1677", "title": "spyOnAllFunctions is not spying on any function.", "contents": "I'm using ngxs in angular and I'd like to create a spy of the whole store.\nFor that, I try:\nspyOnAllFunctions(storeSpy)\nBut it doesn't seem to be working.\nThis is the class I'm trying to spy on:\nhttps://github.com/ngxs/store/blob/master/packages/store/src/store.ts\nBy debugging into the 'spyOnAllFunctions', I get into this method:\nthis.spyOnAllFunctions = function(obj) {\n...\n for (var prop in obj) {\n   if (Object.prototype.hasOwnProperty.call(obj, prop) && obj[prop] instanceof Function) {\n     var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n     if ((descriptor.writable || descriptor.set) && descriptor.configurable) {\n       this.spyOn(obj, prop);\n     }\n   }\n }\n...\n};\n\nand I verify that the first part of the first if is returning false for each of the Store methods (dispatch, reset, select, ...)\nExpected Behavior\nI would expect the spyOnAllFunctions to be equivalent to calling:\njasmine.createSpyObj<Store>(['dispatch', 'select', ...]); \nby passing every method.\nIs there something I'm missing here?\nCurrent Behavior\nspyOnAllFunctions returns the same passed object and using 'and' on any of the methods, results in undefined:\nstoreSpy.reset.and.callThrough();", "createdAt": "2019-04-10T22:51:44Z", "updatedAt": "2019-05-15T01:01:35Z", "closedAt": "2019-05-15T01:01:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "mdarefull", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "mdarefull", "company": "Overactive"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-19T00:21:52Z", "contents": "The current spyOnAllFunctions behavior looks like it is only looking for functions that are directly on the object (not inherited from the prototype). See #1421 and #1581. Since the store you're using is a class the compiled javascript will have those functions be on the prototype and thus hasOwnProperty will return false. Theoretically if you pass in Store.prototype to spyOnAllFunctions you'll get the prototype back with all functions spied upon, however they will be spies for all instances of the Store not just the one you have a reference to locally.\nI would be happy to review a pull request to create a spy object from a prototype which would probably accomplish what you're looking for here. I envision usage should look something like (open to better naming):\nvar myMock = createSpyObjectFromPrototype(MyConstructor.prototype);\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-06T16:46:49Z", "contents": "A thought:\nLet's say I have an object created by an external API -- like const s3 = new AWS.S3(), as an example.  This thing has a mix of inherited prototype methods, specifically-created and bound functions, and various other properties.  What I want is to spy on anything looking like a function with one command.\nThe createSpyObjectFromPrototype method you describe doesn't really work, because createSpyObjectFromPrototype(AWS.S3.prototype) won't actually look like the complex object created by the real constructor.\nMy suggestion would be to enhance spyOnAllFunctions so that it starts with the passed object, and then recursively walks up Object.getPrototypeOf(object), gathering all property names that meet the hasOwnProperty && descriptor.writable checks at each level.  Stop once you reach undefined or Object.prototype (don't spy on methods in Object.prototype).  Once you have all the properties, then spy on them all on the passed object.\nI think this gives the user what they want 99% of the time (but I might be missing a bad corner case).", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-08T00:26:49Z", "contents": "That seems reasonable, and I can't think of a use-case where walking the prototype chain might break an existing test.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-11T18:03:58Z", "contents": "I am working up a PR for this and expect to have it up before Tuesday, May 14.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1681, "url": "https://github.com/jasmine/jasmine/issues/1681", "title": "await expect - expectationFailOutput", "contents": "it('test async fail to console log', async() => {\nlet components = element.all(by.xpath('//button'));\n    await browser.get('http://localhost:3333/testpageforbutton');\n    await expect(components.count()).toBe(19, 'some info for fail ' + components.count());\n});\n\ncount in expect is correctly counted, but in expectationFailOutput did not show correctly text to console log\nthis working:\nit('test async fail to console log', async() => {\nlet components = element.all(by.xpath('//button'));\n    await browser.get('http://localhost:3333/testpageforbutton');\n    expect(await components.count()).toBe(19, 'some info for fail ' + await components.count());\n});", "createdAt": "2019-04-15T10:38:53Z", "updatedAt": "2019-04-16T00:59:33Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "rebajz", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "rebajz", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-16T00:59:32Z", "contents": "Jasmine's built-in expect function doesn't handle async/Promises natively. You may want to look at expectAsync and the promise related matchers.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1682, "url": "https://github.com/jasmine/jasmine/issues/1682", "title": "toEqual() not show expectationFailOutput in console log", "contents": "fit('some text', async() => {\nlet components = element.all(by.xpath('//button'));\n    await browser.get('http://localhost:3339/buttonpage');\n    expect(await components.count()).toEqual((19), 'some text for fail ' + await components.count());\n});\n\nin console is visible only:\n\nExpected 20 to equal 19.\n\nfor example toBe() show correctly fail message", "createdAt": "2019-04-15T10:44:37Z", "updatedAt": "2019-04-17T00:16:06Z", "closedAt": "2019-04-17T00:16:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "rebajz", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "rebajz", "company": null}, {"login": "tymfear", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "tymfear", "authorAssociation": "NONE", "createdAt": "2019-04-15T10:48:22Z", "contents": "@rebajz you should use the withContext method:\nawait browser.get('http://localhost:3339/buttonpage');\nexpect(await components.count())\n.withContext('some text for fail ' + await components.count())\n.toEqual(19);\nFailure output is not supported for toEqual method. Please see docs.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-17T00:16:06Z", "contents": "In fact, none of Jasmine's matchers officially support the extra argument (expectationFailOutput in community types), but many of them happen to also print that out because of the laxness of how default failure messages are generated.\nClosing this.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1683, "url": "https://github.com/jasmine/jasmine/issues/1683", "title": "Getting mismatch execute of test", "contents": "devDependencies: {\n  \"jasmine-core\": \"3.4.0\",\n    \"jest\": \"22.4.2\",\n    \"jsdom\": \"14.0.0\",\n    \"karma\": \"3.1.4\",\n    \"karma-chrome-launcher\": \"2.2.0\",\n    \"karma-coverage\": \"1.1.1\",\n    \"karma-jasmine\": \"2.0.1\",\n    \"karma-jsdom-launcher\": \"6.1.2\",\n    \"karma-junit-reporter\": \"1.2.0\",\n    \"karma-webpack\": \"^4.0.0-rc.6\",\n}\n\nkarma.config {\n     browserDisconnectTolerance: 2,\n    // long load time while webpack blocks on serving the request.\n    browserNoActivityTimeout: 60000, // 60 seconds\n    browsers: ['jsdom'],\n}\n\nnode version: v8.9.1\nThe Unit test should be 223 instead of 515.\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 515 of 223 SUCCESS (0 secs / 2 mins 5.294 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 516 of 223 SUCCESS (0 secs / 2 mins 7.293 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 517 of 223 SUCCESS (0 secs / 2 mins 11.44 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 518 of 223 SUCCESS (0 secs / 2 mins 13.478 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 519 of 223 SUCCESS (0 secs / 2 mins 13.58 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 520 of 223 SUCCESS (0 secs / 2 mins 13.608 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 521 of 223 SUCCESS (0 secs / 2 mins 15.648 secs)\nMozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/14.0.0: Executed 521 of 223 SUCCESS (0 secs / 2 mins 15.648 secs)", "createdAt": "2019-04-16T02:25:37Z", "updatedAt": "2019-04-17T00:50:22Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "brendonco", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "brendonco", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-17T00:50:22Z", "contents": "That message is actually provided by Karma and not Jasmine itself. Unfortunately, I don't know enough about how Karma to figure out what mechanism is being used to compute those two numbers. My best guess would be that there is a mismatch in how Jasmine reports errors for Suites and how Karma expects those errors to be reported.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1684, "url": "https://github.com/jasmine/jasmine/issues/1684", "title": "npm install jasmine in eclipse after that it showing error in ci.js file", "contents": "Are you creating an issue in the correct repository?\n\nWhen in doubt, create an issue here.\nIf you have an issue with the Jasmine docs, file an issue in the docs repo\nhere: https://github.com/jasmine/jasmine.github.io\nThis repository is for the core Jasmine framework\nIf you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:\n\nJasmine npm\nJasmine gem\nJasmine py\nGulp Jasmine Browser\nKarma\nGrunt Contrib Jasmine\n\n\n\n\nExpected Behavior\n\n\nCurrent Behavior\n\n\nPossible Solution\n\n\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"sample\", function() {\n});\nContext\n\n\nYour Environment\n\n\nVersion used:\nEnvironment name and version (e.g. Chrome 39, node.js 5.4):\nOperating System and version (desktop or mobile):\nLink to your project:", "createdAt": "2019-04-22T00:47:52Z", "updatedAt": "2019-04-23T01:10:30Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "kesavamuthuM", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "kesavamuthuM", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "kesavamuthuM", "authorAssociation": "NONE", "createdAt": "2019-04-22T00:50:35Z", "contents": "I used the eclipse provided git bash in that entered keyword is \"npm install jasmine\" this is what I saw in docs. After that, it showing error in ci.js file.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-23T00:32:37Z", "contents": "I'm not seeing any errors when I install or run tests on windows or MacOS. I tried in git bash and even in basic windows command prompt. Can you please provide a bit more context on what errors you're seeing and the environment you are working in. Take a look at the issue template if you need an example of what type of information is helpful for us to debug and fix issues.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "kesavamuthuM", "authorAssociation": "NONE", "createdAt": "2019-04-23T00:43:01Z", "contents": "Initially, I created a javascript project in eclipse then I used the git bash local terminal in eclipse. Then I used npm init and npm install jasmine. Then in node modules jasmine folder got created. In ci.js follow error it shows\nMultiple markers at this line\n- Semi-colon expected\n- ',' expected\n- primary expression\nexpected\n- primary expression\nexpected\n- Semi-colon expected\n- ')' expected\n- ',' expected\n- Semi-colon expected\n- '}' expected\n- Semi-colon expected\nAlso I am new to javascript and programming. I am using windows 10 and eclipse jee 2018-12.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-23T01:10:30Z", "contents": "You can probably safely ignore those errors. You probably don't want to be editing the code of Jasmine (or any of your other dependencies) directly. The ci.js file is used by Jasmine internally to run Jasmine's own specs before being published, and is not actually used when you run your own specs. It looks like we didn't get all of the style checking set up for this new file, and so didn't catch them earlier.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1687, "url": "https://github.com/jasmine/jasmine/issues/1687", "title": "Arraybuffer does not work correctly with toEqual", "contents": "Expected Behavior\nTwo arraybuffers are compared with their content in jasmine\nCurrent Behavior\nTwo different ArrayBuffers with different values but same length compare equal in jasmine.\nExample passes even though it should not:\ndescribe('Arraybuffer', () => {\n  it('equal different Arraybber', () => {\n    const buffer1 = new ArrayBuffer(4);\n    const buffer2 = new ArrayBuffer(4);\n    const array = new Uint8Array(buffer1);\n    array[0] = 1;\n    expect(buffer1).toEqual(buffer2);\n  });\n});", "createdAt": "2019-04-29T21:51:22Z", "updatedAt": "2019-05-03T00:32:39Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "dankurka", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "dankurka", "company": "Google"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-04-30T00:45:03Z", "contents": "It looks like ArrayBuffer by itself doesn't really have enough information to do the comparison with the object directly. I'm also not totally sure it makes sense to compare them directly, because there isn't even a really good way to know what types of data are being stored. A poor comparison could potentially cause equality where it wasn't expected.\nThere are two things you should be able to do in the mean time to get correct comparisons based on the values:\n\nConvert both sides of  the check to a typed array like Uint8Array\nProvide your own custom equality tester for ArrayBuffer.\n\nI would also be happy to review a pull request to add support in Jasmine itself. I would expect to probably use DataView to retrieve values of unknown types. This would also lead to direct support of DataView in comparisons as well.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dankurka", "authorAssociation": "NONE", "createdAt": "2019-05-02T06:14:21Z", "contents": "Hi Gregg,\nthanks for taking a look. Indeed I was supplying my own custom equality tester that compares the buffers by comparing them as Uint8Arrays, but ensuring that its installed in all tests is error prone and relies on code reviews.\nLet me send a patch to jasmine to address this properly.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "dankurka", "authorAssociation": "NONE", "createdAt": "2019-05-02T16:59:02Z", "contents": "Would you mind taking a look at the pull request. I am unsure on how we are going to handle calling the Uint8Array ctor.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-03T00:32:38Z", "contents": "but ensuring that its installed in all tests is error prone and relies on code reviews.\n\nYou should be able to provide the custom equality tester in a global beforeEach outside of any describe calls and have it apply to all of your specs. If that isn't working, I would definitely like to fix that.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1692, "url": "https://github.com/jasmine/jasmine/issues/1692", "title": "Suggestion: a way to default spies to _not_ expect calls", "contents": "Summary\nI would like some way to default spies to behave as if they should not be called -- similar to what you get today if you use .withArgs() but then call the spy without defined arguments:\nError: Spy 'spy' received a call with arguments [ 'hello' ] but all configured strategies specify other arguments.\n\nExpected Behavior\nI'd like to do this:\nspyOn(myModule, 'myMethod');\nmyModule.myMethod();  // => throws 'Unexpected call to myMethod()'\n\nI'd especially like to do this:\nconst request = require('request-promise');\nspyOnAllFunctions(request);\nrequest.post();    // => throws 'Unexpected call to post()'\n\nCurrent Behavior\nToday, the default behavior is that a spy is \"not configured\" - but that's not really true, it's configured to return undefined.  The following are all equivalent, with varying levels of expressiveness:\nspyOn(foo, 'bar');\nspyOn(foo, 'bar').and.stub();\nspyOn(foo, 'bar').and.returnValue(undefined);\n\nPossible Solution\nI'm fishing here.  Obviously, there are one billion jasmine tests out there that assume an un-configured spy returns undefined, so you can't break that.\nI think there's a few things I'd like that add up to a workable solution:\n\nA new spy strategy (or maybe it's a method on spy itself?) that explicitly says \"expect this not to be called\".  spy.and.unexpected() or something.  You can already do this!  But it's unintuitive:\n\n// One approach that's already built in...\nspy.withArgs('aosdfihasidfhsido').and.returnValue();\nspy();  // => throws error\n\n// Obviously, you can also do this...\nspy.and.callFake(myCustomUnexpectedCallHandler);\nspy();  // => throws some custom error\n\n\nSome way (perhaps temporarily?) to \"default\" what method is used when assigning spies.  Especially for mass-assignment... This might be good enough:\n\n// This could mean \"apply the unexpected spy strategy to every spy?\"\nspyOnAllFunctions(request).and.unexpected();\n\n// Or without a new spy strategy\nspyOnAllFunctions(request).and.throwError(UnexpectedError);\n\nContext\nThis is something that I end up implementing on many projects, and so it'd be great if there was a built-in \"jasmine\" way to accomplish it.\n(The use case here is when you are unit testing modules and completely mocking external dependencies.  It's very useful to grab the 3 components this component uses, and mass-assign every function on all of them an error that says \"hey, this got called unexpectedly!\".  You then allow-list only the expected function calls by assigning .stub() or .callThrough() as appropriate.)\nThis could be related to #1641, in that, I'm kind of advocating for a message like this (with no withArgs):\n\nUnexpected call to 'spy' with arguments [blah]\n\nWhereas the linked issue wants to fix the toBeCalledWith matcher, you could make that argument about the withArgs output, and desire:\n\nUnexpected call to 'spy' with arguments [blah]. You might have meant:\n\n\n#1: diff builder comparison of withArgs(0) & blah\n#2: diff builder comparison of withArgs(1) & blah\netc.\n\nSo, the behavior I'm looking for is consistent, just the message is more detailed if you've used withArgs().\nYour Environment\n\nnode v6, v8, v10 (varies)", "createdAt": "2019-05-05T23:15:49Z", "updatedAt": "2019-06-07T11:18:32Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 8, "comments_data": [{"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-06T15:14:22Z", "contents": "I guess it's worth mentioning that this suggestion is similar  to #1568.\nMy suggestion is to make it easy to have all methods on a module blow up immediately if they get used.  In the linked issue, the suggestion is to make it easy to stub all methods, but check afterwards that none of them got used.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-08T00:22:04Z", "contents": "The way I typically handle this is to create an object that simply doesn't include the functions I don't expect to be called. This also generates an error (and spec failure) if the function is called when you don't expect it to be. I think using something like TypeScript probably makes this trickier as now you need some way to convince the compiler that this object you're supplying is good enough for your tests.\nI think I could see Jasmine providing a way to configure the default spy strategy used when creating a new spy, either on a global or per-spec level. This would let you say in a global beforeEach or something that the default strategy should be to throw an exception, possibly even providing one that has a friendly message about what happened.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-09T07:57:29Z", "contents": "I wonder if an alternate proposal is not \"set a default strategy\", but rather, allow you to reason about a bundle of spies at once.\nExample syntax:\n// Set a plan for several spies at once\njasmine.spiesOn(randomObject, [\"get\", \"post\", \"options\"]).and.stub();\n\n// Assert that no spies on an object have been called at all\nexpect(jasmine.spiesOn(randomObject)).not.toHaveBeenCalled();\n\n// Spy on all functions and then set them to throw errors\njasmine.spiesOn(spyOnAllFunctions(myObject)).and.throwError();\n\n// Assert that several functions were called exactly once\nexpect(jasmine.spiesOn(randomObject, [\"foo\", \"bar\", \"baz\"])).toHaveBeenCalledTimes(1);\n\nI guess what I'm thinking is that jasmine.spiesOn(object, [optional name list]) returns a new thing called a \"SpyCollection\", and that it behaves like SpyStrategyDispatcher except loops through all collected spies instead of setting on just one.  All existing toHaveBeen* matchers would detect a SpyCollection and loop through each spy in the collection.\nYou could use this thing not only with existing objects but with createSpyObj, which would make #1568 trivial.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-14T00:25:58Z", "contents": "I think the suggested name spiesOn might be a bit too close to the existing spyOn and cause confusion about whether it is expected to create spies. spiesFrom might be more explicit, since I don't think this should create spies since there are already enough ways to do that. Otherwise, this sounds like a useful thing, especially for the .not.toHaveBeenCalled() case.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-18T14:06:09Z", "contents": "Been noodling on this some more.  I'd hate to introduce ambiguity in any existing matchers, but I'm afraid this does... if you assume any matcher that takes a Spy should be able to take a SpyCollection (in other words, the result of calling getSpies()), then you have some questions:\n\n\nDoes expect(getSpies(obj)).toHaveBeenCalled() mean any spy on obj was called?  Or does it mean all spies on the object were called?  I think the intuitive answer depends on context: if obj is a giant S3 instance that you spyOnAllFunctions, the intuitive answer is \"any spy\".  If obj is a createSpyObj with two methods, the intuitive answer may be \"all spies\".\n\n\nDoes expect(getSpies(obj)).toHaveBeenCalledTimes(7) mean that at least one spy had 7 calls?  Or that if you add up all the calls on all spies it equals 7?  Similar questions for toHaveBeenCalledWith.\n\n\nI do really like the idea of getting these two syntax sugars:\n// Mass \"not-called\" check\nspyOnAllFunctions(obj);\nexpect(getSpies(obj)).not.toHaveBeenCalled();\n\n// Mass \"strategy\" assignment\nspyOnAllFunctions(obj)\ngetSpies(obj).and.resolveWith();\n\nBut the expectations in particular seem easy to get wrong.  (A possibility would be to just ignore the expectation side for now, and at least implement the mass-strategy-assignment.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-18T14:20:03Z", "contents": "A possible solution to the above that achieves consistency, but might be of limited usefulness, would be to add a \"mode\" method to SpyCollection, which is looked at by matchers -- modes are all(), any(), and onlyOne().\nYou can then make statements that are relatively explicit:\nvar spies = getSpies(bigObjectSpiedUpon);\n\n// Some spy on the object got called\nexpect(spies.any()).toHaveBeenCalled();\n\n// Every spy on the object got called exactly twice\nexpect(spies.all()).toHaveBeenCalledTimes(2);\n\n// No spies can be called\nexpect(spies.all()).not.toHaveBeenCalled();\n\n// You can call any method, but only one\nexpect(spies.onlyOne()).toHaveBeenCalled();\n\n// Error: specify a mode\nexpect(spies).toHaveBeenCalled();", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-24T00:55:49Z", "contents": "I can't think of a good reason to want to check that any or any one of n various functions on an object was called. Honestly, I'm not sure how valuable checking that all of them were simply called. I think that given a transpiler that checks that objects have all of the properties on them that that the type defines, the most directly useful thing for Jasmine to provide is a way to ensure that functions that exist on the type, but shouldn't actually be used in this particular test are not called.\nI think the nicest way to do this is with a matcher like toHaveNoSpyInteractions (#1568) possibly that also accepts a list of methods that should be skipped in the matcher. This would allow behavior like Mockito's verifyNoMoreInteractions.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-07T11:18:32Z", "contents": "We could probably close this suggestion once #1716 (or something similar) goes in.\nIt's not a full implementation, but it allows you to create a user-defined error (.and.throwError('foo')) and set it as your default spy strategy, which would be good enough for my original use case.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1693, "url": "https://github.com/jasmine/jasmine/issues/1693", "title": "Suggestion: default async spies to be async", "contents": "Expected Behavior\nToday, everyone expects an un-configured spy to return undefined.  If we know that the function is async, though, we can do better and return a promise for undefined.\nconst Foo = {\n    bar: async () => 7\n};\nspyOn(Foo, 'bar');\nFoo.bar().then(console.log);  // => prints undefined\n\nCurrent Behavior\nconst Foo = {\n    bar: async () => 7\n};\nspyOn(Foo, 'bar');\nFoo.bar().then(console.log);  // => error: then is not defined on undefined\n\nPossible Solution\nIn recent versions of node, anyway, you can use:\n    fn.constructor.name === 'AsyncFunction'\n\nContext\nThrowing this out here.  I think the behavior \"un-configured spies return undefined\" is consistent, and there's a lot of history there we don't want to break, but it's also not very useful in my opinion.\nAlmost all useful nodejs javascript involves promises, and most of that work can now be written using async functions.  Unlike promise-based functions, we can actually tell (generally) when a function is async, which means we know it's totally useless to return a value that's not a promise.", "createdAt": "2019-05-05T23:28:15Z", "updatedAt": "2019-05-08T00:28:52Z", "closedAt": "2019-05-08T00:28:51Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-07T00:33:17Z", "contents": "My main concern with making a change like this is that it (accidentally) creates a distinction between an async function and a function that returns a Promise that isn't obvious to a user. As a user of Jasmine I would expect spyOn(Foo, 'bar') to do the same thing whether the function uses the async keyword or returns a Promise, and we wouldn't be able to do that here.\nThis is especially true if we start talking about code running in a browser that might have Promise but not necessarily async and a transpiler that turns one into the other. Now my tests behave differently depending on where they are run. This seems like it would be a bad thing.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-07T13:35:26Z", "contents": "Oh, yeah, the transpilation issue is something I hadn't even thought about.\nI guess the thing that is frustrating is the requirement any time you have a promise-based method (which is a lot of them for modern node), spying is always spyOn(method).and.returnValue(Promise.resolve()), which is so much longer than spyOn(method).\nThe PR currently up for spyOn(method).and.resolveValue() takes a little sting out, so that's something.\n(I'm fine with just closing this suggestion.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-08T00:28:51Z", "contents": "I'm going to close this in favor of getting better and.resolveValue syntax in. I would expect this functionality to mostly lead to people still doing something like that just so they don't need to go look up whether this function is async or return Promise.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1694, "url": "https://github.com/jasmine/jasmine/issues/1694", "title": "Suggestion: matcher 'toHaveBeenCalledExactly'", "contents": "Context\nOn many projects on my team, we encourage people to avoid toHaveBeenCalled() and toHaveBeenCalledWith(), in favor of this stricter check:\n    expect(spy.calls.allArgs()).toEqual([\n        [\"first\", \"expected\", \"call\"],\n        [\"second\", \"expected\", \"call\"]\n    ]);\n\nThis is the last word in spy expects: you'll get notified if you called too many times or too few times, and if any of the calls weren't exactly as expected or were in a different order than expected, you get nice diff-builder output describing the differences.\nExpected Behavior\nI'd like to be able to do that check, with a built-in matcher instead:\n// Just like the .calls.allArgs() approach:\nexpect(spy).toHaveBeenCalledExactly([\n    [\"first\", \"args\"],\n    [\"second\", \"args\"]\n]);\n\n// Or maybe the matcher could just use ...args instead of an array:\nexpect(spy).toHaveBeenCalledExactly(\n    [\"first\", \"args\"],\n    [\"second\", \"args\"]\n);\n\n// This is equivalent to .not.toHaveBeenCalled()\nexpect(spy).toHaveBeenCalledExactly();\n\nCurrent Behavior\nToday, you can use a .toEqual on .calls.allArgs().  Totally serviceable, just lacks a little syntax sugar.\nPossible Solution\nI'd be happy to put up a PR for this one, if it sounds like something that could belong in core.\nPossible names?\n\ntoHaveBeenCalledExactly([], [], [])\ntoHaveBeenCalledWithExactArgs([], [], [])\ntoHaveBeenCalledWithOnly([], [], [])\n\nI think the functionality is pretty simple, it mostly just needs an understandable name and need to decide which calling syntax is least surprising (an array of arrays, or an ...arguments list of arrays, to represent the args for each call).", "createdAt": "2019-05-07T13:32:35Z", "updatedAt": "2019-05-29T00:43:20Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-09T00:18:46Z", "contents": "I think you can already accomplish most of this with something like the following:\nexpect(spy).toHaveBeenCalledWith(\"first\", \"expected\", \"call\");\nexpect(spy).toHaveBeenCalledWith(\"second\", \"expected\", \"call\");\nexpect(spy).toHaveBeenCalledTimes(2);\nThis admittedly doesn't check for the order of the two calls, and I don't think that toHaveBeenCalledBefore will do the right thing for multiple invocations of the same spy. I don't think we want a new matcher with the word exact in it for this, because that implies that toHaveBeenCalledWith doesn't do an exact comparison. Especially when compared with other mocking libraries like sinon that have a distinction between a call with some args and a call with exact args.\nI would be happy to see if we can find a way to extend toHaveBeenCalledBefore to work with multiple calls to a single spy. Or just document it correctly if it turns out that that already works.\nHope this helps. Thanks for using Jasmine!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-09T00:53:58Z", "contents": "Your example is definitely the same spirit, but the output (just imo) is nowhere near as concise and helpful as .calls.allArgs()).toEqual().  You get the same assertion, but nowhere near the level of immediate debugging when the test fails.\nGood call on the phrase \"exact\".  I'll noodle on it.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-15T15:17:15Z", "contents": "A possibility, deviating slightly from toHaveBeenCalled:\nexpect(fn).toHaveCallSequence([[args...], [args...], [args...]]);\n\nRequiring an array of arrays (instead of having each parameter be an array) is mostly because this opens you up to being able to do array tricks like jasmine.arrayContaining / jasmine.arrayWithExactContents.  (Although to your point, if you want to do these array tricks than using the existing Times & CalledWith matchers may be more readable.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-29T00:43:20Z", "contents": "I'm definitely open to working on the messages for toHaveBeenCalledWith so the errors better indicate the specific calls and maybe even what's different in them. I think one of the current problems there is that it prints the calls out raw as the result from allArgs(). I would be concerned as well, that a toHaveCallSequence would end up encouraging long chains of calls at once, which will be hard to read, instead of just looking at what actually matters for whatever is being tested.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1695, "url": "https://github.com/jasmine/jasmine/issues/1695", "title": "toBeCloseTo fails in edge case (+ fix)", "contents": "the toBeCloseTo matcher started to fail recently on Chrome 74, i.e. the following cases are failing:\ndescribe(\"sample\", function() {\n    it(\"tobecloseto fails\", function() {\n        expect(4.030904708957288).toBeCloseTo(4.0309, 5);\n        expect(4.82665525779431).toBeCloseTo(4.82666, 5);\n        expect(-2.82665525779431).toBeCloseTo(-2.82666, 5);\n    });\n});\nA possible fix is the following:\ntobecloseto.js#29 change to:\npass: Math.round(delta * pow) <= maxDelta * pow\n\nVersion used: 3.4.0 & 2.99\nEnvironment name and version: Chrome 74 & NodeJs 12.2.0\nOperating System and version (desktop or mobile): WIndows 10", "createdAt": "2019-05-08T17:10:00Z", "updatedAt": "2019-05-21T00:11:06Z", "closedAt": "2019-05-21T00:11:06Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "paulvanbrenk", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "paulvanbrenk", "company": "Microsoft"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-09T00:21:17Z", "contents": "Thanks for finding this. I would be happy to review a pull request to fix this that includes some of those examples that fail correctly in Chrome and force the change in implementation.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "paulvanbrenk", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-09T19:01:27Z", "contents": "I should have some time next week to setup a Jasmine development environment and get a PR ready.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1696, "url": "https://github.com/jasmine/jasmine/issues/1696", "title": "Suggestion: detect expect() without matcher in core", "contents": "Summary\nIf you've used jshint / eslint / tslint, you're probably encountered some variety of a rule that helps you detect this chestnut:\nexpect(x > 3);     // missing .toBe(true)!\n\n// (ofc should use toBeGreaterThan, but at least toBe would assert something)\n\nIf you're not using a linter, though, to someone unfamiliar with javascript testing frameworks this looks totally valid and might sit in a large project for months/years without being detected.  Probably until the code breaks and the test doesn't and someone investigates.\nPossible solution\nAdd a simple boolean to Expectation that declares whether a matcher has been attached.  Whenever a matcher has been called, set this flag to true (can add to Expectation's comparison wrappers).  Then all Runnables (Spec/Suite) can be extended to add the result of every expectation factory call to a local list of expectations, and the QueueRunner can ask every runnable after it is finished \"do you have any expectations with no matchers?\", adding a new error to the spec/suite as appropriate.\nContext\nOn larger teams, if you don't have some very strong linting enabled, you can fall into this trap a lot.  I think maybe, it makes sense for Jasmine itself to consider an expectation with no matcher an error, since it is essentially a broken test.\nThe issue arises a lot when mixing different environments, for example, I've seen this before in jasmine + React tests:\nconst pane = mount(<MyPane />);\nexpect(pane.matchesElement(\n    // 20 lines of JSX here\n));   // Oops!\n// \"pane.matchesElement\" kind of looks like a matcher, but this test doesn't assert anything", "createdAt": "2019-05-09T10:56:32Z", "updatedAt": "2019-05-15T15:13:43Z", "closedAt": "2019-05-15T15:13:42Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 4, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-14T00:48:33Z", "contents": "Given the existing tooling in the various linters to detect this, I'm not sure Jasmine wants to do similar work. This would require a pretty hefty re-working to how expectations are managed within Jasmine, since currently the first time a Spec knows that it has any calls to expect is when they report their result to it. (This isn't completely true, currently a Spec just delegates back to Env and there isn't really a reason currently to round-trip through the runnable when the expectationFactory could be called directly from within Env.expect.)\nWe might be open to something like this in the future, but right now the effort seems to outweigh the benefits.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-14T01:06:46Z", "contents": "Respect that!  I'll make a final pitch for a much simplified version:\nEvery time you expect(), ask \"lastExpect\" if it had a matcher called on it.  If it didn't, toss up a spec failure.  Keep lastExpect around.  This isn't 100% foolproof but the code for it could live pretty much just in the expectation factory created by Env.\n(If that's still too much churn, I'm fine with closing this one for now... can always revisit if there's ever a big refactor in the future.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-15T01:09:57Z", "contents": "Expectations just aren't really tracked in any real way until they report a result currently, so this would probably still be a decent sized undertaking. Also of note, keeping track of the lastExpect still has an issue if that is the last expect() in a given spec, which seems like the most likely place to forget your matcher call.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-15T15:13:42Z", "contents": "I have a reference implementation of this in a branch; I'll sit on it for now, but may put up a PR later this year just as a \"how about this?\" \ud83d\ude09.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1702, "url": "https://github.com/jasmine/jasmine/issues/1702", "title": "CONTRIBUTING Guide is obsolete?", "contents": "The CONTRIBUTING guide still refers to ruby gem installs, running rake jasmine, etc.  I think this is obsolete (not sure about the VirtualBox stuff though).\nExpected Behavior\nContributing guide describes how to set up nodejs environment, how to get the various WebDriver launchers (Chrome, Firefox, Safari, PhantomJS, etc.), and how to run unit tests in each browser and nodejs.\nAlso, at least a vague list of what is tested in the CI build (travis) might be helpful -- like, what browser and version targets should be hit for a change to jasmine to be considered successful?  Also, the USE_SAUCE stuff is a little confusing -- often in branch builds none of that stuff runs at all.  Is this on purpose or a mistake?\nCurrent Behavior\nNo mention of webdriver/launcher installs or configuration.", "createdAt": "2019-05-15T16:42:37Z", "updatedAt": "2019-05-16T00:38:15Z", "closedAt": "2019-05-16T00:35:35Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 1, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-16T00:38:14Z", "contents": "Thanks for the heads up. The ruby stuff should still work, it just isn't the only way to accomplish the browser tests anymore. The CI build is a bit complex because all of the SauceLabs configuration is in secret variables on Travis, so they aren't available to malicious Pull Requests. In order to still show a \"green\" build for PRs, we silently skip the builds that would otherwise run with SauceLabs.\nIf you have any other details you'd like to see in there, I'm happy to take a look at a pull request or see some specifics in this issue.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1703, "url": "https://github.com/jasmine/jasmine/issues/1703", "title": "Ability to add custom AsyncMatchers", "contents": "While testing using the great new expectAsync matchers, I ran into a deficiency where toBeResolvedTo does not print what it was rejected with on rejections.\nawait expectAsync(\n    promiseReturningThing()\n).toBeResolvedTo(jasmine.any(Buffer));\nbecomes\nExpected a promise to be resolved to <jasmine.any(Buffer)> but it was rejected.\n\nI tried to overcome that with a custom async matcher that is a direct copy of toBeResolvedTo but that prints out the rejection cause for easier debugging.\nimport {toBeDescriptivelyResolvedTo} from \"../../matchers/async/toBeDescriptivelyResolvedTo\";\njasmine.addMatchers({\n    toBeDescriptivelyResolvedTo: toBeDescriptivelyResolvedTo\n})\nHowever, I found that custom matchers do not count as async matchers.\nExpected Behavior\nI expect to be able to define a custom async matcher.\nawait expectAsync(\n    promiseReturningThing()\n).toBeDescriptivelyResolvedTo(jasmine.any(Buffer));\nand have it print out the rejected value.\nExpected a promise to be resolved to <jasmine.any(Buffer)> but it was rejected with \"fake rejection\".\n\nCurrent Behavior\nI get\nTypeError: expectAsync(...).toBeDescriptivelyResolvedTo is not a function\nI can test it with a normal expect and it works, as far as being called, but then I get a failure from expect itself not working with the promise.\nawait (expect(Promise.resolve('b')) as any).toBeDescriptivelyResolvedTo(2);\nExpected [object Promise] to be descriptively resolved to 2.\n\nI can verify it is being called by adding console.log statements and seeing them output in addition to the failure.\nPossible Solution\nA possible workaround might exist by manipulating some of the internal globals, but it might be tricky as they are not all exposed. The correct code is probably going to look like something around src/core/Expectation.js, specifically addAsyncCoreMatchers. The current code is able to add the core async matchers.\nj$.Expectation or j$.asyncMatchers seem useful if one could get a reference.\nAlso note this todo about j$.pp, because toBeResolvedTo uses it.\nIf my problem is a typing issue that would be great and I can open an issue elsewhere.\nSuite that reproduces the behavior (for bugs)\n\nexport const toBeDescriptivelyResolvedTo  =\n    /**\n     * Expect a promise to be resolved to a value equal to the expected, using deep equality comparison.\n     * @function\n     * @async\n     * @name async-matchers#toBeResolvedTo\n     * @param {Object} expected - Value that the promise is expected to resolve to\n     * @example\n     * await expectAsync(aPromise).toBeResolvedTo({prop: 'value'});\n     * @example\n     * return expectAsync(aPromise).toBeResolvedTo({prop: 'value'});\n     */\n    function toBeResolvedTo(util: any, customEqualityTesters: any) {\n        console.log(\"eggo\");\n        return {\n            compare: function(actualPromise: any, expectedValue: any) {\n                console.log(\"waffle\");\n                function prefix(passed: any) {\n                    return 'Expected a promise ' +\n                        (passed ? 'not ' : '') +\n                        'to be resolved to ' + JSON.stringify(expectedValue);\n                }\n\n                return actualPromise.then(\n                    function(actualValue: any) {\n                        if (util.equals(actualValue, expectedValue, customEqualityTesters)) {\n                            return {\n                                pass: true,\n                                message: prefix(true) + '.'\n                            };\n                        } else {\n                            return {\n                                pass: false,\n                                message: prefix(false) + ' but it was resolved to ' + JSON.stringify(actualValue) + '.'\n                            };\n                        }\n                    },\n                    function(err: any) {\n                        return {\n                            pass: false,\n                            message: prefix(false) + ' but it was rejected with ' + JSON.stringify(err) + '.'\n                        };\n                    }\n                );\n            }\n        };\n    };\n\n---\n\n      await (expectAsync(Promise.reject('b')) as any).toBeDescriptivelyResolvedTo('a');\n\nContext\nNot printing the value makes debugging failed tests harder.\nNot being able to extend custom async matchers reduces Jasmine's power.\nYour Environment\n\nVersion used: 3.4.0\nEnvironment name and version (e.g. Chrome 39, node.js 5.4): Node 10\nOperating System and version (desktop or mobile): Alpine Linux Docker container\nLink to your project: N/A", "createdAt": "2019-05-15T19:53:06Z", "updatedAt": "2019-05-29T18:20:42Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "r4j4h", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "r4j4h", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "elliot-nelson", "company": "HBO"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-17T00:11:40Z", "contents": "The intention is definitely to allow adding custom async matchers at some point. We opted leave the feature out initially in order to get async matchers into Jasmine at all. I believe the architecture for async expectations should be similar enough to the way that synchronous expectations work that the same type of pattern can be followed. I would expect this to manifest as an addAsyncMatchers function on Env.js and exposed through the interface of Jasmine.\nI would be happy to review a pull request for this, or a pull request to update the toBeRejectedWith matcher to include the object that was the source of the rejection. Note that it should use j$.pp to format the object and not JSON.stringify both for more consistent formatting of the object and because Jasmine's pretty printer will handle cycles in objects, where JSON.stringify will not.", "reactions_count": 1, "reactions_data": ["HEART"]}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-18T11:52:32Z", "contents": "I'm asking this just as someone curious (since you are finding value in them); what do you typically use an async matcher for?  If you have async/await capability, I guess I would expect this:\nexpect(await promiseReturningThing()).toEqual(jasmine.any(Buffer));\n\nTo be \"more readable\" than:\nawait expectAsync(promiseReturningThing()).toBeResolvedTo(jasmine.any(Buffer));\n\n(I'm wondering if there are use cases I'm just missing.)", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-23T00:29:59Z", "contents": "expectAsync is also usable in a context with Promise support but without async/await support. So you could say:\nreturn expectAsync(promiseReturningThing()).toBeResolvedTo(jasmine.any(Buffer));\nIt can also be helpful for folks who want to think about these kinds of things as Promises that get resolved instead of as asynchronous things that they await.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "r4j4h", "authorAssociation": "NONE", "createdAt": "2019-05-29T17:00:49Z", "contents": "In addition to the points @slackersoft pointed out, I think handling promise rejection with expectAsync is a bit more readable than having try/catches sprinkled about the tests:\ntry {\n  await promise;\n} catch (e) {\n  expect(e).toEqual(\n      jasmine.any(Buffer)\n  );\n}\nreturn expectAsync(promise).toBeRejectedWith(jasmine.any(Buffer));\nThey also fail differently:\nawaited equals:\nExpected Error: demo to equal <jasmine.any(Buffer)>.\n\ntoBeRejectedWith\nExpected a promise to be rejected with <jasmine.any(Buffer)> but it was rejected with Error: demo.\n\nTo be fair, that can be ameliorated with withContext somewhat:\nexpect(e).withContext(\"Expected a promise to be rejected with a different value\").toEqual(jasmine.any(Buffer));\nExpected a promise to be rejected with a different value: Expected Error: demo to equal <jasmine.any(Buffer)>.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-29T18:20:41Z", "contents": "Ah, that makes sense; the toBeRejectedWith syntax does look good.  In fact I think that uncovered a big blind spot I had:\n// This won't work! It'll throw inline and break the test.\nexpect(await promise).toThrowError('demo');\n\n// This won't work either! await promise not allowed in non-async function\nexpect(() => await promise).toThrowError('demo');\n\n// This won't work either! it doesn't throw, it rejects\nexpect(async () => await promise).toThrowError('demo');\nFor some reason I thought there was a way to collapse an awaited promise into a toThrowError matcher, but I think there isn't.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": ["help needed", "ready for work"], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1704, "url": "https://github.com/jasmine/jasmine/issues/1704", "title": "Spec 'x' has no expectations.", "contents": "Spec 'x' has no expectations.\nExpected Behavior\nit should be a warning\nCurrent Behavior\nit is an error (in the console)\nPossible Solution\nSuite that reproduces the behavior (for bugs)\n\ndescribe(\"regular use\", function() {\n\t\tit(\"basic use should work\", function() {\n\t\t\tvar x = new X();\n\t\t\tx.run();\n\t\t});\n\t});\nContext\nI run some simple statement and not throwing an error is enough for the test to make sense\nYour Environment\njasmine-core\": \"3.4.0\n(browser)", "createdAt": "2019-05-16T16:48:22Z", "updatedAt": "2019-06-12T20:32:52Z", "closedAt": "2019-06-12T20:32:19Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "GrosSacASac", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "GrosSacASac", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 5, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-17T00:27:26Z", "contents": "I run some simple statement and not throwing an error is enough for the test to make sense\n\nThis is exactly why it doesn't fail your test. Jasmine logs it as an error in the browser console because the absence of expectations is often a mistake.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GrosSacASac", "authorAssociation": "NONE", "createdAt": "2019-05-17T07:51:43Z", "contents": "I understand, my proposal is to make it a warning", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-23T00:23:59Z", "contents": "Can you expand a bit more on what issues you're seeing with it using console.error instead of console.warn? I'm not necessarily averse to the change, but I don't want to have change just for changes sake.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "GrosSacASac", "authorAssociation": "NONE", "createdAt": "2019-06-12T19:06:35Z", "contents": "I think it is more consistent to use console.warn for warnings. Feel free to close the issue.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-06-12T20:32:52Z", "contents": "You're right, I see what you're talking about. Sorry for the confusion, will be fixed in the next release", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1707, "url": "https://github.com/jasmine/jasmine/issues/1707", "title": "Can we get a mention in the docs somewhere for @testdeck/jasmine?", "contents": "Question\nWe have created a wrapper for existing test frameworks, including also jasmine.\nPlease see https://github.com/testdeck/testdeck and also https://github.com/testdeck/testdeck-jasmine-seed for a working minimal setup.\nPerhaps you can give us a little boost by mentioning the project in your official documentation?\nTIA!", "createdAt": "2019-05-17T19:45:22Z", "updatedAt": "2019-06-02T16:54:27Z", "closedAt": "2019-06-02T16:54:27Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "silkentrance", "authorAssociation": "NONE", "participants_count": 2, "participants_data": [{"login": "silkentrance", "company": null}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 2, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-29T00:34:34Z", "contents": "A link from the Jasmine docs seems like it would be an endorsement of your project. I don't really have time to review any of the various projects that wrap Jasmine to change the behavior, so I don't think I would be able to give a sincere endorsement.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "silkentrance", "authorAssociation": "NONE", "createdAt": "2019-06-02T16:54:20Z", "contents": "Too bad, but I thank you anyway for taking your time. For back reference: testdeck/testdeck-marketing#2", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1709, "url": "https://github.com/jasmine/jasmine/issues/1709", "title": "Implement \"skip()\" in Jasmine", "contents": "Summary\nJasmine should support a skip() interface.  This issue is being filed so before any work is done, we can agree on what that interface should look like.\nProposed Syntax\nVARIANT 1: Straight up call, no message\nit(\"isn't finished yet\", function() {\n    skip();\n    callAMethodThatDoesntExist();\n});\n\nVARIANT 2: Straight up call, with explanatory message\n// it\nit(\"isn't finished yet\", function() {\n    skip(\"need to implement this\");\n    callAMethodThatDoesntExist();\n});\n\n// Or before\nbeforeEach(function() {\n    skip(\"these tests don't work yet\");\n});\n\n// Or after\nafterEach(function() {\n    skip(\"this cleanup phase is broken\");\n});\n\nVARIANT 3: Skip partial test, no message\nit(\"isn't finished yet\", function() {\n    skip(function() {\n        callAMethodThatDoesntExist();\n    });\n});\n\nVARIANT 4: Skip partial test, with explanatory message\nit(\"isn't finished yet\", function() {\n    skip(\"need to implement this\", function() {\n        callAMethodThatDoesntExist();\n    });\n});\n\nVARIANT 5: Skip full test (wrapper approach)\nit(\"isn't finished yet\", skip(function() {\n    callAMethodThatDoesntExist();\n}));\n\nVARIANT 6: Skip full test (wrapper approach w/message)\nit(\"isn't finished yet\", skip(\"need to implement this\", function() {\n    callAMethodThatDoesntExist();\n}));\n\nVARIANT 7: Skip block of tests (suite level)\ndescribe(\"My Module\", function() {\n    it(\"works\", function() { });\n\n    skip(\"need to implement these\", function() {\n        it(\"fails\", function() { });\n        it(\"fails again\", function() { });\n    });\n});\n\nI am including Variants 5-7 so we can intentionally include or exclude them.  Variants 1-4 all happen \"inside\" a running spec context; Variants 5-7 would be outside a running spec but in a suite context, so we'd need to detect that and behave differently if we cared to support it.\nProposed Behavior\nMy understanding of how skip() should work is that it should immediately exit the current function, and any follow-up functions at that level.  It should still execute any functions at any level above this level.\nLevel        Function Containing skip()\n-----        --------------------------\n0            beforeAll\n1              beforeEach\n2                beforeEach\n3                  it\n2                afterEach\n1              afterEach\n0            afterAll\n\nExpressed as requirements:\n\nIf skip() is encountered inside it, skip the rest of this it.  All afterEach's defined must be called in order as usual.\nIf skip() is encountered inside a beforeEach, skip the rest of that beforeEach, skip the it we were about to execute, and skip the same-level corresponding afterEach.  All afterEach defined above this level must still execute -- for example, a skip encountered in Level 2 will skip Level 2's afterEach but not Level 1's.\nIf skip() is encountered inside a afterEach, skip the rest of that function, but nothing else.\nIf skip() is encountered inside a beforeAll, I'm not sure what should happen.  Either literally no tests at all should run (i.e. report NOTHING), or, we should run everything but every single beforeEach, it, and afterEach is skipped.  The afterAll is also skipped in this case.\n\nRelationship with pending()\nThere are similarities between pending() and skip().  I think the skip interface should make it intentional that Jasmine will never for any reason attempt to run the skipped content, and that it is well-suited for:\n\nBroken code (potentially unrunnable)\nUnsafe code (code with side effects that could break other tests)\nSlow tests (i.e. a large suite with tests that are all timing out due to an error)\nIntermittent tests (sometimes pass, sometimes fail)\n\nThe intention for pending(), I believe, is tests that are fundamentally sound but are just not passing yet, which is not the same category as the situations above.\nChanges to Reporting API + Packaged Reporters\nTODO: Decide whether we need to and can report \"skipped\" and \"pending\" tests separately to reporters, update the reporting API, and update packaged reporters to display this information.  Determine whether we can make this a non-breaking change (ideally, outdated custom reports simply take a new field -- skipped -- that they don't display until they are updated).\nChanges to shortcut (xit/xdescribe) functions\nTODO: Is it appropriate to change xit/xdescribe to \"skip\" instead of \"pending\"?\nComparisons to other popular projects: Mocha just copies Jasmine, so xit translates to pending.  RSpec interprets xit/xdescribe as skipped, NOT pending, so we could align with them in Jasmine if desired.\nNew helper shortcuts\nSpeaking of RSpec, note that they provide the it \"replacements\" skip and pending (so skip(\"blah\", function() { instead of it()) to easily mark tests as skipped or pending.  \"skip()\" is identical to \"xit()\" for RSpec.  These might be alternative, better approaches than supporting Variants 5-7 up above.  However, this would increase the additions to global scope.\nApproach\nSorry for the essay.  I'd like to see this functionality, and want to make sure it's laid out for anyone who might want to tackle it.  I'll plan on updating these requirements based on comments below.", "createdAt": "2019-05-19T16:43:12Z", "updatedAt": "2019-06-25T23:45:20Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 3, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}, {"login": "raketenolli", "company": null}], "comments_count": 3, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-21T00:53:13Z", "contents": "My inclination is that we really only need Variants 1 & 2 from here. The other options seem to have much lower usefulness. My basic thoughts for skip are to have a way to cause all of the specs in  a describe (and their beforeEach, etc.) to not run and supply a message about why this is being done. I think a fine first pass would be to have skip work like having oneFailurePerSpec turned on when called and jump straight to cleanup. I think it's probably even fine to have it not worry about the levels of hierarchy when determining where in the cleanup to jump to.\nIf skip is called from within a beforeAll it should behave just like xdescribe but with the addition of an optional error message. I believe the reporter changes with 3.0 should already have a difference with excluded vs. pending as different statuses.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "raketenolli", "authorAssociation": "NONE", "createdAt": "2019-06-13T12:45:45Z", "contents": "1 and 2 are very useful and if we have\nit(\"a test\", function() {\n  doStuff();\n  skip();\n  doMoreStuff();\n}\n\nthen doMoreStuff() should not be executed, but doStuff() should. I don't really have an opinion on whether the test should be marked as \"skipped\" anyway. Probably should.\nWhy I came here is because of #1579 and I would like to be able to skip tests from a beforeEach() but retain the continue-after-failed-expectation functionality, which is not possible currently.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-06-25T23:45:20Z", "contents": "@raketenolli I believe your example inside a single it should work currently with pending. I would want to make sure that also works with a skip, but the primary use case for skip is to differentiate between a temporary disabling (pending) vs a more permanent one (skip). The goal of skip would in fact be to have it skip tests from a beforeEach without needing to turn on the oneFailurePerSpec option.", "reactions_count": 1, "reactions_data": ["THUMBS_UP"]}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1714, "url": "https://github.com/jasmine/jasmine/issues/1714", "title": "Suggestion: officially treat spies on `x#get` and `x#set` as properties", "contents": "I'd like to extend spyOn slightly so that these two are equivalent:\nspyOn(object, 'thing#get').and.returnValue(42);\nspyOnProperty(object, 'thing', 'get').and.returnValue(42);\nIf we make the string prop#[get|set] the official way to refer to property spies, we get a couple of benefits:\n\n\nThe existing createSpyObj function gets property spies for free, since 'prop#get' can jus be included in the string array passed to createSpyObj.  This would close PR #1569.\n\n\nThe upcoming getSpy functionality I'd like to add would no longer need a corresponding separate getSpyOnProperty method -- you could just do getSpy(object, 'field#get').and.callThrough() in order to change the behavior of an existing property spy.\n\n\nThe current spyOnProperty method already exists so we'd keep supporting it.  Maybe we could mark it deprecated for a far-future release to remove in favor of this new syntax.\n\n\nContext\nThe goal here is to make spying on properties both as simple and as similar (to function spies) as possible.  I think this would get us really close and looks, imo, reasonable.", "createdAt": "2019-05-22T18:31:45Z", "updatedAt": "2019-06-07T11:15:36Z", "closedAt": "2019-06-07T11:15:36Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 2, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}, {"login": "slackersoft", "company": "Pivotal Labs"}], "comments_count": 6, "comments_data": [{"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-24T00:37:53Z", "contents": "I think spyOnProperty is far more discoverable than the option to tack on a #get would be. I'm not inclined to have two different ways to accomplish the same task unless it solves some greater problem.\nI would also argue that needing to change the strategy for a spy on a property indicates that you don't really have a property, but should convert it to be a function, and this is just a way for the tests to help you realize this.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-05-24T00:54:11Z", "contents": "OK, that's fair.\nYour preference on properties vs functions makes sense to me, but usually I'm not using a spy to mock my own code, I'm mocking a resource I'm using that I didn't write.  So I'm at the mercy of that API, which may be property-happy.\nFor one-off usage simply saving the spy for reuse works.  That doesn't work for the createSpyObj case, but I guess the original plan (a getSpy-type function) might work.\nI wonder if you'd consider adding a way to respy on a property one-off, rather than allowing respy across the board. If I can do either of these:\nrespyOnProperty(foo, 'bar', 'get').and.stub();\nspyOnProperty(foo, 'bar', 'get', true /* respy */).and.stub();\n\nThen you don't need a getSpy, as a getSpy is really just a spyOn for existing spies.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-05-31T00:46:16Z", "contents": "If I had to pick one, I would lean toward options to the existing spyOn and spyOnProperty functions instead of adding new functions to Jasmine's top level interface. This interface would also jive well with the discussion in #953 around what the interface for \"respying\" would look like.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-02T01:09:12Z", "contents": "OK.  Having a final optional boolean (e.g. spyOn(foo, 'bar', true) and spyOnProperty(foo, 'bar', 'get', true)) would work for me.\nIt's worth asking, is it possibly time to change the default to allow respy -- or, even, completely remove the concept of erroring on respying?  Every time I have run into this error, my only reaction is to change spyOn(foo, 'bar').and to foo.bar.and -- because the goal is to provide different behavior for the spy.\nI understand the goal is probably to alert users to a potential mistake, but things like defining duplicate test names, calling expect without a matcher, defining describe blocks with no function, etc., are all also potential mistakes, and we rely on third party linters for those.  Is there any reason not to completely remove this error, simplifying the whole concept of spying, and assuming that if people need \"protection from respy\" they'll create a linting rule to provide it?", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "slackersoft", "authorAssociation": "MEMBER", "createdAt": "2019-06-04T16:55:47Z", "contents": "I would argue that using spyOn over a function is most likely a mistake since it demonstrates that the function is not currently expected to be a spy in this context. If something is a spy when not expected, it is likely that your tests aren't testing the things you think they are. Making this option explicit gives you a way to look at the one line of code where the change to the spy strategy is being made and know that the spy was originally installed elsewhere. I think for the time being we'll leave the default as is.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-07T11:15:36Z", "contents": "Closing this suggestion, we'll just call it covered by #1719.", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1715, "url": "https://github.com/jasmine/jasmine/issues/1715", "title": "Suggestion: change strategy 'resolveWith' to 'resolveTo'", "contents": "For the recently added .and.resolveWith() and .and.rejectWith() strategies, there are slight mismatches with existing naming.\nExisting expectAsync().toBeResolvedTo() would suggest that maybe the resolving strategy should be named .and.resolveTo().  This would mean Jasmine's official way of referring to promises is that they \"resolve to\" something or \"reject with\" something.\nFor rejecting, we have a current pattern already:\n\n\n.and.throwError always throws an Error\n\n\nexpect().toThrow confirms it threw the specific object\n\n\nexpect().toThrowError checks the type/message of the error\n\n\n.and.rejectWith always throws an Error\n\n\nexpect().toBeRejectedWith confirms it rejected with the specific object\n\n\nexpect().toBeRejectedWithError checks the type/message of the error\n\n\nThis makes me wonder if the rejection strategy should be called .and.rejectWithError.  There is no .and.rejectWith, because we don't support a way to reject a thing that is not an Error.  (If, for some legacy reason, you really need your code to do this, you'd need to callFake and reject it yourself.)\nI thought I'd put this up here for consideration before the new strategies go out in an official release.  The devil's advocate to all of the above is \"maybe the existing naming is wrong, and it's easier to just talk about resolveWith and rejectWith\".", "createdAt": "2019-05-23T15:36:25Z", "updatedAt": "2019-05-24T00:31:03Z", "closedAt": "2019-05-24T00:31:03Z", "state": "CLOSED", "closed": true, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1717, "url": "https://github.com/jasmine/jasmine/issues/1717", "title": "Feature suggestion: Add toHaveBeenCalledOnceWith matcher", "contents": "It would be extremely useful to have a toHaveBeenCalledOnceWith() matcher combining both toHaveBeenCalledTimes(1) and toHaveBeenCalledWith() matchers.\nAbout 70% of my unit test expectations about functions look like this:\nexpect(backendService.get).toHaveBeenCalledTimes(1);\nexpect(backendService.get).toHaveBeenCalledWith('SomeArgument', someSecondArgument);\nIt would be really much, much more readable if we could have a single matcher that combines both matchers:\nexpect(backendService.get).toHaveBeenCalledOnceWith('SomeArgument', someSecondArgument);", "createdAt": "2019-06-06T11:01:03Z", "updatedAt": "2019-06-06T11:01:03Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "Maximaximum", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "Maximaximum", "company": "mazepa-studio.com"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1723, "url": "https://github.com/jasmine/jasmine/issues/1723", "title": "Error when expecting a specific enum value", "contents": "I'm using Jasmine with an Angular 7 app and I have a test where:-\nsomeValueContainingAnEnum = MyEnum.EnumValue\n...\nexpect(someValueContainingAnEnum).toEqual(MyEnum.EnumValue);\nand I'm getting a compiler error:-\nERROR in src/my.component.spec.ts: error TS2345: Argument of type 'MyEnum.EnumValue' is not assignable to parameter of type 'Expected<MyEnum.EnumValue>'.\nand MyEnum is defined as:-\nexport enum MyEnum {\n     EnumValue,\n     ...\n}\nExpected Behavior\nNo compile errors.\nCurrent Behavior\nCompile errors.\nPossible Solution\nIf I don't assign someValueContainingAnEnum a value, the test compiles. I suspect the compiler has made a type inference that is incompatible with Jasmine.\nContext\nThe code is not compilable.\nYour Environment\n\nJasmine-core: 3.4.0\nAngular: 7.2.15\nTypescript: 3.2.4\n@types/jasmine: 3.3.13\n@types/jasminewd2: 2.0.6\nGoogle Chrome Version 75.0.3770.100 (Official Build) (64-bit)\nNode: 12.3.1\nMacOS: 11.13.6", "createdAt": "2019-06-22T11:36:58Z", "updatedAt": "2019-06-27T13:40:08Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "chrisvelevitch", "authorAssociation": "NONE", "participants_count": 3, "participants_data": [{"login": "chrisvelevitch", "company": null}, {"login": "elliot-nelson", "company": "HBO"}, {"login": "be-ndee", "company": "Viermorgen"}], "comments_count": 4, "comments_data": [{"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-26T12:19:59Z", "contents": "Although frustrating, right now I believe this is a language problem - see microsoft/TypeScript#28102.  (Essentially, types extended from WrapperType<Enum> do not infer WrapperType<Enum.NAME>.)\nI would suggest opening a ticket against https://github.com/DefinitelyTyped/DefinitelyTyped for jasmine if I thought there was a way to work around that, but I don't think there is until the type inference is fixed.\nA couple local workarounds in the meantime:\nAvoid direct assignment\nAs you already discovered, if the compiler can't infer locally what specific value it is, the problem will go away.  e.g.:\ndescribe('a working suite', function() {\n    type Context = {\n        value: Enum;\n    }\n\n    beforeEach(function(this: Context) {\n        this.value = Enum.A;\n    });\n\n    it('is annoying, but works', function(this: Context) {\n        // The compiler doesn't know the value, so this compiles.\n        expect(this.value).toEqual(Enum.B);\n    });\n});\n\nCast to Enum\nProbably much simpler, you can cast to Enum almost anywhere and the problem will go away:\n// Up front\nconst value = Enum.A as Enum;\nexpect(value).toEqual(Enum.B);\n\n// Or in expect\nconst value = Enum.A;\nexpect(value as Enum).toEqual(Enum.B);\n\nHope that helps!", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "be-ndee", "authorAssociation": "NONE", "createdAt": "2019-06-27T09:06:32Z", "contents": "Having the same issue here. Are you sure it is a language problem? I discovered it with enums as well, and then I noticed that there is the problem with this code as well:\nconst x: (1|2) = 1;\nexpect(x).toBe(2); // error: Argument of type '2' is not assignable to parameter of type 'Expected<1>'.\n\nconst y: number = 1;\nexpect(y).toBe(2); // works\n\nconst z = 1;\nexpect(z).toBe(2); // works", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-27T13:28:59Z", "contents": "Thanks for the additional example... I still think this isn't a jasmine typing problem, but my original explanation is definitely full of holes!  It looks like any time type inference collapses the type, you could get this issue (doesn't need to be an enum or subclass).\nAccording to the answer (so far) on question https://stackoverflow.com/questions/56791777/how-to-avoid-collapsing-a-wrapped-union-type/56791973#56791973, I think this is considered \"working as intended\" -- if the compiler can determine which piece of any union type is selected, it will collapse the type.", "reactions_count": 0, "reactions_data": []}, {"authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "createdAt": "2019-06-27T13:40:07Z", "contents": "Also see link to this issue: microsoft/TypeScript#8513, which has several posts (some explaining why, some with issues) about the feature in question, which is called \"control flow analysis\" (compiler keeping track whenever it can of the actual value of variables, not just their declared types).", "reactions_count": 0, "reactions_data": []}], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1724, "url": "https://github.com/jasmine/jasmine/issues/1724", "title": "Suggestion: Apply a spy strategy to a group of spies", "contents": "PROPOSAL\nI'd like to be able to apply a spy strategy to a group of spies.\nThere are 2 situations in Jasmine today that involve creating multiple spies (createSpyObj and spyOnAllFunctions).  Unfortunately both of them return an object, and we can't break that API, so my suggestion is:\nspyOnAllFunctions(widget, and => and.throwError('Do not call me'));\n\ncreateSpyObj('widget', ['a', 'b'], and => and.returnValue('Hello!'));\n\nBoth functions would add a final optional parameter, a \"spy strateger setter\".  If specified, it will be called for each spy created, allowing introspection e.g.:\nspyOnAllFunctions(widget, and => and.returnValue(`You called ${and.identity}.`));\n\nFor the createSpyObj case, the spy strategy would take precedent over the default values provided in object form:\nvar obj = createSpyObj({ f: 3, g: 4 }, and => and.returnValue(7));\nexpect(obj.f()).toEqual(7);\n\nBut, they would still be initially set as a base:\nvar obj = createSpyObj({ f: 3, g: 4 }, and => {\n    // Advanced usage\n    and.getSpy().withArgs(jasmine.any(Number)).and.callFake(x => x * 2);\n});\n\nexpect(obj.f(10)).toEqual(20);\nexpect(obj.f()).toEqual(3);\n\nThis \"spy strategy setter\" implementation would mimic the syntax in #1716, so it would be consistent.\nPOTENTIAL DOWNSIDES\nThis might further fragment the ways in which to use createSpyObj... e.g., including properties:\nvar foo = createSpyObj('foo', ['f', 'g'], ['x', 'y'], and => and.throwError('No Good'));\n\nfoo.x           // => throws error\nfoo.x = 3;    // => throws error\n\nALTERNATIVES\nThere's been discussion before (#1692) about a way to retrieve spies with some kind of jasmine.getSpies call, e.g.:\nspyOnAllFunctions(widget);\njasmine.getSpies(widget).and.throwError('You called me');\n\nThis might be a better way forward, because the getSpies function would be a brand new interface that could potentially have some options (you could specify whether to include methods, properties, etc., something like):\nvar widget = jasmine.createSpyObj('widget', ['a', 'b', 'c'], ['x', 'y']);\n\n// Update the spy strategy for the functions & prop getters, but not prop setters\njasmine.getSpies(widget, { fn: true, get: true, set: false }).and.throwError('You called me');", "createdAt": "2019-06-26T11:50:27Z", "updatedAt": "2019-06-26T11:52:52Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "elliot-nelson", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "elliot-nelson", "company": "HBO"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1725, "url": "https://github.com/jasmine/jasmine/issues/1725", "title": "Proposal: await jasmine.clock().asyncTick()", "contents": "Several previous issues have discussed the way mock clock doesn't work very well with Promises #1659 #1282 #710 . Here I have a proposal for a new method on the mock clock that will inter-operate with Promises nicely.\nIt's quite common to write code like this:\nasync function() {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('A');\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('B');\n}\n\nYou might expect jasmine.clock().tick(2000) to log both A and B, but it will log neither A nor B! The issue is that .tick() runs any scheduled timeouts one after the other, synchronously, and doesn't allow microtasks to run.\nInstead, we need to run a timeout, wait for microtasks to run, and then run the remaining timeouts, repeat. This is pretty close to the way the JS engine actually works.\nI propose adding an .asyncTick() method that does what I've just described. The test would call it like this:\nawait jasmine.clock().asyncTick(2000);\n\nOne difficulty is knowing how to wait for microtasks to run. In previous issues, people pointed out that various Promise implementations work in different ways. My solution to this (in other settings) has been to schedule a (real) setTimeout. This does slow the test down, but it's a lot better than using a real clock.\nAnother alternative could be to call jasmine's clearStack(). If a user has a Promise implementation that is slower than whatever clearStack() does, we could just not care. (They can always get a better Promise implementation!) This would be my preferred approach.\nIf this seems like a reasonable proposal, I will try to code it up and send a PR. Seems like I need to add a runScheduledFunctionsAsync method to DelayedFunctionScheduler.", "createdAt": "2019-06-27T04:25:00Z", "updatedAt": "2019-06-27T04:25:00Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "stephenfarrar", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "stephenfarrar", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 1, "reactions_data": ["HEART"], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1726, "url": "https://github.com/jasmine/jasmine/issues/1726", "title": "toBe should pass on identical objects, even if they have a bad toString", "contents": "Test that demonstrates the bug\ndiff --git a/spec/core/matchers/toBeSpec.js b/spec/core/matchers/toBeSpec.js\nindex e065af57..84dc83db 100644\n--- a/spec/core/matchers/toBeSpec.js\n+++ b/spec/core/matchers/toBeSpec.js\n@@ -27,6 +27,16 @@ describe(\"toBe\", function() {\n     expect(result.message).toBe(\"Expected Object({ foo: 'bar' }) not to be Object({ foo: 'bar' }). Tip: To check for deep equality, use .toEqual() instead of .toBe().\")\n   });\n \n+  it(\"passes with a custom message when expected is an object with an invalid toString\", function() {\n+    var matcher = jasmineUnderTest.matchers.toBe(jasmineUnderTest.matchersUtil),\n+      result,\n+      obj = {foo: \"bar\", toString: function() {throw new Error('I am a bad toString');}};\n+\n+    result = matcher.compare(obj, obj);\n+    expect(result.pass).toBe(true);\n+    expect(result.message).toBe(undefined);\n+  });\n+\n   it(\"fails with no message when actual !== expected\", function() {\n     var matcher = jasmineUnderTest.matchers.toBe(jasmineUnderTest.matchersUtil),\n       result;\nSee #1718", "createdAt": "2019-06-27T16:07:47Z", "updatedAt": "2019-06-27T16:07:47Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "johnjbarton", "company": "@google"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1727, "url": "https://github.com/jasmine/jasmine/issues/1727", "title": "custom reporter for disabled tests", "contents": "Folks, we have a need to report on tests which are disabled using a custom reporter.  Is this something that is easily implementable in \n  \n    \n      jasmine/lib/jasmine-core/jasmine.js\n    \n    \n        Lines 1374 to 1442\n      in\n      066162d\n    \n    \n    \n    \n\n        \n          \n               var reporter = new j$.ReportDispatcher( \n        \n\n        \n          \n                 [ \n        \n\n        \n          \n                   /** \n        \n\n        \n          \n                    * `jasmineStarted` is called after all of the specs have been loaded, but just before execution starts. \n        \n\n        \n          \n                    * @function \n        \n\n        \n          \n                    * @name Reporter#jasmineStarted \n        \n\n        \n          \n                    * @param {JasmineStartedInfo} suiteInfo Information about the full Jasmine suite that is being run \n        \n\n        \n          \n                    * @param {Function} [done] Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. \n        \n\n        \n          \n                    * @returns {} Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion. \n        \n\n        \n          \n                    * @see async \n        \n\n        \n          \n                    */ \n        \n\n        \n          \n                   'jasmineStarted', \n        \n\n        \n          \n                   /** \n        \n\n        \n          \n                    * When the entire suite has finished execution `jasmineDone` is called \n        \n\n        \n          \n                    * @function \n        \n\n        \n          \n                    * @name Reporter#jasmineDone \n        \n\n        \n          \n                    * @param {JasmineDoneInfo} suiteInfo Information about the full Jasmine suite that just finished running. \n        \n\n        \n          \n                    * @param {Function} [done] Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. \n        \n\n        \n          \n                    * @returns {} Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion. \n        \n\n        \n          \n                    * @see async \n        \n\n        \n          \n                    */ \n        \n\n        \n          \n                   'jasmineDone', \n        \n\n        \n          \n                   /** \n        \n\n        \n          \n                    * `suiteStarted` is invoked when a `describe` starts to run \n        \n\n        \n          \n                    * @function \n        \n\n        \n          \n                    * @name Reporter#suiteStarted \n        \n\n        \n          \n                    * @param {SuiteResult} result Information about the individual {@link describe} being run \n        \n\n        \n          \n                    * @param {Function} [done] Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. \n        \n\n        \n          \n                    * @returns {} Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion. \n        \n\n        \n          \n                    * @see async \n        \n\n        \n          \n                    */ \n        \n\n        \n          \n                   'suiteStarted', \n        \n\n        \n          \n                   /** \n        \n\n        \n          \n                    * `suiteDone` is invoked when all of the child specs and suites for a given suite have been run \n        \n\n        \n          \n                    * \n        \n\n        \n          \n                    * While jasmine doesn't require any specific functions, not defining a `suiteDone` will make it impossible for a reporter to know when a suite has failures in an `afterAll`. \n        \n\n        \n          \n                    * @function \n        \n\n        \n          \n                    * @name Reporter#suiteDone \n        \n\n        \n          \n                    * @param {SuiteResult} result \n        \n\n        \n          \n                    * @param {Function} [done] Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. \n        \n\n        \n          \n                    * @returns {} Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion. \n        \n\n        \n          \n                    * @see async \n        \n\n        \n          \n                    */ \n        \n\n        \n          \n                   'suiteDone', \n        \n\n        \n          \n                   /** \n        \n\n        \n          \n                    * `specStarted` is invoked when an `it` starts to run (including associated `beforeEach` functions) \n        \n\n        \n          \n                    * @function \n        \n\n        \n          \n                    * @name Reporter#specStarted \n        \n\n        \n          \n                    * @param {SpecResult} result Information about the individual {@link it} being run \n        \n\n        \n          \n                    * @param {Function} [done] Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. \n        \n\n        \n          \n                    * @returns {} Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion. \n        \n\n        \n          \n                    * @see async \n        \n\n        \n          \n                    */ \n        \n\n        \n          \n                   'specStarted', \n        \n\n        \n          \n                   /** \n        \n\n        \n          \n                    * `specDone` is invoked when an `it` and its associated `beforeEach` and `afterEach` functions have been run. \n        \n\n        \n          \n                    * \n        \n\n        \n          \n                    * While jasmine doesn't require any specific functions, not defining a `specDone` will make it impossible for a reporter to know when a spec has failed. \n        \n\n        \n          \n                    * @function \n        \n\n        \n          \n                    * @name Reporter#specDone \n        \n\n        \n          \n                    * @param {SpecResult} result \n        \n\n        \n          \n                    * @param {Function} [done] Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. \n        \n\n        \n          \n                    * @returns {} Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion. \n        \n\n        \n          \n                    * @see async \n        \n\n        \n          \n                    */ \n        \n\n        \n          \n                   'specDone' \n        \n\n        \n          \n                 ], \n        \n\n        \n          \n                 queueRunnerFactory \n        \n\n        \n          \n               ); \n        \n    \n  \n\n\ni.e. specDisabled and suiteDisabled ?\nThanks!", "createdAt": "2019-06-27T16:33:30Z", "updatedAt": "2019-06-27T16:34:06Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "vasiliyb", "authorAssociation": "NONE", "participants_count": 1, "participants_data": [{"login": "vasiliyb", "company": null}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}, {"repo_name": "jasmine/jasmine", "issue_id": 1728, "url": "https://github.com/jasmine/jasmine/issues/1728", "title": "Browser error handling loses information.", "contents": "The browser onerror handler has multiple arguments:\nwindow.onerror = function(message, source, lineno, colno, error) { ... }\nBut jasmine seems to defeat the feature by only passing a single argument\nQueueRunner.prototype.execute = function() {\n    var self = this;\n    this.handleFinalError = function(error) {\n      self.onException(error);\n    };\n    this.globalErrors.pushListener(this.handleFinalError);\n    this.run(0);\n  };\nThen only the last handler is used:\n    var onerror = function onerror() {\n      var handler = handlers[handlers.length - 1];\n\n      if (handler) {\n        handler.apply(null, Array.prototype.slice.call(arguments, 0));\n      } else {\n        throw arguments[0];\n      }\n    };\nHow can we get the full stack?", "createdAt": "2019-06-27T20:05:24Z", "updatedAt": "2019-06-27T20:05:24Z", "closedAt": null, "state": "OPEN", "closed": false, "locked": false, "activeLockReason": null, "authorLogin": "johnjbarton", "authorAssociation": "CONTRIBUTOR", "participants_count": 1, "participants_data": [{"login": "johnjbarton", "company": "@google"}], "comments_count": 0, "comments_data": [], "reactions_count": 0, "reactions_data": [], "labels": [], "milestone": null}]